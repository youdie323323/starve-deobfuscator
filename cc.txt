(function () {
  const Vf = window;
  let Xf = 243;
  var Zf = 178;
  if (Zf > 12) {
    Zf = 123;
  }
  const $f = function (a) {
    let b = "";
    for (let c = 0; c < a.length; c++) {
      b += Vf.String.fromCharCode(a[c] ^ Xf++ % 255);
    }
    return b;
  };
  ᐃⲆ = [[169, 198, 163, 198, 165, 175, 129, 150, 153, 171, 171, 139, 100, 73, 76, 64, 97, 83, 84, 111, 82, 57, 63, 99, 110, 90, 91, 50], [114, 86, 68, 33, 78, 66, 97, 42], [124, 94, 35, 108], [126, 90, 39, 117, 121, 121, 112, 83, 70, 23, 18, 26], [114, 113, 112, 71, 78, 67, 127, 18], [106, 92, 94, 64, 86, 115, 124, 91, 97, 10, 107, 6], [94, 106, 120, 11, 18, 6, 46, 57, 32, 2, 0, 50, 17, 123, 31, 118], [47, 127, 38, 63, 10, 63, 3, 110], [48, 18, 111, 57, 2, 107, 34, 55, 13, 111, 38, 55, 3, 82, 47, 94], [7, 8, 48, 19, 10, 90, 48, 7, 61, 95, 22, 7, 19, 66, 63, 78], [45, 45, 56, 7, 26, 30, 71, 70], [38, 58, 40, 77, 225, 214, 204, 239, 209, 194, 234, 179, 210, 222, 242, 216, 213, 213, 220, 255, 242, 230, 175, 174], [247, 166, 220, 253], [251, 244, 204, 225, 248, 218, 167, 230, 250, 240, 159, 158], [254, 194, 155, 154], [241, 155, 236, 222, 245, 159, 248, 220, 225, 230, 135, 195, 214, 226, 240, 135, 217, 238, 131, 206, 238, 211, 244, 215, 162, 150, 151, 254], [157, 247, 255, 178, 146, 156, 243, 250, 168, 138, 152, 182, 130, 227, 148, 163, 182, 178, 235, 234], [187, 180, 227, 168, 190, 154, 231, 178, 186, 138, 184, 139, 189, 214, 180, 145, 139, 142, 215, 214], [142, 223, 219, 152, 169, 169, 164, 137, 174, 164, 203, 202], [154, 203, 207, 140, 158, 186, 184, 53], [98, 111, 85, 124, 97, 81, 81, 114, 109, 79, 77, 121, 108, 89, 62, 120, 117, 85, 127, 98, 119, 125, 77, 97, 64, 77, 42, 112], [127, 89, 38, 74, 64, 85, 30, 25], [71, 113, 30, 26, 115, 124, 121, 90], [79, 105, 67, 69, 107, 101, 117, 77, 96, 91, 113, 76, 90, 124, 105, 74, 107, 83, 121, 51, 37, 21, 21, 6, 33, 0, 21, 56, 43, 29, 30, 113], [46, 6, 5, 38, 53, 21, 106, 100, 48, 14, 21, 52], [0, 13, 35, 48, 62, 48, 14, 93], [0, 53, 86, 17, 63, 62, 45, 48, 8, 61, 57, 92, 12, 47, 82, 77], [18, 64, 37, 68, 32, 27, 33, 0, 29, 45, 45, 6, 25, 59, 23, 236, 216, 213, 209, 232, 230, 225, 186, 181], [208, 221, 217, 231, 223, 214, 213, 252, 243, 252, 193, 217, 244, 206, 217, 168, 195, 205, 174, 240, 254, 249, 162, 157], [248, 204, 245, 205, 252, 203, 223, 196, 202, 221, 150, 145], [204, 156, 249, 133], [210, 129, 229, 221, 236, 238, 253, 193, 224, 226, 208, 129], [231, 140, 199, 182, 152, 175, 133, 183, 148, 244, 254, 188, 170, 141, 242, 182, 172, 150, 157, 188, 133, 225, 145, 184, 182, 187, 145, 232, 184, 141, 226, 169], [191, 153, 230, 138, 128, 208, 181, 143], [188, 190, 165, 159, 139, 162, 128, 209], [140, 182, 189, 156, 147, 170, 190, 201], [175, 196, 161, 200, 171, 173, 131, 144, 159, 169, 86, 116, 102, 70, 78, 48, 85, 80, 89, 52], [105, 102, 96, 99, 111, 71, 65, 44], [65, 127, 90, 69, 66, 112, 37, 36], [121, 118, 74, 103, 68, 71, 113, 28], [120, 78, 29, 80, 66, 111, 101, 20], [73, 24, 126, 84, 76, 29, 68, 93, 103, 0, 102, 0, 84, 112, 109, 4], [111, 115, 118, 75, 92, 104, 44, 59, 24, 18, 121, 120], [28, 117, 30, 121, 28, 12, 32, 57, 20, 23, 32, 39, 48, 62, 2, 5, 12, 58, 2, 35, 0, 3, 13, 96], [4, 7, 8, 22, 0, 80, 46, 85, 5, 16, 85, 84], [14, 44, 85, 40, 55, 55, 34, 25, 36, 37, 62, 56], [21, 48, 62, 72, 25, 73, 41, 64], [28, 77, 181, 232, 216, 212, 222, 243, 229, 234, 222, 184, 232, 230, 244, 251, 215, 216, 193, 172], [246, 219, 222, 253, 244, 249, 214, 234, 195, 195, 206, 241], [250, 199, 238, 205, 193, 200, 226, 203, 252, 240, 157, 153], [249, 252, 153, 157, 225, 234, 246, 200, 209, 222, 242, 128], [239, 133, 208, 209, 217, 208, 242, 203, 228, 248, 149, 252], [160, 174, 130, 177, 156, 150, 245, 244], [147, 249, 164, 165, 173, 164, 150, 225], [177, 225, 146, 161, 181, 144, 160, 181], [140, 233, 138, 180, 143, 135, 174, 155, 184, 180, 213, 140, 132, 175, 131, 212], [136, 216, 174, 129, 140, 136, 205, 204], [171, 193, 205, 143], [172, 197, 174, 201, 172, 188, 144, 137, 164, 81, 60, 63], [90, 92, 87, 54, 94, 95, 71, 120], [82, 62, 117, 98, 86, 72, 91, 65, 73, 67, 91, 38], [116, 43, 79, 115, 120, 47, 79, 103, 126, 119, 20, 76], [117, 115, 73, 83, 67, 108, 65, 104, 72, 66, 103, 70, 74, 97, 12, 15], [80, 7, 103, 94, 83, 127, 108, 7], [97, 14, 107, 14, 106, 45, 23, 56, 32, 3, 124, 51, 36, 122, 31, 3, 17, 27, 11, 37, 21, 8, 24, 111], [0, 3, 96, 102, 26, 12, 3, 24, 56, 50, 23, 54, 58, 49, 92, 95], [7, 35, 9, 18, 61, 61, 63, 31, 49, 45, 80, 83], [53, 29, 72, 24, 23, 44, 56, 75], [22, 74, 47, 79, 42, 78, 68, 21, 37, 209, 188, 191], [210, 220, 207, 255, 222, 208, 226, 183], [239, 190, 225, 229, 235, 215, 246, 175], [201, 211, 249, 236, 244, 223, 225, 242, 254, 205, 160, 163], [198, 247, 217, 209], [192, 151, 247, 223, 197, 154, 221, 198, 253, 235, 251, 154, 203, 241, 140, 143], [234, 134, 205, 218, 238, 224, 243, 239, 218, 235, 140, 210, 221, 243, 151, 242], [154, 246, 189, 176, 164, 250, 159, 155, 146, 148, 159, 161], [172, 151, 151, 226, 178, 149, 232, 235], [180, 234, 161, 170, 130, 238, 136, 227], [141, 141, 153, 148, 186, 188, 180, 156, 170, 131, 175, 147, 136, 129, 171, 219], [182, 167, 196, 156, 145, 179, 160, 203], [174, 203, 179, 150, 162, 164, 175, 146, 85, 70, 68, 118, 102, 104, 80, 126], [81, 59, 92, 123, 110, 76, 51, 50], [117, 69, 91, 46], [117, 120, 47, 103, 122, 126, 39, 38], [120, 90, 114, 107, 122, 118, 27, 18, 64, 100, 27, 26], [124, 71, 124, 95, 117, 64, 120, 86], [105, 105, 96, 69, 109, 82, 11, 10], [90, 126, 108, 86, 88, 124, 3, 2], [35, 44, 20, 41, 32, 4, 123, 122], [16, 120, 115, 122, 46, 35, 12, 63, 50, 54, 111, 110], [14, 56, 58, 36, 58, 31, 20, 107, 57, 10, 38, 51], [1, 57, 48, 15, 6, 52, 91, 90], [12, 46, 83, 63, 8, 37, 36, 31, 18, 28, 17, 78], [34, 34, 26, 2, 28, 61, 63, 73, 45, 37, 52, 6, 217, 217, 233, 190], [231, 205, 204, 235, 234, 206, 179, 227, 214, 204, 179, 178], [243, 252, 196, 233, 247, 210, 175, 226, 251, 171, 207, 166], [197, 175, 167, 233, 193, 147, 206, 207], [254, 151, 240, 151], [202, 238, 236, 222, 246, 158, 248, 199, 234, 131, 231, 142], [214, 242, 143, 193, 219, 248, 135, 134], [216, 143, 248, 207, 164, 134, 174, 182, 158, 178, 251, 250], [171, 164, 156, 184, 150, 154, 136, 181, 138, 128, 239, 238], [142, 231, 144, 167, 186, 190, 231, 230], [132, 236, 231, 181, 130, 211, 154, 144, 190, 178, 168, 215], [139, 219, 188, 219, 186, 128, 168, 156, 148, 166, 164, 177, 144, 179, 164, 135, 154, 174, 175, 198], [165, 165, 180, 106], [98, 48, 85, 52, 83, 65, 107, 124, 83, 93, 50, 61, 105, 79, 50, 45], [114, 32, 69, 103, 79, 65, 89, 40], [122, 93, 119, 105, 71, 105, 34, 29], [64, 106, 105, 72, 127, 65, 26, 21], [75, 109, 109, 69, 119, 121, 88, 13], [80, 101, 98, 9], [87, 4, 2, 83, 90, 87, 2, 75], [103, 12, 105, 112, 16, 112, 122, 49, 33, 1, 17, 124, 45, 11, 118, 113], [41, 9, 25, 42, 53, 19, 110, 105], [15, 17, 1, 50, 59, 104, 9, 48, 12, 6, 9, 11, 0, 53, 90, 33, 60, 62, 53, 0], [51, 45, 61, 6, 15, 92, 61, 28, 39, 36, 57, 62, 36, 68, 78, 12, 26, 61, 66, 9, 39, 41, 74, 176], [226, 177, 209, 242, 230, 199, 186, 181], [235, 184, 190, 250, 238, 201, 217, 229], [243, 160, 166, 224, 207, 206, 217, 226, 192, 205, 255, 240], [199, 207, 162, 157], [197, 207, 207, 200, 193, 209, 154, 149], [243, 237, 146, 198, 201, 249, 158, 220, 211, 220, 226, 137], [214, 219, 225, 210, 219, 136, 142, 201, 231, 233, 241, 240], [163, 154, 149, 244, 159, 145, 150, 245], [144, 157, 153, 167, 156, 252, 183, 184, 178, 225, 158, 233], [183, 129, 238, 179, 131, 139, 230, 225], [140, 134, 137, 139, 128, 181, 218, 160, 135, 212, 210, 216, 179, 178, 131, 220], [183, 166, 185, 137, 168, 170, 161, 132, 151, 196, 195, 197], [160, 200, 131, 138, 158, 204, 85, 60], [91, 110, 82, 53, 95, 86, 53, 52], [105, 56, 74, 116, 106, 78, 45, 44], [112, 84, 45, 125, 76, 80, 78, 114], [121, 41, 112, 104], [124, 72, 102, 21], [65, 17, 114, 86, 124, 112, 102, 25, 112, 124, 126, 103, 76, 66, 98, 93, 87, 114, 9, 8], [84, 96, 110, 81, 89, 8, 106, 68, 100, 105, 18, 45, 39, 11, 21, 120], [19, 116, 26, 48, 43, 28, 121, 35], [42, 125, 22, 40, 48, 52, 105, 104], [14, 102, 97, 46, 59, 12, 104, 96], [7, 8, 46, 81, 3, 52, 93, 16], [63, 63, 34, 3, 60, 44, 84, 80], [55, 93, 73, 4, 40, 38, 77, 68, 18, 48, 46, 0, 43, 44, 73, 19, 28, 56, 213, 188], [224, 177, 177, 232, 223, 208, 218, 229], [238, 211, 194, 225, 237, 228, 232, 249, 240, 254, 240, 164, 207, 192, 252, 245], [192, 211, 214, 245, 250, 175, 204, 213, 251, 244, 192, 201], [252, 255, 226, 208, 200, 152, 229, 144], [205, 157, 220, 223, 208, 212, 137, 136], [212, 133, 140, 132], [222, 227, 253, 128], [221, 210, 150, 172, 144, 132, 168, 191, 162, 128, 142, 188, 147, 249, 153, 240], [172, 253, 229, 187, 176, 225, 225, 229, 140, 143, 176, 233, 184, 140, 138, 168, 186, 142, 221, 220], [184, 142, 162, 142, 188, 182, 213, 212], [139, 188, 217, 152, 180, 183, 186, 184, 168, 164, 152, 155, 151, 191, 169, 196], [153, 201, 170, 205, 170, 51, 75, 114, 89, 83, 48, 54, 94, 80, 91, 122, 105, 62, 57, 51], [85, 71, 36, 121], [71, 67, 83, 38, 118, 89, 36, 39], [122, 75, 40, 107, 69, 120, 107, 107, 117, 97, 20, 107], [69, 111, 16, 66, 113, 109, 16, 19], [77, 2, 4, 72, 87, 115, 12, 65], [84, 85, 111, 78, 89, 15, 103, 82], [101, 7, 23, 56, 39, 3, 41, 51, 30, 16, 27, 58, 41, 126, 121, 115], [46, 7, 100, 40, 9, 12, 31, 102, 6, 53, 15, 55, 57, 111, 23, 50], [60, 82, 9, 18, 57, 10, 55, 42, 61, 48, 2, 87], [8, 43, 43, 27, 13, 29, 29, 7, 41, 68, 68, 0, 45, 63, 47, 9], [34, 78, 5, 14, 37, 215, 180, 178, 208, 195, 211, 246, 221, 186, 225, 186], [233, 191, 199, 254, 213, 199, 164, 162, 202, 204, 199, 230, 245, 170, 173, 167], [194, 174, 164, 235, 197, 245, 205, 215, 193, 201, 243, 223, 246, 255, 156, 196, 201, 235, 248, 147], [204, 130, 231, 130], [210, 227, 128, 204, 211, 255, 255, 207, 223, 251, 209, 214, 219, 135, 148, 255], [154, 246, 131, 179, 146, 143, 177, 162, 174, 154, 159, 251, 172, 151, 132, 239], [138, 140, 135, 190, 181, 178, 144, 231], [185, 238, 232, 170, 187, 184, 179, 142], [128, 214, 163, 146, 132, 175, 145, 134, 190, 129, 171, 222, 181, 161, 204, 207], [151, 179, 204, 160, 161, 189, 183, 174, 159, 180, 183, 142, 98, 108, 97, 62], [101, 82, 51, 108, 82, 81, 98, 91, 86, 106, 51, 50], [73, 124, 126, 102, 78, 84, 43, 42], [125, 93, 95, 38], [127, 112, 72, 101, 67, 102, 27, 86, 71, 23, 112, 114, 77, 113, 104, 71], [79, 31, 23, 30, 83, 92, 124, 95], [110, 116, 11, 10], [97, 11, 3, 80, 102, 108, 3, 2], [36, 9, 46, 52, 30, 20, 123, 122], [25, 17, 28, 32, 45, 26, 118, 114], [50, 22, 62, 41, 48, 18, 0, 34, 2, 1, 19, 102], [62, 111, 107, 51, 2, 12, 48, 15, 62, 36, 91, 90], [57, 4, 6, 5, 63, 58, 91, 95, 62, 27, 32, 49, 23, 27, 60, 31, 29, 40, 71, 70], [29, 58, 18, 10, 228, 192, 191, 190], [221, 183, 254, 247, 210, 222, 191, 187, 219, 204, 179, 178], [244, 252, 212, 224, 240, 194, 195, 170], [252, 222, 163, 171, 197, 202, 233, 162], [246, 147, 244, 202, 241, 151, 159, 205, 201, 155, 252, 155], [245, 159, 214, 153, 253, 203, 251, 142], [238, 226, 131, 223, 225, 212, 194, 215, 230, 252, 131, 130], [163, 175, 169, 254], [165, 247, 144, 242, 171, 129, 128, 167, 175, 254, 131, 242], [138, 191, 152, 165, 182, 132, 235, 234], [129, 183, 140, 235, 184, 154, 231, 170], [179, 182, 211, 139, 190, 215, 179, 218], [187, 188, 184, 166, 190, 188, 211, 210], [147, 182, 138, 155, 144, 178, 172, 129, 155, 148, 202, 198], [157, 186, 146, 110, 96, 67, 62, 57], [81, 52, 77, 121, 83, 93, 69, 60], [111, 99, 73, 34, 112, 69, 119, 124, 113, 81, 46, 97], [123, 93, 119, 105, 71, 72, 123, 80, 123, 106, 113, 75], [68, 126, 105, 106, 74, 68, 97, 68, 72, 127, 18, 13], [83, 1, 113, 92, 108, 4, 91, 8, 92, 107, 6, 1], [104, 123, 84, 125], [24, 47, 21, 114, 36, 17, 17, 49, 24, 121, 29, 53, 41, 35, 25, 5, 51, 37, 110, 105], [55, 17, 110, 107], [11, 15, 106, 13, 11, 24, 52, 93], [57, 83, 90, 29, 1, 46, 53, 24, 49, 88, 33, 4, 14, 92, 58, 77], [40, 42, 49, 3, 35, 27, 33, 1, 26, 72, 23, 10, 31, 25, 66, 189], [226, 197, 197, 253, 223, 209, 178, 184, 221, 231, 178, 231, 215, 223, 178, 173], [200, 160, 235, 228, 207, 193, 162, 168, 206, 203, 166, 161], [249, 243, 166, 211, 197, 245, 146, 200], [196, 254, 233, 231, 240, 255, 159, 145], [244, 217, 146, 141], [232, 229, 249, 206], [239, 238, 249, 210, 224, 226, 249, 208], [228, 140, 134, 181, 163, 175, 149, 174, 161, 135, 250, 245], [170, 141, 242, 182, 172, 150, 157, 160, 179, 224, 231, 233], [182, 229, 133, 161, 184, 141, 238, 178, 188, 137, 133, 213], [183, 181, 143, 145, 129, 162, 170, 145, 184, 178, 161, 149, 180, 182, 132, 205], [168, 193, 185, 152, 172, 174, 165, 148, 168, 148, 173, 145, 167, 147, 86, 120], [97, 75, 78, 105, 98, 106, 94, 124, 110, 78, 94, 97, 84, 98, 86, 32, 112, 91, 69, 40], [117, 37, 78, 117, 64, 90, 33, 32], [124, 72, 102, 21, 116, 100, 29, 20, 127, 21, 64, 120, 72, 25, 64, 88, 74, 103, 125, 12], [80, 0, 118, 5, 87, 96, 1, 76, 89, 76, 1, 0], [100, 104, 117, 43, 32, 113, 22, 41, 16, 17, 2, 3, 27, 121, 117, 57, 45, 8, 105, 36, 8, 4, 97, 101], [12, 57, 18, 47, 56, 14, 18, 50, 7, 7, 42, 37, 0, 81, 54, 9], [5, 32, 46, 16, 9, 89, 57, 80], [55, 92, 58, 29, 43, 43, 38, 25], [47, 68, 46, 0, 25, 22, 42, 8, 26, 57, 210, 241, 224, 212, 209, 184], [228, 192, 228, 252, 208, 222, 252, 251, 239, 216, 164, 172], [200, 196, 161, 254, 204, 192, 201, 164], [249, 220, 228, 245, 199, 173, 246, 206, 192, 145, 220, 206, 252, 255, 225, 148], [255, 238, 149, 231, 250, 195, 226, 229], [208, 228, 242, 194, 213, 240, 212, 204, 224, 204, 129, 128], [228, 210, 249, 180, 166, 130, 249, 248], [156, 245, 158, 249, 155, 166, 245, 252, 172, 162, 130, 161, 176, 190, 176, 145, 180, 144, 180, 181, 184, 181, 142, 142, 132, 136, 174, 209], [128, 180, 162, 213, 191, 213, 143, 212], [137, 217, 186, 221, 187, 168, 201, 139, 147, 171, 166, 133, 148, 197, 204, 196], [152, 172, 197, 150, 159, 87, 91, 55], [97, 67, 60, 112, 100, 77, 95, 127, 81, 77, 48, 51], [86, 34, 40, 103, 112, 38, 44, 101, 77, 73, 36, 39], [120, 113, 75, 100, 124, 103, 24, 87, 64, 22, 115, 115, 125, 112, 65, 26], [73, 107, 65, 91, 117, 102, 99, 68], [80, 7, 119, 69, 86, 111, 119, 86], [89, 14, 8, 71, 101, 23, 7, 41, 38, 28, 11, 118, 30, 16, 27, 38, 18, 126, 37, 38, 45, 61, 53, 62], [49, 3, 3, 34, 53, 107, 19, 111], [2, 111, 23, 50, 6, 56, 51, 14, 49, 51, 29, 10, 5, 63, 63, 31, 15, 45, 80, 83], [12, 55, 55, 7], [16, 70, 59, 30, 21, 63, 44, 71], [24, 27, 64, 67], [28, 199, 249, 234, 230, 213, 184, 187], [221, 229, 229, 249, 233, 202, 223, 226, 234, 216, 192, 175], [202, 204, 215, 225, 205, 207, 172, 241, 202, 174, 245, 238, 253, 231, 240, 159], [246, 201, 243, 200, 245, 240, 193, 221], [201, 251, 193, 158, 245, 232, 251, 255, 210, 227, 132, 198, 211, 249, 132, 135], [225, 210, 247, 210, 229, 152, 177, 174], [154, 246, 189, 174, 166, 159, 248, 166, 145, 141, 240, 243], [174, 135, 224, 186, 137, 230, 131, 133, 141, 143, 236, 177, 129, 132, 151, 174, 189, 141, 130, 223], [129, 163, 220, 144, 132, 174, 167, 218, 178, 180, 167, 222], [181, 194, 137, 132, 170, 153, 179, 133, 166, 175, 129, 141, 154, 187, 184, 195], [100, 86, 55, 112, 102, 55, 72, 117], [81, 59, 51, 126, 104, 69, 68, 121, 114, 80, 47, 46], [112, 39, 80, 103, 124, 88, 39, 38], [127, 47, 114, 41, 122, 112, 31, 30], [71, 23, 31, 94, 76, 104, 23, 22], [79, 30, 124, 71, 84, 121, 100, 73], [109, 98, 120, 7, 89, 97, 96, 87], [110, 83, 104, 74, 25, 114, 16, 51, 38, 119, 114, 122], [44, 1, 0, 35, 46, 35, 0, 63, 52, 22, 62, 37, 54, 50, 107, 106], [58, 107, 111, 49, 5, 10, 107, 40, 2, 38, 36, 86, 0, 34, 14, 30, 10, 90, 60, 5, 13, 44, 83, 82], [33, 28, 30, 29, 34, 34, 26, 2, 28, 61, 35, 75, 45, 37, 52, 6, 217, 217, 233, 190], [221, 183, 192, 242, 209, 187, 220, 248, 217, 191, 192, 224, 202, 198, 192, 162, 246, 210, 192, 252, 206, 244, 220, 232, 248, 202, 200, 229], [193, 246, 151, 212, 192, 253, 247, 154], [202, 254, 252, 209, 207, 159, 232, 193, 234, 224, 143, 142], [237, 219, 224, 135, 220, 254, 131, 206, 223, 202, 131, 130], [154, 243, 148, 243, 144, 146, 170, 180, 170, 142, 166, 177, 150, 154, 128, 185, 178, 188, 128, 169], [133, 141, 156, 174, 129, 129, 182, 152, 184, 138, 132, 178, 186, 185, 171, 222], [134, 215, 211, 140, 139, 132, 172, 133, 143, 222, 188, 135, 147, 159, 163, 206], [150, 178, 207, 153], [157, 173, 191, 198], [159, 207, 168, 48, 82, 85, 54, 52, 95, 94, 77, 58, 80, 93, 124, 49], [108, 89, 58, 125, 115, 101, 46, 41], [71, 81, 81, 40, 67, 75, 38, 33], [71, 89, 115, 90, 69, 101, 101, 81, 124, 20, 113, 102, 75, 24, 121, 64, 79, 111, 18, 13], [99, 95, 75, 66, 108, 110, 102, 10, 119, 127, 125, 69, 94, 83, 121, 117], [32, 5, 21, 52, 31, 116, 47, 120], [19, 18, 35, 59, 44, 22, 5, 60, 50, 37, 110, 105], [12, 49, 106, 101], [3, 29, 98, 111, 63, 57, 98, 93], [59, 37, 37, 84, 60, 55, 90, 85], [48, 61, 37, 26, 14, 25, 82, 77], [16, 64, 37, 65, 22, 1, 74, 69], [32, 72, 19, 16, 36, 76, 12, 189], [226, 197, 197, 253, 230, 180, 209, 207, 235, 205, 178, 228, 233, 207, 178, 173], [242, 255, 213, 164, 207, 199, 170, 165], [253, 169, 209, 236, 249, 217, 202, 157], [197, 234, 233, 212, 199, 247, 154, 149], [240, 253, 249, 199], [206, 233, 233, 201, 210, 128, 229, 254, 215, 216, 230, 133], [221, 136, 211, 204, 228, 140, 216, 253], [163, 133, 175, 190, 161, 135, 250, 245], [170, 249, 157, 182, 174, 137, 153, 165, 139, 147, 238, 233], [182, 228, 145, 234, 131, 139, 230, 225], [185, 153, 230, 173, 131, 209, 135, 136, 134, 141, 169, 128, 138, 216, 190, 209], [142, 131, 214, 193, 147, 159, 162, 201], [145, 129, 202, 197], [160, 151, 189, 150, 156, 204, 100, 120, 96, 48, 82, 112, 92, 66, 70, 127, 104, 76, 53, 116], [109, 98, 70, 102, 112, 84, 82, 127, 76, 70, 37, 36], [127, 95, 85, 32], [71, 113, 118, 76, 120, 78, 114, 92], [69, 111, 126, 83, 75, 106, 17, 16], [76, 29, 5, 93, 80, 94, 101, 8], [85, 127, 114, 79, 94, 124, 5, 87, 92, 13, 55, 124], [33, 46, 18, 63, 34, 16, 121, 37], [19, 120, 6, 33, 23, 23, 2, 61, 7, 96, 6, 57, 53, 58, 14, 47, 15, 28, 26, 40, 60, 50, 54, 24], [0, 36, 8, 16, 60, 50, 38, 1, 9, 42, 81, 80], [55, 93, 24, 25, 17, 24, 58, 3, 44, 48, 46, 59, 30, 58, 65, 64], [26, 55, 202, 233, 219, 177, 209, 184], [213, 208, 189, 185, 199, 241, 198, 207, 237, 225, 218, 249, 247, 194, 169, 168], [245, 250, 222, 236, 192, 220, 165, 233], [252, 200, 204, 212], [248, 228, 242, 204, 194, 240, 203, 148], [242, 154, 149, 216, 244, 247, 211, 140], [232, 222, 216, 198, 212, 246, 133, 132], [227, 136, 246, 209, 231, 231, 146, 173, 144, 241, 130, 181, 164, 160, 245, 244], [147, 248, 154, 180, 173, 253, 233, 168], [177, 190, 130, 189, 140, 150, 229, 228], [131, 140, 164, 170, 191, 152, 165, 220], [135, 162, 217, 216], [132, 138, 209, 218], [137, 217, 186, 152, 180, 174, 205, 204], [168, 158, 140, 131, 148, 196, 177, 196], [163, 150, 170, 147, 159, 87, 52, 83, 90, 92, 87, 105], [100, 59, 91, 115, 105, 62, 121, 98], [86, 65, 44, 47], [112, 38, 91, 111, 77, 79, 79, 111], [127, 91, 75, 42, 123, 101, 103, 81, 66, 115, 65, 83], [67, 111, 69, 94, 113, 125, 16, 19], [118, 2, 73, 94, 106, 108, 127, 124, 85, 86, 107, 86, 88, 82, 103, 86, 93, 1, 124, 127], [26, 118, 124, 53, 37, 123, 0, 119], [47, 11, 27, 122, 43, 21, 27, 58, 48, 102, 3, 37, 54, 15, 108, 54], [56, 110, 11, 110, 11, 55, 13, 17, 1, 35, 9, 28, 61, 63, 39, 28, 9, 1, 63, 20], [12, 29, 39, 6, 17, 71, 47, 26, 37, 32, 35, 22, 25, 18, 47, 51, 30, 216, 207, 178, 217, 211, 176, 234, 228, 239, 180, 183], [233, 203, 219, 251, 213, 163, 195, 253], [202, 204, 195, 166, 245, 171, 219, 233, 194, 196, 246, 163], [198, 146, 152, 215, 193, 201, 243, 204, 195, 239, 255, 193], [241, 193, 193, 219, 245, 241, 140, 143], [209, 134, 128, 218, 212, 214, 243, 204, 216, 219, 128, 131], [220, 243, 131, 177, 162, 156, 148, 251], [157, 144, 161, 166, 146, 187, 240, 243], [152, 149, 224, 159, 128, 156, 135, 230, 180, 158, 147, 182, 184, 132, 139, 178, 188, 211, 176, 223], [129, 214, 208, 159, 189, 176, 167, 154, 142, 129, 184, 211], [140, 183, 200, 193], [169, 179, 204, 130, 174, 175, 149, 143], [162, 207, 183, 146, 89, 89, 80, 111, 85, 107, 80, 106, 82, 100, 92, 114, 89, 63, 55, 62, 115, 124, 92, 127], [118, 39, 35, 100, 122, 43, 92, 112], [127, 46, 76, 119, 67, 79, 115, 30], [71, 98, 96, 22, 75, 27, 124, 64], [77, 122, 31, 71, 106, 3, 100, 103, 86, 98, 15, 65, 92, 126, 82, 75, 94, 80, 90, 121, 34, 44, 4, 42, 38, 2, 16, 44], [43, 1, 0, 39, 22, 32, 34, 123], [53, 0, 111, 110], [48, 2, 99, 60, 2, 14, 0, 43, 62, 48, 8, 52], [58, 38, 14, 25, 61, 87, 95, 18, 10, 4, 60, 1, 8, 44, 83, 82], [18, 54, 75, 29, 57, 33, 55, 74], [27, 20, 67, 75, 37, 37, 44, 19], [227, 198, 250, 235, 225, 210, 204, 239, 209, 187, 254, 216, 213, 213, 220, 227], [243, 162, 192, 255, 247, 212, 171, 170], [193, 171, 220, 232, 254, 220, 163, 162], [193, 246, 151, 217, 192, 226, 224, 210, 241, 155, 255, 150], [207, 158, 252, 154, 210, 246, 231, 142], [215, 216, 224, 223, 226, 241, 214, 239, 216, 250, 248, 143, 154, 144, 255, 254], [167, 171, 161, 250]];
  var n = 13;
  if (n == 4) {
    n = 34;
  }
  var aj = 114;
  if (aj === 13) {
    aj = 55;
  }
  var bj = 187;
  if (bj >= 1) {
    bj = 162;
  }
  for (let a = 0; a < ᐃⲆ.length; a++) {
    ᐃⲆ[a] = Vf.atob($f(ᐃⲆ[a]));
  }
  var cj = 5;
  if (cj >= 5) {
    cj = 114;
  }
  Math.floor(214[214 .ⵠΔⵠΔ]);
  var dj = 165;
  if (dj > 0) {
    dj = 247;
  }
  var ej = 12;
  var fj = 55;
  if (fj == 7) {
    fj = 157;
  }
  if (ej == 12) {
    ej = 194;
  }
  const gj = 14;
  const hj = ["Peut aussi récupérer des minéraux", "DESERT", "#FFF", "111_111_011", "111_111_110", "#352b10", "init", "forest", " BACK TO THE GAME", "#2b6664", "gm", "auth2", "#d588f1", "Food: 10", "#030d14", "#EBF2F0", "_on", "#57442a", "#b29c32", "#031619", "000_011_000", "#634828", "#0d2e33", "Essen: 100", "#073030", "#43aa82", "quit_chronoquest", "servselect", "#0d1b1c", "#ac222a", " Gather 1 amethyst", "#f0f4f0", "#7d6144", "#16695f", "#0F464C", "gapi", "#7d5234", "#083326", " you can only hit people who are flying too", "#183f3f", "#280e09", "Урон по строениям: 1", "You are less cold, less thirsty, and less hungry", "Grab herum um Dreck, Eis und Sand zu bekommen", "000_110_000", "Chapka", "object", "000_111_011", "#fef4f4", "#242330", "#077b49", "#041c21", "#C09D6F", "timeremain_", "#2b5c48", "#660000", "#322413", "Daño para estructuras: 1", "#342C7C", "#f9efeb", "starve_mapping", "&userid=", "cursor", "azerty_ing", "Wytrzymałość: 2000", "kit", "#564021", "#A37943", "#ee593d", "killdragon_1", "#d2c77b", "Oh, yeah? Is there crab in the crab sticks?", "dano: 2", "Durabilité: 2000", "110_111_000", "durabilidade: 2000", "#0B6A84", "claim_rewards", "#120202", "running", "Pixelbitie", "starve_cancel", "útil para destruir construções", "#3dc4c0", "You feel a great power emanating from this orb", "#86d4e0", "Czas życia: 8 dni", "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.", "dano em construções: 1", "playing", "011_011_011", "010_111_010", "#89d1d4", "#4d4a2e", "send", "aloner", "Relax in this confortable bed", "WINTER", "011_011_010", "#3f332a", "#082b22", "Kill", "undefined", "011_011_000", "011_111_000", "#5f6061", "#187484", "amethyst_2", "Winter", "#34255d", "111_111_010", "#123d38", "application/x-www-form-urlencoded", "#b15ecf", "Crab Claw", "#5cc5ce", "active", "Starve.io ", "110_111_110", "Прочность: 700", "#EFE4B4", "_blank", "010_111_111", "#111316", "#072824", "#8a938e", "You will be cured faster", "#43b5af", "#0c0c0d", "You can also gather minerals", "#e7dc8f", "#a08f47", "#FFFFFF", "#C6AF81", "#4C3B19", "Прочность: 2000", "#a33e2b", "Durability: 700", "#3ba578", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16", "rewardquest", "Bed", "000_111_110", "#1b170c", "On-Hit Damage: 3", "#5cccc4", "#21112D", "img/avatar-player14.png", "#8359d3", "lock_team", "#A5A244", "#83827e", "011_111_110", "buy_kit", "Nützlich um Gebäude zu zerstören", "010_111_000", " Be peaceful", "audio/ambience.mp3", "#092813", "cave o chão para pegar terra, areia e gelo", "serverAddressInput", "Comida: 100", "#2E85A0", " Claim rewards", "#c27add", "Building method: Free. Press G to change", "#0e3838", "Durability: 400", "Time Remaining", " Share on Twitter", "#614627", "number", "durabilidade: 1000", "#0b2326", "#f4efc6", " Share on Facebook", "GET", "Allow you to calm crabs, and heal them", "2d", "#29997c", "none", "#877d36", "Survive without losing life", "wtb", "#c7a726", "#A89F67", "Продолжительность: 8 дней", "#c26de0", "treasure_chest_4", "#0a0b0c", "low_ing", "000_011_011", "#25c5d6", "Так же вы можете получить ресурсы", "#c04933", "#5E3C10", "gw", "#fff", "#d45ce5", "time", "Durabilité: 1000", "Easter Egg", "name", "fade", "FB", "#163A3A", "#bbbbbb", "Sushui", "Uuunnnggg...", "#75827D", "You are the king of crabs!", "Crab claws can also be eaten", "function", "#58452b", "#a7983c", " QUIT", "#b29e4d", "px", "CLAIM REWARD!", " Open 5 treasure chests", "Lebenszeit: 8 Tage", "Creuse la terre, le sable et la neige", "También puedes conseguir minerales", "111_111_111", "#77371f", "plm", "#252B28", "la", "010_110_010", "#163a3a", "#83ddd4", "Jedzenie: 100", "#D8DC74", "#9E8456", "Защита от игроков: 4, Защита от животных: 16", "Crab sticks", "#e9dad9", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16", "#1f4948", "Wytrzymałość: 1000", "#042b30", "Schaden: 2", "string", "click", "#0F3A24", "#747471", "#86d0d1", "#785f4c", "#9baaa3", "000_010_000", "eject_member", "#63c9d6", "#b864d6", "#394841", "shop_starterkit", "Building Damage: 1", "#e8e8e8", "Content-Type", "spectator", "110_110_000", "#816511", "#B56D18", "#2b280a", "#ff0000", "claim_reward_", "load", "typequest", "Schaden an Gebäuden: 1", "cancel_sure_delete", "Durabilidad: 2000", "Sandwich", "010_111_011", "Cactus", "score", "event", "Прочность: 1000", "Obrażenia do budowli: 1", "#59c9c0", "Chrono Quests", "#382e19", "#9b2b25", "#dfd1cb", "Durabilidad: 700", "home_craft", "mousedown", "stop", "durabilidade: 700", "#1d051e", "#313041", "#1d1d22", "Réchauffe en dehors de l'eau et dans l'hiver", "#182935", "#29aaa1", "#eda80d", "Animals Defense: 13", "000_111_111", "#be8d50", "cs", "Damage: 5", "#e45936", "Haltbarkeit: 1000", "#0e3022", "Cava para conseguir tierra, arena y hielo", "starve_aliasing", "#73dde5", "#1a4935", "#68622D", "Урон: 2", "high_ing", "Du kannst auch Mineralien bekommen", "Players Defense: 4, Animals Defense: 16", "Birth: 4min", "#665329", "#263947", "#b7252c", "Hält dich warm außerhalb von Wasser und Winter", "110_110_010", ".md-languages label button", "#523e26", "#44301b", "#3A2A0D", "010_110_000", "010_111_110", "010_011_000", "Crab Helmet", "#BB0000", "#c4bc51", "#596560", "#8255b5", "#adbcb5", "#67766F", "Te calienta en invierno y fuera del agua", "#184747", " Collect 100 bread in deep winter", "#A9D6D3", "middle", "Damage: 1", "MADBalgouthi", "você também pode pegar minerais", "#654320", "#123b3f", "#462966", "When you are flying,", "#B26F31", "#4d2d14", "Building method: Grid. Press G to change", "#200333", "Totem", "Lifetime: 8 days", "time_finished_", "Haltbarkeit: 700", "#043c37", "#2b7c57", "#115E60", "pizza wa", "Useful to destroy buildings", "#c67933", "011_111_111", "#af59cd", "Damage: 30", "XPayStationWidget", "011_111_011", "#8c29aa", "#35b1b5", "#4eb687", "#3fc9c9", " Reward", "dw", "You can not attack when you use it", "Damage: 14", "000_111_000", "_number", "#7C5A29", "#211108", "px Baloo Paaji", "Ciepło w i poza zimą", "000_110_110", "You can buy items on the shop in the next game with your points", "loaded", "input_ratio", "Players Defense: 4", "Durabilité: 700", "Food: 20", "starve_info_box", "#1678a2", "Dégâts: 2", "#092b29", "#47341d", "play", "Uuunnnggg", "#281A49", "#214C4B", "#124949", "#EAEAEA", "110_111_010", "#0a2f2b", "starve_safe", "Damage: 24", "canvas", "000_011_010", "#432516", "#7c4908", "inline-block", "#262114", "#1a4545", " After 1 day, survive in winter", "</div>", "FOREST", "#efd435", "#281C08", " Constraints", "#c3be9a", "#53A4D5", "fo", " Collect 1 dragon heart", "defesa de jogadores: 4, defesa de animais: 16", "comida: 100", "#C1C0C0", "Bueno para destruir estructuras", "#2b9390", "Используется для разрушения зданий", "account_nickname_input", "#c4a23a", "Emerald Machine", "sw", "#B6222A", "#674C2A", "#0a2d18", "Starve.io", "source-over", "#80500b", "Durée de vie: 8 jours", "#c1b06b", "Défense: 4, Défense contre animaux: 16", "#54a4ba", "#2A8B9B", "#C0BF55", "destination-out", "011_111_010", "#5E3E1A", "#cd98e5", "110_110_110", "Копайте землю, чтобы получить грязь, лед и песок", "starve_quests", "#74ede6", "111_111_000", "#032b23", "010_010_010", "110_111_011", "#388AC7", "rgba(255, 255, 255, 0)", "Możesz także zdobyć minerały", "#33b4e4", "Damage: 2", "#ffffff", "#232828", "Crabs follow you", "survive20min_3", "Pomocny w niszczeniu budowli", "#1F343F", "Wytrzymałość: 700", "#C98435", "#24878f", "Utile pour détruire les bâtiments", "110_111_111", "#939995", "#252525", "Durability: 1000", "qwerty_ing", "mouseup", "#b3e0e3", "#4c3a15", "re", "#d7990c", "Taco4Life", "Communist", "'Baloo Paaji', sans-serif", "mousemove", "#242503", "isl", "nickname_input", "#4c3b19", "bread_6", "#392C16", "game_body", "#485e66", "Warm outside water and in winter", "#123335", "#bfb360", "Защищает от холода вне воды.", "__default", "round", "010_011_011", "010_110_110", "#555555", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "eogito", "de", "Damage: 20", "#b2d4d1", "#73583e", "Widget", "Daño: 2", "nickname_block", "_trad_number", "#7f6d52", "#3da34d", "#0b3432", "#95d5d8", "#0a4049", "#171a19", "000_111_010", "LAVA", "#afac98", "team_box", "#000000", "They can't hit you and you can't hit them", "000_010_010", "#454545", "#46c2c9", "#e0f2f6", "Anyone want to play?", "#e2cf27", "spatial", "recipe_craft", "#07393d", "Damage: 4", "Crab Spear", "Damage: 3", "opacity", "constraintquest", "#136167", "#1f5453", "#1e2021", "#133a2b", "Score", "000_110_010", "iblk", "#328587", "#764eb5", "#000", "#ddcf8a", "pos", "volume", "#e4efe8", "timeremainingquest", "Days survived", "#1a7961", "010_010_000", "inv_shop", "#09373F", "#a9e4ed", "#0a2728", "loaderror", "Durability: 2000", "Building Damage: 4", "#87d2e6", "#6a7570", "nu", "winter_7", "#3d2a6e", "#174a51", "#939393", "#3e3c25", "#46554D", "#574122", "#493e26", "#EDCE4F", "#554139", "fod", "#1f773d", "points", "010_011_010", "CrysTal", "Dig the ground to gather dirt, ice, and sand", "Durabilidad: 1000", "Game", "#347f93", "#032428", "#141414", "#58645F", "Haltbarkeit: 2000", "starve_quality", "#1f343f", "upfiz", "dont_hit_5", "#2a2938"];
  const u = 20;
  const b = 12;
  const v = false;
  const d = true;
  const c = -8;
  const ij = 2;
  const m = 15;
  const p = -4;
  const jj = 0;
  const f = 4;
  const z = 16;
  const y = 11;
  const w = 255;
  const kj = undefined;
  const A = 100;
  const k = 19;
  const x = b;
  const C = ij;
  const J = 256;
  const M = v;
  const B = 3;
  const D = kj;
  const E = 7;
  const I = 9;
  const P = 13;
  const Q = 18;
  const F = 17;
  const R = 2;
  const j = P;
  const L = I;
  const S = 8;
  const lj = 10;
  const G = 6;
  const q = 1 << C;
  const N = Q;
  const H = 6;
  const O = 1 << x;
  const T = 1 << y;
  const U = 5;
  const K = F;
  const V = 1;
  const W = 4;
  const Z = D;
  const X = S;
  const Y = P;
  const _ = H;
  const ee = b;
  let ie;
  let ne;
  let oe;
  const re = gj;
  const le = d;
  const ge = z;
  let te;
  const mj = f;
  const ue = v;
  const ve = re;
  const ce = V;
  const de = x;
  const me = A;
  let pe;
  let Ce;
  let nj;
  const oj = mj;
  let ye;
  let pj = [];
  const Pe = ue;
  let Ae = "_";
  const qj = P;
  let xe;
  let rj;
  const sj = K;
  let Be;
  let tj = D;
  let uj = D;
  const vj = u;
  let Se;
  let wj = Z;
  let xj = kj;
  let yj = kj;
  let zj = D;
  const Aj = V;
  const Le = C;
  let We = Z;
  const Bj = M;
  let Oe;
  const Cj = U;
  const Ne = m;
  const He = E;
  const Ue = J;
  const Ye = vj;
  const Ke = lj;
  let Ve = Z;
  const Dj = k;
  const Ze = L;
  let $e;
  let Ej;
  const Fj = jj;
  let ti;
  let Gj;
  const Hj = He;
  const ri = w;
  let ai;
  const Ij = Hj;
  const hi = H;
  const li = kj;
  let gi;
  let Jj = li;
  const Kj = ge;
  const vi = d;
  let di = li;
  const Lj = K;
  let mi;
  let Mj;
  let Nj = Z;
  const Oj = A;
  let fi = Z;
  const Pj = y;
  let yi;
  let Qj;
  const Rj = U;
  const Ai = oj;
  let ki;
  let Sj = li;
  let Tj = li;
  let Uj = kj;
  const Vj = F;
  let Di;
  let Wj;
  let Xj = D;
  const Yj = N;
  const Qi = li;
  const _i = B;
  let Fi;
  let Zj = Qi;
  const $j = Kj;
  let Li;
  const _j = vj;
  const Gi = w;
  const Oi = X;
  const qi = k;
  let Ni = li;
  const ak = J;
  const Ui = j;
  const Yi = Oj;
  let Ki = D;
  const bk = Dj;
  let Xi;
  let ck;
  let dk;
  let ek = jj;
  if (!Vf.WebAssembly || !Vf.WebAssembly.instantiate) {
    ΔΔΔᐃᐃⲆⲆΔⲆ();
  }
  const fk = {
    Date: Date
  };
  const gk = Gi;
  Vf.WebAssembly.instantiate(Uint8Array.from(Vf.atob(""), function (a) {
    return a.charCodeAt(0);
  }), fk).then(function (a) {
    ie = a.instance;
    ne = ie.exports;
    oe = ne.memory;
    te = oe.buffer;
    pe = ne.__pin;
    Ce = ne.__unpin;
    nj = ne.__new;
    ye = ne.__collect;
    Ae = "_";
    for (let b = Fj; b < 30; b++) {
      pj[b] = ne[Ae + b];
    }
    xe = ne.__rtti_base;
    rj = new Float32Array(te);
    uj = new Float64Array(te);
    tj = new BigUint64Array(te);
    Be = new Uint32Array(te);
    wj = new Uint16Array(te);
    yj = new Uint8Array(te);
    xj = new BigInt64Array(te);
    Se = new Int32Array(te);
    zj = new Int16Array(te);
    We = new Int8Array(te);
    Fi = pj[6];
    Ki = pj[15];
    ck = pj[20];
    Nj = pj[19];
    di = pj[22];
    ti = pj[B];
    Oe = pj[21];
    Zj = pj[28];
    Xi = pj[Ij];
    mi = pj[Ze];
    Ve = pj[27];
    ki = pj[24];
    ai = pj[25];
    fi = pj[V];
    Ni = pj[Y];
    Sj = pj[Fj];
    gi = pj[17];
    yi = pj[23];
    Jj = pj[Le];
    Wj = pj[26];
    Li = pj[Ke];
    Tj = pj[Q];
    Xj = pj[8];
    Uj = pj[29];
    Mj = pj[ge];
    Gj = pj[5];
    Di = pj[ve];
    Ej = pj[4];
    $e = pj[11];
    Qj = pj[12];
    ek = 1;
    if (dk) {
      dk();
    }
  });
  const hk = function (a) {
    return Be[(xe + 4 >>> ij) + (a << 1)];
  };
  const ik = V;
  function jk(a) {
    return 31 - Math.clz32(a >>> G & 31);
  }
  const kk = Bj;
  const lk = _i;
  const mk = gj;
  const nk = Ne;
  const ok = sj;
  const pk = b;
  const qk = Pj;
  const rk = lj;
  const sk = Kj;
  const tk = vi;
  function uk(a, b, c, d, e, f) {
    ti(Zg, a, b, c, d, e, f);
    return (58036 + (ct(Ks[0], Ks[1], Ks[C], Ks[3]) ^ function (b, c, d, e, f, g) {
      Oe(Zg, b, c, d, e, f, g);
      const h = function (a, b, c) {
        Ni(Zg, a, b, c);
        const d = function (b, c, d, e, f) {
          Sj(Zg, b, c, d, e, f);
          const g = Jw(Ks[Ko], Ks[1], Ks[2], Ks[3], Ks[oj], Ks[0]);
          const h = function (a, b) {
            $e(Zg, a, b);
            const c = function (a, b, c, d) {
              Mj(Zg, a, b, c, d);
              const e = function (a, b, c) {
                Uj(Zg, a, b, c);
                const d = Aa(Ks[jj], Ks[ik], Ks[2], Ks[0], Ks[bt]);
                (function (b, c, d, e, f, g) {
                  Ki(Zg, b, c, d, e, f, g);
                  const h = af(Ks[Gd], Ks[wg], Ks[kn], Ks[3], Ks[4]);
                  Ps(Ks[5], Ks[0]);
                })(Ks[2], Ks[jj], Ks[yl], Ks[2], Ks[Lu], Ks[1]);
                return ~(d & 33934) & (d | 33934);
              }(Ks[0], Ks[1], Ks[2]);
              xa(Ks[Fh], Ks[0], Ks[1], Ks[eh], Ks[3]);
              return e ^ 30245;
            }(Ks[yk], Ks[ce], Ks[jj], Ks[V]);
            const d = ct(Ks[0], Ks[1], Ks[0], Ks[V]);
            return (24 << ((c ^ d) >> 16 & 255)) + (S << ((c ^ d) & 255)) + (0 << ((c ^ d) >> 8 & 255)) + (sk << ((c ^ d) >> 24 & 255));
          }(Ks[ce], Ks[2]);
          return (8 << ((g ^ h) & Sn)) + (qh << ((g ^ h) >> lr & 255)) + (24 << ((g ^ h) >> 24 & 255)) + (0 << ((g ^ h) >> 16 & 255));
        }(Ks[0], Ks[ce], Ks[2], Ks[0], Ks[ik]);
        Xg(Ks[2], Ks[yk], Ks[1], Ks[2], Ks[0], Ks[1]);
        return d ^ 46884;
      }(Ks[_s], Ks[ce], Ks[2]);
      const a = Xg(Ks[3], Ks[4], Ks[uh], Ks[tr], Ks[Ud], Ks[2]);
      return ((119 + (h ^ a)) * 48271 + 0) % 2147483647;
    }(Ks[4], Ks[Cj], Ks[0], Ks[ce], Ks[2], Ks[B]))) % 65411;
  }
  function vk(a, b, c) {
    if (c) {
      switch (a) {
        case ij:
          return rj;
        case 3:
          return uj;
      }
    } else {
      switch (a) {
        case 0:
          if (b) {
            return We;
          } else {
            return yj;
          }
        case ce:
          if (b) {
            return zj;
          } else {
            return wj;
          }
        case Le:
          if (b) {
            return Se;
          } else {
            return Be;
          }
        case 3:
          if (b) {
            return xj;
          } else {
            return tj;
          }
      }
    }
  }
  function wk(a) {
    return function (a, b) {
      const c = (a | 17390) & ~(a & 17390);
      const d = b ^ 12544;
      const e = function (a, b) {
        const c = (a + 39663) % 65286;
        const d = (24 << (b & 255)) + (16 << (b >> db & 255)) + (8 << (b >> 16 & 255)) + (0 << (b >> 24 & 255));
        const e = function (b, c, d) {
          const e = (b + 26044) % 65452;
          const f = c ^ 61242;
          const g = (1013904223 + (50414 + d) * 1664525) % 4294967296;
          const h = zw(e, f, g);
          const a = function (b, c, d, e, f) {
            const g = ~(b & 28586) & 28586 | ~(b & 28586) & b;
            const i = e ^ 41473;
            const a = (Ko << (f & 255)) + (qh << (f >> 24 & gk)) + (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255));
            const j = rt(g, (0 << (c >> 24 & 255)) + (8 << (c & 255)) + (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)), (8 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d >> ko & 255)));
            const h = rt(i, a, g);
            return ((48159 + (j ^ h)) * 22695477 + 1) % 4294967296;
          }(e, f, g, e, f);
          return ((20573 + (h ^ a)) * 22695477 + 1) % 4294967296;
        }(c, d, c);
        const f = Bw(d, c, d, c, d, c);
        return ((57989 + (e ^ f)) * 1664525 + 1013904223) % 4294967296;
      }(c, d);
      Is(c, d, c);
      return ~(e & 15932) & (e | 15932);
    }(a, 30592);
  }
  function xk(a) {
    const b = Be[a + c >>> C];
    const d = hk(b);
    const e = jk(d);
    let f = d & q ? a : Be[a + W >>> Le];
    const g = d & R ? Be[a + ee >>> Le] : Be[f + p >>> 2] >>> e;
    return vk(e, d & T, d & O).subarray(f >>>= e, f + g);
  }
  const yk = jj;
  const zk = H;
  const Ak = Kj;
  const Bk = U;
  const Ck = ve;
  function Dk(c, d, e, f, i, j) {
    const k = (1 + (c + 44530) * 22695477) % 4294967296;
    const a = ~(d & 36723) & (d | 36723);
    const m = (16 << (e >> 8 & 255)) + (24 << (e >> 24 & 255)) + (Oi << (e & w)) + (0 << (e >> 16 & 255));
    const h = ~(f & 50081) & f | ~(f & 50081) & 50081;
    const l = ((51583 + i) * 1664525 + 1013904223) % 4294967296;
    const g = ((j + 25207) * 1103515245 + 12345) % 2147483648;
    const n = function (b, c, d) {
      const e = ~(b & 31937) & b | ~(b & 31937) & 31937;
      const f = (1 + (47255 + c) * 22695477) % 4294967296;
      const g = ~(d & 47659) & d | ~(d & 47659) & 47659;
      const h = Bw(e, f, g, e, f, g);
      Xk(e, f, g, e, f, g);
      return ~(h & 27840) & h | ~(h & 27840) & 27840;
    }(k, a, m);
    Xk(h, l, g, k, a, m);
    return ~(n & 31860) & n | ~(n & 31860) & 31860;
  };


  /*
    *****************
    *CHEAT VARIABLES*
    *****************
  */

  !function (t) {
    if ("object" == typeof exports) module.exports = t();
    else if ("function" == typeof define && define.amd) define(t);
    else {
      var e;
      "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.PF = t()
    }
  }(function () {
    return function t(e, i, n) {
      function o(a, s) {
        if (!i[a]) {
          if (!e[a]) {
            var l = "function" == typeof require && require;
            if (!s && l) return l(a, !0);
            if (r) return r(a, !0);
            throw new Error("Cannot find module '" + a + "'")
          }
          var h = i[a] = {
            exports: {}
          };
          e[a][0].call(h.exports, function (t) {
            var i = e[a][1][t];
            return o(i || t)
          }, h, h.exports, t, e, i, n)
        }
        return i[a].exports
      }
      for (var r = "function" == typeof require && require, a = 0; a < n.length; a++) o(n[a]);
      return o
    }({
      1: [function (t, e, i) {
        e.exports = t("./lib/heap")
      }, {
        "./lib/heap": 2
      }],
      2: [function (t, e, i) {
        (function () {
          var t, i, n, o, r, a, s, l, h, u, p, c, f, d, g;
          n = Math.floor, u = Math.min, i = function (t, e) {
            return e > t ? -1 : t > e ? 1 : 0
          }, h = function (t, e, o, r, a) {
            var s;
            if (null == o && (o = 0), null == a && (a = i), 0 > o) throw new Error("lo must be non-negative");
            for (null == r && (r = t.length); r > o;) a(e, t[s = n((o + r) / 2)]) < 0 ? r = s : o = s + 1;
            return [].splice.apply(t, [o, o - o].concat(e)), e
          }, a = function (t, e, n) {
            return null == n && (n = i), t.push(e), d(t, 0, t.length - 1, n)
          }, r = function (t, e) {
            var n, o;
            return null == e && (e = i), n = t.pop(), t.length ? (o = t[0], t[0] = n, g(t, 0, e)) : o = n, o
          }, l = function (t, e, n) {
            var o;
            return null == n && (n = i), o = t[0], t[0] = e, g(t, 0, n), o
          }, s = function (t, e, n) {
            var o;
            return null == n && (n = i), t.length && n(t[0], e) < 0 && (e = (o = [t[0], e])[0], t[0] = o[1], g(t, 0, n)), e
          }, o = function (t, e) {
            var o, r, a, s, l, h;
            for (null == e && (e = i), l = [], r = 0, a = (s = function () {
              h = [];
              for (var e = 0, i = n(t.length / 2); i >= 0 ? i > e : e > i; i >= 0 ? e++ : e--) h.push(e);
              return h
            }.apply(this).reverse()).length; a > r; r++) o = s[r], l.push(g(t, o, e));
            return l
          }, f = function (t, e, n) {
            var o;
            return null == n && (n = i), -1 !== (o = t.indexOf(e)) ? (d(t, 0, o, n), g(t, o, n)) : void 0
          }, p = function (t, e, n) {
            var r, a, l, h, u;
            if (null == n && (n = i), !(a = t.slice(0, e)).length) return a;
            for (o(a, n), l = 0, h = (u = t.slice(e)).length; h > l; l++) r = u[l], s(a, r, n);
            return a.sort(n).reverse()
          }, c = function (t, e, n) {
            var a, s, l, p, c, f, d, g, b;
            if (null == n && (n = i), 10 * e <= t.length) {
              if (!(l = t.slice(0, e).sort(n)).length) return l;
              for (s = l[l.length - 1], p = 0, f = (d = t.slice(e)).length; f > p; p++) n(a = d[p], s) < 0 && (h(l, a, 0, null, n), l.pop(), s = l[l.length - 1]);
              return l
            }
            for (o(t, n), b = [], c = 0, g = u(e, t.length); g >= 0 ? g > c : c > g; g >= 0 ? ++c : --c) b.push(r(t, n));
            return b
          }, d = function (t, e, n, o) {
            var r, a, s;
            for (null == o && (o = i), r = t[n]; n > e && o(r, a = t[s = n - 1 >> 1]) < 0;) t[n] = a, n = s;
            return t[n] = r
          }, g = function (t, e, n) {
            var o, r, a, s, l;
            for (null == n && (n = i), r = t.length, l = e, a = t[e], o = 2 * e + 1; r > o;) r > (s = o + 1) && !(n(t[o], t[s]) < 0) && (o = s), t[e] = t[o], o = 2 * (e = o) + 1;
            return t[e] = a, d(t, l, e, n)
          }, t = function () {
            function t(t) {
              this.cmp = null != t ? t : i, this.nodes = []
            }
            return t.push = a, t.pop = r, t.replace = l, t.pushpop = s, t.heapify = o, t.updateItem = f, t.nlargest = p, t.nsmallest = c, t.prototype.push = function (t) {
              return a(this.nodes, t, this.cmp)
            }, t.prototype.pop = function () {
              return r(this.nodes, this.cmp)
            }, t.prototype.peek = function () {
              return this.nodes[0]
            }, t.prototype.contains = function (t) {
              return -1 !== this.nodes.indexOf(t)
            }, t.prototype.replace = function (t) {
              return l(this.nodes, t, this.cmp)
            }, t.prototype.pushpop = function (t) {
              return s(this.nodes, t, this.cmp)
            }, t.prototype.heapify = function () {
              return o(this.nodes, this.cmp)
            }, t.prototype.updateItem = function (t) {
              return f(this.nodes, t, this.cmp)
            }, t.prototype.clear = function () {
              return this.nodes = []
            }, t.prototype.empty = function () {
              return 0 === this.nodes.length
            }, t.prototype.size = function () {
              return this.nodes.length
            }, t.prototype.clone = function () {
              var e;
              return (e = new t).nodes = this.nodes.slice(0), e
            }, t.prototype.toArray = function () {
              return this.nodes.slice(0)
            }, t.prototype.insert = t.prototype.push, t.prototype.top = t.prototype.peek, t.prototype.front = t.prototype.peek, t.prototype.has = t.prototype.contains, t.prototype.copy = t.prototype.clone, t
          }(), (null != e ? e.exports : void 0) ? e.exports = t : window.Heap = t
        }).call(this)
      }, {}],
      3: [function (t, e, i) {
        e.exports = {
          Always: 1,
          Never: 2,
          IfAtMostOneObstacle: 3,
          OnlyWhenNoObstacles: 4
        }
      }, {}],
      4: [function (t, e, i) {
        function n(t, e, i) {
          var n;
          "object" != typeof t ? n = t : (e = t.length, n = t[0].length, i = t), this.width = n, this.height = e, this.nodes = this._buildNodes(n, e, i)
        }
        var o = t("./Node"),
          r = t("./DiagonalMovement");
        n.prototype._buildNodes = function (t, e, i) {
          var n, r, a = new Array(e);
          for (n = 0; e > n; ++n)
            for (a[n] = new Array(t), r = 0; t > r; ++r) a[n][r] = new o(r, n);
          if (void 0 === i) return a;
          if (i.length !== e || i[0].length !== t) throw new Error("Matrix size does not fit");
          for (n = 0; e > n; ++n)
            for (r = 0; t > r; ++r) i[n][r] && (a[n][r].walkable = !1);
          return a
        }, n.prototype.getNodeAt = function (t, e) {
          return this.nodes[e][t]
        }, n.prototype.isWalkableAt = function (t, e) {
          return this.isInside(t, e) && this.nodes[e][t].walkable
        }, n.prototype.isInside = function (t, e) {
          return t >= 0 && t < this.width && e >= 0 && e < this.height
        }, n.prototype.setWalkableAt = function (t, e, i) {
          if (e >= 0 && t >= 0 && e < p.vWu && t < p.VOW) {
            this.nodes[e][t].walkable = i
          }
        }, n.prototype.getNeighbors = function (t, e) {
          var i = t.x,
            n = t.y,
            o = [],
            a = !1,
            s = !1,
            l = !1,
            h = !1,
            u = !1,
            p = !1,
            c = !1,
            f = !1,
            d = this.nodes;
          if (this.isWalkableAt(i, n - 1) && (o.push(d[n - 1][i]), a = !0), this.isWalkableAt(i + 1, n) && (o.push(d[n][i + 1]), l = !0), this.isWalkableAt(i, n + 1) && (o.push(d[n + 1][i]), u = !0), this.isWalkableAt(i - 1, n) && (o.push(d[n][i - 1]), c = !0), e === r.Never) return o;
          if (e === r.OnlyWhenNoObstacles) s = c && a, h = a && l, p = l && u, f = u && c;
          else if (e === r.IfAtMostOneObstacle) s = c || a, h = a || l, p = l || u, f = u || c;
          else {
            if (e !== r.Always) throw new Error("Incorrect value of diagonalMovement");
            s = !0, h = !0, p = !0, f = !0
          }
          return s && this.isWalkableAt(i - 1, n - 1) && o.push(d[n - 1][i - 1]), h && this.isWalkableAt(i + 1, n - 1) && o.push(d[n - 1][i + 1]), p && this.isWalkableAt(i + 1, n + 1) && o.push(d[n + 1][i + 1]), f && this.isWalkableAt(i - 1, n + 1) && o.push(d[n + 1][i - 1]), o
        }, n.prototype.clone = function () {
          var t, e, i = this.width,
            r = this.height,
            a = this.nodes,
            s = new n(i, r),
            l = new Array(r);
          for (t = 0; r > t; ++t)
            for (l[t] = new Array(i), e = 0; i > e; ++e) l[t][e] = new o(e, t, a[t][e].walkable);
          return s.nodes = l, s
        }, e.exports = n
      }, {
        "./DiagonalMovement": 3,
        "./Node": 6
      }],
      5: [function (t, e, i) {
        e.exports = {
          manhattan: function (t, e) {
            return t + e
          },
          euclidean: function (t, e) {
            return Math.sqrt(t * t + e * e)
          },
          octile: function (t, e) {
            var i = Math.SQRT2 - 1;
            return e > t ? i * t + e : i * e + t
          },
          chebyshev: function (t, e) {
            return Math.max(t, e)
          }
        }
      }, {}],
      6: [function (t, e, i) {
        e.exports = function (t, e, i) {
          this.x = t, this.y = e, this.walkable = void 0 === i || i
        }
      }, {}],
      7: [function (t, e, i) {
        function n(t) {
          for (var e = [
            [t.x, t.y]
          ]; t.parent;) t = t.parent, e.push([t.x, t.y]);
          return e.reverse()
        }

        function o(t, e, i, n) {
          var o, r, a, s, l, h, u = Math.abs,
            p = [];
          for (o = i > t ? 1 : -1, r = n > e ? 1 : -1, l = (a = u(i - t)) - (s = u(n - e)); p.push([t, e]), t !== i || e !== n;)(h = 2 * l) > -s && (l -= s, t += o), a > h && (l += a, e += r);
          return p
        }
        i.backtrace = n, i.biBacktrace = function (t, e) {
          var i = n(t),
            o = n(e);
          return i.concat(o.reverse())
        }, i.pathLength = function (t) {
          var e, i, n, o, r, a = 0;
          for (e = 1; e < t.length; ++e) i = t[e - 1], n = t[e], o = i[0] - n[0], r = i[1] - n[1], a += Math.sqrt(o * o + r * r);
          return a
        }, i.interpolate = o, i.expandPath = function (t) {
          var e, i, n, r, a, s, l = [],
            h = t.length;
          if (2 > h) return l;
          for (a = 0; h - 1 > a; ++a)
            for (e = t[a], i = t[a + 1], r = (n = o(e[0], e[1], i[0], i[1])).length, s = 0; r - 1 > s; ++s) l.push(n[s]);
          return l.push(t[h - 1]), l
        }, i.smoothenPath = function (t, e) {
          var i, n, r, a, s, l, h, u, p, c = e.length,
            f = e[0][0],
            d = e[0][1],
            g = e[c - 1][0],
            b = e[c - 1][1];
          for (r = [
            [i = f, n = d]
          ], a = 2; c > a; ++a) {
            for (h = o(i, n, (l = e[a])[0], l[1]), p = !1, s = 1; s < h.length; ++s)
              if (u = h[s], !t.isWalkableAt(u[0], u[1])) {
                p = !0;
                break
              } p && (lastValidCoord = e[a - 1], r.push(lastValidCoord), i = lastValidCoord[0], n = lastValidCoord[1])
          }
          return r.push([g, b]), r
        }, i.compressPath = function (t) {
          if (t.length < 3) return t;
          var e, i, n, o, r, a, s = [],
            l = t[0][0],
            h = t[0][1],
            u = t[1][0],
            p = t[1][1],
            c = u - l,
            f = p - h;
          for (c /= r = Math.sqrt(c * c + f * f), f /= r, s.push([l, h]), a = 2; a < t.length; a++) e = u, i = p, n = c, o = f, c = (u = t[a][0]) - e, f = (p = t[a][1]) - i, f /= r = Math.sqrt(c * c + f * f), (c /= r) === n && f === o || s.push([e, i]);
          return s.push([u, p]), s
        }
      }, {}],
      8: [function (t, e, i) {
        e.exports = {
          Heap: t("heap"),
          Node: t("./core/Node"),
          Grid: t("./core/Grid"),
          Util: t("./core/Util"),
          DiagonalMovement: t("./core/DiagonalMovement"),
          Heuristic: t("./core/Heuristic"),
          AStarFinder: t("./finders/AStarFinder"),
          BestFirstFinder: t("./finders/BestFirstFinder"),
          BreadthFirstFinder: t("./finders/BreadthFirstFinder"),
          DijkstraFinder: t("./finders/DijkstraFinder"),
          BiAStarFinder: t("./finders/BiAStarFinder"),
          BiBestFirstFinder: t("./finders/BiBestFirstFinder"),
          BiBreadthFirstFinder: t("./finders/BiBreadthFirstFinder"),
          BiDijkstraFinder: t("./finders/BiDijkstraFinder"),
          IDAStarFinder: t("./finders/IDAStarFinder"),
          JumpPointFinder: t("./finders/JumpPointFinder")
        }
      }, {
        "./core/DiagonalMovement": 3,
        "./core/Grid": 4,
        "./core/Heuristic": 5,
        "./core/Node": 6,
        "./core/Util": 7,
        "./finders/AStarFinder": 9,
        "./finders/BestFirstFinder": 10,
        "./finders/BiAStarFinder": 11,
        "./finders/BiBestFirstFinder": 12,
        "./finders/BiBreadthFirstFinder": 13,
        "./finders/BiDijkstraFinder": 14,
        "./finders/BreadthFirstFinder": 15,
        "./finders/DijkstraFinder": 16,
        "./finders/IDAStarFinder": 17,
        "./finders/JumpPointFinder": 22,
        heap: 1
      }],
      9: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic"),
          s = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, a) {
          var s, l, h, u, p, c, f, d, g = new o(function (t, e) {
            return t.f - e.f
          }),
            b = a.getNodeAt(t, e),
            v = a.getNodeAt(i, n),
            A = this.heuristic,
            m = this.diagonalMovement,
            y = this.weight,
            k = Math.abs,
            M = Math.SQRT2;
          for (b.g = 0, b.f = 0, g.push(b), b.opened = !0; !g.empty();) {
            if ((s = g.pop()).closed = !0, s === v) return r.backtrace(v);
            for (u = 0, p = (l = a.getNeighbors(s, m)).length; p > u; ++u)(h = l[u]).closed || (c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : M), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || y * A(k(c - i), k(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? g.updateItem(h) : (g.push(h), h.opened = !0)))
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }],
      10: [function (t, e, i) {
        function n(t) {
          o.call(this, t);
          var e = this.heuristic;
          this.heuristic = function (t, i) {
            return 1e6 * e(t, i)
          }
        }
        var o = t("./AStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./AStarFinder": 9
      }],
      11: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic"),
          s = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, a) {
          var s, l, h, u, p, c, f, d, g = function (t, e) {
            return t.f - e.f
          },
            b = new o(g),
            v = new o(g),
            A = a.getNodeAt(t, e),
            m = a.getNodeAt(i, n),
            y = this.heuristic,
            k = this.diagonalMovement,
            M = this.weight,
            W = Math.abs,
            w = Math.SQRT2;
          for (A.g = 0, A.f = 0, b.push(A), A.opened = 1, m.g = 0, m.f = 0, v.push(m), m.opened = 2; !b.empty() && !v.empty();) {
            for ((s = b.pop()).closed = !0, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)
              if (!(h = l[u]).closed) {
                if (2 === h.opened) return r.biBacktrace(s, h);
                c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - i), W(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? b.updateItem(h) : (b.push(h), h.opened = 1))
              } for ((s = v.pop()).closed = !0, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)
              if (!(h = l[u]).closed) {
                if (1 === h.opened) return r.biBacktrace(h, s);
                c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - t), W(f - e)), h.f = h.g + h.h, h.parent = s, h.opened ? v.updateItem(h) : (v.push(h), h.opened = 2))
              }
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }],
      12: [function (t, e, i) {
        function n(t) {
          o.call(this, t);
          var e = this.heuristic;
          this.heuristic = function (t, i) {
            return 1e6 * e(t, i)
          }
        }
        var o = t("./BiAStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./BiAStarFinder": 11
      }],
      13: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
        }
        var o = t("../core/Util"),
          r = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, r) {
          var a, s, l, h, u, p = r.getNodeAt(t, e),
            c = r.getNodeAt(i, n),
            f = [],
            d = [],
            g = this.diagonalMovement;
          for (f.push(p), p.opened = !0, p.by = 0, d.push(c), c.opened = !0, c.by = 1; f.length && d.length;) {
            for ((l = f.shift()).closed = !0, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)
              if (!(s = a[h]).closed)
                if (s.opened) {
                  if (1 === s.by) return o.biBacktrace(l, s)
                } else f.push(s), s.parent = l, s.opened = !0, s.by = 0;
            for ((l = d.shift()).closed = !0, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)
              if (!(s = a[h]).closed)
                if (s.opened) {
                  if (0 === s.by) return o.biBacktrace(s, l)
                } else d.push(s), s.parent = l, s.opened = !0, s.by = 1
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Util": 7
      }],
      14: [function (t, e, i) {
        function n(t) {
          o.call(this, t), this.heuristic = function (t, e) {
            return 0
          }
        }
        var o = t("./BiAStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./BiAStarFinder": 11
      }],
      15: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
        }
        var o = t("../core/Util"),
          r = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, r) {
          var a, s, l, h, u, p = [],
            c = this.diagonalMovement,
            f = r.getNodeAt(t, e),
            d = r.getNodeAt(i, n);
          for (p.push(f), f.opened = !0; p.length;) {
            if ((l = p.shift()).closed = !0, l === d) return o.backtrace(d);
            for (h = 0, u = (a = r.getNeighbors(l, c)).length; u > h; ++h)(s = a[h]).closed || s.opened || (p.push(s), s.opened = !0, s.parent = l)
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Util": 7
      }],
      16: [function (t, e, i) {
        function n(t) {
          o.call(this, t), this.heuristic = function (t, e) {
            return 0
          }
        }
        var o = t("./AStarFinder");
        n.prototype = new o, n.prototype.constructor = n, e.exports = n
      }, {
        "./AStarFinder": 9
      }],
      17: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || o.manhattan, this.weight = t.weight || 1, this.trackRecursion = t.trackRecursion || !1, this.timeLimit = t.timeLimit || Infinity, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = a.OnlyWhenNoObstacles : this.diagonalMovement = a.IfAtMostOneObstacle : this.diagonalMovement = a.Never), this.diagonalMovement === a.Never ? this.heuristic = t.heuristic || o.manhattan : this.heuristic = t.heuristic || o.octile
        }
        var o = (t("../core/Util"), t("../core/Heuristic")),
          r = t("../core/Node"),
          a = t("../core/DiagonalMovement");
        n.prototype.findPath = function (t, e, i, n, o) {
          var a, s, l, h = (new Date).getTime(),
            u = function (t, e) {
              return this.heuristic(Math.abs(e.x - t.x), Math.abs(e.y - t.y))
            }.bind(this),
            p = function (t, e) {
              return t.x === e.x || t.y === e.y ? 1 : Math.SQRT2
            },
            c = function (t, e, i, n, a) {
              if (0, this.timeLimit > 0 && (new Date).getTime() - h > 1e3 * this.timeLimit) return Infinity;
              var s = e + u(t, d) * this.weight;
              if (s > i) return s;
              if (t == d) return n[a] = [t.x, t.y], t;
              var l, f, g, b, v = o.getNeighbors(t, this.diagonalMovement);
              for (g = 0, l = Infinity; b = v[g]; ++g) {
                if (this.trackRecursion && (b.retainCount = b.retainCount + 1 || 1, !0 !== b.tested && (b.tested = !0)), (f = c(b, e + p(t, b), i, n, a + 1)) instanceof r) return n[a] = [t.x, t.y], f;
                this.trackRecursion && 0 == --b.retainCount && (b.tested = !1), l > f && (l = f)
              }
              return l
            }.bind(this),
            f = o.getNodeAt(t, e),
            d = o.getNodeAt(i, n),
            g = u(f, d);
          for (a = 0; ; ++a) {
            if (Infinity === (l = c(f, 0, g, s = [], 0))) return [];
            if (l instanceof r) return s;
            g = l
          }
          return []
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Node": 6,
        "../core/Util": 7
      }],
      18: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e];
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e]
          } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e];
          return this._jump(t + r, e + a, t, e)
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p + n, c + o) && d.push([p + n, c + o]), f.isWalkableAt(p - n, c) || d.push([p - n, c + o]), f.isWalkableAt(p, c - o) || d.push([p + n, c - o])) : 0 === n ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : (f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.Always)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      19: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e];
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e]
          } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e];
          return o.isWalkableAt(t + r, e) || o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), (f.isWalkableAt(p, c + o) || f.isWalkableAt(p + n, c)) && d.push([p + n, c + o]), !f.isWalkableAt(p - n, c) && f.isWalkableAt(p, c + o) && d.push([p - n, c + o]), !f.isWalkableAt(p, c - o) && f.isWalkableAt(p + n, c) && d.push([p + n, c - o])) : 0 === n ? f.isWalkableAt(p, c + o) && (d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : f.isWalkableAt(p + n, c) && (d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.IfAtMostOneObstacle)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      20: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r && 0 !== a) {
            if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e]
          } else if (0 !== r) {
            if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e]
          } else if (0 !== a && (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a))) return [t, e];
          return o.isWalkableAt(t + r, e) && o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u)
            if (e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o) f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + o) && f.isWalkableAt(p + n, c) && d.push([p + n, c + o]);
            else {
              var g;
              if (0 !== n) {
                g = f.isWalkableAt(p + n, c);
                var b = f.isWalkableAt(p, c + 1),
                  v = f.isWalkableAt(p, c - 1);
                g && (d.push([p + n, c]), b && d.push([p + n, c + 1]), v && d.push([p + n, c - 1])), b && d.push([p, c + 1]), v && d.push([p, c - 1])
              } else if (0 !== o) {
                g = f.isWalkableAt(p, c + o);
                var A = f.isWalkableAt(p + 1, c),
                  m = f.isWalkableAt(p - 1, c);
                g && (d.push([p, c + o]), A && d.push([p + 1, c + o]), m && d.push([p - 1, c + o])), A && d.push([p + 1, c]), m && d.push([p - 1, c])
              }
            }
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.OnlyWhenNoObstacles)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      21: [function (t, e, i) {
        function n(t) {
          o.call(this, t)
        }
        var o = t("./JumpPointFinderBase"),
          r = t("../core/DiagonalMovement");
        n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) {
          var o = this.grid,
            r = t - i,
            a = e - n;
          if (!o.isWalkableAt(t, e)) return null;
          if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = !0), o.getNodeAt(t, e) === this.endNode) return [t, e];
          if (0 !== r) {
            if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e]
          } else {
            if (0 === a) throw new Error("Only horizontal and vertical movements are allowed");
            if (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a)) return [t, e];
            if (this._jump(t + 1, e, t, e) || this._jump(t - 1, e, t, e)) return [t, e]
          }
          return this._jump(t + r, e + a, t, e)
        }, n.prototype._findNeighbors = function (t) {
          var e, i, n, o, a, s, l, h, u = t.parent,
            p = t.x,
            c = t.y,
            f = this.grid,
            d = [];
          if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n ? (f.isWalkableAt(p, c - 1) && d.push([p, c - 1]), f.isWalkableAt(p, c + 1) && d.push([p, c + 1]), f.isWalkableAt(p + n, c) && d.push([p + n, c])) : 0 !== o && (f.isWalkableAt(p - 1, c) && d.push([p - 1, c]), f.isWalkableAt(p + 1, c) && d.push([p + 1, c]), f.isWalkableAt(p, c + o) && d.push([p, c + o]));
          else
            for (l = 0, h = (a = f.getNeighbors(t, r.Never)).length; h > l; ++l) s = a[l], d.push([s.x, s.y]);
          return d
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "./JumpPointFinderBase": 23
      }],
      22: [function (t, e, i) {
        var n = t("../core/DiagonalMovement"),
          o = t("./JPFNeverMoveDiagonally"),
          r = t("./JPFAlwaysMoveDiagonally"),
          a = t("./JPFMoveDiagonallyIfNoObstacles"),
          s = t("./JPFMoveDiagonallyIfAtMostOneObstacle");
        e.exports = function (t) {
          return (t = t || {}).diagonalMovement === n.Never ? new o(t) : t.diagonalMovement === n.Always ? new r(t) : t.diagonalMovement === n.OnlyWhenNoObstacles ? new a(t) : new s(t)
        }
      }, {
        "../core/DiagonalMovement": 3,
        "./JPFAlwaysMoveDiagonally": 18,
        "./JPFMoveDiagonallyIfAtMostOneObstacle": 19,
        "./JPFMoveDiagonallyIfNoObstacles": 20,
        "./JPFNeverMoveDiagonally": 21
      }],
      23: [function (t, e, i) {
        function n(t) {
          t = t || {}, this.heuristic = t.heuristic || a.manhattan, this.trackJumpRecursion = t.trackJumpRecursion || !1
        }
        var o = t("heap"),
          r = t("../core/Util"),
          a = t("../core/Heuristic");
        t("../core/DiagonalMovement"), n.prototype.findPath = function (t, e, i, n, a) {
          var s, l = this.openList = new o(function (t, e) {
            return t.f - e.f
          }),
            h = this.startNode = a.getNodeAt(t, e),
            u = this.endNode = a.getNodeAt(i, n);
          for (this.grid = a, h.g = 0, h.f = 0, l.push(h), h.opened = !0; !l.empty();) {
            if ((s = l.pop()).closed = !0, s === u) return r.expandPath(r.backtrace(u));
            this._identifySuccessors(s)
          }
          return []
        }, n.prototype._identifySuccessors = function (t) {
          var e, i, n, o, r, s, l, h, u, p, c = this.grid,
            f = this.heuristic,
            d = this.openList,
            g = this.endNode.x,
            b = this.endNode.y,
            v = t.x,
            A = t.y,
            m = Math.abs;
          for (Math.max, o = 0, r = (e = this._findNeighbors(t)).length; r > o; ++o)
            if (i = e[o], n = this._jump(i[0], i[1], v, A)) {
              if (s = n[0], l = n[1], (p = c.getNodeAt(s, l)).closed) continue;
              h = a.octile(m(s - v), m(l - A)), u = t.g + h, (!p.opened || u < p.g) && (p.g = u, p.h = p.h || f(m(s - g), m(l - b)), p.f = p.g + p.h, p.parent = t, p.opened ? d.updateItem(p) : (d.push(p), p.opened = !0))
            }
        }, e.exports = n
      }, {
        "../core/DiagonalMovement": 3,
        "../core/Heuristic": 5,
        "../core/Util": 7,
        heap: 1
      }]
    }, {}, [8])(8)
  });
  (function () {
    function e(t, r, n) {
      function i(a, s) {
        if (!r[a]) {
          if (!t[a]) {
            var u = "function" == typeof require && require;
            if (!s && u) return u(a, !0);
            if (o) return o(a, !0);
            var d = Error("Cannot find module '" + a + "'");
            throw d.code = "MODULE_NOT_FOUND", d
          }
          var m = r[a] = {
            exports: {}
          };
          t[a][0].call(m.exports, function (e) {
            return i(t[a][1][e] || e)
          }, m, m.exports, e, t, r, n)
        }
        return r[a].exports
      }
      for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
      return i
    }
    return e
  })()({
    1: [function (e, t, r) {
      let n = e("worker-timers");
      window.workerTimers = n
    }, {
      "worker-timers": 4
    }],
    2: [function (e, t, r) {
      var n, i;
      n = this, i = function (e) {
        "use strict";
        var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
          a = new WeakMap,
          s = (r = (t = a, function (e, r) {
            return t.set(e, r), r
          }), n = a, function (e) {
            var t = n.get(e),
              i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
            if (!e.has(i)) return r(e, i);
            if (e.size < 536870912) {
              for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
              return r(e, i)
            }
            if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
            for (; e.has(i);) i = Math.floor(Math.random() * o);
            return r(e, i)
          }),
          u = (i = s, function (e) {
            var t = i(e);
            return e.add(t), t
          });
        e.addUniqueNumber = u, e.generateUniqueNumber = s
      }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
    }, {}],
    3: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r = function e(r) {
          var n = new Map([
            [0, function () { }]
          ]),
            i = new Map([
              [0, function () { }]
            ]),
            o = new Map,
            a = new Worker(r);
          return a.addEventListener("message", function (e) {
            var t, r = e.data;
            if (void 0 !== (t = r).method && "call" === t.method) {
              var a = r.params,
                s = a.timerId,
                u = a.timerType;
              if ("interval" === u) {
                var d = n.get(s);
                if ("number" == typeof d) {
                  var m = o.get(d);
                  if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== d) d();
                else throw Error("The timer is in an undefined state.")
              } else if ("timeout" === u) {
                var f = i.get(s);
                if ("number" == typeof f) {
                  var c = o.get(f);
                  if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                } else if (void 0 !== f) f(), i["delete"](s);
                else throw Error("The timer is in an undefined state.")
              }
            } else if (null === (l = r).error && "number" == typeof l.id) {
              var l, v = r.id,
                p = o.get(v);
              if (void 0 === p) throw Error("The timer is in an undefined state.");
              var h = p.timerId,
                w = p.timerType;
              o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
            } else throw Error(r.error.message)
          }), {
            clearInterval: function e(r) {
              var i = t.generateUniqueNumber(o);
              o.set(i, {
                timerId: r,
                timerType: "interval"
              }), n.set(r, i), a.postMessage({
                id: i,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "interval"
                }
              })
            },
            clearTimeout: function e(r) {
              var n = t.generateUniqueNumber(o);
              o.set(n, {
                timerId: r,
                timerType: "timeout"
              }), i.set(r, n), a.postMessage({
                id: n,
                method: "clear",
                params: {
                  timerId: r,
                  timerType: "timeout"
                }
              })
            },
            setInterval: function e(r, i) {
              var o = t.generateUniqueNumber(n);
              return n.set(o, function () {
                r(), "function" == typeof n.get(o) && a.postMessage({
                  id: null,
                  method: "set",
                  params: {
                    delay: i,
                    now: performance.now(),
                    timerId: o,
                    timerType: "interval"
                  }
                })
              }), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: i,
                  now: performance.now(),
                  timerId: o,
                  timerType: "interval"
                }
              }), o
            },
            setTimeout: function e(r, n) {
              var o = t.generateUniqueNumber(i);
              return i.set(o, r), a.postMessage({
                id: null,
                method: "set",
                params: {
                  delay: n,
                  now: performance.now(),
                  timerId: o,
                  timerType: "timeout"
                }
              }), o
            }
          }
        };
        e.load = r
      }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
    }, {
      "fast-unique-numbers": 2
    }],
    4: [function (e, t, r) {
      var n, i;
      n = this, i = function (e, t) {
        "use strict";
        var r, n, i = (r = t.load, n = null, function () {
          if (null !== n) return n;
          var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
            type: "application/javascript; charset=utf-8"
          }),
            t = URL.createObjectURL(e);
          return n = r(t), setTimeout(function () {
            return URL.revokeObjectURL(t)
          }), n
        }),
          o = function e(t) {
            return i().clearInterval(t)
          },
          a = function e(t) {
            return i().clearTimeout(t)
          },
          s = function e(t, r) {
            return i().setInterval(t, r)
          },
          u = function e(t, r) {
            return i().setTimeout(t, r)
          };
        e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
      }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
    }, {
      "worker-timers-broker": 3
    }]
  }, {}, [1]);

  class createText {
    constructor(width, height, buildType) {
      this.canvas = document.createElement("canvas");
      this.ctx = this.canvas.getContext("2d");
      this.canvas.width = width;
      this.canvas.height = height;
      this.buildType = buildType
    }
    drawText(text, size, color, color2) {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.font = size + "px Baloo Paaji";
      this.ctx.strokeStyle = color;
      this.ctx.fillStyle = color2;
      this.ctx.lineWidth = 7;
      switch (this.buildType) {
        case 1:
          this.ctx.strokeText(`x${text & 255}`, 15, 40);
          this.ctx.fillText(`x${text & 255}`, 15, 40);
          this.ctx.strokeText(`x${(text & 65280) >> 8}`, 15, 60);
          this.ctx.fillText(`x${(text & 65280) >> 8}`, 15, 60);
          break;
        case 2:
          this.ctx.strokeText(`x${text & 31}`, 15, 40);
          this.ctx.fillText(`x${text & 31}`, 15, 40);
          this.ctx.strokeText(`x${(text & 992) >> 5}`, 15, 60);
          this.ctx.fillText(`x${(text & 992) >> 5}`, 15, 60);
          this.ctx.strokeText(`x${(text & 31744) >> 10}`, 15, 80);
          this.ctx.fillText(`x${(text & 31744) >> 10}`, 15, 80);
          break;
        case 3:
          this.ctx.strokeText(text[0], 15, 40);
          this.ctx.fillText(text[0], 15, 40);
          this.ctx.strokeText((text[1] & 16) >> 4 ? "L" : "U", 15, 60);
          this.ctx.fillText((text[1] & 16) >> 4 ? "L" : "U", 15, 60);
          this.ctx.strokeText((text[1] & 16) >> 4 ? text[1] - 16 : text[1], 15, 80);
          this.ctx.fillText((text[1] & 16) >> 4 ? text[1] - 16 : text[1], 15, 80);
          break;
        default:
          this.ctx.strokeText(text, 15, 40);
          this.ctx.fillText(text, 15, 40);
          break
      }
    }
  }

  function getHitbox(objectType, objectSizeType) {
    let objRadius = 0;
    switch (objectType) {
      case "t":
        if (objectSizeType == 0 || objectSizeType == 1) {
          objRadius = 102
        } else if (objectSizeType == 2 || objectSizeType == 3) {
          objRadius = 77
        } else if (objectSizeType == 4 || objectSizeType == 5) {
          objRadius = 60
        };
        break;
      case "b":
        if (objectSizeType == 0 || objectSizeType == 1) {
          objRadius = 97
        } else if (objectSizeType == 2 || objectSizeType == 3) {
          objRadius = 80
        };
        break;
      case "s":
        if (objectSizeType == 0) {
          objRadius = 102
        } else if (objectSizeType == 1) {
          objRadius = 87
        } else if (objectSizeType == 2) {
          objRadius = 58
        };
        break;
      case "g":
        if (objectSizeType == 0) {
          objRadius = 90
        } else if (objectSizeType == 1) {
          objRadius = 75
        } else if (objectSizeType == 2) {
          objRadius = 65
        };
        break;
      case "p":
        objRadius = 77;
        break;
      case "f":
        if (objectSizeType == 0) {
          objRadius = 140
        } else if (objectSizeType == 1) {
          objRadius = 115
        } else if (objectSizeType == 2) {
          objRadius = 95
        };
        break;
      case "d":
        if (objectSizeType == 0) {
          objRadius = 85
        } else if (objectSizeType == 1) {
          objRadius = 75
        } else if (objectSizeType == 2) {
          objRadius = 60
        };
        break;
      case "a":
        if (objectSizeType == 0) {
          objRadius = 85
        } else if (objectSizeType == 1) {
          objRadius = 75
        };
        break;
      case "cs":
        if (objectSizeType == 0) {
          objRadius = 100
        } else if (objectSizeType == 1) {
          objRadius = 87
        } else if (objectSizeType == 2) {
          objRadius = 95
        } else if (objectSizeType == 3) {
          objRadius = 90
        };
        break;
      case "re":
        if (objectSizeType == 0) {
          objRadius = 67
        } else if (objectSizeType == 1) {
          objRadius = 82
        } else if (objectSizeType == 2) {
          objRadius = 90
        };
        break;
      case "c":
        objRadius = 55;
        break;
      case "m":
        if (objectSizeType == 1) {
          objRadius = 85
        } else if (objectSizeType == 2) {
          objRadius = 90
        };
        break;
      case 4:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 7:
      case 8:
      case 9:
      case 10:
      case 15:
      case 16:
      case 17:
      case 19:
      case 21:
      case 50:
      case 51:
      case 18:
      case 32:
      case 34:
      case 29:
      case 22:
        objRadius = 45;
        break;
      case 2:
      case 5:
      case 12:
      case 13:
      case 14:
      case 20:
      case 52:
      case 53:
      case 49:
      case 48:
      case 47:
      case 46:
      case 45:
        objRadius = 35;
        break;
      case 11:
      case 0:
        objRadius = 25;
        break
    }
    return objRadius
  }
  let Hitboxes = {};

  function createHitbox(g, h, l2) {
    let hitbox = getHitbox(g, h);
    if (hitbox) {
      let cnvs = document.createElement("canvas");
      let l = cnvs.getContext("2d");
      cnvs.width = 300;
      cnvs.height = 300;
      l.lineWidth = 2.5;
      l.strokeStyle = "red";
      l.beginPath();
      l.arc(150, 150, hitbox, 0, 2 * Math.PI);
      l.stroke();
      l2 ? Hitboxes[g] = cnvs : Hitboxes[g][h] = cnvs
    }
  }

  let SandStormImage = new Image;
  let BlizzardImage = new Image;
  SandStormImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/sandstorm.png";
  BlizzardImage.src = "https://raw.githubusercontent.com/XmreLoux/images/main/blizzard.png";
  let AutoRespawnInterval;
  let Settings = {
    Fly: {
      o: .5,
      e: false
    },
    Hitbox: false,
    Debug: false,
    Xray: {
      e: false,
      k: "Backquote",
      o: .5
    },
    Timer: true,
    Respawn: false,
    AutoSeed: false,
    PCount: false,
    Ice: false,
    JoinLeave: false,
    AutoSpike: {
      e: false,
      k: "Space",
      m: true,
      p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
    },
    Crown: true,
    Spectator: {
      k: "KeyP"
    },
    DropSword: {
      k: "KeyV"
    },
    PutInChest: 10,
    AutoBook: true,
    AutoBridge: {
      e: false,
      k: "KeyT",
      m: false
    },
    Bed: false,
    Equiq: false,
    PlayerOntop: true,
    BoxOntop: true,
    ChestOntop: false,
    BS: true,
    BuildingInfo: true,
    BoxInfo: true,
    Tracers: false,
    Esp: false,
    MarkTotem: true,
    MarkDeath: true,
    SandwormTracers: false,
    KrakenTracers: false,
    ColoredSpikes: true,
    NoFog: true,
    ListEnabledHacks: true,
    MovementPredicter: false,
    LockedChests: true,
    DrawItemsOnChest: true,
    ShowNames: true,
    Roofs: true,
    AutoTotem: {
      e: false,
      k: "KeyH"
    },
    PathFinder: {
      e: false,
      g: false,
      k: "Numpad3"
    },
    AutoSteal: {
      e: false,
      k: "KeyQ",
      l: [],
      u: false,
      o: 0
    },
    AutoExtTake: {
      e: false,
      k: "NONE"
    },
    AutoExtPut: {
      e: false,
      k: "NONE"
    },
    AutoBreadTake: {
      e: false,
      k: "NONE"
    },
    AutoBreadPut: {
      e: false,
      k: "NONE"
    },
    SwordInChest: {
      e: false,
      k: "KeyE"
    },
    Aimbot: {
      e: false,
      k: "KeyF",
      a: null
    },
    AutoTame: {
      e: false,
      k: "KeyJ",
      a: null
    },
    AutoEme: {
      e: false,
      k: "Numpad2",
      a: null
    },
    Autofarm: {
      e: false,
      k: "Numpad1",
      a: null,
      w: false,
      x: null,
      xx: null,
      y: null,
      yy: null,
      sy: null,
      sx: null
    },
    AutoRes: {
      e: false,
      k: "NONE",
      a: null
    },
    AutoCraft: {
      e: false,
      k: "KeyK"
    },
    AutoRecycle: {
      e: false,
      k: "KeyL"
    }
  };
  let LastMove = 0;
  let WeaponDamageList = {};
  WeaponDamageList[-1] = 5;
  WeaponDamageList[12] = 10;
  WeaponDamageList[13] = 14;
  WeaponDamageList[14] = 15;
  WeaponDamageList[15] = 17;
  WeaponDamageList[33] = 18;
  WeaponDamageList[34] = 22;
  WeaponDamageList[16] = 22;
  WeaponDamageList[18] = 13;
  WeaponDamageList[17] = 24;
  WeaponDamageList[55] = 2;
  WeaponDamageList[32] = 6;
  WeaponDamageList[31] = 5;
  WeaponDamageList[8] = 1;
  WeaponDamageList[1] = 2;
  WeaponDamageList[3] = 3;
  WeaponDamageList[4] = 4;
  WeaponDamageList[49] = 1;
  WeaponDamageList[56] = 5;
  WeaponDamageList[46] = 2;
  WeaponDamageList[50] = 3;
  WeaponDamageList[51] = 4;
  WeaponDamageList[52] = 5;
  WeaponDamageList[36] = 3;
  WeaponDamageList[37] = 4;
  WeaponDamageList[38] = 5;
  WeaponDamageList[45] = 12;
  WeaponDamageList[57] = 12;
  WeaponDamageList[0] = 19;
  WeaponDamageList[5] = 22;
  WeaponDamageList[6] = 24;
  WeaponDamageList[30] = 27;
  WeaponDamageList[63] = 33;
  WeaponDamageList[62] = 30;
  WeaponDamageList[19] = 30;
  let lastBoughtKit = -1;
  let XrayCtx = CanvasRenderingContext2D.prototype.drawImage;
  let PathfinderEnd = {
    x: -1,
    y: -1
  };
  let CrownCooldown = 0;
  let Spectator;
  let EmeraldPos = [
    [21550, 29718],
    [21963, 29773],
    [21919, 29350]
  ];
  let EmeraldIndex = 0;
  let lastrecycled = -1;
  let lastcrafted = -1;
  let toPlace = -1;
  let Totem = {
    x: null,
    y: null
  };
  let Death = {
    x: null,
    y: null
  };
  let TimerTools = {
    HPTimer: 0,
    GaugeTimer: 0
  };
  let Limit = {
    L: 0,
    I: new createText(250, 70, 0),
    E: false
  };
  let JoinLeave = {
    Join: [],
    Leave: [],
    toggle1: false,
    toggle2: false,
    toggle11: false,
    toggle22: false
  };

  CanvasRenderingContext2D.prototype.drawImage = function () {
    if (Settings.Xray.e) {
      this.globalAlpha = Settings.Xray.o;
      let e = XrayCtx.apply(this, arguments);
      this.globalAlpha = 1;
      return e
    }
    return XrayCtx.apply(this, arguments)
  };
  window.Utils = {
    initUI: () => {
      let gui = new guify({
        title: "deobfuscate in 30min",
        theme: {
          name: "LOUX",
          colors: {
            panelBackground: "rgb(0,0,0)",
            componentBackground: "rgb(3, 16, 34)",
            componentForeground: "rgb(62, 125, 215)",
            textPrimary: "rgb(0, 255, 255)",
            textSecondary: "rgb(255,255,255)",
            textHover: "rgb(43, 16, 159)"
          },
          font: {
            fontFamily: "Baloo Paaji",
            fontSize: "20px",
            fontWeight: "1"
          }
        },
        align: "right",
        width: 550,
        barMode: "none",
        panelMode: "none",
        opacity: .6,
        root: document.body,
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Visuals",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Misc",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Binds",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoFarm",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "PathFinder",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoSteal",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoSpike",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "AutoCraft&Recycle",
        open: false
      });
      gui.Register({
        type: "folder",
        label: "Token",
        open: false
      });
      gui.Register([{
        type: "button",
        label: "Set AutoSpike Key",
        action: data => {
          Utils.controls.setKeyBind("AutoSpike")
        }
      }, {
        type: "display",
        label: "AutoSpike Key:",
        object: Settings.AutoSpike,
        property: "k"
      }, {
        type: "checkbox",
        label: "AutoSpike 2",
        object: Settings.AutoSpike,
        property: "m",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "1",
        object: Settings.AutoSpike.p,
        property: "0",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "2",
        object: Settings.AutoSpike.p,
        property: "1",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "3",
        object: Settings.AutoSpike.p,
        property: "2",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "4",
        object: Settings.AutoSpike.p,
        property: "3",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "5",
        object: Settings.AutoSpike.p,
        property: "4",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "6",
        object: Settings.AutoSpike.p,
        property: "5",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "select",
        label: "7",
        object: Settings.AutoSpike.p,
        property: "6",
        options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "AutoSpike"
      });
      gui.Register([{
        type: "button",
        label: "Set AutoSteal Key",
        action: data => {
          Utils.controls.setKeyBind("AutoSteal")
        }
      }, {
        type: "display",
        label: "AutoSteal Key:",
        object: Settings.AutoSteal,
        property: "k"
      }, {
        type: "checkbox",
        label: "AutoSteal",
        object: Settings.AutoSteal,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoUnlock",
        object: Settings.AutoSteal,
        property: "u",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "ItemID",
        min: 0,
        max: 1e4,
        step: 1,
        object: Settings.AutoSteal,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Add Item ID to SmartSteal",
        action: data => {
          Settings.AutoSteal.l.push(Settings.AutoSteal.o);
          updateChest()
        }
      }, {
        type: "button",
        label: "Delete ID",
        action: data => {
          let index = Settings.AutoSteal.l.indexOf(Settings.AutoSteal.o);
          if (index !== -1) {
            Settings.AutoSteal.l.splice(index, 1)
          }
          updateChest()
        }
      }, {
        type: "button",
        label: "Clear",
        action: data => {
          Settings.AutoSteal.l = [];
          updateChest()
        }
      }], {
        folder: "AutoSteal"
      });
      gui.Register([{
        type: "checkbox",
        label: "AutoCraft",
        object: Settings.AutoCraft,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoRecycle",
        object: Settings.AutoRecycle,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Set AutoCraft Key",
        action: data => {
          Utils.controls.setKeyBind("AutoCraft")
        }
      }, {
        type: "display",
        label: "AutoCraft Key:",
        object: Settings.AutoCraft,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoRecycle Key",
        action: data => {
          Utils.controls.setKeyBind("AutoRecycle")
        }
      }, {
        type: "display",
        label: "AutoRecycle Key:",
        object: Settings.AutoRecycle,
        property: "k"
      }], {
        folder: "AutoCraft&Recycle"
      });
      gui.Register([{
        type: "checkbox",
        label: "Start PathFinder",
        object: Settings.PathFinder,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Put Your Inventory to Chest",
        object: Settings.PathFinder,
        property: "g",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Set target location",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            PathfinderEnd.x = Math.floor(myPlayer.x / 100);
            PathfinderEnd.y = Math.floor(myPlayer.y / 100)
          }
        }
      }, {
        type: "text",
        label: "Set X",
        object: PathfinderEnd,
        property: "x",
        onChange: data => { }
      }, {
        type: "text",
        label: "Set Y",
        object: PathfinderEnd,
        property: "y",
        onChange: data => { }
      }, {
        type: "display",
        label: "Target X",
        object: PathfinderEnd,
        property: "x"
      }, {
        type: "display",
        label: "Target Y",
        object: PathfinderEnd,
        property: "y"
      }], {
        folder: "PathFinder"
      });
      gui.Register([{
        type: "button",
        label: "Set AutoExtractor Put Key",
        action: data => {
          Utils.controls.setKeyBind("AutoExtPut")
        }
      }, {
        type: "display",
        label: "AutoExtractor Put Key:",
        object: Settings.AutoExtPut,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoExtractor Take Key",
        action: data => {
          Utils.controls.setKeyBind("AutoExtTake")
        }
      }, {
        type: "display",
        label: "AutoExtractor Take Key:",
        object: Settings.AutoExtTake,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBread Take Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBreadTake")
        }
      }, {
        type: "display",
        label: "AutoBread Take Key:",
        object: Settings.AutoBreadTake,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBread Put Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBreadPut")
        }
      }, {
        type: "display",
        label: "AutoBread Put Key:",
        object: Settings.AutoBreadPut,
        property: "k"
      }, {
        type: "button",
        label: "Set Aimbot Key",
        action: data => {
          Utils.controls.setKeyBind("Aimbot")
        }
      }, {
        type: "display",
        label: "Aimbot Key:",
        object: Settings.Aimbot,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoTame Key",
        action: data => {
          Utils.controls.setKeyBind("AutoTame")
        }
      }, {
        type: "display",
        label: "AutoTame Key:",
        object: Settings.AutoTame,
        property: "k"
      }, {
        type: "button",
        label: "Set SwordInChest Key",
        action: data => {
          Utils.controls.setKeyBind("SwordInChest")
        }
      }, {
        type: "display",
        label: "SwordInChest Key:",
        object: Settings.SwordInChest,
        property: "k"
      }, {
        type: "button",
        label: "Set Xray Key",
        action: data => {
          Utils.controls.setKeyBind("Xray")
        }
      }, {
        type: "display",
        label: "Xray Key:",
        object: Settings.Xray,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoBridge Key",
        action: data => {
          Utils.controls.setKeyBind("AutoBridge")
        }
      }, {
        type: "display",
        label: "AutoBridge Key:",
        object: Settings.AutoBridge,
        property: "k"
      }, {
        type: "button",
        label: "Set PathFinder Key",
        action: data => {
          Utils.controls.setKeyBind("PathFinder")
        }
      }, {
        type: "display",
        label: "PathFinder Key:",
        object: Settings.PathFinder,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoTotem Key",
        action: data => {
          Utils.controls.setKeyBind("AutoTotem")
        }
      }, {
        type: "display",
        label: "AutoTotem Key:",
        object: Settings.AutoTotem,
        property: "k"
      }, {
        type: "button",
        label: "Set Autofarm Key",
        action: data => {
          Utils.controls.setKeyBind("Autofarm")
        }
      }, {
        type: "display",
        label: "Autofarm Key:",
        object: Settings.Autofarm,
        property: "k"
      }, {
        type: "button",
        label: "Set AutoEmerald Key",
        action: data => {
          Utils.controls.setKeyBind("AutoEme")
        }
      }, {
        type: "display",
        label: "AutoEmerald Key:",
        object: Settings.AutoEme,
        property: "k"
      }, {
        type: "button",
        label: "Set Spectator Key",
        action: data => {
          Utils.controls.setKeyBind("Spectator")
        }
      }, {
        type: "display",
        label: "Spectator Key:",
        object: Settings.Spectator,
        property: "k"
      }, {
        type: "button",
        label: "Set DropSword Key",
        action: data => {
          Utils.controls.setKeyBind("DropSword")
        }
      }, {
        type: "display",
        label: "DropSword Key:",
        object: Settings.DropSword,
        property: "k"
      }], {
        folder: "Binds"
      });
      gui.Register([{
        type: "checkbox",
        label: "Autobridge with G mode",
        object: Settings.AutoBridge,
        property: "m",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Equip after place",
        object: Settings,
        property: "Equiq",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoExtractor Take",
        object: Settings.AutoExtTake,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoExtractor Put",
        object: Settings.AutoExtPut,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoBread Take",
        object: Settings.AutoBreadTake,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoBread Put",
        object: Settings.AutoBreadPut,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoEmerald",
        object: Settings.AutoEme,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoRespawn",
        object: Settings,
        property: "Respawn",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoCrown",
        object: Settings,
        property: "Crown",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Auto-Book",
        object: Settings,
        property: "AutoBook",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoTotem",
        object: Settings.AutoTotem,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoSeed",
        object: Settings,
        property: "AutoSeed",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoIce",
        object: Settings,
        property: "Ice",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Aimbot",
        object: Settings.Aimbot,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoTame",
        object: Settings.AutoTame,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Put that much in chest",
        min: 10,
        max: 8e3,
        step: 1,
        object: Settings,
        property: "PutInChest",
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "Misc"
      });
      gui.Register([{
        type: "checkbox",
        label: "BlizzardSandstorm",
        object: Settings,
        property: "BS",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MovementPredicter",
        object: Settings,
        property: "MovementPredicter",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Show Join&Leaves",
        object: Settings,
        property: "JoinLeave",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "DrawItemsOnChest",
        object: Settings,
        property: "DrawItemsOnChest",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ListEnabledHacks",
        object: Settings,
        property: "ListEnabledHacks",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "SandwormTracers",
        object: Settings,
        property: "SandwormTracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Show If in bed",
        object: Settings,
        property: "Bed",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "KrakenTracers",
        object: Settings,
        property: "KrakenTracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ColoredSpikes",
        object: Settings,
        property: "ColoredSpikes",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "LockedChests",
        object: Settings,
        property: "LockedChests",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BuildingInfo",
        object: Settings,
        property: "BuildingInfo",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "PlayerOntop",
        object: Settings,
        property: "PlayerOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ChestOntop",
        object: Settings,
        property: "ChestOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BoxOntop",
        object: Settings,
        property: "BoxOntop",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "PlayerInfo",
        object: Settings,
        property: "PCount",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MarkTotem",
        object: Settings,
        property: "MarkTotem",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "MarkDeath",
        object: Settings,
        property: "MarkDeath",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Debugger",
        object: Settings,
        property: "Debug",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Hitboxes",
        object: Settings,
        property: "Hitbox",
        onChange: data => {
          for (let hitbox in Hitboxes) delete Hitboxes[hitbox];
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "ShowName",
        object: Settings,
        property: "ShowNames",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "BoxInfo",
        object: Settings,
        property: "BoxInfo",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Tracers",
        object: Settings,
        property: "Tracers",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Timers",
        object: Settings,
        property: "Timer",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "NoFog",
        object: Settings,
        property: "NoFog",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Roofs",
        object: Settings,
        property: "Roofs",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Xray",
        object: Settings.Xray,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Vehicle Xray",
        object: Settings.Fly,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "Esp",
        object: Settings,
        property: "Esp",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Xray Opacity",
        min: 0,
        max: 1,
        step: .1,
        object: Settings.Xray,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "range",
        label: "Vehicle Opacity",
        min: 0,
        max: 1,
        step: .1,
        object: Settings.Fly,
        property: "o",
        onChange: data => {
          Utils.saveSettings()
        }
      }], {
        folder: "Visuals"
      });
      gui.Register([{
        type: "checkbox",
        label: "Start AutoFarm",
        object: Settings.Autofarm,
        property: "e",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "checkbox",
        label: "AutoWater",
        object: Settings.Autofarm,
        property: "w",
        onChange: data => {
          Utils.saveSettings()
        }
      }, {
        type: "button",
        label: "Top left of farm",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.x = myPlayer.x;
            Settings.Autofarm.y = myPlayer.y
          }
        }
      }, {
        type: "button",
        label: "Bottom right of farm",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.xx = myPlayer.x;
            Settings.Autofarm.yy = myPlayer.y
          }
        }
      }, {
        type: "button",
        label: "Safe Point",
        action: data => {
          let myPlayer = p.$Vu[m.vUU];
          if (myPlayer) {
            Settings.Autofarm.sx = myPlayer.x;
            Settings.Autofarm.sy = myPlayer.y
          }
        }
      }, {
        type: "display",
        label: "X",
        object: Settings.Autofarm,
        property: "x"
      }, {
        type: "display",
        label: "Y",
        object: Settings.Autofarm,
        property: "y"
      }, {
        type: "display",
        label: "X1",
        object: Settings.Autofarm,
        property: "xx"
      }, {
        type: "display",
        label: "Y1",
        object: Settings.Autofarm,
        property: "yy"
      }, {
        type: "display",
        label: "SX",
        object: Settings.Autofarm,
        property: "sx"
      }, {
        type: "display",
        label: "SY",
        object: Settings.Autofarm,
        property: "sy"
      }], {
        folder: "AutoFarm"
      });
      gui.Register([{
        type: "button",
        label: "Copy Token and TokenID",
        action: data => {
          let str = "```" + `Token: ${m.Vw_}\nTokenID: ${m.$UQ_0}` + "```";
          window.prompt("Press CTRL C", str)
        }
      }], {
        folder: "Token"
      })
    },
    controls: null,
    controller: class {
      setKeyBind(callback) {
        Settings[callback].k = "Press any key";
        let click = 0;
        document.addEventListener("keydown", function abc(event) {
          click++;
          if (click >= 1) {
            if (event.code == "Escape") {
              Settings[callback].k = "NONE"
            } else {
              Settings[callback].k = event.code
            }
            document.removeEventListener("keydown", abc);
            Utils.saveSettings()
          }
        })
      }
    },
    saveSettings: () => {
      for (let HACK in Settings) {
        localStorage.setItem(HACK + "louxlegacy", JSON.stringify(Settings[HACK]))
      }
    },
    loadSettings: () => {
      for (let HACK in Settings) {
        let data = localStorage.getItem(HACK + "louxlegacy");
        if (data) Settings[HACK] = JSON.parse(data)
      }
    },
    LoadHack: () => {
      Utils.loadSettings();
      Settings.Xray.e = false;
      Settings.AutoSpike.e = false;
      Settings.PathFinder.e = false;
      Settings.Aimbot.e = false;
      Settings.AutoTame.e = false;
      Settings.Autofarm.e = false;
      Settings.AutoEme.e = false;
      Utils.controls = new Utils.controller;
      let script = document.createElement("script");
      script.onload = function () {
        Utils.initUI()
      };
      script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
      document.body.appendChild(script);
      setTimeout(() => {
        let mainFlakes = document.getElementById("snowflakeContainer");
        if (mainFlakes) {
          mainFlakes.nextElementSibling.remove();
          mainFlakes.previousElementSibling.remove();
          for (let i = 0; i < mainFlakes.childNodes.length; i++) {
            mainFlakes.childNodes[i].remove()
          }
          mainFlakes.remove()
        }
      }, 1e4)
    }
  };

  const Ek = "development";
  const Fk = "production";
  function Gk(a) {
    this.ⵠⲆᐃΔ = 2147483648;
    this.a = 1103515245;
    this.c = 12345;
    this.state = a || Math.floor(Math.random() * (this.ⵠⲆᐃΔ - ik));
  }
  Gk.prototype.random = function () {
    this.state = (this.a * this.state + this.c) % this.ⵠⲆᐃΔ;
    return this.state / this.ⵠⲆᐃΔ;
  };
  const Hk = Ze;
  Gk.prototype.ⲆⲆⲆⲆΔᐃⵠ = function (a) {
    this.state = a;
  };
  ⲆⲆᐃⲆᐃⲆᐃ = 10000;
  const Ik = lk;
  ⵠⵠᐃᐃᐃᐃⵠ = [];
  var Jk = new Gk();
  Jk.ⲆⲆⲆⲆΔᐃⵠ(new Date().getTime());
  const Kk = lk;
  const Lk = li;
  const Mk = P;
  const Nk = m;
  const Ok = ij;
  const Pk = M;
  const Qk = me;
  const Rk = E;
  for (var Sk = yk; Sk < ⲆⲆᐃⲆᐃⲆᐃ; Sk++) {
    ⵠⵠᐃᐃᐃᐃⵠ.push(Jk.random());
  }
  function Tk(b, c, d, e, f, i) {
    const j = ((7700 + b) * 214013 + 2531011) % 4294967296;
    const a = ((d + 14399) * 22695477 + 1) % 4294967296;
    const k = (2531011 + (26040 + e) * 214013) % 4294967296;
    const h = ((23108 + f) * 1103515245 + 12345) % 2147483648;
    const l = (0 << (i >> 8 & 255)) + (Oi << (i >> 24 & 255)) + (24 << (i & 255)) + (16 << (i >> 16 & 255));
    return ((17730 + (Rv(j, ~(c & 35363) & (c | 35363)) ^ Lw(a, k, h, l, j))) * 22695477 + 1) % 4294967296;
  }
  const Uk = Pj;
  const Vk = ok;
  function Wk(b, c, d, e) {
    const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
    const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
    const j = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
    const a = (X << (e >> 24 & gk)) + (32 << (e >> 32 & Gi)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
    const k = function (c, d, e, f, i, j) {
      const k = c ^ 10715;
      const a = (24 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
      const m = (8 << (e >> 16 & 255)) + (32 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 32 & 255));
      const h = f ^ 40782;
      const l = i ^ 41301;
      const g = ~(j & 12091) & (j | 12091);
      const n = vn(k, a, m, h, l, g);
      vn(k, a, m, h, l, g);
      Pn(k, a, m, h, l);
      const b = (n | 3006) & ~(n & 3006);
      return ~(b & 24460) & (b | 24460);
    }(f, i, j, a, f, i);
    const h = Rn(j, a, f, i, j);
    vn(a, f, i, j, a, f);
    const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
    return (l | 38630) & ~(l & 38630);
  }
  function Xk(b, c, d, e, f, g) {
    const i = ~(e & 7793) & e | ~(e & 7793) & 7793;
    const a = f ^ 51374;
    const j = zw(~(b & 48993) & b | ~(b & 48993) & 48993, (16 << (c >> 16 & 255)) + (0 << (c & gk)) + (24 << (c >> 8 & 255)) + (8 << (c >> 24 & 255)), d ^ 35129);
    (function (a, b) {
      const c = (54035 + a) % 65310;
      const d = (1 + (b + 62940) * 22695477) % 4294967296;
      const e = Lw(c, d, c, d, c);
      const f = Ia(d, c, d);
    })(i, a);
    return j ^ 27678;
  }
  const Yk = Dj;
  function Zk(c, e, f, i, j, k) {
    const m = ((39488 + c) * 214013 + 2531011) % 4294967296;
    const a = ~(e & 49976) & e | ~(e & 49976) & 49976;
    const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
    const h = i ^ 52219;
    const l = (j + 3575) % 65503;
    const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
    const o = xn(m, a, n, h, l);
    const b = function (c, d, e, f, i, j) {
      const k = c ^ 30142;
      const a = (d + 63025) % 65493;
      const m = e ^ 30777;
      const h = ((45939 + f) * 22695477 + 1) % 4294967296;
      const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
      const g = (j | 45652) & ~(j & 45652);
      const n = xn(k, a, m, h, l);
      $k(g, k, a, m, h);
      Tn(l, g, k, a, m, h);
      return n ^ 60048;
    }(g, m, a, n, h, l);
    pn(g, m, a, n, h, l);
    const p = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
    return ~(p & 42138) & p | ~(p & 42138) & 42138;
  }
  function $k(c, d, e, f, i) {
    const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
    const k = d ^ 63080;
    const a = ((e + 60304) * 22695477 + 1) % 4294967296;
    const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
    const h = (i | 40165) & ~(i & 40165);
    const l = function (b, c, d, e) {
      const f = (b | 57611) & ~(b & 57611);
      const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
      const j = d ^ 62842;
      const a = ~(e & 1179) & e | ~(e & 1179) & 1179;
      const k = dq(f, i, j, a);
      const h = wn(f, i, j, a);
      Wk(f, i, j, a);
      const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & cq)) + (Ak << ((k ^ h) >> 32 & Gi)) + (32 << ((k ^ h) >> S & 255));
      return ~(l & 63304) & (l | 63304);
    }(j, k, a, m);
    const g = Rn(h, j, k, a, m);
    const n = Hn(h, j, k, a, m, h);
    return ((28765 + ((16 << ((l ^ g) >> 24 & ri)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
  }
  const _k = He;
  const aq = vj;
  function bq(c, d, e, f, i) {
    const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
    const k = d ^ 58614;
    const a = ((e + 45267) * 214013 + 2531011) % 4294967296;
    const m = f ^ 40810;
    const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
    const l = jn(j, k);
    const g = Wk(a, m, h, j);
    (function (b, c, d, e) {
      const f = (b + 34282) % 65336;
      const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
      const j = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
      const a = ~(e & 25475) & 25475 | ~(e & 25475) & e;
      const k = function (a, b) {
        const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
        const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
        const e = Ln(c, d, c);
        cn(d, c, d, c);
        return ((42346 + (e ^ 18573 ^ en(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
      }(f, i);
      const h = En(j, a, f, i, j);
      jn(a, f);
      const l = (58498 + (k ^ h)) % 65531;
    })(k, a, m, h);
    const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> S & 255));
    return ~(n & 13644) & n | ~(n & 13644) & 13644;
  }
  const cq = Gi;
  function dq(a, b, c, d) {
    const e = a ^ 11762;
    const f = ~(b & 19425) & 19425 | ~(b & 19425) & b;
    return ((55182 + (((17757 + ((32 << ((e ^ f) >> 32 & 255)) + (8 << ((e ^ f) >> 8 & 255)) + (24 << ((e ^ f) >> 24 & 255)) + (Kj << ((e ^ f) >> 16 & 255)) ^ (32 << (c >> 16 & 255)) + (S << (c >> 32 & 255)) + (24 << (c >> 24 & Gi)) + (16 << (c >> 8 & cq)))) * 1664525 + 1013904223) % 4294967296 ^ (~(d & 259) & 259 | ~(d & 259) & d))) * 1664525 + 1013904223) % 4294967296;
  }
  function en(b, c, d, e, f) {
    const i = (32 << (b >> 24 & 255)) + (sk << (b >> 8 & 255)) + (24 << (b >> ge & 255)) + (8 << (b >> 32 & 255));
    const j = (c + 39144) % 65406;
    const a = d ^ 34575;
    const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
    const h = (f | 25975) & ~(f & 25975);
    const l = dq(i, j, a, k);
    En(h, i, j, a, k);
    pn(h, i, j, a, k, h);
    return (l | 19326) & ~(l & 19326) ^ 36297;
  }
  const tn = de;
  function nn(b, c, d, e, f) {
    const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
    const j = (12345 + (c + 3024) * 1103515245) % 2147483648;
    const a = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & gk));
    const k = (1 + (e + 41324) * 22695477) % 4294967296;
    const h = (f | 19607) & ~(f & 19607);
    const l = Bn(i, j);
    En(a, k, h, i, j);
    Tn(a, k, h, i, j, a);
    const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
    return ~(g & 46567) & (g | 46567);
  }
  const on = Q;
  const rn = Ue;
  const an = sk;
  const sn = B;
  const hn = zk;
  function ln(c, d, e, f, i, j) {
    const k = (1013904223 + (c + 28824) * 1664525) % 4294967296;
    const a = (1013904223 + (13210 + d) * 1664525) % 4294967296;
    const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
    const h = (24 << (f >> 24 & 255)) + (16 << (f >> S & 255)) + (8 << (f >> Ak & ri)) + (32 << (f >> 32 & 255));
    const l = (1 + (39199 + i) * 22695477) % 4294967296;
    const g = j ^ 33037;
    const n = function (b, c, d) {
      const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
      const f = (c | 44117) & ~(c & 44117);
      const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & Gi)) + (32 << (d >> 8 & ri));
      const i = fn(e, f, g, e, f);
      const a = Hn(g, e, f, g, e, f);
      const j = function (a, b) {
        const c = (16 << (a >> 8 & gk)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
        const d = (32 << (b >> 32 & ri)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
        const e = Tn(c, d, c, d, c, d);
        (function (b, c, d, e, f) {
          const i = b ^ 64570;
          const j = (2531011 + (c + 41768) * 214013) % 4294967296;
          const a = (1013904223 + (d + 43923) * 1664525) % 4294967296;
          const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
          const h = (f | 21896) & ~(f & 21896);
          const l = function (a, b) {
            const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
            const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
            const e = function (b, c, d) {
              const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
              const f = (c | 55665) & ~(c & 55665);
              const g = (d + 54633) % 65404;
              const h = $k(e, f, g, e, f);
              (function (c, e, f, i, j, k) {
                const m = (2531011 + (c + 16955) * 214013) % 4294967296;
                const a = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                const n = (f | 14774) & ~(f & 14774);
                const h = (i | 48802) & ~(i & 48802);
                const l = ~(j & 24998) & (j | 24998);
                const g = (Oi << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                const o = un(m, a, n, h);
                const b = En(l, g, m, a, n);
                const p = un(h, l, g, m);
              })(g, e, f, g, e, f);
              wn(g, e, f, g);
              return ~(h & 43875) & (h | 43875) ^ 15116;
            }(c, d, c);
            Pn(d, c, d, c, d);
            dq(c, d, c, d);
            return (e | 17943) & ~(e & 17943) ^ 21791;
          }(i, j);
          cn(a, k, h, i);
          const g = nn(j, a, k, h, i);
        })(c, d, c, d, c);
        Bn(d, c);
        return (e | 58283) & ~(e & 58283) ^ 8337;
      }(g, e);
      const h = (16 << ((i ^ a) >> 32 & cq)) + (24 << ((i ^ a) >> 24 & cq)) + (32 << ((i ^ a) >> 8 & 255)) + (8 << ((i ^ a) >> 16 & Gi));
      return (8 << ((h ^ j) >> 32 & w)) + (sk << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
    }(k, a, m);
    wn(h, l, g, k);
    return ((34159 + (n ^ 2959 ^ un(a, m, h, l))) * 1103515245 + 12345) % 2147483648;
  }
  const gn = Ai;
  function un(b, c, d, e) {
    const f = ~(b & 33107) & (b | 33107);
    const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
    const i = ~(d & 32053) & (d | 32053);
    const a = e ^ 12240;
    const j = function (b, c, d, e) {
      const f = (32 << (b >> 32 & 255)) + (16 << (b >> Ak & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
      const i = (1 + (50595 + c) * 22695477) % 4294967296;
      const j = ~(d & 40066) & d | ~(d & 40066) & 40066;
      const a = e ^ 18768;
      const k = xn(f, i, j, a, f);
      const h = bq(i, j, a, f, i);
      const l = Cn(j, a);
      return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
    }(f, g, i, a);
    wn(f, g, i, a);
    return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ xn(f, g, i, a, f))) * 214013) % 4294967296;
  }
  const bn = gn;
  function vn(b, c, d, e, f, i) {
    const j = ~(b & 36133) & (b | 36133);
    const a = (c | 13670) & ~(c & 13670);
    const k = (d | 31390) & ~(d & 31390);
    const h = e ^ 64081;
    const l = f ^ 7550;
    const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
    return (12345 + (36760 + (((62552 + (_n(j, a, k, h, l) ^ wn(g, j, a, k))) * 2147483629 + 2147483587) % 2147483647 ^ Pn(h, l, g, j, a))) * 1103515245) % 2147483648;
  }
  const dn = Aj;
  function cn(b, c, d, e) {
    const f = (b | 15432) & ~(b & 15432);
    const g = c ^ 12315;
    const i = d ^ 38714;
    const a = e ^ 58084;
    const j = Zk(f, g, i, a, f, g);
    wn(i, a, f, g);
    return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ pn(i, a, f, g, i, a))) * 214013 + 2531011) % 4294967296;
  }
  const mn = tk;
  function pn(b, c, d, e, f, g) {
    const i = b ^ 23409;
    const a = c ^ 26380;
    const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
    const h = g ^ 42490;
    return ((19056 + (dq(i, a, d ^ 53590, e ^ 36633) ^ dq(j, h, i, a))) * 22695477 + 1) % 4294967296;
  }
  function Cn(b, c) {
    const d = (2531011 + (b + 62874) * 214013) % 4294967296;
    const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const f = pn(d, e, d, e, d, e);
    const g = pn(d, e, d, e, d, e);
    dq(d, e, d, e);
    const h = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & Gi)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & cq));
    return ~(h & 55949) & 55949 | ~(h & 55949) & h;
  }
  function Tn(c, d, e, f, i, j) {
    const k = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (X << (c >> 32 & 255));
    const a = (d | 41551) & ~(d & 41551);
    const m = (24 << (e >> 24 & ri)) + (16 << (e >> 32 & 255)) + (Oi << (e >> 16 & 255)) + (32 << (e >> 8 & 255));
    const h = ~(f & 32641) & (f | 32641);
    const l = ((i + 35582) * 214013 + 2531011) % 4294967296;
    const g = ~(j & 1090) & (j | 1090);
    const n = Hn(k, a, m, h, l, g);
    en(k, a, m, h, l);
    dq(g, k, a, m);
    const b = ~(n & 8077) & 8077 | ~(n & 8077) & n;
    return ~(b & 3708) & (b | 3708);
  }
  function fn(b, c, d, e, f) {
    const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
    const j = ~(c & 7703) & c | ~(c & 7703) & 7703;
    const a = (d | 31275) & ~(d & 31275);
    const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
    const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> an & 255)) + (16 << (f >> 32 & cq));
    const l = pn(i, j, a, k, h, i);
    const g = dq(j, a, k, h);
    Ln(i, j, a);
    return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
  }
  const zn = Oi;
  const yn = Ze;
  function wn(b, c, d, e) {
    const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
    const g = c ^ 57623;
    const i = ~(d & 40280) & d | ~(d & 40280) & 40280;
    const a = ~(e & 24601) & e | ~(e & 24601) & 24601;
    const j = Bn(f, g);
    Bn(i, a);
    Rn(f, g, i, a, f);
    const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
    return (h | 8862) & ~(h & 8862);
  }
  function Pn(b, c, d, e, f) {
    const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
    const j = ((18197 + c) * 214013 + 2531011) % 4294967296;
    const a = (2531011 + (22845 + d) * 214013) % 4294967296;
    const k = (32 << (e >> 16 & w)) + (z << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & w));
    const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
    const l = pn(i, j, a, k, h, i);
    const g = Tn(j, a, k, h, i, j);
    dq(a, k, h, i);
    return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
  }
  const An = k;
  const kn = Le;
  function xn(b, c, d, e, f) {
    const i = b ^ 62008;
    const j = (24 << (c >> 32 & 255)) + (X << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
    const a = ((d + 46531) * 22695477 + dn) % 4294967296;
    const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
    const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
    const l = $k(i, j, a, k, h);
    Hn(i, j, a, k, h, i);
    return ((3037 + (l ^ 57467 ^ Rn(j, a, k, h, i))) * 1664525 + 1013904223) % 4294967296;
  }
  const Jn = kk;
  const Mn = yk;
  function Bn(a, b) {
    const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
    const d = b ^ 53080;
    return (1 + (57525 + ((17769 + (_n(c, d, c, d, c) ^ En(d, c, d, c, d))) % 65357 ^ dq(c, d, c, d))) * 22695477) % 4294967296;
  }
  const Dn = lk;
  function En(b, c, d, e, f) {
    const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
    const j = c ^ 50118;
    const a = d ^ 41620;
    const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
    const h = (32 << (f >> 16 & 255)) + (Kj << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
    const l = Hn(i, j, a, k, h, i);
    Hn(j, a, k, h, i, j);
    return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ dq(a, k, h, i))) * 214013) % 4294967296;
  }
  const In = gn;
  const Sn = Gi;
  const Qn = Pj;
  function _n(c, d, e, f, i) {
    const j = ($j << (c >> 32 & Sn)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
    const k = d ^ 55978;
    const a = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
    const m = ~(f & 30642) & (f | 30642);
    const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & cq)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
    const l = En(j, k, a, m, h);
    const g = Pn(j, k, a, m, h);
    dq(j, k, a, m);
    const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & ri));
    return ~(n & 23686) & (n | 23686);
  }
  const Fn = Ke;
  function Rn(c, d, e, f, i) {
    const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
    const k = (d + 52922) % 65337;
    const a = e ^ 25250;
    const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
    const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
    const l = en(j, k, a, m, h);
    const g = jn(j, k);
    en(a, m, h, j, k);
    const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
    return ~(n & 7922) & n | ~(n & 7922) & 7922;
  }
  function jn(b, c) {
    const d = b ^ 24508;
    const e = (16 << (c >> 16 & 255)) + (24 << (c >> Oi & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
    const f = nn(d, e, d, e, d);
    const g = _n(e, d, e, d, e);
    fn(d, e, d, e, d);
    const h = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
    return ~(h & 40927) & 40927 | ~(h & 40927) & h;
  }
  function Ln(b, c, d) {
    const e = b ^ 23323;
    const f = (2531011 + (61713 + c) * 214013) % 4294967296;
    const g = (d | 24198) & ~(d & 24198);
    const h = nn(e, f, g, e, f);
    const a = nn(g, e, f, g, e);
    nn(f, g, e, f, g);
    return (16 << ((h ^ a) >> 32 & 255)) + (8 << ((h ^ a) >> 8 & 255)) + (24 << ((h ^ a) >> 24 & 255)) + (32 << ((h ^ a) >> ge & 255)) ^ 31181;
  }
  const Wn = Rj;
  const Gn = Kj;
  const On = Qi;
  const qn = ri;
  const Nn = tk;
  function Hn(b, c, d, e, f, i) {
    const j = d ^ 8102;
    const a = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & Sn)) + (8 << (e >> 24 & 255)) + (16 << (e >> S & 255));
    const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
    const h = (1 + (62237 + i) * 22695477) % 4294967296;
    const l = Cn((b + 52483) % 65496, (z << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
    const g = Cn(j, a);
    Cn(k, h);
    return (45290 + (l ^ g)) % 65334 ^ 55575;
  }
  const Un = gj;
  ⵠⵠⵠⲆ = {
    ⲆΔΔᐃⲆⲆⲆ: () => new Promise((a, b) => {
      Vf.grecaptcha.ready(function () {
        Vf.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha"
        }).then(function (b) {
          a(b);
        }).catch(c => {
          if (Yv) {
            a(0);
          } else {
            console.log(Z);
            b(c);
          }
        });
      });
    }),
    ΔⵠᐃᐃᐃⵠΔⲆⵠ: function (a) {
      Vf.open(a, "_blank").focus();
    },
    ⲆᐃᐃⵠΔⲆⵠ: function (a) {
      Vf.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
    },
    ⲆⵠⵠᐃᐃΔᐃ: function (a, b) {
      for (var c in a) {
        if (a[c] != b[c]) {
          return ue;
        }
      }
      return Nn;
    },
    ⲆⲆᐃΔΔᐃᐃΔΔ: function (a, b) {
      if (a.length != b.length) {
        return false;
      }
      for (var c = Fj; c < a.length; c++) {
        if (typeof a == "object") {
          if (!this.ⲆⵠⵠᐃᐃΔᐃ(a[c], b[c])) {
            return false;
          }
        } else if (a[c] != b[c]) {
          return false;
        }
      }
      return d;
    },
    ΔⵠⲆΔΔΔᐃ: function (a, b) {
      b.x = a.x;
      b.y = a.y;
    },
    ᐃΔᐃΔΔΔⵠ: function (a, b) {
      return {
        x: a.x - b.x,
        y: a.y - b.y
      };
    },
    ᐃᐃⲆⵠⲆᐃΔⲆΔ: function (a, b) {
      a.x *= b;
      a.y *= b;
    },
    ⵠΔⵠᐃⵠᐃᐃ: function (a, b) {
      return a.x * b.x + a.y * b.y;
    },
    ᐃⲆΔΔⵠᐃⲆ: function (a) {
      return Math.sqrt(a.x * a.x + a.y * a.y);
    },
    sign: function (a) {
      if (a < Fj) {
        return -V;
      } else {
        return 1;
      }
    },
    ⵠⲆⲆⵠΔΔⲆ: function (a, b) {
      return a.x * b.y - a.y * b.x;
    },
    ⵠΔⵠⲆΔⲆⵠ: function (a, b, c, d) {
      var e = d - b;
      var f = c - a;
      return Math.atan2(e, f);
    },
    ⵠᐃⵠΔΔⵠⲆ: function (a, b) {
      return Math.asin(this.ⵠΔⵠᐃⵠᐃᐃ(a, b) / (this.ᐃⲆΔΔⵠᐃⲆ(a) * this.ᐃⲆΔΔⵠᐃⲆ(b))) * this.sign(this.ⵠⲆⲆⵠΔΔⲆ(a, b));
    },
    ⲆΔᐃⵠΔⲆⲆ: function (a) {
      ⵠᐃΔᐃⲆᐃΔ = location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⵠᐃΔᐃⲆᐃΔ);
      if (b === null) {
        return null;
      } else {
        return b[1];
      }
    },
    ⲆΔΔΔⵠⲆΔ: function (a, b) {
      var c = Math.PI * 2;
      b = (b % c + c) % c;
      if (Math.abs(a - b) > Math.PI) {
        if (a > b) {
          return b + c;
        } else {
          return b - c;
        }
      } else {
        return b;
      }
    },
    ⲆⵠⵠΔΔⵠⵠ: function (a, b) {
      return this.ⵠᐃⵠΔΔⵠⲆ({
        x: ik,
        y: 0
      }, this.ᐃΔᐃΔΔΔⵠ(a, b));
    },
    ΔⲆⲆⲆ: function (a, b) {
      return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
    },
    ⵠⲆⲆⲆⵠᐃⲆ: function (a, b) {
      return {
        x: Math.sin(b) * a,
        y: Math.cos(b) * a
      };
    },
    ⵠΔΔⵠⵠᐃΔ: function (a, b) {
      a.x += b.x;
      a.y += b.y;
    },
    ⲆⵠΔⵠⵠΔΔ: function (a, b) {
      a.x -= b.x;
      a.y -= b.y;
    },
    ⵠᐃᐃᐃᐃⵠⵠⵠⲆ: function (a, b, c) {
      a.x += b;
      a.y += c;
    },
    ⵠΔᐃⲆᐃᐃⵠⲆΔ: function (a, b, c) {
      return {
        x: a.x + b,
        y: a.y + c
      };
    },
    ⵠⲆᐃⵠⵠ: function (a, b, c) {
      a.x += Math.sin(c) * b;
      a.y += Math.cos(c) * b;
    },
    ⵠᐃΔΔΔⲆⲆ: function (a, b) {
      return Math.floor((a - b) / C);
    },
    ΔⲆᐃⲆⵠⲆⵠ: function (a, b) {
      return {
        x: (a.x + b.x) / 2,
        y: (a.y + b.y) / Le
      };
    },
    ⵠⵠΔⵠΔᐃΔ: function () {
      if (Math.random() > 0.5) {
        return 1;
      } else {
        return -dn;
      }
    },
    ΔᐃⲆᐃᐃⲆⵠΔⵠ: function (a, b, c) {
      var d = this.ⵠⵠΔⵠΔᐃΔ();
      var e = this.ⵠⵠΔⵠΔᐃΔ();
      var f = Math.random() * Math.PI / 2;
      return {
        x: Math.floor(a + Math.sin(f) * d * c),
        y: Math.floor(b + Math.cos(f) * e * c)
      };
    },
    ⲆⵠΔⲆΔⲆⲆᐃᐃ: function (a, b, c, d) {
      this.x = a;
      this.y = b;
      this.w = c;
      this.ᐃⵠⲆ = d;
    },
    ΔΔⵠⲆⵠᐃⲆΔᐃ: function (a) {
      ΔⲆᐃ = [];
      ΔⲆᐃ.push.apply(ΔⲆᐃ, a);
      var b = [];
      while (ΔⲆᐃ.length > 0) {
        var c = Math.floor(Math.random() * ΔⲆᐃ.length);
        b.push(ΔⲆᐃ[c]);
        ΔⲆᐃ.splice(c, 1);
      }
      return b;
    },
    ⲆΔⵠᐃᐃⵠΔ: function (a) {
      if (a >= 20000) {
        a = (a - 20000) * 1000;
      } else if (a >= 10000) {
        a = (a - 10000) * 100;
      }
      return a;
    },
    ᐃΔⲆⲆⲆⵠᐃ: function (a) {
      if (typeof a !== "number") {
        return "0";
      }
      if (a >= 10000) {
        var b = Math.floor(Math.log10(a)) - 2;
        var c = Math.max(Fj, 3 - b);
        var d = Math.floor(a / 1000).toString();
        if (c) {
          for (var e = (d += "." + (a % 1000 / 1000).toString().substring(2).substring(jj, c)).length - V, f = 0; e > 0 && d[e] == "0"; e--) {
            f++;
          }
          if ((d = d.substring(0, d.length - f))[d.length - 1] == ".") {
            d = d.substring(0, d.length - ik);
          }
        }
        return d += "k";
      }
      return a.toString();
    },
    ⵠⵠΔⵠⲆⲆⵠ: function (a) {
      return a * (Le - a);
    },
    ΔⵠΔⲆΔΔᐃ: function (a) {
      return --a * a * a + 1;
    },
    ⵠⵠⲆⵠⵠ: function (a) {
      if (a < 0.5) {
        return a * 2 * a;
      } else {
        return (mj - a * 2) * a - ce;
      }
    },
    ᐃᐃΔΔΔⵠⵠ: function (a) {
      if (a < 0.5) {
        return a * 4 * a * a;
      } else {
        return (a - V) * (kn * a - C) * (Le * a - kn) + 1;
      }
    },
    ⵠΔⵠᐃⲆᐃⵠⲆΔ: function (a) {
      if (a < 0.5) {
        return zn * a * a * a * a;
      } else {
        return 1 - S * --a * a * a * a;
      }
    },
    ᐃᐃΔᐃᐃⲆᐃ: function (a) {
      return ce - --a * a * a * a;
    },
    ⲆΔᐃⲆⵠᐃᐃ: function (a) {
      return 1 + --a * a * a * a * a;
    },
    ⲆⲆᐃΔ: function (a, b, c, d, e, f) {
      this.ᐃⲆΔ = a;
      this.ᐃⲆⵠ = b;
      this.max = c;
      this.min = d;
      this.ΔⲆⵠΔΔΔⵠ = e;
      this.ⵠΔΔΔⲆΔΔ = f;
      this.ⲆᐃᐃⵠΔᐃᐃ = Mn;
      this.Ⲇᐃⵠ = function () {
        if (this.ᐃⲆΔ) {
          if ((a = this.ᐃⲆⵠ + pf * this.ΔⲆⵠΔΔΔⵠ) > this.max) {
            this.ᐃⲆⵠ = this.max;
            this.ᐃⲆΔ = v;
            return true;
          }
          this.ᐃⲆⵠ = a;
        } else {
          var a;
          if ((a = this.ᐃⲆⵠ - pf * this.ⵠΔΔΔⲆΔΔ) < this.min) {
            this.ᐃⲆⵠ = this.min;
            this.ᐃⲆΔ = vi;
          } else {
            this.ᐃⲆⵠ = a;
          }
        }
      };
      return v;
    },
    ⲆΔᐃⲆΔ: function (a, b, c, d, e, f) {
      this.ΔᐃⲆⵠⲆ = a;
      this.ᐃΔⲆᐃΔ = b;
      this.ⵠΔⲆΔⵠ = c;
      this.ⵠΔⲆᐃⵠ = d;
      this.x = e;
      this.ᐃⲆⲆⵠΔ = f;
      this.ᐃⵠⲆⵠΔΔⵠ = function () {
        this.x = this.ⵠΔⵠⵠⵠᐃΔᐃΔ;
        this.ᐃΔⲆᐃΔ = Fj;
      };
      this.ⵠⵠΔⲆⵠⵠⲆ = function (a) {
        if (a !== this.ᐃⲆⲆⵠΔ) {
          this.ᐃⲆⲆⵠΔ = a;
          this.ⵠΔⲆᐃⵠ = this.x;
          this.ᐃΔⲆᐃΔ = jj;
        }
        if (this.ᐃⲆⲆⵠΔ !== this.x) {
          this.ᐃΔⲆᐃΔ += pf;
          if (this.ᐃΔⲆᐃΔ > this.ⵠΔⲆΔⵠ) {
            this.x = this.ᐃⲆⲆⵠΔ;
          } else {
            var b = this.ΔᐃⲆⵠⲆ(this.ᐃΔⲆᐃΔ / this.ⵠΔⲆΔⵠ);
            this.x = this.ⵠΔⲆᐃⵠ + (this.ᐃⲆⲆⵠΔ - this.ⵠΔⲆᐃⵠ) * b;
          }
        }
      };
    },
    ΔⲆᐃⲆⵠᐃⲆ: function (b, c, d, e, f, g, i, a, j) {
      this.ΔᐃⲆⵠⲆ = b;
      this.ᐃΔⲆᐃΔ = c;
      this.ⵠΔⲆΔⵠ = d;
      this.ⵠΔⲆᐃⵠ = e;
      this.ᐃᐃᐃΔᐃ = f;
      this.x = g;
      this.y = i;
      this.ᐃⲆⲆⵠΔ = a;
      this.ᐃᐃⲆⲆΔᐃⲆ = j;
      this.ⵠⵠΔⲆⵠⵠⲆ = function (a) {
        if (a.x != this.ᐃⲆⲆⵠΔ || a.y != this.ᐃᐃⲆⲆΔᐃⲆ) {
          this.ᐃⲆⲆⵠΔ = a.x;
          this.ᐃᐃⲆⲆΔᐃⲆ = a.y;
          this.ⵠΔⲆᐃⵠ = this.x;
          this.ᐃᐃᐃΔᐃ = this.y;
          this.ᐃΔⲆᐃΔ = yk;
        }
        if (this.ᐃⲆⲆⵠΔ != this.x || this.ᐃᐃⲆⲆΔᐃⲆ != this.y) {
          this.ᐃΔⲆᐃΔ += pf;
          if (this.ᐃΔⲆᐃΔ > this.ⵠΔⲆΔⵠ) {
            this.x = this.ᐃⲆⲆⵠΔ;
            this.y = this.ᐃᐃⲆⲆΔᐃⲆ;
          } else {
            var b = this.ΔᐃⲆⵠⲆ(this.ᐃΔⲆᐃΔ / this.ⵠΔⲆΔⵠ);
            this.x = this.ⵠΔⲆᐃⵠ + (this.ᐃⲆⲆⵠΔ - this.ⵠΔⲆᐃⵠ) * b;
            this.y = this.ᐃᐃᐃΔᐃ + (this.ᐃᐃⲆⲆΔᐃⲆ - this.ᐃᐃᐃΔᐃ) * b;
          }
        }
      };
    },
    ⲆᐃⵠⵠᐃΔⲆ: function (a) {
      var b = "";
      for (var c = 0; c < a; c++) {
        b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
      }
      return b;
    },
    ⲆⵠΔᐃⵠⵠᐃ: function (a, b) {
      b ||= location.href;
      a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
      if (c == null) {
        return null;
      } else {
        return c[ik];
      }
    },
    ⵠᐃⲆⲆⲆ: function (a) {
      let b = "";
      const c = a.length;
      for (let d = yk; d < c; d++) {
        b += String.fromCharCode(a[d]);
      }
      return b;
    },
    ⲆⲆΔΔᐃᐃΔ: function (a, b) {
      return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ᐃⵠⲆ || v;
    },
    ᐃΔΔᐃΔⵠΔ: function (b, c, d, e, f, g, h, a) {
      if (Math.max(b, f) < Math.min(c, g) && Math.max(d, h) < Math.min(e, a)) {
        return Aj;
      } else {
        return yk;
      }
    },
    ⵠⲆⲆⲆΔⲆⲆ: function (a, b, c) {
      return (dn - c) * a + c * b;
    },
    ᐃⵠⲆⲆⲆⲆⵠ: function (a) {
      return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  };
  Math.sign = Math.sign || function (a) {
    if (a === yk) {
      return jj;
    } else if (Fj < a) {
      return dn;
    } else {
      return -Aj;
    }
  };
  const Yn = mj;
  Math.log10 = Math.log10 || function (a) {
    return Math.log(a) / Math.ⲆⲆⵠΔⵠΔᐃⲆⲆ;
  };
  const Kn = Yi;
  const Vn = tk;
  const Xn = ij;
  (function (a) {
    var b = ue;
    if (typeof ᐃᐃⲆⵠᐃⵠⵠ === "function" && ᐃᐃⲆⵠᐃⵠⵠ.ⵠⵠᐃⲆΔΔᐃ) {
      ᐃᐃⲆⵠᐃⵠⵠ(a);
      b = true;
    }
    if (typeof ⲆⵠΔᐃΔᐃᐃ === "object") {
      ⵠΔⲆⲆⵠΔⲆⲆΔ.exports = a();
      b = true;
    }
    if (!b) {
      var c = Vf.ⲆᐃΔⵠ;
      var d = Vf.ⲆᐃΔⵠ = a();
      d.ⵠⵠⲆⲆⵠⲆᐃⵠᐃ = function () {
        Vf.ⲆᐃΔⵠ = c;
        return d;
      };
    }
  })(function () {
    function b() {
      for (var a = Mn, b = {}; a < arguments.length; a++) {
        var c = arguments[a];
        for (var d in c) {
          b[d] = c[d];
        }
      }
      return b;
    }
    return function a(c) {
      function d(e, f, j) {
        var k;
        if (typeof document !== "undefined") {
          if (arguments.length > 1) {
            if (typeof (j = b({
              path: "/"
            }, d.ᐃΔᐃⵠᐃᐃⵠ, j)).expires === "number") {
              var m = new Date();
              m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
              j.expires = m;
            }
            try {
              k = JSON.stringify(f);
              if (/^[\{\[]/.test(k)) {
                f = k;
              }
            } catch (a) { }
            f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
            return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ΔᐃᐃⲆΔΔⲆⲆΔ ? "; secure" : ""].join("");
          }
          if (!e) {
            k = {};
          }
          for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = Fj; n.length > l; l++) {
            var p = n[l].split("=");
            var q = p.slice(1).join("=");
            if (q.charAt(Fj) === "\"") {
              q = q.slice(1, -dn);
            }
            try {
              var s = p[0].replace(h, decodeURIComponent);
              q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
              if (this.json) {
                try {
                  q = JSON.parse(q);
                } catch (a) { }
              }
              if (e === s) {
                k = q;
                break;
              }
              if (!e) {
                k[s] = q;
              }
            } catch (a) { }
          }
          return k;
        }
      }
      d.set = d;
      d.get = function (a) {
        return d.call(d, a);
      };
      d.ΔᐃᐃⵠⲆⵠᐃΔᐃ = function () {
        return d.apply({
          json: true
        }, [].slice.call(arguments));
      };
      d.ᐃΔᐃⵠᐃᐃⵠ = {};
      d.remove = function (a, c) {
        d(a, "", b(c, {
          expires: -1
        }));
      };
      d.ⵠΔⵠⵠΔᐃΔⵠᐃ = a;
      return d;
    }(function () { });
  });
  const Zn = ve;
  const $n = Nk;
  var eo = document.getElementById("game_canvas");
  const io = qk;
  var to = eo.getContext("2d");
  const no = Yj;
  const oo = Uk;
  var ro = eo.width;
  const eq = Mk;
  var so = eo.height;
  const fq = _j;
  var lo = eo.width / 2;
  var gq = eo.height / ij;
  var hq = {
    x: lo,
    y: gq
  };
  const iq = Hj;
  const vo = Ik;
  const co = tn;
  var mo = 1;
  const jq = F;
  var Co = ce;
  const kq = Mn;
  var fo = -V;
  const lq = li;
  var yo = "J" + Jq;
  var mq = "S" + ir;
  const nq = An;
  var Ao = Vf;
  const ko = kq;
  const xo = X;
  const Jo = $j;
  const Mo = vo;
  var Bo;
  var oq;
  var pq = (sq = "O") + "N";
  var qq = yk;
  const So = _;
  var Qo = Ao;
  const _o = co;
  const Fo = ik;
  const Ro = y;
  var jo;
  mq = "N";
  const rq = I;
  var Wo = "J";
  var sq = "O" + Jq;
  const tq = Pe;
  const qo = Ai;
  const No = gk;
  var Ho;
  var uq = Qo;
  const Yo = bk;
  const Ko = Fj;
  const Vo = So;
  const Xo = d;
  var Zo = uq;
  const $o = on;
  pq = "N" + undefined;
  var vq = Zo;
  const wq = He;
  var xq;
  const yq = No;
  const zq = Ke;
  const Aq = j;
  const Bq = lj;
  const Cq = Ck;
  const Dq = Qk;
  var Eq;
  const Fq = hi;
  var Gq;
  var Hq = vq;
  const Iq = Sn;
  var Jq;
  var Kq = Hq;
  const Lq = He;
  const Mq = pk;
  var Nq;
  const Oq = Cj;
  const Pq = Jn;
  var Qq = Kq;
  Wo = "O";
  const Rq = bk;
  const Sq = Gn;
  const Tq = $o;
  const Uq = li;
  const Vq = u;
  const Wq = C;
  const Xq = nk;
  const Yq = Zn;
  const Zq = K;
  const $q = Ne;
  var _q;
  var ar;
  var dr = Qq = Kq;
  const er = ik;
  var fr = dr;
  const hr = Lj;
  var ir = "J" + (_q = "S");
  const jr = kj;
  const kr = In;
  eo.oncontextmenu = function () {
    return tq;
  };
  const lr = Oi;
  const mr = Qn;
  const or = Dq;
  yo = "J";
  const pr = Nn;
  const qr = me;
  const rr = Sn;
  const sr = Pk;
  const tr = Mn;
  function ur(a) {
    var b = new Image();
    b.src = a.toDataURL("image/png");
    b.width = a.width;
    b.height = a.height;
    b.ΔⲆⲆᐃΔᐃΔ = V;
    return b;
  }
  const vr = tk;
  sq = pq;
  const wr = A;
  const xr = Ze;
  const zr = Yq;
  const ea = lr;
  pq = Jq;
  Jq = ir;
  const ia = ak;
  xq = ir + (Wo += yo = mq);
  const ta = vo;
  sq = ir;
  Ho = xq;
  mq = Wo + yo;
  const na = j;
  const oa = zq;
  const ra = Zn;
  const aa = M;
  Eq = Bo = oq = ir + Wo;
  const sa = hr;
  sq = ir + Wo;
  Gq = oq;
  pq = ir + Wo;
  Nq = jo = Bo;
  Wo = Jq = ir;
  _q = oq;
  ar = Bo;
  const ha = vi;
  const la = io;
  yo = sq;
  const ua = No;
  var ba = Vf.devicePixelRatio || 1;
  var va = to.ᐃⵠⵠᐃΔΔΔⵠⲆ || to.ΔⵠᐃΔⲆⲆᐃΔᐃ || to.ⵠⲆⵠⵠΔⵠᐃⲆΔ || to.ᐃΔᐃᐃⵠⲆⵠⵠⵠ || to.ⵠᐃᐃΔΔⲆᐃΔⵠ || 1;
  const da = u;
  function ca() {
    if (eo.width != Vf.innerWidth) {
      eo.width = Vf.innerWidth;
      ro = eo.width;
      lo = eo.width / C;
    }
    if (eo.height != Vf.innerHeight) {
      eo.height = Vf.innerHeight;
      so = eo.height;
      gq = eo.height / 2;
    }
    hq = {
      x: lo,
      y: gq
    };
    var a = eo.width;
    var b = eo.height;
    Co = fo === -er ? ba / va : fo;
    eo.width = Co * a;
    eo.height = Co * b;
    eo.style.width = a + "px";
    eo.style.height = b + "px";
    to.scale(Co, Co);
    if (Ww) {
      Ww.ᐃᐃᐃ.ⲆΔΔΔⲆⵠᐃ = a;
      Ww.ᐃᐃᐃ.ᐃᐃᐃᐃⲆⲆⵠ = b;
    }
    if (_w.ⵠᐃᐃⵠⲆ) {
      _w.Ⲇᐃⵠ();
    } else if (sf.ⵠᐃᐃⵠⲆ) {
      sf.Ⲇᐃⵠ();
    } else if (Yw.ⵠᐃᐃⵠⲆ) {
      Yw.Ⲇᐃⵠ();
    } else if (Xw.ⵠᐃᐃⵠⲆ) {
      Xw.Ⲇᐃⵠ();
    }
  }
  var ma = document.getElementById("game_body");
  ma.ondragstart = function () {
    return Pe;
  };
  const pa = ij;
  const Ca = Rj;
  const Ta = on;
  const fa = Ik;
  ma.ondrop = function () {
    return false;
  };
  ma.onresize = ca;
  (function () {
    var b = Ko;
    for (var a = ["ms", "moz", "webkit", "o"], c = 0; a.length > c && !Vf.requestAnimationFrame; ++c) {
      Vf.requestAnimationFrame = Vf[a[c] + "RequestAnimationFrame"];
      Vf.cancelAnimationFrame = Vf[a[c] + "CancelAnimationFrame"] || Vf[a[c] + "CancelRequestAnimationFrame"];
    }
    if (!Vf.requestAnimationFrame) {
      Vf.requestAnimationFrame = function (c, d) {
        var e = new Date().getTime();
        var f = Math.max(0, Kj - (e - b));
        var g = Vf.setTimeout(function () {
          c(e + f);
        }, f);
        b = e + f;
        return g;
      };
    }
    Vf.cancelAnimationFrame ||= function (a) {
      clearTimeout(a);
    };
  })();
  const za = H;
  const ya = An;
  const wa = Yi;
  const Pa = sr;
  function Aa(a, b, c, d, e) {
    gi(Zg, a, b, c, d, e);
    return ((125 + (Jw(Ks[0], Ks[1], Ks[C], Ks[3], Ks[4], Ks[0]) ^ Xg(Ks[er], Ks[kn], Ks[3], Ks[4], Ks[ko], Ks[ce]))) * 8121 + 28411) % 134456;
  }
  const ka = Hk;
  function xa(a, b, c, d, e) {
    Zj(Zg, a, b, c, d, e);
    const f = ~(Ks[0] & 54027) & (Ks[jj] | 54027);
    return ((111 + (((217 + ((24 << ((f ^ Ks[Xn]) >> 24 & 255)) + (8 << ((f ^ Ks[2]) & 255)) + (16 << ((f ^ Ks[Ok]) >> 16 & 255)) + (0 << ((f ^ Ks[2]) >> 8 & 255)) ^ Ks[B])) * 48271 + ko) % 2147483647 ^ Ks[4])) * 48271 + 0) % 2147483647;
  }
  function Ma(a, b) {
    ai(Zg, a, b);
    const c = af(Ks[Fj], Ks[1], Ks[jj], Ks[1], Ks[yk]);
    const d = function (a, b) {
      Gj(Zg, a, b);
      const c = uk(Ks[Lu], Ks[1], Ks[0], Ks[1], Ks[Ko], Ks[1]);
      const d = Jw(Ks[0], Ks[1], Ks[0], Ks[bt], Ks[Ol], Ks[1]);
      return (16 << ((c ^ d) >> 16 & $l)) + (8 << ((c ^ d) >> 8 & 255)) + (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) & 255));
    }(Ks[dn], Ks[0]);
    return (0 << ((c ^ d) >> 24 & 255)) + (24 << ((c ^ d) >> 8 & 255)) + (8 << ((c ^ d) & 255)) + (16 << ((c ^ d) >> 16 & 255));
  }
  const Ba = Ij;
  const Da = b;
  const Ea = Dn;
  function Ia(b, c, d) {
    const e = (1013904223 + (b + 2649) * 1664525) % 4294967296;
    const f = ~(c & 52557) & 52557 | ~(c & 52557) & c;
    const g = ~(d & 41861) & d | ~(d & 41861) & 41861;
    const h = nf(e, f, g, e, f, g);
    Pf(e, f, g);
    return (h | 47856) & ~(h & 47856);
  }
  const Sa = Kj;
  var Qa = navigator.language || navigator.userLanguage;
  var Ar = -new Date().getTimezoneOffset() / 60;
  const Fa = $j;
  var Ra = "Europe";
  var ja = "South America";
  const La = kj;
  const Wa = $n;
  var Ga = Ra;
  if (Ar >= -2 && Ar <= Xn) {
    Ga = Ra;
  } else if (C < Ar && Oq >= Ar) {
    Ga = "Russia";
  } else if (Ar > Rj && rq >= Ar) {
    Ga = "Asia";
  } else if (Ar > xr) {
    Ga = "Australia";
  } else if (-Wn <= Ar && -Xn > Ar) {
    Ga = Qa === "pt-BR" || Qa === "pt-br" || Qa === "pt" || Qa === "pt-pt" ? ja : "North America";
  } else if (Ar < -Ca) {
    Ga = Qa === "pt-BR" || Qa === "pt-br" || Qa === "pt" || Qa === "pt-pt" ? ja : "West America";
  }
  const Br = er;
  var Gk = {
    ⲆᐃΔΔⲆⲆᐃ: function (a) {
      var b = 2147483648;
      var c = a || Math.floor((b - 1) * Math.random());
      this.ⵠⲆⵠⲆⲆ = function (a) {
        c = a || Math.floor((b - 1) * Math.random());
      };
      this.get = function () {
        return (c = (c * 1103515245 + 12345) % b) / b;
      };
    }
  };
  const qa = qo;
  var Na = [[kq, "DRAGON", $o, Vo, 66, 35, 0], [jj, "WINTER", 91, Tq, Oq, 40, 8], [jj, hj[ik], 135, 180, 89, 124, 5], [0, "LAVA", 142, So, 82, 99, 6], [Ko, "FOREST", 6, 150, 90, 154, ea], [0, "WINTER", Vo, 6, 90, 150, jj], [ik, "b", tr, Oq, 175, Mn], [dn, "t", Ok, Ca, 174, 0], [Fo, "t", Wn, 5, 173, tr], [V, "b", vo, U, 176, 0], [1, "t", 0, Wn, 177, kq], [Aj, "t", 3, Cj, 178, yk], [1, "t", qo, Cj, 179, jj], [dn, "b", tr, Ca, 180, jj], [dn, "t", 5, Cj, 181, yk], [V, "b", Le, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, Mn], [ik, "t", 5, 5, 185, tr], [V, "t", ij, 5, 186, Fj], [V, "t", Ko, 5, 187, Ko], [dn, "t", 5, Rj, 188, ko], [ce, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, Fj], [1, "t", kr, U, 191, 0], [1, "b", 3, U, 192, Fj], [V, "t", U, Bk, 193, Mn], [1, "t", 0, Wn, 194, 0], [V, "t", 3, 5, 195, 0], [1, "b", Fj, 5, 196, 0], [1, "t", 5, Bk, 197, jj], [1, "t", Wq, 5, 198, 0], [dn, "b", 2, Wn, 199, Ko], [1, "t", f, 5, 200, Mn], [1, "t", 1, 5, 201, 0], [Fo, "b", 1, 5, 202, 0], [Br, "t", Rj, U, 203, ko], [Br, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, ko], [Br, "b", 2, Bk, 206, ko], [1, "t", dn, 5, 207, Mn], [1, "t", Ai, Cj, 208, kq], [1, "t", C, Ca, 209, tr], [Aj, "b", Mn, 5, 210, kq], [1, "t", Rj, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", Ok, 5, 213, jj], [1, "b", Ea, 5, 214, Fj], [Br, "t", 5, 5, 215, Mn], [V, "b", 0, 5, 216, kq], [1, "t", Yn, 5, 217, 0], [1, "t", ij, Wn, 218, 0], [er, "t", 1, Bk, 219, yk], [Aj, "t", Mo, Bk, 220, 0], [Fo, "t", U, Oq, 221, ko], [Aj, "t", kn, 5, 222, yk], [V, "t", 4, U, 223, Mn], [1, "b", sn, U, 224, 0], [1, "t", er, Rj, 225, 0], [1, "t", 3, Ca, 226, 0], [1, "b", 0, Rj, 227, 0], [1, "t", 3, Cj, 228, Mn], [1, "t", U, 5, 229, Mn], [1, "t", kn, 5, 230, tr], [1, "t", 0, 5, 231, Ko], [1, "b", Wq, Bk, 232, 0], [ce, "t", 1, U, 233, yk], [er, "t", 4, Bk, 234, tr], [Aj, "b", 1, Rj, 235, Mn], [1, "t", 4, Ca, 236, Fj], [V, "t", ij, 5, 237, jj], [ik, "t", Fj, 5, 238, Fj], [1, "t", 4, 5, 239, kq], [1, "b", Xn, 5, 240, 0], [V, "t", Ca, 5, 241, ko], [1, "b", Br, Ca, 242, 0], [Fo, "t", mj, 5, 243, Fj], [Fo, "t", Le, Wn, 244, ko], [V, "t", 1, 5, 245, Mn], [1, "b", 1, Ca, 246, Fj], [1, "t", _i, 5, 247, 0], [Fo, "b", 2, Cj, 248, Mn], [1, "t", U, Rj, 249, Ko], [er, "t", 2, Ca, 250, 0], [1, "t", 4, 5, 251, 0], [ik, "b", ik, 5, 252, Fj], [Br, "t", In, 5, 253, 0], [1, "t", ik, 5, 254, 0], [V, "t", Mo, Rj, 255, 0], [1, "t", 5, 5, 256, kq], [V, "b", 2, 5, 257, Mn], [1, "t", 4, Wn, 258, tr], [Br, "b", 3, 5, 259, kq], [Fo, "t", Oq, Oq, 260, 0], [1, "b", ko, 5, 261, yk], [1, "t", fa, Cj, 262, 0], [1, "t", 4, Oq, 263, 0], [V, "t", pa, Oq, 264, 0], [Fo, "b", dn, Cj, 265, 0], [1, "b", 2, 5, 266, Mn], [1, "t", vo, 5, 267, 0], [1, "t", 4, Ca, 268, 0], [1, "t", 0, 5, 269, 0], [Br, "t", Ca, Ca, 270, jj], [V, "t", B, Rj, 271, yk], [V, "t", 4, 5, 272, 0], [1, "t", dn, 5, 273, 0], [1, "b", 2, U, 274, Mn], [1, "t", 1, Rj, 275, 0], [1, "t", In, Wn, 276, 0], [Fo, "b", ce, Rj, 277, jj], [1, "b", 2, Wn, 278, ko], [V, "t", Aj, 5, 279, ko], [Br, "t", mj, Cj, 280, 0], [1, "t", 2, 5, 281, 0], [Br, "t", Cj, U, 282, ko], [1, "b", Wq, Oq, 283, tr], [er, "t", 1, 5, 284, 0], [Fo, "b", B, 5, 285, 0], [Aj, "t", mj, 5, 286, 0], [1, "t", Ko, U, 287, 0], [ce, "t", 5, 5, 288, Mn], [Aj, "t", Ok, Bk, 289, ko], [1, "b", 1, Cj, 290, 0], [1, "t", 4, Oq, 292, 0], [1, "t", 2, Oq, 291, 0], [1, "b", Xn, Ca, 293, 0], [1, "t", 1, U, 294, ko], [1, "t", _i, Ca, 295, 0], [1, "t", Wn, Cj, 296, 0], [1, "b", jj, Bk, 297, 0], [Fo, "b", 3, 5, 298, 0], [1, "t", qo, 5, 299, ko], [Fo, "t", 2, 5, 300, 0], [dn, "t", 4, Bk, 301, 0], [V, "b", 0, Ca, 302, ko], [1, "b", 2, Ca, 303, tr], [Br, "t", Br, 6, 303, 0], [1, "t", Ok, 7, 303, Ko], [1, "t", ik, 5, 304, 0], [1, "t", fa, 6, 304, yk], [Br, "t", gn, 7, 304, Ko], [V, "t", Bk, 8, 303, Mn], [ik, "b", V, 8, 304, tr], [1, "b", 2, xr, 304, Ko], [1, "b", 3, _o, 303, 0], [er, "b", 3, hr, 304, 0], [1, "t", ik, yn, 303, 0], [Fo, "t", 1, Wa, 304, Fj], [er, "t", V, 13, 303, tr], [1, "t", 3, zq, 303, tr], [Aj, "t", sn, 14, 304, 0], [Br, "t", 4, zq, 304, 0], [Fo, "t", Rj, 11, 304, 0], [1, "t", 5, zr, 303, 0], [1, "t", 5, 16, 304, 0], [dn, "t", 5, 13, 304, 0], [ik, "t", 2, 12, 304, tr], [Aj, "t", ce, 11, 303, 0], [Fo, "b", B, 15, 303, kq], [Aj, "b", 0, an, 303, Mn], [1, "t", 3, 17, 303, 0], [1, "t", f, 18, 303, 0], [ce, "t", Wq, 19, 303, tr], [1, "t", 1, u, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, ko], [ik, "t", 4, 23, 303, 0], [Fo, "b", 3, 24, 303, Ko], [er, "t", Ca, 25, 303, Fj], [1, "t", 1, 26, 303, jj], [Aj, "t", 2, 27, 303, kq], [Aj, "t", 4, 28, 303, 0], [ik, "b", Ko, 18, 304, 0], [1, "t", 2, 19, 304, ko], [1, "t", 5, 20, 304, Mn], [1, "b", 2, 21, 304, 0], [er, "t", mj, 22, 304, jj], [Br, "t", C, 23, 304, 0], [ce, "t", 1, 24, 304, 0], [dn, "t", B, 25, 304, 0], [1, "t", 0, 27, 304, jj], [V, "t", Ca, 26, 304, 0], [dn, "b", 2, 28, 304, jj], [Aj, "t", 1, 29, 304, Ko], [1, "b", 1, 29, 303, ko], [Aj, "b", Xn, 30, 303, kq], [1, "t", 4, 31, 303, 0], [1, "t", tr, 32, 303, tr], [er, "t", Bk, 33, 303, 0], [ce, "t", 2, 34, 303, 0], [dn, "t", qo, 35, 303, yk], [1, "t", er, 36, 303, ko], [1, "b", sn, 37, 303, 0], [ce, "t", 2, 32, 304, 0], [Aj, "t", kr, 30, 304, 0], [V, "t", 1, 31, 304, 0], [Aj, "b", 1, 33, 304, Fj], [Fo, "t", Xn, 35, 304, Fj], [er, "t", Bk, 34, 304, Fj], [ce, "b", 2, 36, 304, kq], [1, "t", 5, 37, 304, 0], [ce, "t", V, 38, 304, yk], [ce, "b", ik, 40, 303, kq], [1, "t", vo, 39, 303, 0], [dn, "t", 3, 42, 304, 0], [ce, "t", 5, 38, 303, yk], [1, "t", U, 39, 304, Fj], [1, "t", Ca, 41, 303, 0], [Fo, "t", gn, 41, 304, 0], [1, "t", 4, 44, 303, ko], [ce, "b", 2, 40, 304, 0], [Aj, "b", Ok, 43, 303, 0], [dn, "t", Fo, 42, 303, 0], [1, "t", 1, 43, 304, kq], [1, "t", Oq, 44, 304, ko], [1, "b", ik, 45, 303, Mn], [ik, "t", C, 45, 304, 0], [1, "t", 2, 46, 303, yk], [ik, "t", oj, 47, 303, 0], [er, "b", Mn, 48, 303, jj], [Br, "t", U, 49, 303, 0], [1, "t", ij, 50, 303, ko], [1, "t", V, 51, 303, 0], [1, "t", 4, 52, 303, 0], [Fo, "t", 5, 46, 304, jj], [er, "t", 2, 47, 304, yk], [1, "t", 5, 48, 304, Fj], [1, "t", 1, 49, 304, ko], [ik, "t", ij, 50, 304, 0], [Fo, "b", 1, 53, 303, Mn], [Aj, "b", 2, 51, 304, Fj], [V, "t", Ca, 52, 304, 0], [Fo, "t", 3, 53, 304, 0], [1, "b", Ok, 54, 303, yk], [1, "t", 5, 54, 304, 0], [Aj, "t", Bk, 55, 303, 0], [1, "t", Mo, 56, 303, yk], [ce, "t", 4, 57, 303, 0], [1, "t", Oq, 58, 303, ko], [dn, "b", dn, 55, 304, Ko], [1, "t", Xn, 56, 304, 0], [1, "t", Fj, 57, 304, 0], [1, "t", 3, 58, 304, 0], [ce, "t", _i, 63, 304, tr], [ik, "t", 3, 59, 303, 0], [1, "t", oj, 59, 304, Fj], [1, "t", Oq, 60, 303, 0], [1, "t", jj, 60, 304, 0], [1, "t", 0, 66, 303, 0], [ik, "t", 0, 70, 304, Fj], [Aj, "t", Ea, 61, 304, kq], [V, "t", sn, 67, 303, 0], [1, "t", _i, 73, 304, Mn], [1, "t", Ik, 76, 303, 0], [1, "t", 3, 78, 304, Fj], [1, "t", 1, 61, 303, jj], [dn, "t", Aj, 73, 303, ko], [Fo, "t", 1, 79, 303, jj], [1, "b", 2, 62, 304, Mn], [1, "b", 2, 70, 303, ko], [1, "t", 5, 62, 303, 0], [er, "t", 5, 68, 303, yk], [Br, "t", Wn, 71, 304, 0], [V, "t", 5, 77, 304, kq], [1, "t", Bk, 75, 303, 0], [dn, "t", Wn, 64, 304, 0], [Br, "t", 5, 65, 303, Ko], [dn, "t", Oq, 80, 303, 0], [1, "t", ik, 76, 304, ko], [1, "t", 3, 63, 303, tr], [ce, "t", Oq, 82, 304, kq], [1, "b", Xn, 65, 304, Ko], [1, "t", 1, 64, 303, Fj], [1, "t", 1, 68, 304, 0], [1, "t", Le, 69, 304, Fj], [1, "t", 4, 69, 303, kq], [dn, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, Fj], [er, "b", Xn, 72, 304, Mn], [Aj, "t", Mn, 71, 303, Ko], [er, "t", 4, 72, 303, 0], [V, "t", f, 74, 304, 0], [ce, "t", 2, 74, 303, 0], [dn, "t", sn, 75, 304, ko], [V, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", gn, 79, 304, kq], [dn, "t", 2, 80, 304, 0], [1, "b", ce, 81, 304, kq], [1, "t", 2, 81, 303, Fj], [Fo, "t", Ca, 82, 303, Ko], [1, "t", Br, 83, 303, kq], [1, "b", kn, 83, 304, yk], [Aj, "t", Aj, 84, 304, 0], [er, "t", 4, 84, 303, 0], [1, "t", U, 85, 304, Fj], [Br, "t", 3, 85, 303, tr], [Aj, "b", kn, 86, 304, 0], [er, "t", 1, 86, 303, Fj], [Br, "b", _i, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", ko, 88, 304, tr], [1, "b", 1, 89, 303, Mn], [1, "t", Dn, 89, 304, kq], [ce, "t", 3, 90, 303, tr], [1, "t", 4, 90, 304, ko], [1, "t", 4, 91, 303, Mn], [Br, "t", 0, 91, 304, Mn], [Fo, "b", ij, 92, 303, 0], [er, "t", oj, 92, 304, 0], [ce, "t", Wn, 93, 303, 0], [1, "t", Fj, 93, 304, 0], [1, "b", Ik, 94, 303, 0], [Aj, "b", jj, 94, 304, 0], [1, "b", 0, 95, 303, tr], [1, "t", 2, 95, 304, 0], [dn, "f", Br, 5, 151, 1], [1, "f", pa, 5, 153, er], [ce, "f", Fj, 5, 152, er], [dn, "f", Mn, 5, 147, V], [1, "f", Mn, Bk, 144, Br], [Aj, "f", 0, Wn, 140, Aj], [Fo, "f", ik, 5, 149, 1], [1, "f", V, 5, 146, 1], [ik, "f", Br, 5, 143, ce], [V, "f", 1, Bk, 141, 1], [dn, "f", pa, 5, 150, V], [ik, "f", 2, 5, 148, 1], [ce, "f", kn, 5, 145, Aj], [dn, "f", Le, Wn, 142, 1], [1, "f", Le, Ca, 139, 1], [1, "f", ij, Ca, 136, ce], [1, "f", pa, Bk, 133, V], [Br, "f", 2, 5, 131, 1], [ce, "f", 2, 5, 127, 1], [Aj, "f", kn, 5, 125, 1], [1, "f", Aj, 5, 138, 1], [1, "f", V, Rj, 135, V], [1, "f", 1, 5, 132, Aj], [1, "f", ce, 5, 130, 1], [1, "f", Fo, 5, 128, 1], [Fo, "f", dn, 5, 126, 1], [1, "f", Br, U, 124, ce], [1, "f", 0, 5, 129, ik], [1, "f", ko, 5, 134, Br], [dn, "f", 0, 5, 137, er], [Fo, "f", ko, 5, 123, 1], [1, "f", 1, 5, 122, dn], [1, "f", 1, 5, 120, Fo], [1, "f", 1, 5, 117, er], [Aj, "f", ce, 5, 115, 1], [1, "f", ce, Oq, 111, 1], [1, "f", 1, 5, 108, V], [dn, "f", 2, Cj, 121, ce], [1, "f", 2, Wn, 118, Fo], [1, "f", 2, 5, 116, dn], [1, "f", pa, Wn, 113, ik], [Br, "f", 2, Cj, 110, ik], [1, "f", ko, 5, 119, 1], [V, "f", 0, 5, 114, V], [dn, "f", 0, Bk, 112, 1], [er, "f", 0, Rj, 109, 1], [ik, "f", ce, Ca, 106, 1], [1, "f", 1, Ca, 103, 1], [Br, "f", dn, 5, 100, 1], [1, "f", dn, Cj, 97, 1], [1, "f", 1, Oq, 95, 1], [Fo, "f", 2, 5, 107, dn], [1, "f", Wq, U, 105, ik], [er, "f", 2, Cj, 102, ik], [ce, "f", 2, Rj, 99, er], [Fo, "f", 2, Bk, 96, 1], [V, "f", 2, Oq, 94, ik], [Fo, "f", 0, Rj, 104, Fo], [1, "f", kq, 5, 101, 1], [Br, "f", 0, 5, 98, V], [Aj, "f", yk, 5, 93, dn], [1, "f", 1, Ca, 92, 1], [1, "f", V, 5, 89, Br], [1, "f", dn, 5, 86, er], [1, "f", dn, 5, 83, 1], [dn, "f", Aj, U, 80, 1], [ce, "f", Br, Bk, 78, Aj], [1, "f", 2, 5, 90, 1], [1, "f", Ok, Ca, 88, ce], [1, "f", 2, U, 85, 1], [Br, "f", kn, Rj, 82, 1], [er, "f", kn, Cj, 79, er], [ik, "f", pa, 5, 77, 1], [ik, "f", kn, Ca, 75, 1], [er, "f", 2, 5, 72, Aj], [1, "f", 0, U, 91, ce], [1, "f", Fj, Rj, 87, 1], [Br, "f", ko, 5, 84, 1], [1, "f", 0, Cj, 81, 1], [dn, "f", kq, Oq, 76, 1], [1, "f", 0, 5, 74, V], [dn, "f", 1, 5, 73, V], [V, "f", er, 5, 71, 1], [ce, "f", V, 5, 68, 1], [V, "f", 1, 5, 66, er], [Aj, "f", Aj, Ca, 62, ik], [V, "f", dn, 5, 59, dn], [1, "f", 1, Oq, 56, 1], [1, "f", Br, Rj, 53, V], [Br, "f", er, 5, 50, Aj], [Br, "f", 2, 5, 70, 1], [1, "f", 2, Ca, 67, Aj], [ik, "f", 2, U, 65, 1], [1, "f", 2, 5, 63, ce], [1, "f", 2, 5, 60, 1], [1, "f", Xn, 5, 57, 1], [1, "f", pa, Rj, 54, 1], [1, "f", C, Rj, 51, V], [ik, "f", yk, 5, 69, 1], [1, "f", 0, U, 64, dn], [dn, "f", Fj, 5, 61, 1], [V, "f", 0, 5, 58, Fo], [1, "f", 0, 5, 55, ce], [ik, "f", 0, Wn, 52, ik], [er, "f", 0, 5, 49, 1], [dn, "f", 0, 5, 45, 1], [er, "f", 0, Wn, 42, 1], [1, "f", 0, 5, 38, 1], [Fo, "f", Fj, 5, 34, 1], [ce, "f", 0, Bk, 31, Aj], [Fo, "f", 1, 5, 48, Fo], [1, "f", ik, 5, 44, V], [Br, "f", Br, Oq, 41, 1], [ik, "f", 1, Cj, 37, 1], [Fo, "f", V, Rj, 33, Fo], [dn, "f", 1, Cj, 29, ce], [Fo, "f", 2, Wn, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, Oq, 35, ce], [1, "f", 2, 5, 39, Aj], [Aj, "f", Le, 5, 46, Aj], [V, "f", Wq, 5, 43, 1], [ik, "f", 1, 5, 47, 1], [V, "f", Fj, 5, 40, 1], [1, "f", 0, 5, 36, ik], [ik, "f", yk, Rj, 28, er], [V, "f", 1, Cj, 25, V], [Aj, "f", 1, Bk, 22, V], [1, "f", 1, Cj, aq, er], [1, "f", 1, 5, Jo, ce], [Br, "f", 1, 5, Mk, 1], [1, "f", ce, 5, rk, Fo], [1, "f", 2, 5, 27, dn], [1, "f", Ok, 5, 24, 1], [1, "f", C, 5, 21, V], [1, "f", Le, Ca, 19, er], [Br, "f", Xn, 5, nk, Aj], [Aj, "f", 2, Wn, _o, 1], [dn, "f", 2, Ca, xr, ik], [1, "f", Ko, Bk, 26, Br], [Br, "f", 0, 5, 23, 1], [1, "f", ko, 5, Ck, 1], [Fo, "f", 0, Bk, 11, 1], [ik, "f", 0, 5, 17, 1], [dn, "f", 1, 5, Tq, er], [dn, "f", 1, Oq, lr, Fo], [er, "f", Mn, 5, 7, er], [1, "f", Aj, Rj, 6, er], [1, "f", 0, 5, 5, 1], [1, "f", er, za, Wn, ik], [Aj, "f", Ok, 7, Rj, 1], [1, "f", kq, X, 5, Aj], [1, "f", 1, xr, 5, 1], [1, "f", dn, b, 5, Fo], [er, "f", 1, 15, Oq, 1], [1, "f", dn, Vj, 5, 1], [1, "f", er, 22, U, 1], [1, "f", V, 26, Ca, 1], [V, "f", C, 10, 5, ik], [1, "f", pa, 13, Oq, V], [1, "f", 2, Jo, 5, er], [V, "f", 2, 18, 5, ce], [1, "f", Wq, 21, Ca, 1], [1, "f", C, 23, Wn, 1], [Br, "f", 2, 25, U, ce], [1, "f", 2, 27, Rj, ik], [er, "f", 0, 11, Wn, Aj], [dn, "f", 0, 14, 5, er], [1, "f", 0, 19, 5, Br], [V, "f", kq, 24, 5, 1], [1, "f", 0, 28, Ca, Br], [1, "f", Br, u, Bk, 1], [Fo, "f", 1, 29, Rj, 1], [ce, "f", 1, 32, Bk, 1], [ce, "f", 1, 35, 5, ik], [1, "f", 1, 38, 5, 1], [1, "f", ce, 41, 5, Br], [ik, "f", 1, 45, 5, dn], [dn, "f", C, 30, Cj, er], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, V], [1, "f", 2, 39, 5, Aj], [Aj, "f", 2, 42, Cj, 1], [1, "f", 2, 44, 5, 1], [Fo, "f", 2, 46, Cj, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, Oq, Br], [1, "f", 0, 37, Rj, V], [Aj, "f", 0, 34, 5, er], [ik, "f", 0, 31, 5, 1], [Aj, "f", 0, 47, 5, 1], [1, "f", Aj, 48, 5, 1], [Aj, "f", Br, 51, Wn, 1], [1, "f", 1, 53, 5, Aj], [1, "f", 1, 57, Cj, 1], [Br, "f", 1, 60, 5, 1], [1, "f", Br, 63, Bk, Fo], [dn, "f", dn, 65, 5, 1], [ik, "f", 2, 64, 5, dn], [1, "f", 2, 62, Bk, 1], [V, "f", 2, 59, Rj, 1], [dn, "f", Wq, 56, 5, ik], [Br, "f", C, 52, 5, 1], [Br, "f", Ok, 49, 5, Fo], [1, "f", 2, 54, 5, 1], [1, "f", Fj, 50, 5, 1], [ce, "f", yk, 55, 5, 1], [dn, "f", 0, 58, 5, 1], [1, "f", Mn, 61, 5, 1], [1, "f", kq, 66, Oq, 1], [1, "f", 1, 67, Ca, Br], [ik, "f", 1, 70, 5, 1], [1, "f", dn, 72, Wn, 1], [1, "f", 1, 75, Cj, 1], [1, "f", ce, 79, 5, 1], [Fo, "f", C, 68, Wn, Aj], [1, "f", Le, 71, Cj, Aj], [1, "f", ij, 74, Bk, 1], [1, "f", kn, 76, 5, ik], [ce, "f", 2, 78, Cj, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, Bk, 1], [ik, "f", kq, 80, Wn, Br], [ce, "f", 1, 81, U, Aj], [dn, "f", ik, 84, Wn, Fo], [dn, "f", er, 87, 5, V], [1, "f", ik, 89, Oq, ik], [1, "f", ce, 92, 5, dn], [1, "f", Fo, 94, U, Br], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, Bk, 1], [1, "f", Xn, 85, Wn, Fo], [Aj, "f", 2, 88, Ca, 1], [er, "f", 2, 90, 5, 1], [Aj, "f", Ok, 93, 5, 1], [V, "f", 2, 95, Bk, er], [1, "f", 0, 86, 5, 1], [dn, "f", Mn, 91, 5, ik], [Fo, "f", pa, 6, 153, ik], [ik, "f", ik, H, 152, 1], [ik, "t", 1, 93, 301, ko], [dn, "t", 3, 94, 302, yk], [1, "t", Wn, 95, 302, 0], [1, "t", Bk, 93, 302, 0], [Fo, "b", Dn, 92, 302, 0], [1, "t", 1, 91, 302, 0], [Br, "t", 5, 90, 302, 0], [ce, "b", pa, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", Le, 90, 301, jj], [1, "b", Wq, 89, 302, Ko], [Br, "t", 4, 89, 301, kq], [1, "t", er, 88, 302, jj], [V, "t", Xn, 88, 301, 0], [er, "t", fa, 87, 302, Ko], [1, "t", 4, 87, 299, tr], [1, "t", 4, 86, 302, Ko], [1, "t", Aj, 85, 302, tr], [ik, "t", Wn, 85, 301, jj], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, tr], [er, "t", 1, 82, 302, ko], [Aj, "t", 5, 81, 302, ko], [1, "t", 2, 80, 302, tr], [ce, "t", oj, 79, 302, 0], [ce, "t", pa, 78, 302, 0], [er, "b", Fo, 77, 302, tr], [1, "b", Xn, 76, 302, 0], [ce, "t", C, 75, 302, 0], [1, "t", In, 74, 302, Ko], [1, "b", dn, 73, 302, Mn], [1, "t", 2, 72, 302, kq], [dn, "t", bn, 71, 302, 0], [1, "b", lk, 70, 302, ko], [1, "t", 1, 69, 302, jj], [ik, "t", 2, 68, 302, 0], [dn, "t", Cj, 67, 302, 0], [ik, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, Fj], [1, "t", 4, 64, 302, ko], [1, "b", 3, 63, 302, 0], [ik, "t", 5, 62, 302, Ko], [1, "b", ik, 61, 302, Ko], [1, "t", Ik, 60, 302, Ko], [ce, "t", 4, 59, 302, 0], [dn, "b", 2, 58, 302, yk], [er, "t", Oq, 57, 302, tr], [1, "t", 1, 56, 302, 0], [Fo, "t", Ik, 55, 302, 0], [ik, "t", 4, 54, 302, 0], [ik, "t", 1, 53, 302, Ko], [Br, "t", U, 52, 302, kq], [1, "t", 2, 51, 302, yk], [dn, "t", 4, 50, 302, 0], [ik, "t", 2, 49, 302, 0], [1, "b", ik, 48, 302, tr], [Aj, "t", Kk, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [Br, "t", 2, 44, 302, Ko], [Aj, "t", Cj, 43, 302, 0], [ik, "t", 2, 42, 302, Fj], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [Fo, "b", 2, 39, 302, Mn], [dn, "t", 5, 38, 302, 0], [1, "t", dn, 37, 302, yk], [1, "t", C, 36, 302, Fj], [1, "t", 5, 35, 302, 0], [dn, "t", ko, 34, 302, 0], [V, "t", fa, 33, 302, 0], [1, "t", f, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, Ko], [1, "t", kr, 29, 302, 0], [1, "t", 2, 28, 302, Mn], [ik, "t", Bk, 27, 302, Fj], [1, "b", 3, 26, 302, 0], [1, "t", ik, 25, 302, ko], [Aj, "t", Ai, 24, 302, ko], [1, "t", ij, 23, 302, 0], [Fo, "t", ce, 22, 302, 0], [Aj, "t", Rj, 21, 302, Fj], [1, "t", Wq, Vq, 302, 0], [Aj, "t", Ai, 19, 302, Fj], [1, "b", 1, no, 302, tr], [1, "t", 5, hr, 302, tr], [Br, "t", 3, 16, 302, 0], [ce, "t", 1, Nk, 302, Fj], [1, "t", Oq, Un, 302, yk], [Br, "t", 3, j, 302, ko], [1, "t", Yn, 12, 302, 0], [1, "t", 1, la, 302, ko], [1, "t", 2, lj, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", Dn, zn, 302, 0], [ik, "t", 5, 8, 302, yk], [er, "t", 5, 7, 302, jj], [1, "b", C, 6, 302, tr], [Br, "t", ce, Fq, 301, 0], [V, "t", 4, _, 300, 0], [er, "t", kn, hn, 299, kq], [ce, "b", yk, 6, 298, jj], [Aj, "t", 5, 6, 297, 0], [Fo, "t", 2, Vo, 296, Ko], [V, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [ce, "t", Bk, 6, 293, Mn], [ce, "t", ik, 6, 292, Mn], [1, "b", 0, 6, 291, Ko], [V, "t", 2, 6, 290, 0], [1, "t", Oq, 6, 289, 0], [Br, "t", 1, 6, 288, 0], [ik, "t", In, hn, 287, kq], [1, "t", pa, Vo, 286, 0], [1, "t", 5, 6, 285, Fj], [1, "t", 2, hi, 284, 0], [1, "b", 0, 6, 283, tr], [1, "t", 2, 6, 282, 0], [dn, "t", 5, H, 281, Ko], [Fo, "b", Xn, H, 280, Mn], [1, "t", 5, 6, 279, 0], [1, "t", Aj, Vo, 278, 0], [er, "t", Yn, 6, 277, Ko], [1, "t", Mo, 6, 276, ko], [1, "t", Ca, 6, 275, Mn], [er, "b", ko, zk, 274, 0], [dn, "t", 5, za, 273, Fj], [Br, "t", ce, So, 272, 0], [1, "t", qa, zk, 271, Ko], [V, "b", 3, za, 270, 0], [ik, "t", U, 6, 269, Ko], [1, "t", Aj, za, 268, 0], [Aj, "t", 4, 6, 267, Fj], [1, "t", 1, 6, 266, Ko], [Aj, "t", 3, So, 265, Ko], [1, "t", f, 6, 264, ko], [V, "b", 2, 6, 263, 0], [1, "t", 5, Fq, 262, 0], [Aj, "t", 3, za, 261, 0], [1, "t", Ko, 6, 260, kq], [dn, "t", 5, 6, 259, 0], [Fo, "t", Aj, 6, 258, kq], [1, "t", sn, 6, 257, 0], [1, "t", Ai, hi, ua, 0], [ik, "t", 3, _, 254, 0], [Br, "t", Cj, Fq, 253, jj], [1, "b", 2, 6, 252, yk], [1, "t", Cj, 6, 251, ko], [dn, "t", V, hi, 250, ko], [1, "t", B, za, 249, ko], [1, "t", bn, 6, 248, Fj], [Fo, "b", fa, zk, 247, 0], [Fo, "t", Bk, 6, 246, kq], [1, "t", 3, 6, 245, 0], [Br, "t", 5, hi, 244, 0], [Aj, "t", ko, 6, 243, yk], [1, "t", 4, 6, 242, 0], [dn, "t", Ik, 6, 241, 0], [ce, "t", 5, 6, 240, Fj], [1, "b", jj, 6, 239, 0], [1, "t", ta, 6, 238, jj], [Fo, "t", 4, 6, 237, ko], [1, "t", 1, 6, 236, ko], [Br, "t", Wn, hi, 235, Mn], [dn, "b", Le, za, 234, Ko], [1, "t", 2, _, 233, Mn], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [Br, "t", U, 6, 230, kq], [Br, "t", ik, 6, 229, 0], [1, "t", 2, 6, 228, Ko], [1, "t", Rj, 6, 227, 0], [1, "b", 2, 6, 226, Ko], [1, "t", 4, 6, 225, ko], [1, "t", 0, 6, 224, yk], [1, "t", 2, 6, 223, 0], [1, "t", 0, So, 222, 0], [Br, "b", 2, 6, 221, Ko], [V, "t", 4, 6, 220, yk], [Aj, "b", 3, zk, 219, 0], [er, "t", 5, _, 218, kq], [1, "t", tr, 6, 217, tr], [1, "t", 3, 6, 216, 0], [1, "b", 0, zk, 215, ko], [1, "t", oj, Vo, 214, 0], [Fo, "t", Le, zk, 213, 0], [1, "t", kq, 6, 212, 0], [er, "t", 2, 6, 211, 0], [Fo, "b", 3, za, 210, kq], [ik, "t", Mn, 6, 209, Ko], [Fo, "t", Rj, 6, 207, kq], [1, "t", pa, hi, 208, 0], [dn, "t", kq, hn, 206, 0], [1, "t", Le, H, 205, 0], [V, "t", 2, 6, 203, 0], [Br, "b", Mn, zk, 202, 0], [ce, "t", 3, So, 201, yk], [ce, "t", Yn, H, 199, jj], [1, "t", 0, hi, 198, 0], [ce, "t", Ok, H, 197, kq], [1, "t", mj, Vo, 196, yk], [1, "t", Aj, zk, 195, 0], [er, "t", 3, 6, 194, 0], [1, "t", 4, hn, 192, 0], [ik, "t", Wq, 6, 191, yk], [Aj, "b", ko, 6, 190, 0], [ik, "t", 3, Fq, 189, 0], [1, "t", 4, 6, 187, 0], [V, "b", 0, 6, 186, 0], [ik, "t", 2, 6, 185, 0], [er, "t", 4, So, 184, 0], [1, "t", 2, hn, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, So, 181, 0], [1, "t", U, 6, 180, 0], [1, "t", 2, 6, 179, jj], [1, "t", Fj, 6, 178, 0], [V, "t", Xn, zk, 177, 0], [1, "t", Ai, 6, 176, tr], [ce, "b", kn, zk, 175, kq], [1, "t", Fo, Vo, 174, kq], [Fo, "t", 5, H, 173, 0], [1, "t", Le, hn, 256, kq], [1, "t", kr, 6, 204, tr], [1, "t", mj, zk, 200, 0], [V, "t", pa, Vo, 193, yk], [Aj, "t", pa, za, 188, Fj], [er, "f", 1, Fq, 150, 1], [dn, "f", Xn, hn, 151, 1], [1, "f", Ok, 6, 149, Fo], [1, "f", ce, 6, 148, V], [1, "f", Ok, zk, 147, Br], [ik, "f", 2, _, 145, ce], [dn, "f", Wq, zk, 143, 1], [1, "f", 1, Fq, 146, 1], [Fo, "f", 1, 6, 144, 1], [V, "f", V, 6, 142, 1], [ik, "f", 2, 6, 141, er], [V, "f", 2, za, 139, ik], [1, "f", 2, 6, 137, Fo], [Fo, "f", C, hn, 135, 1], [Aj, "f", C, 6, 133, Fo], [1, "f", 1, 6, 140, V], [1, "f", ik, hn, 138, Fo], [1, "f", dn, 6, 136, V], [1, "f", dn, 6, 134, 1], [Aj, "f", V, _, 132, V], [1, "f", Wq, 6, 131, Br], [1, "f", pa, So, 129, 1], [1, "f", C, zk, 127, Aj], [1, "f", Le, hi, 125, 1], [1, "f", 2, 6, 123, 1], [Aj, "f", Le, 6, 121, V], [1, "f", Br, _, 130, 1], [1, "f", Br, So, 128, 1], [V, "f", V, zk, 126, er], [1, "f", Br, hn, 124, dn], [1, "f", V, 6, 122, 1], [1, "f", ik, So, 120, ce], [ce, "f", 2, Fq, 119, 1], [Br, "f", Xn, hi, 117, V], [1, "f", 2, 6, 115, 1], [1, "f", kn, za, 113, Fo], [Aj, "f", Ok, So, 111, 1], [er, "f", 2, 6, 109, 1], [1, "f", 1, zk, 118, 1], [1, "f", dn, 6, 116, 1], [1, "f", 1, 6, 114, ik], [1, "f", Fo, 6, 112, V], [er, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, er], [1, "f", V, Fq, 106, Aj], [V, "f", er, Fq, 104, 1], [1, "f", 2, 6, 107, ik], [V, "f", ij, 6, 105, 1], [1, "f", kn, hn, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, ce], [1, "f", 2, 6, 97, dn], [1, "f", Wq, 6, 95, Br], [ik, "f", kn, 6, 93, 1], [er, "f", 2, So, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", ce, _, 100, 1], [Br, "f", ik, zk, 98, ce], [Fo, "f", Fo, 6, 96, 1], [1, "f", 1, 6, 94, er], [1, "f", er, 6, 92, 1], [1, "f", 1, H, 90, 1], [1, "f", 1, 6, 88, Br], [1, "f", 1, hi, 86, 1], [1, "f", 2, _, 89, 1], [ik, "f", Xn, 6, 87, 1], [ce, "f", 2, 6, 85, 1], [Br, "f", C, Fq, 83, Br], [1, "f", 2, hi, 81, Fo], [1, "f", 2, 6, 79, V], [1, "f", Wq, 6, 77, ik], [Fo, "f", 1, 6, 84, Br], [1, "f", 1, H, 82, Fo], [dn, "f", ik, 6, 80, 1], [1, "f", 1, 6, 78, V], [1, "f", 1, 6, 76, er], [er, "f", ij, 6, 75, dn], [dn, "f", Wq, 6, 73, 1], [1, "f", C, H, 71, 1], [1, "f", 2, Fq, 69, 1], [V, "f", Xn, _, 67, Br], [1, "f", 2, 6, 65, 1], [er, "f", er, 6, 74, 1], [1, "f", V, H, 72, ce], [ce, "f", er, _, 70, 1], [1, "f", 1, 6, 68, Aj], [1, "f", 1, za, 66, 1], [Br, "f", 1, zk, 64, ce], [er, "f", 2, Fq, 63, Aj], [V, "f", 2, 6, 61, Aj], [ik, "f", 2, Fq, 59, 1], [er, "f", 2, 6, 57, V], [Fo, "f", kn, H, 55, 1], [Fo, "f", Ok, 6, 53, er], [1, "f", ij, hn, 51, Fo], [1, "f", Br, 6, 62, Fo], [er, "f", V, 6, 60, 1], [1, "f", dn, Fq, 58, 1], [Br, "f", Br, za, 56, 1], [1, "f", 1, zk, 54, 1], [1, "f", 1, 6, 52, er], [1, "f", ik, H, 50, ik], [ce, "f", 2, 6, 49, Br], [1, "f", 2, 6, 47, Fo], [er, "f", Xn, 6, 45, Fo], [Fo, "f", kn, 6, 43, Br], [Fo, "f", Xn, H, 41, er], [ce, "f", kn, 6, 39, 1], [dn, "f", 1, Fq, 48, Fo], [1, "f", 1, 6, 46, Aj], [er, "f", 1, 6, 44, ce], [1, "f", Aj, hn, 42, 1], [1, "f", Br, 6, 40, 1], [ce, "f", 1, 6, 38, 1], [1, "f", Xn, zk, 37, er], [ik, "f", 2, za, 35, Fo], [1, "f", Ok, 6, 33, Aj], [er, "f", pa, Vo, 31, 1], [V, "f", Ok, 6, 29, Br], [V, "f", pa, 6, 27, ce], [V, "f", ce, 6, 36, 1], [V, "f", 1, H, 34, 1], [er, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, Fo], [Br, "f", 1, zk, 28, er], [1, "f", er, Fq, 26, 1], [1, "f", Le, H, 25, ik], [1, "f", 2, 6, 23, Br], [Fo, "f", pa, 6, 21, ce], [1, "f", pa, So, 19, Fo], [1, "f", ij, 6, 17, er], [1, "f", 2, 6, 15, 1], [1, "f", Br, 6, 24, 1], [dn, "f", 1, H, 22, 1], [Aj, "f", V, 6, 20, 1], [Br, "f", ce, So, 18, 1], [1, "f", 1, 6, Kj, Fo], [ce, "f", 2, 6, eq, 1], [Fo, "f", 2, za, 11, Fo], [1, "f", 2, 6, 9, ik], [Fo, "f", 2, 6, Rk, 1], [ik, "f", 1, hn, 14, ik], [Br, "f", ik, 6, 12, Fo], [1, "f", ik, 6, 10, 1], [1, "f", Br, 6, lr, 1], [V, "f", 1, 6, 6, Br], [dn, "f", 1, 8, Fq, Aj], [ce, "f", 2, 7, 6, ce], [1, "f", Wq, 9, 6, Fo], [Fo, "f", 2, 11, So, 1], [Fo, "f", pa, eq, 6, Fo], [Fo, "f", kn, 15, hn, er], [1, "f", 1, Ke, 6, 1], [1, "f", Aj, x, za, 1], [1, "f", 1, 14, 6, ik], [ce, "f", 1, 16, 6, Br], [ik, "f", 1, 18, 6, Br], [Aj, "f", er, 20, 6, 1], [Br, "f", 1, 22, hi, 1], [ik, "f", 1, 24, _, Aj], [1, "f", 1, 26, 6, Br], [1, "f", 2, Vk, hn, 1], [ik, "f", 2, 19, 6, 1], [dn, "f", ij, 21, H, 1], [er, "f", pa, 23, 6, 1], [Fo, "f", Xn, 25, 6, ce], [1, "f", 2, 27, zk, 1], [1, "f", kn, 29, za, 1], [ik, "f", 2, 31, _, 1], [1, "f", kn, 33, hi, 1], [ik, "f", V, 28, hn, 1], [1, "f", er, 30, Fq, V], [ik, "f", 1, 32, hi, ce], [1, "f", 1, 34, hn, ce], [1, "f", Xn, 67, 6, 1], [Fo, "f", Xn, 69, za, V], [1, "f", Ok, 71, 6, V], [1, "f", C, 73, _, V], [V, "f", 2, 75, 6, Br], [1, "f", 1, 68, za, 1], [1, "f", dn, 70, za, Br], [ik, "f", 1, 72, zk, 1], [1, "f", 1, 74, 6, 1], [dn, "f", dn, 76, 6, 1], [1, "f", Ok, 77, 6, 1], [1, "f", ij, 79, 6, V], [V, "f", 2, 81, Fq, ce], [1, "f", C, 83, Vo, 1], [Fo, "f", Wq, 85, 6, 1], [1, "f", Br, 78, H, 1], [1, "f", V, 80, 6, 1], [1, "f", 1, 82, 6, dn], [dn, "f", Aj, 84, Vo, ce], [1, "f", 1, 86, _, 1], [Fo, "f", Xn, 87, 6, 1], [1, "f", 2, 89, zk, dn], [1, "f", kn, 91, _, 1], [1, "f", 2, 93, 6, er], [Aj, "f", ce, 88, Fq, dn], [ik, "f", 1, 90, Vo, 1], [1, "f", dn, 92, 6, 1], [1, "f", 1, 94, Vo, 1], [1, "f", 2, 95, Fq, 1], [1, "f", Aj, 95, 7, ce], [ce, "f", Br, 83, Ij, 1], [1, "f", 1, 81, E, 1], [Fo, "f", 1, 79, 7, 1], [1, "f", Br, 77, iq, er], [er, "f", 1, 75, Rk, 1], [V, "f", dn, 73, 7, ik], [dn, "f", 1, 71, Ba, ce], [dn, "f", Br, 69, iq, ik], [er, "f", Aj, 33, 7, 1], [1, "f", 1, 31, Ba, ce], [1, "f", Aj, 29, 7, V], [Br, "f", V, 27, 7, 1], [1, "f", Fo, 25, 7, Br], [1, "f", 1, 23, 7, 1], [1, "f", ce, 21, 7, V], [1, "f", 1, k, 7, dn], [dn, "f", Aj, Lj, iq, 1], [Br, "f", 1, $n, Hj, V], [Fo, "f", 1, Mk, He, ce], [dn, "f", Fo, Ro, 7, Br], [er, "f", 1, yn, Ba, 1], [1, "f", 1, 7, _k, dn], [1, "s", 0, wq, 8, 1], [1, "t", oj, _k, 174, tr], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, yk], [Aj, "b", Le, 7, 177, 0], [V, "t", Dn, 94, 301, 0], [dn, "b", B, 95, 301, tr], [dn, "t", mj, 96, 301, yk], [ce, "t", 1, 97, 301, 0], [ik, "t", ij, 98, 301, Fj], [1, "t", 4, 99, 301, yk], [1, "t", Le, wa, 301, jj], [Fo, "t", bn, 96, 304, Mn], [dn, "t", ij, 96, 302, yk], [1, "t", 2, 97, 304, 0], [Br, "t", 2, 96, 303, 0], [Aj, "t", Cj, 97, 303, 0], [Fo, "t", 5, 98, 304, Ko], [1, "b", 2, 97, 302, kq], [1, "b", Wq, 99, 304, jj], [Aj, "t", 1, 98, 303, 0], [ce, "t", oj, 98, 302, 0], [1, "t", kr, 99, 303, 0], [1, "t", 4, or, 304, 0], [1, "t", 5, 99, 302, Mn], [1, "t", Rj, 101, 303, Fj], [V, "t", 2, 100, 303, 0], [ce, "t", Fj, wr, 302, 0], [1, "t", Mn, 101, 304, 0], [dn, "t", oj, 102, 304, jj], [1, "f", Ko, 94, Rk, 1], [1, "f", 1, 93, 7, er], [1, "f", Aj, 92, 7, 1], [1, "f", Fj, 91, 7, 1], [1, "f", 1, 90, 7, ce], [1, "f", V, 89, Rk, 1], [Aj, "f", 0, 88, 7, 1], [1, "f", Fo, 87, 7, V], [Br, "f", 1, 86, Ij, er], [Fo, "f", er, 85, E, Br], [1, "f", 0, 84, Lq, ik], [dn, "f", er, 82, 7, 1], [ce, "f", kq, 80, E, 1], [ce, "f", Fo, 78, 7, Aj], [er, "f", Ko, 76, Lq, ce], [1, "f", Br, 74, E, 1], [dn, "f", Mn, 72, 7, Fo], [Br, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, Aj], [dn, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, Aj], [1, "f", er, 28, He, Fo], [Br, "f", kq, 26, 7, 1], [1, "f", 1, 24, 7, 1], [er, "f", tr, 22, 7, 1], [er, "f", er, 20, 7, V], [Aj, "f", kq, 18, Lq, 1], [1, "f", 1, $j, _k, ik], [1, "f", 0, 14, Ij, 1], [1, "f", 1, 12, iq, Fo], [1, "f", 0, 10, E, 1], [ce, "f", V, S, 7, 1], [ce, "s", ce, 7, 9, ik], [Fo, "f", 0, 95, 152, 1], [ce, "f", 1, 95, 151, 1], [ik, "f", 0, 95, qk, ik], [1, "f", 1, 95, pk, V], [1, "f", ik, 95, ve, Br], [Aj, "f", er, 95, ya, 1], [Fo, "f", 0, 95, Nk, 1], [er, "f", Ko, 95, fq, Aj], [1, "f", 1, 95, 21, ik], [Aj, "f", dn, 95, 26, 1], [1, "f", 1, 95, 37, dn], [1, "f", 0, 95, 44, 1], [1, "f", V, 95, 50, 1], [1, "f", 1, 95, 52, 1], [er, "f", jj, 95, 53, Fo], [Br, "f", 1, 95, 54, Aj], [1, "f", dn, 95, 62, Fo], [1, "f", Mn, 95, 55, 1], [Br, "f", 1, 95, 64, 1], [Aj, "f", 0, 95, 58, 1], [Aj, "f", 0, 95, 61, ik], [1, "f", Fj, 95, 68, ik], [Aj, "f", ko, 95, 72, 1], [ik, "f", kq, 95, 78, 1], [V, "f", 1, 95, 115, ce], [1, "f", Fo, 95, 117, 1], [V, "f", er, 95, 128, Br], [Fo, "f", 0, 95, 85, 1], [V, "f", tr, 95, 91, 1], [Fo, "f", Ko, 95, 95, Aj], [1, "f", yk, 95, 114, 1], [1, "f", ij, 95, 113, 1], [dn, "f", ce, 95, 119, dn], [1, "f", yk, 95, 120, 1], [dn, "f", Aj, 95, 121, dn], [ik, "f", 0, 95, 127, 1], [ce, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [ce, "f", ik, 95, 132, 1], [1, "f", ik, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, ik], [dn, "f", tr, 95, 147, Br], [Fo, "f", dn, 95, 138, 1], [Br, "f", dn, 95, 144, ce], [Aj, "f", ce, 95, 10, 1], [1, "f", Mn, 95, 8, 1], [1, "f", 1, 95, rq, Br], [1, "f", 0, 95, 13, 1], [1, "f", ik, 95, 16, ik], [V, "f", V, 95, Vj, er], [Br, "f", yk, 95, 18, Br], [V, "f", 1, 95, 45, Fo], [Fo, "f", 0, 95, 51, Fo], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, ce], [1, "f", 1, 95, 59, Br], [1, "f", 1, 95, 60, 1], [V, "f", 1, 95, 63, 1], [Fo, "f", 0, 95, 65, Fo], [1, "f", er, 95, 66, 1], [Br, "f", 1, 95, 67, 1], [V, "f", er, 95, 69, 1], [dn, "f", V, 95, 70, Fo], [1, "f", Mn, 95, 71, dn], [V, "f", 1, 95, 73, ce], [1, "f", 1, 95, 74, 1], [1, "f", kq, 95, 75, 1], [1, "f", Fo, 95, 76, Br], [er, "f", ik, 95, 77, Aj], [ce, "f", V, 95, 79, 1], [ce, "f", 1, 95, 80, 1], [er, "f", 0, 95, 81, ce], [1, "f", er, 95, 82, er], [ik, "f", Fj, 95, 83, Aj], [1, "f", dn, 95, 84, 1], [1, "f", 1, 95, 86, Aj], [1, "f", Fo, 95, 88, Fo], [1, "f", 0, 95, 87, er], [V, "f", 1, 95, 89, er], [ik, "f", 1, 95, 90, V], [ce, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, Br], [ik, "f", ce, 95, 94, V], [Fo, "f", Fo, 95, 96, er], [1, "f", dn, 95, 97, er], [dn, "f", 0, 95, 98, dn], [1, "f", ik, 95, 99, 1], [dn, "f", 1, 95, 100, ik], [1, "f", yk, 95, 101, Fo], [Aj, "f", 1, 95, 102, ik], [dn, "f", 0, 95, 103, 1], [1, "f", ik, 95, 104, 1], [Fo, "f", ik, 95, 105, 1], [1, "f", 0, 95, 106, 1], [ik, "f", 1, 95, 107, Fo], [1, "f", 1, 95, 108, 1], [1, "f", dn, 95, 109, er], [1, "f", Fj, 95, 110, 1], [Br, "f", ce, 95, 111, 1], [ce, "f", 0, 95, 112, ik], [ce, "f", 1, 95, 116, 1], [V, "f", 0, 95, 118, 1], [ik, "f", 0, 95, 122, 1], [1, "f", V, 95, 123, 1], [V, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, Br], [1, "f", ik, 95, 126, er], [1, "f", V, 95, 129, ik], [dn, "f", Br, 95, 133, Aj], [Aj, "f", 0, 95, 134, 1], [1, "f", Aj, 95, 135, Fo], [1, "f", ik, 95, 139, ik], [1, "f", kq, 95, 140, Aj], [Br, "f", 1, 95, 141, 1], [1, "f", Br, 95, 142, 1], [1, "f", 1, 95, 146, 1], [ce, "f", 0, 95, 145, Aj], [ik, "f", V, 95, 148, ce], [er, "f", 1, 95, 149, Br], [1, "f", dn, 95, 150, Fo], [Aj, "f", Fo, 95, 153, dn], [1, "cs", Fj, 64, 9, Fo], [ik, "cs", 1, 64, rk, 1], [er, "cs", 2, 64, 16, 1], [er, "cs", Xn, 64, An, 1], [ce, "cs", 0, 64, 20, 1], [1, "cs", Aj, 64, 21, 1], [1, "cs", ij, 64, 22, Fo], [Br, "cs", yk, 64, 23, ik], [1, "cs", 2, 64, 24, Aj], [1, "cs", Br, 64, 29, 1], [1, "cs", 2, 64, 30, ce], [1, "cs", B, 64, 31, 1], [er, "cs", tr, 64, 32, 1], [1, "cs", ik, 64, 33, 1], [1, "cs", Le, 64, 34, 1], [Fo, "cs", 0, 64, 35, Fo], [Fo, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, zn, 1], [1, "cs", 1, 65, ka, 1], [1, "cs", 2, 65, Bq, dn], [Fo, "cs", 3, 65, 11, dn], [1, "cs", Br, 65, an, 1], [er, "cs", 0, 64, ok, 1], [1, "cs", Ea, 65, 17, ik], [ce, "cs", pa, 64, 18, dn], [1, "cs", 2, 65, 18, Fo], [1, "cs", yk, 65, bk, ik], [1, "cs", Br, 65, 20, ik], [ik, "cs", 3, 65, 21, er], [1, "cs", C, 65, 22, 1], [ce, "cs", 3, 65, 23, 1], [er, "cs", tr, 65, 24, ce], [1, "cs", Ok, 65, 29, 1], [V, "cs", 3, 65, 30, ce], [Fo, "cs", 0, 65, 31, 1], [Fo, "cs", 1, 65, 32, ik], [1, "cs", Ok, 65, 33, er], [dn, "cs", ta, 65, 34, 1], [1, "cs", Xn, 63, 9, Br], [Br, "cs", 0, 62, 9, Fo], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, xr, 1], [ik, "cs", 2, 59, I, 1], [Br, "cs", 2, 58, rq, Fo], [dn, "cs", 0, 57, yn, Fo], [Br, "cs", 2, 56, rq, Fo], [1, "cs", kn, 55, I, Aj], [Br, "cs", 2, 54, 9, 1], [Br, "cs", 0, 53, 9, 1], [1, "cs", Mn, 51, L, 1], [1, "cs", 2, 52, ka, Fo], [Fo, "cs", kn, 50, xr, 1], [1, "cs", 2, 48, 9, 1], [Fo, "cs", 2, 49, 9, Fo], [1, "cs", 0, 47, yn, ce], [1, "cs", 0, 45, L, 1], [1, "cs", 0, 43, 9, dn], [ik, "cs", C, 46, 9, Br], [1, "cs", 2, 44, 9, Fo], [dn, "cs", C, 42, 9, 1], [Br, "cs", Le, 41, 9, Br], [1, "cs", yk, 40, yn, V], [Br, "cs", C, 39, rq, ik], [1, "cs", 2, 38, Ze, 1], [Aj, "cs", 0, 37, Ze, Aj], [Aj, "cs", 0, 63, 8, 1], [ik, "cs", 2, 65, He, V], [V, "cs", 3, 64, 7, 1], [Aj, "cs", Ok, 62, ea, 1], [1, "cs", vo, 61, 8, 1], [V, "cs", ik, 62, 7, Fo], [1, "cs", 2, 63, Hj, 1], [Aj, "cs", 0, 64, So, Br], [er, "cs", 3, 65, Vo, V], [1, "cs", 2, 63, 6, 1], [1, "cs", ij, 62, _, 1], [dn, "cs", Le, 61, 6, 1], [Br, "cs", 2, 60, 6, 1], [Br, "cs", 2, 59, 6, dn], [1, "cs", 2, 61, E, 1], [Aj, "cs", jj, 60, Lq, er], [er, "cs", 2, 60, 8, Br], [Aj, "cs", pa, 59, 7, Aj], [ce, "cs", 2, 59, 8, 1], [ce, "cs", ik, 58, 8, Fo], [1, "cs", 1, 57, 6, V], [ik, "cs", V, 55, _k, 1], [ce, "cs", Ko, 56, 6, ce], [Fo, "cs", 2, 58, 6, 1], [V, "cs", 2, 58, 7, Br], [1, "cs", Le, 57, Ba, V], [1, "cs", 2, 56, 7, ik], [1, "cs", 2, 55, 6, 1], [V, "cs", C, 57, 8, 1], [V, "cs", C, 56, 8, 1], [1, "cs", 2, 55, 8, ce], [er, "cs", 0, 54, lr, 1], [1, "cs", kq, 50, 7, 1], [1, "cs", 0, 53, 6, er], [1, "cs", Le, 54, _, 1], [1, "cs", Xn, 54, E, 1], [1, "cs", 2, 53, iq, 1], [dn, "cs", 2, 52, iq, 1], [1, "cs", 2, 52, 6, V], [1, "cs", 1, 52, 8, 1], [ce, "cs", Le, 53, 8, Fo], [1, "cs", 2, 51, Oi, er], [1, "cs", 2, 51, 7, V], [er, "cs", Ok, 51, 6, ce], [1, "cs", 2, 50, So, ik], [Br, "cs", Xn, 50, 8, V], [1, "cs", 2, 49, 8, Aj], [Aj, "cs", Xn, 49, 7, ik], [1, "cs", 2, 49, zk, er], [ce, "cs", Ko, 46, 7, 1], [V, "cs", dn, 48, lr, V], [1, "cs", 1, 44, _k, 1], [1, "cs", 1, 41, S, ik], [1, "cs", 2, 48, Ij, dn], [dn, "cs", 2, 48, 6, 1], [Br, "cs", 2, 47, Fq, dn], [1, "cs", Ok, 47, 7, 1], [1, "cs", 2, 47, 8, Fo], [1, "cs", C, 46, 8, 1], [ik, "cs", 2, 45, 8, Br], [1, "cs", 2, 45, 7, 1], [1, "cs", Wq, 45, 6, 1], [ik, "cs", 2, 46, Vo, V], [1, "cs", 2, 44, hi, 1], [Aj, "cs", Xn, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", pa, 43, iq, 1], [1, "cs", ij, 43, 6, dn], [Br, "cs", C, 42, 6, 1], [Aj, "cs", 2, 42, 7, 1], [1, "cs", Xn, 42, S, 1], [er, "cs", Ok, 41, 7, Aj], [1, "cs", Xn, 41, za, er], [1, "cs", 2, 40, hi, ce], [dn, "cs", 2, 40, Hj, ik], [1, "cs", 2, 40, zn, dn], [ik, "cs", 2, 39, 8, V], [1, "cs", 0, 39, Lq, 1], [1, "cs", 1, 38, zn, 1], [Br, "cs", Wq, 39, 6, 1], [Fo, "cs", Wq, 38, hi, dn], [1, "cs", Wq, 37, za, 1], [1, "cs", Xn, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [V, "cs", pa, 37, 8, ce], [Fo, "cs", 2, 37, Fn, 1], [Fo, "cs", kn, 38, 10, er], [1, "cs", tr, 38, Qn, 1], [1, "cs", 0, 38, Vk, er], [1, "cs", 1, 37, 18, 1], [dn, "cs", 0, 38, Rq, er], [Aj, "cs", 2, 37, qk, ik], [1, "cs", Xn, 37, an, 1], [Aj, "cs", 2, 37, 17, ik], [1, "cs", 2, 38, N, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", Dn, 38, 16, Br], [1, "cs", yk, 37, 21, 1], [1, "cs", yk, 38, 22, 1], [Fo, "cs", kq, 38, 24, Fo], [ik, "cs", ij, 37, 20, 1], [1, "cs", 2, 38, da, 1], [Br, "cs", 2, 38, 21, 1], [Aj, "cs", er, 37, 23, dn], [1, "cs", _i, 37, 22, 1], [1, "cs", 3, 38, 23, Aj], [1, "cs", 2, 37, 24, 1], [1, "cs", yk, 38, 30, Fo], [dn, "cs", Fj, 38, 32, 1], [V, "cs", 0, 37, 31, ik], [1, "cs", Br, 38, 34, 1], [1, "cs", Br, 37, 29, 1], [ik, "cs", 2, 38, 29, 1], [dn, "cs", 2, 37, 30, 1], [1, "cs", Xn, 38, 31, ik], [Aj, "cs", Wq, 37, 32, 1], [Aj, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, dn], [1, "cs", 2, 36, lr, 1], [ce, "cs", 0, 36, la, 1], [ik, "cs", ko, 35, 9, 1], [Fo, "cs", 2, 36, Ze, Aj], [1, "cs", C, 36, 10, Br], [ce, "cs", 2, 35, rk, 1], [Fo, "cs", Br, 33, 8, V], [1, "cs", 3, 34, 9, er], [1, "cs", 3, 35, zn, 1], [ik, "cs", Wq, 34, 8, 1], [er, "cs", jj, 36, 7, ce], [1, "cs", ce, 34, Ij, dn], [Fo, "cs", pa, 35, Ba, dn], [1, "cs", 2, 35, 6, 1], [V, "cs", 2, 36, H, Aj], [dn, "cs", ij, 68, Hk, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", tr, 67, 9, Aj], [1, "cs", tr, 66, zn, ce], [Fo, "cs", kn, 67, ea, 1], [V, "cs", 1, 68, 8, dn], [1, "cs", Aj, 66, oo, Fo], [1, "cs", 2, 67, 10, ik], [V, "cs", Mn, 66, So, Br], [Fo, "cs", 2, 66, wq, ik], [ik, "cs", 2, 67, 7, 1], [dn, "cs", pa, 69, X, dn], [1, "cs", ij, 63, 32, 1], [1, "cs", C, 62, 34, Fo], [1, "cs", pa, 60, 35, V], [1, "cs", 3, 59, 35, V], [1, "cs", 0, 61, 35, 1], [er, "cs", Fj, 63, 34, ik], [1, "cs", Le, 63, 33, 1], [1, "cs", Ok, 63, 35, 1], [Br, "cs", 2, 62, 35, ik], [1, "cs", Wq, 58, 36, 1], [1, "cs", 1, 59, 36, V], [Aj, "cs", 1, 62, 36, ik], [ce, "cs", pa, 60, 36, 1], [Aj, "cs", Xn, 61, 34, 1], [Br, "cs", lk, 62, 33, ce], [1, "cs", Ik, 63, 36, dn], [1, "cs", lk, 61, 36, 1], [1, "cs", 0, 42, 36, ik], [er, "cs", V, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [Aj, "cs", 3, 40, 36, 1], [dn, "cs", Kk, 43, 36, 1], [Br, "cs", ce, 40, 35, 1], [1, "cs", Wq, 41, 35, 1], [1, "cs", Xn, 40, 34, er], [1, "cs", 2, 39, 34, Aj], [er, "cs", 2, 39, 33, Fo], [V, "cs", C, 39, 32, 1], [1, "cs", Mn, 40, 33, 1], [ik, "cs", kn, 41, 34, Br], [1, "cs", Fo, 44, 36, ce], [ce, "cs", 3, 43, 35, er], [1, "cs", Wq, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [er, "cs", 3, 59, 30, 1], [ce, "cs", tr, 60, 29, ik], [1, "cs", 2, 60, 28, ik], [1, "cs", 3, 60, 27, 1], [1, "cs", Fj, 60, 26, 1], [1, "cs", 2, 54, 25, Fo], [V, "cs", C, 48, 25, Fo], [1, "cs", ij, 42, 26, V], [Aj, "cs", tr, 55, 25, 1], [1, "cs", 2, 59, 26, ik], [dn, "cs", 0, 43, 26, 1], [Aj, "cs", 1, 42, 27, 1], [1, "cs", Ok, 42, 28, 1], [dn, "cs", kn, 43, 30, 1], [1, "cs", 0, 42, 29, er], [Aj, "cs", 0, 54, 24, 1], [1, "cs", ko, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, Aj], [V, "cs", ij, 63, 22, Fo], [Fo, "cs", pa, 63, 21, 1], [Br, "cs", 2, 39, 21, Fo], [1, "cs", 3, 57, Ta, 1], [Br, "cs", 2, 56, 18, 1], [1, "cs", ta, 51, 21, 1], [Fo, "cs", Mn, 51, u, 1], [dn, "cs", 2, 51, nq, 1], [Aj, "cs", fa, 51, Ta, 1], [1, "cs", C, 63, Jo, 1], [1, "cs", ij, 63, 10, 1], [ce, "cs", 2, 56, eq, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, ce], [1, "cs", Xn, 47, 18, 1], [dn, "cs", 2, 46, on, Aj], [1, "cs", Ko, 46, 13, Aj], [ce, "cs", ij, 45, 13, dn], [1, "cs", kn, 39, 10, 1], [V, "cs", 2, 39, 16, er], [dn, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [Aj, "a", V, 53, 14, 1], [1, "a", 1, 49, mk, 1], [ik, "de", 8, 55, $q, 0], [dn, "de", I, 48, 28, 0], [Fo, "de", Fn, 58, 26, 0], [V, "de", 11, 59, 29, 0], [1, "de", la, 55, 34, 0], [Aj, "de", 10, 48, 33, 0], [Aj, "de", 9, 41, 32, jj], [1, "de", ka, 56, 24, 0], [1, "de", yn, 62, 16, 0], [ik, "de", 9, 45, 11, jj], [Fo, "de", rq, 44, ok, Mn], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, yk], [1, "de", lj, 63, 31, jj], [er, "de", 8, 60, 30, yk], [1, "de", 8, 43, 26, kq], [Fo, "de", zq, 43, 29, 0], [1, "de", 10, 53, 29, 0], [Fo, "de", 10, 53, 24, 0], [Fo, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, Mn], [1, "de", 10, 39, 26, Ko], [dn, "de", Ze, 46, 24, yk], [V, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, Ko], [Aj, "de", 32, 55, 35, yk], [dn, "de", 32, 60, 33, ko], [er, "de", 32, 63, 28, jj], [Br, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, sa, 0], [ce, "de", 32, 63, Y, 0], [1, "de", 32, 59, 10, 0], [Fo, "de", 32, 56, 12, 0], [Br, "de", 32, 52, 17, yk], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, pk, 0], [dn, "de", 32, 39, no, yk], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [Aj, "de", 32, 43, 34, ko], [Fo, "de", 32, 47, 34, jj], [1, "de", 31, 54, 33, yk], [1, "de", 31, 59, 24, 0], [V, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, ko], [1, "de", 31, 39, 27, 0], [er, "de", 31, 48, 27, Ko], [Aj, "de", 31, 57, 27, 0], [Fo, "de", 32, 44, 27, jj], [1, "d", 0, Mq, Y, Aj], [Br, "d", 0, 89, eq, 1], [1, "d", 1, 91, 21, Br], [Aj, "d", 1, 10, 22, 1], [ce, "f", 2, 89, Ta, Fo], [1, "f", 0, 88, 19, 1], [1, "g", dn, 85, 22, ce], [1, "s", 1, 90, 29, 1], [Aj, "s", ik, 92, 15, 1], [1, "s", yk, 91, 31, Br], [1, "s", Ok, 90, 38, 1], [1, "s", 0, 91, 42, er], [Fo, "s", 0, 90, 49, 1], [Fo, "f", 1, 86, 43, ik], [dn, "f", 0, 81, 45, ce], [ce, "f", ij, 66, 44, ik], [Aj, "f", 2, 55, 49, er], [Br, "f", Aj, 54, 50, Fo], [Br, "f", pa, 43, 45, 1], [1, "f", ij, 31, 48, er], [ik, "f", 1, 27, 39, Aj], [1, "f", 1, 80, 46, 1], [dn, "f", Fo, 69, 48, Aj], [ik, "g", kq, 80, 40, 1], [Br, "g", 2, 81, 40, Aj], [ce, "s", 2, 77, 39, er], [V, "s", 0, 68, 43, dn], [V, "s", 2, 57, 41, 1], [1, "s", dn, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", Le, 48, 48, 1], [1, "f", 2, hr, 12, Aj], [Fo, "f", Mn, 13, 31, er], [1, "f", 1, gj, 32, 1], [V, "s", yk, 15, 27, Br], [1, "s", ko, eq, 39, 1], [1, "f", 2, 11, 17, ce], [er, "f", 1, 12, 18, 1], [ik, "g", pa, 12, 25, 1], [1, "f", yk, 16, 45, er], [er, "f", 1, 17, 46, dn], [1, "s", Br, 74, 48, Br], [er, "s", 1, 20, 47, ce], [Br, "g", 0, 58, 59, Fo], [1, "g", Ko, 46, 72, 1], [ce, "g", 0, 69, 79, ce], [1, "g", ko, 72, 74, ce], [dn, "g", 0, 26, 88, Br], [dn, "g", 0, 20, 74, ik], [Fo, "g", yk, 28, 67, 1], [ik, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [ce, "g", 0, 87, 72, Br], [ik, "g", 0, ra, 85, 1], [1, "g", dn, 85, 97, Br], [Aj, "g", Br, 68, 104, Fo], [1, "g", V, 63, 91, ik], [ce, "g", 1, 39, 90, 1], [Fo, "g", 1, 34, 99, 1], [er, "g", 1, 17, 103, Br], [1, "g", 2, 77, 60, 1], [er, "g", 2, ya, 56, Fo], [ik, "g", 2, 39, 60, 1], [V, "g", pa, 87, 57, 1], [V, "f", 0, 9, 62, ik], [1, "f", Mn, x, 81, Br], [1, "f", ko, 26, 59, 1], [V, "f", tr, 35, 53, ce], [1, "f", 0, 44, 58, 1], [ik, "f", tr, 88, 62, 1], [1, "f", Ko, 91, 82, Br], [er, "f", kq, 84, 85, Aj], [dn, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [ce, "f", Mn, 62, 83, 1], [1, "f", ko, 34, 81, 1], [Aj, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, dn], [1, "f", Br, 81, 70, 1], [V, "f", 1, 91, 72, dn], [Fo, "f", 1, 8, 91, Fo], [ce, "f", ik, 14, 81, dn], [1, "f", 1, 29, 79, 1], [dn, "f", 1, Mk, 65, 1], [1, "f", V, 46, 97, 1], [Fo, "f", er, 43, 73, 1], [ce, "f", 1, 60, 69, 1], [Fo, "f", 1, 70, 96, dn], [1, "f", Br, 58, 84, dn], [Br, "s", 1, 56, 76, Br], [er, "s", 1, 85, 74, dn], [er, "s", tr, 72, 71, 1], [1, "s", Mn, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", yk, fq, 66, ce], [V, "s", 0, 47, 83, er], [ik, "s", kq, 29, 86, ik], [V, "s", 0, 78, 92, Fo], [ce, "s", 0, 62, 102, er], [1, "s", 0, 18, 95, 1], [1, "s", Wq, 64, 101, Fo], [1, "s", 2, 78, 84, 1], [V, "s", C, 49, 83, 1], [1, "s", 2, 15, 76, ik], [er, "s", 2, 21, 84, Br], [dn, "f", Fo, 26, 94, ce], [Br, "f", 2, 23, 96, V], [1, "f", 2, 25, 72, er], [1, "f", kn, 85, 77, ce], [1, "f", Ok, 79, 95, 1], [V, "f", pa, 51, 65, dn], [1, "f", C, 69, 60, V], [ik, "f", 1, 25, 105, dn], [1, "s", ce, $o, 68, 1], [1, "s", 0, 55, 76, dn], [1, "s", Mn, 74, 59, er], [V, "f", dn, 46, 142, ce], [1, "f", 1, bk, 140, ce], [ce, "f", 1, 77, 137, 1], [ce, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [er, "f", 0, 33, 127, 1], [1, "f", jj, 76, 121, V], [ce, "f", Mn, 55, 121, ik], [dn, "f", 0, 13, 123, 1], [1, "f", Ko, 18, 141, Br], [Fo, "f", ko, 40, 137, 1], [V, "f", 2, 76, 142, 1], [1, "f", Xn, 57, 140, ce], [ik, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, Aj], [Fo, "f", Le, 29, 131, V], [1, "f", tr, 70, 150, V], [1, "f", 0, 28, 146, 1], [Fo, "f", Ko, co, 132, ce], [ce, "f", 0, 90, 129, 1], [Fo, "f", Fo, 87, 131, Fo], [Aj, "f", 0, 91, 143, 1], [1, "f", Wq, 87, 145, Fo], [dn, "f", 1, 89, 141, 1], [Br, "f", Br, 63, 130, 1], [dn, "f", Aj, 75, 122, ce], [dn, "f", 1, 52, 124, dn], [ce, "f", 1, 34, 127, Fo], [1, "f", 1, re, 123, ik], [dn, "f", ik, 24, 122, 1], [Br, "f", 0, 83, 108, ik], [1, "f", 0, 89, 118, V], [V, "f", tr, 56, 107, 1], [1, "f", 0, 38, 113, 1], [ce, "f", 0, Sq, 110, ce], [dn, "f", 1, 80, 105, 1], [Br, "f", 1, 82, 109, ik], [ce, "f", 1, 87, 118, 1], [er, "f", 1, 59, 110, 1], [V, "f", 1, 29, 111, ik], [er, "f", 2, 28, 112, dn], [1, "f", Wq, 70, 112, 1], [V, "f", 2, 42, 111, 1], [ik, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [er, "s", Ko, 25, 172, 1], [1, "s", ko, 22, 161, ce], [1, "s", Fj, 35, 152, Aj], [ce, "s", tr, 66, 144, 1], [V, "s", 0, 87, 145, 1], [ik, "s", kq, 86, 145, Aj], [1, "s", jj, 84, 135, Aj], [1, "s", ko, 69, 133, 1], [1, "s", 0, 84, 122, dn], [1, "s", yk, 68, 121, 1], [ce, "s", 0, 48, 124, Br], [dn, "s", 0, 26, 129, ce], [1, "s", 0, 9, 127, 1], [1, "s", yk, oo, 144, er], [1, "s", 0, 9, 109, Fo], [er, "s", Mn, 35, 101, 1], [1, "s", yk, 47, 109, Aj], [1, "s", 0, 58, 111, Aj], [Br, "s", Fj, 84, 110, 1], [ik, "s", 0, 28, 114, 1], [dn, "s", 1, 30, 116, 1], [V, "s", er, 46, 112, ik], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, V], [er, "s", V, 49, 127, er], [1, "s", er, 66, 134, ce], [ce, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, V], [1, "s", dn, 21, 164, 1], [1, "s", 1, Mq, 147, 1], [1, "s", 1, 24, 130, 1], [V, "s", 1, co, 125, V], [V, "s", V, 65, 158, dn], [Aj, "s", Aj, 83, 167, Br], [1, "s", Aj, 65, 167, 1], [1, "s", Fo, 47, 164, Fo], [1, "s", 1, 56, 168, 1], [dn, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", Xn, 79, 149, ce], [1, "s", ij, 75, 144, ik], [ce, "s", 2, 57, 150, Fo], [dn, "s", Ok, 47, 143, 1], [Aj, "s", kn, 31, 145, Br], [1, "s", ij, 36, 138, 1], [er, "s", 2, zq, 163, 1], [1, "s", 2, 22, 142, Fo], [Fo, "g", Wq, 78, 132, ik], [1, "g", 1, 48, 135, 1], [Aj, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [V, "g", 2, 70, 80, er], [ik, "g", Ok, $n, 86, 1], [dn, "g", 2, 47, 75, Br], [1, "g", 2, 36, 89, 1], [Fo, "g", pa, 80, 90, 1], [1, "f", V, 39, 118, 1], [1, "d", ij, 84, 54, Fo], [Aj, "d", Ok, sk, 54, er], [1, "de", 7, Ui, na, kq], [1, "de", 5, an, 28, 0], [er, "de", 5, rq, 25, 0], [1, "de", Bk, 34, 41, jj], [er, "de", 4, 28, 40, yk], [1, "de", H, 31, 47, Ko], [1, "de", za, 12, 39, 0], [1, "de", kr, Sq, 47, tr], [ce, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, tr], [1, "de", 6, 40, 42, 0], [Aj, "de", 7, 20, 48, 0], [dn, "de", Hj, 29, 59, yk], [dn, "de", zk, 27, 58, 0], [dn, "de", zk, Wa, 54, Ko], [Br, "de", 5, 12, 66, Fj], [er, "de", Cj, 37, 53, 0], [dn, "de", oj, 10, 63, Fj], [1, "de", Lq, 49, 48, yk], [er, "de", 7, 37, 63, 0], [Aj, "de", Vo, 33, 68, 0], [1, "de", 6, 56, 52, 0], [ce, "de", 5, 59, 58, 0], [1, "de", zk, 48, 58, Ko], [dn, "de", qo, 53, 63, 0], [Aj, "de", In, 67, 44, 0], [dn, "de", 5, 70, 49, jj], [1, "de", Oq, 82, 55, 0], [ik, "de", Cj, 79, 41, 0], [1, "de", Bk, 91, 29, jj], [Aj, "de", _k, 91, 43, 0], [Br, "de", Vo, 85, 44, 0], [1, "de", H, 74, 60, 0], [Fo, "de", 6, 90, lr, tr], [1, "de", Bk, 91, $n, 0], [er, "de", bn, 87, 20, jj], [1, "de", Ba, 93, 11, 0], [1, "de", za, 91, 21, kq], [Aj, "de", So, 85, 35, Mn], [Fo, "de", Wn, 93, 58, Mn], [1, "de", 5, 87, 63, ko], [V, "de", Hj, 77, 62, ko], [1, "de", za, 68, 61, jj], [ik, "de", 5, 90, 73, 0], [1, "de", qa, 87, 71, kq], [1, "de", Lq, 80, 71, 0], [ce, "de", 7, 83, 77, kq], [1, "de", Ij, 89, 83, Ko], [1, "de", qa, 71, 80, yk], [ce, "de", 4, 71, 70, 0], [er, "de", 5, 63, 72, ko], [1, "de", Ai, 54, 75, Ko], [V, "de", 5, 44, 83, yk], [Aj, "de", 5, 42, 74, Ko], [ik, "de", 5, Ne, 81, 0], [V, "de", In, 29, 80, Ko], [1, "de", 4, 37, 90, Fj], [1, "de", 4, _k, 75, 0], [1, "de", za, 22, 74, 0], [1, "de", za, 43, 95, 0], [1, "de", 6, 57, 85, tr], [dn, "de", H, Rq, 94, ko], [Aj, "de", 6, I, 92, Mn], [Br, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [Fo, "de", Rj, 54, 108, 0], [1, "de", Rj, 55, 95, yk], [Aj, "de", 5, 35, 104, Ko], [1, "de", 5, qj, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, Fj], [Aj, "de", wq, 11, 104, 0], [ik, "de", 7, xr, 111, Mn], [ce, "de", 7, 40, 114, kq], [dn, "de", E, 28, 117, ko], [1, "de", 7, 47, 113, tr], [1, "de", 7, 63, 104, ko], [er, "de", qa, 64, 92, yk], [ik, "de", 6, 86, 97, tr], [1, "de", 5, 76, 91, 0], [1, "de", Wn, 85, 86, tr], [1, "de", 6, 78, 83, jj], [1, "de", 6, 71, 97, 0], [ik, "de", 4, 69, 105, jj], [1, "de", 4, 79, 104, Mn], [1, "de", qo, 86, 109, Fj], [1, "de", Ai, 86, 118, Mn], [1, "de", Bk, 70, 113, 0], [Aj, "de", 6, 69, 121, yk], [Aj, "de", 6, 76, 122, 0], [ik, "de", Hj, 87, 130, 0], [1, "de", qa, 84, 123, ko], [1, "de", mj, 57, 121, Ko], [er, "de", Rj, 53, 125, 0], [1, "de", Bk, 62, 131, 0], [1, "de", So, 67, 143, yk], [ce, "de", 5, 77, 143, Mn], [Fo, "de", Ca, 85, 136, yk], [1, "de", 6, 87, 147, tr], [1, "de", 6, 92, 140, 0], [ce, "de", In, 93, 127, ko], [1, "de", 5, 93, 106, 0], [Aj, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", gn, 54, 138, Mn], [er, "de", zk, 29, 145, jj], [1, "de", hn, 29, 132, Ko], [1, "de", zk, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", U, 23, 131, 0], [1, "de", 5, 9, 134, ko], [er, "de", zk, 11, 121, 0], [1, "de", qo, 26, 121, tr], [1, "de", 35, 58, 150, yk], [1, "de", 33, 48, 156, Mn], [Br, "de", 33, 25, 158, 0], [ce, "de", 33, 36, 154, 0], [Fo, "de", 34, 9, 154, 0], [1, "de", 34, Y, 148, Fj], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [dn, "de", 34, 47, 144, 0], [Aj, "de", 34, 68, 142, yk], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, yk], [1, "de", 36, 90, 141, Mn], [Fo, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, kq], [ik, "de", 35, 56, 122, jj], [Br, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, kq], [1, "de", 35, 37, 102, Ko], [ce, "de", 33, 18, 97, kq], [1, "de", 34, Fn, 83, Fj], [ce, "de", 33, 19, 73, 0], [Aj, "de", 33, 10, 60, yk], [1, "de", 35, 24, 60, kq], [Aj, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, xo, 32, yk], [1, "de", 33, rq, 24, 0], [dn, "de", 35, 35, 27, Ko], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, Mn], [1, "de", 33, 45, 35, Mn], [ce, "de", 35, 53, 39, ko], [er, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, ko], [1, "de", 33, 68, 112, 0], [ce, "de", 33, 49, 109, jj], [1, "de", 33, 46, 95, 0], [ik, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, tr], [1, "de", 36, 70, 72, tr], [Aj, "de", 36, 78, 63, 0], [Aj, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [Aj, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, jj], [1, "de", 33, 90, 19, Mn], [1, "de", 34, 92, Hk, 0], [Fo, "de", 35, 75, 39, yk], [1, "de", 35, 67, 42, Fj], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [ce, "de", 36, 42, 61, jj], [V, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, Ko], [1, "de", 33, 46, 85, yk], [Aj, "de", 33, 64, 84, jj], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [ce, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, jj], [1, "de", 35, 20, 55, ko], [Aj, "de", 35, ve, 52, 0], [1, "s", 2, 12, 171, 1], [Br, "r", fq, 188, 0], [1, "r", 21, 188, kq], [Br, "r", 22, 188, 0], [Br, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, kq], [1, "r", 24, 189, 0], [Aj, "r", 23, 189, tr], [1, "r", 22, 189, 0], [er, "r", 21, 189, 0], [ik, "r", vj, 189, 0], [1, "r", 19, 189, Ko], [1, "r", Dj, 190, ko], [1, "r", bk, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, Mn], [ik, "r", 22, 191, Mn], [1, "r", 24, 191, 0], [Aj, "r", 23, 191, kq], [ce, "r", 25, 191, Mn], [1, "r", 25, 190, tr], [1, "r", 24, 190, 0], [1, "r", 23, 190, yk], [Fo, "r", 22, 190, jj], [1, "r", 21, 190, Mn], [dn, "r", Ye, 190, 0], [1, "r", 26, 190, 0], [dn, "r", 26, 191, ko], [1, "r", 24, 193, yk], [1, "r", 23, 193, yk], [1, "r", 22, 193, jj], [1, "r", Ye, 192, Mn], [1, "r", 21, 192, Ko], [1, "r", 22, 192, 0], [Br, "r", 23, 192, 0], [1, "r", 24, 192, 0], [dn, "r", 25, 192, 0], [1, "r", 53, 199, jj], [1, "r", 52, 200, 0], [1, "r", 54, 199, Fj], [1, "r", 55, 199, 0], [dn, "r", 55, 200, jj], [1, "r", 54, 200, tr], [dn, "r", 53, 200, 0], [1, "r", 51, 200, 0], [Fo, "r", 56, 200, 0], [dn, "r", 55, 201, tr], [dn, "r", 54, 201, Mn], [Fo, "r", 55, 202, 0], [1, "r", 54, 203, Fj], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [er, "r", 53, 202, ko], [V, "r", 52, 202, kq], [Br, "r", 53, 201, yk], [Aj, "r", 52, 201, kq], [ce, "r", 51, 201, 0], [Aj, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, Ko], [er, "r", 56, 201, Fj], [1, "r", 53, 203, yk], [ce, "r", 52, 203, kq], [1, "r", 51, 203, Fj], [Br, "r", 56, 202, 0], [1, "r", 55, 203, 0], [ce, "r", 53, 204, 0], [1, "r", 52, 204, 0], [Aj, "r", 55, 204, Mn], [1, "r", 56, 203, 0], [er, "r", 56, 244, jj], [Aj, "r", 54, 246, jj], [1, "r", 50, 248, 0], [1, "r", 48, 248, tr], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [Aj, "r", 44, 238, 0], [ik, "r", 43, 238, tr], [1, "r", 46, 238, Mn], [1, "r", 47, 238, 0], [dn, "r", 48, 238, 0], [1, "r", 49, 238, 0], [er, "r", 50, 238, jj], [ce, "r", 51, 238, kq], [Fo, "r", 52, 238, 0], [1, "r", 53, 238, yk], [V, "r", 54, 239, 0], [1, "r", 53, 240, 0], [V, "r", 53, 239, kq], [ce, "r", 52, 239, jj], [dn, "r", 51, 239, kq], [1, "r", 50, 239, ko], [1, "r", 49, 239, jj], [1, "r", 48, 239, 0], [ik, "r", 47, 239, ko], [1, "r", 46, 239, 0], [1, "r", 45, 239, jj], [Fo, "r", 44, 239, 0], [1, "r", 43, 239, Ko], [Fo, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, Ko], [1, "r", 43, 240, tr], [Aj, "r", 44, 240, Ko], [1, "r", 45, 240, 0], [Fo, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, tr], [1, "r", 50, 240, 0], [Fo, "r", 51, 240, tr], [dn, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, Ko], [1, "r", 56, 241, tr], [1, "r", 55, 241, tr], [er, "r", 54, 241, 0], [ik, "r", 53, 241, Fj], [Aj, "r", 52, 241, 0], [ik, "r", 51, 241, jj], [Br, "r", 49, 241, jj], [1, "r", 50, 241, 0], [dn, "r", 48, 241, Ko], [1, "r", 47, 241, 0], [Aj, "r", 46, 241, 0], [1, "r", 45, 241, jj], [ik, "r", 44, 241, 0], [ce, "r", 43, 241, kq], [1, "r", 42, 241, 0], [1, "r", 41, 241, Mn], [V, "r", 40, 242, 0], [ik, "r", 41, 242, 0], [1, "r", 42, 242, jj], [ce, "r", 43, 242, tr], [Aj, "r", 44, 242, 0], [1, "r", 45, 242, 0], [Aj, "r", 46, 242, 0], [Fo, "r", 47, 242, 0], [1, "r", 48, 242, jj], [1, "r", 49, 242, yk], [1, "r", 50, 242, 0], [ce, "r", 51, 242, jj], [1, "r", 52, 242, 0], [er, "r", 53, 242, 0], [Br, "r", 54, 242, 0], [ce, "r", 55, 242, Fj], [1, "r", 56, 242, 0], [Fo, "r", 56, 243, tr], [1, "r", 55, 243, Mn], [ik, "r", 54, 243, Ko], [1, "r", 53, 243, 0], [V, "r", 52, 243, ko], [V, "r", 51, 243, 0], [Fo, "r", 50, 243, Mn], [er, "r", 49, 243, jj], [1, "r", 48, 243, tr], [ik, "r", 47, 243, 0], [Fo, "r", 46, 243, ko], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, Fj], [1, "r", 41, 243, Mn], [1, "r", 40, 243, 0], [1, "r", 40, 244, tr], [ik, "r", 41, 244, 0], [1, "r", 43, 244, Fj], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [Fo, "r", 46, 244, kq], [ce, "r", 47, 244, 0], [1, "r", 48, 244, 0], [ce, "r", 49, 244, 0], [1, "r", 50, 244, Fj], [V, "r", 51, 244, 0], [1, "r", 52, 244, Fj], [1, "r", 53, 244, 0], [1, "r", 54, 244, yk], [1, "r", 55, 244, 0], [er, "r", 42, 244, 0], [1, "r", 40, 245, yk], [er, "r", 41, 245, tr], [1, "r", 42, 245, Fj], [1, "r", 43, 245, tr], [1, "r", 44, 245, 0], [1, "r", 45, 245, kq], [er, "r", 46, 245, kq], [1, "r", 47, 245, 0], [dn, "r", 48, 245, jj], [1, "r", 49, 245, 0], [Aj, "r", 50, 245, kq], [1, "r", 51, 245, Mn], [V, "r", 52, 246, 0], [1, "r", 52, 245, ko], [Fo, "r", 53, 245, Mn], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, jj], [V, "r", 51, 246, yk], [ik, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, tr], [1, "r", 45, 246, kq], [1, "r", 46, 246, Ko], [ik, "r", 44, 246, Ko], [1, "r", 43, 246, Mn], [1, "r", 42, 246, tr], [1, "r", 41, 246, yk], [Fo, "r", 42, 247, jj], [1, "r", 43, 247, Mn], [V, "r", 44, 247, 0], [1, "r", 45, 247, 0], [dn, "r", 46, 247, 0], [1, "r", 47, 247, Ko], [1, "r", 48, 247, yk], [1, "r", 50, 247, Ko], [1, "r", 51, 247, jj], [dn, "r", 52, 247, tr], [1, "r", 53, 247, jj], [1, "r", 54, 247, Mn], [Aj, "r", 49, 247, Ko], [er, "r", 49, 248, Mn], [Fo, "r", 47, 248, 0], [dn, "r", 46, 248, yk], [1, "r", 45, 248, jj], [Fo, "r", 51, 248, Ko], [1, "r", 55, 246, Aj], [1, "r", 55, 247, Br], [ce, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, er], [ik, "r", 93, 270, Br], [1, "r", 94, 270, 1], [1, "r", 95, 271, Br], [1, "r", 94, 271, 1], [1, "r", 93, 271, Aj], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [dn, "r", 92, 281, 1], [er, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, V], [dn, "r", 95, 275, ik], [1, "r", 95, 274, ce], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, Aj], [1, "r", 94, 273, Aj], [ce, "r", 94, 272, ik], [1, "r", 93, 272, 1], [V, "r", 93, 273, dn], [1, "r", 93, 274, 1], [dn, "r", 92, 273, 1], [1, "r", 92, 272, Aj], [ik, "r", 92, 270, Fo], [ce, "r", 92, 271, ce], [1, "r", 92, 269, Aj], [1, "r", 90, 269, er], [ce, "r", 91, 269, ik], [1, "r", 91, 271, 1], [Aj, "r", 91, 270, V], [1, "r", 95, 278, 1], [ik, "r", 95, 277, er], [V, "r", 95, 276, ik], [1, "r", 94, 276, er], [ce, "r", 94, 275, 1], [1, "r", 93, 275, 1], [Fo, "r", 92, 274, 1], [1, "r", 92, 275, ce], [ce, "r", 91, 275, 1], [ce, "r", 90, 275, Fo], [1, "r", 89, 274, 1], [1, "r", 90, 274, V], [1, "r", 89, 275, Br], [ik, "r", 88, 274, ik], [V, "r", 88, 273, 1], [1, "r", 86, 272, ik], [1, "r", 85, 271, 1], [1, "r", 86, 271, ce], [Fo, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, ce], [ik, "r", 55, 249, 1], [1, "r", 55, 250, 1], [V, "r", 56, 250, 1], [1, "r", 57, 250, er], [ik, "r", 57, 249, 1], [dn, "r", 59, 250, ik], [ce, "r", 58, 250, 1], [1, "r", 60, 250, 1], [Aj, "r", 61, 251, 1], [dn, "r", 60, 251, dn], [Aj, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, Fo], [V, "r", 58, 251, Br], [ce, "r", 57, 251, dn], [1, "r", 56, 251, 1], [Fo, "r", 58, 252, 1], [ik, "r", 57, 252, 1], [Fo, "r", 57, 253, 1], [1, "r", 58, 253, Aj], [1, "r", 58, 254, 1], [ce, "r", 59, Sn, 1], [V, "r", 58, Iq, 1], [1, "r", 57, 254, Fo], [ik, "r", 56, 252, Br], [dn, "r", 55, 251, er], [Br, "r", 60, Gi, Aj], [1, "r", 61, 255, er], [ce, "r", 61, 256, er], [dn, "r", 60, ak, 1], [dn, "r", 62, 256, 1], [1, "r", 62, 257, V], [ik, "r", 61, 257, er], [1, "r", 64, 253, 1], [1, "r", 64, 254, V], [1, "r", 65, 254, Br], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [er, "r", 65, 253, dn], [Aj, "r", 66, 254, er], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [dn, "r", 65, 256, V], [ik, "r", 65, 257, Fo], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [ce, "r", 62, 258, Fo], [ce, "r", 63, 258, V], [1, "r", 64, 258, 1], [V, "r", 66, Iq, 1], [er, "r", 66, 256, er], [Br, "r", 66, 257, ik], [ik, "r", 66, 258, 1], [1, "r", 65, 258, dn], [ik, "r", 67, 258, Fo], [1, "r", 67, 257, 1], [1, "r", 67, 259, er], [1, "r", 66, 259, ce], [1, "r", 65, 259, er], [dn, "r", 56, 246, Fo], [dn, "r", 56, 245, dn], [1, "r", 68, 258, V], [Br, "r", 68, 259, 1], [er, "r", 68, 260, 1], [1, "r", 69, 260, 1], [Br, "r", 69, 261, 1], [1, "r", 70, 261, V], [er, "r", 71, 261, Fo], [V, "r", 67, 260, 1], [1, "r", 89, 269, dn], [1, "r", 89, 268, ik], [Aj, "r", 90, 268, ce], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, Fo], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [ik, "r", 79, 266, Fo], [1, "r", 78, 265, 1], [dn, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, ce], [ce, "r", 75, 263, 1], [Fo, "r", 74, 263, Br], [V, "r", 74, 262, 1], [V, "r", 72, 262, 1], [ik, "r", 73, 262, 1], [1, "r", 71, 262, dn], [1, "r", 85, 270, V], [ce, "r", 84, 270, 1], [Aj, "r", 84, 269, er], [ce, "r", 83, 269, ik], [1, "r", 82, 269, Br], [ik, "r", 81, 269, 1], [dn, "r", 81, 268, V], [1, "r", 82, 268, Fo], [ce, "r", 83, 268, ce], [1, "r", 80, 268, er], [1, "r", 80, 267, Aj], [1, "r", 79, 267, Aj], [V, "r", 78, 266, 1], [er, "r", 76, 265, 1], [1, "r", 75, 262, ik], [er, "r", 90, 280, ik], [1, "r", 89, 280, dn], [Fo, "r", 89, 279, ce], [Aj, "r", 88, 279, ce], [Aj, "r", 88, 278, 1], [1, "r", 87, 277, Fo], [Fo, "r", 86, 276, 1], [1, "r", 86, 275, dn], [dn, "r", 86, 274, 1], [1, "r", 86, 273, 1], [Fo, "r", 85, 273, dn], [1, "r", 85, 272, Aj], [V, "r", 85, 274, 1], [V, "r", 86, 277, er], [1, "r", 87, 278, 1], [Fo, "r", 84, 271, Fo], [V, "r", 83, 270, Br], [ik, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, dn], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [ce, "r", 92, 282, ce], [Fo, "r", 88, 280, V], [ce, "r", 87, 279, 1], [1, "r", 85, 275, V], [Br, "r", 84, 273, 1], [dn, "r", 84, 272, Br], [ik, "r", 83, 271, 1], [1, "r", 82, 270, ik], [1, "r", 84, 267, Mn], [1, "r", 85, 267, 0], [Br, "r", 76, 262, Ko], [1, "r", 77, 262, 0], [Br, "r", 88, 268, Fj], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [ik, "r", 80, 262, 0], [Aj, "r", 80, 263, Fj], [1, "r", 81, 263, kq], [1, "r", 82, 263, kq], [1, "r", 83, 263, 0], [Fo, "r", 84, 263, 0], [ik, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, tr], [Fo, "r", 90, 262, Mn], [1, "r", 87, 262, 0], [er, "r", 86, 262, kq], [Fo, "r", 86, 263, ko], [1, "r", 87, 263, 0], [er, "r", 91, 262, 0], [dn, "r", 95, 262, kq], [1, "r", 94, 262, Fj], [1, "r", 86, 267, 0], [Fo, "r", 87, 267, yk], [1, "r", 87, 268, kq], [V, "r", 86, 268, 0], [er, "r", 74, 189, 0], [1, "r", 75, 189, tr], [ce, "r", 76, 189, tr], [ce, "r", 77, 189, 0], [1, "r", 78, 190, Fj], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [V, "r", 76, 190, 0], [1, "r", 74, 190, yk], [Br, "r", 73, 190, 0], [1, "r", 78, 191, ko], [ce, "r", 76, 191, 0], [1, "r", 77, 191, jj], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [Br, "r", 78, 192, 0], [dn, "r", 77, 192, yk], [ik, "r", 76, 192, Fj], [1, "r", 75, 192, Ko], [er, "r", 74, 192, Fj], [Aj, "r", 73, 191, kq], [Br, "f", 1, 96, 22, 1], [ik, "s", Aj, 97, 22, dn], [V, "f", dn, 98, 22, 1], [1, "s", Ko, 99, 22, Fo], [1, "s", 1, 100, 21, dn], [1, "s", 1, 96, 49, 1], [ik, "s", ik, me, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", tr, 97, 49, Br], [1, "f", 1, 98, 49, Br], [Aj, "r", 70, 218, 0], [Fo, "r", 71, 218, kq], [V, "r", 72, 218, 0], [ce, "r", 73, 218, 0], [1, "r", 74, 219, Mn], [1, "r", 73, 219, jj], [1, "r", 72, 219, Fj], [V, "r", 71, 219, 0], [1, "r", 70, 219, 0], [er, "r", 73, 220, kq], [Br, "r", 72, 220, Fj], [er, "r", 71, 220, tr], [1, "r", 72, 221, jj], [1, "r", 71, 221, 0], [V, "r", 70, 221, 0], [dn, "r", 69, 221, 0], [1, "r", 68, 221, yk], [er, "r", 70, 220, 0], [1, "r", 69, 220, Ko], [Fo, "r", 69, 219, 0], [1, "r", 68, 220, tr], [Fo, "r", 73, 221, 0], [1, "r", 73, 222, tr], [1, "r", 71, 222, 0], [1, "r", 72, 222, ko], [1, "r", 74, 221, kq], [1, "r", 74, 220, Mn], [Fo, "r", 75, 220, tr], [ik, "r", 75, 221, 0], [ik, "r", 70, 222, 0], [1, "r", 69, 222, 0], [Fo, "r", 29, 217, tr], [1, "r", 30, 217, 0], [Aj, "r", 31, 217, kq], [1, "r", 32, 217, Mn], [V, "r", 31, 219, 0], [dn, "r", 30, 219, 0], [ce, "r", 29, 219, Mn], [1, "r", 27, 219, ko], [Aj, "r", 25, 219, Ko], [er, "r", 26, 219, Ko], [1, "r", 28, 219, kq], [er, "r", 26, 218, Mn], [Br, "r", 27, 218, 0], [ce, "r", 28, 218, kq], [1, "r", 29, 218, tr], [1, "r", 30, 218, kq], [1, "r", 28, 217, 0], [er, "r", 26, 217, jj], [1, "r", 27, 217, 0], [Br, "r", 28, 216, Ko], [ik, "r", 29, 216, kq], [1, "r", 30, 216, jj], [1, "r", 31, 218, 0], [er, "r", 32, 218, 0], [1, "r", 31, 216, 0], [er, "r", 31, 221, 0], [V, "r", 31, 220, Ko], [dn, "r", 30, 220, yk], [Br, "r", 29, 220, jj], [1, "r", 28, 220, jj], [V, "r", 27, 220, Mn], [1, "r", 26, 220, 0], [er, "r", 25, 218, Ko], [1, "r", 27, 221, Ko], [1, "r", 28, 221, 0], [Br, "r", 29, 221, 0], [Fo, "r", 30, 221, kq], [ik, "r", 32, 220, ko], [1, "r", 32, 219, 0], [dn, "r", 33, 218, 0], [1, "r", 33, 219, 0], [V, "r", 75, 238, 0], [1, "r", 76, 238, Fj], [Fo, "r", 77, 239, kq], [1, "r", 76, 239, Ko], [Fo, "r", 75, 239, jj], [Br, "r", 74, 239, 0], [ik, "r", 76, 240, 0], [1, "r", 77, 240, Mn], [ik, "r", 78, 240, jj], [V, "r", 77, 241, Ko], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [er, "r", 75, 240, yk], [1, "r", 74, 240, 0], [1, "r", 78, 239, Ko], [Br, "r", 77, 238, 0], [ce, "r", 18, 253, Fj], [1, "r", 19, 252, 0], [1, "r", _j, 252, 0], [1, "r", 21, 253, Fj], [er, "r", 23, 254, Ko], [1, "r", da, 254, Ko], [Fo, "r", 19, 254, ko], [1, "r", 22, 254, 0], [Aj, "r", N, 254, 0], [1, "r", 19, 253, Ko], [V, "r", 20, 253, Ko], [ce, "r", 21, 254, 0], [Aj, "r", 22, 253, 0], [dn, "r", 21, w, Ko], [ce, "r", 20, 255, Ko], [1, "r", 19, 255, 0], [1, "r", 18, 255, tr], [1, "r", Vj, w, yk], [1, "r", F, 254, 0], [1, "r", 22, 255, Mn], [1, "r", 19, 256, yk], [ce, "r", Vq, Ue, tr], [1, "r", 21, 256, Ko], [Br, "r", 39, 270, ko], [Br, "r", 40, 270, kq], [1, "r", 41, 270, jj], [1, "r", 43, 270, ko], [1, "r", 44, 270, ko], [Br, "r", 46, 270, 0], [1, "r", 42, 270, Ko], [1, "r", 45, 270, 0], [er, "r", 44, 269, 0], [ik, "r", 43, 269, kq], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [Aj, "r", 41, 269, 0], [Aj, "r", 45, 271, 0], [1, "r", 44, 271, 0], [Fo, "r", 43, 271, jj], [V, "r", 42, 271, Fj], [er, "r", 41, 271, 0], [er, "r", 40, 271, yk], [1, "r", 39, 271, ko], [1, "r", 46, 271, Mn], [ik, "r", 45, 272, Ko], [1, "r", 44, 272, 0], [V, "r", 43, 272, Fj], [1, "r", 42, 272, 0], [1, "r", qi, 284, ko], [1, "r", aq, 284, 0], [ik, "r", 21, 285, ko], [1, "r", 22, 285, 0], [Aj, "r", 23, 286, 0], [1, "r", 22, 288, kq], [1, "r", vj, 288, kq], [1, "r", on, 288, ko], [ik, "r", 17, 287, Fj], [1, "r", 16, 287, Ko], [1, "r", 16, 286, 0], [Br, "r", 17, 286, yk], [Fo, "r", 18, 286, 0], [1, "r", Rq, 286, 0], [1, "r", 20, 286, 0], [er, "r", 21, 286, tr], [1, "r", 22, 286, kq], [1, "r", _j, 285, 0], [1, "r", 19, 285, 0], [1, "r", Ta, 285, 0], [ik, "r", 17, 285, yk], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, yk], [Aj, "r", 21, 287, yk], [ik, "r", 22, 287, Fj], [Fo, "r", 23, 287, jj], [Br, "r", 21, 288, 0], [ce, "r", Rq, 288, ko], [V, "r", 17, 288, 0], [ce, "r", 19, 289, 0], [1, "r", 21, 289, ko], [ik, "r", 22, 289, 0], [Br, "r", 20, 289, 0], [V, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, tr], [Br, "r", 23, 285, yk], [1, "r", 66, 286, kq], [Br, "r", 64, 287, kq], [1, "r", 63, 287, Mn], [Fo, "r", 60, 287, yk], [1, "r", 59, 285, 0], [Aj, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [dn, "r", 64, 283, 0], [Aj, "r", 63, 283, tr], [1, "r", 62, 283, ko], [ce, "r", 61, 283, 0], [er, "r", 60, 283, Fj], [ce, "r", 59, 284, kq], [V, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, Ko], [Fo, "r", 61, 287, 0], [1, "r", 62, 287, jj], [Fo, "r", 61, 286, tr], [1, "r", 62, 286, 0], [Br, "r", 63, 286, tr], [ce, "r", 64, 286, Ko], [1, "r", 65, 286, 0], [1, "r", 67, 285, yk], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [dn, "r", 64, 285, 0], [Aj, "r", 63, 285, jj], [1, "r", 62, 285, Ko], [V, "r", 61, 285, Ko], [1, "r", 60, 285, 0], [1, "r", 60, 284, Ko], [Br, "r", 61, 284, 0], [1, "r", 62, 284, 0], [dn, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, Fj], [er, "r", 66, 284, 0], [1, "r", 65, 287, Fj], [1, "r", 67, 286, 0], [1, "p", 0, eq, 189, 1], [1, "p", yk, 32, 184, 1], [Fo, "p", 0, 47, 191, Fo], [ik, "p", Mn, 64, 184, ik], [1, "p", 0, 84, 192, ce], [dn, "p", 0, 78, 207, 1], [Aj, "p", Fj, 58, 216, ce], [Br, "p", yk, 41, 211, Br], [Br, "p", Fj, 18, 211, er], [er, "p", 0, ve, 230, er], [dn, "p", 0, 29, 237, ce], [dn, "p", jj, 50, 230, dn], [1, "p", 0, 78, 241, dn], [1, "p", 0, 74, ak, er], [Fo, "p", yk, 68, 266, 1], [1, "p", Ko, 48, 259, 1], [Aj, "p", 0, 31, 263, 1], [1, "p", tr, 18, 274, 1], [1, "p", ko, 33, 283, 1], [1, "p", ko, 66, 287, 1], [Fo, "p", 0, 82, 291, 1], [1, "p", 0, $j, 295, er], [ce, "p", Mn, 45, 294, 1], [1, "p", 0, 18, 252, dn], [1, "p", Mn, 79, 227, er], [1, "p", 0, 32, 200, Aj], [1, "p", jj, 64, 200, 1], [ce, "s", 0, 21, 193, 1], [1, "s", 1, $o, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, Wa, 181, jj], [1, "b", 2, Tq, 190, ko], [Fo, "b", 2, 29, 193, 0], [Br, "t", fa, 16, 182, 0], [1, "t", Kk, Ui, 195, 0], [Aj, "t", 4, 16, 183, Fj], [1, "t", Ca, 10, 184, kq], [er, "t", 5, 23, 182, 0], [er, "t", 4, 30, 187, 0], [Aj, "t", Br, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, ce], [1, "t", vo, 33, 183, kq], [Br, "b", 1, 36, 189, tr], [Fo, "t", 2, 35, 190, Ko], [1, "b", 3, 19, 200, tr], [1, "s", 0, 28, 194, ik], [Fo, "s", 1, 32, 196, V], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, Fo], [Br, "s", Ok, Ke, 192, dn], [1, "s", Le, 12, 183, 1], [ce, "s", ce, 15, 199, er], [1, "b", kq, Mq, 202, Mn], [1, "t", 2, eq, 203, 0], [1, "t", 4, 20, 200, 0], [Aj, "t", 4, 12, 194, 0], [Fo, "t", Bk, Ne, 205, kq], [1, "t", Bk, 29, 200, 0], [1, "t", lk, 28, 201, 0], [Br, "s", pa, 25, 199, 1], [Br, "s", 1, 22, 204, 1], [V, "g", 2, 25, 205, 1], [Fo, "b", 1, 27, 216, 0], [er, "s", Fo, 25, 217, 1], [er, "s", Fo, 33, 217, 1], [Fo, "s", pa, 35, 215, er], [dn, "s", tr, 32, 221, Aj], [1, "t", C, 31, 222, 0], [1, "t", Yn, 26, 221, Mn], [1, "b", 3, 27, 222, 0], [1, "b", jj, hr, 217, 0], [Fo, "t", lk, 18, 216, 0], [dn, "t", 4, 13, 215, yk], [1, "t", 5, 30, 213, tr], [1, "t", 5, 24, 208, yk], [V, "s", 1, pk, 216, 1], [er, "s", 2, Ro, 210, 1], [1, "s", Le, 34, 223, 1], [ik, "b", kn, 36, 218, Fj], [ce, "t", f, 40, 206, Mn], [1, "t", U, 35, 203, 0], [Fo, "t", Ik, 39, 206, jj], [1, "b", dn, 34, 204, 0], [V, "s", 1, 33, 206, 1], [Br, "s", 1, 42, 203, ik], [Aj, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, yk], [1, "t", 4, 39, 197, tr], [1, "t", 5, 44, 187, tr], [1, "b", 1, 46, 181, 0], [Aj, "t", Xn, 47, 182, Ko], [Aj, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [Br, "t", 4, 55, 184, ko], [1, "t", 5, 62, 195, 0], [1, "s", ik, 51, 185, V], [1, "s", pa, 62, 180, 1], [1, "s", Xn, 61, 188, 1], [Fo, "s", 1, 61, 189, dn], [dn, "s", Le, 48, 195, dn], [ce, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [dn, "t", ta, 56, 204, Mn], [1, "t", gn, 57, 204, jj], [1, "t", qo, 51, 204, Ko], [ce, "s", 1, 52, 205, V], [V, "s", kn, 57, 200, 1], [er, "s", 1, 56, 199, 1], [1, "b", jj, 55, 192, 0], [Fo, "t", 3, 56, 193, 0], [ik, "t", f, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, yk], [1, "t", 2, 73, 192, tr], [1, "t", kr, 72, 191, 0], [1, "t", 5, 78, 193, jj], [1, "b", kq, 79, 192, 0], [V, "s", Le, 79, 190, 1], [1, "s", Br, 74, 194, 1], [dn, "s", V, 72, 187, Aj], [V, "s", 0, 74, 183, ce], [1, "s", 1, 75, 183, 1], [Fo, "t", Ok, 69, 181, 0], [er, "t", f, 70, 182, Mn], [1, "t", 5, 69, 180, Ko], [1, "b", 1, 65, 189, 0], [1, "b", C, 66, 189, ko], [er, "t", lk, 64, 188, 0], [Aj, "t", mj, 67, 192, 0], [Fo, "b", 2, 85, 183, 0], [Br, "t", 1, 84, 184, 0], [er, "t", 4, 81, 180, kq], [Fo, "t", Rj, 89, 180, tr], [dn, "t", 0, 90, 188, Mn], [1, "t", sn, 89, 190, 0], [Aj, "s", ce, 87, 187, ce], [er, "s", Wq, 87, 197, dn], [dn, "b", Fo, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", f, 87, 207, 0], [V, "s", kn, 79, 202, ik], [ik, "s", Aj, 80, 203, 1], [dn, "t", 0, 71, 200, 0], [er, "b", 2, 72, 201, kq], [1, "t", 2, 65, 205, Mn], [1, "t", 1, 66, 206, jj], [1, "t", 4, 63, 209, kq], [Br, "t", 5, 73, 203, yk], [er, "s", ko, 70, 207, 1], [ce, "s", 1, 71, 206, V], [1, "s", 2, 68, 199, ce], [1, "s", 1, 64, 213, er], [dn, "t", kq, 85, 213, kq], [ik, "b", 2, 84, 212, Fj], [1, "t", fa, 77, 209, Fj], [1, "t", Ai, 83, 216, Fj], [Aj, "t", 4, 73, 209, 0], [V, "b", 0, 86, 222, kq], [1, "b", vo, 87, 221, Mn], [1, "s", ce, 80, 214, 1], [Fo, "s", 2, 87, 216, ce], [1, "s", 2, 84, 224, dn], [1, "s", 1, 77, 227, 1], [er, "t", 1, 74, 222, 0], [1, "b", ce, 69, 218, 0], [1, "b", 2, 75, 219, Mn], [1, "s", 2, 74, 218, 1], [1, "s", er, 69, 223, 1], [Br, "s", Fo, 77, 221, 1], [1, "b", V, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, kq], [Aj, "t", Xn, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", U, 87, 236, tr], [Br, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, kq], [Fo, "s", Mn, 73, 242, 1], [1, "s", 0, 81, 238, Aj], [Aj, "s", 1, 82, 237, 1], [1, "s", Le, 72, 237, 1], [1, "s", ij, 78, 242, 1], [1, "b", dn, 66, 230, jj], [1, "b", Ok, 62, 229, 0], [1, "t", qa, 67, 231, 0], [1, "t", Yn, 62, 228, Ko], [1, "t", 5, 64, 233, 0], [Br, "t", kn, 65, 234, Mn], [Fo, "t", C, 51, 220, 0], [Aj, "t", Aj, 50, 218, Ko], [1, "b", 1, 45, 223, 0], [1, "b", C, 46, 224, jj], [1, "t", 4, 49, 218, 0], [ce, "t", Yn, 47, 225, jj], [dn, "s", 1, 50, 215, Br], [1, "s", 2, 51, 213, ce], [1, "s", Xn, 42, 227, 1], [Fo, "s", V, 44, 227, 1], [1, "s", 1, 60, 230, Aj], [1, "s", 2, 59, 231, 1], [ik, "b", V, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, yk], [1, "t", 0, 75, 251, kq], [Aj, "b", jj, 83, 246, ko], [Br, "t", ta, 82, 247, Fj], [1, "t", 4, 81, 259, 0], [1, "t", Yn, 69, 249, jj], [dn, "t", Wn, 87, 246, tr], [ik, "t", 5, 75, 252, 0], [1, "s", ce, 79, 257, V], [Aj, "s", 2, 78, 249, 1], [Aj, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, ik], [ik, "s", 2, 87, 269, Br], [Fo, "s", Ko, 84, 268, 1], [1, "s", 2, 76, 267, 1], [ce, "s", ce, 66, 261, 1], [ce, "s", ik, 87, 274, ik], [1, "s", dn, 76, 263, Br], [V, "s", ce, 59, 251, 1], [Br, "s", 0, 59, 252, dn], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [ik, "t", 2, 79, 271, 0], [Br, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [er, "b", 1, 71, 264, tr], [dn, "b", Br, 88, 269, yk], [1, "t", Wn, 84, 264, ko], [er, "t", Ca, 79, 261, tr], [1, "t", Rj, 72, 265, 0], [1, "t", Cj, 77, 270, 0], [1, "t", tr, 87, 261, ko], [Br, "t", C, 86, 260, ko], [ik, "t", gn, 84, 255, yk], [V, "t", 4, 68, Sn, Ko], [1, "t", Br, 67, 254, 0], [Fo, "t", Xn, 65, 262, 0], [Aj, "t", 1, 57, 260, ko], [1, "t", Xn, 58, 259, kq], [ce, "b", Fo, 63, 256, 0], [1, "b", er, 52, 248, tr], [Fo, "t", 2, 53, 248, tr], [Aj, "s", er, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", kn, 52, 252, er], [1, "s", Xn, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", Xn, 58, 244, 0], [1, "b", ik, 53, 237, 0], [V, "t", 2, 54, 237, 0], [1, "t", Ok, 41, 238, jj], [1, "t", 1, 42, 237, tr], [1, "t", Ca, 57, 235, Ko], [1, "t", Ca, 60, 246, 0], [1, "t", Ca, 50, 252, ko], [ce, "t", 1, 42, 248, 0], [1, "b", Aj, 43, 249, Mn], [V, "b", lk, 37, 243, Mn], [1, "s", 0, 50, 236, 1], [ce, "s", Xn, 39, 247, er], [1, "s", Wq, 51, 235, 1], [ik, "s", 2, 60, 243, V], [Fo, "s", Le, 36, 240, 1], [1, "s", pa, 43, 254, 1], [1, "s", dn, 42, 254, 1], [Aj, "t", 1, 38, 233, 0], [Fo, "t", kn, 35, 235, jj], [1, "t", Ai, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", kr, 43, 235, Fj], [er, "t", U, 45, 249, 0], [ik, "t", 5, 41, 253, 0], [1, "b", 1, fq, 227, 0], [1, "b", 1, Zn, 240, 0], [ce, "t", Mo, 21, 227, 0], [1, "t", 3, 27, 234, 0], [ik, "t", 3, 15, 241, 0], [1, "t", 3, _o, 229, kq], [Br, "t", qa, sj, 224, 0], [ik, "t", 4, la, 231, jj], [1, "t", mj, 22, 238, 0], [1, "t", gn, mr, 239, ko], [ik, "t", 1, 22, 243, Mn], [er, "b", Wq, 23, 242, Ko], [dn, "s", 1, 23, 238, dn], [1, "s", 1, 22, 228, Br], [Aj, "s", Ok, 24, 228, 1], [1, "s", kn, 21, 236, 1], [ik, "s", kq, Y, 228, ce], [1, "s", 0, an, 242, 1], [V, "s", 1, m, 244, 1], [1, "s", 1, 34, 236, ce], [1, "t", Aj, 26, 249, 0], [Br, "t", 1, 22, 256, tr], [1, "t", 2, 23, 255, 0], [Br, "b", 1, 17, ak, tr], [Br, "b", 2, $o, 256, 0], [Br, "s", 0, 21, 252, 1], [Aj, "s", 2, 20, 250, Br], [ik, "s", Ok, 23, 259, 1], [1, "s", 1, j, 257, 1], [1, "t", 1, 31, 254, Fj], [1, "t", C, 32, 254, 0], [1, "t", kr, 28, 254, 0], [1, "t", qa, 34, 258, ko], [1, "t", 0, 29, 260, 0], [1, "b", Xn, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", Xn, 42, 263, tr], [1, "t", bn, 46, 264, 0], [1, "b", 1, 39, 265, yk], [dn, "b", 1, 58, 267, 0], [Br, "t", 2, 57, 268, ko], [Br, "t", 4, 62, 270, tr], [1, "t", 5, 52, 273, 0], [1, "s", ce, 52, 269, Br], [ce, "s", 1, 41, 272, 1], [ce, "s", 2, 41, 274, er], [Fo, "t", 2, 42, 268, Ko], [Fo, "t", 0, 43, 268, 0], [Fo, "b", Aj, 46, 272, Mn], [V, "b", 1, 14, 265, 0], [1, "t", 2, nk, 266, 0], [1, "t", Yn, qi, 264, 0], [1, "t", 4, 29, 263, Ko], [ce, "t", qa, y, 269, jj], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, Mn], [1, "t", 2, fq, 279, 0], [1, "t", Mn, nq, 278, Fj], [ik, "t", vo, j, 278, Mn], [ik, "b", 0, 21, 284, Mn], [1, "b", 0, on, 289, 0], [1, "t", kn, aq, 283, 0], [dn, "t", 2, Dj, 290, yk], [ce, "t", qo, Yo, 283, Mn], [Aj, "t", gn, fq, 290, Ko], [ce, "s", 1, 16, 285, er], [ce, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, ik], [1, "s", C, 16, 278, 1], [Aj, "s", 1, 21, 268, er], [1, "s", Wq, 19, 268, 1], [1, "t", 0, _o, 294, ko], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", lk, 10, 299, yk], [Br, "t", 4, la, 287, ko], [er, "t", 4, ok, 298, yk], [1, "t", 1, 27, 294, 0], [dn, "b", kn, 26, 295, Fj], [1, "t", 3, 33, 297, 0], [Fo, "b", 1, 48, 278, tr], [er, "b", ko, 46, 280, kq], [1, "b", Le, 50, 280, 0], [1, "t", 0, 44, 282, ko], [1, "b", dn, 49, 283, 0], [1, "b", tr, 51, 278, tr], [1, "b", ta, 50, 279, 0], [Aj, "b", Ea, 44, 284, yk], [1, "b", 0, 47, 284, ko], [Fo, "b", 2, 42, 283, 0], [1, "t", qo, 51, 277, 0], [1, "b", Fo, 44, 286, Mn], [er, "b", 2, 46, 286, ko], [1, "b", ik, 42, 285, Fj], [Br, "b", Ik, 41, 286, yk], [1, "t", 5, 42, 287, kq], [Aj, "b", 1, 42, 278, Ko], [1, "b", 2, 43, 279, 0], [ce, "b", yk, 40, 280, 0], [1, "t", 4, 39, 283, 0], [Br, "t", 4, 39, 279, 0], [ik, "t", U, 43, 277, 0], [ik, "t", Ca, 47, 287, 0], [1, "t", 4, 46, 277, yk], [1, "t", bn, 45, 290, 0], [1, "t", 4, 36, 285, yk], [Br, "t", B, 35, 284, 0], [1, "t", _i, 36, 272, Ko], [Aj, "t", 4, 35, 271, 0], [Fo, "t", 1, 29, 279, jj], [1, "b", ce, 32, 277, yk], [Aj, "t", 3, 31, 278, Fj], [dn, "b", pa, 28, 280, 0], [Br, "t", gn, 29, 286, 0], [1, "t", Oq, 28, 275, Mn], [1, "t", Kk, 37, 292, jj], [1, "b", Br, 36, 291, yk], [1, "b", 0, 34, 298, 0], [Aj, "t", 4, 31, 292, 0], [1, "t", Ai, 46, 295, 0], [1, "t", f, 59, 287, 0], [Br, "b", Fo, 58, 286, 0], [1, "s", ik, 68, 284, er], [Br, "s", Wq, 70, 286, 1], [V, "s", 0, 67, 284, 1], [1, "t", _i, 66, 283, 0], [Aj, "t", er, 65, 282, Mn], [1, "b", V, 64, 288, 0], [1, "t", 3, 60, 293, tr], [V, "t", ce, 61, 294, 0], [1, "b", Aj, 76, 294, yk], [1, "t", Rj, 75, 295, jj], [1, "t", Bk, 56, 293, yk], [V, "t", Bk, 59, 281, tr], [Fo, "t", Wn, 67, 291, 0], [1, "b", 0, 88, 293, 0], [dn, "t", 2, 89, 292, 0], [V, "t", Xn, 85, 286, kq], [dn, "t", 4, 88, 289, 0], [1, "t", gn, 79, 287, Ko], [er, "b", 1, 84, 285, Fj], [1, "t", Ea, 75, 284, Mn], [1, "b", 0, 75, 278, Ko], [1, "t", 3, 74, 277, kq], [Br, "t", 4, 81, 276, Ko], [1, "t", 2, 65, 276, Fj], [er, "b", Aj, 66, 275, kq], [Fo, "g", 0, 45, 261, ik], [Fo, "g", 1, 39, 258, Fo], [1, "g", Ko, 35, 250, 1], [1, "g", pa, 22, 247, 1], [1, "g", 2, 27, 227, V], [1, "g", kn, 63, 218, 1], [V, "g", V, 56, 224, 1], [ce, "g", yk, 46, 231, V], [ce, "g", 1, 65, 240, er], [1, "g", Xn, 67, 238, ce], [V, "g", C, 79, 232, ce], [V, "g", pa, 72, 253, V], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", Wq, 58, 274, dn], [ik, "de", ij, 14, 182, 0], [er, "de", kn, 24, 182, 0], [1, "de", 0, Ro, 185, yk], [1, "de", 0, Un, 194, 0], [V, "de", 1, 25, 196, kq], [Fo, "de", fa, 31, 183, kq], [Aj, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, tr], [V, "de", dn, 38, 191, tr], [1, "de", 0, 56, 181, Fj], [V, "de", er, 68, 182, 0], [1, "de", Le, 80, 181, Fj], [dn, "de", 3, 86, 187, 0], [V, "de", Fj, 84, 193, tr], [er, "de", 1, 82, 201, 0], [V, "de", Ok, 64, 191, ko], [1, "de", Le, 72, 200, 0], [1, "de", _i, 64, 201, 0], [ce, "de", 2, 76, 209, 0], [V, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", kq, 57, 208, 0], [Br, "de", kq, 41, 203, ko], [1, "de", 1, Nk, 206, ko], [1, "de", 2, 25, 209, Fj], [Br, "de", ta, 16, 218, 0], [ce, "de", 3, Pj, 227, Fj], [Br, "de", 0, 22, 229, 0], [1, "de", Aj, 15, 239, tr], [1, "de", Xn, 24, 238, ko], [1, "de", 3, 22, 246, yk], [V, "de", 3, Ke, 253, jj], [1, "de", 1, Ta, 258, Mn], [1, "de", 1, 28, 261, 0], [V, "de", 1, 14, 267, Ko], [1, "de", 0, 24, 268, tr], [Aj, "de", yk, 15, 278, 0], [1, "de", kn, 21, 279, yk], [1, "de", Xn, 30, 272, Ko], [1, "de", pa, 29, 281, yk], [dn, "de", 2, Ne, 284, ko], [Br, "de", 3, 12, 291, Fj], [1, "de", 3, 30, 287, 0], [1, "de", Ik, 27, 293, Mn], [1, "de", kq, 25, 296, 0], [1, "de", ko, 11, 298, 0], [Fo, "de", tr, S, 286, 0], [1, "de", C, 36, 299, Mn], [V, "de", 2, 37, 280, Fj], [Aj, "de", 3, 38, 291, 0], [1, "de", V, 48, 287, yk], [ce, "de", 1, 46, 277, Mn], [ce, "de", V, 53, 278, Mn], [1, "de", ta, 48, 295, 0], [1, "de", Mn, 57, 294, 0], [1, "de", Fo, 65, 290, 0], [Aj, "de", Br, 84, 292, 0], [ik, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, Mn], [er, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [Aj, "de", 2, 71, 267, 0], [ik, "de", pa, 65, 261, 0], [1, "de", 2, 47, 264, jj], [1, "de", 3, 47, 258, Fj], [1, "de", 3, 53, 251, yk], [dn, "de", Wq, 40, 253, ko], [ce, "de", jj, 35, 244, ko], [1, "de", 0, 37, 233, jj], [Fo, "de", Ea, 44, 226, 0], [Br, "de", 2, 37, 219, 0], [1, "de", C, 54, 234, 0], [V, "de", 1, 66, 234, tr], [er, "de", pa, 65, 241, 0], [1, "de", 0, 68, 249, Mn], [Br, "de", 3, 78, 257, yk], [1, "de", ij, 86, 253, 0], [1, "de", 2, 83, 245, 0], [dn, "de", 1, 82, 238, Fj], [1, "de", 3, 76, 235, Ko], [1, "de", Le, 86, 232, jj], [1, "de", 0, 86, 224, Fj], [1, "de", Le, 76, 226, 0], [er, "de", C, 61, 228, 0], [dn, "de", pa, 58, 217, tr], [Br, "de", Ko, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", vj, Vj, 180, Mn], [dn, "de", 22, Tq, 181, 0], [er, "de", bk, 30, 184, tr], [dn, "de", 19, 27, 187, 0], [Br, "de", 19, 30, 195, 0], [dn, "de", 19, no, 192, Fj], [1, "de", 19, 44, 182, jj], [dn, "de", 19, 49, 182, 0], [1, "de", An, 54, 182, 0], [dn, "de", qi, 59, 183, kq], [dn, "de", qi, 56, 186, tr], [1, "de", ya, 46, 188, 0], [Fo, "de", 19, 58, 193, Mn], [ce, "de", nq, 67, 187, Ko], [ik, "de", ya, 65, 192, tr], [Fo, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [er, "de", 19, 80, 194, 0], [1, "de", ya, 72, 193, 0], [1, "de", Yo, 82, 182, Mn], [Aj, "de", Yo, 88, 185, yk], [er, "de", 19, 87, 189, 0], [1, "de", ya, 86, 197, ko], [er, "de", qi, 85, 203, kq], [1, "de", k, 74, 200, Fj], [1, "de", 19, 70, 202, 0], [1, "de", An, 83, 199, 0], [1, "de", k, 86, 208, kq], [1, "de", Yk, 84, 214, Ko], [1, "de", ya, 83, 211, 0], [Br, "de", 19, 84, 217, kq], [V, "de", 19, 77, 210, tr], [1, "de", An, 71, 210, Fj], [Aj, "de", nq, 73, 213, 0], [ce, "de", bk, 66, 207, Fj], [Aj, "de", 19, 66, 204, tr], [1, "de", Yo, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, Fj], [dn, "de", An, 49, 199, Mn], [1, "de", 19, 50, 205, yk], [V, "de", 19, 40, 197, Ko], [Aj, "de", qi, 38, 198, 0], [Br, "de", k, 40, 208, Mn], [Br, "de", ya, 36, 204, 0], [Fo, "de", Yo, 33, 204, 0], [1, "de", ya, 29, 202, 0], [Br, "de", k, 27, 200, 0], [1, "de", nq, 26, 193, Ko], [er, "de", Yo, Ta, 201, 0], [dn, "de", Dj, 20, 199, 0], [V, "de", 19, Da, 196, 0], [ce, "de", 19, 12, 204, Ko], [1, "de", nq, oo, 201, kq], [Aj, "de", Rq, 23, 208, ko], [ce, "de", qi, 31, 214, kq], [er, "de", Yo, 26, 215, 0], [V, "de", nq, 36, 217, 0], [Fo, "de", 19, 32, 223, yk], [1, "de", bk, 26, 223, ko], [Br, "de", bk, 18, 218, 0], [V, "de", bk, 15, 215, 0], [Br, "de", bk, 17, 212, 0], [1, "de", 19, 15, 224, 0], [Fo, "de", 19, ya, 229, 0], [1, "de", 19, 10, 230, Fj], [Fo, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", k, 13, 243, 0], [1, "de", nq, 24, 244, Fj], [1, "de", Yo, 24, 250, Ko], [1, "de", 19, 28, 253, yk], [Fo, "de", 19, 33, 255, 0], [1, "de", Yk, 34, 260, Mn], [1, "de", 19, 31, 260, 0], [dn, "de", k, 38, 267, Fj], [er, "de", 19, 44, 264, 0], [1, "de", bk, 43, 261, ko], [Fo, "de", qi, Kj, 257, 0], [V, "de", 19, 22, 258, Mn], [ik, "de", Dj, 12, 253, 0], [er, "de", Yo, S, 242, 0], [1, "de", 19, ea, ua, 0], [1, "de", An, 15, 264, Ko], [Br, "de", nq, 20, 265, kq], [Aj, "de", An, co, 271, 0], [Fo, "de", 19, Oi, 272, Mn], [Aj, "de", 19, qj, 277, 0], [1, "de", k, 21, 277, 0], [ik, "de", 19, 21, 281, Fj], [1, "de", Dj, 27, 282, 0], [dn, "de", nq, 29, 278, Ko], [V, "de", An, 29, 273, 0], [dn, "de", Rq, 36, 271, jj], [1, "de", 19, 8, 278, jj], [ik, "de", 19, Pj, 286, 0], [1, "de", ya, sa, 291, Mn], [er, "de", 19, Zn, 294, tr], [er, "de", Dj, Oi, 292, 0], [1, "de", qi, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", ya, 16, 301, yk], [1, "de", 19, 27, 296, 0], [er, "de", Yk, 25, 292, jj], [1, "de", 19, 23, 301, 0], [Br, "de", Yk, 28, 301, 0], [1, "de", 19, 35, 297, Ko], [Aj, "de", Rq, 37, 301, jj], [ce, "de", 19, 43, 301, ko], [Br, "de", 19, 46, 294, Mn], [ce, "de", 19, 46, 288, tr], [1, "de", 19, 40, 287, 0], [ce, "de", 19, 50, 301, jj], [1, "de", 19, 58, 301, Ko], [1, "de", ya, 64, 301, 0], [1, "de", k, 71, 301, 0], [Aj, "de", Dj, 80, 301, Ko], [1, "de", 19, 87, 301, jj], [1, "de", Yk, 86, 294, kq], [1, "de", Rq, 87, 290, Mn], [ce, "de", 19, 82, 286, Fj], [1, "de", Rq, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", ya, 66, 288, kq], [1, "de", k, 58, 288, 0], [1, "de", 19, 67, 282, jj], [1, "de", ya, 61, 281, 0], [V, "de", k, 60, 295, tr], [1, "de", 19, 50, 282, 0], [1, "de", Yo, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", Yo, 44, 277, 0], [1, "de", 19, 41, 282, jj], [Fo, "de", 19, 38, 281, 0], [er, "de", 19, 42, 288, 0], [1, "de", Yk, 52, 281, Ko], [dn, "de", 19, 50, 275, Fj], [1, "de", Yk, 39, 277, 0], [1, "de", 19, 38, 284, tr], [1, "de", ya, 51, 285, tr], [1, "de", 19, 38, 278, 0], [1, "de", nq, 47, 272, jj], [1, "de", qi, 44, 267, kq], [Br, "de", 19, 76, 280, jj], [Br, "de", 19, 78, 272, 0], [ce, "de", 19, 68, 275, ko], [1, "de", nq, 70, 265, 0], [1, "de", 19, 65, 263, Mn], [er, "de", Rq, 64, 262, kq], [1, "de", 19, 60, 268, 0], [er, "de", Yo, 56, 266, 0], [Fo, "de", Yo, 55, 260, Mn], [1, "de", 19, 59, 258, kq], [1, "de", 19, 62, 255, 0], [V, "de", nq, 67, 253, tr], [1, "de", 19, 69, 256, tr], [1, "de", An, 44, 253, 0], [1, "de", 19, 44, 250, 0], [ik, "de", k, 36, 245, Fj], [Fo, "de", Dj, 39, 239, 0], [1, "de", An, 42, 234, tr], [1, "de", 19, 37, 235, Mn], [1, "de", Yo, 45, 226, 0], [V, "de", 19, 46, 222, yk], [er, "de", Yo, 51, 218, Ko], [1, "de", 19, 68, 218, ko], [1, "de", 19, 74, 224, tr], [Fo, "de", 19, 76, 218, 0], [1, "de", Dj, 84, 221, kq], [Aj, "de", 19, 88, 223, 0], [1, "de", Dj, 76, 230, 0], [er, "de", 19, 86, 234, Mn], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, Fj], [ik, "de", 19, 83, 247, 0], [1, "de", nq, 88, 247, 0], [1, "de", ya, 84, 254, 0], [1, "de", ya, 86, 251, tr], [1, "de", Yo, 85, 260, 0], [dn, "de", qi, 79, 260, 0], [1, "de", nq, 76, 251, yk], [er, "de", k, 72, 251, 0], [1, "de", ya, 69, 251, jj], [Fo, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, kq], [Br, "de", Rq, 87, 271, 0], [Fo, "de", 19, 82, 277, 0], [ik, "de", 19, 87, 284, Ko], [dn, "de", Yk, 87, 237, kq], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, Fj], [V, "de", 19, 34, 234, jj], [1, "de", Yo, 27, 233, jj], [1, "de", Dj, 37, 293, 0], [1, "de", 29, 13, 181, Fj], [1, "de", 29, 8, 180, 0], [ce, "de", 30, 13, 186, 0], [dn, "de", 31, 24, 183, yk], [1, "de", 32, 33, 185, 0], [ce, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [ik, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, jj], [Br, "de", 30, 66, 188, 0], [ce, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, ko], [er, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, yk], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [Br, "de", 31, 82, 203, Mn], [1, "de", 32, 80, 201, 0], [er, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [Fo, "de", 30, 88, 220, jj], [1, "de", 30, 78, 229, kq], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, ko], [1, "de", 29, 67, 217, ko], [dn, "de", 30, 72, 208, Mn], [1, "de", 30, 73, 199, jj], [1, "de", 30, 65, 207, 0], [ce, "de", 29, 63, 210, 0], [er, "de", 29, 50, 204, Mn], [dn, "de", 30, 41, 205, ko], [ce, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [ik, "de", 30, vj, 201, Fj], [1, "de", 29, 10, 203, 0], [Br, "de", 29, Yq, 196, 0], [Fo, "de", 29, 24, 187, yk], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, tr], [1, "de", 30, 28, 214, 0], [Fo, "de", 31, 24, 218, 0], [V, "de", 29, 36, 219, Ko], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [Aj, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, kq], [V, "de", 30, 45, 250, 0], [ce, "de", 30, 58, 261, ko], [Aj, "de", 30, 73, 276, tr], [1, "de", 30, 64, 276, kq], [ce, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, Fj], [1, "de", 30, 56, 288, 0], [V, "de", 30, 45, 296, Mn], [Aj, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, Mn], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, Fj], [ce, "de", 29, 28, 296, 0], [1, "de", 29, $o, 292, 0], [1, "de", 29, 24, 284, kq], [Fo, "de", 30, 10, 295, 0], [Fo, "de", 30, Bq, 286, yk], [ik, "de", 30, 15, 279, 0], [1, "de", 30, $q, 269, 0], [Aj, "de", 30, 21, 259, kq], [Fo, "de", 30, 12, J, 0], [1, "de", 30, 31, 245, 0], [dn, "de", 30, Mq, 240, Mn], [1, "de", 30, 28, 235, yk], [1, "de", 30, 13, 226, ko], [1, "de", 30, 39, 231, Ko], [1, "de", 30, 61, 226, 0], [er, "r", 96, 262, 0], [Br, "r", 97, 262, 0], [1, "r", 98, 262, yk], [1, "r", 97, 270, 0], [1, "r", 97, 271, Ko], [1, "r", 97, 272, ko], [er, "r", 97, 273, Fj], [1, "r", 97, 274, Fj], [dn, "r", 97, 275, 0], [Br, "r", 97, 276, 0], [1, "r", 97, 277, 0], [Aj, "r", 97, 278, yk], [ce, "r", 98, 270, tr], [ik, "r", 98, 271, yk], [er, "r", 98, 272, 0], [1, "r", 98, 273, 0], [ce, "r", 98, 274, kq], [ik, "r", 98, 275, 0], [1, "r", 98, 276, 0], [Br, "r", 98, 277, kq], [1, "r", 98, 278, Ko], [1, "r", 96, 283, 0], [V, "r", 97, 283, 0], [Aj, "r", 97, 284, 0], [Br, "r", 97, 285, 0], [1, "r", 98, 283, Ko], [V, "r", 98, 284, 0], [1, "r", 98, 285, yk], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, Ko], [1, "r", 96, 273, 0], [Aj, "r", 96, 274, 0], [V, "r", 96, 275, 0], [1, "r", 96, 276, Ko], [Fo, "r", 96, 277, 0], [Br, "r", 96, 278, 0], [ik, "r", 44, 248, kq], [Fo, "de", Fa, 94, 290, 0], [1, "de", ge, 94, 252, Ko], [ik, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, ik], [ce, "r", 95, 281, 1], [Br, "r", 94, 281, er], [Br, "r", 90, 281, ce], [1, "r", 91, 282, V], [1, "r", 89, 281, Br], [1, "r", 85, 276, 1], [Aj, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", Mn, 85, 279, ce], [1, "r", 86, 279, er], [1, "r", 87, 280, er], [Fo, "r", 96, 281, 0], [Br, "r", 97, 281, 0], [1, "r", 98, 281, 0], [Br, "r", 98, 282, 0], [1, "r", 97, 282, yk], [ik, "r", 96, 282, 0], [1, "r", 68, 261, ik], [1, "fo", Br, 94, 168, 0], [V, "fo", C, 94, 151, jj], [er, "fo", ik, 94, 138, 0], [1, "fo", 1, 93, 124, Ko], [Br, "fo", 1, 94, 129, 0], [1, "fo", V, 93, 113, ko], [1, "fo", V, 94, 102, 0], [ik, "fo", ik, 94, 93, 0], [ik, "fo", V, 93, 90, 0], [1, "fo", ik, 94, 79, kq], [Fo, "fo", V, 94, 76, Fj], [dn, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", V, 94, 53, 0], [1, "fo", 1, 93, 10, yk], [ik, "fo", Fo, 85, 8, Fj], [1, "fo", 1, 94, _o, Ko], [1, "fo", Br, 66, j, 0], [V, "fo", ce, 69, 9, 0], [1, "fo", 2, 68, ra, 0], [Aj, "fo", 2, 66, 25, 0], [ce, "fo", kn, 92, yn, Ko], [Aj, "fo", kn, 94, Zn, 0], [dn, "fo", ij, 87, xr, kq], [dn, "fo", 2, 71, 9, jj], [1, "fo", 2, 90, Da, tr], [1, "fo", Ok, 91, Y, 0], [Aj, "fo", 1, 74, Mq, 0], [1, "fo", Le, 72, Da, 0], [1, "fo", C, 75, 13, 0], [V, "fo", 2, 74, 15, Ko], [1, "fo", Wq, 84, Mq, 0], [1, "fo", 2, 81, mk, 0], [ce, "fo", Aj, 84, 13, 0], [dn, "fo", Br, 84, 19, 0], [dn, "fo", er, mr, yn, 0], [er, "fo", 1, Lq, gj, 0], [1, "fo", 1, zn, 22, Mn], [ce, "fo", V, 7, 34, ko], [1, "fo", ik, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [Br, "fo", Le, I, 21, 0], [1, "fo", 2, 31, oa, yk], [1, "fo", kn, 33, 27, 0], [er, "fo", pa, 9, 34, tr], [V, "fo", Xn, 8, 19, 0], [Aj, "fo", 1, mk, rk, 0], [Fo, "fo", Xn, 13, 9, Mn], [ik, "fo", 2, Nk, y, 0], [dn, "fo", Wq, I, yn, tr], [Fo, "fo", 2, 9, 10, 0], [1, "fo", C, 9, $n, 0], [V, "fo", C, 10, 23, tr], [1, "fo", pa, 34, 29, Fj], [ce, "fo", 2, 27, Q, Fj], [1, "fo", 2, 25, 21, Mn], [1, "fo", 2, 20, Tq, Mn], [1, "fo", 2, on, 21, tr], [Aj, "fo", 2, 29, 9, kq], [1, "fo", 2, eq, 14, yk], [1, "fo", 2, 9, 38, 0], [1, "fo", ij, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [Fo, "fo", 2, 77, 25, yk], [1, "fo", Wq, 86, 35, 0], [1, "fo", 1, 70, 35, Mn], [1, "fo", Xn, 72, 36, 0], [1, "fo", pa, 73, 31, tr], [1, "fo", Le, 89, 39, Fj], [er, "fo", pa, 65, 40, yk], [1, "fo", 2, 92, 32, Ko], [ce, "fo", 2, 90, 28, jj], [1, "de", 22, 25, 266, 0], [Br, "de", 22, 17, 206, 0], [1, "de", 19, xo, 184, 0], [Br, "de", 19, 22, 183, Mn], [1, "de", 19, 35, 188, jj], [1, "de", 19, 36, 192, 0], [V, "de", Yk, 50, 277, Mn], [1, "de", 19, 35, 279, tr], [dn, "t", 4, 7, 178, 0], [1, "t", 1, Ij, 179, 0], [1, "t", Mo, iq, 180, 0], [1, "t", kn, 7, 181, 0], [1, "t", Oq, _k, 182, ko], [V, "t", In, Lq, 183, jj], [1, "t", 3, Rk, 184, ko], [1, "t", 4, Lq, 185, ko], [er, "t", kn, 7, 186, 0], [ik, "t", 1, iq, 187, kq], [1, "t", f, He, 188, tr], [er, "t", 3, Lq, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, iq, 191, Ko], [1, "t", sn, E, 192, 0], [V, "t", qo, Rk, 193, 0], [1, "t", 3, Ij, 194, Mn], [1, "t", U, Lq, 195, ko], [1, "t", pa, Ij, 196, 0], [1, "t", 4, Rk, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", gn, Lq, 199, 0], [Aj, "t", 2, 7, 200, 0], [ik, "t", Wn, E, 201, 0], [Br, "t", 2, 7, 202, Ko], [1, "t", 4, 7, 203, kq], [1, "t", Xn, Ij, 204, ko], [Fo, "t", 5, 7, 205, tr], [1, "t", C, _k, 206, jj], [1, "t", Br, wq, 207, Ko], [Br, "t", 4, 7, 208, tr], [1, "t", vo, Rk, 209, tr], [ce, "t", er, E, 210, 0], [Fo, "b", 0, 7, 211, 0], [dn, "t", Mo, 7, 212, ko], [1, "t", qa, 7, 213, 0], [er, "t", 3, Hj, 214, 0], [1, "t", Wn, Hj, 215, 0], [Fo, "t", Bk, 7, 216, kq], [ce, "t", 3, 7, 217, ko], [Fo, "t", Br, E, 218, 0], [ik, "t", qo, Ba, 219, yk], [Fo, "b", 2, He, 220, Fj], [er, "t", ce, Hj, 221, 0], [1, "t", C, wq, 222, 0], [Fo, "t", 4, 7, 223, tr], [1, "t", 3, 7, 224, kq], [Aj, "t", 1, 7, 225, jj], [dn, "t", mj, Hj, 226, Mn], [Aj, "t", 2, Rk, 227, 0], [Aj, "t", Oq, _k, 228, kq], [1, "t", 3, 7, 229, 0], [Br, "t", 1, 7, 230, yk], [er, "t", 4, 7, 231, jj], [1, "b", 2, 7, 232, yk], [ce, "t", U, Lq, 233, 0], [ce, "t", 1, 7, 234, 0], [ce, "t", Kk, Hj, 235, 0], [er, "t", f, wq, 236, 0], [1, "t", 2, 7, 237, Ko], [1, "t", 5, 7, 238, yk], [Br, "b", 3, 7, 239, ko], [Fo, "t", 2, 7, 240, 0], [1, "t", er, Hj, 241, tr], [1, "t", 2, Hj, 242, ko], [ce, "t", qa, wq, 243, 0], [1, "t", 3, 7, 244, Fj], [1, "t", Ai, Rk, 245, 0], [1, "t", 1, E, 246, 0], [1, "b", 0, 7, 247, yk], [Br, "t", lk, 7, 248, jj], [1, "t", 5, 7, 249, yk], [1, "t", 2, 7, 250, 0], [1, "t", ce, Rk, 251, 0], [1, "t", 4, 7, 252, 0], [Aj, "t", Ik, Rk, 253, jj], [Br, "t", 5, He, 254, 0], [dn, "t", 1, E, 255, ko], [V, "t", 4, 7, ia, 0], [1, "t", ce, Ba, 257, Fj], [ce, "t", Le, iq, 258, 0], [1, "t", 5, Ba, 260, Fj], [V, "t", 3, Rk, 259, yk], [Fo, "t", er, 7, 261, 0], [1, "t", 3, wq, 262, yk], [1, "t", Yn, 7, 263, 0], [1, "t", ik, Rk, 264, 0], [1, "t", Xn, 7, 265, Mn], [dn, "t", 5, 7, 266, jj], [ik, "t", Xn, 7, 267, ko], [V, "t", Ok, Ij, 269, 0], [1, "b", 2, 7, 268, 0], [Fo, "t", Yn, Ij, 270, 0], [1, "t", 1, Lq, 271, 0], [dn, "t", Cj, 7, 272, 0], [Br, "b", 2, Ba, 273, 0], [er, "t", 4, Lq, 274, 0], [1, "t", kn, 7, 275, 0], [Fo, "t", 5, Lq, 276, Ko], [Br, "t", Oq, E, 277, 0], [1, "t", 2, Rk, 278, 0], [Fo, "t", Br, 7, 279, yk], [1, "t", 4, 7, 280, 0], [er, "b", V, 7, 281, ko], [dn, "t", Ik, 7, 282, 0], [1, "t", 4, Ba, 283, 0], [1, "t", 1, Ba, 284, Fj], [Br, "t", sn, wq, 285, Ko], [1, "t", Wn, iq, 286, ko], [1, "t", 4, _k, 288, 0], [ik, "t", C, 7, 287, ko], [1, "b", 0, 7, 289, 0], [1, "t", qo, E, 290, tr], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, jj], [Br, "t", Ik, 7, 293, 0], [1, "t", dn, Ij, 294, 0], [V, "t", qo, iq, 295, yk], [1, "t", 3, 7, 296, 0], [1, "t", Aj, 7, 297, 0], [1, "t", 4, 7, 298, ko], [1, "t", pa, 7, 299, 0], [1, "b", Mn, 7, 300, kq], [1, "t", 2, E, 301, tr], [Br, "r", 196, 271, Mn], [V, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [er, "r", 189, 207, ko], [er, "r", 192, 209, 0], [V, "r", 198, 271, ko], [1, "r", 197, 271, Ko], [1, "r", 198, 272, tr], [1, "r", 197, 272, kq], [1, "r", 196, 272, 0], [Br, "r", 195, 272, 0], [er, "r", 199, 272, ko], [1, "r", 199, 273, yk], [Br, "r", 198, 273, Ko], [1, "r", 197, 273, 0], [dn, "r", 196, 273, Fj], [V, "r", 198, 274, ko], [1, "r", 197, 274, ko], [1, "r", 195, 273, Ko], [Aj, "r", 196, 274, 0], [1, "r", 198, 275, Fj], [1, "r", 197, 275, tr], [er, "r", 200, 274, kq], [1, "r", 200, 273, ko], [V, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, jj], [1, "plm", tr, 199, 268, 0], [1, "plm", Ko, 193, 277, 0], [1, "plm", ce, 199, 276, jj], [1, "s", dn, 200, 275, 1], [1, "s", Aj, 194, 272, 1], [Fo, "s", 2, 193, 270, ik], [ce, "g", kn, 193, 273, 1], [er, "g", kn, 201, 267, V], [ik, "m", Le, 220, 298, 1], [1, "m", 1, 219, 292, 1], [ik, "m", 1, 214, 297, 1], [1, "r", 168, 238, Ko], [er, "r", 169, 238, ko], [V, "r", 170, 238, 0], [Br, "r", 171, 239, ko], [1, "r", 170, 239, yk], [1, "r", 169, 239, tr], [1, "r", 168, 239, 0], [Aj, "r", 167, 239, Mn], [ik, "r", 166, 239, kq], [1, "r", 166, 240, Ko], [Fo, "r", 167, 240, 0], [1, "r", 168, 240, Mn], [Fo, "r", 169, 240, yk], [V, "r", 170, 240, Mn], [1, "r", 168, 241, Fj], [1, "r", 169, 241, 0], [1, "r", 170, 241, yk], [1, "r", 171, 241, kq], [1, "plm", 2, 171, 238, 0], [ik, "plm", V, 166, 238, yk], [er, "plm", kq, 167, 237, 0], [1, "plm", Ko, 171, 242, 0], [dn, "plm", 0, 165, 243, kq], [1, "plm", 0, 171, 235, jj], [ce, "plm", yk, 174, 241, 0], [1, "s", dn, 165, 239, ik], [1, "s", er, 172, 241, V], [ce, "s", 0, 170, 237, 1], [dn, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", ij, 162, 241, 1], [ik, "s", 2, 170, 246, dn], [er, "s", Xn, 167, 235, ce], [1, "s", 2, 176, 243, 1], [dn, "r", 190, 207, tr], [er, "r", 191, 207, Ko], [V, "r", 192, 208, 0], [er, "r", 191, 208, 0], [ce, "r", 190, 208, jj], [dn, "r", 189, 208, yk], [er, "r", 188, 208, 0], [ik, "r", 189, 209, ko], [1, "r", 190, 209, ko], [V, "r", 191, 209, yk], [Fo, "r", 188, 209, 0], [ce, "r", 190, 210, Ko], [1, "r", 191, 210, Mn], [1, "r", 192, 210, jj], [1, "plm", 2, 189, 210, ko], [Fo, "plm", 2, 192, 205, 0], [Br, "plm", 1, 192, 207, ko], [ce, "plm", yk, 193, 210, yk], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [ik, "plm", 0, 191, 213, Mn], [1, "plm", 0, 190, 204, yk], [er, "s", 1, 188, 207, 1], [1, "s", er, 190, 211, 1], [Aj, "s", 2, 188, 213, 1], [dn, "s", Ok, 187, 205, ik], [Br, "s", 0, 194, 210, 1], [Br, "s", tr, 198, 207, dn], [1, "s", 1, 193, 204, ce], [Aj, "s", 1, 193, 213, Br], [1, "s", 2, 198, 212, 1], [1, "s", ij, 182, 208, Aj], [1, "s", 1, 204, 271, 1], [1, "s", yk, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", kq, 195, 265, 1], [1, "s", Wq, 196, 264, 1], [Aj, "s", kn, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", kq, 217, 282, Br], [1, "s", ce, 214, 285, 1], [1, "s", er, 214, 274, ik], [1, "s", 1, 203, 282, ik], [1, "s", 1, 205, 290, 1], [dn, "s", 0, 207, 292, Aj], [1, "s", Ko, 197, 297, Br], [1, "s", ko, 184, 287, Br], [1, "s", 2, 213, 289, Aj], [1, "s", ij, 196, 294, 1], [Aj, "s", 2, 187, 286, dn], [dn, "s", Br, 192, 289, Br], [1, "s", V, 189, 299, Aj], [Fo, "s", 0, 213, 273, 1], [V, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [er, "g", 2, 215, 265, 1], [er, "g", ij, 183, 281, dn], [ce, "s", 0, 178, 295, er], [1, "s", 0, 167, 281, 1], [Fo, "s", Fj, 175, 263, Aj], [dn, "s", ik, 176, 293, V], [Br, "s", ik, 163, 285, Aj], [Br, "s", 1, 177, 266, 1], [1, "s", Aj, 161, 272, 1], [1, "s", 2, 185, 261, 1], [er, "c", 0, 217, 270, Fo], [1, "c", Mn, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", ko, 210, 292, ik], [Fo, "c", 0, 205, 297, Br], [1, "c", 0, 198, 293, 1], [Aj, "c", Mn, 208, 283, 1], [ik, "c", 0, 197, 283, dn], [Aj, "c", yk, 190, 289, 1], [V, "c", ko, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, ce], [ik, "c", 0, 208, 265, Fo], [ce, "c", 0, 169, 292, 1], [ce, "s", 1, 158, 294, 1], [er, "s", 0, 151, 297, Fo], [ce, "s", Mn, 147, 288, 1], [1, "c", 0, 150, 289, 1], [er, "c", Mn, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, dn], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [Br, "g", 1, 197, 248, 1], [Aj, "g", Xn, 170, 255, 1], [Br, "g", 2, 212, 234, V], [Br, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, Fo], [Aj, "g", 1, 210, 214, 1], [Fo, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, dn], [1, "s", Mn, 184, 248, ce], [1, "s", kq, 212, 254, 1], [1, "s", Aj, 203, 249, 1], [1, "s", ij, 204, 252, V], [1, "s", 2, 187, 248, 1], [1, "s", Mn, 206, 237, 1], [er, "s", 0, 196, 227, 1], [Aj, "s", 0, 181, 228, ce], [1, "s", er, 199, 227, er], [1, "s", V, 208, 238, Fo], [ik, "s", 1, 179, 222, 1], [1, "s", V, 213, 223, 1], [V, "s", pa, 182, 222, ce], [Br, "s", ij, 211, 226, 1], [Br, "s", Wq, 214, 214, 1], [ik, "s", 2, 201, 216, 1], [ik, "s", pa, 215, 192, dn], [1, "s", 1, 210, 198, 1], [Fo, "s", Aj, 198, 196, 1], [ce, "s", kn, 208, 199, 1], [dn, "s", pa, 187, 192, 1], [V, "s", 1, 179, 198, ce], [1, "s", 2, 177, 197, 1], [V, "s", 0, 164, 197, Fo], [1, "s", Br, 159, 193, 1], [1, "s", er, 149, 206, Aj], [ce, "s", Br, 164, 209, 1], [Fo, "s", Le, 165, 210, 1], [ce, "s", C, 161, 191, 1], [ik, "s", Aj, 162, 224, Fo], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, Fo], [dn, "s", ij, 153, 236, 1], [V, "s", Wq, 160, 223, 1], [1, "s", Ok, 151, 207, 1], [Aj, "s", Le, 147, 220, Fo], [Br, "s", 2, 145, 265, 1], [ik, "s", Le, 145, 285, 1], [dn, "c", 0, 152, 266, er], [ik, "c", 0, 185, 271, ce], [ce, "c", 0, 210, 254, Fo], [1, "c", Mn, 209, 256, 1], [1, "c", Ko, 198, 254, V], [1, "c", jj, 213, 246, Br], [1, "c", 0, 216, 237, er], [1, "c", 0, 204, 240, 1], [Aj, "c", yk, 196, 234, ik], [1, "c", 0, 188, 238, ik], [er, "c", Ko, 182, 245, 1], [Br, "c", Ko, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", tr, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", tr, 157, 214, Aj], [1, "c", Ko, 167, 219, 1], [1, "c", ko, 171, 208, 1], [ik, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [Fo, "c", 0, 195, 221, er], [1, "c", 0, 207, 222, 1], [Fo, "c", tr, 214, 207, er], [Br, "c", 0, 205, 210, 1], [1, "c", Ko, 204, 196, Aj], [1, "c", jj, 214, 196, 1], [Br, "c", 0, 190, 199, ce], [ik, "c", Fj, 184, 194, ik], [Br, "c", Fj, 172, 199, 1], [1, "c", Ko, 161, 204, er], [1, "c", jj, 157, 196, ce], [ce, "c", Ko, 149, 194, ce], [Br, "c", 0, 147, 208, Br], [1, "c", jj, 207, 274, er], [1, "c", 0, 217, 258, 1], [1, "c", Fj, 201, 260, Aj], [1, "c", 0, 178, 276, Aj], [V, "c", Fj, 187, 265, dn], [Aj, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, Aj], [1, "s", 1, 187, w, Fo], [Fo, "s", Le, 189, 254, dn], [1, "s", 2, 212, 257, 1], [1, "s", C, 182, 286, Aj], [1, "s", 2, 169, 280, ik], [dn, "s", kn, 217, 273, 1], [1, "s", Wq, 215, 282, Aj], [1, "s", Wq, 172, 263, er], [er, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [dn, "fod", 1, 221, 282, kq], [er, "fod", er, 222, 284, Ko], [1, "fod", dn, 221, 290, 0], [1, "fod", V, 222, 294, 0], [1, "fod", 1, 221, 297, tr], [1, "fod", 1, 223, 298, 0], [ik, "fod", 1, 222, 300, yk], [V, "fod", Aj, 218, 301, 0], [er, "fod", Fo, 217, 299, 0], [1, "fod", 1, 215, 301, yk], [Br, "fod", dn, 212, 300, jj], [1, "fod", 1, 206, 300, Fj], [er, "fod", 1, 209, 301, 0], [1, "fod", dn, 204, 299, 0], [1, "fod", Fo, 202, 301, jj], [1, "fod", 1, 199, 301, Fj], [1, "fod", er, 222, 282, jj], [1, "fod", ce, 207, 301, 0], [dn, "fod", Fo, 197, 301, jj], [1, "fod", ik, 215, 291, Ko], [1, "fod", 1, 216, 286, kq], [dn, "fod", V, 214, 292, yk], [ce, "fod", Fo, 210, 289, 0], [Fo, "fod", Fo, 208, 294, Mn], [ik, "fod", 1, 210, 298, Ko], [er, "fod", 1, 212, 281, 0], [ik, "fod", 1, 219, 278, Ko], [dn, "fod", er, 219, 282, kq], [V, "fod", Aj, 205, 286, yk], [1, "fod", Br, 202, 293, tr], [1, "fod", ce, 198, 295, 0], [V, "fod", ij, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [ce, "fod", kn, 216, 289, 0], [1, "fod", C, 219, 289, 0], [1, "fod", Ok, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [Aj, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, Mn], [er, "fod", 2, 208, 290, 0], [1, "fod", kn, 211, 296, 0], [dn, "fod", pa, 215, 294, tr], [ik, "fod", 2, 212, 298, Ko], [1, "fod", pa, 203, 294, tr], [1, "fod", ij, 204, 288, 0], [V, "fod", 2, 200, 294, 0], [er, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [er, "fod", 2, 200, 299, Fj], [Fo, "fod", ij, 220, 300, 0], [1, "fod", C, 220, 295, 0], [1, "fod", Xn, 220, 292, kq], [dn, "fod", 2, 219, 287, 0], [Br, "fod", pa, 211, 288, 0], [V, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, Fj], [1, "fod", 2, 212, 290, Ko], [Br, "fod", ij, 195, 296, 0], [1, "fod", C, 196, 299, kq], [ce, "fod", 2, 194, 300, jj], [1, "fod", 2, 195, 300, 0], [ik, "fod", 2, 213, 279, 0], [Br, "fod", Le, 211, 279, 0], [er, "fod", 0, 218, 290, 0], [1, "fod", jj, 212, 294, jj], [1, "fod", ce, 213, 295, jj], [1, "fod", ik, 217, 292, 0], [er, "fod", Aj, 218, 288, 0], [1, "fod", dn, 210, 295, Fj], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, Mn], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [dn, "fod", 2, 209, 299, 0], [ce, "fod", 2, 211, 291, 0], [1, "fod", Fo, 203, 275, jj], [1, "fod", er, 204, 272, ko], [1, "fod", kn, 205, 273, Fj], [ik, "fod", 2, 204, 276, 0], [1, "fod", Le, 202, 276, 0], [ik, "fod", 2, 199, 277, 0], [1, "fod", pa, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [ce, "fod", 2, 194, 277, 0], [Fo, "fod", Aj, 192, 274, yk], [1, "fod", 1, 194, 267, jj], [ik, "fod", kn, 194, 265, ko], [dn, "fod", kn, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [dn, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, Mn], [Br, "fod", dn, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [Fo, "fod", V, 162, 235, kq], [1, "fod", ij, 169, 236, Mn], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", Xn, 173, 241, jj], [Aj, "fod", 2, 174, 238, tr], [1, "fod", 2, 176, 240, yk], [1, "fod", C, 169, 244, 0], [1, "fod", Xn, 166, 243, Mn], [1, "fod", ij, 162, 236, yk], [dn, "fod", C, 164, 235, 0], [dn, "fod", Xn, 162, 233, Fj], [1, "fod", 2, 163, 236, 0], [1, "fod", Le, 174, 242, Mn], [er, "fod", Wq, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [er, "fod", 1, 190, 214, 0], [1, "fod", V, 186, 206, 0], [er, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, yk], [dn, "fod", 2, 198, 206, tr], [1, "fod", 2, 198, 208, 0], [dn, "fod", 2, 194, 204, jj], [1, "fod", 2, 187, 206, jj], [dn, "fod", 2, 186, 204, 0], [1, "fod", Xn, 189, 214, 0], [1, "fod", 2, 189, 213, kq], [Fo, "fod", 2, 193, 215, Ko], [1, "fod", Wq, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [dn, "fod", 2, 193, 209, 0], [1, "fod", kn, 189, 211, ko], [1, "fod", 2, 187, 209, 0], [Br, "fod", C, 187, 207, yk], [1, "fod", 2, 191, 205, 0], [Br, "fod", 2, 189, 203, Fj], [1, "cs", Le, 224, 176, 1], [ik, "cs", kq, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", kn, 224, 179, 1], [er, "cs", 1, 224, 180, 1], [Fo, "cs", 2, 224, 181, 1], [1, "cs", ko, 224, 182, 1], [1, "cs", pa, 224, 183, 1], [Fo, "cs", Mn, 224, 184, ce], [ik, "cs", 3, 224, 185, 1], [1, "cs", Wq, 224, 186, 1], [1, "cs", 0, 224, 187, dn], [1, "cs", Wq, 224, 188, V], [Br, "cs", Fj, 224, 189, dn], [dn, "cs", Aj, 224, 190, 1], [1, "cs", ij, 224, 191, Aj], [dn, "cs", tr, 224, 192, Br], [1, "cs", 2, 224, 193, Fo], [1, "cs", Xn, 224, 194, er], [Aj, "cs", 1, 224, 195, 1], [1, "cs", kn, 224, 196, ce], [Br, "cs", Mn, 224, 197, 1], [Br, "cs", 3, 224, 198, V], [1, "cs", C, 224, 199, 1], [1, "cs", Fo, 224, 200, dn], [er, "cs", Wq, 224, 201, V], [Br, "cs", sn, 224, 202, 1], [Fo, "cs", 0, 224, 203, dn], [1, "cs", ik, 224, 204, 1], [1, "cs", 2, 224, 205, ce], [V, "cs", Mn, 224, 206, 1], [er, "cs", 1, 224, 207, Aj], [1, "cs", fa, 224, 208, dn], [1, "cs", 2, 224, 209, ik], [ik, "cs", kn, 224, 210, ik], [ik, "cs", jj, 223, 211, 1], [1, "cs", 1, 224, 211, Br], [1, "cs", pa, 224, 212, Fo], [er, "cs", 2, 224, 213, V], [Aj, "cs", Aj, 224, 214, 1], [er, "cs", fa, 224, 215, ce], [Br, "cs", 0, 224, 216, Fo], [1, "cs", Aj, 224, 217, 1], [dn, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", jj, 223, 215, 1], [ik, "cs", Wq, 223, 214, Aj], [V, "cs", 2, 223, 212, 1], [1, "cs", kn, 223, 216, 1], [Aj, "cs", sn, 223, 217, Fo], [ce, "cs", 0, 223, 218, dn], [1, "cs", 0, 224, 220, 1], [Aj, "cs", Ko, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [Fo, "cs", 0, 223, 205, ik], [dn, "cs", C, 224, 221, ik], [1, "cs", 2, 223, 219, Aj], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [V, "cs", Wq, 223, 210, Aj], [V, "cs", Br, 223, 178, Br], [1, "cs", Dn, 223, 179, 1], [Br, "cs", _i, 223, 181, dn], [V, "cs", lk, 223, 182, 1], [er, "cs", 1, 223, 185, 1], [1, "cs", C, 223, 184, 1], [1, "cs", Xn, 223, 186, er], [er, "cs", 0, 223, 180, Fo], [1, "cs", 0, 223, 183, dn], [1, "cs", 2, 223, 187, 1], [1, "cs", V, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [V, "cs", 2, 223, 190, 1], [ik, "cs", 3, 223, 191, 1], [Fo, "cs", dn, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", sn, 223, 195, 1], [ce, "cs", ce, 223, 196, er], [dn, "cs", Xn, 223, 197, 1], [dn, "cs", 2, 223, 199, 1], [1, "cs", C, 223, 198, Aj], [dn, "cs", Ko, 223, 200, er], [dn, "cs", kn, 223, 201, Aj], [ce, "cs", 0, 223, 202, 1], [ik, "cs", Kk, 223, 203, ik], [1, "cs", fa, 223, 204, 1], [ce, "cs", 3, 223, 206, 1], [1, "cs", Kk, 223, 207, 1], [er, "cs", _i, 223, 208, 1], [Br, "cs", pa, 223, 221, V], [1, "cs", pa, 223, 222, Aj], [dn, "cs", ko, 223, 224, 1], [Br, "cs", kq, 224, 228, Fo], [Br, "cs", 0, 224, 230, Br], [1, "cs", 0, 223, 234, V], [Br, "cs", 2, 223, 223, 1], [Br, "cs", Wq, 224, 223, 1], [1, "cs", 2, 224, 224, Aj], [1, "cs", 2, 224, 225, 1], [1, "cs", dn, 223, 226, 1], [Aj, "cs", Br, 224, 231, ik], [1, "cs", 1, 223, 232, 1], [1, "cs", ta, 223, 225, 1], [1, "cs", fa, 224, 226, ce], [1, "cs", 3, 223, 227, 1], [1, "cs", lk, 224, 227, 1], [ce, "cs", fa, 223, 229, Br], [ik, "cs", 3, 223, 228, Aj], [1, "cs", B, 224, 229, dn], [dn, "cs", 3, 223, 230, Aj], [1, "cs", _i, 223, 231, 1], [V, "cs", vo, 224, 232, Br], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [V, "cs", _i, 224, 234, 1], [Aj, "cs", 3, 224, 235, Fo], [1, "cs", 3, 223, 235, 1], [1, "cs", Br, 224, 236, Br], [1, "cs", C, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", Kk, 224, 237, er], [ik, "cs", 3, 224, 238, ce], [1, "cs", ko, 224, 239, 1], [ik, "cs", er, 223, 241, V], [Aj, "cs", 0, 224, 243, Br], [Aj, "cs", Ko, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [dn, "cs", 2, 223, 240, Br], [1, "cs", 2, 223, 239, V], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, V], [er, "cs", 2, 224, 242, ce], [1, "cs", 2, 223, 242, 1], [Fo, "cs", ij, 223, 243, Aj], [Fo, "cs", kn, 223, 244, 1], [1, "cs", ij, 224, 244, 1], [Fo, "cs", 2, 224, 245, 1], [1, "cs", Le, 224, 246, dn], [1, "cs", vo, 223, 238, 1], [V, "cs", 3, 223, 246, er], [er, "cs", Wq, 223, 247, 1], [1, "cs", 1, 223, 249, er], [Aj, "cs", 1, 224, 253, ce], [Fo, "cs", ik, 223, 256, Br], [Fo, "cs", 0, 223, 254, Fo], [1, "cs", tr, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [ik, "cs", Kk, 223, 250, 1], [Br, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, rr, 1], [1, "cs", ta, 223, 257, Aj], [1, "cs", 2, 224, 248, er], [1, "cs", Le, 224, 249, ce], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [dn, "cs", 2, 224, 252, Br], [1, "cs", 2, 223, 253, 1], [1, "cs", C, 224, 254, 1], [1, "cs", Xn, 224, Gi, er], [Br, "cs", 2, 224, 256, 1], [Fo, "cs", Wq, 224, 257, 1], [1, "cs", tr, 224, 258, ce], [Br, "cs", 0, 223, 261, V], [V, "cs", yk, 224, 263, ik], [ce, "cs", ko, 224, 266, Aj], [1, "cs", jj, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [ik, "cs", ko, 223, 275, 1], [1, "cs", V, 223, 259, Br], [1, "cs", ce, 223, 264, dn], [dn, "cs", Fo, 223, 268, 1], [dn, "cs", 1, 224, 274, 1], [1, "cs", Le, 223, 258, 1], [Br, "cs", Le, 223, 260, ce], [1, "cs", 2, 223, 263, 1], [Aj, "cs", Ok, 223, 265, er], [ik, "cs", kn, 223, 267, 1], [Br, "cs", 2, 223, 271, 1], [ik, "cs", 2, 223, 273, 1], [1, "cs", _i, 223, 262, 1], [dn, "cs", _i, 223, 266, 1], [Br, "cs", Ik, 223, 269, 1], [Br, "cs", Ea, 223, 272, 1], [1, "cs", 3, 223, 274, er], [1, "cs", 3, 224, 275, 1], [1, "cs", Ea, 224, 273, V], [V, "cs", Dn, 224, 271, Aj], [ce, "cs", Ik, 224, 270, er], [dn, "cs", 3, 224, 269, ik], [1, "cs", sn, 224, 268, er], [1, "cs", 3, 224, 267, 1], [dn, "cs", 3, 224, 265, Fo], [1, "cs", B, 224, 264, Fo], [1, "cs", vo, 224, 262, 1], [V, "cs", 3, 224, 261, 1], [Br, "cs", 3, 224, 260, 1], [Br, "cs", _i, 224, 259, ce], [1, "cs", 2, 223, 276, V], [V, "cs", ce, 224, 276, 1], [1, "cs", dn, 224, 280, 1], [ce, "cs", V, 223, 281, Br], [Br, "cs", Br, 224, 286, 1], [V, "cs", yk, 223, 280, ce], [ik, "cs", Ko, 223, 284, 1], [1, "cs", ko, 224, 288, 1], [Fo, "cs", 0, 224, 279, dn], [Fo, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", Xn, 224, 278, Br], [Fo, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [ce, "cs", 2, 224, 282, 1], [1, "cs", Wq, 224, 284, ik], [1, "cs", 2, 224, 285, ik], [er, "cs", kn, 224, 287, 1], [ik, "cs", pa, 223, 287, V], [ik, "cs", Xn, 223, 285, er], [1, "cs", 2, 223, 283, ik], [1, "cs", 2, 223, 279, V], [1, "cs", Kk, 223, 278, 1], [V, "cs", Ea, 223, 282, Aj], [Br, "cs", 3, 223, 286, 1], [1, "cs", Kk, 223, 289, 1], [Fo, "cs", Ea, 224, 289, V], [1, "cs", Ok, 223, 288, dn], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", yk, 224, 292, 1], [1, "cs", kq, 223, 294, 1], [Br, "cs", kq, 224, 297, ik], [ce, "cs", ko, 223, 299, 1], [Fo, "cs", pa, 223, 291, 1], [Fo, "cs", C, 224, 291, 1], [ce, "cs", Xn, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, Br], [ce, "cs", pa, 224, 294, 1], [V, "cs", Fo, 224, 295, Br], [1, "cs", C, 223, 295, dn], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, V], [1, "cs", Wq, 223, 297, Fo], [dn, "cs", 2, 223, 298, 1], [ce, "cs", pa, 224, 298, Br], [1, "cs", Xn, 224, 299, V], [ik, "cs", Xn, 223, 300, 1], [er, "cs", dn, 224, 300, dn], [1, "cs", 0, 223, 301, 1], [ik, "cs", 0, 224, 302, dn], [1, "cs", kq, 224, 304, er], [Aj, "cs", Ea, 224, 301, 1], [1, "cs", 3, 224, 303, Fo], [1, "cs", yk, 221, 303, dn], [1, "cs", kq, 219, 304, V], [1, "cs", 1, 222, 304, V], [Fo, "cs", 1, 222, 302, Aj], [Fo, "cs", 2, 223, 302, 1], [Br, "cs", ij, 223, 303, V], [1, "cs", 2, 222, 303, 1], [ce, "cs", 2, 223, 304, ce], [1, "cs", Le, 221, 304, Fo], [Br, "cs", Wq, 220, 304, V], [1, "cs", 2, 220, 303, Aj], [Aj, "cs", 2, 220, 302, ik], [Br, "cs", Le, 221, 302, V], [ce, "cs", 2, 219, 303, Br], [1, "cs", 0, 217, 302, 1], [1, "cs", Ko, 215, 304, 1], [er, "cs", Mn, 214, 302, 1], [ce, "cs", Aj, 218, 302, ik], [Br, "cs", 1, 217, 304, Aj], [1, "cs", ik, 215, 302, Br], [1, "cs", 2, 219, 302, V], [er, "cs", Wq, 218, 303, 1], [1, "cs", C, 218, 304, 1], [ce, "cs", C, 217, 303, er], [dn, "cs", Wq, 216, 304, 1], [er, "cs", C, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", ij, 214, 303, 1], [er, "cs", Le, 214, 304, Fo], [Fo, "cs", Mn, 212, 302, dn], [Br, "cs", 0, 210, 303, ik], [er, "cs", 0, 212, 304, 1], [Br, "cs", 0, 208, 304, V], [1, "cs", 1, 210, 302, Br], [Br, "cs", Fo, 208, 303, 1], [1, "cs", Wq, 213, 302, V], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, ce], [Fo, "cs", 2, 212, 303, 1], [1, "cs", Ok, 211, 304, Aj], [1, "cs", Ok, 211, 303, 1], [1, "cs", 2, 211, 302, dn], [1, "cs", C, 209, 302, 1], [Br, "cs", kn, 209, 303, 1], [V, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [Aj, "cs", Ok, 208, 302, V], [er, "cs", yk, 206, 303, dn], [1, "cs", yk, 203, 304, 1], [1, "cs", 0, 200, 303, Aj], [1, "cs", ko, 199, 304, Br], [Fo, "cs", 0, 195, 304, Aj], [1, "cs", 0, 191, 303, dn], [ce, "cs", 0, 193, 304, Aj], [1, "cs", 0, 189, 304, er], [1, "cs", dn, 204, 303, 1], [1, "cs", Mn, 197, 302, 1], [ce, "cs", yk, 202, 302, dn], [1, "cs", ko, 188, 302, 1], [ik, "cs", tr, 194, 302, Fo], [1, "cs", 1, 197, 303, V], [1, "cs", 1, 201, 304, er], [1, "cs", 1, 192, 302, Fo], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [V, "cs", 1, 188, 304, 1], [1, "cs", pa, 207, 302, 1], [Br, "cs", 2, 207, 303, er], [1, "cs", C, 207, 304, 1], [ik, "cs", 2, 206, 304, 1], [Br, "cs", Xn, 206, 302, 1], [1, "cs", kn, 205, 303, 1], [1, "cs", Xn, 204, 304, 1], [1, "cs", Le, 205, 304, 1], [ce, "cs", Wq, 204, 302, 1], [Br, "cs", 2, 203, 302, Fo], [1, "cs", Le, 203, 303, 1], [1, "cs", Le, 202, 303, 1], [1, "cs", kn, 201, 303, 1], [Br, "cs", C, 201, 302, 1], [1, "cs", 2, 200, 302, Br], [1, "cs", 2, 199, 302, V], [1, "cs", 2, 198, 303, dn], [Aj, "cs", 2, 198, 302, 1], [dn, "cs", Xn, 199, 303, 1], [1, "cs", Wq, 200, 304, ik], [1, "cs", pa, 202, 304, er], [dn, "cs", ij, 197, 304, 1], [er, "cs", Ok, 198, 304, 1], [Fo, "cs", C, 196, 304, dn], [1, "cs", Xn, 196, 303, Aj], [1, "cs", Le, 196, 302, 1], [dn, "cs", 2, 195, 302, Fo], [Aj, "cs", 2, 195, 303, er], [V, "cs", 2, 194, 303, ce], [er, "cs", 2, 194, 304, ce], [1, "cs", 2, 193, 303, 1], [1, "cs", Xn, 193, 302, 1], [dn, "cs", C, 192, 303, 1], [Fo, "cs", 2, 192, 304, 1], [1, "cs", Le, 191, 304, 1], [Br, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, V], [V, "cs", pa, 189, 302, Fo], [1, "cs", kn, 190, 302, 1], [V, "cs", ij, 191, 302, dn], [Fo, "cs", 2, 188, 303, 1], [ik, "cs", 0, 186, 303, dn], [Br, "cs", tr, 183, 304, 1], [1, "cs", 0, 184, 302, Aj], [er, "cs", 0, 181, 302, 1], [er, "cs", 0, 176, 302, er], [1, "cs", ko, 178, 303, ce], [dn, "cs", Mn, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", Mn, 172, 302, 1], [1, "cs", Aj, 182, 303, V], [ik, "cs", dn, 178, 304, Br], [ik, "cs", Aj, 175, 304, 1], [Fo, "cs", 1, 173, 302, 1], [1, "cs", ce, 185, 304, V], [er, "cs", 1, 169, 304, dn], [1, "cs", 3, 187, 304, dn], [1, "cs", 3, 186, 304, 1], [Aj, "cs", Ik, 187, 303, 1], [1, "cs", 3, 187, 302, er], [dn, "cs", Mo, 186, 302, 1], [1, "cs", Ik, 185, 302, 1], [1, "cs", 3, 185, 303, er], [1, "cs", 3, 184, 303, dn], [er, "cs", 3, 183, 303, 1], [1, "cs", Dn, 183, 302, 1], [1, "cs", lk, 182, 302, 1], [Br, "cs", B, 184, 304, Br], [ce, "cs", 3, 182, 304, Fo], [dn, "cs", Dn, 181, 304, 1], [ce, "cs", Kk, 179, 304, Fo], [1, "cs", _i, 180, 304, 1], [ce, "cs", 3, 181, 303, dn], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", Mo, 180, 302, 1], [Aj, "cs", 3, 179, 302, 1], [V, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, ik], [1, "cs", _i, 177, 304, Br], [ce, "cs", B, 177, 303, Aj], [1, "cs", 3, 176, 303, 1], [1, "cs", lk, 176, 304, ik], [1, "cs", 3, 174, 304, V], [1, "cs", 3, 175, 303, V], [dn, "cs", 3, 174, 303, Br], [1, "cs", fa, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [dn, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", Mo, 174, 302, 1], [1, "cs", 3, 175, 302, er], [Br, "cs", B, 171, 302, ce], [1, "cs", 3, 170, 302, 1], [Aj, "cs", fa, 169, 302, 1], [1, "cs", Dn, 169, 303, 1], [dn, "cs", 0, 168, 302, 1], [Aj, "cs", kq, 166, 303, 1], [1, "cs", Fj, 163, 304, dn], [1, "cs", 0, 161, 302, 1], [er, "cs", 0, 159, 303, V], [1, "cs", kq, 152, 304, 1], [dn, "cs", 0, 155, 303, ik], [1, "cs", 1, 164, 303, 1], [Fo, "cs", 1, 162, 303, dn], [1, "cs", 1, 158, 304, 1], [er, "cs", ik, 156, 302, 1], [1, "cs", 1, 153, 302, Fo], [1, "cs", 1, 154, 304, er], [Aj, "cs", Ok, 168, 304, Fo], [V, "cs", Wq, 168, 303, Aj], [V, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", ij, 166, 304, Br], [1, "cs", 2, 165, 304, 1], [1, "cs", Le, 164, 304, er], [Aj, "cs", Wq, 165, 303, 1], [1, "cs", kn, 167, 302, er], [1, "cs", ij, 166, 302, V], [1, "cs", Xn, 165, 302, ce], [er, "cs", kn, 164, 302, 1], [Br, "cs", C, 163, 302, ik], [Fo, "cs", Xn, 162, 302, 1], [1, "cs", 2, 163, 303, er], [dn, "cs", C, 162, 304, er], [ik, "cs", 2, 160, 304, 1], [ce, "cs", kn, 159, 304, ce], [1, "cs", 2, 161, 304, 1], [1, "cs", ij, 161, 303, 1], [Fo, "cs", 2, 160, 303, 1], [1, "cs", Le, 160, 302, 1], [1, "cs", Le, 158, 302, 1], [V, "cs", 2, 159, 302, Br], [1, "cs", Le, 157, 302, Fo], [1, "cs", 2, 156, 303, 1], [ik, "cs", 2, 157, 303, Br], [1, "cs", kn, 158, 303, 1], [Br, "cs", 2, 157, 304, er], [ik, "cs", C, 156, 304, 1], [ce, "cs", 2, 155, 304, 1], [Fo, "cs", Ok, 153, 304, 1], [V, "cs", 2, 153, 303, 1], [Aj, "cs", 2, 154, 303, 1], [Fo, "cs", Le, 154, 302, Aj], [1, "cs", Ok, 155, 302, 1], [Fo, "cs", Le, 152, 303, 1], [1, "cs", Ok, 152, 302, 1], [1, "cs", Ko, 151, 302, ce], [1, "cs", tr, 149, 303, er], [V, "cs", 0, 145, 304, 1], [dn, "cs", 0, 147, 302, 1], [dn, "cs", 0, 143, 303, dn], [Fo, "cs", Fj, 141, 303, Fo], [1, "cs", V, 147, 304, 1], [dn, "cs", Br, 145, 302, 1], [ce, "cs", 1, 142, 302, 1], [1, "cs", ik, 150, 304, Aj], [1, "cs", 2, 151, 304, Fo], [V, "cs", kn, 151, 303, dn], [Aj, "cs", 2, 150, 303, ce], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, Fo], [V, "cs", 2, 146, 302, Fo], [1, "cs", ij, 144, 302, 1], [1, "cs", pa, 141, 302, 1], [V, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, V], [Aj, "cs", Xn, 142, 303, ce], [V, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", pa, 148, 304, ik], [ce, "cs", kn, 148, 303, 1], [1, "cs", 2, 146, 303, Aj], [ce, "cs", Wq, 145, 303, 1], [1, "cs", pa, 147, 303, ce], [1, "cs", C, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [V, "cs", Ea, 149, 302, Fo], [1, "cs", 3, 143, 302, er], [ik, "cs", jj, 139, 304, er], [1, "cs", Ko, 138, 302, 1], [ik, "cs", V, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", Wq, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [er, "cs", C, 138, 304, er], [1, "cs", 2, 140, 304, ce], [1, "cs", jj, 137, 304, Aj], [Br, "cs", 0, 135, 303, V], [ce, "cs", jj, 133, 304, 1], [1, "cs", ce, 135, 304, Aj], [1, "cs", 1, 136, 302, V], [1, "cs", Xn, 137, 302, 1], [Aj, "cs", Xn, 136, 303, Aj], [1, "cs", kn, 137, 303, Br], [1, "cs", Le, 136, 304, dn], [Br, "cs", kn, 134, 304, 1], [1, "cs", Wq, 134, 303, ik], [1, "cs", 2, 133, 303, er], [Br, "cs", 2, 132, 304, 1], [ce, "cs", 0, 131, 302, Aj], [1, "cs", kq, 134, 302, er], [1, "cs", Fj, 129, 304, 1], [1, "cs", V, 130, 303, V], [1, "cs", Aj, 132, 302, ik], [Fo, "cs", kn, 135, 302, 1], [Aj, "cs", C, 133, 302, Aj], [1, "cs", kn, 132, 303, 1], [1, "cs", Ok, 131, 303, ik], [ik, "cs", pa, 130, 304, Fo], [1, "cs", Ok, 131, 304, er], [ce, "cs", ij, 128, 304, 1], [1, "cs", pa, 129, 303, Br], [ce, "cs", 2, 130, 302, V], [Fo, "cs", Dn, 127, 304, Aj], [1, "cs", pa, 132, 301, 1], [1, "cs", C, 133, 301, V], [1, "cs", Xn, 134, 301, er], [1, "cs", 2, 135, 301, Aj], [ce, "cs", 3, 131, 301, er], [ce, "cs", Ik, 136, 301, V], [1, "cs", Dn, 136, 178, 1], [er, "cs", 0, 136, 183, Br], [1, "cs", 2, 136, 182, Br], [er, "cs", 1, 136, 181, V], [1, "cs", Fj, 136, 179, Fo], [1, "cs", Ik, 136, 180, ik], [1, "cs", Ok, 135, 183, 1], [Br, "cs", Br, 135, 182, dn], [1, "cs", 3, 135, 180, dn], [1, "cs", 0, 134, 183, V], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, Fo], [V, "cs", 1, 132, 183, V], [er, "cs", 3, 131, 183, V], [1, "cs", Ok, 135, 181, 1], [dn, "cs", Wq, 134, 182, dn], [Aj, "cs", 3, 134, 181, 1], [1, "fod", kq, 213, 301, kq], [V, "fod", Ko, 204, 301, 0], [ik, "fod", Fo, 196, 288, jj], [1, "fod", ik, 198, 283, jj], [1, "fod", er, 190, 288, jj], [1, "fod", V, 189, 296, Fj], [1, "fod", Fo, 193, 293, Fj], [1, "fod", 1, 183, 292, 0], [1, "fod", Br, 186, 287, Fj], [1, "fod", 1, 190, 290, Ko], [1, "fod", Br, 218, 271, yk], [Aj, "fod", 1, 220, 266, kq], [Aj, "fod", 1, 211, 268, 0], [Br, "fod", Br, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", Ok, 201, 294, jj], [Br, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, tr], [1, "fod", C, 186, 297, 0], [Aj, "fod", pa, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [dn, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, tr], [1, "fod", 2, 197, 286, yk], [1, "fod", 2, 195, 290, ko], [V, "fod", 2, 186, 288, jj], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [V, "fod", Le, 196, 283, Fj], [1, "fod", 2, 196, 281, yk], [1, "fod", Wq, 201, 280, yk], [ik, "fod", Ok, 205, 287, jj], [V, "fod", C, 209, 283, 0], [Br, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [Br, "fod", pa, 217, 278, yk], [Br, "fod", Ok, 219, 275, jj], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", Ok, 217, 265, 0], [Br, "fod", kn, 213, 267, 0], [Aj, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [Br, "fod", C, 203, 265, 0], [Fo, "fod", Wq, 204, 270, Fj], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, yk], [1, "fod", 2, 211, 260, 0], [dn, "fod", ij, 218, J, yk], [1, "fod", Wq, 219, 262, 0], [1, "fod", Xn, 220, 253, tr], [V, "fod", 2, 211, 257, 0], [ik, "la", B, 198, 27, ce], [Fo, "la", 3, 201, 30, 1], [Fo, "la", fa, 200, 32, 1], [1, "la", 3, 198, 33, V], [1, "la", 3, 196, 33, 1], [1, "la", Dn, 194, 32, 1], [ce, "la", Ea, 194, 28, 1], [1, "la", Fj, 200, 28, 1], [1, "la", Ko, 193, 30, Fo], [1, "la", fa, 196, 27, 1], [ce, "la", Ea, 199, 30, 1], [Br, "la", 3, 197, 29, Fo], [1, "la", sn, 195, 30, Br], [1, "la", Mo, 197, 31, 1], [ik, "la", Ok, 201, 33, Br], [1, "la", In, 202, 34, er], [1, "la", f, 202, 35, Fo], [1, "la", 4, 203, 36, Br], [V, "la", qo, 204, 37, 1], [1, "la", 2, 205, 38, ik], [V, "la", 5, 205, 39, 1], [1, "la", Rj, 205, 40, er], [ce, "la", kn, 206, 41, 1], [V, "la", ik, 207, 42, 1], [Aj, "la", 1, 205, 41, 1], [er, "la", bn, 208, 43, 1], [1, "la", 4, 209, 43, 1], [Aj, "la", 1, 210, 43, V], [Fo, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, ik], [1, "la", 4, 213, 44, Aj], [1, "la", sn, 223, 54, 1], [1, "la", sn, 221, 53, dn], [1, "la", Mo, 219, 53, 1], [1, "la", Ai, 218, 52, Aj], [1, "la", 4, 217, 51, Fo], [ce, "la", Ai, 216, 51, Br], [1, "la", ik, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", V, 210, 44, Fo], [1, "la", 3, 206, 50, 1], [1, "re", kq, 217, 24, ce], [Fo, "re", tr, 207, Sa, 1], [Fo, "de", 44, 54, zr, Ko], [V, "de", 44, 53, eq, kq], [er, "de", 44, 51, 16, 0], [Fo, "de", 44, 49, 13, 0], [Br, "de", 44, 48, Zn, tr], [ce, "de", 21, 78, 293, 0], [V, "cs", 0, 221, 8, 1], [dn, "cs", jj, 224, 9, 1], [1, "cs", Fo, 223, 8, Br], [V, "cs", Le, 224, 8, 1], [ik, "cs", 2, 222, 8, V], [1, "cs", 0, 224, Fq, 1], [1, "cs", ko, 222, 5, ik], [1, "cs", 0, 219, Lq, er], [1, "cs", Fo, 220, 5, ik], [1, "cs", 1, 217, He, 1], [1, "cs", 2, 224, Bk, 1], [1, "cs", 2, 223, 5, dn], [1, "cs", ij, 224, 7, Aj], [1, "cs", 2, 223, 7, V], [1, "cs", 2, 223, 6, dn], [Br, "cs", Xn, 222, 6, Aj], [ce, "cs", 2, 222, 7, ik], [er, "cs", 2, 221, Rk, er], [1, "cs", 2, 221, Fq, V], [1, "cs", 2, 221, Oq, 1], [dn, "cs", 2, 220, 6, 1], [1, "cs", pa, 220, Ba, 1], [1, "cs", pa, 220, 8, Br], [Br, "cs", Le, 219, lr, Fo], [1, "cs", C, 219, 6, 1], [V, "cs", 2, 219, 5, 1], [ce, "cs", 0, 218, U, 1], [er, "cs", 0, 216, 8, Fo], [1, "cs", 2, 218, Oi, dn], [1, "cs", 2, 217, Oi, er], [ce, "cs", ij, 218, 7, dn], [V, "cs", Ok, 218, hn, 1], [1, "cs", Ok, 217, 6, V], [ik, "cs", pa, 217, 5, dn], [1, "cs", ik, 215, Vo, er], [Br, "cs", 1, 213, 5, Aj], [er, "cs", tr, 214, _, 1], [1, "cs", ko, 216, U, 1], [Fo, "cs", Ko, 213, 8, 1], [1, "cs", 0, 211, Hj, 1], [ce, "cs", 0, 209, Wn, ik], [ik, "cs", Mn, 208, 7, Br], [ce, "cs", 0, 207, zn, Br], [1, "cs", Le, 216, hi, ce], [1, "cs", 2, 216, Lq, 1], [V, "cs", 2, 215, 7, ce], [1, "cs", Wq, 215, 8, 1], [1, "cs", kn, 214, 8, 1], [1, "cs", Le, 214, Lq, V], [dn, "cs", Le, 215, U, 1], [ik, "cs", 2, 214, 5, er], [1, "cs", kn, 213, 6, 1], [dn, "cs", Wq, 213, 7, Aj], [1, "cs", 2, 212, 7, 1], [V, "cs", dn, 211, 5, Br], [1, "cs", Fo, 209, ea, ik], [dn, "cs", Le, 212, ea, ce], [1, "cs", 2, 211, 8, 1], [ce, "cs", 2, 210, X, 1], [Aj, "cs", Le, 209, 7, 1], [1, "cs", Xn, 210, Ij, ce], [ik, "cs", 2, 210, 6, 1], [1, "cs", Xn, 212, Vo, 1], [Aj, "cs", 2, 212, 5, ik], [1, "cs", pa, 211, 6, 1], [Aj, "cs", Xn, 210, 5, er], [1, "cs", Ok, 209, Vo, 1], [1, "cs", Le, 208, hn, Fo], [Br, "cs", ij, 208, Ca, 1], [1, "cs", 2, 207, 7, 1], [Fo, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", kn, 206, Cj, Fo], [V, "cs", Wq, 208, 8, ik], [1, "cs", 2, 206, 6, dn], [1, "cs", Mn, 204, 8, er], [dn, "cs", kq, 205, Vo, V], [1, "cs", Mn, 203, Rj, 1], [V, "cs", 0, 202, 7, er], [ce, "cs", 0, 199, 8, 1], [1, "cs", ko, 200, Vo, 1], [er, "cs", Mn, 197, H, 1], [Fo, "cs", Fj, 195, 8, V], [1, "cs", yk, 194, 6, 1], [ce, "cs", 1, 202, Oi, Br], [1, "cs", 1, 206, 7, 1], [V, "cs", V, 201, Cj, 1], [1, "cs", 1, 197, lr, 1], [Aj, "cs", Fo, 192, E, V], [Br, "cs", ce, 195, Ca, ik], [V, "cs", ij, 205, 7, 1], [1, "cs", 2, 205, 8, Br], [1, "cs", 2, 206, 8, V], [er, "cs", 2, 204, Lq, Br], [ik, "cs", Le, 204, 6, Aj], [1, "cs", Ok, 204, 5, dn], [1, "cs", Ok, 205, 5, Fo], [ik, "cs", 2, 203, 6, Fo], [Fo, "cs", Wq, 203, 7, 1], [ce, "cs", Wq, 203, 8, 1], [er, "cs", 2, 201, 8, dn], [Br, "cs", 2, 200, 8, 1], [1, "cs", ij, 200, 7, V], [Aj, "cs", Le, 201, 7, 1], [1, "cs", 2, 201, hi, 1], [1, "cs", 2, 202, Ca, Fo], [1, "cs", pa, 202, hn, 1], [er, "cs", 2, 200, Wn, dn], [1, "cs", kn, 199, Wn, Fo], [1, "cs", 2, 197, Bk, 1], [er, "cs", Wq, 196, Bk, 1], [Aj, "cs", Xn, 198, 5, 1], [1, "cs", 2, 198, So, ik], [1, "cs", 2, 199, Fq, 1], [ik, "cs", C, 199, 7, 1], [Aj, "cs", Ok, 198, 7, 1], [V, "cs", 2, 198, X, 1], [1, "cs", Wq, 197, Ij, Fo], [1, "cs", ij, 196, E, 1], [1, "cs", pa, 196, xo, 1], [dn, "cs", C, 196, 6, ce], [dn, "cs", 2, 195, zk, ce], [ce, "cs", kn, 195, 7, Aj], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [V, "cs", kn, 193, 7, er], [1, "cs", Le, 193, 6, 1], [Aj, "cs", Ok, 193, U, 1], [1, "cs", 2, 194, Ca, dn], [dn, "cs", 0, 192, 5, 1], [Br, "cs", kq, 191, S, Fo], [Aj, "cs", 0, 190, 6, 1], [Aj, "cs", ko, 188, wq, 1], [ik, "cs", 0, 186, 8, Br], [1, "cs", 0, 186, 5, Br], [dn, "cs", Ko, 184, 7, 1], [1, "cs", ko, 182, 8, 1], [1, "cs", 0, 181, hi, 1], [Fo, "cs", V, 189, 8, 1], [1, "cs", ce, 183, 8, Aj], [1, "cs", 1, 188, Wn, 1], [1, "cs", V, 185, 6, Aj], [dn, "cs", 1, 180, 7, V], [1, "cs", ce, 183, 5, 1], [1, "cs", 1, 178, zn, 1], [Br, "cs", 1, 177, 6, Br], [1, "cs", Aj, 173, He, 1], [1, "cs", ik, 171, Ba, 1], [er, "cs", tr, 177, lr, Fo], [1, "cs", tr, 175, 7, 1], [V, "cs", Ko, 179, Oq, 1], [er, "cs", 0, 174, 5, 1], [Fo, "cs", jj, 176, 5, 1], [Fo, "cs", 0, 172, Oi, 1], [ik, "cs", 0, 170, ea, 1], [1, "cs", 0, 169, So, 1], [1, "cs", 2, 192, 6, 1], [er, "cs", Le, 192, 8, Fo], [Fo, "cs", Ok, 191, _k, Fo], [Fo, "cs", 2, 191, 6, 1], [1, "cs", Ok, 191, Bk, V], [1, "cs", kn, 190, Cj, dn], [1, "cs", Xn, 189, 5, 1], [1, "cs", 2, 189, _, ik], [1, "cs", 2, 189, 7, er], [1, "cs", 2, 190, He, 1], [Fo, "cs", 2, 190, 8, V], [ce, "cs", pa, 188, 8, Aj], [Aj, "cs", Ok, 187, 8, Aj], [Aj, "cs", kn, 187, 7, 1], [1, "cs", 2, 187, 6, dn], [1, "cs", C, 188, 6, Aj], [1, "cs", Ok, 187, Bk, 1], [er, "cs", ij, 186, 6, V], [1, "cs", 2, 186, 7, 1], [1, "cs", Xn, 185, Lq, 1], [1, "cs", Ok, 185, ea, 1], [1, "cs", kn, 184, Oi, Br], [V, "cs", Le, 183, Hj, 1], [1, "cs", pa, 183, 6, er], [er, "cs", 2, 184, 6, dn], [ik, "cs", kn, 184, 5, V], [1, "cs", ij, 185, Cj, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, Ij, 1], [1, "cs", 2, 181, Rk, er], [ik, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, X, Fo], [Fo, "cs", 2, 179, 8, ik], [V, "cs", 2, 182, 5, ce], [1, "cs", Ok, 181, 5, 1], [1, "cs", Le, 180, 5, Br], [Aj, "cs", Le, 180, zk, 1], [V, "cs", 2, 179, 6, 1], [Aj, "cs", C, 179, 7, 1], [1, "cs", pa, 178, 7, 1], [Br, "cs", 2, 178, 6, 1], [ik, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, Rj, 1], [1, "cs", 2, 177, wq, 1], [ik, "cs", 2, 176, 7, 1], [1, "cs", Ok, 176, 6, dn], [1, "cs", 2, 175, za, ce], [1, "cs", Le, 175, 5, Fo], [1, "cs", kn, 176, 8, 1], [1, "cs", 2, 174, X, 1], [ce, "cs", 2, 175, zn, Br], [1, "cs", C, 173, 8, dn], [1, "cs", 2, 174, He, 1], [1, "cs", 2, 173, 6, ce], [Fo, "cs", Le, 174, So, 1], [1, "cs", 2, 172, Bk, 1], [ik, "cs", Wq, 173, 5, ce], [ik, "cs", 2, 172, hi, V], [1, "cs", 2, 172, _k, 1], [V, "cs", Ok, 171, 8, V], [1, "cs", 2, 170, Ba, 1], [1, "cs", 2, 170, zk, 1], [V, "cs", kn, 170, Oq, Fo], [1, "cs", Xn, 171, 5, er], [ce, "cs", 2, 171, Fq, 1], [V, "cs", 2, 169, 5, ce], [1, "cs", Wq, 169, 7, V], [1, "cs", 2, 169, 8, 1], [ce, "cs", 1, 168, wq, 1], [Aj, "cs", 1, 166, Wn, er], [er, "cs", 1, 164, E, 1], [1, "cs", 1, 160, 7, Br], [Fo, "cs", dn, 156, 8, er], [Br, "cs", 0, 166, 8, 1], [ik, "cs", 0, 168, 5, 1], [1, "cs", jj, 164, zk, 1], [1, "cs", 0, 162, _k, 1], [Fo, "cs", 0, 158, zn, 1], [1, "cs", ko, 157, 6, Aj], [V, "cs", 0, 161, U, ik], [ce, "cs", kq, 159, 5, 1], [Fo, "cs", 0, 155, 7, 1], [Fo, "cs", 0, 154, 5, 1], [ce, "cs", 0, 151, 7, ce], [1, "cs", 1, 153, ea, ce], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, ce], [1, "cs", 2, 168, 8, 1], [1, "cs", kn, 167, Oi, ce], [1, "cs", C, 167, 7, 1], [V, "cs", 2, 167, 6, 1], [Aj, "cs", Xn, 167, Cj, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, Lq, er], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", Wq, 165, Rj, Aj], [Br, "cs", 2, 164, 5, Br], [Fo, "cs", 2, 163, 5, Fo], [1, "cs", Le, 162, 5, 1], [1, "cs", 2, 162, zk, er], [ce, "cs", 2, 163, So, 1], [1, "cs", ij, 163, 7, Br], [V, "cs", Wq, 163, 8, dn], [Fo, "cs", C, 164, 8, 1], [Fo, "cs", Wq, 165, 8, ce], [dn, "cs", ij, 161, 8, 1], [dn, "cs", pa, 162, 8, Fo], [1, "cs", 2, 160, X, 1], [V, "cs", 2, 159, 8, Aj], [1, "cs", 2, 159, iq, ik], [V, "cs", Le, 159, Vo, 1], [1, "cs", 2, 160, U, V], [1, "cs", 2, 160, 6, er], [dn, "cs", 2, 161, hn, 1], [ce, "cs", C, 161, 7, 1], [Aj, "cs", 2, 157, _k, Fo], [1, "cs", kn, 158, _k, ce], [Fo, "cs", Ok, 158, 6, 1], [1, "cs", kn, 158, 5, er], [1, "cs", Le, 155, Wn, dn], [Aj, "cs", 2, 155, 6, er], [ce, "cs", Xn, 156, 6, er], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, xo, V], [1, "cs", Ok, 154, X, 1], [Aj, "cs", 2, 154, He, V], [er, "cs", 2, 154, 6, 1], [Fo, "cs", kn, 152, 8, 1], [V, "cs", 2, 153, Lq, er], [1, "cs", 2, 153, 6, 1], [1, "cs", pa, 153, 5, dn], [Fo, "cs", kn, 152, 5, ce], [dn, "cs", 2, 152, 6, ik], [1, "cs", Xn, 152, 7, 1], [1, "cs", 2, 151, zk, 1], [er, "cs", Le, 157, Oq, 1], [1, "cs", 1, 156, 5, ik], [V, "cs", 0, 150, 5, 1], [ce, "cs", Ko, 149, Ij, V], [1, "cs", ko, 147, Oi, 1], [1, "cs", 0, 146, 5, Aj], [1, "cs", tr, 144, iq, dn], [er, "cs", Fj, 142, Wn, 1], [Br, "cs", dn, 147, 6, V], [V, "cs", 1, 145, X, V], [V, "cs", 1, 144, U, 1], [1, "cs", Xn, 148, 5, 1], [1, "cs", C, 149, 5, V], [1, "cs", 2, 150, H, ik], [1, "cs", 2, 150, 8, ce], [1, "cs", 2, 151, 8, 1], [V, "cs", Wq, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, S, Br], [ce, "cs", pa, 149, _, Aj], [1, "cs", Ok, 148, 6, V], [Aj, "cs", 2, 148, _k, Br], [1, "cs", 2, 147, 7, 1], [Br, "cs", Le, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [V, "cs", Xn, 146, _k, V], [V, "cs", Wq, 146, 8, 1], [ik, "cs", 2, 145, Lq, Br], [1, "cs", Xn, 145, Vo, Aj], [1, "cs", C, 145, Oq, 1], [Br, "cs", Le, 144, Vo, 1], [Aj, "cs", C, 143, 5, 1], [1, "cs", kn, 143, zk, Fo], [1, "cs", Xn, 142, 6, 1], [1, "cs", 2, 141, Ca, Fo], [1, "cs", kn, 224, rk, 1], [V, "cs", ko, 224, Qn, er], [1, "cs", 0, 224, 13, 1], [er, "cs", 0, 224, sj, ik], [er, "cs", ko, 224, Dj, er], [V, "cs", jj, 224, 22, Fo], [Br, "cs", 0, 224, 24, Br], [ce, "cs", 0, 224, 29, Fo], [ik, "cs", Ko, 224, 33, Aj], [er, "cs", tr, 224, 35, Br], [1, "cs", ko, 224, 38, Br], [1, "cs", 1, 224, gj, ce], [1, "cs", 1, 224, 20, ik], [1, "cs", 1, 224, 27, ce], [ce, "cs", ce, 224, 31, ce], [dn, "cs", V, 224, 36, 1], [ce, "cs", Xn, 224, 12, Br], [dn, "cs", kn, 224, 15, 1], [Br, "cs", Ok, 224, 16, 1], [er, "cs", Le, 224, no, V], [1, "cs", 2, 224, 21, V], [Fo, "cs", C, 224, 23, 1], [Aj, "cs", Wq, 224, 25, dn], [1, "cs", 2, 224, 26, 1], [1, "cs", Ok, 224, 28, 1], [1, "cs", 2, 224, 30, V], [1, "cs", 2, 224, 32, ce], [1, "cs", ij, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", yk, 224, 41, 1], [dn, "cs", tr, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [V, "cs", 0, 224, 52, Fo], [1, "cs", 0, 224, 57, ce], [Aj, "cs", V, 224, 47, 1], [1, "cs", ij, 224, 40, 1], [ce, "cs", 2, 224, 42, 1], [1, "cs", Ok, 224, 43, V], [1, "cs", 2, 224, 45, 1], [ce, "cs", 2, 224, 49, er], [1, "cs", Br, 224, 50, dn], [1, "cs", 2, 224, 51, dn], [1, "la", 3, 224, 54, 1], [ik, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", ko, 224, 60, 1], [ce, "cs", Ko, 224, 64, 1], [Br, "cs", yk, 224, 66, ik], [dn, "cs", 0, 224, 70, ik], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, Fo], [1, "cs", Br, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", ik, 224, 72, ce], [1, "cs", ik, 224, 76, 1], [er, "cs", dn, 224, 80, 1], [Fo, "cs", Br, 224, 83, 1], [1, "cs", 1, 224, 91, Fo], [1, "cs", Fo, 224, 95, 1], [V, "cs", 1, 224, 97, dn], [Aj, "cs", 0, 224, 85, V], [1, "cs", 0, 224, 88, Aj], [Aj, "cs", yk, 224, 93, er], [Fo, "cs", kq, 224, 98, 1], [1, "cs", Wq, 224, 59, ik], [Aj, "cs", 2, 224, 63, Aj], [1, "cs", 2, 224, 65, ce], [Br, "cs", 2, 224, 67, 1], [ik, "cs", C, 224, 69, 1], [1, "cs", 2, 224, 71, ce], [ce, "cs", kn, 224, 73, 1], [1, "cs", Wq, 224, 75, 1], [1, "cs", Le, 224, 78, 1], [1, "cs", pa, 224, 79, 1], [1, "cs", Xn, 224, 81, ik], [Br, "cs", C, 224, 82, 1], [ce, "cs", 2, 224, 84, dn], [dn, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", Le, 224, 89, dn], [Br, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [Fo, "cs", 2, 224, 94, 1], [Aj, "cs", Ok, 224, 96, 1], [Br, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, wa, 1], [1, "cs", tr, 224, 101, er], [Aj, "cs", 1, 224, 103, 1], [er, "cs", ij, 224, 102, Fo], [1, "cs", 0, 222, zq, Br], [1, "cs", Le, 223, Hk, Fo], [1, "cs", 2, 222, 9, Aj], [er, "cs", Xn, 221, 9, dn], [1, "cs", Le, 223, 10, 1], [1, "cs", 2, 223, Ro, 1], [er, "cs", 2, 223, 12, dn], [ce, "cs", Ik, 223, 13, dn], [1, "cs", _i, 222, Qn, dn], [1, "cs", sn, 220, Ze, er], [Aj, "cs", Ea, 219, 9, ce], [1, "cs", sn, 221, 10, 1], [er, "re", kn, 219, 13, dn], [1, "re", 1, 218, N, V], [1, "re", 1, 214, 13, ik], [1, "cs", ko, 221, 20, 1], [Aj, "cs", ik, 223, 18, 1], [1, "cs", pa, 222, k, 1], [V, "cs", ij, 223, 19, 1], [1, "cs", Le, 223, 20, Br], [er, "cs", 2, 222, fq, 1], [Fo, "cs", 2, 220, 21, 1], [Aj, "cs", 0, 219, 21, er], [Fo, "cs", Kk, 221, 21, Br], [1, "cs", 3, 218, 21, ik], [V, "cs", 3, 222, 21, V], [1, "cs", 3, 220, 22, 1], [1, "cs", sn, 219, 22, Aj], [1, "cs", 3, 221, 22, 1], [Fo, "cs", kq, 211, L, 1], [1, "cs", 1, 211, 10, Fo], [1, "cs", 1, 210, 12, ce], [Fo, "cs", ko, 211, na, 1], [1, "cs", ij, 210, Ze, er], [1, "cs", pa, 210, Fn, Br], [ce, "cs", 2, 210, oo, 1], [1, "cs", pa, 212, I, Fo], [Br, "cs", Wq, 210, 13, ik], [Br, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, Un, 1], [Aj, "cs", kn, 212, $q, dn], [er, "cs", 2, 210, Zn, V], [1, "cs", 3, 211, 15, er], [dn, "cs", 3, 213, 9, Aj], [dn, "cs", 3, 212, oa, Br], [Fo, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, I, 1], [1, "la", fa, 223, 22, Aj], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, xr, 1], [1, "la", B, 209, 10, Br], [dn, "la", tr, 209, tn, 1], [V, "la", 4, 209, Cq, ik], [1, "la", 4, 219, 23, 1], [ce, "la", vo, 210, Ne, 1], [Aj, "la", 3, 217, 22, 1], [1, "la", mj, 212, 16, V], [1, "la", kn, 214, 19, 1], [Br, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, er], [ce, "la", 4, 215, Q, Aj], [V, "la", Wq, 216, 17, dn], [er, "la", 5, 216, 16, 1], [Aj, "la", Oq, 216, $n, 1], [1, "la", 1, 217, 16, ce], [1, "la", 2, 218, $j, Fo], [Fo, "la", C, 216, 14, ik], [ik, "la", 2, 219, 16, 1], [V, "la", Bk, 220, Sq, ik], [Aj, "la", Cj, 216, 13, ce], [Br, "la", f, 217, m, 1], [1, "cs", 0, 211, 44, 1], [ik, "cs", er, 212, 45, Br], [dn, "cs", 2, 213, 45, dn], [1, "cs", 0, 214, 46, dn], [er, "cs", ij, 215, 46, 1], [1, "cs", Ea, 213, 46, Aj], [er, "cs", 3, 214, 47, Br], [1, "cs", _i, 214, 48, 1], [dn, "cs", fa, 216, 46, 1], [1, "cs", 0, 208, 20, Br], [1, "cs", 0, 210, 21, V], [Aj, "cs", 0, 212, 23, 1], [ik, "cs", 0, 213, 25, 1], [Fo, "cs", ij, 213, 24, Br], [dn, "cs", Le, 211, 22, 1], [Fo, "cs", 2, 210, aq, 1], [1, "cs", Wq, 209, 21, ik], [Fo, "cs", kn, 209, 20, 1], [Fo, "cs", 2, 211, 21, er], [1, "cs", Xn, 212, 22, 1], [Aj, "cs", 2, 213, 23, ik], [1, "cs", 3, 213, 26, er], [Aj, "cs", Ea, 207, 20, 1], [Fo, "la", 4, 192, 33, 1], [V, "la", mj, 191, 34, V], [er, "la", 4, 190, 35, Aj], [1, "la", Kk, 189, 37, ce], [V, "la", 3, 188, 39, 1], [Br, "la", 4, 186, 40, 1], [Br, "la", 4, 185, 39, er], [1, "la", Yn, 184, 39, 1], [1, "la", kn, 183, 39, 1], [ce, "la", er, 182, 40, er], [V, "la", 2, 181, 41, Fo], [dn, "la", 5, 180, 41, 1], [Aj, "la", 5, 179, 41, 1], [1, "la", gn, 192, 28, ce], [Br, "la", Yn, 191, 28, 1], [ik, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [Fo, "la", gn, 187, 26, 1], [Fo, "la", 4, 186, 25, Br], [1, "la", In, 185, 25, 1], [ce, "la", 4, 184, 24, 1], [V, "la", 5, 184, 23, 1], [Br, "la", 2, 184, 22, 1], [dn, "la", Oq, 184, 21, ce], [ce, "la", er, 183, aq, er], [1, "la", 5, 182, 20, 1], [Br, "la", 2, 181, aq, V], [1, "la", Wn, 180, 20, 1], [1, "la", 2, 179, _j, 1], [ce, "la", qa, 178, An, ce], [ik, "la", lk, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, ce], [V, "cs", 0, 175, ok, ik], [er, "cs", 0, 180, $j, ce], [V, "cs", yk, 174, bk, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, Br], [ik, "cs", 1, 172, Yj, dn], [1, "cs", 1, 181, Ne, 1], [dn, "cs", C, 179, 15, 1], [dn, "cs", 2, 177, 16, Fo], [1, "cs", 2, 176, 16, Br], [1, "cs", kn, 174, Yj, er], [1, "cs", Xn, 173, 19, dn], [V, "cs", 2, 172, k, er], [dn, "cs", Ok, 173, on, ce], [Br, "cs", 2, 173, 17, dn], [1, "cs", 2, 174, Lj, 1], [Fo, "cs", 2, 174, Fa, 1], [1, "cs", Ok, 175, Jo, dn], [Br, "cs", Wq, 176, 15, 1], [Fo, "cs", kn, 178, 15, er], [1, "cs", 2, 178, Fa, Br], [Fo, "cs", kn, 179, z, V], [1, "cs", Ok, 180, 15, 1], [1, "cs", Ok, 181, 16, 1], [1, "cs", 3, 182, sk, 1], [1, "cs", sn, 172, 21, ce], [1, "la", Br, 175, qi, er], [ce, "la", C, 174, 20, 1], [1, "la", pa, 173, 20, 1], [1, "la", ik, 180, 17, ik], [1, "la", 2, 181, 17, er], [1, "la", 3, 191, Ye, 1], [ik, "s", 0, 217, 30, 1], [er, "s", Mn, 208, 35, 1], [1, "s", 0, 204, 24, er], [V, "s", Fo, 218, 32, 1], [ik, "s", ik, 207, 34, dn], [er, "s", 1, 202, 23, dn], [1, "s", 1, 195, 16, 1], [ce, "s", 2, 222, 28, 1], [V, "s", pa, 212, 38, 1], [Br, "s", 2, 207, 23, Fo], [ik, "s", 2, 202, 12, 1], [1, "s", 2, 195, Ta, Fo], [Aj, "s", 1, 191, tn, Br], [Aj, "s", 0, 187, 16, Aj], [Fo, "s", 2, 188, z, ce], [1, "s", 1, 186, ve, 1], [1, "s", 1, 201, 16, dn], [1, "g", ce, 216, 31, Aj], [1, "g", 0, 200, Nk, 1], [1, "g", 0, 202, 40, er], [er, "g", kq, 189, 32, ik], [er, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, Br], [Fo, "g", pa, 198, 37, ce], [Fo, "s", Ko, 193, 39, ce], [1, "s", 0, 201, 45, dn], [Fo, "a", 0, 210, 29, V], [1, "a", 0, 200, fq, 1], [ce, "cs", 0, 200, 34, Br], [Fo, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [Fo, "cs", 1, 191, 31, Aj], [ce, "cs", 2, 202, 32, 1], [1, "cs", Xn, 194, 26, 1], [1, "cs", 2, 192, 27, er], [1, "cs", 2, 192, 32, 1], [ik, "cs", Xn, 203, 31, 1], [1, "cs", 2, 202, 31, dn], [1, "cs", kn, 202, 30, er], [V, "cs", lk, 202, 29, Br], [Fo, "cs", B, 201, 32, ce], [1, "cs", _i, 199, 35, dn], [Fo, "cs", 0, 193, 34, 1], [1, "cs", ij, 194, 34, er], [ce, "cs", 2, 198, 35, Aj], [V, "cs", 3, 199, 34, dn], [Aj, "cs", 3, 191, 29, 1], [ce, "cs", 0, 191, 30, 1], [1, "cs", B, 190, 29, 1], [Br, "la", 3, 180, 69, V], [V, "la", 3, 182, 68, 1], [1, "la", ta, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, ce], [1, "la", 3, 182, 72, 1], [Fo, "la", 3, 180, 71, 1], [V, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", kq, 183, 74, 1], [V, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", pa, 182, 74, Aj], [Aj, "cs", 2, 181, 73, 1], [Br, "cs", Le, 180, 74, Aj], [er, "cs", ij, 181, 74, 1], [1, "la", jj, 184, 70, ce], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, ce], [1, "cs", fa, 184, 67, er], [1, "cs", Ik, 182, 67, ce], [1, "la", bn, 187, 69, 1], [ce, "la", 1, 188, 68, 1], [Aj, "la", 4, 189, 68, 1], [ce, "la", 2, 190, 68, 1], [ik, "la", 1, 191, 68, 1], [dn, "la", 4, 192, 68, 1], [Fo, "la", ij, 193, 68, 1], [1, "la", gn, 194, 69, 1], [1, "la", Wq, 194, 70, 1], [1, "la", Bk, 195, 71, 1], [er, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, Aj], [Br, "la", qo, 196, 71, 1], [1, "la", V, 197, 73, 1], [V, "la", 5, 196, 73, ik], [Br, "la", Wn, 198, 73, Fo], [dn, "la", 3, 201, 73, ce], [Aj, "la", Kk, 203, 72, er], [1, "la", Ai, 199, 73, ik], [V, "la", Aj, 205, 72, 1], [1, "la", ij, 206, 72, 1], [Br, "la", 5, 207, 72, 1], [1, "la", er, 208, 72, 1], [1, "la", 1, 209, 73, 1], [Br, "la", 2, 209, 74, 1], [ce, "la", 5, 211, 76, ce], [dn, "la", mj, 210, 75, 1], [dn, "la", Oq, 212, 76, ik], [1, "la", gn, 202, 75, 1], [V, "la", 2, 203, 76, 1], [dn, "la", In, 204, 77, 1], [1, "la", Ok, 204, 78, Fo], [ce, "la", 2, 204, 79, dn], [1, "la", 5, 204, 80, 1], [1, "cs", yk, 202, 74, ik], [Aj, "cs", er, 203, 74, 1], [Aj, "cs", 2, 204, 73, dn], [1, "cs", 2, 203, 75, 1], [Br, "cs", Ik, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [ik, "cs", 0, 205, 74, er], [1, "cs", Xn, 204, 74, er], [ce, "cs", 2, 204, 75, dn], [1, "cs", 2, 206, 73, ik], [1, "cs", fa, 207, 73, ce], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [Br, "la", sn, 183, 66, Aj], [1, "la", Yn, 183, 65, Fo], [ik, "la", 4, 184, 64, 1], [1, "la", Yn, 185, 63, ik], [ce, "la", 1, 185, 62, Fo], [Aj, "la", 2, 185, 61, ik], [1, "la", C, 185, 60, 1], [ik, "la", 4, 186, 59, 1], [1, "la", Br, 187, 58, 1], [1, "la", kn, 187, 57, dn], [dn, "la", Wq, 187, 56, ik], [1, "s", 0, 191, 60, 1], [ik, "s", 1, 195, 58, dn], [1, "s", 1, 199, 46, 1], [1, "s", Wq, 202, 49, er], [1, "g", 2, 197, 55, dn], [dn, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, er], [1, "g", Fj, 210, 61, 1], [Aj, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, dn], [1, "g", yk, 175, 25, 1], [1, "g", 0, 168, 32, 1], [Br, "g", dn, 179, 28, 1], [Fo, "g", 1, 161, an, 1], [er, "g", kn, 172, tn, ik], [er, "g", Xn, 160, 25, dn], [er, "g", 2, 157, 39, 1], [1, "g", Xn, 170, 43, 1], [1, "g", Wq, 202, 67, ik], [1, "g", 2, 217, 72, dn], [1, "g", 2, 214, 82, dn], [1, "g", 2, 193, 86, 1], [ce, "g", 2, 168, 60, er], [1, "g", Xn, 165, 78, dn], [1, "g", pa, 173, 88, 1], [Aj, "s", Ko, 185, 51, 1], [ik, "s", 0, 175, 44, 1], [1, "s", Ko, 165, 50, 1], [1, "s", Mn, 160, 32, dn], [dn, "s", 1, 162, 30, ik], [1, "s", Br, 176, 28, Aj], [1, "s", ik, 154, jq, 1], [dn, "s", dn, 184, 49, 1], [dn, "s", Aj, 192, 62, 1], [Aj, "s", ce, 216, 62, ce], [1, "s", dn, 204, 65, Fo], [1, "s", 1, 217, 79, 1], [V, "s", ik, 206, 86, Br], [1, "la", 3, 211, 69, ik], [ik, "la", 4, 215, 69, 1], [er, "la", U, 201, 81, Fo], [Aj, "la", 1, 207, 83, er], [V, "la", 3, 173, 32, V], [1, "la", 2, 181, 45, er], [Br, "la", Fo, 178, 38, 1], [Aj, "la", Br, 213, 69, Aj], [er, "la", 5, 214, 69, Aj], [1, "la", oj, 216, 68, 1], [1, "la", 0, 191, 78, Aj], [1, "la", 3, 191, 80, Fo], [1, "la", 3, 189, 79, 1], [Fo, "g", 2, 150, 29, 1], [dn, "g", ij, 154, 67, dn], [1, "g", 2, 202, 94, ik], [V, "g", 2, 155, 90, 1], [1, "s", ij, 215, 80, Br], [ik, "s", Wq, 204, 62, 1], [Aj, "s", 2, 218, 60, 1], [ce, "s", 2, 194, 62, 1], [Fo, "s", 0, 216, 86, 1], [1, "s", yk, 211, 93, ce], [1, "la", 0, 216, 92, 1], [1, "la", Mn, 151, 96, V], [1, "la", 1, 155, 95, ik], [Br, "la", 4, 214, 88, 1], [Fo, "s", Ko, 205, 99, 1], [1, "s", Aj, 217, 88, Br], [1, "s", dn, 213, 94, 1], [1, "s", dn, 202, 97, 1], [ik, "s", Mn, 199, 85, V], [ce, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [dn, "s", er, 192, 97, 1], [1, "la", 3, 196, 92, er], [1, "la", Aj, 199, 91, er], [1, "la", V, 220, 91, Aj], [1, "la", Fj, 219, 77, ik], [1, "la", 0, 200, 59, 1], [1, "la", Dn, 188, 87, Br], [ik, "la", Ko, 183, 94, 1], [V, "la", 1, 187, 83, er], [1, "la", 1, 175, 82, Fo], [1, "la", Fo, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [Aj, "la", 3, 159, 80, Aj], [1, "la", 3, 167, 15, ik], [er, "la", V, 164, 17, 1], [1, "la", ce, 172, 28, 1], [V, "la", fa, 153, 24, 1], [er, "la", gn, 164, 91, 1], [ce, "la", bn, 156, 82, 1], [ik, "la", 4, 149, 90, Fo], [V, "s", 0, 178, 85, ce], [1, "s", ce, 180, 85, er], [Aj, "s", 0, 163, 96, 1], [Br, "s", 0, 159, 86, V], [1, "s", 0, 185, 78, V], [1, "s", V, 194, 75, Br], [V, "s", Le, 195, 76, 1], [ik, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, Aj], [1, "s", 2, 166, 97, 1], [ik, "s", Xn, 177, 97, dn], [er, "s", 0, 149, 85, er], [ik, "s", 1, 151, 83, V], [Aj, "s", V, 175, 74, ik], [1, "s", Ko, 174, 72, ik], [dn, "la", 3, 168, 71, ce], [1, "la", lk, 180, 60, er], [1, "s", 0, 156, 63, ce], [dn, "s", kq, 151, 47, 1], [1, "s", 1, 158, 64, Fo], [dn, "s", 1, 161, 75, V], [Aj, "s", ce, 162, 51, Fo], [Fo, "s", Br, 175, 45, Br], [ce, "s", Fo, 152, 47, V], [ik, "s", 1, 159, 33, dn], [1, "s", Aj, 152, on, Fo], [Fo, "s", Fj, 151, eq, 1], [ik, "s", 0, 166, 22, ce], [ik, "s", 0, 170, 63, er], [ik, "s", 2, 172, 62, V], [V, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", Le, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", mj, 177, 68, 1], [1, "la", fa, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", ce, 172, 67, 1], [er, "la", 4, 171, 67, 1], [Fo, "la", bn, 170, 66, 1], [Br, "la", 4, 169, 66, Br], [Fo, "la", Fo, 168, 66, 1], [Aj, "la", 4, 167, 67, 1], [1, "la", ce, 166, 67, 1], [ce, "la", 4, 165, 68, 1], [Aj, "la", Bk, 164, 68, 1], [1, "la", Ok, 163, 68, ce], [V, "la", 5, 162, 68, 1], [1, "la", C, 161, 68, er], [1, "la", B, 153, 72, 1], [1, "la", Kk, 163, 60, Aj], [1, "la", Dn, 164, 42, 1], [ce, "la", 0, 155, 51, ce], [1, "la", V, 168, 42, 1], [V, "la", gn, 158, 48, 1], [1, "la", 4, 178, 57, Br], [Aj, "la", kr, 151, 69, dn], [er, "la", pa, 170, 74, Fo], [ce, "la", C, 160, 84, 1], [1, "la", ij, 174, 92, V], [V, "la", 2, 188, 90, 1], [ce, "la", 2, 209, 84, Br], [Fo, "la", pa, 206, 93, Aj], [ik, "la", U, 156, 70, 1], [1, "la", 5, 165, 57, ce], [1, "la", 5, 182, 58, 1], [Br, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [er, "la", er, 152, 53, 1], [1, "la", ce, 152, 37, 1], [er, "la", 2, 163, Mk, 1], [1, "de", 12, 219, 12, Ko], [ik, "de", gj, 203, 13, Ko], [ce, "de", 15, 220, Yo, jj], [1, "de", pk, 223, 15, 0], [V, "de", 12, 213, zq, 0], [1, "de", 37, 217, 19, jj], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, zq, yk], [Aj, "de", 40, 214, Yq, yk], [1, "de", 40, 222, 16, 0], [ce, "de", 40, 209, Tq, 0], [ce, "de", 37, 212, 18, tr], [Br, "de", 38, 215, 26, tr], [1, "de", 37, 222, 25, 0], [ce, "de", 40, 221, 29, 0], [er, "de", 12, 220, 27, 0], [ik, "de", eq, 213, 27, 0], [1, "de", Yq, 215, 30, jj], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [Aj, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [ik, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, Fj], [Aj, "de", _o, 223, 38, Mn], [1, "de", P, 213, 38, yk], [Fo, "de", mk, 222, 44, Fj], [1, "de", nk, 208, 33, jj], [1, "de", 15, 206, 23, 0], [1, "de", qj, 205, 28, 0], [ce, "de", zr, 211, 23, 0], [1, "de", mk, 201, 20, Mn], [ik, "de", Wa, 198, 9, kq], [ik, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [ce, "de", 37, 205, 13, 0], [er, "de", 39, 204, 9, Mn], [1, "de", 40, 196, de, ko], [1, "de", 40, 198, 18, 0], [Br, "de", 37, 192, 11, 0], [er, "de", 37, 199, 24, kq], [ce, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, Ko], [V, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, Ta, 0], [1, "de", 39, 192, N, tr], [ik, "de", 37, 185, m, yk], [dn, "de", co, 188, Ne, 0], [er, "de", P, 185, Y, 0], [Aj, "de", ve, 189, xr, kq], [1, "de", 15, 187, 22, 0], [Br, "de", 15, 180, yn, 0], [dn, "de", 12, 177, 14, Ko], [1, "de", re, 173, rq, 0], [Br, "de", 14, 171, 15, 0], [V, "de", 40, 182, L, 0], [dn, "de", 39, 179, 13, 0], [Br, "de", 39, 175, Ze, jj], [ik, "de", 40, 173, 14, yk], [1, "de", 37, 169, 11, 0], [ik, "de", 37, 163, rk, Mn], [Br, "de", 38, 164, Xq, yk], [Fo, "de", 39, 170, 20, 0], [Fo, "de", 40, 160, Lj, 0], [1, "de", 40, 154, 10, yk], [ik, "de", 40, 165, 23, 0], [dn, "de", 40, 150, 19, Ko], [dn, "de", 37, 155, $j, 0], [V, "de", 39, 146, zq, tr], [1, "de", 12, 159, _o, 0], [1, "de", 13, 151, xr, Ko], [V, "de", 14, 150, gj, ko], [Aj, "de", 15, 153, 19, 0], [Fo, "de", j, 161, 25, Fj], [1, "de", Zn, 169, 25, 0], [V, "de", 15, 176, 25, yk], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [er, "de", 14, 181, 36, Mn], [ik, "de", 37, 186, 33, Mn], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [ik, "de", 40, 175, 31, Mn], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, tr], [1, "de", 38, 162, 32, 0], [dn, "de", 38, 168, 45, 0], [Br, "de", 38, 173, 45, ko], [1, "de", 39, 160, 35, Ko], [1, "de", 40, 161, 42, kq], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [Fo, "de", 40, 150, 32, Mn], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [Br, "de", 37, 154, 45, ko], [1, "de", 39, 149, 45, ko], [dn, "de", 40, 150, 50, Mn], [1, "de", 40, 160, 52, Mn], [1, "de", 37, 164, 52, jj], [dn, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, ko], [er, "de", 12, 167, 32, 0], [1, "de", Ui, 158, 32, 0], [Br, "de", 14, 149, 28, 0], [ce, "de", $q, 163, 30, Fj], [er, "de", 14, 158, 39, 0], [ik, "de", 12, 171, 43, ko], [Aj, "de", 12, 174, 36, 0], [dn, "de", de, 151, 43, Ko], [Fo, "de", 13, 152, 48, 0], [1, "de", Yq, 164, 49, 0], [Aj, "de", 15, 149, 52, tr], [V, "de", de, 174, 49, 0], [1, "de", P, 183, 51, kq], [1, "de", 14, 186, 48, kq], [Fo, "de", 37, 182, 48, yk], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, tr], [er, "de", 37, 200, 38, yk], [er, "de", 40, 194, 37, 0], [dn, "de", 39, 199, 44, Ko], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [Aj, "de", 12, 194, 40, Ko], [1, "de", 13, 202, 45, 0], [ik, "de", 14, 198, 47, 0], [Aj, "de", 15, 198, 55, 0], [1, "de", nk, 212, 54, 0], [1, "de", Nk, 216, 63, ko], [1, "de", 14, 209, 62, 0], [1, "de", de, 219, 60, ko], [er, "de", 12, 206, 56, 0], [ce, "de", 12, 218, 72, Fj], [ce, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, Ko], [V, "de", pk, 193, 63, 0], [Br, "de", 14, 216, 80, yk], [1, "de", 14, 222, 87, Ko], [1, "de", 38, 210, 53, jj], [Fo, "de", 37, 210, 47, kq], [1, "de", 37, 200, 63, tr], [ik, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, tr], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, Fj], [1, "de", 38, 218, 55, Fj], [1, "de", 38, 212, 61, tr], [er, "de", 38, 222, 70, ko], [1, "de", 38, 218, 70, 0], [er, "de", 40, 222, 81, Mn], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [er, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, tr], [1, "de", 39, 218, 87, ko], [dn, "de", 39, 222, 93, 0], [dn, "de", 39, 216, 96, 0], [Aj, "de", 39, 209, 94, ko], [1, "de", 39, 201, 87, 0], [Br, "de", 39, 198, 82, yk], [V, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [ik, "de", 39, 202, 92, jj], [1, "de", 37, 194, 97, jj], [1, "de", 39, 204, 88, 0], [Fo, "de", 39, 189, 90, Ko], [1, "de", 39, 194, 81, 0], [dn, "de", 39, 188, 98, Fj], [Aj, "de", 37, 183, 91, 0], [ce, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [ce, "de", 38, 184, 77, 0], [V, "de", 38, 180, 80, Mn], [Fo, "de", 39, 173, 75, 0], [er, "de", 40, 178, 87, jj], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [V, "de", 40, 165, 92, ko], [er, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [Fo, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [ik, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [ce, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, tr], [1, "de", 40, 149, 74, tr], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, tr], [1, "de", 39, 174, 64, jj], [er, "de", 39, 175, 56, 0], [Fo, "de", 39, 149, 67, 0], [ce, "de", b, 218, 96, 0], [1, "de", 13, 212, 95, yk], [1, "de", 14, 204, 85, Mn], [1, "de", Xq, 215, 85, ko], [ik, "de", $n, 197, 97, yk], [Aj, "de", tn, 198, 87, 0], [1, "de", 14, 196, 77, 0], [er, "de", eq, 194, 86, 0], [1, "de", 15, 181, 84, 0], [ce, "de", 14, 184, 79, jj], [er, "de", 14, 188, 93, jj], [ce, "de", 13, 180, 87, Mn], [1, "de", 13, 178, 96, jj], [1, "de", 13, 163, 95, 0], [dn, "de", Ne, 172, 88, ko], [dn, "de", Ne, 176, 75, Fj], [dn, "de", 14, 172, 72, jj], [ce, "de", Zn, 169, 82, ko], [1, "de", 13, 164, 78, 0], [V, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", $n, 154, 91, ko], [1, "de", 15, 160, 74, jj], [dn, "de", 14, 152, 76, Ko], [Br, "de", 14, 158, 63, Mn], [er, "de", 14, 150, 60, ko], [1, "de", 12, 169, 59, Mn], [1, "de", Mk, 173, 61, Mn], [er, "cs", 1, 143, 104, 1], [1, "cs", Mn, 141, 102, 1], [Fo, "cs", B, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [er, "cs", ij, 140, 102, 1], [1, "cs", lk, 143, 107, 1], [1, "cs", kq, 143, 106, dn], [Fo, "cs", 2, 143, 105, 1], [Fo, "cs", 2, 142, 103, 1], [1, "cs", Fj, 142, 104, 1], [1, "cs", Xn, 141, 103, 1], [1, "cs", _i, 142, 105, dn], [1, "cs", Dn, 140, 103, 1], [1, "cs", sn, 141, 104, Fo], [ik, "la", 4, 151, 23, Br], [er, "la", Yn, 150, 22, 1], [ik, "la", er, 149, 21, V], [er, "la", Yn, 148, 21, Aj], [1, "la", kn, 147, _j, 1], [1, "la", 4, 147, 19, er], [Br, "la", U, 147, 18, Fo], [1, "la", 1, 147, jq, Fo], [ce, "la", vo, 144, 9, Br], [Fo, "la", Cj, 147, 16, 1], [ce, "la", 2, 147, Xq, 1], [1, "la", f, 147, zr, Br], [1, "la", kr, 145, 11, Br], [1, "la", 5, 145, _o, ce], [1, "la", Br, 146, qj, 1], [1, "la", 2, 145, Aq, ce], [Br, "la", fa, 155, 25, ik], [ce, "la", tr, 155, 24, Aj], [er, "la", 3, 153, 26, 1], [er, "cs", ko, 151, 24, 1], [er, "cs", yk, 153, 22, ik], [ik, "cs", 3, 152, 22, 1], [ce, "cs", sn, 154, 22, 1], [ce, "cs", ik, 157, 26, dn], [Fo, "cs", Wq, 157, 24, ce], [Br, "cs", Wq, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [Fo, "cs", 2, 152, 25, ce], [1, "cs", 2, 151, 25, ik], [er, "cs", ij, 156, 27, er], [dn, "cs", kn, 157, 23, 1], [1, "cs", kn, 157, 22, 1], [Fo, "cs", 3, 150, 24, 1], [1, "cs", vo, 150, 23, 1], [Br, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, tr], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, kq], [1, "de", 13, 156, 21, 0], [Br, "de", 13, 147, 36, jj], [dn, "de", qj, 161, 56, 0], [ik, "de", 13, 147, 79, kq], [V, "de", tn, 157, 99, 0], [Fo, "de", tn, 172, 99, 0], [1, "la", lk, 143, 102, 1], [ik, "la", qa, 149, 96, 1], [ce, "la", 4, 145, 102, Aj], [V, "la", dn, 148, 97, 1], [1, "la", 5, 148, 98, 1], [er, "cs", 3, 144, 104, dn], [1, "cs", Ik, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", B, 145, 104, Aj], [dn, "cs", vo, 142, 101, 1], [1, "cs", ta, 143, 100, 1], [er, "cs", 3, 141, 101, 1], [1, "cs", sn, 142, Kn, ce], [1, "cs", ko, 141, qr, dn], [Br, "cs", 2, 140, 101, Br], [1, "cs", 2, 144, 105, 1], [ce, "cs", 3, 146, 103, V], [ce, "cs", Mo, 146, 102, Fo], [er, "cs", lk, 150, 95, Aj], [Aj, "cs", tr, 150, 97, 1], [1, "cs", 2, 151, 98, ce], [1, "cs", 0, 153, 97, 1], [Br, "cs", 3, 153, 96, 1], [1, "cs", Ok, 149, 95, 1], [Fo, "s", ko, 213, 127, Aj], [ce, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [V, "plm", 0, 208, 127, Mn], [Fo, "s", Br, 207, 132, 1], [1, "s", Xn, 208, 133, 1], [1, "plm", 0, 217, 132, Ko], [Br, "plm", 2, 186, 158, kq], [Fo, "plm", yk, 184, 160, ko], [V, "s", 1, 183, 156, 1], [1, "s", C, 186, 159, V], [ik, "p", 0, 182, 157, 1], [1, "p", tr, 114, 205, 1], [Fo, "plm", 1, 117, 204, ko], [Br, "plm", yk, 117, 205, tr], [V, "plm", 2, 112, 204, jj], [1, "s", 2, 114, 207, 1], [ce, "s", Le, 115, 204, 1], [1, "plm", 2, 122, 151, ko], [er, "plm", 1, 123, 150, Fj], [1, "plm", V, 117, 151, 0], [1, "s", 0, 118, 150, 1], [er, "s", 1, 122, 152, Aj], [Aj, "plm", 2, 156, 130, 0], [1, "plm", V, 154, 127, 0], [Fo, "s", Fj, 153, 128, 1], [1, "s", 2, 152, 130, er], [Fo, "p", jj, 123, 65, Br], [dn, "plm", Le, 125, 62, Ko], [1, "plm", 1, 124, 62, jj], [1, "plm", kq, 120, 65, 0], [1, "s", Fo, 125, 63, Fo], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [Br, "cs", 2, 144, 106, 1], [Fo, "cs", C, 145, 105, dn], [1, "cs", 2, 144, 107, V], [1, "cs", 2, 141, 106, 1], [ik, "cs", kn, 141, 105, Br], [Aj, "cs", Ok, 140, 105, Fo], [V, "cs", C, 140, 104, 1], [dn, "cs", ik, 138, 103, 1], [1, "cs", Ko, 139, 104, 1], [V, "cs", 2, 139, 103, 1], [Aj, "cs", kn, 139, 105, V], [Br, "cs", 2, 142, 106, 1], [V, "cs", Wq, 142, 107, 1], [dn, "cs", Le, 139, 101, ce], [1, "de", qi, 27, 264, 0], [1, "la", Yn, 147, 99, dn], [ik, "la", 1, 146, 100, ce], [1, "la", kr, 145, 101, 1], [dn, "cs", ik, 215, 47, dn], [1, "cs", Xn, 216, 47, 1], [ce, "cs", C, 215, 48, er], [V, "la", 4, 214, 45, 1], [Aj, "la", 4, 215, 45, Fo], [1, "la", tr, 216, 46, 1], [1, "la", bn, 216, 48, 1], [ik, "la", In, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", B, 214, 49, ce], [1, "la", 4, 211, 45, 1], [Br, "la", sn, 213, 47, Aj], [Aj, "cs", Le, 224, 48, 1], [Br, "plm", ij, 111, 243, 0], [ce, "plm", V, 108, 246, 0], [1, "s", Fo, 110, 243, dn], [Aj, "s", yk, 108, 245, 1], [1, "s", jj, 121, 276, V], [ik, "plm", Xn, 122, 277, Mn], [1, "plm", Le, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [ik, "s", V, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", lk, 67, 16, 1], [V, "cs", 0, 67, jq, er], [dn, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, Tq, Fo], [1, "cs", Ea, 68, 17, 1], [ce, "cs", tr, 36, ge, 1], [dn, "cs", Ok, 36, F, Fo], [1, "cs", Wq, 36, Yj, Br], [1, "cs", Kk, 35, 17, 1], [1, "cs", 3, 36, nq, 1], [Aj, "cs", 3, 35, no, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, Fo], [ik, "cs", 3, 66, 22, ce], [1, "cs", Ea, 66, 31, 1], [Fo, "cs", C, 36, 30, 1], [Fo, "cs", 2, 36, 23, Br], [V, "cs", 1, 36, 22, Fo], [Fo, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, V], [1, "cs", Fj, 43, j, ce], [Fo, "cs", 2, 44, 13, 1], [Br, "cs", 3, 42, 16, ik], [1, "cs", 3, 41, z, 1], [dn, "cs", _i, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, nq, 1], [Br, "cs", Ea, 44, 19, ce], [1, "cs", 3, 45, Rq, V], [ik, "cs", Xn, 46, Yk, er], [Aj, "cs", jj, 43, 22, 1], [1, "cs", kn, 42, 22, Aj], [dn, "cs", Aj, 41, 22, 1], [dn, "cs", Ko, 40, 22, 1], [1, "cs", 3, 39, 17, dn], [ce, "cs", Fo, 44, 26, Aj], [V, "cs", kn, 45, 26, er], [1, "cs", 3, 46, 26, Aj], [1, "cs", yk, 47, 26, dn], [1, "cs", Le, 48, 26, 1], [dn, "cs", vo, 47, 25, 1], [1, "cs", 3, 43, 27, Aj], [er, "cs", 1, 49, 32, dn], [ik, "cs", Xn, 50, 32, 1], [Fo, "cs", ij, 51, 32, 1], [1, "cs", ij, 52, 32, 1], [ce, "d", yk, 51, 29, Br], [1, "d", er, 53, 29, ik], [Br, "d", V, 49, 29, Fo], [1, "cs", 3, 55, 31, Fo], [Aj, "cs", 3, 54, 32, ik], [dn, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", Fj, 51, 33, 1], [1, "cs", 2, 52, 33, Br], [Aj, "cs", kn, 50, 33, 1], [1, "cs", Ea, 56, 30, ce], [1, "cs", 3, 56, 31, Fo], [Fo, "cs", 3, 46, 30, dn], [Br, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [Br, "cs", Xn, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [ce, "cs", jj, 55, 32, Br], [Fo, "cs", kq, 47, 32, 1], [1, "d", Br, 54, 35, Br], [Fo, "fo", 2, 35, 15, 0], [Br, "fo", 2, 36, 12, kq], [1, "fo", 2, 67, Nk, 0], [1, "cs", Dn, 60, 13, Fo], [1, "cs", Ok, 59, 13, 1], [dn, "cs", 1, 58, Aq, ce], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, ik], [1, "cs", Dn, 60, 16, Br], [1, "cs", ta, 63, 17, er], [ik, "cs", 2, 60, Dj, 1], [1, "cs", 1, 59, Dj, V], [Aj, "cs", 3, 58, 19, Aj], [1, "cs", Ok, 57, qi, Br], [1, "cs", Le, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [V, "cs", 2, 63, 23, 1], [1, "cs", ko, 62, 22, Br], [Br, "cs", 2, 61, 22, V], [1, "cs", dn, 60, 22, ce], [1, "cs", kq, 59, 22, 1], [1, "cs", 2, 54, 26, Br], [ik, "cs", 2, 55, 26, ik], [Br, "cs", 2, 56, 26, 1], [dn, "cs", 1, 57, 26, 1], [V, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, Sa, 1], [1, "cs", 2, 68, 15, dn], [1, "cs", 3, 69, 15, Aj], [1, "cs", Kk, 70, 15, 1], [1, "cs", Mo, 70, 14, dn], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, Br], [V, "cs", 2, 71, 13, ce], [dn, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, P, V], [1, "cs", ta, 70, ea, Fo], [1, "cs", 3, 71, X, 1], [ce, "cs", kn, 72, 8, 1], [1, "cs", 0, 73, 8, Br], [1, "cs", sn, 74, 9, er], [1, "cs", 3, 74, S, dn], [1, "cs", Mn, 75, X, dn], [ce, "cs", 3, 76, X, Fo], [Br, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, Ke, 1], [er, "cs", 0, 76, Ke, 1], [1, "cs", 0, 76, Kj, 1], [Br, "cs", 3, 76, 15, 1], [1, "cs", fa, 75, Fa, 1], [V, "cs", pa, 77, mr, ik], [1, "cs", 2, 77, 14, dn], [1, "cs", Ea, 77, Da, Aj], [ce, "cs", Ik, 77, 13, 1], [1, "cs", 3, 77, Ne, ce], [Br, "cs", 0, 74, 18, Br], [1, "cs", 1, 75, sa, 1], [dn, "cs", Ok, 74, 17, dn], [1, "cs", lk, 73, k, dn], [1, "cs", 3, 67, 23, Aj], [er, "cs", ko, 68, 23, Aj], [1, "cs", 0, 72, 20, 1], [1, "cs", Le, 73, 20, ce], [dn, "cs", 2, 74, ya, dn], [ce, "cs", 2, 74, 36, 1], [1, "cs", Le, 77, 27, 1], [ce, "cs", Ok, 76, 26, ik], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [dn, "cs", 2, 75, 25, Br], [1, "cs", 0, 76, 25, er], [1, "cs", 1, 77, 23, 1], [Fo, "cs", Wq, 77, 16, Fo], [V, "cs", 2, 76, sa, V], [1, "cs", C, 76, 24, Fo], [Br, "cs", pa, 77, 24, V], [1, "cs", 2, 77, 25, Fo], [1, "cs", kn, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [ik, "cs", 3, 76, 27, er], [Fo, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [V, "cs", ij, 73, 26, dn], [V, "cs", C, 74, 27, V], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, Br], [V, "cs", 2, 66, _j, 1], [Fo, "cs", pa, 66, 21, dn], [1, "cs", kn, 67, no, ik], [1, "cs", 2, 67, 22, Aj], [1, "cs", kq, 77, 36, 1], [er, "cs", 0, 77, 32, ik], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, ce], [Aj, "cs", C, 76, 36, Fo], [Fo, "cs", pa, 77, 35, Fo], [1, "cs", 2, 77, 34, Aj], [ce, "cs", 2, 76, 35, ik], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [Aj, "cs", Mn, 71, 32, Fo], [1, "cs", kq, 76, 34, Br], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, ce], [1, "cs", Xn, 76, 28, 1], [1, "cs", C, 75, 28, er], [1, "cs", 2, 76, 29, ik], [1, "cs", 2, 76, 33, Aj], [1, "cs", kn, 70, 32, 1], [Br, "cs", 2, 69, 31, 1], [Fo, "cs", 0, 68, 31, 1], [dn, "cs", 2, 67, 31, ce], [1, "cs", Le, 67, 30, 1], [1, "cs", 2, 69, 32, Fo], [Aj, "cs", ce, 67, 32, 1], [ce, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, V], [1, "cs", kn, 66, 33, V], [ik, "cs", Ok, 67, 33, 1], [ik, "cs", 2, 70, 33, ik], [1, "cs", Wq, 69, 33, 1], [1, "cs", pa, 68, 33, Aj], [1, "cs", 0, 68, 34, 1], [1, "cs", V, 66, 35, 1], [1, "cs", Xn, 67, 34, V], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, V], [1, "cs", Le, 64, 36, 1], [1, "cs", 2, 65, 36, ik], [dn, "cs", ij, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, er], [1, "cs", pa, 68, 35, V], [1, "cs", pa, 76, ka, 1], [Fo, "cs", Xn, 77, 9, 1], [V, "cs", 2, 77, xo, 1], [dn, "cs", 2, 77, 10, Br], [1, "cs", 2, 78, 8, dn], [ik, "cs", Ok, 78, xr, 1], [1, "cs", Le, 78, 10, er], [1, "cs", Xn, 78, Qn, Fo], [1, "cs", Le, 78, Da, Fo], [er, "cs", kn, 78, 13, 1], [dn, "cs", 0, 79, 9, 1], [1, "cs", er, 79, 11, 1], [dn, "cs", 3, 79, 8, 1], [Aj, "cs", 3, 79, lj, 1], [dn, "cs", Ea, 79, Mq, 1], [1, "cs", vo, 80, lr, 1], [ik, "cs", ce, 80, oa, V], [ik, "cs", ij, 80, 9, V], [ce, "cs", pa, 80, oo, ce], [Fo, "cs", 2, 81, X, 1], [ce, "cs", Wq, 81, ka, ce], [1, "cs", C, 81, 10, er], [1, "cs", 2, 78, mk, er], [ik, "cs", Wq, 79, na, er], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, Mq, ik], [ik, "cs", 0, 79, mk, 1], [1, "cs", ko, 82, 9, Fo], [1, "cs", 2, 82, xo, 1], [Fo, "cs", Wq, 82, Ke, V], [1, "cs", 2, 81, la, 1], [er, "cs", lk, 80, Ui, 1], [Fo, "cs", V, 78, 30, 1], [Br, "cs", 1, 78, 34, 1], [Fo, "cs", 1, 78, 27, er], [ik, "cs", jj, 78, 25, 1], [1, "cs", kq, 79, 29, er], [ce, "cs", 0, 79, 32, V], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", kn, 78, 36, Br], [V, "cs", Ok, 79, 34, 1], [ce, "cs", Wq, 78, 33, 1], [Aj, "cs", 2, 79, 33, 1], [1, "cs", C, 78, 32, 1], [ce, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, V], [Fo, "cs", ij, 79, 30, 1], [ce, "cs", kn, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", ij, 79, 28, er], [dn, "cs", 2, 79, 27, 1], [1, "cs", Ok, 78, 26, V], [Aj, "cs", 2, 79, 26, 1], [1, "cs", Ok, 78, 24, 1], [ik, "cs", Le, 80, 34, Br], [1, "cs", Le, 80, 33, 1], [1, "cs", C, 80, 31, V], [Br, "cs", C, 80, 30, V], [ce, "cs", 2, 80, 32, ce], [1, "cs", Le, 80, 29, 1], [1, "cs", Xn, 80, 28, 1], [1, "cs", Wq, 80, 27, 1], [1, "cs", 0, 81, 30, ik], [1, "cs", ce, 81, 32, 1], [Br, "cs", 1, 81, 28, Aj], [Aj, "cs", pa, 81, 29, 1], [1, "cs", Le, 81, 31, 1], [1, "cs", Wq, 81, 33, 1], [1, "cs", kn, 82, 30, Aj], [1, "cs", 2, 82, 31, Fo], [ce, "cs", C, 82, 32, ce], [V, "cs", 0, 37, 36, 1], [1, "cs", Xn, 38, 36, er], [V, "cs", 2, 37, 35, 1], [Fo, "cs", Wq, 36, 36, Aj], [Br, "cs", Wq, 34, 35, 1], [Aj, "cs", C, 35, 35, 1], [er, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, Br], [Aj, "cs", Br, 35, 34, 1], [1, "cs", ij, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", Le, 36, 33, Aj], [1, "cs", Xn, 35, 33, ce], [Br, "cs", Le, 34, 33, 1], [1, "cs", Ok, 33, 33, 1], [ce, "cs", Wq, 31, 32, dn], [1, "cs", 1, 36, 32, V], [ik, "cs", Aj, 32, 32, 1], [ce, "cs", Wq, 35, 32, ce], [1, "cs", Wq, 33, 32, 1], [V, "cs", 2, 32, 33, 1], [er, "cs", 2, 33, 31, 1], [1, "cs", Wq, 34, 31, Fo], [1, "cs", 2, 35, 31, ik], [ik, "cs", yk, 34, 32, Fo], [1, "cs", 2, 35, 30, Br], [dn, "cs", 1, 39, 23, ce], [1, "cs", 3, 39, 22, V], [1, "cs", 3, 36, 24, 1], [Br, "cs", lk, 35, 24, 1], [Fo, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, ik], [1, "cs", 2, 36, 20, Br], [Br, "cs", ij, 36, 21, 1], [er, "cs", Xn, 35, 22, ce], [1, "cs", ij, 35, ge, ik], [1, "cs", kn, 34, Sq, 1], [V, "cs", 2, 33, 16, 1], [1, "cs", jj, 34, hr, Br], [Fo, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [Aj, "cs", ta, 30, 13, ce], [1, "cs", 1, 33, 15, Fo], [ce, "cs", er, 31, 13, Aj], [1, "cs", 2, 32, 14, er], [V, "cs", tr, 31, 8, ce], [Br, "cs", 2, 32, 8, Aj], [1, "cs", Ok, 25, na, 1], [dn, "cs", yk, 25, 12, ce], [Fo, "cs", 2, 25, 11, 1], [ce, "cs", 3, 25, rk, 1], [1, "cs", Ko, 25, 9, Aj], [ce, "cs", ij, 25, 8, 1], [Aj, "cs", Xn, 26, 8, Aj], [1, "cs", Ok, 27, xo, ik], [V, "cs", Wq, 28, X, 1], [V, "cs", kn, 29, 8, 1], [1, "cs", kn, 30, zn, ik], [Aj, "cs", C, 26, 9, 1], [Aj, "cs", 2, 27, xr, 1], [V, "cs", kn, 26, oa, er], [1, "cs", 1, 27, 10, 1], [er, "cs", 3, 28, Ze, dn], [1, "cs", 3, 25, 14, er], [1, "cs", 0, 25, $q, 1], [1, "cs", Xn, 26, $n, Aj], [1, "cs", vo, 27, Sa, 1], [1, "cs", 0, 28, 17, dn], [Aj, "cs", 1, 29, 18, 1], [1, "cs", Le, 26, Sq, 1], [Br, "cs", pa, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [ik, "cs", 2, 26, 17, ik], [1, "cs", dn, 27, 18, 1], [1, "cs", Le, 28, 18, 1], [1, "cs", 2, 30, nq, 1], [er, "cs", ij, 29, 19, dn], [1, "cs", 2, 24, ve, V], [er, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", kn, 24, 10, 1], [er, "cs", 2, 24, 11, 1], [ik, "cs", Le, 24, co, 1], [er, "cs", kn, 24, Aq, 1], [1, "cs", dn, 23, zq, Br], [Fo, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, ik], [1, "cs", 1, 23, X, Fo], [1, "cs", ij, 24, 8, er], [dn, "cs", 2, 24, yn, er], [Fo, "cs", 2, 23, 9, 1], [1, "cs", Le, 22, 9, V], [Br, "cs", 2, 22, 10, 1], [dn, "cs", Wq, 22, 11, Br], [ik, "cs", 2, 23, 11, 1], [Br, "cs", 2, 23, de, ce], [1, "cs", 2, 23, 13, er], [V, "cs", 2, 22, 13, er], [V, "cs", Wq, 21, 9, 1], [Br, "cs", Ok, 21, lr, 1], [er, "cs", Ok, 29, 25, 1], [1, "cs", 2, 25, 24, er], [Br, "cs", 2, 26, 25, Aj], [Fo, "cs", 2, 27, 25, 1], [dn, "cs", 0, 28, 25, Br], [er, "cs", dn, 25, 23, ik], [1, "cs", 2, 26, 24, er], [Aj, "cs", 0, 24, 25, 1], [Fo, "cs", 3, 23, 24, Fo], [Aj, "cs", 3, 24, 24, 1], [dn, "cs", 3, 25, 25, ik], [dn, "cs", fa, 23, 25, Br], [1, "cs", 1, 22, 26, dn], [er, "cs", dn, 26, 26, 1], [1, "cs", 1, 29, 26, V], [1, "cs", Le, 23, 26, 1], [dn, "cs", 2, 24, 26, ce], [1, "cs", 2, 25, 26, Aj], [1, "cs", Ok, 27, 26, er], [er, "cs", 2, 28, 26, 1], [ik, "cs", Ok, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [dn, "cs", pa, 28, 28, dn], [Aj, "cs", Aj, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [er, "cs", Xn, 27, 28, ce], [1, "cs", Le, 27, 27, dn], [er, "cs", 2, 26, 28, Aj], [1, "cs", 2, 26, 27, dn], [ik, "cs", 2, 25, 28, V], [1, "cs", ij, 25, 27, 1], [1, "cs", 2, 23, 27, Br], [Fo, "cs", Wq, 22, 27, 1], [Br, "cs", 2, 24, 27, Br], [dn, "cs", 0, 24, 28, ik], [1, "cs", 0, 25, 32, er], [Br, "cs", Aj, 24, 30, V], [ce, "cs", pa, 25, 31, 1], [ce, "cs", 2, 25, 30, ik], [Fo, "cs", 2, 25, 29, 1], [er, "cs", Xn, 24, 29, 1], [er, "cs", Ok, 23, 29, V], [1, "cs", pa, 26, 33, 1], [1, "cs", 0, 26, 34, Br], [1, "cs", 2, 27, 35, 1], [Fo, "cs", Ok, 22, 28, Br], [Aj, "cs", Xn, 23, 28, 1], [V, "cs", 2, 24, 31, Fo], [er, "cs", Xn, 24, 32, ik], [Fo, "cs", 2, 25, 33, 1], [1, "cs", C, 26, 35, 1], [1, "cs", kn, 24, 33, V], [1, "cs", 2, 25, 34, 1], [Aj, "cs", Fo, 22, 29, 1], [Fo, "cs", Aj, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, ik], [1, "cs", Le, 23, 34, Aj], [1, "cs", kn, 23, 33, 1], [1, "cs", 0, 22, 33, V], [er, "cs", ik, 23, 32, Fo], [dn, "cs", C, 22, 32, dn], [1, "cs", ij, 23, 31, ik], [1, "cs", Le, 23, 30, 1], [1, "cs", ij, 22, 30, 1], [1, "cs", Le, 22, 31, Br], [V, "cs", 1, 21, 31, Br], [V, "cs", Fj, 21, 29, Br], [Fo, "cs", kn, 21, 30, 1], [1, "cs", ij, 24, 36, 1], [Aj, "cs", C, 26, 36, 1], [Fo, "cs", 2, 25, 36, er], [1, "cs", Ok, 27, 36, 1], [1, "cs", 2, 28, 36, er], [Fo, "d", Xn, 83, 65, dn], [1, "d", 2, Sq, 67, 1], [er, "g", Fj, 15, jq, 1], [er, "s", 0, Q, eq, 1], [1, "s", Ko, 85, Qn, 1], [1, "f", 0, 41, 102, 1], [1, "f", Mn, 42, 124, Aj], [1, "f", Ko, 64, 116, Aj], [ik, "f", jj, 74, 104, 1], [1, "f", Mn, 70, 87, Aj], [1, "f", 0, 27, 96, 1], [V, "f", Mn, 22, 79, Aj], [ik, "f", 0, 20, 117, Br], [ce, "f", kq, 30, 137, er], [1, "f", 0, 59, 146, 1], [ce, "f", Ko, 52, 147, 1], [1, "f", 0, aq, 149, dn], [ik, "f", 0, 36, 146, 1], [er, "f", yk, 62, 124, 1], [Aj, "g", 1, 34, 121, ik], [dn, "g", Br, 52, 116, ik], [1, "g", 1, 78, 116, 1], [ik, "g", V, 71, 129, 1], [Fo, "s", 0, 53, wa, V], [er, "s", tr, 73, 111, 1], [1, "s", 0, 77, 126, Br], [1, "s", 0, 48, 90, 1], [1, "s", jj, bk, 102, Fo], [1, "s", 0, Tq, 127, 1], [1, "s", Mn, 35, 159, 1], [Fo, "s", kq, 65, 54, Aj], [1, "s", 0, 44, 52, 1], [1, "s", Ko, 26, 51, 1], [ik, "f", 1, 56, 136, er], [1, "f", Br, 41, 133, 1], [1, "f", dn, 80, 120, 1], [1, "f", 1, 16, 117, er], [1, "f", 1, P, 99, Aj], [V, "f", 1, sj, 89, ce], [1, "f", dn, 90, 98, Aj], [V, "f", Br, 84, 95, 1], [ik, "f", ik, 16, 57, ce], [Br, "f", 1, 77, 53, ce], [dn, "d", 1, 48, 35, ce], [Aj, "de", 8, 33, 13, ko], [dn, "de", lr, 30, 9, Mn], [V, "de", 9, 32, 30, ko], [1, "de", rk, 30, 25, Mn], [1, "de", Bq, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, ko], [Aj, "de", ka, 70, 22, tr], [Fo, "de", 10, 70, Sa, 0], [1, "de", oa, 75, 11, ko], [V, "de", 8, 68, 10, kq], [1, "de", S, 75, 30, Mn], [dn, "de", Qn, 71, 33, Fj], [Br, "de", 11, 72, 25, 0], [Aj, "de", 11, 64, 25, Fj], [1, "de", 11, 52, 10, tr], [Br, "de", Pj, 31, m, 0], [dn, "de", 30, 29, re, yk], [dn, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, Ko], [1, "de", 30, 30, 29, 0], [Br, "de", 30, 71, 29, ko], [1, "de", 28, 68, 25, tr], [V, "de", 28, 75, $n, 0], [1, "de", 27, 67, Yo, kq], [1, "de", 29, 72, 10, Ko], [Br, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [Aj, "fo", er, 39, 12, jj], [ce, "fo", 1, 34, 14, jj], [1, "fo", 1, 74, 28, 0], [V, "fo", 2, 74, 29, 0], [dn, "fo", kn, 69, 30, yk], [1, "fo", 2, 77, 22, 0], [dn, "fo", Ok, 74, 21, 0], [1, "fo", Xn, 76, on, 0], [1, "fo", ce, 78, 17, 0], [1, "fo", Aj, 28, ya, 0], [1, "fo", 2, 27, 24, yk], [1, "fo", Le, 24, 17, 0], [ik, "fo", kn, 29, 21, 0], [1, "fo", ce, 27, 32, 0], [ik, "fo", 2, 30, 33, 0], [Aj, "fo", 1, 29, 28, 0], [1, "fo", C, 28, 31, 0], [1, "fo", 2, 20, 24, jj], [dn, "fo", ij, Ye, 26, kq], [1, "fo", C, 23, 16, Fj], [1, "fo", Le, oo, 25, 0], [ik, "de", 33, 29, 22, Ko], [dn, "de", 34, 32, 25, 0], [1, "de", 34, 30, Q, 0], [er, "de", 33, 78, 18, jj], [1, "de", 33, 73, 35, 0], [Fo, "de", 36, 72, 23, 0], [1, "de", 35, 25, Yj, Fj], [1, "d", Aj, 83, 41, dn], [1, "d", 1, 17, 40, 1], [1, "cs", pa, 224, 104, ik], [1, "cs", Mn, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", ta, 216, 128, 1], [Fo, "la", 0, 215, 126, 1], [er, "s", tr, 216, 130, Br], [1, "s", V, 217, 129, Fo], [Br, "s", Fj, 218, 128, 1], [1, "s", ce, 217, 127, 1], [Fo, "s", Ko, 217, 126, 1], [1, "s", 1, 217, 125, ik], [dn, "s", 0, 216, 124, Fo], [1, "s", Fo, 215, 124, 1], [V, "s", 0, 214, 124, dn], [1, "s", 1, 213, 125, V], [V, "s", 0, 213, 126, ik], [ce, "plm", 2, 217, 130, Ko], [1, "plm", C, 212, 125, Mn], [1, "p", kq, 214, 134, ce], [1, "s", ik, 211, 126, 1], [Fo, "b", 1, 45, 277, Ko], [1, "b", 1, 50, 286, Ko], [1, "b", ij, 51, 284, 0], [1, "b", dn, 47, 287, jj], [1, "b", 0, 39, 285, 0], [1, "b", ta, 40, 283, Ko], [er, "b", 0, 52, 283, jj], [ce, "b", 1, 51, 280, 0], [Fo, "g", jj, 45, 269, 1], [Fo, "p", Mn, 55, 281, er], [1, "b", 1, 5, 172, Mn], [1, "b", 2, Fq, 172, yk], [Br, "t", Rj, Vo, 171, 0], [1, "t", ce, Wn, 170, jj], [Aj, "t", er, 5, 164, 0], [ce, "t", lk, hn, 164, jj], [ik, "b", Mn, hi, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, yk], [1, "t", qo, Wn, 166, Mn], [1, "t", 4, 6, 167, jj], [1, "t", 2, 6, 168, jj], [Br, "t", 0, 6, 169, 0], [Aj, "t", In, zk, 170, jj], [1, "t", 0, 5, 167, jj], [er, "t", pa, 5, 169, tr], [1, "b", 0, 5, 168, 0], [er, "s", er, He, 153, Fo], [Br, "s", 2, Ij, 151, 1], [V, "de", 5, wq, 152, 0], [1, "t", ce, Rj, 154, 0], [1, "b", 0, zk, 154, ko], [V, "t", 2, hn, 155, yk], [ik, "b", Le, _, 156, 0], [1, "t", 2, Ca, 157, kq], [ik, "t", kr, 5, 155, 0], [1, "b", yk, 6, 157, yk], [V, "t", 1, Wn, 156, kq], [1, "t", Ca, H, 158, 0], [1, "b", 2, H, 159, 0], [V, "b", 0, 6, 162, kq], [1, "t", 4, hn, 163, ko], [1, "t", Ai, 6, 161, 0], [1, "b", ce, za, 160, 0], [1, "b", Ok, U, 163, 0], [1, "b", 2, Cj, 158, tr], [1, "b", 2, Oq, 161, 0], [V, "t", Aj, Cj, 162, jj], [V, "t", 1, Bk, 160, 0], [V, "b", 1, 85, 176, yk], [Br, "b", pa, 83, 178, jj], [1, "s", ik, 82, 177, 1], [ik, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [ce, "t", sn, 73, 174, 0], [Br, "t", 5, 72, 175, 0], [ce, "t", 5, 87, 173, ko], [1, "de", 2, 76, 175, 0], [1, "de", fa, 77, 171, Fj], [V, "de", vo, 86, 177, kq], [Aj, "de", 2, 71, 175, jj], [dn, "s", 1, 70, 174, er], [Br, "r", 48, 174, 0], [ce, "r", 49, 175, Mn], [1, "r", 50, 175, 0], [1, "r", 51, 175, kq], [Fo, "r", 51, 174, kq], [1, "r", 50, 174, yk], [1, "r", 49, 174, 0], [1, "r", 52, 175, Mn], [1, "r", 52, 176, ko], [Aj, "r", 51, 176, jj], [er, "r", 50, 176, 0], [1, "r", 49, 176, Ko], [1, "r", 48, 175, kq], [1, "r", 47, 175, Mn], [1, "r", 48, 176, ko], [1, "r", 69, 163, ko], [1, "r", 70, 163, 0], [1, "r", 71, 163, Ko], [ce, "r", 73, 163, 0], [1, "r", 72, 163, 0], [ce, "r", 73, 164, 0], [ik, "r", 72, 164, jj], [Fo, "r", 71, 164, 0], [ce, "r", 70, 164, jj], [1, "r", 69, 164, Mn], [ik, "r", 68, 164, 0], [Aj, "r", 68, 165, 0], [1, "r", 69, 165, 0], [ce, "r", 70, 165, ko], [1, "r", 71, 165, kq], [dn, "r", 72, 165, Ko], [Aj, "r", 74, 164, 0], [1, "r", 73, 165, 0], [Br, "r", 72, 166, kq], [1, "r", 71, 166, 0], [1, "r", 70, 166, tr], [Br, "r", 74, 165, 0], [1, "r", 24, 164, 0], [Aj, "r", 25, 164, 0], [Fo, "r", 27, 164, jj], [1, "r", 26, 164, 0], [dn, "r", 28, 165, ko], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [Aj, "r", 25, 165, Ko], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, kq], [er, "r", 21, 165, Mn], [er, "r", 21, 166, Ko], [Aj, "r", 22, 166, 0], [V, "r", 23, 166, 0], [ik, "r", 24, 166, Mn], [1, "r", 25, 166, Fj], [ce, "r", 26, 166, 0], [V, "r", 27, 166, 0], [Br, "r", 28, 166, 0], [Aj, "r", 28, 167, yk], [Fo, "r", 26, 167, yk], [1, "r", 25, 167, 0], [ce, "r", 24, 167, 0], [Fo, "r", 23, 167, 0], [ce, "r", 22, 167, Mn], [V, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, ko], [1, "r", 28, 168, kq], [V, "r", 27, 168, tr], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [Fo, "r", 24, 168, yk], [V, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, jj], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [Fo, "r", 23, 169, kq], [Fo, "r", 22, 168, Fj], [dn, "r", 21, 167, 0], [dn, "s", ce, 52, 174, er], [er, "t", 3, 50, 177, 0], [er, "t", 4, 49, 177, Mn], [1, "b", 0, 47, 174, 0], [1, "b", Fj, 69, 166, tr], [1, "t", 2, 68, 166, Fj], [1, "t", Wn, 74, 163, kq], [1, "t", V, 73, 162, jj], [1, "s", 0, 73, 166, Fo], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, Br], [1, "p", 0, 61, 162, ce], [Fo, "p", 0, 42, 170, Fo], [1, "p", ko, 20, 174, 1], [1, "p", 0, 16, 160, V], [1, "b", 1, 23, 164, Ko], [Br, "b", ik, 28, 169, 0], [1, "b", C, 29, 168, jj], [1, "b", 2, Gn, 170, 0], [Br, "t", 1, nk, 171, jj], [1, "t", Ca, 13, 175, ko], [Br, "t", U, k, 166, 0], [1, "t", 5, 26, 163, 0], [ce, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [ik, "b", Ok, 30, 175, 0], [er, "t", 2, 24, 177, Ko], [1, "b", Br, 37, 174, Ko], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, yk], [Br, "t", gn, 38, 169, yk], [Br, "t", 4, 34, 173, 0], [1, "t", U, 38, 175, 0], [Fo, "b", C, 39, 173, yk], [er, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", kn, 35, 176, 1], [1, "s", er, 41, 175, 1], [ik, "b", pa, 53, 176, tr], [Fo, "t", Oq, 55, 173, 0], [1, "t", Oq, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", kn, 54, 163, Ko], [1, "t", 3, 49, 165, kq], [Aj, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, kq], [1, "t", Ai, 66, 162, jj], [1, "b", 1, 86, 161, Fj], [1, "b", 2, 81, 163, 0], [V, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, Mn], [1, "t", 5, 88, 163, jj], [Aj, "t", Fo, 84, 166, 0], [1, "t", 5, 72, 160, yk], [Aj, "t", 5, 70, 170, ko], [1, "s", dn, 57, 162, 1], [V, "b", 1, 39, 161, 0], [dn, "b", kq, 34, 164, Mn], [ce, "b", Xn, 54, 164, 0], [1, "t", 1, 59, 169, 0], [dn, "t", 3, 60, 170, 0], [Aj, "t", 4, 63, 169, kq], [ce, "t", oj, 63, 174, 0], [1, "t", Br, 62, 175, 0], [ce, "t", Wn, 40, 162, 0], [1, "t", V, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, jj], [1, "s", 1, 63, 173, ik], [1, "s", Le, 40, 165, er], [dn, "b", 0, 46, 169, Fj], [1, "de", 22, 74, 168, Ko], [V, "de", 22, 86, 168, Fj], [ik, "de", 22, 83, 175, Mn], [1, "de", 22, 78, 175, yk], [ce, "de", 19, 72, 176, 0], [1, "de", k, 68, 168, 0], [1, "de", Yk, 65, 163, 0], [1, "de", Yk, 75, 162, jj], [ik, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, tr], [1, "de", 19, 87, 164, ko], [1, "de", Yk, 61, 177, jj], [1, "de", An, 59, 172, 0], [1, "de", qi, 59, 167, kq], [dn, "de", 19, 53, 165, 0], [er, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, kq], [er, "de", 19, 48, 167, tr], [Br, "de", 19, 47, 170, 0], [Fo, "de", Yo, 41, 163, 0], [1, "de", An, 37, 161, 0], [1, "de", 19, 36, 166, 0], [ce, "de", Dj, 36, 171, 0], [1, "de", 19, 34, 174, Fj], [ce, "de", 19, 40, 172, kq], [1, "de", An, 38, 177, Fj], [1, "de", qi, 42, 176, 0], [1, "de", Dj, 53, 178, 0], [1, "de", 19, 53, 172, Fj], [1, "de", Yk, 64, 181, yk], [Aj, "de", Yo, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", Yo, 30, 170, 0], [Aj, "de", 19, hr, 168, Fj], [1, "de", 19, 14, 173, 0], [ik, "de", nq, pk, 162, 0], [ce, "de", 19, L, 167, ko], [1, "de", Yo, u, 161, Mn], [1, "de", qi, 27, 162, Ko], [Br, "de", Yo, 83, 195, Fj], [dn, "de", pa, 85, 163, jj], [ce, "de", 2, 80, 164, 0], [Br, "de", 2, 84, 169, 0], [Fo, "de", 2, 55, 165, Mn], [1, "de", 3, 46, 163, 0], [1, "de", ij, 66, 169, ko], [dn, "de", Ko, 63, 175, Ko], [ce, "de", 0, 34, 164, 0], [Br, "de", kq, N, 160, 0], [1, "de", 2, 40, 160, 0], [dn, "de", kn, 53, 160, ko], [1, "de", Wq, Cq, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", Ok, 23, 176, kq], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, Mn], [1, "de", 33, 85, 157, yk], [V, "de", 33, 29, 143, 0], [er, "de", 33, 62, 140, 0], [Br, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [Aj, "de", 33, 50, 134, ko], [V, "de", 33, 79, 127, Ko], [ce, "de", 33, 89, 139, jj], [1, "b", 1, 44, 156, Ko], [1, "t", 2, 45, 157, 0], [ce, "b", Fj, 75, 156, 0], [Aj, "t", Mo, 76, 157, 0], [1, "t", Cj, 62, 157, yk], [1, "t", Bk, 79, 156, yk], [ce, "t", 5, 41, 156, 0], [ce, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", qa, 21, 156, 0], [1, "t", In, 56, 159, 0], [dn, "f", 1, 94, 153, V], [Fo, "f", Ok, 93, 153, 1], [ik, "f", Ok, 99, 153, 1], [V, "f", er, 98, 153, 1], [dn, "f", jj, 97, 153, 1], [V, "f", ce, 96, 153, dn], [1, "s", Fo, iq, 149, ce], [Aj, "de", gn, He, 150, 0], [1, "b", Mo, 43, 281, ko], [1, "de", 50, 24, 39, ko], [1, "de", 50, 21, 39, 0], [V, "de", 50, 22, 43, yk], [ce, "de", 50, $q, 34, Fj], [1, "de", 50, Yj, 26, Fj], [dn, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [dn, "de", 50, 62, 43, 0], [er, "de", 50, 77, 44, 0], [ik, "de", 50, 71, 41, 0], [er, "de", 50, 55, 39, Ko], [1, "de", 50, 22, 39, 0], [1, "de", 50, _j, 41, 0], [Fo, "de", 50, 18, 21, 0], [ce, "de", 50, Ne, 21, jj], [1, "de", 50, Q, 19, jj], [1, "de", 50, Vj, 17, Ko], [ik, "de", 50, 18, lj, 0], [1, "de", 50, Yj, 9, 0], [ik, "de", 50, 52, 41, jj], [Aj, "de", 50, 82, 39, kq], [1, "de", 50, 86, 38, Ko], [dn, "de", 50, 84, 31, Fj], [ce, "de", 50, 86, 30, 0], [er, "de", 50, 84, 26, Fj], [Br, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, Fj], [1, "de", 50, 29, 42, 0], [1, "de", Hk, 74, 37, 0], [ik, "de", 9, 76, 22, 0], [Aj, "de", oa, 79, 24, yk], [1, "de", 11, 77, 17, 0], [Br, "de", 36, 81, 25, Fj], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [Br, "de", 28, 27, 31, tr], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, tr], [ce, "de", 51, 24, 155, yk], [V, "de", 51, 7, 154, 0], [1, "de", 51, la, 154, 0], [V, "de", 51, _o, 156, jj], [1, "de", 51, 16, 154, ko], [1, "de", 51, da, 154, 0], [er, "de", 51, 23, 154, 0], [Aj, "de", 51, no, 157, 0], [dn, "de", 51, 31, 154, 0], [Fo, "de", 51, 32, 157, Ko], [1, "de", 51, 86, 154, 0], [er, "de", 51, 88, 156, yk], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, ko], [1, "de", 51, 77, 154, tr], [ik, "de", 51, 74, 154, tr], [Fo, "de", 51, 71, 154, 0], [dn, "de", 51, 67, 154, yk], [er, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [dn, "de", 51, 65, 154, jj], [1, "de", 51, 68, 156, 0], [dn, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [er, "de", 51, 54, 154, ko], [dn, "de", 51, 52, 154, Ko], [1, "de", 51, 55, 155, ko], [V, "de", 51, 54, 157, yk], [ce, "de", 51, 49, 154, Fj], [V, "de", 51, 46, 154, tr], [Br, "de", 51, 44, 154, tr], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, Fj], [dn, "de", 51, 38, 154, 0], [ik, "de", 51, 39, 156, yk], [1, "de", 51, 34, 154, ko], [1, "de", Ca, ya, 142, 0], [ik, "de", 5, 37, 147, Ko], [Fo, "de", iq, 53, 147, 0], [1, "de", So, 69, 150, ko], [1, "de", qa, 94, 148, 0], [Aj, "de", 4, 66, 147, Fj], [1, "de", 4, rk, 145, Ko], [1, "de", 4, 28, 137, tr], [V, "de", 4, Ne, 137, 0], [Br, "de", 4, 48, 134, ko], [dn, "de", Rj, 67, 135, Ko], [1, "de", 34, 84, 155, Mn], [ce, "de", 35, 70, 156, 0], [ik, "de", 35, 51, 156, 0], [Br, "de", 35, 56, 157, Ko], [1, "de", 35, 65, 159, 0], [V, "de", 35, 23, 156, kq], [1, "de", 35, $q, 155, 0], [ik, "de", 35, 8, 155, tr], [1, "de", 33, Aq, 155, Fj], [1, "de", 33, 33, 158, kq], [1, "de", 36, 78, 155, tr], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, kq], [1, "fo", Br, 80, 24, yk], [1, "fo", C, 67, 36, 0], [dn, "fo", 2, 45, 36, 0], [er, "fo", 2, 53, 34, 0], [ce, "fo", 1, 51, 35, 0], [Fo, "fo", 1, 58, 35, jj], [Fo, "fo", 1, 33, 35, 0], [dn, "fo", 1, 31, 33, 0], [ik, "fo", 2, 29, 36, Mn], [ce, "fo", Ok, 56, 36, 0], [1, "fo", 2, 60, 37, yk], [1, "fo", 2, 45, 32, Fj], [1, "fo", 2, 22, 25, kq], [dn, "fo", ij, 21, 35, ko], [Br, "de", 52, 90, 208, jj], [ik, "de", Ta, 94, 250, 0], [1, "de", Vj, 95, 253, tr], [ce, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [er, "cs", 2, 138, Ca, Aj], [1, "cs", 2, 138, 6, Fo], [1, "cs", 2, 139, 6, 1], [ik, "cs", pa, 141, 6, Fo], [1, "cs", Ok, 140, 6, er], [1, "la", 3, 143, 7, 1], [Aj, "la", 3, 139, 7, 1], [1, "cs", 0, 137, E, ce], [dn, "cs", 1, 138, zn, Aj], [Br, "cs", 2, 137, _, 1], [dn, "cs", 2, 137, 8, Fo], [V, "cs", 2, 136, 7, 1], [1, "cs", Xn, 138, 9, 1], [1, "cs", Dn, 139, 9, Fo], [1, "cs", ta, 136, 8, 1], [Aj, "cs", ta, 137, 9, Aj], [1, "de", 53, 92, 165, Mn], [1, "de", 53, 92, 180, 0], [ce, "de", 53, 92, 188, Mn], [1, "de", 54, 92, 153, 0], [V, "de", 54, 91, 153, kq], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, tr], [Br, "de", 54, 87, 153, ko], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, Ko], [ik, "de", 54, 83, 153, kq], [Br, "de", 54, 82, 153, kq], [ce, "de", 54, 81, 153, 0], [ik, "de", 54, 80, 153, kq], [1, "de", 54, 79, 153, 0], [Br, "de", 54, 78, 153, jj], [ik, "de", 54, 77, 153, 0], [er, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [Br, "de", 54, 73, 153, ko], [ce, "de", 54, 72, 153, tr], [1, "de", 54, 70, 153, 0], [Fo, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [Br, "de", 54, 66, 153, yk], [1, "de", 54, 65, 153, kq], [1, "de", 54, 64, 153, Fj], [1, "de", 54, 63, 153, 0], [Br, "de", 54, 61, 153, yk], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [Br, "de", 54, 59, 153, Ko], [ik, "de", 54, 57, 153, Ko], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [Br, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, yk], [1, "de", 54, 53, 153, 0], [ik, "de", 54, 52, 153, kq], [ce, "de", 54, 51, 153, kq], [V, "de", 54, 50, 153, tr], [1, "de", 54, 49, 153, Fj], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, Ko], [er, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [Br, "de", 54, 44, 153, Mn], [Br, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [V, "de", 54, 41, 153, 0], [Fo, "de", 54, 40, 153, 0], [V, "de", 54, 39, 153, Ko], [Fo, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [Aj, "de", 54, 36, 153, 0], [er, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, ko], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [Br, "de", 54, 31, 153, Ko], [ik, "de", 54, 30, 153, jj], [ik, "de", 54, 29, 153, Fj], [1, "de", 54, 28, 153, 0], [ce, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, Ko], [er, "de", 54, 24, 153, Ko], [Aj, "de", 54, 23, 153, 0], [Fo, "de", 54, 22, 153, jj], [1, "de", 54, 21, 153, jj], [1, "de", 54, fq, 153, Fj], [1, "de", 54, 19, 153, kq], [1, "de", 54, $o, 153, Ko], [1, "de", 54, 17, 153, tr], [1, "de", 54, an, 153, 0], [ce, "de", 54, 15, 153, tr], [1, "de", 54, 14, 153, tr], [er, "de", 54, 13, 153, 0], [ce, "de", 54, tn, 153, Fj], [1, "de", 54, 11, 153, 0], [ce, "de", 54, 10, 153, Mn], [V, "de", 54, 8, 153, kq], [dn, "de", 54, xr, 153, 0], [Aj, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, rk, 0], [1, "de", 55, 83, y, 0], [er, "de", 55, 83, tn, 0], [1, "de", 55, 83, eq, jj], [Aj, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, ko], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, Zq, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, N, 0], [1, "de", 55, 83, 20, Fj], [er, "de", 55, 83, 21, kq], [1, "de", 55, 83, 22, jj], [1, "de", 55, 83, 23, yk], [1, "de", 55, 83, 24, 0], [Fo, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, kq], [ce, "de", 55, 83, 27, Mn], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, yk], [V, "de", 55, 83, 30, jj], [1, "de", 55, 83, 31, Ko], [1, "de", 55, 83, 32, 0], [ce, "de", 55, 83, 33, yk], [dn, "de", 55, 83, 34, yk], [1, "de", 55, 83, 36, 0], [dn, "de", 55, 83, 35, 0], [er, "de", 55, 83, 37, Fj], [1, "de", 55, 83, 38, tr], [1, "de", 55, 81, 38, 0], [dn, "de", 55, 82, 38, tr], [1, "de", 55, 80, 38, jj], [1, "de", 55, 79, 38, 0], [Aj, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, tr], [V, "de", 55, 76, 38, yk], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [V, "de", 55, 74, 38, 0], [Br, "de", 55, 72, 38, Fj], [Br, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, jj], [V, "de", 55, 69, 38, kq], [ce, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [V, "de", 55, 65, 38, 0], [Aj, "de", 55, 64, 38, 0], [Fo, "de", 55, 63, 38, Fj], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, Fj], [1, "de", 55, 61, 38, Ko], [Fo, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [er, "de", 55, 58, 38, 0], [V, "de", 55, 56, 38, kq], [V, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [ce, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [dn, "de", 55, 51, 38, kq], [1, "de", 55, 49, 38, tr], [ik, "de", 55, 50, 38, Fj], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [V, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, Fj], [1, "de", 55, 44, 38, 0], [ik, "de", 55, 43, 38, 0], [er, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [ik, "de", 55, 40, 38, tr], [Fo, "de", 55, 39, 38, kq], [Aj, "de", 55, 38, 38, yk], [V, "de", 55, 37, 38, Fj], [1, "de", 55, 36, 38, jj], [Fo, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, ko], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [dn, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [V, "de", 55, 29, 38, 0], [ce, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, ko], [ce, "de", 55, 26, 38, 0], [er, "de", 55, 25, 38, yk], [1, "de", 55, 24, 38, 0], [V, "de", 55, 23, 38, Fj], [1, "de", 55, 21, 38, 0], [er, "de", 55, 22, 38, ko], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, ko], [Fo, "de", 55, An, 37, jj], [1, "de", 55, 19, 36, Mn], [V, "de", 55, 19, 35, yk], [V, "de", 55, bk, 34, Fj], [V, "de", 55, 19, 33, ko], [Aj, "de", 55, Yk, 32, Fj], [1, "de", 55, Yo, 31, jj], [1, "de", 55, 19, 30, yk], [1, "de", 55, 19, 28, Ko], [1, "de", 55, Yo, 29, 0], [Fo, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, yk], [ik, "de", 55, Rq, 25, kq], [1, "de", 55, 19, 24, 0], [V, "de", 55, k, 23, tr], [1, "de", 55, 19, 22, 0], [1, "de", 55, bk, 21, 0], [Br, "de", 55, 19, 20, 0], [1, "de", 55, Yk, Tq, ko], [1, "de", 55, nq, bk, 0], [1, "de", 55, 19, Kj, yk], [1, "de", 55, An, 17, 0], [Fo, "de", 55, 19, 15, Ko], [1, "de", 55, Yo, Cq, kq], [1, "de", 55, bk, j, 0], [1, "de", 55, nq, 12, Ko], [1, "de", 55, 19, io, Ko], [1, "de", 55, 19, 10, 0], [dn, "de", 55, nq, 9, Mn], [ik, "de", 55, ya, 8, 0], [Fo, "de", 55, 84, 35, tr], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, Fj], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, Vk, yk], [1, "de", 55, 84, 16, 0], [Fo, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, ka, tr], [V, "de", 50, 85, Pj, 0], [1, "de", 55, 81, 39, kq], [Br, "de", 50, 83, 40, 0], [Br, "de", 55, 72, 39, tr], [1, "de", 55, 74, 39, 0], [Aj, "de", 55, 66, 39, 0], [dn, "de", 55, 65, 39, 0], [er, "de", 50, 67, 41, yk], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, yk], [ce, "de", 55, 50, 39, 0], [Br, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, tr], [er, "de", 55, 42, 39, tr], [Br, "de", 50, 43, 39, kq], [Br, "de", 50, 41, 39, Mn], [1, "de", 50, 37, 39, 0], [dn, "de", 55, 36, 39, 0], [er, "de", 55, 32, 39, 0], [er, "de", 50, 31, 39, 0], [ce, "de", 55, 23, 39, Ko], [1, "de", 55, N, 37, yk], [1, "de", 50, 18, 36, ko], [1, "de", 55, Tq, 35, 0], [ce, "de", 50, 18, 34, 0], [ik, "de", 55, 18, 31, 0], [dn, "de", 50, $o, 30, 0], [V, "de", 55, no, 25, yk], [Fo, "de", 50, 18, 24, Mn], [1, "de", 55, 18, 20, Fj], [Fo, "de", 55, 18, Zn, 0], [1, "de", 50, Yj, Ne, Mn], [1, "de", 55, 18, 8, yk], [1, "de", 54, 90, 154, ko], [dn, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [dn, "de", 54, 81, 154, 0], [Aj, "de", 54, 76, 154, 0], [Br, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, Mn], [er, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, ko], [1, "de", 54, 42, 154, Fj], [1, "de", 54, 37, 154, Fj], [ik, "de", 54, 30, 154, 0], [ik, "de", 54, 25, 154, 0], [ik, "de", 54, K, 154, Mn], [1, "de", 54, zq, 154, 0], [1, "de", 54, S, 154, 0], [Aj, "de", 55, 20, L, 0], [1, "de", 53, 93, 154, Ko], [1, "de", 53, 93, 156, yk], [V, "de", 53, 93, 158, Ko], [1, "de", 52, 91, 157, jj], [1, "de", 53, 93, 159, jj], [V, "de", 53, 93, 161, kq], [1, "de", 53, 93, 162, ko], [1, "de", 53, 93, 163, Fj], [1, "de", 53, 93, 164, Mn], [1, "de", 53, 93, 165, yk], [ce, "de", 53, 93, 166, 0], [Fo, "de", 53, 93, 167, yk], [Fo, "de", 52, 91, 167, Fj], [er, "de", 53, 93, 169, Fj], [ce, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, Mn], [1, "de", 53, 93, 171, kq], [er, "de", 53, 93, 173, jj], [ce, "de", 53, 93, 176, yk], [1, "de", 53, 93, 175, yk], [V, "de", 53, 92, 169, Mn], [ik, "de", 53, 93, 178, ko], [1, "de", 53, 93, 179, jj], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [ik, "de", 53, 93, 184, Mn], [er, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, Fj], [V, "de", 53, 93, 187, yk], [ce, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, jj], [1, "de", 53, 93, 190, Fj], [Fo, "de", 53, 93, 192, 0], [V, "de", 53, 93, 195, Ko], [V, "de", 53, 93, 194, kq], [er, "de", 52, 91, 196, jj], [1, "de", 53, 93, 197, 0], [Aj, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, Mn], [1, "de", 53, 93, 202, yk], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, Mn], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, jj], [ce, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, Ko], [1, "de", 53, 93, 212, Mn], [1, "de", 52, 91, 204, 0], [ce, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, ko], [1, "de", 53, 93, 215, 0], [Aj, "de", 53, 93, 216, kq], [er, "de", 53, 93, 217, tr], [dn, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, Ko], [er, "de", 52, 92, 213, kq], [1, "de", 52, 92, 206, Ko], [Aj, "de", 52, 92, 202, Mn], [1, "de", 53, 92, 201, yk], [er, "de", 52, 92, 194, yk], [1, "de", 52, 92, 178, 0], [V, "de", 52, 92, 171, 0], [Aj, "de", 53, 93, 221, Mn], [dn, "de", 53, 93, 222, ko], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, kq], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, kq], [Br, "de", 52, 92, 217, ko], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [Aj, "de", 52, 92, 225, kq], [dn, "de", 52, 93, 226, Fj], [ce, "de", 52, 93, 224, yk], [1, "de", 52, 93, 208, 0], [Fo, "de", 52, 93, 211, 0], [ce, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, tr], [er, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, Ko], [1, "de", 52, 93, 182, Fj], [Br, "de", 52, 93, 185, Mn], [ce, "de", 52, 93, 172, tr], [1, "de", 52, 93, 174, Ko], [ce, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, ko], [1, "de", 52, 93, 160, 0], [ik, "de", 52, 92, 162, 0], [ik, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, tr], [er, "de", 53, 93, 232, yk], [Br, "de", 53, 93, 234, yk], [1, "de", 52, 93, 230, 0], [er, "de", 52, 92, 228, tr], [1, "de", 53, 93, 235, tr], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, ko], [1, "de", 53, 93, 239, jj], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, ko], [dn, "de", 53, 93, 241, Fj], [ce, "de", 52, 93, 242, 0], [V, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [Fo, "de", 53, 93, 246, tr], [ik, "de", 53, 93, 245, jj], [1, "de", 52, 93, 247, 0], [dn, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [dn, "de", 52, 93, 249, kq], [V, "de", 53, 93, 250, Fj], [ik, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [dn, "de", 52, 93, w, Mn], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, J, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [Br, "de", 52, 93, 260, yk], [1, "de", 53, 93, 263, tr], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, Ko], [Fo, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, tr], [1, "de", 53, 93, 276, 0], [ik, "de", 53, 93, 277, kq], [er, "de", 52, 93, 278, ko], [Br, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, yk], [1, "de", 52, 93, 283, yk], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, tr], [1, "de", 53, 93, 286, jj], [ik, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [Fo, "de", 53, 93, 289, kq], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [Fo, "de", 53, 93, 292, 0], [er, "de", 52, 93, 293, ko], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [V, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [ce, "de", 53, 93, 298, ko], [1, "de", 52, 93, 299, 0], [ik, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, Ko], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, yk], [1, "r", 93, 262, 0], [Br, "de", 52, 93, 261, yk], [Br, "cs", 0, 223, 104, 1], [Br, "cs", 2, 223, 105, 1], [dn, "cs", ij, 223, 102, V], [1, "cs", pa, 223, 103, 1], [1, "la", Dn, 141, 8, Aj], [er, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [dn, "de", 4, 81, 149, jj], [V, "f", ko, 83, 148, 1], [Fo, "f", Aj, 82, 149, Br], [1, "de", 34, 81, 156, 0], [Aj, "de", 51, sj, 9, 0], [er, "de", 54, Sa, xr, 0], [ce, "de", 54, $q, ka, Fj], [dn, "cs", 3, 223, 106, V], [Aj, "p", tr, 119, 279, Br], [1, "p", Fj, 109, 242, 1], [dn, "cs", 1, 29, 9, Fo], [1, "cs", Xn, 30, 9, 1], [Fo, "cs", Le, 31, yn, ik], [dn, "cs", pa, 32, ka, Br], [1, "cs", Ok, 33, 9, 1], [1, "cs", 2, 69, rq, 1], [1, "cs", C, 71, xr, er], [1, "cs", kn, 70, ka, Aj], [1, "cs", 1, 72, Hk, 1], [V, "cs", Ok, 73, L, 1], [1, "de", Ke, 31, 10, yk], [Fo, "de", lj, 29, 10, Fj], [1, "de", Bq, 44, lj, jj], [1, "de", kr, 87, 10, Fj], [er, "de", Yn, 86, Bq, 0], [er, "de", 5, 87, 9, yk], [V, "de", 5, P, 10, 0], [1, "de", kr, 14, 11, 0], [ik, "de", gn, $j, 10, ko], [1, "de", kr, 17, zq, yk], [1, "cs", 2, 146, 9, Fo], [1, "cs", Xn, 148, L, 1], [1, "cs", C, 150, 9, 1], [Aj, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, Fo], [V, "cs", ce, 149, Ze, V], [1, "cs", dn, 154, 9, 1], [Fo, "cs", ta, 147, 9, ce], [1, "cs", 3, 151, 9, 1], [dn, "cs", ta, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [ce, "cs", 3, 157, 9, 1], [1, "cs", _i, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [Br, "cs", 3, 160, 9, 1], [1, "cs", ko, 161, 9, V], [er, "cs", ij, 162, 9, 1], [V, "cs", 2, 163, I, 1], [V, "cs", 1, 164, yn, V], [1, "cs", kn, 165, xr, Br], [ik, "cs", Ea, 166, 9, Aj], [dn, "cs", 3, 168, Hk, dn], [1, "cs", _i, 170, I, dn], [1, "cs", Br, 169, 9, dn], [1, "cs", pa, 167, ka, V], [1, "cs", C, 171, rq, Fo], [1, "cs", 2, 173, 9, V], [er, "cs", ij, 172, 9, V], [1, "cs", Le, 174, L, 1], [er, "cs", Aj, 175, 9, 1], [1, "cs", fa, 176, rq, 1], [er, "cs", 3, 178, I, 1], [1, "cs", sn, 179, L, Br], [er, "cs", yk, 180, Ze, 1], [ce, "cs", Xn, 177, 9, ik], [1, "cs", Wq, 182, 9, 1], [1, "cs", 2, 181, 9, V], [Br, "cs", kn, 183, 9, dn], [1, "cs", 2, 184, 9, 1], [ce, "cs", 2, 185, 9, 1], [er, "cs", 2, 186, rq, 1], [1, "cs", Br, 187, Hk, Br], [1, "cs", ij, 188, Ze, 1], [1, "cs", fa, 189, 9, 1], [1, "cs", Mo, 190, Hk, 1], [dn, "cs", 3, 191, 9, 1], [er, "cs", 2, 192, 9, 1], [ik, "cs", 0, 193, yn, 1], [1, "cs", 2, 194, 9, ik], [ce, "cs", 2, 196, 9, Fo], [1, "cs", 2, 198, 9, V], [ce, "cs", 2, 200, rq, Aj], [Fo, "cs", fa, 195, 9, 1], [Br, "cs", Ik, 197, 9, Br], [er, "cs", Kk, 199, L, 1], [dn, "cs", 0, 201, 9, 1], [Aj, "cs", 2, 202, ka, 1], [1, "cs", ij, 203, L, 1], [Fo, "cs", 3, 208, 9, 1], [V, "cs", 3, 207, L, Aj], [1, "cs", lk, 206, 9, 1], [1, "cs", sn, 205, Hk, 1], [ik, "cs", Ea, 204, ka, 1], [1, "cs", fa, 214, rq, ik], [Aj, "cs", Dn, 215, Ze, ce], [1, "cs", ta, 216, 9, 1], [V, "cs", Ea, 217, 9, 1], [er, "cs", sn, 218, xr, er], [Br, "b", 0, Rj, 159, 0], [Aj, "b", 0, Cj, 171, 0], [2, "isl", 1, 122, 63, tr], [2, "isl", 2, 119, 277, ko], [Le, "isl", kn, 109, 244, tr], [2, "isl", Le, 114, 205, 0], [Ok, "isl", dn, 120, 150, Ko], [2, "isl", 2, 154, 129, yk], [ij, "isl", 0, 184, 158, jj], [2, "isl", ce, 208, 128, Mn], [C, "isl", 1, 215, 132, 0], [2, "isl", dn, 214, 128, 0], [pa, "isl", dn, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, ya, 1], [ce, "la", ko, 212, 18, 1], [1, "la", qo, 214, 18, Br], [1, "la", kr, 216, 19, ce], [1, "la", 4, 211, fq, 1], [1, "la", Kk, 210, 19, 1], [er, "la", 3, 215, 21, Aj], [er, "la", V, 214, _j, Br], [er, "la", 3, 214, 22, 1], [Aj, "la", _i, 214, 24, ik], [1, "la", 4, 214, 26, 1], [Aj, "la", 4, 213, 27, Aj], [1, "la", er, 212, 28, dn], [Br, "la", pa, 212, 29, er], [1, "la", Ca, 212, 30, V], [Fo, "la", 4, 208, 19, Fo], [V, "la", bn, 207, Yo, 1], [ik, "la", Br, 206, 19, ik], [1, "la", ik, 205, 19, 1], [ik, "la", Wq, 204, 19, 1], [ik, "la", 5, 203, 19, V], [1, "la", vo, 210, 17, 1]];
  var Ha = 0;
  var Cr = {
    ⵠΔⲆⲆᐃ: ["#133A2B", "#042b30"],
    ⲆᐃᐃⲆᐃⲆⵠΔΔ: [hj[m], "#136167"],
    ᐃⵠⲆᐃⲆᐃᐃ: ["#4EB687", "#187484"],
    ⲆⵠⵠᐃⵠᐃΔ: ["#664516", "#13474C"],
    ΔⲆΔΔᐃⲆⲆ: ["#FCEFBB", "#0F4D48"],
    ΔΔⵠⵠᐃⵠᐃ: ["#C1AA7E", "#0F423D"],
    ΔΔᐃΔΔΔⵠ: ["#594837", "#163A3A"],
    ⵠⲆΔᐃΔᐃⲆ: ["#A5D6D6", "#539CA0"],
    ᐃᐃⵠⵠⵠ: ["#0B6A84", "#09373F"],
    ΔⵠⲆⵠⲆⲆⵠ: ["#2A8B9B", "#0F464C"],
    ΔΔΔⵠᐃΔΔ: ["#A9D6D3", "#115E60"],
    ⲆΔᐃⲆⲆΔⲆ: ["#ECF7F9", "#539CA0"],
    ⲆⵠⲆᐃΔΔⵠ: ["#FFF", hj[Le]],
    ᐃᐃΔⲆⲆᐃΔ: ["#FFF", hj[Le]],
    ⲆᐃⵠⵠⵠΔΔ: ["#1C9BA4", "#00272F"],
    ᐃᐃⲆΔⵠ: ["#2D2017", "#031C1E"],
    ⵠⵠΔ: ko,
    ΔΔⵠ: 1,
    ⵠⲆΔΔᐃᐃΔᐃᐃ: 2300,
    ᐃⲆⲆΔⲆΔⵠⵠᐃ: 2290,
    ⲆΔᐃᐃⵠⵠᐃ: 34,
    ᐃᐃᐃⵠᐃᐃᐃ: 5,
    ΔᐃΔΔᐃⲆⲆ: 68,
    ΔΔⲆᐃⲆΔⵠ: 34,
    ᐃⵠΔΔⲆⵠⵠ: Ca,
    ⵠⵠᐃⵠⵠⵠⲆ: Aj,
    ⲆⲆΔᐃⵠⲆᐃ: 0.6,
    ⲆᐃΔᐃⵠᐃⲆ: 0.25,
    ΔΔΔⵠⵠⲆⵠ: 50,
    ΔᐃⲆⲆᐃⲆᐃ: 10,
    ΔⵠᐃΔᐃΔⵠ: 75,
    ᐃΔⲆⲆⲆΔΔ: 20,
    Ⲇᐃⵠⵠᐃⵠᐃ: 5,
    ⵠⲆΔᐃΔ: Ha++,
    ⵠⵠⵠΔⵠ: Ha++,
    ΔⵠⲆᐃΔ: Ha++,
    ᐃⲆⵠΔⲆ: Ha++,
    ⲆΔᐃᐃᐃ: Ha++,
    ⲆΔⵠⲆᐃ: Ha++,
    ΔᐃⲆⵠΔ: Ha++,
    ΔⲆⲆᐃᐃ: Ha++,
    ᐃⵠΔᐃⲆ: Ha++,
    ⵠⵠⵠⵠΔ: Ha++,
    ᐃⵠⵠⵠᐃ: Ha++,
    ⵠΔᐃⵠⵠ: Ha++,
    ᐃⲆⵠⲆⲆ: Ha++,
    ⵠⲆᐃᐃΔ: Ha++,
    ΔⲆⲆⵠⲆ: Ha++,
    ΔⵠⲆⵠⵠ: Ha++,
    ⵠⲆᐃⲆᐃ: Ha++,
    ΔᐃᐃⲆΔ: Ha++,
    ⵠⵠⲆⵠΔ: Ha++,
    ⵠΔⲆΔᐃ: Ha++,
    ᐃⵠΔΔᐃ: Ha++,
    ⵠⲆⵠᐃⲆ: Ha++,
    ⵠⲆΔⲆΔ: Ha++,
    ᐃⵠⵠΔᐃ: Ha++,
    ΔⵠⵠᐃΔ: Ha++,
    ΔΔᐃⲆΔ: Ha++,
    ⲆⲆⲆᐃⲆ: Ha++,
    ᐃⵠᐃⲆᐃ: Ha++,
    ⲆⵠⵠⲆⲆ: Ha++,
    ᐃⵠΔⵠ: Ha++,
    ⲆΔⵠΔⵠ: Ha++,
    ΔᐃⲆⲆⵠ: Ha++,
    ΔⲆⵠΔⲆ: Ha++,
    ⲆᐃᐃΔⲆ: Ha++,
    ᐃΔⵠᐃⵠ: Ha++,
    ⲆᐃᐃᐃⲆ: Ha++,
    ΔᐃᐃΔⲆ: Ha++,
    ⵠᐃᐃΔᐃ: Ha++,
    Ⲇᐃᐃⵠᐃ: Ha++,
    ⵠΔᐃⵠᐃ: Ha++,
    ΔΔᐃⵠⵠ: Ha++,
    Δⵠⵠᐃᐃ: Ha++,
    ⲆᐃⲆᐃᐃ: Ha++,
    ᐃⵠᐃᐃΔ: Ha++,
    ⲆΔⲆⲆᐃ: Ha++,
    ⵠᐃⲆⲆΔ: Ha++,
    Ⲇᐃᐃⵠⵠ: Ha++,
    ⵠⲆᐃᐃⵠ: Ha++,
    ⵠΔⲆⲆΔ: Ha++,
    ΔᐃᐃⲆⲆ: Ha++,
    ⲆΔⵠⵠⲆ: Ha++,
    ΔⵠᐃΔᐃ: Ha++,
    ᐃⵠΔᐃⵠ: Ha++,
    ᐃⲆⵠⲆᐃ: Ha++,
    ΔΔΔⲆᐃ: Ha++,
    ⵠⲆⲆⵠⲆ: Ha++,
    ⲆΔⵠⵠΔ: Ha++,
    ᐃⲆᐃΔⲆ: Ha++,
    ᐃΔᐃΔΔ: Ha++,
    ⵠΔⵠᐃⵠ: Ha++,
    ⵠⵠⵠᐃᐃ: Ha++,
    ⲆᐃᐃΔᐃ: Ha++,
    ⵠΔΔⲆΔ: Ha++,
    ⵠⲆⲆⵠⵠ: Ha++,
    ⵠᐃᐃⲆᐃ: Ha++,
    ᐃᐃᐃΔⲆ: Ha++,
    ᐃΔΔⲆᐃ: Ha++,
    ᐃΔⲆⲆⲆ: Ha++,
    ⵠᐃᐃᐃΔ: Ha++,
    ΔⵠⲆᐃⲆ: Ha++,
    ΔᐃΔⲆⲆ: Ha++,
    ⵠⵠΔΔΔ: Ha++,
    ᐃⵠⵠᐃⵠ: Ha++,
    ⵠⲆⲆⲆΔ: Ha++,
    ⲆᐃΔΔᐃ: Ha++,
    ⵠᐃⲆⲆᐃ: Ha++,
    ᐃⵠᐃⲆⲆ: Ha++,
    ΔⵠᐃⲆᐃ: Ha++,
    ΔⲆΔᐃⵠ: Ha++,
    ⵠⵠΔΔⵠ: Ha++,
    ⲆᐃⲆⲆⲆ: Ha++,
    ⵠᐃⵠⲆⲆ: Ha++,
    ⲆⵠⲆⲆⲆ: Ha++,
    ᐃᐃᐃⲆᐃ: Ha++,
    ᐃΔᐃⵠΔ: Ha++,
    ᐃΔᐃⵠⵠ: Ha++,
    ⵠⵠⲆⲆⵠ: Ha++,
    ΔⵠΔⵠⲆ: Ha++,
    ⵠⲆΔΔⲆ: Ha++,
    ⲆΔᐃⵠᐃ: Ha++,
    ⵠⲆⵠⲆⵠ: Ha++,
    Δᐃᐃᐃᐃ: Ha++,
    ᐃᐃⵠᐃⲆ: Ha++,
    ⵠⲆᐃⵠΔ: Ha++,
    ᐃⵠⲆⲆⲆ: Ha++,
    ᐃᐃⲆⵠⲆ: Ha++,
    ᐃΔᐃⲆΔ: Ha++,
    ΔⲆΔᐃΔ: Ha++,
    ⵠΔⵠⵠΔ: Ha++,
    ΔΔⲆΔΔ: Ha++,
    ᐃᐃΔᐃᐃⵠΔⲆᐃ: Ha++,
    ⵠⲆⵠΔᐃ: Ha++,
    ⲆΔᐃⵠⲆ: Ha++,
    ΔⲆᐃᐃᐃ: Ha++,
    ΔᐃⲆⲆⲆ: Ha++,
    Ⲇⵠᐃᐃⵠ: Ha++,
    ⲆΔⲆⲆⲆ: Ha++,
    ΔΔΔᐃⵠ: Ha++,
    ⵠᐃⲆΔΔ: Ha++,
    ᐃΔᐃΔ: Ha++,
    ᐃᐃΔⲆⲆ: Ha++,
    ⲆΔᐃⲆ: Ha++,
    ⵠⲆⲆΔ: Ha++,
    ⵠⵠⲆΔⲆⵠᐃ: Ha++,
    ᐃⵠΔⲆᐃ: Ha++,
    ⵠⵠⲆⵠⲆΔΔ: Ha++,
    ᐃⵠⵠᐃⲆ: Ha++,
    ᐃΔⵠᐃⲆ: Ha++,
    ᐃⲆᐃⲆᐃΔᐃ: Ha++,
    ᐃΔᐃⵠⵠΔⲆ: Ha++,
    ⲆΔΔⵠⲆ: Ha++,
    ᐃᐃᐃΔ: Ha++,
    ΔⲆᐃⲆⵠ: Ha++,
    ᐃᐃᐃᐃⵠ: Ha++,
    ⲆΔⲆᐃᐃᐃᐃ: Ha++,
    ᐃⲆΔⲆⲆ: Ha++,
    ⲆΔᐃⵠⵠ: Ha++,
    ᐃⲆᐃⵠᐃ: Ha++,
    ⵠᐃⲆⵠⵠ: Ha++,
    ⲆⵠⵠΔⲆ: Ha++,
    ΔⲆᐃΔᐃ: Ha++,
    ΔᐃᐃⲆᐃ: Ha++,
    ΔΔⲆᐃᐃ: Ha++,
    ΔᐃᐃΔΔ: Ha++,
    ᐃᐃΔⲆΔ: Ha++,
    ᐃⲆΔⵠⵠ: Ha++,
    ⲆᐃᐃⵠⲆ: Ha++,
    ⵠⵠⵠⲆⲆ: Ha++,
    Ⲇⵠᐃⵠⵠ: Ha++,
    ΔⲆᐃⲆΔ: Ha++,
    ⵠΔᐃΔⵠᐃΔ: Ha++,
    ΔⵠΔΔⲆ: Ha++,
    ΔΔΔᐃᐃΔⲆ: Ha++,
    ⲆᐃⲆᐃⲆⲆᐃ: Ha++,
    ᐃⲆΔⵠⲆᐃᐃ: Ha++,
    ⵠᐃⵠⲆⵠⵠⵠ: Ha++,
    ⵠΔΔᐃᐃ: Ha++,
    ⵠᐃⵠⵠΔ: Ha++,
    ΔⲆⲆⲆⲆ: Ha++,
    ᐃⲆⲆΔⲆ: Ha++,
    ⲆᐃΔᐃⲆ: Ha++,
    ⲆΔᐃⲆⲆ: Ha++,
    ᐃᐃᐃⵠᐃ: Ha++,
    ⵠⵠⲆᐃᐃ: Ha++,
    ᐃⲆΔᐃΔ: Ha++,
    ⵠⲆⲆᐃᐃ: Ha++,
    ΔᐃΔⵠᐃ: Ha++,
    ⵠΔΔᐃⲆ: Ha++,
    ⵠⲆⲆⵠΔ: Ha++,
    ⵠⵠⲆΔΔ: Ha++,
    ᐃΔⲆᐃᐃ: Ha++,
    ⵠⵠΔⵠΔ: Ha++,
    ᐃⲆⲆⲆᐃ: Ha++,
    ⲆⲆΔⵠⵠ: Ha++,
    ᐃⵠⵠΔⵠ: Ha++,
    ⲆⲆᐃⲆΔ: Ha++,
    ᐃⲆᐃΔⲆⲆⲆ: Ha++,
    ⲆΔΔⲆⵠ: Ha++,
    Ⲇᐃⵠⵠⵠ: Ha++,
    ⲆΔⲆᐃᐃ: Ha++,
    ᐃᐃᐃΔⵠ: Ha++,
    ⲆᐃⵠⵠⵠΔⵠ: Ha++,
    ⲆⵠᐃⵠᐃⲆⵠ: Ha++,
    ⲆⲆᐃΔΔⲆⵠ: Ha++,
    ⲆⵠΔΔᐃ: Ha++,
    ᐃⵠⲆΔΔᐃᐃ: Ha++,
    ⵠΔⲆΔⵠⵠⵠ: Ha++,
    ⵠΔⲆⵠᐃᐃᐃ: Ha++,
    ΔΔⲆΔⵠⵠⲆ: Ha++,
    ΔⵠⲆⵠⲆᐃΔ: Ha++,
    ⲆⵠᐃΔⲆΔⵠ: Ha++,
    ᐃΔⲆᐃⵠⲆⵠ: Ha++,
    ᐃᐃᐃⲆⵠⲆᐃ: Ha++,
    ᐃᐃⵠΔΔ: Ha++,
    ⵠⵠᐃⵠΔ: Ha++,
    ⵠᐃᐃᐃᐃ: Ha++,
    ⲆᐃⵠΔᐃ: Ha++,
    ᐃᐃⵠⵠⲆ: Ha++,
    ⲆⲆⲆⵠⵠΔΔ: Ha++,
    ⵠᐃⵠⵠⵠ: Ha++,
    ⲆΔⵠⲆΔ: Ha++,
    ᐃΔⵠΔΔᐃᐃ: Ha++,
    ⲆⵠⵠⲆⵠ: Ha++,
    ΔⲆⵠΔᐃⵠⲆ: Ha++,
    ⲆⵠⲆΔⵠ: Ha++,
    ⲆᐃΔᐃᐃ: Ha++,
    ⵠΔⲆᐃⵠⲆⵠ: Ha++,
    ΔⵠⵠΔⵠⲆⵠ: Ha++,
    ⵠᐃⲆⵠᐃ: Ha++,
    ⵠⵠⵠⲆᐃ: Ha++,
    ᐃⲆᐃⲆⵠᐃΔ: Ha++,
    ᐃⵠⲆᐃⵠ: Ha++,
    ⵠⲆᐃⲆ: Ha++,
    ⲆⲆΔΔⲆ: Ha++,
    ΔΔᐃΔⵠᐃⲆ: Ha++,
    ⲆΔⵠᐃⲆ: Ha++,
    ΔⵠΔⵠⲆᐃⵠ: Ha++,
    ΔⵠⲆΔᐃ: Ha++,
    ⲆⵠᐃΔⵠᐃⵠ: Ha++,
    ⵠᐃⵠⲆⵠ: Ha++,
    ΔⲆᐃᐃⲆᐃⵠ: Ha++,
    ΔⲆⲆΔⵠΔΔ: Ha++,
    ᐃⵠᐃΔⲆ: Ha++,
    ᐃⵠⲆⵠⵠ: Ha++,
    ⵠΔⲆⵠᐃ: Ha++,
    ΔⵠⲆⵠΔ: Ha++,
    ΔⵠⲆⵠⲆ: Ha++,
    ⲆⲆᐃⲆᐃ: Ha++,
    ⲆⲆΔᐃⲆ: Ha++,
    ᐃᐃⵠΔⵠ: Ha++,
    ⲆΔⵠⵠᐃ: Ha++,
    ᐃΔΔᐃⵠ: Ha++,
    ⵠⲆⵠᐃᐃ: Ha++,
    ⲆᐃⲆΔⵠ: Ha++,
    ᐃᐃⲆᐃⵠ: Ha++,
    ⲆᐃⵠᐃⲆⲆᐃ: Ha++,
    ⵠᐃⵠⲆⵠᐃⵠ: Ha++,
    ⵠΔᐃΔⵠ: Ha++,
    ᐃⲆⲆᐃᐃⵠΔ: Ha++,
    ᐃⲆΔⵠΔ: Ha++,
    ᐃᐃᐃⲆⲆ: Ha++,
    ᐃᐃΔⵠᐃ: Ha++,
    ⲆΔⵠⵠⵠ: Ha++,
    ⵠⲆᐃⲆⵠ: Ha++,
    ⲆⲆⵠⵠⲆᐃᐃ: Ha++,
    ΔⵠΔΔᐃ: Ha++,
    ᐃᐃⵠⲆⵠ: Ha++,
    Δᐃⵠᐃᐃ: Ha++,
    ⲆΔΔᐃΔ: Ha++,
    ⵠΔΔⵠⲆ: Ha++,
    ⲆⲆⲆΔⵠ: Ha++,
    ΔⵠΔⲆΔ: Ha++,
    ⵠⲆΔⵠᐃ: Ha++,
    ⵠΔⲆⲆⵠᐃⲆ: Ha++,
    ⵠΔΔΔᐃ: Ha++,
    ΔΔᐃⵠᐃ: Ha++,
    ᐃⲆⵠⲆⵠΔΔ: Ha++,
    ᐃᐃⵠᐃᐃ: Ha++,
    ⵠΔⵠΔΔ: Ha++,
    ᐃᐃΔⲆΔᐃᐃ: Ha++,
    ⵠⲆᐃⵠⲆ: Ha++,
    ΔⵠᐃᐃΔ: Ha++,
    ⲆⵠΔⲆⵠⵠⲆ: Ha++,
    ⵠⲆᐃⵠΔⲆᐃ: Ha++,
    ⲆΔⵠⲆΔΔⵠ: Ha++,
    ⲆⵠᐃΔΔⵠⲆ: Ha++,
    ⲆⲆⵠΔᐃᐃΔ: Ha++,
    ⲆᐃⲆΔⵠⵠᐃ: Ha++,
    ⵠᐃΔⲆⵠⲆΔ: Ha++,
    ΔⵠⵠᐃⲆᐃⲆ: Ha++,
    ⵠᐃᐃΔΔ: Ha++,
    ⲆⲆⵠᐃⵠⲆⵠ: Ha++,
    ᐃΔⲆΔᐃΔⲆ: Ha++,
    ᐃΔΔⲆⵠⵠᐃ: Ha++,
    ⵠⵠΔⵠᐃ: Ha++,
    ΔΔⵠⲆⲆᐃⲆ: Ha++,
    ⲆΔⲆΔⵠᐃⵠ: Ha++,
    ⵠᐃΔΔΔᐃⲆ: Ha++,
    ⲆᐃᐃⵠⲆΔⲆ: Ha++,
    ᐃⵠΔⲆⲆⲆΔ: Ha++,
    ΔⵠΔᐃⲆⵠⲆ: Ha++,
    ⵠⵠᐃᐃᐃΔⲆ: Ha++,
    ᐃⵠⲆᐃⵠⲆⵠ: Ha++,
    ⲆⲆⵠᐃⲆⲆΔ: Ha++,
    ΔⵠⲆᐃⲆⵠᐃ: Ha++,
    ⵠᐃⲆⲆⲆⵠΔ: Ha++,
    ⲆⵠᐃᐃΔΔΔ: Ha++,
    ᐃⲆⲆⲆⵠⲆΔ: Ha++,
    ⲆⵠⲆᐃⵠⲆΔ: Ha++,
    ᐃΔⵠⵠ: Ha++,
    ᐃΔΔΔⵠ: Ha++,
    ⲆΔⵠΔᐃΔⲆ: Ha++,
    ⲆᐃⲆΔⲆΔΔ: Ha++,
    ⵠⵠ: Ha++,
    ⵠΔⲆⲆᐃⲆΔ: Ha++,
    ΔᐃΔᐃᐃ: Ha++,
    ⵠⲆⲆΔⲆ: Ha++,
    ΔⵠΔᐃⵠᐃⲆ: Ha++,
    ⵠᐃΔΔᐃ: Ha++,
    ⲆⲆⲆΔⲆΔⲆ: Ha++,
    ⲆᐃⲆΔᐃⵠⲆ: Ha++,
    ᐃΔⲆⲆⵠⵠⲆ: Ha++,
    ⲆⲆΔΔⵠᐃΔ: Ha++,
    ⵠᐃᐃⲆⵠΔⵠ: Ha++,
    ⲆⵠⲆΔⲆ: Ha++,
    ⲆΔᐃΔΔΔⲆ: Ha++,
    ᐃⵠⵠΔΔⲆᐃ: Ha++,
    ⲆⵠΔⵠⲆᐃⲆ: Ha++,
    ⵠΔⲆΔᐃΔⲆ: Ha++,
    ΔΔΔⵠᐃ: Ha++,
    ⵠⵠΔⲆΔⲆΔ: Ha++,
    ⵠⲆᐃΔΔⵠΔ: Ha++,
    ⲆⲆᐃΔΔⵠⲆ: Ha++,
    ⲆⵠΔᐃᐃⲆΔ: Ha++,
    ⲆΔⵠⵠⵠⲆⲆ: Ha++,
    ᐃᐃⵠⲆᐃᐃΔ: Ha++,
    ᐃᐃⵠΔᐃⵠⲆ: Ha++,
    ᐃΔΔⵠⵠ: Ha++,
    ΔⲆᐃΔⵠᐃΔ: Ha++,
    ΔⲆⲆΔᐃⲆⵠ: Ha++,
    ⲆΔΔΔΔᐃⲆ: Ha++,
    ⵠⲆⲆᐃⵠΔⲆ: Ha++,
    ΔΔΔΔΔᐃⵠ: Ha++,
    ⲆⲆⲆⵠⲆⵠΔ: Ha++,
    ΔᐃⲆⲆⲆᐃⲆ: Ha++,
    ΔⵠⲆΔⲆⲆΔ: Ha++,
    ⵠΔᐃΔΔⵠᐃ: Ha++,
    ⲆⲆᐃⲆᐃΔⵠ: Ha++,
    ⵠΔᐃⲆΔⲆᐃ: Ha++,
    ᐃᐃⲆᐃⵠᐃⲆ: Ha++,
    ΔᐃⲆΔᐃⲆⵠ: Ha++,
    ᐃΔⲆᐃⵠ: Ha++,
    ⵠⵠⵠᐃᐃⵠᐃ: Ha++,
    ΔⵠⵠⵠⲆᐃᐃ: Ha++,
    ΔᐃΔⵠⵠⲆⵠ: Ha++,
    ᐃⲆΔⲆⲆᐃΔ: Ha++,
    ⵠⵠΔᐃᐃΔⲆ: Ha++,
    ⲆⵠⲆⲆⵠⵠⵠ: Ha++,
    ⲆⵠⲆⲆᐃⲆΔ: Ha++,
    ⲆⲆⲆⲆⵠᐃⵠ: Ha++,
    ΔᐃᐃⲆⵠⲆΔ: Ha++,
    ᐃⵠΔΔΔᐃᐃ: Ha++,
    ⲆⵠΔᐃⲆΔΔ: Ha++,
    ⲆⲆΔⲆᐃΔᐃ: Ha++,
    ⲆΔΔᐃᐃⲆⲆ: Ha++,
    ΔⲆᐃⲆⲆⲆΔ: Ha++,
    ΔⵠⲆⲆⲆⲆⵠ: Ha++,
    ⵠΔΔᐃⲆΔΔ: Ha++,
    ⲆΔᐃΔᐃΔⵠ: Ha++,
    ⵠⲆΔΔⲆⵠᐃ: Ha++,
    ᐃᐃⵠⲆΔⵠⵠ: Ha++,
    ΔΔⲆⲆᐃⵠⵠ: Ha++,
    ΔᐃΔⵠᐃⲆΔ: Ha++,
    ᐃⲆⲆⲆⵠⵠⲆ: Ha++,
    ᐃⲆᐃᐃⵠΔⲆ: Ha++,
    ⲆⵠΔᐃⲆⵠᐃ: Ha++,
    ΔΔⵠⵠⵠⵠᐃ: Ha++,
    ᐃⵠⲆⵠᐃⲆᐃⲆⵠ: Ha++,
    ⵠΔⲆⲆᐃⲆᐃ: Ha++,
    ⲆᐃⵠⲆⵠᐃᐃ: Ha++,
    ⲆⵠⵠⲆⲆᐃΔ: Ha++,
    ᐃⵠⲆⵠΔⵠΔ: Ha++,
    ⵠᐃΔⵠᐃⵠⲆ: Ha++,
    ΔⲆⵠⲆⵠⵠᐃ: Ha++,
    ΔᐃⵠΔⲆⲆⲆ: Ha++,
    ΔΔΔⵠΔⵠᐃ: Ha++,
    ΔᐃᐃΔᐃᐃᐃ: Ha++,
    ⵠᐃⵠⵠᐃⲆΔ: Ha++,
    ⵠⲆΔⲆⲆᐃⲆ: Ha++,
    ⵠⵠⲆⵠⵠⲆⵠ: Ha++,
    ΔⵠⵠᐃⵠΔⲆ: Ha++,
    ΔᐃⲆᐃⲆᐃⲆ: Ha++,
    ᐃⵠⲆΔⲆⵠᐃ: Ha++,
    ⲆΔᐃⵠⵠⵠⲆ: Ha++,
    ᐃᐃᐃΔᐃᐃⵠ: Ha++,
    ᐃᐃⵠᐃⲆⲆᐃ: Ha++,
    ⲆᐃⲆᐃΔΔᐃ: Ha++,
    ΔⵠᐃⵠΔᐃΔ: Ha++,
    ᐃᐃΔⵠⵠᐃⵠ: Ha++,
    ΔⲆⵠⵠⵠⲆᐃ: Ha++,
    ⵠⵠⵠⵠΔΔⵠ: Ha++,
    ⵠᐃⲆᐃⵠΔⲆ: Ha++,
    ᐃⵠᐃⲆⵠⲆⲆ: Ha++,
    ⵠᐃⵠⲆΔᐃᐃ: Ha++,
    ᐃⵠᐃᐃΔΔᐃ: Ha++,
    ΔᐃⵠᐃᐃΔⵠ: Ha++,
    ᐃⵠᐃⵠⲆⲆᐃ: Ha++,
    ΔᐃⲆⲆⲆⵠⲆ: Ha++,
    ᐃⵠΔⲆⵠΔΔ: Ha++,
    ᐃⲆⵠⵠⵠⲆⵠ: Ha++,
    ⵠΔⵠⵠᐃⲆΔ: Ha++,
    ΔΔⵠᐃᐃᐃΔ: Ha++,
    ⵠⲆΔⵠⵠΔⲆ: Ha++,
    ⲆⵠⵠⵠⵠⲆⵠ: Ha++,
    ⲆΔᐃⵠⵠⵠᐃ: Ha++,
    ΔⵠⲆᐃΔΔᐃ: Ha++,
    ΔᐃᐃⵠⲆⵠΔ: Ha++,
    ⵠⵠⵠⵠⵠⲆⲆ: Ha++,
    ⵠᐃΔΔⲆΔⲆ: Ha++,
    ⵠⲆⵠᐃΔⵠᐃ: Ha++,
    ᐃᐃᐃⲆᐃΔⲆ: Ha++,
    ⵠⵠᐃⵠΔⲆΔ: Ha++,
    ⲆⲆⵠⵠⵠⵠⲆ: Ha++,
    ⲆᐃΔᐃⵠᐃⵠ: Ha++,
    ⵠᐃᐃᐃᐃΔⵠ: Ha++,
    ⲆΔᐃᐃⵠΔⵠ: Ha++,
    ᐃΔⵠⵠⵠΔᐃ: Ha++,
    ΔⲆⲆΔΔⵠΔ: Ha++,
    ΔΔΔᐃΔᐃᐃ: Ha++,
    ᐃⲆⲆΔΔΔⵠ: Ha++,
    ⲆⵠΔᐃⲆⵠⵠ: Ha++,
    ᐃΔⲆⲆΔᐃⲆ: Ha++,
    ⵠⵠⲆΔⲆⲆΔ: Ha++,
    ΔᐃΔⲆᐃⲆⲆ: Ha++,
    ΔᐃⵠΔΔᐃⲆ: Ha++,
    ⵠⵠⵠⵠⵠⵠⲆ: Ha++,
    ⲆΔⵠⵠⲆΔᐃ: Ha++,
    ⲆᐃⲆᐃᐃⲆᐃ: Ha++,
    ⲆΔⲆⵠᐃΔⲆ: Ha++,
    ⲆⵠᐃⲆⲆⲆᐃ: Ha++,
    ᐃⲆΔᐃⲆᐃⲆ: Ha++,
    ⲆⵠⵠΔⲆΔΔ: Ha++,
    ᐃⲆᐃᐃⵠⲆⲆ: Ha++,
    ⵠⵠΔᐃⵠ: Ha++,
    ⵠⵠΔⵠΔᐃΔⲆⵠ: Ha++,
    ᐃⵠᐃᐃⲆ: Ha++,
    ⲆΔⵠᐃⵠ: Ha++,
    ᐃⲆΔΔⲆⲆⲆΔΔ: Ha++,
    ᐃΔⵠᐃⲆⵠᐃ: Ha++,
    ΔⵠⵠⵠΔ: Ha++,
    ᐃⵠⵠᐃⲆΔΔ: Ha++,
    ⲆᐃᐃᐃᐃⵠΔ: Ha++,
    ⵠᐃᐃⲆΔΔⵠ: Ha++,
    ᐃᐃᐃΔⵠⲆⵠ: Ha++,
    ᐃᐃΔⵠⲆⲆⲆ: Ha++,
    ΔᐃΔᐃᐃᐃⵠ: Ha++,
    ΔᐃⵠⵠΔᐃⵠ: Ha++,
    ⲆᐃⲆᐃⵠᐃⲆ: Ha++,
    ⲆⵠΔΔΔᐃⲆ: Ha++,
    ᐃΔⵠᐃΔⵠᐃ: Ha++,
    ⵠⲆⲆⵠΔᐃᐃ: Ha++,
    ᐃΔᐃⲆⲆΔΔ: Ha++,
    ᐃⵠᐃᐃΔⲆⵠ: Ha++,
    ΔΔΔΔⵠⲆΔ: Ha++,
    ᐃΔΔⲆⵠⵠⲆ: Ha++,
    ⲆΔⵠᐃⲆⵠᐃ: Ha++,
    ᐃⲆⵠⲆⲆⵠΔ: Ha++,
    ΔΔⵠΔⵠΔⵠ: Ha++,
    ᐃⵠᐃᐃⵠⵠⲆ: Ha++,
    ᐃΔΔⵠⵠⵠⵠ: Ha++,
    ⵠⵠⵠᐃⲆᐃΔ: Ha++,
    ᐃΔΔΔΔⵠⲆ: Ha++,
    ΔⲆΔᐃᐃⲆᐃ: Ha++,
    ⵠᐃⵠΔᐃΔⲆ: Ha++,
    ⵠΔΔΔⵠΔΔⲆᐃ: Ha++,
    ⲆᐃⲆΔΔ: Ha++,
    ΔⲆⵠᐃᐃΔⵠ: Ha++,
    ΔⵠⲆᐃⵠⲆΔ: Ha++,
    ⵠΔⲆⵠⲆᐃⵠΔᐃ: Ha++,
    ᐃΔᐃᐃΔ: Ha++,
    Δⵠᐃⵠᐃ: Ha++,
    ⵠᐃⲆⵠᐃⲆⲆ: Ha++,
    ᐃⲆⵠⵠⵠΔΔ: Ha++,
    ⵠᐃΔᐃᐃⵠΔ: Ha++,
    ΔᐃⲆⲆⵠⲆᐃ: Ha++,
    ⵠⵠᐃⲆⵠⲆΔ: Ha++,
    ᐃⲆⲆᐃᐃΔⲆ: Ha++,
    ΔΔΔⲆᐃΔⵠ: Ha++,
    ΔΔΔΔⵠⵠⵠ: Ha++,
    ⲆⵠⵠⲆΔΔᐃ: Ha++,
    ⲆⵠΔᐃΔⲆᐃ: Ha++,
    ΔΔᐃᐃΔⵠⲆ: Ha++,
    ᐃⲆⲆᐃⲆΔᐃ: Ha++,
    ᐃᐃⵠⲆⵠᐃⵠ: Ha++,
    ΔΔΔᐃΔᐃⲆ: Ha++,
    ⵠⵠⲆᐃⵠΔΔ: Ha++,
    ⲆⲆⲆᐃᐃⲆⲆ: Ha++,
    ΔⵠᐃΔⲆΔΔ: Ha++,
    ᐃⵠᐃⲆΔⵠⲆ: Ha++,
    ᐃⲆⲆⲆⲆΔⵠ: Ha++,
    ⲆᐃᐃᐃⲆΔΔ: Ha++,
    ᐃΔᐃⲆⲆⵠᐃ: Ha++,
    ΔΔΔᐃⵠΔⲆ: Ha++,
    ᐃⲆⲆᐃⲆΔⲆ: Ha++,
    ΔΔⵠᐃᐃΔᐃ: Ha++,
    ⵠⲆΔᐃⵠᐃⵠ: Ha++,
    ⲆᐃⵠⲆΔⲆⲆ: Ha++,
    ᐃⲆΔΔⵠⲆⲆ: Ha++,
    ⲆⲆᐃᐃⲆᐃᐃ: Ha++,
    ᐃΔᐃΔΔᐃⲆ: Ha++,
    ᐃⵠᐃᐃΔⵠⵠ: Ha++,
    ᐃᐃΔⲆᐃⵠΔ: Ha++,
    ⵠᐃᐃΔⵠⲆⲆ: Ha++,
    ᐃΔΔΔᐃᐃⵠ: Ha++,
    ⵠⲆΔⵠⵠⲆⲆ: Ha++,
    ⲆⵠⲆⲆⲆΔΔ: Ha++,
    ᐃΔᐃᐃᐃⵠⲆ: Ha++,
    ᐃᐃⵠⵠⵠΔⲆ: Ha++,
    ⲆⲆᐃΔⵠⵠᐃ: Ha++,
    ΔⲆⵠⲆΔᐃⲆ: Ha++,
    ⵠᐃΔⲆΔΔⵠ: Ha++,
    ΔΔΔΔΔⵠⵠ: Ha++,
    ⲆⲆΔᐃⲆΔⵠ: Ha++,
    ⲆⲆⵠⵠᐃΔⲆ: Ha++,
    ⲆΔⵠᐃⲆⲆⵠ: Ha++,
    ⲆⲆⲆΔΔⲆⲆ: Ha++,
    ΔⵠᐃΔΔⵠⵠ: Ha++,
    ᐃΔΔΔⲆⲆΔ: Ha++,
    ⲆⲆᐃΔⲆᐃⲆ: Ha++,
    ᐃⵠᐃᐃᐃᐃⲆ: Ha++,
    ⲆⲆΔᐃᐃⵠⲆ: Ha++,
    ᐃⲆᐃΔΔᐃΔ: Ha++,
    ⵠΔᐃᐃⲆⵠⲆ: Ha++,
    ΔⲆⵠΔⲆΔΔ: Ha++,
    ⲆⵠᐃΔᐃⲆⵠ: Ha++,
    ΔᐃⵠΔᐃΔΔ: Ha++,
    ⵠΔᐃⲆⲆΔⲆ: Ha++,
    ⵠⵠⲆᐃⵠΔΔ: Ha++,
    ⵠΔΔΔⵠⵠⲆ: Ha++,
    ΔⵠΔⲆᐃⲆᐃ: Ha++,
    ΔⲆⵠⵠⵠΔⲆ: Ha++,
    ⵠΔⲆΔⵠᐃΔ: Ha++,
    ᐃΔⵠⵠΔⵠᐃ: Ha++,
    ⲆⲆⵠᐃᐃᐃⵠ: Ha++,
    ⵠΔⵠᐃᐃⵠᐃ: Ha++,
    ⵠⵠⵠⲆⲆᐃⵠ: Ha++,
    ⲆⵠⵠⵠΔᐃΔ: Ha++,
    ᐃⲆΔⲆᐃⲆᐃ: Ha++,
    ᐃᐃΔΔΔΔᐃ: Ha++,
    ⵠᐃⲆΔᐃᐃᐃ: Ha++,
    ⵠΔⵠᐃᐃⵠⲆ: Ha++,
    ΔⲆΔⵠⵠⲆΔ: Ha++,
    ⵠⲆᐃᐃΔΔⲆ: Ha++,
    ⲆΔᐃΔⵠΔⵠ: Ha++,
    ⲆᐃΔⵠΔⵠΔ: Ha++,
    ΔΔΔΔᐃᐃⵠ: Ha++,
    ᐃⵠⲆⵠⵠⵠⵠ: Ha++,
    Δᐃᐃᐃᐃᐃᐃ: Ha++,
    ΔⲆᐃΔᐃᐃᐃ: Ha++,
    ΔⵠⲆⲆⵠⵠⵠ: Ha++,
    ᐃᐃⲆⲆΔΔⵠ: Ha++,
    ΔⲆⲆⵠⲆⲆΔ: Ha++,
    ⲆΔΔⲆⲆᐃᐃ: Ha++,
    ᐃΔᐃⲆᐃΔᐃ: Ha++,
    ⵠΔΔⵠⵠΔⲆ: Ha++,
    ⲆᐃⲆⲆⲆᐃᐃ: Ha++,
    ⲆⵠΔⲆⲆᐃⵠ: Ha++,
    ⵠⲆΔΔΔᐃⵠ: Ha++,
    ᐃᐃⵠᐃⵠⲆⲆ: Ha++,
    ᐃΔⲆⲆΔⵠΔΔΔ: Ha++,
    ᐃᐃⵠΔΔᐃᐃ: Ha++,
    ⵠΔⲆΔⲆΔΔ: Ha++,
    ⲆⲆⲆᐃΔᐃⲆ: Ha++,
    ΔⲆΔᐃᐃⲆⲆ: Ha++,
    ΔᐃⲆⵠⲆᐃΔⲆⵠ: Ha++,
    POINTS: Ha++,
    ᐃΔⵠⵠᐃⵠⲆ: Ha++,
    ⵠⲆⵠΔΔⲆⵠ: Ha++,
    ⵠⲆᐃΔⵠⵠⲆ: Ha++,
    ᐃᐃᐃⵠΔᐃᐃ: Ha++,
    ᐃⵠᐃΔⵠΔⲆ: Ha++,
    ⲆⲆⵠᐃⲆⲆⲆ: Ha++,
    ⲆᐃⲆⲆⵠⲆᐃ: Ha++,
    ΔᐃⵠⵠΔᐃΔ: Ha++,
    ⲆᐃⲆⲆᐃⲆⲆ: Ha++,
    ⲆⲆⲆᐃΔⵠⵠ: Ha++,
    ΔΔᐃΔⵠᐃΔ: Ha++,
    ᐃⲆᐃⵠᐃⵠⵠ: Ha++,
    ⲆᐃⲆᐃⵠΔⲆ: Ha++,
    ⵠⲆᐃⵠⵠᐃᐃ: Ha++,
    ΔⲆΔΔᐃᐃⵠ: Ha++,
    ΔⲆΔᐃᐃᐃⲆ: Ha++,
    ⵠⵠΔⲆⲆᐃⲆ: Ha++,
    ⵠΔᐃΔⵠⵠⵠ: Ha++,
    ᐃⵠⲆΔⵠᐃⵠ: Ha++,
    ⲆⵠΔⲆⵠᐃⲆ: Ha++,
    ⲆⵠⲆⲆⲆⲆⲆ: Ha++,
    ᐃⲆⵠᐃⵠΔᐃ: Ha++,
    ⲆⵠⵠᐃᐃⲆⵠ: Ha++,
    ⵠᐃⲆⵠⲆΔᐃ: Ha++,
    ⵠᐃⵠΔᐃᐃᐃ: Ha++,
    ⲆΔⲆᐃΔⵠᐃ: Ha++,
    ⵠΔᐃⲆᐃⲆΔ: Ha++,
    ᐃⵠⲆⲆᐃⲆΔ: Ha++,
    ⲆΔⵠᐃⵠΔⵠ: Ha++,
    ⲆᐃⵠᐃΔΔᐃ: Ha++,
    ⲆⵠᐃΔᐃᐃΔ: Ha++,
    ⲆⵠᐃⵠⵠⲆⲆ: Ha++,
    ⵠΔᐃΔᐃⲆᐃ: Ha++,
    ⲆΔⵠⲆΔΔΔ: Ha++,
    ⲆΔⵠⲆⲆⲆⲆ: Ha++,
    ΔⲆΔⵠⲆΔⲆ: Ha++,
    ⲆⲆⵠⵠΔⵠΔ: Ha++,
    ΔᐃᐃⵠⲆᐃⲆ: Ha++,
    ⲆⲆⵠⲆⲆΔΔ: Ha++,
    ⵠΔⵠΔΔⵠⵠ: Ha++,
    ΔⲆⲆⲆΔⲆⵠ: Ha++,
    ⲆᐃⲆᐃⲆⲆΔ: Ha++,
    ΔΔⵠⲆᐃⵠΔ: Ha++,
    ΔⲆⵠⲆᐃΔᐃ: Ha++,
    ᐃᐃΔΔⲆⵠⵠ: Ha++,
    ΔᐃⵠⲆⲆᐃᐃ: Ha++,
    ΔⵠΔⲆⵠΔⵠ: Ha++,
    ΔⵠᐃⵠⵠⲆⵠΔᐃ: Ha++,
    ΔⲆⲆᐃⲆⲆᐃ: Ha++,
    ⵠⵠⵠᐃᐃⲆⵠⵠⲆ: Ha++,
    ⵠᐃⲆΔⲆᐃᐃ: Ha++,
    ᐃᐃⲆⵠⲆᐃᐃᐃⲆ: Ha++,
    ⲆⵠⲆⵠΔΔⵠᐃᐃ: Ha++,
    ⵠⵠΔΔᐃΔΔᐃⵠ: Ha++,
    ⵠΔⵠⲆⵠⲆᐃⵠΔ: Ha++,
    ⵠᐃΔⵠΔⵠⵠΔΔ: Ha++,
    ΔΔⲆⲆⲆⵠΔ: Ha++,
    ᐃⲆΔΔᐃ: Ha++,
    ᐃⵠⵠⵠⵠⲆᐃ: Ha++,
    ⲆΔΔⲆⵠⲆΔ: Ha++,
    ⵠΔΔⲆⲆⲆΔ: Ha++,
    ⲆⵠΔⲆⵠⲆⲆΔⲆ: Ha++,
    ᐃΔⲆᐃⲆⲆⵠ: Ha++,
    ⲆΔⲆΔⵠΔⲆ: Ha++,
    ⵠⵠΔⲆᐃⵠⵠ: Ha++,
    ᐃⲆⲆᐃⲆΔΔ: Ha++,
    ⵠⵠⵠⲆΔᐃΔ: Ha++,
    ⲆᐃⵠⵠΔⲆΔ: Ha++,
    ⵠᐃΔᐃⲆᐃⵠ: Ha++,
    ⵠᐃᐃᐃⵠΔᐃ: Ha++,
    ᐃⵠⲆⲆⵠᐃᐃ: Ha++,
    ⲆΔⲆⲆⲆΔⵠ: Ha++,
    ⲆΔᐃᐃᐃΔⵠ: Ha++,
    ⲆᐃᐃΔΔ: Ha++,
    ΔΔⲆⵠⵠ: Ha++,
    ᐃⵠΔⵠᐃ: Ha++,
    ΔⲆΔᐃⲆᐃΔΔⲆ: Ha++,
    ⲆᐃᐃᐃⲆΔᐃ: Ha++,
    ⲆⵠᐃⵠⲆⵠⲆ: Ha++,
    ⲆⲆΔⵠΔⲆΔ: Ha++,
    ⵠᐃᐃⵠΔⲆΔ: Ha++,
    ᐃᐃⵠΔⲆᐃΔ: Ha++,
    ᐃⲆΔᐃᐃⲆΔ: Ha++,
    ᐃᐃΔⵠⲆΔⵠ: Ha++,
    ⲆΔᐃᐃΔΔⵠ: Ha++,
    ΔᐃᐃⵠΔᐃᐃ: Ha++,
    ΔⵠⵠᐃΔⵠᐃ: Ha++,
    ⲆⲆᐃΔᐃΔᐃ: Ha++,
    ᐃⲆΔⲆΔΔⵠ: Ha++,
    ⲆⵠᐃⵠΔⵠΔ: Ha++,
    ΔⲆΔΔΔᐃᐃ: Ha++,
    ᐃⲆᐃᐃΔ: Ha++,
    ⲆⲆⲆⵠⵠⲆΔ: Ha++,
    ⲆΔⵠⲆΔΔⲆ: Ha++,
    ΔⲆᐃⵠΔⵠᐃ: Ha++,
    ⵠΔⲆΔᐃᐃⵠ: Ha++,
    ⲆΔΔⵠⲆΔⵠ: Ha++,
    ⵠⲆⵠᐃⲆⲆᐃ: Ha++,
    ΔΔⵠΔⲆᐃᐃ: Ha++,
    ⵠΔᐃᐃⲆΔⵠ: Ha++,
    ᐃⵠⵠΔΔᐃᐃ: Ha++,
    ⵠⵠᐃⲆⵠΔⵠ: Ha++,
    ⲆΔⵠⵠⵠⵠⲆ: Ha++,
    ⲆΔⲆⵠⵠᐃᐃ: Ha++,
    ⵠΔⲆΔΔⲆⲆ: Ha++,
    ᐃΔⲆⵠᐃᐃᐃ: Ha++,
    ᐃⵠⵠᐃⵠⲆⵠ: Ha++,
    ⲆⵠⲆᐃⲆᐃⵠ: Ha++,
    ᐃⲆⲆⵠᐃΔᐃ: Ha++,
    ᐃⵠᐃΔⵠⲆᐃ: Ha++,
    ᐃΔⲆᐃΔⵠⲆ: Ha++,
    ⲆΔΔⵠᐃⵠⵠ: Ha++,
    ᐃΔⲆΔⲆΔⲆ: Ha++,
    ᐃΔᐃⵠΔΔᐃ: Ha++,
    ⵠᐃΔⲆⵠᐃⲆ: Ha++,
    ᐃⲆᐃⲆⲆᐃΔ: Ha++,
    ΔⵠΔᐃΔⲆΔ: Ha++,
    ΔⲆⲆⲆⵠⲆΔ: Ha++,
    ⵠⵠⵠΔᐃᐃᐃ: Ha++,
    ΔΔΔⲆᐃⲆΔ: Ha++,
    ΔΔᐃⲆᐃΔᐃ: Ha++,
    ⲆΔⲆΔⵠᐃᐃ: Ha++,
    ⵠⵠⵠΔΔᐃΔ: Ha++,
    ⲆΔⲆΔⵠΔΔ: Ha++,
    ΔⲆᐃⲆⲆᐃᐃ: Ha++,
    ⵠⵠᐃⵠᐃⲆᐃ: Ha++,
    ᐃΔⲆⲆᐃΔᐃ: Ha++,
    ⲆΔΔΔΔ: Ha++,
    ΔⲆᐃⵠᐃⲆᐃ: Ha++,
    ⲆΔⲆᐃΔⲆΔ: Ha++,
    ⵠⵠᐃⵠᐃ: Ha++,
    ΔᐃᐃⲆᐃᐃⲆΔⵠ: Ha++,
    ⵠⲆⵠᐃⵠⵠⲆ: Ha++,
    ⲆⲆⲆⲆᐃ: Ha++,
    ΔⲆⵠΔⵠΔᐃ: Ha++,
    ΔᐃΔⲆⲆᐃᐃ: Ha++,
    ᐃⵠΔΔΔΔⲆ: Ha++,
    ⵠⲆᐃⵠⵠⵠΔ: Ha++,
    ⲆΔᐃΔᐃᐃⲆ: Ha++,
    ⲆΔᐃᐃᐃⵠΔ: Ha++,
    ⵠⲆⲆⲆⲆⵠⲆ: Ha++,
    ΔⲆᐃᐃⵠⲆΔ: Ha++,
    ΔᐃⲆᐃᐃⵠΔ: Ha++,
    ᐃⲆᐃⲆⵠⲆⲆ: Ha++,
    ⵠⲆΔᐃΔΔᐃ: Ha++,
    ᐃⵠΔⲆⵠ: Ha++,
    ΔΔᐃΔᐃ: Ha++,
    ΔⲆⵠⲆⵠ: Ha++,
    ᐃΔⵠⲆⲆ: Ha++,
    ⵠⵠᐃΔⵠ: Ha++,
    ⵠΔⵠⲆΔⵠΔ: Ha++,
    ⵠΔⲆΔᐃⵠⲆ: Ha++,
    ⲆⵠⲆᐃΔⵠⵠ: Ha++,
    ⵠⵠⲆᐃΔᐃΔ: Ha++,
    ᐃⵠᐃΔᐃᐃⲆ: Ha++,
    ᐃΔⵠΔⵠⵠΔ: Ha++,
    ⵠΔⵠⲆᐃΔΔ: Ha++,
    ⲆⵠᐃΔⵠⵠΔ: Ha++,
    ΔⲆΔΔΔΔⲆ: Ha++,
    ᐃⵠᐃᐃΔᐃΔ: Ha++,
    ᐃᐃⲆⲆⲆΔⲆ: Ha++,
    ⲆⲆⲆⲆⵠᐃᐃ: Ha++,
    ΔΔⲆⵠⲆⲆⵠ: Ha++,
    ᐃΔΔⲆᐃΔΔ: Ha++,
    ⵠᐃΔⵠⵠᐃⲆ: Ha++,
    ⵠᐃᐃⲆᐃⵠⵠ: Ha++,
    ᐃΔᐃᐃΔⲆⵠ: Ha++,
    ⲆⲆⵠⲆᐃⲆⲆ: Ha++,
    ⵠⵠᐃⵠᐃΔⲆ: Ha++,
    ᐃᐃᐃᐃᐃⵠᐃ: Ha++,
    ⵠᐃΔⲆⲆⲆΔ: Ha++,
    ⵠⵠⵠᐃΔⵠⵠ: Ha++,
    ⲆⵠᐃΔᐃⵠᐃ: Ha++,
    ΔᐃΔⵠᐃᐃⵠ: Ha++,
    ΔᐃᐃΔᐃᐃⵠ: Ha++,
    ⵠᐃⲆⵠⲆᐃΔᐃⲆ: Ha++,
    ⲆᐃⲆᐃⵠᐃᐃ: Ha++,
    ΔᐃⵠⲆΔΔᐃ: Ha++,
    ᐃⲆⵠΔⲆⵠᐃ: Ha++,
    ΔᐃᐃΔᐃΔΔ: Ha++,
    ⲆⵠⵠⵠᐃⲆΔ: Ha++,
    ⲆᐃⵠⵠⲆᐃⲆ: Ha++,
    ΔΔⲆΔΔΔⵠ: Ha++,
    ⵠⵠᐃΔⲆᐃⲆ: Ha++,
    ⵠΔⲆⵠΔᐃᐃ: Ha++,
    ⵠⲆⲆⵠⲆⲆΔ: Ha++,
    ⵠⲆⲆⲆΔⵠᐃ: Ha++,
    ΔΔⲆⲆᐃⵠᐃ: Ha++,
    ⲆⵠⲆᐃⲆⲆΔ: Ha++,
    Δⵠᐃⵠᐃᐃⵠ: Ha++,
    ᐃⲆΔⲆⲆᐃⵠ: Ha++,
    ⵠΔΔᐃΔⲆΔ: Ha++,
    ⲆⲆⲆⵠΔΔᐃ: Ha++,
    ⲆⲆΔⵠⵠⵠᐃ: Ha++,
    ⲆⲆⵠΔΔᐃᐃ: Ha++,
    ΔΔᐃⵠⲆΔⲆ: Ha++,
    ⲆⵠᐃᐃⲆⵠᐃ: Ha++,
    ⲆᐃⵠΔⲆⲆⲆ: Ha++,
    ⲆⲆⵠⵠⲆⵠᐃ: Ha++,
    ΔᐃⲆⵠΔᐃⲆ: Ha++,
    ⲆΔᐃᐃΔΔⲆ: Ha++,
    ΔⲆⲆᐃᐃⲆΔ: Ha++,
    ⵠⵠⵠΔⵠⲆⵠ: Ha++,
    ΔⵠᐃⲆⲆᐃΔ: Ha++,
    ⲆᐃⵠⲆΔᐃⲆ: Ha++,
    ΔⵠⵠΔᐃᐃΔ: Ha++,
    ΔᐃᐃΔΔΔⵠ: Ha++,
    ΔΔⲆᐃΔⵠⵠ: Ha++,
    ΔᐃᐃΔΔΔΔ: Ha++,
    ΔⲆⲆΔΔᐃⵠ: Ha++,
    ᐃΔⲆΔᐃᐃⵠ: Ha++,
    ΔΔᐃᐃⲆΔⲆ: Ha++,
    ⵠⵠΔⲆΔⵠⲆ: Ha++,
    ⵠΔⲆᐃⵠⲆᐃ: Ha++,
    ⵠⵠⵠⵠⵠⵠᐃ: Ha++,
    ⲆᐃⲆΔⲆᐃᐃ: Ha++,
    ΔⵠⵠⲆᐃΔΔ: Ha++,
    ΔΔⲆΔΔⵠΔ: Ha++,
    ᐃⲆᐃΔⲆⲆΔ: Ha++,
    ΔΔⵠⲆⵠⵠⲆ: Ha++,
    ⲆⵠⵠΔΔΔⵠ: Ha++,
    ΔᐃΔⲆⵠᐃᐃ: Ha++,
    ᐃΔⲆᐃⵠⵠᐃ: Ha++,
    ⵠⲆΔΔⵠᐃⵠ: Ha++,
    ⲆᐃⵠⲆΔΔΔ: Ha++,
    ⵠⵠᐃⲆᐃⲆⵠ: Ha++,
    ΔᐃᐃⵠⵠΔᐃ: Ha++,
    ⲆⲆΔⲆΔⵠᐃ: Ha++,
    ⵠΔⲆⵠⲆⵠⵠ: Ha++,
    ⵠᐃⵠⲆᐃⵠΔ: Ha++,
    ᐃᐃⲆⲆᐃΔⵠ: Ha++,
    ⲆᐃΔᐃⲆΔᐃ: Ha++,
    ᐃⲆⵠⵠᐃⵠⵠ: Ha++,
    ΔᐃΔⲆⲆⵠⲆ: Ha++,
    ΔᐃⵠⲆⲆΔⵠ: Ha++,
    ΔΔⲆᐃᐃⲆⲆ: Ha++,
    ᐃᐃΔⲆⲆᐃⲆ: Ha++,
    ΔⲆⲆⲆⵠⵠⲆ: Ha++,
    ΔⵠⲆΔᐃⵠᐃ: Ha++,
    ⲆᐃᐃⲆΔΔΔ: Ha++,
    ⵠⵠᐃΔᐃΔⲆ: Ha++,
    ᐃΔⲆⵠⲆⲆⲆ: Ha++,
    ΔᐃΔⵠⲆⵠΔ: Ha++,
    ⵠΔⲆⲆΔⵠᐃ: Ha++,
    ⲆⵠⵠΔᐃᐃⲆ: Ha++,
    ⵠⵠⵠⲆᐃⲆⲆ: Ha++,
    ⲆΔⵠⵠⲆΔⵠ: Ha++,
    ⵠⲆⵠΔⲆ: Ha++,
    ᐃΔΔⲆᐃⲆΔ: Ha++,
    ᐃⵠⲆⵠᐃⵠⲆ: Ha++,
    ⲆⵠᐃᐃΔ: Ha++,
    ΔⲆⲆΔⵠⲆΔ: Ha++,
    ⵠᐃᐃΔⵠⵠΔ: Ha++,
    ⲆⵠⵠᐃΔⵠᐃ: Ha++,
    ⵠⲆⵠⲆΔⲆⲆ: Ha++,
    ⵠⲆⲆΔⲆᐃⵠ: Ha++,
    ΔⲆⲆⲆⵠ: Ha++,
    ΔΔⲆⲆᐃᐃⵠ: Ha++,
    ⵠⵠᐃⵠⲆⵠΔⵠᐃ: Ha++,
    ΔᐃⲆⵠⵠᐃᐃⲆᐃ: Ha++,
    ⵠⲆΔᐃⲆᐃᐃΔᐃ: Ha++,
    ᐃΔΔⲆⲆΔΔΔᐃ: Ha++,
    ⲆⲆⲆΔⲆᐃᐃ: Ha++,
    ⲆⲆⲆⲆⵠⲆΔ: Ha++,
    ΔΔⵠⲆⵠⲆΔ: Ha++,
    ᐃΔΔⵠⵠᐃⵠ: Ha++,
    ⲆᐃΔⵠⲆΔⵠ: Ha++,
    ΔⵠΔⲆⲆⵠⵠ: Ha++,
    ⲆⲆΔᐃΔᐃᐃ: Ha++,
    ⵠⲆΔΔⲆⵠⵠ: Ha++,
    ⵠᐃΔⲆⲆᐃΔ: Ha++,
    ᐃᐃᐃᐃⵠᐃⵠ: Ha++,
    ᐃᐃΔᐃΔ: Ha++,
    ΔΔΔⵠⵠ: Ha++,
    ⲆΔⵠΔᐃⲆᐃ: Ha++,
    ⲆⲆⵠΔᐃⲆⵠ: Ha++,
    ᐃΔⵠⲆᐃᐃⲆ: Ha++,
    ᐃᐃⲆⲆⲆᐃᐃ: Ha++,
    ᐃⵠⲆΔⵠᐃᐃ: Ha++,
    ⲆᐃⵠⲆΔΔⲆ: Ha++,
    ᐃΔᐃⲆΔⲆᐃ: Ha++,
    ⲆⵠⵠⲆΔⵠⲆ: Ha++,
    ᐃⲆⲆΔΔΔⲆ: Ha++,
    ⲆⲆᐃⵠⵠΔⲆ: Ha++,
    ΔᐃΔΔⵠⵠⵠ: Ha++,
    ⵠΔⵠⵠⵠⵠⵠ: Ha++,
    ᐃⲆⲆΔᐃᐃΔⵠᐃ: Ha++,
    ᐃⲆⵠΔⲆΔᐃᐃΔ: Ha++,
    ⵠᐃᐃⲆⲆᐃⵠ: Ha++,
    ᐃΔᐃΔΔᐃᐃ: Ha++,
    ⵠⵠⲆⵠⲆΔⵠ: Ha++,
    ⲆⵠΔⵠⵠⲆᐃ: Ha++,
    ⵠΔⲆᐃᐃⲆⲆ: Ha++,
    ⵠⲆΔⵠΔᐃⲆ: Ha++,
    ΔⲆᐃⵠΔᐃᐃ: Ha++,
    ᐃΔⵠⵠⲆΔᐃ: Ha++,
    ΔᐃᐃᐃⵠΔᐃ: Ha++,
    ᐃΔⲆΔⲆⲆΔ: Ha++,
    ⲆᐃΔΔⵠᐃⵠ: Ha++,
    ΔᐃⵠΔⵠⲆᐃ: Ha++,
    ⵠⵠΔΔⵠᐃΔ: Ha++,
    ⵠⲆⲆΔΔᐃΔ: Ha++,
    ᐃⵠⲆⵠⲆⲆⲆ: Ha++,
    ᐃᐃⵠΔΔⲆᐃ: Ha++,
    ⵠΔΔᐃᐃᐃΔ: Ha++,
    ΔⲆⵠᐃⵠᐃᐃ: Ha++,
    ⲆΔⲆΔᐃᐃᐃⲆᐃ: Ha++,
    ᐃΔᐃᐃⲆΔᐃ: Ha++,
    ᐃⲆᐃΔΔ: Ha++,
    ᐃⲆᐃᐃⵠΔⵠΔᐃ: Ha++,
    ΔⲆⵠᐃⵠᐃⵠᐃⵠ: Ha++,
    ⵠᐃⲆⲆⲆⲆⵠᐃⵠ: Ha++,
    ⵠⲆᐃΔΔᐃⲆΔⲆ: Ha++,
    ⲆⲆⲆᐃⵠⲆΔ: Ha++,
    ᐃⲆⲆᐃΔⵠΔ: Ha++,
    ΔⵠᐃΔΔΔᐃ: Ha++,
    ⲆⵠⵠⵠΔⲆᐃ: Ha++,
    ⵠⲆⵠᐃⵠⲆᐃ: Ha++,
    ᐃΔᐃᐃⵠΔⵠᐃΔ: Ha++,
    ΔⵠΔᐃΔΔᐃ: Ha++,
    ⵠⲆⵠⲆΔᐃᐃ: Ha++,
    ⲆΔⵠⲆΔⵠΔ: Ha++,
    ⵠᐃΔᐃΔΔⲆ: Ha++,
    ᐃΔΔᐃⵠⲆⲆ: Ha++,
    ⲆΔⵠᐃⲆⲆᐃ: Ha++,
    ⵠⵠᐃΔᐃⲆᐃ: Ha++,
    Ⲇᐃᐃᐃᐃ: Ha++,
    ΔΔⲆⲆΔΔΔⲆᐃ: Ha++,
    ᐃᐃⲆⲆⲆᐃⵠ: Ha++,
    ⵠΔⵠΔᐃⵠⲆ: Ha++,
    ⵠΔΔΔΔᐃᐃ: Ha++,
    ΔⲆΔΔΔⲆᐃ: Ha++,
    ΔᐃⲆⲆᐃⲆⲆ: Ha++,
    ⵠΔᐃΔⵠᐃⵠ: Ha++,
    ᐃΔⵠⵠΔⲆⲆ: Ha++,
    ΔᐃᐃⲆΔΔⲆ: Ha++,
    ᐃⵠΔΔΔΔΔ: Ha++,
    ⵠⵠⲆΔⲆⲆⲆ: Ha++,
    ⵠΔⲆᐃΔⵠⵠ: Ha++,
    ⲆⵠⲆⵠᐃᐃΔ: Ha++,
    ⵠⲆⲆⲆⲆᐃⵠ: Ha++,
    ΔⵠΔᐃⲆ: Ha++,
    ΔᐃⲆⵠⲆⲆᐃ: Ha++,
    ⵠᐃΔⲆᐃᐃᐃ: Ha++,
    ᐃᐃΔⵠⵠΔⵠ: Ha++,
    ⵠᐃΔᐃΔⲆᐃ: Ha++,
    ᐃⲆᐃᐃⵠⲆᐃ: Ha++,
    ΔⲆΔⵠⲆⲆⵠ: Ha++,
    ⲆᐃⲆⲆⲆⲆᐃ: Ha++,
    ᐃᐃΔᐃΔᐃⲆ: Ha++,
    ⵠⵠⲆⲆᐃⵠΔ: Ha++,
    ⲆⲆΔⵠⲆΔⵠ: Ha++,
    ⲆⲆᐃᐃᐃⲆⲆ: Ha++,
    ᐃΔⵠΔⲆⵠΔ: Ha++,
    ⲆⵠⵠⵠⵠⲆⲆ: Ha++,
    ᐃⲆᐃⲆⲆⵠᐃ: Ha++,
    ⲆⵠΔⵠΔᐃⲆ: Ha++,
    ᐃⵠⵠⲆⲆⵠΔ: Ha++,
    ᐃⲆⲆⵠⲆΔΔ: Ha++,
    ΔᐃΔⵠᐃΔⵠ: Ha++,
    ⲆΔⵠⵠⵠⲆᐃ: Ha++,
    ⲆΔⵠⵠΔⲆᐃ: Ha++,
    ᐃᐃⵠⵠᐃⲆⲆ: Ha++,
    ⵠⵠΔⵠⵠΔⵠ: Ha++,
    ΔᐃΔΔΔⲆⲆ: Ha++,
    ⲆⲆᐃⲆᐃⲆⲆ: Ha++,
    ΔΔᐃⲆΔᐃΔ: Ha++,
    ⵠⲆⵠⲆᐃⵠᐃ: Ha++,
    ⲆⵠΔⵠΔⲆΔⵠΔ: Ha++,
    ⲆΔΔΔⵠⵠⲆΔΔ: Ha++,
    ⲆⵠⵠⵠᐃᐃⵠΔᐃ: Ha++,
    ΔᐃⲆⲆᐃⵠⲆⵠΔ: Ha++,
    ⲆⵠΔΔᐃⲆΔ: Ha++,
    ⲆΔⲆⲆⲆⵠⵠ: Ha++,
    ⵠⲆⲆᐃΔ: Ha++,
    ⲆᐃⵠΔᐃΔΔ: Ha++,
    ⵠᐃΔΔΔⲆⵠ: Ha++,
    ⵠᐃᐃⲆⲆⵠⲆ: Ha++,
    ΔⵠⲆⲆᐃⲆΔ: Ha++,
    ᐃⲆΔⲆⵠΔⲆ: Ha++,
    ⵠᐃΔᐃⵠᐃⲆ: Ha++,
    ᐃΔΔⲆⲆΔᐃ: Ha++,
    ΔΔⵠᐃᐃΔΔ: Ha++,
    ⵠᐃᐃⵠᐃⲆᐃ: Ha++,
    ΔΔⵠΔΔⵠΔ: Ha++,
    ᐃΔΔᐃⵠⵠⲆ: Ha++,
    ᐃⲆᐃᐃⲆⲆᐃ: Ha++,
    ᐃΔΔΔᐃᐃⲆ: Ha++,
    ΔΔⲆΔⵠΔⲆ: Ha++,
    ⵠⵠⵠⲆⵠⲆⲆ: Ha++,
    ᐃΔⵠΔⲆⵠⲆ: Ha++,
    ⲆⲆⵠⵠᐃᐃⵠ: Ha++,
    ᐃΔⵠᐃᐃⲆⵠ: Ha++,
    ΔⵠᐃᐃᐃⲆⲆ: Ha++,
    ᐃⲆΔᐃⲆⲆᐃⲆⲆ: Ha++,
    ᐃⵠⲆΔᐃ: Ha++,
    ΔⲆⵠΔⲆᐃΔ: Ha++,
    ΔⵠᐃⲆⲆⲆΔ: Ha++,
    ⲆⲆⵠⵠΔΔⵠ: Ha++,
    ⵠⵠⵠᐃᐃⲆΔ: Ha++,
    ⲆⵠΔⲆᐃⵠᐃ: Ha++,
    ⲆᐃᐃⲆΔⲆⵠ: Ha++,
    ᐃⲆᐃΔⵠⵠⲆ: Ha++,
    ΔΔⲆⵠⵠᐃⲆ: Ha++,
    ᐃᐃΔΔⵠⵠⵠ: Ha++,
    ⲆΔΔᐃⵠⵠᐃ: Ha++,
    ᐃΔⲆΔⵠⲆⵠ: Ha++,
    ⲆⲆⲆⵠⲆᐃΔ: Ha++,
    ⵠΔᐃΔᐃⲆΔ: Ha++,
    ⲆⲆⵠΔⵠΔΔ: Ha++,
    ΔΔⲆᐃΔΔΔ: Ha++,
    ⲆⲆⲆΔⵠᐃΔ: Ha++,
    ⲆΔᐃⵠⲆᐃΔ: Ha++,
    ⲆᐃᐃⲆⵠⲆᐃ: Ha++,
    ⲆⲆΔᐃⵠⲆⵠ: Ha++,
    ΔⵠⲆⲆΔᐃⵠ: Ha++,
    ⵠⵠΔᐃΔⵠⲆ: Ha++,
    ΔᐃΔᐃⲆᐃᐃ: Ha++,
    ⲆⲆⵠⵠΔⲆⵠⲆΔ: Ha++,
    ⵠⲆᐃΔⲆⵠᐃ: Ha++,
    ΔⵠⲆΔᐃⲆΔ: Ha++,
    ⲆⵠᐃᐃᐃᐃⲆ: Ha++,
    ᐃᐃⵠⲆⵠᐃᐃ: Ha++,
    ⵠᐃⲆΔᐃⲆΔ: Ha++,
    ΔⲆⵠᐃᐃᐃⲆ: Ha++,
    ⵠⵠⲆⲆⲆⲆᐃ: Ha++,
    ⵠⵠΔᐃⲆᐃΔ: Ha++,
    ⵠΔⵠΔΔΔᐃ: Ha++,
    ᐃⲆᐃⲆⵠⵠⵠ: Ha++,
    ⵠᐃΔᐃΔⵠᐃ: Ha++,
    ⲆΔΔΔΔΔΔ: Ha++,
    ⵠΔΔⵠⲆΔΔ: Ha++,
    ᐃΔᐃⵠⵠⲆⲆ: Ha++,
    ᐃΔⲆᐃⲆⵠⵠ: Ha++,
    ⲆⲆⵠᐃⵠⲆΔ: Ha++,
    ᐃᐃΔΔⲆΔⲆ: Ha++,
    ᐃⲆⵠⲆᐃⵠⵠ: Ha++,
    ΔᐃⵠⵠⵠΔⲆ: Ha++,
    ⵠⵠᐃΔⲆⲆⵠ: Ha++,
    ⵠⲆΔⵠⵠⵠΔ: Ha++,
    ⵠᐃⵠΔⵠᐃⵠ: Ha++,
    ⲆⲆΔⲆⵠΔΔ: Ha++,
    ᐃᐃⲆΔΔⵠⵠ: Ha++,
    ⲆΔⵠᐃᐃ: Ha++,
    ⵠᐃᐃⲆᐃⵠⲆ: Ha++,
    ⵠΔⵠᐃΔΔⵠ: Ha++,
    ⵠΔᐃⵠⲆᐃΔ: Ha++,
    ⲆᐃΔⵠⲆΔⲆ: Ha++,
    ⲆⵠᐃⵠⲆⲆⲆ: Ha++,
    ⵠⲆⵠⲆᐃΔᐃ: Ha++,
    ᐃⵠⵠᐃⲆᐃⲆ: Ha++,
    ⵠᐃΔⵠⵠⵠⵠ: Ha++,
    ΔⲆⵠⵠᐃΔⲆ: Ha++,
    ⵠᐃⵠᐃᐃⵠⵠ: Ha++,
    ⲆΔⵠᐃⵠΔΔ: Ha++,
    ᐃΔᐃⵠᐃΔⲆ: Ha++,
    ᐃⵠⵠⲆᐃⵠᐃ: Ha++,
    ΔⲆᐃᐃᐃⵠᐃ: Ha++,
    ΔΔⲆⵠΔⲆΔ: Ha++,
    ⲆⲆⲆⵠⲆⲆᐃ: Ha++,
    ΔⲆⲆⵠⲆⵠΔ: Ha++,
    ⲆΔⲆⲆⵠΔⲆ: Ha++,
    ⲆᐃΔᐃⲆⲆΔ: Ha++,
    ΔⲆⲆΔᐃᐃⲆ: Ha++,
    ⲆⵠⵠΔᐃΔⲆ: Ha++,
    ᐃⵠⲆⵠⲆⲆᐃ: Ha++,
    ᐃⵠᐃᐃⲆᐃⲆ: Ha++,
    ᐃⵠᐃΔΔⵠᐃ: Ha++,
    ᐃΔⲆⵠⵠΔΔ: Ha++,
    ΔᐃⵠᐃⵠⵠⲆ: Ha++,
    ⵠⲆⵠⵠⵠⲆⲆ: Ha++,
    ΔⲆⲆᐃⲆΔᐃ: Ha++,
    ΔⵠⲆΔⲆⵠⲆ: Ha++,
    ᐃⲆΔᐃᐃⵠⵠ: Ha++,
    ΔΔⵠᐃΔⲆΔ: Ha++,
    ⵠᐃᐃⲆⲆⲆᐃ: Ha++,
    ᐃⲆⵠⲆΔⲆᐃ: Ha++,
    ΔΔⲆⵠⵠⵠⲆ: Ha++,
    ᐃΔⲆⲆ: Ha++,
    ⵠⲆⲆⵠ: Ha++,
    ⲆΔΔⲆⵠⵠⲆ: Ha++,
    ⵠⵠⲆᐃⵠΔᐃ: Ha++,
    ΔⲆⵠΔⵠⲆΔ: Ha++,
    ⵠⲆᐃΔᐃⲆⲆ: Ha++,
    ⲆᐃᐃΔⵠΔΔ: Ha++,
    ⲆᐃΔᐃⵠⵠⵠ: Ha++,
    ᐃᐃΔᐃΔⲆⵠ: Ha++,
    ΔΔⲆΔᐃ: Ha++,
    ΔᐃΔᐃᐃⲆᐃ: Ha++,
    ⵠⵠⲆⲆⲆ: Ha++,
    ᐃΔΔⲆⵠᐃΔ: Ha++,
    ⲆᐃⲆΔⲆ: Ha++,
    ΔΔⲆΔⵠⵠΔ: Ha++,
    ᐃⵠᐃΔⵠ: Ha++,
    ΔᐃᐃⵠᐃΔⲆ: Ha++,
    ΔΔΔᐃΔ: Ha++,
    ⵠᐃᐃⲆⲆ: Ha++,
    ᐃⵠΔΔⲆⲆⵠ: Ha++,
    ⲆⲆΔᐃⵠΔΔ: Ha++,
    ⲆⲆⵠⵠⵠᐃⲆ: Ha++,
    ⲆⵠⲆⵠⵠⲆΔ: Ha++,
    ⲆⵠΔⵠⵠⵠΔ: Ha++,
    ᐃⲆᐃΔᐃⲆⲆ: Ha++,
    ⵠᐃᐃⲆⲆⵠⵠ: Ha++,
    ⵠΔⲆⵠⲆΔΔ: Ha++,
    ΔⵠⵠᐃⲆⵠᐃ: Ha++,
    ⲆᐃⵠᐃΔ: Ha++,
    ᐃᐃᐃⲆⵠᐃΔ: Ha++,
    ᐃᐃΔⵠᐃ: Ha++,
    ⵠᐃΔⵠᐃᐃⲆ: Ha++,
    ⲆᐃᐃΔᐃᐃⵠ: Ha++,
    ᐃⵠⲆⵠⲆΔⵠ: Ha++,
    ⲆᐃΔⲆⲆⲆΔ: Ha++,
    ⲆΔᐃⵠᐃᐃⵠ: Ha++,
    ΔⲆᐃΔΔⵠᐃ: Ha++,
    ΔᐃΔΔⲆⵠΔⵠΔ: Ha++,
    ΔⵠᐃⲆⵠⵠΔ: Ha++,
    ᐃᐃᐃⵠᐃᐃΔ: Ha++,
    ᐃⵠⵠⵠⵠⲆⲆⵠⲆ: Ha++,
    ΔⵠᐃⲆⵠΔⲆ: Ha++,
    ⵠᐃᐃᐃⲆⵠᐃ: Ha++,
    ᐃᐃⲆᐃⵠⲆΔ: Ha++,
    ΔⵠᐃⵠⲆⵠᐃ: Ha++,
    ⲆΔⵠⵠⵠ: Ha++,
    ⲆᐃⲆⵠᐃΔᐃ: Ha++,
    ᐃⲆⲆΔⵠΔᐃ: Ha++,
    ᐃΔⲆᐃⲆⵠⲆ: Ha++,
    ⲆᐃⲆΔᐃⵠΔ: Ha++,
    ⲆⲆⵠⲆΔΔᐃ: Ha++,
    ΔΔⵠⵠᐃΔⵠ: Ha++,
    ⲆⲆΔⵠⵠⵠⵠ: Ha++,
    ⲆᐃⵠⵠΔⲆⲆ: Ha++,
    ΔΔᐃⵠΔᐃⲆ: Ha++,
    ΔⵠᐃⵠⲆᐃⲆ: Ha++,
    ᐃΔⵠᐃΔⵠⲆ: Ha++,
    ⵠⵠⲆᐃⲆⵠΔ: Ha++,
    ᐃΔΔⵠⲆⲆᐃ: Ha++,
    ⵠⲆΔⵠᐃⲆⵠ: Ha++,
    ⵠⲆᐃⲆⵠ: Ha++,
    ⲆⲆΔⵠⲆⵠⵠ: Ha++,
    ⵠⵠᐃΔⵠⲆᐃ: Ha++,
    ⵠⵠⲆΔᐃⵠⲆ: Ha++,
    ⲆΔⲆⲆᐃⵠΔ: Ha++,
    ΔⲆΔᐃᐃΔⲆ: Ha++,
    ᐃᐃⵠⲆⵠⵠⵠ: Ha++,
    ⵠΔΔΔᐃⲆΔ: Ha++,
    ΔΔᐃⲆᐃⲆⵠ: Ha++,
    ⵠΔᐃᐃΔᐃⵠ: Ha++,
    ⵠⲆΔᐃΔⲆⲆ: Ha++,
    ΔⵠᐃΔΔⲆΔ: Ha++,
    ⲆⵠⵠᐃⲆΔⵠ: Ha++,
    ΔᐃᐃᐃΔⲆᐃ: Ha++,
    ⵠΔΔΔⲆᐃΔ: Ha++,
    ΔⵠΔΔᐃ: Ha++,
    ⲆΔⲆⵠⲆⲆᐃ: Ha++,
    ⲆⲆᐃⲆⵠᐃᐃ: Ha++,
    ΔⲆᐃⲆⲆᐃⲆ: Ha++,
    ΔⵠⵠΔᐃᐃᐃ: Ha++,
    ⵠⲆⵠᐃⵠΔⵠ: Ha++,
    ΔⵠᐃᐃΔⵠⵠ: Ha++,
    ᐃⵠᐃᐃⲆⵠⲆ: Ha++,
    ⲆⲆΔΔⲆᐃΔ: Ha++,
    ⵠⲆᐃⵠΔⲆⲆ: Ha++,
    ⲆᐃⲆΔΔⵠΔ: Ha++,
    ᐃⵠⵠⵠⵠᐃᐃ: Ha++,
    ⵠΔⵠΔΔⲆᐃ: Ha++,
    ⵠⲆⵠⵠᐃΔⲆ: Ha++,
    ⲆⲆⵠⵠⲆᐃⲆ: Ha++,
    ᐃΔΔⲆⲆΔⵠ: Ha++,
    ⲆⵠⵠⲆⲆⵠⵠ: Ha++,
    ΔⵠⵠⲆΔⵠΔ: Ha++,
    ⲆΔΔⵠᐃⵠΔ: Ha++,
    ᐃⵠᐃⲆⲆⵠⵠ: Ha++,
    ᐃⵠⵠᐃΔⵠⲆ: Ha++,
    ⲆΔΔᐃΔ: Ha++,
    ⵠᐃΔⲆⲆΔᐃ: Ha++,
    ⵠⲆΔⲆᐃᐃᐃ: Ha++,
    ⵠⲆⲆⲆⲆΔⵠ: Ha++,
    ᐃᐃᐃΔⵠⲆⲆ: Ha++,
    ᐃᐃΔΔⵠⵠⲆ: Ha++,
    ⲆᐃⲆⵠΔᐃᐃ: Ha++,
    ⵠⲆΔⵠΔᐃΔ: Ha++,
    ᐃᐃᐃᐃⲆᐃᐃ: Ha++,
    ᐃᐃᐃᐃᐃⲆⲆ: Ha++,
    ΔⲆⲆⲆⵠⲆⵠ: Ha++,
    ᐃᐃΔⲆᐃᐃⵠ: Ha++,
    ⲆⲆᐃᐃᐃΔΔ: Ha++,
    ΔⲆᐃⵠᐃⵠᐃ: Ha++,
    ᐃⵠⲆᐃⲆⲆⵠ: Ha++,
    ⲆⵠⲆⲆΔᐃᐃ: Ha++,
    ⲆΔᐃΔⵠΔᐃ: Ha++,
    ᐃᐃⲆΔᐃΔᐃ: Ha++,
    ΔⵠΔⵠⲆΔᐃ: Ha++,
    ⵠΔⲆⲆΔΔⲆ: Ha++,
    ΔⵠᐃⵠⵠⵠⲆ: Ha++,
    ⲆᐃⲆΔᐃⵠᐃ: Ha++,
    ΔⵠⲆⲆⵠⲆΔ: Ha++,
    ⵠᐃⲆᐃⵠᐃᐃ: Ha++,
    ᐃᐃᐃⵠΔⲆΔ: Ha++,
    ⲆᐃΔⲆᐃᐃⲆ: Ha++,
    ⲆΔΔᐃᐃⲆⵠ: Ha++,
    ᐃⵠⲆⵠΔΔⲆ: Ha++,
    ⲆⲆⵠᐃᐃᐃΔ: Ha++,
    ΔᐃΔⲆⲆⲆⲆ: ["#E9CF96", "#144940"],
    ⵠᐃᐃᐃΔⲆΔ: Ha++,
    ⵠⵠΔᐃⲆⵠΔ: Ha++,
    ⲆᐃⲆᐃᐃⲆⲆ: Ha++,
    ᐃⲆᐃⵠⲆⵠⲆ: Ha++,
    Δᐃᐃⵠᐃᐃᐃ: Ha++,
    ⵠᐃΔⵠⲆⵠᐃ: Ha++,
    ⵠᐃᐃⵠⵠⲆⲆ: Ha++,
    ΔⵠΔΔⵠ: Ha++,
    ΔΔΔⵠⵠΔᐃ: Ha++,
    ⵠⵠΔᐃⵠⲆᐃ: Ha++,
    ⲆⲆⲆᐃᐃⲆΔ: Ha++,
    ᐃⵠⵠⵠΔⲆᐃ: Ha++,
    ⵠⵠΔⲆⵠΔᐃ: Ha++,
    ΔⲆΔⵠΔⵠᐃ: Ha++,
    ᐃⲆⵠᐃⲆΔⲆ: Ha++,
    ᐃᐃⵠᐃᐃΔⵠ: Ha++,
    ⵠΔⲆⵠⲆᐃⲆ: Ha++,
    ⵠΔΔΔᐃⵠΔ: Ha++,
    ᐃᐃⵠᐃΔᐃᐃ: Ha++,
    ΔⵠΔⵠⲆⲆⵠ: Ha++,
    ᐃΔΔᐃⵠⵠᐃ: Ha++,
    ⵠᐃΔⵠⵠⵠⲆ: Ha++,
    ᐃᐃᐃⲆⲆΔⵠ: Ha++,
    ΔΔⵠᐃᐃΔⵠ: Ha++,
    ⲆΔⲆⲆᐃᐃᐃ: Ha++,
    ⵠⲆⲆⵠⵠΔⲆ: Ha++,
    ΔⲆΔΔⵠⲆᐃ: Ha++,
    ΔΔΔᐃΔⲆᐃ: Ha++,
    ΔᐃΔⵠᐃᐃΔ: Ha++,
    ⲆⵠⵠΔⵠⲆᐃ: Ha++,
    ᐃΔΔⲆⲆᐃᐃ: Ha++,
    ⲆⲆⵠΔᐃⵠⵠ: Ha++,
    ΔⵠᐃⲆⵠⵠᐃ: Ha++,
    ⵠΔⲆᐃⲆΔⲆ: Ha++,
    ⵠⵠⲆⲆΔᐃΔ: Ha++,
    ⲆᐃⵠΔΔⵠⵠ: Ha++,
    ⲆᐃΔΔΔⵠⲆ: Ha++,
    ᐃⲆΔⲆⲆⵠⵠ: Ha++,
    ⲆᐃΔⵠΔΔΔ: Ha++,
    ᐃⲆᐃᐃⲆⵠΔ: Ha++,
    ᐃᐃⵠⵠᐃⲆᐃ: Ha++,
    ΔⲆⲆⵠᐃⵠΔ: Ha++,
    ᐃⲆⲆᐃΔᐃᐃ: Ha++,
    ᐃⵠⵠΔⲆⲆΔ: Ha++,
    ⲆⲆᐃᐃΔᐃᐃ: Ha++,
    ΔⲆΔᐃⵠΔⵠ: Ha++,
    ⵠΔΔᐃⵠⵠⲆ: Ha++,
    ⵠΔΔⵠⲆᐃⵠ: Ha++,
    ⵠΔᐃⵠⲆⵠΔ: Ha++,
    ᐃᐃⵠᐃΔΔⲆ: Ha++,
    ⲆᐃᐃᐃⲆⲆⵠ: Ha++,
    ⲆⵠᐃΔΔΔᐃ: Ha++,
    ⲆⲆⲆᐃⵠΔΔ: Ha++,
    ⲆΔⵠⵠᐃΔⲆ: Ha++,
    ΔᐃⵠΔⵠΔΔ: Ha++,
    ΔⵠΔᐃⵠΔΔ: Ha++,
    ⲆⵠΔⵠᐃᐃΔ: Ha++,
    ⵠΔⵠΔΔⵠⲆ: Ha++,
    ΔᐃᐃⵠⲆⲆⲆ: Ha++,
    ⵠΔⵠⵠⵠᐃⵠ: Ha++,
    ⲆⲆΔΔⲆΔⲆ: Ha++,
    ⲆⵠⲆᐃⲆΔᐃ: Ha++,
    ⲆΔᐃⲆⲆᐃⵠ: Ha++,
    ⲆΔⲆⲆΔⵠᐃ: Ha++,
    ⲆⲆⵠΔΔⲆᐃ: Ha++,
    ⵠᐃⵠⵠΔΔⵠ: Ha++,
    ⲆΔⵠⲆΔⵠⵠ: Ha++,
    ᐃⵠᐃᐃⲆΔⵠ: Ha++,
    ΔⵠⲆᐃⵠⵠΔ: Ha++,
    ⲆⵠᐃⲆⵠ: Ha++,
    ⲆⵠΔᐃⲆⲆⵠ: Ha++,
    ⵠΔⵠΔΔ: Ha++,
    ⵠⵠⵠⵠᐃⲆⵠ: Ha++,
    ΔⲆΔΔᐃⵠⲆ: Ha++,
    ⲆΔᐃⲆΔᐃΔ: Ha++,
    ᐃⲆⵠⲆᐃⲆᐃ: Ha++,
    ⵠΔΔΔⵠΔⲆ: Ha++,
    ⵠᐃΔᐃΔᐃⲆ: Ha++,
    ΔᐃⵠⵠΔⲆⵠ: Ha++,
    ΔᐃⵠⲆⲆⲆΔ: Ha++,
    ᐃᐃⵠᐃⵠⲆΔ: Ha++,
    ⵠΔᐃΔᐃⲆⵠ: Ha++,
    ⲆⲆΔᐃᐃΔΔ: Ha++,
    ⵠΔᐃΔΔⵠⵠ: Ha++,
    ΔᐃᐃᐃⲆⲆᐃ: Ha++,
    ᐃᐃⵠΔᐃⲆⲆ: Ha++,
    ᐃᐃΔⲆᐃⲆᐃ: Ha++,
    ⲆᐃᐃᐃΔⵠᐃ: Ha++,
    ΔⲆⵠⵠⵠⵠΔ: Ha++,
    ᐃΔᐃⲆⵠΔⵠ: Ha++,
    ΔⵠⲆⲆᐃᐃᐃ: Ha++,
    ᐃⲆΔΔⲆⲆⵠ: Ha++,
    ΔΔⵠⲆⲆⵠΔ: Ha++,
    ᐃⵠΔⵠⵠⵠⵠ: Ha++,
    ΔⲆᐃⲆΔⵠⵠ: Ha++,
    ⵠⵠⵠⵠⵠⲆⵠ: Ha++,
    ⲆΔᐃⵠΔΔⵠ: Ha++,
    ᐃⲆⵠΔⲆΔⵠ: Ha++,
    ΔΔᐃⲆᐃᐃᐃ: Ha++,
    ⲆⲆᐃΔⲆΔΔ: Ha++,
    ΔⵠⲆᐃΔᐃⲆ: Ha++,
    ⵠⵠⵠΔⲆⲆⵠ: Ha++,
    ⵠΔᐃᐃᐃᐃⲆ: Ha++,
    ᐃΔⵠⵠΔᐃⲆ: Ha++,
    ΔΔΔᐃⵠⲆΔ: Ha++,
    ⵠΔⲆΔΔᐃⲆ: Ha++,
    ΔᐃⲆΔΔΔΔ: Ha++,
    ⲆΔᐃⲆΔⵠⲆ: Ha++,
    ⲆᐃⵠⲆⲆⵠᐃ: Ha++,
    ᐃΔᐃΔⵠΔΔ: Ha++,
    ⲆⲆΔΔⲆⲆⵠ: Ha++,
    ⵠΔᐃᐃΔⵠᐃ: Ha++,
    ᐃⵠᐃᐃⲆⲆΔ: Ha++,
    ⵠⵠΔⲆᐃᐃΔ: Ha++,
    ᐃΔΔⵠΔΔⲆ: Ha++,
    ΔᐃⲆᐃᐃⲆⵠ: Ha++,
    ᐃⲆⲆⵠᐃΔⵠ: Ha++,
    ᐃΔⲆⲆᐃⲆΔ: Ha++,
    ᐃᐃⲆΔⵠᐃᐃ: Ha++,
    ΔⵠΔⲆⲆⲆΔ: Ha++,
    ⲆᐃⵠΔⵠᐃᐃ: Ha++,
    ⲆᐃΔⵠⲆⲆΔ: Ha++,
    ⲆⵠΔⵠⲆΔⲆ: Ha++,
    ⲆⵠᐃⲆΔᐃⲆ: Ha++,
    ⵠΔΔⵠⲆⵠⵠ: Ha++
  };
  const Ya = Lk;
  Ha = 0;
  const Ka = qa;
  const Va = wq;
  var Xa = {
    ⵠᐃΔΔᐃ: Ha++,
    Ⲇⵠᐃⵠᐃ: Ha++,
    ⲆⵠᐃᐃⲆ: Ha++,
    ᐃⵠΔⲆᐃ: Ha++,
    ᐃⵠΔᐃⲆ: Ha++,
    ⵠⵠⵠΔⵠ: Ha++,
    ᐃⲆⵠΔⲆ: Ha++,
    ⲆΔᐃᐃᐃ: Ha++,
    ΔᐃⲆⲆⵠ: Ha++,
    ΔⲆⵠΔⲆ: Ha++,
    ⲆᐃᐃᐃⲆ: Ha++,
    ΔᐃᐃΔⲆ: Ha++,
    ⵠᐃᐃΔᐃ: Ha++,
    Ⲇᐃᐃⵠᐃ: Ha++,
    ⵠΔᐃⵠᐃ: Ha++,
    ⵠᐃⲆⲆΔ: Ha++,
    Ⲇᐃᐃⵠⵠ: Ha++,
    ⲆΔⵠⵠⲆ: Ha++,
    ΔⵠᐃΔᐃ: Ha++,
    ᐃⵠΔᐃⵠ: Ha++,
    ΔⲆᐃΔᐃ: Ha++,
    ΔᐃᐃⲆⲆ: Ha++,
    ᐃⲆⵠⲆᐃ: Ha++,
    ΔΔΔⲆᐃ: Ha++,
    ⲆⵠⵠⲆⲆ: Ha++,
    ᐃⲆⵠⲆⲆ: Ha++,
    ⵠⲆᐃᐃΔ: Ha++,
    ΔⲆⲆⵠⲆ: Ha++,
    ΔⵠⲆⵠⵠ: Ha++,
    ⲆᐃᐃΔⲆ: Ha++,
    ᐃΔⵠᐃⵠ: Ha++,
    ⵠⲆᐃⲆᐃ: Ha++,
    ΔᐃᐃⲆΔ: Ha++,
    ⵠⵠⲆⵠΔ: Ha++,
    ᐃⲆᐃΔⲆ: Ha++,
    ⵠⲆΔᐃΔ: Ha++,
    ⲆΔⵠⲆᐃ: Ha++,
    ΔᐃⲆⵠΔ: Ha++,
    ⲆΔⵠΔⵠ: Ha++,
    ⵠΔⲆΔᐃ: Ha++,
    ΔⵠᐃᐃΔ: Ha++,
    ΔΔⲆᐃᐃ: Ha++,
    ⲆΔⲆΔᐃ: Ha++,
    ⵠΔⵠⲆΔ: Ha++,
    ⵠᐃⵠⲆᐃ: Ha++,
    ᐃΔⲆⲆᐃ: Ha++,
    ΔΔΔᐃⲆ: Ha++,
    ᐃΔⵠᐃᐃ: Ha++,
    ⵠⵠⵠⲆΔ: Ha++,
    ᐃΔⵠᐃⲆ: Ha++,
    Ⲇⵠᐃⵠⵠ: Ha++,
    ᐃᐃⵠⲆᐃ: Ha++,
    ΔᐃᐃΔΔ: Ha++,
    ⲆᐃᐃⵠⲆ: Ha++,
    ⲆᐃΔᐃᐃ: Ha++,
    ᐃⲆⲆⲆᐃ: Ha++,
    ⲆⲆΔⵠⵠ: Ha++,
    ᐃⵠⵠΔⵠ: Ha++,
    ⲆⲆᐃⲆΔ: Ha++,
    ΔⲆᐃⲆⵠ: Ha++,
    ⲆⲆᐃⲆᐃ: Ha++,
    ⵠⵠΔⲆⲆ: Ha++,
    ΔΔΔΔⲆ: Ha++,
    ᐃᐃⲆᐃⲆ: Ha++,
    ᐃⵠᐃⲆΔ: Ha++,
    ΔΔⵠᐃⲆ: Ha++,
    ⲆⲆΔᐃⲆ: Ha++,
    ᐃΔⲆᐃᐃ: Ha++,
    Ⲇᐃⵠⵠⵠ: Ha++,
    ⲆΔⲆᐃᐃ: Ha++,
    ᐃᐃᐃΔⵠ: Ha++,
    ᐃᐃᐃᐃⵠ: Ha++,
    ᐃᐃⵠΔⵠ: Ha++,
    ᐃⵠᐃΔⲆ: Ha++,
    ᐃⵠⲆⵠⵠ: Ha++,
    ⵠΔⲆⵠᐃ: Ha++,
    ΔⵠⲆⵠΔ: Ha++,
    ΔⵠⲆⵠⲆ: Ha++,
    ⲆΔⵠⵠᐃ: Ha++,
    ⲆΔΔⲆⵠ: Ha++,
    ᐃⵠⵠΔᐃ: Ha++,
    ΔⵠⵠᐃΔ: Ha++,
    ⲆⵠⲆⲆⲆ: Ha++,
    ᐃⵠⵠⵠᐃ: Ha++,
    ⵠΔᐃⵠⵠ: Ha++,
    ΔΔᐃⵠⵠ: Ha++,
    ⵠⲆΔΔⲆ: Ha++,
    ᐃΔᐃΔΔ: Ha++,
    ΔΔᐃⲆΔ: Ha++,
    ⲆⲆⲆᐃⲆ: Ha++,
    ᐃⵠᐃⲆᐃ: Ha++,
    ᐃⵠᐃᐃΔ: Ha++,
    ⲆΔⲆⲆᐃ: Ha++,
    ⵠΔⲆⲆΔ: Ha++,
    ⵠⲆᐃᐃⵠ: Ha++,
    ᐃⵠΔΔᐃ: Ha++,
    ⵠⲆⵠᐃⲆ: Ha++,
    ⵠⲆΔⲆΔ: Ha++,
    ⲆᐃⲆⲆⲆ: Ha++,
    ⵠᐃⵠⲆⲆ: Ha++,
    ᐃⵠΔⵠ: Ha++,
    ⲆΔΔⵠⲆ: Ha++,
    ⵠᐃⵠⵠΔ: Ha++,
    ΔⲆⲆⲆⲆ: Ha++,
    ⵠⲆⲆⵠΔ: Ha++,
    ⵠⵠⲆΔΔ: Ha++,
    ᐃⲆΔⲆⲆ: Ha++,
    ⲆΔⵠⲆΔ: Ha++,
    ᐃΔΔᐃⵠ: Ha++,
    ΔⵠΔΔⲆ: Ha++,
    ⵠᐃⲆⵠⵠ: Ha++,
    ᐃⲆᐃⵠᐃ: Ha++,
    ᐃᐃⲆⵠⲆⲆΔ: Ha++,
    ΔΔᐃᐃΔᐃⵠ: Ha++,
    ᐃⲆΔⵠⵠ: Ha++,
    ⲆΔᐃⲆⲆ: Ha++,
    ᐃᐃᐃⵠᐃ: Ha++,
    ⵠⵠⲆᐃᐃ: Ha++,
    ᐃⲆΔᐃΔ: Ha++,
    ⵠⲆⲆᐃᐃ: Ha++,
    ΔᐃΔⵠᐃ: Ha++,
    ⵠΔΔᐃⲆ: Ha++,
    ⵠⲆⲆⵠⲆ: Ha++,
    ⲆΔⵠⵠΔ: Ha++,
    ⵠⲆⵠⵠᐃ: Ha++,
    ᐃⵠⲆⵠΔ: Ha++,
    ⵠΔⵠᐃⵠ: Ha++,
    ⵠⵠⵠᐃᐃ: Ha++,
    ⲆᐃᐃΔᐃ: Ha++,
    ⵠΔΔⲆΔ: Ha++,
    ⵠⲆⲆⵠⵠ: Ha++,
    ⵠᐃᐃⲆᐃ: Ha++,
    ⵠⲆⵠΔᐃ: Ha++,
    ᐃᐃᐃΔⲆ: Ha++,
    ⲆΔᐃⵠⲆ: Ha++,
    ᐃΔΔⲆᐃ: Ha++,
    ΔⲆᐃᐃᐃ: Ha++,
    ᐃΔⲆⲆⲆ: Ha++,
    ΔᐃⲆⲆⲆ: Ha++,
    ⵠᐃᐃᐃΔ: Ha++,
    Ⲇⵠᐃᐃⵠ: Ha++,
    ΔⵠⲆᐃⲆ: Ha++,
    ⲆΔⲆⲆⲆ: Ha++,
    ΔᐃΔⲆⲆ: Ha++,
    ΔΔΔᐃⵠ: Ha++,
    ⵠⵠΔΔΔ: Ha++,
    ᐃⵠⵠᐃⵠ: Ha++,
    ⵠⲆⲆⲆΔ: Ha++,
    ⲆᐃΔΔᐃ: Ha++,
    ⵠᐃⲆⲆᐃ: Ha++,
    ᐃⵠᐃⲆⲆ: Ha++,
    ΔⵠᐃⲆᐃ: Ha++,
    ΔⲆΔᐃⵠ: Ha++,
    ⵠⵠΔΔⵠ: Ha++,
    ᐃᐃᐃⲆᐃ: Ha++,
    ᐃΔᐃⵠΔ: Ha++,
    ᐃΔᐃⵠⵠ: Ha++,
    ⵠⵠⲆⲆⵠ: Ha++,
    Ⲇᐃⵠⵠᐃ: Ha++,
    ⵠⵠᐃᐃⵠ: Ha++,
    ᐃΔΔΔΔ: Ha++,
    ᐃᐃⵠΔΔ: Ha++,
    ⵠᐃⲆⵠᐃ: Ha++,
    ⲆᐃⲆΔⵠ: Ha++,
    ᐃᐃⲆᐃⵠ: Ha++,
    ⲆΔᐃⵠᐃ: Ha++,
    ᐃᐃⵠⲆⵠ: Ha++,
    ᐃⵠⲆⲆⲆ: Ha++,
    ᐃᐃⲆⵠⲆ: Ha++,
    ᐃΔᐃⲆΔ: Ha++,
    ΔⲆΔᐃΔ: Ha++,
    ⵠΔⵠⵠΔ: Ha++,
    ΔΔⲆΔΔ: Ha++,
    ⵠⲆⵠⲆⵠ: Ha++,
    ᐃᐃⵠᐃⲆ: Ha++,
    ⵠⲆᐃⵠΔ: Ha++,
    Δᐃᐃᐃᐃ: Ha++
  };
  Ha = Fj;
  const Za = vo;
  const $a = on;
  var Dr = {
    ⵠⲆΔᐃΔ: Ha++,
    ⵠⵠⵠΔⵠ: Ha++,
    ΔⵠⲆᐃΔ: Ha++,
    ᐃⲆⵠΔⲆ: Ha++,
    ⲆΔᐃᐃᐃ: Ha++,
    ⲆΔⵠⲆᐃ: Ha++,
    ΔᐃⲆⵠΔ: Ha++,
    ΔⲆⲆᐃᐃ: Ha++,
    ᐃⵠΔᐃⲆ: Ha++,
    ⵠⵠⵠⵠΔ: Ha++,
    ᐃⵠⵠⵠᐃ: Ha++,
    ⵠΔᐃⵠⵠ: Ha++,
    ᐃⲆⵠⲆⲆ: Ha++,
    ⵠⲆᐃᐃΔ: Ha++,
    ΔⲆⲆⵠⲆ: Ha++,
    ΔⵠⲆⵠⵠ: Ha++,
    ⵠⲆᐃⲆᐃ: Ha++,
    ΔᐃᐃⲆΔ: Ha++,
    ⵠⵠⲆⵠΔ: Ha++,
    ⵠΔⲆΔᐃ: Ha++,
    ᐃⵠΔΔᐃ: Ha++,
    ⵠⲆⵠᐃⲆ: Ha++,
    ⵠⲆΔⲆΔ: Ha++,
    ᐃⵠⵠΔᐃ: Ha++,
    ΔⵠⵠᐃΔ: Ha++,
    ΔΔᐃⲆΔ: Ha++,
    ⲆⲆⲆᐃⲆ: Ha++,
    ᐃⵠᐃⲆᐃ: Ha++,
    ⲆⵠⵠⲆⲆ: Ha++,
    ᐃⵠΔⵠ: Ha++,
    ⲆΔⵠΔⵠ: Ha++,
    ΔᐃⲆⲆⵠ: Ha++,
    ΔⲆⵠΔⲆ: Ha++,
    ⲆᐃᐃΔⲆ: Ha++,
    ᐃΔⵠᐃⵠ: Ha++,
    ⲆᐃᐃᐃⲆ: Ha++,
    ΔᐃᐃΔⲆ: Ha++,
    ⵠᐃᐃΔᐃ: Ha++,
    Ⲇᐃᐃⵠᐃ: Ha++,
    ⵠΔᐃⵠᐃ: Ha++,
    ΔΔᐃⵠⵠ: Ha++,
    Δⵠⵠᐃᐃ: Ha++,
    ⲆᐃⲆᐃᐃ: Ha++,
    ᐃⵠᐃᐃΔ: Ha++,
    ⲆΔⲆⲆᐃ: Ha++,
    ⵠᐃⲆⲆΔ: Ha++,
    Ⲇᐃᐃⵠⵠ: Ha++,
    ⵠⲆᐃᐃⵠ: Ha++,
    ⵠΔⲆⲆΔ: Ha++,
    ΔᐃᐃⲆⲆ: Ha++,
    ⲆΔⵠⵠⲆ: Ha++,
    ΔⵠᐃΔᐃ: Ha++,
    ᐃⵠΔᐃⵠ: Ha++,
    ᐃⲆⵠⲆᐃ: Ha++,
    ΔΔΔⲆᐃ: Ha++,
    ⵠⲆⲆⵠⲆ: Ha++,
    ⲆΔⵠⵠΔ: Ha++,
    ᐃⲆᐃΔⲆ: Ha++,
    ᐃΔᐃΔΔ: Ha++,
    ⵠΔⵠᐃⵠ: Ha++,
    ⵠⵠⵠᐃᐃ: Ha++,
    ⲆᐃᐃΔᐃ: Ha++,
    ⵠΔΔⲆΔ: Ha++,
    ⵠⲆⲆⵠⵠ: Ha++,
    ⵠᐃᐃⲆᐃ: Ha++,
    ᐃᐃᐃΔⲆ: Ha++,
    ᐃΔΔⲆᐃ: Ha++,
    ᐃΔⲆⲆⲆ: Ha++,
    ⵠᐃᐃᐃΔ: Ha++,
    ΔⵠⲆᐃⲆ: Ha++,
    ΔᐃΔⲆⲆ: Ha++,
    ⵠⵠΔΔΔ: Ha++,
    ᐃⵠⵠᐃⵠ: Ha++,
    ⵠⲆⲆⲆΔ: Ha++,
    ⲆᐃΔΔᐃ: Ha++,
    ⵠᐃⲆⲆᐃ: Ha++,
    ᐃⵠᐃⲆⲆ: Ha++,
    ΔⵠᐃⲆᐃ: Ha++,
    ΔⲆΔᐃⵠ: Ha++,
    ⵠⵠΔΔⵠ: Ha++,
    ⲆᐃⲆⲆⲆ: Ha++,
    ⵠᐃⵠⲆⲆ: Ha++,
    ⲆⵠⲆⲆⲆ: Ha++,
    ᐃᐃᐃⲆᐃ: Ha++,
    ᐃΔᐃⵠΔ: Ha++,
    ᐃΔᐃⵠⵠ: Ha++,
    ⵠⵠⲆⲆⵠ: Ha++,
    ΔⵠΔⵠⲆ: Ha++,
    ⵠⲆΔΔⲆ: Ha++,
    ⲆΔᐃⵠᐃ: Ha++,
    ⵠⲆⵠⲆⵠ: Ha++,
    Δᐃᐃᐃᐃ: Ha++,
    ᐃᐃⵠᐃⲆ: Ha++,
    ⵠⲆᐃⵠΔ: Ha++,
    ᐃⵠⲆⲆⲆ: Ha++,
    ᐃᐃⲆⵠⲆ: Ha++,
    ᐃΔᐃⲆΔ: Ha++,
    ΔⲆΔᐃΔ: Ha++,
    ⵠΔⵠⵠΔ: Ha++,
    ΔΔⲆΔΔ: Ha++,
    ΔΔᐃⵠᐃ: Ha++,
    ⵠⲆⵠΔᐃ: Ha++,
    ⲆΔᐃⵠⲆ: Ha++,
    ΔⲆᐃᐃᐃ: Ha++,
    ΔᐃⲆⲆⲆ: Ha++,
    Ⲇⵠᐃᐃⵠ: Ha++,
    ⲆΔⲆⲆⲆ: Ha++,
    ΔΔΔᐃⵠ: Ha++,
    ᐃᐃᐃⵠ: Ha++,
    ΔΔⲆⵠ: Ha++,
    ᐃᐃΔⲆⲆ: Ha++,
    ⲆΔᐃⲆ: Ha++,
    ⵠⲆⲆΔ: Ha++,
    ⵠᐃΔΔᐃ: Ha++,
    ᐃⵠΔⲆᐃ: Ha++,
    ΔⵠᐃᐃΔ: Ha++,
    ᐃⵠⵠᐃⲆ: Ha++,
    ᐃΔⵠᐃⲆ: Ha++,
    Ⲇⵠᐃⵠᐃ: Ha++,
    ⲆⵠᐃᐃⲆ: Ha++,
    ⲆΔΔⵠⲆ: Ha++,
    ᐃᐃᐃΔ: Ha++,
    ΔⲆᐃⲆⵠ: Ha++,
    ᐃᐃᐃᐃⵠ: Ha++,
    ΔΔⵠᐃⲆ: Ha++,
    ᐃⲆΔⲆⲆ: Ha++,
    ⲆΔᐃⵠⵠ: Ha++,
    ᐃⲆᐃⵠᐃ: Ha++,
    ⵠᐃⲆⵠⵠ: Ha++,
    ⲆⵠⵠΔⲆ: Ha++,
    ΔⲆᐃΔᐃ: Ha++,
    ΔᐃᐃⲆᐃ: Ha++,
    ΔΔⲆᐃᐃ: Ha++,
    ΔᐃᐃΔΔ: Ha++,
    ᐃᐃΔⲆΔ: Ha++,
    ᐃⲆΔⵠⵠ: Ha++,
    ⲆᐃᐃⵠⲆ: Ha++,
    ⵠⵠⵠⲆⲆ: Ha++,
    Ⲇⵠᐃⵠⵠ: Ha++,
    ΔⲆᐃⲆΔ: Ha++,
    ⵠΔⲆⲆᐃ: Ha++,
    ΔⵠΔΔⲆ: Ha++,
    ⲆᐃⵠᐃⲆ: Ha++,
    ᐃᐃⵠⲆᐃ: Ha++,
    ⵠⲆⵠⵠᐃ: Ha++,
    ᐃⵠⲆⵠΔ: Ha++,
    ⵠΔΔᐃᐃ: Ha++,
    ⵠᐃⵠⵠΔ: Ha++,
    ΔⲆⲆⲆⲆ: Ha++,
    ᐃⲆⲆΔⲆ: Ha++,
    ⲆᐃΔᐃⲆ: Ha++,
    ⲆΔᐃⲆⲆ: Ha++,
    ᐃᐃᐃⵠᐃ: Ha++,
    ⵠⵠⲆᐃᐃ: Ha++,
    ᐃⲆΔᐃΔ: Ha++,
    ⵠⲆⲆᐃᐃ: Ha++,
    ΔᐃΔⵠᐃ: Ha++,
    ⵠΔΔᐃⲆ: Ha++,
    ⵠⲆⲆⵠΔ: Ha++,
    ⵠⵠⲆΔΔ: Ha++,
    ᐃΔⲆᐃᐃ: Ha++,
    ⵠⵠΔⵠΔ: Ha++,
    ᐃⲆⲆⲆᐃ: Ha++,
    ⲆⲆΔⵠⵠ: Ha++,
    ᐃⵠⵠΔⵠ: Ha++,
    ⲆⲆᐃⲆΔ: Ha++,
    ⵠⵠΔⲆⲆ: Ha++,
    ⲆΔΔⲆⵠ: Ha++,
    Ⲇᐃⵠⵠⵠ: Ha++,
    ⲆΔⲆᐃᐃ: Ha++,
    ᐃᐃᐃΔⵠ: Ha++,
    ΔΔΔΔⲆ: Ha++,
    ᐃᐃⲆᐃⲆ: Ha++,
    ᐃⵠᐃⲆΔ: Ha++,
    ⲆⵠΔΔᐃ: Ha++,
    ᐃⲆⵠᐃⵠ: Ha++,
    ΔⵠΔᐃΔ: Ha++,
    ⲆⲆΔΔⵠ: Ha++,
    ΔᐃⵠᐃⲆ: Ha++,
    ⵠᐃᐃᐃⲆ: Ha++,
    Ⲇᐃⵠⵠᐃ: Ha++,
    ⵠⵠᐃᐃⵠ: Ha++,
    ᐃΔΔΔΔ: Ha++,
    ᐃᐃⵠΔΔ: Ha++,
    ⵠⵠᐃⵠΔ: Ha++,
    ⵠᐃᐃᐃᐃ: Ha++,
    ⲆᐃⵠΔᐃ: Ha++,
    ᐃᐃⵠⵠⲆ: Ha++,
    ⲆΔⲆΔᐃ: Ha++,
    ⵠᐃⵠⵠⵠ: Ha++,
    ⲆΔⵠⲆΔ: Ha++,
    ⵠΔⵠⲆΔ: Ha++,
    ⲆⵠⵠⲆⵠ: Ha++,
    ⵠᐃⵠⲆᐃ: Ha++,
    ⲆⵠⲆΔⵠ: Ha++,
    ⲆᐃΔᐃᐃ: Ha++,
    ᐃⲆΔⵠΔ: Ha++,
    ᐃᐃᐃⲆⲆ: Ha++,
    ⵠᐃⲆⵠᐃ: Ha++,
    ⵠⵠⵠⲆᐃ: Ha++,
    ⲆᐃΔⲆⵠ: Ha++,
    ᐃⵠⲆᐃⵠ: Ha++,
    ⵠⲆᐃⲆ: Ha++,
    ⲆⵠⲆⵠᐃ: Ha++,
    ᐃΔⲆⲆᐃ: Ha++,
    ⲆΔⵠᐃⲆ: Ha++,
    ΔΔΔᐃⲆ: Ha++,
    ΔⵠⲆΔᐃ: Ha++,
    ᐃΔⵠᐃᐃ: Ha++,
    ⵠᐃⵠⲆⵠ: Ha++,
    ⵠⵠⵠⲆΔ: Ha++,
    ⵠΔΔⵠⲆ: Ha++,
    ᐃⵠᐃΔⲆ: Ha++,
    ᐃⵠⲆⵠⵠ: Ha++,
    ⵠΔⲆⵠᐃ: Ha++,
    ΔⵠⲆⵠΔ: Ha++,
    ΔⵠⲆⵠⲆ: Ha++,
    ⲆⲆᐃⲆᐃ: Ha++,
    ⲆⲆΔᐃⲆ: Ha++,
    ᐃᐃⵠΔⵠ: Ha++,
    ⲆΔⵠⵠᐃ: Ha++,
    ᐃΔΔᐃⵠ: Ha++,
    ⵠⲆⵠᐃᐃ: Ha++,
    ⲆᐃⲆΔⵠ: Ha++,
    ᐃᐃⲆᐃⵠ: Ha++,
    ⵠΔᐃΔⵠ: Ha++,
    ᐃᐃΔⵠᐃ: Ha++,
    ⲆΔⵠⵠⵠ: Ha++,
    ⵠⲆᐃⲆⵠ: Ha++,
    ΔⵠΔΔᐃ: Ha++,
    ᐃᐃⵠⲆⵠ: Ha++,
    Δᐃⵠᐃᐃ: Ha++,
    ⲆⲆⲆΔⵠ: Ha++,
    ⲆΔⵠᐃᐃ: Ha++,
    ΔⵠΔⲆΔ: Ha++,
    ⲆᐃⵠΔΔⲆⲆ: Ha++,
    ⵠⲆⲆᐃΔⲆⲆ: Ha++,
    ⵠⲆΔⵠᐃ: Ha++,
    ᐃᐃᐃᐃᐃ: Ha++,
    ⵠΔⵠΔΔ: Ha++,
    ᐃⲆⵠⵠᐃ: Ha++
  };
  const Er = wr;
  const Fr = vj;
  var Gr = {
    ΔᐃΔΔΔ: Bk,
    ᐃⵠᐃⵠ: er,
    ΔᐃᐃᐃⲆ: gn,
    Ⲇⵠⵠᐃᐃ: Xn,
    ⲆⵠⲆⵠⵠ: 3,
    ⵠΔΔᐃⵠ: yk
  };
  const Hr = zq;
  const Jr = $q;
  const Kr = tr;
  const Lr = mr;
  const Mr = _;
  const Nr = mn;
  var Or = [];
  const Pr = zq;
  const Qr = Yq;
  Or[Dr.ΔΔⲆⵠ] = {
    name: "Wood",
    Ⲇⵠ: Cr.ⵠΔᐃΔΔⵠᐃ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: Fj
  };
  const Rr = L;
  const Ur = er;
  const Wr = _j;
  Or[Dr.ᐃᐃᐃⵠ] = {
    name: "Stone",
    Ⲇⵠ: Cr.ΔⵠⲆΔⲆⲆΔ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ⲆΔᐃⲆ] = {
    name: "Gold",
    Ⲇⵠ: Cr.ⲆⵠΔⵠⲆᐃⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const Xr = S;
  const Yr = F;
  Or[Dr.ⵠⲆⲆΔ] = {
    name: "Diamond",
    Ⲇⵠ: Cr.ⵠΔⲆΔᐃΔⲆ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: Mn
  };
  Or[Dr.ᐃᐃᐃΔ] = {
    name: "Amethyst",
    Ⲇⵠ: Cr.ᐃΔⵠᐃⲆⵠᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Fj
  };
  const Zr = or;
  Or[Dr.ΔⵠⲆᐃΔ] = {
    name: "Rabbit fur",
    Ⲇⵠ: Cr.ᐃᐃΔⵠⵠᐃⵠ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 0
  };
  const $r = Wq;
  Or[Dr.ⲆⵠΔΔᐃ] = {
    name: "Wolf fur",
    Ⲇⵠ: Cr.ⲆᐃΔᐃⵠᐃⵠ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 0
  };
  const _r = rn;
  Or[Dr.ⵠⲆΔⵠᐃ] = {
    name: "Boar fur",
    Ⲇⵠ: Cr.ΔⲆΔⵠΔⵠᐃ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: kq
  };
  const as = qi;
  Or[Dr.ΔΔᐃⵠᐃ] = {
    name: "Firefly",
    Ⲇⵠ: Cr.ᐃᐃⵠᐃᐃΔⵠ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: ko
  };
  const bs = ue;
  Or[Dr.ⵠⲆⵠΔᐃ] = {
    name: "Wood arrow",
    Ⲇⵠ: Cr.ⵠΔΔΔᐃⵠΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ce
  };
  Or[Dr.ⲆΔᐃⵠⲆ] = {
    name: "Stone arrow",
    Ⲇⵠ: Cr.ᐃΔΔᐃⵠⵠᐃ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: Br
  };
  const cs = ri;
  Or[Dr.ΔⲆᐃᐃᐃ] = {
    name: "Gold arrow",
    Ⲇⵠ: Cr.ΔΔⵠᐃᐃΔⵠ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: 1
  };
  const ds = E;
  Or[Dr.ΔᐃⲆⲆⲆ] = {
    name: "Diamond arrow",
    Ⲇⵠ: Cr.ΔⲆΔΔⵠⲆᐃ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.Ⲇⵠᐃᐃⵠ] = {
    name: "Amethyst arrow",
    Ⲇⵠ: Cr.ⲆⵠⵠΔⵠⲆᐃ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆΔⲆⲆⲆ] = {
    name: "Reidite arrow",
    Ⲇⵠ: Cr.ΔⵠᐃⲆⵠⵠᐃ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  const es = an;
  const fs = Mq;
  const gs = Rj;
  Or[Dr.ΔΔΔᐃⵠ] = {
    name: "Dragon arrow",
    Ⲇⵠ: Cr.ⲆᐃⵠΔΔⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ⵠΔΔᐃᐃ] = {
    name: "Winter fur",
    Ⲇⵠ: Cr.ΔᐃⵠΔᐃΔΔ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ᐃⲆⵠⵠᐃ] = {
    name: "Fur mammoth",
    Ⲇⵠ: Cr.ΔᐃᐃᐃⲆⲆᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⵠΔⵠΔ] = {
    name: "Web",
    Ⲇⵠ: Cr.ᐃᐃⵠⲆᐃᐃΔ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: yk
  };
  const hs = Uk;
  const is = Gn;
  Or[Dr.ᐃⵠⵠᐃⲆ] = {
    name: "Meat",
    Ⲇⵠ: Cr.ⵠⵠΔⲆΔⲆΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: yk
  };
  Or[Dr.ⵠⵠⵠⲆⲆ] = {
    name: "Fish",
    Ⲇⵠ: Cr.ΔⵠΔᐃΔⲆΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆⵠⵠΔⲆ] = {
    name: "Kraken skin",
    Ⲇⵠ: Cr.ⲆⵠᐃⵠⲆⵠⲆ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: jj
  };
  const ks = xr;
  Or[Dr.ΔⲆᐃⲆΔ] = {
    name: "Piranha scales",
    Ⲇⵠ: Cr.ΔⲆᐃⵠᐃⲆᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: yk
  };
  const ls = vi;
  Or[Dr.ⲆᐃⵠᐃⲆ] = {
    name: "Ice",
    Ⲇⵠ: Cr.ΔΔΔᐃᐃΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆΔᐃⵠⵠ] = {
    name: "Sand",
    Ⲇⵠ: Cr.ⲆΔⲆΔⵠΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const ms = Yo;
  Or[Dr.ⵠΔⲆⲆᐃ] = {
    name: "Dirt",
    Ⲇⵠ: Cr.ⵠΔᐃΔⵠᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Mn
  };
  Or[Dr.ᐃᐃΔⲆⲆ] = {
    name: "Berrie",
    Ⲇⵠ: Cr.ᐃⲆⲆⲆⵠⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const ns = Wr;
  Or[Dr.ΔᐃᐃⲆᐃ] = {
    name: "Flour",
    Ⲇⵠ: Cr.ᐃᐃΔⵠⲆΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const os = Ta;
  Or[Dr.ᐃᐃΔⲆΔ] = {
    name: "Flour",
    Ⲇⵠ: Cr.ⲆΔⵠⲆΔΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const ps = tn;
  const rs = or;
  Or[Dr.ΔᐃⵠᐃⲆ] = {
    name: "Special fur peasant",
    Ⲇⵠ: Cr.ΔΔⲆΔⵠⵠⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const ss = _;
  Or[Dr.ⵠᐃᐃᐃⲆ] = {
    name: "Special fur hood",
    Ⲇⵠ: Cr.ΔⵠⲆⵠⲆᐃΔ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: Ko
  };
  Or[Dr.ⵠᐃⵠⵠⵠ] = {
    name: "Pumpkin",
    Ⲇⵠ: Cr.ⲆⲆΔᐃΔᐃᐃ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: 0
  };
  const ts = oo;
  Or[Dr.ⲆⵠⵠⲆⵠ] = {
    name: "Garlic",
    Ⲇⵠ: Cr.ΔⲆᐃⵠΔᐃᐃ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: kq
  };
  Or[Dr.ⲆⵠⲆΔⵠ] = {
    name: "Thornbush",
    Ⲇⵠ: Cr.ⵠΔΔᐃᐃᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆΔⵠᐃⲆ] = {
    name: "Carrot",
    Ⲇⵠ: Cr.ⲆⲆⵠΔⵠΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ΔⵠⲆΔᐃ] = {
    name: "Tomato",
    Ⲇⵠ: Cr.ⵠⲆᐃΔⲆⵠᐃ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: kq
  };
  Or[Dr.ⵠᐃⵠⲆⵠ] = {
    name: "Watermelon",
    Ⲇⵠ: Cr.ⵠⵠΔᐃⲆᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  const js = Ur;
  const us = Z;
  Or[Dr.ⵠΔΔⵠⲆ] = {
    name: "Aloe Vera",
    Ⲇⵠ: Cr.ⲆⲆΔⲆⵠΔΔ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⲆⵠᐃᐃ] = {
    name: "Penguin Feather",
    Ⲇⵠ: Cr.ⵠⵠⲆⲆⲆ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: jj
  };
  const vs = Y;
  Or[Dr.Δᐃⵠᐃᐃ] = {
    name: "Hawk Feather",
    Ⲇⵠ: Cr.ⲆᐃⲆΔⲆ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ⲆⲆⲆΔⵠ] = {
    name: "Vulture Feather",
    Ⲇⵠ: Cr.ᐃⵠᐃΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ko
  };
  const ws = u;
  const xs = w;
  Or[Dr.ⲆΔⵠᐃᐃ] = {
    name: "Cactus",
    Ⲇⵠ: Cr.ⵠᐃΔⵠⲆⵠᐃ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 0
  };
  const qs = Ue;
  Or[Dr.ⵠⲆⲆᐃΔⲆⲆ] = {
    name: "Cactus",
    Ⲇⵠ: Cr.ᐃⵠⵠⵠΔⲆᐃ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 0
  };
  const ys = ue;
  const zs = $j;
  const As = Yr;
  Or[Dr.ⲆᐃⵠΔΔⲆⲆ] = {
    name: "Pitchfork Part",
    Ⲇⵠ: Cr.ⵠⵠΔᐃⵠⲆᐃ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ᐃᐃᐃᐃᐃ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ⲆᐃΔⵠΔΔΔ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ΔⵠΔⲆΔ] = {
    name: "Emerald",
    Ⲇⵠ: Cr.ΔⵠΔΔⵠ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: tr
  };
  Or[Dr.Δⵠⵠᐃᐃ] = {
    name: "Christmas Hat",
    Ⲇⵠ: Cr.ᐃΔⵠⵠΔⲆⲆ,
    ⲆᐃᐃΔ: kq
  };
  const Bs = wr;
  const Cs = V;
  const Ds = re;
  Or[Dr.ⲆᐃⲆᐃᐃ] = {
    name: "Elf Hat",
    Ⲇⵠ: Cr.ᐃⵠΔΔΔΔΔ,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ᐃⵠⲆᐃⵠ] = {
    name: "Garland",
    Ⲇⵠ: Cr.ⲆΔⵠᐃⲆⲆᐃ,
    ⲆᐃᐃΔ: 0,
    ⲆⵠⵠΔ: 0
  };
  Or[Dr.ⲆᐃΔⲆⵠ] = {
    name: "Candy",
    Ⲇⵠ: Cr.ᐃⲆᐃⲆⵠᐃΔ,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⵠⵠⲆᐃ] = {
    name: "Sugar Cane",
    Ⲇⵠ: Cr.ΔⵠΔᐃΔΔᐃ,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⵠⵠⵠΔ] = {
    name: "Pirate Sword",
    Ⲇⵠ: Cr.ᐃⲆⲆᐃΔⵠΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ᐃⲆΔⵠΔ] = {
    name: "Crab Stick",
    Ⲇⵠ: Cr.ⵠΔⲆᐃⵠⲆⵠ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⲆᐃⲆ] = {
    name: "Reidite",
    Ⲇⵠ: Cr.ᐃΔⵠᐃᐃⲆⵠ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: Ko
  };
  const Es = ok;
  const Fs = Hr;
  const Gs = Jr;
  const eh = Xn;
  const ih = Oi;
  const th = mj;
  const nh = B;
  const oh = Sn;
  Or[Dr.ⲆⵠⲆⵠᐃ] = {
    name: "Flame",
    Ⲇⵠ: Cr.ᐃΔⵠΔⲆⵠⲆ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠᐃΔΔᐃ] = {
    name: "Campfire",
    Ⲇⵠ: Cr.ⲆⲆᐃΔΔⵠⲆ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: Fo
  };
  Or[Dr.ⵠᐃⲆⵠᐃ] = {
    name: "Bed",
    Ⲇⵠ: Cr.ⵠⵠΔⵠⵠΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ᐃⵠΔⲆᐃ] = {
    name: "Workbench",
    Ⲇⵠ: Cr.ᐃΔⲆΔᐃΔⲆ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: Cs
  };
  Or[Dr.ⵠⲆΔᐃΔ] = {
    name: "Stone sword",
    Ⲇⵠ: Cr.ⲆΔⵠⲆΔΔⵠ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: Br
  };
  Or[Dr.ⵠⵠⵠΔⵠ] = {
    name: "Stone pick",
    Ⲇⵠ: Cr.ⲆⲆⵠΔᐃᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ur
  };
  const rh = jj;
  const ah = z;
  const sh = Vn;
  var hh = Vf.Math.acos;
  Vf.Math.acos = Vf.Math.asin;
  Vf.Math.asin = hh;
  var lh = Vf.Math.cos;
  Vf.Math.cos = Vf.Math.sin;
  Vf.Math.sin = lh;
  Or[Dr.ΔⵠᐃᐃΔ] = {
    name: "Berries bush",
    Ⲇⵠ: Cr.ⵠΔⲆⲆᐃⲆΔ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: Kr
  };
  Or[Dr.ᐃⲆⵠΔⲆ] = {
    name: "Gold pick",
    Ⲇⵠ: Cr.ⲆΔᐃΔΔΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ⲆΔᐃᐃᐃ] = {
    name: "Diamond pick",
    Ⲇⵠ: Cr.ⲆᐃⲆΔⵠⵠᐃ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: dn
  };
  Or[Dr.ᐃⲆᐃΔⲆ] = {
    name: "Wood sword",
    Ⲇⵠ: Cr.ΔᐃΔΔⵠⵠⵠ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 1
  };
  const gh = Uq;
  Or[Dr.ⲆΔⵠⲆᐃ] = {
    name: "Gold sword",
    Ⲇⵠ: Cr.ⲆᐃⲆΔᐃⵠⲆ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: ik
  };
  const uh = Rj;
  Or[Dr.ΔᐃⲆⵠΔ] = {
    name: "Diamond sword",
    Ⲇⵠ: Cr.ᐃΔⲆⲆⵠⵠⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const bh = As;
  Or[Dr.ᐃⵠΔᐃⲆ] = {
    name: "Wood pick",
    Ⲇⵠ: Cr.ΔᐃⲆⲆⲆᐃⲆ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 1
  };
  const vh = Jr;
  Or[Dr.ᐃⲆⲆⲆᐃ] = {
    name: "Wood wall",
    Ⲇⵠ: Cr.ⵠΔᐃⲆΔⲆᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Br
  };
  Or[Dr.ᐃΔⲆᐃᐃ] = {
    name: "Wood spike",
    Ⲇⵠ: Cr.ΔᐃⲆΔᐃⲆⵠ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔⵠᐃⲆ] = {
    name: "Cooked meat",
    Ⲇⵠ: Cr.ᐃⲆΔⲆⲆᐃΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: ko
  };
  const dh = P;
  Or[Dr.Ⲇⵠᐃⵠᐃ] = {
    name: "Big campfire",
    Ⲇⵠ: Cr.ⲆⵠⲆⲆⵠⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.ⲆᐃΔᐃᐃ] = {
    name: "Bandage",
    Ⲇⵠ: Cr.ⲆΔⵠⵠⵠⲆⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ⲆⲆΔⵠⵠ] = {
    name: "Stone wall",
    Ⲇⵠ: Cr.ᐃΔΔⲆⵠⵠᐃ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: Br
  };
  const ch = L;
  Or[Dr.ᐃⵠⵠΔⵠ] = {
    name: "Gold wall",
    Ⲇⵠ: Cr.ΔΔⵠⲆⲆᐃⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const mh = U;
  const ph = _k;
  Or[Dr.ⲆⲆᐃⲆΔ] = {
    name: "Diamond wall",
    Ⲇⵠ: Cr.ⲆⵠΔᐃⲆΔΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: Ur
  };
  Or[Dr.ⵠⵠΔⲆⲆ] = {
    name: "Wood door",
    Ⲇⵠ: Cr.ⲆᐃᐃⵠⲆΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: er
  };
  const Ch = An;
  Or[Dr.ⲆΔΔⲆⵠ] = {
    name: "Chest",
    Ⲇⵠ: Cr.ⲆΔᐃΔᐃΔⵠ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Br
  };
  Or[Dr.Ⲇᐃⵠⵠⵠ] = {
    name: "Stone spike",
    Ⲇⵠ: Cr.ΔⵠⵠᐃⵠΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: er
  };
  const Th = uh;
  const fh = me;
  Or[Dr.ⲆΔⲆᐃᐃ] = {
    name: "Gold spike",
    Ⲇⵠ: Cr.ⲆΔᐃⵠⵠⵠⲆ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 1
  };
  const zh = Ta;
  const yh = eh;
  const wh = Fn;
  Or[Dr.ᐃᐃᐃΔⵠ] = {
    name: "Diamond spike",
    Ⲇⵠ: Cr.ᐃᐃⵠᐃⲆⲆᐃ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ΔΔΔΔⲆ] = {
    name: "Stone door",
    Ⲇⵠ: Cr.ⵠᐃⲆᐃⵠΔⲆ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃᐃⲆᐃⲆ] = {
    name: "Gold door",
    Ⲇⵠ: Cr.ᐃⵠᐃᐃΔΔᐃ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: 1
  };
  const Ph = Un;
  Or[Dr.ᐃⵠᐃⲆΔ] = {
    name: "Diamond door",
    Ⲇⵠ: Cr.ΔᐃⲆⲆⲆⵠⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Cs
  };
  Or[Dr.ᐃⵠⵠⵠᐃ] = {
    name: "Chapka",
    Ⲇⵠ: Cr.ⵠⵠⵠⵠΔΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: js
  };
  const Ah = de;
  Or[Dr.ⵠΔᐃⵠⵠ] = {
    name: "Big Chapka",
    Ⲇⵠ: Cr.ⵠΔⵠⵠᐃⲆΔ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: Aj
  };
  Or[Dr.ᐃⲆⵠⲆⲆ] = {
    name: "Wood spear",
    Ⲇⵠ: Cr.ⵠⵠⲆΔⲆⲆΔ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆᐃᐃΔ] = {
    name: "Stone spear",
    Ⲇⵠ: Cr.ᐃΔⵠⵠⵠΔᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 1
  };
  const kh = Ne;
  const xh = on;
  Or[Dr.ΔⲆⲆⵠⲆ] = {
    name: "Gold spear",
    Ⲇⵠ: Cr.ᐃⲆⲆΔΔΔⵠ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: 1
  };
  const Jh = Sa;
  const Mh = Fr;
  Or[Dr.ΔⵠⲆⵠⵠ] = {
    name: "Diamond spear",
    Ⲇⵠ: Cr.ⵠⵠⵠⵠⵠⵠⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ur
  };
  Or[Dr.ⵠⲆᐃⲆᐃ] = {
    name: "Dragon spear",
    Ⲇⵠ: Cr.ⵠΔΔΔΔᐃᐃ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: jj
  };
  const Bh = bs;
  const Dh = Kr;
  Or[Dr.ΔᐃᐃⲆΔ] = {
    name: "Dragon spear",
    Ⲇⵠ: Cr.ⵠΔᐃΔⵠᐃⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⵠⲆⵠΔ] = {
    name: "Crab spear",
    Ⲇⵠ: Cr.ⲆⵠⵠⵠⵠⲆⲆ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃᐃᐃⲆⲆ] = {
    name: "Crab loot",
    Ⲇⵠ: Cr.ΔⵠⵠΔⵠⲆⵠ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆⵠᐃᐃⲆ] = {
    name: "Furnace",
    Ⲇⵠ: Cr.ⲆⵠᐃⲆⲆⲆᐃ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  const Eh = He;
  const Ih = Xr;
  const Sh = io;
  const Qh = Mk;
  const _h = hn;
  Or[Dr.ᐃⵠⵠΔᐃ] = {
    name: "Explorer hat",
    Ⲇⵠ: Cr.ⲆᐃᐃᐃᐃⵠΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: js
  };
  Or[Dr.ΔⵠⵠᐃΔ] = {
    name: "Pirate hat",
    Ⲇⵠ: Cr.ᐃᐃΔⵠⲆⲆⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: js
  };
  Or[Dr.ΔⵠΔⵠⲆ] = {
    name: "Flower hat",
    Ⲇⵠ: Cr.ΔᐃⵠⲆⲆⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ur
  };
  Or[Dr.ⵠⲆΔΔⲆ] = {
    name: "Fur hat",
    Ⲇⵠ: Cr.ⲆⲆΔᐃᐃΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔᐃΔΔ] = {
    name: "Wood helmet",
    Ⲇⵠ: Cr.ⲆⵠⵠⲆΔⵠⲆ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ΔΔᐃⲆΔ] = {
    name: "Stone helmet",
    Ⲇⵠ: Cr.ⵠⲆⲆⵠΔᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Fo
  };
  Or[Dr.ⲆⲆⲆᐃⲆ] = {
    name: "Gold helmet",
    Ⲇⵠ: Cr.ΔΔΔΔⵠⲆΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: Cs
  };
  Or[Dr.ᐃⵠᐃⲆᐃ] = {
    name: "Diamond helmet",
    Ⲇⵠ: Cr.ᐃⲆⵠⲆⲆⵠΔ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: 1
  };
  const Fh = lk;
  Or[Dr.ⲆⵠⵠⲆⲆ] = {
    name: "Book",
    Ⲇⵠ: Cr.ᐃΔΔⵠⵠⵠⵠ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆΔΔⵠⲆ] = {
    name: "Paper",
    Ⲇⵠ: Cr.ΔⲆΔᐃᐃⲆᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 0
  };
  const Rh = f;
  const jh = ik;
  const Lh = A;
  const Wh = Fj;
  Or[Dr.ᐃⵠΔⵠ] = {
    name: "Bag",
    Ⲇⵠ: Cr.ΔⵠᐃⵠΔᐃΔ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.ⲆΔⵠΔⵠ] = {
    name: "Amethyst sword",
    Ⲇⵠ: Cr.ᐃⲆⲆᐃᐃΔⲆ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ΔᐃⲆⲆⵠ] = {
    name: "Amethyst pick",
    Ⲇⵠ: Cr.ⲆⵠΔᐃΔⲆᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆᐃᐃΔⲆ] = {
    name: "Amethyst spear",
    Ⲇⵠ: Cr.ᐃⲆⲆᐃⲆΔⲆ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆᐃᐃᐃⲆ] = {
    name: "Stone hammer",
    Ⲇⵠ: Cr.ⲆⲆᐃᐃⲆᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ΔᐃᐃΔⲆ] = {
    name: "Gold hammer",
    Ⲇⵠ: Cr.ᐃᐃΔⲆᐃⵠΔ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  const Gh = fq;
  const Oh = mn;
  Or[Dr.ⵠᐃᐃΔᐃ] = {
    name: "Diamond hammer",
    Ⲇⵠ: Cr.ⵠⲆΔⵠⵠⲆⲆ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.Ⲇᐃᐃⵠᐃ] = {
    name: "Amethyst hammer",
    Ⲇⵠ: Cr.ᐃᐃⵠⵠⵠΔⲆ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  const qh = Gn;
  Or[Dr.ⵠΔᐃⵠᐃ] = {
    name: "Reidite hammer",
    Ⲇⵠ: Cr.ⵠᐃΔⲆΔΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const Nh = x;
  const Hh = On;
  Or[Dr.ΔⲆᐃⲆⵠ] = {
    name: "Amethyst wall",
    Ⲇⵠ: Cr.ⲆⲆⵠⵠᐃΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const Uh = Le;
  Or[Dr.ᐃᐃᐃᐃⵠ] = {
    name: "Amethyst spike",
    Ⲇⵠ: Cr.ΔⵠᐃΔΔⵠⵠ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: Br
  };
  Or[Dr.ΔΔⵠᐃⲆ] = {
    name: "Amethyst door",
    Ⲇⵠ: Cr.ⲆⲆᐃΔⲆᐃⲆ,
    ⲆⵠⵠΔ: ko,
    ⲆᐃᐃΔ: ik
  };
  Or[Dr.ΔΔᐃⵠⵠ] = {
    name: "Cap & scarf",
    Ⲇⵠ: Cr.ΔⲆⵠΔⲆΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.ⵠᐃⵠⵠΔ] = {
    name: "Blue cord",
    Ⲇⵠ: Cr.ⵠⵠⵠⲆⲆᐃⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: rh
  };
  Or[Dr.ΔⲆⲆⲆⲆ] = {
    name: "Lock",
    Ⲇⵠ: Cr.ⵠᐃⲆΔᐃᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Cs
  };
  Or[Dr.ⲆΔᐃⲆⲆ] = {
    name: "Resurrection",
    Ⲇⵠ: Cr.ᐃᐃⲆⲆΔΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Aj
  };
  const Yh = Gh;
  Or[Dr.ⵠⲆⲆⵠΔ] = {
    name: "Lockpick",
    Ⲇⵠ: Cr.ᐃΔᐃⲆᐃΔᐃ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⵠⲆΔΔ] = {
    name: "Totem",
    Ⲇⵠ: Cr.ⲆⲆⲆᐃΔⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const Kh = ha;
  Or[Dr.ᐃⵠᐃᐃΔ] = {
    name: "Amethyst helmet",
    Ⲇⵠ: Cr.ⲆⲆⲆᐃΔᐃⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Br
  };
  Or[Dr.ⵠᐃⲆⲆΔ] = {
    name: "Super hammer",
    Ⲇⵠ: Cr.ⲆⲆⵠᐃⲆⲆⲆ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 1
  };
  const Vh = 256;
  const Xh = Mk;
  Or[Dr.ᐃⲆΔⲆⲆ] = {
    name: "Bridge",
    Ⲇⵠ: Cr.ᐃⵠⵠⵠⵠⲆᐃ,
    ⲆⵠⵠΔ: 1,
    ⲆᐃᐃΔ: Aj
  };
  Or[Dr.ᐃΔΔᐃⵠ] = {
    name: "Wood Tower",
    Ⲇⵠ: Cr.ᐃᐃΔⲆᐃⲆᐃ,
    ⲆⵠⵠΔ: 1,
    ⲆᐃᐃΔ: dn
  };
  const Zh = Bh;
  Or[Dr.ᐃⲆᐃⵠᐃ] = {
    name: "Bottle full",
    Ⲇⵠ: Cr.ᐃᐃᐃᐃᐃⵠᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: rh
  };
  const $h = sj;
  const el = ya;
  const il = m;
  Or[Dr.ⵠᐃⲆⵠⵠ] = {
    name: "Bottle empty",
    Ⲇⵠ: Cr.ᐃⲆⲆᐃⲆΔΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: Wh
  };
  const tl = Rq;
  const nl = Cq;
  Or[Dr.Ⲇᐃᐃⵠⵠ] = {
    name: "Stone shovel",
    Ⲇⵠ: Cr.ⲆΔᐃᐃᐃΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ΔⲆᐃΔᐃ] = {
    name: "Watering can",
    Ⲇⵠ: Cr.ᐃᐃⵠΔⲆᐃΔ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: Ko
  };
  const ol = _;
  Or[Dr.ΔΔⲆᐃᐃ] = {
    name: "Wheat",
    Ⲇⵠ: Cr.ΔⵠⵠᐃΔⵠᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const rl = ks;
  const al = zn;
  const sl = Jr;
  Or[Dr.ΔᐃᐃΔΔ] = {
    name: "Cookie",
    Ⲇⵠ: Cr.ⲆⵠᐃⵠΔⵠΔ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: 0
  };
  const hl = zq;
  Or[Dr.ᐃⲆΔⵠⵠ] = {
    name: "Windmill",
    Ⲇⵠ: Cr.ⵠⲆⵠᐃⲆⲆᐃ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆᐃᐃⵠ] = {
    name: "Super diving suit",
    Ⲇⵠ: Cr.ⵠⵠᐃⲆⵠΔⵠ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠΔⲆⲆΔ] = {
    name: "Diving mask",
    Ⲇⵠ: Cr.ⵠΔⲆΔΔⲆⲆ,
    ⲆⵠⵠΔ: Wh,
    ⲆᐃᐃΔ: Cs
  };
  const ll = zq;
  const gl = Tq;
  const ul = co;
  const bl = Sn;
  const vl = kj;
  Or[Dr.ΔᐃᐃⲆⲆ] = {
    name: "Watering can full",
    Ⲇⵠ: Cr.ᐃⲆⲆⵠᐃΔᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ⲆᐃᐃⵠⲆ] = {
    name: "Cake",
    Ⲇⵠ: Cr.ⵠᐃΔⲆⵠᐃⲆ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: kq
  };
  const dl = ps;
  Or[Dr.Ⲇⵠᐃⵠⵠ] = {
    name: "Foodfish cooked",
    Ⲇⵠ: Cr.ΔΔᐃⲆᐃΔᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ΔⵠΔΔⲆ] = {
    name: "Plot",
    Ⲇⵠ: Cr.ⲆΔᐃΔᐃᐃⲆ,
    ⲆⵠⵠΔ: 1,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃᐃⵠⲆᐃ] = {
    name: "Bread",
    Ⲇⵠ: Cr.ⵠⲆΔᐃΔΔᐃ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: 0
  };
  const cl = Za;
  const ml = qj;
  Or[Dr.ᐃᐃⲆⵠⲆⲆΔ] = {
    name: "Bottle full (with ice)",
    Ⲇⵠ: Cr.ⵠᐃΔΔⲆⲆΔⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.ΔΔᐃᐃΔᐃⵠ] = {
    name: "Bottle full (with well)",
    Ⲇⵠ: Cr.ΔⲆⵠⲆⵠⲆⲆᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const pl = Rj;
  const Cl = al;
  const Tl = Vq;
  Or[Dr.ⲆΔⵠⵠⲆ] = {
    name: "Gold shovel",
    Ⲇⵠ: Cr.ᐃⵠᐃΔᐃᐃⲆ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ΔⵠᐃΔᐃ] = {
    name: "Diamond shovel",
    Ⲇⵠ: Cr.ΔⲆΔΔΔΔⲆ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  const fl = ys;
  Or[Dr.ᐃⵠΔᐃⵠ] = {
    name: "Amethyst shovel",
    Ⲇⵠ: Cr.ᐃᐃⲆⲆⲆΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆⲆⵠⲆ] = {
    name: "Spanner",
    Ⲇⵠ: Cr.ⵠᐃᐃⲆᐃⵠⵠ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆΔⵠⵠΔ] = {
    name: "Machete",
    Ⲇⵠ: Cr.ⵠⵠᐃⵠᐃΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆⵠⵠᐃ] = {
    name: "Bread oven",
    Ⲇⵠ: Cr.ⲆⵠᐃΔᐃⵠᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ce
  };
  const zl = mk;
  Or[Dr.ᐃⵠⲆⵠΔ] = {
    name: "Sandwich",
    Ⲇⵠ: Cr.ⵠΔⲆⵠΔᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠΔⵠᐃⵠ] = {
    name: "Dragon helmet",
    Ⲇⵠ: Cr.ⲆⵠⲆᐃⲆⲆΔ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: 0
  };
  const yl = jh;
  const wl = Rr;
  const Pl = Gn;
  const Al = Aq;
  const kl = mr;
  const xl = Ok;
  const Jl = jq;
  const Ml = de;
  Or[Dr.ⵠⵠⵠᐃᐃ] = {
    name: "Dragon helmet",
    Ⲇⵠ: Cr.ⵠΔΔᐃΔⲆΔ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠⲆⵠⲆⵠ] = {
    name: "Witch",
    Ⲇⵠ: Cr.ⲆⲆⵠΔΔᐃᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: rh
  };
  Or[Dr.Δᐃᐃᐃᐃ] = {
    name: "Nimbus",
    Ⲇⵠ: Cr.ⲆᐃⵠΔⲆⲆⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ko
  };
  const Bl = qr;
  Or[Dr.ᐃᐃⵠᐃⲆ] = {
    name: "Wand1",
    Ⲇⵠ: Cr.ⲆΔᐃᐃΔΔⲆ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Wh
  };
  const Dl = Fs;
  const El = Ba;
  Or[Dr.ⵠⲆᐃⵠΔ] = {
    name: "Wand2",
    Ⲇⵠ: Cr.ΔⵠᐃⲆⲆᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ⵠΔΔⲆΔ] = {
    name: "Dragon sword",
    Ⲇⵠ: Cr.ᐃⵠⲆΔⵠᐃⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const Il = Rh;
  Or[Dr.ⵠⲆⲆⵠⵠ] = {
    name: "Dragon sword",
    Ⲇⵠ: Cr.ᐃⲆⵠᐃⵠΔᐃ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: Kr
  };
  const Sl = Ih;
  const Ql = Ml;
  Or[Dr.ⵠⵠΔΔΔ] = {
    name: "Wood shield",
    Ⲇⵠ: Cr.ᐃΔᐃⲆⵠΔⵠ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: er
  };
  Or[Dr.ᐃⵠⵠᐃⵠ] = {
    name: "Stone shield",
    Ⲇⵠ: Cr.ΔΔⵠⲆⲆⵠΔ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆⲆⲆΔ] = {
    name: "Gold shield",
    Ⲇⵠ: Cr.ⵠⵠⵠⵠⵠⲆⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: dn
  };
  const _l = Ok;
  const Fl = aq;
  const Rl = Vn;
  Or[Dr.ⲆᐃΔΔᐃ] = {
    name: "Diamond shield",
    Ⲇⵠ: Cr.ΔΔᐃⲆᐃᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠᐃⲆⲆᐃ] = {
    name: "Amethyst shield",
    Ⲇⵠ: Cr.ⵠⵠⵠΔⲆⲆⵠ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: Br
  };
  const jl = ks;
  Or[Dr.ᐃⵠᐃⲆⲆ] = {
    name: "Reidite shield",
    Ⲇⵠ: Cr.ΔΔΔᐃⵠⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ik
  };
  Or[Dr.ᐃⵠⲆⲆⲆ] = {
    name: "Wood axe",
    Ⲇⵠ: Cr.ⲆΔᐃⲆΔⵠⲆ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: er
  };
  const Ll = Mr;
  const Wl = ms;
  const Gl = Rj;
  const Ol = kq;
  Or[Dr.ᐃᐃⲆⵠⲆ] = {
    name: "Stone axe",
    Ⲇⵠ: Cr.ⲆⲆΔΔⲆⲆⵠ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔᐃⲆΔ] = {
    name: "Gold axe",
    Ⲇⵠ: Cr.ⵠⵠΔⲆᐃᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const ql = Mh;
  Or[Dr.ΔⲆΔᐃΔ] = {
    name: "Diamond axe",
    Ⲇⵠ: Cr.ᐃⲆⲆⵠᐃΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠΔⵠⵠΔ] = {
    name: "Amethyst axe",
    Ⲇⵠ: Cr.ΔⵠΔⲆⲆⲆΔ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: ik
  };
  Or[Dr.ΔΔⲆΔΔ] = {
    name: "Reidite axe",
    Ⲇⵠ: Cr.ⲆⵠΔⵠⲆΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠᐃᐃⲆᐃ] = {
    name: "Wood bow",
    Ⲇⵠ: Cr.ⵠᐃⵠΔᐃᐃᐃ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: dn
  };
  Or[Dr.ᐃᐃᐃΔⲆ] = {
    name: "Stone bow",
    Ⲇⵠ: Cr.ᐃⵠⲆⲆᐃⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔΔⲆᐃ] = {
    name: "Gold bow",
    Ⲇⵠ: Cr.ⲆⵠᐃΔᐃᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Aj
  };
  Or[Dr.ᐃΔⲆⲆⲆ] = {
    name: "Diamond bow",
    Ⲇⵠ: Cr.ⲆΔⵠⲆΔΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠᐃᐃᐃΔ] = {
    name: "Amethyst bow",
    Ⲇⵠ: Cr.ⲆⲆⵠⵠΔⵠΔ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  const Nl = lq;
  const Hl = xh;
  Or[Dr.ΔⵠⲆᐃⲆ] = {
    name: "Reidite bow",
    Ⲇⵠ: Cr.ⵠΔⵠΔΔⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ce
  };
  const Ul = 256;
  Or[Dr.ΔᐃΔⲆⲆ] = {
    name: "Dragon bow",
    Ⲇⵠ: Cr.ΔΔⵠⲆᐃⵠΔ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: Kr
  };
  const Yl = xh;
  Or[Dr.ΔⵠᐃⲆᐃ] = {
    name: "Crown of life",
    Ⲇⵠ: Cr.ⵠⵠΔⲆΔⵠⲆ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 0
  };
  const Kl = kl;
  Or[Dr.ᐃⲆⵠᐃⵠ] = {
    name: "Gem of life",
    Ⲇⵠ: Cr.ⵠΔⲆΔⵠⵠⵠ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: Ko
  };
  Or[Dr.ⵠᐃᐃᐃᐃ] = {
    name: "Orb of the dragon",
    Ⲇⵠ: Cr.ⲆⵠΔⲆⵠⵠⲆ,
    ⲆⵠⵠΔ: Fj,
    ⲆᐃᐃΔ: 0
  };
  const Vl = sn;
  Or[Dr.ᐃᐃⵠⵠⲆ] = {
    name: "Orb of the dragon",
    Ⲇⵠ: Cr.ⵠⲆᐃⵠΔⲆᐃ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: Kr
  };
  const Xl = yq;
  Or[Dr.ⵠⵠᐃⵠΔ] = {
    name: "Cube of the dragon",
    Ⲇⵠ: Cr.ΔⵠⵠΔᐃᐃΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const Zl = Lk;
  const $l = xs;
  Or[Dr.ⲆᐃⵠΔᐃ] = {
    name: "Cube of the dragon",
    Ⲇⵠ: Cr.ΔΔⲆᐃΔⵠⵠ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: 0
  };
  const eg = Pr;
  Or[Dr.ΔⲆΔᐃⵠ] = {
    name: "Crown of luck",
    Ⲇⵠ: Cr.ΔⵠⵠⲆᐃΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ko
  };
  const ig = Rq;
  Or[Dr.ΔⵠΔᐃΔ] = {
    name: "Gem of luck",
    Ⲇⵠ: Cr.ⵠΔⲆⵠᐃᐃᐃ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: Ol
  };
  const tg = Uh;
  Or[Dr.ⵠⵠΔΔⵠ] = {
    name: "Crown of the angel",
    Ⲇⵠ: Cr.ⲆᐃⵠⲆΔΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆⲆΔΔⵠ] = {
    name: "Gem of the angel",
    Ⲇⵠ: Cr.ᐃⵠⲆΔΔᐃᐃ,
    ⲆⵠⵠΔ: Wh,
    ⲆᐃᐃΔ: 0
  };
  const ng = $n;
  Or[Dr.ᐃⲆⲆΔⲆ] = {
    name: "Dragon heart",
    Ⲇⵠ: Cr.ΔⲆΔⵠⵠⲆΔ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: yk
  };
  const og = ia;
  Or[Dr.ⲆᐃΔᐃⲆ] = {
    name: "Lava heart",
    Ⲇⵠ: Cr.ⲆΔᐃΔⵠΔⵠ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: ko
  };
  Or[Dr.ᐃᐃᐃⲆᐃ] = {
    name: "Hood",
    Ⲇⵠ: Cr.ᐃΔⲆᐃⵠⵠᐃ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔᐃⵠΔ] = {
    name: "Peasant",
    Ⲇⵠ: Cr.ΔᐃᐃⵠⵠΔᐃ,
    ⲆⵠⵠΔ: Wh,
    ⲆᐃᐃΔ: 1
  };
  const rg = rr;
  Or[Dr.ⵠⵠⲆⲆⵠ] = {
    name: "Winter peasant",
    Ⲇⵠ: Cr.ⲆᐃΔᐃⲆΔᐃ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ᐃΔᐃⵠⵠ] = {
    name: "Winter hood",
    Ⲇⵠ: Cr.ΔᐃⵠⲆⲆΔⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ol
  };
  Or[Dr.Ⲇᐃⵠⵠᐃ] = {
    name: "Bucket full",
    Ⲇⵠ: Cr.ΔⵠⲆΔᐃⵠᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Ol
  };
  const ag = sa;
  Or[Dr.ⵠⵠᐃᐃⵠ] = {
    name: "Bucket empty",
    Ⲇⵠ: Cr.ⲆᐃᐃⲆΔΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Aj
  };
  Or[Dr.ᐃΔΔΔΔ] = {
    name: "Well",
    Ⲇⵠ: Cr.ⵠⵠⵠⲆᐃⲆⲆ,
    ⲆⵠⵠΔ: yk,
    ⲆᐃᐃΔ: js
  };
  const sg = rs;
  const hg = os;
  const lg = an;
  const gg = bs;
  Or[Dr.ᐃᐃⵠΔΔ] = {
    name: "Sign",
    Ⲇⵠ: Cr.ⲆⵠⵠᐃΔⵠᐃ,
    ⲆⵠⵠΔ: Ol,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆΔⲆΔᐃ] = {
    name: "Pumpkin Seed",
    Ⲇⵠ: Cr.ⲆⲆⲆⲆⵠⲆΔ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⵠΔⵠⲆΔ] = {
    name: "Garlic Seed",
    Ⲇⵠ: Cr.ᐃΔᐃΔΔᐃᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: rh
  };
  const ug = ka;
  Or[Dr.ⵠᐃⵠⲆᐃ] = {
    name: "Thorbushes Seed",
    Ⲇⵠ: Cr.ⵠⵠΔΔⵠᐃΔ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ⲆΔⵠⲆΔ] = {
    name: "Roof",
    Ⲇⵠ: Cr.ᐃΔⲆΔⲆⲆΔ,
    ⲆⵠⵠΔ: 1,
    ⲆᐃᐃΔ: Ur
  };
  const bg = ol;
  Or[Dr.ⲆᐃᐃΔᐃ] = {
    name: "Crab Crown",
    Ⲇⵠ: Cr.ΔΔᐃⲆΔᐃΔ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃΔⲆⲆᐃ] = {
    name: "Carrot Seed",
    Ⲇⵠ: Cr.ᐃᐃΔΔⵠⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ΔΔΔᐃⲆ] = {
    name: "Tomato Seed",
    Ⲇⵠ: Cr.ⲆⲆΔᐃⵠⲆⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ol
  };
  Or[Dr.ᐃΔⵠᐃᐃ] = {
    name: "Watermelon Seed",
    Ⲇⵠ: Cr.ⲆⵠᐃᐃᐃᐃⲆ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: Mn
  };
  const vg = Vl;
  Or[Dr.ⵠⵠⵠⲆΔ] = {
    name: "Aloe Vera Seed",
    Ⲇⵠ: Cr.ᐃⲆⵠⲆᐃⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: kq
  };
  const dg = Yi;
  const cg = Un;
  Or[Dr.ⲆᐃⲆⲆⲆ] = {
    name: "Cap",
    Ⲇⵠ: Cr.ΔⵠΔⵠⲆΔᐃ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: er
  };
  const mg = Fq;
  Or[Dr.ⵠᐃⵠⲆⲆ] = {
    name: "Turban",
    Ⲇⵠ: Cr.ⲆᐃⲆΔᐃⵠᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: Cs
  };
  const pg = jl;
  const Cg = ml;
  const Tg = D;
  const fg = Oi;
  const zg = In;
  const yg = xl;
  const wg = Fo;
  const Pg = ha;
  Or[Dr.ⲆⵠⲆⲆⲆ] = {
    name: "Pilot Helmet",
    Ⲇⵠ: Cr.ⲆᐃⲆᐃⵠᐃⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃᐃᐃⵠᐃ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ⵠΔΔⵠⲆᐃⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Fj
  };
  const Ag = Wa;
  const kg = Ba;
  const xg = oo;
  Or[Dr.ⵠⵠⲆᐃᐃ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ⲆⵠᐃΔΔΔᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃⲆΔᐃΔ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ΔⵠΔᐃⵠΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: dn
  };
  const Jg = os;
  Or[Dr.ⵠⲆⲆᐃᐃ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ⵠΔⵠⵠⵠᐃⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ΔᐃΔⵠᐃ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ⲆΔⲆⲆΔⵠᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  const Mg = da;
  Or[Dr.ⵠΔΔᐃⲆ] = {
    name: "Emerald Machine",
    Ⲇⵠ: Cr.ᐃⵠᐃᐃⲆΔⵠ,
    ⲆⵠⵠΔ: Wh,
    ⲆᐃᐃΔ: V
  };
  const Bg = tq;
  const Dg = Ul;
  Or[Dr.ᐃⲆⵠⲆᐃ] = {
    name: "Pitchfork",
    Ⲇⵠ: Cr.ⵠΔΔⵠⲆΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: wg
  };
  Or[Dr.ᐃⵠᐃΔⲆ] = {
    name: "Wood Door Spike",
    Ⲇⵠ: Cr.ⵠᐃᐃⲆᐃⵠⲆ,
    ⲆⵠⵠΔ: Ko,
    ⲆᐃᐃΔ: ik
  };
  const Eg = Fo;
  const Ig = pk;
  Or[Dr.ᐃⵠⲆⵠⵠ] = {
    name: "Stone Door Spike",
    Ⲇⵠ: Cr.ⲆᐃΔⵠⲆΔⲆ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠΔⲆⵠᐃ] = {
    name: "Gold Door Spike",
    Ⲇⵠ: Cr.ᐃⵠⵠᐃⲆᐃⲆ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: jh
  };
  Or[Dr.ΔⵠⲆⵠΔ] = {
    name: "Diamond Door Spike",
    Ⲇⵠ: Cr.ⵠᐃⵠᐃᐃⵠⵠ,
    ⲆⵠⵠΔ: Dh,
    ⲆᐃᐃΔ: 1
  };
  const Sg = Rq;
  Or[Dr.ΔⵠⲆⵠⲆ] = {
    name: "Amethyst Door Spike",
    Ⲇⵠ: Cr.ᐃⵠⵠⲆᐃⵠᐃ,
    ⲆⵠⵠΔ: Wh,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ᐃⵠΔΔᐃ] = {
    name: "Diamond Fire Protection ",
    Ⲇⵠ: Cr.ⵠᐃΔΔΔⲆⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ik
  };
  Or[Dr.ⵠⲆⵠᐃⲆ] = {
    name: "Amethyst Fire Protection ",
    Ⲇⵠ: Cr.ⵠᐃΔᐃⵠᐃⲆ,
    ⲆⵠⵠΔ: jj,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⵠⲆΔⲆΔ] = {
    name: "Amethyst Fire Protection ",
    Ⲇⵠ: Cr.ΔΔⵠΔΔⵠΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: V
  };
  const Qg = xr;
  const _g = Bk;
  Or[Dr.ⵠΔⲆΔᐃ] = {
    name: "Reidite Sword",
    Ⲇⵠ: Cr.ᐃΔΔΔᐃᐃⲆ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: ce
  };
  Or[Dr.ᐃΔⵠᐃⵠ] = {
    name: "Reidite Spear",
    Ⲇⵠ: Cr.ⲆⲆⵠⵠΔΔⵠ,
    ⲆⵠⵠΔ: kq,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆΔⲆⲆᐃ] = {
    name: "Reidite Helmet",
    Ⲇⵠ: Cr.ⲆᐃᐃⲆΔⲆⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: V
  };
  Or[Dr.ⲆΔⵠⵠᐃ] = {
    name: "Reidite Door Spike",
    Ⲇⵠ: Cr.ⲆⲆⲆⵠⲆⲆᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆⲆΔᐃⲆ] = {
    name: "Reidite Door",
    Ⲇⵠ: Cr.ⲆᐃΔᐃⲆⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Aj
  };
  const Fg = Fs;
  Or[Dr.ᐃᐃⵠΔⵠ] = {
    name: "Reidite Spike",
    Ⲇⵠ: Cr.ᐃⵠⲆⵠⲆⲆᐃ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: 1
  };
  Or[Dr.ⲆⲆᐃⲆᐃ] = {
    name: "Reidite Wall",
    Ⲇⵠ: Cr.ᐃΔⲆⵠⵠΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ce
  };
  Or[Dr.ΔⲆⵠΔⲆ] = {
    name: "Reidite pick",
    Ⲇⵠ: Cr.ᐃⲆΔᐃᐃⵠⵠ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: ce
  };
  Or[Dr.ⲆᐃⲆΔⵠ] = {
    name: "Boat",
    Ⲇⵠ: Cr.ⵠⵠⲆᐃⵠΔᐃ,
    ⲆⵠⵠΔ: Kr,
    ⲆᐃᐃΔ: 1
  };
  const Rg = lq;
  Or[Dr.ᐃᐃⲆᐃⵠ] = {
    name: "Sled",
    Ⲇⵠ: Cr.ⲆᐃᐃΔⵠΔΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Cs
  };
  const jg = vg;
  const Lg = Ol;
  const Wg = ml;
  Or[Dr.ⲆΔᐃⵠᐃ] = {
    name: "Saddle",
    Ⲇⵠ: Cr.ᐃⲆᐃΔᐃⲆⲆ,
    ⲆⵠⵠΔ: Mn,
    ⲆᐃᐃΔ: ik
  };
  Or[Dr.ⵠΔᐃΔⵠ] = {
    name: "Mount Boar",
    Ⲇⵠ: Cr.ΔⵠⵠᐃⲆⵠᐃ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ᐃᐃΔⵠᐃ] = {
    name: "Mount King Crab",
    Ⲇⵠ: Cr.ᐃⲆⲆᐃΔᐃᐃ,
    ⲆⵠⵠΔ: Ol,
    ⲆᐃᐃΔ: Lg
  };
  Or[Dr.ⲆΔⵠⵠⵠ] = {
    name: "Mount Baby Dragon",
    Ⲇⵠ: Cr.ᐃΔΔⵠⲆⲆᐃ,
    ⲆⵠⵠΔ: rh,
    ⲆᐃᐃΔ: Dh
  };
  Or[Dr.ⵠⲆᐃⲆⵠ] = {
    name: "Mount Baby Lava",
    Ⲇⵠ: Cr.ΔᐃᐃᐃΔⲆᐃ,
    ⲆⵠⵠΔ: tr,
    ⲆᐃᐃΔ: 0
  };
  Or[Dr.ΔⵠΔΔᐃ] = {
    name: "Mount Hawk",
    Ⲇⵠ: Cr.ⵠⲆⵠⵠᐃΔⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  const Gg = Ik;
  Or[Dr.ᐃᐃⵠⲆⵠ] = {
    name: "Plane",
    Ⲇⵠ: Cr.ΔⵠⵠⲆΔⵠΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: jj
  };
  Or[Dr.ΔΔΔⲆᐃ] = {
    name: "Pitchfork 2",
    Ⲇⵠ: Cr.ⲆⲆⵠᐃⵠⲆΔ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: Ko
  };
  Or[Dr.ⵠΔⵠΔΔ] = {
    name: "Baby Mammoth",
    Ⲇⵠ: Cr.ⵠᐃΔᐃΔᐃⲆ,
    ⲆⵠⵠΔ: 0,
    ⲆᐃᐃΔ: 0
  };
  var Og = li;
  var Hs = [{
    r: [[Dr.ΔΔⲆⵠ, 25], [Dr.ᐃᐃᐃⵠ, 5]],
    w: 0,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠᐃΔΔᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃΔΔᐃ,
    time: er / 5,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⵠᐃΔΔᐃ, wg], [Dr.ΔΔⲆⵠ, 35], [Dr.ᐃᐃᐃⵠ, 10]],
    w: rh,
    f: rh,
    ᐃⲆΔ: 0,
    e: Ko,
    id: Xa.Ⲇⵠᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.Ⲇⵠᐃⵠᐃ,
    time: Fo / uh,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 150], [Dr.ᐃᐃᐃⵠ, 50], [Dr.ⲆΔᐃⲆ, $q]],
    w: jh,
    f: 0,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ⲆⵠᐃᐃⲆ,
    ⵠᐃΔΔ: Dr.ⲆⵠᐃᐃⲆ,
    time: Fo / Wr,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, da], [Dr.ᐃᐃᐃⵠ, 10]],
    w: 0,
    f: 0,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ᐃⵠΔⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃⵠΔⲆᐃ,
    time: dn / 6,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 10]],
    w: rh,
    f: 0,
    ᐃⲆΔ: Wh,
    e: Ko,
    id: Xa.ᐃⵠΔᐃⲆ,
    ⵠᐃΔΔ: Dr.ᐃⵠΔᐃⲆ,
    time: 1 / sn,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃⵠΔᐃⲆ, 1], [Dr.ΔΔⲆⵠ, 50], [Dr.ᐃᐃᐃⵠ, 15]],
    w: yl,
    f: 0,
    ᐃⲆΔ: Ko,
    e: 0,
    id: Xa.ⵠⵠⵠΔⵠ,
    ⵠᐃΔΔ: Dr.ⵠⵠⵠΔⵠ,
    time: yl / S,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 40], [Dr.ⲆΔᐃⲆ, 20], [Dr.ᐃᐃᐃⵠ, 30], [Dr.ⵠⵠⵠΔⵠ, Fo]],
    w: 1,
    f: kq,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⲆⵠΔⲆ,
    ⵠᐃΔΔ: Dr.ᐃⲆⵠΔⲆ,
    time: 1 / 12,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 20], [Dr.ⲆΔᐃⲆ, 50], [Dr.ᐃᐃᐃⵠ, 80], [Dr.ᐃⲆⵠΔⲆ, 1]],
    w: 1,
    f: 0,
    ᐃⲆΔ: kq,
    e: 0,
    id: Xa.ⲆΔᐃᐃᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔᐃᐃᐃ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 40], [Dr.ⲆΔᐃⲆ, 60], [Dr.ᐃᐃᐃΔ, 30], [Dr.ⲆΔᐃᐃᐃ, 1]],
    w: 1,
    f: ko,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ΔᐃⲆⲆⵠ,
    ⵠᐃΔΔ: Dr.ΔᐃⲆⲆⵠ,
    time: Aj / 60,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 30], [Dr.ⵠⲆⲆΔ, 40], [Dr.ⵠⲆᐃⲆ, 30], [Dr.ΔᐃⲆⲆⵠ, js]],
    w: Cs,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ΔⲆⵠΔⲆ,
    ⵠᐃΔΔ: Dr.ΔⲆⵠΔⲆ,
    time: dn / 90,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 90], [Dr.ᐃᐃᐃⵠ, 50]],
    w: 1,
    f: jj,
    ᐃⲆΔ: Mn,
    e: 0,
    id: Xa.ⲆᐃᐃᐃⲆ,
    ⵠᐃΔΔ: Dr.ⲆᐃᐃᐃⲆ,
    time: 0.1,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 160], [Dr.ᐃᐃᐃⵠ, 120], [Dr.ⲆΔᐃⲆ, 80], [Dr.ⲆᐃᐃᐃⲆ, 1]],
    w: js,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ΔᐃᐃΔⲆ,
    ⵠᐃΔΔ: Dr.ΔᐃᐃΔⲆ,
    time: Cs / 15,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 80], [Dr.ᐃᐃᐃⵠ, 200], [Dr.ⲆΔᐃⲆ, 150], [Dr.ΔᐃᐃΔⲆ, 1]],
    w: ce,
    f: 0,
    ᐃⲆΔ: 0,
    e: rh,
    id: Xa.ⵠᐃᐃΔᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃᐃΔᐃ,
    time: ik / Tl,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 160], [Dr.ᐃᐃᐃΔ, 60], [Dr.ⲆΔᐃⲆ, 250], [Dr.ⵠᐃᐃΔᐃ, Aj]],
    w: 1,
    f: Dh,
    ᐃⲆΔ: Lg,
    e: 0,
    id: Xa.Ⲇᐃᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.Ⲇᐃᐃⵠᐃ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 160], [Dr.ⵠⲆᐃⲆ, 60], [Dr.ⵠⲆⲆΔ, 250], [Dr.Ⲇᐃᐃⵠᐃ, dn]],
    w: 1,
    f: Kr,
    ᐃⲆΔ: Dh,
    e: 0,
    id: Xa.ⵠΔᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.ⵠΔᐃⵠᐃ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⵠΔᐃⵠᐃ, 1], [Dr.ᐃⲆᐃⵠᐃ, ik], [Dr.ⲆⵠⵠΔⲆ, 1], [Dr.ΔⲆᐃⲆΔ, 10], [Dr.ᐃᐃᐃΔ, 20]],
    w: 1,
    f: Fo,
    ᐃⲆΔ: Kr,
    e: 0,
    id: Xa.ⵠᐃⲆⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠᐃⲆⲆΔ,
    time: ik / 120,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 30], [Dr.ᐃᐃᐃⵠ, 15]],
    w: 1,
    f: 0,
    ᐃⲆΔ: kq,
    e: 0,
    id: Xa.Ⲇᐃᐃⵠⵠ,
    ⵠᐃΔΔ: Dr.Ⲇᐃᐃⵠⵠ,
    time: jh / 5,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.Ⲇᐃᐃⵠⵠ, 1], [Dr.ⲆΔᐃⲆ, 20], [Dr.ᐃᐃᐃⵠ, 30], [Dr.ΔΔⲆⵠ, 40]],
    w: 1,
    f: 0,
    ᐃⲆΔ: tr,
    e: Fj,
    id: Xa.ⲆΔⵠⵠⲆ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠⵠⲆ,
    time: 0.1,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⲆΔⵠⵠⲆ, Cs], [Dr.ⵠⲆⲆΔ, Vq], [Dr.ⲆΔᐃⲆ, 50], [Dr.ᐃᐃᐃⵠ, 80]],
    w: 1,
    f: Lg,
    ᐃⲆΔ: 0,
    e: Mn,
    id: Xa.ΔⵠᐃΔᐃ,
    ⵠᐃΔΔ: Dr.ΔⵠᐃΔᐃ,
    time: jh / 20,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔⵠᐃΔᐃ, 1], [Dr.ⲆΔᐃⲆ, 60], [Dr.ᐃᐃᐃΔ, 30], [Dr.ⵠⲆⲆΔ, 40]],
    w: 1,
    f: ko,
    ᐃⲆΔ: ko,
    e: 0,
    id: Xa.ᐃⵠΔᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃⵠΔᐃⵠ,
    time: 0.025,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 50]],
    w: 1,
    f: 0,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ΔⲆᐃΔᐃ,
    ⵠᐃΔΔ: Dr.ΔⲆᐃΔᐃ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔⲆᐃΔᐃ, 1]],
    w: rh,
    f: 0,
    ᐃⲆΔ: 1,
    e: Dh,
    id: Xa.ΔᐃᐃⲆⲆ,
    ⵠᐃΔΔ: Dr.ΔᐃᐃⲆⲆ,
    time: Ur / 5,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, wa], [Dr.ᐃᐃᐃⵠ, 50]],
    w: Ur,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⲆⵠⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃⲆⵠⲆᐃ,
    time: er / 10,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃⲆⵠⲆᐃ, ce], [Dr.ⲆᐃⵠΔΔⲆⲆ, 1]],
    w: 1,
    f: Lg,
    ᐃⲆΔ: Wh,
    e: Lg,
    id: Xa.ΔΔΔⲆᐃ,
    ⵠᐃΔΔ: Dr.ΔΔΔⲆᐃ,
    time: Aj / 60,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ⲆΔΔⵠⲆ, f], [Dr.ⵠⵠΔⵠΔ, 4], [Dr.ⲆⵠΔΔᐃ, 4]],
    w: 1,
    f: Mn,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ⲆⵠⵠⲆⲆ,
    ⵠᐃΔΔ: Dr.ⲆⵠⵠⲆⲆ,
    time: 1 / 15,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 40]],
    w: 0,
    f: Fj,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⲆⵠⲆⲆ,
    ⵠᐃΔΔ: Dr.ᐃⲆⵠⲆⲆ,
    time: 1 / gs,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃⲆⵠⲆⲆ, er], [Dr.ΔΔⲆⵠ, 60], [Dr.ᐃᐃᐃⵠ, 10]],
    w: 1,
    f: 0,
    ᐃⲆΔ: Wh,
    e: 0,
    id: Xa.ⵠⲆᐃᐃΔ,
    ⵠᐃΔΔ: Dr.ⵠⲆᐃᐃΔ,
    time: 0.1,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 80], [Dr.ⲆΔᐃⲆ, 30], [Dr.ᐃᐃᐃⵠ, 30], [Dr.ⵠⲆᐃᐃΔ, Fo]],
    w: Eg,
    f: Dh,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ΔⲆⲆⵠⲆ,
    ⵠᐃΔΔ: Dr.ΔⲆⲆⵠⲆ,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ,
    time: Fo / Fl
  }, {
    r: [[Dr.ΔΔⲆⵠ, 200], [Dr.ⵠⲆⲆΔ, 40], [Dr.ⲆΔᐃⲆ, 60], [Dr.ΔⲆⲆⵠⲆ, yl]],
    w: 1,
    f: 0,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ΔⵠⲆⵠⵠ,
    ⵠᐃΔΔ: Dr.ΔⵠⲆⵠⵠ,
    time: 0.03333333333333333,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 40], [Dr.ⵠⲆⲆΔ, 80], [Dr.ⲆΔᐃⲆ, 90], [Dr.ΔⵠⲆⵠⵠ, ik]],
    w: 1,
    f: Wh,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⲆᐃᐃΔⲆ,
    ⵠᐃΔΔ: Dr.ⲆᐃᐃΔⲆ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆᐃⲆ, 40], [Dr.ᐃᐃᐃΔ, 80], [Dr.ⵠⲆⲆΔ, 90], [Dr.ⲆᐃᐃΔⲆ, 1]],
    w: 1,
    f: Mn,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ᐃΔⵠᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃΔⵠᐃⵠ,
    time: er / 90,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠᐃⵠⵠΔ, 20], [Dr.ⵠᐃᐃᐃᐃ, Eg], [Dr.ᐃᐃᐃΔ, fh], [Dr.ᐃⲆⲆΔⲆ, 3]],
    w: ce,
    f: Ur,
    ᐃⲆΔ: 1,
    e: 0,
    id: Xa.ⵠⲆᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ⵠⲆᐃⲆᐃ,
    time: Aj / 120,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆᐃⲆᐃ, yl], [Dr.ᐃᐃⵠⵠⲆ, 1], [Dr.ⵠⲆᐃⲆ, or], [Dr.ⲆᐃΔᐃⲆ, kn]],
    w: Br,
    f: 1,
    ᐃⲆΔ: 1,
    e: 0,
    id: Xa.ΔᐃᐃⲆΔ,
    ⵠᐃΔΔ: Dr.ΔᐃᐃⲆΔ,
    time: ik / 200,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃⲆⵠⲆⲆ, Fo], [Dr.ᐃᐃᐃⲆⲆ, 5], [Dr.ⵠⵠΔⵠΔ, 6]],
    w: Br,
    f: 0,
    ᐃⲆΔ: Lg,
    e: 0,
    id: Xa.ⵠⵠⲆⵠΔ,
    ⵠᐃΔΔ: Dr.ⵠⵠⲆⵠΔ,
    time: ce / 30,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 30]],
    w: ko,
    f: 0,
    ᐃⲆΔ: Kr,
    e: Ko,
    id: Xa.ᐃⲆᐃΔⲆ,
    ⵠᐃΔΔ: Dr.ᐃⲆᐃΔⲆ,
    time: 1 / Gl,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 50], [Dr.ᐃᐃᐃⵠ, 25], [Dr.ᐃⲆᐃΔⲆ, 1]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: tr,
    id: Xa.ⵠⲆΔᐃΔ,
    ⵠᐃΔΔ: Dr.ⵠⲆΔᐃΔ,
    time: 1 / zq,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 60], [Dr.ⲆΔᐃⲆ, 40], [Dr.ᐃᐃᐃⵠ, 50], [Dr.ⵠⲆΔᐃΔ, V]],
    w: 1,
    f: jj,
    ᐃⲆΔ: Dh,
    e: 0,
    id: Xa.ⲆΔⵠⲆᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠⲆᐃ,
    time: V / 20,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 40], [Dr.ⲆΔᐃⲆ, 60], [Dr.ᐃᐃᐃⵠ, 80], [Dr.ⲆΔⵠⲆᐃ, 1]],
    w: Br,
    f: rh,
    ᐃⲆΔ: Wh,
    e: 0,
    id: Xa.ΔᐃⲆⵠΔ,
    ⵠᐃΔΔ: Dr.ΔᐃⲆⵠΔ,
    time: 0.03333333333333333,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 60], [Dr.ⲆΔᐃⲆ, or], [Dr.ᐃᐃᐃΔ, 40], [Dr.ΔᐃⲆⵠΔ, Fo]],
    w: Eg,
    f: 0,
    ᐃⲆΔ: jj,
    e: 0,
    id: Xa.ⲆΔⵠΔⵠ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠΔⵠ,
    time: 1 / 60,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 100], [Dr.ᐃᐃᐃΔ, 80], [Dr.ⵠⲆᐃⲆ, 40], [Dr.ⲆΔⵠΔⵠ, yl]],
    w: js,
    f: jj,
    ᐃⲆΔ: Ko,
    e: rh,
    id: Xa.ⵠΔⲆΔᐃ,
    ⵠᐃΔΔ: Dr.ⵠΔⲆΔᐃ,
    time: Eg / 90,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃΔⲆⲆ, 3]],
    w: 0,
    f: Ur,
    ᐃⲆΔ: Wh,
    e: tr,
    id: Xa.ΔⵠᐃᐃΔ,
    ⵠᐃΔΔ: Dr.ΔⵠᐃᐃΔ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ᐃᐃΔⲆΔ, vo]],
    w: 0,
    f: yl,
    ᐃⲆΔ: Dh,
    e: 0,
    id: Xa.ΔΔⲆᐃᐃ,
    ⵠᐃΔΔ: Dr.ΔΔⲆᐃᐃ,
    time: 1 / uh,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠᐃⵠⵠⵠ, 8]],
    w: ko,
    f: 1,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ⲆΔⲆΔᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔⲆΔᐃ,
    time: 1 / _g,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⲆⵠⵠⲆⵠ, ea]],
    w: 0,
    f: 1,
    ᐃⲆΔ: tr,
    e: Dh,
    id: Xa.ⵠΔⵠⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠΔⵠⲆΔ,
    time: wg / Ca,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⲆⵠⲆΔⵠ, lr]],
    w: 0,
    f: 1,
    ᐃⲆΔ: Dh,
    e: jj,
    id: Xa.ⵠᐃⵠⲆᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃⵠⲆᐃ,
    time: 1 / gs,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⲆΔⵠᐃⲆ, 8]],
    w: 0,
    f: 1,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ᐃΔⲆⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃΔⲆⲆᐃ,
    time: ce / 5,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ΔⵠⲆΔᐃ, Sl]],
    w: 0,
    f: 1,
    ᐃⲆΔ: 0,
    e: Ko,
    id: Xa.ΔΔΔᐃⲆ,
    ⵠᐃΔΔ: Dr.ΔΔΔᐃⲆ,
    time: er / Rj,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠᐃⵠⲆⵠ, Jh]],
    w: 0,
    f: Fo,
    ᐃⲆΔ: 0,
    e: Kr,
    id: Xa.ᐃΔⵠᐃᐃ,
    ⵠᐃΔΔ: Dr.ᐃΔⵠᐃᐃ,
    time: ik / 5,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠΔΔⵠⲆ, Ak]],
    w: 0,
    f: Eg,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠⵠⵠⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠⵠⵠⲆΔ,
    time: dn / _g,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ᐃⵠⵠᐃⲆ, Fo]],
    w: yk,
    f: 1,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃΔⵠᐃⲆ,
    ⵠᐃΔΔ: Dr.ᐃΔⵠᐃⲆ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠⵠⵠⲆⲆ, 1]],
    w: Lg,
    f: Br,
    ᐃⲆΔ: Ko,
    e: 0,
    id: Xa.Ⲇⵠᐃⵠⵠ,
    ⵠᐃΔΔ: Dr.Ⲇⵠᐃⵠⵠ,
    time: Aj / 3,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ΔᐃᐃⲆᐃ, Ea]],
    w: 0,
    f: 1,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃᐃⵠⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃᐃⵠⲆᐃ,
    time: 0.3333333333333333,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ΔᐃᐃⲆᐃ, 3], [Dr.ᐃᐃΔⲆⲆ, ce]],
    w: 0,
    f: 1,
    ᐃⲆΔ: 0,
    e: ko,
    id: Xa.ΔᐃᐃΔΔ,
    ⵠᐃΔΔ: Dr.ΔᐃᐃΔΔ,
    time: er / 3,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ΔᐃᐃⲆᐃ, 5], [Dr.ᐃᐃΔⲆⲆ, 2], [Dr.ⲆᐃⵠᐃⲆ, 2]],
    w: 0,
    f: js,
    ᐃⲆΔ: Dh,
    e: Mn,
    id: Xa.ⲆᐃᐃⵠⲆ,
    ⵠᐃΔΔ: Dr.ⲆᐃᐃⵠⲆ,
    time: Fo / Gl,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠⵠΔⵠΔ, 2]],
    w: 1,
    f: Lg,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ⲆᐃΔᐃᐃ,
    ⵠᐃΔΔ: Dr.ⲆᐃΔᐃᐃ,
    time: Cs / Cj,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, vj]],
    w: 1,
    f: jj,
    ᐃⲆΔ: rh,
    e: rh,
    id: Xa.ᐃⲆⲆⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃⲆⲆⲆᐃ,
    time: 1 / gs,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⲆⲆⲆᐃ, 1], [Dr.ᐃᐃᐃⵠ, bh]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ⲆⲆΔⵠⵠ,
    ⵠᐃΔΔ: Dr.ⲆⲆΔⵠⵠ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆΔⵠⵠ, 1], [Dr.ⲆΔᐃⲆ, 14]],
    w: Ur,
    f: tr,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⵠⵠΔⵠ,
    ⵠᐃΔΔ: Dr.ᐃⵠⵠΔⵠ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⵠⵠΔⵠ, Ur], [Dr.ⵠⲆⲆΔ, oo]],
    w: 1,
    f: yk,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ⲆⲆᐃⲆΔ,
    ⵠᐃΔΔ: Dr.ⲆⲆᐃⲆΔ,
    time: 1 / U,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆᐃⲆΔ, 1], [Dr.ᐃᐃᐃΔ, lr]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ΔⲆᐃⲆⵠ,
    ⵠᐃΔΔ: Dr.ΔⲆᐃⲆⵠ,
    time: er / Th,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔⲆᐃⲆⵠ, ik], [Dr.ⵠⲆᐃⲆ, 5]],
    w: Br,
    f: kq,
    ᐃⲆΔ: Ko,
    e: 0,
    id: Xa.ⲆⲆᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ⲆⲆᐃⲆᐃ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 30]],
    w: 1,
    f: kq,
    ᐃⲆΔ: 0,
    e: Mn,
    id: Xa.ⵠⵠΔⲆⲆ,
    ⵠᐃΔΔ: Dr.ⵠⵠΔⲆⲆ,
    time: V / xo,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⵠⵠΔⲆⲆ, V], [Dr.ᐃᐃᐃⵠ, 27]],
    w: er,
    f: 0,
    ᐃⲆΔ: rh,
    e: kq,
    id: Xa.ΔΔΔΔⲆ,
    ⵠᐃΔΔ: Dr.ΔΔΔΔⲆ,
    time: 1 / Oi,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔΔΔⲆ, wg], [Dr.ⲆΔᐃⲆ, 24]],
    w: 1,
    f: kq,
    ᐃⲆΔ: 0,
    e: Ko,
    id: Xa.ᐃᐃⲆᐃⲆ,
    ⵠᐃΔΔ: Dr.ᐃᐃⲆᐃⲆ,
    time: 1 / fg,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃᐃⲆᐃⲆ, js], [Dr.ⵠⲆⲆΔ, 21]],
    w: 1,
    f: 0,
    ᐃⲆΔ: Dh,
    e: Ol,
    id: Xa.ᐃⵠᐃⲆΔ,
    ⵠᐃΔΔ: Dr.ᐃⵠᐃⲆΔ,
    time: 0.125,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⵠᐃⲆΔ, 1], [Dr.ᐃᐃᐃΔ, 18]],
    w: Eg,
    f: Kr,
    ᐃⲆΔ: Lg,
    e: 0,
    id: Xa.ΔΔⵠᐃⲆ,
    ⵠᐃΔΔ: Dr.ΔΔⵠᐃⲆ,
    time: 1 / Sl,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔⵠᐃⲆ, 1], [Dr.ⵠⲆᐃⲆ, 15]],
    w: wg,
    f: jj,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⲆⲆΔᐃⲆ,
    ⵠᐃΔΔ: Dr.ⲆⲆΔᐃⲆ,
    time: 0.125,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⲆⲆⲆᐃ, 1], [Dr.ΔΔⲆⵠ, 40], [Dr.ᐃᐃᐃⵠ, 30]],
    w: Br,
    f: 0,
    ᐃⲆΔ: Lg,
    e: Ko,
    id: Xa.ᐃΔⲆᐃᐃ,
    ⵠᐃΔΔ: Dr.ᐃΔⲆᐃᐃ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆΔⵠⵠ, 1], [Dr.ᐃᐃᐃⵠ, 70]],
    w: Br,
    f: 0,
    ᐃⲆΔ: tr,
    e: ko,
    id: Xa.Ⲇᐃⵠⵠⵠ,
    ⵠᐃΔΔ: Dr.Ⲇᐃⵠⵠⵠ,
    time: yl / 20,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⵠⵠΔⵠ, ik], [Dr.ⲆΔᐃⲆ, 40], [Dr.ᐃᐃᐃⵠ, 30]],
    w: Eg,
    f: ko,
    ᐃⲆΔ: Fj,
    e: Fj,
    id: Xa.ⲆΔⲆᐃᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔⲆᐃᐃ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆᐃⲆΔ, 1], [Dr.ⵠⲆⲆΔ, 40], [Dr.ᐃᐃᐃⵠ, 30]],
    w: 1,
    f: jj,
    ᐃⲆΔ: jj,
    e: 0,
    id: Xa.ᐃᐃᐃΔⵠ,
    ⵠᐃΔΔ: Dr.ᐃᐃᐃΔⵠ,
    time: 1 / Gh,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔⲆᐃⲆⵠ, Aj], [Dr.ᐃᐃᐃΔ, 40], [Dr.ᐃᐃᐃⵠ, 30]],
    w: Fo,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃᐃᐃᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃᐃᐃᐃⵠ,
    time: 1 / Wr,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆᐃⲆᐃ, 1], [Dr.ⵠⲆᐃⲆ, 40], [Dr.ⲆΔᐃⲆ, 30]],
    w: 1,
    f: 0,
    ᐃⲆΔ: ko,
    e: 0,
    id: Xa.ᐃᐃⵠΔⵠ,
    ⵠᐃΔΔ: Dr.ᐃᐃⵠΔⵠ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⵠⵠΔⲆⲆ, 1], [Dr.ΔΔⲆⵠ, 80], [Dr.ᐃᐃᐃⵠ, 60]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: Fj,
    id: Xa.ᐃⵠᐃΔⲆ,
    ⵠᐃΔΔ: Dr.ᐃⵠᐃΔⲆ,
    time: ik / 20,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔΔΔⲆ, yl], [Dr.ᐃᐃᐃⵠ, 140]],
    w: 1,
    f: Dh,
    ᐃⲆΔ: Fj,
    e: 0,
    id: Xa.ᐃⵠⲆⵠⵠ,
    ⵠᐃΔΔ: Dr.ᐃⵠⲆⵠⵠ,
    time: 1 / Gh,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃᐃⲆᐃⲆ, 1], [Dr.ⲆΔᐃⲆ, 80], [Dr.ᐃᐃᐃⵠ, 60]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: yk,
    id: Xa.ⵠΔⲆⵠᐃ,
    ⵠᐃΔΔ: Dr.ⵠΔⲆⵠᐃ,
    time: 1 / Mg,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ᐃⵠᐃⲆΔ, Br], [Dr.ⵠⲆⲆΔ, 80], [Dr.ᐃᐃᐃⵠ, 60]],
    w: js,
    f: ko,
    ᐃⲆΔ: Kr,
    e: Ko,
    id: Xa.ΔⵠⲆⵠΔ,
    ⵠᐃΔΔ: Dr.ΔⵠⲆⵠΔ,
    time: er / Fl,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔⵠᐃⲆ, Ur], [Dr.ᐃᐃᐃΔ, 80], [Dr.ᐃᐃᐃⵠ, 60]],
    w: 1,
    f: Wh,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ΔⵠⲆⵠⲆ,
    ⵠᐃΔΔ: Dr.ΔⵠⲆⵠⲆ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ⲆⲆΔᐃⲆ, Cs], [Dr.ⵠⲆᐃⲆ, 80], [Dr.ⲆΔᐃⲆ, 60]],
    w: Fo,
    f: tr,
    ᐃⲆΔ: 0,
    e: Fj,
    id: Xa.ⲆΔⵠⵠᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠⵠᐃ,
    time: 1 / Wr,
    ⵠᐃⲆ: Gr.ΔᐃΔΔΔ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 25], [Dr.ⲆΔᐃⲆ, Wq]],
    w: yl,
    f: ko,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⲆΔΔⲆⵠ,
    ⵠᐃΔΔ: Dr.ⲆΔΔⲆⵠ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔΔⵠⲆ, Fo], [Dr.ΔⵠⲆᐃΔ, jh], [Dr.ⵠⵠΔⵠΔ, 2]],
    w: 1,
    f: rh,
    ᐃⲆΔ: ko,
    e: 0,
    id: Xa.ᐃⵠⵠΔᐃ,
    ⵠᐃΔΔ: Dr.ᐃⵠⵠΔᐃ,
    time: 1 / Ca,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆΔΔⵠⲆ, mh], [Dr.ⵠⲆⵠᐃᐃ, ns], [Dr.ⵠᐃⵠⵠΔ, Ca], [Dr.ΔⵠⲆᐃΔ, 5]],
    w: 1,
    f: 0,
    ᐃⲆΔ: Ko,
    e: 0,
    id: Xa.ΔⵠⵠᐃΔ,
    ⵠᐃΔΔ: Dr.ΔⵠⵠᐃΔ,
    time: V / 30,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⲆⲆᐃΔⲆⲆ, Cs], [Dr.Δᐃⵠᐃᐃ, zn], [Dr.ⲆⲆⲆΔⵠ, fg], [Dr.ⵠⲆⵠᐃᐃ, 8], [Dr.ⵠⵠΔⵠΔ, bg]],
    w: dn,
    f: 0,
    ᐃⲆΔ: Dh,
    e: rh,
    id: Xa.ⲆⵠⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ⲆⵠⲆⲆⲆ,
    time: Fo / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔⵠⲆᐃΔ, 1], [Dr.ⵠⵠΔⵠΔ, 2]],
    w: 1,
    f: Ko,
    ᐃⲆΔ: 0,
    e: Ko,
    id: Xa.ᐃⵠⵠⵠᐃ,
    ⵠᐃΔΔ: Dr.ᐃⵠⵠⵠᐃ,
    time: V / 5,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃⵠⵠⵠᐃ, 1], [Dr.ⲆⵠΔΔᐃ, Rj], [Dr.ⵠⵠΔⵠΔ, qo]],
    w: Aj,
    f: 0,
    ᐃⲆΔ: Fj,
    e: Fj,
    id: Xa.ⵠΔᐃⵠⵠ,
    ⵠᐃΔΔ: Dr.ⵠΔᐃⵠⵠ,
    time: 1 / ps,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠΔᐃⵠⵠ, Br], [Dr.ⵠΔΔᐃᐃ, U], [Dr.ⵠᐃⵠⵠΔ, In]],
    w: 1,
    f: Wh,
    ᐃⲆΔ: Fj,
    e: Ol,
    id: Xa.ΔΔᐃⵠⵠ,
    ⵠᐃΔΔ: Dr.ΔΔᐃⵠⵠ,
    time: Ur / 30,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔΔᐃⵠⵠ, Br], [Dr.ⵠΔΔᐃᐃ, gs], [Dr.ᐃⲆⵠⵠᐃ, eg], [Dr.ⵠᐃⵠⵠΔ, 4]],
    w: 1,
    f: kq,
    ᐃⲆΔ: ko,
    e: 0,
    id: Xa.ⵠⲆΔΔⲆ,
    ⵠᐃΔΔ: Dr.ⵠⲆΔΔⲆ,
    time: 0.02,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 50]],
    w: ko,
    f: 0,
    ᐃⲆΔ: Lg,
    e: 0,
    id: Xa.ᐃΔᐃΔΔ,
    ⵠᐃΔΔ: Dr.ᐃΔᐃΔΔ,
    time: 0.2,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 75], [Dr.ΔΔⲆⵠ, 75], [Dr.ᐃΔᐃΔΔ, Br]],
    w: wg,
    f: 0,
    ᐃⲆΔ: rh,
    e: 0,
    id: Xa.ΔΔᐃⲆΔ,
    ⵠᐃΔΔ: Dr.ΔΔᐃⲆΔ,
    time: 1 / lj,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 90], [Dr.ΔΔⲆⵠ, 90], [Dr.ⲆΔᐃⲆ, 90], [Dr.ΔΔᐃⲆΔ, 1]],
    w: dn,
    f: Kr,
    ᐃⲆΔ: Fj,
    e: kq,
    id: Xa.ⲆⲆⲆᐃⲆ,
    ⵠᐃΔΔ: Dr.ⲆⲆⲆᐃⲆ,
    time: 1 / ql,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, A], [Dr.ⲆΔᐃⲆ, Dq], [Dr.ⵠⲆⲆΔ, Er], [Dr.ⲆⲆⲆᐃⲆ, ik]],
    w: Br,
    f: Dh,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ᐃⵠᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃⵠᐃⲆᐃ,
    time: yl / 30,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 80], [Dr.ⲆΔᐃⲆ, 150], [Dr.ⵠⲆⲆΔ, 120], [Dr.ᐃⵠᐃⲆᐃ, 1]],
    w: ik,
    f: Dh,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ᐃⵠᐃᐃΔ,
    ⵠᐃΔΔ: Dr.ᐃⵠᐃᐃΔ,
    time: ce / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⲆᐃⲆ, 80], [Dr.ⵠⲆⲆΔ, 150], [Dr.ᐃᐃᐃΔ, 120], [Dr.ᐃⵠᐃᐃΔ, 1]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ⲆΔⲆⲆᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔⲆⲆᐃ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔⲆᐃⲆΔ, yh], [Dr.ⵠⲆⲆΔ, 40], [Dr.ⵠⵠΔⵠΔ, 4]],
    w: jh,
    f: 0,
    ᐃⲆΔ: Mn,
    e: 0,
    id: Xa.ⵠΔⲆⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠΔⲆⲆΔ,
    time: 0.05,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠΔⲆⲆΔ, er], [Dr.ⲆΔᐃⲆ, 80], [Dr.ⲆⵠⵠΔⲆ, wg], [Dr.ᐃᐃᐃΔ, 20]],
    w: ik,
    f: 0,
    ᐃⲆΔ: 0,
    e: Wh,
    id: Xa.ⵠⲆᐃᐃⵠ,
    ⵠᐃΔΔ: Dr.ⵠⲆᐃᐃⵠ,
    time: js / 90,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆⵠⲆⵠᐃ, 5], [Dr.ⵠⲆⲆΔ, 50], [Dr.ⵠᐃⵠⵠΔ, 5]],
    w: V,
    f: 1,
    ᐃⲆΔ: jj,
    e: yk,
    id: Xa.ᐃⵠΔΔᐃ,
    ⵠᐃΔΔ: Dr.ᐃⵠΔΔᐃ,
    time: 1 / ws,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃⵠΔΔᐃ, 1], [Dr.ⲆⵠⲆⵠᐃ, hl], [Dr.ᐃᐃᐃΔ, 50]],
    w: 1,
    f: Fo,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠⲆⵠᐃⲆ,
    ⵠᐃΔΔ: Dr.ⵠⲆⵠᐃⲆ,
    time: Cs / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⲆⵠᐃⲆ, 1], [Dr.ⲆⵠⲆⵠᐃ, 15], [Dr.ᐃᐃᐃΔ, 50], [Dr.ⵠⲆᐃⲆ, 50]],
    w: Cs,
    f: 1,
    ᐃⲆΔ: rh,
    e: 0,
    id: Xa.ⵠⲆΔⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠⲆΔⲆΔ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⵠΔⵠΔ, 4], [Dr.ⵠⲆΔⵠᐃ, Ok]],
    w: Br,
    f: 0,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ⲆᐃⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ⲆᐃⲆⲆⲆ,
    time: Br / 15,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆᐃⲆⲆⲆ, 1], [Dr.ⵠⵠΔⵠΔ, 6], [Dr.ⵠⲆΔⵠᐃ, 4], [Dr.ⲆⲆⲆΔⵠ, 12], [Dr.ⵠⲆⵠᐃᐃ, f]],
    w: yl,
    f: 0,
    ᐃⲆΔ: 0,
    e: Ko,
    id: Xa.ⵠᐃⵠⲆⲆ,
    ⵠᐃΔΔ: Dr.ⵠᐃⵠⲆⲆ,
    time: 0.006666666666666667,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⵠΔⵠΔ, 6], [Dr.ⲆⵠΔΔᐃ, 5]],
    w: 1,
    f: Fj,
    ᐃⲆΔ: Fj,
    e: yk,
    id: Xa.ᐃⵠΔⵠ,
    ⵠᐃΔΔ: Dr.ᐃⵠΔⵠ,
    time: 0.06666666666666667,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 20]],
    w: jj,
    f: dn,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ⲆΔΔⵠⲆ,
    ⵠᐃΔΔ: Dr.ⲆΔΔⵠⲆ,
    time: 1 / Mo,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 1], [Dr.ⵠⵠΔⵠΔ, Eg]],
    w: 1,
    f: rh,
    ᐃⲆΔ: 0,
    e: rh,
    id: Xa.ⵠᐃⵠⵠΔ,
    ⵠᐃΔΔ: Dr.ⵠᐃⵠⵠΔ,
    time: Aj / 3,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔᐃⲆ, eg]],
    w: ce,
    f: 0,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ΔⲆⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ΔⲆⲆⲆⲆ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔᐃⲆ, 250]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ⵠⲆⲆⵠΔ,
    ⵠᐃΔΔ: Dr.ⵠⲆⲆⵠΔ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 50]],
    w: yl,
    f: jj,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠⵠⲆΔΔ,
    ⵠᐃΔΔ: Dr.ⵠⵠⲆΔΔ,
    time: wg / rk,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 15]],
    w: V,
    f: Dh,
    ᐃⲆΔ: Wh,
    e: kq,
    id: Xa.ᐃⲆΔⲆⲆ,
    ⵠᐃΔΔ: Dr.ᐃⲆΔⲆⲆ,
    time: er / 5,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 30]],
    w: V,
    f: 0,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ⲆΔⵠⲆΔ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠⲆΔ,
    time: 1 / Oq,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 120]],
    w: dn,
    f: tr,
    ᐃⲆΔ: Dh,
    e: Fj,
    id: Xa.ᐃΔΔᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃΔΔᐃⵠ,
    time: ik / 15,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, da], [Dr.ⵠΔⲆⲆᐃ, Jr]],
    w: 1,
    f: Mn,
    ᐃⲆΔ: Fj,
    e: Ko,
    id: Xa.ΔⵠΔΔⲆ,
    ⵠᐃΔΔ: Dr.ΔⵠΔΔⲆ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔᐃⵠⵠ, 25]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠᐃⲆⵠⵠ,
    ⵠᐃΔΔ: Dr.ⵠᐃⲆⵠⵠ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠᐃⲆⵠⵠ, 1]],
    w: 0,
    f: 0,
    ᐃⲆΔ: 1,
    e: 0,
    id: Xa.ᐃⲆᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.ᐃⲆᐃⵠᐃ,
    time: 1 / U,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⲆᐃⵠᐃⲆ, Mh], [Dr.ⵠᐃⲆⵠⵠ, 1]],
    w: 0,
    f: 1,
    ᐃⲆΔ: 0,
    e: rh,
    id: Xa.ᐃᐃⲆⵠⲆⲆΔ,
    ⵠᐃΔΔ: Dr.ᐃⲆᐃⵠᐃ,
    time: V / 10,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠᐃⲆⵠⵠ, 1]],
    w: 0,
    f: 0,
    ᐃⲆΔ: kq,
    e: ce,
    id: Xa.ΔΔᐃᐃΔᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃⲆᐃⵠᐃ,
    time: 0.3333333333333333,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 60], [Dr.ᐃᐃᐃⵠ, Wr], [Dr.ⵠⵠΔⵠΔ, pa]],
    w: 1,
    f: rh,
    ᐃⲆΔ: Fj,
    e: 0,
    id: Xa.ᐃⲆΔⵠⵠ,
    ⵠᐃΔΔ: Dr.ᐃⲆΔⵠⵠ,
    time: Aj / 10,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 40], [Dr.ᐃᐃᐃⵠ, 45]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⲆΔᐃⲆⲆ,
    ⵠᐃΔΔ: Dr.ⲆΔᐃⲆⲆ,
    time: 1 / Wr,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔᐃⲆⲆ, 1], [Dr.ΔⵠΔⲆΔ, 40], [Dr.ᐃᐃᐃᐃᐃ, 1]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 1,
    e: 0,
    id: Xa.ᐃᐃᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.ᐃᐃᐃⵠᐃ,
    time: Br / 200,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 50], [Dr.ᐃᐃᐃⵠ, 100]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ⵠⵠⲆᐃᐃ,
    ⵠᐃΔΔ: Dr.ⵠⵠⲆᐃᐃ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 60], [Dr.ⲆΔᐃⲆ, 120]],
    w: 1,
    f: Kr,
    ᐃⲆΔ: 0,
    e: Wh,
    id: Xa.ᐃⲆΔᐃΔ,
    ⵠᐃΔΔ: Dr.ᐃⲆΔᐃΔ,
    time: er / 90,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⲆΔᐃⲆ, 70], [Dr.ⵠⲆⲆΔ, 140]],
    w: Cs,
    f: Fj,
    ᐃⲆΔ: 0,
    e: rh,
    id: Xa.ⵠⲆⲆᐃᐃ,
    ⵠᐃΔΔ: Dr.ⵠⲆⲆᐃᐃ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 80], [Dr.ᐃᐃᐃΔ, 160]],
    w: 1,
    f: Dh,
    ᐃⲆΔ: Kr,
    e: 0,
    id: Xa.ΔᐃΔⵠᐃ,
    ⵠᐃΔΔ: Dr.ΔᐃΔⵠᐃ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 90], [Dr.ⵠⲆᐃⲆ, 180]],
    w: dn,
    f: jj,
    ᐃⲆΔ: tr,
    e: 0,
    id: Xa.ⵠΔΔᐃⲆ,
    ⵠᐃΔΔ: Dr.ⵠΔΔᐃⲆ,
    time: ce / 90,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 70]],
    w: Fo,
    f: 0,
    ᐃⲆΔ: 0,
    e: tr,
    id: Xa.ⵠⲆⲆⵠⲆ,
    ⵠᐃΔΔ: Dr.ⵠⲆⲆⵠⲆ,
    time: 1 / Hr,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 70], [Dr.ΔΔⲆⵠ, 50]],
    w: jh,
    f: 0,
    ᐃⲆΔ: Mn,
    e: 0,
    id: Xa.ⲆΔⵠⵠΔ,
    ⵠᐃΔΔ: Dr.ⲆΔⵠⵠΔ,
    time: wg / Hr,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 40], [Dr.ᐃᐃᐃⵠ, 40]],
    w: dn,
    f: 0,
    ᐃⲆΔ: Mn,
    e: 0,
    id: Xa.ⵠⲆⵠⵠᐃ,
    ⵠᐃΔΔ: Dr.ⵠⲆⵠⵠᐃ,
    time: Aj / 10,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ᐃᐃⵠⲆᐃ, dn], [Dr.ᐃΔⵠᐃⲆ, Ur]],
    w: 0,
    f: jj,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⵠⲆⵠΔ,
    ⵠᐃΔΔ: Dr.ᐃⵠⲆⵠΔ,
    time: Ur / jg,
    ⵠᐃⲆ: Gr.ⲆⵠⲆⵠⵠ
  }, {
    r: [[Dr.ⵠᐃⵠⵠΔ, 30], [Dr.ⵠⵠᐃⵠΔ, 1], [Dr.ᐃᐃᐃΔ, 150], [Dr.ᐃⲆⲆΔⲆ, Kk]],
    w: 1,
    f: dn,
    ᐃⲆΔ: Ur,
    e: kq,
    id: Xa.ⵠΔⵠᐃⵠ,
    ⵠᐃΔΔ: Dr.ⵠΔⵠᐃⵠ,
    time: jh / 120,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠΔⵠᐃⵠ, Cs], [Dr.ⲆᐃⵠΔᐃ, er], [Dr.ⵠⲆᐃⲆ, 150], [Dr.ⲆᐃΔᐃⲆ, 2]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 1,
    e: rh,
    id: Xa.ⵠⵠⵠᐃᐃ,
    ⵠᐃΔΔ: Dr.ⵠⵠⵠᐃᐃ,
    time: 0.005555555555555556,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆⲆⲆᐃⲆ, 1], [Dr.ᐃᐃᐃⲆⲆ, 10], [Dr.ᐃⲆΔⵠΔ, 10], [Dr.ⵠⵠΔⵠΔ, 10]],
    w: wg,
    f: 0,
    ᐃⲆΔ: kq,
    e: kq,
    id: Xa.ⲆᐃᐃΔᐃ,
    ⵠᐃΔΔ: Dr.ⲆᐃᐃΔᐃ,
    time: Ur / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠᐃⵠⵠΔ, 20], [Dr.ⵠᐃᐃᐃᐃ, 1], [Dr.ᐃᐃᐃΔ, 150], [Dr.ᐃⲆⲆΔⲆ, nh]],
    w: 1,
    f: 1,
    ᐃⲆΔ: yl,
    e: 0,
    id: Xa.ⵠΔΔⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠΔΔⲆΔ,
    time: 0.008333333333333333,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠΔΔⲆΔ, 1], [Dr.ᐃᐃⵠⵠⲆ, jh], [Dr.ⵠⲆᐃⲆ, 150], [Dr.ⲆᐃΔᐃⲆ, Ok]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 1,
    e: tr,
    id: Xa.ⵠⲆⲆⵠⵠ,
    ⵠᐃΔΔ: Dr.ⵠⲆⲆⵠⵠ,
    time: 0.005555555555555556,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, A], [Dr.ⵠⵠΔⵠΔ, Rh]],
    w: 1,
    f: ko,
    ᐃⲆΔ: Kr,
    e: 0,
    id: Xa.ⵠᐃᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃᐃⲆᐃ,
    time: 1 / Tl,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 30]],
    w: dn,
    f: 0,
    ᐃⲆΔ: Lg,
    e: Wh,
    id: Xa.ⵠⲆⵠΔᐃ,
    ⵠᐃΔΔ: Dr.ⵠⲆⵠΔᐃ,
    time: 0.2,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 200], [Dr.ⵠⵠΔⵠΔ, 8], [Dr.ⵠⲆⵠᐃᐃ, 4], [Dr.ⵠᐃᐃⲆᐃ, 1]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃᐃᐃΔⲆ,
    ⵠᐃΔΔ: Dr.ᐃᐃᐃΔⲆ,
    time: jh / 25,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 20], [Dr.Δᐃⵠᐃᐃ, jh]],
    w: V,
    f: 0,
    ᐃⲆΔ: 0,
    e: tr,
    id: Xa.ⲆΔᐃⵠⲆ,
    ⵠᐃΔΔ: Dr.ⲆΔᐃⵠⲆ,
    time: yl / 5,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⲆΔᐃⲆ, 200], [Dr.ⵠⵠΔⵠΔ, Ah], [Dr.Δᐃⵠᐃᐃ, oj], [Dr.ⵠⲆⵠᐃᐃ, f], [Dr.ᐃᐃᐃΔⲆ, 1]],
    w: er,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃΔΔⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃΔΔⲆᐃ,
    time: wg / 30,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⲆΔᐃⲆ, Mh], [Dr.ⵠⲆⵠᐃᐃ, Eg]],
    w: Aj,
    f: 0,
    ᐃⲆΔ: ko,
    e: rh,
    id: Xa.ΔⲆᐃᐃᐃ,
    ⵠᐃΔΔ: Dr.ΔⲆᐃᐃᐃ,
    time: Cs / hl,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, 200], [Dr.ⵠᐃⵠⵠΔ, 10], [Dr.Δᐃⵠᐃᐃ, 8], [Dr.ⵠⲆⵠᐃᐃ, S], [Dr.ᐃΔΔⲆᐃ, ce]],
    w: 1,
    f: 0,
    ᐃⲆΔ: Ol,
    e: Mn,
    id: Xa.ᐃΔⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ᐃΔⲆⲆⲆ,
    time: er / 35,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆΔ, Bq], [Dr.ⵠⲆⵠᐃᐃ, Cs]],
    w: 1,
    f: 0,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ΔᐃⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ΔᐃⲆⲆⲆ,
    time: ce / zq,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, 200], [Dr.ⵠᐃⵠⵠΔ, 10], [Dr.ⵠⲆⵠᐃᐃ, fg], [Dr.ⲆⲆⲆΔⵠ, X], [Dr.ᐃΔⲆⲆⲆ, dn]],
    w: 1,
    f: 0,
    ᐃⲆΔ: jj,
    e: Dh,
    id: Xa.ⵠᐃᐃᐃΔ,
    ⵠᐃΔΔ: Dr.ⵠᐃᐃᐃΔ,
    time: js / 40,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃΔ, Ke], [Dr.ⲆⲆⲆΔⵠ, Eg]],
    w: 1,
    f: 0,
    ᐃⲆΔ: rh,
    e: tr,
    id: Xa.Ⲇⵠᐃᐃⵠ,
    ⵠᐃΔΔ: Dr.Ⲇⵠᐃᐃⵠ,
    time: 1 / Ne,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆᐃⲆ, 200], [Dr.ⵠᐃⵠⵠΔ, oa], [Dr.ⲆⵠⵠΔⲆ, 1], [Dr.ⵠᐃᐃᐃΔ, 1]],
    w: V,
    f: Wh,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ΔⵠⲆᐃⲆ,
    ⵠᐃΔΔ: Dr.ΔⵠⲆᐃⲆ,
    time: ik / 45,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆᐃⲆ, 10], [Dr.ⲆⲆⲆΔⵠ, 1], [Dr.ⲆⵠⲆⵠᐃ, 1]],
    w: ce,
    f: 0,
    ᐃⲆΔ: 0,
    e: ko,
    id: Xa.ⲆΔⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ⲆΔⲆⲆⲆ,
    time: 1 / sl,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔⵠΔⲆΔ, 200], [Dr.ⵠᐃⵠⵠΔ, oa], [Dr.ⵠᐃᐃᐃᐃ, 1], [Dr.ΔⵠⲆᐃⲆ, yl]],
    w: 1,
    f: Kr,
    ᐃⲆΔ: Dh,
    e: 0,
    id: Xa.ΔᐃΔⲆⲆ,
    ⵠᐃΔΔ: Dr.ΔᐃΔⲆⲆ,
    time: Aj / 50,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔⵠΔⲆΔ, Hr], [Dr.ᐃᐃᐃᐃᐃ, 1]],
    w: yl,
    f: Fj,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ΔΔΔᐃⵠ,
    ⵠᐃΔΔ: Dr.ΔΔΔᐃⵠ,
    time: 0.05,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 100]],
    w: 1,
    f: Lg,
    ᐃⲆΔ: Dh,
    e: 0,
    id: Xa.ⵠⵠΔΔΔ,
    ⵠᐃΔΔ: Dr.ⵠⵠΔΔΔ,
    time: 0.04,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⵠΔΔΔ, er], [Dr.ᐃᐃᐃⵠ, 100], [Dr.ΔΔⲆⵠ, 50]],
    w: ik,
    f: jj,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃⵠⵠᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃⵠⵠᐃⵠ,
    time: 0.025,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃⵠⵠᐃⵠ, 1], [Dr.ⲆΔᐃⲆ, 50], [Dr.ᐃᐃᐃⵠ, 50], [Dr.ΔΔⲆⵠ, 50]],
    w: V,
    f: 0,
    ᐃⲆΔ: ko,
    e: ko,
    id: Xa.ⵠⲆⲆⲆΔ,
    ⵠᐃΔΔ: Dr.ⵠⲆⲆⲆΔ,
    time: 0.02,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠⲆⲆⲆΔ, 1], [Dr.ⵠⲆⲆΔ, 50], [Dr.ⲆΔᐃⲆ, 50], [Dr.ᐃᐃᐃⵠ, 50]],
    w: dn,
    f: tr,
    ᐃⲆΔ: 0,
    e: jj,
    id: Xa.ⲆᐃΔΔᐃ,
    ⵠᐃΔΔ: Dr.ⲆᐃΔΔᐃ,
    time: Fo / 70,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⲆᐃΔΔᐃ, Eg], [Dr.ᐃᐃᐃΔ, 50], [Dr.ⵠⲆⲆΔ, 50], [Dr.ⲆΔᐃⲆ, 50]],
    w: 1,
    f: ko,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ⵠᐃⲆⲆᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃⲆⲆᐃ,
    time: yl / 90,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠᐃⲆⲆᐃ, 1], [Dr.ⵠⲆᐃⲆ, 50], [Dr.ᐃᐃᐃΔ, 50], [Dr.ⵠⲆⲆΔ, 50]],
    w: 1,
    f: 0,
    ᐃⲆΔ: ko,
    e: Wh,
    id: Xa.ᐃⵠᐃⲆⲆ,
    ⵠᐃΔΔ: Dr.ᐃⵠᐃⲆⲆ,
    time: 1 / 120,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃⲆⵠᐃⵠ, er], [Dr.ⲆΔᐃⲆ, 200]],
    w: Cs,
    f: V,
    ᐃⲆΔ: 1,
    e: 0,
    id: Xa.ΔⵠᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ΔⵠᐃⲆᐃ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔⵠΔᐃΔ, 1], [Dr.ⲆΔᐃⲆ, 200]],
    w: 1,
    f: 1,
    ᐃⲆΔ: Aj,
    e: 0,
    id: Xa.ΔⲆΔᐃⵠ,
    ⵠᐃΔΔ: Dr.ΔⲆΔᐃⵠ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆⲆΔΔⵠ, 1], [Dr.ⲆΔᐃⲆ, 200], [Dr.ᐃⲆⲆΔⲆ, Cs]],
    w: jh,
    f: 1,
    ᐃⲆΔ: 1,
    e: yk,
    id: Xa.ⵠⵠΔΔⵠ,
    ⵠᐃΔΔ: Dr.ⵠⵠΔΔⵠ,
    time: 0.016666666666666666,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⲆⵠΔΔᐃ, rk], [Dr.ΔⵠⲆᐃΔ, gs], [Dr.ⵠⵠΔⵠΔ, 6]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: 0,
    id: Xa.ᐃᐃᐃⲆᐃ,
    ⵠᐃΔΔ: Dr.ᐃᐃᐃⲆᐃ,
    time: 0.1,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ΔⵠⲆᐃΔ, Ea], [Dr.ⵠⵠΔⵠΔ, 2]],
    w: 1,
    f: Ko,
    ᐃⲆΔ: Ol,
    e: Wh,
    id: Xa.ᐃΔᐃⵠΔ,
    ⵠᐃΔΔ: Dr.ᐃΔᐃⵠΔ,
    time: ce / Bq,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃᐃᐃⲆᐃ, dn], [Dr.ⵠᐃᐃᐃⲆ, 1], [Dr.ⵠΔΔᐃᐃ, Nk], [Dr.ⵠᐃⵠⵠΔ, mh], [Dr.ⵠⲆⵠᐃᐃ, xo]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: Lg,
    id: Xa.ᐃΔᐃⵠⵠ,
    ⵠᐃΔΔ: Dr.ᐃΔᐃⵠⵠ,
    time: Br / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ᐃΔᐃⵠΔ, 1], [Dr.ΔᐃⵠᐃⲆ, Br], [Dr.ⵠΔΔᐃᐃ, 10], [Dr.ⵠᐃⵠⵠΔ, 5], [Dr.ⵠⲆⵠᐃᐃ, 8]],
    w: 1,
    f: kq,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ⵠⵠⲆⲆⵠ,
    ⵠᐃΔΔ: Dr.ⵠⵠⲆⲆⵠ,
    time: ce / 60,
    ⵠᐃⲆ: Gr.Ⲇⵠⵠᐃᐃ
  }, {
    r: [[Dr.ⵠⵠᐃᐃⵠ, yl]],
    w: 0,
    f: 0,
    ᐃⲆΔ: jh,
    e: 0,
    id: Xa.Ⲇᐃⵠⵠᐃ,
    ⵠᐃΔΔ: Dr.Ⲇᐃⵠⵠᐃ,
    time: 1 / Th,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 20], [Dr.ⵠⵠΔⵠΔ, wg]],
    w: wg,
    f: Wh,
    ᐃⲆΔ: ko,
    e: yk,
    id: Xa.ⵠⵠᐃᐃⵠ,
    ⵠᐃΔΔ: Dr.ⵠⵠᐃᐃⵠ,
    time: V / pl,
    ⵠᐃⲆ: Gr.ⵠΔΔᐃⵠ
  }, {
    r: [[Dr.ᐃᐃᐃⵠ, 100], [Dr.ⵠΔⲆⲆᐃ, 30]],
    w: 1,
    f: 1,
    ᐃⲆΔ: 0,
    e: tr,
    id: Xa.ᐃΔΔΔΔ,
    ⵠᐃΔΔ: Dr.ᐃΔΔΔΔ,
    time: wg / Fn,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, Mh]],
    w: 1,
    f: tr,
    ᐃⲆΔ: rh,
    e: Dh,
    id: Xa.ᐃᐃⵠΔΔ,
    ⵠᐃΔΔ: Dr.ᐃᐃⵠΔΔ,
    time: Fo / 5,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 100], [Dr.ᐃᐃᐃⵠ, 50], [Dr.ΔⵠⲆᐃΔ, 5], [Dr.ⲆⵠΔΔᐃ, Ca], [Dr.ⵠⵠΔⵠΔ, 6]],
    w: er,
    f: 0,
    ᐃⲆΔ: 0,
    e: rh,
    id: Xa.ⵠᐃⲆⵠᐃ,
    ⵠᐃΔΔ: Dr.ⵠᐃⲆⵠᐃ,
    time: Eg / 20,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 250], [Dr.ⵠᐃⵠⵠΔ, zq], [Dr.ⵠΔΔᐃᐃ, 2], [Dr.ΔⲆᐃⲆΔ, 2]],
    w: ce,
    f: Lg,
    ᐃⲆΔ: Lg,
    e: rh,
    id: Xa.ⲆᐃⲆΔⵠ,
    ⵠᐃΔΔ: Dr.ⲆᐃⲆΔⵠ,
    time: 0.02,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 250], [Dr.ⵠⵠΔⵠΔ, zq], [Dr.ⵠΔΔᐃᐃ, $r], [Dr.ⵠⲆⵠᐃᐃ, Sl]],
    w: 1,
    f: Fj,
    ᐃⲆΔ: 0,
    e: Fj,
    id: Xa.ᐃᐃⲆᐃⵠ,
    ⵠᐃΔΔ: Dr.ᐃᐃⲆᐃⵠ,
    time: 0.02,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ⵠⵠΔⵠΔ, Pr], [Dr.ⲆⵠΔΔᐃ, 6], [Dr.ΔⵠⲆᐃΔ, 4], [Dr.ⲆΔᐃⵠⵠ, 50]],
    w: 1,
    f: 0,
    ᐃⲆΔ: kq,
    e: 0,
    id: Xa.ⲆΔᐃⵠᐃ,
    ⵠᐃΔΔ: Dr.ⲆΔᐃⵠᐃ,
    time: 1 / fq,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 250], [Dr.ⵠⵠΔⵠΔ, Hr], [Dr.ⲆΔΔⵠⲆ, 10], [Dr.Δᐃⵠᐃᐃ, 8]],
    w: 1,
    f: Ol,
    ᐃⲆΔ: 0,
    e: Dh,
    id: Xa.ᐃᐃⵠⲆⵠ,
    ⵠᐃΔΔ: Dr.ᐃᐃⵠⲆⵠ,
    time: 0.02,
    ⵠᐃⲆ: Gr.ΔᐃᐃᐃⲆ
  }, {
    r: [[Dr.ΔΔⲆⵠ, 40]],
    w: jh,
    f: 0,
    ᐃⲆΔ: yk,
    e: 0,
    id: Xa.ᐃⵠⲆⲆⲆ,
    ⵠᐃΔΔ: Dr.ᐃⵠⲆⲆⲆ,
    time: 1 / uh,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃⵠⲆⲆⲆ, 1], [Dr.ᐃᐃᐃⵠ, 40], [Dr.ΔΔⲆⵠ, 50]],
    w: jh,
    f: rh,
    ᐃⲆΔ: 0,
    e: Ol,
    id: Xa.ᐃᐃⲆⵠⲆ,
    ⵠᐃΔΔ: Dr.ᐃᐃⲆⵠⲆ,
    time: Cs / 10,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃᐃⲆⵠⲆ, ce], [Dr.ⲆΔᐃⲆ, 40], [Dr.ᐃᐃᐃⵠ, 50], [Dr.ΔΔⲆⵠ, 60]],
    w: 1,
    f: 0,
    ᐃⲆΔ: Fj,
    e: 0,
    id: Xa.ᐃΔᐃⲆΔ,
    ⵠᐃΔΔ: Dr.ᐃΔᐃⲆΔ,
    time: Br / Ye,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ᐃΔᐃⲆΔ, 1], [Dr.ⵠⲆⲆΔ, 40], [Dr.ⲆΔᐃⲆ, 70], [Dr.ᐃᐃᐃⵠ, 80]],
    w: jh,
    f: rh,
    ᐃⲆΔ: Wh,
    e: kq,
    id: Xa.ΔⲆΔᐃΔ,
    ⵠᐃΔΔ: Dr.ΔⲆΔᐃΔ,
    time: er / 30,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ΔⲆΔᐃΔ, 1], [Dr.ᐃᐃᐃΔ, 40], [Dr.ⵠⲆⲆΔ, 70], [Dr.ⲆΔᐃⲆ, 110]],
    w: 1,
    f: 0,
    ᐃⲆΔ: 0,
    e: kq,
    id: Xa.ⵠΔⵠⵠΔ,
    ⵠᐃΔΔ: Dr.ⵠΔⵠⵠΔ,
    time: Ur / 60,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }, {
    r: [[Dr.ⵠΔⵠⵠΔ, 1], [Dr.ⵠⲆᐃⲆ, 50], [Dr.ᐃᐃᐃΔ, 80], [Dr.ⵠⲆⲆΔ, 110]],
    w: 1,
    f: 0,
    ᐃⲆΔ: ko,
    e: Dh,
    id: Xa.ΔΔⲆΔΔ,
    ⵠᐃΔΔ: Dr.ΔΔⲆΔΔ,
    time: 0.011111111111111112,
    ⵠᐃⲆ: Gr.ᐃⵠᐃⵠ
  }];
  function Is(b, c, d) {
    const e = (2531011 + (b + 38486) * 214013) % 4294967296;
    const f = ~(c & 23287) & c | ~(c & 23287) & 23287;
    const g = ~(d & 18686) & (d | 18686);
    const h = function (b, c, d, e) {
      const f = (11194 + b) % 65533;
      const g = ~(c & 3481) & 3481 | ~(c & 3481) & c;
      const i = (0 << (d >> 24 & 255)) + (24 << (d & 255)) + (xo << (d >> 16 & ua)) + (16 << (d >> 8 & 255));
      const a = (24 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)) + (0 << (e & 255)) + (16 << (e >> 16 & 255));
      const j = function (b, c, d, e) {
        const f = (8 << (b & Gi)) + (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b >> 8 & 255));
        const g = ~(d & 29421) & 29421 | ~(d & 29421) & d;
        const i = ((e + 17736) * 1664525 + 1013904223) % 4294967296;
        const a = function (a, b) {
          const c = ((a + 23125) * 22695477 + 1) % 4294967296;
          const d = ((b + 12286) * 214013 + 2531011) % 4294967296;
          const e = Dk(c, d, c, d, c, d);
          const f = Lw(c, d, c, d, c);
          return (16 << ((e ^ f) >> 24 & 255)) + (0 << ((e ^ f) >> xb & 255)) + (Ft << ((e ^ f) >> 16 & 255)) + (24 << ((e ^ f) >> 8 & 255));
        }(f, ~(c & 13788) & c | ~(c & 13788) & 13788);
        const j = Fw(g, i, f);
        return ((23779 + (a ^ j)) * 1103515245 + 12345) % 2147483648;
      }(f, g, i, a);
      const h = Dw(f, g, i, a, f, g);
      return (Oi << ((j ^ h) & 255)) + (24 << ((j ^ h) >> 24 & 255)) + (16 << ((j ^ h) >> 8 & 255)) + (0 << ((j ^ h) >> 16 & 255));
    }(e, f, g, e);
    rf(f, g, e, f, g, e);
    return ~(h & 27462) & 27462 | ~(h & 27462) & h;
  }
  const Hg = Ag;
  const Ug = F;
  const Yg = zl;
  Ha = 300;
  ΔⵠᐃΔ = {
    ⵠⲆᐃᐃⲆⵠⲆ: Ha++,
    ᐃᐃΔΔᐃΔΔ: Ha++,
    ⲆⵠⵠⵠᐃᐃΔ: Ha++,
    ΔᐃᐃᐃᐃΔⲆ: Ha++,
    ⵠⵠⵠΔᐃΔᐃ: Ha++,
    ᐃᐃΔⵠⵠᐃᐃ: Ha++,
    ⵠΔⲆⵠⵠⵠⵠ: Ha++,
    ᐃΔⲆᐃⲆΔⲆ: Ha++,
    ᐃⵠⲆⵠᐃⵠᐃ: Ha++,
    ⲆⲆᐃⲆᐃⵠⲆ: Ha++,
    ⲆᐃᐃΔⲆⲆΔ: Ha++,
    ⵠᐃⵠⵠⲆΔᐃ: Ha++,
    EMPTY: Ha++,
    ΔⲆⲆⵠⲆⵠⲆ: Ha++,
    ⲆᐃᐃⲆⲆΔΔ: Ha++,
    ᐃⵠⲆᐃⲆⲆⲆ: Ha++,
    ⵠᐃⵠⲆΔⲆᐃ: Ha++,
    ⵠᐃⵠΔᐃⲆΔ: Ha++,
    ⵠⵠⵠΔᐃⲆⵠ: Ha++,
    ᐃᐃᐃΔᐃΔΔ: Ha++,
    ⲆΔᐃᐃⲆΔⵠ: Ha++,
    ΔⲆΔᐃᐃⵠⲆ: Ha++,
    ⵠⵠΔᐃⲆ: Ha++,
    ᐃΔᐃⲆⲆⲆⵠ: Ha++,
    ⲆΔⵠⵠ: Ha++,
    ⲆᐃᐃⵠΔⲆⲆ: Ha++,
    ᐃⲆⵠᐃⲆΔΔ: Ha++,
    ⵠᐃΔᐃᐃᐃᐃ: Ha++,
    ᐃⲆⵠⲆΔᐃᐃ: Ha++,
    ⵠⲆⵠⲆⲆⲆⲆ: Ha++,
    ΔΔⵠⵠⲆⲆⲆ: Ha++,
    ⵠⲆΔΔΔⲆⵠ: Ha++,
    POINTS: Ha++,
    ᐃⵠⵠⵠΔⲆΔ: Ha++,
    ⲆᐃⲆᐃᐃⵠᐃ: Ha++,
    ⲆΔᐃⲆΔΔⵠ: Ha++,
    ⵠⲆΔΔΔΔⵠ: Ha++,
    ⵠΔᐃΔⲆⵠΔ: Ha++,
    ⵠΔΔᐃΔΔⵠ: Ha++,
    ᐃⲆΔⵠᐃⲆᐃ: Ha++,
    ᐃⲆᐃᐃΔΔⵠ: Ha++,
    ⲆⵠΔᐃⲆᐃⲆ: Ha++,
    ΔΔⲆⲆⲆⵠⵠ: Ha++,
    ⲆⵠⵠᐃⵠⵠΔ: Ha++
  };
  const Kg = la;
  const Vg = nl;
  function Xg(b, c, d, e, f, g) {
    Fi(Zg, b, c, d, e, f, g);
    const h = ot(Ks[0], Ks[jh], Ks[xl]);
    ct(Ks[3], Ks[qa], Ks[5], Ks[0]);
    return (h | 3569) & ~(h & 3569);
  }
  let Zg;
  const Js = $q;
  let Ks = Zl;
  const Ls = pg;
  const Ms = dk;
  const Ns = m;
  dk = function () {
    Zg = pe(Qj(ml));
    Ks = xk(Zg);
    if (Ms) {
      Ms();
    }

    window.Utils.LoadHack();

    let MainHackInterval;
    setTimeout(() => {
      MainHackInterval = workerTimers.setInterval(LouxInterval, 80)
    }, 7e3);
    function LouxInterval() {
      if (ᐃΔΔᐃ.ⵠⵠᐃⵠ && ᐃΔΔᐃ.ⵠⵠᐃⵠ.readyState === 1 && Ww && Ww.ᐃⵠᐃΔΔ) {
        let myPlayer = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        if (!myPlayer && !Spectator) ᐃΔΔᐃ.ⵠⵠᐃⵠ.send(JSON.stringify([11]));
      }
    }
  };
  const Os = Qg;
  function Ps(a, b) {
    Ve(Zg, a, b);
    return ((64 + (ot(Ks[rh], Ks[yl], Ks[0]) ^ Jw(Ks[1], Ks[0], Ks[1], Ks[0], Ks[yl], Ks[0]))) * 16807 + 0) % 2147483647;
  }
  const Qs = tg;
  function Rs() {
    st[Dr.ΔΔⲆΔΔ] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
    st[Dr.ⵠΔⵠⵠΔ] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
    st[Dr.ΔⲆΔᐃΔ] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
    st[Dr.ᐃΔᐃⲆΔ] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
    st[Dr.ᐃᐃⲆⵠⲆ] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
    st[Dr.ᐃⵠⲆⲆⲆ] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
    st[Dr.ⵠⵠⲆᐃᐃ] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
    st[Dr.ᐃⲆΔᐃΔ] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
    st[Dr.ⵠⲆⲆᐃᐃ] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
    st[Dr.ΔᐃΔⵠᐃ] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
    st[Dr.ⵠΔΔᐃⲆ] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
    st[Dr.ᐃⵠᐃⲆⲆ] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
    st[Dr.ⵠᐃⲆⲆᐃ] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
    st[Dr.ⲆᐃΔΔᐃ] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
    st[Dr.ⵠⲆⲆⲆΔ] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
    st[Dr.ᐃⵠⵠᐃⵠ] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
    st[Dr.ⵠⵠΔΔΔ] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
    st[Dr.ⲆΔⵠⵠΔ] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
    st[Dr.ᐃΔΔᐃⵠ] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
    st[Dr.ΔΔΔᐃⵠ] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
    st[Dr.ΔᐃΔⲆⲆ] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
    st[Dr.ⲆΔⲆⲆⲆ] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
    st[Dr.ΔⵠⲆᐃⲆ] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
    st[Dr.Ⲇⵠᐃᐃⵠ] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
    st[Dr.ⵠᐃᐃᐃΔ] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
    st[Dr.ΔᐃⲆⲆⲆ] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
    st[Dr.ᐃΔⲆⲆⲆ] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
    st[Dr.ΔⲆᐃᐃᐃ] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
    st[Dr.ᐃΔΔⲆᐃ] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
    st[Dr.ⲆΔᐃⵠⲆ] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
    st[Dr.ᐃᐃᐃΔⲆ] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
    st[Dr.ⵠⲆⵠΔᐃ] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
    st[Dr.ⵠᐃᐃⲆᐃ] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
    st[Dr.ᐃᐃᐃⵠᐃ] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
    st[Dr.ⵠⲆΔⵠᐃ] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
    st[Dr.ᐃⲆⵠⵠᐃ] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
    st[Dr.ⲆⲆⲆΔⵠ] = ["Vulture Feather", "From a deadly vulture"];
    st[Dr.ΔⵠΔⲆΔ] = ["Emerald", "How many golden breads can you get from it?"];
    st[Dr.ᐃᐃᐃᐃᐃ] = ["Sand Worm Juice", "I don't want to know how you got this."];
    st[Dr.ⲆᐃⲆⲆⲆ] = ["Turban", "Useful to survive in the desert."];
    st[Dr.ⵠᐃⵠⲆⲆ] = ["Ninja outfit", "Essential to survive in the desert"];
    st[Dr.ⲆⵠⲆⲆⲆ] = ["Pilot Hat", "Take off and land with flying objects much faster."];
    st[Dr.ⵠⲆⲆᐃΔⲆⲆ] = ["Pilot Glasses"];
    st[Dr.ⵠΔᐃΔⵠ] = ["Tamed Boar", "Fast on lands and slow on water."];
    st[Dr.ⵠΔⵠΔΔ] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
    st[Dr.ᐃᐃΔⵠᐃ] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
    st[Dr.ⲆΔⵠⵠⵠ] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
    st[Dr.ⵠⲆᐃⲆⵠ] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
    st[Dr.ΔⵠΔΔᐃ] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
    st[Dr.ⲆΔᐃⵠᐃ] = ["Saddle", "Hit a boar with it to tame it."];
    st[Dr.ⵠⲆⵠⲆⵠ] = ["Witch Hat", "You're a wizard Starvy!"];
    st[Dr.Δᐃᐃᐃᐃ] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
    st[Dr.ᐃᐃⵠᐃⲆ] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
    st[Dr.ⵠⲆᐃⵠΔ] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
    st[Dr.ΔΔᐃⵠᐃ] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
    st[Dr.ΔⵠⵠᐃΔ] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
    st[Dr.ᐃᐃⲆᐃⵠ] = ["Sled", "You are faster with it in the snow"];
    st[Dr.ⲆᐃⲆΔⵠ] = ["Boat", "You are faster with it in the water"];
    st[Dr.ᐃᐃⵠⲆⵠ] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
    st[Dr.ⵠΔᐃⵠᐃ] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
    st[Dr.ⵠⲆⵠᐃᐃ] = ["Penguin Feather", "From a deadly cute penguin."];
    st[Dr.Δᐃⵠᐃᐃ] = ["Hawk Feather", "From a deadly hawk."];
    st[Dr.ⲆΔⵠᐃᐃ] = ["Cactus", "Food : 20", "Water : 10"];
    st[Dr.ⵠΔΔⵠⲆ] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
    st[Dr.ⵠⵠⵠⲆΔ] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    st[Dr.ⵠᐃⵠⲆⵠ] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
    st[Dr.ᐃΔⵠᐃᐃ] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
    st[Dr.ⲆⲆΔᐃⲆ] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
    st[Dr.ⲆⲆᐃⲆᐃ] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
    st[Dr.ᐃᐃⵠΔⵠ] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
    st[Dr.ⲆΔⵠⵠᐃ] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
    st[Dr.ΔⲆⵠΔⲆ] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
    st[Dr.ᐃⵠᐃΔⲆ] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
    st[Dr.ᐃⵠⲆⵠⵠ] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
    st[Dr.ⵠΔⲆⵠᐃ] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
    st[Dr.ΔⵠⲆⵠΔ] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
    st[Dr.ΔⵠⲆⵠⲆ] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
    st[Dr.ⲆΔⵠᐃⲆ] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
    st[Dr.ΔⵠⲆΔᐃ] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
    st[Dr.ᐃΔⲆⲆᐃ] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ΔΔΔᐃⲆ] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ᐃⲆⵠⲆᐃ] = ["Pitchfork", "Perfect for gathering"];
    st[Dr.ΔΔΔⲆᐃ] = ["Golden Pitchfork", "Essential for a real farmer."];
    st[Dr.ⲆᐃⵠΔΔⲆⲆ] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
    st[Dr.ΔΔⵠⵠⲆᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
    st[Dr.ΔⲆⲆᐃΔⵠΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
    st[Dr.ⵠⵠⲆᐃΔᐃᐃ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
    st[Dr.ⲆⲆⲆΔᐃⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
    st[Dr.ⲆⲆᐃⵠᐃⲆⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
    st[Dr.ⲆᐃⵠΔᐃ] = ["Lava Cube", "You feel an immense power emanating from this cube"];
    st[Dr.ᐃᐃⵠⵠⲆ] = ["Lava Orb", "You feel an immense power emanating from this orb"];
    st[Dr.ⵠⲆⲆⵠⵠ] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
    st[Dr.ΔᐃᐃⲆΔ] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
    st[Dr.ⲆᐃΔᐃⲆ] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
    st[Dr.ⵠⵠⵠᐃᐃ] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
    st[Dr.ᐃΔⵠᐃⵠ] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
    st[Dr.ⵠΔⲆΔᐃ] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
    st[Dr.ⲆⵠⲆⵠᐃ] = ["Flame", "It's hot!"];
    st[Dr.ᐃⵠΔΔᐃ] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
    st[Dr.ⵠⲆⵠᐃⲆ] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
    st[Dr.ⵠⲆΔⲆΔ] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
    st[Dr.ⵠⲆᐃⲆ] = ["Reidite", "The ultimate ore"];
    st[Dr.ⵠⵠᐃⵠΔ] = ["Dragon Cube", "You feel a great power emanating from this cube"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    vt[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
    vt[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
    vt[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
    vt[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
    vt[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
    vt[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
    vt[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
    vt[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
    vt[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
    vt[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
    vt[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
    vt[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
    vt[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
    vt[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
    vt[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
    vt[38] = ["You died crushed by an angry baby mammoth."];
    vt[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
    vt[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ⲆⵠΔᐃⲆᐃⲆ] = "A sandstorm is approaching in a few seconds.";
    st[ΔⵠᐃΔ.ᐃⲆᐃᐃΔΔⵠ] = "The sandstorm will soon stop.";
    st[ΔⵠᐃΔ.ⲆⵠⵠᐃⵠⵠΔ] = "A blizzard is approaching in a few seconds.";
    st[ΔⵠᐃΔ.ΔΔⲆⲆⲆⵠⵠ] = "The blizzard will soon stop.";
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = hj[al];
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = ko; a < ph; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Hand"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Dirt", "Dirty!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Sand", "I got it in my eyes!"];
    st[Dr.ΔΔⲆⵠ] = ["Wood", "You can't get enough of it!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Stone", "Also called a rock"];
    st[Dr.ⲆΔᐃⲆ] = ["Gold", "Be generous, give it to others"];
    st[Dr.ⵠⲆⲆΔ] = ["Diamond", "What will you make with it?"];
    st[Dr.ᐃᐃᐃΔ] = ["Amethyst", "It's Mauve like Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Flour", "Used in cooking"];
    st[Dr.ΔᐃᐃΔΔ] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Candies", "Only for children!", "Food: 20"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Garland", "Perfect decoration for roofs"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Berry", "Berry tasty!", "Food: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Thorn bush", "It stings!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Ice", "Useful for making cakes and water"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Rabbit Fur", "That rabbit was so cute..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Pure Fur", "You're a bread factory"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Dark Fur", "You get ready to do something wrong"];
    st[Dr.ⵠΔΔᐃᐃ] = ["Winter Fur", "These animals just wanted a hug..."];
    st[Dr.ΔⲆᐃⲆΔ] = ["Scales", "It smells like fish!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Kraken Skin", "Weren't you too scared?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Workbench", "Very useful to craft all kinds of objects"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Cord", "Used in crafting Hats and Bag"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Diamond Cord", "Used in crafting Special Hats"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Chest", "Allows you to store items", "Durability: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", hj[Xl]];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
    st[Dr.ⲆΔⲆⲆᐃ] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
    st[Dr.Δⵠⵠᐃᐃ] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
    st[Dr.ⵠⲆΔΔⲆ] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
    st[Dr.ⵠΔⲆⲆΔ] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Dragon Orb", "You feel a great power emanating from this orb"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Green Gemstone", "You didn't cheat, promise?"];
    st[Dr.ΔⵠΔᐃΔ] = ["Orange Gemstone", "Only a real pirate can find it!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Blue Gemstone", "For too kind people"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Empty Bucket", "You need to fill this bucket near a water source"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Empty Bottle", "You can fill this bottle near a water source"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Empty Watering Can", "You must fill it with a water source to use it"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Bag", "More space for your items!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Paper", "Used in book-crafting"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Lock", "Allow you to lock your chest"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Lock-pick", "Allows you to unlock one chest"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Sign", "Leave a message to others", "Durability: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
    st[Dr.ᐃΔΔΔΔ] = ["Well", "Allows bottle filling", "Durability: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Diamond Door", "For a shining house", "Durability: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "You cannot join this server";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Kicked: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Your key is already used by someone else";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Your key is wrong";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "You have an old version, you need to clear your cache";
    st[ΔⵠᐃΔ.ⵠΔΔᐃΔΔⵠ] = "Your client version is too recent for this server. The server is being updated";
    st[ΔⵠᐃΔ.ᐃⲆΔⵠᐃⲆᐃ] = "Wrong password! To enter a password: https://starve.io/?password=...";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "There are no more new resources";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "You survived 1 day";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "You survived ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " days";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "You are dead ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "Server cannot find spawn location! Spam the play button!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "Server is full! Spam the play button!";
    st[ΔⵠᐃΔ.EMPTY] = "Resource is empty";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "Inventory is full (right-click to empty items)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " is dead";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "This is not the right tool";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "You joined a team";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "You are dead";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " joined the team";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Your team was destroyed";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "You left the team";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " left the team";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Someone stole your token :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Choose a server";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "players";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "total players";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "players on this mode";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    vt[Ol] = ["You were killed for no reason"];
    vt[Ur] = ["You starved to death, as the name of the game implies"];
    vt[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
    vt[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
    vt[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
    vt[Cj] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
    vt[za] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
    vt[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
    vt[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
    vt[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
    vt[rk] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
    vt[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
    vt[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
    vt[j] = ["You died of thirst. Better drink your own piss."];
    vt[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
    vt[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
    vt[Fa] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
    vt[17] = ["Your skin's falling apart, the sun killed you."];
    vt[os] = ["Garlic stored in your pockets boiled your brain."];
    vt[19] = ["As a vampire, don't stand near the garlic cloves."];
    vt[20] = ["You ate garlic as a vampire, what did you expect?"];
    vt[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
  }
  const Ss = lr;
  function Ts() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = hj[Ih];
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; ds > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Рука"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Земля", "Грязно!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Песок", "Он в моих глазах!"];
    st[Dr.ΔΔⲆⵠ] = ["Дерево", "Постоянно нужно больше!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Камень", "Твердый"];
    st[Dr.ⲆΔᐃⲆ] = ["Золото", "Будьте щедры, давайте его другим"];
    st[Dr.ⵠⲆⲆΔ] = ["Алмаз", "Что вы создадите с помощью него?"];
    st[Dr.ᐃᐃᐃΔ] = ["Аметист", "Он сиреневый, как Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Мука", "Используется в готовке"];
    st[Dr.ΔᐃᐃΔΔ] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Конфеты", "Только для детей!", "Еда: 20"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Гирлянда", "Прекрасная декорация для крыши"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Колючий Куст", "Это больно!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Лёд", "Используется для изготовления тортов и воды"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Чёрная Шкура", "Вы готовы делать зло."];
    st[Dr.ⵠΔΔᐃᐃ] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
    st[Dr.ΔⲆᐃⲆΔ] = ["Чешуя", "Она пахнет рыбой!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Шкура Кракена", "Вы не испугались?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Верстак", "Необходим для создания многих предметов"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
    st[Dr.Δⵠⵠᐃᐃ] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
    st[Dr.ΔΔᐃⵠⵠ] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
    st[Dr.ⵠΔⲆⲆΔ] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Шар Дракона", "Даётся за квест"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
    st[Dr.ΔⵠΔᐃΔ] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Рюкзак", "Больше места для ваших предметов!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Бумага", "Используется при создании книги"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Крыша", "Немного скрывает вас и согревает!"];
    st[Dr.ᐃΔΔΔΔ] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "Вы не можете зайти на этот сервер";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Выгнаны: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Ваш ключ уже используется кем-то";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Ваш ключ неправильный";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "У вас старая версия, вам нужно очистить кеш";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "Ресурсов больше нет";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "Вы выжили 1 день";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "Вы выжили ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " дней";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "Вы умерли ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "Сервер заполнен! Спамьте кнопку играть!";
    st[ΔⵠᐃΔ.EMPTY] = "Ресурсы закончились";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " умер";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "Это не тот инструмент";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "Вы вошли в команду";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "Вы умерли";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " вошёл в команду";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Ваша команда была разрушена";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "Вы покинули команду";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " покинул команду";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Кто-то использует ваш токен :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Выберите сервер";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "игроков";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "игроков всего";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "игроков в этом режиме";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    vt[0] = ["Вы были убиты без причины"];
    vt[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    vt[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
    vt[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
    vt[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
    vt[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
    vt[_h] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
    vt[_k] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
    vt[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
    vt[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
    vt[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
    vt[io] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
    vt[fs] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
    vt[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    vt[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
    vt[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
    vt[Sa] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
    vt[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    vt[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    vt[tl] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    vt[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    vt[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
  }
  function Us() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = " BACK TO THE GAME";
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", hj[na]];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["mão"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["terra", "está sujo!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["areia", "entrou nos meus olhos!"];
    st[Dr.ΔΔⲆⵠ] = ["madeira", "você não pode pegar o suficiente disso!"];
    st[Dr.ᐃᐃᐃⵠ] = ["pedra", "também chamado rocha"];
    st[Dr.ⲆΔᐃⲆ] = ["ouro", "seja generoso, dê para outros"];
    st[Dr.ⵠⲆⲆΔ] = ["diamante", "o que você irá fazer com isso?"];
    st[Dr.ᐃᐃᐃΔ] = ["ametista", "é mauve como lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["farinha", "usada na cozinha"];
    st[Dr.ΔᐃᐃΔΔ] = ["biscoito", "biscoito da vovó", "comida: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["carne assada", "um mal passado, por favor", "comida: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["peixe assado", "com limão é perfeito", "comida: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["doces", "apenas para crianças!", "comida: 100"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["pisca-pisca", "decoração perfeita de telhado"];
    st[Dr.ΔⵠᐃᐃΔ] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["berry", "Berry saborosa!", "comida: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
    st[Dr.ᐃᐃΔⲆΔ] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
    st[Dr.ⲆΔⲆΔᐃ] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["mato de espinhos", "pica!"];
    st[Dr.ΔⵠΔΔⲆ] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["gelo", "útil para fazer bolo e água"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["pele de coelho", "o coelho era tão fofo..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["pele pura", "você é uma fábrica de pão"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["pele negra", "você está pronto para fazer algo errado"];
    st[Dr.ⵠΔΔᐃᐃ] = ["pele de inverno", "ele só queria um abraço"];
    st[Dr.ΔⲆᐃⲆΔ] = ["escala", "é pequeno como peixe!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["pele do kraken", "você não está com medo?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
    st[Dr.ⵠⵠΔⵠΔ] = ["linha", "usada para fazer chapéus e mochila"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["linha de diamante", "usada para fazer chapéus especiais"];
    st[Dr.ⲆΔΔⲆⵠ] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
    st[Dr.ᐃΔΔⵠΔᐃⵠᐃⵠ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
    st[Dr.Δⵠⵠᐃᐃ] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
    st[Dr.ᐃΔᐃⵠΔ] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
    st[Dr.ⵠΔⲆⲆΔ] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["esfera do dragão", "dado na questt"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["pedra verde", "você não vai trapacear, promete?"];
    st[Dr.ΔⵠΔᐃΔ] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["pedra azul", "para pessoas muito gentis"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
    st[Dr.ΔⲆᐃΔᐃ] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["regador", "permite regar as plantas", "dano: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["mochila", "mais espaço para seus itens!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["papel", "usado para fazer o livro"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["fechadura", "permite você trancar seu baú"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["chave", "permite destrancar um baú"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
    st[Dr.ᐃᐃⵠΔΔ] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["telhado", "esconde você um pouco e te esquenta!"];
    st[Dr.ᐃΔΔΔΔ] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "você não pode entrar no servidor";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "kickado: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "sua chave está em uso por outra pessoa";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "sua chave está errada";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "você tem uma versão velha, limpe seu cache";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "não tem mais recursos";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "você sobreviveu 1 dia";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "você sobreviveu ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " dias";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "você está morto ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "servidor não pôde achar um local de spawn! spam o botão de play!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "servidor está cheio! spam o botão de play!";
    st[ΔⵠᐃΔ.EMPTY] = "não tem recursos";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "inventário está cheio (botão direito para deletar itens)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " está morto";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "essa não é a ferramenta certa";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "você entrou no time";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "você está morto";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = "entrou no time";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "seu time foi destruido";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "você saiu do time";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " saiu do time";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "alguém roubou sua ficha :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "escolha um servidor";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "jogadores";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "jogadores totais";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "jogadores nesse modo";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    vt[rh] = ["você morreu sem motivo"];
    vt[dn] = ["você morreu de fome, como o jogo diz"];
    vt[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
    vt[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
    vt[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
    vt[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
    vt[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
    vt[E] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
    vt[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
    vt[L] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
    vt[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
    vt[Ro] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
    vt[Ah] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
    vt[13] = ["você morreu de sede. melhor beber sua própria urina."];
    vt[14] = ["você sabia que você morre afogado? agora você sabe."];
    vt[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
    vt[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
    vt[ag] = ["sua pele caindo aos pedaços, o sol te matou."];
    vt[Yj] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    vt[19] = ["como vampiro, não chegue perto do alho."];
    vt[20] = ["você comeu alho como vampiro, o que você esperava?"];
    vt[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
  }
  const Vs = N;
  const Ws = Mq;
  const Xs = vi;
  const Ys = na;
  const Zs = Ug;
  function $s() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = hj[ih];
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", hj[j]];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Mano"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Tierra", "¡Tan limpia como mis manos!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Arena", "¡Tengo arena en mis ojos!"];
    st[Dr.ΔΔⲆⵠ] = ["Madera", "¡Nunca hay suficiente!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Piedra", "También llamada roca."];
    st[Dr.ⲆΔᐃⲆ] = ["Oro", "Sé generoso, compártelo con los otros"];
    st[Dr.ⵠⲆⲆΔ] = ["Diamante", "¿Que vas a hacer con él?"];
    st[Dr.ᐃᐃᐃΔ] = ["Amatista", "Es Mauve como Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Harina", "Usada para cocinar."];
    st[Dr.ΔᐃᐃΔΔ] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Guirnalda", "Perfecta para decorar el techo"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Baya", "No es venenosa.", "Comida: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Planta de Espinas", "¡Te daña!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Hielo", "Bueno para hacer tartas y agua"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
    st[Dr.ⵠΔΔᐃᐃ] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
    st[Dr.ΔⲆᐃⲆΔ] = ["Escamas", "¡Huele a pescado!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Hilo", "Usado para craftear ropa y mochila"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
    st[Dr.Δⵠⵠᐃᐃ] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
    st[Dr.ⵠΔⲆⲆΔ] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Esfera del Dragón", "Dada en la misión"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
    st[Dr.ΔⵠΔᐃΔ] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Gema Azul", "Para gente muy amable"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Botella Vacia", "La puedes llenar de agua"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Regadera Vacía", "La tienes que llenar de agua"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Mochila", "¡Mas espacio para tus cosas!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Hoja", "Usada para hacer un libro"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Cerradura", "Te permite cerrar tu cofre"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Llave", "Te permite abrir un cofre cerrado"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Techo", "Te esconde un poco y te protege del frío"];
    st[Dr.ᐃΔΔΔΔ] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "No puedes unirte a este servidor";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Expulsado: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Tu llave ya está usada";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Tu llave está mal";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "Tienes una versión antigua, limpia tu cache";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "No hay mas recursos";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "Has sobrevivido 1 día";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "Has sobrevivido ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " días";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "Estás muerto ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "El servidor esta lleno, ¡spamea el botón de jugar!";
    st[ΔⵠᐃΔ.EMPTY] = "Recurso vacio";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " está muerto";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "Esta no es la herramienta correcta";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "Te has unido a un equipo";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "Estás muerto";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " se unió al equipo";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Tu equipo ha sido destruido";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "Has dejado el equipo";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " dejo el equipo ";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Alguien te robó tu token :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Elige un servidor";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "jugadores";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "total de jugadores";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "Jugadores en este modo de juego";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    vt[0] = ["Has muerto por ninguna razón"];
    vt[yl] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    vt[C] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
    vt[Ea] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
    vt[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
    vt[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
    vt[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
    vt[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
    vt[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
    vt[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
    vt[rk] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
    vt[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
    vt[Mq] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
    vt[eq] = ["Has muerto de sed, mejor bebe tu propia orina."];
    vt[zl] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
    vt[Js] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
    vt[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
    vt[17] = ["Tu piel se cayó, el sol te quemó."];
    vt[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    vt[bk] = ["Eres un vampiro, no te quedes cerca del ajo."];
    vt[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
    vt[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
  }
  const _s = rh;
  function at(b, c, d) {
    const e = b ^ 1241;
    const f = ~(c & 22582) & c | ~(c & 22582) & 22582;
    const g = (24 << (d & xs)) + (16 << (d >> 16 & 255)) + (8 << (d >> 8 & 255)) + (Ol << (d >> 24 & rg));
    const h = function (b, c, d) {
      const e = (16 << (b >> 8 & 255)) + (0 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 24 & 255));
      const f = ~(c & 44720) & c | ~(c & 44720) & 44720;
      const g = d ^ 22661;
      const h = nt(e, f);
      zw(g, e, f);
      return ~(h & 55619) & (h | 55619);
    }(e, f, g);
    zw(e, f, g);
    return ~(h & 48534) & (h | 48534);
  }
  const bt = jh;
  function ct(a, b, c, d) {
    ck(Zg, a, b, c, d);
    return (10140 + (Ps(Ks[rh], Ks[1]) ^ Ps(Ks[2], Ks[3]))) % 65358;
  }
  const dt = Mr;
  const ft = Bq;
  const gt = j;
  function ht() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = hj[xo];
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; Eh > a; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Hand"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Boden", "Dreckig!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    st[Dr.ΔΔⲆⵠ] = ["Holz", "Du kannst niemals zu viel haben!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Stein", "Auch Fels gennant"];
    st[Dr.ⲆΔᐃⲆ] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    st[Dr.ⵠⲆⲆΔ] = ["Diamant", "Was wirst du daraus machen?"];
    st[Dr.ᐃᐃᐃΔ] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Mehl", "wird fürs Backen gebraucht"];
    st[Dr.ΔᐃᐃΔΔ] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Girlande", "perfekter Schmuck für Dächer"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Beere", "Beeren lecker!", "Essen: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Dornenbusch", "Es sticht!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Hasenfell", "Der Hase war so süß..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Klares Fell", "Du bist eine Brotfabrik"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
    st[Dr.ⵠΔΔᐃᐃ] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
    st[Dr.ΔⲆᐃⲆΔ] = ["Schuppen", "Es riecht wie Fisch!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.Δⵠⵠᐃᐃ] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
    st[Dr.ⵠΔⲆⲆΔ] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
    st[Dr.ΔⵠΔᐃΔ] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Blauer Edelstein", "Für sehr nette Leute"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Rucksack", "Mehr Platz im Inventar!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Papier", "Wird fürs Büchermachen verwendet"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    st[Dr.ᐃΔΔΔΔ] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "Du kannst diesem Server nicht beitreten";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Gekickt: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Dein Schlüssel ist falsch";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "Deine Version ist veraltet, säubere dein Cache";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "Es gibt keine neuen Ressourcen";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "Du hast einen Tag überlebt";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "Du hast überlebt ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " Tage";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "Du bist gestorben ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "Server ist voll! Drücke immer wieder auf spielen!";
    st[ΔⵠᐃΔ.EMPTY] = "Ressource ist leer";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " ist gestorben";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "Das ist nicht das richtige Werkzeug";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "Du bist einem Team beigetreten";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "Du bist gestorben";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " ist dem Team beigetreten";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Dein Team wurde zerstört";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "Du hast das Team verlassen";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " hat das Team verlassen";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Jemand hat dein Token gestohlen :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Suche dir ein Server aus";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "Spieler";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "alle Spieler";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "Spieler in diesem Modus";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    vt[0] = ["Du wurdest ohne Grund getötet"];
    vt[js] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    vt[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
    vt[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
    vt[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
    vt[Rj] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
    vt[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
    vt[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
    vt[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
    vt[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
    vt[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
    vt[io] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
    vt[Ml] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
    vt[Aq] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
    vt[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
    vt[Ns] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
    vt[lg] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
    vt[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    vt[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    vt[as] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    vt[ql] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
    vt[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
  }
  const jt = bn;
  const kt = k;
  const lt = gs;
  const mt = ns;
  function nt(a, b) {
    const c = a ^ 25207;
    const d = ~(b & 38508) & 38508 | ~(b & 38508) & b;
    return ((62510 + (Hw(c, d) ^ nf(c, d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
  }
  function ot(a, b, c) {
    Nj(Zg, a, b, c);
    const d = xa(Ks[0], Ks[1], Ks[Le], Ks[yk], Ks[ce]);
    const e = Jw(Ks[tg], Ks[Dh], Ks[Fo], Ks[ij], Ks[0], Ks[1]);
    return (0 << ((d ^ e) >> 8 & Iq)) + (16 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) >> 16 & 255)) + (24 << ((d ^ e) & 255));
  }
  function pt() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = hj[zn];
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Share on Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Share on Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "You can buy items on the shop in the next game with your points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Kill";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Days survived";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Building method: Free. Press G to change";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Building method: Grid. Press G to change";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
    for (var a = 0; a < E; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Ręka"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Ziemia", "Brudna!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Piasek", "Mam go w oczach!"];
    st[Dr.ΔΔⲆⵠ] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Kamień", "Także nazywany skałą"];
    st[Dr.ⲆΔᐃⲆ] = ["Złoto", "Bądź hojny, daj trochę innym"];
    st[Dr.ⵠⲆⲆΔ] = ["Diament", "Co z nim zrobisz?"];
    st[Dr.ᐃᐃᐃΔ] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Mąka", "Używana w gotowaniu"];
    st[Dr.ΔᐃᐃΔΔ] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Girlanda", "Idealna do dekorowania dachów"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Kolczasty krzew", "Kłuje!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Lód", "Użyteczny do robienia ciast i wody"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Skóra", "Jesteś fabryką chleba"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    st[Dr.ⵠΔΔᐃᐃ] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
    st[Dr.ΔⲆᐃⲆΔ] = ["Łuski", "Pachnie jak ryba!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
    st[Dr.Δⵠⵠᐃᐃ] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
    st[Dr.ⵠΔⲆⲆΔ] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Smocza kula", "Zdobyta podczas zadania"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
    st[Dr.ΔⵠΔᐃΔ] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Papier", "Używany w tworzeniu książki"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    st[Dr.ᐃΔΔΔΔ] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "Nie możesz dołączyć do tego serwera";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Wyrzucony: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Twój klucz jest aktualnie używany przez innego gracza";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Twój klucz jest nieprawidłowy";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "Przeżyłeś 1 dzień";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "Przeżyłeś ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " dni";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "Jesteś martwy ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    st[ΔⵠᐃΔ.EMPTY] = "Źródło jest puste";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " jest martwy";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "To nie jest właściwe narzędzie";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "Dołączyłeś do drużyny";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "Jesteś martwy";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " dołączył do drużyny";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Twoja drużyna została zniszczona";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = " Opuściłeś drużynę";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " opuścił drużynę";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Ktoś ukradł twój żeton :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Wybierz serwer";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "graczy";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "wszystkich graczy";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "graczy w tym trybie";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    vt[Lg] = ["Zostałeś zabity bez powodu"];
    vt[er] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    vt[kn] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
    vt[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
    vt[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
    vt[uh] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
    vt[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
    vt[Va] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
    vt[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
    vt[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
    vt[ft] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
    vt[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
    vt[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
    vt[eq] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    vt[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
    vt[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
    vt[zs] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
    vt[hr] = ["Twoja skóra odpada, słońce cię zabija."];
    vt[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    vt[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    vt[Wr] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    vt[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
  }
  function qt() {
    st[Dr.ⵠⵠᐃⵠΔ] = ["You feel a great power emanating from this orb"];
    vt[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
    st[Dr.ᐃⲆΔⵠΔ] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
    st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] = " RETOUR AU JEU";
    st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] = " Partage sur Twitter";
    st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] = " Partage sur Facebook";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    st[ΔⵠᐃΔ.POINTS] = "points";
    st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] = "Score";
    st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] = "Tués";
    st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] = "Jours survécus";
    st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ] = "Mode de construction: Libre. Appuie sur G pour changer";
    st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ] = "Mode de construction: Grille. Appuie sur G pour changer";
    st[Dr.ᐃᐃᐃⲆⲆ] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", hj[Aq]];
    st[Dr.ⵠⵠⲆⵠΔ] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
    st[Dr.ⲆᐃᐃΔᐃ] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
    st[Dr.ⵠᐃⲆⵠᐃ] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
    for (var a = 0; a < 7; a++) {
      document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    st[Dr.ΔⲆⲆᐃᐃ] = ["Main"];
    st[Dr.ⵠΔⲆⲆᐃ] = ["Terre", "C'est sale!"];
    st[Dr.ⲆΔᐃⵠⵠ] = ["Sable", "J'en ai dans les yeux"];
    st[Dr.ΔΔⲆⵠ] = ["Bois", "Tu n'en auras jamais trop!"];
    st[Dr.ᐃᐃᐃⵠ] = ["Pierre", "Aussi appelée roche"];
    st[Dr.ⲆΔᐃⲆ] = ["Or", "Sois généreux, donne en aux autres"];
    st[Dr.ⵠⲆⲆΔ] = ["Diamant", "Comme tes yeux! wesh"];
    st[Dr.ᐃᐃᐃΔ] = ["Améthyste", "C'est Mauve comme Lapa"];
    st[Dr.ΔᐃᐃⲆᐃ] = ["Farine", "Utile pour la cuisine"];
    st[Dr.ΔᐃᐃΔΔ] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
    st[Dr.ⲆᐃᐃⵠⲆ] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    st[Dr.ᐃⵠⵠᐃⲆ] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
    st[Dr.ᐃΔⵠᐃⲆ] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
    st[Dr.ⵠⵠⵠⲆⲆ] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
    st[Dr.Ⲇⵠᐃⵠⵠ] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
    st[Dr.ᐃᐃⵠⲆᐃ] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
    st[Dr.ᐃⵠⲆⵠΔ] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
    st[Dr.ⲆᐃΔⲆⵠ] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
    st[Dr.ⵠⵠⵠⲆᐃ] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
    st[Dr.ᐃⵠⲆᐃⵠ] = ["Guirlandes", "Utilisable sur les toits"];
    st[Dr.ΔⵠᐃᐃΔ] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
    st[Dr.ᐃᐃΔⲆⲆ] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    st[Dr.ΔΔⲆᐃᐃ] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    st[Dr.ᐃᐃΔⲆΔ] = ["Blé", "Peut être transformé en farine dans les moulins"];
    st[Dr.ⲆΔⲆΔᐃ] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
    st[Dr.ⵠᐃⵠⵠⵠ] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
    st[Dr.ⵠΔⵠⲆΔ] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
    st[Dr.ⲆⵠⵠⲆⵠ] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
    st[Dr.ⵠᐃⵠⲆᐃ] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
    st[Dr.ⲆⵠⲆΔⵠ] = ["Ronces", "Ça pique!"];
    st[Dr.ΔⵠΔΔⲆ] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
    st[Dr.ⲆᐃⵠᐃⲆ] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    st[Dr.ⵠⲆⲆⵠⲆ] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
    st[Dr.ⲆⵠΔΔᐃ] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    st[Dr.ΔⵠⲆᐃΔ] = ["Peau de lapin", "Vous êtes un monstre"];
    st[Dr.ΔᐃⵠᐃⲆ] = ["Fourrure blanche", "Tu es une usine à pain"];
    st[Dr.ⵠᐃᐃᐃⲆ] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
    st[Dr.ⵠΔΔᐃᐃ] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    st[Dr.ΔⲆᐃⲆΔ] = ["Écailles", "Ça sent le poisson!"];
    st[Dr.ⲆⵠⵠΔⲆ] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    st[Dr.ⵠᐃΔΔᐃ] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
    st[Dr.Ⲇⵠᐃⵠᐃ] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
    st[Dr.ᐃⵠΔⲆᐃ] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
    st[Dr.ⵠⵠΔⵠΔ] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    st[Dr.ⵠᐃⵠⵠΔ] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    st[Dr.ⲆΔΔⲆⵠ] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
    st[Dr.ᐃⲆᐃΔⲆ] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
    st[Dr.ⵠⲆΔᐃΔ] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
    st[Dr.ⲆΔⵠⲆᐃ] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
    st[Dr.ΔᐃⲆⵠΔ] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
    st[Dr.ⵠⵠⵠⵠΔ] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
    st[Dr.ⲆΔⵠΔⵠ] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
    st[Dr.ⵠΔΔⲆΔ] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
    st[Dr.ⵠⲆᐃⲆᐃ] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
    st[Dr.ᐃⵠΔᐃⲆ] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
    st[Dr.ⵠⵠⵠΔⵠ] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
    st[Dr.ᐃⲆⵠΔⲆ] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
    st[Dr.ⲆΔᐃᐃᐃ] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
    st[Dr.ΔᐃⲆⲆⵠ] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
    st[Dr.ⲆᐃᐃᐃⲆ] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
    st[Dr.ΔᐃᐃΔⲆ] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
    st[Dr.ⵠᐃᐃΔᐃ] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
    st[Dr.Ⲇᐃᐃⵠᐃ] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
    st[Dr.ⵠᐃⲆⲆΔ] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
    st[Dr.ᐃⲆⵠⲆⲆ] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
    st[Dr.ⵠⲆᐃᐃΔ] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
    st[Dr.ΔⲆⲆⵠⲆ] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
    st[Dr.ΔⵠⲆⵠⵠ] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
    st[Dr.ⲆᐃᐃΔⲆ] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
    st[Dr.Ⲇᐃᐃⵠⵠ] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", hj[Fj], "Dégâts: 2"];
    st[Dr.ⲆΔⵠⵠⲆ] = ["Pelle en or", "Creuse la terre, le sable et la neige", hj[rh], "Dégâts: 3", "Buildings Dégâts: 1"];
    st[Dr.ΔⵠᐃΔᐃ] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", hj[_s], "Dégâts: 4", "Buildings Dégâts: 1"];
    st[Dr.ᐃⵠΔᐃⵠ] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
    st[Dr.ᐃΔᐃΔΔ] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
    st[Dr.ΔΔᐃⲆΔ] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
    st[Dr.ⲆⲆⲆᐃⲆ] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
    st[Dr.ᐃⵠᐃⲆᐃ] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
    st[Dr.ᐃⵠᐃᐃΔ] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
    st[Dr.ⵠΔⵠᐃⵠ] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
    st[Dr.ᐃⵠⵠΔᐃ] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.Δⵠⵠᐃᐃ] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ⲆᐃⲆᐃᐃ] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ᐃᐃᐃⲆᐃ] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ᐃⵠⵠⵠᐃ] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ⵠΔᐃⵠⵠ] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ΔΔᐃⵠⵠ] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    st[Dr.ᐃΔᐃⵠΔ] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ᐃΔᐃⵠⵠ] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ⵠⵠⲆⲆⵠ] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
    st[Dr.ⵠΔⲆⲆΔ] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
    st[Dr.ⵠⲆᐃᐃⵠ] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
    st[Dr.ⵠᐃᐃᐃᐃ] = ["Orbe du Dragon", "Donné en Quête"];
    st[Dr.ᐃⲆⲆΔⲆ] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
    st[Dr.ᐃⲆⵠᐃⵠ] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    st[Dr.ΔⵠΔᐃΔ] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
    st[Dr.ⲆⲆΔΔⵠ] = ["Gemme bleue", "Pour les gens trop gentils"];
    st[Dr.ΔⵠᐃⲆᐃ] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
    st[Dr.ΔⲆΔᐃⵠ] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
    st[Dr.ⵠⵠΔΔⵠ] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
    st[Dr.Ⲇᐃⵠⵠᐃ] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
    st[Dr.ⵠⵠᐃᐃⵠ] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
    st[Dr.ᐃⲆᐃⵠᐃ] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
    st[Dr.ⵠᐃⲆⵠⵠ] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
    st[Dr.ΔⲆᐃΔᐃ] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
    st[Dr.ΔᐃᐃⲆⲆ] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
    st[Dr.ᐃⵠΔⵠ] = ["Sac", "Plus de place dans ton inventaire!"];
    st[Dr.ⲆΔΔⵠⲆ] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    st[Dr.ⲆⵠⵠⲆⲆ] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
    st[Dr.ⲆᐃΔᐃᐃ] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
    st[Dr.ΔⲆⲆⲆⲆ] = ["Cadenas", "Pour verrouiller un coffre"];
    st[Dr.ⵠⲆⲆⵠΔ] = ["Clé", "Pour déverrouiller un coffre"];
    st[Dr.ⵠⵠⲆΔΔ] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
    st[Dr.ᐃⲆΔⲆⲆ] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
    st[Dr.ᐃᐃⵠΔΔ] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
    st[Dr.ⲆΔⵠⲆΔ] = ["Toit", "Te cache un peu et te réchauffe"];
    st[Dr.ᐃΔΔΔΔ] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
    st[Dr.ᐃⲆⲆⲆᐃ] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
    st[Dr.ⲆⲆΔⵠⵠ] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
    st[Dr.ᐃⵠⵠΔⵠ] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
    st[Dr.ⲆⲆᐃⲆΔ] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
    st[Dr.ΔⲆᐃⲆⵠ] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
    st[Dr.ᐃΔⲆᐃᐃ] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
    st[Dr.Ⲇᐃⵠⵠⵠ] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
    st[Dr.ⲆΔⲆᐃᐃ] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
    st[Dr.ᐃᐃᐃΔⵠ] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
    st[Dr.ᐃᐃᐃᐃⵠ] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
    st[Dr.ⵠⵠΔⲆⲆ] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
    st[Dr.ΔΔΔΔⲆ] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
    st[Dr.ᐃᐃⲆᐃⲆ] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
    st[Dr.ᐃⵠᐃⲆΔ] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
    st[Dr.ΔΔⵠᐃⲆ] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
    st[Dr.ⲆⵠᐃᐃⲆ] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
    st[Dr.ᐃⲆΔⵠⵠ] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    st[Dr.ⵠⲆⵠⵠᐃ] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
    st[Dr.ⲆΔᐃⲆⲆ] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
    st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ] = "Tu ne peux pas rejoindre le serveur";
    st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] = "Expulsé: ";
    st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    st[ΔⵠᐃΔ.ΔᐃᐃᐃᐃΔⲆ] = "Ta clé est fausse";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ] = "Tu as une vieille version, rafraichis tes caches";
    st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ] = "Il n'y a plus de nouvelles ressources";
    st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] = "Tu as survécu 1 jour";
    st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] = "Tu as survécu ";
    st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ] = " jours";
    st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ] = "Tu es mort ;-;";
    st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ] = "Le serveur est complet! Spam le bouton jouer";
    st[ΔⵠᐃΔ.EMPTY] = "Cette ressource est vide";
    st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ] = " est mort";
    st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ] = "Ce n'est pas le bon outil";
    st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ] = "Tu as rejoins une équipe";
    st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ] = "Tu es mort";
    st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ] = " a rejoint l'équipe";
    st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ] = "Ton équipe a été détruite";
    st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ] = "Tu as quitté l'équipe";
    st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ] = " a quitté l'équipe";
    st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ] = "Quelqu'un a volé ton token :>";
    st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] = "Choisis un serveur";
    st[ΔⵠᐃΔ.ⲆΔⵠⵠ] = "joueurs";
    st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] = "joueurs";
    st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] = "joueurs dans ce mode";
    st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    vt[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    vt[jh] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    vt[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
    vt[Kk] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
    vt[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
    vt[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    vt[Vo] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
    vt[He] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
    vt[8] = ["Cet ours voulait juste un câlin."];
    vt[Hk] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
    vt[eg] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
    vt[Kl] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
    vt[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
    vt[na] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
    vt[Cq] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    vt[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    vt[16] = ["Un kraken a 'kraké' tes os."];
    vt[Zs] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    vt[Vs] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    vt[kt] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    vt[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
    vt[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
    ⵠΔⲆᐃΔ = "Uuunnnggg";
    ΔⲆⵠⲆⲆⲆᐃ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
  }
  function rt(a, b, c) {
    const d = ~(a & 53120) & (a | 53120);
    const e = b ^ 45870;
    const f = ~(c & 7909) & c | ~(c & 7909) & 7909;
    return ((50151 + (function (b, c, d, e, f, g) {
      const i = ~(e & 60937) & 60937 | ~(e & 60937) & e;
      const a = (8 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> yb & 255));
      const j = Pf((24 << (b >> 24 & $l)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (0 << (b & 255)), ~(c & 26589) & 26589 | ~(c & 26589) & c, (d | 39451) & ~(d & 39451));
      (function (a, b) {
        const c = a ^ 8264;
        const d = b ^ 21901;
        const e = Ia(c, d, c);
        const f = function (b, c, d, e) {
          const f = ~(b & 28113) & (b | 28113);
          const g = (c | 43107) & ~(c & 43107);
          const i = (12345 + (46617 + d) * 1103515245) % 2147483648;
          const a = (0 << (e >> 8 & 255)) + (16 << (e & 255)) + (24 << (e >> 24 & qn)) + (8 << (e >> 16 & gk));
          const j = Tk(f, g, i, a, f, g);
          (function (b, c, d, e, f) {
            const i = ~(b & 26586) & 26586 | ~(b & 26586) & b;
            const j = (12345 + (4167 + c) * 1103515245) % 2147483648;
            const a = (2147483587 + (d + 59265) * 2147483629) % 2147483647;
            const k = (e | 30694) & ~(e & 30694);
            const h = ~(f & 41846) & 41846 | ~(f & 41846) & f;
            const l = iw(i, j, a, k, h, i);
            const g = iw(j, a, k, h, i, j);
          })(i, a, f, g, i);
          return j ^ 44009;
        }(d, c, d, c);
      })(i, a);
      return (j | 23229) & ~(j & 23229);
    }(d, e, f, d, e) ^ of(d, e, f, d, e))) * 214013 + 2531011) % 4294967296;
  }
  var st = [];
  const tt = ph;
  for (var ut = 0; ut < 344; ut++) {
    st[ut] = "";
  }
  var vt = [];
  $(".md-languages").on("click", function () {
    $(this).toggleClass("active");
  });
  $(".md-languages ul li").on("click", function () {
    var a = $(this).text();
    if (a === "English") {
      Rs();
    } else if (a === "Français") {
      qt();
    } else if (a === "Deutsch") {
      ht();
    } else if (a === "Español") {
      $s();
    } else if (a === "Português") {
      Us();
    } else if (a === "Русский") {
      Ts();
    } else if (a === "Polski") {
      pt();
    }
    ᐃΔⵠΔΔ = [];
    Ww.ΔⲆᐃᐃ.label = [];
    $(".md-languages ul li").removeClass("active");
    $(this).addClass("active");
    $(".md-languages label button").text(a);
  });
  const wt = ls;
  const xt = Il;
  var yt;
  Qa = "EN";
  switch (navigator.language || navigator.userLanguage) {
    case "ru":
      Qa = "RU";
      break;
    case "en":
      Qa = "EN";
      break;
    case "es":
      Qa = "SP";
      break;
    case "fr":
      Qa = "FR";
      break;
    case "pl":
      Qa = "PL";
      break;
    case "de":
      Qa = "DE";
      break;
    case "pt":
      Qa = "PT";
  }
  if (Qa === "FR") {
    $(".md-languages label button").text("Français");
    yt = qt;
  } else if (Qa === "PL") {
    $(".md-languages label button").text("Polski");
    yt = pt;
  } else if (Qa === "PT") {
    $(".md-languages label button").text("Português");
    yt = Us;
  } else if (Qa === "SP") {
    $(".md-languages label button").text("Español");
    yt = $s;
  } else if (Qa === "RU") {
    $(".md-languages label button").text("Русский");
    yt = Ts;
  } else if (Qa === "DE") {
    $(".md-languages label button").text("Deutsch");
    yt = ht;
  } else {
    $(".md-languages label button").text("English");
    yt = Rs;
  }
  Δᐃ = {
    ᐃⵠΔᐃᐃⲆᐃⲆΔ: "img/logo.png",
    ⲆΔⲆⵠⵠΔⵠ: "img/mapday.png",
    ⵠΔᐃⵠⵠⵠᐃ: "img/mapnight.png",
    ᐃᐃⲆΔⵠΔᐃⵠᐃ: "img/bigzday.png",
    ⵠᐃⲆⵠⲆᐃⵠⵠΔ: "img/bigznight.png",
    ᐃΔΔᐃⲆᐃⲆ: "img/bigday-river1.png",
    ⲆᐃⲆΔⵠᐃⵠⲆⵠ: "img/bigday-lake.png",
    ᐃᐃⲆᐃⵠΔᐃ: "img/bigday-berry.png",
    ΔⲆⲆΔⲆᐃᐃ: "img/bigday-stone1.png",
    ΔΔⲆᐃΔΔⵠ: "img/bigday-stone2.png",
    ⵠⵠⵠⵠΔᐃⲆ: "img/bigday-gold1.png",
    ᐃⵠᐃⵠᐃⵠⵠ: "img/bigday-gold2.png",
    ⲆⵠᐃⵠⲆΔⲆ: "img/bigday-emerald1.png",
    ⲆᐃⲆᐃΔⲆⵠ: "img/bigday-emerald2.png",
    ᐃⲆΔᐃⲆᐃΔ: "img/bigday-amethyst.png",
    ΔⵠΔᐃΔΔΔ: "img/bigday-bear.png",
    ᐃᐃΔⵠⵠⲆⲆ: "img/bigday-cave.png",
    ⲆᐃⲆΔΔᐃⵠ: "img/bigday-diamond.png",
    ⵠⵠⲆⲆᐃⵠⲆ: "img/bigday-island.png",
    ⵠΔΔΔᐃᐃΔ: "img/bigday-reidite.png",
    ΔⵠΔⲆΔΔⲆ: "img/bigday-spider.png",
    ᐃᐃⵠᐃᐃΔⲆ: "img/bigday-wolf.png",
    ⵠᐃΔᐃᐃΔⲆ: "img/bigday-fir-tree.png",
    ᐃᐃⵠΔⵠⵠᐃ: "img/bigday-fox.png",
    ⲆΔⲆⲆⲆⵠΔ: "img/bigday-kraken.png",
    ᐃΔᐃⲆΔⵠᐃ: "img/bigday-piranha.png",
    ΔⲆᐃⲆΔⲆΔ: "img/bigday-cactus.png",
    ⵠⲆΔⲆᐃⲆᐃ: "img/bigday-magma.png",
    ΔΔⵠᐃⵠΔⲆ: "img/bigday-river1.png",
    ᐃᐃᐃⲆΔΔΔⵠⵠ: "img/bignight-lake.png",
    ⲆⵠⵠⲆΔᐃⵠⵠΔ: "img/bignight-berry.png",
    ΔⵠⵠᐃⲆⵠⲆ: "img/bignight-stone1.png",
    ⵠᐃⵠⵠᐃΔⲆ: "img/bignight-stone2.png",
    ⵠᐃⵠᐃⵠⵠΔ: "img/bignight-gold1.png",
    ⵠⵠⵠΔᐃᐃΔ: "img/bignight-gold2.png",
    ᐃΔⵠᐃⵠΔᐃ: "img/bignight-emerald1.png",
    ΔΔΔᐃᐃᐃΔ: "img/bignight-emerald2.png",
    ⵠⵠⲆⲆᐃᐃᐃ: "img/bignight-amethyst.png",
    ⲆⲆᐃᐃⲆⲆⲆ: "img/bignight-bear.png",
    ⲆⲆᐃΔⲆΔᐃ: "img/bignight-cave.png",
    ⲆⵠⲆⵠⲆⲆⵠ: "img/bignight-diamond.png",
    ΔⲆⵠΔΔᐃΔ: "img/bignight-island.png",
    ⲆΔⵠᐃΔᐃᐃ: "img/bignight-reidite.png",
    ΔⵠⲆⵠⵠⵠⲆ: "img/bignight-spider.png",
    ⲆΔᐃⵠⵠᐃⲆ: "img/bignight-wolf.png",
    ⵠⲆⲆⵠⵠΔᐃ: "img/bignight-fir-tree.png",
    ⵠᐃⲆΔᐃⲆⵠ: "img/bignight-fox.png",
    ᐃⲆΔⲆᐃⵠᐃ: "img/bignight-kraken.png",
    ⵠΔᐃⵠⵠⵠⵠ: "img/bignight-piranha.png",
    ΔΔⵠᐃΔⵠᐃ: "img/bignight-cactus.png",
    ⵠᐃᐃⲆΔΔΔ: "img/bignight-magma.png",
    ΔⲆⲆⵠΔᐃᐃ: "img/bigday-desert.png",
    ΔΔΔΔᐃᐃΔ: "img/bigday-winter.png",
    ⵠⲆᐃⵠⲆᐃⲆ: "img/bigday-lava.png",
    ᐃⵠⵠⵠᐃⵠᐃ: "img/bigday-forest.png",
    ΔΔⵠⲆᐃΔᐃ: "img/bignight-desert.png",
    ᐃⲆᐃΔⵠⲆΔ: "img/bignight-winter.png",
    ᐃΔᐃΔΔᐃⵠ: "img/bignight-lava.png",
    ᐃᐃᐃᐃⲆΔΔ: "img/bignight-forest.png",
    ⵠᐃΔΔⵠᐃΔ: "img/day-river-wave.png",
    ⵠⲆᐃⲆΔⲆᐃ: "img/night-river-wave.png",
    ⲆᐃⲆΔⲆⲆᐃ: "img/day-fog0.png",
    ⵠᐃᐃⲆΔᐃⵠ: "img/day-fog1.png",
    ΔⵠᐃⵠΔΔΔ: "img/day-fog2.png",
    ΔⲆᐃⵠᐃΔΔ: "img/night-fog0.png",
    ΔⵠⲆᐃⲆᐃⲆ: "img/night-fog1.png",
    ⲆΔᐃⲆᐃΔΔ: "img/night-fog2.png",
    ⲆᐃⲆⵠⲆΔᐃ: "img/day-fogdesert0.png",
    ᐃⵠⵠⲆⲆⲆᐃ: "img/day-fogdesert1.png",
    ᐃᐃⲆΔⲆᐃⵠ: "img/day-fogdesert2.png",
    ⲆΔⵠⵠⵠⲆⵠ: "img/night-fogdesert0.png",
    ΔⲆⲆⲆΔⲆΔ: "img/night-fogdesert1.png",
    ⵠᐃⵠΔⵠⵠⵠ: "img/night-fogdesert2.png",
    ⲆᐃⵠⵠⲆⲆΔ: "img/day-cross-server.png",
    ⵠΔⵠⵠᐃᐃΔ: "img/day-here-server.png",
    ⲆᐃⲆⵠΔⵠⲆ: "img/day-finish-server.png",
    ΔⲆⵠᐃⵠⲆⵠ: "img/day-item-server.png",
    ⲆⵠⲆΔⲆⲆⵠ: "img/day-skull-server.png",
    ⲆΔⲆⲆⲆΔᐃ: "img/night-cross-server.png",
    ⵠⲆⵠⲆᐃᐃΔ: "img/night-here-server.png",
    ᐃΔⵠᐃⵠⵠⲆ: "img/night-finish-server.png",
    ⵠΔᐃⲆⵠⲆⵠ: "img/night-item-server.png",
    ᐃⵠⲆΔᐃⲆᐃ: "img/night-skull-server.png",
    ⵠᐃⲆΔᐃΔⲆ: "img/day-reidite0.png",
    ⵠᐃⲆⵠⵠᐃⵠ: "img/night-reidite0.png",
    ᐃⵠⲆᐃΔᐃᐃ: "img/day-reidite1.png",
    ΔΔⲆⵠⲆΔⵠ: "img/night-reidite1.png",
    ΔⵠΔᐃΔⵠᐃ: "img/day-reidite2.png",
    ΔΔⲆⲆⲆⲆᐃ: "img/night-reidite2.png",
    ᐃⲆᐃᐃᐃΔⲆ: "img/day-lava1.png",
    ΔⲆᐃⲆᐃᐃᐃ: "img/night-lava1.png",
    ⵠᐃᐃᐃᐃΔᐃ: "img/day-lava2.png",
    ⵠⲆⲆᐃᐃΔᐃ: "img/night-lava2.png",
    ΔⵠᐃⵠᐃⲆΔ: "img/day-lava3.png",
    ⵠⲆⲆⵠⲆⵠⲆ: "img/night-lava3.png",
    ⵠⵠⵠⵠⵠᐃⵠ: "img/day-lava4.png",
    ᐃᐃΔⲆᐃᐃᐃ: "img/night-lava4.png",
    ⲆᐃᐃᐃᐃΔⵠ: "img/day-lava5.png",
    ΔᐃΔⲆⵠⲆⲆ: "img/night-lava5.png",
    ᐃⲆΔᐃΔᐃΔ: "img/day-lava6.png",
    ⲆᐃΔⲆᐃⲆⵠ: "img/night-lava6.png",
    ⲆⲆⵠᐃⵠᐃᐃ: "img/day-lava-ground1.png",
    ᐃΔⵠⲆⲆΔⲆ: "img/night-lava-ground1.png",
    ΔΔᐃⵠᐃⵠᐃ: "img/day-lava-ground2.png",
    ᐃᐃⲆⲆΔⵠᐃ: "img/night-lava-ground2.png",
    ᐃΔᐃΔⵠⲆΔ: "img/day-lava-ground3.png",
    ᐃⵠⵠⵠⲆⵠⲆ: "img/night-lava-ground3.png",
    ΔⲆΔᐃⵠᐃᐃ: "img/day-lava-ground4.png",
    ⵠΔΔⵠᐃⲆΔ: "img/night-lava-ground4.png",
    ⲆⲆᐃⵠⲆⵠᐃ: "img/day-lava-ground5.png",
    ⲆΔⲆⵠΔⲆᐃ: "img/night-lava-ground5.png",
    ⵠⵠΔⲆⵠΔⲆ: "img/day-lava-ground6.png",
    ⲆᐃⲆⲆΔᐃᐃ: "img/night-lava-ground6.png",
    ⲆΔΔᐃΔΔⲆ: "img/day-fire-mob.png",
    ⵠⲆⵠΔᐃΔᐃ: "img/night-fire-mob.png",
    ⵠⲆⲆⲆⲆᐃⲆ: "img/hurt-fire-mob.png",
    ΔᐃⲆᐃΔᐃᐃ: "img/day-diamond-protection.png",
    ᐃᐃᐃᐃᐃⵠΔ: "img/night-diamond-protection.png",
    ᐃⵠⵠⲆᐃᐃᐃ: "img/day-hand-diamond-protection.png",
    ⲆΔⲆΔⲆⲆⲆ: "img/night-hand-diamond-protection.png",
    ⵠΔᐃⵠᐃⲆⵠ: "img/inv-diamond-protection-out.png",
    ᐃΔΔⵠⵠᐃⲆ: "img/inv-diamond-protection-in.png",
    ⵠΔⲆᐃᐃⲆᐃ: "img/inv-diamond-protection-click.png",
    ⲆᐃⲆⵠΔⵠΔ: "img/day-amethyst-protection.png",
    ΔΔⵠΔⲆⲆᐃ: "img/night-amethyst-protection.png",
    ΔⵠΔᐃᐃΔᐃΔᐃ: "img/day-hand-amethyst-protection.png",
    ⲆⲆⲆΔΔⲆΔⵠⵠ: "img/night-hand-amethyst-protection.png",
    ΔΔⲆⲆΔᐃᐃ: "img/inv-amethyst-protection-out.png",
    ⵠᐃΔⵠⲆⵠⲆ: "img/inv-amethyst-protection-in.png",
    ΔᐃⲆⲆᐃΔᐃ: "img/inv-amethyst-protection-click.png",
    ⲆΔⵠΔⲆΔΔ: "img/day-reidite-sword.png",
    ᐃⵠᐃⵠᐃᐃⵠ: "img/night-reidite-sword.png",
    ᐃⵠᐃᐃΔᐃⵠ: "img/inv-reidite-sword-out.png",
    ⲆⲆᐃⲆⲆⵠᐃ: "img/inv-reidite-sword-in.png",
    ᐃⵠⲆⵠᐃᐃⵠ: "img/inv-reidite-sword-click.png",
    ⲆⲆᐃΔⵠⲆⲆ: "img/inv-reidite-out.png",
    ⵠⵠΔⵠⲆⲆᐃ: "img/inv-reidite-in.png",
    ⲆᐃⲆⲆⵠⲆⲆ: "img/inv-reidite-click.png",
    ΔᐃΔⲆᐃⵠⲆ: "img/inv-flame-out.png",
    ᐃᐃⲆⵠⵠᐃⵠ: "img/inv-flame-in.png",
    ⲆᐃΔᐃΔΔⵠ: "img/inv-flame-click.png",
    ᐃᐃⲆᐃᐃΔⵠ: "img/day-magma-buble0.png",
    ⲆⵠᐃΔᐃⵠⲆ: "img/night-magma-buble0.png",
    ΔᐃᐃΔⵠᐃⵠ: "img/day-magma-buble1.png",
    ᐃⲆⵠᐃΔⲆᐃ: "img/night-magma-buble1.png",
    ᐃⲆᐃᐃΔⲆⲆ: "img/day-magma-buble2.png",
    ΔΔⵠⲆⵠᐃⵠ: "img/night-magma-buble2.png",
    ⵠᐃⲆᐃⲆⵠⲆ: "img/day-lava-dragon.png",
    ⲆⵠΔᐃⲆⲆᐃ: "img/night-lava-dragon.png",
    ᐃᐃᐃΔΔⲆⵠΔᐃ: "img/day-fire-dragon.png",
    ⲆΔⲆⲆⲆⵠᐃⲆᐃ: "img/night-fire-dragon.png",
    ΔΔΔᐃΔᐃⲆ: "img/hurt-lava-dragon.png",
    ΔᐃⵠᐃⲆⲆΔ: "img/day-lava-wing-left.png",
    ΔⵠΔᐃⲆⲆΔ: "img/night-lava-wing-left.png",
    ΔᐃᐃΔⲆⵠⵠ: "img/day-lava-wing-right.png",
    ⲆΔⵠΔᐃᐃⲆ: "img/night-lava-wing-right.png",
    ᐃⵠᐃⲆΔⵠⲆ: "img/hurt-lava-wing-left.png",
    ᐃⲆⲆⲆⲆΔⵠ: "img/hurt-lava-wing-right.png",
    ΔⵠⵠⲆᐃᐃΔ: "img/day-reidite-spear.png",
    ΔⵠΔᐃΔᐃΔ: "img/night-reidite-spear.png",
    ⵠᐃᐃⲆⵠΔΔ: "img/inv-reidite-spear-out.png",
    ᐃⵠᐃⵠΔᐃᐃ: "img/inv-reidite-spear-in.png",
    ⵠᐃⵠⵠⲆⵠⵠ: "img/inv-reidite-spear-click.png",
    ⲆΔΔΔᐃⵠⵠ: "img/day-reidite-helmet.png",
    ᐃⵠⵠΔᐃΔⲆ: "img/night-reidite-helmet.png",
    ΔΔⲆΔᐃᐃΔ: "img/inv-reidite-helmet-out.png",
    ⲆᐃⵠⵠΔⲆᐃ: "img/inv-reidite-helmet-in.png",
    ᐃᐃⵠⵠΔⲆᐃ: "img/inv-reidite-helmet-click.png",
    ⵠᐃᐃⲆᐃΔᐃ: "img/day-hand-reidite-protection.png",
    ΔᐃⵠᐃⵠΔᐃ: "img/night-hand-reidite-protection.png",
    ᐃΔⵠᐃⵠⵠⵠ: "img/day-reidite-protection.png",
    ΔᐃⵠⲆⲆⲆⲆ: "img/night-reidite-protection.png",
    ⲆⲆΔᐃᐃⵠᐃ: "img/inv-reidite-protection-out.png",
    ᐃᐃⲆⲆⵠⲆⲆ: "img/inv-reidite-protection-in.png",
    ⲆΔΔⲆΔᐃⲆ: "img/inv-reidite-protection-click.png",
    ⵠΔᐃⵠⵠΔΔ: "img/day-lava-dragon-sword.png",
    ᐃΔⲆᐃΔΔⵠ: "img/night-lava-dragon-sword.png",
    ΔⲆⲆⲆⵠΔΔ: "img/inv-lava-dragon-sword-out.png",
    ΔⵠⵠⲆΔᐃΔ: "img/inv-lava-dragon-sword-in.png",
    ⲆΔΔᐃΔⲆⲆ: "img/inv-lava-dragon-sword-click.png",
    ⵠᐃⲆⵠⵠᐃᐃ: "img/day-lava-spear.png",
    ΔⵠΔᐃᐃⲆⲆ: "img/night-lava-spear.png",
    ⲆⲆⲆᐃΔⵠᐃ: "img/inv-lava-spear-out.png",
    ⲆⵠⵠᐃΔⵠΔ: "img/inv-lava-spear-in.png",
    ΔⵠⲆⲆⲆΔᐃ: "img/inv-lava-spear-click.png",
    ⲆΔᐃⵠⵠΔΔ: "img/day-lava-helmet.png",
    ⲆⲆΔᐃᐃⲆⲆ: "img/night-lava-helmet.png",
    ΔΔⵠⵠⵠᐃⵠ: "img/inv-lava-helmet-out.png",
    ᐃΔⲆΔΔⵠⵠ: "img/inv-lava-helmet-in.png",
    ⲆΔⵠⵠᐃⲆⲆ: "img/inv-lava-helmet-click.png",
    ᐃⲆⲆⵠᐃᐃΔ: "img/day-witch-hat.png",
    ⵠⲆⵠⵠⲆⲆⲆ: "img/night-witch-hat.png",
    ᐃⲆⵠΔᐃΔΔ: "img/inv-witch-hat-out.png",
    ᐃⵠⵠⲆΔΔⵠ: "img/inv-witch-hat-in.png",
    ⲆΔᐃⲆⲆᐃⲆ: "img/inv-witch-hat-click.png",
    ᐃⲆⲆΔΔⲆⵠ: "img/day-nimbus2000.png",
    ⵠᐃⵠΔⲆⲆⵠ: "img/night-nimbus2000.png",
    ⵠⲆⵠᐃᐃⲆΔ: "img/inv-nimbus2000-out.png",
    ΔⵠΔⵠⵠᐃⵠ: "img/inv-nimbus2000-in.png",
    ᐃΔⲆⲆᐃᐃᐃ: "img/inv-nimbus2000-click.png",
    ⲆΔⲆΔⵠⵠᐃ: "img/day-accessory1-pacques.png",
    ΔΔΔᐃᐃᐃᐃ: "img/night-accessory1-pacques.png",
    ⲆᐃᐃⵠΔΔΔ: "img/day-accessory2-pacques.png",
    ᐃᐃⵠⵠΔⲆⵠ: "img/night-accessory2-pacques.png",
    ⵠᐃⵠⲆᐃⵠⵠ: "img/day-accessory3-pacques.png",
    ΔⵠⵠⵠⵠⲆⲆ: "img/night-accessory3-pacques.png",
    ⵠΔⲆⵠᐃⵠΔ: "img/day-accessory5-pacques.png",
    ΔⵠⲆΔⵠⵠΔ: "img/night-accessory5-pacques.png",
    ⵠⲆⲆΔⲆΔⵠ: "img/day-accessory6-pacques.png",
    ⵠⵠΔΔⲆᐃⲆ: "img/night-accessory6-pacques.png",
    ΔⲆⵠⲆΔⵠⲆ: "img/day-accessory7-pacques.png",
    ΔᐃⲆᐃᐃⵠᐃ: "img/night-accessory7-pacques.png",
    ⵠΔᐃⲆᐃⲆᐃ: "img/day-accessory8-pacques.png",
    ⲆⲆᐃⵠᐃⵠⲆ: "img/night-accessory8-pacques.png",
    ⲆⲆⲆⲆⵠΔⵠ: "img/day-bag-pacques.png",
    ⲆᐃΔᐃⵠⲆⲆ: "img/night-bag-pacques.png",
    ⲆⲆⵠⵠᐃⲆⲆ: "img/day-carrot.png",
    ⲆⲆⵠᐃⵠⲆᐃ: "img/night-carrot.png",
    ⵠⵠΔⲆᐃⵠⲆ: "img/day-carrot-dried.png",
    ΔⲆΔⵠⲆⲆᐃ: "img/night-carrot-dried.png",
    ⵠᐃΔΔⵠⵠᐃ: "img/day-tomato-herb.png",
    ΔⲆⵠⲆⲆⵠⵠ: "img/night-tomato-herb.png",
    ⵠᐃᐃⵠⵠΔⲆ: "img/day-tomato-herb-dried.png",
    ⵠⲆⲆⲆᐃΔⵠ: "img/night-tomato-herb-dried.png",
    ⵠΔΔⲆᐃΔΔ: "img/day-tomato.png",
    ΔⲆⵠⵠⵠᐃΔ: "img/night-tomato.png",
    ᐃΔᐃⵠᐃΔⵠ: "img/inv-carrot-out.png",
    ⵠᐃⲆⵠᐃⵠᐃ: "img/inv-carrot-in.png",
    ᐃᐃᐃⲆⵠⲆⵠ: "img/inv-carrot-click.png",
    ᐃⵠᐃⵠΔⲆΔ: "img/inv-tomato-out.png",
    ⵠⵠΔΔᐃΔᐃ: "img/inv-tomato-in.png",
    ᐃⵠⲆⲆΔΔⲆ: "img/inv-tomato-click.png",
    ⲆᐃΔⲆⵠⲆⵠ: "img/day-player0.png",
    ⵠⵠᐃⵠⲆⲆΔ: "img/night-player0.png",
    ⵠΔⲆᐃΔᐃΔ: "img/day-player1.png",
    ᐃⵠⵠᐃⵠⵠⵠ: "img/night-player1.png",
    ᐃᐃᐃᐃⵠⲆΔ: "img/day-player2.png",
    ᐃⲆⲆⲆΔᐃᐃ: "img/night-player22.png",
    ᐃΔⲆᐃⲆᐃⵠ: "img/day-player3.png",
    ⲆΔⵠᐃᐃⲆᐃ: "img/night-player33.png",
    ⲆⲆᐃᐃᐃᐃⲆ: "img/day-player4.png",
    ᐃⲆᐃᐃⵠⵠⲆ: "img/night-player4.png",
    ᐃᐃⲆⲆΔⵠΔ: "img/day-player5.png",
    ⲆΔΔⲆⲆⵠⵠ: "img/night-player5.png",
    ⵠᐃΔⵠᐃᐃᐃ: "img/day-player6.png",
    ᐃⲆᐃΔⲆⲆⵠ: "img/night-player6.png",
    ⵠⲆᐃᐃⵠⵠⲆ: "img/day-player7.png",
    ⲆⲆⲆⵠᐃⵠΔ: "img/night-player7.png",
    ⵠΔⵠⲆᐃᐃⵠ: "img/day-player8.png",
    ᐃⲆⲆⲆΔⵠᐃ: "img/night-player8.png",
    ΔⲆⵠⵠΔⵠⵠ: "img/day-player9.png",
    ⵠⲆᐃⲆⵠⲆⲆ: "img/night-player9.png",
    ⲆⵠᐃⲆΔΔΔ: "img/day-player10.png",
    Ⲇᐃⵠⵠⵠᐃᐃ: "img/night-player10.png",
    ⵠΔᐃᐃΔΔΔ: "img/day-player11.png",
    ΔⲆᐃΔΔᐃΔ: "img/night-player11.png",
    ΔΔⲆΔⵠⲆⲆ: "img/day-player12.png",
    ⲆᐃΔⲆⵠⵠΔ: "img/night-player12.png",
    ⲆⲆΔⵠⲆΔⲆ: "img/day-player13.png",
    ⵠᐃⲆⲆΔΔⲆ: "img/night-player13.png",
    ⵠᐃΔᐃⵠⲆΔ: "img/day-player14.png",
    ᐃⵠΔⵠⲆⵠⵠ: "img/night-player14.png",
    ᐃⲆᐃᐃⲆⲆΔ: "img/day-player15.png",
    ᐃᐃⵠⵠⲆᐃᐃ: "img/night-player15.png",
    ᐃΔⲆΔⵠⵠⲆ: "img/day-player16.png",
    ᐃᐃⵠⵠᐃᐃΔ: "img/night-player16.png",
    ⵠⲆΔᐃΔⵠΔ: "img/day-player17.png",
    ΔⲆⵠⵠⲆᐃⲆ: "img/night-player17.png",
    ᐃⵠⵠⲆΔⲆᐃ: "img/day-player18.png",
    ᐃⲆᐃΔΔⲆⲆ: "img/night-player18.png",
    ᐃᐃΔⵠᐃⵠΔ: "img/day-player19.png",
    ᐃΔⵠⲆΔⲆΔ: "img/night-player19.png",
    ᐃᐃᐃⵠⵠᐃΔ: "img/day-hand-player0.png",
    ⵠᐃᐃᐃⵠⵠΔ: "img/night-hand-player0.png",
    ΔΔΔᐃᐃᐃⵠ: "img/day-hand-player1.png",
    ⲆⵠᐃᐃᐃΔᐃ: "img/night-hand-player1.png",
    ᐃΔⵠᐃⵠⲆⲆ: "img/day-hand-player2.png",
    ᐃⵠᐃᐃⵠᐃᐃ: "img/night-hand-player22.png",
    ⵠᐃⲆⵠΔΔⲆ: "img/day-hand-player3.png",
    ⵠⲆᐃᐃᐃᐃΔ: "img/night-hand-player33.png",
    ᐃᐃⵠΔⵠⲆⲆ: "img/day-hand-player4.png",
    ᐃⵠΔⵠᐃΔⵠ: "img/night-hand-player4.png",
    ᐃⲆⲆⲆΔᐃⵠ: "img/day-hand-player5.png",
    ⵠᐃⵠⵠΔᐃᐃ: "img/night-hand-player5.png",
    ΔⵠⲆΔΔᐃⵠ: "img/day-hand-player6.png",
    ⲆⲆⲆⵠⲆⵠᐃ: "img/night-hand-player6.png",
    ᐃΔᐃⵠΔᐃᐃ: "img/day-hand-player7.png",
    ᐃᐃⵠΔᐃΔᐃ: "img/night-hand-player7.png",
    ᐃᐃΔᐃᐃᐃᐃ: "img/day-hand-player8.png",
    ⵠⵠⲆᐃΔΔΔ: "img/night-hand-player8.png",
    ᐃΔΔΔⵠⵠᐃ: "img/day-hand-player9.png",
    ᐃⲆᐃⲆᐃⵠΔ: "img/night-hand-player9.png",
    ᐃΔⵠΔΔᐃΔ: "img/day-hand-player10.png",
    ⲆⲆⵠⲆΔⲆΔ: "img/night-hand-player10.png",
    ᐃᐃⲆⵠⵠⲆΔ: "img/day-hand-player11.png",
    ΔⵠⲆⲆᐃⲆⲆ: "img/night-hand-player11.png",
    ΔΔΔⲆΔⲆΔ: "img/day-hand-player12.png",
    ⲆⲆⵠᐃⲆⵠΔ: "img/night-hand-player12.png",
    ⵠΔⵠᐃΔΔⲆ: "img/day-hand-player13.png",
    ⵠΔⲆΔΔⲆΔ: "img/night-hand-player13.png",
    ⵠⵠᐃⵠᐃⵠᐃ: "img/day-hand-player14.png",
    ⵠΔⲆⲆⲆᐃⵠ: "img/night-hand-player14.png",
    ᐃⲆⵠΔⵠᐃⵠ: "img/day-hand-player15.png",
    ⵠΔΔⵠᐃΔᐃ: "img/night-hand-player15.png",
    ⲆΔⲆΔΔⵠⲆ: "img/day-hand-player16.png",
    ⵠⲆⲆᐃΔⲆΔ: "img/night-hand-player16.png",
    ⲆⲆᐃⵠⵠΔⵠ: "img/day-hand-player17.png",
    ⵠᐃⲆᐃΔⵠΔ: "img/night-hand-player17.png",
    ᐃᐃᐃⲆⵠΔᐃ: "img/day-hand-player18.png",
    ΔΔΔⲆᐃⵠⲆ: "img/night-hand-player18.png",
    ᐃᐃⵠⵠΔⵠᐃ: "img/day-hand-player19.png",
    ⲆⵠΔⲆⵠⲆᐃ: "img/night-hand-player19.png",
    ⵠΔⲆⲆΔⵠⵠ: "img/day-accessory4.png",
    ᐃΔⲆΔⲆΔᐃ: "img/night-accessory4.png",
    ⲆⵠᐃᐃⲆⲆΔ: "img/day-accessory9.png",
    ⲆᐃᐃΔΔⲆΔ: "img/night-accessory9.png",
    ΔΔΔⲆΔⵠⲆ: "img/day-accessory10.png",
    ⵠⲆΔⲆΔⲆⲆ: "img/night-accessory10.png",
    ΔⵠᐃⲆΔⲆⵠ: "img/day-accessory11.png",
    ᐃΔⲆᐃᐃⲆΔ: "img/night-accessory11.png",
    ΔᐃⵠᐃⵠⲆⲆ: "img/day-accessory12.png",
    ΔⵠΔΔᐃⲆⲆ: "img/night-accessory12.png",
    ΔⵠⲆⲆᐃⵠⲆ: "img/day-bag.png",
    ⲆⲆᐃΔⲆΔⵠ: "img/night-bag.png",
    ⵠⲆᐃΔⲆΔᐃ: "img/inv-bag-out.png",
    ΔⲆⲆⵠⲆⲆⵠ: "img/inv-bag-in.png",
    ⲆᐃⲆⵠⵠᐃⲆ: "img/inv-bag-click.png",
    ᐃᐃⵠᐃᐃΔΔ: "img/day-pitchfork.png",
    ᐃⲆⲆᐃΔΔΔ: "img/night-pitchfork.png",
    ⲆᐃΔᐃᐃᐃⲆ: "img/inv-pitchfork-out.png",
    ΔΔⲆⲆΔᐃⵠ: "img/inv-pitchfork-in.png",
    ᐃΔΔⵠⵠⵠᐃ: "img/inv-pitchfork-click.png",
    ᐃⲆᐃᐃΔⲆⵠ: "img/inv-wood-spike-door-out.png",
    ᐃᐃⵠΔᐃⲆᐃ: "img/inv-wood-spike-door-in.png",
    ⵠᐃΔⵠⵠᐃᐃ: "img/inv-wood-spike-door-click.png",
    ⲆΔⲆⲆᐃΔⵠ: "img/inv-stone-spike-door-out.png",
    ᐃⵠΔⵠᐃⲆΔ: "img/inv-stone-spike-door-in.png",
    ⵠᐃⲆⵠⲆⵠᐃ: "img/inv-stone-spike-door-click.png",
    ᐃⲆⵠΔⵠΔᐃ: "img/inv-gold-spike-door-out.png",
    ᐃᐃⲆⵠⵠΔᐃ: "img/inv-gold-spike-door-in.png",
    ᐃΔᐃΔⲆⵠⵠ: "img/inv-gold-spike-door-click.png",
    ⵠᐃΔᐃΔΔᐃ: "img/inv-diamond-spike-door-out.png",
    ᐃⲆⲆⲆΔΔⲆ: "img/inv-diamond-spike-door-in.png",
    ΔᐃⵠᐃⵠΔⵠ: "img/inv-diamond-spike-door-click.png",
    ⵠᐃᐃΔᐃᐃΔ: "img/inv-amethyst-spike-door-out.png",
    ⲆΔΔΔΔΔᐃ: "img/inv-amethyst-spike-door-in.png",
    ⲆⵠᐃᐃⵠⲆΔ: "img/inv-amethyst-spike-door-click.png",
    ⲆⵠᐃⵠⵠⲆᐃ: "img/day-wood-spike-door.png",
    ΔⲆᐃⵠᐃⲆⲆ: "img/night-wood-spike-door.png",
    ⲆⵠⲆⲆⲆΔⵠ: "img/day-stone-spike-door.png",
    ⲆΔⵠΔⵠⵠᐃ: "img/night-stone-spike-door.png",
    ⵠⲆΔΔⲆⲆᐃ: "img/day-gold-spike-door.png",
    ᐃⵠⵠⲆⵠᐃᐃ: "img/night-gold-spike-door.png",
    ΔᐃⵠⲆⵠⲆⵠ: "img/day-diamond-spike-door.png",
    ⵠᐃᐃⲆⲆⲆΔ: "img/night-diamond-spike-door.png",
    ΔⵠᐃΔⵠⵠΔ: "img/day-amethyst-spike-door.png",
    ⵠᐃᐃⲆᐃᐃᐃ: "img/night-amethyst-spike-door.png",
    ΔᐃΔΔⵠⵠΔ: "img/inv-reidite-spike-door-out.png",
    ᐃΔⵠⵠⵠᐃⵠ: "img/inv-reidite-spike-door-in.png",
    ᐃⲆΔⵠⲆⵠⲆ: "img/inv-reidite-spike-door-click.png",
    ⲆⲆΔⲆᐃⲆᐃ: "img/inv-reidite-door-out.png",
    ᐃΔΔⵠⵠⵠⲆ: "img/inv-reidite-door-in.png",
    ⲆΔΔᐃΔᐃⲆ: "img/inv-reidite-door-click.png",
    ᐃᐃⲆⵠⲆΔⵠ: "img/inv-reidite-spike-out.png",
    ᐃⵠⲆⵠⲆⲆⵠ: "img/inv-reidite-spike-in.png",
    Ⲇⵠⵠᐃⵠᐃⵠ: "img/inv-reidite-spike-click.png",
    ᐃᐃⲆΔⵠⵠᐃ: "img/inv-reidite-wall-out.png",
    ᐃⲆⲆᐃⲆⲆΔ: "img/inv-reidite-wall-in.png",
    ⲆⲆᐃⵠᐃΔᐃ: "img/inv-reidite-wall-click.png",
    ΔᐃⵠᐃᐃⵠⲆ: "img/day-reidite-wall.png",
    ΔⲆΔⵠⵠⵠΔ: "img/night-reidite-wall.png",
    ⵠᐃⲆⲆⵠⲆΔ: "img/day-reidite-door.png",
    ⵠⲆⵠⲆⲆΔⲆ: "img/night-reidite-door.png",
    ⵠᐃⲆⲆⵠⵠⵠ: "img/day-reidite-spike.png",
    ΔⲆⵠⵠⵠⵠⵠ: "img/night-reidite-spike.png",
    ΔⵠⵠΔⲆⲆᐃ: "img/day-reidite-spike-door.png",
    ⵠⵠⲆⵠᐃΔⲆ: "img/night-reidite-spike-door.png",
    ⵠⲆⲆᐃⲆⵠᐃ: "img/inv-reidite-pickaxe-out.png",
    ⵠⲆⲆⵠᐃⲆΔ: "img/inv-reidite-pickaxe-in.png",
    ΔⲆΔⵠⵠⵠᐃ: "img/inv-reidite-pickaxe-click.png",
    ⲆΔΔⵠⵠΔΔ: "img/day-reidite-pickaxe.png",
    ⲆΔᐃᐃᐃⵠᐃ: "img/night-reidite-pickaxe.png",
    ΔⵠΔΔΔⵠΔ: "img/inv-reidite-hammer-out.png",
    ⵠᐃⵠᐃᐃⵠᐃ: "img/inv-reidite-hammer-in.png",
    ΔⵠⵠᐃⲆΔⵠ: "img/inv-reidite-hammer-click.png",
    ΔⲆΔΔⵠΔᐃ: "img/day-reidite-hammer.png",
    ⲆⲆΔᐃΔⲆᐃ: "img/night-reidite-hammer.png",
    ᐃᐃⵠᐃΔⵠⵠ: "img/day-watermelon1.png",
    ⲆΔΔΔΔΔⲆ: "img/night-watermelon1.png",
    ΔⲆⵠⲆⵠᐃⵠ: "img/day-watermelon-dried1.png",
    ⵠΔⲆⵠⲆᐃᐃ: "img/night-watermelon-dried1.png",
    ⲆⲆⲆⲆⲆⵠᐃ: "img/inv-watermelon-out.png",
    ΔᐃⲆᐃΔⲆᐃ: "img/inv-watermelon-in.png",
    ⵠᐃⵠⵠΔⵠⲆ: "img/inv-watermelon-click.png",
    ⵠΔⲆΔᐃᐃΔ: "img/day-boat.png",
    ⲆΔΔⵠⲆⲆᐃ: "img/night-boat.png",
    ⲆΔⲆᐃⲆᐃⵠ: "img/day-boat-wave.png",
    ΔΔᐃᐃΔᐃⲆ: "img/night-boat-wave.png",
    ⲆⵠΔΔⲆᐃΔ: "img/inv-boat-out.png",
    ⲆΔⵠᐃΔⵠᐃ: "img/inv-boat-in.png",
    ⲆΔᐃΔⲆᐃⵠ: "img/inv-boat-click.png",
    ᐃⵠⲆᐃⲆⲆΔ: "img/day-plane.png",
    ΔⵠⵠⲆΔⵠᐃ: "img/night-plane.png",
    ⵠⲆⵠⵠⵠΔⵠ: "img/inv-plane-out.png",
    ⵠᐃΔⵠⲆᐃⲆ: "img/inv-plane-in.png",
    ⵠⵠᐃⵠᐃⵠⵠ: "img/inv-plane-click.png",
    ⲆⵠⲆᐃᐃᐃᐃ: "img/day-sled.png",
    ᐃⲆⵠⲆⲆⲆΔ: "img/night-sled.png",
    ⵠⵠⵠΔⲆΔᐃ: "img/day-sled-wave.png",
    ⵠΔⵠᐃᐃΔⵠ: "img/night-sled-wave.png",
    ᐃⵠⲆΔΔⵠᐃ: "img/inv-sled-out.png",
    ᐃⲆⵠΔⲆⲆⲆ: "img/inv-sled-in.png",
    ᐃⲆΔᐃΔⲆⵠ: "img/inv-sled-click.png",
    ᐃⲆⲆⵠΔΔⵠ: "img/day-pirate-hat.png",
    ᐃᐃⲆⲆⵠᐃᐃ: "img/night-pirate-hat.png",
    ᐃⲆᐃⵠΔΔⵠ: "img/inv-pirate-hat-out.png",
    ⵠⵠᐃᐃⲆⲆⵠ: "img/inv-pirate-hat-in.png",
    ⲆⵠΔⲆⵠᐃⵠ: "img/inv-pirate-hat-click.png",
    ΔⲆⵠΔᐃᐃⲆ: "img/day-penguin.png",
    ΔⵠⲆⲆᐃⲆᐃ: "img/night-penguin.png",
    ΔᐃΔᐃᐃⲆᐃ: "img/hurt-penguin.png",
    ⵠⵠⲆⲆⲆ: "img/inv-penguin-feather-click.png",
    ⲆᐃⲆΔⲆ: "img/inv-hawk-feather-click.png",
    ᐃΔᐃⲆⲆⵠΔ: "img/day-boar1.png",
    ⵠᐃΔᐃⵠΔⲆ: "img/day-boar1-tamed.png",
    ᐃΔᐃⲆⵠΔΔ: "img/day-boar1-angry.png",
    ⵠⲆᐃᐃⲆⲆΔ: "img/night-boar1.png",
    ⲆᐃⵠᐃⵠΔΔ: "img/night-boar1-tamed.png",
    ΔⵠΔᐃΔⵠⵠ: "img/night-boar1-angry.png",
    ᐃⲆⲆⵠⲆⵠⵠ: "img/inv-mount-boar-out.png",
    ⵠᐃΔⵠᐃΔⲆ: "img/inv-mount-boar-in.png",
    ΔΔΔⲆΔᐃⲆ: "img/inv-mount-boar-click.png",
    ⲆⲆⵠⵠⵠᐃⲆ: "img/day-hurt-boar1.png",
    ᐃⲆⲆᐃᐃⵠΔ: "img/boar1-step.png",
    ⲆⲆᐃᐃΔⵠΔ: "img/day-saddle1.png",
    ΔⵠΔⲆᐃⵠⵠ: "img/night-saddle1.png",
    ᐃΔⲆⵠⵠᐃⵠ: "img/inv-saddle-out.png",
    ⵠΔⲆⲆᐃⵠⲆ: "img/inv-saddle-in.png",
    ⵠⵠⵠΔΔᐃᐃ: "img/inv-saddle-click.png",
    ΔΔⵠΔΔⲆⵠ: "img/day-magic-wand0.png",
    ΔⵠᐃΔⵠᐃⲆ: "img/night-magic-wand0.png",
    ΔΔᐃᐃΔⵠᐃ: "img/day-light-wand1.png",
    ⵠⲆⵠⵠⵠΔⲆ: "img/night-light-wand1.png",
    ⲆⲆⲆᐃᐃΔΔ: "img/inv-magic-wand0-out.png",
    ⵠᐃⵠΔΔᐃᐃ: "img/inv-magic-wand0-in.png",
    ⲆΔᐃᐃⲆᐃΔ: "img/inv-magic-wand0-click.png",
    ⲆᐃᐃⲆΔᐃⲆ: "img/day-magic-wand1.png",
    ΔΔⲆΔᐃᐃⵠ: "img/night-magic-wand1.png",
    ⲆΔᐃΔᐃⲆⵠ: "img/day-light-wand0.png",
    ⲆᐃⲆⲆⵠⵠⲆ: "img/night-light-wand0.png",
    ⲆᐃⲆⵠⵠΔⵠ: "img/inv-magic-wand1-out.png",
    ⵠᐃⵠⵠⵠᐃⲆ: "img/inv-magic-wand1-in.png",
    ᐃⵠΔⵠⵠⲆⲆ: "img/inv-magic-wand1-click.png",
    ΔΔⲆⲆⲆⲆⵠ: "img/day-firefly.png",
    ⵠⲆΔⲆⲆⲆⲆ: "img/night-firefly.png",
    ᐃⲆⵠⲆⵠΔΔ: "img/hurt-firefly.png",
    ⲆⲆΔⲆⵠⲆᐃ: "img/inv-firefly-out.png",
    ΔΔⲆΔⵠΔᐃ: "img/inv-firefly-in.png",
    ⵠΔⵠⵠΔⵠΔ: "img/inv-firefly-click.png",
    ⵠΔᐃᐃᐃᐃΔ: "img/day-baby-dragon.png",
    ᐃᐃΔⵠⵠⵠᐃ: "img/night-baby-dragon.png",
    ⲆⵠⵠⵠⲆⲆΔ: "img/day-baby-dragon-angry.png",
    ⲆⵠⵠΔᐃᐃΔ: "img/night-baby-dragon-angry.png",
    ΔᐃⲆⵠⲆⵠⲆ: "img/day-baby-dragon-tamed.png",
    ᐃᐃΔⵠᐃΔⲆ: "img/night-baby-dragon-tamed.png",
    ᐃⵠⲆᐃⵠⲆᐃ: "img/day-wing-dragon-left-angry.png",
    ⵠⵠΔΔⵠⲆᐃ: "img/night-dragon-wing-left-angry.png",
    ΔᐃΔΔᐃⵠᐃ: "img/day-wing-dragon-right-angry.png",
    ᐃⲆΔᐃΔⵠΔ: "img/night-dragon-wing-right-angry.png",
    ΔⵠⲆΔΔⲆⵠ: "img/day-wing-dragon-left-tamed.png",
    ᐃⵠΔᐃⵠᐃᐃ: "img/night-dragon-wing-left-tamed.png",
    ᐃᐃΔᐃⲆⲆⵠ: "img/day-wing-dragon-right-tamed.png",
    ⵠᐃΔΔᐃⲆΔ: "img/night-wing-dragon-right-tamed.png",
    ⲆΔΔⵠᐃᐃᐃ: "img/day-wing-dragon-left.png",
    ΔΔᐃⵠⲆⵠΔ: "img/night-dragon-wing-left.png",
    ⲆⲆΔⵠΔᐃᐃ: "img/day-wing-dragon-right.png",
    ΔⲆⲆΔᐃⵠⵠ: "img/night-wing-dragon-right.png",
    ⲆᐃⵠⵠΔⲆⲆ: "img/hurt-baby-dragon.png",
    ΔΔᐃⵠΔᐃⲆ: "img/hurt-baby-dragon-wing-left.png",
    ΔⵠᐃⵠⲆᐃⲆ: "img/hurt-baby-dragon-wing-right.png",
    ᐃⵠᐃΔΔᐃᐃ: "img/inv-baby-dragon-out.png",
    ⲆⵠΔⲆⵠᐃᐃ: "img/inv-baby-dragon-in.png",
    ΔⵠⲆⵠΔᐃⵠ: "img/inv-baby-dragon-click.png",
    ΔᐃΔⵠⵠⵠⲆ: "img/day-baby-lava.png",
    ᐃΔⵠΔΔⲆΔ: "img/night-baby-lava.png",
    ⵠⲆΔᐃⲆΔᐃ: "img/day-baby-lava-angry.png",
    ⲆᐃⲆⲆΔⲆΔ: "img/night-baby-lava-angry.png",
    ᐃΔⲆⵠⵠⵠᐃ: "img/day-baby-lava-tamed.png",
    Δⵠⵠᐃⵠⵠᐃ: "img/night-baby-lava-tamed.png",
    ᐃᐃⲆᐃⵠⵠⲆ: "img/day-wing-lava-left-angry.png",
    ΔᐃᐃᐃᐃᐃΔ: "img/night-wing-lava-left-angry.png",
    ᐃΔⵠΔᐃᐃᐃ: "img/day-wing-lava-right-angry.png",
    ᐃᐃⲆⵠⲆΔΔ: "img/night-wing-lava-right-angry.png",
    ΔⲆⲆⵠⵠⵠⵠ: "img/day-wing-lava-left-tamed.png",
    ΔᐃⲆΔΔⲆⵠ: "img/night-wing-lava-left-tamed.png",
    ΔⲆⲆⵠⲆᐃᐃ: "img/day-wing-lava-right-tamed.png",
    ΔⵠⵠⵠⲆⵠⲆ: "img/night-wing-lava-right-tamed.png",
    ᐃⲆⲆⲆⵠⵠΔ: "img/day-wing-lava-left.png",
    ⵠᐃⵠⲆⵠΔⵠ: "img/night-wing-lava-left.png",
    ⲆⲆᐃⵠⲆⵠⵠ: "img/day-wing-lava-right.png",
    ⵠⵠΔⵠⵠᐃᐃ: "img/night-wing-lava-right.png",
    ΔΔᐃⲆᐃⲆⵠ: "img/hurt-baby-lava.png",
    ⵠΔᐃᐃΔᐃⵠ: "img/hurt-baby-lava-wing-left.png",
    ⵠⲆΔᐃΔⲆⲆ: "img/hurt-baby-lava-wing-right.png",
    ⲆⵠⲆΔΔᐃⲆ: "img/inv-baby-lava-out.png",
    ⲆⲆⲆᐃⲆⲆᐃ: "img/inv-baby-lava-in.png",
    ᐃΔⵠⵠᐃⵠᐃ: "img/inv-baby-lava-click.png",
    ⵠⲆᐃⵠⵠᐃⲆ: "img/day-falcon.png",
    ᐃΔⵠᐃᐃΔΔ: "img/night-falcon.png",
    ᐃΔᐃΔⵠᐃΔ: "img/day-falcon-angry.png",
    ⵠΔᐃᐃⵠⵠⲆ: "img/night-falcon-angry.png",
    ᐃΔⵠᐃⵠΔⲆ: "img/day-falcon-ground.png",
    ᐃᐃⵠⵠⲆⵠⲆ: "img/night-falcon-ground.png",
    ⲆⲆᐃⵠᐃⵠⵠ: "img/day-falcon-ground-angry.png",
    ᐃᐃⵠⵠᐃⲆΔ: "img/night-falcon-ground-angry.png",
    ᐃⲆⵠⵠⲆⵠⵠ: "img/day-falcon-wings-left.png",
    ᐃΔΔᐃᐃⵠⲆ: "img/night-falcon-wings-left.png",
    ⵠᐃᐃᐃᐃⵠᐃ: "img/day-falcon-wings-right.png",
    ⵠⵠᐃⵠᐃⵠΔ: "img/night-falcon-wings-right.png",
    ΔⲆⵠⵠᐃⲆΔ: "img/day-falcon-angry-wings-left.png",
    ⲆᐃΔΔᐃⵠⵠ: "img/night-falcon-angry-wings-left.png",
    ᐃⲆⵠΔᐃⲆⲆ: "img/day-falcon-angry-wings-right.png",
    ⲆⵠΔΔᐃᐃⵠ: "img/night-falcon-angry-wings-right.png",
    ΔⲆⵠᐃᐃⵠⲆ: "img/day-falcon-wings-left-tamed.png",
    ᐃⵠᐃᐃⲆⵠⵠ: "img/night-falcon-wings-left-tamed.png",
    ΔⲆⲆⲆⵠⵠᐃ: "img/day-falcon-wings-right-tamed.png",
    ΔⲆⲆⲆⲆΔΔ: "img/night-falcon-wings-right-tamed.png",
    ⵠΔΔᐃⲆᐃΔ: "img/day-falcon-tamed.png",
    ⲆΔᐃΔⵠᐃⵠ: "img/night-falcon-tamed.png",
    ⲆⵠⵠⲆⲆⵠⵠ: "img/hurt-falcon-ground.png",
    ⲆⲆΔΔⲆᐃΔ: "img/hurt-falcon.png",
    ⵠⲆᐃⵠΔⲆⲆ: "img/hurt-falcon-wings-left.png",
    ⲆᐃⲆΔΔⵠΔ: "img/hurt-falcon-wings-right.png",
    ᐃᐃΔⲆᐃΔⲆ: "img/inv-falcon-out.png",
    ⲆⲆⵠⲆⵠΔᐃ: "img/inv-falcon-in.png",
    ᐃⵠΔΔᐃΔⵠ: "img/inv-falcon-click.png",
    ⵠΔΔΔⵠΔΔ: "img/day-crab-boss.png",
    ΔΔⵠΔⲆⲆⲆ: "img/night-crab-boss.png",
    ᐃΔⲆⲆΔΔⲆ: "img/day-crab-boss-angry.png",
    ⵠΔΔΔⲆΔⲆ: "img/night-crab-boss-angry.png",
    ΔᐃΔΔⵠΔᐃ: "img/day-crab-boss-tamed.png",
    ΔⵠⵠⲆᐃⲆΔ: "img/night-crab-boss-tamed.png",
    ⲆⵠⲆΔΔⲆᐃ: "img/day-crab-boss-claw-left-attack.png",
    ⲆⲆᐃᐃⲆⵠᐃ: "img/night-crab-boss-claw-left-attack.png",
    ΔΔΔⲆⵠⵠⵠ: "img/day-crab-boss-claw-right-attack.png",
    ᐃⵠⲆⲆᐃⵠⲆ: "img/night-crab-boss-claw-right-attack.png",
    ᐃᐃⵠⲆⵠⵠΔΔⵠ: "img/day-crab-boss-claw-left-tamed.png",
    ⵠⵠⲆⵠⲆΔᐃⵠΔ: "img/night-crab-boss-claw-left-tamed.png",
    ᐃᐃΔⲆᐃΔΔΔⲆ: "img/day-crab-boss-claw-right-tamed.png",
    ⵠᐃΔΔⵠⵠⲆⲆⲆ: "img/night-crab-boss-claw-right-tamed.png",
    ⲆⲆᐃᐃΔⲆⵠ: "img/day-crab-boss-claw-left.png",
    ΔᐃⵠⵠⲆⲆⵠ: "img/night-crab-boss-claw-left.png",
    ⲆⵠⲆⵠᐃⵠⲆ: "img/day-crab-boss-claw-right.png",
    ⵠΔⲆᐃⲆⲆⲆ: "img/night-crab-boss-claw-right.png",
    ⲆᐃᐃΔᐃᐃⵠ: "img/hurt-crab-boss.png",
    ᐃⵠⲆⵠⲆΔⵠ: "img/hurt-crab-boss-claw-left.png",
    ⲆᐃΔⲆⲆⲆΔ: "img/hurt-crab-boss-claw-right.png",
    ΔⵠᐃⲆⵠΔⲆ: "img/heal-crab-boss.png",
    ⵠᐃᐃᐃⲆⵠᐃ: "img/heal-crab-boss-claw-left.png",
    ᐃᐃⲆᐃⵠⲆΔ: "img/heal-crab-boss-claw-right.png",
    ⲆⲆⵠⵠⲆᐃᐃ: "img/crab-step.png",
    ΔⲆΔⵠᐃΔⲆ: "img/inv-crab-boss-out.png",
    ᐃᐃᐃΔⵠᐃᐃ: "img/inv-crab-boss-in.png",
    ⲆⵠⲆΔⵠΔⲆ: "img/inv-crab-boss-click.png",
    ⵠⵠⵠⲆⵠΔⵠ: "img/day-cactus10.png",
    ⲆᐃΔΔⲆⵠΔ: "img/night-cactus10.png",
    ΔⵠⲆᐃΔⵠΔ: "img/inv-cactus-out.png",
    ΔΔᐃⲆⲆⲆⵠ: "img/inv-cactus-in.png",
    ᐃΔᐃⲆⵠᐃⵠ: "img/inv-cactus-click.png",
    ⲆⵠⵠΔΔⵠⲆ: "img/day-scorpion.png",
    ⲆⲆⲆⲆⵠΔⲆ: "img/night-scorpion.png",
    ᐃᐃᐃⲆΔΔᐃ: "img/day-scorpion-hand-left.png",
    ᐃⵠⲆⲆⵠⵠⵠ: "img/night-scorpion-hand-left.png",
    ᐃᐃΔΔᐃⲆᐃ: "img/day-scorpion-hand-right.png",
    ΔⵠᐃⲆΔΔⵠ: "img/night-scorpion-hand-right.png",
    ᐃᐃᐃⵠΔⲆΔ: "img/hurt-scorpion.png",
    ᐃⵠⲆⵠΔΔⲆ: "img/hurt-scorpion-hand-left.png",
    ⲆⲆⵠᐃᐃᐃΔ: "img/hurt-scorpion-hand-right.png",
    ⲆᐃᐃᐃⵠⲆᐃ: "img/day-vulture.png",
    ⵠᐃΔΔΔⵠⲆ: "img/night-vulture.png",
    ΔⵠΔⲆⵠΔᐃ: "img/day-vulture-angry.png",
    ⵠᐃᐃⵠΔᐃⵠ: "img/night-vulture-angry.png",
    ᐃΔΔⲆᐃⲆⲆ: "img/day-vulture-ground.png",
    ⲆⵠⵠⲆᐃⵠⵠ: "img/night-vulture-ground.png",
    ⲆᐃΔⲆⵠⲆⲆ: "img/day-vulture-ground-angry.png",
    ΔⵠⲆᐃⵠⵠᐃ: "img/night-vulture-ground-angry.png",
    ΔᐃᐃⲆⲆᐃⲆ: "img/day-vulture-wings-left.png",
    ᐃΔᐃΔⵠⵠⲆ: "img/night-vulture-wings-left.png",
    ⵠΔⲆⵠⵠᐃΔ: "img/day-vulture-wings-right.png",
    ⵠⵠΔⲆΔᐃΔ: "img/night-vulture-wings-right.png",
    ᐃⲆⲆⲆᐃⲆⵠ: "img/day-vulture-angry-wings-left.png",
    ⲆⲆⲆᐃⲆⲆⲆ: "img/night-vulture-angry-wings-left.png",
    ⲆⲆⲆⵠΔΔΔ: "img/day-vulture-angry-wings-right.png",
    ᐃⵠᐃᐃᐃΔΔ: "img/night-vulture-angry-wings-right.png",
    ΔᐃᐃᐃΔⲆΔ: "img/day-vulture-wings-left-tamed.png",
    ΔⲆⲆⵠΔⵠⵠ: "img/night-vulture-wings-left-tamed.png",
    ΔΔᐃⲆⵠΔⵠ: "img/day-vulture-wings-right-tamed.png",
    ᐃᐃᐃᐃⲆⵠᐃ: "img/night-vulture-wings-right-tamed.png",
    ⲆⲆΔⲆΔΔⲆ: "img/day-vulture-tamed.png",
    ⲆᐃᐃⵠⵠⲆᐃ: "img/night-vulture-tamed.png",
    ⲆΔᐃΔⵠΔᐃ: "img/hurt-vulture-ground.png",
    ᐃᐃᐃᐃⲆᐃᐃ: "img/hurt-vulture.png",
    ᐃᐃᐃᐃᐃⲆⲆ: "img/hurt-vulture-wings-left.png",
    ΔⲆⲆⲆⵠⲆⵠ: "img/hurt-vulture-wings-right.png",
    ⲆⲆΔᐃⵠᐃΔ: "img/day-aloe-vera.png",
    ⵠⵠΔᐃΔΔⵠ: "img/night-aloe-vera.png",
    ⲆⵠⲆⵠΔⵠⵠ: "img/inv-aloe-vera-out.png",
    ΔⵠᐃⲆᐃΔΔ: "img/inv-aloe-vera-in.png",
    ⲆⲆᐃΔᐃᐃΔ: "img/inv-aloe-vera-click.png",
    ΔⲆΔⲆⵠⵠΔ: "img/day-aloe-vera-grown.png",
    ᐃΔᐃᐃΔⲆᐃ: "img/night-aloe-vera-grown.png",
    ΔⵠᐃⵠⵠⵠΔ: "img/day-aloe-vera-dried.png",
    ⲆⲆⲆⲆᐃⵠⲆ: "img/night-aloe-vera-dried.png",
    ⲆⵠⵠⵠⲆⲆᐃ: "img/day-turban1.png",
    ⵠΔⵠΔⲆⲆΔ: "img/night-turban1.png",
    ⲆΔⲆΔⲆᐃⵠ: "img/day-turban2.png",
    ΔⵠᐃᐃⲆΔΔ: "img/night-turban2.png",
    ⵠⲆᐃΔΔΔⵠ: "img/inv-turban2-out.png",
    ⵠⵠⵠⵠⲆᐃⲆ: "img/inv-turban2-in.png",
    ᐃⲆᐃᐃΔΔⲆ: "img/inv-turban2-click.png",
    ᐃΔΔᐃⲆⲆΔ: "img/inv-turban1-out.png",
    ⵠᐃΔⲆⲆⲆⲆ: "img/inv-turban1-in.png",
    ᐃᐃⲆⲆⵠⲆΔ: "img/inv-turban1-click.png",
    ⵠᐃⲆⲆⵠᐃᐃ: "img/day-pitchfork2.png",
    ⵠΔⲆⲆᐃᐃΔ: "img/night-pitchfork2.png",
    ᐃⵠᐃᐃⵠΔᐃ: "img/inv-pitchfork2-out.png",
    ᐃⲆᐃⵠⲆⵠᐃ: "img/inv-pitchfork2-in.png",
    ΔⵠⵠⵠⲆΔⵠ: "img/inv-pitchfork2-click.png",
    ΔΔⵠⵠᐃⵠΔ: "img/inv-gold-fork-click.png",
    ΔⲆΔⲆⵠᐃᐃ: "img/inv-pilot-glasses-click.png",
    ΔᐃⵠᐃᐃᐃⲆ: "img/day-pilot-helmet.png",
    ⵠⲆΔⲆᐃⵠⵠ: "img/night-pilot-helmet.png",
    ⲆᐃⲆⲆⲆⵠⵠ: "img/inv-pilot-helmet-out.png",
    ⲆᐃᐃΔᐃⲆΔ: "img/inv-pilot-helmet-in.png",
    ⲆⲆΔΔⲆⲆᐃ: "img/inv-pilot-helmet-click.png",
    ⲆᐃᐃⵠᐃⵠΔⵠⲆ: "img/day-sandworm0.png",
    ΔⲆᐃᐃⲆΔⵠ: "img/day-sandworm1.png",
    ᐃⲆΔⵠⲆΔᐃ: "img/day-sandworm2.png",
    ⲆᐃⵠΔΔᐃΔⵠᐃ: "img/night-sandworm0.png",
    ⵠⲆⵠⲆⵠᐃⵠ: "img/night-sandworm1.png",
    ⵠⲆᐃⲆΔΔⵠ: "img/night-sandworm2.png",
    ⵠᐃᐃᐃΔⲆΔ: "img/hurt-sandworm0.png",
    ⲆᐃⲆᐃᐃⲆⲆ: "img/hurt-sandworm1.png",
    Δᐃᐃⵠᐃᐃᐃ: "img/hurt-sandworm2.png",
    ᐃⵠᐃΔⵠ: "img/inv-vulture-feather-click.png",
    ᐃⵠⵠⵠⵠⵠⵠ: "img/day-emerald0.png",
    ⲆⵠᐃᐃᐃⵠⲆ: "img/night-emerald0.png",
    ΔΔΔᐃᐃⲆⲆ: "img/day-emerald1.png",
    ⲆᐃᐃⵠⲆᐃΔ: "img/night-emerald1.png",
    ᐃᐃᐃⵠΔΔΔ: "img/day-emerald2.png",
    ΔⵠΔⵠΔᐃᐃ: "img/night-emerald2.png",
    ΔⵠΔΔⵠ: "img/inv-emerald-click.png",
    ⵠΔⵠᐃⲆⲆⲆ: "img/inv-sworm-juice-out.png",
    ΔᐃᐃⲆⵠⲆᐃ: "img/inv-sworm-juice-in.png",
    ⲆⵠⵠΔΔᐃΔ: "img/inv-sworm-juice-click.png",
    ΔᐃⵠΔⲆⲆᐃ: "img/day-point-machine.png",
    ΔΔⲆᐃⵠΔⵠ: "img/night-point-machine.png",
    ⵠΔⲆⵠᐃⲆⲆ: "img/day-point-machine-hole.png",
    ΔΔᐃᐃⲆⵠⵠ: "img/night-point-machine-hole.png",
    ⲆΔⲆⵠⵠⲆᐃ: "img/day-point-machine-ground.png",
    ⲆᐃⵠⲆᐃΔⵠ: "img/night-point-machine-ground.png",
    ᐃⵠᐃᐃΔⵠⲆ: "img/day-point-machine-rotate.png",
    ⵠⲆⵠᐃⵠΔⲆ: "img/night-point-machine-rotate.png",
    ⲆⲆΔΔΔᐃⵠ: "img/inv-point-machine-out.png",
    ΔⲆᐃᐃᐃⲆᐃ: "img/inv-point-machine-in.png",
    ⵠᐃⵠᐃΔⵠⵠ: "img/inv-point-machine-click.png",
    ᐃⲆΔΔᐃᐃⵠ: "img/day-extractor-machine0-stone.png",
    ΔⵠⵠⲆⲆⲆᐃ: "img/night-extractor-machine0-stone.png",
    ⵠᐃᐃᐃΔⲆⲆ: "img/day-extractor-machine-stone.png",
    ΔᐃⲆΔΔⵠⲆ: "img/night-extractor-machine-stone.png",
    ⲆᐃⲆᐃᐃⲆΔ: "img/inv-extractor-machine-stone-out.png",
    ⵠΔⵠⵠΔᐃΔ: "img/inv-extractor-machine-stone-in.png",
    ⲆΔⲆᐃⲆΔⲆ: "img/inv-extractor-machine-stone-click.png",
    ᐃⵠⲆᐃⲆⵠᐃ: "img/day-extractor-machine0-gold.png",
    ΔⲆΔⵠᐃⲆⲆ: "img/night-extractor-machine0-gold.png",
    ΔⵠⲆΔⲆΔᐃ: "img/day-extractor-machine-gold.png",
    ⵠⵠⵠⵠⵠⲆΔ: "img/night-extractor-machine-gold.png",
    ᐃΔΔⲆⲆⲆⵠ: "img/inv-extractor-machine-gold-out.png",
    ⲆⲆⵠΔΔⲆΔ: "img/inv-extractor-machine-gold-in.png",
    ⵠᐃⵠⲆⵠΔⲆ: "img/inv-extractor-machine-gold-click.png",
    ⲆΔΔⵠⲆᐃΔ: "img/day-extractor-machine0-diamond.png",
    ΔⲆΔⵠⲆᐃⵠ: "img/night-extractor-machine0-diamond.png",
    ⵠⲆⲆⵠᐃᐃΔ: "img/day-extractor-machine-diamond.png",
    ⵠᐃᐃᐃⵠⲆⵠ: "img/night-extractor-machine-diamond.png",
    ΔΔⵠⵠᐃⵠⲆ: "img/inv-extractor-machine-diamond-out.png",
    ⲆⲆᐃᐃΔᐃⵠ: "img/inv-extractor-machine-diamond-in.png",
    ⲆⲆⵠⵠΔΔΔ: "img/inv-extractor-machine-diamond-click.png",
    ⵠΔⲆⲆⵠⲆⵠ: "img/day-extractor-machine0-amethyst.png",
    ⲆⲆᐃⵠⵠⵠⵠ: "img/night-extractor-machine0-amethyst.png",
    Ⲇⵠⵠᐃᐃⵠⵠ: "img/day-extractor-machine-amethyst.png",
    ⵠⲆΔⲆᐃⲆⲆ: "img/night-extractor-machine-amethyst.png",
    ⲆⵠⲆⲆⲆⵠΔ: "img/inv-extractor-machine-amethyst-out.png",
    ΔⲆⵠⵠⲆΔᐃ: "img/inv-extractor-machine-amethyst-in.png",
    ⲆⵠΔΔⵠᐃᐃ: "img/inv-extractor-machine-amethyst-click.png",
    ⵠᐃⵠᐃΔⲆᐃ: "img/day-extractor-machine0-reidite.png",
    ᐃΔⵠⲆΔΔⲆ: "img/night-extractor-machine0-reidite.png",
    ᐃᐃᐃⵠᐃⵠΔ: "img/day-extractor-machine-reidite.png",
    ⵠΔⲆΔᐃⵠⵠ: "img/night-extractor-machine-reidite.png",
    ⵠΔᐃⲆⵠΔⲆ: "img/inv-extractor-machine-reidite-out.png",
    ⵠⲆⲆᐃⲆⵠΔ: "img/inv-extractor-machine-reidite-in.png",
    ΔⵠⵠⵠᐃΔⵠ: "img/inv-extractor-machine-reidite-click.png",
    ᐃΔⲆᐃΔⵠⲆ: "img/extractor-cases.png",
    ᐃⵠⵠᐃⲆΔⲆ: "img/day-golden-hen.png",
    ⵠⲆⲆᐃⲆᐃⲆ: "img/night-golden-hen.png",
    ⵠⲆΔᐃᐃΔⲆ: "img/day-golden-chicken.png",
    ΔΔᐃⲆⲆᐃΔ: "img/night-golden-chicken.png",
    ᐃⲆⵠⲆΔⲆᐃ: "img/hurt-golden-hen.png",
    ΔΔⲆⵠⵠⵠⲆ: "img/hurt-golden-chicken.png",
    ⲆᐃⲆⵠⲆⲆⵠ: "img/logo-interface.png",
    ΔⲆᐃⲆⵠⲆᐃ: "img/forest-mode-hover.png",
    ⲆΔᐃⲆⲆⲆΔ: "img/normal-mode-hover.png",
    ⵠⵠⲆᐃⲆⲆⵠ: "img/vampire-mode-hover.png",
    ⲆⲆⵠᐃᐃᐃᐃ: "img/zombie-mode-hover.png",
    ᐃΔΔⵠⲆⲆⲆ: "img/community-mode-hover2.png",
    ᐃᐃⵠᐃⲆΔᐃ: "img/experimental-mode-hover.png",
    ᐃΔⲆⵠⲆⵠᐃ: "img/zombie-mode-out.png",
    ᐃΔⵠΔᐃᐃⲆ: "img/zombie-mode-in.png",
    ᐃΔΔᐃΔⲆΔ: "img/zombie-mode-click.png",
    ⵠΔⲆⲆᐃΔⲆ: "img/vampire-mode-out.png",
    ΔᐃⲆⲆⵠⵠΔ: "img/vampire-mode-in.png",
    ⲆᐃΔⵠᐃᐃⲆ: "img/vampire-mode-click.png",
    ⲆᐃⲆΔΔΔⵠ: "img/normal-mode-out.png",
    ⲆⲆⲆⲆⲆⵠⲆ: "img/normal-mode-in.png",
    ΔⲆⵠΔⵠᐃⲆ: "img/normal-mode-click.png",
    ⵠⵠⵠΔⵠΔⵠ: "img/forest-mode-out.png",
    ᐃᐃⵠⵠΔⲆΔ: "img/forest-mode-in.png",
    ᐃᐃᐃⵠⵠᐃⵠ: "img/forest-mode-click.png",
    ᐃᐃⵠⵠⵠⲆΔ: "img/community-mode-out.png",
    ᐃᐃⵠⵠⲆᐃⵠ: "img/community-mode-in.png",
    Δⵠⵠⵠᐃᐃᐃ: "img/community-mode-click.png",
    ⵠⲆⵠΔΔⲆΔ: "img/experimental-modes-out.png",
    ⲆⲆⵠΔΔΔⲆ: "img/experimental-modes-in.png",
    ᐃⲆⵠⵠⲆⵠⲆ: "img/experimental-modes-click.png",
    ᐃΔⲆⲆᐃΔⲆ: "img/youtube-button-out.png",
    ⲆⵠⵠⵠⵠᐃⲆ: "img/youtube-button-in.png",
    ⲆⵠⲆⵠⵠᐃΔ: "img/youtube-button-click.png",
    ⲆⵠⲆᐃⵠΔΔ: "img/wiki-button-out.png",
    ⲆⲆⲆΔΔⵠᐃ: "img/wiki-button-in.png",
    ⲆⵠⲆΔⵠᐃΔ: "img/wiki-button-click.png",
    ⲆⵠΔΔⲆΔⲆ: "img/twitter-button-out.png",
    ⵠΔΔⵠΔΔⲆ: "img/twitter-button-in.png",
    ⲆΔΔⲆⵠΔᐃ: "img/twitter-button-click.png",
    ⲆⵠᐃᐃⲆⵠΔ: "img/facebook-button-out.png",
    ⲆⵠᐃΔⵠΔⵠ: "img/facebook-button-in.png",
    ᐃⲆⲆᐃΔΔᐃ: "img/facebook-button-click.png",
    ⵠⲆΔΔΔΔΔ: "img/reddit-button-out.png",
    ᐃΔⲆⵠᐃⲆᐃ: "img/reddit-button-in.png",
    ⵠΔⵠᐃⲆΔΔ: "img/reddit-button-click.png",
    ⲆΔⵠⲆⵠⵠΔ: "img/discord-button-out.png",
    ᐃᐃᐃΔᐃᐃⲆ: "img/discord-button-in.png",
    ⵠΔΔΔⵠΔⵠ: "img/discord-button-click.png",
    ⲆⵠⵠⲆΔᐃⵠ: "img/merch-button-out.png",
    ΔΔᐃⲆΔᐃⲆ: "img/merch-button-in.png",
    ⵠΔΔⲆΔⵠᐃ: "img/merch-button-click.png",
    ᐃᐃⵠⵠΔᐃΔᐃᐃ: "img/terminal-button-out.png",
    ΔⵠΔⵠⲆⲆⵠᐃᐃ: "img/terminal-button-in.png",
    ᐃⵠᐃⲆΔᐃΔⵠⲆ: "img/terminal-button-click.png",
    ᐃⲆΔⲆᐃⵠⲆ: "img/restart-out.png",
    ΔⵠΔᐃΔⵠΔ: "img/restart-in.png",
    ⵠΔⲆᐃⲆⲆΔ: "img/restart-click.png",
    ΔⵠⲆΔⵠⵠⲆ: "img/guide-out.png",
    ⵠΔΔΔⲆΔᐃ: "img/guide-in.png",
    ⵠⵠᐃⵠⵠΔⵠ: "img/guide-click.png",
    ΔᐃᐃⲆᐃⵠΔ: "img/copy-paste-out.png",
    ⵠΔᐃⲆⵠⵠΔ: "img/copy-paste-in.png",
    ΔⲆⵠⲆᐃⵠΔ: "img/copy-paste-click.png",
    ᐃᐃⲆΔⲆΔⲆ: "img/link-buttons-bg.png",
    ΔⵠⲆⲆᐃⲆⵠ: "img/changelog-box2.png",
    ⲆᐃᐃⲆⲆᐃᐃ: "img/changelog_30.png",
    ⵠⵠⲆⲆⲆⵠⵠ: "img/banner-taming.png",
    ΔⲆᐃᐃⵠᐃΔ: "img/profile-button-out.png",
    ⲆⲆⲆⲆᐃᐃΔ: "img/profile-button-in.png",
    ᐃⲆⲆᐃᐃᐃᐃ: "img/profile-button-click.png",
    ⵠᐃᐃᐃⲆΔⵠ: "img/login-button-out.png",
    ΔⵠΔᐃᐃⵠⵠ: "img/login-button-in.png",
    ⲆΔⲆⵠⲆⲆⲆ: "img/login-button-click.png",
    ⵠⲆᐃⲆᐃⲆⵠ: "img/login-google-out.png",
    ⲆⲆΔⲆⲆᐃΔ: "img/login-google-in.png",
    ⲆⵠᐃΔᐃⲆᐃ: "img/login-google-click.png",
    ⲆΔᐃⵠᐃΔⲆ: "img/login-facebook-out.png",
    ᐃⵠⵠⵠⵠΔⵠ: "img/login-facebook-in.png",
    Ⲇᐃⵠᐃᐃᐃᐃ: "img/login-facebook-click.png",
    ⵠⲆΔⵠᐃΔⲆ: "img/account-box.png",
    ⵠⵠᐃⲆΔᐃⵠⵠⲆ: "img/account-under-maintenance.png",
    ΔⵠⲆΔᐃᐃᐃ: "img/close-button-account-out.png",
    ΔΔᐃΔΔΔΔ: "img/close-button-account-in.png",
    ΔⵠⵠᐃᐃⲆⵠ: "img/close-button-account-click.png",
    ᐃⵠⵠⲆᐃΔⲆ: "img/play-button-out.png",
    ⵠⲆⵠᐃⲆΔΔ: "img/play-button-in.png",
    ΔΔⵠⲆⲆⲆⵠ: "img/play-button-click.png",
    ⲆΔᐃⵠⲆΔΔᐃᐃ: "img/app-store-badge.png",
    ⵠⲆᐃⲆᐃΔΔᐃⵠ: "img/play-store-badge.png",
    ⲆᐃⵠⵠᐃΔᐃΔᐃ: "img/mobile-boxad.png",
    ⵠΔⲆⲆᐃΔΔ: "img/modify-name-out.png",
    ᐃⲆΔⵠᐃΔⵠ: "img/modify-name-in.png",
    ᐃⵠⲆⵠⵠᐃⵠ: "img/modify-name-click.png",
    ⵠΔⵠΔⵠⲆΔ: "img/yes-button-out.png",
    ᐃⵠⲆΔⵠΔⲆ: "img/yes-button-in.png",
    ⲆⲆⵠΔᐃⵠᐃ: "img/yes-button-click.png",
    ⲆΔⲆΔⵠⲆᐃ: "img/yes-300-button-out.png",
    ⲆⲆⵠⵠⵠⵠⵠ: "img/yes-300-button-in.png",
    ⲆᐃⵠⲆⲆⵠΔ: "img/yes-300-button-click.png",
    ᐃΔⵠⲆᐃΔΔ: "img/no-button-out.png",
    ᐃⲆᐃᐃⵠΔΔ: "img/no-button-in.png",
    ⵠΔΔⵠΔΔΔ: "img/no-button-click.png",
    ᐃⵠⵠΔⲆΔⵠ: "img/no-thanks-button-out.png",
    ΔⲆᐃⵠΔᐃⵠ: "img/no-thanks-button-in.png",
    ⲆΔⲆⵠⲆΔᐃ: "img/no-thanks-button-click.png",
    ⲆⲆΔⵠⵠⲆⲆ: "img/shop-button-out.png",
    ᐃⵠⵠᐃⲆⵠⲆ: "img/shop-button-in.png",
    ⲆΔᐃⲆⵠᐃⵠ: "img/shop-button-click.png",
    ΔⵠⲆⲆᐃᐃⲆ: "img/logout-out.png",
    ΔⵠⵠΔΔⵠⲆ: "img/logout-in.png",
    ΔΔΔⵠΔΔᐃ: "img/logout-click.png",
    ⲆⲆΔⲆⵠΔᐃ: "img/terms-button-out.png",
    ᐃⲆΔᐃΔⲆⲆ: "img/terms-button-in.png",
    ⵠⵠΔⲆⲆⵠⵠ: "img/terms-button-click.png",
    ⵠⲆΔᐃᐃΔⵠ: "img/tutorial-icon.png",
    ⲆⵠᐃⵠⲆⲆⵠ: "img/skins-icon.png",
    ΔΔΔᐃᐃΔⵠ: "img/shop-icon.png",
    ΔⲆᐃᐃᐃᐃΔᐃⲆ: "img/paint-icon.png",
    ΔΔΔᐃⲆⲆᐃ: "img/leaderboard-icon.png",
    ⵠΔⵠⵠΔⵠᐃ: "img/start-icon.png",
    ᐃⲆΔᐃΔⵠⲆ: "img/profile-icon.png",
    ΔΔᐃΔⲆΔⲆ: "img/server-access-icon2.png",
    ᐃΔⵠⵠⲆΔΔ: "img/button-homepage-bg-out.png",
    ⵠᐃᐃᐃΔⲆⵠ: "img/button-homepage-bg-in.png",
    ⲆΔᐃᐃⵠᐃⲆ: "img/button-homepage-bg-click.png",
    ⵠⲆⲆⵠⲆΔⵠ: "img/button-bottom-homepage-bg-out.png",
    ⵠⵠⵠΔᐃⲆᐃ: "img/button-bottom-homepage-bg-in.png",
    Ⲇⵠᐃⵠⵠᐃᐃ: "img/button-bottom-homepage-bg-click.png",
    ᐃᐃΔⲆⵠⲆⵠ: "img/lvl-player.png",
    ⲆΔᐃⲆΔⲆⲆ: "img/avatar-player.png",
    ⵠⵠⵠⵠᐃᐃⲆ: "img/avatar-player1.png",
    ⵠᐃⵠⲆⵠⲆⲆ: "img/avatar-player2.png",
    ⵠΔⵠⵠⲆΔᐃ: "img/avatar-player3.png",
    ᐃΔⵠΔⲆⲆΔ: "img/avatar-player4.png",
    ⲆⵠⲆⵠᐃⵠᐃ: "img/avatar-player5.png",
    ⵠⵠᐃᐃᐃᐃᐃ: "img/avatar-player6.png",
    ᐃⲆⵠᐃΔᐃⲆ: "img/avatar-player7.png",
    ᐃⵠⲆΔᐃⲆⲆ: "img/avatar-player8.png",
    ᐃⲆᐃⵠⲆᐃΔ: "img/avatar-player9.png",
    ⵠΔⵠⲆⲆᐃⵠ: "img/avatar-player10.png",
    ⲆΔⵠⵠⵠⲆΔ: "img/avatar-player11.png",
    ᐃⵠⲆⵠⵠᐃⲆ: "img/avatar-player12.png",
    ⲆⵠⵠᐃᐃⵠⲆ: "img/avatar-player13.png",
    ᐃᐃⲆΔᐃΔΔ: "img/avatar-player14.png",
    ⲆᐃᐃⵠᐃⲆⵠ: "img/avatar-player14.png",
    ⵠⲆᐃΔᐃⵠΔ: "img/avatar-player14.png",
    Δᐃⵠⵠᐃᐃᐃ: "img/avatar-player14.png",
    ᐃΔⵠⵠᐃⲆᐃΔⲆ: "img/golden-bread.png",
    ⲆᐃᐃⲆᐃⲆⲆ: "img/buy-bread-out.png",
    ⵠⲆᐃⲆᐃⲆⲆ: "img/buy-bread-in.png",
    ᐃⵠⵠΔⲆᐃᐃ: "img/buy-bread-click.png",
    ⲆⵠᐃⲆⵠᐃΔ: "img/gauge.png",
    ⲆⲆⵠᐃᐃΔⲆⲆΔ: "img/season-4-out.png",
    ᐃΔΔⲆᐃΔᐃⵠⲆ: "img/season-4-in.png",
    ⲆⲆⵠⵠⵠⲆⵠΔᐃ: "img/season-4-click.png",
    ΔΔⲆᐃⵠⵠᐃⲆⲆ: "img/season4-box.png",
    ⵠⲆⲆΔⵠⵠᐃᐃᐃ: "img/season-5-out.png",
    ᐃⲆΔᐃᐃⵠⲆΔᐃ: "img/season-5-in.png",
    ⲆⲆⲆⲆᐃᐃⲆⵠⲆ: "img/season-5-click.png",
    ⲆΔΔⲆⵠᐃⲆⲆⲆ: "img/season5-box.png",
    ⲆᐃⲆⲆΔⲆᐃ: "img/season-6-out.png",
    ⵠΔⵠⲆᐃΔⲆ: "img/season-6-in.png",
    ⲆΔⵠΔⵠᐃΔ: "img/season-6-click.png",
    ᐃΔΔᐃⵠⲆᐃ: "img/season6-box.png",
    ᐃⲆᐃⲆⲆΔᐃ: "img/profile3-box.png",
    ⵠⲆⲆΔᐃΔⲆ: "img/skins-box.png",
    ΔᐃⲆⵠᐃⵠΔ: "img/shop-box.png",
    ΔⵠⲆⲆⵠⲆⵠⵠᐃ: "img/private-server-box.png",
    ⵠΔᐃΔⵠⲆⵠ: "img/location-box.png",
    ⵠΔⲆⲆᐃᐃⵠ: "img/server-duration-box.png",
    ⲆΔΔⲆⵠⲆᐃ: "img/tutorial-box.png",
    ΔⲆⲆⲆΔⲆᐃ: "img/leaderboard2-box.png",
    ⵠᐃⵠᐃᐃΔΔ: "img/buy-breads-box.png",
    ⵠⵠⲆⲆⲆⲆΔ: "img/bag-box.png",
    ΔⵠⲆΔᐃⵠΔ: "img/deadbox-box.png",
    ᐃⵠΔΔⲆⲆΔ: "img/book-box.png",
    ⵠΔⵠΔⲆᐃΔ: "img/accessories-box.png",
    ΔΔⵠᐃΔΔΔ: "img/customskin-box.png",
    ⲆΔⲆΔΔᐃᐃ: "img/bag-lasts.png",
    ᐃⲆᐃⵠⵠΔᐃ: "img/server-lasts.png",
    ⵠⲆⲆΔᐃⵠΔ: "img/server-access-box2.png",
    ⵠΔᐃⲆΔᐃᐃ: "img/lootbox-box.png",
    ΔⲆⵠⲆⵠⵠΔ: "img/change-nickname0.png",
    ᐃΔⵠΔⵠᐃⲆ: "img/change-nickname1.png",
    ⲆⲆΔᐃⵠⵠⵠ: "img/cheating-box.png",
    ΔⵠⲆⲆᐃΔⲆΔⲆ: "img/daily-quest-box.png",
    ᐃⵠᐃⲆᐃⵠⲆᐃⲆ: "img/daily-5-bread.png",
    ⲆΔⵠᐃᐃⵠⲆᐃⲆ: "img/daily-10-bread.png",
    ᐃΔΔⲆᐃΔΔⲆᐃ: "img/daily-valid.png",
    ⲆᐃⲆΔⵠⲆⲆ: "img/normal-profile-out.png",
    ᐃΔⲆⲆⲆⲆΔ: "img/normal-profile-in.png",
    ⵠᐃⵠᐃⲆΔΔ: "img/normal-profile-click.png",
    ᐃⵠᐃΔΔᐃⵠ: "img/forest-profile-out.png",
    ᐃᐃⵠⲆᐃⲆᐃ: "img/forest-profile-in.png",
    ᐃᐃΔΔⲆⵠᐃ: "img/forest-profile-click.png",
    ⵠⲆⵠⲆⵠⵠⵠ: "img/zombie-profile-out.png",
    ΔᐃⲆⵠᐃⵠⲆ: "img/zombie-profile-in.png",
    ΔⵠᐃⵠⲆⵠΔ: "img/zombie-profile-click.png",
    ⵠΔΔⲆᐃⲆⲆ: "img/vampire-profile-out.png",
    ⲆᐃΔⵠⵠΔⵠ: "img/vampire-profile-in.png",
    ⲆΔⵠⲆⲆΔΔ: "img/vampire-profile-click.png",
    ⵠⲆⵠⲆΔΔⵠ: "img/total-profile-out.png",
    ⲆᐃⵠⵠⵠⲆⲆ: "img/total-profile-in.png",
    ᐃΔⵠⵠⲆΔⵠ: "img/total-profile-click.png",
    ΔΔⲆᐃΔⵠᐃ: "img/season1-out.png",
    ᐃⲆⲆᐃᐃⵠᐃ: "img/season1-in.png",
    ΔⲆⵠⲆᐃⲆΔ: "img/season1-click.png",
    ⲆⲆⲆᐃᐃⵠᐃ: "img/season2-out.png",
    ⲆⵠⵠΔᐃᐃⵠ: "img/season2-in.png",
    ⲆΔᐃⲆΔΔⲆ: "img/season2-click.png",
    ⵠⵠⲆⲆⵠᐃΔ: "img/season3-out.png",
    ᐃⲆⲆⲆᐃΔᐃ: "img/season3-in.png",
    ⲆᐃᐃⵠΔᐃⵠ: "img/season3-click.png",
    ⵠⵠΔⲆᐃᐃⲆ: "img/season4-out.png",
    ⲆⲆⲆᐃⲆⵠⵠ: "img/season4-in.png",
    ⵠᐃⵠᐃⲆⵠᐃ: "img/season4-click.png",
    ⵠΔⵠⲆⵠⲆᐃ: "img/season5-out.png",
    ⵠΔΔΔⵠΔᐃ: "img/season5-in.png",
    ΔⵠⲆⲆⵠᐃⵠ: "img/season5-click.png",
    ᐃⲆⲆΔⵠⲆᐃ: "img/season6-out.png",
    ⵠⲆⵠΔⲆΔⲆ: "img/season6-in.png",
    ᐃᐃⵠΔⵠⲆᐃ: "img/season6-click.png",
    ⵠᐃⲆⵠⲆⲆⵠ: "img/locked-skin-alert.png",
    ⵠⲆⲆⲆΔⲆᐃ: "img/locked-custom-alert.png",
    ΔᐃΔⲆΔᐃⵠ: "img/bg-red-locked.png",
    ᐃᐃⵠⵠᐃⵠΔ: "img/skin-button-out.png",
    ΔᐃΔⲆⲆⵠⵠ: "img/skin-button-in.png",
    ⵠᐃⲆⲆᐃⵠⵠ: "img/skin-button-click.png",
    ᐃⲆⲆⲆⲆⵠΔ: "img/accessory-button-out.png",
    ΔΔᐃⲆΔⲆⵠ: "img/accessory-button-in.png",
    ⵠᐃᐃΔⵠᐃᐃ: "img/accessory-button-click.png",
    ⲆⵠⵠᐃΔⵠⲆ: "img/bag-button-out.png",
    ᐃᐃⲆΔⵠⵠⲆ: "img/bag-button-in.png",
    ΔⲆΔⲆⲆΔᐃ: "img/bag-button-click.png",
    ΔⵠⵠⵠⵠᐃⲆ: "img/book-button-out.png",
    ⲆⵠΔⵠᐃⵠⲆ: "img/book-button-in.png",
    ΔᐃⲆⲆⵠⲆⵠ: "img/book-button-click.png",
    ⵠⵠᐃⵠⲆⲆⵠ: "img/deadbox-button-out.png",
    ⲆⲆΔᐃΔᐃΔ: "img/deadbox-button-in.png",
    ᐃⵠΔᐃⲆΔⲆ: "img/deadbox-button-click.png",
    ⵠΔⵠΔᐃⲆⲆ: "img/loot-button-out.png",
    ᐃᐃΔⲆΔΔΔ: "img/loot-button-in.png",
    ⲆᐃⵠⲆᐃᐃⵠ: "img/loot-button-click.png",
    ᐃΔⲆΔΔⲆⵠ: "img/free-item-out.png",
    ᐃΔⲆᐃⲆⲆⲆ: "img/free-item-in.png",
    ⵠΔᐃⵠᐃΔⵠ: "img/free-item-click.png",
    ᐃΔΔΔ: "img/wood-item-out.png",
    ᐃΔⵠⲆ: "img/wood-item-in.png",
    ΔⲆΔᐃ: "img/wood-item-click.png",
    ⵠΔΔᐃⵠⵠΔ: "img/stone-item.png",
    ⵠΔᐃᐃⵠΔᐃ: "img/stone-item-in.png",
    ᐃⲆΔᐃⵠⵠⵠ: "img/stone-item-click.png",
    ᐃᐃⲆⲆⵠⵠⵠ: "img/gold-item.png",
    ⲆᐃΔΔⲆⲆΔ: "img/gold-item-in.png",
    ΔΔⵠⵠⵠᐃΔ: "img/gold-item-click.png",
    ⲆⵠΔⲆⲆⵠΔ: "img/diamond-item.png",
    ᐃⵠΔᐃΔᐃⲆ: "img/diamond-item-in.png",
    ΔΔⲆᐃⵠᐃⵠ: "img/diamond-item-click.png",
    ⲆΔⲆᐃᐃᐃⵠ: "img/amethyst-item.png",
    ⲆᐃᐃᐃΔⲆⲆ: "img/amethyst-item-in.png",
    ⲆΔⵠΔᐃΔᐃ: "img/amethyst-item-click.png",
    ⵠⵠΔΔⵠᐃⲆ: "img/reidite-item.png",
    ⵠⵠΔᐃΔᐃΔ: "img/reidite-item-in.png",
    ⲆⵠⵠᐃⲆᐃΔ: "img/reidite-item-click.png",
    ⲆᐃᐃᐃᐃⲆΔ: "img/special-item-out.png",
    ⵠᐃⵠⲆⲆᐃᐃ: "img/special-item-in.png",
    ⲆⲆΔⵠᐃᐃΔ: "img/special-item-click.png",
    ΔΔᐃᐃⲆⵠᐃ: "img/level-item-out.png",
    ⵠᐃᐃⲆⵠⲆΔ: "img/level-item-in.png",
    ΔⲆⵠᐃⵠΔᐃ: "img/level-item-click.png",
    ᐃΔⲆᐃⲆᐃᐃ: "img/skin-previous-out.png",
    ᐃΔⵠΔⵠᐃᐃ: "img/skin-previous-in.png",
    ⵠⲆⵠΔᐃⲆⵠ: "img/skin-previous-click.png",
    ΔⵠΔΔⵠⵠⲆ: "img/skin-next-out.png",
    ⵠΔⲆⵠΔΔⵠ: "img/skin-next-in.png",
    ⵠⲆᐃΔΔⲆⲆ: "img/skin-next-click.png",
    ⲆⵠΔⲆⲆ: "img/back-button-out.png",
    ΔⲆΔⲆⵠ: "img/back-button-in.png",
    ΔⲆⲆΔΔ: "img/back-button-click.png",
    ⲆΔΔᐃⲆᐃᐃ: "img/get-more-button-out.png",
    ⲆⵠⵠΔΔⲆΔ: "img/get-more-button-in.png",
    ΔΔᐃⵠΔⲆΔ: "img/get-more-button-click.png",
    ΔⵠⲆⲆΔⵠⵠ: "img/currency1-out.png",
    ΔΔᐃΔᐃΔⵠ: "img/currency1-in.png",
    ΔⵠᐃΔⵠⲆⵠ: "img/currency1-click.png",
    ⵠᐃⲆⵠΔⲆΔ: "img/currency2-out.png",
    ⵠΔⲆⲆⵠΔΔ: "img/currency2-in.png",
    ΔⲆⵠΔΔᐃⵠ: "img/currency2-click.png",
    ᐃⵠΔΔΔΔⵠ: "img/currency3-out.png",
    ΔⵠⲆᐃⲆΔᐃ: "img/currency3-in.png",
    ⲆⲆΔⲆΔⵠⲆ: "img/currency3-click.png",
    ΔⵠΔⲆᐃⲆⲆ: "img/currency4-out.png",
    ⵠⲆΔᐃⵠⵠⲆ: "img/currency4-in.png",
    ⵠⲆⲆⵠⲆⲆⲆ: "img/currency4-click.png",
    ΔᐃΔⵠⵠⲆᐃ: "img/currency5-out.png",
    ⲆⲆⵠⲆⵠⲆΔ: "img/currency5-in.png",
    ΔⵠⲆΔⵠᐃⲆ: "img/currency5-click.png",
    ⲆⵠⲆΔΔΔᐃ: "img/price1-out.png",
    ⵠΔⵠΔΔⲆΔ: "img/price1-in.png",
    ⵠⵠⲆⲆⵠΔΔ: "img/price1-click.png",
    ⲆⵠΔΔᐃⲆⵠ: "img/price2-out.png",
    ⲆᐃⵠΔΔⲆΔ: "img/price2-in.png",
    ᐃΔⲆⲆⵠⲆⲆ: "img/price2-click.png",
    ⲆⲆⵠⲆⲆⲆⲆ: "img/price3-out.png",
    ⲆⵠΔⲆⲆⲆⲆ: "img/price3-in.png",
    ⵠΔᐃΔⲆⲆᐃ: "img/price3-click.png",
    ᐃᐃⲆⵠᐃⲆⵠ: "img/price4-out.png",
    ⲆᐃᐃⵠⵠΔⵠ: "img/price4-in.png",
    ᐃᐃᐃⵠⵠⲆΔ: "img/price4-click.png",
    ⲆΔᐃⵠΔΔΔ: "img/price5-out.png",
    ⲆⵠⲆⵠΔΔᐃ: "img/price5-in.png",
    ⵠⲆⲆⲆΔⵠⵠ: "img/price5-click.png",
    ⲆᐃΔΔᐃⵠΔᐃⵠ: "img/buy-private-server-out.png",
    ΔΔⲆⲆᐃⲆⲆΔⵠ: "img/buy-private-server-in.png",
    ⲆΔᐃᐃΔⲆΔⲆΔ: "img/buy-private-server-click.png",
    ΔᐃⲆΔⲆᐃⲆ: "img/atlanta-out.png",
    ⵠΔⲆΔᐃⲆⲆ: "img/atlanta-in.png",
    ΔⲆΔᐃᐃⲆΔ: "img/atlanta-click.png",
    ⵠΔⲆᐃⵠᐃⲆ: "img/dallas-out.png",
    ⵠⵠΔᐃᐃⵠᐃ: "img/dallas-in.png",
    ⲆⲆΔᐃᐃⲆⵠ: "img/dallas-click.png",
    ΔⵠⲆⲆΔⲆᐃ: "img/fremont-out.png",
    ΔⵠᐃⵠᐃΔⵠ: "img/fremont-in.png",
    ᐃᐃᐃⵠΔⲆⵠ: "img/fremont-click.png",
    ⵠᐃΔⵠᐃⲆᐃ: "img/newark-out.png",
    ⲆΔΔⲆⵠⲆⵠ: "img/newark-in.png",
    ⵠⲆⵠΔΔⵠΔ: "img/newark-click.png",
    ⵠⲆᐃⲆⵠᐃⵠ: "img/toronto-out.png",
    ⲆⵠᐃᐃⵠⵠΔ: "img/toronto-in.png",
    ⵠⲆⲆΔⲆⲆⲆ: "img/toronto-click.png",
    ΔᐃᐃᐃΔΔⵠ: "img/singapore-out.png",
    ⵠⲆᐃᐃΔⵠΔ: "img/singapore-in.png",
    ⲆᐃᐃᐃΔⵠⲆ: "img/singapore-click.png",
    ΔⲆΔⲆⲆⲆΔ: "img/frankfurt-out.png",
    ΔΔⲆΔᐃΔᐃ: "img/frankfurt-in.png",
    ΔΔⲆⲆᐃⲆⵠ: "img/frankfurt-click.png",
    ⵠⵠⵠⲆⲆΔⵠ: "img/london-out.png",
    ⲆⲆΔΔⲆΔᐃ: "img/london-in.png",
    ΔΔᐃᐃΔΔᐃ: "img/london-click.png",
    ΔⲆᐃΔⲆᐃΔ: "img/mumbai-out.png",
    ⵠⲆⲆΔⵠᐃⵠ: "img/mumbai-in.png",
    ⵠⲆⲆⲆΔᐃΔ: "img/mumbai-click.png",
    ⲆⲆᐃⲆᐃᐃⲆ: "img/tokyo-out.png",
    ΔΔΔⲆⵠᐃΔ: "img/tokyo-in.png",
    ⲆΔᐃΔᐃⵠⲆ: "img/tokyo-click.png",
    ᐃΔΔΔⲆⲆᐃⵠᐃ: "img/yes-location-out.png",
    ⵠΔⲆᐃΔΔⵠΔⵠ: "img/yes-location-in.png",
    ΔⲆⲆᐃΔᐃᐃᐃΔ: "img/yes-location-click.png",
    ΔᐃᐃⵠⲆⵠⲆ: "img/3days-out.png",
    ⵠΔᐃⵠⲆᐃⲆ: "img/3days-in.png",
    ⲆᐃⵠⲆⲆΔΔ: "img/3days-click.png",
    ⵠⲆⵠᐃΔᐃⲆ: "img/7days-out.png",
    ⵠⵠⵠⲆⲆⲆⵠ: "img/7days-in.png",
    ⲆΔⲆᐃⵠᐃᐃ: "img/7days-click.png",
    ⲆΔΔᐃⵠΔⵠ: "img/30days-out.png",
    ᐃΔΔΔⵠⵠΔ: "img/30days-in.png",
    ΔᐃᐃⲆⵠⵠⵠ: "img/30days-click.png",
    ⵠⵠΔⵠⵠⵠⲆ: "img/90days-out.png",
    ᐃΔᐃᐃⵠⵠᐃ: "img/90days-in.png",
    ⵠⵠⲆΔᐃᐃΔ: "img/90days-click.png",
    ⵠΔΔΔⲆⵠⲆ: "img/spin1.png",
    ⲆΔⵠᐃⲆⵠⵠ: "img/spin2.png",
    ᐃⵠΔᐃᐃⲆΔ: "img/spin3.png",
    ᐃΔⲆⵠΔΔⲆ: "img/spin4.png",
    ⵠΔΔᐃⲆᐃᐃ: "img/spin5.png",
    ⲆᐃᐃΔⵠᐃⲆ: "img/spin6.png",
    ⲆΔΔΔⲆⵠΔ: "img/arrow-spin.png",
    ⲆⲆᐃᐃⵠⵠⲆ: "img/spin-button-1-out.png",
    ⲆΔᐃᐃΔΔΔ: "img/spin-button-1-in.png",
    ΔΔΔᐃⵠΔΔ: "img/spin-button-1-click.png",
    ᐃⲆⵠⲆⵠⵠΔ: "img/spin-button-2-out.png",
    ΔᐃⲆⵠᐃⵠᐃ: "img/spin-button-2-in.png",
    ⲆⵠⵠⵠⵠΔΔ: "img/spin-button-2-click.png",
    ᐃⲆⲆᐃⵠᐃⲆ: "img/spin-button-3-out.png",
    ⵠⲆᐃΔⵠΔΔ: "img/spin-button-3-in.png",
    ⲆΔΔⵠΔⲆΔ: "img/spin-button-3-click.png",
    ⵠⵠⵠⵠΔⲆᐃ: "img/spin-button-4-out.png",
    ⲆᐃⲆⲆⵠᐃΔ: "img/spin-button-4-in.png",
    ᐃΔⵠᐃⲆᐃΔ: "img/spin-button-4-click.png",
    ⵠΔᐃⲆᐃⵠΔ: "img/spin-button-5-out.png",
    ⲆⲆⲆⵠⵠΔⵠ: "img/spin-button-5-in.png",
    ⲆⲆⲆΔⲆᐃⲆ: "img/spin-button-5-click.png",
    ᐃΔΔΔⲆΔᐃ: "img/spin-light.png",
    ⲆⵠⵠᐃᐃⵠΔ: "img/tuto-wiki-out.png",
    ᐃΔⵠᐃᐃⵠᐃ: "img/tuto-wiki-in.png",
    ΔⵠᐃᐃⲆΔⲆ: "img/tuto-wiki-click.png",
    ΔᐃΔΔⵠⲆⲆ: "img/tuto-previous-out.png",
    ⲆᐃⵠⵠⲆΔⲆ: "img/tuto-previous-in.png",
    ΔᐃᐃⵠᐃⵠΔ: "img/tuto-previous-click.png",
    ᐃΔΔΔⵠΔⵠ: "img/tuto-next-out.png",
    ᐃᐃⵠᐃᐃᐃᐃ: "img/tuto-next-in.png",
    ᐃⵠⲆᐃⵠΔᐃ: "img/tuto-next-click.png",
    ⲆᐃᐃⲆΔᐃᐃ: "img/time-leaderboard-out.png",
    ⲆΔΔᐃⲆᐃΔ: "img/time-leaderboard-in.png",
    ⵠⵠΔⵠΔⲆΔ: "img/time-leaderboard-click.png",
    ΔⲆⵠΔⵠΔΔ: "img/score-leaderboard-out.png",
    ᐃᐃⲆⵠᐃᐃΔ: "img/score-leaderboard-in.png",
    ᐃΔΔᐃⵠΔⲆ: "img/score-leaderboard-click.png",
    ΔⲆⲆⲆΔⵠΔ: "img/lvl-leaderboard-out.png",
    ⲆⲆⲆΔⲆⵠⵠ: "img/lvl-leaderboard-in.png",
    ⵠᐃΔⵠⲆⵠΔ: "img/lvl-leaderboard-click.png",
    ⵠΔⵠⲆᐃᐃᐃ: "img/kill-leaderboard-out.png",
    ⲆⵠΔΔⵠⲆΔ: "img/kill-leaderboard-in.png",
    ⵠᐃᐃΔᐃᐃⲆ: "img/kill-leaderboard-click.png",
    ⵠⵠⵠⵠⵠⵠⵠ: "img/all-leaderboard-out.png",
    ⵠᐃⵠⲆᐃⵠⲆ: "img/all-leaderboard-in.png",
    ⲆᐃⵠΔΔᐃᐃ: "img/all-leaderboard-click.png",
    ᐃⲆⵠⲆΔᐃⵠ: "img/today-leaderboard-out.png",
    ⵠⲆΔⵠⵠΔΔ: "img/today-leaderboard-in.png",
    ⲆⵠᐃΔΔⲆᐃ: "img/today-leaderboard-click.png",
    ΔⵠΔⲆΔⵠⵠ: "img/week-leaderboard-out.png",
    ⲆⲆⲆⲆΔⲆⲆ: "img/week-leaderboard-in.png",
    ᐃᐃⲆΔΔⲆΔ: "img/week-leaderboard-click.png",
    ΔⵠᐃΔᐃᐃΔ: "img/season1-out.png",
    ΔᐃⵠⵠΔⲆᐃ: "img/season1-in.png",
    ΔᐃΔⵠⲆᐃΔ: "img/season1-click.png",
    ΔΔᐃⵠᐃⲆⲆ: "img/season2-out.png",
    ΔⵠΔᐃⵠᐃⵠ: "img/season2-in.png",
    ⲆⲆᐃⵠΔⵠΔ: "img/season2-click.png",
    ᐃΔⲆⲆⵠⲆᐃ: "img/season3-out.png",
    ᐃⲆⵠⵠᐃΔΔ: "img/season3-in.png",
    ΔᐃⲆᐃΔᐃⵠ: "img/season3-click.png",
    ᐃⵠΔⲆⲆⵠⲆ: "img/season4-out.png",
    ΔᐃⲆΔⲆⲆⵠ: "img/season4-in.png",
    ᐃᐃΔⲆⵠⵠⵠ: "img/season4-click.png",
    ΔᐃⲆⵠΔΔᐃ: "img/season5-out.png",
    ⵠⵠᐃΔᐃΔΔ: "img/season5-in.png",
    ᐃⵠᐃⲆΔⲆⲆ: "img/season5-click.png",
    ⵠⵠⲆΔᐃⲆⲆ: "img/season6-out.png",
    ᐃⵠⵠΔⵠⵠΔ: "img/season6-in.png",
    ⲆⲆᐃⲆⵠΔᐃ: "img/season6-click.png",
    ᐃⲆΔⵠΔᐃⲆ: "img/total-lead-out.png",
    ⵠᐃΔⲆⵠΔᐃ: "img/total-lead-in.png",
    ⲆΔⵠᐃᐃⵠⵠ: "img/total-lead-click.png",
    ᐃΔⲆᐃᐃᐃⲆ: "img/normal-lead-out.png",
    ⵠⲆⲆⵠᐃⲆⵠ: "img/normal-lead-in.png",
    ⵠⲆⵠΔᐃⲆΔ: "img/normal-lead-click.png",
    ⲆΔⵠᐃⲆⵠⲆ: "img/forest-lead-out.png",
    ⲆⵠⵠΔᐃΔⵠ: "img/forest-lead-in.png",
    ⵠⲆⲆⲆⵠⲆΔ: "img/forest-lead-click.png",
    ᐃᐃⵠᐃᐃⲆΔ: "img/vampire-lead-out.png",
    ΔΔⵠⲆⵠΔᐃ: "img/vampire-lead-in.png",
    ᐃΔᐃᐃⲆⵠⲆ: "img/vampire-lead-click.png",
    ᐃΔⲆΔᐃᐃᐃ: "img/zombie-lead-out.png",
    ⵠⵠⲆᐃΔΔⵠ: "img/zombie-lead-in.png",
    ᐃⲆΔᐃᐃⵠᐃ: "img/zombie-lead-click.png",
    ᐃᐃⲆᐃⲆⵠⲆ: "img/day-level5.png",
    ⲆⲆⵠⲆΔᐃⲆ: "img/night-level5.png",
    ᐃⲆΔⲆⵠᐃᐃ: "img/day-level10.png",
    ⵠⲆⵠⲆΔⵠΔ: "img/night-level10.png",
    ΔᐃⲆΔΔⵠΔ: "img/day-level15.png",
    ᐃⲆⵠⲆⲆⲆⲆ: "img/night-level15.png",
    ⵠⵠⵠⲆΔⵠᐃ: "img/day-level20.png",
    ⵠⲆⲆΔᐃΔᐃ: "img/night-level20.png",
    ᐃⵠⵠΔⵠⵠⲆ: "img/day-level25.png",
    ⵠⲆᐃΔⵠᐃᐃ: "img/night-level25.png",
    ᐃⲆΔΔⵠⵠⲆ: "img/day-level30.png",
    ᐃⵠⲆᐃΔⵠⵠ: "img/night-level30.png",
    ᐃⵠⲆⲆⲆⲆᐃ: "img/day-level35.png",
    ⲆⲆⵠΔΔⵠⵠ: "img/night-level35.png",
    ⲆⵠΔᐃΔⵠᐃ: "img/day-level40.png",
    ᐃᐃᐃΔᐃⲆⵠ: "img/night-level40.png",
    ΔᐃᐃΔΔΔⲆ: "img/day-level45.png",
    ᐃΔΔⲆⵠⲆⵠ: "img/night-level45.png",
    ⵠΔⲆᐃⲆᐃⵠ: "img/day-level50.png",
    ⲆⵠⲆᐃᐃΔᐃ: "img/night-level50.png",
    ΔⲆΔᐃⲆⵠⵠ: "img/day-level55.png",
    ᐃΔᐃⵠᐃⲆⲆ: "img/night-level55.png",
    ᐃⲆⲆⵠⲆᐃᐃ: "img/day-level60.png",
    ΔΔⵠΔᐃⵠⲆ: "img/night-level60.png",
    ᐃⵠΔᐃΔᐃⵠ: "img/day-skin-devast0.png",
    ⲆΔⲆⵠΔΔᐃ: "img/night-skin-devast0.png",
    ᐃⲆⵠΔᐃᐃⲆ: "img/day-hand-devaster.png",
    ⵠⲆⲆΔᐃΔⵠ: "img/night-hand-devaster.png",
    ΔⲆⵠⲆᐃΔΔ: "img/day-skin-star0.png",
    ΔⲆᐃⲆᐃⲆΔ: "img/night-skin-star0.png",
    ΔⲆⵠΔΔᐃⲆ: "img/day-hand-star0.png",
    ᐃΔⵠⲆΔᐃΔ: "img/night-hand-star0.png",
    ⲆⲆⵠΔⲆΔΔ: "img/day-vampire.png",
    ΔᐃⵠⲆⲆᐃΔ: "img/night-vampire.png",
    ᐃⵠⵠⵠΔⵠᐃ: "img/day-hand-vampire.png",
    ⲆΔᐃⵠⵠⲆᐃ: "img/night-hand-vampire.png",
    ΔⲆᐃᐃΔΔᐃ: "img/day-zombie.png",
    ⵠⲆⵠΔΔΔⲆ: "img/night-zombie.png",
    ΔᐃⵠΔⵠᐃⵠ: "img/day-hand-zombie.png",
    ΔⲆΔⲆⲆⲆᐃ: "img/night-hand-zombie.png",
    ⵠⵠⲆⵠᐃⲆᐃ: "img/day-skin113.png",
    ⵠᐃΔⲆⲆΔⲆ: "img/night-skin113.png",
    ⵠⵠⵠᐃⵠᐃΔ: "img/day-hand-skin113.png",
    ⵠⲆΔΔⵠⲆᐃ: "img/night-hand-skin113.png",
    ᐃᐃΔⲆⲆⵠᐃ: "img/day-skin0.png",
    ᐃⲆᐃⵠⲆⲆᐃ: "img/night-skin0.png",
    ᐃⵠΔⲆᐃΔⲆ: "img/day-skin1.png",
    ⵠⵠⲆⵠΔᐃⲆ: "img/night-skin1.png",
    ⵠⵠᐃΔᐃⲆΔ: "img/day-skin2.png",
    ⲆΔΔᐃⵠᐃⲆ: "img/night-skin2.png",
    ΔⵠⵠΔⵠⵠΔ: "img/day-skin3.png",
    ⵠⵠⵠⵠⵠΔΔ: "img/night-skin3.png",
    ΔᐃᐃᐃᐃΔⵠ: "img/day-skin4.png",
    ⵠΔΔⵠΔⵠⲆ: "img/night-skin4.png",
    ᐃⲆⵠᐃⲆⵠᐃ: "img/day-skin5.png",
    ⲆΔⵠⲆᐃΔΔ: "img/night-skin5.png",
    ΔⲆⵠΔⵠⵠΔ: "img/day-skin6.png",
    ΔΔᐃⵠΔΔⲆ: "img/night-skin6.png",
    ⵠᐃΔᐃΔᐃΔ: "img/day-skin7.png",
    ⵠᐃᐃΔΔΔⵠ: "img/night-skin7.png",
    ᐃⵠΔᐃⵠⲆᐃ: "img/day-skin8.png",
    ⵠᐃᐃΔⲆΔⲆ: "img/night-skin8.png",
    ⵠⲆΔΔΔⵠᐃ: "img/day-skin9.png",
    ⵠᐃᐃᐃⵠⲆΔ: "img/night-skin9.png",
    ΔΔΔⲆⲆΔⲆ: "img/day-skin10.png",
    ⵠⲆᐃⵠᐃᐃⲆ: "img/night-skin10.png",
    ⵠⵠⵠⲆᐃᐃⲆ: "img/day-skin11.png",
    ⵠΔᐃⲆΔΔⵠ: "img/night-skin11.png",
    ΔⲆᐃⲆᐃⲆᐃ: "img/day-skin12.png",
    ᐃⲆΔΔⲆⲆⲆ: "img/night-skin12.png",
    ⲆΔⵠⵠΔⵠⵠ: "img/day-skin13.png",
    ΔⵠⵠᐃⵠΔⵠ: "img/night-skin13.png",
    ⵠⲆⵠΔᐃⲆⲆ: "img/day-skin14.png",
    ΔⲆᐃⲆᐃᐃⲆ: "img/night-skin14.png",
    ᐃΔⲆΔⵠⲆΔ: "img/day-skin15.png",
    ᐃⲆⲆΔΔⲆΔ: "img/night-skin15.png",
    ᐃⵠΔⵠⵠᐃⲆ: "img/day-skin16.png",
    ΔᐃᐃⵠᐃᐃⲆ: "img/night-skin16.png",
    ⲆᐃΔΔⲆᐃⲆ: "img/day-skin17.png",
    ᐃⲆΔΔⵠⲆᐃ: "img/night-skin17.png",
    ⲆⵠᐃⲆᐃᐃᐃ: "img/day-skin18.png",
    ⵠⵠᐃⵠᐃΔⵠ: "img/night-skin18.png",
    ΔⲆⲆΔΔⲆΔ: "img/day-skin19.png",
    ⵠⵠⵠⵠᐃΔⲆ: "img/night-skin19.png",
    ⲆⵠΔⲆⵠⵠᐃ: "img/day-skin20.png",
    ΔᐃΔᐃⵠᐃᐃ: "img/night-skin20.png",
    ⵠⲆΔᐃⲆᐃⲆ: "img/day-skin21.png",
    ΔᐃᐃᐃᐃⲆᐃ: "img/night-skin21.png",
    ᐃⵠᐃⵠⵠΔⵠ: "img/day-skin22.png",
    ⵠⵠⵠⲆⵠⲆⵠ: "img/night-skin22.png",
    ⵠΔᐃⲆⲆᐃᐃ: "img/day-skin23.png",
    ᐃⲆᐃⵠⵠΔⵠ: "img/night-skin23.png",
    ⵠⵠᐃⲆⲆⵠΔ: "img/day-skin24.png",
    ⲆⲆⲆΔΔᐃᐃ: "img/night-skin24.png",
    ΔⵠΔᐃⵠⲆⵠ: "img/day-skin25.png",
    ΔⵠⵠΔⵠΔΔ: "img/night-skin25.png",
    ⵠⵠΔΔⲆΔⲆ: "img/day-skin26.png",
    ⲆⲆΔᐃΔΔΔ: "img/night-skin26.png",
    ᐃᐃⵠΔⲆⵠⵠ: "img/day-skin27.png",
    ᐃⲆᐃᐃⲆⵠⲆ: "img/night-skin27.png",
    ⲆⲆⲆⲆᐃⲆⲆ: "img/day-skin28.png",
    ΔⵠΔⲆᐃΔⲆ: "img/night-skin28.png",
    ΔᐃΔⲆΔᐃⲆ: "img/day-skin29.png",
    ᐃⲆᐃΔⲆΔᐃ: "img/night-skin29.png",
    ⵠᐃΔⲆⲆⲆⵠ: "img/day-skin30.png",
    ⵠⵠᐃᐃⲆᐃⲆ: "img/night-skin30.png",
    ΔⲆⲆᐃᐃΔΔ: "img/day-skin31.png",
    ⵠⲆⵠⵠΔΔᐃ: "img/night-skin31.png",
    ⵠΔΔⲆⵠⵠᐃ: "img/day-skin32.png",
    ΔⲆᐃⵠⲆΔⵠ: "img/night-skin32.png",
    ΔΔᐃΔΔΔᐃ: "img/day-skin33.png",
    ΔΔΔΔⵠⲆⲆ: "img/night-skin33.png",
    ΔΔΔᐃᐃⲆΔ: "img/day-skin34.png",
    ⵠΔⲆᐃΔΔᐃ: "img/night-skin34.png",
    ⵠⲆᐃⲆᐃᐃᐃ: "img/day-skin35.png",
    ⵠⲆⲆΔⵠΔΔ: "img/night-skin35.png",
    ⲆⵠⲆᐃᐃⵠᐃ: "img/day-skin36.png",
    ⵠⲆᐃⵠᐃΔⲆ: "img/night-skin36.png",
    ⲆᐃΔⵠⲆᐃΔ: "img/day-skin37.png",
    ΔⲆⲆᐃⵠⵠᐃ: "img/night-skin37.png",
    ᐃΔⵠⲆⲆⵠᐃ: "img/day-skin38.png",
    ⵠᐃⲆⵠⵠⲆⲆ: "img/night-skin38.png",
    ᐃΔΔⵠᐃΔᐃ: "img/day-skin39.png",
    ΔΔᐃⲆⵠΔΔ: "img/night-skin39.png",
    ⵠⵠⵠᐃᐃΔᐃ: "img/day-skin40.png",
    ᐃᐃⵠⲆᐃⵠᐃ: "img/night-skin40.png",
    ⲆⵠⲆΔᐃΔⲆ: "img/day-skin41.png",
    ⲆⲆⲆⵠᐃᐃⲆ: "img/night-skin41.png",
    ⲆⲆⲆⲆΔᐃᐃ: "img/day-skin42.png",
    Δᐃⵠⵠᐃⵠᐃ: "img/night-skin42.png",
    ΔᐃᐃΔⵠΔΔ: "img/day-skin43.png",
    ⲆⲆᐃᐃⵠⲆΔ: "img/night-skin43.png",
    ΔΔⲆⵠⲆⲆΔ: "img/day-skin44.png",
    ⵠⵠΔᐃΔⲆᐃ: "img/night-skin44.png",
    ⲆⲆⵠΔⵠᐃⵠ: "img/day-skin45.png",
    ⲆⵠΔⲆⲆⲆΔ: "img/night-skin45.png",
    ⵠⲆΔⲆⵠⵠⵠ: "img/day-skin46.png",
    ⲆⵠⵠΔΔΔⲆ: "img/night-skin46.png",
    ⲆⵠⵠᐃⵠⲆᐃ: "img/day-skin47.png",
    ⵠⲆⵠⵠΔᐃᐃ: "img/night-skin47.png",
    ΔⵠᐃΔᐃᐃⵠ: "img/day-skin48.png",
    ᐃΔⵠⲆᐃΔᐃ: "img/night-skin48.png",
    ⲆᐃΔⵠᐃΔⲆ: "img/day-skin49.png",
    ᐃⲆΔⵠΔΔΔ: "img/night-skin49.png",
    ᐃⲆⵠⲆΔⲆΔ: "img/day-skin50.png",
    ΔΔⵠⵠΔᐃⵠ: "img/night-skin50.png",
    ΔⲆᐃΔⵠⵠⵠ: "img/day-skin51.png",
    ⵠᐃᐃⲆΔⲆᐃ: "img/night-skin51.png",
    ⵠⵠⵠⵠⵠᐃΔ: "img/day-skin52.png",
    ⲆᐃΔⲆⲆᐃⲆ: "img/night-skin52.png",
    ⲆΔᐃⲆΔᐃⲆ: "img/day-skin53.png",
    ΔⵠᐃⲆⵠᐃⵠ: "img/night-skin53.png",
    ᐃⵠᐃᐃⲆᐃᐃ: "img/day-skin54.png",
    ΔⲆⲆⵠΔⲆⵠ: "img/night-skin54.png",
    ΔΔᐃⲆᐃⲆΔ: "img/day-skin55.png",
    ⲆⲆΔⵠᐃⲆᐃ: "img/night-skin55.png",
    ᐃⵠᐃΔⵠΔΔ: "img/day-skin56.png",
    ⵠⲆⵠΔⲆΔᐃ: "img/night-skin56.png",
    ᐃⲆⲆΔⵠᐃᐃ: "img/day-skin57.png",
    ⲆⵠᐃⵠⵠΔᐃ: "img/night-skin57.png",
    ⵠⵠⲆᐃᐃⲆⵠ: "img/day-skin58.png",
    ⲆᐃⲆⲆⵠΔᐃ: "img/night-skin58.png",
    ᐃΔⲆᐃⲆΔΔ: "img/day-skin59.png",
    ΔᐃΔᐃᐃⵠⵠ: "img/night-skin59.png",
    ΔᐃⲆᐃᐃᐃⲆ: "img/day-skin60.png",
    ⵠⵠΔᐃᐃⲆᐃ: "img/night-skin60.png",
    ⵠΔΔΔⵠⵠᐃ: "img/day-skin61.png",
    ᐃΔⵠᐃⲆΔⵠ: "img/night-skin61.png",
    ⵠⵠⲆⲆⵠⲆΔ: "img/day-skin62.png",
    ⲆⲆⲆⲆⲆⲆⲆ: "img/night-skin62.png",
    ᐃΔⲆⲆⲆᐃⵠ: "img/day-skin63.png",
    ⵠΔᐃⲆⵠᐃΔ: "img/night-skin63.png",
    ⲆᐃΔⲆΔΔⵠ: "img/day-skin64.png",
    ᐃⵠⲆⵠⲆΔᐃ: "img/night-skin64.png",
    ⵠⲆᐃⵠᐃΔᐃ: "img/day-skin65.png",
    ᐃᐃᐃⵠⲆⵠΔ: "img/night-skin65.png",
    ⲆΔᐃΔΔⲆᐃ: "img/day-skin66.png",
    ⵠⲆⵠᐃΔⲆᐃ: "img/night-skin66.png",
    ᐃᐃᐃΔⵠⲆᐃ: "img/day-skin67.png",
    ⲆΔⵠᐃⲆᐃΔ: "img/night-skin67.png",
    ⵠΔᐃᐃᐃΔΔ: "img/day-skin68.png",
    ΔⲆΔΔⲆΔΔ: "img/night-skin68.png",
    ⵠⲆᐃⵠⲆⵠⵠ: "img/day-skin69.png",
    ΔⵠΔⵠᐃⵠΔ: "img/night-skin69.png",
    ᐃΔΔΔᐃⵠᐃ: "img/day-skin70.png",
    ⲆᐃⲆᐃᐃᐃⵠ: "img/night-skin70.png",
    ΔⲆᐃᐃⵠⲆⵠ: "img/day-skin71.png",
    ᐃⲆⵠΔᐃΔᐃ: "img/night-skin71.png",
    ᐃᐃᐃᐃⵠⲆᐃ: "img/day-skin72.png",
    ⵠΔΔⲆΔᐃᐃ: "img/night-skin72.png",
    ⲆᐃⵠᐃᐃΔⵠ: "img/day-skin73.png",
    ⲆⲆᐃⲆᐃΔΔ: "img/night-skin73.png",
    ⵠᐃⵠⵠᐃⲆⲆ: "img/day-skin74.png",
    ΔᐃⵠⲆⲆⵠΔ: "img/night-skin74.png",
    ⵠⵠᐃⲆΔᐃⲆ: "img/day-skin75.png",
    ΔᐃΔᐃⲆᐃⵠ: "img/night-skin75.png",
    ⲆᐃᐃⵠⵠΔᐃ: "img/day-skin76.png",
    ⵠⲆᐃᐃᐃᐃⵠ: "img/night-skin76.png",
    ⵠⲆⲆⵠⲆᐃΔ: "img/day-skin77.png",
    ΔΔᐃⲆΔⵠⲆ: "img/night-skin77.png",
    ⲆᐃⵠⲆⲆⲆⵠ: "img/day-skin78.png",
    ΔⵠⲆⲆΔΔⲆ: "img/night-skin78.png",
    ⲆΔⲆⲆΔⵠΔ: "img/day-skin79.png",
    ⲆᐃᐃᐃᐃΔᐃ: "img/night-skin79.png",
    ⲆⲆΔⵠⲆᐃⲆ: "img/day-skin80.png",
    ᐃⵠᐃΔᐃⲆⵠ: "img/night-skin80.png",
    ᐃⲆΔΔⵠΔᐃ: "img/day-skin81.png",
    ᐃᐃᐃⲆᐃΔⵠ: "img/night-skin81.png",
    ⲆⲆΔⵠⲆⲆΔ: "img/day-skin82.png",
    ⲆⵠⵠᐃⵠⲆⵠ: "img/night-skin82.png",
    ᐃⲆⵠⵠⲆⲆᐃ: "img/day-skin83.png",
    ⵠᐃΔᐃⵠΔⵠ: "img/night-skin83.png",
    ⵠᐃⵠᐃⵠΔⵠ: "img/day-skin84.png",
    ⵠⵠⵠᐃⵠΔΔ: "img/night-skin84.png",
    ⵠⵠⲆⲆᐃⵠᐃ: "img/day-skin85.png",
    ΔⵠⵠⵠΔⵠⲆ: "img/night-skin85.png",
    ᐃⲆᐃⵠⲆΔⲆ: "img/day-skin86.png",
    ᐃᐃⵠΔⲆΔⲆ: "img/night-skin86.png",
    ᐃΔⵠᐃⲆᐃᐃ: "img/day-skin87.png",
    ΔΔⲆⲆⵠΔΔ: "img/night-skin87.png",
    ΔΔⲆⵠⵠΔⲆ: "img/day-skin88.png",
    ᐃⲆΔⲆⵠᐃⵠ: "img/night-skin88.png",
    ⲆᐃⵠⲆⲆⵠⵠ: "img/day-skin89.png",
    ⲆᐃⵠΔⲆⵠᐃ: "img/night-skin89.png",
    ᐃⵠᐃⲆΔⵠΔ: "img/day-skin90.png",
    ⲆᐃⲆΔⲆⲆⲆ: "img/night-skin90.png",
    ᐃⲆⵠΔΔᐃΔ: "img/day-skin91.png",
    ⲆⵠΔᐃⲆⵠΔ: "img/night-skin91.png",
    ⵠᐃᐃΔⲆⲆᐃ: "img/day-skin92.png",
    ⲆΔⵠⲆΔᐃⵠ: "img/night-skin92.png",
    ΔⵠΔΔⲆᐃⲆ: "img/day-skin93.png",
    ⵠⵠⵠⵠⵠΔⲆ: "img/night-skin93.png",
    ⲆΔⵠΔⵠᐃⵠ: "img/day-skin94.png",
    ⲆΔⵠᐃΔΔᐃ: "img/night-skin94.png",
    ⲆᐃΔⵠⵠᐃⲆ: "img/day-skin95.png",
    ⵠᐃᐃⲆⵠⲆⲆ: "img/night-skin95.png",
    ᐃⲆⵠⲆⵠⵠⵠ: "img/day-skin96.png",
    ⲆᐃⵠⵠⵠⲆΔ: "img/night-skin96.png",
    ⵠΔᐃⲆⲆⵠⲆ: "img/day-skin97.png",
    ⲆᐃⲆΔⲆⵠⵠ: "img/night-skin97.png",
    ᐃⵠᐃᐃΔⵠᐃ: "img/day-skin98.png",
    ⵠⵠⵠᐃⲆⲆΔ: "img/night-skin98.png",
    ᐃᐃⲆᐃᐃΔᐃ: "img/day-skin99.png",
    ⵠⲆᐃᐃᐃⵠⵠ: "img/night-skin99.png",
    ⵠΔⵠΔⵠΔⲆ: "img/day-skin100.png",
    ΔΔᐃⲆⲆΔᐃ: "img/night-skin100.png",
    ⵠΔⲆⵠᐃᐃΔ: "img/day-skin101.png",
    ⵠΔΔⲆⵠᐃᐃ: "img/night-skin101.png",
    ⲆΔⵠⵠᐃΔΔ: "img/day-skin102.png",
    ᐃΔᐃᐃⵠΔⲆ: "img/night-skin102.png",
    ⵠΔⲆⵠᐃⵠᐃ: "img/day-skin103.png",
    ᐃᐃᐃΔΔⲆⵠ: "img/night-skin103.png",
    ⲆⵠⲆⵠⲆΔΔ: "img/day-skin104.png",
    ᐃΔᐃΔᐃΔⵠ: "img/night-skin104.png",
    ⲆΔΔⲆⵠΔΔ: "img/day-skin105.png",
    ⲆⲆⵠⲆⲆΔᐃ: "img/night-skin105.png",
    ΔⲆΔⲆⲆΔΔ: "img/day-skin106.png",
    ΔⲆΔΔⵠⵠⲆ: "img/night-skin106.png",
    ΔⵠⵠⵠⲆⲆⲆ: "img/day-skin107.png",
    ⲆⲆΔⵠΔⲆᐃ: "img/night-skin107.png",
    ⵠⵠᐃΔⲆᐃⵠ: "img/day-skin108.png",
    ⵠⲆᐃⵠΔⵠΔ: "img/night-skin108.png",
    ⵠᐃⲆⲆᐃⲆⲆ: "img/day-skin109.png",
    ᐃᐃⵠᐃⲆⲆⵠ: "img/night-skin109.png",
    ᐃΔᐃⵠⵠⲆΔ: "img/day-skin110.png",
    ᐃΔΔΔᐃⲆΔ: "img/night-skin110.png",
    ⵠΔⲆⵠᐃΔⲆ: "img/day-skin111.png",
    ⲆΔᐃΔⲆⵠⵠ: "img/night-skin111.png",
    ⲆΔᐃᐃⲆⲆΔ: "img/day-skin112.png",
    ⲆⵠᐃⵠᐃⵠⲆ: "img/night-skin112.png",
    ⲆⲆⲆⲆⲆⲆᐃⵠΔ: "img/day-skin113.png",
    ᐃᐃᐃᐃΔΔⲆΔⵠ: "img/night-skin113.png",
    ⵠᐃΔΔⵠᐃⲆ: "img/day-skin114.png",
    ΔᐃᐃⲆⲆⵠΔ: "img/night-skin114.png",
    ΔⲆᐃΔᐃΔⵠ: "img/day-skin115.png",
    ⲆⵠⵠⵠᐃΔⲆ: "img/night-skin115.png",
    ⲆᐃⲆⵠⵠⲆⲆ: "img/day-skin116.png",
    ⵠⵠΔⲆΔⲆⵠ: "img/night-skin116.png",
    ⲆⲆⲆⲆⵠⵠⵠ: "img/day-skin117.png",
    ᐃⲆΔⵠⲆⵠᐃ: "img/night-skin117.png",
    ⵠⲆⵠΔⲆⵠⵠ: "img/day-skin118.png",
    ΔΔⵠᐃΔᐃᐃ: "img/night-skin118.png",
    Ⲇⵠᐃⵠⵠⵠᐃ: "img/day-skin119.png",
    ⲆⲆⲆΔΔᐃⵠ: "img/night-skin119.png",
    ⲆⵠⵠΔⲆⵠΔ: "img/day-skin120.png",
    ⲆΔⲆᐃⲆⲆᐃ: "img/night-skin120.png",
    ΔΔⵠᐃⲆᐃⲆ: "img/day-skin121.png",
    ⵠⲆΔⵠⵠⵠᐃ: "img/night-skin121.png",
    ᐃᐃᐃᐃᐃⵠⵠ: "img/day-skin122.png",
    ΔⲆᐃⲆⲆᐃΔ: "img/night-skin122.png",
    ⵠⲆΔᐃⵠⲆΔ: "img/day-skin123.png",
    ⵠΔⵠᐃΔⲆΔ: "img/night-skin123.png",
    ᐃᐃᐃⵠΔΔᐃ: "img/day-skin124.png",
    ᐃⲆᐃᐃⲆΔⲆ: "img/night-skin124.png",
    ⲆΔⵠᐃⵠΔⲆ: "img/day-skin125.png",
    ΔⲆΔΔⲆⲆΔ: "img/night-skin125.png",
    ⲆⲆⲆΔⵠᐃᐃ: "img/day-skin126.png",
    ⲆΔⲆⲆⲆᐃⵠ: "img/night-skin126.png",
    ⲆᐃΔⵠᐃᐃⵠ: "img/day-skin127.png",
    ⵠΔΔΔⲆⲆᐃ: "img/night-skin127.png",
    ᐃᐃΔᐃⵠⲆᐃ: "img/day-skin128.png",
    ⲆⲆⲆⵠΔⲆⵠ: "img/night-skin128.png",
    ᐃᐃᐃᐃᐃΔᐃ: "img/day-skin129.png",
    ᐃΔΔΔΔᐃⵠ: "img/night-skin129.png",
    ⵠⵠⲆⲆΔΔΔ: "img/day-skin130-1.png",
    ⲆⵠᐃᐃⵠΔΔ: "img/night-skin130-1.png",
    ΔⵠᐃⵠⵠⲆᐃ: "img/day-skin131.png",
    ⲆⵠΔⲆᐃⲆⲆ: "img/night-skin131.png",
    ⵠΔⵠⲆⲆⵠⲆ: "img/day-skin132.png",
    ΔⲆⲆΔΔᐃⲆ: "img/night-skin132.png",
    ⲆᐃⲆⲆⵠᐃᐃ: "img/day-skin133.png",
    ΔⵠⵠⵠᐃⲆⲆ: "img/night-skin133.png",
    ⵠᐃⲆⵠΔᐃᐃ: "img/day-skin134.png",
    ᐃᐃᐃⲆΔⲆⵠ: "img/night-skin134.png",
    ⲆⵠᐃⵠⲆᐃⵠ: "img/day-skin135.png",
    ⵠΔⵠΔⲆᐃᐃ: "img/night-skin135.png",
    ΔⲆΔⵠⵠᐃΔ: "img/day-skin136.png",
    ⲆⲆⵠⲆⲆⲆᐃ: "img/night-skin136.png",
    ⲆⵠᐃᐃΔΔⵠ: "img/day-skin137.png",
    ᐃΔᐃΔⵠΔⲆ: "img/night-skin137.png",
    ⵠᐃⵠΔᐃⲆⵠ: "img/day-skin138.png",
    ᐃⲆΔᐃΔΔᐃ: "img/night-skin138.png",
    ⵠᐃⵠᐃⲆⵠⲆ: "img/day-skin139.png",
    ΔⲆΔⵠΔⲆⲆ: "img/night-skin139.png",
    ᐃⲆⲆⲆⲆᐃᐃ: "img/day-skin140.png",
    ⵠⵠᐃᐃᐃⲆᐃ: "img/night-skin140.png",
    ᐃⲆⵠⵠⵠⵠᐃ: "img/day-skin141.png",
    ⵠⲆΔⵠᐃⵠⵠ: "img/night-skin141.png",
    ⲆΔᐃⲆⵠᐃⲆ: "img/day-skin142.png",
    ⲆⵠΔΔⵠᐃⲆ: "img/night-skin142.png",
    ΔΔⲆⵠⲆᐃⵠ: "img/day-skin143.png",
    ⲆⲆΔΔΔᐃΔ: "img/night-skin143.png",
    ᐃΔⲆⵠⲆⵠⲆ: "img/day-skin144.png",
    ⵠⵠⲆⵠⲆⲆⵠ: "img/night-skin144.png",
    ⲆⵠⲆⵠⲆⵠΔ: "img/day-skin145.png",
    ⲆⵠⵠⲆⲆᐃⲆ: "img/night-skin145.png",
    ᐃᐃⵠΔⵠᐃⵠ: "img/day-skin146.png",
    ΔΔⲆⲆⲆᐃⵠ: "img/night-skin146.png",
    ᐃΔⲆⲆⵠᐃᐃ: "img/day-skin147.png",
    ΔᐃⵠΔⵠΔᐃ: "img/night-skin147.png",
    ⵠΔᐃⵠΔᐃᐃ: "img/day-skin148.png",
    ΔᐃΔⲆⲆᐃΔ: "img/night-skin148.png",
    ᐃᐃⲆΔΔᐃⲆ: "img/day-skin149.png",
    ᐃΔΔⲆⵠᐃᐃ: "img/night-skin149.png",
    ᐃᐃᐃⵠΔᐃΔ: "img/day-skin150.png",
    ⲆᐃᐃΔⵠΔⵠ: "img/night-skin150.png",
    ΔΔΔⵠΔᐃΔ: "img/day-hand-skin0.png",
    ⲆⲆᐃⲆⲆᐃⵠ: "img/night-hand-skin0.png",
    ⵠⵠⵠᐃⲆΔⲆ: "img/day-hand-skin1.png",
    ⲆⲆⲆⵠᐃⲆⵠ: "img/night-hand-skin1.png",
    ΔⲆᐃⲆᐃⵠΔ: "img/day-hand-skin2.png",
    ⲆΔΔⲆᐃⵠⵠ: "img/night-hand-skin2.png",
    ⵠΔᐃᐃⲆⵠᐃ: "img/day-hand-skin3.png",
    ΔⲆⲆⲆⲆⵠᐃ: "img/night-hand-skin3.png",
    ⵠⲆⵠᐃⵠᐃⲆ: "img/day-hand-skin4.png",
    ⵠⲆⵠΔᐃᐃΔ: "img/night-hand-skin4.png",
    ᐃᐃΔⵠⵠⵠΔ: "img/day-hand-skin5.png",
    ⲆⲆᐃΔΔⵠᐃ: "img/night-hand-skin5.png",
    ΔᐃⵠᐃᐃΔΔ: "img/day-hand-skin6.png",
    ΔⵠᐃⵠΔΔⵠΔᐃ: "img/night-hand-skin6.png",
    ΔⲆΔⲆⲆⲆⵠ: "img/day-hand-skin6.png",
    ΔⲆᐃⲆⲆΔⵠ: "img/night-hand-skin6.png",
    ⲆᐃⲆΔΔᐃⲆ: "img/day-hand-skin8.png",
    ⵠⲆΔⲆΔⵠⵠ: "img/night-hand-skin8.png",
    ⵠⲆᐃᐃᐃⲆΔ: "img/day-hand-skin9.png",
    ΔΔΔⲆⲆⲆΔ: "img/night-hand-skin9.png",
    ᐃⵠⵠⵠⲆⵠᐃ: "img/day-hand-skin10.png",
    ᐃⵠⵠⲆΔⵠΔ: "img/night-hand-skin10.png",
    ⵠⵠⵠⲆⵠΔᐃ: "img/day-hand-skin11.png",
    ᐃⲆΔⵠⵠⵠᐃ: "img/night-hand-skin11.png",
    ⲆᐃⵠᐃⲆⲆⲆ: "img/day-hand-skin12.png",
    ΔΔⲆⵠⵠΔΔ: "img/night-hand-skin12.png",
    ⵠᐃⲆⵠⲆΔⵠ: "img/day-hand-skin13.png",
    ⲆΔⲆⲆⲆᐃΔ: "img/night-hand-skin13.png",
    ⵠⲆⲆΔⲆΔΔ: "img/day-hand-skin14.png",
    ΔⵠᐃΔⵠⵠⲆ: "img/night-hand-skin14.png",
    ⵠᐃⵠΔⵠⲆΔ: "img/day-hand-skin15.png",
    ΔⵠⵠⲆᐃⲆⵠ: "img/night-hand-skin15.png",
    ⲆⲆΔΔΔⵠⵠ: "img/day-hand-skin16.png",
    ⲆⵠΔⵠⵠⲆⵠ: "img/night-hand-skin16.png",
    ᐃⵠⲆᐃᐃⵠⲆ: "img/day-hand-skin17.png",
    ᐃⵠᐃⲆⵠᐃⵠ: "img/night-hand-skin17.png",
    ΔᐃΔΔⵠᐃⲆ: "img/day-hand-skin18.png",
    ⵠᐃᐃᐃⲆⲆⵠ: "img/night-hand-skin18.png",
    ⵠᐃⲆΔΔⵠᐃ: "img/day-hand-skin19.png",
    ᐃΔΔΔⲆⵠⲆ: "img/night-hand-skin19.png",
    ⵠΔᐃⲆⲆⲆᐃ: "img/day-hand-skin20.png",
    ⲆⵠⵠⵠⲆⵠᐃ: "img/night-hand-skin20.png",
    ⲆⵠᐃΔⵠΔᐃ: "img/day-hand-skin21.png",
    ⵠⵠⲆⲆΔΔⲆ: "img/night-hand-skin21.png",
    ΔΔⵠⲆᐃⵠⲆ: "img/day-hand-skin22.png",
    ᐃⵠΔⵠᐃΔⲆ: "img/night-hand-skin22.png",
    ⵠΔⵠⵠᐃⵠⵠ: "img/day-hand-skin23.png",
    ⵠΔⵠᐃᐃΔⲆ: "img/night-hand-skin23.png",
    ΔΔⲆⲆΔΔⲆ: "img/day-hand-skin24.png",
    ⵠΔⵠᐃΔᐃΔ: "img/night-hand-skin24.png",
    ΔΔⵠΔⵠΔⲆ: "img/day-hand-skin25.png",
    ⲆⲆⵠⲆΔⵠΔ: "img/night-hand-skin25.png",
    ⲆᐃⲆⵠᐃᐃᐃ: "img/day-hand-skin26.png",
    ⲆᐃⲆⵠⲆⲆⲆ: "img/night-hand-skin26.png",
    ᐃΔΔⲆⵠΔΔ: "img/day-hand-skin27.png",
    ΔⵠΔΔΔⲆⲆ: "img/night-hand-skin27.png",
    ⲆΔⵠⲆⵠᐃⵠ: "img/day-hand-skin28.png",
    ᐃΔΔⵠⲆⵠⵠ: "img/night-hand-skin28.png",
    ⲆᐃⵠᐃΔⲆⲆ: "img/day-hand-skin29.png",
    ⲆΔⵠⲆᐃᐃⲆ: "img/night-hand-skin29.png",
    ⲆΔⲆⲆⵠⵠΔ: "img/day-hand-skin30.png",
    ᐃΔΔᐃⲆⵠΔ: "img/night-hand-skin30.png",
    ⵠΔᐃⲆⲆⲆⲆ: "img/day-hand-skin31.png",
    ⵠᐃⵠⲆⲆΔⵠ: "img/night-hand-skin31.png",
    ⵠⲆⲆⲆΔΔⵠ: "img/day-hand-skin32.png",
    ⵠΔⵠⲆⲆΔΔ: "img/night-hand-skin32.png",
    ⲆⲆΔΔᐃⵠⲆ: "img/day-hand-skin33.png",
    ΔⵠⲆᐃⲆᐃⵠ: "img/night-hand-skin33.png",
    ⲆΔⲆⵠᐃⲆᐃ: "img/day-hand-skin34.png",
    Δⵠⵠⵠᐃⵠᐃ: "img/night-hand-skin34.png",
    ᐃⵠᐃⵠᐃᐃⲆ: "img/day-hand-skin35.png",
    ΔΔᐃᐃⵠⲆΔ: "img/night-hand-skin35.png",
    ᐃΔΔΔᐃᐃᐃ: "img/day-hand-skin36.png",
    ᐃⵠΔⵠΔᐃⵠ: "img/night-hand-skin36.png",
    ᐃᐃᐃΔΔⵠΔ: "img/day-hand-skin37.png",
    ⲆⵠⲆⵠⵠΔⵠ: "img/night-hand-skin37.png",
    ᐃΔΔΔⵠⵠⲆ: "img/day-hand-skin38.png",
    ⵠΔⲆⵠΔⲆᐃ: "img/night-hand-skin38.png",
    ᐃⵠⵠᐃΔⲆΔ: "img/day-hand-skin39.png",
    ᐃⵠⵠⲆᐃᐃⲆ: "img/night-hand-skin39.png",
    ᐃⵠΔᐃⵠᐃΔ: "img/day-hand-skin40.png",
    ᐃⲆᐃᐃᐃᐃⵠ: "img/night-hand-skin40.png",
    ⲆⲆᐃⲆⲆⵠⵠ: "img/day-hand-skin41.png",
    ᐃΔᐃΔΔⵠⵠ: "img/night-hand-skin41.png",
    ΔⵠΔΔⲆⲆⵠ: "img/day-hand-skin42.png",
    ⲆⵠᐃᐃⵠⲆⲆ: "img/night-hand-skin42.png",
    ⲆⲆⲆⵠᐃΔⵠ: "img/day-hand-skin43.png",
    ⲆΔⲆⲆⲆᐃⲆ: "img/night-hand-skin43.png",
    ⲆⲆᐃⵠΔⲆᐃ: "img/day-hand-skin16.png",
    ᐃΔⵠⵠⵠᐃᐃ: "img/night-hand-skin16.png",
    ᐃⵠᐃⵠⲆⵠΔ: "img/day-hand-skin45.png",
    ⲆΔⵠⲆᐃᐃᐃ: "img/night-hand-skin45.png",
    ᐃΔᐃΔⵠΔⵠ: "img/day-hand-skin46.png",
    ᐃⵠⵠⵠᐃⲆⵠ: "img/night-hand-skin46.png",
    ⵠⲆⲆΔΔΔⵠ: "img/day-hand-skin47.png",
    ⵠᐃⵠⲆⵠⲆⵠ: "img/night-hand-skin47.png",
    ⲆⲆΔᐃⲆⵠⲆ: "img/day-hand-skin48.png",
    ⲆᐃⵠᐃᐃΔⲆ: "img/night-hand-skin48.png",
    ⲆⲆΔⵠΔⵠⵠ: "img/day-hand-skin49.png",
    ⲆᐃΔⲆΔⲆⲆ: "img/night-hand-skin49.png",
    ⵠᐃΔⲆᐃΔⵠ: "img/day-hand-skin49.png",
    ᐃⲆⵠⵠⵠᐃΔ: "img/night-hand-skin49.png",
    ΔⵠᐃᐃᐃᐃΔ: "img/day-hand-skin51.png",
    ⲆⲆΔⲆⵠᐃΔ: "img/night-hand-skin51.png",
    ᐃⲆⲆΔⲆⲆⵠ: "img/day-hand-skin52.png",
    ⲆⵠΔⲆΔΔⲆ: "img/night-hand-skin52.png",
    ⲆᐃΔΔⲆⲆⵠ: "img/day-hand-skin53.png",
    ΔⵠΔⵠΔΔᐃ: "img/night-hand-skin53.png",
    ⲆⲆⲆⵠᐃΔᐃ: "img/day-hand-skin53.png",
    ᐃᐃᐃΔⲆⲆᐃ: "img/night-hand-skin53.png",
    ᐃⲆⲆⵠⵠⲆᐃ: "img/day-hand-skin55.png",
    ⲆⵠΔᐃΔΔΔ: "img/night-hand-skin55.png",
    ⲆⲆΔⵠⲆⲆᐃ: "img/day-hand-skin56.png",
    ΔᐃⵠⲆΔⲆⵠ: "img/night-hand-skin56.png",
    ᐃⵠⲆⲆᐃᐃⲆ: "img/day-hand-skin57.png",
    ΔⵠⲆⵠⲆΔᐃ: "img/night-hand-skin57.png",
    ⲆⲆᐃⲆΔⵠⲆ: "img/day-hand-skin58.png",
    ⲆᐃΔΔⵠⵠⲆ: "img/night-hand-skin58.png",
    ᐃⲆⵠⵠⵠᐃⵠ: "img/day-hand-skin59.png",
    ΔΔⲆⲆⵠᐃΔ: "img/night-hand-skin59.png",
    ΔᐃᐃΔⲆⲆΔ: "img/day-hand-skin61.png",
    ΔⲆΔⵠΔΔⲆ: "img/night-hand-skin61.png",
    ⲆᐃΔᐃⵠΔⵠ: "img/day-hand-skin61.png",
    ᐃΔⵠⵠⲆⲆⲆ: "img/night-hand-skin61.png",
    ⵠⵠΔⲆⵠᐃΔ: "img/day-hand-skin62.png",
    ⵠⵠⲆᐃⵠⵠᐃ: "img/night-hand-skin62.png",
    ⲆⲆⵠⵠΔᐃⵠ: "img/day-hand-skin63.png",
    ΔᐃΔⵠᐃⵠⲆ: "img/night-hand-skin63.png",
    ΔⵠⲆᐃⵠⵠⲆ: "img/day-hand-skin64.png",
    ⵠⵠⵠⵠⲆⲆᐃ: "img/night-hand-skin64.png",
    ΔⲆⵠΔΔⲆⲆ: "img/day-hand-skin65.png",
    ⲆΔᐃⲆΔΔᐃ: "img/night-hand-skin65.png",
    ΔⲆⲆΔⲆΔᐃ: "img/day-hand-skin66.png",
    ⵠΔΔΔΔⲆᐃ: "img/night-hand-skin66.png",
    ⵠⵠᐃᐃⲆΔΔ: "img/day-hand-skin67.png",
    ⲆᐃᐃᐃⲆⵠᐃ: "img/night-hand-skin67.png",
    ΔⲆⵠⵠΔⵠⲆ: "img/day-hand-skin68.png",
    ΔⲆⲆΔⵠᐃΔ: "img/night-hand-skin68.png",
    ΔⲆΔΔⵠⲆⲆ: "img/day-hand-skin69.png",
    ⲆⵠΔᐃΔⵠⲆ: "img/night-hand-skin69.png",
    ΔⲆⲆⲆᐃⵠⵠ: "img/day-hand-skin70.png",
    ΔΔᐃⵠⵠⵠⵠ: "img/night-hand-skin70.png",
    ᐃᐃᐃΔⲆⲆⲆ: "img/day-hand-skin71.png",
    ⲆΔⵠᐃⵠⵠΔ: "img/night-hand-skin71.png",
    ⲆΔᐃⲆᐃᐃⵠ: "img/day-hand-skin72.png",
    ⲆⲆⲆΔΔΔΔ: "img/night-hand-skin72.png",
    ᐃᐃᐃᐃⵠᐃⲆ: "img/day-hand-skin73.png",
    ⲆᐃⲆᐃΔⵠⲆ: "img/night-hand-skin73.png",
    ᐃⲆᐃΔΔⵠⵠ: "img/day-hand-skin74.png",
    ΔᐃⵠⲆᐃΔᐃ: "img/night-hand-skin74.png",
    ΔⵠⲆΔⲆᐃᐃ: "img/day-hand-skin75.png",
    ᐃᐃΔΔⲆᐃᐃ: "img/night-hand-skin75.png",
    ⲆⲆⵠΔⵠⲆᐃ: "img/day-hand-skin76.png",
    ⵠᐃⲆᐃⵠᐃΔ: "img/night-hand-skin76.png",
    ⵠΔⵠᐃΔᐃⲆ: "img/day-hand-skin77.png",
    ΔⲆⲆⵠⲆΔⵠ: "img/night-hand-skin77.png",
    ⲆΔΔΔⵠⵠΔ: "img/day-hand-skin78.png",
    ⲆᐃΔΔⵠΔᐃ: "img/night-hand-skin78.png",
    ⲆᐃⲆⵠΔᐃⵠ: "img/day-hand-skin79.png",
    Ⲇᐃᐃᐃᐃⵠⵠ: "img/night-hand-skin79.png",
    ᐃᐃⲆᐃⵠᐃᐃ: "img/day-hand-skin80.png",
    ᐃⵠᐃⵠⵠⲆᐃ: "img/night-hand-skin80.png",
    ΔΔᐃⵠᐃᐃΔ: "img/day-hand-skin81.png",
    ⵠΔⲆΔΔⵠⵠ: "img/night-hand-skin81.png",
    ᐃⲆⲆᐃΔᐃⵠ: "img/day-hand-skin82.png",
    ᐃⵠⵠⵠⵠⲆⲆ: "img/night-hand-skin82.png",
    ΔⲆⵠΔᐃⵠΔ: "img/day-hand-skin83.png",
    ⵠⵠⵠⲆᐃⵠⲆ: "img/night-hand-skin83.png",
    ⲆᐃⲆᐃΔᐃᐃ: "img/day-hand-skin84.png",
    ᐃᐃᐃᐃᐃΔΔ: "img/night-hand-skin84.png",
    ⵠᐃⲆⲆⲆⲆⵠ: "img/day-hand-skin85.png",
    ᐃᐃᐃⵠᐃᐃⲆ: "img/night-hand-skin85.png",
    ⲆΔΔΔⲆⵠⵠ: "img/day-hand-skin86.png",
    ᐃᐃΔᐃΔⵠΔ: "img/night-hand-skin86.png",
    ᐃᐃΔᐃΔᐃᐃ: "img/day-hand-skin87.png",
    ⲆΔⲆⲆᐃⲆⲆ: "img/night-hand-skin87.png",
    ΔΔⵠⵠΔⲆⵠ: "img/day-hand-skin88.png",
    ΔⵠΔⲆⲆⵠΔ: "img/night-hand-skin88.png",
    ⵠⵠᐃΔⲆΔⵠ: "img/day-hand-skin89.png",
    ⵠΔΔᐃⲆᐃⵠ: "img/night-hand-skin89.png",
    ᐃⵠⲆⵠΔᐃᐃ: "img/day-hand-skin90.png",
    ᐃⵠΔᐃⵠΔⵠ: "img/night-hand-skin90.png",
    ᐃΔᐃⲆⵠⵠⲆ: "img/day-hand-skin91.png",
    ⵠⵠⲆΔᐃᐃⲆ: "img/night-hand-skin91.png",
    ⵠᐃᐃⲆⵠⲆᐃ: "img/day-hand-skin92.png",
    ⲆⵠⲆᐃᐃⵠΔ: "img/night-hand-skin92.png",
    ⲆᐃΔΔᐃⲆⲆ: "img/day-hand-skin93.png",
    ⵠᐃᐃⲆᐃⲆⲆ: "img/night-hand-skin93.png",
    ᐃΔᐃᐃⲆⲆⲆ: "img/day-hand-skin94.png",
    ⲆⲆⲆⵠⵠΔᐃ: "img/night-hand-skin94.png",
    ΔᐃⵠΔΔΔⲆ: "img/day-hand-skin95.png",
    ᐃΔΔⵠᐃⲆⵠ: "img/night-hand-skin95.png",
    ⵠⲆⵠⵠⵠⵠⵠ: "img/day-hand-skin96.png",
    ΔᐃΔᐃⲆΔᐃ: "img/night-hand-skin96.png",
    ⲆΔΔⲆᐃᐃⲆ: "img/day-hand-skin97.png",
    ⵠⲆᐃⲆΔΔΔ: "img/night-hand-skin97.png",
    ⲆᐃⲆⲆⲆⵠⲆ: "img/day-hand-skin98.png",
    ⵠΔᐃΔⵠⲆᐃ: "img/night-hand-skin98.png",
    ⲆΔᐃΔⵠⵠᐃ: "img/day-hand-skin99.png",
    ᐃΔΔᐃⲆⵠⵠ: "img/night-hand-skin99.png",
    ⲆⵠⵠⵠⲆⵠⵠ: "img/day-hand-skin100.png",
    ΔⵠⲆΔⵠᐃⵠ: "img/night-hand-skin100.png",
    ΔΔⵠΔᐃⲆΔ: "img/day-hand-skin101.png",
    ΔᐃΔᐃⵠⵠΔ: "img/night-hand-skin101.png",
    ᐃⵠᐃΔⵠⲆⵠ: "img/day-hand-skin102.png",
    ⲆᐃⲆΔΔⵠᐃ: "img/night-hand-skin102.png",
    ᐃⵠⲆᐃΔΔᐃ: "img/day-hand-skin103.png",
    ΔⲆⲆⲆΔΔΔ: "img/night-hand-skin103.png",
    ΔᐃΔⵠⵠᐃⲆ: "img/day-hand-skin104.png",
    ΔᐃΔⵠⵠⵠΔ: "img/night-hand-skin104.png",
    ⲆⵠⲆⲆΔΔΔ: "img/day-hand-skin105.png",
    ΔⵠᐃᐃⵠⲆΔ: "img/night-hand-skin105.png",
    ᐃᐃⵠⵠᐃⲆⵠ: "img/day-hand-skin106.png",
    ⲆⲆⵠᐃⵠⵠᐃ: "img/night-hand-skin106.png",
    ⵠᐃⲆⲆⲆᐃΔ: "img/day-hand-skin107.png",
    ᐃΔᐃᐃᐃΔⵠ: "img/night-hand-skin107.png",
    ΔⲆⲆⲆⵠΔᐃ: "img/day-hand-skin108.png",
    ΔⲆᐃⲆΔⵠΔ: "img/night-hand-skin108.png",
    ΔΔΔᐃᐃⵠᐃ: "img/day-hand-skin109.png",
    ᐃᐃᐃⲆⲆΔⲆ: "img/night-hand-skin109.png",
    ⵠᐃΔΔⵠⲆⵠ: "img/day-hand-skin110.png",
    ΔᐃᐃΔⲆΔⵠ: "img/night-hand-skin110.png",
    ⵠΔⲆⲆⲆⲆⵠ: "img/day-hand-skin111.png",
    ⵠᐃⵠᐃⲆΔᐃ: "img/night-hand-skin111.png",
    ᐃⲆᐃⲆΔⲆΔ: "img/day-hand-skin112.png",
    Ⲇⵠᐃᐃᐃᐃⵠ: "img/night-hand-skin112.png",
    ΔᐃΔⵠᐃΔⵠᐃⵠ: "img/day-hand-skin113.png",
    ⵠΔΔᐃⵠⲆⲆⲆᐃ: "img/night-hand-skin113.png",
    ⵠⵠⵠⲆΔⲆΔ: "img/day-hand-skin114.png",
    ΔᐃⲆⲆⲆⲆΔ: "img/night-hand-skin114.png",
    ΔⵠⲆᐃΔΔⵠ: "img/day-hand-skin115.png",
    ΔⵠΔᐃⲆΔΔ: "img/night-hand-skin115.png",
    ⲆⵠᐃᐃⵠⲆⵠ: "img/day-hand-skin116.png",
    ᐃᐃⵠⵠⵠⲆᐃ: "img/night-hand-skin116.png",
    ⲆΔⵠᐃΔⲆⵠ: "img/day-hand-skin117.png",
    ΔⲆΔⲆⵠⵠᐃ: "img/night-hand-skin117.png",
    ΔΔΔΔⲆᐃᐃ: "img/day-hand-skin118.png",
    ⲆⲆⲆΔᐃⵠⵠ: "img/night-hand-skin118.png",
    ⲆΔⵠⲆⵠΔΔ: "img/day-hand-skin119.png",
    ⲆᐃᐃᐃΔⲆⵠ: "img/night-hand-skin119.png",
    ᐃΔⲆⵠΔⵠΔ: "img/day-hand-skin120.png",
    ⵠⲆⵠⲆᐃΔⵠ: "img/night-hand-skin120.png",
    ᐃᐃⲆΔΔⲆⵠ: "img/day-hand-skin122.png",
    ΔΔⵠᐃᐃⵠᐃ: "img/night-hand-skin122.png",
    ⵠⵠΔᐃⲆⵠⲆ: "img/day-hand-skin122.png",
    ⲆⲆⲆⲆᐃᐃⵠ: "img/night-hand-skin122.png",
    ΔᐃΔΔᐃΔᐃ: "img/day-hand-skin122.png",
    ⵠⲆΔⵠΔⵠⲆ: "img/night-hand-skin122.png",
    ⵠⵠΔΔᐃΔⵠ: "img/day-hand-skin124.png",
    ΔⲆⵠᐃⲆⵠⲆ: "img/night-hand-skin124.png",
    ⵠᐃᐃⵠⵠΔΔ: "img/day-hand-skin125.png",
    ᐃⲆᐃⵠΔⵠΔ: "img/night-hand-skin125.png",
    ⲆΔΔᐃⲆΔⲆ: "img/day-hand-skin126.png",
    ⵠⲆⵠⲆⲆᐃΔ: "img/night-hand-skin126.png",
    ⲆᐃᐃᐃⵠⲆΔ: "img/day-hand-skin127.png",
    ⲆΔⲆⵠⵠⲆⵠ: "img/night-hand-skin127.png",
    ᐃⲆⲆⲆⵠⵠᐃ: "img/day-hand-skin128.png",
    ⲆⲆᐃΔᐃΔΔ: "img/night-hand-skin128.png",
    ᐃⵠΔΔⲆⲆᐃ: "img/day-hand-skin129.png",
    ⵠᐃᐃΔᐃⵠⵠ: "img/night-hand-skin129.png",
    ⵠⵠΔⵠⵠⵠⵠ: "img/day-hand-skin130.png",
    ΔⵠⲆᐃᐃⲆΔ: "img/night-hand-skin130.png",
    ᐃᐃᐃΔᐃᐃᐃ: "img/day-hand-skin131.png",
    ⲆᐃⵠΔΔΔⲆ: "img/night-hand-skin131.png",
    ⵠᐃΔⲆᐃⵠⲆ: "img/day-hand-skin130.png",
    ⲆⲆΔⲆΔⲆⲆ: "img/night-hand-skin130.png",
    ᐃⵠΔᐃΔⵠⲆ: "img/day-hand-skin133.png",
    ᐃⵠⵠⵠⵠⵠΔ: "img/night-hand-skin133.png",
    ⵠⲆⵠⲆΔᐃⲆ: "img/day-hand-skin134.png",
    ⵠⲆⵠΔⵠⲆⵠ: "img/night-hand-skin134.png",
    ⲆΔⲆΔⵠᐃⲆ: "img/day-hand-skin135.png",
    ⲆⵠΔᐃⵠΔⲆ: "img/night-hand-skin135.png",
    ᐃⵠΔᐃΔⵠⵠ: "img/day-hand-skin136.png",
    ΔⲆⵠⵠᐃⵠⲆ: "img/night-hand-skin136.png",
    ⵠΔᐃⲆΔⲆΔ: "img/day-hand-skin137.png",
    ᐃⵠΔᐃⵠⲆΔ: "img/night-hand-skin137.png",
    ⵠⵠⵠΔⵠᐃᐃ: "img/day-hand-skin138.png",
    ΔⲆⵠᐃⵠΔⲆ: "img/night-hand-skin138.png",
    ΔⵠᐃΔⲆᐃΔ: "img/day-hand-skin139.png",
    ΔⵠⵠΔⵠΔⲆ: "img/night-hand-skin139.png",
    ⲆΔΔⲆᐃᐃⵠ: "img/day-hand-skin140.png",
    ⵠⲆΔⵠⲆᐃⲆ: "img/night-hand-skin140.png",
    ⲆΔΔΔⲆᐃⲆ: "img/day-hand-skin141.png",
    ⲆΔⵠⵠⵠΔΔ: "img/night-hand-skin141.png",
    ⵠΔⲆᐃⵠⵠᐃ: "img/day-hand-skin142.png",
    ⵠᐃⵠΔⵠⲆⵠ: "img/night-hand-skin142.png",
    ΔⵠΔⵠΔⵠᐃ: "img/day-hand-skin143.png",
    ⵠᐃᐃⵠⵠⲆⵠ: "img/night-hand-skin143.png",
    ᐃⵠⲆⲆΔΔᐃ: "img/day-hand-skin144.png",
    ᐃⵠⲆΔΔΔⲆ: "img/night-hand-skin144.png",
    ⵠⲆⵠⲆⵠⵠⲆ: "img/day-hand-skin145.png",
    ᐃᐃΔΔⲆⲆᐃ: "img/night-hand-skin145.png",
    ᐃⵠⵠᐃᐃᐃᐃ: "img/day-hand-skin146.png",
    ᐃᐃΔΔⲆᐃⵠ: "img/night-hand-skin146.png",
    ⵠΔΔΔⲆⵠⵠ: "img/day-hand-skin147.png",
    ⵠⲆⵠΔⵠΔΔ: "img/night-hand-skin147.png",
    ⵠⵠΔⲆᐃᐃᐃ: "img/day-hand-skin148.png",
    ⵠⲆΔΔⵠΔⲆ: "img/night-hand-skin148.png",
    ΔⵠΔⲆᐃⵠᐃ: "img/day-hand-skin149.png",
    ΔΔⵠⲆΔⵠⲆ: "img/night-hand-skin149.png",
    ΔΔⵠⲆⵠᐃΔ: "img/day-hand-skin150.png",
    ΔⵠⲆⲆⲆⲆⲆ: "img/night-hand-skin150.png",
    ΔⲆⲆᐃⵠⲆⲆ: "img/day-bag-star0.png",
    ⲆᐃᐃⵠΔⵠΔ: "img/night-bag-star0.png",
    ᐃⵠΔᐃⲆᐃⵠ: "img/day-bag0.png",
    ⲆⲆΔᐃᐃᐃΔ: "img/night-bag0.png",
    ᐃⲆᐃΔⵠⲆᐃ: "img/day-bag1.png",
    ⵠⲆΔΔᐃⲆⲆ: "img/night-bag1.png",
    ⵠⲆᐃⲆᐃᐃⲆ: "img/day-bag2.png",
    ΔⵠΔⵠⲆⵠΔ: "img/night-bag2.png",
    ᐃⵠᐃⵠᐃᐃΔ: "img/day-bag3.png",
    ⵠⵠΔⵠⲆᐃⵠ: "img/night-bag3.png",
    ᐃᐃᐃΔΔΔⲆ: "img/day-bag4.png",
    ⵠᐃΔⲆⵠⲆᐃ: "img/night-bag4.png",
    ⵠⵠΔΔΔⲆΔ: "img/day-bag5.png",
    ᐃᐃⲆⵠⵠᐃΔ: "img/night-bag5.png",
    ΔΔΔΔᐃᐃᐃ: "img/day-bag6.png",
    ΔⵠⵠΔΔⲆᐃ: "img/night-bag6.png",
    ᐃᐃⵠᐃⲆᐃⵠ: "img/day-bag7.png",
    ⲆⲆΔᐃⲆⵠΔ: "img/night-bag7.png",
    ⲆⲆΔⵠΔⵠΔ: "img/day-bag8.png",
    ⵠΔΔᐃᐃⲆᐃ: "img/night-bag8.png",
    ⵠⲆΔⵠⵠⲆᐃ: "img/day-bag9.png",
    ᐃⵠᐃⲆΔⵠⵠ: "img/night-bag9.png",
    Δⵠᐃⵠᐃⵠⵠ: "img/day-bag10.png",
    ⵠΔᐃⵠΔⵠᐃ: "img/night-bag10.png",
    ⵠⵠⵠⲆⲆⵠᐃ: "img/day-bag11.png",
    ΔΔΔᐃᐃⵠΔ: "img/night-bag11.png",
    ᐃⵠⵠΔⲆⵠᐃ: "img/day-bag13.png",
    ⲆΔΔᐃᐃΔⲆ: "img/night-bag13.png",
    ⲆΔΔᐃⵠΔᐃ: "img/day-bag14.png",
    ᐃᐃⲆΔⵠΔᐃ: "img/night-bag14.png",
    ΔΔᐃᐃⵠΔᐃ: "img/day-bag16.png",
    ᐃⵠᐃΔΔΔᐃ: "img/night-bag16.png",
    ᐃᐃⵠⵠᐃΔⵠ: "img/day-bag17.png",
    ⲆᐃᐃⲆⵠᐃΔ: "img/night-bag17.png",
    ᐃⵠΔᐃⵠΔΔ: "img/day-bag18.png",
    ΔᐃΔΔΔⵠⲆ: "img/night-bag18.png",
    ᐃⵠΔⲆⵠⵠᐃ: "img/day-bag19.png",
    ΔᐃᐃᐃΔⵠⵠ: "img/night-bag19.png",
    ᐃⲆⲆΔⲆⵠⲆ: "img/day-bag20.png",
    ⵠⵠΔⵠⲆΔⵠ: "img/night-bag20.png",
    ᐃⵠⲆⵠⲆᐃᐃ: "img/day-bag21.png",
    ⵠᐃⲆᐃⲆᐃᐃ: "img/night-bag21.png",
    ⲆⵠⲆⲆΔⵠᐃ: "img/day-bag22.png",
    ᐃⵠΔⵠⵠⲆΔ: "img/night-bag22.png",
    ⲆᐃΔⲆⲆⲆⲆ: "img/day-bag23.png",
    ⲆΔᐃⵠⵠΔᐃ: "img/night-bag23.png",
    ΔᐃᐃⲆΔΔᐃ: "img/day-bag24.png",
    ⲆⵠᐃⵠΔⲆⵠ: "img/night-bag24.png",
    ΔⵠΔᐃⵠⲆΔ: "img/day-bag25.png",
    ⵠΔⵠΔᐃᐃⵠ: "img/night-bag25.png",
    ⲆΔⵠⲆⵠᐃⲆ: "img/day-bag26.png",
    ⲆᐃⵠⲆᐃᐃΔ: "img/night-bag26.png",
    ᐃⲆΔⲆⲆⲆⲆ: "img/day-bag27.png",
    ⲆᐃⲆⲆΔΔⵠ: "img/night-bag27.png",
    ⲆⵠΔᐃⵠⲆᐃ: "img/day-bag28.png",
    ⵠΔᐃⵠⵠⵠⲆ: "img/night-bag28.png",
    ΔΔⵠᐃᐃᐃⵠ: "img/day-bag29.png",
    ⵠΔⵠΔⲆⵠⵠ: "img/night-bag29.png",
    ⲆⲆᐃⲆⲆⲆΔ: "img/day-bag30.png",
    ⲆⵠⲆⲆⵠⲆΔ: "img/night-bag30.png",
    ΔΔΔΔΔᐃⲆ: "img/day-bag31.png",
    ⵠᐃᐃᐃⵠⵠⵠ: "img/night-bag31.png",
    ⵠⵠΔΔΔᐃⵠ: "img/day-bag32.png",
    ᐃᐃⲆΔⲆⵠᐃ: "img/night-bag32.png",
    ΔⲆᐃΔΔⲆⲆ: "img/day-bag33.png",
    ᐃⲆΔⲆⵠⵠⲆ: "img/night-bag33.png",
    ⵠᐃⲆⲆΔᐃⵠ: "img/day-bag34.png",
    ⵠΔⲆᐃΔᐃⵠ: "img/night-bag34.png",
    ⵠⲆⲆⲆᐃⵠΔ: "img/day-bag35.png",
    ΔⵠⲆⵠⵠᐃⲆ: "img/night-bag35.png",
    ⲆⵠᐃⲆⲆⲆⵠ: "img/day-bag36.png",
    ΔⵠΔⵠⵠⲆⲆ: "img/night-bag36.png",
    ΔᐃΔΔΔᐃΔ: "img/day-bag37.png",
    ⵠⵠⲆⵠΔⲆΔ: "img/night-bag37.png",
    ᐃⵠⵠⵠΔΔΔ: "img/day-bag38.png",
    ᐃΔⵠΔⲆᐃΔ: "img/night-bag38.png",
    ᐃⵠΔᐃⲆⵠΔ: "img/day-bag39.png",
    ⵠᐃᐃⲆⵠᐃΔ: "img/night-bag39.png",
    ⵠⵠΔΔΔᐃΔ: "img/day-bag40.png",
    ⵠᐃⵠⲆΔᐃΔ: "img/night-bag40.png",
    ᐃⵠⲆᐃᐃⲆⲆ: "img/day-bag41.png",
    ⲆΔΔΔΔⵠΔ: "img/night-bag41.png",
    ΔⲆᐃⲆⵠΔⲆ: "img/day-bag42.png",
    ᐃⲆⲆⲆΔⲆⵠ: "img/night-bag42.png",
    ᐃⲆΔΔΔᐃⲆ: "img/day-bag43.png",
    ᐃᐃⵠᐃᐃⵠΔ: "img/night-bag43.png",
    ⵠⵠᐃᐃⲆΔⲆ: "img/day-bag44.png",
    ⵠΔⲆᐃⵠᐃⵠ: "img/night-bag44.png",
    ᐃᐃⲆΔⵠᐃⵠ: "img/day-bag45.png",
    ᐃΔⲆᐃᐃᐃᐃ: "img/night-bag45.png",
    ΔΔⵠⲆΔΔⲆ: "img/day-bag46.png",
    ⲆⵠᐃΔᐃΔⵠ: "img/night-bag46.png",
    ⲆᐃⵠᐃⲆΔⵠ: "img/day-bag47.png",
    ⵠᐃΔⵠᐃΔΔ: "img/night-bag47.png",
    ΔⲆⲆⵠΔΔⲆ: "img/day-bag48.png",
    ⵠΔᐃⵠⲆⵠⵠ: "img/night-bag48.png",
    ΔⵠᐃⲆⲆΔΔ: "img/day-bag49.png",
    ⵠΔΔΔΔⲆⵠ: "img/night-bag49.png",
    ⲆⵠΔⵠⲆⵠΔ: "img/day-bag50.png",
    ΔᐃᐃⵠⵠᐃΔ: "img/night-bag50.png",
    ⲆΔΔⲆΔΔⲆ: "img/day-bag51.png",
    ⲆΔᐃΔⲆΔⲆ: "img/night-bag51.png",
    ⲆⵠΔⲆΔΔΔ: "img/day-bag52.png",
    ⵠⲆΔΔΔⲆΔ: "img/night-bag52.png",
    ΔΔΔᐃᐃᐃⲆ: "img/day-bag53.png",
    ⵠᐃⵠΔᐃⲆᐃ: "img/night-bag53.png",
    ᐃΔⲆⵠᐃⲆⲆ: "img/day-bag54.png",
    ⲆΔᐃᐃΔⲆΔ: "img/night-bag54.png",
    ⲆΔΔΔⵠΔⲆ: "img/day-bag55.png",
    ⲆΔΔⲆΔⲆᐃ: "img/night-bag55.png",
    ⲆⵠΔⲆΔⲆΔ: "img/day-bag56.png",
    ⲆᐃᐃⲆⵠΔⵠ: "img/night-bag56.png",
    ⵠΔⵠΔΔⵠΔ: "img/day-bag57.png",
    ⵠⵠᐃΔᐃⵠΔ: "img/night-bag57.png",
    ⲆΔⲆⲆΔⵠⵠ: "img/day-bag58.png",
    ΔⵠⲆΔΔᐃⲆ: "img/night-bag58.png",
    ΔΔΔⵠⵠΔⵠ: "img/day-bag59.png",
    ⵠᐃⲆᐃⲆⵠᐃ: "img/night-bag59.png",
    ᐃΔⵠⵠΔΔⵠ: "img/day-bag60.png",
    ⲆⵠᐃⵠⵠΔΔ: "img/night-bag60.png",
    ᐃⲆᐃᐃΔⵠΔ: "img/day-bag61.png",
    ΔⵠΔⲆⵠᐃⵠ: "img/night-bag61.png",
    ⵠⲆΔᐃΔⵠⲆ: "img/day-bag62.png",
    ΔⲆΔⵠΔⲆᐃ: "img/night-bag62.png",
    ᐃᐃⵠᐃᐃΔᐃ: "img/day-bag63.png",
    ⵠⵠΔⵠΔᐃⲆ: "img/night-bag63.png",
    ⵠᐃⵠᐃⲆΔⵠ: "img/day-bag64.png",
    ᐃⵠⲆⲆᐃᐃΔ: "img/night-bag64.png",
    ᐃⲆⲆⵠⲆⵠΔ: "img/day-bag65.png",
    ⲆⲆⵠⲆᐃᐃΔ: "img/night-bag65.png",
    ΔΔⵠⲆΔᐃⵠ: "img/day-bag66.png",
    ᐃᐃΔⵠΔⲆΔ: "img/night-bag66.png",
    ΔⲆⲆᐃⵠΔⵠ: "img/day-bag67.png",
    ⲆΔⵠⵠΔΔⲆ: "img/night-bag67.png",
    ⲆΔⵠᐃᐃΔⵠ: "img/day-bag68.png",
    ΔⲆⵠΔᐃΔⲆ: "img/night-bag68.png",
    ΔⵠⵠᐃᐃⲆⲆ: "img/day-accessory0.png",
    ⵠⵠᐃᐃΔΔⵠ: "img/day-accessory0-pacques.png",
    ᐃᐃⵠΔᐃᐃⲆ: "img/night-accessory0-pacques.png",
    ᐃᐃΔΔⵠⲆⵠ: "img/day-accessory13.png",
    ᐃⵠΔⵠΔⲆⵠ: "img/night-accessory13.png",
    ⲆᐃⵠⲆⵠⵠⲆ: "img/day-accessory14.png",
    ⵠⲆⲆⲆⲆᐃΔ: "img/night-accessory14.png",
    ΔⵠⵠⲆΔᐃⲆ: "img/day-accessory15.png",
    ⲆⲆᐃⵠⲆΔΔ: "img/night-accessory15.png",
    ΔΔⲆᐃᐃⵠⵠ: "img/day-accessory16.png",
    ᐃⵠⵠᐃⵠΔᐃ: "img/night-accessory16.png",
    ⵠΔⲆΔⲆΔⲆ: "img/day-accessory17.png",
    ⵠⵠΔΔⵠⵠᐃ: "img/day-accessory17.png",
    ᐃΔⲆΔΔᐃΔ: "img/day-accessory19.png",
    ΔᐃⵠⲆΔᐃΔ: "img/night-accessory19.png",
    ΔᐃᐃΔⵠΔⵠ: "img/day-accessory20.png",
    ᐃⵠⲆⲆⵠΔᐃ: "img/night-accessory20.png",
    ΔᐃΔⵠⵠᐃΔ: "img/day-accessory21.png",
    ⲆΔΔᐃⵠΔΔ: "img/night-accessory21.png",
    ΔᐃⵠᐃΔΔΔ: "img/day-accessory22.png",
    ΔⲆⵠᐃᐃⵠⵠ: "img/night-accessory22.png",
    ⵠⵠᐃᐃⲆΔⵠ: "img/day-accessory23.png",
    ⵠⵠⵠⵠⲆᐃΔ: "img/night-accessory23.png",
    ⵠΔΔⵠⲆⵠⲆ: "img/day-accessory24.png",
    ᐃⵠΔᐃᐃΔⲆ: "img/night-accessory24.png",
    ΔⵠⲆⲆⲆⵠⵠ: "img/day-accessory25.png",
    ΔΔⲆᐃⵠⵠΔ: "img/night-accessory25.png",
    ⵠΔⵠⲆⲆΔⲆ: "img/day-accessory26.png",
    ᐃΔⵠⲆⵠⲆΔ: "img/night-accessory26.png",
    ⵠᐃⵠⵠᐃⵠⲆ: "img/day-accessory27.png",
    ΔⲆΔΔⵠΔⲆ: "img/night-accessory27.png",
    ΔΔΔΔⲆΔᐃ: "img/day-accessory18.png",
    ⵠⵠᐃⲆⲆⲆⲆ: "img/night-accessory18.png",
    ⲆᐃΔᐃΔᐃⵠ: "img/day-accessory29.png",
    ᐃⵠⵠΔⵠⲆᐃ: "img/night-accessory29.png",
    ᐃΔΔⲆᐃᐃΔ: "img/day-accessory30.png",
    ⲆⵠⲆⲆⵠⲆⵠ: "img/night-accessory30.png",
    ⵠⵠΔᐃⲆⲆᐃ: "img/day-accessory31.png",
    ΔΔⵠᐃΔᐃΔ: "img/night-accessory31.png",
    ⵠⵠΔⵠⵠⵠΔ: "img/day-accessory32.png",
    ⵠⲆⲆⵠⵠᐃⵠ: "img/night-accessory32.png",
    ΔᐃⲆΔⵠΔᐃ: "img/day-accessory33.png",
    ⲆᐃΔΔΔΔᐃ: "img/night-accessory33.png",
    ΔⲆⲆⲆⵠΔⵠ: "img/day-accessory34.png",
    ⲆⲆⵠᐃⵠᐃⲆ: "img/night-accessory34.png",
    ⵠΔⲆΔⵠᐃⵠ: "img/day-accessory35.png",
    ᐃⵠᐃΔΔⲆⵠ: "img/night-accessory35.png",
    ⲆΔᐃΔⲆΔΔ: "img/day-accessory28.png",
    ⲆᐃⲆⲆᐃⵠᐃ: "img/night-accessory28.png",
    ΔⲆⲆΔᐃⵠΔ: "img/day-accessory36.png",
    ΔᐃΔⲆΔᐃᐃ: "img/night-accessory36.png",
    ΔⲆΔⲆᐃⵠΔ: "img/day-accessory37.png",
    ᐃⵠΔΔⲆΔΔ: "img/night-accessory37.png",
    ΔⵠΔΔΔᐃⲆ: "img/day-accessory39.png",
    ᐃⵠΔΔⲆⵠΔ: "img/night-accessory39.png",
    ΔⲆΔⲆΔⲆΔ: "img/day-accessory40.png",
    ⵠⲆᐃⵠⲆⲆⲆ: "img/night-accessory40.png",
    ⵠⲆᐃΔᐃⲆΔ: "img/day-accessory41.png",
    ΔᐃⵠᐃⲆᐃᐃ: "img/night-accessory41.png",
    ᐃΔⵠΔᐃΔᐃ: "img/day-accessory42.png",
    ΔΔⲆΔᐃΔⲆ: "img/night-accessory42.png",
    ⲆⵠᐃΔᐃᐃⵠ: "img/day-accessory43.png",
    ⲆᐃΔᐃΔⵠΔ: "img/night-accessory43.png",
    ΔᐃᐃᐃⵠⲆΔ: "img/day-accessory44.png",
    ⲆᐃᐃΔᐃΔᐃ: "img/night-accessory44.png",
    ⲆΔΔᐃᐃⵠᐃ: "img/day-accessory38.png",
    ᐃⲆⲆᐃΔⲆᐃ: "img/night-accessory38.png",
    ΔΔⵠΔⵠⲆᐃ: "img/day-accessory46.png",
    ⵠΔΔᐃᐃᐃⲆ: "img/night-accessory46.png",
    ⵠⲆᐃⵠⲆⵠΔ: "img/day-accessory47.png",
    ᐃⵠⵠⲆⵠᐃΔ: "img/night-accessory47.png",
    ⲆΔᐃⲆⲆⲆᐃ: "img/day-accessory48.png",
    ᐃⲆᐃⵠⵠⲆⲆ: "img/night-accessory48.png",
    ⵠⲆΔΔᐃΔΔ: "img/day-accessory49.png",
    ⲆⲆΔⵠⵠΔⵠ: "img/night-accessory49.png",
    ᐃΔⲆⵠⵠΔᐃ: "img/day-accessory45.png",
    ⵠᐃⲆⵠᐃᐃⲆ: "img/night-accessory45.png",
    ⵠⲆΔΔᐃᐃΔ: "img/day-accessory50.png",
    ΔᐃⵠⲆⵠᐃⵠ: "img/night-accessory50.png",
    ⵠⵠΔⲆΔⵠΔ: "img/day-accessory51.png",
    ⵠⲆⵠⵠΔⲆⵠ: "img/night-accessory51.png",
    ΔⵠⲆΔⲆΔⲆ: "img/day-accessory52.png",
    ⵠⲆᐃⵠΔᐃⲆ: "img/night-accessory52.png",
    ᐃⵠΔᐃⲆᐃⲆ: "img/day-accessory53.png",
    ΔⲆᐃΔⲆΔᐃ: "img/night-accessory53.png",
    ΔΔⲆⵠΔⲆᐃ: "img/day-accessory54.png",
    ᐃΔᐃΔⲆⵠᐃ: "img/night-accessory54.png",
    ⵠᐃᐃⲆᐃⵠΔ: "img/day-accessory55.png",
    ⵠⵠΔⲆⲆⲆᐃ: "img/night-accessory55.png",
    ΔⵠⲆⵠΔⵠᐃ: "img/day-accessory56.png",
    ΔⲆΔⵠΔᐃⲆ: "img/night-accessory56.png",
    ΔᐃᐃΔΔⲆⲆ: "img/day-accessory57.png",
    ⲆⲆΔⵠΔΔⵠ: "img/night-accessory57.png",
    Δᐃᐃᐃⵠᐃⵠ: "img/day-accessory58.png",
    ⲆⲆᐃΔⲆⲆⵠ: "img/night-accessory58.png",
    ⲆΔⲆⵠΔⵠᐃ: "img/day-accessory59.png",
    ⲆⲆᐃⲆⵠΔⲆ: "img/night-accessory59.png",
    ⵠΔᐃᐃⵠΔΔ: "img/day-accessory60.png",
    ⲆⵠᐃⵠᐃᐃΔ: "img/night-accessory60.png",
    ⵠⵠΔⲆᐃΔΔ: "img/day-accessory61.png",
    ΔᐃΔΔⲆᐃⲆ: "img/night-accessory61.png",
    ⵠᐃΔⵠᐃⵠⵠ: "img/day-accessory62.png",
    ᐃΔᐃⲆⵠⲆᐃ: "img/night-accessory62.png",
    ΔⵠΔⵠⵠⲆⵠ: "img/day-accessory63.png",
    ΔⲆⲆⲆᐃᐃⵠ: "img/night-accessory63.png",
    ⵠⲆᐃΔⲆⲆⵠ: "img/day-accessory64.png",
    ΔⵠᐃᐃⲆᐃΔ: "img/night-accessory64.png",
    ᐃⵠᐃΔⲆⵠⲆ: "img/day-accessory65.png",
    ᐃⲆΔⵠΔⵠᐃ: "img/night-accessory65.png",
    ⲆⲆⲆⵠⲆⲆΔ: "img/day-accessory66.png",
    ⵠΔⲆⲆΔⲆᐃ: "img/night-accessory66.png",
    ΔΔᐃΔⲆΔᐃ: "img/day-accessory67.png",
    ᐃᐃΔⵠⵠⲆⵠ: "img/night-accessory67.png",
    ΔⵠⵠⵠⲆΔᐃ: "img/day-accessory68.png",
    ᐃΔⵠᐃΔᐃⵠ: "img/night-accessory68.png",
    ⲆᐃⵠⵠⲆᐃᐃ: "img/day-accessory69.png",
    ᐃᐃᐃᐃΔⵠΔ: "img/night-accessory69.png",
    ⲆⵠⲆⲆⲆᐃᐃ: "img/day-accessory70.png",
    ΔⵠΔΔⲆⲆⲆ: "img/night-accessory70.png",
    ᐃᐃⲆΔᐃᐃᐃ: "img/day-accessory71.png",
    ⲆⲆⲆᐃᐃᐃᐃ: "img/night-accessory71.png",
    ⵠⲆΔⵠΔᐃᐃ: "img/day-accessory72.png",
    ⲆΔⵠᐃⲆΔⵠ: "img/night-accessory72.png",
    ᐃᐃΔⲆᐃⵠⵠ: "img/day-accessory73.png",
    ᐃⲆΔⲆⵠΔΔ: "img/night-accessory73.png",
    ⲆⵠⲆᐃⲆΔⵠ: "img/day-accessory74.png",
    ⲆⵠᐃΔᐃⵠΔ: "img/night-accessory74.png",
    ⵠⵠΔᐃᐃⵠⲆ: "img/day-accessory75.png",
    ᐃⲆΔΔⵠⵠⵠ: "img/night-accessory75.png",
    ᐃᐃⵠⵠⲆⲆᐃ: "img/day-accessory76.png",
    ⲆⵠᐃⲆⲆΔᐃ: "img/night-accessory76.png",
    ΔⵠⵠΔᐃⲆΔ: "img/day-accessory77.png",
    ⵠᐃⵠᐃⵠᐃⵠ: "img/night-accessory77.png",
    Δᐃᐃᐃⵠⵠⵠ: "img/day-accessory78.png",
    ᐃΔⵠΔΔΔⵠ: "img/night-accessory78.png",
    ΔΔΔΔⲆΔⵠ: "img/day-accessory79.png",
    ᐃΔⲆⵠΔᐃᐃ: "img/night-accessory79.png",
    ⲆⲆⵠⲆΔⵠⵠ: "img/day-accessory80.png",
    ᐃΔΔⵠᐃⵠᐃ: "img/night-accessory80.png",
    ΔᐃᐃⵠⲆΔᐃ: "img/day-accessory81.png",
    ⵠᐃΔᐃⵠⵠⲆ: "img/night-accessory81.png",
    ΔⵠⲆΔΔΔⲆ: "img/day-book0.png",
    ᐃᐃᐃᐃΔΔⵠ: "img/night-book0.png",
    ⵠⵠⵠⲆⲆⲆⲆ: "img/day-book1.png",
    ⲆⲆΔΔΔΔⵠ: "img/night-book1.png",
    ⲆⲆⲆⲆᐃᐃᐃ: "img/day-book2.png",
    ΔⲆⲆⵠΔΔⵠ: "img/night-book2.png",
    ΔᐃᐃΔΔⲆᐃ: "img/day-book3.png",
    ⲆⵠᐃⲆⵠⵠⵠ: "img/night-book3.png",
    ⵠΔⲆΔΔⵠᐃ: "img/day-book4.png",
    ΔⲆⲆⲆⲆᐃΔ: "img/night-book4.png",
    ⲆᐃᐃⲆⲆⵠᐃ: "img/day-book5.png",
    ΔⵠᐃⲆⵠⵠⵠ: "img/night-book5.png",
    ⲆᐃΔΔΔΔΔ: "img/day-book6.png",
    ⵠⲆⲆᐃΔⵠΔ: "img/night-book6.png",
    ⵠᐃⵠⲆᐃᐃⲆ: "img/day-book7.png",
    ⲆᐃⲆⲆᐃⵠⵠ: "img/night-book7.png",
    ⲆΔⵠⵠⲆⵠⲆ: "img/day-book8.png",
    ⲆΔᐃΔⲆᐃᐃ: "img/night-book8.png",
    ⵠⵠᐃᐃⲆΔᐃ: "img/day-book9.png",
    ⵠⵠⲆⵠⲆⵠΔ: "img/night-book9.png",
    ᐃⲆⲆᐃᐃᐃⵠ: "img/day-book10.png",
    ⵠᐃⵠⲆΔⲆΔ: "img/night-book10.png",
    ⲆⵠⵠⵠᐃⲆⵠ: "img/day-book11.png",
    ⵠⵠΔΔⵠΔⵠ: "img/night-book11.png",
    ⵠᐃᐃΔⵠⵠⲆ: "img/day-book12.png",
    ΔΔᐃΔᐃΔΔ: "img/night-book12.png",
    ⵠⵠΔⵠΔᐃⵠ: "img/day-book13.png",
    ⲆΔⵠⵠⲆⵠᐃ: "img/night-book13.png",
    ⵠⵠⲆΔⵠⵠᐃ: "img/day-book14.png",
    ⵠΔⵠⲆⵠⵠΔ: "img/night-book14.png",
    ΔΔᐃⲆΔΔΔ: "img/day-book15.png",
    ⵠⵠⲆⲆⲆᐃΔ: "img/night-book15.png",
    ᐃᐃⵠⲆⲆⲆⲆ: "img/day-book16.png",
    ΔⵠΔⵠⵠΔᐃ: "img/night-book16.png",
    ⲆⲆΔⲆⲆⵠΔ: "img/day-book17.png",
    ᐃᐃⲆᐃⵠⲆⲆ: "img/night-book17.png",
    ⵠᐃⲆᐃᐃΔⵠ: "img/day-book18.png",
    ⵠΔΔⲆΔΔΔ: "img/night-book18.png",
    ΔΔᐃᐃⲆΔΔ: "img/day-book19.png",
    ΔⵠᐃⵠᐃᐃΔ: "img/night-book19.png",
    ⲆᐃⲆᐃⵠᐃⵠ: "img/day-book20.png",
    ⵠᐃⲆⲆᐃⲆᐃ: "img/night-book20.png",
    ΔⲆΔᐃⵠᐃⵠ: "img/day-book21.png",
    ⵠΔΔⲆⲆⲆⵠ: "img/night-book21.png",
    ⵠⲆᐃⵠⲆⵠᐃ: "img/day-book22.png",
    ⲆΔⲆᐃᐃⵠⲆ: "img/night-book22.png",
    ⲆⵠⲆᐃⲆⵠⲆ: "img/day-book23.png",
    ⵠⵠΔᐃⵠⲆⲆ: "img/night-book23.png",
    ΔΔⵠⲆⵠⲆⲆ: "img/day-book24.png",
    ⲆⵠᐃⵠⲆᐃΔ: "img/night-book24.png",
    ⲆⵠⲆⲆⵠⲆᐃ: "img/day-book25.png",
    ΔΔⲆᐃᐃΔΔ: "img/night-book25.png",
    ⲆΔⲆᐃⵠᐃⵠ: "img/day-book26.png",
    ᐃΔⵠΔⵠΔⲆ: "img/night-book26.png",
    ΔⲆⵠΔᐃᐃᐃ: "img/day-book27.png",
    ᐃᐃⵠⲆⲆⵠᐃ: "img/night-book27.png",
    ⵠⵠⵠΔⲆⵠⵠ: "img/day-book28.png",
    ⲆᐃⲆΔⵠⵠⵠ: "img/night-book28.png",
    ⵠΔᐃᐃⵠᐃΔ: "img/day-book29.png",
    ΔⲆᐃΔᐃⵠⲆ: "img/night-book29.png",
    ᐃΔΔᐃΔᐃⵠ: "img/day-book30.png",
    ⲆⵠⵠⵠⲆⵠⲆ: "img/night-book30.png",
    ⵠⲆⲆᐃᐃⵠᐃ: "img/day-book31.png",
    ⵠⵠⲆⵠᐃⵠΔ: "img/night-book31.png",
    ⵠᐃΔⵠⵠⲆⲆ: "img/day-book32.png",
    ⲆⵠΔᐃᐃⲆⲆ: "img/night-book32.png",
    ᐃⵠⲆΔΔⲆⲆ: "img/day-book33.png",
    ΔᐃⵠⵠⲆᐃⵠ: "img/night-book33.png",
    ⲆᐃⵠΔⲆⲆΔ: "img/day-book34.png",
    ⲆΔⵠⲆΔᐃᐃ: "img/night-book34.png",
    ΔⵠⵠᐃⵠⵠⲆ: "img/day-book35.png",
    ᐃⲆΔⵠΔΔⵠ: "img/night-book35.png",
    ⵠΔᐃⲆᐃΔⲆ: "img/day-book36.png",
    ΔᐃⲆᐃⲆᐃᐃ: "img/night-book36.png",
    ΔΔⲆᐃⵠⵠⲆᐃⲆ: "img/day-book37.png",
    ᐃΔⲆⲆΔⵠΔᐃⵠ: "img/night-book37.png",
    ΔⲆᐃᐃⵠΔᐃ: "img/day-book38.png",
    ⲆᐃᐃⲆᐃΔⵠ: "img/night-book38.png",
    ᐃΔⲆᐃⲆᐃⲆ: "img/day-book39.png",
    ⲆⲆⵠⵠⵠΔⲆ: "img/night-book39.png",
    ᐃΔᐃⵠⵠⵠⵠ: "img/day-book40.png",
    ⲆⲆΔΔᐃⵠᐃ: "img/night-book40.png",
    ⵠΔⲆᐃⵠⲆⲆ: "img/day-book41.png",
    ΔᐃⲆⵠⲆᐃᐃ: "img/night-book41.png",
    ᐃᐃⵠⵠⲆⵠⵠ: "img/day-book42.png",
    ᐃⲆⵠⲆⵠⲆΔ: "img/night-book42.png",
    ᐃⲆⵠΔΔΔΔ: "img/day-book43.png",
    ⵠⵠᐃᐃⲆⲆΔ: "img/night-book43.png",
    ΔΔⲆⵠΔⲆⲆ: "img/day-book44.png",
    ΔΔⲆΔᐃⲆⲆ: "img/night-book44.png",
    ⲆⵠΔⵠΔΔΔ: "img/day-book45.png",
    ⲆΔⲆΔΔⵠⵠ: "img/night-book45.png",
    ΔᐃⲆⵠⲆⲆⵠ: "img/day-crate1.png",
    ⵠᐃᐃⵠΔᐃⲆ: "img/night-crate1.png",
    ΔΔΔⵠΔᐃⵠ: "img/day-crate2.png",
    ⲆⲆⵠᐃΔΔᐃ: "img/night-crate2.png",
    ⲆΔⵠⵠᐃᐃⵠ: "img/day-crate3.png",
    ᐃⵠⲆⵠΔᐃⵠ: "img/night-crate3.png",
    ⵠⲆⵠᐃΔⲆΔ: "img/day-crate4.png",
    ⲆᐃΔⵠΔⵠᐃ: "img/night-crate4.png",
    ᐃⵠΔⲆᐃᐃΔ: "img/day-crate5.png",
    ΔⵠⵠⵠΔⵠΔ: "img/night-crate5.png",
    ᐃΔΔΔⵠᐃᐃ: "img/day-crate6.png",
    ⲆⲆⵠΔⲆⵠⲆ: "img/night-crate6.png",
    ᐃΔᐃⲆⲆᐃΔ: "img/day-crate7.png",
    ΔⲆⲆΔⲆⲆΔ: "img/night-crate7.png",
    ᐃⲆΔⲆⲆⲆΔ: "img/day-crate8.png",
    ΔΔⲆⵠⲆΔᐃ: "img/night-crate8.png",
    ΔⲆⵠⲆΔⲆᐃ: "img/day-crate9.png",
    ⲆᐃᐃⵠᐃᐃΔ: "img/night-crate9.png",
    ⲆᐃΔⲆⲆⵠᐃ: "img/day-crate10.png",
    ⲆΔⵠⲆΔΔᐃ: "img/night-crate10.png",
    ΔᐃΔⲆᐃⵠΔ: "img/day-crate11.png",
    ΔᐃᐃⵠⵠⲆΔ: "img/night-crate11.png",
    ᐃⲆⲆⵠⵠΔⵠ: "img/day-crate12.png",
    ⲆΔΔᐃΔΔᐃ: "img/night-crate12.png",
    ᐃᐃΔⵠⵠΔΔ: "img/day-crate13.png",
    ⲆⵠⵠⵠᐃᐃⲆ: "img/night-crate13.png",
    ΔⵠᐃⲆᐃⵠⲆ: "img/day-crate14.png",
    ΔᐃⲆⲆΔᐃⲆ: "img/night-crate14.png",
    ⲆΔⵠⵠΔΔᐃ: "img/day-crate15.png",
    ΔΔΔⵠⲆᐃΔ: "img/night-crate15.png",
    ΔᐃⲆᐃᐃΔΔ: "img/day-crate16.png",
    ⵠⵠⲆΔⵠⲆᐃ: "img/night-crate16.png",
    ΔᐃΔᐃΔⵠΔ: "img/day-crate17.png",
    ⲆΔⵠᐃΔⵠⲆ: "img/night-crate17.png",
    ΔᐃⵠⲆⲆΔᐃ: "img/day-crate18.png",
    ᐃΔⵠⲆⵠⲆⲆ: "img/night-crate18.png",
    ⲆΔⲆᐃΔᐃⵠ: "img/day-crate19.png",
    ⲆⵠᐃⲆᐃⲆⵠ: "img/night-crate19.png",
    ⵠᐃⲆⲆⲆΔⵠ: "img/day-crate20.png",
    ⵠᐃᐃⲆⲆΔΔ: "img/night-crate20.png",
    ΔⵠⵠⲆΔⵠⵠ: "img/day-crate21.png",
    ᐃⵠᐃⲆᐃⲆΔ: "img/night-crate21.png",
    ᐃⲆΔᐃΔⲆΔ: "img/day-crate22.png",
    ⲆᐃΔᐃᐃⲆⵠ: "img/night-crate22.png",
    ᐃⵠⵠⵠⲆⵠⵠ: "img/day-crate23.png",
    ΔⲆⵠᐃᐃⲆⲆ: "img/night-crate23.png",
    ⲆⵠⲆᐃⲆⲆⵠ: "img/day-crate24.png",
    ⵠΔⲆⲆΔⵠΔ: "img/night-crate24.png",
    ⵠᐃΔⵠⲆⲆⵠ: "img/day-crate25.png",
    ΔᐃⲆᐃⵠᐃⲆ: "img/night-crate25.png",
    ΔΔⲆᐃⲆⵠⲆ: "img/day-crate26.png",
    ᐃⵠⵠΔⲆⵠⲆ: "img/night-crate26.png",
    ΔⵠⵠⲆⵠᐃᐃ: "img/day-crate27.png",
    ⵠⲆⵠⲆΔⵠⵠ: "img/night-crate27.png",
    ᐃᐃⲆⵠΔⵠᐃ: "img/day-crate28.png",
    ⵠⲆⲆΔᐃᐃᐃ: "img/night-crate28.png",
    ⲆⲆΔⲆΔⵠΔ: "img/day-crate29.png",
    ⲆΔΔⲆⵠᐃⲆ: "img/night-crate29.png",
    ⲆᐃᐃᐃⵠᐃⲆ: "img/day-crate30.png",
    ⲆⲆᐃᐃⲆᐃⲆ: "img/night-crate30.png",
    ⵠᐃⲆⲆⲆⵠⵠ: "img/day-crate31.png",
    ΔⵠᐃⲆⵠΔⵠ: "img/night-crate31.png",
    ΔΔⲆΔⲆⵠᐃ: "img/day-crate32.png",
    ⵠⲆᐃⲆⵠΔΔ: "img/night-crate32.png",
    ⲆᐃⵠⲆⵠᐃⵠ: "img/day-crate33.png",
    ᐃⲆⵠΔΔᐃᐃ: "img/night-crate33.png",
    ᐃᐃᐃⵠⵠΔᐃ: "img/day-crate34.png",
    ᐃⵠⵠⵠΔᐃᐃ: "img/night-crate34.png",
    ΔΔΔⵠᐃⲆⲆ: "img/day-crate35.png",
    ⲆⵠᐃΔⲆᐃⵠ: "img/night-crate35.png",
    ⲆⵠⲆⵠᐃᐃⵠ: "img/day-crate36.png",
    ⲆⲆⵠⵠᐃⵠΔ: "img/night-crate36.png",
    ⲆΔⵠΔⲆᐃΔ: "img/day-crate37.png",
    ᐃⵠⲆⵠᐃⵠΔ: "img/night-crate37.png",
    ᐃΔΔⲆᐃΔᐃ: "img/day-crate38.png",
    ⵠⵠⵠᐃΔΔᐃ: "img/night-crate38.png",
    ᐃᐃᐃⲆⵠᐃⲆ: "img/day-crate39.png",
    ᐃΔⲆᐃⲆᐃΔ: "img/night-crate39.png",
    ΔΔΔΔⲆᐃΔ: "img/day-crate40.png",
    ΔΔΔᐃⵠⲆⵠ: "img/night-crate40.png",
    ᐃⲆᐃⵠⲆⵠⵠ: "img/day-crate41.png",
    ΔⵠᐃᐃⲆⵠᐃ: "img/night-crate41.png",
    ΔⲆᐃΔⵠⵠⲆ: "img/day-crate42.png",
    ⲆΔᐃⲆΔⵠᐃ: "img/night-crate42.png",
    Ⲇᐃⵠᐃⵠᐃⵠ: "img/day-crate43.png",
    ⲆᐃᐃⲆᐃΔⲆ: "img/night-crate43.png",
    ΔΔΔⵠⲆⲆΔ: "img/day-crate44.png",
    ΔΔⵠΔΔΔⵠ: "img/night-crate44.png",
    ⲆᐃⵠᐃⲆⵠᐃ: "img/day-crate45.png",
    ⵠⲆⲆᐃⵠⲆᐃ: "img/night-crate45.png",
    ⲆⲆΔⲆⲆΔΔ: "img/day-crate46.png",
    ᐃⵠⲆᐃⵠᐃᐃ: "img/night-crate46.png",
    ᐃⵠᐃΔⵠᐃᐃ: "img/day-crate47.png",
    ⵠᐃⲆᐃΔⵠⵠ: "img/night-crate47.png",
    ⲆᐃⵠᐃⲆΔᐃ: "img/day-crate48.png",
    ⵠᐃᐃΔⵠᐃΔ: "img/night-crate48.png",
    ⲆⲆᐃᐃΔⲆΔ: "img/day-crate49.png",
    ᐃΔⵠΔᐃⵠⲆ: "img/night-crate49.png",
    ᐃᐃᐃⵠⵠΔΔ: "img/day-crate50.png",
    ᐃΔΔΔᐃΔⲆ: "img/night-crate50.png",
    ⲆΔⲆᐃΔⵠⲆ: "img/day-crate51.png",
    ⲆΔᐃⵠⲆⵠᐃ: "img/night-crate51.png",
    ᐃⲆⲆⲆᐃᐃⵠ: "img/day-crate52.png",
    ⵠⵠΔΔⲆⵠⲆ: "img/night-crate52.png",
    ⲆΔⵠⵠᐃⲆΔ: "img/day-crate53.png",
    ⲆⲆᐃᐃⲆⵠⵠ: "img/night-crate53.png",
    ⲆᐃᐃΔᐃΔⵠ: "img/day-crate54.png",
    ᐃⲆᐃᐃΔᐃᐃ: "img/night-crate54.png",
    ΔᐃⵠΔⲆΔⲆ: "img/day-crate55.png",
    ⵠⲆᐃⲆᐃⵠⲆ: "img/night-crate55.png",
    ⵠⲆⵠΔⵠⵠᐃ: "img/day-crate56.png",
    ΔΔⲆⲆⲆᐃΔ: "img/night-crate56.png",
    ⲆⵠⵠⲆⵠⵠΔ: "img/day-crate57.png",
    ᐃᐃⵠⵠΔΔⲆ: "img/night-crate57.png",
    ΔⲆΔⵠΔΔᐃ: "img/day-crate58.png",
    ⲆⵠᐃᐃΔⵠⲆ: "img/night-crate58.png",
    ΔⲆᐃⲆⵠΔΔ: "img/day-crate59.png",
    ⵠⲆⵠΔᐃⵠⵠ: "img/night-crate59.png",
    ΔᐃᐃⲆⵠᐃᐃ: "img/day-crate60.png",
    ΔΔⵠΔΔⲆΔ: "img/night-crate60.png",
    ᐃΔΔⵠᐃⲆⲆ: "img/day-crate61.png",
    ᐃΔᐃⵠᐃⲆⵠ: "img/night-crate61.png",
    ⲆⲆᐃΔⵠⲆⵠ: "img/day-crate62.png",
    ⲆᐃⵠΔⵠⲆⲆ: "img/night-crate62.png",
    ΔᐃᐃᐃΔΔᐃ: "img/day-crate63.png",
    ⵠᐃΔΔᐃΔⵠ: "img/night-crate63.png",
    ᐃᐃⲆΔᐃⵠᐃ: "img/day-crate64.png",
    ᐃⲆΔⵠⲆⲆⵠ: "img/night-crate64.png",
    ⵠᐃⵠⵠⵠⵠⵠ: "img/day-crate65.png",
    ΔⵠᐃΔᐃᐃⲆ: "img/night-crate65.png",
    ⵠΔᐃⲆⲆⲆΔ: "img/day-crate66.png",
    ΔᐃⲆᐃᐃⵠⵠ: "img/night-crate66.png",
    ⵠⲆᐃⵠⲆⲆᐃ: "img/day-crate67.png",
    ⲆᐃⵠᐃΔᐃᐃ: "img/night-crate67.png",
    ᐃΔⵠⵠⲆⵠΔ: "img/day-crate68.png",
    ⵠⵠΔⵠΔⲆⲆ: "img/night-crate68.png",
    ΔΔⲆΔⲆΔⲆ: "img/day-crate69.png",
    ᐃⵠΔⵠⲆΔⵠ: "img/night-crate69.png",
    ΔΔⲆⲆⲆΔⲆ: "img/day-crate70.png",
    ᐃᐃΔⲆΔⲆⲆ: "img/night-crate70.png",
    ΔⵠⵠΔΔΔⲆ: "img/day-crate71.png",
    ᐃⵠⲆᐃΔⵠΔ: "img/night-crate71.png",
    ⵠΔᐃⲆⵠΔΔ: "img/day-crate72.png",
    ᐃⵠⵠᐃΔΔᐃ: "img/night-crate72.png",
    ⲆⲆⵠⲆΔΔⲆ: "img/day-herb0.png",
    ⵠᐃᐃΔⵠΔΔ: "img/day-herb1.png",
    ᐃⲆⵠΔⲆᐃᐃ: "img/day-herb2.png",
    ΔᐃⵠⲆᐃΔⵠ: "img/day-herb3.png",
    ᐃᐃΔⵠΔⵠⵠ: "img/day-herb4.png",
    ᐃΔⵠᐃⲆⲆΔ: "img/day-herb5.png",
    ᐃⲆΔⲆⵠᐃΔ: "img/day-herb6.png",
    ΔⲆⲆΔⲆⵠⲆ: "img/day-herb7.png",
    ΔᐃⵠᐃΔⲆΔ: "img/day-herb8.png",
    ΔᐃⲆⲆⵠΔΔ: "img/day-herb9.png",
    ΔⵠΔᐃⲆᐃᐃ: "img/day-herb10.png",
    ⵠᐃⲆⲆΔⵠΔ: "img/day-herb11.png",
    ᐃⲆⲆⵠⵠᐃⲆ: "img/day-herb12.png",
    ⲆⲆⵠΔⵠᐃⲆ: "img/day-herb13.png",
    ⵠᐃᐃⵠⵠᐃⲆ: "img/day-herb14.png",
    ⵠⲆⵠᐃⲆⲆⲆ: "img/day-herb15.png",
    ⲆᐃΔⲆᐃᐃᐃ: "img/day-shell0.png",
    ⲆⲆⵠΔⲆᐃⲆ: "img/day-shell1.png",
    ⲆᐃΔΔᐃⵠⲆ: "img/day-shell2.png",
    ⵠΔΔⵠⲆᐃΔ: "img/day-leaf1.png",
    ⲆⵠⲆⵠⵠᐃⲆ: "img/day-leaf2.png",
    ⵠⵠΔⵠΔⵠΔ: "img/day-leaf3.png",
    ΔⲆΔᐃⲆⲆⵠ: "img/day-leaf4.png",
    ΔⲆⲆⲆᐃᐃᐃ: "img/day-leaf5.png",
    ᐃⲆΔᐃⲆᐃⵠ: "img/day-leaf6.png",
    ᐃⲆᐃⵠᐃΔΔ: "img/day-leaf7.png",
    ⵠΔΔᐃⵠᐃⵠ: "img/day-leaf8.png",
    ⲆᐃⵠⵠⵠᐃΔ: "img/day-rock0.png",
    ⵠⵠᐃΔⲆⲆⲆ: "img/day-rock1.png",
    ᐃⲆΔᐃⵠⵠᐃ: "img/day-rock2.png",
    ᐃΔⵠᐃᐃᐃⲆ: "img/day-rock3.png",
    ⵠⲆⲆΔⲆⲆΔ: "img/day-rock4.png",
    ⲆⵠⵠᐃΔᐃᐃ: "img/day-rock5.png",
    ⲆΔⲆΔⲆⲆᐃ: "img/day-rock6.png",
    ΔΔΔΔⵠᐃᐃ: "img/day-rock7.png",
    ΔⵠⵠⲆᐃᐃⵠ: "img/day-rock8.png",
    ΔⲆᐃΔᐃⵠⵠ: "img/day-rock9.png",
    ΔⵠⵠⲆⲆⲆΔ: "img/day-rock10.png",
    ⵠᐃⲆⵠᐃᐃΔ: "img/day-rock11.png",
    ᐃᐃⵠⲆⲆΔⵠ: "img/day-rock12.png",
    ⵠⲆⲆΔⵠⲆⵠ: "img/day-rock13.png",
    ⵠⲆⲆᐃⲆᐃⵠ: "img/day-flower1.png",
    ΔⲆᐃⵠΔⲆᐃ: "img/day-flower2.png",
    ⵠᐃᐃⵠᐃᐃⵠ: "img/day-flower3.png",
    ΔᐃΔΔΔⲆⵠ: "img/day-flower4.png",
    ᐃⵠΔᐃᐃᐃⵠ: "img/day-flower5.png",
    ⲆΔΔΔⵠⵠᐃ: "img/day-flower6.png",
    ΔᐃᐃΔᐃⲆⲆ: "img/day-flower7.png",
    ⵠᐃᐃᐃⵠᐃⲆ: "img/day-flower8.png",
    ⵠⵠᐃΔΔᐃⲆ: "img/day-flower9.png",
    ⲆᐃᐃⲆᐃᐃⵠ: "img/day-herb16.png",
    ᐃΔⲆᐃᐃⵠⵠ: "img/day-herb17.png",
    ⵠⵠᐃⲆⵠⲆⲆ: "img/day-herb18.png",
    ᐃⲆⵠᐃⵠⲆⵠ: "img/day-herb19.png",
    ⲆⵠⵠⵠⲆΔⲆ: "img/day-herb20.png",
    ΔⲆΔⲆΔΔⵠ: "img/day-herb21.png",
    ⲆΔⵠⵠⵠᐃᐃ: "img/night-herb0.png",
    ⲆⵠⵠΔΔΔΔ: "img/night-herb1.png",
    ΔⵠⵠⵠⵠΔⲆ: "img/night-herb2.png",
    ᐃⵠΔᐃΔⲆᐃ: "img/night-herb3.png",
    ᐃᐃᐃⵠΔⵠⵠ: "img/night-herb4.png",
    ᐃᐃⵠⲆᐃⲆΔ: "img/night-herb5.png",
    ⵠΔⵠⲆΔⵠⲆ: "img/night-herb6.png",
    ᐃⵠᐃΔΔΔΔ: "img/night-herb7.png",
    ⲆᐃⵠᐃΔⵠΔ: "img/night-herb8.png",
    ΔΔⵠⲆᐃⲆᐃ: "img/night-herb9.png",
    ᐃΔᐃⵠΔΔⲆ: "img/night-herb10.png",
    ΔⵠⲆⵠᐃⵠᐃ: "img/night-herb11.png",
    ⲆᐃΔⲆⲆⲆⵠ: "img/night-herb12.png",
    ΔⲆⲆⵠⵠΔΔ: "img/night-herb13.png",
    ⵠⲆⲆᐃⵠΔⵠ: "img/night-herb14.png",
    ⲆᐃΔⵠⲆⵠⲆ: "img/night-herb15.png",
    ⵠΔⲆⵠⵠⲆᐃ: "img/night-shell0.png",
    ᐃᐃⵠΔᐃΔⵠ: "img/night-shell1.png",
    ⲆΔᐃΔΔᐃΔ: "img/night-shell2.png",
    ⵠⲆᐃⵠⲆⲆⵠ: "img/night-leaf1.png",
    ⲆⲆⲆᐃⲆⵠⲆ: "img/night-leaf2.png",
    ΔΔⲆⵠⲆⵠΔ: "img/night-leaf3.png",
    ⲆᐃᐃⵠⵠᐃΔ: "img/night-leaf4.png",
    ⵠⵠⲆᐃΔⵠⵠ: "img/night-leaf5.png",
    ⲆⵠⵠΔΔⵠΔ: "img/night-leaf6.png",
    ΔⲆᐃᐃⲆΔⲆ: "img/night-leaf7.png",
    ⲆΔΔᐃᐃⵠⲆ: "img/night-leaf8.png",
    ᐃᐃⵠΔᐃᐃⵠ: "img/night-rock0.png",
    ⲆΔᐃᐃΔᐃΔ: "img/night-rock1.png",
    ⵠΔⵠᐃⲆⲆΔ: "img/night-rock2.png",
    ΔᐃⵠⲆᐃᐃⵠ: "img/night-rock3.png",
    ΔⲆΔᐃΔⲆⵠ: "img/night-rock4.png",
    ΔⲆⵠᐃΔⲆⲆ: "img/night-rock5.png",
    ⲆᐃⵠᐃΔᐃⵠ: "img/night-rock6.png",
    ⵠⵠⲆⲆⲆᐃⵠ: "img/night-rock7.png",
    ᐃᐃᐃᐃⲆΔⲆ: "img/night-rock8.png",
    ⵠⲆᐃΔΔⵠᐃ: "img/night-rock9.png",
    ⵠⲆΔⵠΔΔⵠ: "img/night-rock10.png",
    ⲆⵠΔΔΔΔⲆ: "img/night-rock11.png",
    ⵠⵠΔⵠᐃᐃΔ: "img/night-rock12.png",
    ⵠΔᐃⲆΔΔⲆ: "img/night-rock13.png",
    ᐃΔᐃΔΔΔᐃ: "img/night-flower1.png",
    ⵠⵠΔⵠΔᐃᐃ: "img/night-flower2.png",
    ΔⲆΔⲆᐃⵠⲆ: "img/night-flower3.png",
    ⵠΔΔⵠⵠΔΔ: "img/night-flower4.png",
    ⵠᐃⲆⵠⲆΔⲆ: "img/night-flower5.png",
    ᐃⵠⵠⵠᐃⲆΔ: "img/night-flower6.png",
    ⵠᐃᐃⵠⵠⲆΔ: "img/night-flower7.png",
    ⲆᐃΔᐃᐃᐃᐃ: "img/night-flower8.png",
    ⵠⲆΔΔᐃᐃⲆ: "img/night-flower9.png",
    ⲆᐃΔⵠᐃⲆⲆ: "img/night-herb16.png",
    ΔⵠⵠⵠⲆⲆΔ: "img/night-herb17.png",
    ᐃΔⵠᐃᐃᐃⵠ: "img/night-herb18.png",
    ⵠᐃⲆⲆᐃⵠⲆ: "img/night-herb19.png",
    ⲆΔΔᐃⵠⵠⲆ: "img/night-herb20.png",
    ⵠᐃⵠΔΔⵠᐃ: "img/night-herb21.png",
    ⵠⵠΔΔⵠᐃᐃ: "img/day-river000-010-000.png",
    ΔᐃᐃΔΔᐃⲆ: "img/day-river000-010-010.png",
    ⲆⲆᐃⲆⵠⵠᐃ: "img/day-river000-011-000.png",
    ⵠⲆⵠⵠΔⵠⲆ: "img/day-river000-011-010.png",
    ⵠⲆᐃᐃⵠᐃⵠ: "img/day-river000-011-011.png",
    ⲆᐃᐃⲆⲆⲆⲆ: "img/day-river000-110-000.png",
    ⲆⲆⵠⵠⵠΔⵠ: "img/day-river000-110-010.png",
    ⲆⵠⲆⲆΔⲆⲆ: "img/day-river000-110-110.png",
    ⲆⲆᐃⲆⲆΔΔ: "img/day-river000-111-000.png",
    ⵠΔⲆⵠⲆᐃⵠ: "img/day-river000-111-010.png",
    ⲆⲆᐃᐃᐃΔⵠ: "img/day-river000-111-011.png",
    ⲆᐃⲆᐃⵠᐃΔ: "img/day-river000-111-110.png",
    ⵠᐃⵠⵠⲆⲆⵠ: "img/day-river000-111-111.png",
    ⲆⲆⲆΔⲆⲆⵠ: "img/day-river010-010-000.png",
    ᐃᐃΔᐃⵠⲆΔ: "img/day-river010-010-010.png",
    ⵠⲆΔⲆᐃᐃⲆ: "img/day-river010-011-000.png",
    ⵠⵠΔᐃΔΔⲆ: "img/day-river010-011-010.png",
    ⵠⲆⲆⵠΔⲆᐃ: "img/day-river010-011-011.png",
    ⵠΔΔⲆΔᐃⵠ: "img/day-river010-110-000.png",
    ⲆΔⲆⵠⲆΔⲆ: "img/day-river010-110-010.png",
    ⵠⲆⲆᐃⲆᐃᐃ: "img/day-river010-110-110.png",
    ᐃΔⵠⲆⲆⲆᐃ: "img/day-river010-111-000.png",
    ⵠΔᐃⵠⲆΔⵠ: "img/day-river010-111-010.png",
    ᐃᐃⲆᐃᐃᐃᐃ: "img/day-river010-111-011.png",
    ⵠⵠⲆⵠᐃᐃᐃ: "img/day-river010-111-110.png",
    ᐃⲆⲆⲆΔᐃΔ: "img/day-river010-111-111.png",
    ⲆΔⵠΔⲆᐃⲆ: "img/day-river011-011-000.png",
    ᐃΔᐃⲆⵠⲆⵠ: "img/day-river011-011-010.png",
    ΔᐃⵠᐃᐃⲆᐃ: "img/day-river011-011-011.png",
    ⲆᐃⵠⲆᐃΔᐃ: "img/day-river011-111-000.png",
    ⵠΔᐃⵠΔΔΔ: "img/day-river011-111-010.png",
    ⲆΔΔⲆΔⲆⵠ: "img/day-river011-111-011.png",
    ᐃⲆⲆΔⵠⲆΔ: "img/day-river011-111-110.png",
    ᐃⲆⵠΔⲆⲆΔ: "img/day-river011-111-111.png",
    ᐃᐃΔⵠᐃᐃⲆ: "img/day-river110-110-000.png",
    ΔᐃΔⲆⲆΔᐃ: "img/day-river110-110-010.png",
    ⲆΔⵠΔⲆⲆᐃ: "img/day-river110-110-110.png",
    ⵠᐃⲆⲆΔⵠⲆ: "img/day-river110-111-000.png",
    ΔᐃΔⲆᐃΔⲆ: "img/day-river110-111-010.png",
    ᐃⵠⲆᐃᐃᐃΔ: "img/day-river110-111-011.png",
    ⵠᐃⲆᐃⵠⲆⲆ: "img/day-river110-111-110.png",
    ΔⲆΔⵠᐃᐃⵠ: "img/day-river110-111-111.png",
    ΔⵠΔⵠΔⲆⵠ: "img/day-river111-111-011.png",
    ᐃᐃΔⲆᐃⵠⲆ: "img/day-river111-111-110.png",
    ΔⵠΔⵠΔⲆⵠ: "img/day-river111-111-011.png",
    ⲆⵠΔⵠⵠᐃΔ: "img/day-river111-111-000.png",
    ⵠΔᐃᐃΔΔᐃ: "img/day-river111-111-111.png",
    ΔⲆⲆΔⲆΔⲆ: "img/day-river111-111-010.png",
    ⵠᐃΔΔⵠΔΔ: "img/night-river000-010-000.png",
    ᐃΔⵠⵠᐃⲆⲆ: "img/night-river000-010-010.png",
    ⲆΔΔⵠⵠⵠᐃ: "img/night-river000-011-000.png",
    ⵠᐃⵠⵠᐃⲆⵠ: "img/night-river000-011-010.png",
    ᐃⵠᐃⵠⲆΔᐃ: "img/night-river000-011-011.png",
    ⵠᐃΔᐃᐃΔΔ: "img/night-river000-110-000.png",
    ⵠⲆⵠⵠⲆⵠⲆ: "img/night-river000-110-010.png",
    ᐃᐃᐃⲆΔΔⵠ: "img/night-river000-110-110.png",
    ᐃΔΔⵠⲆᐃᐃ: "img/night-river000-111-000.png",
    ᐃΔΔⲆΔΔΔ: "img/night-river000-111-010.png",
    ᐃΔΔⵠΔΔΔ: "img/night-river000-111-011.png",
    ᐃᐃᐃⵠΔⵠᐃ: "img/night-river000-111-110.png",
    ᐃᐃᐃⲆᐃᐃⵠ: "img/night-river000-111-111.png",
    ⲆⵠᐃⵠᐃⲆᐃ: "img/night-river010-010-000.png",
    ΔΔΔⲆᐃⵠΔ: "img/night-river010-010-010.png",
    ΔΔⵠⵠⲆΔⲆ: "img/night-river010-011-000.png",
    ΔⲆΔⵠⲆΔΔ: "img/night-river010-011-010.png",
    ⲆⵠᐃᐃᐃᐃΔ: "img/night-river010-011-011.png",
    ΔΔⲆⲆΔΔᐃ: "img/night-river010-110-000.png",
    ⵠΔᐃΔΔᐃⵠ: "img/night-river010-110-010.png",
    ᐃⵠⵠⲆⵠⵠⲆ: "img/night-river010-110-110.png",
    ᐃΔΔⵠΔᐃΔ: "img/night-river010-111-000.png",
    ⵠΔΔᐃⵠⲆΔ: "img/night-river010-111-010.png",
    ΔΔⵠᐃⵠⲆⲆ: "img/night-river010-111-011.png",
    ΔⲆΔᐃΔΔᐃ: "img/night-river010-111-110.png",
    ᐃᐃⲆᐃΔᐃⲆ: "img/night-river010-111-111.png",
    ΔᐃΔᐃⵠΔᐃ: "img/night-river011-011-000.png",
    ⵠⲆΔⵠⵠⵠⵠ: "img/night-river011-011-010.png",
    ⵠᐃⲆⲆⲆΔᐃ: "img/night-river011-011-011.png",
    ΔᐃⲆⲆⵠΔᐃ: "img/night-river011-111-000.png",
    ᐃᐃᐃⵠⵠⵠᐃ: "img/night-river011-111-010.png",
    ΔᐃᐃⲆΔΔⵠ: "img/night-river011-111-011.png",
    ⵠΔⵠⵠΔⵠⲆ: "img/night-river011-111-110.png",
    ⵠⲆᐃᐃⵠᐃⲆ: "img/night-river011-111-111.png",
    ⲆⲆΔⲆⲆᐃⵠ: "img/night-river110-110-000.png",
    ⲆᐃΔΔᐃᐃⵠ: "img/night-river110-110-010.png",
    ⵠⲆΔⲆⵠΔᐃ: "img/night-river110-110-110.png",
    ᐃΔⲆⵠᐃⲆⵠ: "img/night-river110-111-000.png",
    ⲆΔΔᐃΔⵠⲆ: "img/night-river110-111-010.png",
    ᐃⲆⲆⲆᐃᐃⲆ: "img/night-river110-111-011.png",
    ⲆΔⵠⵠΔⵠⲆ: "img/night-river110-111-110.png",
    ⲆᐃᐃⲆⵠⵠⲆ: "img/night-river110-111-111.png",
    ⲆⲆⲆᐃⵠⵠᐃ: "img/night-river111-111-011.png",
    ⵠᐃΔΔΔΔⵠ: "img/night-river111-111-110.png",
    ⲆⲆⲆᐃⵠⵠᐃ: "img/night-river111-111-011.png",
    ᐃⵠᐃⲆΔΔⵠ: "img/night-river111-111-000.png",
    ⵠⲆᐃⵠⲆΔᐃ: "img/night-river111-111-111.png",
    ᐃᐃΔΔⵠᐃⲆ: "img/night-river111-111-010.png",
    ⲆⵠⵠⲆⵠⲆΔ: "img/day-pebblecompo1.png",
    ⵠⵠᐃΔᐃ: "img/day-pebblecompo2.png",
    ⲆⲆⲆⵠΔ: "img/day-pebblecompo3.png",
    ΔⵠΔⲆΔᐃⲆ: "img/day-pebblecompo4.png",
    ⵠᐃⲆᐃⲆ: "img/day-pebblecompo5.png",
    ⵠᐃΔᐃⵠ: "img/day-pebblecompo6.png",
    ⵠⲆⲆⲆᐃ: "img/day-pebblecompo7.png",
    ⵠⵠⵠⲆⵠⲆΔ: "img/day-pebblecompo8.png",
    ΔΔⵠⵠⵠⲆⲆ: "img/day-pebblecompo9.png",
    ΔⲆⲆⵠᐃⲆⲆ: "img/day-pebblecompo10.png",
    ᐃΔᐃΔⵠ: "img/day-pebblecompo11.png",
    ⵠᐃᐃᐃⲆⵠⵠ: "img/day-pebblecompo12.png",
    ΔⲆⲆⵠⲆᐃΔ: "img/day-pebblecompo13.png",
    ⵠᐃⲆᐃΔᐃᐃ: "img/day-pebblecompo14.png",
    ⲆⵠΔᐃⲆᐃⵠ: "img/day-pebblecompo15.png",
    ⲆᐃⲆᐃᐃⵠΔ: "img/day-pebblecompo16.png",
    ᐃΔⵠⵠᐃ: "img/day-pebblecompo17.png",
    ⲆⲆᐃᐃⲆⵠΔ: "img/day-pebblecompo18.png",
    ⵠᐃᐃⲆᐃᐃⲆ: "img/day-pebblecompo19.png",
    ⵠⲆⲆᐃⲆ: "img/day-pebblecompo20.png",
    ⵠᐃⲆΔⲆ: "img/day-pebblecompo21.png",
    ᐃᐃⵠᐃⲆΔⲆ: "img/day-pebblecompo22.png",
    ⲆⵠⲆΔⲆⵠⵠ: "img/day-pebblecompo23.png",
    ΔΔΔⵠⲆΔᐃ: "img/day-pebblecompo24.png",
    ᐃᐃᐃᐃⲆ: "img/day-pebblecompo25.png",
    ⲆΔⲆⵠⲆ: "img/day-pebblecompo26.png",
    ΔΔΔᐃⵠᐃⵠ: "img/day-pebblecompo27.png",
    ⵠⵠⵠᐃⲆ: "img/day-pebblecompo28.png",
    ⵠΔᐃⵠⵠᐃᐃ: "img/night-pebblecompo1.png",
    ΔΔⲆᐃΔ: "img/night-pebblecompo2.png",
    ΔΔⵠΔⵠ: "img/night-pebblecompo3.png",
    ⵠⵠⵠᐃⵠⵠⵠ: "img/night-pebblecompo4.png",
    ⵠΔⵠΔⵠ: "img/night-pebblecompo5.png",
    ΔᐃΔⵠⵠ: "img/night-pebblecompo6.png",
    ᐃⲆᐃⵠΔ: "img/night-pebblecompo7.png",
    ⵠⵠⵠⲆⵠᐃΔ: "img/night-pebblecompo8.png",
    ⲆᐃⵠΔⲆⵠΔ: "img/night-pebblecompo9.png",
    ⲆΔⲆⵠⲆᐃⵠ: "img/night-pebblecompo10.png",
    ⲆᐃΔΔⲆ: "img/night-pebblecompo11.png",
    ⲆᐃᐃΔΔΔᐃ: "img/night-pebblecompo12.png",
    ΔᐃᐃⲆΔⲆᐃ: "img/night-pebblecompo13.png",
    ΔⵠᐃΔⵠΔⲆ: "img/night-pebblecompo14.png",
    ⲆΔⲆⲆⲆⵠⲆ: "img/night-pebblecompo15.png",
    ΔᐃⵠⲆⵠᐃᐃ: "img/night-pebblecompo16.png",
    ⵠΔⵠᐃⲆ: "img/night-pebblecompo17.png",
    ΔⵠⲆⵠΔΔⵠ: "img/night-pebblecompo18.png",
    ⵠΔⲆΔΔⲆᐃ: "img/night-pebblecompo19.png",
    ᐃⵠⵠᐃΔ: "img/night-pebblecompo20.png",
    Δᐃᐃᐃⵠ: "img/night-pebblecompo21.png",
    ᐃᐃᐃᐃΔⵠⲆ: "img/night-pebblecompo22.png",
    ᐃᐃᐃⲆⲆⵠⵠ: "img/night-pebblecompo23.png",
    ⲆⲆᐃΔⲆⲆᐃ: "img/night-pebblecompo24.png",
    ᐃΔΔⲆΔ: "img/night-pebblecompo25.png",
    ⲆΔΔΔᐃ: "img/night-pebblecompo26.png",
    ⵠᐃΔⲆΔⵠⵠ: "img/night-pebblecompo27.png",
    ᐃⵠⵠⵠΔ: "img/night-pebblecompo28.png",
    ᐃΔᐃΔᐃⲆⲆ: "img/day-baby-mammoth.png",
    ⲆΔⵠⲆⲆΔⵠ: "img/day-baby-mammoth-tamed.png",
    ⲆᐃⵠⲆⵠΔⵠ: "img/day-baby-mammoth-angry.png",
    ᐃⲆΔΔⵠⲆⵠ: "img/night-baby-mammoth.png",
    ᐃΔΔΔᐃⲆᐃ: "img/night-baby-mammoth-tamed.png",
    ᐃⲆΔᐃⲆⲆΔ: "img/night-baby-mammoth-angry.png",
    ⲆⵠᐃⵠΔⵠᐃ: "img/inv-mammoth-out.png",
    ᐃⲆⵠⵠᐃⵠᐃ: "img/inv-mammoth-in.png",
    ΔΔᐃⵠⵠⵠΔ: "img/inv-mammoth-click.png",
    ⲆΔᐃⲆΔᐃΔ: "img/hurt-baby-mammoth.png",
    ᐃᐃΔⲆΔᐃᐃ: "img/baby-mammoth-step.png",
    Δⵠᐃᐃⵠⵠᐃ: "img/day-flower-hat.png",
    ⲆΔᐃⵠⵠⵠⵠ: "img/night-flower-hat.png",
    ᐃⲆⵠΔΔⲆᐃ: "img/inv-flower-hat-out.png",
    ⵠⲆΔΔⵠⲆΔ: "img/inv-flower-hat-in.png",
    ⵠᐃᐃⲆⵠⵠⲆ: "img/inv-flower-hat-click.png",
    ᐃⵠⵠⵠⲆᐃΔ: "img/day-fur-hat.png",
    ΔⵠΔⵠΔⵠⵠ: "img/night-fur-hat.png",
    ⲆΔⵠⲆⲆΔⲆ: "img/inv-fur-hat-out.png",
    ΔⵠⵠΔⲆᐃᐃ: "img/inv-fur-hat-in.png",
    ⵠΔΔᐃΔⵠⲆ: "img/inv-fur-hat-click.png",
    ⲆΔᐃⵠΔⲆΔ: "img/day-mammoth.png",
    ⵠΔⵠᐃⵠⵠⲆ: "img/night-mammoth.png",
    ⲆⵠΔᐃⲆⲆⵠ: "img/hurt-mammoth.png",
    ΔⵠΔⲆⵠⵠΔ: "img/inv-mammoth-fur-out.png",
    ᐃⲆⲆΔᐃⵠⲆ: "img/inv-mammoth-fur-in.png",
    ⲆᐃᐃᐃᐃⵠⲆ: "img/inv-mammoth-fur-click.png",
    ⵠᐃⲆᐃⲆⲆⲆ: "img/inv-wood-bow-out.png",
    ΔⲆΔⵠⵠᐃᐃ: "img/inv-wood-bow-in.png",
    ᐃⲆⲆⲆⵠⵠⵠ: "img/inv-wood-bow-click.png",
    ⵠᐃΔⲆᐃⲆΔ: "img/inv-wood-arrow-out.png",
    ᐃⲆⲆᐃᐃΔΔ: "img/inv-wood-arrow-in.png",
    ΔⲆⵠᐃⵠΔⵠ: "img/inv-wood-arrow-click.png",
    ⲆⲆⲆⲆᐃΔΔ: "img/day-wood-bow2.png",
    ⲆⲆᐃⵠⲆⵠΔ: "img/night-wood-bow2.png",
    ⵠⲆⵠᐃⲆⲆΔ: "img/day-wood-arrow.png",
    ΔⲆⵠⵠᐃΔⵠ: "img/night-wood-arrow.png",
    ⵠⵠΔⵠⲆⵠⵠ: "img/inv-stone-bow-out.png",
    ⲆΔᐃⲆᐃⲆΔ: "img/inv-stone-bow-in.png",
    ⲆⵠΔⵠΔᐃΔ: "img/inv-stone-bow-click.png",
    ⵠᐃΔᐃᐃᐃⲆ: "img/inv-stone-arrow-out.png",
    ΔⵠⲆⲆⵠΔⵠ: "img/inv-stone-arrow-in.png",
    ΔⵠᐃⵠΔⵠⵠ: "img/inv-stone-arrow-click.png",
    ᐃΔⵠᐃᐃΔᐃ: "img/day-stone-bow.png",
    ΔᐃⵠΔΔⵠⲆ: "img/night-stone-bow.png",
    ΔΔᐃⵠᐃᐃⲆ: "img/day-stone-arrow.png",
    ᐃᐃΔⵠⲆᐃⵠ: "img/night-stone-arrow.png",
    ᐃⲆΔⲆⲆΔᐃ: "img/inv-gold-bow-out.png",
    ᐃΔᐃΔⲆⵠⲆ: "img/inv-gold-bow-in.png",
    ΔⵠᐃⵠΔᐃⲆ: "img/inv-gold-bow-click.png",
    ᐃΔΔᐃΔⲆᐃ: "img/inv-gold-arrow-out.png",
    ΔΔᐃᐃᐃΔⵠ: "img/inv-gold-arrow-in.png",
    ᐃᐃⲆΔⲆΔΔ: "img/inv-gold-arrow-click.png",
    ⲆⲆⵠΔⵠΔᐃ: "img/day-gold-bow.png",
    ᐃΔΔⲆΔᐃᐃ: "img/night-gold-bow.png",
    ΔᐃᐃⲆΔⵠⲆ: "img/day-gold-arrow.png",
    ᐃΔΔᐃⵠᐃΔ: "img/night-gold-arrow.png",
    ᐃⵠⲆⲆⵠⵠΔ: "img/inv-diamond-bow-out.png",
    ⵠⵠⲆΔᐃΔᐃ: "img/inv-diamond-bow-in.png",
    ⲆⲆⲆᐃⵠⵠⲆ: "img/inv-diamond-bow-click.png",
    ΔᐃⲆⲆᐃⵠΔ: "img/inv-diamond-arrow-out.png",
    ᐃΔⲆΔⵠⵠⵠ: "img/inv-diamond-arrow-in.png",
    ΔΔᐃΔᐃΔⲆ: "img/inv-diamond-arrow-click.png",
    ΔΔⵠΔΔⵠⵠ: "img/day-diamond-bow.png",
    ⵠᐃⵠⵠⵠⵠᐃ: "img/night-diamond-bow.png",
    ᐃⲆⵠⵠⵠⲆΔ: "img/day-diamond-arrow.png",
    ⵠΔⵠΔⲆⵠᐃ: "img/night-diamond-arrow.png",
    ᐃⲆⲆᐃᐃᐃⲆ: "img/inv-amethyst-bow-out.png",
    ⲆΔⲆᐃⲆΔΔ: "img/inv-amethyst-bow-in.png",
    ᐃΔⲆΔᐃⲆᐃ: "img/inv-amethyst-bow-click.png",
    ⵠⵠⵠⲆⵠΔΔ: "img/inv-amethyst-arrow-out.png",
    ⲆΔᐃΔΔⲆⲆ: "img/inv-amethyst-arrow-in.png",
    ⲆⲆᐃΔΔᐃⵠ: "img/inv-amethyst-arrow-click.png",
    ΔΔⲆᐃⵠᐃᐃ: "img/day-amethyst-bow.png",
    ⵠⲆΔΔⲆⲆⲆ: "img/night-amethyst-bow.png",
    ᐃᐃΔΔΔᐃⵠ: "img/day-amethyst-arrow.png",
    ᐃΔᐃⵠⲆᐃⵠ: "img/night-amethyst-arrow.png",
    ᐃᐃᐃᐃΔⲆⲆ: "img/inv-dragon-bow-out.png",
    ⵠᐃΔᐃⲆΔⲆ: "img/inv-dragon-bow-in.png",
    ΔⵠⵠⲆⵠⵠᐃ: "img/inv-dragon-bow-click.png",
    ᐃᐃΔⲆΔⲆⵠ: "img/inv-dragon-arrow-out.png",
    ⵠΔᐃᐃⲆΔᐃ: "img/inv-dragon-arrow-in.png",
    ⲆⲆΔᐃⵠᐃⲆ: "img/inv-dragon-arrow-click.png",
    ⲆᐃⲆⵠΔΔᐃ: "img/day-dragon-bow.png",
    ΔⲆᐃΔⲆⵠⵠ: "img/night-dragon-bow.png",
    ⲆᐃⵠⲆᐃⲆᐃ: "img/day-dragon-arrow.png",
    ΔΔⲆⲆⲆⵠⲆ: "img/night-dragon-arrow.png",
    ⵠᐃᐃΔⵠⲆΔ: "img/inv-reidite-bow-out.png",
    ΔⵠⵠⲆΔⲆⲆ: "img/inv-reidite-bow-in.png",
    ΔΔⲆⵠᐃⵠΔ: "img/inv-reidite-bow-click.png",
    ΔΔⵠⵠⲆⲆᐃ: "img/inv-reidite-arrow-out.png",
    ᐃⵠᐃᐃᐃΔⲆ: "img/inv-reidite-arrow-in.png",
    ΔᐃΔⵠΔⵠᐃ: "img/inv-reidite-arrow-click.png",
    ΔᐃᐃⲆΔᐃⲆ: "img/day-reidite-bow.png",
    ᐃⲆᐃⵠΔⵠᐃ: "img/night-reidite-bow.png",
    ⲆⵠΔⲆⲆⲆᐃ: "img/day-reidite-arrow.png",
    ⲆⲆⵠᐃΔᐃⵠ: "img/night-reidite-arrow.png",
    ᐃⲆᐃⲆᐃⵠᐃ: "img/inv-wooden-axe-out.png",
    ⲆΔΔⵠⵠⲆΔ: "img/inv-wooden-axe-in.png",
    ⵠⲆⲆΔⲆΔᐃ: "img/inv-wooden-axe-click.png",
    ᐃⵠⲆⲆᐃᐃᐃ: "img/day-wooden-axe.png",
    ⲆⵠᐃᐃΔⲆⵠ: "img/night-wooden-axe.png",
    ΔᐃⵠⲆⵠⵠⵠ: "img/inv-stone-axe-out.png",
    ᐃⵠᐃⲆᐃⲆᐃ: "img/inv-stone-axe-in.png",
    ⲆᐃΔᐃⲆⵠⵠ: "img/inv-stone-axe-click.png",
    ⵠᐃⲆΔⵠΔΔ: "img/day-stone-axe.png",
    ⲆⲆⲆⵠΔⲆΔ: "img/night-stone-axe.png",
    ⵠᐃⵠΔⲆᐃΔ: "img/inv-golden-axe-out.png",
    ⵠᐃⵠⵠᐃΔⵠ: "img/inv-golden-axe-in.png",
    ⵠᐃⲆⲆⲆⵠᐃ: "img/inv-golden-axe-click.png",
    ΔΔᐃᐃΔⲆⵠ: "img/day-golden-axe.png",
    ⲆΔⲆⵠⵠⵠᐃ: "img/night-golden-axe.png",
    ⲆⵠᐃΔⲆⵠΔ: "img/inv-diamond-axe-out.png",
    ⲆΔᐃᐃⵠⲆᐃ: "img/inv-diamond-axe-in.png",
    ΔΔΔΔᐃⵠᐃ: "img/inv-diamond-axe-click.png",
    ⲆΔΔⲆⲆΔᐃ: "img/day-diamond-axe.png",
    ᐃⲆⲆᐃⵠⲆΔ: "img/night-diamond-axe.png",
    ⵠⲆⲆᐃΔᐃΔ: "img/inv-amethyst-axe-out.png",
    ⲆᐃΔⲆⲆΔΔ: "img/inv-amethyst-axe-in.png",
    ⵠⲆⵠⵠⵠⲆΔ: "img/inv-amethyst-axe-click.png",
    ⲆᐃΔⵠⵠⵠⲆ: "img/day-amethyst-axe.png",
    ᐃΔⵠⲆⲆᐃⲆ: "img/night-amethyst-axe.png",
    ΔⵠⲆⲆⲆΔⵠ: "img/inv-reidite-axe-out.png",
    ᐃΔⲆΔΔᐃⵠ: "img/inv-reidite-axe-in.png",
    ⵠⲆⵠⵠⵠⵠᐃ: "img/inv-reidite-axe-click.png",
    ⵠⵠⵠᐃΔΔⵠ: "img/day-reidite-axe.png",
    ⲆⵠΔΔⲆᐃⵠ: "img/night-reidite-axe.png",
    ⵠⲆⵠΔΔⲆⵠ: "img/bandage-activated.png",
    ᐃΔⵠⵠᐃⵠⲆ: "img/auto-feed.png",
    ᐃᐃᐃⵠΔᐃᐃ: "img/stop-regeneration.png",
    ⵠⲆᐃΔⵠⵠⲆ: "img/stop-regeneration2.png",
    ⵠᐃΔⵠᐃΔⵠ: "img/day-wood-platform.png",
    ΔᐃⵠⲆΔⵠⵠ: "img/night-wood-platform.png",
    ⲆⵠⲆⲆΔᐃⲆ: "img/inv-wood-platform-in.png",
    ⵠᐃΔⲆⵠᐃΔ: "img/inv-wood-platform-out.png",
    ⲆΔΔⲆΔⵠⲆ: "img/inv-wood-platform-click.png",
    ⵠⵠⵠⵠⲆⵠᐃ: "img/day-wood-shield.png",
    ⵠΔⲆⲆΔⲆⲆ: "img/night-wood-shield.png",
    ⲆΔΔⲆⵠᐃᐃ: "img/day-stone-shield.png",
    ΔᐃⲆᐃᐃΔᐃ: "img/night-stone-shield.png",
    ΔⵠⲆΔΔⲆΔ: "img/day-gold-shield.png",
    ᐃⲆⵠⲆⵠⵠⲆ: "img/night-gold-shield.png",
    ⲆᐃⲆⵠⵠΔΔ: "img/day-diamond-shield.png",
    ᐃᐃⲆⲆⵠᐃⵠ: "img/night-diamond-shield.png",
    ⵠΔΔΔΔⲆⲆ: "img/day-amethyst-shield.png",
    ΔⲆΔⵠᐃⲆⵠ: "img/night-amethyst-shield.png",
    ᐃᐃΔΔⵠᐃᐃ: "img/day-reidite-shield.png",
    ΔⲆⲆᐃΔΔⲆ: "img/night-reidite-shield.png",
    ⲆΔᐃΔⵠⵠⵠ: "img/inv-wood-shield-in.png",
    ⲆΔᐃⲆⵠⲆⵠ: "img/inv-wood-shield-out.png",
    ⵠᐃⲆⲆⲆᐃⵠ: "img/inv-wood-shield-click.png",
    ⵠᐃⵠⵠⵠΔΔ: "img/inv-stone-shield-in.png",
    ⵠΔΔᐃΔᐃⵠ: "img/inv-stone-shield-out.png",
    ⵠⵠⵠᐃΔⲆⲆ: "img/inv-stone-shield-click.png",
    ⵠⵠΔᐃⵠΔΔ: "img/inv-gold-shield-in.png",
    ⵠⵠⲆᐃⵠᐃⲆ: "img/inv-gold-shield-out.png",
    ᐃᐃΔⲆⵠᐃᐃ: "img/inv-gold-shield-click.png",
    ΔΔⵠⵠᐃΔⲆ: "img/inv-diamond-shield-in.png",
    ⲆⲆᐃⵠΔΔⵠ: "img/inv-diamond-shield-out.png",
    ΔⵠⵠΔⵠⲆⲆ: "img/inv-diamond-shield-click.png",
    ΔΔⵠΔⵠⵠⲆ: "img/inv-amethyst-shield-in.png",
    ΔΔΔΔᐃⲆⵠ: "img/inv-amethyst-shield-out.png",
    ΔᐃⲆⵠⵠⲆᐃ: "img/inv-amethyst-shield-click.png",
    ⲆⵠⵠⵠΔⵠⵠ: "img/inv-reidite-shield-in.png",
    ΔⲆᐃΔᐃⲆⵠ: "img/inv-reidite-shield-out.png",
    ᐃΔⲆᐃᐃⵠΔ: "img/inv-reidite-shield-click.png",
    ⵠΔⲆᐃⲆⵠⵠ: "img/day-machete.png",
    ᐃΔⵠⲆΔΔΔ: "img/night-machete.png",
    ᐃⵠⲆᐃᐃᐃⲆ: "img/inv-machete-in.png",
    ᐃΔⵠΔⵠᐃⵠ: "img/inv-machete-out.png",
    ⲆⵠΔΔΔᐃⵠ: "img/inv-machete-click.png"
  };
  ⲆΔᐃᐃⵠⲆΔ = [{}];
  ⲆΔᐃᐃⵠⲆΔ[0].stringify = function (a) {
    var b = new Uint8Array(new ArrayBuffer(a.length));
    for (var c = Ol; a.length > c; c++) {
      b[c] = a[c];
    }
    return b;
  };
  const zt = tn;
  const At = la;
  ⵠⲆⵠⵠᐃᐃΔ = {};
  ⲆΔᐃᐃΔⲆⲆⵠⵠ = {};
  for (var ut in Δᐃ) {
    ⵠⲆⵠⵠᐃᐃΔ[ut] = Δᐃ[ut];
  }
  const Bt = mg;
  ΔΔ = [];
  ᐃΔⲆ = {};
  ᐃΔⲆ.ⵠⲆΔᐃⵠ = 0;
  const Ct = Ds;
  ᐃΔⲆ.ΔΔⲆⵠ = 1;
  ᐃΔⲆ.ᐃᐃᐃⵠ = 2;
  ᐃΔⲆ.ⲆΔᐃⲆ = jg;
  const Dt = Yn;
  ᐃΔⲆ.ⵠⲆⲆΔ = Il;
  const Et = sl;
  const Ft = S;
  ᐃΔⲆ.ᐃᐃᐃΔ = Th;
  ᐃΔⲆ.ⵠⲆᐃⲆ = 6;
  ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ = 7;
  ᐃΔⲆ.ΔⵠᐃⲆΔ = Oi;
  const Gt = Rj;
  ⲆⲆⵠⲆ = {};
  ⲆⲆΔⲆ = [];
  ΔⵠΔⵠᐃᐃⵠ = function (a, b) {
    for (var c = Ko; a.length > c; c++) {
      if (a[c].id === b) {
        return c;
      }
    }
    return -er;
  };
  var Ht = [];
  function It(a, b) {
    for (var c = Ko; Ht.length > c; c += b) {
      var d = Ht[c];
      if (a === d[rh]) {
        eb(d[0], d[Ur], d[Xn], d[vo]);
      }
    }
  }
  const Jt = Ko;
  const Kt = xh;
  const Lt = Yo;
  function eb(b, c, d, e) {
    var f = ⲆⲆΔⲆ[b];
    if (Z !== f) {
      for (var i = Ko; i < 2; i++) {
        var j = f[c][i];
        var k = e * 193 / gf.ᐃᐃΔΔⲆ;
        var m = d * 193 / gf.ΔᐃⲆΔⲆ;
        var n = j.width / 3.5;
        var o = j.height / 3.5;
        ΔΔ[Cr.ᐃᐃΔᐃΔ][i].drawImage(j, k - n / ij, m - o / Wq, n, o);
        k = e * 600 / gf.ᐃᐃΔΔⲆ;
        m = d * 600 / gf.ΔᐃⲆΔⲆ;
        n = j.width / 1.5;
        o = j.height / 1.5;
        ΔΔ[Cr.ΔΔΔⵠⵠ][i].drawImage(j, k - n / ij, m - o / 2, n, o);
      }
    }
  }
  ⵠᐃᐃⵠΔΔΔ = function () {
    for (var b = Kr; b < 2; b++) {
      ΔΔ[Cr.ᐃᐃΔᐃΔ][b].clearRect(jj, Dh, 193, 193);
      ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.MAP[b], kq, Ol, 193, 193);
      ΔΔ[Cr.ΔΔΔⵠⵠ][b].clearRect(Ko, tr, 600, 600);
      ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ.MAP[b], Kr, ko, 600, 600);
      for (var c = gf.ΔⲆⵠΔ.length - Ur; c >= 0; c--) {
        var d = gf.ΔⲆⵠΔ[c];
        var f = d.x1 * 193 / (gf.ᐃᐃΔΔⲆ * Kn);
        var j = d.y1 * 193 / (gf.ΔᐃⲆΔⲆ * 100);
        var k = d.w * 193 / (gf.ᐃᐃΔΔⲆ * Bl);
        var m = d.ᐃⵠⲆ * 193 / (gf.ΔᐃⲆΔⲆ * wr);
        var p = d.x1 * 600 / (wa * gf.ᐃᐃΔΔⲆ);
        var q = d.y1 * 600 / (gf.ΔᐃⲆΔⲆ * Yi);
        var u = d.w * 600 / (fh * gf.ᐃᐃΔΔⲆ);
        var v = d.ᐃⵠⲆ * 600 / (gf.ΔᐃⲆΔⲆ * 100);
        if (gf.ⲆᐃΔⲆᐃ === d.ⵠᐃⲆ) {
          ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.FOREST[b], f, j, k, m);
          ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ.FOREST[b], p, q, u, v);
        }
        if (gf.ⲆΔᐃᐃⵠⵠⵠ === d.ⵠᐃⲆ) {
          ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.WINTER[b], f, j, k, m);
          ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ.WINTER[b], p, q, u, v);
        }
        if (d.ⵠᐃⲆ === gf.ⲆⲆΔⵠⲆⵠⲆ) {
          ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.LAVA[b], f, j, k, m);
          ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ.LAVA[b], p, q, u, v);
        }
        if (d.ⵠᐃⲆ === gf.ᐃᐃⵠᐃⵠⲆⵠ) {
          ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.CAVE[b], f, j, k, m);
          ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ.CAVE[b], p, q, u, v);
        }
        if (gf.ⵠⵠⵠⵠⲆⵠⲆ === d.ⵠᐃⲆ) {
          ΔΔ[Cr.ᐃᐃΔᐃΔ][b].drawImage(ⲆⲆΔⲆ.DESERT[b], f, j, k, m);
          ΔΔ[Cr.ΔΔΔⵠⵠ][b].drawImage(ⲆⲆΔⲆ[hj[wg]][b], p, q, u, v);
        }
      }
    }
  };
  ᐃⵠⲆⵠⵠΔᐃ = function () {
    ⲆⲆⵠⲆ = {
      ⲆΔᐃᐃΔ: [{
        id: Mn,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⲆⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃⵠⲆⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃⵠⵠᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃᐃᐃⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Starver"
      }, {
        id: 3,
        Δⵠⵠ: Δᐃ.ᐃΔⲆᐃⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃᐃⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⲆⵠΔΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆᐃᐃᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Angry"
      }, {
        id: 2,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃᐃⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⲆⲆΔᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔⵠᐃⵠⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠᐃᐃⵠᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Sad"
      }, {
        id: 9,
        Δⵠⵠ: Δᐃ.ΔⲆⵠⵠΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⲆⵠⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔΔΔⵠⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⲆᐃⲆᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Happy 1"
      }, {
        id: dn,
        Δⵠⵠ: Δᐃ.ⵠΔⲆᐃΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠᐃⵠⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔΔᐃᐃᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠᐃᐃᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "What?"
      }, {
        id: 4,
        Δⵠⵠ: Δᐃ.ⲆⲆᐃᐃᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃᐃⵠⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⵠΔⵠⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠΔⵠᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Suspicious"
      }, {
        id: 5,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆⲆΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔⲆⲆⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⲆⲆΔᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⵠⵠΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Scar"
      }, {
        id: 6,
        Δⵠⵠ: Δᐃ.ⵠᐃΔⵠᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃΔⲆⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠⲆΔΔᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆⵠⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "In Trouble"
      }, {
        id: 7,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃᐃⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆⵠᐃⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔᐃⵠΔᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃⵠΔᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Cute"
      }, {
        id: Oi,
        Δⵠⵠ: Δᐃ.ⵠΔⵠⲆᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⲆⲆΔⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃΔᐃᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⲆᐃΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bored 1"
      }, {
        id: 10,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃⲆΔΔΔ,
        ᐃⵠᐃ: Δᐃ.Ⲇᐃⵠⵠⵠᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔⵠΔΔᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⵠⲆΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Happy 2"
      }, {
        id: 11,
        Δⵠⵠ: Δᐃ.ⵠΔᐃᐃΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃΔΔᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⲆⵠⵠⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆⲆᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Crazy"
      }, {
        id: Ah,
        Δⵠⵠ: Δᐃ.ΔΔⲆΔⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔⲆⵠⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔΔⲆΔⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⵠᐃⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Happy 3"
      }, {
        id: dh,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⵠⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆⲆΔΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔⵠᐃΔΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⲆΔΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Very Cute"
      }, {
        id: nl,
        Δⵠⵠ: Δᐃ.ⵠᐃΔᐃⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔⵠⲆⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠᐃⵠᐃⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⲆⲆⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Curious"
      }, {
        id: $q,
        Δⵠⵠ: Δᐃ.ᐃⲆᐃᐃⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠⲆᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⵠΔⵠᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔΔⵠᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bored 2"
      }, {
        id: 16,
        Δⵠⵠ: Δᐃ.ᐃΔⲆΔⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠᐃᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⲆΔΔⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⲆᐃΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Happy 4"
      }, {
        id: 17,
        Δⵠⵠ: Δᐃ.ⵠⲆΔᐃΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⵠⵠⲆᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠⵠΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⲆᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Scar 2"
      }, {
        id: 18,
        Δⵠⵠ: Δᐃ.ᐃⵠⵠⲆΔⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃΔΔⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃⲆⵠΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔΔⲆᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Sick"
      }, {
        id: ms,
        Δⵠⵠ: Δᐃ.ᐃᐃΔⵠᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠⲆΔⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⵠⵠΔⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔⲆⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Somnambule"
      }, {
        id: 24,
        Δⵠⵠ: Δᐃ.ⵠᐃΔᐃΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃΔΔΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆΔⲆⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆᐃⲆⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Pixelbitie",
        name: "Feel Bad"
      }, {
        id: 23,
        Δⵠⵠ: Δᐃ.ᐃᐃΔⲆⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃⵠⲆⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔΔⵠΔᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆᐃⲆⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Pixelbitie",
        name: "Mmmh."
      }, {
        id: 103,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠⲆⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⲆⲆΔΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔΔⵠⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃΔΔⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Panic"
      }, {
        id: 105,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⵠⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠᐃΔᐃⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⲆᐃⵠᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠᐃⵠⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Hypnotic"
      }, {
        id: 106,
        Δⵠⵠ: Δᐃ.ᐃⲆΔΔⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃⲆᐃΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔᐃⵠᐃᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⲆΔΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Stars in the eyes"
      }, {
        id: 104,
        Δⵠⵠ: Δᐃ.ⲆΔⲆⲆΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃᐃᐃΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⲆⵠΔᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.Ⲇᐃᐃᐃᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Scared at night"
      }, {
        id: Ye,
        Δⵠⵠ: Δᐃ.ⲆⲆⵠΔⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠⲆⲆᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⵠⵠΔⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔᐃⵠⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Vampire"
      }, {
        id: 21,
        Δⵠⵠ: Δᐃ.ΔⲆᐃᐃΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠΔΔΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃⵠΔⵠᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆΔⲆⲆⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Zombie"
      }, {
        id: 22,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⲆⵠΔΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⵠΔᐃᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⲆΔᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Pixelbitie",
        name: "Devaster"
      }, {
        id: 116,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠΔΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠΔᐃⲆⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔᐃⲆⵠⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⲆΔᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Fukss",
        name: "Dead Devaster"
      }, {
        id: 27,
        Δⵠⵠ: Δᐃ.ΔⲆⲆΔΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠⵠᐃΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⲆΔΔⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔΔΔⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Winter",
        name: "Cactus"
      }, {
        id: 28,
        Δⵠⵠ: Δᐃ.ⲆⵠΔⲆⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔᐃⵠᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔᐃⲆⲆⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠⵠⵠⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Bee"
      }, {
        id: 49,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃⲆⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆΔΔᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⲆⲆΔΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⵠᐃΔᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Taco4Life",
        name: "Camo Skin"
      }, {
        id: 58,
        Δⵠⵠ: Δᐃ.ΔΔΔᐃᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⲆᐃΔΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⲆⵠᐃⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.Δⵠⵠⵠᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Blue Limax Skin"
      }, {
        id: 59,
        Δⵠⵠ: Δᐃ.ΔΔᐃΔΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔΔΔⵠⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆΔΔᐃⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆᐃⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Red Limax Skin"
      }, {
        id: 94,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⵠⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⵠᐃⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆΔΔⵠⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔᐃΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Pumpkin"
      }, {
        id: 109,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠᐃⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠᐃⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⲆᐃΔᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃᐃᐃᐃΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Wood"
      }, {
        id: 114,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠⲆⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⵠΔⲆⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠᐃΔⲆΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔΔᐃⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Zebra"
      }, {
        id: 120,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⵠⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃⲆⵠⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃⵠΔΔΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔΔⵠᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "CrysTal",
        name: "Tiger"
      }, {
        id: 134,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆⲆᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠᐃⲆⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔΔᐃᐃⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃᐃⲆⲆΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Franchestcreator",
        name: "Day or Night"
      }, {
        id: 135,
        Δⵠⵠ: Δᐃ.ᐃΔᐃⵠⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔΔᐃⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃΔΔⵠⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃᐃΔⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Poinet",
        name: "Square Starver"
      }, {
        id: 136,
        Δⵠⵠ: Δᐃ.ⵠΔⲆⵠᐃΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃΔⲆⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔⲆⲆⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⵠᐃⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Voodoo Doll"
      }, {
        id: 137,
        Δⵠⵠ: Δᐃ.ⲆΔᐃᐃⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠᐃⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆᐃⲆΔⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.Ⲇⵠᐃᐃᐃᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Frankenstein"
      }, {
        id: 138,
        Δⵠⵠ: Δᐃ.ⵠᐃΔΔⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃⲆⲆⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠⵠⲆΔⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃⲆⲆⲆⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Mummy"
      }, {
        id: 139,
        Δⵠⵠ: Δᐃ.ΔⲆᐃΔᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠⵠᐃΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠⲆᐃΔΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠΔᐃⲆΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Werewolf"
      }, {
        id: 140,
        Δⵠⵠ: Δᐃ.ⲆᐃⲆⵠⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⲆΔⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⵠᐃᐃⵠⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃⵠⵠⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Cthulhu"
      }, {
        id: 141,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⲆⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⵠⲆⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⵠᐃΔⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆΔⲆⵠⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Sea Man"
      }, {
        id: 142,
        Δⵠⵠ: Δᐃ.ⵠⲆⵠΔⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠᐃΔᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔΔΔⲆᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆΔᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Pumpkin"
      }, {
        id: 148,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃⵠΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃᐃⲆΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠΔΔᐃΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⵠᐃⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Snowman"
      }, {
        id: 149,
        Δⵠⵠ: Δᐃ.ⲆΔⵠᐃⵠΔⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔΔⲆⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃᐃⵠⵠΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⲆᐃⵠΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Christmas Tree Man"
      }, {
        id: 150,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆΔⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⲆⲆⲆᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔᐃⲆΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⵠⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Mrs Bell"
      }, {
        id: 151,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⵠᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔΔⲆⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃᐃᐃⵠⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⲆⵠⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Elfy"
      }, {
        id: 152,
        Δⵠⵠ: Δᐃ.ᐃᐃΔᐃⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆⵠΔⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⲆⲆⵠⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆᐃΔᐃΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Mr Present"
      }, {
        id: 153,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃᐃᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔΔΔᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠΔΔⲆⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃᐃΔᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "My Dear Old Deer"
      }, {
        id: 154,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆⲆΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃᐃⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠΔⵠⵠⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆᐃᐃⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr Angel"
      }, {
        id: 155,
        Δⵠⵠ: Δᐃ.ΔⵠᐃⵠⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠΔⲆᐃⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃΔᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃⵠΔΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr Ice Cube"
      }, {
        id: 156,
        Δⵠⵠ: Δᐃ.ⵠΔⵠⲆⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆΔΔᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃΔⲆᐃⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆΔⲆΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr Snowman"
      }, {
        id: 159,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃⵠⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⵠΔⲆᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⲆΔⵠᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔᐃⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "CrysTal",
        name: "Crystal Sky Skin"
      }, {
        id: 167,
        Δⵠⵠ: Δᐃ.ΔΔⲆⵠⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔΔΔᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠΔⵠΔⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃᐃⵠⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Franchestcreator",
        name: "Radioactive Starver"
      }, {
        id: 169,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠΔⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆⲆⲆᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃΔΔⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "TheScaryBlaze",
        name: "Eaten Cookie"
      }, {
        id: 170,
        Δⵠⵠ: Δᐃ.ᐃΔⲆⲆⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠΔⵠΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔΔΔⲆⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⵠΔⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "aloner",
        name: "Blob Thing"
      }, {
        id: 172,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆΔΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔⲆⵠᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠΔⲆᐃⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔⵠⲆΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "aloner",
        name: "Machine Mask"
      }, {
        id: 29,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃΔᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔᐃⵠᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆᐃⲆᐃⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔΔⲆᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Pixelbitie",
        name: "Lollipop 1"
      }, {
        id: 30,
        Δⵠⵠ: Δᐃ.ΔⵠⵠΔⵠⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠⵠⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔᐃᐃⲆⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⲆⲆⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Lollipop 2"
      }, {
        id: 31,
        Δⵠⵠ: Δᐃ.ΔᐃᐃᐃᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔⵠΔⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⵠᐃⵠᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⵠΔᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Lollipop 3"
      }, {
        id: 32,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠᐃⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆᐃΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃΔⵠⵠⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆᐃΔΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Lollipop 4"
      }, {
        id: 33,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃΔⲆΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⲆΔΔᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆΔⲆΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Sushui",
        name: "Yellow Bird"
      }, {
        id: 34,
        Δⵠⵠ: Δᐃ.ⵠⲆΔΔΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃᐃⵠⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆᐃᐃᐃⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔΔⲆⲆⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Sushui",
        name: "Red Bird"
      }, {
        id: 35,
        Δⵠⵠ: Δᐃ.ΔΔΔⲆⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠᐃᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⵠⵠⲆⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⵠⲆΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Sushui",
        name: "Blue Bird"
      }, {
        id: 37,
        Δⵠⵠ: Δᐃ.ⲆᐃΔΔⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔΔⵠⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⲆᐃᐃⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠᐃⲆⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Owl"
      }, {
        id: 52,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠΔⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃᐃⲆⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔΔⲆⵠΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠΔΔΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Nemo"
      }, {
        id: 53,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⲆᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⲆᐃΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⵠⲆⵠᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔΔⵠⲆⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Bread"
      }, {
        id: 74,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⵠᐃΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⵠΔΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆΔⵠΔⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃΔⲆΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 2"
      }, {
        id: 75,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠⲆΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠⵠΔᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃΔⲆᐃΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⲆⵠⵠⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Communist & Taco4Life",
        name: "Mr. Bread 3"
      }, {
        id: 60,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⲆᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆΔⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠᐃⵠᐃᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔᐃᐃⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Red Berry"
      }, {
        id: 61,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆᐃᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠᐃΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔΔΔᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠΔⵠΔᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Berry"
      }, {
        id: 70,
        Δⵠⵠ: Δᐃ.ⲆⲆⵠΔⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠΔⲆⲆⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠᐃⵠⲆⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⵠⲆᐃᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Cake"
      }, {
        id: 71,
        Δⵠⵠ: Δᐃ.ⵠⲆΔⲆⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠΔΔΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔᐃΔⵠΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⵠⵠᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Christmas Cake"
      }, {
        id: 77,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠⵠⵠᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔⲆⲆᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⲆΔⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔⲆΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Pancakez",
        name: "Mr. Pancake"
      }, {
        id: 87,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆⲆⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆⲆⲆⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠΔⲆⵠᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⲆᐃⵠⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Taco"
      }, {
        id: 78,
        Δⵠⵠ: Δᐃ.ⲆΔᐃⲆΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃⲆⵠᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃΔΔⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠΔⵠΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Bottle"
      }, {
        id: 79,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃᐃⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆⵠΔⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆⲆⵠᐃΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃᐃΔⲆⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Bottle 2"
      }, {
        id: 97,
        Δⵠⵠ: Δᐃ.ΔⲆᐃᐃⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⵠΔᐃΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃΔⲆⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⵠᐃⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Pink Rabbit"
      }, {
        id: 102,
        Δⵠⵠ: Δᐃ.ⵠⲆⲆⵠⲆᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔᐃⲆΔⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔⵠᐃΔᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⲆⵠⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Marshmallow"
      }, {
        id: 107,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⵠⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠᐃⵠⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⲆᐃΔᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⵠⵠⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Fox"
      }, {
        id: 132,
        Δⵠⵠ: Δᐃ.ΔⵠⵠⵠⲆⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠΔⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔᐃᐃᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Raccoon"
      }, {
        id: 111,
        Δⵠⵠ: Δᐃ.ᐃⲆᐃⵠⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠΔⲆΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔΔⲆⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃΔᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Cloud"
      }, {
        id: 113,
        Δⵠⵠ: Δᐃ.ΔΔⲆⵠⵠΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⲆⵠᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⵠⵠΔⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠΔⲆⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Moon"
      }, {
        id: 117,
        Δⵠⵠ: Δᐃ.ⵠᐃᐃΔⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆΔᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃᐃⲆⵠⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠⲆᐃᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Mr. Panda"
      }, {
        id: 118,
        Δⵠⵠ: Δᐃ.ΔⵠΔΔⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠⵠⵠΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃΔΔᐃⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃᐃⲆᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Mr. Strawberry"
      }, {
        id: 119,
        Δⵠⵠ: Δᐃ.ⲆΔⵠΔⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃΔΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔᐃᐃⲆⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆⵠⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito & Sushuui",
        name: "Mummy"
      }, {
        id: 122,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆΔⲆⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔⲆᐃᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆᐃⲆΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Dino"
      }, {
        id: 127,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃᐃⵠΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃⲆΔΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Mr. Koala"
      }, {
        id: 160,
        Δⵠⵠ: Δᐃ.ΔⲆΔⵠⵠᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⲆⲆⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠΔᐃΔⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⵠⵠᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Bottle Protection"
      }, {
        id: 162,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠΔᐃⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔᐃΔΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠⵠΔⵠᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⵠᐃⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "CrysTal",
        name: "Leaf Man"
      }, {
        id: 166,
        Δⵠⵠ: Δᐃ.ⲆΔᐃⲆⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠΔΔⵠᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔⲆᐃⵠⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⵠΔⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Bubble"
      }, {
        id: 174,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⵠⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠⲆⲆᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⵠⲆⵠⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃΔΔⲆⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "upfiz",
        name: "Potato"
      }, {
        id: 171,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⵠΔᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔⲆⲆᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠΔⲆᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆΔΔⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "aloner",
        name: "Axolotl"
      }, {
        id: 25,
        Δⵠⵠ: Δᐃ.ΔⲆⵠΔⵠⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔᐃⵠΔΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃⵠᐃᐃΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆᐃⲆⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Pixelbitie",
        name: "Test Dummy"
      }, {
        id: 41,
        Δⵠⵠ: Δᐃ.ΔⲆⵠⲆᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃⲆᐃⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⵠΔΔᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔⵠⲆΔᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Star-ver"
      }, {
        id: 43,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠⲆᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠΔᐃⲆΔΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠⵠⲆⵠΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⲆΔⵠⵠⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Communist",
        name: "Starver Chest"
      }, {
        id: 88,
        Δⵠⵠ: Δᐃ.ᐃΔⲆⲆⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔᐃⲆⵠᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆⵠⵠΔᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃΔⵠᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Communist",
        name: "Starver Workbench"
      }, {
        id: 121,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠⲆⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⵠⵠⵠⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⵠⵠⵠⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃΔᐃⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Fish"
      }, {
        id: 39,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃⵠⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠⲆⵠⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⵠⲆᐃⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠΔⵠᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Negligent4Dia",
        name: "Crab"
      }, {
        id: 40,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃⵠⵠΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔⵠⵠᐃⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⵠᐃᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Negligent4Dia",
        name: "Piranha"
      }, {
        id: 36,
        Δⵠⵠ: Δᐃ.ᐃⵠΔⵠⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃⵠᐃᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆΔΔΔⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔⵠⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Winter Fox"
      }, {
        id: 69,
        Δⵠⵠ: Δᐃ.ΔΔⲆⵠⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔᐃΔⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆᐃⵠΔⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔⵠⵠⵠᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Zed",
        name: "Baby Foxy"
      }, {
        id: 51,
        Δⵠⵠ: Δᐃ.ⵠⵠΔΔⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔᐃΔΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⲆⵠᐃᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃⲆⵠⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "HOWI",
        name: "Winter Bear"
      }, {
        id: 133,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃΔⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠΔⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⲆⲆⵠΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆᐃⲆΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Hawk"
      }, {
        id: 55,
        Δⵠⵠ: Δᐃ.ⵠᐃΔⲆⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃᐃⲆᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⲆⲆⵠⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔΔᐃⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Nice Little Yuki"
      }, {
        id: 68,
        Δⵠⵠ: Δᐃ.ΔᐃᐃΔⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃᐃⵠⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆⲆⵠᐃΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⲆⲆⲆᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Baby Yuki"
      }, {
        id: 62,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⵠⲆᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆᐃⵠⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃΔΔⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠⲆⵠⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Carrot"
      }, {
        id: 56,
        Δⵠⵠ: Δᐃ.ΔⲆⲆᐃᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠⵠΔΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔᐃⲆⲆⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⵠⲆⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Bat Limax"
      }, {
        id: 72,
        Δⵠⵠ: Δᐃ.ⲆⵠⵠᐃⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠⵠΔᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⲆΔΔΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⵠⲆⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Mr. Crate"
      }, {
        id: 73,
        Δⵠⵠ: Δᐃ.ΔⵠᐃΔᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠⲆᐃΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆΔᐃⲆⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃⵠᐃᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Taco4Life & eogito",
        name: "Mr. Spider"
      }, {
        id: 93,
        Δⵠⵠ: Δᐃ.ⵠΔᐃᐃᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔΔⲆΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⵠⵠΔⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⲆΔⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Anyone want to play?",
        name: "Mr. Spider 2"
      }, {
        id: 82,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆΔⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠⵠΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⲆⲆᐃᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆⵠⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Blue Starfish"
      }, {
        id: 83,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆᐃᐃⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆⲆⵠΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆᐃⲆΔⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃΔΔⵠⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Orange Starfish"
      }, {
        id: 84,
        Δⵠⵠ: Δᐃ.ᐃΔⲆᐃⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔᐃᐃⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⵠⵠⵠᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔⲆⲆⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Pink Starfish"
      }, {
        id: 85,
        Δⵠⵠ: Δᐃ.ΔᐃⲆᐃᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔᐃᐃⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃᐃΔⲆⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆΔⵠΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. ShellMauve"
      }, {
        id: 86,
        Δⵠⵠ: Δᐃ.ⵠΔΔΔⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠᐃⲆΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃΔᐃⵠΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔⵠⵠⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Shell Bead"
      }, {
        id: 96,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃᐃⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔⲆΔᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔᐃⲆᐃᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆΔΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Fukss",
        name: "Angry Crab"
      }, {
        id: 98,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠᐃᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃⲆᐃΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃᐃᐃⵠᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃⲆᐃΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Penguin"
      }, {
        id: 126,
        Δⵠⵠ: Δᐃ.ⵠΔⲆⵠᐃᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔⲆⵠᐃᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⵠΔᐃⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃΔᐃⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Anyone want to play?",
        name: "Mr. Boar"
      }, {
        id: 145,
        Δⵠⵠ: Δᐃ.ΔΔⵠᐃⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆΔⵠⵠⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⲆΔΔⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔⵠᐃᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "I saw you"
      }, {
        id: 146,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃᐃᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃⲆⲆᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠΔᐃⲆⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆⲆᐃᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "It was funny"
      }, {
        id: 147,
        Δⵠⵠ: Δᐃ.ⵠⲆΔᐃⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⵠᐃΔⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃΔΔᐃΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆΔⵠΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "You can scream"
      }, {
        id: 158,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆⵠΔᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃⲆΔⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⵠⲆΔᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⵠΔⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Mr. Book"
      }, {
        id: 163,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠᐃⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔⵠΔⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠᐃΔⲆᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⵠΔⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Anyone want to play?",
        name: "Mr. Mammoth"
      }, {
        id: 164,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆⲆⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃᐃᐃⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔⲆᐃᐃⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆΔⵠⲆᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "SoOw",
        name: "Mr. Mammoth 2"
      }, {
        id: 161,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃᐃΔΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃΔⵠΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠΔᐃⲆΔⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠΔᐃⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Nightmare"
      }, {
        id: 168,
        Δⵠⵠ: Δᐃ.ᐃΔⲆⵠⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⵠⲆⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⲆⲆΔΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⲆΔΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Shiny Crystal"
      }, {
        id: 173,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃⵠΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃΔⵠΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⵠⲆⵠᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆⲆⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Water skin"
      }, {
        id: 42,
        Δⵠⵠ: Δᐃ.ⵠⲆⵠΔᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃⲆᐃᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⲆΔⲆΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠᐃΔⵠⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Winter",
        name: "Will-O'-The-Wisp"
      }, {
        id: 91,
        Δⵠⵠ: Δᐃ.ⲆΔᐃΔΔⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠᐃΔⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⲆΔⲆΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔΔΔΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "ExpertyAnimations",
        name: "Flame"
      }, {
        id: 26,
        Δⵠⵠ: Δᐃ.ᐃΔⲆΔⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⲆΔΔⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⵠΔⵠⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⵠⲆᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Be a Tree"
      }, {
        id: 38,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃⲆᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃⵠᐃΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃΔΔⵠᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃᐃᐃⲆⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Winter",
        name: "Toxic Mutant"
      }, {
        id: 50,
        Δⵠⵠ: Δᐃ.ΔⵠΔᐃⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠΔⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔΔⵠΔⵠΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⵠⲆΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Communist",
        name: "Mr. Tomato"
      }, {
        id: 54,
        Δⵠⵠ: Δᐃ.ΔᐃΔⲆΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃΔⲆΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⵠᐃΔⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⵠⲆᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Mauve, the Lapa"
      }, {
        id: 57,
        Δⵠⵠ: Δᐃ.ⵠΔΔⲆⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃⵠⲆΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⲆⲆⲆΔΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⵠⲆⲆΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Golden Fish"
      }, {
        id: 64,
        Δⵠⵠ: Δᐃ.ᐃΔΔⵠᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔᐃⲆⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⵠᐃΔⲆΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⵠⲆᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "LapaMauve"
      }, {
        id: 65,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠᐃᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⲆᐃⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠΔᐃⵠᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⲆᐃᐃᐃᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "LapaMauve "
      }, {
        id: 92,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃΔⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃⲆᐃΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠᐃᐃⲆΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃᐃᐃⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Burger"
      }, {
        id: 66,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆΔᐃΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆⵠᐃᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆᐃⲆⲆⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔᐃΔΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Tropical Starver"
      }, {
        id: 80,
        Δⵠⵠ: Δᐃ.ΔΔᐃⲆᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠᐃⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆⲆⵠⵠⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠΔᐃΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. ShellPink"
      }, {
        id: 81,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠΔⲆΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆΔⵠⲆⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃⵠⲆΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. OranShell"
      }, {
        id: 99,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠⵠᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠⲆⲆⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⲆᐃΔΔⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃⵠⲆᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Pepe"
      }, {
        id: 100,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃⲆΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔᐃⲆᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠⲆΔⲆᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃΔΔⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "fatant",
        name: "Mr. Ant"
      }, {
        id: 115,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃⲆΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆΔⲆⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⲆⵠΔᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠΔᐃⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Mr. Watermelon"
      }, {
        id: 101,
        Δⵠⵠ: Δᐃ.ⲆᐃᐃⵠⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃᐃᐃᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⲆⵠΔⵠⲆᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠᐃⲆᐃⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Thornbush"
      }, {
        id: 131,
        Δⵠⵠ: Δᐃ.ΔⲆΔⲆⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔΔⵠⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃⵠⵠᐃⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⵠᐃⵠⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Cthulhu"
      }, {
        id: 143,
        Δⵠⵠ: Δᐃ.Ⲇⵠᐃⵠⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆΔΔᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔⵠⲆⵠΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆᐃᐃᐃΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Mr. Cactus"
      }, {
        id: 144,
        Δⵠⵠ: Δᐃ.ⲆⵠⵠΔⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⲆᐃⲆⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔⲆⵠΔⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆⵠⲆᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Momo"
      }, {
        id: 95,
        Δⵠⵠ: Δᐃ.ᐃΔΔΔᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆᐃᐃᐃⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⲆⲆᐃⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔᐃⵠⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Mr. Garlic"
      }, {
        id: 76,
        Δⵠⵠ: Δᐃ.ΔⲆᐃΔⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃⲆΔⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠᐃᐃᐃᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆΔⲆⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Robot Dragon"
      }, {
        id: 44,
        Δⵠⵠ: Δᐃ.ᐃⵠΔⲆᐃΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⵠΔᐃⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠⵠᐃⲆΔⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⲆⲆⵠᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Lava Dragon Version 1"
      }, {
        id: 90,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⵠᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃⵠⲆⵠΔ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⵠΔΔⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔᐃⲆΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "ExpertyAnimations",
        name: "Lava Dragon Version 2"
      }, {
        id: 124,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆᐃᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃᐃᐃⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔᐃΔⵠⵠᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃΔΔᐃⲆⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Lava Dragon Version 3"
      }, {
        id: 45,
        Δⵠⵠ: Δᐃ.ΔⲆᐃⲆᐃⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔΔⲆⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⵠᐃⲆⲆⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔΔⲆⵠⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Sushui",
        name: "Ice Dragon Version 1"
      }, {
        id: 46,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠᐃⵠΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⲆⵠⲆΔⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⲆⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Ice Dragon Version 2"
      }, {
        id: 108,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠⵠⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔᐃⵠΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⲆⵠΔᐃⵠΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⵠⲆᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Ice Dragon Version 3"
      }, {
        id: 123,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃᐃΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠᐃⲆⲆΔ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆᐃⲆⲆⲆⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔᐃΔⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Baby Dragon Version 1"
      }, {
        id: 128,
        Δⵠⵠ: Δᐃ.ⵠΔⲆⵠᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃΔΔⲆⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠⲆᐃΔΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⲆⲆⲆΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Baby Dragon Version 2"
      }, {
        id: 125,
        Δⵠⵠ: Δᐃ.ⵠΔⵠΔⵠΔⲆ,
        ᐃⵠᐃ: Δᐃ.ΔΔᐃⲆⲆΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⵠⵠⵠⲆⵠⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠⲆΔⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Baby Lava"
      }, {
        id: 47,
        Δⵠⵠ: Δᐃ.ⵠⲆΔᐃⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃᐃᐃⲆᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⵠᐃΔⵠΔᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⲆⲆΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Kraken"
      }, {
        id: 129,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⵠⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃΔᐃΔⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ΔᐃΔⵠⵠᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ΔᐃΔⵠⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Sandworm"
      }, {
        id: 63,
        Δⵠⵠ: Δᐃ.ᐃΔⵠⲆⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆⵠⵠⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃΔΔΔⵠⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠΔⲆⵠΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Golden Bread"
      }, {
        id: 67,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⲆΔᐃᐃ,
        ᐃⵠᐃ: Δᐃ.Δᐃⵠⵠᐃⵠᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠΔΔⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆⵠᐃᐃⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "ForgottenHeroe",
        name: "Starver Ores"
      }, {
        id: 130,
        Δⵠⵠ: Δᐃ.ⲆΔΔⲆⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⲆⲆΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆⵠⲆⲆΔΔΔ,
        ᐃᐃᐃᐃ: Δᐃ.ΔⵠᐃᐃⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Poo"
      }, {
        id: 89,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⲆΔΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆⵠⲆΔᐃ,
        ᐃᐃⵠⵠ: Δᐃ.ΔⵠⲆᐃⵠⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⵠⵠⵠⲆⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Poinet",
        name: "Volcano Starver"
      }, {
        id: 112,
        Δⵠⵠ: Δᐃ.ᐃΔⵠᐃⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆⲆⵠΔΔ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃᐃΔᐃΔᐃᐃ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⲆⲆᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Lava Starver"
      }, {
        id: 48,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆⵠᐃⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔⲆⲆΔⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠⵠⵠᐃⵠᐃΔ,
        ᐃᐃᐃᐃ: Δᐃ.ⵠⲆΔΔⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        ⵠΔⲆ: "eogito",
        name: "Robot"
      }, {
        id: 110,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆⲆᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠⵠΔⵠⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆⲆⵠ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃᐃᐃⵠᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        ⵠΔⲆ: "pizza wa",
        name: "Blue Butterfly"
      }, {
        id: 157,
        Δⵠⵠ: Δᐃ.ⲆᐃⲆⲆⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠⵠᐃⲆⲆ,
        ᐃᐃⵠⵠ: Δᐃ.ᐃⵠΔᐃΔⵠⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ᐃⵠⵠⵠⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        ⵠΔⲆ: "eogito",
        name: "Yrifox"
      }, {
        id: 165,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠⵠⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆΔⵠᐃⵠⵠ,
        ᐃᐃⵠⵠ: Δᐃ.ⲆΔΔΔⲆᐃⲆ,
        ᐃᐃᐃᐃ: Δᐃ.ⲆΔⵠⵠⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ,
        ⵠΔⲆ: "OmarJr13",
        name: "Blob Skin"
      }],
      ᐃⵠΔⵠ: [{
        id: 0,
        Δⵠⵠ: Δᐃ.ΔⵠⲆⲆᐃⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃΔⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bag 1"
      }, {
        id: bt,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔᐃᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Bag"
      }, {
        id: Xn,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃΔΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔⲆⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bag 2"
      }, {
        id: Vl,
        Δⵠⵠ: Δᐃ.ⵠⵠΔΔΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⲆⵠⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bag 3"
      }, {
        id: Ai,
        Δⵠⵠ: Δᐃ.ΔΔΔΔᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠΔΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bag 4"
      }, {
        id: Gt,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠᐃⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔᐃⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bag 5"
      }, {
        id: 11,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⲆⲆⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃⵠⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wood Pickaxe Bag"
      }, {
        id: nq,
        Δⵠⵠ: Δᐃ.ΔΔᐃᐃⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠᐃΔΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io ",
        name: "Wood Carrier"
      }, {
        id: 37,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃⲆⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⵠⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Bag 6"
      }, {
        id: 39,
        Δⵠⵠ: Δᐃ.ᐃⵠⵠⵠΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠΔⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Wooden Swords"
      }, {
        id: 44,
        Δⵠⵠ: Δᐃ.ᐃⲆΔΔΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠᐃᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Communist",
        name: "Big Bag"
      }, {
        id: 7,
        Δⵠⵠ: Δᐃ.ⲆΔΔᐃⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⲆΔⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Communist",
        name: "Bag 6"
      }, {
        id: 8,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⲆⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔᐃⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Easter Bag"
      }, {
        id: ug,
        Δⵠⵠ: Δᐃ.ΔⲆⲆᐃⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⵠΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Star Bag"
      }, {
        id: 10,
        Δⵠⵠ: Δᐃ.ⵠⲆΔⵠⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠᐃⲆΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Winter Bag"
      }, {
        id: Fl,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠⵠᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⲆⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io ",
        name: "Stone Carrier"
      }, {
        id: 24,
        Δⵠⵠ: Δᐃ.ΔᐃᐃⲆΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Stone Pickaxe Bag"
      }, {
        id: zk,
        Δⵠⵠ: Δᐃ.ᐃⵠⵠΔⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔᐃᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Communist",
        name: "Bag Camouflage"
      }, {
        id: 38,
        Δⵠⵠ: Δᐃ.ΔᐃΔΔΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⵠΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Stone Swords"
      }, {
        id: 54,
        Δⵠⵠ: Δᐃ.ΔΔΔᐃᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⵠΔᐃⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Cow Bag"
      }, {
        id: 59,
        Δⵠⵠ: Δᐃ.ⲆΔⲆⲆΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⲆΔΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "CrysTal",
        name: "Starver Bag"
      }, {
        id: 62,
        Δⵠⵠ: Δᐃ.ᐃⲆᐃᐃΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⲆⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "CrysTal",
        name: "Crystal Sky Bag"
      }, {
        id: Qh,
        Δⵠⵠ: Δᐃ.Δⵠᐃⵠᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔᐃⵠΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Honey Pot"
      }, {
        id: 21,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔΔΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io ",
        name: "Gold Carrier"
      }, {
        id: 30,
        Δⵠⵠ: Δᐃ.ΔⵠΔᐃⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⵠΔᐃᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Gold Pickaxe Bag"
      }, {
        id: 29,
        Δⵠⵠ: Δᐃ.ΔΔΔΔΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃᐃⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Ariel",
        name: "Mr and Mrs Bakers"
      }, {
        id: 41,
        Δⵠⵠ: Δᐃ.ⵠⵠΔΔΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⵠⲆΔᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Golden Swords"
      }, {
        id: 47,
        Δⵠⵠ: Δᐃ.ΔΔⵠⲆΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃΔᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Explorer Bag"
      }, {
        id: 51,
        Δⵠⵠ: Δᐃ.ⲆⵠΔⵠⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃⵠⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Bamboo Bag"
      }, {
        id: 53,
        Δⵠⵠ: Δᐃ.ⲆⵠΔⲆΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆΔΔΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Mummy Bag"
      }, {
        id: 58,
        Δⵠⵠ: Δᐃ.ⵠΔⵠΔΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃΔᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Watermelon Bag"
      }, {
        id: 60,
        Δⵠⵠ: Δᐃ.ΔΔΔⵠⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Garlic Bag"
      }, {
        id: 61,
        Δⵠⵠ: Δᐃ.ᐃΔⵠⵠΔΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆᐃⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Pumpkin Bag"
      }, {
        id: 64,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠᐃᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⵠΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "upfiz",
        name: "Oil Barel bag"
      }, {
        id: 67,
        Δⵠⵠ: Δᐃ.ⲆΔⵠᐃᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⵠΔᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Tree Bag"
      }, {
        id: Ds,
        Δⵠⵠ: Δᐃ.ᐃⲆᐃΔⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆΔΔᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "a Rabbit in my Bag"
      }, {
        id: 15,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⲆᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⵠⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Bird's nest"
      }, {
        id: Kj,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃⵠᐃᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⵠⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "a Fish on your Back"
      }, {
        id: 17,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⵠΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔᐃᐃⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "a Squirrel in my Bag"
      }, {
        id: 22,
        Δⵠⵠ: Δᐃ.ᐃⵠΔⲆⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃᐃΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io ",
        name: "Diamond Carrier"
      }, {
        id: _o,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⲆΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔⵠⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Resources Bag"
      }, {
        id: 32,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⲆⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⵠⲆᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Diamond Pickaxe Bag"
      }, {
        id: 40,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃⲆⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Diamond Swords"
      }, {
        id: 45,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃᐃⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⲆᐃⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "My Cake Bag"
      }, {
        id: 46,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆΔⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⲆᐃᐃᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "My Christmas Cake Bag"
      }, {
        id: 52,
        Δⵠⵠ: Δᐃ.ⲆΔΔⲆΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃΔⲆΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Fish Bag"
      }, {
        id: 65,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠᐃⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆⲆᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Cloud Bag"
      }, {
        id: 68,
        Δⵠⵠ: Δᐃ.ΔΔⵠⲆΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃΔⵠΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Bee Bag"
      }, {
        id: 48,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠᐃⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔⵠᐃΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "fatant",
        name: "Natural Bag"
      }, {
        id: 23,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆΔⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⵠⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io ",
        name: "Amethyst Carrier"
      }, {
        id: 25,
        Δⵠⵠ: Δᐃ.ᐃⲆΔⲆⲆⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆⲆΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Amethyst Pickaxe Bag"
      }, {
        id: 28,
        Δⵠⵠ: Δᐃ.ⲆⲆᐃⲆⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⲆⲆⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Your Baby"
      }, {
        id: 33,
        Δⵠⵠ: Δᐃ.ⵠⵠΔΔΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⲆΔⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Tropical Bag"
      }, {
        id: 43,
        Δⵠⵠ: Δᐃ.ΔⲆᐃⲆⵠΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⲆⲆΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Amethyst Swords"
      }, {
        id: 35,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆⲆΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⲆᐃΔᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Ice Bag"
      }, {
        id: 50,
        Δⵠⵠ: Δᐃ.ΔⵠᐃⲆⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔΔΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Thornbush Bag"
      }, {
        id: 56,
        Δⵠⵠ: Δᐃ.ⲆΔΔΔⵠΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔⲆΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Autumn Bag"
      }, {
        id: 57,
        Δⵠⵠ: Δᐃ.ⲆⵠΔⲆΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⲆⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Dino Egg Bag"
      }, {
        id: 66,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆⵠⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⲆᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Magic Cloud Bag"
      }, {
        id: 69,
        Δⵠⵠ: Δᐃ.ΔⲆⲆᐃⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⵠΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Chest Bag"
      }, {
        id: 31,
        Δⵠⵠ: Δᐃ.ᐃⵠⲆⵠⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆᐃⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io ",
        name: "Reidite Carrier"
      }, {
        id: 18,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠⲆⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔΔᐃᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Lava Bag"
      }, {
        id: 49,
        Δⵠⵠ: Δᐃ.ΔⲆⲆⵠΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠΔᐃⵠⲆⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Lava Bag 2"
      }, {
        id: 36,
        Δⵠⵠ: Δᐃ.ⵠⲆⲆⲆᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⲆⵠⵠᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Dragon Bag"
      }, {
        id: 55,
        Δⵠⵠ: Δᐃ.ᐃΔⲆⵠᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃᐃΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Winter Ice Bag"
      }, {
        id: 26,
        Δⵠⵠ: Δᐃ.ⲆⵠΔᐃⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠΔᐃⵠⵠⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Reidite Pickaxe Bag"
      }, {
        id: 27,
        Δⵠⵠ: Δᐃ.ΔΔⵠᐃᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⵠΔⲆⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Octopus Bowl"
      }, {
        id: 34,
        Δⵠⵠ: Δᐃ.ΔⲆᐃΔΔⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⲆⵠⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Cave Bag"
      }, {
        id: 42,
        Δⵠⵠ: Δᐃ.ᐃⵠⲆᐃᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔΔΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Bag with Reidite Swords"
      }, {
        id: 63,
        Δⵠⵠ: Δᐃ.ⵠⲆΔᐃΔⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔⵠΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Engineer Bag"
      }],
      ⵠⲆᐃⵠⲆ: [{
        id: _s,
        Δⵠⵠ: Δᐃ.ᐃΔᐃⲆⲆᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆΔⲆⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Dead Box"
      }, {
        id: Fo,
        Δⵠⵠ: Δᐃ.ᐃΔΔΔⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠΔⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Hidden item"
      }, {
        id: Wq,
        Δⵠⵠ: Δᐃ.ΔᐃⲆⵠⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃⵠΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box 1"
      }, {
        id: Vl,
        Δⵠⵠ: Δᐃ.ΔΔΔⵠΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠᐃΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box 2"
      }, {
        id: 4,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆⵠΔᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box 3"
      }, {
        id: Gl,
        Δⵠⵠ: Δᐃ.ⵠⲆⵠᐃΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔⵠΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Broken Wooden Box"
      }, {
        id: Ll,
        Δⵠⵠ: Δᐃ.ᐃⵠΔⲆᐃᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠⵠΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box"
      }, {
        id: Ba,
        Δⵠⵠ: Δᐃ.ᐃⲆΔⲆⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆⵠⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Battle Box"
      }, {
        id: 8,
        Δⵠⵠ: Δᐃ.ΔⲆⵠⲆΔⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⵠᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box with a Cross"
      }, {
        id: Rr,
        Δⵠⵠ: Δᐃ.ⲆᐃΔⲆⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box with Bubbles"
      }, {
        id: 10,
        Δⵠⵠ: Δᐃ.ΔᐃΔⲆᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃᐃⵠⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden Box with Eyes"
      }, {
        id: Sh,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆⵠⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔᐃΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Dark Wooden Box"
      }, {
        id: 38,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃⲆⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⲆᐃⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Weddlz",
        name: "Noob Box"
      }, {
        id: 12,
        Δⵠⵠ: Δᐃ.ᐃᐃΔⵠⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠⵠᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Wooden and Stone Box"
      }, {
        id: mk,
        Δⵠⵠ: Δᐃ.ⲆΔⲆᐃΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⲆᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Star Box 1"
      }, {
        id: 15,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃⲆⲆΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Star Box 2"
      }, {
        id: 27,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⲆΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔⲆⵠᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Flower Box"
      }, {
        id: 46,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃΔⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆᐃΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Blue Box"
      }, {
        id: tl,
        Δⵠⵠ: Δᐃ.ΔⵠⵠⲆΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠᐃⲆᐃⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Beehive"
      }, {
        id: Qh,
        Δⵠⵠ: Δᐃ.ΔⵠᐃⲆᐃⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆⲆΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Wooden and Golden Box"
      }, {
        id: 21,
        Δⵠⵠ: Δᐃ.ᐃⲆΔᐃΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔᐃᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Gravestone"
      }, {
        id: 25,
        Δⵠⵠ: Δᐃ.ΔΔⲆᐃⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠΔⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Communist",
        name: "Sky Box"
      }, {
        id: 29,
        Δⵠⵠ: Δᐃ.ⲆᐃᐃᐃⵠᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃᐃⲆᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Golden Box"
      }, {
        id: 34,
        Δⵠⵠ: Δᐃ.ΔΔΔⵠᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃΔⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Communist",
        name: "Water Crate"
      }, {
        id: 35,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⵠᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⵠᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Communist",
        name: "Glass Crate"
      }, {
        id: ge,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔΔⵠⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Wooden and Diamond Box"
      }, {
        id: on,
        Δⵠⵠ: Δᐃ.ΔᐃⵠⲆⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠⲆⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Don't Hit Me"
      }, {
        id: 26,
        Δⵠⵠ: Δᐃ.ΔⵠⵠⲆⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠⲆΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Underwater Box"
      }, {
        id: 31,
        Δⵠⵠ: Δᐃ.ΔΔⲆΔⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⲆⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Communist",
        name: "Items Pile"
      }, {
        id: 32,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠⲆⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⵠΔΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Cake Box"
      }, {
        id: 33,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃⵠⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠⵠΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Christmas Cake Box"
      }, {
        id: 36,
        Δⵠⵠ: Δᐃ.ⲆΔⵠΔⲆᐃΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆⵠᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Fukss",
        name: "Crab Box"
      }, {
        id: 42,
        Δⵠⵠ: Δᐃ.Ⲇᐃⵠᐃⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⲆᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Fishing Box"
      }, {
        id: 22,
        Δⵠⵠ: Δᐃ.ᐃⵠⵠⵠⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⵠᐃᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Let me out of here"
      }, {
        id: 17,
        Δⵠⵠ: Δᐃ.ΔᐃⲆᐃᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆΔⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Wooden and Amethyst Box"
      }, {
        id: 24,
        Δⵠⵠ: Δᐃ.ⵠᐃΔⵠⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆᐃⵠᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Aquarium"
      }, {
        id: 28,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆⵠΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆΔᐃᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Gift Box"
      }, {
        id: 40,
        Δⵠⵠ: Δᐃ.ᐃⲆᐃⵠⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃᐃⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Open Watermelon Box"
      }, {
        id: 41,
        Δⵠⵠ: Δᐃ.ΔⲆᐃΔⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃⲆΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Watermelon Box"
      }, {
        id: 39,
        Δⵠⵠ: Δᐃ.ΔΔΔΔⲆᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔΔᐃⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Thornbush Box"
      }, {
        id: 43,
        Δⵠⵠ: Δᐃ.ΔΔΔⵠⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠΔΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Rabbit in the Box"
      }, {
        id: 47,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠᐃⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃᐃΔⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Garlic Plot"
      }, {
        id: 48,
        Δⵠⵠ: Δᐃ.ⲆⲆᐃᐃΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠΔᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Pumpkin Plot"
      }, {
        id: 45,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⲆⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆᐃⵠᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Autumn Box"
      }, {
        id: 44,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠᐃⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆᐃⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Winter Box"
      }, {
        id: 20,
        Δⵠⵠ: Δᐃ.ΔᐃΔᐃΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Metal and Reidite Box"
      }, {
        id: 23,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆᐃⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⲆⲆΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Kraken Box"
      }, {
        id: 30,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆⲆⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃⲆⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Lava Box"
      }, {
        id: 37,
        Δⵠⵠ: Δᐃ.ᐃΔΔⲆᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠᐃΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Lava Box 2"
      }, {
        id: 49,
        Δⵠⵠ: Δᐃ.ᐃᐃᐃⵠⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔΔᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Rabbit"
      }, {
        id: 50,
        Δⵠⵠ: Δᐃ.ⲆΔⲆᐃΔⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃⵠⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Wolf"
      }, {
        id: 51,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆⲆᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔΔⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Spider"
      }, {
        id: 52,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃᐃⲆⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Hawk"
      }, {
        id: 53,
        Δⵠⵠ: Δᐃ.ⲆᐃᐃΔᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃᐃΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Bear"
      }, {
        id: 54,
        Δⵠⵠ: Δᐃ.ΔᐃⵠΔⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⲆᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Fox"
      }, {
        id: 55,
        Δⵠⵠ: Δᐃ.ⵠⲆⵠΔⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Baby Mammoth"
      }, {
        id: 56,
        Δⵠⵠ: Δᐃ.ⲆⵠⵠⲆⵠⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠΔΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Mammoth"
      }, {
        id: 57,
        Δⵠⵠ: Δᐃ.ΔⲆΔⵠΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃᐃΔⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Sandworm"
      }, {
        id: 58,
        Δⵠⵠ: Δᐃ.ΔⲆᐃⲆⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠΔᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Vulture"
      }, {
        id: 59,
        Δⵠⵠ: Δᐃ.ΔᐃᐃⲆⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠΔΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Kraken"
      }, {
        id: 60,
        Δⵠⵠ: Δᐃ.ᐃΔΔⵠᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃⵠᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Piranha"
      }, {
        id: 61,
        Δⵠⵠ: Δᐃ.ⲆⲆᐃΔⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⵠΔⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Baby Dragon"
      }, {
        id: 62,
        Δⵠⵠ: Δᐃ.ΔᐃᐃᐃΔΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔΔᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Baby Lava"
      }, {
        id: 63,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆΔᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⵠⲆⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Dragon"
      }, {
        id: 64,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠⵠⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃΔᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Penguin"
      }, {
        id: 65,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆᐃᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Lava Dragon"
      }, {
        id: 66,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⵠⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⵠᐃΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Boar"
      }, {
        id: 67,
        Δⵠⵠ: Δᐃ.ᐃΔⵠⵠⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⵠΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Fire mob"
      }, {
        id: 68,
        Δⵠⵠ: Δᐃ.ΔΔⲆΔⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔⵠⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the Crab"
      }, {
        id: 69,
        Δⵠⵠ: Δᐃ.ΔΔⲆⲆⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃΔⲆΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Box of the King Crab"
      }, {
        id: 70,
        Δⵠⵠ: Δᐃ.ΔⵠⵠΔΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "CrysTal",
        name: "Crystal Sky Box"
      }, {
        id: 71,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠᐃΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Dragon Box"
      }],
      ⲆⵠⵠⲆⲆ: [{
        id: 0,
        Δⵠⵠ: Δᐃ.ΔⵠⲆΔΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃᐃΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Book 1"
      }, {
        id: Eg,
        Δⵠⵠ: Δᐃ.ΔᐃᐃΔΔⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⲆⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Book 2"
      }, {
        id: Qs,
        Δⵠⵠ: Δᐃ.ⵠΔⲆΔΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Book 3"
      }, {
        id: fa,
        Δⵠⵠ: Δᐃ.ⲆᐃᐃⲆⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃⲆⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Book 4"
      }, {
        id: xt,
        Δⵠⵠ: Δᐃ.ⲆᐃΔΔΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Damaged Book 1"
      }, {
        id: Yj,
        Δⵠⵠ: Δᐃ.ⵠᐃⲆᐃᐃΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔⲆΔΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "SeveR",
        name: "Damaged Book 2"
      }, {
        id: lt,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠⲆⲆⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔΔΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Doctorpus",
        name: "Scroll"
      }, {
        id: hi,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⲆᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆⵠΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Doctorpus",
        name: "Clipboard"
      }, {
        id: ph,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠⲆᐃᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆⲆᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Seed Book"
      }, {
        id: 20,
        Δⵠⵠ: Δᐃ.ⲆᐃⲆᐃⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆⲆᐃⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Taco4Life",
        name: "Camo Book"
      }, {
        id: 24,
        Δⵠⵠ: Δᐃ.ΔΔⵠⲆⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Communist",
        name: "Stone Tablet"
      }, {
        id: oa,
        Δⵠⵠ: Δᐃ.ⵠⵠΔⵠΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⵠⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Star Book"
      }, {
        id: zn,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃᐃⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⵠⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Gold Book"
      }, {
        id: Et,
        Δⵠⵠ: Δᐃ.ΔΔᐃⲆΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Old Mysterious Paper"
      }, {
        id: F,
        Δⵠⵠ: Δᐃ.ⲆⲆΔⲆⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⲆᐃⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Gold Engraving"
      }, {
        id: 25,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⲆⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆᐃᐃΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "fatant",
        name: "Ant Book"
      }, {
        id: 32,
        Δⵠⵠ: Δᐃ.ⵠᐃΔⵠⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠΔᐃᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Mummy Book"
      }, {
        id: 37,
        Δⵠⵠ: Δᐃ.ᐃΔⲆᐃⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⵠⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Garlic Book"
      }, {
        id: 38,
        Δⵠⵠ: Δᐃ.ΔⲆᐃᐃⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃⲆᐃΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Pumpkin Book"
      }, {
        id: 39,
        Δⵠⵠ: Δᐃ.ᐃΔᐃⵠⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔΔᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Christmas Tree Book"
      }, {
        id: 11,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆᐃᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⵠⲆΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Diamond Book"
      }, {
        id: 9,
        Δⵠⵠ: Δᐃ.ⲆΔⵠⵠⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆΔᐃΔⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Obscure Book"
      }, {
        id: 16,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠⲆⲆⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔⵠⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Rolled Parchment"
      }, {
        id: 22,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⵠⲆⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⲆᐃᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Cake Book"
      }, {
        id: 23,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆᐃⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔᐃⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Christmas Cake Book"
      }, {
        id: 30,
        Δⵠⵠ: Δᐃ.ᐃΔΔᐃΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⵠⵠⲆⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "MADBalgouthi",
        name: "Fish Book"
      }, {
        id: 31,
        Δⵠⵠ: Δᐃ.ⵠⲆⲆᐃᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⲆⵠᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "CrysTal",
        name: "Once upon a time"
      }, {
        id: dh,
        Δⵠⵠ: Δᐃ.ⲆⵠⵠⵠᐃⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔΔⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Amethyst Book"
      }, {
        id: 28,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠΔⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆΔⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Paint Pallet"
      }, {
        id: 29,
        Δⵠⵠ: Δᐃ.ⵠΔᐃᐃⵠᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃΔᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "CrysTal",
        name: "Watermelon Book"
      }, {
        id: 27,
        Δⵠⵠ: Δᐃ.ΔⲆⵠΔᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⲆⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Thornbush Book"
      }, {
        id: 35,
        Δⵠⵠ: Δᐃ.ΔⵠⵠᐃⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⵠΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Taco4Life",
        name: "Menu"
      }, {
        id: 36,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆᐃΔⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆᐃⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "CrysTal",
        name: "Lover Letter"
      }, {
        id: 40,
        Δⵠⵠ: Δᐃ.ⵠΔⲆᐃⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆⵠⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Fresh-Baked Cookies"
      }, {
        id: 41,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠⵠⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⵠⲆⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Inside, there is just a book."
      }, {
        id: 33,
        Δⵠⵠ: Δᐃ.ᐃⵠⲆΔΔⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠⵠⲆᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Winter Book"
      }, {
        id: 34,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠΔⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠⲆΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Autumn Book"
      }, {
        id: cg,
        Δⵠⵠ: Δᐃ.ⵠᐃᐃΔⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔΔᐃΔᐃΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Reidite Book"
      }, {
        id: Ql,
        Δⵠⵠ: Δᐃ.ⵠⵠⲆΔⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⵠⲆⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Lava Book"
      }, {
        id: 26,
        Δⵠⵠ: Δᐃ.ⲆΔⲆᐃⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠΔⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Lava Book 2"
      }, {
        id: 19,
        Δⵠⵠ: Δᐃ.ΔΔᐃᐃⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃⵠᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Winter",
        name: "Ocean Mystery"
      }, {
        id: 21,
        Δⵠⵠ: Δᐃ.ΔⲆΔᐃⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔⲆⲆⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Dragon Book"
      }, {
        id: 42,
        Δⵠⵠ: Δᐃ.ᐃⲆⵠΔΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃᐃⲆⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Engineer Book"
      }, {
        id: 43,
        Δⵠⵠ: Δᐃ.ΔΔⲆⵠΔⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆΔᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Nightmare Book"
      }, {
        id: 44,
        Δⵠⵠ: Δᐃ.ⲆⵠΔⵠΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⲆΔΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "aloner",
        name: "Mystery Book"
      }],
      ⲆⵠᐃᐃΔ: [{
        id: Lg,
        Δⵠⵠ: Δᐃ.ΔⵠⵠᐃᐃⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠᐃᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Nothing"
      }, {
        id: tg,
        Δⵠⵠ: Δᐃ.ⵠΔⲆⲆΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⲆΔⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Pink Cheeks"
      }, {
        id: fa,
        Δⵠⵠ: Δᐃ.ⵠΔⲆⵠᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⲆΔⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Heart"
      }, {
        id: 1,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠⲆᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠⵠⵠⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bandage 1"
      }, {
        id: qa,
        Δⵠⵠ: Δᐃ.ⵠⲆⲆΔⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔΔⲆᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆΔᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Flower 1"
      }, {
        id: pl,
        Δⵠⵠ: Δᐃ.ⵠΔᐃⲆᐃⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃⵠᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bow 1"
      }, {
        id: 6,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃᐃⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃΔΔⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Bandage 2"
      }, {
        id: Va,
        Δⵠⵠ: Δᐃ.ΔⵠⵠⲆΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃⵠⲆΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Flower 2"
      }, {
        id: 8,
        Δⵠⵠ: Δᐃ.ΔΔΔⲆΔⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆΔⲆΔⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Bandage 3"
      }, {
        id: 36,
        Δⵠⵠ: Δᐃ.ⲆΔᐃΔⲆΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃⲆⲆᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Foliage"
      }, {
        id: 59,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃⵠⲆⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠⲆⵠᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "eogito",
        name: "Peaceful"
      }, {
        id: 67,
        Δⵠⵠ: Δᐃ.ΔΔⲆⵠΔⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃΔⲆⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Sparkles"
      }, {
        id: 68,
        Δⵠⵠ: Δᐃ.ⵠᐃᐃⲆᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔⲆⲆⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Luxury"
      }, {
        id: 69,
        Δⵠⵠ: Δᐃ.ΔⵠⲆⵠΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔⵠΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔΔⲆⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Snow Flakes Crown"
      }, {
        id: bh,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃᐃΔΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠΔᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Glasses 1"
      }, {
        id: Bq,
        Δⵠⵠ: Δᐃ.ΔⲆⵠⲆΔⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⲆᐃᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Bow 2"
      }, {
        id: 11,
        Δⵠⵠ: Δᐃ.ᐃᐃΔΔⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔⵠΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "pizza wa",
        name: "Little Stars"
      }, {
        id: Mq,
        Δⵠⵠ: Δᐃ.ΔⵠᐃⲆΔⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⲆᐃᐃⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Pirate Eye Patch 1"
      }, {
        id: 44,
        Δⵠⵠ: Δᐃ.ΔᐃᐃᐃⵠⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃᐃΔᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Taco4Life",
        name: "Pirate Eye Patch 2"
      }, {
        id: 23,
        Δⵠⵠ: Δᐃ.ⵠⵠᐃᐃⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠⵠⵠⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Clown nose"
      }, {
        id: is,
        Δⵠⵠ: Δᐃ.ⲆᐃᐃⵠΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃⵠⵠΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Eye Patch"
      }, {
        id: 30,
        Δⵠⵠ: Δᐃ.ᐃΔΔⲆᐃᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⲆⲆⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "eogito",
        name: "Flower 3"
      }, {
        id: 38,
        Δⵠⵠ: Δᐃ.ΔⲆΔⲆᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔΔⲆΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Winter",
        name: "False Nose"
      }, {
        id: 74,
        Δⵠⵠ: Δᐃ.ⵠⵠΔⲆᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔΔⲆᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Red Cloth"
      }, {
        id: 75,
        Δⵠⵠ: Δᐃ.ⵠᐃΔⵠᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃⲆⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Blue Cloth"
      }, {
        id: 79,
        Δⵠⵠ: Δᐃ.ⲆⲆⲆⵠⲆⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠΔⲆⲆΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Starve.io",
        name: "Transparent Mask"
      }, {
        id: 89,
        Δⵠⵠ: Δᐃ.ᐃᐃⵠⵠⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⲆⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Anyone want to play?",
        name: "Starve.io Anime"
      }, {
        id: 94,
        Δⵠⵠ: Δᐃ.ΔⵠⵠΔᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⵠᐃⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃⵠ,
        ⵠΔⲆ: "Ant",
        name: "Hero Mask"
      }, {
        id: 15,
        Δⵠⵠ: Δᐃ.ΔΔⲆᐃᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠᐃⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Star Glasses"
      }, {
        id: 21,
        Δⵠⵠ: Δᐃ.ΔᐃΔⵠⵠᐃΔ,
        ᐃⵠᐃ: Δᐃ.ⲆΔΔᐃⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Great-aunt's Glasses"
      }, {
        id: 24,
        Δⵠⵠ: Δᐃ.ⵠΔΔⵠⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔᐃᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Little Starver"
      }, {
        id: 22,
        Δⵠⵠ: Δᐃ.ΔᐃⵠᐃΔΔΔ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⵠᐃᐃⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Little Glasses"
      }, {
        id: eq,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠⲆⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆⲆⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Flower Chain"
      }, {
        id: 29,
        Δⵠⵠ: Δᐃ.ⲆᐃΔᐃΔᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⵠΔⵠⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Horns"
      }, {
        id: 31,
        Δⵠⵠ: Δᐃ.ⵠⵠΔᐃⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠᐃΔᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Golden Flower"
      }, {
        id: 40,
        Δⵠⵠ: Δᐃ.ΔⲆΔⲆΔⲆΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "pizza wa",
        name: "Sleeping Mask"
      }, {
        id: 57,
        Δⵠⵠ: Δᐃ.ᐃΔⲆⵠⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃⲆⵠᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "Taco4Life",
        name: "Fish on your head"
      }, {
        id: 58,
        Δⵠⵠ: Δᐃ.ΔΔⵠΔⵠⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠΔΔᐃᐃᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Rose"
      }, {
        id: 91,
        Δⵠⵠ: Δᐃ.ΔΔΔΔⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⲆⵠΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "upfiz",
        name: "Grey Scarf"
      }, {
        id: 92,
        Δⵠⵠ: Δᐃ.ⲆⲆⵠⲆΔⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔⵠᐃⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "upfiz",
        name: "Black Scarf"
      }, {
        id: 93,
        Δⵠⵠ: Δᐃ.ΔᐃᐃⵠⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠᐃΔᐃⵠⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⲆΔᐃⲆ,
        ⵠΔⲆ: "upfiz",
        name: "Skull Mask"
      }, {
        id: 9,
        Δⵠⵠ: Δᐃ.ⲆΔⲆΔⵠⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔΔᐃᐃᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Fancy Glasses"
      }, {
        id: 25,
        Δⵠⵠ: Δᐃ.ΔⵠⲆⲆⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆᐃⵠⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Medecin Mask"
      }, {
        id: 14,
        Δⵠⵠ: Δᐃ.ΔᐃⵠᐃⵠⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔΔᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mr. Mayor"
      }, {
        id: bk,
        Δⵠⵠ: Δᐃ.ᐃΔⲆΔΔᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠⲆΔᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Sunglasses 2"
      }, {
        id: 28,
        Δⵠⵠ: Δᐃ.ΔΔΔΔⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠᐃⲆⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "pizza wa",
        name: "Starfish"
      }, {
        id: 37,
        Δⵠⵠ: Δᐃ.ΔⲆⲆΔᐃⵠΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃΔⲆΔᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Berry"
      }, {
        id: 39,
        Δⵠⵠ: Δᐃ.ΔⵠΔΔΔᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠΔΔⲆⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Flake"
      }, {
        id: 43,
        Δⵠⵠ: Δᐃ.ⲆⵠᐃΔᐃᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Leaf "
      }, {
        id: 61,
        Δⵠⵠ: Δᐃ.ⵠⲆΔΔᐃΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠⵠΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "A sword in your head"
      }, {
        id: 62,
        Δⵠⵠ: Δᐃ.ⵠⲆΔΔᐃᐃΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠⲆⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Winter Scarf"
      }, {
        id: 64,
        Δⵠⵠ: Δᐃ.ΔⵠⲆΔⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃⵠΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Winter Scarf 2"
      }, {
        id: 66,
        Δⵠⵠ: Δᐃ.ᐃⵠΔᐃⲆᐃⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆᐃΔⲆΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "eogito",
        name: "Winter Scarf 3"
      }, {
        id: 70,
        Δⵠⵠ: Δᐃ.ΔᐃᐃΔΔⲆⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆΔⵠΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mask with animal tracks"
      }, {
        id: 71,
        Δⵠⵠ: Δᐃ.Δᐃᐃᐃⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃΔⲆⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Spring Mask"
      }, {
        id: 72,
        Δⵠⵠ: Δᐃ.ⲆΔⲆⵠΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆᐃⲆⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Pink Mask"
      }, {
        id: 73,
        Δⵠⵠ: Δᐃ.ⵠΔᐃᐃⵠΔΔ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃⵠᐃᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Blue Mask"
      }, {
        id: 76,
        Δⵠⵠ: Δᐃ.ΔⵠΔⵠⵠⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⲆⲆⲆᐃᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Military Mask"
      }, {
        id: 77,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃΔⲆⲆⵠ,
        ᐃⵠᐃ: Δᐃ.ΔⵠᐃᐃⲆᐃΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Orange Mask"
      }, {
        id: 78,
        Δⵠⵠ: Δᐃ.ᐃⵠᐃΔⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⵠΔⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "White and Red Points Mask"
      }, {
        id: 80,
        Δⵠⵠ: Δᐃ.ΔΔᐃΔⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃΔⵠⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Stick out your tongue Mask"
      }, {
        id: 81,
        Δⵠⵠ: Δᐃ.ΔⵠⵠⵠⲆΔᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠᐃΔᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Two Teeth Mask"
      }, {
        id: 82,
        Δⵠⵠ: Δᐃ.ⲆᐃⵠⵠⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃᐃΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Make-up Mask"
      }, {
        id: 83,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆⲆⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔⵠΔΔⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Sad Mask"
      }, {
        id: 84,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆΔᐃᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⲆᐃᐃᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Happy Mask"
      }, {
        id: 90,
        Δⵠⵠ: Δᐃ.Δᐃᐃᐃⵠⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠΔΔΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆⲆΔ,
        ⵠΔⲆ: "aloner",
        name: "Blood"
      }, {
        id: 27,
        Δⵠⵠ: Δᐃ.ⵠᐃⵠⵠᐃⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ΔⲆΔΔⵠΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Clown Face"
      }, {
        id: 20,
        Δⵠⵠ: Δᐃ.ΔᐃᐃΔⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆⲆⵠΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Sunglasses 3"
      }, {
        id: 32,
        Δⵠⵠ: Δᐃ.ⵠⵠΔⵠⵠⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆⵠⵠᐃⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Engineer's Glasses"
      }, {
        id: 33,
        Δⵠⵠ: Δᐃ.ΔᐃⲆΔⵠΔᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆᐃΔΔΔΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Engineer's Monocle"
      }, {
        id: 34,
        Δⵠⵠ: Δᐃ.ΔⲆⲆⲆⵠΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠᐃⵠᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mauve's butt"
      }, {
        id: 41,
        Δⵠⵠ: Δᐃ.ⵠⲆᐃΔᐃⲆΔ,
        ᐃⵠᐃ: Δᐃ.ΔᐃⵠᐃⲆᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Lapa Head"
      }, {
        id: 42,
        Δⵠⵠ: Δᐃ.ᐃΔⵠΔᐃΔᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⲆΔᐃΔⲆ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "eogito",
        name: "Lapa Head "
      }, {
        id: 85,
        Δⵠⵠ: Δᐃ.ⵠⲆΔⵠΔᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆΔⵠᐃⲆΔⵠ,
        ᐃΔΔ: ᐃΔⲆ.ᐃᐃᐃΔ,
        ⵠΔⲆ: "Starve.io",
        name: "Mask and Glasses"
      }, {
        id: 60,
        Δⵠⵠ: Δᐃ.ⲆΔᐃⲆⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆᐃⵠⵠⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Jason"
      }, {
        id: 26,
        Δⵠⵠ: Δᐃ.ⵠΔⵠⲆⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃΔⵠⲆⵠⲆΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Devil Horns"
      }, {
        id: zh,
        Δⵠⵠ: Δᐃ.ⵠΔⲆΔⲆΔⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⵠΔΔⵠⵠᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Big Boss"
      }, {
        id: 35,
        Δⵠⵠ: Δᐃ.ⵠΔⲆΔⵠᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠᐃΔΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Baby Kraken"
      }, {
        id: 63,
        Δⵠⵠ: Δᐃ.ⵠⵠΔⲆΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠⵠΔⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Deer Antlers"
      }, {
        id: 65,
        Δⵠⵠ: Δᐃ.ⲆΔΔᐃᐃⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⲆᐃΔⲆᐃ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Baby Dragon on your head"
      }, {
        id: 86,
        Δⵠⵠ: Δᐃ.ᐃᐃΔⲆᐃⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔⲆⵠΔΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Gaz Mask and Glasses"
      }, {
        id: 87,
        Δⵠⵠ: Δᐃ.ⲆⵠⲆᐃⲆΔⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠᐃΔᐃⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "Starve.io",
        name: "Pink Gaz Mask and Glasses"
      }, {
        id: 88,
        Δⵠⵠ: Δᐃ.ⵠⵠΔᐃᐃⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆΔΔⵠⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ⵠⲆᐃⲆ,
        ⵠΔⲆ: "eogito",
        name: "Engineer Glasses"
      }, {
        id: 45,
        Δⵠⵠ: Δᐃ.ᐃᐃⲆᐃⲆⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠⲆΔᐃⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 5",
        level: 5
      }, {
        id: 46,
        Δⵠⵠ: Δᐃ.ᐃⲆΔⲆⵠᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⵠⲆΔⵠΔ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 10",
        level: 10
      }, {
        id: 47,
        Δⵠⵠ: Δᐃ.ΔᐃⲆΔΔⵠΔ,
        ᐃⵠᐃ: Δᐃ.ᐃⲆⵠⲆⲆⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 15",
        level: 15
      }, {
        id: 48,
        Δⵠⵠ: Δᐃ.ⵠⵠⵠⲆΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆⲆΔᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 20",
        level: Mg
      }, {
        id: 49,
        Δⵠⵠ: Δᐃ.ᐃⵠⵠΔⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ⵠⲆᐃΔⵠᐃᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 25",
        level: 25
      }, {
        id: 50,
        Δⵠⵠ: Δᐃ.ᐃⲆΔΔⵠⵠⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃⵠⲆᐃΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 30",
        level: 30
      }, {
        id: 51,
        Δⵠⵠ: Δᐃ.ᐃⵠⲆⲆⲆⲆᐃ,
        ᐃⵠᐃ: Δᐃ.ⲆⲆⵠΔΔⵠⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 35",
        level: 35
      }, {
        id: 52,
        Δⵠⵠ: Δᐃ.ⲆⵠΔᐃΔⵠᐃ,
        ᐃⵠᐃ: Δᐃ.ᐃᐃᐃΔᐃⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 40",
        level: 40
      }, {
        id: 53,
        Δⵠⵠ: Δᐃ.ΔᐃᐃΔΔΔⲆ,
        ᐃⵠᐃ: Δᐃ.ᐃΔΔⲆⵠⲆⵠ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 45",
        level: 45
      }, {
        id: 54,
        Δⵠⵠ: Δᐃ.ⵠΔⲆᐃⲆᐃⵠ,
        ᐃⵠᐃ: Δᐃ.ⲆⵠⲆᐃᐃΔᐃ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 50",
        level: 50
      }, {
        id: 55,
        Δⵠⵠ: Δᐃ.ΔⲆΔᐃⲆⵠⵠ,
        ᐃⵠᐃ: Δᐃ.ᐃΔᐃⵠᐃⲆⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 55",
        level: 55
      }, {
        id: 56,
        Δⵠⵠ: Δᐃ.ᐃⲆⲆⵠⲆᐃᐃ,
        ᐃⵠᐃ: Δᐃ.ΔΔⵠΔᐃⵠⲆ,
        ᐃΔΔ: ᐃΔⲆ.ΔⵠᐃⲆΔ,
        ⵠΔⲆ: "Starve.io",
        name: "More than Level 60",
        level: 60
      }]
    };
    bw.ⲆⵠᐃⲆⲆᐃᐃ = ΔⵠΔⵠᐃᐃⵠ(ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ, 21);
    bw.ᐃᐃΔⵠⲆᐃᐃ = ΔⵠΔⵠᐃᐃⵠ(ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ, ql);
    ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ] = [];
    ΔΔ[Cr.ΔⲆⲆᐃᐃ] = [];
    ΔΔ[Cr.ⵠⲆᐃⵠⲆ] = [];
    ΔΔ[Cr.ⲆⵠⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃⵠΔⵠ] = [];
    ΔΔ[Cr.ⲆⵠᐃᐃΔ] = [];
    for (var a = Fj; a < ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ.length; a++) {
      ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][a] = [ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[a].Δⵠⵠ, ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[a].ᐃⵠᐃ];
      ΔΔ[Cr.ΔⲆⲆᐃᐃ][a] = [ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[a].ᐃᐃⵠⵠ, ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[a].ᐃᐃᐃᐃ];
    }
    for (a = 0; a < ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ.length; a++) {
      ΔΔ[Cr.ⲆⵠⵠⲆⲆ][a] = [ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ[a].Δⵠⵠ, ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ[a].ᐃⵠᐃ];
    }
    for (a = rh; a < ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ.length; a++) {
      ΔΔ[Cr.ⵠⲆᐃⵠⲆ][a] = [ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ[a].Δⵠⵠ, ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ[a].ᐃⵠᐃ];
    }
    for (a = _s; a < ⲆⲆⵠⲆ.ᐃⵠΔⵠ.length; a++) {
      ΔΔ[Cr.ᐃⵠΔⵠ][a] = [ⲆⲆⵠⲆ.ᐃⵠΔⵠ[a].Δⵠⵠ, ⲆⲆⵠⲆ.ᐃⵠΔⵠ[a].ᐃⵠᐃ];
    }
    for (a = Ol; a < ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ.length; a++) {
      ΔΔ[Cr.ⲆⵠᐃᐃΔ][a] = [ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ[a].Δⵠⵠ, ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ[a].ᐃⵠᐃ];
    }
  };
  const ib = C;
  function tb(a, b, c, d) {
    if (b) {
      a.fillStyle = b;
      a.fill();
    }
    if (c) {
      a.lineWidth = d;
      a.strokeStyle = c;
      a.stroke();
    }
  }
  function nb(a, b, c, d, e, f) {
    if (d < pa * f) {
      f = d / eh;
    }
    if (e < Ok * f) {
      f = e / $r;
    }
    if (f < Lg) {
      f = jj;
    }
    a.beginPath();
    a.moveTo(b + f, c);
    a.arcTo(b + d, c, b + d, c + e, f);
    a.arcTo(b + d, c + e, b, c + e, f);
    a.arcTo(b, c + e, b, c, f);
    a.arcTo(b, c, b + d, c, f);
    a.closePath();
  }
  const ob = S;
  const rb = ug;
  function ab(a, b, c, d) {
    a.beginPath();
    a.arc(b, c, d, kq, yh * Math.PI);
  }
  const sb = Ij;
  function hb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.sqrt(b.width * b.width + b.height * b.height);
    d2 = e / 2;
    c.width = e;
    c.height = e;
    d.translate(d2, d2);
    d.rotate(a);
    d.drawImage(b, -b.width / 2, -b.height / yg);
    return c;
  }
  function lb(a, b, c, d, e) {
    a.beginPath();
    a.lineCap = "round";
    a.arc(b, c, d, 0, e * (Math.PI * C));
  }
  function gb(b, c, d, e) {
    var f = Wq * Math.PI / c;
    b.beginPath();
    var g = [{
      x: d,
      y: ko
    }];
    var i = [];
    for (var a = V; c > a; a++) {
      g.push({
        x: d * Math.sin(a * f),
        y: d * Math.cos(a * f)
      });
      var j = g.length;
      i.push(ⵠⵠⵠⲆ.ΔⲆᐃⲆⵠⲆⵠ(g[j - Le], g[j - Br]));
    }
    i.push(ⵠⵠⵠⲆ.ΔⲆᐃⲆⵠⲆⵠ(g[g.length - Ur], g[0]));
    var k = i[i.length - 1];
    b.moveTo(k.x, k.y);
    for (a = 0; a < c; a++) {
      b.arcTo(g[a].x, g[a].y, i[a].x, i[a].y, e);
    }
    b.closePath();
  }
  const ub = Ur;
  const bb = hl;
  function vb(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = Math.floor(b * 28);
    var g = Math.floor(b * 20);
    e.font = g + "px Baloo Paaji";
    var h = b * S;
    var a = e.measureText(c).width + h * 2;
    d.width = a;
    d.height = f;
    nb(e, 0, 0, a, f, b * 10);
    e.globalAlpha = 0.5;
    tb(e, "#000");
    e.globalAlpha = Ur;
    e.textBaseline = "middle";
    e.font = g + "px Baloo Paaji";
    e.beginPath();
    e.fillStyle = hj[eh];
    e.fillText(c, h, f / 2);
    return d;
  }
  const db = Ss;
  function cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 183, a * 107);
    nb(e, a * -8, a * -70.5, a * Sa, a * 141, a * jh);
    e.restore();
    tb(e, c[Ko]);
    e.save();
    e.translate(a * 69.5, a * 110);
    nb(e, a * -8.5, a * -71, a * $h, a * 143, a * V);
    e.restore();
    tb(e, c[Jt]);
    e.save();
    e.translate(a * 123.5, a * 181);
    nb(e, a * -84.5, a * -26, a * 169, a * 52, a * Cj);
    e.restore();
    tb(e, c[2], c[1], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 95);
    e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
    e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
    e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
    e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
    e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
    e.closePath();
    tb(e, c[eh], c[yl], hn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 75);
    e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
    e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
    e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
    e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
    e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
    e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
    e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
    e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
    e.closePath();
    tb(e, c[3], c[1], a * bg);
    return d;
  }
  function mb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 264;
    d.height = a * 246;
    e.translate(Jt, a * Fg);
    e.globalAlpha = b ? 0.5 : js;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, j * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(io * a, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    tb(e, c[0]);
    e.translate(0, a * -10);
    e.globalAlpha = wg;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 54);
    e.bezierCurveTo(a * 79, a * 21, a * 131, Al * a, a * 153, a * 36);
    e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
    e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
    e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
    e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
    e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
    e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
    e.bezierCurveTo(a * hs, a * 80, a * 51, a * 52, a * 75, a * 54);
    e.closePath();
    tb(e, c[1], c[2], Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 102);
    e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
    e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
    e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
    e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
    e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
    e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
    e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
    e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
    e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
    e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
    e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
    e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
    e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
    e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
    e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
    e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
    e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
    e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
    e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
    e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
    e.closePath();
    tb(e, c[ij]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 103);
    e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
    e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
    e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
    e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
    e.closePath();
    tb(e, c[Ea], c[Il], qo * a);
    return d;
  }
  function pb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 120;
    var j = c * 110;
    var k = i / Ok;
    var a = j / Ok;
    var m = c * 20;
    var h = c * 112;
    var l = c * 82;
    var g = h / 2;
    var n = l / xl;
    var b = c * Yn;
    e.width = i;
    e.height = j;
    f.globalAlpha = Eg;
    f.translate(k, a);
    nb(f, -g, -n, h, l, m);
    tb(f, d, d, b);
    return e;
  }
  function Cb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 22;
    d.height = a * 22;
    e.globalAlpha = 0.4;
    ab(e, a * 11, a * 11, a * 10);
    tb(e, c[Fj]);
    e.globalAlpha = 0.7;
    ab(e, a * 11, a * 11, a * Hj);
    tb(e, c[Fj]);
    e.globalAlpha = dn;
    ab(e, a * xg, Sh * a, a * 4);
    tb(e, c[rh]);
    return d;
  }
  function Tb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 182, a * 120);
    nb(e, -xo * a, a * -67, a * ah, a * 134, a * er);
    e.restore();
    tb(e, c[rh]);
    e.save();
    e.translate(a * 68.5, a * 127.5);
    nb(e, a * -8.5, a * -70.5, bh * a, a * 141, a * 1);
    e.restore();
    tb(e, c[Ko]);
    e.save();
    e.translate(a * 123.5, a * 68);
    nb(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
    e.restore();
    tb(e, c[yg], c[1], So * a);
    e.save();
    e.translate(a * 123, a * 179.5);
    nb(e, a * -83, a * -24.5, a * 166, a * 49, a * qo);
    e.restore();
    tb(e, c[xl], c[Br], a * 6);
    e.save();
    e.translate(a * 123.5, a * 123.5);
    e.rotate(6.24);
    nb(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
    e.restore();
    tb(e, c[3], c[dn], _h * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 112);
    e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
    e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
    e.closePath();
    tb(e, c[1]);
    return d;
  }
  function fb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 247;
    e.save();
    e.translate(a * 69.5, a * 145);
    nb(e, a * -8.5, a * -63, a * 17, a * 127, a * wg);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 183, a * 145);
    nb(e, a * -xo, a * -63, a * 16, a * 126, a * 1);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 123.5, a * 62.5);
    e.rotate(6.28);
    nb(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
    e.restore();
    tb(e, c[2], c[yl], za * a);
    e.save();
    e.translate(a * 123.5, a * 118);
    e.rotate(6.24);
    nb(e, a * -85.5, a * -24, a * 169, a * 48, a * Cj);
    e.restore();
    tb(e, c[cl], c[1], a * 6);
    e.save();
    e.translate(a * 122, a * 177.5);
    e.rotate(6.32);
    nb(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
    e.restore();
    tb(e, c[2], c[wg], _h * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 157);
    e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
    e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
    e.closePath();
    tb(e, c[ik]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 205, a * 175);
    e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
    e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
    e.closePath();
    tb(e, c[1]);
    return d;
  }
  function zb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 70;
    d.height = a * 70;
    e.globalAlpha = 0.5;
    ab(e, a * 26, a * 26, a * wl);
    tb(e, c[0]);
    ab(e, a * 56, a * 36, ks * a);
    tb(e, c[1]);
    ab(e, a * 40, a * 50, a * pg);
    tb(e, c[tg]);
    e.globalAlpha = Fo;
    ab(e, a * 26, a * 26, Bk * a);
    tb(e, c[0]);
    ab(e, a * 56, a * 36, a * 5);
    tb(e, c[ce]);
    ab(e, a * 40, a * 50, Gl * a);
    tb(e, c[Le]);
    return d;
  }
  const yb = Ss;
  function wb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 191;
    c.height = a * 153;
    d.save();
    d.translate(a * 96.49996948242188, a * 66.79510498046875);
    nb(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    d.restore();
    tb(d, b[0], b[0], a * 4);
    d.translate(a * ij, 0);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 119, a * 28);
    d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, Jo * a);
    d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    d.bezierCurveTo(a * Wa, a * 74, Ck * a, a * 78, a * ps, a * 83);
    d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * ah, a * 42);
    d.bezierCurveTo(a * Ph, a * 39, a * 14, a * 39, Ah * a, a * 36);
    d.bezierCurveTo(sk * a, a * 33, a * 16, a * 33, a * 19, a * 30);
    d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, Zq * a, a * 25);
    d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, Yo * a);
    d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
    d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    d.closePath();
    tb(d, b[_s], b[Kr], a * gn);
    d.save();
    d.translate(a * 97.49996948242188, a * 95.12844848632812);
    nb(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    d.restore();
    tb(d, b[Ko], b[Mn], Il * a);
    return c;
  }
  function Pb(a, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 191;
    e.height = a * 153;
    f.globalAlpha = 0.5;
    f.translate(0, Fn * a);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(Ko);
    nb(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    tb(f, d[rh], d[0], a * 4);
    f.globalAlpha = 1;
    f.translate(Ko, a * -10);
    f.save();
    f.translate(a * 96.49996948242188, a * 66.79510498046875);
    f.rotate(0);
    nb(f, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
    f.restore();
    tb(f, d[1], d[eh], a * 4);
    f.translate(a * $r, 0);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 119, a * 28);
    f.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, Fa * a);
    f.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
    f.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
    f.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
    f.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
    f.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
    f.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
    f.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
    f.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
    f.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
    f.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
    f.bezierCurveTo(il * a, a * 74, a * 14, a * 78, a * 12, a * 83);
    f.bezierCurveTo(a * 12, a * 65, a * b, a * 54, a * 16, a * 42);
    f.bezierCurveTo(Vg * a, a * 39, zl * a, a * 39, a * ul, a * 36);
    f.bezierCurveTo(a * 16, a * 33, a * zs, a * 33, a * 19, a * 30);
    f.bezierCurveTo(on * a, a * 27, a * 18, a * 27, ok * a, a * 25);
    f.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
    f.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
    f.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
    f.bezierCurveTo(a * 74, a * 16, a * 74, a * zs, a * 106, lg * a);
    f.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
    f.closePath();
    tb(f, d[Dn], d[4], gn * a);
    return e;
  }
  function Ab(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 191;
    d.height = a * 153;
    e.globalAlpha = 0.5;
    e.translate(0, eg * a);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    nb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * Ye);
    e.restore();
    tb(e, c[Kr], c[0], a * 4);
    e.globalAlpha = bt;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 97.49996948242188, a * 95.12844848632812);
    nb(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
    e.restore();
    tb(e, c[Eg], c[C], a * gn);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
    e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
    e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
    e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
    e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
    e.closePath();
    tb(e, c[2], c[Mo], a * 4);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
    e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
    e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
    e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
    e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
    e.closePath();
    tb(e, c[3], c[4], a * Yn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
    e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
    e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
    e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
    e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
    e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
    e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
    e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
    e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
    e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
    e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
    e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
    e.closePath();
    tb(e, c[pl], c[zk], a * kr);
    ab(e, a * 68, a * 111.29513549804688, vh * a);
    tb(e, c[7], c[zn], a * 4);
    ab(e, a * 123, a * 111.29510498046875, a * 15);
    tb(e, c[Ij], c[ih], a * mj);
    ab(e, a * 63, a * 106, a * 5);
    tb(e, c[ug]);
    ab(e, a * 118, a * 106, Rj * a);
    tb(e, c[rb]);
    return d;
  }
  function kb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 40;
    var i = b * 40;
    e.width = g;
    e.height = i;
    var a = b * g / Ok;
    var j = b * i / ij;
    var k = Ns * b;
    f.save();
    f.translate(a, j);
    f.globalAlpha = er;
    ab(f, 0, Dh, k);
    tb(f, d[Ko]);
    k = Th * b;
    a = b * _l;
    j = b * 1;
    f.translate(a, j);
    f.globalAlpha = Br;
    ab(f, 0, 0, k);
    tb(f, d[wg]);
    f.restore();
    return e;
  }
  const xb = Mn;
  function Jb(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 185;
    e.height = a * 240;
    f.globalAlpha = 0.5;
    f.translate(0, a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * ig, a * 150, a * 11, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    tb(f, c[tr]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    tb(f, c[Fj]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    tb(f, c[_s]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    tb(f, c[0]);
    f.globalAlpha = dn;
    f.translate(0, a * -10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 137);
    f.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    f.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    f.closePath();
    tb(f, c[dn], c[2], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 181);
    f.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
    f.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    f.closePath();
    tb(f, c[1], c[2], a * bn);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 63, a * 208);
    f.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    f.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    f.closePath();
    tb(f, c[Aj], c[$r], th * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 130, a * 170);
    f.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    f.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    f.closePath();
    tb(f, c[1], c[$r], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 39, a * 140);
    f.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    f.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    f.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    f.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    f.closePath();
    tb(f, c[1], c[Ok], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 59, a * 99);
    f.bezierCurveTo(a * 71, a * 68, a * 81, a * 68, a * 94, a * 67);
    f.bezierCurveTo(a * 105, a * 66, a * 119, a * 75, a * 123, a * 96);
    f.bezierCurveTo(a * 104, a * 91, a * 101, a * 94, a * 94, a * 97);
    f.bezierCurveTo(a * 76, a * 92, a * 73, a * 93, a * 60, a * 99);
    f.closePath();
    tb(f, c[Gg], c[2], a * qa);
    if (d === jj) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 47, a * 149);
      f.bezierCurveTo(a * 43, a * 140, a * 48, a * 130, a * 59, a * 127);
      f.bezierCurveTo(a * 77, a * 126, a * 90, a * 131, a * 131, a * 127);
      f.bezierCurveTo(a * 143, a * 130, a * 144, a * 143, a * 132, a * 154);
      f.bezierCurveTo(a * 90, a * 152, a * 90, a * 152, a * 48, a * 150);
      f.closePath();
      tb(f, c[1]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 40, a * 139);
      f.bezierCurveTo(a * 48, a * 113, a * 76, a * 119, a * 91, a * 126);
      f.bezierCurveTo(a * 117, a * 113, a * 135, a * 117, a * 144, a * 134);
      f.bezierCurveTo(a * 144, a * 138, a * 144, a * 138, a * 144, a * 142);
      f.bezierCurveTo(a * 128, a * 124, a * 108, a * 124, a * 91, a * 136);
      f.bezierCurveTo(a * 59, a * 124, a * 50, a * 137, a * 42, a * 148);
      f.closePath();
      tb(f, c[Ik], c[2], a * 4);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 41, a * 139);
      f.bezierCurveTo(a * 53, a * 117, a * 69, a * 118, a * 92, a * 127);
      f.bezierCurveTo(a * 124, a * 111, a * 136, a * 121, a * 143, a * 136);
      f.bezierCurveTo(a * 142, a * 144, a * 142, a * 144, a * 141, a * 152);
      f.bezierCurveTo(a * 128, a * 131, a * 113, a * 138, a * 92, a * 145);
      f.bezierCurveTo(a * 57, a * 133, a * 57, a * 147, a * 44, a * 154);
      f.closePath();
      tb(f, c[3], c[2], qo * a);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 95);
    f.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    f.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * Es);
    f.bezierCurveTo(a * 92, a * Cj, a * 83, a * 16, a * 78, a * 29);
    f.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    f.closePath();
    tb(f, c[1], c[Wq], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 90, a * 86);
    f.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    f.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * lg);
    f.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    f.closePath();
    tb(f, c[Fo], c[3], a * jt);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 117);
    f.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    f.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    f.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    f.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    f.closePath();
    tb(f, c[ce], c[Gg], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 92, a * 175);
    f.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    f.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    f.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    f.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    f.closePath();
    tb(f, c[bt], c[vg], a * Ka);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 169);
    f.bezierCurveTo(a * 42, a * 187, a * 50, a * 193, a * 59, a * 198);
    f.closePath();
    tb(f, Tg, c[2], Ca * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 136, a * 171);
    f.bezierCurveTo(a * 139, a * 186, a * 138, a * 191, a * 124, a * 199);
    f.closePath();
    tb(f, La, c[Uh], a * th);
    ab(f, a * 63, a * 180, a * 15.231546211727817);
    tb(f, c[xt]);
    ab(f, a * 121, a * 181, a * 15.652475842498529);
    tb(f, c[qa]);
    ab(f, a * 58, a * 175, a * 5.656854249492381);
    tb(f, c[2]);
    ab(f, a * 116, a * 175, a * 5.656854249492381);
    tb(f, c[yh]);
    return e;
  }
  function Mb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 185;
    c.height = a * 240;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 137);
    d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
    d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 53, a * 181);
    d.bezierCurveTo(a * 30, a * 164, Wl * a, a * 150, a * hs, a * 136);
    d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
    d.closePath();
    tb(d, b[Fj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 63, a * 208);
    d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
    d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 170);
    d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
    d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 39, a * 140);
    d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
    d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
    d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
    d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 95);
    d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
    d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, Es * a);
    d.bezierCurveTo(a * 92, a * uh, a * 83, a * 16, a * 78, a * 29);
    d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 90, a * 86);
    d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
    d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
    d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
    d.closePath();
    tb(d, b[Ol]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 117);
    d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
    d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
    d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
    d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 92, a * 175);
    d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
    d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
    d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
    d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
    d.closePath();
    tb(d, b[0]);
    return c;
  }
  const Bb = mh;
  const Db = S;
  function Eb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * Bs;
    var j = c * Oj;
    var k = i / 2;
    var a = j / 2;
    e.width = i;
    e.height = j;
    var m = c * 5;
    var h = c * 28;
    var l = m / yg;
    var g = h / 2;
    f.translate(k, a);
    for (var n = 0; n < 4; n++) {
      nb(f, -l, -g, m, h, c * C);
      f.rotate(Math.PI / Il);
      tb(f, d);
    }
    f.arc(rh, 0, c * bb, Jt, Math.PI * 2);
    tb(f, d);
    f.globalCompositeOperation = "destination-out";
    ab(f, 0, yk, c * 4);
    f.fill();
    return e;
  }
  function Ib(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 32;
    var k = c * 32;
    var a = j / Ok;
    var m = k / 2;
    f.width = j;
    f.height = k;
    var h = c * 5;
    var l = c * 28;
    var g = h / yg;
    var n = l / 2;
    i.translate(c * Fj, c * 0);
    i.translate(a, m);
    if (yl == e) {
      ab(i, 0, yk, c * 10);
      tb(i, d[ib], d[2], c * 3);
      for (var b = 0; jt > b; b++) {
        nb(i, -g, -n, h, l, c * 2);
        i.rotate(Math.PI / Yn);
        tb(i, d[2], d[Xn], c * 4);
      }
    }
    ab(i, Ol, 0, ll * c);
    tb(i, d[0], d[Ur], c * 1.5);
    for (b = jj; bn > b; b++) {
      nb(i, -g, -n, h, l, c * $r);
      i.rotate(Math.PI / 4);
      tb(i, d[0], d[js], c * 1.5);
    }
    ab(i, 0, 0, c * 10);
    tb(i, d[0]);
    ab(i, kq, 0, c * bn);
    tb(i, d[2], d[Fo], c * 1.5);
    i.globalCompositeOperation = "destination-out";
    ab(i, 0, 0, Ka * c);
    tb(i, d[Ko], d[bt], c * Qs);
    i.globalCompositeOperation = "source-over";
    ab(i, 0, yk, c * gn);
    tb(i, undefined, d[1], c * ij);
    return f;
  }
  function Sb(a) {
    var b = document.createElement("canvas");
    var c = b.getContext("2d");
    var d = a * 200;
    var e = a * 200;
    b.width = d;
    b.height = e;
    var f = Eu(0.35, aa, ["#0e3022", "#0b8052", "#077b49"]);
    c.drawImage(f, 10, 10);
    f = Du(0.9, M, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 21, Fl);
    f = Du(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 38, 28);
    f = Du(0.9, false, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 15, 37);
    f = Du(0.9, aa, ["#3d2a6e", "#8255b5"]);
    c.drawImage(f, 32, 45);
    return b;
  }
  const Qb = Sh;
  function _b(f, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var n = (r = f * 125) / Ok;
    var o = (t = f * 95) / 2;
    var a = f * 10;
    var p = f * ih;
    var h = f * 112;
    var l = f * 82;
    var g = h / ib;
    var q = l / 2;
    var b = f * 4;
    j.width = r;
    j.height = t;
    k.translate(n - f * kr, o + f * 4);
    k.globalAlpha = e ? 0.5 : 1;
    nb(k, -g, -q, h, l, a);
    tb(k, i[0]);
    k.globalAlpha = 1;
    k.translate(0, -p);
    nb(k, -g, -q, h, l, a);
    tb(k, i[1], i[ib], b);
    var r = f * 55;
    var t = f * 45;
    a = 5;
    k.translate(f * -40, f * -30);
    nb(k, rh, 0, r, t, a);
    tb(k, i[Mo]);
    var u = Eb(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * -25);
    u = Eb(f * 0.7, i[3]);
    k.drawImage(u, f * 45, f * Gs);
    u = Eb(f * 1.2, i[Fh]);
    k.drawImage(u, f * 28, f * -30);
    r = f * 15;
    t = f * 70;
    a = Rj * f;
    k.translate(f * 78, -U * f);
    nb(k, 0, 0, r, t, a);
    tb(k, i[4]);
    r = f * 9;
    t = f * 50;
    a = f * 3;
    k.translate(f * -Tl, f * 20);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    nb(k, 0, 0, r, t, a);
    tb(k, i[5]);
    k.translate(f * -20, f * 29);
    k.rotate(Math.PI / 5);
    k.globalAlpha = 0.6;
    k.beginPath();
    k.lineJoin = "round";
    k.moveTo(0, jj);
    k.lineTo(0, f * 30);
    k.lineTo(f * 30, f * 30);
    k.closePath();
    tb(k, null, i[Bk], f * lr);
    return j;
  }
  function Fb(c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var i = c * 85;
    var j = c * 115;
    var k = c * 6;
    e.width = i;
    e.height = j;
    f.translate(c * -130, c * -60 + k);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    tb(f, d[0]);
    f.translate(0, -k);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
    f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
    f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
    f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
    f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
    f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
    f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
    f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
    f.closePath();
    tb(f, d[1], d[2], 4);
    var a = c * 155;
    var m = c * 133;
    var h = c * Fg;
    var l = c * Kk;
    var g = a + c * -jg;
    var n = m + c * -5;
    f.save();
    f.translate(a, m);
    f.globalAlpha = wg;
    ab(f, 0, ko, h);
    tb(f, d[Fh]);
    f.restore();
    f.save();
    f.translate(g, n);
    f.globalAlpha = 1;
    ab(f, jj, 0, l);
    tb(f, d[In]);
    f.restore();
    f.save();
    f.translate(a + c * 27, m);
    f.globalAlpha = ub;
    ab(f, 0, 0, h);
    tb(f, d[Ik]);
    f.restore();
    f.save();
    f.translate(c * 27 + g, n);
    f.globalAlpha = ik;
    ab(f, 0, 0, l);
    tb(f, d[Ka]);
    return e;
  }
  const Rb = Ll;
  function jb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 188;
    c.height = a * 190;
    d.globalAlpha = 0.5;
    d.translate(kq, a * 5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    tb(d, b[0], b[0], gn * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    tb(d, b[0], b[ko], pa * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
    d.closePath();
    tb(d, b[0], b[Kr], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    d.closePath();
    tb(d, b[0], b[Lg], Ok * a);
    d.globalAlpha = 1;
    d.translate(0, a * -Th);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    tb(d, b[ce], b[Xn], a * B);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
    d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
    d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
    d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
    d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
    d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
    d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
    d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
    d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
    d.closePath();
    tb(d, b[jg]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
    d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
    d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
    d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
    d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
    d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
    d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
    d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
    d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
    d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
    d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
    d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
    d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
    d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
    d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
    d.closePath();
    tb(d, undefined, b[xl], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
    d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
    d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
    d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
    tb(d, b[1], b[2], a * Vl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
    d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
    d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
    tb(d, b[wg], b[yh], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
    d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
    d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
    d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
    d.closePath();
    tb(d, b[Za]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
    d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
    d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
    d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
    d.closePath();
    tb(d, b[B]);
    ab(d, a * 77, a * 107, a * 6);
    tb(d, b[2]);
    ab(d, a * 110, a * 107, a * 6);
    tb(d, b[Ok]);
    ab(d, a * 75, a * 105, ta * a);
    tb(d, b[jt]);
    ab(d, a * 108, a * 105, a * 3);
    tb(d, b[qa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
    d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
    d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
    d.closePath();
    tb(d, b[ik]);
    return c;
  }
  const Lb = oj;
  function Wb(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 55;
    var h = b * 55;
    var a = db * b;
    e.width = g;
    e.height = h;
    f.translate(b * -65, b * -55 + a);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 95, b * 60);
    f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
    f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
    f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
    f.closePath();
    tb(f, d[Mn], d[Br], 3);
    f.globalAlpha = 1;
    f.beginPath();
    f.moveTo(b * 91, b * 70);
    f.bezierCurveTo(b * 91, b * 75, Bs * b, b * 76, b * 100, b * 73);
    f.bezierCurveTo(b * Qk, b * 69, b * 89, b * 65, b * 91, b * 70);
    f.closePath();
    tb(f, d[2], d[3], 3);
    return e;
  }
  const Gb = tt;
  function Ob(f, e, i, j, k) {
    var n = document.createElement("canvas");
    var o = n.getContext("2d");
    var a = f * 70;
    var p = f * 70;
    var h = Pr * f;
    var l = f * U;
    n.width = a;
    n.height = p + l;
    for (var g = xb; e.length > g; g++) {
      var q = e[g];
      o.globalAlpha = q.a;
      var r = q.f(i, Pe, q.c);
      o.save();
      o.translate(a / eh + q.x * f, p / Le + f * q.y);
      o.rotate(q.r);
      o.drawImage(r, -r.width / _l, -r.height / Wq);
      o.restore();
    }
    var s = [];
    for (g = 0; g < j.length; g++) {
      var d = document.createElement("canvas");
      var t = d.getContext("2d");
      d.width = a;
      d.height = p + l;
      t.globalAlpha = k / yh;
      if (g == xl) {
        nb(t, xb, l, a, p, h);
      } else {
        nb(t, Dh, 0, a, p + l, h);
      }
      tb(t, "#081a19");
      t.globalAlpha = k;
      if (g == 2) {
        nb(t, Dh, l, a, p, h);
      } else {
        nb(t, 0, yk, a, p, h);
      }
      tb(t, j[g]);
      t.globalAlpha = 1;
      if (kn == g) {
        t.drawImage(n, Dh, l);
      } else {
        t.drawImage(n, _s, 0);
      }
      s.push(ur(d));
    }
    return s;
  }
  function qb(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 193;
    var m = c * 198;
    var a = c * 140;
    var n = c * 90;
    i.width = k;
    i.height = m;
    var h = c * eg;
    var l = c * 25;
    var g = c * 180;
    var o = l / 2;
    var b = g / ij;
    var p = c * 4;
    j.translate(c * -25, c * 1);
    j.translate(a, n);
    j.rotate(-Math.PI / Ca);
    nb(j, -o, -b, l, g, h);
    tb(j, f[0], f[Aj], p);
    j.translate(c * -30, c * -25);
    j.rotate(Math.PI / 3);
    nb(j, -o, -b, l, g, h);
    tb(j, f[0], f[Cs], p);
    j.translate(c * 35, c * 30);
    j.rotate(Math.PI / Fh);
    nb(j, -o, -b, l, g, h);
    tb(j, f[0], f[1], p);
    return i;
  }
  function Nb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 202.5, a * 147.5);
    nb(e, a * -96.5, a * -21.5, a * 193, a * 193, a * Wh);
    e.restore();
    tb(e, b[Fj], b[js], a * 12);
    e.save();
    e.translate(a * 202.5, a * 190.5);
    nb(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
    e.restore();
    tb(e, b[$r], b[1], a * 12);
    e.save();
    e.save();
    e.translate(a * 202.5, a * 233.5);
    nb(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
    e.restore();
    tb(e, b[3], b[1], a * 12);
    e.save();
    e.translate(a * 202.5, a * 275);
    nb(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
    e.restore();
    tb(e, b[tr], b[Eg], a * 12);
    e.save();
    e.translate(a * 201, a * 212);
    e.rotate(8.64);
    nb(e, a * -116, a * -22, a * 232, a * 44, a * 10);
    e.restore();
    tb(e, b[sn], b[js], a * co);
    e.save();
    e.translate(a * 203.5, a * 121.5);
    nb(e, a * -115.5, a * -20.5, a * 231, a * 41, a * eg);
    e.restore();
    tb(e, b[3], b[ce], a * 12);
    e.save();
    e.translate(a * 203.5, a * 299);
    nb(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
    e.restore();
    tb(e, b[3], b[Cs], Ah * a);
    e.save();
    e.translate(a * 298.5, a * 210);
    nb(e, a * -20.5, a * -109, a * 41, a * 218, wh * a);
    e.restore();
    tb(e, b[_i], b[1], a * 12);
    e.save();
    e.translate(a * 108.5, a * 210);
    nb(e, a * -20.5, a * -109, a * 41, a * 218, Ke * a);
    e.restore();
    tb(e, b[Ea], b[1], a * 12);
    e.save();
    e.translate(a * 204, a * 121.5);
    nb(e, a * -92, a * -9.5, a * 184, a * 19, Dl * a);
    e.restore();
    tb(e, b[nh], b[nh], a * 10);
    e.save();
    e.translate(a * 197, a * 299);
    nb(e, a * 85, -ks * a, a * -170, a * 18, a * 10);
    e.restore();
    tb(e, b[3], b[Dn], Ke * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 94, a * 317);
    e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
    e.closePath();
    tb(e, kj, b[1], a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279, a * 142);
    e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
    e.closePath();
    tb(e, Lk, b[1], a * zt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 106);
    e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
    e.closePath();
    tb(e, undefined, b[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 281, a * 282);
    e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
    e.closePath();
    tb(e, jr, b[bt], a * 12);
    if (c == 0) {
      e.scale(2, Ok);
      e.translate(a * -7, a * 55);
      e.rotate(-0.5);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 60, a * 47);
      e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
      e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
      e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
      e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
      e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
      e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
      e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
      e.closePath();
      tb(e, b[4], b[4], Rj * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68, a * 54);
      e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
      e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
      e.closePath();
      tb(e, b[3]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 50, a * 55);
      e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
      e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
      e.closePath();
      tb(e, b[Mo]);
    } else if (c == 1) {
      e.scale(0.6, 0.6);
      e.translate(a * 185, a * 165);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 108, a * 56);
      e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
      e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
      e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
      e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
      e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
      e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
      e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
      e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
      e.closePath();
      tb(e, b[qo], b[th], Tl * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 112, a * 72);
      e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
      e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
      e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
      e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
      e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
      e.closePath();
      tb(e, undefined, b[_s], a * 13);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 132, a * 117);
      e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
      e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
      e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
      tb(e, undefined, b[0], a * 20);
      ab(e, a * 142, a * 221, a * 16.1245154965971);
      tb(e, b[0]);
    }
    return d;
  }
  function Hb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 85, a * 237);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 54.585977194239184, a * Fo);
    e.restore();
    tb(e, c[Fo], c[2], tn * a);
    e.save();
    e.translate(a * 178, a * 238);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 52.53573932334064, a * V);
    e.restore();
    tb(e, c[js], c[$r], a * 12);
    e.save();
    e.translate(a * 270, a * 239);
    e.rotate(1.5707963267948966);
    gb(e, So, a * 53.58058329516393, dn * a);
    e.restore();
    tb(e, c[jh], c[2], a * 12);
    e.save();
    e.translate(a * 222, a * 312);
    e.rotate(1.5707963267948966);
    gb(e, za, a * 52.53573932334064, a * 1);
    e.restore();
    tb(e, c[ce], c[ij], a * Mq);
    e.save();
    e.translate(a * 317, a * 159);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 57.63465889766331, js * a);
    e.restore();
    tb(e, c[1], c[yh], a * 12);
    e.save();
    e.translate(a * 223.5, a * 139.0625);
    e.rotate(1.5707963267948966);
    gb(e, _, a * 51.66236541235796, a * jh);
    e.restore();
    tb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 132.5, a * 137.0625);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 52.009614495783374, a * ik);
    e.restore();
    tb(e, c[V], c[_l], a * 12);
    e.save();
    e.translate(a * 178.5, a * 58.0625);
    e.rotate(1.5707963267948966);
    gb(e, Ll, a * 53.16013544000805, a * 1);
    e.restore();
    tb(e, c[V], c[2], a * 12);
    e.save();
    e.translate(a * 177.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    gb(e, zk, a * 50, a * 1);
    e.restore();
    tb(e, c[Ur], c[2], dl * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(1.5707963267948966);
    gb(e, Mr, a * 54, a * 1);
    e.restore();
    tb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 319.5, a * 138.0625);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 55.08175741568164, a * 1);
    e.restore();
    tb(e, c[1], c[2], a * 12);
    e.save();
    e.translate(a * 269.5, a * 216.0625);
    e.rotate(1.5707963267948966);
    gb(e, 6, a * 54.589376255824725, a * Aj);
    e.restore();
    tb(e, c[yl], c[ib], a * 12);
    e.save();
    e.translate(a * 221.5, a * 293.0625);
    e.rotate(0.5235987755982988);
    gb(e, 6, a * 49.49747468305833, a * jh);
    e.restore();
    tb(e, c[1], c[ib], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 342.0625);
    e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
    e.closePath();
    tb(e, undefined, c[kn], tn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 270.0625);
    e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
    e.closePath();
    tb(e, lq, c[Le], fs * a);
    e.save();
    e.translate(a * 84.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    gb(e, zk, a * 30, a * 15);
    e.restore();
    tb(e, c[3]);
    e.save();
    e.translate(a * 177.5, a * 215.0625);
    e.rotate(0.5235987755982988);
    gb(e, Vo, a * 30, a * Et);
    e.restore();
    tb(e, c[_i]);
    e.save();
    e.translate(a * 222.5, a * 294.0625);
    e.rotate(0.5235987755982988);
    gb(e, So, a * 30, $q * a);
    e.restore();
    tb(e, c[3]);
    e.save();
    e.translate(a * 270.5, a * 216.0625);
    e.rotate(0.5235987755982988);
    gb(e, Ll, a * 30, vh * a);
    e.restore();
    tb(e, c[_i]);
    e.save();
    e.translate(a * 320.5, a * 134.0625);
    e.rotate(0.5235987755982988);
    gb(e, ol, a * 30, a * 15);
    e.restore();
    tb(e, c[ta]);
    e.save();
    e.translate(a * 224.5, a * 138.0625);
    e.rotate(0.5235987755982988);
    gb(e, 6, a * 30, a * Wa);
    e.restore();
    tb(e, c[3]);
    e.save();
    e.translate(a * 133.5, a * 137.0625);
    e.rotate(0.5235987755982988);
    gb(e, 6, a * 30, a * ng);
    e.restore();
    tb(e, c[Ik]);
    e.save();
    e.translate(a * 178.5, a * 56.0625);
    e.rotate(0.5235987755982988);
    gb(e, 6, a * 30, a * 15);
    e.restore();
    tb(e, c[3]);
    return d;
  }
  function Ub(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : Aj;
    e.translate(U * a, a * U);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    tb(e, undefined, c[Dh], qo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111.25, a * 8.953125);
    e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
    e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
    e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85.25, a * 82.953125);
    e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
    e.closePath();
    tb(e, undefined, c[6], a * kr);
    e.globalAlpha = b ? 0.5 : Cs;
    e.translate(a * gs, a * Wn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    tb(e, Rg, c[0], zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = Cs;
    e.translate(a * -5, -Bb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 160.25, a * 114.953125);
    e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
    e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
    e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.25, a * 84.953125);
    e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
    e.closePath();
    tb(e, undefined, c[6], jt * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * _g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    tb(e, undefined, c[tr], gn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = ub;
    e.translate(-Th * a, a * -Oq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.25, a * 53.953125);
    e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
    e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
    e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.25, a * 83.953125);
    e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
    e.closePath();
    tb(e, vl, c[dt], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * pl, a * Bk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    tb(e, undefined, c[Kr], a * Ka);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = ce;
    e.translate(-Rj * a, -mh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.25, a * 159.953125);
    e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
    e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
    e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
    e.closePath();
    tb(e, c[ds]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.25, a * 86.953125);
    e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
    e.closePath();
    tb(e, li, c[Mr], a * Il);
    return d;
  }
  function Yb(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 238;
    c.height = a * 230;
    d.translate(a * -93, a * -110 + a * 5);
    d.globalAlpha = 0.3;
    ab(d, a * 213.5, a * 256.75, a * 75);
    tb(d, b[5]);
    ab(d, a * 213.5, a * 175.75, a * 25);
    tb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Bb];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[_g];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * Zs;
    d.strokeStyle = b[_g];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Gt];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = Zs * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[gs];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = sj * a;
    d.strokeStyle = b[5];
    d.stroke();
    d.translate(Dh, -Bb);
    d.globalAlpha = ub;
    ab(d, a * 213.5, a * 256.75, a * 75);
    tb(d, b[vo]);
    ab(d, a * 213.5, a * 175.75, a * 25);
    tb(d, b[Fh]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.lineWidth = a * 10;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.lineWidth = Bq * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 219.5, a * 158.75);
    d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[yk];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 210.5, a * 160.75);
    d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
    d.closePath();
    d.fillStyle = b[0];
    d.fill();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Ea];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = hr * a;
    d.strokeStyle = b[Mo];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = Es * a;
    d.strokeStyle = b[lk];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = Vk * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = Yr * a;
    d.strokeStyle = b[3];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[jg];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 17;
    d.strokeStyle = b[Ik];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 156.5, a * 137.75);
    d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
    d.lineWidth = zn * a;
    d.strokeStyle = b[Wh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.5, a * 178.75);
    d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[_s];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130.5, a * 124.75);
    d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
    d.lineWidth = a * Ft;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 183.75);
    d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
    d.lineWidth = a * X;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107.5, a * 213.75);
    d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
    d.lineWidth = Ss * a;
    d.strokeStyle = b[Dh];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 212.5, a * 187.75);
    d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
    d.lineWidth = ob * a;
    d.strokeStyle = b[0];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 102.5, a * 258.75);
    d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[kq];
    d.stroke();
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.5, a * 192.75);
    d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
    d.lineWidth = a * 8;
    d.strokeStyle = b[0];
    d.stroke();
    ab(d, a * 213.5, a * 256.75, a * 70);
    tb(d, b[yk]);
    ab(d, a * 213.5, a * 175.75, Mg * a);
    tb(d, b[0]);
    ab(d, a * 222, a * 166, a * 5);
    d.fillStyle = b[pa];
    d.fill();
    ab(d, a * 205, a * 166, mh * a);
    d.fillStyle = b[xl];
    d.fill();
    ab(d, a * 206.2, a * 167, a * 2.5);
    d.fillStyle = b[Lb];
    d.fill();
    ab(d, a * 223.2, a * 167, a * 2.5);
    d.fillStyle = b[4];
    d.fill();
    d.save();
    d.translate(a * 213.5, a * 293.75);
    d.rotate(0.76);
    nb(d, a * -22, a * -21, a * 44, a * 42, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    d.save();
    d.translate(a * 212.5, a * 258.25);
    d.rotate(0.8);
    nb(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
    d.restore();
    d.fillStyle = b[1];
    d.fill();
    return c;
  }
  function Kb(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 195;
    var m = c * 190;
    var a = k / 2;
    var n = m / tg;
    i.width = k;
    i.height = m;
    var h = c * 10;
    var l = c * 35;
    var g = c * 150;
    var o = l / kn;
    var b = g / Wq;
    var p = c * 4;
    j.translate(a - c * gs, n - c * 5);
    j.rotate(-Math.PI / 1.25);
    j.globalAlpha = V;
    nb(j, -o, -b, l, g, h);
    tb(j, f[0], f[1], p);
    j.translate(yk, Wh);
    j.rotate(Math.PI / Gg);
    j.globalAlpha = ub;
    nb(j, -o, -b, l, g, h);
    tb(j, f[xb], f[1], p);
    j.translate(xb, Ca);
    nb(j, -o / Le, -b / ib, l / 2, g / Fh, h - 2);
    tb(j, f[js]);
    return i;
  }
  function Vb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 255);
    e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
    e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
    e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
    e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
    e.closePath();
    tb(e, c[0], c[1], a * ve);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 258);
    e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
    e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
    e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
    e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
    e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
    e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
    e.closePath();
    tb(e, c[2], c[1], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 323);
    e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
    e.closePath();
    tb(e, Qi, c[Br], zr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 210);
    e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
    e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
    e.closePath();
    tb(e, c[3], c[4], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 200);
    e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
    e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
    e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
    e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
    e.closePath();
    tb(e, c[Jt], c[1], Yq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97, a * 204);
    e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
    e.bezierCurveTo(a * 148, a * 250, a * 179, ak * a, a * 212, a * 262);
    e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
    e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
    e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
    e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
    e.closePath();
    tb(e, c[2], c[Cs], a * 14);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212, a * 260);
    e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
    e.closePath();
    tb(e, undefined, c[1], a * Ph);
    ab(e, a * 161, a * 201, a * 13);
    tb(e, c[5]);
    ab(e, a * 216, a * 205, a * 8.06225774829855);
    tb(e, c[_g]);
    ab(e, a * 216, a * 175, a * 6.708203932499369);
    tb(e, c[5]);
    ab(e, a * 271, a * 191, a * 5.0990195135927845);
    tb(e, c[5]);
    ab(e, a * 206, a * 180, a * 11.180339887498949);
    tb(e, c[Wn]);
    return d;
  }
  function Xb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 52;
    d.height = a * 65;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.833328247070312, a * 12.078125);
    e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
    e.closePath();
    tb(e, undefined, c[Fo], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 7.8333282470703125, a * 20.078125);
    e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
    e.closePath();
    tb(e, undefined, c[1], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 26.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
    e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
    e.closePath();
    tb(e, c[0], c[1], xl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.83332824707031, a * 8.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
    e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
    e.closePath();
    tb(e, c[0], c[1], $r * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.833328247070312, a * 39.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
    e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
    e.closePath();
    tb(e, c[0], c[jh], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.83332824707031, a * 23.078125);
    e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
    e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
    e.closePath();
    tb(e, c[0], c[yl], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.833328247070312, a * 24.078125);
    e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
    e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
    tb(e, Uq, c[Eg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38.83332824707031, a * 14.078125);
    e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
    tb(e, Ya, c[yl], a * 2);
    return d;
  }
  function Zb(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.translate(pl * a, lt * a);
    e.globalAlpha = b ? 0.5 : Ur;
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    gb(e, 7, a * 42.15447781671598, a * 10);
    e.restore();
    tb(e, c[Fj]);
    e.globalAlpha = 1;
    e.translate(a * -5, -Rj * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.32);
    gb(e, El, a * 42.15447781671598, a * Ke);
    e.restore();
    tb(e, c[1], c[2], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, U * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    gb(e, 7, a * 30.463092423455635, a * Fn);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -U, -Cj * a);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    e.rotate(0.28);
    gb(e, sb, a * 30.463092423455635, Fn * a);
    e.restore();
    tb(e, c[3], c[4], a * 4);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(_g * a, a * 5);
    ab(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    tb(e, c[_s]);
    e.globalAlpha = 1;
    e.translate(a * -pl, a * -5);
    ab(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
    tb(e, c[5], c[za], a * 4);
    return d;
  }
  function $b(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 173;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * mh, a * _g);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    gb(e, 7, a * 9.848857801796104, a * 5);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = Ur;
    e.translate(a * -5, a * -Th);
    e.save();
    e.translate(a * 86.25, a * 84.953125);
    gb(e, ph, a * 9.848857801796104, a * 5);
    e.restore();
    tb(e, c[8], c[ch], a * zg);
    return d;
  }
  function Nt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 75;
    var h = b * 55;
    e.width = g;
    e.height = h;
    f.translate(b * -30, b * -40);
    f.globalAlpha = js;
    f.beginPath();
    f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
    f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
    f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
    f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
    f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
    f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
    f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
    f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
    f.closePath();
    tb(f, d[Lg]);
    f.beginPath();
    f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
    f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
    f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
    f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
    f.closePath();
    tb(f, d[js]);
    f.beginPath();
    f.moveTo(b * 69, b * 65);
    f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
    f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
    f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
    tb(f, Pe, d[ce], 2);
    f.beginPath();
    f.moveTo(b * 50, b * 48);
    f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
    f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
    f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
    tb(f, d[2]);
    return e;
  }
  const Ot = Yl;
  function Pt(c, e, f) {
    var i = document.createElement("canvas");
    var j = i.getContext("2d");
    var k = c * 135;
    var m = c * 190;
    var a = k / 2;
    var n = m / tg;
    i.width = k;
    i.height = m;
    var h = c * rk;
    var l = c * 25;
    var g = c * 180;
    var o = l / Le;
    var b = g / 2;
    var p = c * 4;
    j.translate(a, n);
    j.rotate(-Math.PI / 5);
    j.globalAlpha = 1;
    nb(j, -o, -b, l, g, h);
    tb(j, f[0], f[1], p);
    j.translate(0, 0);
    j.rotate(Math.PI / 5);
    j.globalAlpha = 1;
    nb(j, -o, -b, l, g, h);
    tb(j, f[jj], f[1], p);
    return i;
  }
  function Qt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 145;
    var i = b * 145;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * 70;
    f.translate(a, j);
    f.globalAlpha = 0.4;
    ab(f, Kr, 0, h);
    tb(f, d[0]);
    h = b * 50;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    ab(f, 0, Kr, h);
    tb(f, d[0]);
    h = b * 35;
    f.translate(jj, Fj);
    f.globalAlpha = 0.8;
    ab(f, Kr, 0, h);
    tb(f, d[1]);
    h = b * Mg;
    f.translate(0, 0);
    f.globalAlpha = 0.8;
    ab(f, ko, 0, h);
    tb(f, d[kn]);
    return e;
  }
  function Rt(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 205;
    var i = b * 205;
    var a = g / 2;
    var j = i / xl;
    e.width = g;
    e.height = i;
    var h = dg * b;
    f.translate(a, j);
    f.globalAlpha = 1;
    ab(f, 0, 0, h);
    tb(f, d[0]);
    return e;
  }
  const St = Fg;
  function Tt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(_s, Xr * a);
    e.translate(a * -E, a * -da);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    tb(e, c[Jt]);
    e.globalAlpha = 1;
    e.translate(0, a * -8);
    e.translate(Va * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * u, a * 120, an * a);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * Wh, a * 73, a * Ea);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    tb(e, c[1], c[C], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, a * kh, a * 84, a * 12, a * 120, Fa * a);
    e.bezierCurveTo(a * 107, a * Kg, a * 96, a * 6, a * 85, a * 2);
    e.bezierCurveTo(a * 59, sn * a, a * 54, a * 7, a * 40, a * 17);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * 12, a * 89, jj * a, a * 73, a * 3);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    tb(e, Uq, c[2], Ka * a);
    ab(e, a * 18, a * 38, a * 14.866068747318506);
    tb(e, c[4], c[Oq], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    tb(e, c[Br], c[yg], In * a);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 74);
    e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
    e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
    e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
    e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
    e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
    e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
    e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
    e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
    e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
    e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
    e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
    e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
    e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
    e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
    e.closePath();
    tb(e, c[za], c[Va], a * 6);
    return d;
  }
  function Ut(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 370;
    var i = b * 370;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    var h = b * 180;
    f.globalAlpha = 0.2;
    ab(f, a, j, h);
    tb(f, d[Wh]);
    return e;
  }
  function Vt(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 155;
    d.height = a * 127;
    e.globalAlpha = 0.5;
    e.translate(yk, a * 8);
    e.translate(a * -7, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    tb(e, c[Fj]);
    e.globalAlpha = Cs;
    e.translate(0, a * -8);
    e.translate(wq * a, Gh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, Gh * a, a * 120, a * 16);
    e.bezierCurveTo(a * 106, a * Da, a * 89, a * Ol, a * 73, a * sn);
    e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
    e.closePath();
    tb(e, c[yl], c[yg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 41);
    e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
    e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
    e.bezierCurveTo(a * 67, ng * a, a * 84, a * 12, a * 120, a * 16);
    e.bezierCurveTo(a * 107, a * 11, a * 96, a * Vo, a * 85, a * ij);
    e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, hr * a);
    e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
    e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 28);
    e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
    e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
    e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
    e.bezierCurveTo(a * 151, a * 42, a * 132, a * Tl, a * 120, a * qh);
    e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, Vl * a);
    e.bezierCurveTo(a * 51, Bk * a, a * 36, Mh * a, a * 25, a * 28);
    e.closePath();
    tb(e, jr, c[$r], In * a);
    ab(e, a * 18, a * 38, a * 14.866068747318506);
    tb(e, c[4], c[5], Rh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 30);
    e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
    e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
    tb(e, c[Br], c[2], a * 4);
    e.translate(-He * a, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 68);
    e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
    e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
    e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
    e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
    e.bezierCurveTo(a * Yk, a * 92, a * 31, a * 71, a * 54, a * 69);
    e.closePath();
    tb(e, c[gn], c[5], a * 4);
    return d;
  }
  function Xt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 32;
    var a = Ai * b;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2 + b * 10);
    e.globalAlpha = 0.5;
    ab(e, Ko, 0, h);
    tb(e, c[0], c[kq]);
    e.translate(ko, -yb * b);
    e.globalAlpha = js;
    ab(e, Jt, 0, h);
    tb(e, c[1], c[2], a);
    return d;
  }
  const Yt = Ur;
  function Zt(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 40;
    var g = b * 40;
    var h = b * 16;
    var a = qo * b;
    d.width = f;
    d.height = g;
    e.translate(f / Qs, g / Qs);
    e.globalAlpha = 1;
    ab(e, Ol, jj, h);
    tb(e, c[0], c[1], a);
    return d;
  }
  const $t = jj;
  const _t = Qs;
  function au(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 220;
    var g = b * 220;
    var h = b * 16;
    d.width = f;
    d.height = g;
    e.translate(f / 2, g / 2);
    e.globalAlpha = 0.5;
    ab(e, Wh, kq, h);
    tb(e, c[0]);
    e.globalAlpha = yl;
    return d;
  }
  function bu(c, d, e, i) {
    var j = document.createElement("canvas");
    var k = j.getContext("2d");
    var m = c * 210;
    var a = c * 205;
    var n = c * 30;
    var h = fq * c;
    var l = c * 200;
    var g = c * 180;
    var o = l / 2;
    var b = g / xl;
    j.width = m;
    j.height = a;
    j.width = c * 419;
    j.height = c * 412;
    if (V == i) {
      k.save();
      k.translate(wh * c, jj * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
      k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
      tb(k, Uq, d[4], sn * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
      k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
      tb(k, undefined, d[f], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
      k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
      tb(k, Nl, d[In], lk * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
      k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
      tb(k, undefined, d[4], Za * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
      k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
      tb(k, undefined, d[f], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
      k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
      k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
      k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
      k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
      k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
      k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
      tb(k, undefined, d[4], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
      k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
      k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
      k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
      k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
      tb(k, li, d[mj], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
      k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
      k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
      k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
      k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
      k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
      k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
      tb(k, undefined, d[In], c * ta);
      k.restore();
    } else if (i == 2) {
      k.save();
      k.translate(c * 130, c * 35);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
      k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
      tb(k, undefined, d[4], c * Fh);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
      k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
      tb(k, undefined, d[oj], c * Ea);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
      k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
      tb(k, undefined, d[oj], c * 3);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
      tb(k, undefined, d[Il], c * Mo);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
      tb(k, undefined, d[4], c * Gg);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
      k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
      k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
      k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
      k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
      k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
      tb(k, undefined, d[4], lk * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
      k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
      k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
      k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
      k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
      k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
      tb(k, undefined, d[4], Fh * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
      k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
      k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
      k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
      k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
      k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
      tb(k, Uq, d[Yn], c * 3);
      k.restore();
    }
    k.translate(j.width / 2, j.height / kn);
    if (!i) {
      k.globalAlpha = 0.5;
      nb(k, -o, -b, l, g + h, n);
      tb(k, d[0]);
      if (e) {
        k.rotate(Math.PI);
      }
      k.globalAlpha = 1;
      nb(k, -o, -b, l, g, n);
      tb(k, d[1], d[2], 4);
      k.globalAlpha = wg;
      nb(k, c * 35 - o, ns * c - b, l - c * 50, g - c * 50, n - Ke * c);
      tb(k, d[3]);
    }
    if (i == 3) {
      k.translate(-j.width / yg, -j.height / Le);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      tb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      tb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      tb(k, d[uh]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      tb(k, d[Gt]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      tb(k, d[5]);
      k.translate(c * 5, c * -55);
      k.translate(c * -Gl, c * 15);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      tb(k, d[_g]);
    } else if (i == 4) {
      k.translate(-j.width / Wq, -j.height / Uh);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 30, c * 167);
      k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
      k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * qr, c * 179);
      k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
      k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
      k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
      k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
      k.closePath();
      tb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 26, c * 145);
      k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
      k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
      k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
      k.closePath();
      tb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 13, c * 193);
      k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
      k.bezierCurveTo(c * qj, c * 208, c * 7, c * 202, c * 13, c * 193);
      k.closePath();
      tb(k, d[In]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 121, c * 190);
      k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
      k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
      k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
      k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
      k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
      k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
      k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
      k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
      k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
      k.closePath();
      tb(k, d[Dt]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 335, c * 196);
      k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
      k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
      k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
      k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
      k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
      k.closePath();
      tb(k, d[qo]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 349, c * 212);
      k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
      k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
      k.closePath();
      tb(k, d[4]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 46, c * 165);
      k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
      k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
      k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
      k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
      k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
      k.closePath();
      tb(k, d[bn]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 219, c * 144);
      k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
      k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
      k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
      k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
      k.closePath();
      tb(k, d[Gl]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 123, c * 214);
      k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
      k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
      k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
      k.closePath();
      tb(k, d[5]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 257, c * 199);
      k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
      k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
      k.closePath();
      tb(k, d[5]);
      k.translate(c * -5, c * 55);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 186, c * 123);
      k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
      k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
      k.closePath();
      tb(k, d[Bk]);
      k.translate(gs * c, c * -55);
      k.translate(c * -5, Ns * c);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 171, c * 241);
      k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
      k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
      k.closePath();
      tb(k, d[Rj]);
      k.beginPath();
      k.lineCap = "round";
      k.lineJoin = "round";
      k.moveTo(c * 367, c * 164);
      k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
      k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
      k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
      k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
      k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
      k.closePath();
      tb(k, d[jt]);
    }
    return j;
  }
  const cu = xl;
  function du(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(Fl * a, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    nb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    tb(e, c[Ol]);
    ab(e, a * 121, a * 480, a * 20.396078054371138);
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(-_j * a, -da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
    e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
    e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
    e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
    e.closePath();
    tb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 129.5, a * 424);
    e.rotate(0.16);
    nb(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
    e.restore();
    tb(e, c[4], c[Oq], a * 12.5);
    ab(e, a * 121, a * 480, a * 20.396078054371138);
    tb(e, c[4], c[uh], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 311);
    e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, qr * a, a * 337);
    e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
    e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
    e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
    e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
    e.closePath();
    tb(e, c[Br], c[ib], a * 12.5);
    return d;
  }
  function eu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 283;
    c.height = a * 224;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 100, a * 33);
    d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    tb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 181, a * 32);
    d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    tb(d, undefined, b[Dh], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 225, a * 52);
    d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    tb(d, undefined, b[kq], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 34, a * 134);
    d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    tb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 249, a * 135);
    d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    tb(d, undefined, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 56, a * 50);
    d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    tb(d, lq, b[0], a * 40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 55);
    d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
    d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
    d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
    d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
    d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
    d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
    d.closePath();
    tb(d, b[Kr]);
    return c;
  }
  function fu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 131;
    d.height = a * 121;
    e.translate(0, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(Yr * a, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * vh, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = jh;
    e.translate(xb, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 59);
    e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
    e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
    e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
    e.bezierCurveTo(a * sa, a * 61, a * 25, a * 30, a * 51, a * 21);
    e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
    e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
    e.closePath();
    tb(e, c[Ur], c[yg], wh * a);
    return d;
  }
  function gu(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 121;
    e.height = a * 130;
    f.translate(Ko, a * 20);
    if (c == 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(Mr * a, a * 23);
      f.bezierCurveTo(a * 6, a * 46, a * 6, a * 46, a * 6, a * 69);
      f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
      f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
      f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, Mo * a);
      f.bezierCurveTo(a * 47, a * 14, a * 47, a * 14, a * 38, a * 25);
      f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * zk, a * 23);
      f.closePath();
      tb(f, On, b[3], a * Qh);
    }
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(Vo * a, a * 23);
    f.bezierCurveTo(a * 6, a * 46, a * 6, a * 46, a * 6, a * 69);
    f.bezierCurveTo(a * 21, a * 69, a * 21, a * 69, a * 36, a * 69);
    f.bezierCurveTo(a * 45.5, a * 78.5, a * 45.5, a * 78.5, a * 55, a * 88);
    f.bezierCurveTo(a * 55.5, a * 45.5, a * 55.5, a * 45.5, a * 56, a * 3);
    f.bezierCurveTo(a * 47, a * 14, a * 47, a * Ph, a * 38, a * 25);
    f.bezierCurveTo(a * 23, a * 25, a * 23, a * 25, a * ol, a * 23);
    f.closePath();
    tb(f, b[Fo], b[ij], a * Yn);
    if (d == 1) {
      f.translate(kq, a * U);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      tb(f, On, b[0], a * 10);
      f.translate(3, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, Vk * a);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      tb(f, undefined, b[0], a * 10);
      f.translate(lk, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, a * 8);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      tb(f, gh, b[$t], a * Hr);
      if (c == js) {
        f.translate(a * -6, a * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 67, a * 30);
        f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
        tb(f, undefined, b[3], a * 18);
        f.translate(3, jj * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 70, a * Lj);
        f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
        tb(f, undefined, b[3], a * N);
        f.translate(3, Fj * a);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 76, a * 8);
        f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
        tb(f, lq, b[Ea], a * 18);
        f.translate(-6, a * 0);
      } else {
        f.translate(a * -6, a * -5);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 67, a * 30);
      f.bezierCurveTo(a * 73, a * 47, a * 69, a * 45, a * 67, a * 58);
      tb(f, jr, b[2], a * 10);
      f.translate(Ea, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 70, Zs * a);
      f.bezierCurveTo(a * 83, a * 45, a * 76, a * 55, a * 70, a * 69);
      tb(f, undefined, b[2], a * 10);
      f.translate(vo, a * 0);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 76, Ft * a);
      f.bezierCurveTo(a * 88, a * 31, a * 89, a * 55, a * 76, a * 79);
      tb(f, undefined, b[2], a * wh);
    } else {
      if (c == Fo) {
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        tb(f, undefined, b[vo], a * 18);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        tb(f, Nl, b[_i], a * Tq);
      } else {
        f.translate(0, a * -Th);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 108, a * 27);
        f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
        f.closePath();
        tb(f, undefined, b[0], a * 7);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(a * 79, a * 30);
        f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
        f.closePath();
        tb(f, undefined, b[Fj], E * a);
        f.translate(tr, a * pl);
      }
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 108, a * 27);
      f.bezierCurveTo(a * 94, a * 45.5, a * 94, a * 45.5, a * 80, a * 64);
      f.closePath();
      tb(f, Qi, b[2], a * Ba);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 79, a * 30);
      f.bezierCurveTo(a * 93, a * 47, a * 93, a * 47, a * 107, a * 64);
      f.closePath();
      tb(f, undefined, b[2], Ij * a);
    }
    return e;
  }
  function hu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 321;
    d.height = a * 284;
    e.translate(a * Yi, a * 30);
    e.translate(Th * a, a * Fg);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[_s]);
    e.globalAlpha = ce;
    e.translate(-mh * a, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(il * a, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[1], c[Xn], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    tb(e, c[Za]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    tb(e, undefined, c[4], a * 4);
    e.translate(a * -100, a * -30);
    e.translate(a * 10, a * 70);
    e.translate(a * 5, wh * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * Jr, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[jj]);
    e.globalAlpha = 1;
    e.translate(-U * a, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[Yt], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    tb(e, c[Wq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    tb(e, D, c[th], a * f);
    e.translate(a * _j, a * -80);
    e.translate(a * 5, St * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = Eg;
    e.translate(-Bk * a, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58, a * 33);
    e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
    e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
    e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
    e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
    e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
    e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
    e.closePath();
    tb(e, c[1], c[_l], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167, a * 120);
    e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
    e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
    e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 64);
    e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
    e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
    e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
    e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 141);
    e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
    e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
    e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
    e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
    e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
    e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
    tb(e, undefined, c[Lb], Ai * a);
    return d;
  }
  function ju(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 283;
    e.height = a * 224;
    f.translate(Mn, a * Ag);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 100, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    f.closePath();
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    tb(f, c[0]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    tb(f, c[$t]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    tb(f, c[rh]);
    f.translate(Kr, -kh * a);
    f.globalAlpha = 1;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(A * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    tb(f, Lk, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    tb(f, undefined, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    tb(f, Rg, c[2], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    tb(f, Tg, c[xl], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    tb(f, La, c[Ok], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    tb(f, vl, c[Ok], a * 40);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 93, a * 55);
    f.bezierCurveTo(a * 127, a * 27, a * 195, a * 42, a * 213, a * 78);
    f.bezierCurveTo(a * 254, a * 134, a * 226, a * 198, a * 153, a * 197);
    f.bezierCurveTo(a * 59, a * 204, a * 56, a * 158, a * 51, a * 115);
    f.bezierCurveTo(a * 50, a * 93, a * 81, a * 62, a * 90, a * 57);
    f.closePath();
    tb(f, c[1], c[_t], a * 10);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(sg * a, a * 33);
    f.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
    tb(f, Rg, c[ub], a * Gh);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 181, a * 32);
    f.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
    tb(f, kj, c[jh], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 225, a * 52);
    f.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
    tb(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 34, a * 134);
    f.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
    tb(f, undefined, c[1], Gh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 249, a * 135);
    f.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
    tb(f, undefined, c[1], a * 20);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 56, a * 50);
    f.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
    tb(f, undefined, c[1], a * 20);
    ab(f, a * 101, a * 155, a * 20.591260281974);
    tb(f, c[lk]);
    ab(f, a * 180, a * 155, a * 20.591260281974);
    tb(f, c[fa]);
    ab(f, a * 95, a * 148, a * 7.211102550927978);
    tb(f, c[4]);
    ab(f, a * 173, a * 148, a * 7.211102550927978);
    tb(f, c[Dt]);
    if (d === 1) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 191, a * 107);
      f.bezierCurveTo(a * 180, a * 104, a * 175, a * 101, a * 180, a * 95);
      f.bezierCurveTo(a * 180, a * 95, a * 181, a * 99, a * 188, a * 103);
      f.bezierCurveTo(a * 191, a * 101, a * 191, a * 95, a * 190, a * 91);
      f.bezierCurveTo(a * 190, a * 91, a * 196, a * 89, a * 195, a * 99);
      f.closePath();
      tb(f, c[Wq]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 206, a * 98);
      f.bezierCurveTo(a * 203, a * 95, a * 200, a * 93, a * 198, a * 101);
      f.bezierCurveTo(a * 194, a * 109, a * 193, a * 109, a * 196, a * 110);
      f.bezierCurveTo(a * 206, a * 115, a * 209, a * 114, a * 211, a * 111);
      f.bezierCurveTo(a * 211, a * 106, a * 208, a * 108, a * 203, a * 108);
      f.bezierCurveTo(a * 193, a * 107, a * 204, a * 101, a * 206, a * 99);
      f.closePath();
      tb(f, c[2]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 172, a * 111);
      f.bezierCurveTo(a * 172, a * 106, a * 174, a * 105, a * 185, a * 109);
      f.bezierCurveTo(a * 190, a * 109, a * 189, a * 114, a * 185, a * 120);
      f.bezierCurveTo(a * 181, a * 125, a * 180, a * 126, a * 176, a * 122);
      f.bezierCurveTo(a * 182, a * 119, a * 187, a * 110, a * 182, a * 112);
      f.closePath();
      tb(f, c[yh]);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 202, a * 125);
      f.bezierCurveTo(a * 197, a * 117, a * 193, a * 116, a * 193, a * 120);
      f.bezierCurveTo(a * 192.5, a * 124.5, a * 192.5, a * 124.5, a * 192, a * 129);
      f.bezierCurveTo(a * 188, a * 129, a * 187, a * 124, a * 189, a * 120);
      f.bezierCurveTo(a * 191, a * 110, a * 192, a * 110, a * 200, a * 116);
      f.bezierCurveTo(a * 208, a * 120, a * 207, a * 123, a * 202, a * 125);
      f.closePath();
      tb(f, c[tg]);
    }
    return e;
  }
  function ku(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 424;
    d.height = a * 788;
    e.translate(a * 25, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    nb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    tb(e, c[Mn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    tb(e, c[yk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    tb(e, c[yk]);
    ab(e, a * 204, a * 693, a * 36.013886210738214);
    tb(e, c[Mn]);
    ab(e, a * 105, a * 518, a * 30);
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    tb(e, c[Ol]);
    e.translate(a * -25, a * -25);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 193.5, a * 602.5);
    e.rotate(-0.12);
    nb(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
    e.restore();
    tb(e, c[1], c[C], ge * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 519);
    e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
    e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
    e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
    e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
    e.closePath();
    tb(e, c[Kk], c[Il], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 119);
    e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
    e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
    e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
    e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 518);
    e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
    e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
    e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
    e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
    e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
    e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
    e.closePath();
    tb(e, c[6], c[Rh], Pl * a);
    ab(e, a * 204, a * 693, a * 36.013886210738214);
    tb(e, c[6], c[4], zs * a);
    ab(e, a * 105, a * 518, a * 30);
    tb(e, c[Fq], c[Rh], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 171, a * 535);
    e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
    e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
    e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
    e.closePath();
    tb(e, c[hi]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 244, a * 669);
    e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
    e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
    e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
    e.closePath();
    tb(e, c[Ll]);
    ab(e, a * 204, a * 693, a * 17.029386365926403);
    tb(e, c[7]);
    ab(e, a * 106, a * 518, a * 12);
    tb(e, c[He]);
    return d;
  }
  function lu(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = (n = c * 450) / 2;
    var k = (o = c * 145) / 2;
    var a = bb * c;
    var m = c * 300;
    var h = c * 30;
    var l = m / cu;
    var g = h / _t;
    if (e) {
      var n = c * 145;
      var o = c * 450;
      f.width = n;
      f.height = o;
      i.rotate(Math.PI / Le);
      i.save();
      i.globalAlpha = 0.5;
      nb(i, Oj * c, c * -110, m, h, a);
      tb(i, d[rh]);
      i.translate(c * 178, c * -98);
      nb(i, -l, -g - ss * c, c * Yi, c * 100, a);
      tb(i, d[Lg]);
      i.translate(c * -50, lt * c);
      nb(i, c * 220, c * -15, c * 90, c * 90, a);
      tb(i, d[_s]);
      i.restore();
      i.save();
      i.globalAlpha = V;
      i.translate(c * 250, c * -63);
      nb(i, -l - c * 20, -g, m, h, a);
      tb(i, d[Cs], d[2], 4);
      i.translate(c * -70, c * -40);
      nb(i, -l - c * aq, -g, fh * c, c * 100, a);
      tb(i, d[Ea], d[4], 4);
      i.translate(c * -70, c * 15);
      nb(i, c * 220, c * -22, c * 90, c * 90, a);
      tb(i, d[Ea], d[4], 4);
      nb(i, c * 230, c * -12, c * 55, c * 55, a);
      tb(i, d[Cj]);
      i.translate(c * -70, Jt);
      nb(i, c * -15, c * -2, c * 60, c * 60, a);
      tb(i, d[uh]);
      i.restore();
    } else {
      f.width = n;
      f.height = o;
      i.save();
      i.globalAlpha = 0.5;
      i.translate(j, k + c * 10);
      nb(i, -l, -g, m, h, a);
      tb(i, d[0]);
      i.translate(c * -65, c * -25);
      nb(i, -l, -g - _h * c, c * 100, c * wa, $n * c);
      tb(i, d[$t]);
      i.translate(c * -35, c * -5);
      nb(i, c * 220, -kh * c, c * 90, c * 90, c * 15);
      tb(i, d[yk]);
      i.restore();
      i.save();
      i.globalAlpha = 1;
      i.translate(c * 240, c * 70);
      nb(i, -l, -g, m, h, a);
      tb(i, d[Eg], d[2], 4);
      i.translate(c * -60, c * -40);
      nb(i, -l - c * 20, -g, c * qr, rs * c, c * 15);
      tb(i, d[3], d[4], 4);
      i.translate(c * -55, bb * c);
      nb(i, c * 220, c * -22, c * 90, c * 90, c * 15);
      tb(i, d[lk], d[4], 4);
      nb(i, c * 240, -Mq * c, c * 55, c * 55, c * 12);
      tb(i, d[Cj]);
      i.translate(c * 45, c * 0);
      nb(i, c * -145, c * -yh, c * 60, c * 60, c * 12);
      tb(i, d[5]);
      i.restore();
    }
    return f;
  }
  function mu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 112;
    e.translate(yk, a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Jh, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, qh * a, a * 39, a * 16, a * 44);
    e.closePath();
    tb(e, c[jj]);
    e.globalAlpha = yl;
    e.translate(0, a * -ng);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ak * a, a * 44);
    e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
    e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
    e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
    e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
    e.bezierCurveTo(a * 65, a * mr, a * 42, a * sk, a * 34, a * 21);
    e.bezierCurveTo(a * 22, a * 27, a * Fa, a * 39, a * 16, a * 44);
    e.closePath();
    tb(e, c[V], c[2], a * xo);
    return d;
  }
  function nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Mg * a, ql * a);
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    nb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    tb(e, c[kq]);
    e.globalAlpha = er;
    e.translate(a * -20, a * -20);
    e.save();
    e.translate(a * 132, a * 423);
    e.rotate(0.16);
    nb(e, a * -14, a * -61, a * 28, a * 122, a * 10);
    e.restore();
    tb(e, c[4], c[mh], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(me * a, a * 344);
    e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
    e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
    e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
    e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
    e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
    e.closePath();
    tb(e, c[wg], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 75, a * 328);
    e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
    e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
    e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
    e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
    e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
    e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
    e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
    e.closePath();
    tb(e, c[yl], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 121, a * 332);
    e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
    e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
    e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
    e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
    e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 463);
    e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
    e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
    e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
    e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
    e.closePath();
    tb(e, c[1], c[2], a * 12.5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 346);
    e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
    e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
    e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
    e.closePath();
    tb(e, c[cl]);
    return d;
  }
  function ou(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 469;
    e.globalAlpha = b ? 0.5 : jh;
    e.translate(a * 20, a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * mh);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    tb(e, c[_s]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    tb(e, c[_s]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    tb(e, c[ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
    e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * Ze, a * 313);
    e.closePath();
    tb(e, c[_s]);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    nb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
    e.restore();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = dn;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, Yg * a);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    tb(e, c[yl], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 31);
    e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
    e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
    e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
    e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
    e.closePath();
    tb(e, c[ta]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 30);
    e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
    e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, Vg * a);
    e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, Bk * a);
    e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
    e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
    e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
    e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
    e.closePath();
    tb(e, Z, c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 328);
    e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
    e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
    e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
    e.closePath();
    tb(e, c[4], c[5], a * ds);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 302);
    e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
    e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
    e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, ds * a, a * 333);
    e.bezierCurveTo(a * fg, a * 323, a * 8, a * 323, Ze * a, a * 313);
    e.closePath();
    tb(e, c[In], c[Bb], a * 7);
    e.save();
    e.translate(a * 51.5, a * 440.5);
    e.rotate(0.2);
    nb(e, a * -20.5, a * -18.5, a * 41, a * 37, a * lj);
    e.restore();
    tb(e, c[xt], c[Bb], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 316);
    e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
    e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
    e.closePath();
    tb(e, c[hn]);
    return d;
  }
  function pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Br;
    e.translate(a * 20, Tl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    nb(e, a * -14, a * -56.5, a * 28, a * 113, a * fg);
    e.restore();
    tb(e, c[Wh]);
    ab(e, a * 122, a * 480, a * 18.439088914585774);
    tb(e, c[yk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = bt;
    e.translate(-fq * a, -Ye * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 351);
    e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
    e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
    e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
    e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
    e.closePath();
    tb(e, c[1], c[yh], a * 12.5);
    e.save();
    e.translate(a * 131, a * 425.5);
    e.rotate(0.16);
    nb(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
    e.restore();
    tb(e, c[Yn], c[lt], a * 12.5);
    ab(e, a * 122, a * 480, a * 18.439088914585774);
    tb(e, c[qo], c[Ca], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 371);
    e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
    e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
    e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
    e.closePath();
    tb(e, c[4], c[uh], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 345);
    e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
    e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
    e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
    e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
    e.closePath();
    tb(e, c[ta]);
    return d;
  }
  function qu(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = Math.max(b.width, a.width);
    var f = Math.max(b.height, a.height);
    c.width = e;
    c.height = f;
    d.drawImage(a, (e - a.width) / yg, (f - a.height) / Wq);
    d.drawImage(b, (e - b.width) / eh, (f - b.height) / C);
    return c;
  }
  function ru(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = qr * a;
    d.height = a * 250;
    e.translate(a * -135, a * -75);
    e.globalAlpha = b ? 0.8 : js;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    tb(e, c[0]);
    ab(e, a * 160.5, a * 243.03125, a * 7);
    tb(e, c[_s]);
    ab(e, a * 227.5, a * 242.03125, a * 7);
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    tb(e, c[0], c[0], a * 5);
    ab(e, a * 194, a * 298, a * 9);
    tb(e, c[ko], c[0], Cj * a);
    e.globalAlpha = 1;
    e.translate(-Pr * a, Dl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 178.5, a * 238.03125);
    e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
    e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
    e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
    e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
    e.closePath();
    tb(e, c[B], c[4], Ca * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155.5, a * 239.03125);
    e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
    e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
    e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
    e.closePath();
    tb(e, c[1], c[Ok], a * 5);
    ab(e, a * 160.5, a * 243.03125, a * wq);
    tb(e, c[1], c[_l], Cj * a);
    ab(e, a * 227.5, a * 242.03125, a * 7);
    tb(e, c[er], c[_l], a * Wn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.5, a * 253.03125);
    e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
    e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
    e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
    e.closePath();
    tb(e, c[1], c[_t], a * 7);
    ab(e, a * 194, a * 298, Ze * a);
    tb(e, c[Ur], c[eh], ds * a);
    return d;
  }
  function su(c, d, e) {
    var f = document.createElement("canvas");
    var i = f.getContext("2d");
    var j = c * 105;
    var k = c * 125;
    var a = c * 4;
    var m = c * 10;
    var h = c * Bk;
    var l = c * Pr;
    var g = c * 110;
    var n = l / 2;
    var b = g / yh;
    f.width = j;
    f.height = k;
    i.save();
    i.globalAlpha = d ? 0.5 : Eg;
    i.translate(j / 2 + c * X, k / C + h);
    nb(i, -n, -b, l, g, m);
    tb(i, d ? e[0] : e[1]);
    i.translate(c * -130 + h, c * -128 + h);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    tb(i, e[2]);
    i.restore();
    i.translate(j / 2 + 8, k / eh);
    i.globalAlpha = 1;
    nb(i, -n, -b, l, g, m);
    tb(i, e[3], e[4], a);
    i.translate(c * -130, c * -125);
    i.beginPath();
    i.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
    i.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
    i.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
    i.closePath();
    tb(i, e[5], e[_], a);
    return f;
  }
  function tu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 290;
    d.height = a * 525;
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(Wr * a, a * da);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    nb(e, a * -14, a * -53, a * 28, a * 106, a * 10);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    gb(e, gn, a * 26.476404589747453, a * ll);
    e.restore();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    tb(e, c[Mn]);
    e.globalAlpha = 1;
    e.translate(a * -20, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112, a * 356);
    e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
    e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
    e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
    e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
    e.closePath();
    tb(e, c[1], c[2], a * 12.5);
    e.save();
    e.translate(a * 131, a * 423);
    e.rotate(0.16);
    nb(e, a * -14, a * -53, a * 28, a * 106, a * Fs);
    e.restore();
    tb(e, c[4], c[Wn], a * 12.5);
    e.save();
    e.translate(a * 122, a * 480);
    e.rotate(1.72);
    gb(e, th, a * 26.476404589747453, Fg * a);
    e.restore();
    tb(e, c[ce], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 387);
    e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
    e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
    e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
    e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
    e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
    e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
    e.closePath();
    tb(e, c[ub], c[2], a * 12.5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 129, a * 338);
    e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
    e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
    e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
    e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
    e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
    e.closePath();
    tb(e, c[lk]);
    return d;
  }
  function uu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 154;
    d.height = a * 261;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Wh, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * Ys, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, -zq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125, a * 69);
    e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
    e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
    e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
    e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
    e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
    e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
    e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
    e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
    e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
    e.closePath();
    tb(e, c[1], c[2], oj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 43);
    e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
    e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
    e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
    e.closePath();
    tb(e, c[_i]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45, a * 29);
    e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
    e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
    e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
    e.bezierCurveTo(a * 59, a * Vj, a * 51, a * 23, a * 45, a * 30);
    e.closePath();
    tb(e, c[Fh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 56);
    e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
    e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
    e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
    e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 81);
    e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
    e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
    e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
    e.closePath();
    tb(e, c[_i]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 124);
    e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
    e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
    e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
    e.closePath();
    tb(e, c[vg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 170);
    e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
    e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
    e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 208);
    e.bezierCurveTo(a * fh, a * 209, a * 115, a * 205, a * 122, a * 193);
    e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
    e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
    e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
    e.closePath();
    tb(e, c[vo]);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 81);
    e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
    e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
    e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
    e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
    e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
    e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
    e.bezierCurveTo(Bs * a, a * 240, a * 90, a * 233, a * 90, a * 224);
    e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
    e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
    e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
    e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = ub;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 123);
    e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
    e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
    e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
    e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
    e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
    e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
    e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
    e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
    e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * Qk, a * 167);
    e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
    e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
    e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
    e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
    e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
    e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
    e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
    e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
    e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
    e.closePath();
    tb(e, c[oj], c[5], a * 4);
    ab(e, a * 107, a * 152, a * 9);
    tb(e, c[bg]);
    ab(e, a * 105, a * 173, a * 9);
    tb(e, c[6]);
    ab(e, a * 87, a * 161, a * 9);
    tb(e, c[6]);
    ab(e, a * 106, a * 147, a * 4);
    tb(e, c[7]);
    ab(e, a * 104, a * 167, Ka * a);
    tb(e, c[7]);
    ab(e, a * 86, a * 154, a * 4);
    tb(e, c[ds]);
    return d;
  }
  const vu = Gt;
  function wu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 350;
    d.height = a * 140;
    e.translate(a * -50, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.5, a * 222.0625);
    e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
    e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
    e.closePath();
    tb(e, c[kq], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.5, a * 241.0625);
    e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
    e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
    e.closePath();
    tb(e, c[Fj], c[1], a * fg);
    ab(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
    tb(e, c[2]);
    ab(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
    tb(e, c[2]);
    ab(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
    tb(e, c[ib]);
    ab(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
    tb(e, c[2]);
    ab(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
    tb(e, c[yg]);
    ab(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151.5, a * 212.0625);
    e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
    e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
    e.closePath();
    tb(e, c[B], c[mj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 209.0625);
    e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
    e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
    e.closePath();
    tb(e, c[lk], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188.5, a * 183.0625);
    e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
    e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
    e.closePath();
    tb(e, c[Za], c[4], a * bn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 261.5, a * 202.0625);
    e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
    e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
    e.closePath();
    tb(e, c[Vl], c[4], a * f);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 240.5, a * 231.0625);
    e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
    e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
    e.closePath();
    tb(e, c[3], c[kr], jt * a);
    return d;
  }
  const xu = Fq;
  function yu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 118;
    d.height = a * 114;
    e.translate(Mn, a * Pr);
    ab(e, a * 42, a * 43, a * 24.758836806279895);
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * Yi, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    tb(e, c[0]);
    e.translate(rh, a * -10);
    ab(e, a * 42, a * 43, a * 24.758836806279895);
    tb(e, c[Aj], c[2], uh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 90);
    e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
    e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
    e.closePath();
    tb(e, c[1], c[ib], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 45);
    e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
    e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
    e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
    e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
    e.closePath();
    tb(e, c[yl], c[cu], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 16);
    e.bezierCurveTo(a * 55, nq * a, a * 54, a * 20, a * 55, a * 22);
    e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
    e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
    e.bezierCurveTo(a * 45, Sg * a, a * 48, a * ah, a * 52, Jo * a);
    e.closePath();
    tb(e, c[3], c[Il], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 30);
    e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
    e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
    e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
    e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
    e.closePath();
    tb(e, c[sn], c[oj], a * gs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 21);
    e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
    e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
    e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
    e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
    e.closePath();
    tb(e, c[vo], c[oj], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Ta, a * 36);
    e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
    e.bezierCurveTo(a * 12, a * 39, Ne * a, a * 38, zh * a, a * 37);
    e.closePath();
    tb(e, c[lk], c[mj], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 34);
    e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
    e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
    e.closePath();
    tb(e, c[3], c[Ka], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 35);
    e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
    e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
    e.closePath();
    tb(e, c[B], c[Il], Gt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 46);
    e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
    e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
    e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
    e.closePath();
    tb(e, c[3], c[gn], Bb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 42);
    e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
    e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
    e.closePath();
    tb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 57);
    e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
    e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
    e.closePath();
    tb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * _j, a * 52);
    e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
    e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
    e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
    e.closePath();
    tb(e, c[3], c[Ai], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 61);
    e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
    e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
    e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
    e.closePath();
    tb(e, c[3], c[kr], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 88, a * 45);
    e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
    e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
    e.closePath();
    tb(e, c[fa], c[4], a * pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 53);
    e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
    e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
    e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
    e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
    e.closePath();
    tb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 92, a * 71);
    e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
    e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
    e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
    e.closePath();
    tb(e, c[jg], c[4], a * Ca);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 82);
    e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
    e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
    e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
    e.closePath();
    tb(e, c[cl], c[4], a * _g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 72);
    e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
    e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
    e.closePath();
    tb(e, c[3], c[4], a * Bb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 86);
    e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
    e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
    e.closePath();
    tb(e, c[vg], c[f], Wn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 46);
    e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
    e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
    e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
    e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
    e.closePath();
    tb(e, c[uh], c[6], Bb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 76, a * 60);
    e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
    e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
    e.closePath();
    tb(e, c[tt], c[8], a * 5);
    return d;
  }
  function zu(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    var i = b * 220;
    var a = b * 220;
    var j = b * 100;
    var h = j / Rh;
    f.width = i;
    f.height = a;
    g.translate(i / $r, a / 2);
    g.globalAlpha = c ? 0.5 : 1;
    if (!c) {
      g.translate(b * 0, b * -Ss);
    }
    gb(g, 7, j, h);
    tb(g, c ? d[0] : d[V]);
    g.globalAlpha = ik;
    if (e == Ol) {
      gb(g, ol, j * 0.65, h * 0.65);
      tb(g, d[2]);
    } else if (jh == e) {
      g.translate(b * 20, b * 20);
      gb(g, dt, j * 0.45, h * 0.4);
      tb(g, d[yg]);
    }
    return f;
  }
  function Au(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 120;
    var i = b * 150;
    var a = b * 60;
    var j = a / kr;
    var h = b * 15;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Le + b * 0, i / _l + ko * b + h);
    f.rotate(Math.PI / Dn);
    f.globalAlpha = 0.5;
    gb(f, S, a, j);
    tb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / _l - b * qk, i / 2 + b * Ml);
    f.globalAlpha = yl;
    f.rotate(Math.PI / 3);
    f.translate(Jt, -h);
    gb(f, 8, a, j);
    tb(f, d[Cs]);
    f.restore();
    f.save();
    f.translate(g / Qs - b * I, i / C - b * 12);
    f.rotate(Math.PI / 2.8);
    gb(f, 5, a * 0.5, j * 0.4);
    tb(f, d[Xn]);
    f.restore();
    f.save();
    f.translate(g / Xn + Sg * b, i / kn + b * 5);
    f.rotate(Math.PI / 1);
    gb(f, vu, a * 0.5, j * 0.4);
    tb(f, d[eh]);
    f.restore();
    f.save();
    f.translate(g / cu - b * 8, i / tg + b * Yh);
    f.rotate(Math.PI / 2.25);
    gb(f, 5, a * 0.5, j * 0.4);
    tb(f, d[C]);
    f.restore();
    return e;
  }
  function Bu(f, e, i, j, k, m, n, a, o, h, l = undefined) {
    if (l === undefined) l = xb;
    var p = document.createElement("canvas");
    var q = p.getContext("2d");
    m = m ? f * m : rh;
    var b = Math.floor(f * i);
    q.font = b + "px Baloo Paaji";
    q.lineJoin = "round";
    a *= f;
    var t = n ? a * yg : 0;
    if (o) {
      var d = Math.min(q.measureText(e).width + xl * f + t, o);
    } else {
      d = q.measureText(e).width + C * f + t + l * f * 2;
    }
    b = (b + m + l) * f + t;
    p.width = d;
    p.height = b;
    if (n) {
      q.fillStyle = n;
      nb(q, Ko, 0, d, b, a * 2);
      q.fill();
      q.translate(a, a);
    }
    q.textBaseline = "middle";
    q.font = i + "px Baloo Paaji";
    q.lineJoin = "round";
    if (k) {
      q.beginPath();
      q.fillStyle = k;
      q.fillText(e, 0, b / kn + m - t / 2, d);
    }
    q.beginPath();
    if (h) {
      q.strokeStyle = h;
      q.lineWidth = l;
      q.strokeText(e, l, (b - t) / 2, d);
    }
    q.fillStyle = j;
    q.fillText(e, l, (b - t) / $r, d);
    return p;
  }
  function Cu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 220;
    var i = b * 230;
    var a = wa * b;
    var j = a / Ai;
    var h = b * Fr;
    e.width = g;
    e.height = i;
    f.translate(g / 2, i / 2 + h);
    f.globalAlpha = 0.5;
    gb(f, Va, a, j);
    tb(f, d[Ol]);
    f.globalAlpha = 1;
    f.translate(Lg, -h);
    gb(f, 7, a, j);
    tb(f, d[ik]);
    gb(f, Fq, a * 0.65, j * 0.65);
    tb(f, d[2]);
    return e;
  }
  function Du(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = os * b;
    var i = b * Kt;
    e.width = g;
    e.height = i;
    var a = rq * b;
    var j = wl * b;
    var k = b * yb;
    f.save();
    f.translate(a, j);
    f.globalAlpha = jh;
    ab(f, Wh, 0, k);
    tb(f, d[Jt]);
    k = b * 3;
    a = Ko;
    j = b * -Vl;
    f.translate(a, j);
    f.globalAlpha = Br;
    ab(f, 0, kq, k);
    tb(f, d[Eg]);
    f.restore();
    return e;
  }
  function Eu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 140;
    var i = b * 150;
    var a = bb * b;
    var j = b * 4;
    e.width = g;
    e.height = i;
    f.translate(b * -50, b * -38 + a);
    f.globalAlpha = c ? 0.5 : 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    tb(f, d[_s]);
    f.translate(0, 0 - a);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
    f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
    f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
    f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
    f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
    f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
    f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
    f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
    f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
    f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
    f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
    f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
    f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
    f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
    f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
    f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
    f.closePath();
    tb(f, d[Cs], d[2], j);
    return e;
  }
  function Gu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 217;
    d.height = a * 215;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 113);
    e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
    e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
    e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
    e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
    e.closePath();
    tb(e, c[er], c[2], a * qo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 103);
    e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
    e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
    e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
    e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
    e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
    e.closePath();
    tb(e, c[1], c[ij], a * mj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 46);
    e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, qi * a);
    e.bezierCurveTo(a * 52, a * 12, a * 52, a * $j, a * 49, a * 24);
    e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
    e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
    e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
    e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
    e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
    e.closePath();
    tb(e, c[4], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 50);
    e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
    e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
    e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
    e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
    e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
    e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
    e.closePath();
    tb(e, c[oj], c[5], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 40);
    e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
    e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
    e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 29, a * 48);
    e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
    e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
    e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
    e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 89, a * 61);
    e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
    e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
    e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
    e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
    e.closePath();
    tb(e, c[ds]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 59);
    e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
    e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
    e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
    e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
    e.closePath();
    tb(e, c[7]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 62);
    e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
    e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
    e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
    e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
    e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
    e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
    e.closePath();
    tb(e, c[jt], c[5], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 130);
    e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
    e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
    e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
    e.closePath();
    tb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 119);
    e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
    e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
    e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
    e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
    e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
    e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
    e.closePath();
    tb(e, c[xr], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 64);
    e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
    e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
    e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
    e.closePath();
    tb(e, c[Xr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 65);
    e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
    e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
    e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
    e.closePath();
    tb(e, c[Sl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 112);
    e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
    e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
    e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
    e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
    e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
    e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
    e.closePath();
    tb(e, c[9], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 114);
    e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
    e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
    e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
    e.closePath();
    tb(e, c[xg], c[hs], In * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 85, a * 152);
    e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
    e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
    e.closePath();
    e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
    tb(e, c[Pj], c[la], a * Rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 166);
    e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
    e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
    e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
    e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
    e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
    e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
    e.closePath();
    tb(e, c[rq], c[10], qa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 168);
    e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
    e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
    e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
    e.closePath();
    tb(e, c[wh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 169);
    e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
    e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
    e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
    e.closePath();
    tb(e, c[L], c[Rr], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 107);
    e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
    e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
    e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
    e.closePath();
    tb(e, c[Kg], c[Qb], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 108);
    e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
    e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
    e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
    e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
    e.closePath();
    tb(e, c[hs], c[kl], jt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 106);
    e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
    e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
    e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
    e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
    e.closePath();
    tb(e, c[8]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 69, a * 178);
    e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
    e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
    tb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 161);
    e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
    e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
    tb(e, undefined, c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 29);
    e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
    e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
    tb(e, undefined, c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 33);
    e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
    e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
    tb(e, Qi, c[Fq], Ai * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 98);
    e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
    e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
    e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
    e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
    e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
    e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
    e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
    e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
    e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
    tb(e, undefined, c[nh], a * 4);
    return d;
  }
  function Hu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 180;
    var i = b * 210;
    var a = (h = b * 60) / oj;
    var j = b * ws;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(g / Wq - kq * b, i / 2 - b * 35 + j);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -Fr);
    gb(f, 5, h, a);
    tb(f, d[Jt]);
    f.restore();
    f.save();
    f.translate(g / 2 + Fg * b, i / 2 + ng * b + j);
    f.rotate(Math.PI / _l);
    f.globalAlpha = 0.5;
    f.translate(b * 0, b * -20);
    gb(f, 5, h, a);
    tb(f, d[0]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / _t + b * 40 + j);
    f.rotate(Math.PI / sn);
    f.globalAlpha = 0.5;
    f.translate(0, b * -20);
    gb(f, 5, h, a);
    tb(f, d[yk]);
    f.restore();
    f.save();
    f.translate(g / xl - _s * b, i / 2 - b * 35);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(b * 0, -ws * b);
    gb(f, 5, h, a);
    tb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / $r + b * 10, i / 2 + b * Ne);
    f.rotate(Math.PI / Ok);
    f.globalAlpha = Fo;
    f.translate(0, b * -20);
    gb(f, pl, h, a);
    tb(f, d[1]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 50, i / 2 + b * 40);
    f.rotate(Math.PI / ta);
    f.globalAlpha = yl;
    f.translate(Mn, b * -Mg);
    gb(f, 5, h, a);
    tb(f, d[wg]);
    f.restore();
    var h;
    a = (h = b * 30) / 4;
    f.save();
    f.translate(g / 2 + b * 5, i / Uh - Fr * b);
    f.rotate(Math.PI / -1.8);
    f.globalAlpha = 1;
    f.translate(Wh, b * -Fl);
    gb(f, _g, h, a);
    tb(f, d[cu]);
    f.restore();
    f.save();
    f.translate(g / Qs + b * xb, i / 2 + b * 10);
    f.rotate(Math.PI / 2);
    f.globalAlpha = wg;
    f.translate(0, -Tl * b);
    gb(f, lt, h, a);
    tb(f, d[2]);
    f.restore();
    f.save();
    f.translate(g / 2 - b * 45, i / Wq + b * 35);
    f.rotate(Math.PI / 3);
    f.globalAlpha = 1;
    f.translate(yk, b * -20);
    gb(f, 5, h, a);
    tb(f, d[2]);
    f.restore();
    ab(f, g / 2 - b * 7, i / Xn + ph * b, Gt);
    tb(f, d[2]);
    return e;
  }
  function Iu(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 70;
    var i = b * 90;
    var a = b * Il;
    var j = b * 5;
    e.width = g;
    e.height = i;
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    tb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * wr, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    tb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70 + j);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    tb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(nh * b, b * -93 + j);
    f.rotate(Math.PI / 5);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    tb(f, "#0d1b1c");
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = Br;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, sg * b, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    tb(f, d[0], d[jh], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 112, b * 109, b * 111, b * rs, b * 106, b * 93);
    f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
    f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
    f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
    f.closePath();
    tb(f, d[0], d[yl], a);
    f.restore();
    f.save();
    f.translate(b * -80, b * -70);
    f.globalAlpha = 1;
    f.beginPath();
    f.bezierCurveTo(b * 108, b * 120, wa * b, b * 119, b * 91, b * 127);
    f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
    f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
    f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
    f.closePath();
    tb(f, d[Jt], d[1], a);
    f.restore();
    f.save();
    f.translate(lk * b, b * -93);
    f.rotate(Math.PI / lt);
    f.globalAlpha = er;
    f.beginPath();
    f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
    f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
    f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
    f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
    f.closePath();
    tb(f, d[0], d[1], a);
    f.restore();
    return e;
  }
  const Ju = _g;
  function Ku(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 80;
    c.height = a * 100;
    d.scale(0.5, 0.5);
    d.translate(hl, $n);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * Cj);
    d.bezierCurveTo(a * 19, a * 30, a * _o, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * 14, a * 50, rq * a, a * 48, a * 6);
    d.closePath();
    tb(d, b[Mn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(K * a, a * 70);
    d.bezierCurveTo(a * 18, a * 77, a * Fn, a * 83, a * 4, a * 87);
    tb(d, undefined, b[Wh], a * eg);
    d.translate(0, -10);
    d.globalAlpha = 1;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 47, a * mh);
    d.bezierCurveTo(a * as, a * 30, a * 12, a * 42, a * 10, a * 55);
    d.bezierCurveTo(a * xg, a * 75, a * 27, a * 76, a * 36, a * 72);
    d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
    d.bezierCurveTo(a * 53, a * Vg, a * 50, Ls * a, a * 48, a * 6);
    d.closePath();
    tb(d, b[1], b[2], ob * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 17, a * 70);
    d.bezierCurveTo(a * 18, a * 77, Fs * a, a * 83, a * 4, a * 87);
    tb(d, undefined, b[Le], a * 8);
    d.globalAlpha = 0.5;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * Jl, a * 70);
    d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * El);
    tb(d, Uq, b[2], a * 8);
    return c;
  }
  const Lu = jj;
  function Ku(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 234;
    c.height = a * 183;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 25);
    d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
    d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
    d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
    d.bezierCurveTo(Wl * a, a * 148, ss * a, a * 95, a * 21, a * 66);
    d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
    d.closePath();
    tb(d, b[0], b[$t], a * 4);
    return c;
  }
  function Mu(b, c, d, e, f) {
    var g = document.createElement("canvas");
    var i = g.getContext("2d");
    if (e == 0) {
      var a = b * 270;
      var j = b * 250;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 140, b * 3);
      i.translate(b * -25, b * -20);
      i.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
      i.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
      i.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
      i.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
      i.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
      i.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
      i.closePath();
      tb(i, d[Dh]);
    } else if (js == e) {
      a = b * 430;
      j = b * 350;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 180, b * 5);
      i.translate(b * -30, b * -60);
      i.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
      i.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
      i.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, ua * b, b * 386);
      i.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
      i.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
      i.closePath();
      tb(i, d[jj]);
    } else if (e == 2) {
      a = b * 400;
      j = b * 300;
      g.width = a;
      g.height = j;
      i.beginPath();
      i.moveTo(b * 80, b * 52);
      i.translate(b * -40, b * -30);
      i.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
      i.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
      i.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
      i.bezierCurveTo(b * 108, b * 282, wr * b, b * 239, b * 63, b * 205);
      i.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
      i.closePath();
      tb(i, d[0]);
    }
    return g;
  }
  function Nu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 277.34375);
    e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
    e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
    e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
    e.closePath();
    tb(e, c[1], c[$r], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 214.34375);
    e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
    e.closePath();
    tb(e, Hh, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98.5, a * 247.34375);
    e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
    e.closePath();
    tb(e, undefined, c[_l], ul * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.5, a * 189.34375);
    e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
    e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
    e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
    e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
    e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
    e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
    e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
    e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
    e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
    e.closePath();
    tb(e, c[3], c[4], a * Nh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 300.5, a * 147.34375);
    e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
    e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
    e.closePath();
    tb(e, c[5], c[H], a * co);
    ab(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
    tb(e, c[7]);
    ab(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
    tb(e, c[yb]);
    return d;
  }
  function Ou(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * c * 2;
    var i = c * b * pa;
    var a = g / eh;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j);
    ab(f, 0, 0, b * c);
    tb(f, d);
    return e;
  }
  function Pu(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 220;
    d.height = a * 180;
    e.globalAlpha = b ? 0.5 : V;
    e.translate(a * -90, a * -150);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    tb(e, c[5], c[5], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    tb(e, c[5], c[_g], Wq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    tb(e, c[4], c[4], a * pa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    tb(e, c[zg], c[f], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    tb(e, c[4], c[xt], _l * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    tb(e, c[In], c[4], a * pa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    tb(e, c[4], c[Dt], a * ij);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    tb(e, c[Ka], c[4], a * kn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    tb(e, undefined, c[qo], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    tb(e, c[4], c[qa], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    tb(e, c[oj], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    tb(e, c[4], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    tb(e, undefined, c[Ai], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    tb(e, On, c[Il], a * xu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    tb(e, c[Yn], c[4], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    tb(e, kj, c[Ai], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 140, a * 265.33333587646484);
    e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
    e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
    e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
    e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
    e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
    e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
    e.closePath();
    tb(e, undefined, c[oj], a * 6);
    e.globalAlpha = 0.5;
    e.scale(1, ub);
    e.translate(a * 105, a * 155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
    e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
    e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
    e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
    e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
    e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
    e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
    e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
    e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
    e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
    e.closePath();
    tb(e, c[5], c[5], a * 4);
    e.globalAlpha = 1;
    e.translate(a * -110, a * -155);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104, a * 237.8000030517578);
    e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
    e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
    e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
    e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
    e.closePath();
    tb(e, c[xb], c[1], C * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 211.20000457763672);
    e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
    e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
    e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
    e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
    e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
    e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
    e.closePath();
    tb(e, c[0], c[1], tg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120, a * 207);
    e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
    e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
    e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
    e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
    e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
    e.closePath();
    tb(e, c[0], c[1], a * eh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 238);
    e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
    e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
    e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
    e.closePath();
    tb(e, c[0], c[1], Le * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 211);
    e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
    e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
    e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
    e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
    e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
    e.closePath();
    tb(e, c[$t], c[Eg], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 280, a * 206);
    e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
    e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
    e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
    e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
    e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
    e.closePath();
    tb(e, c[0], c[Cs], a * _l);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 138, a * 298.40000915527344);
    e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
    e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
    e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
    e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
    e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
    e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
    e.closePath();
    tb(e, c[0], c[js], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 177.5999984741211);
    e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
    e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
    e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
    e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
    e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
    e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
    e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
    e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
    e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
    e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
    e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
    e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
    e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
    e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
    e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
    e.bezierCurveTo(a * xs, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
    e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
    e.closePath();
    tb(e, c[Xn], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 175.5999984741211);
    e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
    e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
    e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
    e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
    e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * rg, a * 302.8000030517578);
    e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
    e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
    e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
    e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
    e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
    e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
    e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
    e.closePath();
    tb(e, kj, c[lk], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 198, a * 161.4000015258789);
    e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
    e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
    e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
    e.closePath();
    tb(e, c[0], c[yl], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 161, a * 194);
    e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
    e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
    e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
    e.closePath();
    tb(e, c[0], c[er], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
    e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
    e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
    e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
    e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
    e.closePath();
    tb(e, c[_s], c[Br], yg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 156, a * 188);
    e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
    e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
    e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
    e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
    e.closePath();
    tb(e, undefined, c[1], a * Le);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 189);
    e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
    e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
    e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
    e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
    e.closePath();
    tb(e, Z, c[ce], _t * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 262);
    e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
    e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
    e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
    e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
    e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
    e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
    e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
    e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
    e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
    e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
    e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
    e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
    e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
    e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
    e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
    e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
    e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
    e.closePath();
    tb(e, c[0], c[0], a * cu);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 264);
    e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
    e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
    e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
    e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
    e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
    e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
    e.closePath();
    tb(e, Rg, c[js], a * tg);
    return d;
  }
  function ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 373;
    d.height = a * 314;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Bk * a, a * Wn);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    nb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    tb(e, c[1], c[Le], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    tb(e, c[0], c[0], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    tb(e, c[0], c[0], a * 6);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    nb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    tb(e, c[xb], c[Lg], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    nb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    tb(e, c[yk], c[xb], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    nb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    tb(e, c[Ol], c[0], a * xu);
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    nb(e, -wr * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    tb(e, c[0], c[0], a * 6);
    ab(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    tb(e, c[Fj], c[0], a * 6);
    e.globalAlpha = Ur;
    e.translate(a * -5, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224.048583984375, a * 56.6805419921875);
    e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
    e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
    e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
    e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
    e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
    e.closePath();
    tb(e, c[3], c[qa], a * 6);
    e.save();
    e.translate(a * 184.048583984375, a * 69.1805419921875);
    nb(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
    e.restore();
    tb(e, c[bt], c[2], a * oj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 185.048583984375, a * 61.6805419921875);
    e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
    e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
    e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
    e.closePath();
    tb(e, c[1], c[yg], So * a);
    e.save();
    e.translate(a * 183.548583984375, a * 119.6805419921875);
    nb(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
    e.restore();
    tb(e, c[gs], c[Ai], a * 6);
    e.save();
    e.translate(a * 183.048583984375, a * 155.6805419921875);
    nb(e, a * -121, a * -52, a * 242, a * 104, a * 40);
    e.restore();
    tb(e, c[_i], c[In], a * zk);
    e.save();
    e.translate(a * 183.048583984375, a * 205.1805419921875);
    nb(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
    e.restore();
    tb(e, c[mg], c[Il], a * 6);
    e.globalCompositeOperation = "destination-out";
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    nb(e, a * -Kn, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    tb(e, c[7], c[lr], mg * a);
    e.globalCompositeOperation = "source-over";
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 185.048583984375, a * 204.1805419921875);
    nb(e, -Lh * a, a * -34.5, a * 200, a * 69, a * 40);
    e.restore();
    tb(e, c[7], c[al], a * 6);
    e.globalAlpha = 1;
    e.save();
    ab(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
    tb(e, c[Fh], c[In], a * 6);
    e.restore();
    return d;
  }
  const id = sb;
  function td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 10, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    tb(e, c[0], c[rh], de * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    tb(e, c[0], c[Kr], a * 12);
    e.globalAlpha = 1;
    e.translate(a * -Bq, a * -Cj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100.5, a * 126.34375);
    e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
    e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
    e.closePath();
    tb(e, c[1], c[Le], Nh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 106.5, a * 131.34375);
    e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
    e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 137.34375);
    e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
    e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
    e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
    e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
    e.closePath();
    tb(e, c[qo]);
    ab(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
    tb(e, c[pl]);
    ab(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
    tb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196.5, a * 151.34375);
    e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
    e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
    e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
    e.closePath();
    tb(e, c[7], c[fg], fs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154.5, a * 222.34375);
    e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
    e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
    e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
    e.closePath();
    tb(e, c[Gb], c[8], pk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 279.5, a * 294.34375);
    e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
    e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
    e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
    e.closePath();
    tb(e, c[7], c[8], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 296.5, a * 287.34375);
    e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
    e.closePath();
    tb(e, undefined, c[9], Fq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 289.34375);
    e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
    e.closePath();
    tb(e, undefined, c[9], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 294.5, a * 291.34375);
    e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
    e.closePath();
    tb(e, undefined, c[I], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 161.34375);
    e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
    e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
    e.closePath();
    tb(e, jr, c[9], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 167.5, a * 248.34375);
    e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
    e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
    e.closePath();
    tb(e, La, c[jl], a * 3);
    return d;
  }
  function nd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 309;
    d.height = a * 287;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Pr, a * _g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    tb(e, c[0], c[0], Pr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    tb(e, c[yk], c[0], Ke * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    tb(e, c[0], c[0], Pr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    tb(e, c[0], c[Ol], rk * a);
    e.globalAlpha = jh;
    e.translate(-bb * a, a * -Gl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34.5, a * 38.53125);
    e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
    e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
    e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
    e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
    e.closePath();
    tb(e, c[dn], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143.5, a * 74.53125);
    e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
    e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
    e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
    e.closePath();
    tb(e, c[dn], c[Ok], oa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 142.53125);
    e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
    e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
    e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
    e.closePath();
    tb(e, c[1], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 236.5, a * 189.53125);
    e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
    e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
    e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
    e.closePath();
    tb(e, c[1], c[eh], rk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 109.5, a * 51.53125);
    e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
    tb(e, c[1], c[eh], He * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 51.53125);
    e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
    e.closePath();
    tb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 63.53125);
    e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
    e.closePath();
    tb(e, c[wg], c[Xn], a * _k);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.5, a * 84.53125);
    e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
    e.closePath();
    tb(e, c[1], c[2], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 149.5, a * 108.53125);
    e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
    e.closePath();
    tb(e, c[er], c[eh], Hj * a);
    return d;
  }
  function od(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 130;
    var i = b * 142;
    var a = g / 2;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + b * 7);
    f.globalAlpha = c ? 0.5 : 1;
    ab(f, 0, $t, b * 60);
    tb(f, d[0]);
    f.translate(Fj, b * -7);
    f.globalAlpha = Ur;
    ab(f, ko, 0, b * 60);
    tb(f, d[1], d[2], Ai * b);
    ab(f, 0, 0, b * 40);
    tb(f, d[B]);
    ab(f, 0, rh, b * 25);
    tb(f, d[4], d[5], b * 8);
    return e;
  }
  const rd = rk;
  function ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 142;
    e.globalAlpha = b ? 0.5 : bt;
    e.save();
    e.translate(a * 65, a * 80);
    e.rotate(0.2);
    gb(e, 9, a * 60, Pr * a);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = bt;
    e.save();
    e.translate(a * 65, a * 71);
    e.rotate(0.2);
    gb(e, 9, a * 60, a * 10);
    tb(e, c[js], c[yg], Yn);
    e.rotate(-0.32);
    gb(e, rb, a * 38, rk * a);
    tb(e, c[3], c[kr], 4);
    e.rotate(0.68);
    gb(e, 9, a * 20, a * 8);
    tb(e, c[5], c[_h], 6);
    e.restore();
    return d;
  }
  const sd = er;
  function hd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 372;
    c.height = a * 375;
    d.globalAlpha = 0.5;
    d.translate(Js * a, a * 15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    tb(d, b[0]);
    d.globalAlpha = 1;
    d.translate(-il * a, a * -15);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    tb(d, b[V], b[tg], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
    d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
    d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
    d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
    d.closePath();
    tb(d, b[3], b[Vl], a * $r);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
    d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
    d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
    d.closePath();
    tb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
    d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
    d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
    d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
    d.closePath();
    tb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
    d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
    d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
    d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
    d.closePath();
    tb(d, b[3], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
    d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
    d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
    d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
    d.closePath();
    tb(d, b[Fh], b[3], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
    d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
    d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
    d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
    d.closePath();
    tb(d, b[Kk], b[3], Le * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
    d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
    d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
    d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
    d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
    d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
    d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
    d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
    d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
    d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
    d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
    d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
    d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
    d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
    d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
    d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
    d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
    d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
    d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
    d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
    d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
    d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
    d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
    d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
    d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
    d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
    d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
    d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
    d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
    d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
    d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
    d.closePath();
    tb(d, undefined, b[2], a * 4);
    return c;
  }
  function ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 125;
    d.height = a * 139;
    e.globalAlpha = b ? 0.5 : ik;
    e.save();
    e.translate(a * 63, a * 79);
    e.rotate(ub);
    gb(e, 8, a * 60, a * 10);
    tb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 63, a * 69);
    e.rotate(Aj);
    gb(e, 8, a * 60, a * 10);
    tb(e, c[Yt], c[2], kr);
    e.rotate(0.56);
    gb(e, S, a * 40, a * 10);
    tb(e, c[jg], c[4], gn);
    e.rotate(0.28);
    gb(e, 8, a * 28, a * 8);
    tb(e, c[Oq]);
    e.restore();
    return d;
  }
  function gd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 248;
    d.height = a * 128;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 7);
    e.bezierCurveTo(a * 169, a * 14, a * 212, jl * a, a * 241, a * 5);
    e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
    e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, mg * a, a * 99);
    e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
    e.closePath();
    tb(e, c[_s], c[1], a * ve);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 73, a * 124);
    e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
    e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
    e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
    e.closePath();
    tb(e, c[2], c[3], a * 1);
    return d;
  }
  function ud(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(jj, a * Lb);
    if (ut === 0) {
      e.globalAlpha = b ? 0.5 : Aj;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(Br);
      gb(e, 8, a * 41, a * lj);
      tb(e, c[0]);
      e.restore();
    }
    e.globalAlpha = sd;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1);
    gb(e, 8, a * 41, Bq * a);
    tb(e, c[er], c[2], a * 4);
    e.rotate(0.56);
    gb(e, 8, a * 33, a * 10);
    tb(e, c[Gg], c[Yn], a * Il);
    e.rotate(0.28);
    gb(e, 8, a * 24, a * 8);
    tb(e, c[5]);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(rh);
    nb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    tb(e, c[4], c[zg], Le * a);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    nb(e, a * -26, -L * a, a * 52, a * Kt, a * 30);
    e.restore();
    tb(e, c[In], c[4], a * 2);
    ab(e, a * 45, a * 29, E * a);
    tb(e, c[5]);
    ab(e, a * 45, a * 61, Eh * a);
    tb(e, c[U]);
    ab(e, a * 28, a * 45, a * 7);
    tb(e, c[uh]);
    ab(e, a * 62, a * 45, _k * a);
    tb(e, c[5]);
    return d;
  }
  function bd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(rh, a * 4);
    if (ut === 0) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(1.4);
      gb(e, wq, a * 41, a * 10);
      e.restore();
      tb(e, c[0]);
    }
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(1.4);
    gb(e, 7, a * 41, a * 10);
    tb(e, c[Aj], c[kn], a * 4);
    gb(e, 7, a * 35, a * Bq);
    tb(e, c[Ik], c[4], a * 4);
    gb(e, id, a * 23, a * 5);
    e.restore();
    tb(e, c[5]);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Jt);
    nb(e, a * -Qg, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    tb(e, c[4], c[oj], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Lu);
    nb(e, a * -26, -ug * a, a * 52, a * 18, a * 30);
    e.restore();
    tb(e, c[jt], c[zg], a * kn);
    ab(e, a * 45, a * 29, a * 7);
    tb(e, c[5]);
    ab(e, a * 45, a * 61, a * 7);
    tb(e, c[5]);
    ab(e, a * 28, a * 45, El * a);
    tb(e, c[5]);
    ab(e, a * 62, a * 45, a * 7);
    tb(e, c[5]);
    return d;
  }
  function vd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 101;
    e.translate(a * rh, a * 5);
    if (ut === Ko) {
      e.globalAlpha = b ? 0.5 : 1;
      ab(e, a * 44, a * 55, a * 41);
      tb(e, c[rh]);
    }
    e.globalAlpha = 1;
    ab(e, a * 44, a * 45, a * 41);
    tb(e, c[1], c[pa], a * Rh);
    ab(e, a * 44, a * 45, a * 31);
    tb(e, c[3]);
    e.save();
    e.translate(a * 45, a * 45);
    nb(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
    e.restore();
    tb(e, c[Yn], c[4], a * 2);
    e.save();
    e.translate(a * 45, a * 45);
    nb(e, a * -26, a * -ug, a * 52, a * 18, a * 30);
    e.restore();
    tb(e, c[4], c[4], a * 2);
    ab(e, a * 45, a * 29, a * 7);
    tb(e, c[5]);
    ab(e, a * 45, a * 61, a * iq);
    tb(e, c[vu]);
    ab(e, a * 28, a * 45, a * 7);
    tb(e, c[vu]);
    ab(e, a * 62, a * 45, a * 7);
    tb(e, c[Gl]);
    return d;
  }
  function dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 130;
    d.height = a * 148;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 65, a * 85);
    e.rotate(1.4);
    gb(e, Lq, a * 60, a * 10);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 65, a * 74);
    e.rotate(1.4);
    gb(e, Ij, a * 60, a * eg);
    tb(e, c[1], c[2], 4);
    e.rotate(0.64);
    gb(e, 7, a * 40, a * 10);
    tb(e, c[3], c[4], 4);
    e.rotate(0.12);
    gb(e, ds, a * 23, pl * a);
    e.restore();
    tb(e, c[Bb]);
    return d;
  }
  const cd = gs;
  function md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : ce;
    e.translate(0, a * Ju);
    e.save();
    e.translate(a * 85, a * 88);
    e.rotate(1.4);
    gb(e, 7, a * 60, a * Fn);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 85, a * 80);
    for (var f = 0; f < bb; f++) {
      e.rotate(Math.PI / vu);
      e.save();
      e.translate(a * 65, xb);
      gb(e, Za, a * 21, Rh * a);
      tb(e, c[1], c[C], a * Lb);
      e.restore();
    }
    e.save();
    e.translate(a * Lu, a * 0);
    e.rotate(1.4);
    gb(e, 7, a * 60, a * eg);
    tb(e, c[Vl], c[4], a * 4);
    e.rotate(0.64);
    gb(e, E, a * 40, a * 10);
    tb(e, c[5], c[6], th * a);
    e.rotate(0.12);
    gb(e, El, a * 23, a * mh);
    e.restore();
    tb(e, c[7]);
    return d;
  }
  function pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.translate(Lg, a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    gb(e, 7, a * 60, a * rk);
    e.restore();
    tb(e, c[yk]);
    e.globalAlpha = Fo;
    e.translate(a * 85, a * 82);
    for (var g = 0; eg > g; g++) {
      e.rotate(Math.PI / Gl);
      e.save();
      e.translate(a * 65, xb);
      gb(e, Mo, a * 21, Il * a);
      tb(e, c[Fo], c[cu], f * a);
      e.restore();
    }
    e.save();
    e.translate(Ko * a, a * 0);
    e.rotate(0.2);
    gb(e, 9, a * 60, a * rd);
    tb(e, c[3], c[4], a * 4);
    e.rotate(-0.32);
    gb(e, ug, a * 38, a * 10);
    tb(e, c[5], c[6], zg * a);
    e.rotate(0.68);
    gb(e, jl, a * 20, yb * a);
    tb(e, c[Ba], c[Ft], a * Rb);
    e.restore();
    return d;
  }
  function Cd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : ik;
    e.translate(rh, Fh * a);
    e.save();
    e.translate(a * 85, a * 95);
    e.rotate(1.4);
    gb(e, Hj, a * 60, a * 10);
    e.restore();
    tb(e, c[Ol]);
    e.globalAlpha = bt;
    e.translate(a * 85, a * 82);
    for (var f = jj; f < 10; f++) {
      e.rotate(Math.PI / cd);
      e.save();
      e.translate(a * 65, kq);
      gb(e, 3, a * 21, Lb * a);
      tb(e, c[1], c[tg], Rh * a);
      e.restore();
    }
    e.save();
    e.translate(Wh * a, _s * a);
    e.rotate(1);
    gb(e, xo, a * 60, a * 10);
    tb(e, c[3], c[4], a * 4);
    e.rotate(0.56);
    gb(e, 8, a * 40, a * 10);
    tb(e, c[5], c[dt], a * 4);
    e.rotate(0.28);
    gb(e, 8, a * 28, a * 8);
    tb(e, c[7]);
    e.restore();
    return d;
  }
  function Td(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * bh, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    tb(e, c[8], c[9], a * Bb);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    tb(e, c[9]);
    e.globalAlpha = 0.5;
    e.translate(Ol, a * ta);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * Ag, a * 122, a * 18, a * 129);
    e.closePath();
    tb(e, c[Kr]);
    e.globalAlpha = 1;
    e.translate(rh, a * -cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(nl * a, a * 127);
    e.bezierCurveTo(a * 13, a * 117, a * ps, a * 109, Ne * a, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * sk, a * 127);
    e.closePath();
    tb(e, c[4], c[Ju], a * vu);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    nb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
    e.restore();
    tb(e, c[1], c[_t], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    nb(e, a * -13.5, -zr * a, a * 27, a * 28, a * oj);
    e.restore();
    tb(e, c[1], c[Xn], a * Cj);
    return d;
  }
  function fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 165;
    d.height = a * 123;
    e.save();
    e.translate(a * 81, a * 65);
    nb(e, a * -78, a * -54.5, a * 156, a * 109, Fr * a);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 81, a * 58);
    nb(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
    e.restore();
    tb(e, c[1], c[kn], 4);
    e.save();
    e.translate(a * 81, a * 58);
    nb(e, a * -69, a * -47, a * 138, a * 93, a * 15);
    e.restore();
    tb(e, c[nh], c[4], Dt);
    e.save();
    e.translate(a * 79, a * 54);
    nb(e, a * -34, a * -40, a * 68, a * 88, a * 13);
    e.restore();
    tb(e, undefined, c[pl], Rh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 13);
    e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
    e.closePath();
    tb(e, D, c[6], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, vs * a);
    e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
    e.closePath();
    tb(e, La, c[xu], bn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * zk);
    e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
    e.closePath();
    tb(e, undefined, c[kg], th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * bg);
    e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
    e.closePath();
    tb(e, On, c[7], 4);
    e.save();
    e.translate(a * 79, a * 113);
    nb(e, -Yl * a, -Xn * a, a * 36, a * 4, a * Yh);
    e.restore();
    tb(e, On, c[Ss], zg);
    e.save();
    e.translate(a * 75, a * 118);
    nb(e, a * -6, a * -2.5, a * 20, cd * a, a * 20);
    e.restore();
    tb(e, c[Sl]);
    return d;
  }
  function zd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 304;
    d.height = a * 278;
    e.translate(a * 10, a * 25);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * Dg, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, Ql * a, a * 159);
    e.bezierCurveTo(a * uh, a * 76, a * 75, a * 4, a * 165, Ui * a);
    e.bezierCurveTo(a * 233, a * m, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    tb(e, c[0]);
    e.translate(-rk * a, a * -25);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 128, a * 137);
    e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
    e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
    e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
    e.closePath();
    tb(e, c[Cs], c[kn], nk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 284, a * 52);
    e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
    e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, Nh * a, a * 159);
    e.bezierCurveTo(U * a, a * 76, a * 75, a * 4, a * 165, a * 13);
    e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
    e.closePath();
    tb(e, c[Vl], c[4], Hg * a);
    return d;
  }
  function yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : Yt;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    gb(e, 6, a * 146, a * 30);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = sd;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    gb(e, 6, a * 146, a * 30);
    e.restore();
    tb(e, c[1], c[C], ob * a);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    gb(e, ss, a * 105, a * 30);
    e.restore();
    tb(e, c[3], c[vo], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(ko);
    gb(e, 6, a * 66, a * 30);
    e.restore();
    tb(e, c[4], c[Xn], a * Ft);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(yk);
    gb(e, 6, a * 31, a * 30);
    e.restore();
    tb(e, c[5], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    tb(e, jr, c[Wq], a * db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, a * 100);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    tb(e, undefined, c[2], Oi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * Bs);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    tb(e, undefined, c[ib], a * al);
    return d;
  }
  function wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 501;
    d.height = a * 309;
    e.translate(0, a * 6);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 184);
    e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
    e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
    e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
    e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
    e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
    e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
    e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = Fo;
    e.translate(jj, a * -6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 116);
    e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
    e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
    e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
    e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
    e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, Fq * a);
    e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
    e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
    e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, id * a);
    e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
    e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
    e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
    e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
    e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
    e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
    e.closePath();
    tb(e, c[Yt], c[kn], a * St);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 122, a * 191);
    e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
    e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
    e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
    e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
    e.closePath();
    tb(e, c[cl], c[$r], a * ll);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403, a * 182);
    e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
    e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
    e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
    e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
    e.closePath();
    tb(e, c[Vl], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 155, a * 157);
    e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
    e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
    e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
    e.closePath();
    tb(e, c[xt], c[cu], Fs * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 347, a * 162);
    e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
    e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
    e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
    e.closePath();
    tb(e, c[4], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 134);
    e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
    e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
    e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
    e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
    e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
    e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
    e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
    e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
    e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
    e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
    e.closePath();
    tb(e, c[Il], c[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 63, a * 98);
    e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
    e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
    e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
    e.closePath();
    tb(e, c[3], c[Xn], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 449, a * 97);
    e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
    e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
    e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
    e.closePath();
    tb(e, c[3], c[ib], a * 10);
    return d;
  }
  function Pd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 106;
    d.height = a * 681;
    e.translate(a * 20, a * Mg);
    e.globalAlpha = b ? 0.5 : ce;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    nb(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
    e.restore();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    tb(e, c[xb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    tb(e, c[0]);
    e.translate(a * -20, a * -mt);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 52.5, a * 395);
    e.rotate(0);
    nb(e, a * -11.5, a * -226, a * 23, a * 452, a * Bq);
    e.restore();
    tb(e, c[1], c[yg], a * Ft);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 588);
    e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
    e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
    e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
    e.closePath();
    tb(e, c[Fh], c[f], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 135);
    e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
    e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
    e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
    e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
    e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
    e.closePath();
    tb(e, c[vo], c[qa], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 150);
    e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
    e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
    e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
    e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
    e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
    e.closePath();
    tb(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 39);
    e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
    e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
    e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
    e.closePath();
    tb(e, c[mg], c[ph], Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 64);
    e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
    e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
    e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
    e.closePath();
    tb(e, c[8]);
    return d;
  }
  function Ad(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 69;
    d.height = a * 120;
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 30, a * 84);
    nb(e, -hn * a, a * -66.5, a * 8, Zr * a, a * rd);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 45);
    nb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * St);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 30, a * 17);
    nb(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
    e.restore();
    tb(e, c[_s]);
    e.save();
    e.translate(a * 30, a * 31);
    nb(e, a * -26, a * -14.5, a * 52, a * 29, Gl * a);
    e.restore();
    tb(e, c[Dh]);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 36, a * 79.140625);
    nb(e, a * -dt, a * -66.5, a * 8, a * 100, a * 10);
    e.restore();
    tb(e, c[ub], c[2], a * 3);
    e.save();
    e.translate(a * 35, a * 40.140625);
    nb(e, a * -9.5, a * -6.5, a * 16, a * 13, a * rk);
    e.restore();
    tb(e, c[3], c[Ka], a * 3);
    e.save();
    e.translate(a * 35, a * 12.140625);
    nb(e, a * -7.5, a * -5.5, a * 12, a * qk, Ke * a);
    e.restore();
    tb(e, c[3], c[4], a * 3);
    e.save();
    e.translate(a * 34.5, a * 26.140625);
    nb(e, a * -26, a * -14.5, a * 52, a * 29, a * Rj);
    e.restore();
    tb(e, c[3], c[4], sn * a);
    return d;
  }
  function kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 100;
    d.height = a * 648;
    e.translate(Fr * a, a * 20);
    e.globalAlpha = b ? 0.5 : ub;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    nb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * Dl);
    e.restore();
    tb(e, c[yk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    tb(e, c[Ol]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    tb(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 43);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
    e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
    e.closePath();
    tb(e, c[yk]);
    e.translate(a * -20, a * -20);
    e.globalAlpha = jh;
    e.save();
    e.translate(a * 50.5, a * 349.5);
    nb(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
    e.restore();
    tb(e, c[1], c[2], db * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 538);
    e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
    e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
    e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
    e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
    e.closePath();
    tb(e, c[3], c[4], a * Db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 554);
    e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
    e.closePath();
    tb(e, undefined, c[gn], Xr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 569);
    e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
    e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
    e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
    e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
    e.closePath();
    tb(e, c[mh], c[6], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 581);
    e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
    e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
    e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
    e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
    e.closePath();
    tb(e, c[sb]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 106);
    e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
    e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
    e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
    e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
    e.closePath();
    tb(e, c[5], c[Vo], ih * a);
    e.save();
    e.translate(a * -46, a * -50);
    e.scale(Xn, C);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 80);
    e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
    e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
    e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
    e.closePath();
    tb(e, c[8]);
    e.restore();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 27);
    e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
    e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
    e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
    e.closePath();
    tb(e, c[S], c[9], a * X);
    e.scale(eh, 2);
    e.translate(a * -23, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 69);
    e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
    e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
    e.closePath();
    tb(e, c[ll]);
    return d;
  }
  function xd(b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    var g = b * 170;
    var i = b * 172;
    var a = g / Wq;
    var j = i / 2;
    e.width = g;
    e.height = i;
    f.translate(a, j + Rk * b);
    f.globalAlpha = c ? 0.5 : Ko;
    ab(f, 0, 0, b * 60);
    tb(f, d[0]);
    f.globalAlpha = 1;
    f.translate(0, b * -7);
    f.save();
    for (var h = 0; h < 10; h++) {
      f.rotate(Math.PI / mh);
      f.save();
      f.translate(b * 65, jj);
      gb(f, B, b * 20, In * b);
      tb(f, d[1], d[Uh], b * Ai);
      f.restore();
    }
    f.restore();
    ab(f, 0, $t, b * 60);
    tb(f, d[sn], d[Lb], b * 4);
    ab(f, 0, 0, b * 40);
    tb(f, d[uh]);
    ab(f, 0, Wh, b * 25);
    tb(f, d[Vo], d[tt], b * Ss);
    return e;
  }
  function Jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 647;
    e.translate(a * 20, a * Ye);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    nb(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(Cq * a, a * 615, a * nq, a * 607, a * 27, a * 573);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    tb(e, c[Mn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    tb(e, c[Fj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, xh * a, a * 96);
    e.closePath();
    tb(e, c[_s]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    tb(e, c[jj]);
    e.translate(-Ye * a, a * -Fr);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 45, a * 384.5);
    nb(e, -ng * a, a * -216.5, a * 30, a * 433, a * 10);
    e.restore();
    tb(e, c[1], c[C], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 572);
    e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
    e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
    e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
    e.bezierCurveTo(a * Ck, a * 615, a * el, a * 607, a * 27, a * 573);
    e.closePath();
    tb(e, c[nh], c[4], Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 587);
    e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
    e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
    e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 113);
    e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
    e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
    e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
    e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
    e.closePath();
    tb(e, c[3], c[Yn], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 139);
    e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
    e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
    e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 29);
    e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
    e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
    e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
    e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * Yj, a * 96);
    e.closePath();
    tb(e, c[6], c[_k], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 44, a * 54);
    e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
    e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
    e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
    e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
    e.closePath();
    tb(e, c[8]);
    return d;
  }
  function Md(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 169;
    e.globalAlpha = 0.5;
    e.translate(_s, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 139);
    e.bezierCurveTo(a * Hl, a * 163, a * 22, a * 156, a * 53, a * 157);
    e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
    e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = jh;
    e.translate(0, -Fh * a);
    e.save();
    e.translate(a * 86.5, a * 81.5);
    nb(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
    e.restore();
    tb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 84.5, a * 79);
    nb(e, a * -50.5, a * -49, a * 101, a * 98, a * ft);
    e.restore();
    tb(e, c[3], c[kn], Bb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 54);
    e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
    e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
    e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
    e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
    e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
    e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
    e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
    e.closePath();
    tb(e, c[4], c[5], Cj * a);
    e.save();
    e.translate(a * 28, a * 24);
    e.rotate(0);
    nb(e, a * -zr, a * -ve, a * 28, a * 28, a * zg);
    e.restore();
    tb(e, c[1], c[cu], a * 5);
    e.save();
    e.translate(a * 143, a * 23);
    e.rotate(yk);
    nb(e, -Ds * a, -Ds * a, a * 28, a * 28, qo * a);
    e.restore();
    tb(e, c[bt], c[2], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 80);
    e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * rs, a * 64);
    e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
    e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
    e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
    e.closePath();
    tb(e, c[Oq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(ok * a, a * 112);
    e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
    e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
    e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
    e.closePath();
    tb(e, c[Oi], c[ch], Gl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 127, a * 111);
    e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
    e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
    e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
    e.closePath();
    tb(e, c[Os]);
    e.globalAlpha = 0.5;
    e.translate(Fj, a * Mo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 15, a * 117);
    e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
    e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
    e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
    e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * hg, a * 129);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = Cs;
    e.translate(0, a * -Ea);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 127);
    e.bezierCurveTo(Qh * a, a * 117, a * 12, a * 109, a * 15, a * 103);
    e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
    e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
    e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
    e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
    e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
    e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, Fa * a, a * 127);
    e.closePath();
    tb(e, c[xt], c[lt], Oq * a);
    e.save();
    e.translate(a * 27.5, a * 138.5);
    nb(e, a * -13.5, a * -14.5, a * 27, a * 29, a * In);
    e.restore();
    tb(e, c[1], c[2], a * 5);
    e.save();
    e.translate(a * 143.5, a * 137);
    nb(e, a * -13.5, a * -Ct, a * 27, a * 28, a * 4);
    e.restore();
    tb(e, c[Yt], c[2], Th * a);
    return d;
  }
  function Bd(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    if (c == 0) {
      e.width = a * 566;
      e.height = a * 429;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 312.625, a * 39.046875);
      d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
      d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
      d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
      d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
      d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
      d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
      d.closePath();
      tb(d, b[0]);
    } else if (V == c) {
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 511;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 141.625, a * 49.296875);
      d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
      d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
      d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
      d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
      d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
      d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
      d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
      d.closePath();
      tb(d, b[$t]);
    } else if (c == 2) {
      var e;
      d = (e = document.createElement("canvas")).getContext("2d");
      e.width = a * 504;
      e.height = a * 408;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 153.625, a * 46.296875);
      d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
      d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
      d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
      d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
      d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
      d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
      d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
      d.closePath();
      tb(d, b[0]);
    }
    return e;
  }
  function Dd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 138;
    d.height = a * 133;
    e.globalAlpha = b ? 0.3 : js;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(a * 13, a * 84.640625, a * rb, a * 86.640625, a * 7, a * 78.640625);
    e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    tb(e, c[Wh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Sl * a, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * ft, a * 84.640625);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = Ur;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 73.640625);
    e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
    e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
    e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
    e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * Cl, a * 73.640625);
    e.closePath();
    tb(e, c[1], c[pa], qa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 28.640625);
    e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
    e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
    e.closePath();
    tb(e, c[3], c[2], a * f);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 26.640625);
    e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
    tb(e, Nl, c[_l], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 90, a * 26.640625);
    e.bezierCurveTo(qr * a, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
    tb(e, undefined, c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 79.640625);
    e.bezierCurveTo(Y * a, a * 84.640625, a * 9, a * 86.640625, Ij * a, a * 78.640625);
    e.bezierCurveTo(a * Rb, a * 69.640625, a * Wa, a * 67.640625, a * 31, a * 62.640625);
    e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
    e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
    e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
    e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
    e.closePath();
    tb(e, c[sn], c[4], a * mj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 8, a * 82.640625);
    e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
    e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
    e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
    e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
    e.bezierCurveTo(a * 0, a * 105.640625, a * Ss, a * 83.640625, Ke * a, a * 84.640625);
    e.closePath();
    tb(e, c[vo], c[4], a * 4);
    return d;
  }
  function Ed(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 135;
    d.height = a * 120;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 3.5, a * 55.25);
    e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
    e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
    e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
    e.closePath();
    tb(e, c[Kr], c[ub], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6.5, a * 43.25);
    e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
    e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
    e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
    e.closePath();
    tb(e, c[Dh], c[1], a * Va);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 120.5, a * 62.25);
    e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
    e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
    e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
    e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
    e.closePath();
    tb(e, c[Ol], c[1], a * 7);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.5, a * 27);
    e.bezierCurveTo(a * 48.5, cd * a, a * 93.5, Yq * a, a * 118.5, a * 26);
    e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
    e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
    e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
    e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
    e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
    e.closePath();
    tb(e, c[2], c[Mo], a * 7);
    return d;
  }
  function Id(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 43;
    d.height = a * 209;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Ol, a * 10);
    e.translate(a * 5, mh * a);
    e.save();
    e.translate(a * 21, a * 102.5);
    nb(e, a * -Ai, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    tb(e, c[Dh]);
    e.translate(kq, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * ql, ll * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * Uk, a * 41);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 1);
    e.bezierCurveTo(a * 28, on * a, a * 28, xh * a, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * iq, a * 36);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
    e.bezierCurveTo(a * mk, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * Jr, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, a * Ag, a * 160.5, a * 15, a * 149);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * 6);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    tb(e, c[0]);
    e.translate(Dh, a * -20);
    e.globalAlpha = Fo;
    e.translate(Ol, a * bb);
    e.translate(a * -pl, -vu * a);
    e.save();
    e.translate(a * 21, a * 102.5);
    nb(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
    e.restore();
    tb(e, c[1], c[$r], a * 4);
    e.translate(0, Pr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(vj * a, Hr * a);
    e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
    e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
    e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
    e.closePath();
    tb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * yl);
    e.bezierCurveTo(a * 28, a * 18, a * 28, a * Yj, a * 35, a * 35);
    e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
    e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
    e.closePath();
    tb(e, c[U], c[zk], qo * a);
    e.translate(kq, jj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 14, a * 146);
    e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
    e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
    e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
    e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
    e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, Yq * a, a * 172);
    e.bezierCurveTo(a * Qr, a * 171.5, cg * a, a * 171.5, a * zr, a * 171);
    e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
    e.bezierCurveTo(a * 15, a * 160.5, Ns * a, a * 160.5, a * 15, a * 149);
    e.closePath();
    tb(e, c[Eg], c[2], Yn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 21, a * Ll);
    e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
    e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
    e.closePath();
    tb(e, c[Ih]);
    return d;
  }
  function Sd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 92;
    d.height = a * 108;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * rk);
    e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
    e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
    e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
    e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
    e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
    e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
    e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * Ba, a * 84);
    e.bezierCurveTo(a * wg, a * 77, a * qa, a * 73, a * 7, a * 60);
    e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
    e.bezierCurveTo(a * 26, on * a, a * 26, a * 24, a * 31, a * lj);
    e.closePath();
    tb(e, c[Ko], c[Br], oj);
    return d;
  }
  function Qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 626;
    e.translate(a * mt, ql * a);
    e.globalAlpha = b ? 0.5 : ce;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    tb(e, c[0]);
    e.translate(a * -aq, a * -Gh);
    e.globalAlpha = Aj;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    tb(e, c[jh], c[pa], ih * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 129);
    e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
    e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
    e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
    e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
    e.closePath();
    tb(e, c[B]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 565);
    e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
    e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
    e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
    e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * ng);
    e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
    e.closePath();
    tb(e, undefined, c[yg], Oi * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 475);
    e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
    e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
    e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
    e.closePath();
    tb(e, c[Yn], c[5], Ih * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 496);
    e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
    tb(e, Tg, c[5], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 521);
    e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
    tb(e, kj, c[5], a * 8);
    return d;
  }
  function _d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 200;
    d.height = a * 200;
    e.save();
    e.translate(a * 112, a * 158);
    nb(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
    e.restore();
    tb(e, c[0]);
    e.save();
    e.translate(a * 170, a * Oj);
    nb(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
    e.restore();
    tb(e, c[Ko]);
    return d;
  }
  function Fd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 300;
    d.height = a * 300;
    e.globalAlpha = b ? 0.5 : er;
    e.save();
    e.translate(a * 150, a * 160);
    e.rotate(6.28);
    gb(e, 6, a * 146, a * 30);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = Fo;
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(6.28);
    gb(e, 6, a * 146, a * 30);
    e.restore();
    tb(e, c[1], c[2], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(rh);
    gb(e, 6, a * 105, a * 30);
    e.restore();
    tb(e, c[3], c[Dn], a * 8);
    e.save();
    e.translate(a * 150, a * 150);
    e.rotate(0);
    gb(e, _h, a * 66, a * 30);
    e.restore();
    tb(e, c[Lb], c[tg], a * 8);
    e.save();
    e.translate(a * 131, a * 116);
    gb(e, 7, a * 17, a * 8);
    e.restore();
    tb(e, c[6]);
    e.save();
    e.translate(a * 163, a * 168);
    gb(e, Eh, a * 25, Ss * a);
    e.restore();
    tb(e, c[Ll]);
    e.save();
    e.translate(a * 117, a * 151);
    gb(e, 7, a * 11, a * 8);
    e.restore();
    tb(e, c[6]);
    e.save();
    e.translate(a * 167, a * 122);
    gb(e, ph, Ws * a, a * 8);
    e.restore();
    tb(e, c[bg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 207);
    e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
    e.closePath();
    tb(e, undefined, c[Le], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 118, Bl * a);
    e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
    e.closePath();
    tb(e, Qi, c[2], a * xo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183, a * 100);
    e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
    e.closePath();
    tb(e, undefined, c[2], a * ea);
    return d;
  }
  function Rd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 151;
    d.height = a * 80;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 54);
    e.bezierCurveTo(a * 136, Ot * a, a * 129, a * 18, a * 114, Ys * a);
    e.bezierCurveTo(a * 51, xb * a, a * 36, Sa * a, a * 34, a * 16);
    e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
    e.closePath();
    tb(e, c[2], c[3], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130, a * 40);
    e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
    e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
    e.closePath();
    tb(e, c[0], c[ik], 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(Ye * a, a * 33);
    e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
    e.bezierCurveTo(a * 19, a * 49, a * kt, a * 49, Xq * a, a * 54);
    e.bezierCurveTo(a * Lb, a * 43, a * Hr, a * 35, a * 20, a * 32);
    e.closePath();
    tb(e, c[0], c[V], qa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * hg, a * 52);
    e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
    e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
    e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
    e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, on * a, a * 54);
    e.closePath();
    tb(e, c[0], c[Cs], 4);
    return d;
  }
  function jd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 90;
    d.height = a * 98;
    e.translate(ko, qa * a);
    if (ut === Kr) {
      e.globalAlpha = b ? 0.5 : 1;
      e.save();
      e.translate(a * 44, a * 50);
      e.rotate(0.2);
      gb(e, I, a * 41, Ke * a);
      e.restore();
      tb(e, c[Ko]);
    }
    e.globalAlpha = Ur;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.2);
    gb(e, 9, a * 41, a * 10);
    tb(e, c[Aj], c[yh], a * Yn);
    e.rotate(-0.32);
    gb(e, ks, a * 32, a * lj);
    tb(e, c[vo], c[Ka], a * 4);
    e.rotate(0.68);
    gb(e, Hk, a * 23, a * 8);
    tb(e, c[Th], c[Fq], a * 6);
    e.restore();
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(0);
    nb(e, a * -L, a * -25.5, hg * a, a * 51, a * 30);
    e.restore();
    tb(e, c[4], c[mj], a * _t);
    e.save();
    e.translate(a * 45, a * 45);
    e.rotate(Lu);
    nb(e, a * -26, a * -9, a * 52, a * 18, a * 30);
    e.restore();
    tb(e, c[4], c[Lb], a * 2);
    ab(e, a * 45, a * 29, a * 7);
    tb(e, c[5]);
    ab(e, a * 45, a * 61, a * ds);
    tb(e, c[Gl]);
    ab(e, a * 28, a * 45, a * 7);
    tb(e, c[5]);
    ab(e, a * 62, a * 45, a * wq);
    tb(e, c[lt]);
    return d;
  }
  function Ld(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 115;
    d.height = a * 585;
    e.scale(-1, Cs);
    e.translate(a * -110, Ko);
    e.translate(a * ft, a * Ke);
    e.globalAlpha = b ? 0.5 : bt;
    e.save();
    e.translate(a * 51.5, a * 342);
    nb(e, a * -14.5, a * -225, a * 29, a * 450, ws * a);
    e.restore();
    tb(e, c[jj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    tb(e, c[Ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * xu);
    e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, Th * a, a * 76);
    e.bezierCurveTo(a * 4, a * 98, Jr * a, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    tb(e, c[kq]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * He, a * 156);
    e.bezierCurveTo(Ko * a, a * 186, a * 10, a * 201, a * 43, a * 220);
    e.closePath();
    tb(e, c[Jt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, Q * a, a * 117, a * 11, a * 110);
    e.bezierCurveTo(mr * a, a * 115, $n * a, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    tb(e, c[yk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    tb(e, c[0]);
    e.translate(a * -10, a * -10);
    e.globalAlpha = 1;
    e.save();
    e.translate(a * 51.5, a * 342);
    nb(e, a * -14.5, a * -225, a * 29, a * 450, a * Mh);
    e.restore();
    tb(e, c[wg], c[2], _g * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 54, a * 83);
    e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
    e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
    e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
    e.closePath();
    tb(e, c[B], c[Ai], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 95, a * 97);
    e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * Mr);
    e.bezierCurveTo(a * 34, Dl * a, a * bg, a * 43, a * 5, a * 76);
    e.bezierCurveTo(a * 4, a * 98, a * Hg, a * 130, a * 64, a * 130);
    e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
    e.closePath();
    tb(e, c[vu], c[zk], Fq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 403);
    e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
    e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
    e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
    e.closePath();
    tb(e, c[Gb], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 427);
    e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
    tb(e, Rg, c[Xr], a * Fq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 448);
    e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
    tb(e, undefined, c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55, a * 176);
    e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
    e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
    e.closePath();
    tb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 50, a * 176);
    e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * Lq, a * 156);
    e.bezierCurveTo(a * 0, a * 186, a * Ke, a * 201, a * 43, a * 220);
    e.closePath();
    tb(e, c[3], c[4], a * Mr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59, a * 67);
    e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
    e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
    e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
    e.closePath();
    tb(e, c[iq], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 125);
    e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
    e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
    e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
    e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
    e.closePath();
    tb(e, c[El], c[8], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 171);
    e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
    e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
    e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
    e.closePath();
    tb(e, c[E], c[fg], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60, a * 68);
    e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
    e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
    e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
    e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
    e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
    e.closePath();
    tb(e, c[7], c[8], a * Fq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 71, a * 172);
    e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
    e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
    e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
    e.closePath();
    tb(e, c[Rk], c[8], a * zk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 151);
    e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
    e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
    e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
    e.closePath();
    tb(e, c[7], c[Ft], H * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 113);
    e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
    e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
    e.closePath();
    tb(e, c[vg], c[4], a * zk);
    return d;
  }
  function Wd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 108;
    d.height = a * 669;
    e.translate(vj * a, a * 20);
    e.globalAlpha = b ? 0.5 : 1;
    e.save();
    e.translate(a * 54, a * 389.5);
    nb(e, -$q * a, a * -228.5, a * 30, a * 457, a * Fs);
    e.restore();
    tb(e, c[ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    tb(e, c[rh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    tb(e, c[Kr]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    tb(e, c[jj]);
    e.translate(a * -fq, a * -vj);
    e.globalAlpha = jh;
    e.save();
    e.translate(a * 54, a * 389.5);
    e.rotate(0);
    nb(e, -kh * a, a * -228.5, a * 30, a * 457, a * 10);
    e.restore();
    tb(e, c[1], c[2], Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 579);
    e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
    e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
    e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
    e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
    e.closePath();
    tb(e, c[3], c[Yn], ea * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141);
    e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
    e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
    e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
    e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
    e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
    e.closePath();
    tb(e, c[3], c[In], al * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42, a * 152);
    e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
    e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
    e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 28);
    e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
    e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
    e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
    e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
    e.closePath();
    tb(e, c[6], c[7], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53, a * 53);
    e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
    e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
    e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
    e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
    e.closePath();
    tb(e, c[8]);
    return d;
  }
  const Gd = jj;
  function Od(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 345;
    d.height = a * 250;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 58);
    e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
    e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
    e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
    e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
    e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
    e.closePath();
    tb(e, c[1], c[ij], a * ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 108, a * 51);
    e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
    e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
    e.closePath();
    tb(e, c[3], c[gn], a * zn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 249, a * 27);
    e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
    e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
    e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
    e.closePath();
    tb(e, c[fa], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87, a * 78);
    e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
    e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
    e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
    e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
    e.closePath();
    tb(e, c[5], c[6], a * al);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 105);
    e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
    e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
    e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
    e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
    e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
    e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
    e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
    e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
    e.closePath();
    tb(e, c[Fo], c[2], a * ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 48, a * 130);
    e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
    e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
    e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
    e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
    e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
    e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
    e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
    e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
    e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
    e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
    e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
    e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
    e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
    e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
    e.closePath();
    tb(e, c[1], c[2], S * a);
    e.globalCompositeOperation = "destination-out";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    tb(e, c[Ba], c[8], Ih * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    tb(e, c[He], c[8], a * 8);
    e.globalCompositeOperation = "source-over";
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 133, a * 158);
    e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
    e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
    e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
    e.closePath();
    tb(e, lq, c[ob], a * Db);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 215, a * 146);
    e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
    e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
    e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
    e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
    e.closePath();
    tb(e, Uq, c[Ft], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 66);
    e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
    e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
    e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
    e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
    e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
    e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
    e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
    e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
    e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
    e.closePath();
    tb(e, c[7], c[ih], a * Cl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 185);
    e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
    e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
    e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
    e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
    e.closePath();
    tb(e, c[3], c[4], Ft * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226, a * 186);
    e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
    e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
    e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
    e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
    e.closePath();
    tb(e, c[3], c[4], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 172, a * 110);
    e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
    e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
    e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
    e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
    e.closePath();
    tb(e, c[3], c[4], a * Ss);
    return d;
  }
  function qd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(Fg * a, a * eg);
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, Yn * a, a * 401, Ai * a, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, $n * a, a * 57);
      e.bezierCurveTo(tg * a, a * 55, a * 4, a * 52, In * a, a * 43);
      e.bezierCurveTo(a * Yn, a * 30.5, a * 4, a * 30.5, a * 4, gl * a);
      e.bezierCurveTo(a * 16, a * 18.5, ge * a, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, de * a, a * 18.5, a * 12, a * L, a * 5);
      e.closePath();
      tb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 5, a * 70);
      e.bezierCurveTo(a * _g, a * 58, a * 5, a * 55, a * 17, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * Yt, a * 106, a * 5, a * 106, Bb * a, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, ss * a, a * 71);
      e.closePath();
      tb(e, b[3], b[_i], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
      e.bezierCurveTo(a * zg, a * 110, a * H, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      tb(e, b[Vl], b[Kk], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(Rh * a, a * 183);
      e.bezierCurveTo(Yt * a, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * zh, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * _t, a * 213, a * jt, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      tb(e, b[3], b[Dn], a * 32);
      ab(e, a * 41, a * 30, a * 14.7648230602334);
      tb(e, b[Mo], b[3], a * 32);
      ab(e, a * 369, a * 30, a * 15.556349186104045);
      tb(e, b[Vl], b[Fh], a * 32);
      ab(e, a * 364, a * 190, a * 15.620499351813308);
      tb(e, b[B], b[cl], a * 32);
      ab(e, a * 41, a * 186, a * 15.556349186104045);
      tb(e, b[3], b[ta], a * 32);
    } else if (c == 2) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 9, a * 5);
      e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
      e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
      e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
      e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
      e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
      e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
      e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * Xq, a * 57);
      e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, Yn * a, a * 43);
      e.bezierCurveTo(a * Lb, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
      e.bezierCurveTo(a * 16, a * 18.5, Kj * a, a * 18.5, a * 28, a * 19);
      e.bezierCurveTo(a * 18.5, a * dl, a * 18.5, a * 12, a * Qg, a * 5);
      e.closePath();
      tb(e, b[nh], b[Mo], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(mh * a, a * 70);
      e.bezierCurveTo(Gl * a, a * 58, U * a, a * 55, a * Vj, a * 57);
      e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
      e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
      e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
      e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
      e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
      e.bezierCurveTo(a * 1, a * 106, a * Bb, a * 106, a * cd, a * 87);
      e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
      e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
      e.closePath();
      tb(e, b[3], b[3], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 19, a * 158);
      e.bezierCurveTo(a * pa, a * 159, oj * a, a * 156, a * Cj, a * 118);
      e.bezierCurveTo(a * Lb, a * 110, a * 6, a * 107, a * 26, a * 109);
      e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
      e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
      e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
      e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
      e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
      e.closePath();
      tb(e, b[3], b[Mo], a * 32);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * mj, a * 183);
      e.bezierCurveTo(a * wg, a * 163, a * 4, a * 158, a * 28, a * 161);
      e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
      e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
      e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
      e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
      e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
      e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
      e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
      e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
      e.closePath();
      tb(e, b[3], b[3], a * 32);
      ab(e, a * 41, a * 30, a * 14.7648230602334);
      tb(e, b[Vl], b[3], a * 32);
      ab(e, a * 369, a * 30, a * 15.556349186104045);
      tb(e, b[3], b[fa], a * 32);
      ab(e, a * 364, a * 190, a * 15.620499351813308);
      tb(e, b[3], b[3], a * 32);
      ab(e, a * 41, a * 186, a * 15.556349186104045);
      tb(e, b[3], b[Ea], a * 32);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 5);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, Ai * a, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(a * 2, a * 55, kr * a, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * 4, a * 30.5, a * zg, a * 30.5, a * 4, zh * a);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, Ws * a, a * 18.5, x * a, a * Qg, cd * a);
    e.closePath();
    tb(e, b[1], b[Ol], Da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Rj, a * 70);
    e.bezierCurveTo(_g * a, a * 58, a * 5, a * 55, $h * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, Ns * a, a * 108);
    e.bezierCurveTo(Br * a, a * 106, a * 5, a * 106, U * a, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    tb(e, b[eh], b[0], a * fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(a * kn, a * 159, a * 4, a * 156, a * pl, a * 118);
    e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    tb(e, b[1], b[Ko], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * mj, a * 183);
    e.bezierCurveTo(a * 1, a * 163, f * a, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, N * a, a * 213);
    e.bezierCurveTo(Dn * a, a * 213, a * Ok, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    tb(e, b[eh], b[xb], a * pk);
    ab(e, a * 41, a * 30, a * 14.7648230602334);
    tb(e, b[$r], b[0], a * 12);
    ab(e, a * 369, a * 30, a * 15.556349186104045);
    tb(e, b[tg], b[Wh], tn * a);
    ab(e, a * 364, a * 190, a * 15.620499351813308);
    tb(e, b[Le], b[0], a * _o);
    ab(e, a * 41, a * 186, a * 15.556349186104045);
    tb(e, b[2], b[0], a * Da);
    return d;
  }
  function Nd(b, c, d, e) {
    var f = document.createElement("canvas");
    var g = f.getContext("2d");
    f.width = b * 450;
    f.height = b * 260;
    var h = Hd(b * 1, sh, d);
    g.drawImage(h, b * 0, b * Ko);
    if (e == 1) {
      g.translate(b * 100, b * 0);
      ab(g, b * 113, b * 120, b * 66);
      tb(g, Nl, d[4], b * qj);
      h = ru(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
      g.rotate(0.7);
      g.drawImage(h, b * 133, b * -64);
      g.rotate(-0.7);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      tb(g, kj, d[4], b * 13);
    } else if (e == 2) {
      g.translate(b * wa, b * Ol);
      ab(g, b * 113, b * 120, b * 66);
      tb(g, Hh, d[4], b * 13);
      g.translate(b * 30, b * 40);
      g.save();
      g.translate(b * 83.5, b * 66.5);
      nb(g, b * -40.5, b * -29.5, b * 81, b * 59, b * Ne);
      g.restore();
      tb(g, "#dff2f7", "#187484", b * 7);
      ab(g, b * 22, b * 82, b * de);
      tb(g, "#dff2f7", "#187484", b * Rk);
      ab(g, b * 145, b * 82, b * 12);
      tb(g, "#dff2f7", "#187484", b * 7);
      h = Eu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * wh, b * 85);
      h = Eu(b * 0.5, true, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 50, b * 85);
      h = Eu(b * 0.5, Oh, ["#80500b", "#7c4908"]);
      g.drawImage(h, b * 90, b * 85);
      h = Du(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Du(b * Eg, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 90, b * 105);
      h = Du(bt * b, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 125);
      h = Du(b * ik, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 50, b * 115);
      h = Du(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 30, b * 100);
      h = Du(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 80, b * 120);
      h = Du(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 110, b * 125);
      h = Du(b * 1, 0, ["#3d2a6e", "#8255b5"]);
      g.drawImage(h, b * 120, b * 105);
    } else if (e == 3) {
      g.translate(b * 100, b * ko);
      ab(g, b * 113, b * 120, b * 66);
      tb(g, La, d[4], b * 13);
      g.translate(b * 40, b * 50);
      g.save();
      g.translate(b * 71, b * 69);
      nb(g, b * -30, b * -42, b * 60, b * 84, b * bb);
      g.restore();
      tb(g, undefined, d[cd], Il * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 42, b * 28);
      g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
      g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
      g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
      g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
      g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
      g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
      g.closePath();
      tb(g, d[5], d[5], Ka * b);
      g.translate(b * -40, b * -50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 70, b * 70);
      g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
      g.closePath();
      tb(g, undefined, d[Ai], b * 13);
    } else if (e == 4) {
      g.scale(jh, dn);
      g.translate(b * 70, b * 50);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 23, b * 6);
      g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
      tb(g, Lk, d[5], Vg * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 59, b * 10);
      g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
      tb(g, undefined, d[5], cg * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 7, b * 55);
      g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
      tb(g, Uq, d[Oq], b * gj);
      g.translate(b * wh, kq * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 123, is * b);
      g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * K);
      g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
      g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
      tb(g, Nl, d[Gt], Ct * b);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 72, b * 63);
      g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
      tb(g, undefined, d[_g], Ck * b);
      g.translate(b * 10, b * 10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 141, Ft * b);
      g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
      g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
      tb(g, us, d[vu], b * 14);
      g.translate(b * Hr, b * -10);
      g.beginPath();
      g.lineCap = "round";
      g.lineJoin = "round";
      g.moveTo(b * 205, b * 124);
      g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
      g.bezierCurveTo(b * 239, kh * b, b * 250, b * 37, b * 249, b * 49);
      g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
      tb(g, undefined, d[Oq], b * mk);
    }
    return f;
  }
  function Hd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 260;
    e.translate(Fs * a, Hr * a);
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(a * 20, a * aq);
    nb(e, 0, 0, a * 400, a * 220, a * 30);
    tb(e, c[Dh]);
    e.globalAlpha = 1;
    e.translate(a * -Yh, a * -20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * L, a * Ca);
    e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
    e.bezierCurveTo(a * 397, a * 4, a * 401, a * Yn, a * 399, a * 23);
    e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
    e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
    e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
    e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
    e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
    e.bezierCurveTo(C * a, a * 55, a * 4, a * 52, a * 4, a * 43);
    e.bezierCurveTo(a * xt, a * 30.5, a * Dt, a * 30.5, a * 4, Ta * a);
    e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
    e.bezierCurveTo(a * 18.5, a * Ah, a * 18.5, x * a, wl * a, a * 5);
    e.closePath();
    tb(e, c[2], c[ce], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Oq, a * 70);
    e.bezierCurveTo(a * 5, a * 58, a * Rj, a * 55, hr * a, a * 57);
    e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
    e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
    e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
    e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
    e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, Et * a, a * 108);
    e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
    e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
    e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
    e.closePath();
    tb(e, c[3], c[1], _o * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19, a * 158);
    e.bezierCurveTo(ib * a, a * 159, a * In, a * 156, a * Th, a * 118);
    e.bezierCurveTo(a * qa, a * 110, a * dt, a * 107, a * 26, a * 109);
    e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
    e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
    e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
    e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
    e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
    e.closePath();
    tb(e, c[2], c[V], a * ps);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(In * a, a * 183);
    e.bezierCurveTo(Yt * a, a * 163, a * 4, a * 158, a * 28, a * 161);
    e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
    e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
    e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
    e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
    e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
    e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, N * a, a * 213);
    e.bezierCurveTo(a * 3, a * 213, a * Ok, a * 213, a * 4, a * 198);
    e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
    e.closePath();
    tb(e, c[3], c[jh], a * de);
    ab(e, a * 41, a * 30, a * 14.7648230602334);
    tb(e, c[3], c[Br], a * zt);
    ab(e, a * 369, a * 30, a * 15.556349186104045);
    tb(e, c[3], c[Fo], ul * a);
    ab(e, a * 364, a * 190, a * 15.620499351813308);
    tb(e, c[3], c[js], pk * a);
    ab(e, a * 41, a * 186, a * 15.556349186104045);
    tb(e, c[3], c[V], a * 12);
    return d;
  }
  const Ud = ub;
  function Yd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 187;
    d.height = a * 119;
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, 3);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, a * Yi, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    tb(e, c[5]);
    e.globalAlpha = ce;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, -sn);
    e.moveTo(a * 53, a * 45);
    e.bezierCurveTo(a * _i, a * 60, a * 11, a * 72, a * 19, a * 81);
    e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
    e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
    e.bezierCurveTo(a * 63, a * 101, a * 92, Qk * a, a * 138, a * 93);
    e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
    e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
    e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
    e.closePath();
    tb(e, c[0], c[Ur], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 151, a * 60);
    e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
    e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
    e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
    e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
    e.closePath();
    tb(e, c[Ko], c[sd], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 37, a * 53);
    e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
    e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
    e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
    e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
    e.closePath();
    tb(e, c[2], c[3], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 100, a * 36);
    e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
    e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
    e.closePath();
    tb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 43);
    e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
    tb(e, undefined, c[wg], a * 4);
    ab(e, a * 58, a * 50, Th * a);
    tb(e, c[4]);
    ab(e, a * 43, a * 65, gs * a);
    tb(e, c[4]);
    ab(e, a * 58, a * 73, Gt * a);
    tb(e, c[Yn]);
    ab(e, a * 58, a * 50, a * Wq);
    tb(e, c[Ju]);
    ab(e, a * 43, a * 65, a * 2);
    tb(e, c[Cj]);
    ab(e, a * 58, a * 73, a * 2);
    tb(e, c[5]);
    return d;
  }
  function Kd(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 496;
    d.height = a * 520;
    e.globalAlpha = b ? 0.5 : sd;
    e.translate(Dh, eg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.000030517578125, a * 256.67613983154297);
    e.bezierCurveTo(a * 1.000030517578125, a * 332.67613983154297, a * 23.000030517578125, a * 404.67613983154297, a * 95.00003051757812, a * 463.67613983154297);
    e.bezierCurveTo(a * 128.00003051757812, a * 491.67613983154297, a * 165.00003051757812, a * 507.67613983154297, a * 194.00003051757812, a * 512.676139831543);
    e.bezierCurveTo(a * 280.0000305175781, a * 517.676139831543, a * 291.0000305175781, a * 516.676139831543, a * 342.0000305175781, a * 497.67613983154297);
    e.bezierCurveTo(a * 425.0000305175781, a * 454.67613983154297, a * 469.0000305175781, a * 392.67613983154297, a * 468.0000305175781, a * 300.67613983154297);
    e.bezierCurveTo(a * 408.5000305175781, a * 365.17613983154297, a * 408.5000305175781, a * 365.17613983154297, a * 349.0000305175781, a * 429.67613983154297);
    e.bezierCurveTo(a * 256.0000305175781, a * 473.67613983154297, a * 167.00003051757812, a * 459.67613983154297, a * 78.00003051757812, a * 384.67613983154297);
    e.closePath();
    tb(e, c[tr]);
    e.globalAlpha = 1;
    e.translate(Ol, a * -10);
    ab(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    tb(e, c[Oq], undefined, a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.00003051757812, a * 263.4034118652344);
    e.bezierCurveTo(a * 109.00003051757812, a * 160.40341186523438, a * 185.00003051757812, a * 128.40341186523438, a * 222.00003051757812, a * 124.40341186523438);
    e.bezierCurveTo(a * 277.0000305175781, a * 116.40341186523438, a * 339.0000305175781, a * 134.40341186523438, a * 379.0000305175781, a * 195.40341186523438);
    e.bezierCurveTo(a * 409.0000305175781, a * 242.40341186523438, a * 416.0000305175781, a * 256.4034118652344, a * 428.0000305175781, a * 304.4034118652344);
    e.bezierCurveTo(a * 457.0000305175781, a * 203.40341186523438, a * 449.0000305175781, a * 183.40341186523438, a * 438.0000305175781, a * 162.40341186523438);
    e.bezierCurveTo(a * 381.0000305175781, a * 73.40341186523438, a * 360.0000305175781, a * 66.40341186523438, a * 257.0000305175781, a * 46.403411865234375);
    e.bezierCurveTo(a * 191.00003051757812, a * 45.403411865234375, a * 142.00003051757812, a * 65.40341186523438, a * 101.00003051757812, a * 115.40341186523438);
    e.closePath();
    tb(e, c[Fj]);
    e.globalAlpha = ik;
    var f = function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 496;
      c.height = a * 520;
      d.globalAlpha = ub;
      d.translate(0, a * -Pr);
      ab(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
      tb(d, b[Yt], b[2], a * 14);
      d.globalCompositeOperation = "destination-out";
      ab(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
      tb(d, b[0], b[0], a * 14);
      d.globalCompositeOperation = "source-over";
      return c;
    }(a, c);
    e.drawImage(f, 0, Ko);
    e.translate(0, a * -10);
    ab(e, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
    tb(e, jr, c[Ok], de * a);
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(Kr, a * Gl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.globalAlpha = ub;
    e.translate(Jt, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 325.0113830566406, a * 13.767059326171875);
    e.bezierCurveTo(a * 349.5113830566406, a * 25.767059326171875, a * 349.5113830566406, a * 25.767059326171875, a * 374.0113830566406, a * 37.767059326171875);
    e.bezierCurveTo(a * 384.0113830566406, a * 44.767059326171875, a * 383.0113830566406, a * 50.767059326171875, a * 368.0113830566406, a * 68.76705932617188);
    e.bezierCurveTo(a * 352.5113830566406, a * 91.26705932617188, a * 352.5113830566406, a * 91.26705932617188, a * 337.0113830566406, a * 113.76705932617188);
    e.bezierCurveTo(a * 328.0113830566406, a * 119.76705932617188, a * 328.0113830566406, a * 121.76705932617188, a * 312.0113830566406, a * 112.76705932617188);
    e.bezierCurveTo(a * 303.0113830566406, a * 108.26705932617188, a * 303.0113830566406, a * 108.26705932617188, a * 294.0113830566406, a * 103.76705932617188);
    e.bezierCurveTo(a * 287.0113830566406, a * 99.76705932617188, a * 293.0113830566406, a * 84.76705932617188, a * 297.0113830566406, a * 67.76705932617188);
    e.bezierCurveTo(a * 302.0113830566406, a * 47.767059326171875, a * 302.0113830566406, a * 47.767059326171875, a * 307.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 310.0113830566406, a * 15.767059326171875, a * 317.0113830566406, a * 12.767059326171875, a * 323.0113830566406, a * 13.767059326171875);
    e.closePath();
    tb(e, c[3], c[kn], a * Da);
    e.globalAlpha = b ? 0.5 : Br;
    e.translate(0, a * Ca);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    tb(e, c[0], c[0], a * Nh);
    e.globalAlpha = 1;
    e.translate(0, a * -Gt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 403.0113830566406, a * 89.76705932617188);
    e.bezierCurveTo(a * 413.0113830566406, a * 76.76705932617188, a * 418.0113830566406, a * 79.76705932617188, a * 428.0113830566406, a * 92.76705932617188);
    e.bezierCurveTo(a * 435.0113830566406, a * 99.76705932617188, a * 435.0113830566406, a * 99.76705932617188, a * 442.0113830566406, a * 106.76705932617188);
    e.bezierCurveTo(a * 450.0113830566406, a * 116.76705932617188, a * 445.0113830566406, a * 119.76705932617188, a * 433.0113830566406, a * 128.76705932617188);
    e.bezierCurveTo(a * 408.0113830566406, a * 146.26705932617188, a * 408.0113830566406, a * 146.26705932617188, a * 383.0113830566406, a * 163.76705932617188);
    e.bezierCurveTo(a * 376.0113830566406, a * 166.76705932617188, a * 377.0113830566406, a * 165.76705932617188, a * 368.0113830566406, a * 156.76705932617188);
    e.bezierCurveTo(a * 359.0113830566406, a * 144.76705932617188, a * 359.0113830566406, a * 142.76705932617188, a * 367.0113830566406, a * 133.76705932617188);
    e.closePath();
    tb(e, c[qo], c[yh], a * 12);
    e.globalAlpha = b ? 0.5 : wg;
    e.translate(Kr, a * Gt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.globalAlpha = jh;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.01138305664062, a * 1.767059326171875);
    e.bezierCurveTo(a * 246.51138305664062, a * 3.267059326171875, a * 246.51138305664062, a * 3.267059326171875, a * 265.0113830566406, a * 4.767059326171875);
    e.bezierCurveTo(a * 273.0113830566406, a * 5.767059326171875, a * 275.0113830566406, a * 11.767059326171875, a * 270.0113830566406, a * 27.767059326171875);
    e.bezierCurveTo(a * 264.0113830566406, a * 54.267059326171875, a * 264.0113830566406, a * 54.267059326171875, a * 258.0113830566406, a * 80.76705932617188);
    e.bezierCurveTo(a * 256.0113830566406, a * 92.76705932617188, a * 256.0113830566406, a * 94.76705932617188, a * 242.01138305664062, a * 93.76705932617188);
    e.bezierCurveTo(a * 226.01138305664062, a * 95.76705932617188, a * 225.01138305664062, a * 91.76705932617188, a * 225.01138305664062, a * 80.76705932617188);
    e.bezierCurveTo(a * 223.51138305664062, a * 50.267059326171875, a * 223.51138305664062, a * 50.267059326171875, a * 222.01138305664062, a * 19.767059326171875);
    e.bezierCurveTo(a * 219.01138305664062, a * 8.767059326171875, a * 224.01138305664062, a * 4.767059326171875, a * 227.01138305664062, a * 2.767059326171875);
    e.closePath();
    tb(e, c[4], c[2], a * 12);
    e.globalAlpha = b ? 0.5 : Cs;
    e.translate(yk, uh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    tb(e, c[Lu], c[0], a * 12);
    e.globalAlpha = Br;
    e.translate($t, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.01138305664062, a * 25.767059326171875);
    e.bezierCurveTo(a * 158.51138305664062, a * 19.767059326171875, a * 158.51138305664062, a * 19.767059326171875, a * 175.01138305664062, a * 13.767059326171875);
    e.bezierCurveTo(a * 188.01138305664062, a * 11.767059326171875, a * 188.01138305664062, a * 16.767059326171875, a * 191.01138305664062, a * 29.767059326171875);
    e.bezierCurveTo(a * 197.01138305664062, a * 60.267059326171875, a * 197.01138305664062, a * 60.267059326171875, a * 203.01138305664062, a * 90.76705932617188);
    e.bezierCurveTo(a * 206.01138305664062, a * 102.76705932617188, a * 196.01138305664062, a * 99.76705932617188, a * 181.01138305664062, a * 105.76705932617188);
    e.bezierCurveTo(a * 175.01138305664062, a * 108.76705932617188, a * 172.01138305664062, a * 104.76705932617188, a * 164.01138305664062, a * 84.76705932617188);
    e.bezierCurveTo(a * 152.51138305664062, a * 63.267059326171875, a * 152.51138305664062, a * 63.267059326171875, a * 141.01138305664062, a * 41.767059326171875);
    e.bezierCurveTo(a * 138.01138305664062, a * 35.767059326171875, a * 138.01138305664062, a * 29.767059326171875, a * 141.01138305664062, a * 27.767059326171875);
    e.closePath();
    tb(e, c[th], c[2], Nh * a);
    e.globalAlpha = b ? 0.5 : Cs;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    tb(e, c[0], c[xb], ps * a);
    e.globalAlpha = 1;
    e.translate(0, -lt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70.01138305664062, a * 76.76705932617188);
    e.bezierCurveTo(a * 83.01138305664062, a * 64.26705932617188, a * 83.01138305664062, a * 64.26705932617188, a * 96.01138305664062, a * 51.767059326171875);
    e.bezierCurveTo(a * 104.01138305664062, a * 44.767059326171875, a * 110.01138305664062, a * 51.767059326171875, a * 119.01138305664062, a * 66.76705932617188);
    e.bezierCurveTo(a * 135.01138305664062, a * 88.26705932617188, a * 135.01138305664062, a * 88.26705932617188, a * 151.01138305664062, a * 109.76705932617188);
    e.bezierCurveTo(a * 157.01138305664062, a * 119.76705932617188, a * 153.01138305664062, a * 122.76705932617188, a * 147.01138305664062, a * 129.76705932617188);
    e.bezierCurveTo(a * 138.01138305664062, a * 140.76705932617188, a * 136.01138305664062, a * 140.76705932617188, a * 122.01138305664062, a * 127.76705932617188);
    e.bezierCurveTo(a * 99.51138305664062, a * 110.26705932617188, a * 99.51138305664062, a * 110.26705932617188, a * 77.01138305664062, a * 92.76705932617188);
    e.bezierCurveTo(a * 66.01138305664062, a * 83.76705932617188, a * 66.01138305664062, a * 82.76705932617188, a * 69.01138305664062, a * 78.76705932617188);
    e.closePath();
    tb(e, c[4], c[pa], a * 12);
    e.globalAlpha = b ? 0.5 : V;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    tb(e, c[yk], c[0], a * 12);
    e.globalAlpha = 1;
    e.translate(Ol, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 33.011383056640625, a * 126.76705932617188);
    e.bezierCurveTo(a * 22.011383056640625, a * 149.76705932617188, a * 22.011383056640625, a * 149.76705932617188, a * 11.011383056640625, a * 172.76705932617188);
    e.bezierCurveTo(a * 7.011383056640625, a * 184.76705932617188, a * 11.011383056640625, a * 189.76705932617188, a * 36.011383056640625, a * 195.76705932617188);
    e.bezierCurveTo(a * 61.011383056640625, a * 202.26705932617188, a * 61.011383056640625, a * 202.26705932617188, a * 86.01138305664062, a * 208.76705932617188);
    e.bezierCurveTo(a * 100.01138305664062, a * 214.76705932617188, a * 102.01138305664062, a * 203.76705932617188, a * 109.01138305664062, a * 189.76705932617188);
    e.bezierCurveTo(a * 117.01138305664062, a * 171.76705932617188, a * 116.01138305664062, a * 166.76705932617188, a * 97.01138305664062, a * 156.76705932617188);
    e.bezierCurveTo(a * 74.01138305664062, a * 140.76705932617188, a * 74.01138305664062, a * 140.76705932617188, a * 51.011383056640625, a * 124.76705932617188);
    e.bezierCurveTo(a * 42.011383056640625, a * 118.76705932617188, a * 37.011383056640625, a * 119.76705932617188, a * 33.011383056640625, a * 126.76705932617188);
    e.closePath();
    tb(e, c[Gg], c[pa], fs * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, pl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    tb(e, c[jj], c[yk], a * 12);
    e.globalAlpha = 1;
    e.translate(jj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 13.011383056640625, a * 229.76705932617188);
    e.bezierCurveTo(a * 45.511383056640625, a * 233.76705932617188, a * 45.511383056640625, a * 233.76705932617188, a * 78.01138305664062, a * 237.76705932617188);
    e.bezierCurveTo(a * 92.01138305664062, a * 239.76705932617188, a * 92.01138305664062, a * 246.76705932617188, a * 91.01138305664062, a * 257.7670593261719);
    e.bezierCurveTo(a * 92.01138305664062, a * 275.7670593261719, a * 91.01138305664062, a * 274.7670593261719, a * 68.01138305664062, a * 276.7670593261719);
    e.bezierCurveTo(a * 42.511383056640625, a * 279.7670593261719, a * 42.511383056640625, a * 279.7670593261719, a * 17.011383056640625, a * 282.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 282.7670593261719, a * 3.011383056640625, a * 276.7670593261719, a * 2.011383056640625, a * 260.7670593261719);
    e.bezierCurveTo(a * 2.011383056640625, a * 231.76705932617188, a * 4.011383056640625, a * 232.76705932617188, a * 11.011383056640625, a * 230.76705932617188);
    e.closePath();
    tb(e, c[4], c[Le], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ko, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.globalAlpha = Fo;
    e.translate(0, -U * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 97.01138305664062, a * 329.7670593261719);
    e.bezierCurveTo(a * 68.51138305664062, a * 343.7670593261719, a * 68.51138305664062, a * 343.7670593261719, a * 40.011383056640625, a * 357.7670593261719);
    e.bezierCurveTo(a * 29.011383056640625, a * 360.7670593261719, a * 27.011383056640625, a * 361.7670593261719, a * 20.011383056640625, a * 346.7670593261719);
    e.bezierCurveTo(a * 16.511383056640625, a * 336.2670593261719, a * 16.511383056640625, a * 336.2670593261719, a * 13.011383056640625, a * 325.7670593261719);
    e.bezierCurveTo(a * 10.011383056640625, a * 307.7670593261719, a * 18.011383056640625, a * 312.7670593261719, a * 34.011383056640625, a * 306.7670593261719);
    e.bezierCurveTo(a * 59.511383056640625, a * 302.2670593261719, a * 59.511383056640625, a * 302.2670593261719, a * 85.01138305664062, a * 297.7670593261719);
    e.bezierCurveTo(a * 97.01138305664062, a * 294.7670593261719, a * 100.01138305664062, a * 297.7670593261719, a * 100.01138305664062, a * 307.7670593261719);
    e.bezierCurveTo(a * 105.01138305664062, a * 326.7670593261719, a * 103.01138305664062, a * 325.7670593261719, a * 97.01138305664062, a * 329.7670593261719);
    e.closePath();
    tb(e, c[4], c[ib], Da * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Wh, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    tb(e, c[$t], c[tr], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 394.0113830566406, a * 181.76705932617188);
    e.bezierCurveTo(a * 426.5113830566406, a * 166.76705932617188, a * 426.5113830566406, a * 166.76705932617188, a * 459.0113830566406, a * 151.76705932617188);
    e.bezierCurveTo(a * 469.0113830566406, a * 152.76705932617188, a * 469.0113830566406, a * 155.76705932617188, a * 472.0113830566406, a * 165.76705932617188);
    e.bezierCurveTo(a * 476.0113830566406, a * 177.26705932617188, a * 476.0113830566406, a * 177.26705932617188, a * 480.0113830566406, a * 188.76705932617188);
    e.bezierCurveTo(a * 483.0113830566406, a * 199.76705932617188, a * 480.0113830566406, a * 200.76705932617188, a * 460.0113830566406, a * 205.76705932617188);
    e.bezierCurveTo(a * 433.5113830566406, a * 210.26705932617188, a * 433.5113830566406, a * 210.26705932617188, a * 407.0113830566406, a * 214.76705932617188);
    e.bezierCurveTo(a * 395.0113830566406, a * 218.76705932617188, a * 397.0113830566406, a * 211.76705932617188, a * 393.0113830566406, a * 202.76705932617188);
    e.bezierCurveTo(a * 387.0113830566406, a * 188.76705932617188, a * 387.0113830566406, a * 187.76705932617188, a * 394.0113830566406, a * 181.76705932617188);
    e.closePath();
    tb(e, c[mj], c[pa], x * a);
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    tb(e, c[_s], c[Lg], a * 12);
    e.globalAlpha = 1;
    e.translate(Fj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 411.0113830566406, a * 234.76705932617188);
    e.bezierCurveTo(a * 446.0113830566406, a * 233.26705932617188, a * 446.0113830566406, a * 233.26705932617188, a * 481.0113830566406, a * 231.76705932617188);
    e.bezierCurveTo(a * 491.0113830566406, a * 232.76705932617188, a * 493.0113830566406, a * 239.76705932617188, a * 491.0113830566406, a * 251.76705932617188);
    e.bezierCurveTo(a * 490.0113830566406, a * 263.7670593261719, a * 490.0113830566406, a * 263.7670593261719, a * 489.0113830566406, a * 275.7670593261719);
    e.bezierCurveTo(a * 487.0113830566406, a * 283.7670593261719, a * 483.0113830566406, a * 284.7670593261719, a * 464.0113830566406, a * 280.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 273.7670593261719, a * 437.0113830566406, a * 273.7670593261719, a * 410.0113830566406, a * 266.7670593261719);
    e.bezierCurveTo(a * 400.0113830566406, a * 261.7670593261719, a * 401.0113830566406, a * 259.7670593261719, a * 402.0113830566406, a * 249.76705932617188);
    e.bezierCurveTo(a * 401.0113830566406, a * 237.76705932617188, a * 403.0113830566406, a * 235.76705932617188, a * 408.0113830566406, a * 234.76705932617188);
    e.closePath();
    tb(e, c[In], c[xl], a * ul);
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    tb(e, c[0], c[Gd], a * Ws);
    e.globalAlpha = 1;
    e.translate(Gd, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 400.0113830566406, a * 290.7670593261719);
    e.bezierCurveTo(a * 437.0113830566406, a * 301.2670593261719, a * 437.0113830566406, a * 301.2670593261719, a * 474.0113830566406, a * 311.7670593261719);
    e.bezierCurveTo(a * 484.0113830566406, a * 319.7670593261719, a * 481.0113830566406, a * 322.7670593261719, a * 474.0113830566406, a * 335.7670593261719);
    e.bezierCurveTo(a * 465.5113830566406, a * 354.7670593261719, a * 465.5113830566406, a * 354.7670593261719, a * 457.0113830566406, a * 373.7670593261719);
    e.bezierCurveTo(a * 449.0113830566406, a * 386.7670593261719, a * 444.0113830566406, a * 384.7670593261719, a * 427.0113830566406, a * 370.7670593261719);
    e.bezierCurveTo(a * 403.0113830566406, a * 354.7670593261719, a * 403.0113830566406, a * 354.7670593261719, a * 379.0113830566406, a * 338.7670593261719);
    e.bezierCurveTo(a * 371.0113830566406, a * 327.7670593261719, a * 373.0113830566406, a * 323.7670593261719, a * 377.0113830566406, a * 313.7670593261719);
    e.bezierCurveTo(a * 386.0113830566406, a * 292.7670593261719, a * 393.0113830566406, a * 288.7670593261719, a * 398.0113830566406, a * 291.7670593261719);
    e.closePath();
    tb(e, c[Fh], c[2], ps * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(tr, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    tb(e, c[Lu], c[rh], Ws * a);
    e.globalAlpha = 1;
    e.translate(Wh, a * -Bk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 366.0113830566406, a * 361.2216033935547);
    e.bezierCurveTo(a * 393.0113830566406, a * 383.2216033935547, a * 393.0113830566406, a * 383.2216033935547, a * 420.0113830566406, a * 405.2216033935547);
    e.bezierCurveTo(a * 427.0113830566406, a * 414.2216033935547, a * 425.0113830566406, a * 417.2216033935547, a * 413.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 405.5113830566406, a * 435.2216033935547, a * 405.5113830566406, a * 435.2216033935547, a * 398.0113830566406, a * 442.2216033935547);
    e.bezierCurveTo(a * 388.0113830566406, a * 451.2216033935547, a * 385.0113830566406, a * 445.2216033935547, a * 373.0113830566406, a * 428.2216033935547);
    e.bezierCurveTo(a * 358.5113830566406, a * 408.2216033935547, a * 358.5113830566406, a * 408.2216033935547, a * 344.0113830566406, a * 388.2216033935547);
    e.bezierCurveTo(a * 337.0113830566406, a * 378.2216033935547, a * 342.0113830566406, a * 377.2216033935547, a * 347.0113830566406, a * 371.2216033935547);
    e.bezierCurveTo(a * 359.0113830566406, a * 359.2216033935547, a * 361.0113830566406, a * 358.2216033935547, a * 364.0113830566406, a * 361.2216033935547);
    e.closePath();
    tb(e, c[4], c[Ok], a * 12);
    e.globalAlpha = b ? 0.5 : Ur;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    tb(e, c[0], c[0], Nh * a);
    e.globalAlpha = js;
    e.translate(_s, -Rj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 323.0113830566406, a * 393.2216033935547);
    e.bezierCurveTo(a * 338.0113830566406, a * 424.7216033935547, a * 338.0113830566406, a * 424.7216033935547, a * 353.0113830566406, a * 456.2216033935547);
    e.bezierCurveTo(a * 355.0113830566406, a * 467.2216033935547, a * 354.0113830566406, a * 469.2216033935547, a * 336.0113830566406, a * 475.2216033935547);
    e.bezierCurveTo(a * 326.0113830566406, a * 478.2216033935547, a * 326.0113830566406, a * 478.2216033935547, a * 316.0113830566406, a * 481.2216033935547);
    e.bezierCurveTo(a * 304.0113830566406, a * 484.2216033935547, a * 304.0113830566406, a * 477.2216033935547, a * 301.0113830566406, a * 454.2216033935547);
    e.bezierCurveTo(a * 295.5113830566406, a * 429.2216033935547, a * 295.5113830566406, a * 429.2216033935547, a * 290.0113830566406, a * 404.2216033935547);
    e.bezierCurveTo(a * 287.0113830566406, a * 396.2216033935547, a * 297.0113830566406, a * 394.2216033935547, a * 303.0113830566406, a * 392.2216033935547);
    e.bezierCurveTo(a * 316.0113830566406, a * 387.2216033935547, a * 318.0113830566406, a * 387.2216033935547, a * 323.0113830566406, a * 394.2216033935547);
    e.closePath();
    tb(e, c[Yn], c[2], Ql * a);
    e.globalAlpha = b ? 0.5 : bt;
    e.translate(0, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    tb(e, c[0], c[rh], a * 12);
    e.globalAlpha = 1;
    e.translate(0, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 270.0113830566406, a * 413.2216033935547);
    e.bezierCurveTo(a * 271.0113830566406, a * 445.7216033935547, a * 271.0113830566406, a * 445.7216033935547, a * 272.0113830566406, a * 478.2216033935547);
    e.bezierCurveTo(a * 273.0113830566406, a * 490.2216033935547, a * 267.0113830566406, a * 493.2216033935547, a * 249.01138305664062, a * 490.2216033935547);
    e.bezierCurveTo(a * 222.01138305664062, a * 492.2216033935547, a * 220.01138305664062, a * 485.2216033935547, a * 225.01138305664062, a * 467.2216033935547);
    e.bezierCurveTo(a * 230.51138305664062, a * 440.2216033935547, a * 230.51138305664062, a * 440.2216033935547, a * 236.01138305664062, a * 413.2216033935547);
    e.bezierCurveTo(a * 237.01138305664062, a * 405.2216033935547, a * 238.01138305664062, a * 404.2216033935547, a * 253.01138305664062, a * 403.2216033935547);
    e.bezierCurveTo(a * 269.0113830566406, a * 405.2216033935547, a * 270.0113830566406, a * 407.2216033935547, a * 269.0113830566406, a * 412.2216033935547);
    e.closePath();
    tb(e, c[4], c[yh], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(_s, a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    tb(e, c[0], c[0], a * 12);
    e.globalAlpha = V;
    e.translate(Dh, a * -cd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207.01138305664062, a * 406.2216033935547);
    e.bezierCurveTo(a * 197.51138305664062, a * 440.7216033935547, a * 197.51138305664062, a * 440.7216033935547, a * 188.01138305664062, a * 475.2216033935547);
    e.bezierCurveTo(a * 184.01138305664062, a * 485.2216033935547, a * 179.01138305664062, a * 491.2216033935547, a * 152.01138305664062, a * 477.2216033935547);
    e.bezierCurveTo(a * 136.51138305664062, a * 469.7216033935547, a * 136.51138305664062, a * 469.7216033935547, a * 121.01138305664062, a * 462.2216033935547);
    e.bezierCurveTo(a * 109.01138305664062, a * 453.2216033935547, a * 117.01138305664062, a * 447.2216033935547, a * 133.01138305664062, a * 427.2216033935547);
    e.bezierCurveTo(a * 146.51138305664062, a * 406.7216033935547, a * 146.51138305664062, a * 406.7216033935547, a * 160.01138305664062, a * 386.2216033935547);
    e.bezierCurveTo(a * 163.01138305664062, a * 377.2216033935547, a * 168.01138305664062, a * 378.2216033935547, a * 187.01138305664062, a * 387.2216033935547);
    e.bezierCurveTo(a * 206.01138305664062, a * 395.2216033935547, a * 208.01138305664062, a * 398.2216033935547, a * 207.01138305664062, a * 405.2216033935547);
    e.closePath();
    tb(e, c[3], c[cu], a * 12);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(ko, a * Th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    tb(e, c[Mn], c[Ko], _o * a);
    e.globalAlpha = 1;
    e.translate(Fj, a * -5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 130.01138305664062, a * 375.2216033935547);
    e.bezierCurveTo(a * 109.51138305664062, a * 400.7216033935547, a * 109.51138305664062, a * 400.7216033935547, a * 89.01138305664062, a * 426.2216033935547);
    e.bezierCurveTo(a * 82.01138305664062, a * 435.2216033935547, a * 77.01138305664062, a * 435.2216033935547, a * 62.011383056640625, a * 417.2216033935547);
    e.bezierCurveTo(a * 43.011383056640625, a * 397.2216033935547, a * 47.011383056640625, a * 395.2216033935547, a * 62.011383056640625, a * 382.2216033935547);
    e.bezierCurveTo(a * 84.01138305664062, a * 366.7216033935547, a * 84.01138305664062, a * 366.7216033935547, a * 106.01138305664062, a * 351.2216033935547);
    e.bezierCurveTo(a * 116.01138305664062, a * 344.2216033935547, a * 120.01138305664062, a * 347.2216033935547, a * 127.01138305664062, a * 356.2216033935547);
    e.bezierCurveTo(a * 137.01138305664062, a * 366.2216033935547, a * 137.01138305664062, a * 366.2216033935547, a * 131.01138305664062, a * 376.2216033935547);
    e.closePath();
    tb(e, c[4], c[kn], a * 12);
    return d;
  }
  function Vd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 33;
    c.height = a * 35;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 12.75, a * 7.1328125);
    d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
    d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
    d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
    d.closePath();
    tb(d, b[0]);
    return c;
  }
  function Xd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 330;
    d.translate(a * -60, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 7.953125);
    d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
    d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
    d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
    d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
    d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
    d.closePath();
    tb(d, b[Ol]);
    return c;
  }
  function Zd(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 260;
    d.globalAlpha = 0.5;
    ab(d, a * 126.5, a * 134, a * 119);
    tb(d, b[0]);
    d.globalAlpha = 1;
    ab(d, a * 126.5, a * 124, a * 119);
    tb(d, b[1], b[_l], a * gn);
    ab(d, a * 126.5, a * 127, A * a);
    tb(d, b[Kk]);
    d.globalAlpha = 0.5;
    ab(d, a * 126.5, a * 135, a * 81);
    tb(d, b[0]);
    d.globalAlpha = ub;
    ab(d, a * 126.5, a * 125, a * 84);
    tb(d, b[gn], b[5], a * 4);
    ab(d, a * 126.5, a * 125, a * 61);
    tb(d, b[Rb], b[7], a * 4);
    d.globalAlpha = 0.5;
    ab(d, a * 126.5, a * 134, a * 40);
    tb(d, b[8]);
    d.globalAlpha = 1;
    ab(d, a * 126.5, a * 125, a * 40);
    tb(d, b[9]);
    return c;
  }
  function $d(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 450;
    d.height = a * 790;
    e.translate(a * 5, uh * a);
    e.globalAlpha = b ? 0 : Jt;
    ab(e, a * 178.5, a * 172.828125, a * 150);
    tb(e, Lk, c[yk], a * 65);
    ab(e, a * 178.5, a * 172.828125, a * 150);
    tb(e, undefined, c[_s], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    nb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    tb(e, c[Dh]);
    e.save();
    e.translate(a * 136, a * 581.828125);
    nb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    tb(e, c[rh]);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    nb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    tb(e, c[Dh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 140, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
    e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
    e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
    e.closePath();
    tb(e, c[Ko]);
    e.translate(3, a * -Cj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    tb(e, c[Lg], c[0], a * ds);
    e.restore();
    e.globalAlpha = 1;
    e.translate(sl * a, a * 35);
    ab(e, a * 178.5, a * 172.828125, a * 150);
    tb(e, undefined, c[kn], a * 95);
    ab(e, a * 178.5, a * 172.828125, a * 150);
    tb(e, Rg, c[yl], a * 55);
    e.closePath();
    e.save();
    e.translate(a * 177, a * 512.328125);
    nb(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
    e.restore();
    tb(e, c[1], c[2], a * 20);
    e.save();
    e.translate(a * 136, a * 581.828125);
    nb(e, a * -39, a * -23, a * 78, a * 46, a * 25);
    e.restore();
    tb(e, c[1], c[_l], a * 20);
    e.save();
    e.translate(a * 135.5, a * 663.828125);
    nb(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
    e.restore();
    tb(e, c[1], c[2], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 114, a * 594.828125);
    e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
    e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
    e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
    e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
    e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
    e.closePath();
    tb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(0, a * 5);
    e.moveTo(a * 123, a * 294.828125);
    e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
    e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
    e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
    e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
    e.closePath();
    tb(e, c[1]);
    e.translate(0, a * -_g);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159, a * 679.828125);
    e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
    e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
    e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
    e.closePath();
    tb(e, c[sd]);
    e.save();
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157, a * 548.828125);
    e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
    e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
    e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
    e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
    e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
    e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
    e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
    e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
    e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
    e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
    e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
    e.closePath();
    tb(e, c[Aj], c[1], a * 7);
    e.restore();
    return d;
  }
  function ec(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 95;
    d.height = a * 85;
    if (c == rh) {
      e.translate(a * kg, a * 15);
      e.scale(0.9, 0.9);
      e.save();
      nb(e, Lu * a, a * vu, a * 90, a * 60, rk);
      tb(e, b[Fj]);
      e.globalCompositeOperation = "destination-out";
      ab(e, a * 25, a * 40, a * Dl);
      e.fill();
      ab(e, a * 65, a * 40, Fn * a);
      e.fill();
      e.restore();
      e.save();
      nb(e, _s, Lu, a * 90, a * 60, a * zq);
      tb(e, b[sd]);
      e.globalCompositeOperation = "destination-out";
      ab(e, a * 25, a * 40, a * 10);
      e.fill();
      ab(e, a * 65, a * 40, a * Bq);
      e.fill();
      e.restore();
    } else if (c == 1) {
      e.scale(0.8, 0.8);
      e.translate(m * a, a * 33);
      e.save();
      e.scale(0.56, 0.56);
      e.translate(a * -39, a * -60);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 32.5, a * 50.642852783203125);
      e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
      e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
      e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
      e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
      e.closePath();
      tb(e, b[Cs]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 116.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
      e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
      e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
      e.closePath();
      tb(e, b[V]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 166.5, a * 68.64285278320312);
      e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
      e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
      e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
      e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
      e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
      e.closePath();
      tb(e, b[Ud]);
      e.restore();
      e.save();
      nb(e, 0, a * 15, a * 90, a * 50, St * a);
      tb(e, b[Lu]);
      nb(e, 0, hl * a, a * 90, a * 50, Pr * a);
      tb(e, b[1]);
      e.globalCompositeOperation = "destination-out";
      ab(e, a * 25, a * 40, eg * a);
      e.fill();
      ab(e, a * 65, a * 40, a * rd);
      e.fill();
      e.restore();
    }
    return d;
  }
  function ic(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 272;
    d.height = a * 264;
    e.translate(0, a * 20);
    e.globalAlpha = b ? 0.5 : bt;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    tb(e, c[Jt]);
    e.translate(0, -_j * a);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56.999969482421875, a * 84.517333984375);
    e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
    e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
    e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
    e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
    e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
    e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
    e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
    e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
    e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
    e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
    e.closePath();
    tb(e, c[sd], c[2], Cl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
    e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
    e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
    e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
    e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
    e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
    e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
    e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
    e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
    e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
    e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
    e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
    e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
    e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
    e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
    e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
    e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
    e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
    e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
    e.closePath();
    tb(e, c[In], c[5], _ * a);
    return d;
  }
  function tc() {
    new Date().getTime();
    Hc();
    (function () {
      ΔΔ[Cr.ⲆⲆΔᐃΔᐃᐃ] = Ob(1, [{
        f: ic,
        x: 0,
        y: _s,
        a: 1,
        r: 0,
        c: [hj[lt], "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⲆΔΔⲆⵠⵠ] = ΔΔ[Cr.ⲆⲆΔᐃΔᐃᐃ];
      ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ] = [];
      ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ][tr] = Δᐃ.ᐃΔᐃⵠᐃΔⵠ;
      ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ][sd] = Δᐃ.ⵠᐃⲆⵠᐃⵠᐃ;
      ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ][2] = Δᐃ.ᐃᐃᐃⲆⵠⲆⵠ;
      ΔΔ[Cr.ΔΔⲆᐃΔΔΔ] = ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ];
      ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ] = [];
      ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ][0] = Δᐃ.ⲆⲆⲆⲆⲆⵠᐃ;
      ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ][js] = Δᐃ.ΔᐃⲆᐃΔⲆᐃ;
      ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ][2] = Δᐃ.ⵠᐃⵠⵠΔⵠⲆ;
      ΔΔ[Cr.ⵠΔⵠΔΔΔᐃ] = ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ];
      ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ] = [];
      ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ][yk] = Δᐃ.ⲆⵠⲆⵠΔⵠⵠ;
      ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ][jh] = Δᐃ.ΔⵠᐃⲆᐃΔΔ;
      ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ][2] = Δᐃ.ⲆⲆᐃΔᐃᐃΔ;
      ΔΔ[Cr.ᐃᐃⲆΔΔⵠⵠ] = ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ];
      ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ] = [];
      ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ][0] = Δᐃ.ΔⵠⲆᐃΔⵠΔ;
      ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ][1] = Δᐃ.ΔΔᐃⲆⲆⲆⵠ;
      ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ][Xn] = Δᐃ.ᐃΔᐃⲆⵠᐃⵠ;
      ΔΔ[Cr.ⵠᐃᐃⵠⵠⲆⲆ] = ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ];
      ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ] = [];
      ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ][0] = Δᐃ.ᐃⵠᐃⵠΔⲆΔ;
      ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ][1] = Δᐃ.ⵠⵠΔΔᐃΔᐃ;
      ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ][2] = Δᐃ.ᐃⵠⲆⲆΔΔⲆ;
      ΔΔ[Cr.ᐃⲆᐃⲆⵠⵠⵠ] = ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ];
      ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ] = [];
      ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ][yk] = Δᐃ.ⲆⵠΔΔⲆᐃΔ;
      ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ][1] = Δᐃ.ⲆΔⵠᐃΔⵠᐃ;
      ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ][Le] = Δᐃ.ⲆΔᐃΔⲆᐃⵠ;
      ΔΔ[Cr.ⵠⲆᐃΔᐃⲆⲆ] = ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ];
      ΔΔ[Cr.ⵠⵠⲆᐃⵠΔᐃ] = ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ];
      ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ] = [];
      ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ][0] = Δᐃ.ᐃΔⵠΔⵠᐃⵠ;
      ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ][Ud] = Δᐃ.ᐃⵠⲆᐃᐃᐃⲆ;
      ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ][2] = Δᐃ.ⲆⵠΔΔΔᐃⵠ;
      ΔΔ[Cr.ⲆⲆⵠⲆᐃⲆⲆ] = ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ];
      ΔΔ[Cr.ⵠⵠᐃⵠᐃΔⲆ] = ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ];
      ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ] = [];
      ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ][0] = Δᐃ.ᐃⵠⲆΔΔⵠᐃ;
      ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ][1] = Δᐃ.ᐃⲆⵠΔⲆⲆⲆ;
      ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ][2] = Δᐃ.ᐃⲆΔᐃΔⲆⵠ;
      ΔΔ[Cr.ᐃᐃΔᐃΔⲆⵠ] = ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ];
      ΔΔ[Cr.ⲆᐃᐃΔⵠΔΔ] = ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ];
      ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ] = [];
      ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ][Ol] = Δᐃ.ᐃⲆᐃⵠΔΔⵠ;
      ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ][ik] = Δᐃ.ⵠⵠᐃᐃⲆⲆⵠ;
      ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ][_l] = Δᐃ.ⲆⵠΔⲆⵠᐃⵠ;
      ΔΔ[Cr.ΔᐃΔᐃᐃᐃⵠ] = ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ];
      ΔΔ[Cr.ᐃᐃΔⵠⲆⲆⲆ] = ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ];
      ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ] = [];
      ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ][0] = Δᐃ.ΔⵠΔⲆⵠⵠΔ;
      ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ][1] = Δᐃ.ᐃⲆⲆΔᐃⵠⲆ;
      ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ][yg] = Δᐃ.ⲆᐃᐃᐃᐃⵠⲆ;
      ΔΔ[Cr.ᐃᐃⵠΔᐃⲆⲆ] = ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ];
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ] = [];
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ][Lg] = Δᐃ.ⲆΔⵠⲆⲆΔⲆ;
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ][Ur] = Δᐃ.ΔⵠⵠΔⲆᐃᐃ;
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ][tg] = Δᐃ.ⵠΔΔᐃΔⵠⲆ;
      ΔΔ[Cr.ⵠΔᐃΔΔⵠⵠ] = ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ];
      ΔΔ[Cr.ⲆⲆΔᐃᐃΔΔ] = ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ];
      ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ] = [];
      ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ][yk] = Δᐃ.ⵠᐃⲆᐃⲆⲆⲆ;
      ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ][1] = Δᐃ.ΔⲆΔⵠⵠᐃᐃ;
      ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ][2] = Δᐃ.ᐃⲆⲆⲆⵠⵠⵠ;
      ΔΔ[Cr.ⲆΔⲆᐃΔⵠᐃ] = ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ];
      ΔΔ[Cr.ⵠᐃⵠΔᐃᐃᐃ] = ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ];
      ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ] = [];
      ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ][Wh] = Δᐃ.ⵠᐃΔⲆᐃⲆΔ;
      ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ][er] = Δᐃ.ᐃⲆⲆᐃᐃΔΔ;
      ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ][Qs] = Δᐃ.ΔⲆⵠᐃⵠΔⵠ;
      ΔΔ[Cr.ᐃᐃⵠᐃΔᐃᐃ] = ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ];
      ΔΔ[Cr.ΔⵠΔⵠⲆⲆⵠ] = ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ];
      ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ] = [];
      ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ][ko] = Δᐃ.ⵠⵠΔⵠⲆⵠⵠ;
      ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ][1] = Δᐃ.ⲆΔᐃⲆᐃⲆΔ;
      ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ][2] = Δᐃ.ⲆⵠΔⵠΔᐃΔ;
      ΔΔ[Cr.ⲆΔⵠᐃⵠΔⵠ] = ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ];
      ΔΔ[Cr.ᐃⵠⲆⲆᐃⲆΔ] = ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ];
      ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ] = [];
      ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ][0] = Δᐃ.ⵠᐃΔᐃᐃᐃⲆ;
      ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ][dn] = Δᐃ.ΔⵠⲆⲆⵠΔⵠ;
      ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ][2] = Δᐃ.ΔⵠᐃⵠΔⵠⵠ;
      ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⲆ] = ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ];
      ΔΔ[Cr.ᐃᐃᐃⲆⲆΔⵠ] = ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ];
      ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ] = [];
      ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ][Ko] = Δᐃ.ᐃⲆΔⲆⲆΔᐃ;
      ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ][sd] = Δᐃ.ᐃΔᐃΔⲆⵠⲆ;
      ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ][2] = Δᐃ.ΔⵠᐃⵠΔᐃⲆ;
      ΔΔ[Cr.ⲆⵠᐃⵠⵠⲆⲆ] = ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ];
      ΔΔ[Cr.ⲆⵠᐃΔᐃᐃΔ] = ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ];
      ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ] = [];
      ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ][_s] = Δᐃ.ᐃΔΔᐃΔⲆᐃ;
      ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ][ik] = Δᐃ.ΔΔᐃᐃᐃΔⵠ;
      ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ][2] = Δᐃ.ᐃᐃⲆΔⲆΔΔ;
      ΔΔ[Cr.ⲆΔⲆⲆᐃᐃᐃ] = ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ⵠⲆⲆⵠⵠΔⲆ] = ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ] = [];
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ][Gd] = Δᐃ.ᐃⵠⲆⲆⵠⵠΔ;
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ][js] = Δᐃ.ⵠⵠⲆΔᐃΔᐃ;
      ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ][ib] = Δᐃ.ⲆⲆⲆᐃⵠⵠⲆ;
      ΔΔ[Cr.ⲆΔⵠⲆⲆⲆⲆ] = ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ];
      ΔΔ[Cr.ⲆΔⵠⲆΔΔΔ] = ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ];
      ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ] = [];
      ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ][0] = Δᐃ.ΔᐃⲆⲆᐃⵠΔ;
      ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ][1] = Δᐃ.ᐃΔⲆΔⵠⵠⵠ;
      ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ][Qs] = Δᐃ.ΔΔᐃΔᐃΔⲆ;
      ΔΔ[Cr.ΔΔΔᐃΔⲆᐃ] = ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ];
      ΔΔ[Cr.ΔᐃΔⵠᐃᐃΔ] = ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ];
      ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ] = [];
      ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ][Jt] = Δᐃ.ᐃⲆⲆᐃᐃᐃⲆ;
      ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ][1] = Δᐃ.ⲆΔⲆᐃⲆΔΔ;
      ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ][2] = Δᐃ.ᐃΔⲆΔᐃⲆᐃ;
      ΔΔ[Cr.ΔᐃᐃⵠⲆᐃⲆ] = ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ];
      ΔΔ[Cr.ⲆⲆⵠⵠΔⵠΔ] = ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ];
      ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ] = [];
      ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ][0] = Δᐃ.ⵠⵠⵠⲆⵠΔΔ;
      ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ][1] = Δᐃ.ⲆΔᐃΔΔⲆⲆ;
      ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ][2] = Δᐃ.ⲆⲆᐃΔΔᐃⵠ;
      ΔΔ[Cr.ᐃΔΔⲆⲆᐃᐃ] = ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ];
      ΔΔ[Cr.ⲆⲆⵠΔᐃⵠⵠ] = ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ];
      ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ] = [];
      ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ][0] = Δᐃ.ⵠᐃᐃΔⵠⲆΔ;
      ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ][Fo] = Δᐃ.ΔⵠⵠⲆΔⲆⲆ;
      ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ][$r] = Δᐃ.ΔΔⲆⵠᐃⵠΔ;
      ΔΔ[Cr.ΔⲆⲆⲆΔⲆⵠ] = ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ];
      ΔΔ[Cr.ⵠΔⵠΔΔⵠⵠ] = ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ];
      ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ] = [];
      ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ][0] = Δᐃ.ΔΔⵠⵠⲆⲆᐃ;
      ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ][1] = Δᐃ.ᐃⵠᐃᐃᐃΔⲆ;
      ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ][_l] = Δᐃ.ΔᐃΔⵠΔⵠᐃ;
      ΔΔ[Cr.ⵠΔⲆᐃⲆΔⲆ] = ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ];
      ΔΔ[Cr.ⵠⵠⲆⲆΔᐃΔ] = ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ];
      ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ] = [];
      ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ][0] = Δᐃ.ᐃᐃᐃᐃΔⲆⲆ;
      ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ][Br] = Δᐃ.ⵠᐃΔᐃⲆΔⲆ;
      ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ][2] = Δᐃ.ΔⵠⵠⲆⵠⵠᐃ;
      ΔΔ[Cr.ΔⲆⵠⲆᐃΔᐃ] = ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ];
      ΔΔ[Cr.ΔΔⵠⲆᐃⵠΔ] = ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ];
      ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ] = [];
      ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ][Kr] = Δᐃ.ᐃᐃΔⲆΔⲆⵠ;
      ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ][1] = Δᐃ.ⵠΔᐃᐃⲆΔᐃ;
      ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ][2] = Δᐃ.ⲆⲆΔᐃⵠᐃⲆ;
      ΔΔ[Cr.ⲆᐃΔΔΔⵠⲆ] = ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ];
      ΔΔ[Cr.ᐃⲆΔⲆⲆⵠⵠ] = ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ];
      ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ] = [];
      ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ][0] = Δᐃ.ᐃⲆᐃⲆᐃⵠᐃ;
      ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ][Aj] = Δᐃ.ⲆΔΔⵠⵠⲆΔ;
      ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ][2] = Δᐃ.ⵠⲆⲆΔⲆΔᐃ;
      ΔΔ[Cr.ᐃΔᐃΔⵠΔΔ] = ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ];
      ΔΔ[Cr.ⲆΔᐃⲆΔⵠⲆ] = ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ];
      ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ] = [];
      ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ][tr] = Δᐃ.ΔᐃⵠⲆⵠⵠⵠ;
      ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ][1] = Δᐃ.ᐃⵠᐃⲆᐃⲆᐃ;
      ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ][$r] = Δᐃ.ⲆᐃΔᐃⲆⵠⵠ;
      ΔΔ[Cr.ᐃⵠᐃᐃⲆⲆΔ] = ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ];
      ΔΔ[Cr.ⲆⲆΔΔⲆⲆⵠ] = ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ];
      ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ] = [];
      ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ][0] = Δᐃ.ⵠᐃⵠΔⲆᐃΔ;
      ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ][1] = Δᐃ.ⵠᐃⵠⵠᐃΔⵠ;
      ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ][2] = Δᐃ.ⵠᐃⲆⲆⲆⵠᐃ;
      ΔΔ[Cr.ΔᐃⲆᐃᐃⲆⵠ] = ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ];
      ΔΔ[Cr.ⵠⵠΔⲆᐃᐃΔ] = ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ];
      ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ] = [];
      ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ][0] = Δᐃ.ⲆⵠᐃΔⲆⵠΔ;
      ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ][1] = Δᐃ.ⲆΔᐃᐃⵠⲆᐃ;
      ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ][2] = Δᐃ.ΔΔΔΔᐃⵠᐃ;
      ΔΔ[Cr.ᐃᐃⲆΔⵠᐃᐃ] = ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ];
      ΔΔ[Cr.ᐃⲆⲆⵠᐃΔⵠ] = ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ];
      ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ] = [];
      ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ][yk] = Δᐃ.ⵠⲆⲆᐃΔᐃΔ;
      ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ][V] = Δᐃ.ⲆᐃΔⲆⲆΔΔ;
      ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ][2] = Δᐃ.ⵠⲆⵠⵠⵠⲆΔ;
      ΔΔ[Cr.ⲆᐃΔⵠⲆⲆΔ] = ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ];
      ΔΔ[Cr.ΔⵠΔⲆⲆⲆΔ] = ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ];
      ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ] = [];
      ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ][_s] = Δᐃ.ΔⵠⲆⲆⲆΔⵠ;
      ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ][1] = Δᐃ.ᐃΔⲆΔΔᐃⵠ;
      ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ][yg] = Δᐃ.ⵠⲆⵠⵠⵠⵠᐃ;
      ΔΔ[Cr.ⵠΔΔⵠⲆⵠⵠ] = ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ];
      ΔΔ[Cr.ⲆⵠΔⵠⲆΔⲆ] = ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ];
      ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ] = [];
      ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ][0] = Δᐃ.ⲆΔᐃⲆⵠⲆⵠ;
      ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ][1] = Δᐃ.ⲆΔᐃΔⵠⵠⵠ;
      ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ][_l] = Δᐃ.ⵠᐃⲆⲆⲆᐃⵠ;
      ΔΔ[Cr.ᐃⲆΔΔⲆⲆⵠ] = ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ];
      ΔΔ[Cr.ᐃΔᐃⲆⵠΔⵠ] = ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ];
      ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ] = [];
      ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ][Fj] = Δᐃ.ⵠΔΔᐃΔᐃⵠ;
      ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ][Aj] = Δᐃ.ⵠᐃⵠⵠⵠΔΔ;
      ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ][2] = Δᐃ.ⵠⵠⵠᐃΔⲆⲆ;
      ΔΔ[Cr.ΔⲆᐃⲆΔⵠⵠ] = ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ];
      ΔΔ[Cr.ΔΔⵠⲆⲆⵠΔ] = ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ];
      ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ] = [];
      ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ][0] = Δᐃ.ⵠⵠⲆᐃⵠᐃⲆ;
      ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ][1] = Δᐃ.ⵠⵠΔᐃⵠΔΔ;
      ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ][2] = Δᐃ.ᐃᐃΔⲆⵠᐃᐃ;
      ΔΔ[Cr.ᐃⲆⵠΔⲆΔⵠ] = ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ];
      ΔΔ[Cr.ⵠⵠⵠⵠⵠⲆⵠ] = ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ];
      ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ] = [];
      ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ][0] = Δᐃ.ⲆⲆᐃⵠΔΔⵠ;
      ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ][Br] = Δᐃ.ΔΔⵠⵠᐃΔⲆ;
      ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ][ij] = Δᐃ.ΔⵠⵠΔⵠⲆⲆ;
      ΔΔ[Cr.ΔⵠⲆᐃΔᐃⲆ] = ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ];
      ΔΔ[Cr.ΔΔᐃⲆᐃᐃᐃ] = ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ];
      ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ] = [];
      ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ][0] = Δᐃ.ΔΔΔΔᐃⲆⵠ;
      ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ][yl] = Δᐃ.ΔΔⵠΔⵠⵠⲆ;
      ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ][2] = Δᐃ.ΔᐃⲆⵠⵠⲆᐃ;
      ΔΔ[Cr.ᐃΔⵠⵠΔᐃⲆ] = ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ];
      ΔΔ[Cr.ⵠⵠⵠΔⲆⲆⵠ] = ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ];
      ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ] = [];
      ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ][0] = Δᐃ.ΔⲆᐃΔᐃⲆⵠ;
      ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ][er] = Δᐃ.ⲆⵠⵠⵠΔⵠⵠ;
      ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ][Qs] = Δᐃ.ᐃΔⲆᐃᐃⵠΔ;
      ΔΔ[Cr.ΔᐃⲆΔΔΔΔ] = ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ];
      ΔΔ[Cr.ΔΔΔᐃⵠⲆΔ] = ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ];
      ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ] = [];
      ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ][xb] = Δᐃ.ᐃⲆⵠΔΔⲆᐃ;
      ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ][sd] = Δᐃ.ⵠⲆΔΔⵠⲆΔ;
      ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ][Uh] = Δᐃ.ⵠᐃᐃⲆⵠⵠⲆ;
      ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆΔ] = ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ];
      ΔΔ[Cr.ΔᐃⵠⲆⲆⲆΔ] = ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ];
      ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ] = [];
      ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ][0] = Δᐃ.ⵠΔⵠᐃⲆⲆⲆ;
      ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ][Cs] = Δᐃ.ΔᐃᐃⲆⵠⲆᐃ;
      ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ][2] = Δᐃ.ⲆⵠⵠΔΔᐃΔ;
      ΔΔ[Cr.ᐃⲆᐃᐃⲆⵠΔ] = ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ];
      ΔΔ[Cr.ⵠΔⵠΔⲆᐃΔΔⲆ] = ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ];
      ΔΔ[Cr.ΔⲆᐃⵠΔᐃᐃ] = Ob(js, [{
        f: mb,
        x: Gd,
        y: Gd,
        a: 1,
        r: 0,
        c: ["#352b10", hj[Ul], "#bbbbbb", "#e0e1e0", "#c4c4c4"]
      }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃΔⵠⵠⲆΔᐃ] = ΔΔ[Cr.ΔⲆᐃⵠΔᐃᐃ];
      ΔΔ[Cr.ⵠΔΔᐃᐃᐃΔ] = Ob(1, [{
        f: wc,
        x: 0,
        y: Dh,
        a: Ud,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", hj[rn], "#bbbbbb"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔⲆⵠᐃⵠᐃᐃ] = ΔΔ[Cr.ⵠΔΔᐃᐃᐃΔ];
      ΔΔ[Cr.ΔΔⵠΔⲆᐃᐃ] = Ob(1, [{
        f: Zb,
        x: -Eg,
        y: 0,
        a: sd,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: Ub,
        x: -1,
        y: yk,
        a: 1,
        r: Mn,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }, {
        f: $b,
        x: -bt,
        y: 0,
        a: wg,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⲆⵠᐃⲆⲆᐃ] = ΔΔ[Cr.ΔΔⵠΔⲆᐃᐃ];
      ΔΔ[Cr.ⲆΔⵠⲆΔΔⲆ] = Ob(ub, [{
        f: Xb,
        x: jj,
        y: Mn,
        a: Ud,
        r: ko,
        c: ["#A89F67", "#9E8456"]
      }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⲆⵠⲆΔⲆⲆ] = Ob(1, [{
        f: Hd,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", hj[ag], "#523e26"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠⵠᐃΔⵠᐃ] = ΔΔ[Cr.ⵠⲆⵠⲆΔⲆⲆ];
      ΔΔ[Cr.ΔᐃᐃⵠΔᐃᐃ] = Ob(wg, [{
        f: Iu,
        x: 0,
        y: Kr,
        a: V,
        r: 0,
        c: ["#A89F67", "#9E8456"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔⵠⵠᐃΔⵠᐃ] = ΔΔ[Cr.ΔᐃᐃⵠΔᐃᐃ];
      ΔΔ[Cr.ⵠⲆⲆᐃⵠΔⲆ] = Ob(1, [{
        f: Iu,
        x: 0,
        y: Lu,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
      }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠΔⲆⲆᐃⲆΔ] = ΔΔ[Cr.ⵠⲆⲆᐃⵠΔⲆ];
      ΔΔ[Cr.ⲆⲆⲆΔⲆᐃᐃ] = Ob(1, [{
        f: Iu,
        x: 0,
        y: 0,
        a: 1,
        r: $t,
        c: ["#c67933", "#b17238"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆⲆⲆⵠⲆΔ] = ΔΔ[Cr.ⲆⲆⲆΔⲆᐃᐃ];
      ΔΔ[Cr.ⵠᐃᐃⲆⲆᐃⵠ] = Ob(jh, [{
        f: Iu,
        x: 0,
        y: xb,
        a: 1,
        r: Jt,
        c: ["#e8e8e8", "#bbbbbb"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃΔᐃΔΔᐃᐃ] = ΔΔ[Cr.ⵠᐃᐃⲆⲆᐃⵠ];
      ΔΔ[Cr.ΔᐃⵠΔⵠⲆᐃ] = Ob(1, [{
        f: Iu,
        x: Jt,
        y: 0,
        a: Br,
        r: 0,
        c: ["#328a56", "#449573"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠΔΔⵠᐃΔ] = ΔΔ[Cr.ΔᐃⵠΔⵠⲆᐃ];
      ΔΔ[Cr.ΔΔⲆⵠⵠᐃⲆ] = Ob(1, [{
        f: Iu,
        x: 0,
        y: 0,
        a: 1,
        r: kq,
        c: ["#c98e2f", "#a36b11"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃᐃΔΔⵠⵠⵠ] = ΔΔ[Cr.ΔΔⲆⵠⵠᐃⲆ];
      ΔΔ[Cr.ⲆΔΔᐃⵠⵠᐃ] = ΔΔ[Cr.ΔΔⲆⵠⵠᐃⲆ];
      ΔΔ[Cr.ΔⵠⲆΔᐃⲆΔ] = Ob(1, [{
        f: Iu,
        x: Fj,
        y: 0,
        a: 1,
        r: Kr,
        c: ["#13a56d", "#098a58"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃᐃᐃᐃⲆ] = ΔΔ[Cr.ΔⵠⲆΔᐃⲆΔ];
      ΔΔ[Cr.ᐃᐃⵠⲆⵠᐃᐃ] = ΔΔ[Cr.ΔⵠⲆΔᐃⲆΔ];
      ΔΔ[Cr.ᐃᐃΔΔⲆΔⲆ] = Ob(ik, [{
        f: Iu,
        x: 0,
        y: 0,
        a: Ur,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃⲆⵠⲆᐃⵠⵠ] = ΔΔ[Cr.ᐃᐃΔΔⲆΔⲆ];
      ΔΔ[Cr.ΔᐃⵠⵠⵠΔⲆ] = ΔΔ[Cr.ᐃᐃΔΔⲆΔⲆ];
      ΔΔ[Cr.ⲆᐃᐃⲆⵠⲆᐃ] = Ob(1, [{
        f: Iu,
        x: Wh,
        y: Kr,
        a: 1,
        r: $t,
        c: ["#b22419", "#99110e"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆΔᐃⵠⲆⵠ] = ΔΔ[Cr.ⲆᐃᐃⲆⵠⲆᐃ];
      ΔΔ[Cr.ΔⵠⲆⲆΔᐃⵠ] = ΔΔ[Cr.ⲆᐃᐃⲆⵠⲆᐃ];
      ΔΔ[Cr.ΔⲆⲆΔᐃⲆⵠ] = Ob(Eg, [{
        f: Pt,
        x: -2,
        y: -ib,
        a: js,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
      }, {
        f: Qt,
        x: -2,
        y: -pa,
        a: Br,
        r: -Math.PI / wq,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆᐃΔΔⵠⲆ] = ΔΔ[Cr.ΔⲆⲆΔᐃⲆⵠ];
      ΔΔ[Cr.ⲆⵠⲆⲆᐃⲆΔ] = Ob(dn, [{
        f: qb,
        x: -yg,
        y: -bt,
        a: 1,
        r: -Math.PI / _k,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
      }, {
        f: Qt,
        x: -cu,
        y: -1,
        a: Yt,
        r: -Math.PI / _k,
        c: ["#efd435", "#ec8d35", "#e96132"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠⲆⲆⵠⵠⵠ] = ΔΔ[Cr.ⲆⵠⲆⲆᐃⲆΔ];
      ΔΔ[Cr.ᐃⲆⲆᐃΔⵠΔ] = Ob(Aj, [{
        f: ku,
        x: C,
        y: _s,
        a: Aj,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
      }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔⵠΔᐃΔΔᐃ] = Ob(Ud, [{
        f: uu,
        x: 2,
        y: Dh,
        a: ub,
        r: Math.PI / cd,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆᐃⵠⵠΔⲆ] = Ob(1, [{
        f: ou,
        x: kn,
        y: 0,
        a: sd,
        r: Math.PI / cd,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆⵠ] = Ob(1, [{
        f: pu,
        x: cu,
        y: kq,
        a: Ur,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆΔΔⵠᐃΔ] = Ob(1, [{
        f: du,
        x: 2,
        y: Jt,
        a: 1,
        r: Math.PI / mh,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠᐃᐃⲆⵠΔⵠ] = Ob(1, [{
        f: tu,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠᐃⲆⵠⲆΔ] = Ob(1, [{
        f: nu,
        x: $r,
        y: Mn,
        a: 1,
        r: Math.PI / cd,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆⲆⵠⲆⵠΔ] = Ob(ce, [{
        f: su,
        x: -_t,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔΔΔΔΔᐃⵠ] = Ob(Fo, [{
        f: su,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠᐃΔⲆⵠⲆΔ] = Ob(Yt, [{
        f: su,
        x: -2,
        y: pl,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", hj[Ot]]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⵠⵠΔΔⲆᐃ] = Ob(sd, [{
        f: su,
        x: -eh,
        y: Gl,
        a: Ud,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔΔΔΔⵠⵠⵠ] = Ob(Eg, [{
        f: su,
        x: -pa,
        y: gs,
        a: er,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ] = [];
      ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ][Lu] = Δᐃ.ⵠⲆⲆᐃⲆⵠᐃ;
      ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ][1] = Δᐃ.ⵠⲆⲆⵠᐃⲆΔ;
      ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ][xl] = Δᐃ.ΔⲆΔⵠⵠⵠᐃ;
      ΔΔ[Cr.ᐃⲆΔᐃᐃⵠⵠ] = ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ];
      ΔΔ[Cr.ΔⵠⲆΔⲆⵠⲆ] = ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ];
      ΔΔ[Cr.ΔⵠⲆΔⲆⲆΔ] = Ob(bt, [{
        f: Cu,
        x: -uh,
        y: -Bk,
        a: Ur,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
      }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆⵠΔⵠⲆᐃⲆ] = Ob(Eg, [{
        f: Au,
        x: -Gl,
        y: -vu,
        a: dn,
        r: jj,
        c: ["#282823", "#877c2d", "#c4bc51"]
      }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠΔⲆΔᐃΔⲆ] = Ob(Ud, [{
        f: Hu,
        x: -5,
        y: -5,
        a: 1,
        r: xb,
        c: ["#232828", "#3fc9c9", "#74ede6"]
      }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠΔᐃΔΔⵠᐃ] = Ob(1, [{
        f: Pt,
        x: rh,
        y: -Bk,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔᐃΔΔⵠⵠⵠ] = ΔΔ[Cr.ⲆⲆᐃⵠⵠΔⲆ];
      ΔΔ[Cr.ⲆΔⵠⲆΔΔⵠ] = ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆⵠ];
      ΔΔ[Cr.ⲆᐃⲆΔᐃⵠⲆ] = ΔΔ[Cr.ⲆⲆΔΔⵠᐃΔ];
      ΔΔ[Cr.ᐃΔⲆⲆⵠⵠⲆ] = ΔΔ[Cr.ⵠᐃᐃⲆⵠΔⵠ];
      ΔΔ[Cr.ᐃⲆⲆᐃᐃΔⲆ] = ΔΔ[Cr.ⵠⵠᐃⲆⵠⲆΔ];
      ΔΔ[Cr.ΔᐃⲆⲆⲆᐃⲆ] = ΔΔ[Cr.ⲆⲆⲆⵠⲆⵠΔ];
      ΔΔ[Cr.ⲆⲆⵠΔᐃᐃΔ] = ΔΔ[Cr.ΔΔΔΔΔᐃⵠ];
      ΔΔ[Cr.ⲆΔᐃΔΔΔⲆ] = ΔΔ[Cr.ⵠᐃΔⲆⵠⲆΔ];
      ΔΔ[Cr.ⲆᐃⲆΔⵠⵠᐃ] = ΔΔ[Cr.ᐃⵠⵠΔΔⲆᐃ];
      ΔΔ[Cr.ⲆⵠΔᐃΔⲆᐃ] = ΔΔ[Cr.ΔΔΔΔⵠⵠⵠ];
      ΔΔ[Cr.ᐃⲆⲆⲆⵠⲆΔ] = Ob(Aj, [{
        f: Sb,
        x: 0,
        y: 0,
        a: wg,
        r: Lu
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔΔΔΔᐃⲆ] = Ob(jh, [{
        f: _b,
        x: 0,
        y: 0,
        a: 1,
        r: Ko,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃΔⲆΔᐃΔⲆ] = ΔΔ[Cr.ⲆΔΔΔΔᐃⲆ];
      ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃⵠ] = Ob(1, [{
        f: dd,
        x: -2,
        y: -2,
        a: 1,
        r: Mn,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃΔΔⲆⵠⵠᐃ] = ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃⵠ];
      ΔΔ[Cr.ᐃⵠΔΔΔᐃᐃ] = Ob(1, [{
        f: ad,
        x: 0,
        y: 0,
        a: ik,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠΔᐃⲆΔΔ] = ΔΔ[Cr.ᐃⵠΔΔΔᐃᐃ];
      ΔΔ[Cr.ⲆⲆΔᐃⲆΔⵠ] = Ob(1, [{
        f: dd,
        x: Kr,
        y: kq,
        a: ik,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆⵠⵠᐃΔⲆ] = ΔΔ[Cr.ⲆⲆΔᐃⲆΔⵠ];
      ΔΔ[Cr.ΔᐃᐃⲆⵠⲆΔ] = Ob(Br, [{
        f: ld,
        x: yk,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔΔⵠⲆⲆᐃⲆ] = ΔΔ[Cr.ΔᐃᐃⲆⵠⲆΔ];
      ΔΔ[Cr.ⲆⲆᐃⲆᐃΔⵠ] = Ob(ce, [{
        f: od,
        x: Mn,
        y: 0,
        a: dn,
        r: jj,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠΔᐃⲆΔⲆᐃ] = ΔΔ[Cr.ⲆⲆᐃⲆᐃΔⵠ];
      ΔΔ[Cr.ᐃᐃⲆᐃⵠᐃⲆ] = Ob(1, [{
        f: xd,
        x: 0,
        y: $t,
        a: ub,
        r: Ko,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔᐃⲆΔᐃⲆⵠ] = ΔΔ[Cr.ᐃᐃⲆᐃⵠᐃⲆ];
      ΔΔ[Cr.ᐃⵠⲆΔⲆⵠᐃ] = Ob(jh, [{
        f: Cd,
        x: Ko,
        y: jj,
        a: Fo,
        r: $t,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔᐃⵠⵠⵠⲆ] = ΔΔ[Cr.ᐃⵠⲆΔⲆⵠᐃ];
      ΔΔ[Cr.ᐃᐃᐃΔᐃᐃⵠ] = Ob(1, [{
        f: Cd,
        x: Fj,
        y: 0,
        a: 1,
        r: kq,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃᐃⵠᐃⲆⲆᐃ] = ΔΔ[Cr.ᐃᐃᐃΔᐃᐃⵠ];
      ΔΔ[Cr.ΔᐃⲆᐃⲆᐃⲆ] = Ob(Yt, [{
        f: md,
        x: 0,
        y: tr,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔⵠⵠᐃⵠΔⲆ] = ΔΔ[Cr.ΔᐃⲆᐃⲆᐃⲆ];
      ΔΔ[Cr.ⲆⲆⲆΔΔⲆⲆ] = Ob(1, [{
        f: md,
        x: $t,
        y: Ko,
        a: jh,
        r: Ol,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", hj[Ws]]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔⵠᐃΔΔⵠⵠ] = ΔΔ[Cr.ⲆⲆⲆΔΔⲆⲆ];
      ΔΔ[Cr.ΔⲆᐃⲆⲆⲆΔ] = Ob(Fo, [{
        f: vd,
        x: tr,
        y: Ko,
        a: 1,
        r: Gd,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆᐃᐃⵠⲆΔⲆ] = ΔΔ[Cr.ΔⲆᐃⲆⲆⲆΔ];
      ΔΔ[Cr.ᐃⵠᐃⲆⵠⲆⲆ] = Ob(1, [{
        f: bd,
        x: 0,
        y: 0,
        a: dn,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠᐃⲆᐃⵠΔⲆ] = ΔΔ[Cr.ᐃⵠᐃⲆⵠⲆⲆ];
      ΔΔ[Cr.ᐃⵠᐃᐃᐃᐃⲆ] = Ob(1, [{
        f: bd,
        x: 0,
        y: 0,
        a: Aj,
        r: Mn,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆᐃΔⲆᐃⲆ] = ΔΔ[Cr.ᐃⵠᐃᐃᐃᐃⲆ];
      ΔΔ[Cr.ΔᐃⵠᐃᐃΔⵠ] = Ob(jh, [{
        f: ud,
        x: Jt,
        y: 0,
        a: Cs,
        r: Fj,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃⵠᐃᐃΔΔᐃ] = ΔΔ[Cr.ΔᐃⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ᐃⵠΔⲆⵠΔΔ] = Ob(1, [{
        f: jd,
        x: 0,
        y: 0,
        a: yl,
        r: $t,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔᐃⲆⲆⲆⵠⲆ] = ΔΔ[Cr.ᐃⵠΔⲆⵠΔΔ];
      ΔΔ[Cr.ⵠΔΔᐃⲆΔΔ] = Ob(Ur, [{
        f: fd,
        x: 0,
        y: pa,
        a: 1,
        r: yk,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔᐃΔᐃΔⵠ] = ΔΔ[Cr.ⵠΔΔᐃⲆΔΔ];
      ΔΔ[Cr.ⵠⵠΔⲆΔⲆΔ] = Ob(1, [{
        f: Wb,
        x: kq,
        y: -B,
        a: 1,
        r: tr,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔⵠⵠⵠⲆᐃᐃ] = Ob(1, [{
        f: Wb,
        x: Lg,
        y: -3,
        a: jh,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
      }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃⲆΔⲆⲆᐃΔ] = ΔΔ[Cr.ΔⵠⵠⵠⲆᐃᐃ];
      ΔΔ[Cr.ᐃᐃⵠⲆᐃᐃΔ] = Ob(Eg, [{
        f: Nt,
        x: -Ik,
        y: -3,
        a: Yt,
        r: xb,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆⵠᐃᐃᐃⵠ] = Ob(1, [{
        f: Nt,
        x: -3,
        y: -Gg,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
      }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠⲆⲆᐃⵠ] = ΔΔ[Cr.ⲆⲆⵠᐃᐃᐃⵠ];
      ΔΔ[Cr.ᐃᐃΔⵠⵠᐃⵠ] = Ob(ce, [{
        f: Sd,
        x: -jg,
        y: -Ea,
        a: Aj,
        r: 0,
        c: ["#ef96be", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔⲆΔⵠΔⵠᐃ] = Ob(jh, [{
        f: Sd,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔΔⲆΔⵠⵠⲆ] = Ob(sd, [{
        f: gd,
        x: tr,
        y: rh,
        a: wg,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔⵠⲆⵠⲆᐃΔ] = Ob(1, [{
        f: gd,
        x: ko,
        y: 0,
        a: er,
        r: Gd,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃⵠⲆⵠⲆ] = Ob(1, [{
        f: Sd,
        x: xb,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆᐃΔᐃⵠᐃⵠ] = Ob(1, [{
        f: Sd,
        x: -_i,
        y: -Fh,
        a: sd,
        r: Lu,
        c: ["#231f20", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔᐃⵠΔᐃΔΔ] = Ob(1, [{
        f: Sd,
        x: -fa,
        y: -3,
        a: Eg,
        r: xb,
        c: ["#ffffff", "#b6222a"]
      }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔⲆⵠⵠⵠⲆᐃ] = Ob(1, [{
        f: Rd,
        x: Ko,
        y: ko,
        a: 1,
        r: yk,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠⵠΔΔⵠ] = ΔΔ[Cr.ΔⲆⵠⵠⵠⲆᐃ];
      ΔΔ[Cr.ΔΔⵠᐃᐃᐃΔ] = Ob(bt, [{
        f: Ed,
        x: 0,
        y: rh,
        a: js,
        r: ko,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠΔⵠⵠᐃⲆΔ] = ΔΔ[Cr.ΔΔⵠᐃᐃᐃΔ];
      ΔΔ[Cr.ⵠΔᐃᐃⲆⵠⲆ] = Ob(Fo, [{
        f: Dd,
        x: Lu,
        y: 0,
        a: Br,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔⲆⵠΔⲆΔΔ] = ΔΔ[Cr.ⵠΔᐃᐃⲆⵠⲆ];
      ΔΔ[Cr.ᐃΔⵠⵠΔⲆⲆ] = Ob(1, [{
        f: Vt,
        x: 0,
        y: Th,
        a: 1,
        r: Lu,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔᐃᐃⲆΔΔⲆ] = ΔΔ[Cr.ᐃΔⵠⵠΔⲆⲆ];
      ΔΔ[Cr.ᐃⵠΔΔΔΔΔ] = Ob(1, [{
        f: Tt,
        x: 0,
        y: U,
        a: Br,
        r: jj,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠⲆΔⲆⲆⲆ] = ΔΔ[Cr.ᐃⵠΔΔΔΔΔ];
      ΔΔ[Cr.ⲆⵠΔᐃᐃⲆΔ] = Ob(1, [{
        f: Kb,
        x: -ib,
        y: -$r,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
      }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔⵠⵠⵠⲆⲆ] = ΔΔ[Cr.ⲆⵠΔᐃᐃⲆΔ];
      ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ] = [];
      ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ][Jt] = Δᐃ.ⵠⲆᐃΔⲆΔᐃ;
      ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ][1] = Δᐃ.ΔⲆⲆⵠⲆⲆⵠ;
      ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ][2] = Δᐃ.ⲆᐃⲆⵠⵠᐃⲆ;
      ΔΔ[Cr.ΔⵠᐃⵠΔᐃΔ] = ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ];
      ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ] = [];
      ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ][0] = Δᐃ.ⲆᐃΔᐃᐃᐃⲆ;
      ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ][Cs] = Δᐃ.ΔΔⲆⲆΔᐃⵠ;
      ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ][2] = Δᐃ.ᐃΔΔⵠⵠⵠᐃ;
      ΔΔ[Cr.ⵠΔΔⵠⲆΔΔ] = ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ];
      ΔΔ[Cr.ⲆΔΔΔΔΔΔ] = ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ];
      ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ] = [];
      ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ][0] = Δᐃ.ᐃⵠᐃᐃⵠΔᐃ;
      ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ][1] = Δᐃ.ᐃⲆᐃⵠⲆⵠᐃ;
      ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ][2] = Δᐃ.ΔⵠⵠⵠⲆΔⵠ;
      ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆΔ] = ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ];
      ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⵠ] = ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ];
      ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ] = [];
      ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ][kq] = Δᐃ.ΔΔⵠⵠᐃⵠΔ;
      ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ][1] = Δᐃ.ΔΔⵠⵠᐃⵠΔ;
      ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ][tg] = Δᐃ.ΔΔⵠⵠᐃⵠΔ;
      ΔΔ[Cr.ⲆⲆⲆᐃᐃⲆΔ] = ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ];
      ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ] = [];
      ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ][Ol] = Δᐃ.ⲆᐃⲆⲆⲆⵠⵠ;
      ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ][1] = Δᐃ.ⲆᐃᐃΔᐃⲆΔ;
      ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ][kn] = Δᐃ.ⲆⲆΔΔⲆⲆᐃ;
      ΔΔ[Cr.ⲆᐃⲆᐃⵠᐃⲆ] = ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ];
      ΔΔ[Cr.ⲆⵠΔΔΔᐃⲆ] = ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ];
      ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ] = [];
      ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ][Ko] = Δᐃ.ΔⲆΔⲆⵠᐃᐃ;
      ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ][1] = Δᐃ.ΔⲆΔⲆⵠᐃᐃ;
      ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ][2] = Δᐃ.ΔⲆΔⲆⵠᐃᐃ;
      ΔΔ[Cr.ⵠⵠΔⲆⵠΔᐃ] = ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ];
      ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ] = [];
      ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ][rh] = Δᐃ.ⵠᐃΔⲆⵠᐃΔ;
      ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ][Aj] = Δᐃ.ⲆⵠⲆⲆΔᐃⲆ;
      ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ][Ok] = Δᐃ.ⲆΔΔⲆΔⵠⲆ;
      ΔΔ[Cr.ᐃᐃΔⲆᐃⲆᐃ] = ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ];
      ΔΔ[Cr.ΔⲆⵠⵠⵠⵠΔ] = ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ];
      ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ] = [];
      ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ][kq] = Δᐃ.ᐃⲆᐃᐃΔⲆⵠ;
      ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ][bt] = Δᐃ.ᐃᐃⵠΔᐃⲆᐃ;
      ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ][2] = Δᐃ.ⵠᐃΔⵠⵠᐃᐃ;
      ΔΔ[Cr.ⵠᐃᐃⲆᐃⵠⲆ] = ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ];
      ΔΔ[Cr.ⵠΔᐃⵠⲆᐃΔ] = ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ];
      ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ] = [];
      ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ][0] = Δᐃ.ⲆΔⲆⲆᐃΔⵠ;
      ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ][1] = Δᐃ.ᐃⵠΔⵠᐃⲆΔ;
      ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ][2] = Δᐃ.ⵠᐃⲆⵠⲆⵠᐃ;
      ΔΔ[Cr.ⲆᐃΔⵠⲆΔⲆ] = ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ];
      ΔΔ[Cr.ⵠⲆⵠⲆᐃΔᐃ] = ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ];
      ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ] = [];
      ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ][0] = Δᐃ.ᐃⲆⵠΔⵠΔᐃ;
      ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ][1] = Δᐃ.ᐃᐃⲆⵠⵠΔᐃ;
      ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ][Le] = Δᐃ.ᐃΔᐃΔⲆⵠⵠ;
      ΔΔ[Cr.ᐃⵠⵠᐃⲆᐃⲆ] = ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ];
      ΔΔ[Cr.ΔⲆⵠⵠᐃΔⲆ] = ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ];
      ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ] = [];
      ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ][0] = Δᐃ.ⵠᐃΔᐃΔΔᐃ;
      ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ][Cs] = Δᐃ.ᐃⲆⲆⲆΔΔⲆ;
      ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ][2] = Δᐃ.ΔᐃⵠᐃⵠΔⵠ;
      ΔΔ[Cr.ⵠᐃⵠᐃᐃⵠⵠ] = ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ];
      ΔΔ[Cr.ᐃΔᐃⵠᐃΔⲆ] = ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ];
      ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ] = [];
      ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ][$t] = Δᐃ.ⵠᐃᐃΔᐃᐃΔ;
      ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ][Aj] = Δᐃ.ⲆΔΔΔΔΔᐃ;
      ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ][2] = Δᐃ.ⲆⵠᐃᐃⵠⲆΔ;
      ΔΔ[Cr.ᐃⵠⵠⲆᐃⵠᐃ] = ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ];
      ΔΔ[Cr.ΔΔⲆⵠΔⲆΔ] = ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ];
      ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ] = [];
      ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ][0] = Δᐃ.ΔᐃΔΔⵠⵠΔ;
      ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ][Cs] = Δᐃ.ᐃΔⵠⵠⵠᐃⵠ;
      ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ][Uh] = Δᐃ.ᐃⲆΔⵠⲆⵠⲆ;
      ΔΔ[Cr.ⲆⲆⲆⵠⲆⲆᐃ] = ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ];
      ΔΔ[Cr.ⲆΔⲆⲆⵠΔⲆ] = ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ];
      ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ] = [];
      ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ][Kr] = Δᐃ.ⲆⲆΔⲆᐃⲆᐃ;
      ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ][Br] = Δᐃ.ᐃΔΔⵠⵠⵠⲆ;
      ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ][$r] = Δᐃ.ⲆΔΔᐃΔᐃⲆ;
      ΔΔ[Cr.ⲆᐃΔᐃⲆⲆΔ] = ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ];
      ΔΔ[Cr.ⲆⵠⵠΔᐃΔⲆ] = ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ];
      ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ] = [];
      ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ][yk] = Δᐃ.ᐃᐃⲆⵠⲆΔⵠ;
      ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ][jh] = Δᐃ.ᐃⵠⲆⵠⲆⲆⵠ;
      ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ][_l] = Δᐃ.Ⲇⵠⵠᐃⵠᐃⵠ;
      ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆᐃ] = ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ];
      ΔΔ[Cr.ᐃⵠᐃΔΔⵠᐃ] = ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ];
      ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ] = [];
      ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ][ko] = Δᐃ.ᐃᐃⲆΔⵠⵠᐃ;
      ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ][1] = Δᐃ.ᐃⲆⲆᐃⲆⲆΔ;
      ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ][2] = Δᐃ.ⲆⲆᐃⵠᐃΔᐃ;
      ΔΔ[Cr.ᐃΔⲆⵠⵠΔΔ] = ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ];
      ΔΔ[Cr.ⵠⲆⵠⵠⵠⲆⲆ] = ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ];
      ΔΔ[Cr.ⵠⵠⲆⲆⲆ] = [];
      ΔΔ[Cr.ⵠⵠⲆⲆⲆ][Dh] = Δᐃ.ⵠⵠⲆⲆⲆ;
      ΔΔ[Cr.ⵠⵠⲆⲆⲆ][Ur] = Δᐃ.ⵠⵠⲆⲆⲆ;
      ΔΔ[Cr.ⵠⵠⲆⲆⲆ][2] = Δᐃ.ⵠⵠⲆⲆⲆ;
      ΔΔ[Cr.ⲆⵠΔΔΔⲆⲆΔᐃ] = ΔΔ[Cr.ⵠⵠⲆⲆⲆ];
      ΔΔ[Cr.ᐃΔΔⲆⵠᐃΔ] = ΔΔ[Cr.ⵠⵠⲆⲆⲆ];
      ΔΔ[Cr.ⲆᐃⲆΔⲆ] = [];
      ΔΔ[Cr.ⲆᐃⲆΔⲆ][Jt] = Δᐃ.ⲆᐃⲆΔⲆ;
      ΔΔ[Cr.ⲆᐃⲆΔⲆ][Yt] = Δᐃ.ⲆᐃⲆΔⲆ;
      ΔΔ[Cr.ⲆᐃⲆΔⲆ][2] = Δᐃ.ⲆᐃⲆΔⲆ;
      ΔΔ[Cr.ⵠᐃᐃᐃΔⵠⵠΔⲆ] = ΔΔ[Cr.ⲆᐃⲆΔⲆ];
      ΔΔ[Cr.ΔΔⲆΔⵠⵠΔ] = ΔΔ[Cr.ⲆᐃⲆΔⲆ];
      ΔΔ[Cr.ᐃⵠᐃΔⵠ] = [];
      ΔΔ[Cr.ᐃⵠᐃΔⵠ][0] = Δᐃ.ᐃⵠᐃΔⵠ;
      ΔΔ[Cr.ᐃⵠᐃΔⵠ][1] = Δᐃ.ᐃⵠᐃΔⵠ;
      ΔΔ[Cr.ᐃⵠᐃΔⵠ][2] = Δᐃ.ᐃⵠᐃΔⵠ;
      ΔΔ[Cr.ⲆⵠΔΔⵠⵠⲆᐃᐃ] = ΔΔ[Cr.ᐃⵠᐃΔⵠ];
      ΔΔ[Cr.ΔᐃᐃⵠᐃΔⲆ] = ΔΔ[Cr.ᐃⵠᐃΔⵠ];
      ΔΔ[Cr.ΔⵠΔΔⵠ] = [];
      ΔΔ[Cr.ΔⵠΔΔⵠ][0] = Δᐃ.ΔⵠΔΔⵠ;
      ΔΔ[Cr.ΔⵠΔΔⵠ][1] = Δᐃ.ΔⵠΔΔⵠ;
      ΔΔ[Cr.ΔⵠΔΔⵠ][2] = Δᐃ.ΔⵠΔΔⵠ;
      ΔΔ[Cr.ΔΔΔⵠⵠΔᐃ] = ΔΔ[Cr.ΔⵠΔΔⵠ];
      ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ] = [];
      ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ][jj] = Δᐃ.ᐃΔⲆⵠⵠᐃⵠ;
      ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ][ce] = Δᐃ.ⵠΔⲆⲆᐃⵠⲆ;
      ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ][2] = Δᐃ.ⵠⵠⵠΔΔᐃᐃ;
      ΔΔ[Cr.ᐃⲆᐃΔᐃⲆⲆ] = ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ];
      ΔΔ[Cr.ⲆⵠΔⵠⵠⵠΔ] = ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ];
      ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ] = [];
      ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ][0] = Δᐃ.ⲆⲆⲆᐃᐃΔΔ;
      ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ][Yt] = Δᐃ.ⵠᐃⵠΔΔᐃᐃ;
      ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ][2] = Δᐃ.ⲆΔᐃᐃⲆᐃΔ;
      ΔΔ[Cr.ⲆΔᐃᐃΔΔⲆ] = ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ];
      ΔΔ[Cr.ΔᐃⲆⵠΔᐃⲆ] = ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ];
      ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ] = [];
      ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ][0] = Δᐃ.ⲆᐃⲆⵠⵠΔⵠ;
      ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ][Fo] = Δᐃ.ⵠᐃⵠⵠⵠᐃⲆ;
      ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ][2] = Δᐃ.ᐃⵠΔⵠⵠⲆⲆ;
      ΔΔ[Cr.ΔⵠᐃⲆⲆᐃΔ] = ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ];
      ΔΔ[Cr.ⵠⵠⵠΔⵠⲆⵠ] = ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ];
      ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ] = [];
      ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ][0] = Δᐃ.ᐃⲆⲆⵠⲆⵠⵠ;
      ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ][1] = Δᐃ.ⵠᐃΔⵠᐃΔⲆ;
      ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ][2] = Δᐃ.ΔΔΔⲆΔᐃⲆ;
      ΔΔ[Cr.ΔⵠⵠᐃⲆⵠᐃ] = ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ];
      ΔΔ[Cr.ⵠΔⲆⵠⲆΔΔ] = ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ];
      ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ] = [];
      ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ][0] = Δᐃ.ΔⲆΔⵠᐃΔⲆ;
      ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ][yl] = Δᐃ.ᐃᐃᐃΔⵠᐃᐃ;
      ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ][2] = Δᐃ.ⲆⵠⲆΔⵠΔⲆ;
      ΔΔ[Cr.ᐃⲆⲆᐃΔᐃᐃ] = ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ];
      ΔΔ[Cr.ΔⲆⲆⵠᐃⵠΔ] = ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ];
      ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ] = [];
      ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ][0] = Δᐃ.ᐃᐃΔⲆᐃΔⲆ;
      ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ][js] = Δᐃ.ⲆⲆⵠⲆⵠΔᐃ;
      ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ][$r] = Δᐃ.ᐃⵠΔΔᐃΔⵠ;
      ΔΔ[Cr.ⵠⲆⵠⵠᐃΔⲆ] = ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ];
      ΔΔ[Cr.ⵠΔⵠΔΔⲆᐃ] = ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ];
      ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ] = [];
      ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ][Dh] = Δᐃ.ᐃᐃⵠΔᐃᐃᐃᐃⵠ;
      ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ][V] = Δᐃ.ΔⵠⵠⲆᐃⲆΔᐃⵠ;
      ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ][eh] = Δᐃ.ΔⵠⵠᐃⵠΔⲆΔⲆ;
      ΔΔ[Cr.ΔⲆᐃⵠᐃⵠᐃ] = ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ];
      ΔΔ[Cr.ⲆⲆᐃᐃᐃΔΔ] = ΔΔ[Cr.ᐃᐃΔⲆᐃᐃⵠ];
      ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ] = [];
      ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ][0] = Δᐃ.ᐃΔΔᐃⲆⲆΔ;
      ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ][1] = Δᐃ.ⵠᐃΔⲆⲆⲆⲆ;
      ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ][Ok] = Δᐃ.ᐃᐃⲆⲆⵠⲆΔ;
      ΔΔ[Cr.ΔⵠΔⵠⲆΔᐃ] = ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ];
      ΔΔ[Cr.ⵠΔⲆⲆΔΔⲆ] = ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ];
      ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ] = [];
      ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ][0] = Δᐃ.ⵠⲆᐃΔΔΔⵠ;
      ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ][1] = Δᐃ.ⵠⵠⵠⵠⲆᐃⲆ;
      ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ][2] = Δᐃ.ᐃⲆᐃᐃΔΔⲆ;
      ΔΔ[Cr.ⲆᐃⲆΔᐃⵠᐃ] = ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ];
      ΔΔ[Cr.ΔⵠⲆⲆⵠⲆΔ] = ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ];
      ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ] = [];
      ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ][jj] = Δᐃ.ⵠⲆⵠⵠⵠΔⵠ;
      ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ][sd] = Δᐃ.ⵠᐃΔⵠⲆᐃⲆ;
      ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ][2] = Δᐃ.ⵠⵠᐃⵠᐃⵠⵠ;
      ΔΔ[Cr.ΔⵠⵠⲆΔⵠΔ] = ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ];
      ΔΔ[Cr.ᐃⵠᐃⲆⲆⵠⵠ] = ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ];
      ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ] = [];
      ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ][0] = Δᐃ.ᐃⵠᐃΔΔᐃᐃ;
      ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ][1] = Δᐃ.ⲆⵠΔⲆⵠᐃᐃ;
      ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ][2] = Δᐃ.ΔⵠⲆⵠΔᐃⵠ;
      ΔΔ[Cr.ᐃΔΔⵠⲆⲆᐃ] = ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ];
      ΔΔ[Cr.ⵠⵠⲆᐃⲆⵠΔ] = ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ];
      ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ] = [];
      ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ][0] = Δᐃ.ⲆⵠᐃⵠΔⵠᐃ;
      ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ][1] = Δᐃ.ᐃⲆⵠⵠᐃⵠᐃ;
      ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ][2] = Δᐃ.ΔΔᐃⵠⵠⵠΔ;
      ΔΔ[Cr.ⵠᐃΔᐃΔᐃⲆ] = ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ];
      ΔΔ[Cr.ⵠΔΔΔⵠΔⲆ] = ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ];
      ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ] = [];
      ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ][Kr] = Δᐃ.ⲆⵠⲆΔΔᐃⲆ;
      ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ][1] = Δᐃ.ⲆⲆⲆᐃⲆⲆᐃ;
      ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ][C] = Δᐃ.ᐃΔⵠⵠᐃⵠᐃ;
      ΔΔ[Cr.ΔᐃᐃᐃΔⲆᐃ] = ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ];
      ΔΔ[Cr.ⲆⵠⵠᐃⲆΔⵠ] = ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ];
      ΔΔ[Cr.ⵠⵠⵠᐃΔⵠⵠ] = Ob(Cs, [{
        f: zc,
        x: Dh,
        y: yk,
        a: 1,
        r: kq,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
      }, {
        f: Fc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
      }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃΔᐃⵠᐃ] = ΔΔ[Cr.ⵠⵠⵠᐃΔⵠⵠ];
      ΔΔ[Cr.ⲆΔⲆⵠᐃΔⲆ] = Ob(sd, [{
        f: yd,
        x: 0,
        y: ko,
        a: Cs,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃⲆⲆⲆᐃ] = ΔΔ[Cr.ⲆΔⲆⵠᐃΔⲆ];
      ΔΔ[Cr.ⲆΔⵠⵠΔⲆᐃ] = Ob(ik, [{
        f: Md,
        x: 0,
        y: xb,
        a: 1,
        r: Lu,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
      }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠΔⵠⵠΔⵠ] = ΔΔ[Cr.ⲆΔⵠⵠΔⲆᐃ];
      ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆⲆ] = ΔΔ[Cr.ⲆΔⵠⵠΔⲆᐃ];
      ΔΔ[Cr.ΔⵠⵠΔⵠⲆⵠ] = Ob(1, [{
        f: zd,
        x: Lg,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔⵠⵠⵠⲆᐃ] = ΔΔ[Cr.ΔⵠⵠΔⵠⲆⵠ];
      ΔΔ[Cr.ᐃⲆᐃⲆⲆⵠᐃ] = Ob(1, [{
        f: Ld,
        x: yh,
        y: Gd,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⵠⵠⵠⵠⲆⲆ] = ΔΔ[Cr.ᐃⲆᐃⲆⲆⵠᐃ];
      ΔΔ[Cr.ᐃΔⵠΔⲆⵠΔ] = ΔΔ[Cr.ᐃⲆᐃⲆⲆⵠᐃ];
      ΔΔ[Cr.ᐃΔⲆⲆΔᐃⲆ] = Ob(1, [{
        f: Qd,
        x: Wq,
        y: $t,
        a: 1,
        r: Math.PI / pl,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠⲆΔⲆⲆΔ] = ΔΔ[Cr.ᐃΔⲆⲆΔᐃⲆ];
      ΔΔ[Cr.ⲆΔᐃᐃⵠΔⵠ] = Ob(1, [{
        f: kd,
        x: Wq,
        y: 0,
        a: ce,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃΔⵠⵠⵠΔᐃ] = ΔΔ[Cr.ⲆΔᐃᐃⵠΔⵠ];
      ΔΔ[Cr.ΔΔΔᐃΔᐃᐃ] = Ob(1, [{
        f: Jd,
        x: 2,
        y: 0,
        a: yl,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", hj[Ta], "#d2ca59"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⲆⲆΔΔΔⵠ] = ΔΔ[Cr.ΔΔΔᐃΔᐃᐃ];
      ΔΔ[Cr.ΔᐃⵠΔΔᐃⲆ] = Ob(1, [{
        f: Pd,
        x: yh,
        y: 0,
        a: sd,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠⲆ] = ΔΔ[Cr.ΔᐃⵠΔΔᐃⲆ];
      ΔΔ[Cr.ΔΔΔᐃⵠΔⲆ] = Ob(1, [{
        f: Wd,
        x: 2,
        y: $t,
        a: Ud,
        r: Math.PI / Rj,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⲆⲆᐃⲆΔⲆ] = ΔΔ[Cr.ΔΔΔᐃⵠΔⲆ];
      ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ] = Ob(sd, [{
        f: Id,
        x: cu,
        y: 0,
        a: Fo,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
      }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠΔΔΔΔᐃᐃ] = ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ];
      ΔΔ[Cr.ⵠΔⵠΔᐃⵠⲆ] = ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ];
      ΔΔ[Cr.ᐃⲆΔΔⵠⲆⲆ] = Ob(1, [{
        f: Ad,
        x: C,
        y: 0,
        a: V,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆᐃᐃⲆᐃᐃ] = ΔΔ[Cr.ᐃⲆΔΔⵠⲆⲆ];
      ΔΔ[Cr.ᐃΔΔⲆᐃΔΔ] = Ob(wg, [{
        f: Ac,
        x: 0,
        y: Wh,
        a: 1,
        r: Math.PI / Cj,
        c: ["#0d1b1c", "#939393", "#5f6061"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠᐃᐃⲆᐃⵠⵠ] = ΔΔ[Cr.ᐃΔΔⲆᐃΔΔ];
      ΔΔ[Cr.ᐃⵠᐃΔⵠΔⲆ] = Ob(1, [{
        f: sm,
        x: 2,
        y: Jt,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆⵠᐃⲆⲆⲆ] = ΔΔ[Cr.ᐃⵠᐃΔⵠΔⲆ];
      ΔΔ[Cr.ᐃⵠᐃᐃΔⵠⵠ] = Ob(1, [{
        f: Ad,
        x: 2,
        y: 0,
        a: Ud,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", hj[xh]]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃᐃΔⲆᐃⵠΔ] = ΔΔ[Cr.ᐃⵠᐃᐃΔⵠⵠ];
      ΔΔ[Cr.ᐃΔΔΔᐃᐃⵠ] = Ob(1, [{
        f: Ad,
        x: Xn,
        y: 0,
        a: Cs,
        r: Math.PI / Oq,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⲆΔⵠⵠⲆⲆ] = ΔΔ[Cr.ᐃΔΔΔᐃᐃⵠ];
      ΔΔ[Cr.ᐃΔᐃᐃᐃⵠⲆ] = Ob(1, [{
        f: Ad,
        x: _t,
        y: 0,
        a: ub,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃᐃⵠⵠⵠΔⲆ] = ΔΔ[Cr.ᐃΔᐃᐃᐃⵠⲆ];
      ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ] = [];
      ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ][rh] = Δᐃ.ΔⵠΔΔΔⵠΔ;
      ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ][Yt] = Δᐃ.ⵠᐃⵠᐃᐃⵠᐃ;
      ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ][2] = Δᐃ.ΔⵠⵠᐃⲆΔⵠ;
      ΔΔ[Cr.ΔΔΔΔΔⵠⵠ] = ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ];
      ΔΔ[Cr.ⵠᐃΔⲆΔΔⵠ] = ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ];
      ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ] = [];
      ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ][Jt] = Δᐃ.ⲆⲆΔΔΔᐃⵠ;
      ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ][1] = Δᐃ.ΔⲆᐃᐃᐃⲆᐃ;
      ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ][2] = Δᐃ.ⵠᐃⵠᐃΔⵠⵠ;
      ΔΔ[Cr.ⵠΔᐃⵠⲆⵠΔ] = ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ];
      ΔΔ[Cr.ⵠΔΔⵠⲆᐃⵠ] = ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ];
      ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ] = [];
      ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ][0] = Δᐃ.ⲆᐃⲆᐃᐃⲆΔ;
      ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ][1] = Δᐃ.ⵠΔⵠⵠΔᐃΔ;
      ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ][2] = Δᐃ.ⲆΔⲆᐃⲆΔⲆ;
      ΔΔ[Cr.ⲆⲆⲆᐃⵠΔΔ] = ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ];
      ΔΔ[Cr.ⲆⵠᐃΔΔΔᐃ] = ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ];
      ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ] = [];
      ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ][0] = Δᐃ.ᐃΔΔⲆⲆⲆⵠ;
      ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ][1] = Δᐃ.ⲆⲆⵠΔΔⲆΔ;
      ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ][2] = Δᐃ.ⵠᐃⵠⲆⵠΔⲆ;
      ΔΔ[Cr.ⲆⵠΔⵠᐃᐃΔ] = ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ];
      ΔΔ[Cr.ΔⵠΔᐃⵠΔΔ] = ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ];
      ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ] = [];
      ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ][Dh] = Δᐃ.ΔΔⵠⵠᐃⵠⲆ;
      ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ][1] = Δᐃ.ⲆⲆᐃᐃΔᐃⵠ;
      ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ][cu] = Δᐃ.ⲆⲆⵠⵠΔΔΔ;
      ΔΔ[Cr.ⲆⲆΔΔⲆΔⲆ] = ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ];
      ΔΔ[Cr.ⵠΔⵠⵠⵠᐃⵠ] = ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ];
      ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ] = [];
      ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ][0] = Δᐃ.ⲆⵠⲆⲆⲆⵠΔ;
      ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ][1] = Δᐃ.ΔⲆⵠⵠⲆΔᐃ;
      ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ][2] = Δᐃ.ⲆⵠΔΔⵠᐃᐃ;
      ΔΔ[Cr.ⲆⲆⵠΔΔⲆᐃ] = ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ];
      ΔΔ[Cr.ⲆΔⲆⲆΔⵠᐃ] = ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ];
      ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ] = [];
      ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ][_s] = Δᐃ.ⵠΔᐃⲆⵠΔⲆ;
      ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ][Ur] = Δᐃ.ⵠⲆⲆᐃⲆⵠΔ;
      ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ][Qs] = Δᐃ.ΔⵠⵠⵠᐃΔⵠ;
      ΔΔ[Cr.ΔⵠⲆᐃⵠⵠΔ] = ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ];
      ΔΔ[Cr.ᐃⵠᐃᐃⲆΔⵠ] = ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ];
      ΔΔ[Cr.ᐃᐃΔΔΔΔᐃ] = Ob(1, [{
        f: Zc,
        x: -ib,
        y: -C,
        a: yl,
        r: Kr,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
      }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠᐃⲆΔᐃᐃᐃ] = ΔΔ[Cr.ᐃᐃΔΔΔΔᐃ];
      ΔΔ[Cr.ⲆΔΔⲆⲆᐃᐃ] = Ob(1, [{
        f: $d,
        x: -Uh,
        y: -2,
        a: Yt,
        r: -Math.PI / Ju,
        c: ["#141414", "#c4a23a", "#816511"]
      }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃΔᐃⲆᐃΔᐃ] = ΔΔ[Cr.ⲆΔΔⲆⲆᐃᐃ];
      ΔΔ[Cr.ΔⲆΔⵠⵠⲆΔ] = Ob(1, [{
        f: lm,
        x: -yg,
        y: -2,
        a: 1,
        r: Fj,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[Cr.ⲆΔᐃΔⵠΔⵠ] = Ob(1, [{
        f: lm,
        x: -yg,
        y: -xl,
        a: wg,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
      ΔΔ[Cr.ΔⵠⲆⲆⵠⵠⵠ] = Ob(1, [{
        f: cm,
        x: 0,
        y: 0,
        a: Ur,
        r: Mn,
        c: ["#347f93", "#54a4ba"]
      }, {
        f: Nc,
        x: 0,
        y: 0,
        a: V,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
      }, {
        f: mm,
        x: ko,
        y: $t,
        a: 1,
        r: Kr,
        c: ["#a9e4ed", "#86d4e0"]
      }, {
        f: vm,
        x: tr,
        y: $t,
        a: Eg,
        r: Fj,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃᐃⲆⲆΔΔⵠ] = ΔΔ[Cr.ΔⵠⲆⲆⵠⵠⵠ];
      ΔΔ[Cr.ΔᐃⵠⵠΔᐃΔ] = Ob(sd, [{
        f: hm,
        x: 45,
        y: 70,
        a: Br,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆⲆᐃΔⵠⵠ] = ΔΔ[Cr.ΔᐃⵠⵠΔᐃΔ];
      ΔΔ[Cr.ⵠΔⲆΔⲆΔΔ] = Ob(1, [{
        f: nm,
        x: 0,
        y: 0,
        a: 1,
        r: Jt,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
      }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⲆⲆᐃΔᐃⲆ] = ΔΔ[Cr.ⵠΔⲆΔⲆΔΔ];
      ΔΔ[Cr.ΔᐃΔⲆⲆⵠⲆ] = Ob(jh, [{
        f: dc,
        x: 0,
        y: 0,
        a: Fo,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
      }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔᐃⵠⲆⲆΔⵠ] = ΔΔ[Cr.ΔᐃΔⲆⲆⵠⲆ];
      ΔΔ[Cr.ΔᐃΔⲆⵠᐃᐃ] = Ob(yl, [{
        f: Oc,
        x: Lg,
        y: 0,
        a: 1,
        r: Wh,
        c: ["#2a2938", "#242330", "#313041"]
      }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃΔⲆᐃⵠⵠᐃ] = ΔΔ[Cr.ΔᐃΔⲆⵠᐃᐃ];
      ΔΔ[Cr.ᐃᐃⲆⲆᐃΔⵠ] = Ob(1, [{
        f: Tc,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆᐃΔᐃⲆΔᐃ] = ΔΔ[Cr.ᐃᐃⲆⲆᐃΔⵠ];
      ΔΔ[Cr.ⵠⵠᐃⲆᐃⲆⵠ] = Ob(dn, [{
        f: Tc,
        x: xb,
        y: Ik,
        a: Ur,
        r: Lg,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
      }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔᐃᐃⵠⵠΔᐃ] = ΔΔ[Cr.ⵠⵠᐃⲆᐃⲆⵠ];
      ΔΔ[Cr.ᐃΔⲆΔᐃᐃⵠ] = Ob(1, [{
        f: hc,
        x: 0,
        y: rk,
        a: 1,
        r: Dh,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠΔⲆΔⵠⲆ] = ΔΔ[Cr.ᐃΔⲆΔᐃᐃⵠ];
      ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠᐃ] = Ob(bt, [{
        f: hc,
        x: rh,
        y: 10,
        a: Br,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔⵠⵠⲆᐃΔΔ] = ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠᐃ];
      ΔΔ[Cr.ᐃⲆᐃΔⲆⲆΔ] = Ob(Fo, [{
        f: hc,
        x: 0,
        y: lj,
        a: 1,
        r: jj,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆᐃⵠⲆΔΔΔ] = ΔΔ[Cr.ᐃⲆᐃΔⲆⲆΔ];
      ΔΔ[Cr.ΔᐃΔΔΔⲆⲆ] = Ob(V, [{
        f: wd,
        x: -1,
        y: 0,
        a: ik,
        r: Ol,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔΔᐃⲆΔᐃΔ] = ΔΔ[Cr.ΔᐃΔΔΔⲆⲆ];
      ΔΔ[Cr.ⲆⲆᐃⲆᐃⲆⲆ] = ΔΔ[Cr.ΔᐃΔΔΔⲆⲆ];
      ΔΔ[Cr.ⵠⲆⲆⲆΔⵠᐃ] = Ob(1, [{
        f: Od,
        x: tr,
        y: Mn,
        a: er,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⵠⲆᐃⲆⲆΔ] = ΔΔ[Cr.ⵠⲆⲆⲆΔⵠᐃ];
      ΔΔ[Cr.ⵠΔᐃΔⵠⵠⵠ] = Ob(ce, [{
        f: pc,
        x: xb,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
      }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⵠⲆΔⵠᐃⵠ] = ΔΔ[Cr.ⵠΔᐃΔⵠⵠⵠ];
      ΔΔ[Cr.ΔⵠⵠΔᐃᐃΔ] = Ob(js, [{
        f: Dc,
        x: 0,
        y: Ol,
        a: ik,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆⵠΔⲆⵠⵠⲆ] = Ob(1, [{
        f: oc,
        x: rh,
        y: $t,
        a: 1,
        r: ko,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔΔⲆᐃΔⵠⵠ] = Ob(ik, [{
        f: Dc,
        x: jj,
        y: 0,
        a: Ud,
        r: Wh,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠⲆᐃⵠΔⲆᐃ] = Ob(sd, [{
        f: oc,
        x: 0,
        y: 0,
        a: 1,
        r: Ko,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
      }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠΔⲆΔⵠⵠⵠ] = Ob(sd, [{
        f: Gc,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠΔⲆⵠᐃᐃᐃ] = Ob(1, [{
        f: Gc,
        x: _s,
        y: xb,
        a: wg,
        r: tr,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃⵠⲆΔΔᐃᐃ] = Ob(Ud, [{
        f: Gc,
        x: Ol,
        y: yk,
        a: 1,
        r: ko,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
      }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃⵠⲆⲆⵠᐃᐃ] = Ob(1, [{
        f: bm,
        x: kq,
        y: 0,
        a: 1,
        r: Math.PI / Th,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆΔᐃᐃᐃΔⵠ] = ΔΔ[Cr.ᐃⵠⲆⲆⵠᐃᐃ];
      ΔΔ[Cr.ⵠⵠⲆᐃΔᐃΔ] = Ob(wg, [{
        f: bm,
        x: 0,
        y: kq,
        a: js,
        r: Math.PI / gs,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⵠᐃΔᐃᐃⲆ] = ΔΔ[Cr.ⵠⵠⲆᐃΔᐃΔ];
      ΔΔ[Cr.ⵠΔⵠⲆᐃΔΔ] = Ob(1, [{
        f: bm,
        x: yk,
        y: Lg,
        a: sd,
        r: Math.PI / Gt,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔⲆΔΔΔΔⲆ] = ΔΔ[Cr.ⵠΔⵠⲆᐃΔΔ];
      ΔΔ[Cr.ᐃⵠᐃᐃΔᐃΔ] = Ob(jh, [{
        f: bm,
        x: 0,
        y: Jt,
        a: er,
        r: Math.PI / vu,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃᐃⲆⲆⲆΔⲆ] = ΔΔ[Cr.ᐃⵠᐃᐃΔᐃΔ];
      ΔΔ[Cr.ᐃⵠⵠᐃⲆΔΔ] = Ob(js, [{
        f: Yd,
        x: 0,
        y: Kr,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆᐃᐃᐃᐃⵠΔ] = ΔΔ[Cr.ᐃⵠⵠᐃⲆΔΔ];
      ΔΔ[Cr.ᐃΔᐃⲆΔⲆᐃ] = Ob(1, [{
        f: om,
        x: 0,
        y: Jt,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⲆⵠⵠⲆΔⵠⲆ] = ΔΔ[Cr.ᐃΔᐃⲆΔⲆᐃ];
      ΔΔ[Cr.ᐃΔⵠᐃΔⵠᐃ] = Ob(1, [{
        f: Rc,
        x: 0,
        y: -2,
        a: Ur,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⲆⲆⵠΔᐃᐃ] = ΔΔ[Cr.ᐃΔⵠᐃΔⵠᐃ];
      ΔΔ[Cr.ᐃⵠᐃᐃΔⲆⵠ] = Ob(1, [{
        f: mc,
        x: 0,
        y: Fj,
        a: Aj,
        r: Wh,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
      }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ΔΔΔΔⵠⲆΔ] = ΔΔ[Cr.ᐃⵠᐃᐃΔⲆⵠ];
      ΔΔ[Cr.ⲆΔⵠᐃⲆⵠᐃ] = Ob(1, [{
        f: Yc,
        x: ko,
        y: Lu,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
      }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃⲆⵠⲆⲆⵠΔ] = ΔΔ[Cr.ⲆΔⵠᐃⲆⵠᐃ];
      ΔΔ[Cr.ᐃⵠᐃᐃⵠⵠⲆ] = Ob(1, [{
        f: pm,
        x: Gd,
        y: 0,
        a: 1,
        r: Lu,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
      }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ᐃΔΔⵠⵠⵠⵠ] = ΔΔ[Cr.ᐃⵠᐃᐃⵠⵠⲆ];
      ΔΔ[Cr.ᐃΔΔΔΔⵠⲆ] = Ob(1, [{
        f: Bc,
        x: 0,
        y: Lu,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
      }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔⲆΔᐃᐃⲆᐃ] = ΔΔ[Cr.ᐃΔΔΔΔⵠⲆ];
      ΔΔ[Cr.ᐃΔⵠᐃⲆⵠᐃ] = Ob(1, [{
        f: Uc,
        x: -5,
        y: -Bb,
        a: 1,
        r: Kr,
        c: ["#1d051e", "#c27add", "#cd98e5"]
      }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆΔⲆΔⵠΔⲆ] = Ob(1, [{
        f: lc,
        x: 0,
        y: 0,
        a: Br,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔΔΔᐃᐃΔⲆ] = Ob(yl, [{
        f: Jc,
        x: 0,
        y: xb,
        a: yl,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠΔᐃΔⵠᐃΔ] = Ob(1, [{
        f: lc,
        x: ko,
        y: 0,
        a: ce,
        r: yk,
        c: ["#866432", "#6b4f25"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃΔⲆΔⵠ] = Ob(1, [{
        f: Xc,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃΔⲆᐃⵠⲆⵠ] = Ob(1, [{
        f: tm,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
      }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ΔⵠⲆΔᐃⵠᐃ] = ΔΔ[Cr.ⲆⵠᐃΔⲆΔⵠ];
      ΔΔ[Cr.ⲆᐃᐃⲆΔΔΔ] = ΔΔ[Cr.ᐃΔⲆᐃⵠⲆⵠ];
      ΔΔ[Cr.ⵠΔⲆⲆΔⵠᐃ] = Ob(1, [{
        f: Kd,
        x: jj,
        y: 0,
        a: er,
        r: Ko,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
      }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠⲆᐃⲆⲆ] = ΔΔ[Cr.ⵠΔⲆⲆΔⵠᐃ];
      ΔΔ[Cr.ⲆᐃⵠⵠΔⲆΔ] = Ob(1, [{
        f: rm,
        x: Ol,
        y: 0,
        a: 1,
        r: Math.PI / Ju,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠⲆΔᐃΔ] = Ob(Ur, [{
        f: gm,
        x: 0,
        y: ko,
        a: 1,
        r: Math.PI / vu,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
      }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃᐃᐃᐃᐃⵠᐃ] = ΔΔ[Cr.ⲆᐃⵠⵠΔⲆΔ];
      ΔΔ[Cr.ᐃⲆⲆᐃⲆΔΔ] = ΔΔ[Cr.ⵠⵠⵠⲆΔᐃΔ];
      ΔΔ[Cr.ᐃⲆΔⲆΔΔⵠ] = Ob(wg, [{
        f: wu,
        x: Kr,
        y: 0,
        a: js,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⵠᐃⵠΔⵠΔ] = ΔΔ[Cr.ᐃⲆΔⲆΔΔⵠ];
      ΔΔ[Cr.ᐃⲆᐃⲆⵠᐃΔ] = Ob(1, [{
        f: Gu,
        x: 0,
        y: ko,
        a: 1,
        r: _s,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⲆⵠⲆΔᐃᐃ] = Ob(er, [{
        f: yu,
        x: Ko,
        y: kq,
        a: ce,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
      }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆᐃ] = Ob(1, [{
        f: Qc,
        x: 0,
        y: -2,
        a: yl,
        r: Jt,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
      }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⲆΔᐃΔΔᐃ] = ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆᐃ];
      ΔΔ[Cr.ΔⵠΔᐃΔⲆΔ] = Ob(1, [{
        f: td,
        x: -vo,
        y: -5,
        a: Fo,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠⵠΔᐃᐃᐃ] = Ob(Fo, [{
        f: nd,
        x: Ol,
        y: ko,
        a: ik,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
      }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ΔΔᐃⲆᐃΔᐃ] = ΔΔ[Cr.ⵠⵠⵠΔᐃᐃᐃ];
      ΔΔ[Cr.ⲆΔⲆⵠⵠᐃᐃ] = Ob(V, [{
        f: ed,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
      }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠΔⲆΔΔⲆⲆ] = ΔΔ[Cr.ⲆΔⲆⵠⵠᐃᐃ];
      ΔΔ[Cr.ΔⲆᐃⵠᐃⲆᐃ] = Ob(1, [{
        f: Hb,
        x: jj,
        y: ko,
        a: Yt,
        r: Gd,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
      }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃⵠⵠΔΔᐃᐃ] = Ob(1, [{
        f: Pu,
        x: 0,
        y: Mn,
        a: 1,
        r: Fj,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
      }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
      ΔΔ[Cr.ⵠⵠᐃⲆⵠΔⵠ] = ΔΔ[Cr.ᐃⵠⵠΔΔᐃᐃ];
      ΔΔ[Cr.ⲆΔᐃᐃᐃⵠΔ] = Ob(1, [{
        f: uc,
        x: 0,
        y: 0,
        a: 1,
        r: xb,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆΔᐃΔᐃᐃⲆ] = ΔΔ[Cr.ⲆΔᐃᐃᐃⵠΔ];
      ΔΔ[Cr.ⲆΔⵠᐃⲆⲆᐃ] = Ob(1, [{
        f: zb,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
      }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠⵠᐃΔᐃⲆᐃ] = ΔΔ[Cr.ⲆΔⵠᐃⲆⲆᐃ];
      ΔΔ[Cr.ⲆΔΔⲆⵠⲆΔ] = Ob(1, [{
        f: Lc,
        x: yk,
        y: 0,
        a: bt,
        r: tr,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
      }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃⵠⵠⵠⵠⲆᐃ] = ΔΔ[Cr.ⲆΔΔⲆⵠⲆΔ];
      ΔΔ[Cr.ΔᐃᐃᐃⵠΔᐃ] = Ob(1, [{
        f: fb,
        x: 0,
        y: Fj,
        a: 1,
        r: Ko,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
      }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ᐃΔⲆΔⲆⲆΔ] = ΔΔ[Cr.ΔᐃᐃᐃⵠΔᐃ];
      ΔΔ[Cr.ᐃⵠⵠᐃⵠⲆⵠ] = Ob(ce, [{
        f: Wc,
        x: -Fo,
        y: jj,
        a: ub,
        r: -Math.PI / Ju,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
      }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
      ΔΔ[Cr.ᐃⲆⲆⵠᐃΔᐃ] = ΔΔ[Cr.ᐃⵠⵠᐃⵠⲆⵠ];
      ΔΔ[Cr.ⵠᐃᐃⵠΔⲆΔ] = Ob(1, [{
        f: Wc,
        x: -1,
        y: $t,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
      }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ᐃᐃⵠΔⲆᐃΔ] = ΔΔ[Cr.ⵠᐃᐃⵠΔⲆΔ];
      ΔΔ[Cr.ᐃᐃΔⵠⲆΔⵠ] = Ob(ce, [{
        f: Cc,
        x: Dh,
        y: 0,
        a: 1,
        r: Ko,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
      }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
      ΔΔ[Cr.ⵠΔⲆᐃⵠⲆⵠ] = Ob(1, [{
        f: hu,
        x: 0,
        y: Gd,
        a: yl,
        r: Wh,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
      }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⲆⲆᐃᐃᐃⲆⲆ] = ΔΔ[Cr.ⵠΔⲆᐃⵠⲆⵠ];
      ΔΔ[Cr.ᐃΔᐃⵠΔΔᐃ] = Ob(1, [{
        f: Nu,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠᐃΔⲆⵠᐃⲆ] = ΔΔ[Cr.ᐃΔᐃⵠΔΔᐃ];
      ΔΔ[Cr.ⵠᐃⵠⲆⵠⵠⵠ] = Ob(bt, [{
        f: Vb,
        x: -2,
        y: -al,
        a: js,
        r: Dh,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
      }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
      ΔΔ[Cr.ⵠΔⲆⵠΔᐃᐃ] = ΔΔ[Cr.ⵠᐃⵠⲆⵠⵠⵠ];
      ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ] = [];
      ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ][_s] = Δᐃ.ΔⲆⲆⲆⵠΔΔ;
      ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ][1] = Δᐃ.ΔⵠⵠⲆΔᐃΔ;
      ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ][_t] = Δᐃ.ⲆΔΔᐃΔⲆⲆ;
      ΔΔ[Cr.ᐃⲆⵠᐃⵠΔᐃ] = ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ];
      ΔΔ[Cr.ⲆⵠⵠᐃᐃⲆⵠ] = ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ];
      ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ] = [];
      ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ][Wh] = Δᐃ.ⲆⲆⲆᐃΔⵠᐃ;
      ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ][1] = Δᐃ.ⲆⵠⵠᐃΔⵠΔ;
      ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ][Wq] = Δᐃ.ΔⵠⲆⲆⲆΔᐃ;
      ΔΔ[Cr.ⵠΔᐃΔⵠᐃⵠ] = ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ];
      ΔΔ[Cr.ΔᐃⲆⲆᐃⲆⲆ] = ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ];
      ΔΔ[Cr.ᐃΔΔΔᐃᐃⲆ] = ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ];
      ΔΔ[Cr.ΔΔⲆΔⵠΔⲆ] = ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ];
      ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ] = [];
      ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ][Gd] = Δᐃ.ᐃⵠᐃᐃΔᐃⵠ;
      ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ][1] = Δᐃ.ⲆⲆᐃⲆⲆⵠᐃ;
      ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ][kn] = Δᐃ.ᐃⵠⲆⵠᐃᐃⵠ;
      ΔΔ[Cr.ᐃΔΔΔᐃᐃⲆ] = ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ];
      ΔΔ[Cr.ΔΔⲆΔⵠΔⲆ] = ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ];
      ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ] = [];
      ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ][0] = Δᐃ.ⵠᐃᐃⲆⵠΔΔ;
      ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ][ce] = Δᐃ.ᐃⵠᐃⵠΔᐃᐃ;
      ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ][2] = Δᐃ.ⵠᐃⵠⵠⲆⵠⵠ;
      ΔΔ[Cr.ⲆⲆⵠⵠΔΔⵠ] = ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ];
      ΔΔ[Cr.ⵠⵠⵠᐃᐃⲆΔ] = ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ];
      ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ] = [];
      ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ][xb] = Δᐃ.ⵠΔᐃⵠᐃⲆⵠ;
      ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ][1] = Δᐃ.ᐃΔΔⵠⵠᐃⲆ;
      ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ][2] = Δᐃ.ⵠΔⲆᐃᐃⲆᐃ;
      ΔΔ[Cr.ⵠᐃΔΔΔⲆⵠ] = ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ];
      ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⲆ] = ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ];
      ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ] = [];
      ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ][0] = Δᐃ.ΔΔⲆⲆΔᐃᐃ;
      ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ][1] = Δᐃ.ⵠᐃΔⵠⲆⵠⲆ;
      ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ][eh] = Δᐃ.ΔᐃⲆⲆᐃΔᐃ;
      ΔΔ[Cr.ⵠᐃΔᐃⵠᐃⲆ] = ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ];
      ΔΔ[Cr.ᐃΔΔⲆⲆΔᐃ] = ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ];
      ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ] = [];
      ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ][0] = Δᐃ.ⲆⲆΔᐃᐃⵠᐃ;
      ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ][Aj] = Δᐃ.ᐃᐃⲆⲆⵠⲆⲆ;
      ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ][2] = Δᐃ.ⲆΔΔⲆΔᐃⲆ;
      ΔΔ[Cr.ΔΔⵠΔΔⵠΔ] = ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ];
      ΔΔ[Cr.ᐃΔΔᐃⵠⵠⲆ] = ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ];
      ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ] = [];
      ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ][Jt] = Δᐃ.ΔΔⲆΔᐃᐃΔ;
      ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ][1] = Δᐃ.ⲆᐃⵠⵠΔⲆᐃ;
      ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ][yh] = Δᐃ.ᐃᐃⵠⵠΔⲆᐃ;
      ΔΔ[Cr.ⲆᐃᐃⲆΔⲆⵠ] = ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ];
      ΔΔ[Cr.ᐃⲆᐃΔⵠⵠⲆ] = ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ];
      ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ] = [];
      ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ][Jt] = Δᐃ.ΔΔⵠⵠⵠᐃⵠ;
      ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ][Aj] = Δᐃ.ᐃΔⲆΔΔⵠⵠ;
      ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ][2] = Δᐃ.ⲆΔⵠⵠᐃⲆⲆ;
      ΔΔ[Cr.ⵠΔΔᐃΔⲆΔ] = ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ];
      ΔΔ[Cr.ᐃⲆΔⲆⲆᐃⵠ] = ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ];
      ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ] = [];
      ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ][0] = Δᐃ.ⲆⲆΔⲆⵠⲆᐃ;
      ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ][V] = Δᐃ.ΔΔⲆΔⵠΔᐃ;
      ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ][2] = Δᐃ.ⵠΔⵠⵠΔⵠΔ;
      ΔΔ[Cr.ΔⲆΔᐃᐃᐃᐃᐃⲆ] = ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ⵠΔⲆⵠⲆᐃⲆ] = ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ] = [];
      ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ][tr] = Δᐃ.ᐃⲆⵠΔᐃΔΔ;
      ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ][wg] = Δᐃ.ᐃⵠⵠⲆΔΔⵠ;
      ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ][Wq] = Δᐃ.ⲆΔᐃⲆⲆᐃⲆ;
      ΔΔ[Cr.ⲆⲆⵠΔΔᐃᐃ] = ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ];
      ΔΔ[Cr.ⲆⲆΔⵠⵠⵠᐃ] = ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ];
      ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ] = [];
      ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ][Lu] = Δᐃ.ⵠⲆⵠᐃᐃⲆΔ;
      ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ][1] = Δᐃ.ΔⵠΔⵠⵠᐃⵠ;
      ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ][Uh] = Δᐃ.ᐃΔⲆⲆᐃᐃᐃ;
      ΔΔ[Cr.ⲆᐃⵠΔⲆⲆⲆ] = ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ];
      ΔΔ[Cr.ⲆⵠᐃᐃⲆⵠᐃ] = ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ];
      ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ] = [];
      ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ][0] = Δᐃ.ⲆⲆᐃΔⵠⲆⲆ;
      ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ][dn] = Δᐃ.ⵠⵠΔⵠⲆⲆᐃ;
      ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ][yg] = Δᐃ.ⲆᐃⲆⲆⵠⲆⲆ;
      ΔΔ[Cr.ΔⵠᐃᐃᐃⲆⲆ] = ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ];
      ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ] = [];
      ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ][ko] = Δᐃ.ΔᐃΔⲆᐃⵠⲆ;
      ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ][1] = Δᐃ.ᐃᐃⲆⵠⵠᐃⵠ;
      ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ][kn] = Δᐃ.ⲆᐃΔᐃΔΔⵠ;
      ΔΔ[Cr.ⲆⲆⵠⵠᐃᐃⵠ] = ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ];
      ΔΔ[Cr.ⲆΔⲆⲆⲆΔⵠ] = ΔΔ[Cr.ᐃⵠⲆⲆⵠᐃᐃ];
      ΔΔ[Cr.ᐃΔⵠΔⵠⵠΔ] = ΔΔ[Cr.ⵠⵠⲆᐃΔᐃΔ];
      ΔΔ[Cr.ⲆⵠᐃΔⵠⵠΔ] = ΔΔ[Cr.ⵠΔⵠⲆᐃΔΔ];
      ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃᐃ] = ΔΔ[Cr.ᐃⵠᐃᐃΔᐃΔ];
      ΔΔ[Cr.ⵠΔⲆⲆᐃⲆᐃ] = ΔΔ[Cr.ⵠⲆⲆᐃⵠΔⲆ];
      ΔΔ[Cr.ⲆⲆᐃΔᐃΔᐃ] = ΔΔ[Cr.ΔᐃᐃⵠΔᐃᐃ];
      ΔΔ[Cr.ⵠΔᐃᐃⲆΔⵠ] = ΔΔ[Cr.ΔΔⵠΔⲆᐃᐃ];
      ΔΔ[Cr.ΔⲆᐃⵠΔⵠᐃ] = ΔΔ[Cr.ⲆΔⵠⲆΔΔⲆ];
      ΔΔ[Cr.ⲆⲆⵠᐃⲆⲆΔ] = ΔΔ[Cr.ΔⲆⲆΔᐃⲆⵠ];
      ΔΔ[Cr.ᐃᐃΔΔⲆⵠⵠ] = ΔΔ[Cr.ⲆⵠΔⲆⵠⵠⲆ];
      ΔΔ[Cr.ΔᐃᐃΔΔΔⵠ] = ΔΔ[Cr.ΔⵠⵠΔᐃᐃΔ];
      ΔΔ[Cr.ΔᐃⵠⲆⲆᐃᐃ] = ΔΔ[Cr.ⵠⲆᐃⵠΔⲆᐃ];
      ΔΔ[Cr.ΔᐃᐃΔΔΔΔ] = ΔΔ[Cr.ΔΔⲆᐃΔⵠⵠ];
      ΔΔ[Cr.ⲆⵠᐃᐃΔΔΔ] = ΔΔ[Cr.ⲆⵠⲆⲆᐃⲆΔ];
      ΔΔ[Cr.ⵠⲆⵠᐃⵠⲆᐃ] = ΔΔ[Cr.ΔⵠΔᐃΔΔᐃ];
      ΔΔ[Cr.ⲆⵠⵠⵠΔⲆᐃ] = ΔΔ[Cr.ᐃⲆⲆᐃΔⵠΔ];
      ΔΔ[Cr.ⵠΔⵠⵠⵠⵠⵠ] = ΔΔ[Cr.ⲆⲆᐃⵠⵠΔⲆ];
      ΔΔ[Cr.ᐃᐃⵠⲆΔⵠⵠ] = ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆⵠ];
      ΔΔ[Cr.ⵠᐃⲆΔⲆᐃᐃ] = ΔΔ[Cr.ΔⲆⲆᐃⲆⲆᐃ];
      ΔΔ[Cr.ⲆⵠΔᐃⲆⵠᐃ] = ΔΔ[Cr.ⲆⲆΔΔⵠᐃΔ];
      ΔΔ[Cr.ΔΔⵠⵠⵠⵠᐃ] = ΔΔ[Cr.ⵠᐃᐃⲆⵠΔⵠ];
      ΔΔ[Cr.ΔΔΔⲆᐃΔⵠ] = ΔΔ[Cr.ⵠⵠᐃⲆⵠⲆΔ];
      ΔΔ[Cr.ΔⵠⲆᐃⲆⵠᐃ] = ΔΔ[Cr.ⲆⲆⲆⵠⲆⵠΔ];
      ΔΔ[Cr.ΔΔⲆⲆᐃⵠⵠ] = ΔΔ[Cr.ΔΔΔΔΔᐃⵠ];
      ΔΔ[Cr.ᐃⵠⲆᐃⵠⲆⵠ] = ΔΔ[Cr.ⵠᐃΔⲆⵠⲆΔ];
      ΔΔ[Cr.ᐃⲆᐃᐃⵠΔⲆ] = ΔΔ[Cr.ᐃⵠⵠΔΔⲆᐃ];
      ΔΔ[Cr.ⲆⵠⵠⲆΔΔᐃ] = ΔΔ[Cr.ΔΔΔΔⵠⵠⵠ];
      ΔΔ[Cr.ΔᐃΔⵠᐃⲆΔ] = ΔΔ[Cr.ΔⵠⲆΔⲆⲆΔ];
      ΔΔ[Cr.ΔⵠΔᐃⲆⵠⲆ] = ΔΔ[Cr.ⲆⵠΔⵠⲆᐃⲆ];
      ΔΔ[Cr.ⵠⵠᐃᐃᐃΔⲆ] = ΔΔ[Cr.ⵠΔⲆΔᐃΔⲆ];
      ΔΔ[Cr.ᐃⲆⲆⲆⵠⵠⲆ] = ΔΔ[Cr.ⵠΔᐃΔΔⵠᐃ];
      ΔΔ[Cr.ᐃⵠΔⲆⲆⲆΔ] = ΔΔ[Cr.ᐃⲆⲆⲆⵠⲆΔ];
      ΔΔ[Cr.ⵠⲆΔⲆⲆᐃⲆ] = ΔΔ[Cr.ⲆΔΔΔΔᐃⲆ];
      ΔΔ[Cr.ΔᐃⵠΔⲆⲆⲆ] = ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃⵠ];
      ΔΔ[Cr.ΔᐃᐃΔᐃᐃᐃ] = ΔΔ[Cr.ᐃⵠΔΔΔᐃᐃ];
      ΔΔ[Cr.ΔΔΔⵠΔⵠᐃ] = ΔΔ[Cr.ΔᐃᐃⲆⵠⲆΔ];
      ΔΔ[Cr.ⲆΔⵠᐃⲆⲆⵠ] = ΔΔ[Cr.ⲆⲆΔᐃⲆΔⵠ];
      ΔΔ[Cr.ⲆᐃⵠⲆⵠᐃᐃ] = ΔΔ[Cr.ⲆⲆᐃⲆᐃΔⵠ];
      ΔΔ[Cr.ⲆⵠⵠⲆⲆᐃΔ] = ΔΔ[Cr.ᐃᐃⲆᐃⵠᐃⲆ];
      ΔΔ[Cr.ⵠᐃⲆⲆⲆⵠΔ] = ΔΔ[Cr.ⵠⵠΔⲆΔⲆΔ];
      ΔΔ[Cr.ᐃⵠⲆⵠΔⵠΔ] = ΔΔ[Cr.ΔⵠⵠⵠⲆᐃᐃ];
      ΔΔ[Cr.ΔⲆⵠⲆⵠⵠᐃ] = ΔΔ[Cr.ᐃᐃⵠⲆᐃᐃΔ];
      ΔΔ[Cr.ⵠΔⵠᐃᐃⵠᐃ] = ΔΔ[Cr.ⲆⲆⵠᐃᐃᐃⵠ];
      ΔΔ[Cr.ⵠᐃΔⵠᐃⵠⲆ] = ΔΔ[Cr.ⲆⵠΔᐃᐃⲆΔ];
      ΔΔ[Cr.ⵠΔⵠᐃᐃⵠⲆ] = ΔΔ[Cr.ᐃᐃΔΔΔΔᐃ];
      ΔΔ[Cr.ⵠΔΔⵠⵠΔⲆ] = ΔΔ[Cr.ⲆΔΔⲆⲆᐃᐃ];
      ΔΔ[Cr.ΔⲆⲆⵠⲆⲆΔ] = ΔΔ[Cr.ΔⵠⲆⲆⵠⵠⵠ];
      ΔΔ[Cr.ⵠⲆᐃᐃΔΔⲆ] = ΔΔ[Cr.ΔⲆΔⵠⵠⲆΔ];
      ΔΔ[Cr.ⲆᐃΔⵠΔⵠΔ] = ΔΔ[Cr.ⲆΔᐃΔⵠΔⵠ];
      ΔΔ[Cr.ⲆⵠΔⲆⵠᐃⲆ] = ΔΔ[Cr.ⵠΔᐃΔⵠⵠⵠ];
      ΔΔ[Cr.ⲆᐃⲆⲆᐃⲆⲆ] = ΔΔ[Cr.ΔᐃⵠⵠΔᐃΔ];
      ΔΔ[Cr.ⵠᐃⵠⵠᐃⲆΔ] = ΔΔ[Cr.ΔⲆᐃⲆⲆⲆΔ];
      ΔΔ[Cr.ⵠⵠⲆⵠⵠⲆⵠ] = ΔΔ[Cr.ⵠΔΔᐃⲆΔΔ];
      ΔΔ[Cr.ⵠⲆΔΔⲆⵠᐃ] = ur(function (a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 129;
        e.save();
        e.translate(a * 90, a * 90);
        nb(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
        e.restore();
        tb(e, c[Ko], c[1], gn);
        e.save();
        nb(e, a * 30, a * 115, a * 60, a * Th, a * 15);
        e.restore();
        tb(e, c[2], c[3], jt);
        e.save();
        nb(e, a * 50, a * 117, a * 20, St * a, a * 15);
        e.restore();
        tb(e, c[yh]);
        return d;
      }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
      ΔΔ[Cr.ⲆᐃⲆᐃΔΔᐃ] = Ob(0.5, [{
        f: _d,
        x: 0,
        y: eh,
        a: 1,
        r: Lg,
        c: ["#ffffff"]
      }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
      ΔΔ[Cr.ⵠⲆΔⵠⵠΔⲆ] = ΔΔ[Cr.ΔᐃⲆᐃⲆᐃⲆ];
      ΔΔ[Cr.ⲆⵠⵠⵠⵠⲆⵠ] = ΔΔ[Cr.ᐃⵠⲆΔⲆⵠᐃ];
      ΔΔ[Cr.ⲆΔᐃⵠⵠⵠᐃ] = ΔΔ[Cr.ᐃᐃᐃΔᐃᐃⵠ];
      ΔΔ[Cr.ᐃΔΔΔⲆⲆΔ] = ΔΔ[Cr.ⲆⲆⲆΔΔⲆⲆ];
      ΔΔ[Cr.ΔⵠⲆᐃΔΔᐃ] = ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ];
      ΔΔ[Cr.ⵠΔⲆⵠⲆⵠⵠ] = ΔΔ[Cr.ΔΔⲆΔⵠⵠⲆ];
      ΔΔ[Cr.ⵠᐃⵠⲆᐃⵠΔ] = ΔΔ[Cr.ΔⵠⲆⵠⲆᐃΔ];
      ΔΔ[Cr.ΔᐃᐃⵠⲆⵠΔ] = ΔΔ[Cr.ᐃᐃΔⵠⵠᐃⵠ];
      ΔΔ[Cr.ⲆⲆΔⵠΔⲆΔ] = ΔΔ[Cr.ⲆⵠᐃⵠⲆⵠⲆ];
      ΔΔ[Cr.ⵠᐃᐃᐃᐃΔⵠ] = ΔΔ[Cr.ⲆᐃΔᐃⵠᐃⵠ];
      ΔΔ[Cr.ᐃⲆⵠᐃⲆΔⲆ] = ΔΔ[Cr.ΔⲆΔⵠΔⵠᐃ];
      ΔΔ[Cr.ⵠΔᐃⲆⲆΔⲆ] = ΔΔ[Cr.ΔᐃⵠΔᐃΔΔ];
      ΔΔ[Cr.ⵠⵠⵠⵠⵠⲆⲆ] = ΔΔ[Cr.ΔⲆⵠⵠⵠⲆᐃ];
      ΔΔ[Cr.ⲆⵠᐃΔᐃⲆⵠ] = ΔΔ[Cr.ⵠΔᐃᐃⲆⵠⲆ];
      ΔΔ[Cr.ⵠᐃΔΔⲆΔⲆ] = ΔΔ[Cr.ᐃⵠᐃⲆⵠⲆⲆ];
      ΔΔ[Cr.ⵠⲆⵠᐃΔⵠᐃ] = ΔΔ[Cr.ΔᐃⵠᐃᐃΔⵠ];
      ΔΔ[Cr.ᐃᐃᐃⲆᐃΔⲆ] = ΔΔ[Cr.ᐃⵠΔⲆⵠΔΔ];
      ΔΔ[Cr.ᐃⲆᐃΔΔᐃΔ] = ΔΔ[Cr.ᐃⵠᐃᐃᐃᐃⲆ];
      ΔΔ[Cr.ⵠⵠᐃⵠΔⲆΔ] = ΔΔ[Cr.ΔΔⵠᐃᐃᐃΔ];
      ΔΔ[Cr.ΔᐃΔⲆᐃⲆⲆ] = ΔΔ[Cr.ᐃΔⲆⲆΔᐃⲆ];
      ΔΔ[Cr.ΔⲆⲆΔΔⵠΔ] = ΔΔ[Cr.ⲆΔᐃᐃⵠΔⵠ];
      ΔΔ[Cr.ⲆⵠΔᐃⲆⵠⵠ] = ΔΔ[Cr.ΔΔΔᐃΔᐃᐃ];
      ΔΔ[Cr.ⲆΔⵠⵠⲆΔᐃ] = ΔΔ[Cr.ΔᐃⵠΔΔᐃⲆ];
      ΔΔ[Cr.ΔΔⵠᐃᐃΔᐃ] = ΔΔ[Cr.ΔΔΔᐃⵠΔⲆ];
      ΔΔ[Cr.ⵠΔⵠΔᐃⵠⲆ] = ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ];
      ΔΔ[Cr.ⲆᐃⲆⲆⵠⲆᐃ] = ΔΔ[Cr.ᐃⵠᐃΔⵠΔⲆ];
      ΔΔ[Cr.ⵠᐃΔⵠⵠᐃⲆ] = ΔΔ[Cr.ᐃΔΔⲆᐃΔΔ];
      ΔΔ[Cr.ᐃΔᐃΔΔᐃⲆ] = ΔΔ[Cr.ᐃⲆΔΔⵠⲆⲆ];
      ΔΔ[Cr.ⵠᐃᐃΔⵠⲆⲆ] = ΔΔ[Cr.ᐃⵠᐃᐃΔⵠⵠ];
      ΔΔ[Cr.ⲆⵠⲆⲆⲆΔΔ] = ΔΔ[Cr.ᐃΔΔΔᐃᐃⵠ];
      ΔΔ[Cr.ⲆⲆᐃΔⵠⵠᐃ] = ΔΔ[Cr.ᐃΔᐃᐃᐃⵠⲆ];
      ΔΔ[Cr.ᐃⲆΔᐃⲆᐃⲆ] = ΔΔ[Cr.ⲆΔⲆⵠᐃΔⲆ];
      ΔΔ[Cr.ΔᐃΔⵠᐃᐃⵠ] = ΔΔ[Cr.ⵠⵠⵠᐃΔⵠⵠ];
      ΔΔ[Cr.ⵠᐃᐃⲆΔΔⵠ] = ΔΔ[Cr.ᐃⵠⵠᐃⲆΔΔ];
      ΔΔ[Cr.ᐃΔᐃⲆⲆΔΔ] = ΔΔ[Cr.ᐃΔⵠᐃΔⵠᐃ];
      ΔΔ[Cr.ᐃΔΔⲆⵠⵠⲆ] = ΔΔ[Cr.ᐃⵠᐃᐃΔⲆⵠ];
      ΔΔ[Cr.ΔΔⵠΔⵠΔⵠ] = ΔΔ[Cr.ⲆΔⵠᐃⲆⵠᐃ];
      ΔΔ[Cr.ΔⲆΔᐃᐃⲆⲆ] = ΔΔ[Cr.ⵠΔⲆΔⲆΔΔ];
      ΔΔ[Cr.ΔΔⲆⲆᐃⵠᐃ] = ΔΔ[Cr.ⵠⲆⲆⲆΔⵠᐃ];
      ΔΔ[Cr.ⵠⵠⵠᐃⲆᐃΔ] = ΔΔ[Cr.ᐃⵠᐃᐃⵠⵠⲆ];
      ΔΔ[Cr.ⵠᐃⵠΔᐃΔⲆ] = ΔΔ[Cr.ᐃΔΔΔΔⵠⲆ];
      ΔΔ[Cr.ΔⲆⵠᐃᐃΔⵠ] = ΔΔ[Cr.ᐃΔⵠᐃⲆⵠᐃ];
      ΔΔ[Cr.ⵠΔΔⲆⲆⲆΔ] = ΔΔ[Cr.ⲆΔΔⲆⵠⲆΔ];
      ΔΔ[Cr.ⲆᐃΔΔⵠᐃⵠ] = ΔΔ[Cr.ΔᐃᐃᐃⵠΔᐃ];
      ΔΔ[Cr.ⵠⲆᐃⵠⵠⵠΔ] = ΔΔ[Cr.ⲆΔᐃᐃᐃⵠΔ];
      ΔΔ[Cr.ⵠⵠΔⲆᐃⵠⵠ] = ΔΔ[Cr.ⲆΔⲆΔⵠΔⲆ];
      ΔΔ[Cr.ᐃⲆᐃⲆⵠⲆⲆ] = ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆᐃ];
      ΔΔ[Cr.ⵠⲆⲆⲆⲆⵠⲆ] = ΔΔ[Cr.ΔΔΔᐃᐃΔⲆ];
      ΔΔ[Cr.ᐃⵠΔΔΔΔⲆ] = ΔΔ[Cr.ⵠΔᐃΔⵠᐃΔ];
      ΔΔ[Cr.ⵠᐃᐃᐃⵠΔᐃ] = ΔΔ[Cr.ⲆᐃⵠⵠΔⲆΔ];
      ΔΔ[Cr.ⵠᐃΔᐃⲆᐃⵠ] = ΔΔ[Cr.ⵠⵠⵠⲆΔᐃΔ];
      ΔΔ[Cr.ᐃⲆΔᐃᐃⲆΔ] = ΔΔ[Cr.ⵠᐃᐃⵠΔⲆΔ];
      ΔΔ[Cr.ⲆΔᐃᐃΔΔⵠ] = ΔΔ[Cr.ᐃᐃΔⵠⲆΔⵠ];
      ΔΔ[Cr.ΔⲆΔΔΔᐃᐃ] = ΔΔ[Cr.ᐃⲆΔⲆΔΔⵠ];
      ΔΔ[Cr.ⵠᐃΔᐃΔΔⲆ] = ΔΔ[Cr.ᐃⲆᐃⲆⵠᐃΔ];
      ΔΔ[Cr.ⲆΔⵠⲆΔⵠΔ] = ΔΔ[Cr.ⵠⲆⵠⲆΔᐃᐃ];
      ΔΔ[Cr.ⲆΔⵠⵠⵠⵠⲆ] = ΔΔ[Cr.ᐃⵠⵠΔΔᐃᐃ];
      ΔΔ[Cr.ᐃΔⲆⵠᐃᐃᐃ] = ΔΔ[Cr.ⲆΔⲆⵠⵠᐃᐃ];
      ΔΔ[Cr.ⲆⵠⲆᐃⲆᐃⵠ] = ΔΔ[Cr.ᐃⵠⵠᐃⵠⲆⵠ];
      ΔΔ[Cr.ᐃⲆᐃⲆⲆᐃΔ] = ΔΔ[Cr.ᐃΔᐃⵠΔΔᐃ];
      ΔΔ[Cr.ⲆⲆᐃᐃᐃⲆⲆ] = ΔΔ[Cr.ⵠΔⲆᐃⵠⲆⵠ];
      ΔΔ[Cr.ΔⲆⲆⲆⵠⲆΔ] = ΔΔ[Cr.ΔⵠΔᐃΔⲆΔ];
      ΔΔ[Cr.ΔΔΔⲆᐃⲆΔ] = ΔΔ[Cr.ⵠⵠⵠΔᐃᐃᐃ];
      ΔΔ[Cr.ⲆΔⲆᐃΔⲆΔ] = ΔΔ[Cr.ΔⲆᐃⵠᐃⲆᐃ];
      ΔΔ[Cr.ⵠⲆⲆⵠⲆⲆΔ] = ΔΔ[Cr.ⵠᐃⵠⲆⵠⵠⵠ];
      ΔΔ[Cr.ΔΔᐃᐃⲆΔⲆ] = ΔΔ[Cr.ᐃΔⲆΔᐃᐃⵠ];
      ΔΔ[Cr.ⵠΔⲆᐃⵠⲆᐃ] = ΔΔ[Cr.ⵠΔⲆΔⵠⵠⵠ];
      ΔΔ[Cr.ⲆᐃⲆΔⲆᐃᐃ] = ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠᐃ];
      ΔΔ[Cr.ΔΔⲆΔΔⵠΔ] = ΔΔ[Cr.ⵠΔⲆⵠᐃᐃᐃ];
      ΔΔ[Cr.ΔΔⵠⲆⵠⵠⲆ] = ΔΔ[Cr.ᐃⲆᐃΔⲆⲆΔ];
      ΔΔ[Cr.ⲆⵠⵠΔΔΔⵠ] = ΔΔ[Cr.ᐃⵠⲆΔΔᐃᐃ];
      ΔΔ[Cr.ⵠⲆΔΔⵠᐃⵠ] = ΔΔ[Cr.ΔᐃΔⲆⵠᐃᐃ];
      ΔΔ[Cr.ⲆⲆΔⲆΔⵠᐃ] = ΔΔ[Cr.ⵠⵠᐃⲆᐃⲆⵠ];
      ΔΔ[Cr.ᐃⲆⵠⵠᐃⵠⵠ] = ΔΔ[Cr.ᐃᐃⲆⲆᐃΔⵠ];
      ΔΔ[Cr.ΔΔⲆᐃᐃⲆⲆ] = ΔΔ[Cr.ΔᐃΔⲆⲆⵠⲆ];
      ΔΔ[Cr.ᐃΔⲆⵠⲆⲆⲆ] = ΔΔ[Cr.ᐃΔⲆᐃⵠⲆⵠ];
      ΔΔ[Cr.ⵠⵠᐃΔᐃΔⲆ] = ΔΔ[Cr.ⲆⵠᐃΔⲆΔⵠ];
      ΔΔ[Cr.ⲆⵠⵠΔᐃᐃⲆ] = ΔΔ[Cr.ⵠΔⲆⲆΔⵠᐃ];
      ΔΔ[Cr.ⵠⲆⲆΔⲆᐃⵠ] = ΔΔ[Cr.ⵠⲆⵠⲆΔⲆⲆ];
      ΔΔ[Cr.ΔΔⵠⲆⵠⲆΔ] = ΔΔ[Cr.ⲆⲆⲆΔⲆᐃᐃ];
      ΔΔ[Cr.ⵠⵠⲆⵠⲆΔⵠ] = ΔΔ[Cr.ⵠᐃᐃⲆⲆᐃⵠ];
      ΔΔ[Cr.ⵠⲆⲆΔΔᐃΔ] = ΔΔ[Cr.ΔᐃⵠΔⵠⲆᐃ];
      ΔΔ[Cr.ᐃⲆⲆΔΔΔⲆ] = ΔΔ[Cr.ᐃΔᐃⲆΔⲆᐃ];
    })();
    ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ] = [];
    ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][Cr.ΔΔⵠ] = [];
    for (var a = 0; a < Cr.Ⲇᐃⵠⵠᐃⵠᐃ; a++) {
      ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Ou(1, 4 + a, "#59B8CE")));
      ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Ou(1, kr + a, "#90DDD9")));
    }
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔΔ] = [];
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔΔ][Cr.ΔΔⵠ] = [];
    for (a = 0; a < Cr.ᐃᐃᐃⵠᐃᐃᐃ; a++) {
      ΔΔ[Cr.ⲆᐃᐃᐃⲆΔΔ][Cr.ⵠⵠΔ].push(ur(Ou(1, 4 + a, "#fff")));
      ΔΔ[Cr.ⲆᐃᐃᐃⲆΔΔ][Cr.ΔΔⵠ].push(ur(Ou(1, 4 + a, "#fff")));
    }
    ΔΔ[Cr.ᐃΔᐃⲆⲆⵠᐃ] = [];
    ΔΔ[Cr.ᐃΔᐃⲆⲆⵠᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃΔᐃⲆⲆⵠᐃ][Cr.ΔΔⵠ] = [];
    for (a = $t; Cr.ᐃᐃᐃⵠᐃᐃᐃ > a; a++) {
      ΔΔ[Cr.ᐃΔᐃⲆⲆⵠᐃ][Cr.ⵠⵠΔ].push(ur(Ou(1, 6 + a, "#DDCD8A")));
      ΔΔ[Cr.ᐃΔᐃⲆⲆⵠᐃ][Cr.ΔΔⵠ].push(ur(Ou(1, 6 + a, "#155E57")));
    }
    ΔΔ[Cr.ΔⲆⵠΔⲆᐃΔ] = [];
    ΔΔ[Cr.ΔⲆⵠΔⲆᐃΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⲆⵠΔⲆᐃΔ][Cr.ΔΔⵠ] = [];
    for (a = Lu; a < Cr.ᐃⵠΔΔⲆⵠⵠ; a++) {
      ΔΔ[Cr.ΔⲆⵠΔⲆᐃΔ][Cr.ⵠⵠΔ].push(ur(Ou(1, Dt + a, "#353326")));
      ΔΔ[Cr.ΔⲆⵠΔⲆᐃΔ][Cr.ΔΔⵠ].push(ur(Ou(1, th + a, "#1D2526")));
    }
    ΔΔ[Cr.ᐃⵠⲆᐃⵠ] = [];
    ΔΔ[Cr.ᐃⵠⲆᐃⵠ][Cr.ⵠⵠΔ] = ur(Cb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Cr.ᐃⵠⲆᐃⵠ][Cr.ΔΔⵠ] = ur(Cb(1.5, 0, ["#ee71a9"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ] = [ΔΔ[Cr.ᐃⵠⲆᐃⵠ]];
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][jh] = [];
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][cu] = [];
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][3] = [];
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][gn] = [];
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][1][Cr.ⵠⵠΔ] = ur(Cb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][Cs][Cr.ΔΔⵠ] = ur(Cb(1.5, 0, ["#e2d63b"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][_l][Cr.ⵠⵠΔ] = ur(Cb(1.5, 0, ["#309cbd"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][2][Cr.ΔΔⵠ] = ur(Cb(1.5, 0, ["#309cbd"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][3][Cr.ⵠⵠΔ] = ur(Cb(1.5, 0, ["#cd232d"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][3][Cr.ΔΔⵠ] = ur(Cb(1.5, 0, ["#cd232d"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][4][Cr.ⵠⵠΔ] = ur(Cb(1.5, 0, ["#42b672"]));
    ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][Yn][Cr.ΔΔⵠ] = ur(Cb(1.5, 0, ["#42b672"]));
    if (ⵠⵠⵠⲆ.ⲆⵠΔᐃⵠⵠᐃ("cti", Vf.location.href)) {
      document.getElementById("version").innerHTML += "[CTI]";
    } else {
      ur = function (a) {
        a.loaded = 1;
        return a;
      };
    }
    ΔΔ[Cr.ΔⲆⲆΔⵠⲆΔ] = ur(function () {
      var a = document.createElement("canvas");
      var b = a.getContext("2d");
      a.width = 460;
      a.height = 220;
      b.fillStyle = "#3a2a0d";
      b.fillRect(_s, 0, a.width, a.height);
      b.lineWidth = 4;
      b.beginPath();
      b.strokeStyle = "#513810";
      for (var c = 20; c < 220; c += _j) {
        b.moveTo(kq, c);
        b.lineTo(460, c);
        b.closePath();
        b.stroke();
      }
      return a;
    }());
    ΔΔ[Cr.ⵠᐃⲆΔΔ] = [];
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ⵠⵠΔ].push(ur(Cu(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ⵠⵠΔ].push(ur(Cu(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ⵠⵠΔ].push(ur(Cu(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ΔΔⵠ].push(ur(Cu(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ΔΔⵠ].push(ur(Cu(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Cr.ⵠᐃⲆΔΔ][Cr.ΔΔⵠ].push(ur(Cu(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
    ΔΔ[Cr.ⲆΔᐃⲆ] = [];
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.3, 0, [hj[Vg], "#1b4444", "#16605a"])));
    ΔΔ[Cr.ⲆΔᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
    ΔΔ[Cr.ⵠⲆⲆΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ⵠⵠΔ].push(ur(Hu(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ⵠⵠΔ].push(ur(Hu(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ⵠⵠΔ].push(ur(Hu(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ΔΔⵠ].push(ur(Hu(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ΔΔⵠ].push(ur(Hu(0.9, 0, [hj[zl], "#2b9390", "#57bcb5"])));
    ΔΔ[Cr.ⵠⲆⲆΔ][Cr.ΔΔⵠ].push(ur(Hu(0.7, 0, [hj[Un], "#2b9390", "#57bcb5"])));
    ΔΔ[Cr.ⵠΔΔⵠⲆ] = [];
    ΔΔ[Cr.ⵠΔΔⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆΔᐃⵠᐃΔ;
    ΔΔ[Cr.ⵠΔΔⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠΔᐃΔΔⵠ;
    ΔΔ[Cr.ⵠⲆⲆΔⲆ] = [];
    ΔΔ[Cr.ⵠⲆⲆΔⲆ][Cr.ⵠⵠΔ] = ur(au(0.6, ["#0d1b1c"]));
    ΔΔ[Cr.ⵠⲆⲆΔⲆ][Cr.ΔΔⵠ] = ur(au(0.6, ["#030d14"]));
    ΔΔ[Cr.ⵠⲆⵠΔⲆ] = [];
    ΔΔ[Cr.ⵠⲆⵠΔⲆ][Cr.ⵠⵠΔ] = ur(Zt(0.6, ["#2a2938", "#242330"]));
    ΔΔ[Cr.ⵠⲆⵠΔⲆ][Cr.ΔΔⵠ] = ur(Zt(0.6, ["#1b1e30", "#161921"]));
    ΔΔ[Cr.ⲆΔⵠΔᐃⲆᐃ] = [];
    ΔΔ[Cr.ⲆΔⵠΔᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(Pb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
    ΔΔ[Cr.ⲆΔⵠΔᐃⲆᐃ][Cr.ΔΔⵠ] = ur(Pb(0.6, 0, [hj[mk], "#11635e", "#02373e", "#0b524d", "#07423f"]));
    ΔΔ[Cr.ⲆⲆⵠΔᐃⲆⵠ] = [];
    ΔΔ[Cr.ⲆⲆⵠΔᐃⲆⵠ][Cr.ⵠⵠΔ] = ur(Ab(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
    ΔΔ[Cr.ⲆⲆⵠΔᐃⲆⵠ][Cr.ΔΔⵠ] = ur(Ab(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
    ΔΔ[Cr.ᐃΔⵠⲆᐃᐃⲆ] = [];
    ΔΔ[Cr.ᐃΔⵠⲆᐃᐃⲆ][Cr.ⵠⵠΔ] = ur(Xt(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
    ΔΔ[Cr.ᐃΔⵠⲆᐃᐃⲆ][Cr.ΔΔⵠ] = ur(Xt(0.4, [hj[zr], "#11635e", "#02373e"]));
    ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃᐃ] = ur(wb(0.6, ["#BB0000"]));
    ΔΔ[Cr.ᐃⵠⲆΔⵠᐃᐃ] = ur(wb(0.6, ["#DBE71C"]));
    ΔΔ[Cr.ⲆᐃⵠⲆΔΔⲆ] = ur(wb(0.6, ["#00BB00"]));
    ΔΔ[Cr.ᐃΔᐃΔ] = [];
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, Mn));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], sr, Ko));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, tr));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, jj));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ].push(bu(0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, 0));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(1.1, [hj[gj], "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], bs, Jt));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(1.1, [hj[Ck], "#12493d", "#0e3831", "#155247", "#16695f"], true, Lu));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(0.9, [hj[Un], "#0b3629", "#144437", "#174235", "#16695f"], v, Jt));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(0.7, [hj[cg], "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ].push(bu(0.7, [hj[Ck], "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], vr, Jt));
    ΔΔ[Cr.ᐃΔΔⵠⵠ] = [];
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ⵠⵠΔ].push(ur(qu(lu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], gg), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][Lg])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ⵠⵠΔ].push(ur(qu(lu(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], Kh), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][dn])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ΔΔⵠ].push(ur(qu(lu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], ys), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][0])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ΔΔⵠ].push(ur(qu(lu(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], ha), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][Br])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ⵠⵠΔ].push(ur(qu(lu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], Pq), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][2])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ⵠⵠΔ].push(ur(qu(lu(0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], Kh), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][2])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ΔΔⵠ].push(ur(qu(lu(0.9, [hj[Ph], hj[tl], "#041c21", "#0d2522", "#0c2821", "#0d2a28"], sr), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][2])));
    ΔΔ[Cr.ᐃΔΔⵠⵠ][Cr.ΔΔⵠ].push(ur(qu(lu(0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], ha), ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][3])));
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][Wn] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][5]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][4] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][4]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][3] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][3]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][pa] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][Wq]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][dn] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][Aj]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][0] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ⵠⵠΔ][0]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][5] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][5]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][kr] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][Dt]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][3] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][3]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][2] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][2]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][bt] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][1]);
    ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][Fj] = ur(ΔΔ[Cr.ᐃΔᐃΔ][Cr.ΔΔⵠ][0]);
    ΔΔ[Cr.ᐃⵠΔᐃⲆ] = [];
    ΔΔ[Cr.ᐃⵠΔᐃⲆ][Cr.ⵠⵠΔ] = ur(hb(zg, su(0.75, Rl, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
    ΔΔ[Cr.ᐃⵠΔᐃⲆ][Cr.ΔΔⵠ] = ur(hb(Ka, su(0.75, true, [hj[Vg], "#000000", hj[Ph], "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
    ΔΔ[Cr.ⵠⵠⵠΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠⵠΔⵠ][Cr.ⵠⵠΔ] = ur(hb(qa, su(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Cr.ⵠⵠⵠΔⵠ][Cr.ΔΔⵠ] = ur(hb(jt, su(0.75, true, [hj[Zn], "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
    ΔΔ[Cr.ᐃⲆⵠΔⲆ] = [];
    ΔΔ[Cr.ᐃⲆⵠΔⲆ][Cr.ⵠⵠΔ] = ur(hb(4, su(0.75, ls, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[Cr.ᐃⲆⵠΔⲆ][Cr.ΔΔⵠ] = ur(hb(4, su(0.75, Vn, [hj[Ph], "#000000", hj[Yq], "#263947", "#263947", "#43aa82", "#29997c"])));
    ΔΔ[Cr.ⲆΔᐃᐃᐃ] = [];
    ΔΔ[Cr.ⲆΔᐃᐃᐃ][Cr.ⵠⵠΔ] = ur(hb(bn, su(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Cr.ⲆΔᐃᐃᐃ][Cr.ΔΔⵠ] = ur(hb(Ka, su(0.75, true, ["#030d14", "#000000", hj[Ck], "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Cr.ΔᐃⲆⲆⵠ] = [];
    ΔΔ[Cr.ΔᐃⲆⲆⵠ][Cr.ⵠⵠΔ] = ur(hb(Yn, su(0.75, vr, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Cr.ΔᐃⲆⲆⵠ][Cr.ΔΔⵠ] = ur(hb(qa, su(0.75, Xs, [hj[Un], "#000000", hj[re], "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Cr.ⵠⵠⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠⵠⵠΔ][Cr.ⵠⵠΔ] = ur(hb(ta, ku(0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
    ΔΔ[Cr.ⵠⵠⵠⵠΔ][Cr.ΔΔⵠ] = ur(hb(sn, ku(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
    ΔΔ[Cr.ⵠⵠⵠⲆᐃ] = [];
    ΔΔ[Cr.ⵠⵠⵠⲆᐃ][Cr.ⵠⵠΔ] = ur(hb(3, uu(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
    ΔΔ[Cr.ⵠⵠⵠⲆᐃ][Cr.ΔΔⵠ] = ur(hb(3, uu(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
    ΔΔ[Cr.ᐃⲆᐃΔⲆ] = [];
    ΔΔ[Cr.ᐃⲆᐃΔⲆ][Cr.ⵠⵠΔ] = ur(hb(3, ou(0.4, Xs, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
    ΔΔ[Cr.ᐃⲆᐃΔⲆ][Cr.ΔΔⵠ] = ur(hb(lk, ou(0.4, vi, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
    ΔΔ[Cr.ⵠⲆΔᐃΔ] = [];
    ΔΔ[Cr.ⵠⲆΔᐃΔ][Cr.ⵠⵠΔ] = ur(hb(Vl, pu(0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
    ΔΔ[Cr.ⵠⲆΔᐃΔ][Cr.ΔΔⵠ] = ur(hb(sn, pu(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
    ΔΔ[Cr.ⲆΔⵠⲆᐃ] = [];
    ΔΔ[Cr.ⲆΔⵠⲆᐃ][Cr.ⵠⵠΔ] = ur(hb(Vl, du(0.4, Nr, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
    ΔΔ[Cr.ⲆΔⵠⲆᐃ][Cr.ΔΔⵠ] = ur(hb(3, du(0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
    ΔΔ[Cr.ΔᐃⲆⵠΔ] = [];
    ΔΔ[Cr.ΔᐃⲆⵠΔ][Cr.ⵠⵠΔ] = ur(hb(ta, tu(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
    ΔΔ[Cr.ΔᐃⲆⵠΔ][Cr.ΔΔⵠ] = ur(hb(3, tu(0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
    ΔΔ[Cr.ⲆΔⵠΔⵠ] = [];
    ΔΔ[Cr.ⲆΔⵠΔⵠ][Cr.ⵠⵠΔ] = ur(hb(3, nu(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
    ΔΔ[Cr.ⲆΔⵠΔⵠ][Cr.ΔΔⵠ] = ur(hb(Kk, nu(0.4, Nn, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
    ΔΔ[Cr.ΔᐃΔᐃᐃ] = [];
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Mu(0.9, 0, ["#0d4f35"], Dh)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Mu(0.9, 0, ["#0d4f35"], wg)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Mu(0.9, 0, ["#0d4f35"], 2)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Mu(0.9, 0, ["#053339"], 0)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Mu(0.9, 0, ["#053339"], 1)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Mu(0.9, 0, ["#053339"], 2)));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Ku(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ⵠⵠΔ].push(ur(Ku(0.8, ["#292002", "#ba930e", "#6d5704"])));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Ku(0.9, ["#052919", "#0a4738", "#06321f"])));
    ΔΔ[Cr.ΔᐃΔᐃᐃ][Cr.ΔΔⵠ].push(ur(Ku(0.8, ["#052918", "#08491c", "#063417"])));
    ΔΔ[Cr.ᐃᐃⵠΔΔ] = [];
    ΔΔ[Cr.ᐃᐃⵠΔΔ][Cr.ⵠⵠΔ] = ur(hb(Math.PI / 2, Hd(0.25, true, ["#0d1b1c", "#44301b", hj[Ug], "#523e26"])));
    ΔΔ[Cr.ᐃᐃⵠΔΔ][Cr.ΔΔⵠ] = ur(hb(Math.PI / ij, Hd(0.25, true, [hj[Yq], "#082b22", "#0a2f2b", "#072824"])));
    ΔΔ[Cr.ΔΔⲆⲆᐃᐃⵠ] = [];
    ΔΔ[Cr.ΔΔⲆⲆᐃᐃⵠ].push(ur(qd(0.25, ["#44301b", "#57442a", "#523e26"], $t)));
    ΔΔ[Cr.ΔΔⲆⲆᐃᐃⵠ].push(ur(qd(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
    ΔΔ[Cr.ΔΔⲆⲆᐃᐃⵠ].push(ur(qd(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], ib)));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ] = [];
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ⵠⵠΔ].push(ur(hb(Math.PI / yg, Nd(0.25, 0, ["#0d1b1c", "#44301b", hj[$h], "#523e26", "#9b2b25"], 1))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ΔΔⵠ].push(ur(hb(Math.PI / Le, Nd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ⵠⵠΔ].push(ur(hb(Math.PI / 2, Nd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ΔΔⵠ].push(ur(hb(Math.PI / 2, Nd(0.25, 0, ["#030d14", hj[Dq], "#0a2f2b", "#072824", "#4f9246"], 2))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ⵠⵠΔ].push(ur(hb(Math.PI / 2, Nd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ΔΔⵠ].push(ur(hb(Math.PI / Le, Nd(0.25, 0, ["#030d14", hj[dg], "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], Mo))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ⵠⵠΔ].push(ur(hb(Math.PI / Wq, Nd(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], bn))));
    ΔΔ[Cr.ΔⲆⲆⲆⵠ][Cr.ΔΔⵠ].push(ur(hb(Math.PI / 2, Nd(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
    ΔΔ[Cr.ᐃᐃΔⲆⲆ] = [];
    ΔΔ[Cr.ᐃᐃΔⲆⲆ][Cr.ⵠⵠΔ] = [ur(Eu(1.2, vi, ["#352b10", "#80500b", "#7c4908"]))];
    ΔΔ[Cr.ᐃᐃΔⲆⲆ][Cr.ΔΔⵠ] = [ur(Eu(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔᐃ] = [];
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔᐃ][Cr.ⵠⵠΔ] = ur(Eu(0.8, pr, ["#0e3022", "#68622D", "#665329"]));
    ΔΔ[Cr.ⲆᐃᐃᐃⲆΔᐃ][Cr.ΔΔⵠ] = ur(Eu(0.8, true, ["#030d14", "#0F3A24", "#083326"]));
    ΔΔ[Cr.ⵠᐃⵠⵠⵠ] = [];
    ΔΔ[Cr.ⵠᐃⵠⵠⵠ][Cr.ⵠⵠΔ] = ur(ic(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
    ΔΔ[Cr.ⵠᐃⵠⵠⵠ][Cr.ΔΔⵠ] = ur(ic(0.5, le, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
    ΔΔ[Cr.ⲆⵠⵠⲆⵠ] = [];
    ΔΔ[Cr.ⲆⵠⵠⲆⵠ][Cr.ⵠⵠΔ] = ur(mb(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
    ΔΔ[Cr.ⲆⵠⵠⲆⵠ][Cr.ΔΔⵠ] = ur(mb(0.5, Rl, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
    ΔΔ[Cr.ⲆⵠⲆΔⵠ] = [];
    ΔΔ[Cr.ⲆⵠⲆΔⵠ][Cr.ⵠⵠΔ] = ur(wc(0.5, mn, ["#1b170c", "#349970", "#245c45", "#348361", hj[ia], "#bbbbbb"]));
    ΔΔ[Cr.ⲆⵠⲆΔⵠ][Cr.ΔΔⵠ] = ur(wc(0.5, vr, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
    ΔΔ[Cr.ΔⵠΔᐃⵠᐃⲆ] = [];
    ΔΔ[Cr.ΔⵠΔᐃⵠᐃⲆ][Cr.ⵠⵠΔ] = ur(Eu(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
    ΔΔ[Cr.ΔⵠΔᐃⵠᐃⲆ][Cr.ΔΔⵠ] = ur(Eu(0.8, true, [hj[Ph], "#084442", "#0a4049"]));
    ΔΔ[Cr.ΔⵠΔⲆⲆⵠⵠ] = [];
    ΔΔ[Cr.ΔⵠΔⲆⲆⵠⵠ][Cr.ⵠⵠΔ] = ur(ic(0.5, Rl, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
    ΔΔ[Cr.ΔⵠΔⲆⲆⵠⵠ][Cr.ΔΔⵠ] = ur(ic(0.5, sh, [hj[mk], "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃⲆ] = [];
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃⲆ][Cr.ⵠⵠΔ] = ur(mb(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃⲆ][Cr.ΔΔⵠ] = ur(mb(0.5, d, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
    ΔΔ[Cr.ᐃΔΔᐃⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃΔΔᐃⵠⲆⲆ][Cr.ⵠⵠΔ] = ur(wc(0.5, Xo, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
    ΔΔ[Cr.ᐃΔΔᐃⵠⲆⲆ][Cr.ΔΔⵠ] = ur(wc(0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
    ΔΔ[Cr.ᐃⲆᐃΔΔ] = [];
    ΔΔ[Cr.ᐃⲆᐃΔΔ][Cr.ⵠⵠΔ] = ur(Sc(0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
    ΔΔ[Cr.ᐃⲆᐃΔΔ][Cr.ΔΔⵠ] = ur(Sc(0.45, Xo, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
    ΔΔ[Cr.ⲆⲆⲆᐃⵠⲆΔ] = ur(Sc(0.65, Vn, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
    ΔΔ[Cr.ⲆⵠⲆΔⲆ] = [];
    ΔΔ[Cr.ⲆⵠⲆΔⲆ][Cr.ⵠⵠΔ] = ur(Du(1.4, 0, ["#3d2a6e", "#8255b5"]));
    ΔΔ[Cr.ⲆⵠⲆΔⲆ][Cr.ΔΔⵠ] = ur(Du(1.4, 0, ["#26124f", "#524082"]));
    ΔΔ[Cr.ⵠᐃΔΔᐃ] = [];
    ΔΔ[Cr.ⵠᐃΔΔᐃ][Cr.ⵠⵠΔ] = ur(Qt(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
    ΔΔ[Cr.ⵠᐃΔΔᐃ][Cr.ΔΔⵠ] = ur(Qt(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
    ΔΔ[Cr.ᐃⲆᐃⲆᐃΔᐃ] = [];
    ΔΔ[Cr.ᐃⲆᐃⲆᐃΔᐃ][Cr.ⵠⵠΔ] = ur(qb(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Cr.ᐃⲆᐃⲆᐃΔᐃ][Cr.ΔΔⵠ] = ur(qb(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Cr.ⵠⵠⲆΔⲆⵠᐃ] = [];
    ΔΔ[Cr.ⵠⵠⲆΔⲆⵠᐃ][Cr.ⵠⵠΔ] = ur(Pt(0.9, 0, ["#4d2d14", "#432516"]));
    ΔΔ[Cr.ⵠⵠⲆΔⲆⵠᐃ][Cr.ΔΔⵠ] = ur(Pt(0.9, 0, ["#282404", "#0a0a01"]));
    ΔΔ[Cr.ⲆⲆⲆΔⲆΔⲆ] = [];
    ΔΔ[Cr.ⲆⲆⲆΔⲆΔⲆ][Cr.ⵠⵠΔ] = ur(Ut(0.9, 0, ["#efd435"]));
    ΔΔ[Cr.ⲆⲆⲆΔⲆΔⲆ][Cr.ΔΔⵠ] = ur(Ut(0.9, 0, ["#fffabb"]));
    ΔΔ[Cr.ⲆᐃⲆΔⲆΔΔ] = [];
    ΔΔ[Cr.ⲆᐃⲆΔⲆΔΔ][Cr.ⵠⵠΔ] = ur(Rt(0.9, 0, ["#efd435"]));
    ΔΔ[Cr.ⲆᐃⲆΔⲆΔΔ][Cr.ΔΔⵠ] = ur(Rt(0.9, 0, ["#fffabb"]));
    ΔΔ[Cr.ⵠᐃΔⲆⲆᐃΔ] = [];
    ΔΔ[Cr.ⵠᐃΔⲆⲆᐃΔ][Cr.ⵠⵠΔ] = ur(Ut(0.9, 0, ["#efd435"]));
    ΔΔ[Cr.ⵠᐃΔⲆⲆᐃΔ][Cr.ΔΔⵠ] = ur(Ut(0.9, 0, ["rgba(255, 84, 0, 1)"]));
    ΔΔ[Cr.ᐃᐃᐃᐃⵠᐃⵠ] = [];
    ΔΔ[Cr.ᐃᐃᐃᐃⵠᐃⵠ][Cr.ⵠⵠΔ] = ur(Rt(0.9, 0, ["#efd435"]));
    ΔΔ[Cr.ᐃᐃᐃᐃⵠᐃⵠ][Cr.ΔΔⵠ] = ur(Rt(0.9, 0, ["#ff5704"]));
    ΔΔ[Cr.ΔᐃΔⵠⵠⲆⵠ] = ur(Eb(1, "#ffffff"));
    ΔΔ[Cr.ⵠⲆᐃΔΔⵠΔ] = ur(Eb(1.5, "#ffffff"));
    ΔΔ[Cr.ᐃᐃⵠΔᐃⵠⲆ] = ur(Bu(1, "Your score:", Wa * 1, "#FFF"));
    ΔΔ[Cr.ᐃⵠᐃΔⵠⲆᐃ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 243;
      c.height = a * 172;
      ab(d, a * 119.5, a * 140.125, An * a);
      tb(d, gh, b[1], a * Wn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 36.5, a * 20.125);
      d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
      d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
      d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
      d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
      d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
      d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
      d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
      d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
      d.closePath();
      tb(d, b[0], b[1], a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 15.5, a * 138.625);
      d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
      d.closePath();
      tb(d, undefined, b[Ok], a * zq);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 13.5, a * 131.625);
      d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
      d.closePath();
      tb(d, undefined, b[3], a * Fs);
      ab(d, a * 119.5, a * 140.125, a * 14.866068747318506);
      tb(d, b[4], b[Gl], f * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 106.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
      d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
      d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
      d.closePath();
      tb(d, b[H], b[7], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.5, a * 146.625);
      d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
      tb(d, lq, b[8], _g * a);
      d.save();
      d.translate(a * 75.5, a * 80.125);
      nb(d, a * -39, a * -40, a * 78, a * 78, a * 10);
      d.restore();
      tb(d, b[rq]);
      d.save();
      d.translate(a * 167, a * 80.125);
      nb(d, a * -38.5, a * -39, a * 78, a * 78, Hr * a);
      d.restore();
      tb(d, b[L]);
      return c;
    }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
    ΔΔ[Cr.ᐃΔⲆᐃΔⵠⲆ] = Δᐃ.ᐃΔⲆᐃΔⵠⲆ;
    ΔΔ[Cr.ᐃⲆΔⵠⵠ] = [];
    ΔΔ[Cr.ᐃⲆΔⵠⵠ][Cr.ⵠⵠΔ] = ur(Zb(1.5, ls, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Cr.ᐃⲆΔⵠⵠ][Cr.ΔΔⵠ] = ur(Zb(1.5, true, [hj[cg], "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Cr.ⵠΔⲆΔᐃᐃⵠ] = [];
    ΔΔ[Cr.ⵠΔⲆΔᐃᐃⵠ][Cr.ⵠⵠΔ] = ur(Ub(yg * 1, pr, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Cr.ⵠΔⲆΔᐃᐃⵠ][Cr.ΔΔⵠ] = ur(Ub(2, pr, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Cr.ⲆΔΔⵠⲆΔⵠ] = [];
    ΔΔ[Cr.ⲆΔΔⵠⲆΔⵠ][Cr.ⵠⵠΔ] = ur($b(1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
    ΔΔ[Cr.ⲆΔΔⵠⲆΔⵠ][Cr.ΔΔⵠ] = ur($b(1.5, Xo, [hj[zl], "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
    ΔΔ[Cr.ᐃᐃΔⲆΔ] = [];
    ΔΔ[Cr.ᐃᐃΔⲆΔ][Cr.ⵠⵠΔ] = ur(Xb(2.2, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Cr.ᐃᐃΔⲆΔ][Cr.ΔΔⵠ] = ur(Xb(2.2, 0, ["#0B4049", "#08383D"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⵠⲆΔ] = [];
    ΔΔ[Cr.ⲆⲆⲆⵠⵠⲆΔ][Cr.ⵠⵠΔ] = ur(Xb(2.2, 0, ["#68622D", "#665329"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⵠⲆΔ][Cr.ΔΔⵠ] = ur(Xb(2.2, 0, ["#0F3A24", "#083326"]));
    ΔΔ[Cr.ᐃΔⲆᐃⵠ] = [];
    ΔΔ[Cr.ᐃΔⲆᐃⵠ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#A89F67", "#9E8456"]));
    ΔΔ[Cr.ᐃΔⲆᐃⵠ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#15514F", "#0F3F3D"]));
    ΔΔ[Cr.ᐃΔΔⵠⵠᐃⵠ] = [];
    ΔΔ[Cr.ᐃΔΔⵠⵠᐃⵠ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#c67933", "#b17238"]));
    ΔΔ[Cr.ᐃΔΔⵠⵠᐃⵠ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Cr.ⵠⵠᐃΔⲆⲆⵠ] = [];
    ΔΔ[Cr.ⵠⵠᐃΔⲆⲆⵠ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#3a8214", "#4a9c1e"]));
    ΔΔ[Cr.ⵠⵠᐃΔⲆⲆⵠ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#032d29", "#044640"]));
    ΔΔ[Cr.ⲆⵠΔⵠⵠⲆᐃ] = [];
    ΔΔ[Cr.ⲆⵠΔⵠⵠⲆᐃ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
    ΔΔ[Cr.ⲆⵠΔⵠⵠⲆᐃ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#1c6161", "#07413f"]));
    ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆⲆ] = [];
    ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆⲆ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#328a56", "#449573"]));
    ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆⲆ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Cr.ᐃΔⲆΔⵠⲆⵠ] = [];
    ΔΔ[Cr.ᐃΔⲆΔⵠⲆⵠ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#c98e2f", "#a36b11"]));
    ΔΔ[Cr.ᐃΔⲆΔⵠⲆⵠ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Cr.ⵠⵠΔᐃΔⵠⲆ] = [];
    ΔΔ[Cr.ⵠⵠΔᐃΔⵠⲆ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#b22419", "#99110e"]));
    ΔΔ[Cr.ⵠⵠΔᐃΔⵠⲆ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#04323c", "#03222b"]));
    ΔΔ[Cr.ⵠᐃⲆΔᐃⲆΔ] = [];
    ΔΔ[Cr.ⵠᐃⲆΔᐃⲆΔ][Cr.ⵠⵠΔ] = ur(Iu(0.8, 0, ["#13a56d", "#098a58"]));
    ΔΔ[Cr.ⵠᐃⲆΔᐃⲆΔ][Cr.ΔΔⵠ] = ur(Iu(0.8, 0, ["#043c37", "#032b23"]));
    ΔΔ[Cr.ⲆΔΔⵠᐃⵠⵠ] = Ob(wg, [{
      f: Xb,
      x: 0,
      y: 0,
      a: 1,
      r: 0,
      c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Cr.ΔᐃⵠⲆΔΔᐃ] = Ob(Ur, [{
      f: Pt,
      x: Ko,
      y: 0,
      a: 1,
      r: -Math.PI / U,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Cr.ᐃⲆⵠΔⲆⵠᐃ] = Ob(1, [{
      f: Qc,
      x: 0,
      y: -_g,
      a: Br,
      r: 0,
      c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Cr.ⲆΔΔᐃᐃⲆⲆ] = Ob(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
    ΔΔ[Cr.ⵠⵠⲆⵠⲆΔΔ] = [];
    ΔΔ[Cr.ⵠⵠⲆⵠⲆΔΔ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#7d613e", "#9e7e5a"]));
    ΔΔ[Cr.ⵠⵠⲆⵠⲆΔΔ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#084442", "#125e5a"]));
    ΔΔ[Cr.ΔΔⲆᐃᐃ] = [];
    ΔΔ[Cr.ΔΔⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#9E8456", "#A89F67"]));
    ΔΔ[Cr.ΔΔⲆᐃᐃ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
    ΔΔ[Cr.ⵠⵠⵠΔΔᐃΔ] = [];
    ΔΔ[Cr.ⵠⵠⵠΔΔᐃΔ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#665329", "#68622D"]));
    ΔΔ[Cr.ⵠⵠⵠΔΔᐃΔ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#083326", "#0F3A24"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⵠΔΔ] = [];
    ΔΔ[Cr.ⲆⲆⲆⵠⵠΔΔ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#c67933", "#ec952d"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⵠΔΔ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Cr.ΔⲆᐃᐃⲆᐃⵠ] = [];
    ΔΔ[Cr.ΔⲆᐃᐃⲆᐃⵠ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#375809", "#4b770e"]));
    ΔΔ[Cr.ΔⲆᐃᐃⲆᐃⵠ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#09542d", "#0d5d2f"]));
    ΔΔ[Cr.ⵠⲆΔⵠⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆΔⵠⵠⵠΔ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#585809", "#72770e"]));
    ΔΔ[Cr.ⵠⲆΔⵠⵠⵠΔ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#295209", "#305d0d"]));
    ΔΔ[Cr.ᐃΔⵠΔΔᐃᐃ] = [];
    ΔΔ[Cr.ᐃΔⵠΔΔᐃᐃ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#b9b094", "#e2d2c0"]));
    ΔΔ[Cr.ᐃΔⵠΔΔᐃᐃ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#126366", "#0d484b"]));
    ΔΔ[Cr.ΔⲆⵠΔᐃⵠⲆ] = [];
    ΔΔ[Cr.ΔⲆⵠΔᐃⵠⲆ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#3f8662", "#30915d"]));
    ΔΔ[Cr.ΔⲆⵠΔᐃⵠⲆ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Cr.ⲆᐃΔⵠⲆΔⵠ] = [];
    ΔΔ[Cr.ⲆᐃΔⵠⲆΔⵠ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#c79153", "#dfa868"]));
    ΔΔ[Cr.ⲆᐃΔⵠⲆΔⵠ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Cr.ⵠΔⲆᐃᐃⲆⲆ] = [];
    ΔΔ[Cr.ⵠΔⲆᐃᐃⲆⲆ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#768b5b", "#819984"]));
    ΔΔ[Cr.ⵠΔⲆᐃᐃⲆⲆ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#0c4540", "#0e5153"]));
    ΔΔ[Cr.ᐃᐃⵠΔΔⲆᐃ] = [];
    ΔΔ[Cr.ᐃᐃⵠΔΔⲆᐃ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#567465", "#627c6e"]));
    ΔΔ[Cr.ᐃᐃⵠΔΔⲆᐃ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#073927", "#075040"]));
    ΔΔ[Cr.ΔΔᐃΔⵠᐃⲆ] = [];
    ΔΔ[Cr.ΔΔᐃΔⵠᐃⲆ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#996b3a", "#bf956b"]));
    ΔΔ[Cr.ΔΔᐃΔⵠᐃⲆ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#0e6553", "#094437"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⲆᐃΔ] = [];
    ΔΔ[Cr.ⲆⲆⲆⵠⲆᐃΔ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#7a634a", "#a68f77"]));
    ΔΔ[Cr.ⲆⲆⲆⵠⲆᐃΔ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#1e4d43", "#113c32"]));
    ΔΔ[Cr.ΔⵠΔⵠⲆᐃⵠ] = [];
    ΔΔ[Cr.ΔⵠΔⵠⲆᐃⵠ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#99403c", "#bc796c"]));
    ΔΔ[Cr.ΔⵠΔⵠⲆᐃⵠ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#1e434d", "#11303c"]));
    ΔΔ[Cr.ΔᐃΔᐃⲆᐃᐃ] = [];
    ΔΔ[Cr.ΔᐃΔᐃⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#88504e", "#b3857c"]));
    ΔΔ[Cr.ΔᐃΔᐃⲆᐃᐃ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#253b41", "#162930"]));
    ΔΔ[Cr.ⲆⵠᐃΔⵠᐃⵠ] = [];
    ΔΔ[Cr.ⲆⵠᐃΔⵠᐃⵠ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#0f8870", "#23af93"]));
    ΔΔ[Cr.ⲆⵠᐃΔⵠᐃⵠ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#032829", "#083233"]));
    ΔΔ[Cr.ΔⲆⵠᐃᐃᐃⲆ] = [];
    ΔΔ[Cr.ΔⲆⵠᐃᐃᐃⲆ][Cr.ⵠⵠΔ] = ur(kb(0.9, 0, ["#618a20", "#84a74e"]));
    ΔΔ[Cr.ΔⲆⵠᐃᐃᐃⲆ][Cr.ΔΔⵠ] = ur(kb(0.9, 0, ["#1f4632", "#335d47"]));
    ΔΔ[Cr.ᐃⵠΔⲆᐃ] = [];
    ΔΔ[Cr.ᐃⵠΔⲆᐃ][Cr.ⵠⵠΔ] = ur(_b(1.2, tk, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
    ΔΔ[Cr.ᐃⵠΔⲆᐃ][Cr.ΔΔⵠ] = ur(_b(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
    ΔΔ[Cr.ᐃⲆⲆⲆᐃ] = [];
    ΔΔ[Cr.ᐃⲆⲆⲆᐃ][Cr.ⵠⵠΔ] = ur(od(ub * 1, Kh, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Cr.ᐃⲆⲆⲆᐃ][Cr.ΔΔⵠ] = ur(od(1, true, [hj[cg], "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Cr.ⲆⲆᐃⲆΔ] = [];
    ΔΔ[Cr.ⲆⲆᐃⲆΔ][Cr.ⵠⵠΔ] = ur(ad(Ur * 1, Oh, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Cr.ⲆⲆᐃⲆΔ][Cr.ΔΔⵠ] = ur(ad(1, Pg, [hj[Qr], "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Cr.ΔⲆᐃⲆⵠ] = [];
    ΔΔ[Cr.ΔⲆᐃⲆⵠ][Cr.ⵠⵠΔ] = ur(dd(ub * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", hj[x]]));
    ΔΔ[Cr.ΔⲆᐃⲆⵠ][Cr.ΔΔⵠ] = ur(dd(ik * 1, Vn, [hj[gj], "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Cr.ⲆⲆΔⵠⵠ] = [];
    ΔΔ[Cr.ⲆⲆΔⵠⵠ][Cr.ⵠⵠΔ] = ur(dd(1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Cr.ⲆⲆΔⵠⵠ][Cr.ΔΔⵠ] = ur(dd(1, ha, [hj[Ds], "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Cr.ᐃⵠⵠΔⵠ] = [];
    ΔΔ[Cr.ᐃⵠⵠΔⵠ][Cr.ⵠⵠΔ] = ur(ld(1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Cr.ᐃⵠⵠΔⵠ][Cr.ΔΔⵠ] = ur(ld(1, sh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Cr.ᐃΔⲆᐃᐃ] = [];
    ΔΔ[Cr.ᐃΔⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(xd(0.8, ls, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
    ΔΔ[Cr.ᐃΔⲆᐃᐃ][Cr.ΔΔⵠ] = ur(xd(0.8, vr, [hj[ra], "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Cr.ⲆΔⲆᐃᐃ] = [];
    ΔΔ[Cr.ⲆΔⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(Cd(0.8, Vn, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
    ΔΔ[Cr.ⲆΔⲆᐃᐃ][Cr.ΔΔⵠ] = ur(Cd(0.8, true, [hj[Yq], "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
    ΔΔ[Cr.ᐃᐃᐃΔⵠ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔⵠ][Cr.ⵠⵠΔ] = ur(pd(0.8, Vn, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Cr.ᐃᐃᐃΔⵠ][Cr.ΔΔⵠ] = ur(pd(0.8, vr, [hj[zr], "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Cr.Ⲇᐃⵠⵠⵠ] = [];
    ΔΔ[Cr.Ⲇᐃⵠⵠⵠ][Cr.ⵠⵠΔ] = ur(md(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
    ΔΔ[Cr.Ⲇᐃⵠⵠⵠ][Cr.ΔΔⵠ] = ur(md(0.8, true, [hj[Ph], "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
    ΔΔ[Cr.ᐃᐃᐃᐃⵠ] = [];
    ΔΔ[Cr.ᐃᐃᐃᐃⵠ][Cr.ⵠⵠΔ] = ur(md(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", hj[ul]]));
    ΔΔ[Cr.ᐃᐃᐃᐃⵠ][Cr.ΔΔⵠ] = ur(md(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Cr.ᐃⲆᐃΔⲆⲆⲆ] = [];
    ΔΔ[Cr.ᐃⲆᐃΔⲆⲆⲆ][Cr.ⵠⵠΔ] = ur(vd(1.5, le, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
    ΔΔ[Cr.ᐃⲆᐃΔⲆⲆⲆ][Cr.ΔΔⵠ] = ur(vd(1.5, Vn, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
    ΔΔ[Cr.ΔⵠⲆⲆⲆⲆⵠ] = [];
    ΔΔ[Cr.ΔⵠⲆⲆⲆⲆⵠ][Cr.ⵠⵠΔ] = ur(vd(yl * 1, ue, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Cr.ΔⵠⲆⲆⲆⲆⵠ][Cr.ΔΔⵠ] = ur(vd(Eg * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
    ΔΔ[Cr.ⲆᐃⵠⵠⵠΔⵠ] = [];
    ΔΔ[Cr.ⲆᐃⵠⵠⵠΔⵠ][Cr.ⵠⵠΔ] = ur(bd(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
    ΔΔ[Cr.ⲆᐃⵠⵠⵠΔⵠ][Cr.ΔΔⵠ] = ur(bd(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
    ΔΔ[Cr.ⵠᐃⵠⲆΔᐃᐃ] = [];
    ΔΔ[Cr.ⵠᐃⵠⲆΔᐃᐃ][Cr.ⵠⵠΔ] = ur(bd(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Cr.ⵠᐃⵠⲆΔᐃᐃ][Cr.ΔΔⵠ] = ur(bd(er * 1, Bj, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Cr.ⲆΔⲆᐃᐃᐃᐃ] = [];
    ΔΔ[Cr.ⲆΔⲆᐃᐃᐃᐃ][Cr.ⵠⵠΔ] = ur(bd(1.5, ha, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
    ΔΔ[Cr.ⲆΔⲆᐃᐃᐃᐃ][Cr.ΔΔⵠ] = ur(bd(1.5, vi, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
    ΔΔ[Cr.ⲆⲆΔᐃᐃⵠⲆ] = [];
    ΔΔ[Cr.ⲆⲆΔᐃᐃⵠⲆ][Cr.ⵠⵠΔ] = ur(bd(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Cr.ⲆⲆΔᐃᐃⵠⲆ][Cr.ΔΔⵠ] = ur(bd(1, kk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Cr.ⲆⵠᐃⵠᐃⲆⵠ] = [];
    ΔΔ[Cr.ⲆⵠᐃⵠᐃⲆⵠ][Cr.ⵠⵠΔ] = ur(ud(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
    ΔΔ[Cr.ⲆⵠᐃⵠᐃⲆⵠ][Cr.ΔΔⵠ] = ur(ud(1.5, true, [hj[ve], "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
    ΔΔ[Cr.ᐃⵠᐃⵠⲆⲆᐃ] = [];
    ΔΔ[Cr.ᐃⵠᐃⵠⲆⲆᐃ][Cr.ⵠⵠΔ] = ur(ud(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Cr.ᐃⵠᐃⵠⲆⲆᐃ][Cr.ΔΔⵠ] = ur(ud(1, tq, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Cr.ⲆⲆᐃΔΔⲆⵠ] = [];
    ΔΔ[Cr.ⲆⲆᐃΔΔⲆⵠ][Cr.ⵠⵠΔ] = ur(jd(1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
    ΔΔ[Cr.ⲆⲆᐃΔΔⲆⵠ][Cr.ΔΔⵠ] = ur(jd(1.5, Nn, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
    ΔΔ[Cr.ᐃⲆⵠⵠⵠⲆⵠ] = [];
    ΔΔ[Cr.ᐃⲆⵠⵠⵠⲆⵠ][Cr.ⵠⵠΔ] = ur(jd(dn * 1, Jn, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
    ΔΔ[Cr.ᐃⲆⵠⵠⵠⲆⵠ][Cr.ΔΔⵠ] = ur(jd(ce * 1, kk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
    ΔΔ[Cr.ⲆΔΔⲆⵠ] = [];
    ΔΔ[Cr.ⲆΔΔⲆⵠ][Cr.ⵠⵠΔ] = ur(fd(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
    ΔΔ[Cr.ⲆΔΔⲆⵠ][Cr.ΔΔⵠ] = ur(fd(0.5, 0, ["#032428", "#266161", hj[jl], "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", hj[ug], hj[xr]]));
    ΔΔ[Cr.ᐃⵠΔⲆⵠ] = [];
    ΔΔ[Cr.ᐃⵠΔⲆⵠ][Cr.ⵠⵠΔ] = ur(sc(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
    ΔΔ[Cr.ᐃⵠΔⲆⵠ][Cr.ΔΔⵠ] = ur(sc(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
    ΔΔ[Cr.ⵠⵠΔⵠᐃ] = [];
    ΔΔ[Cr.ⵠⵠΔⵠᐃ][Cr.ⵠⵠΔ] = ur(Fb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
    ΔΔ[Cr.ⵠⵠΔⵠᐃ][Cr.ΔΔⵠ] = ur(Fb(0.9, [hj[mk], "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
    ΔΔ[Cr.ⵠᐃᐃΔΔ] = [];
    ΔΔ[Cr.ⵠᐃᐃΔΔ][Cr.ⵠⵠΔ] = ur(hb(Math.PI, Yb(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
    ΔΔ[Cr.ⵠᐃᐃΔΔ][Cr.ΔΔⵠ] = ur(hb(Math.PI, Yb(0.9, [hj[re], "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
    ΔΔ[Cr.ⲆΔⲆΔⵠᐃⵠ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 450;
      c.height = a * 470;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 226.5, a * 91.546875);
      d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
      d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
      d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
      d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
      d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
      d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
      d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
      d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
      d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
      d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
      d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
      d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
      d.closePath();
      tb(d, us, b[Dh], In);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 129.546875);
      d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
      d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
      d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
      d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
      d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
      d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
      d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
      d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
      d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
      d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
      d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
      d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
      d.closePath();
      tb(d, undefined, b[0], Yn);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 160.546875);
      d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
      d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
      d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
      d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
      d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
      d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
      d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
      d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
      d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
      d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
      d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
      d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
      d.closePath();
      tb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 205.5, a * 194.546875);
      d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
      d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
      d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
      d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
      d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
      d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
      d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
      d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
      d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
      d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
      d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
      d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
      d.closePath();
      tb(d, D, b[0], Rh);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149.5, a * 93.546875);
      d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
      d.closePath();
      tb(d, Tg, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 224.5, a * 66.546875);
      d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
      d.closePath();
      tb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 302.5, a * 88.546875);
      d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
      d.closePath();
      tb(d, undefined, b[kq], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 361.5, a * 147.546875);
      d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
      d.closePath();
      tb(d, undefined, b[0], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 379.5, a * 225.546875);
      d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
      d.closePath();
      tb(d, undefined, b[tr], 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 90.5, a * 147.546875);
      d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
      d.closePath();
      tb(d, undefined, b[rh], Lb);
      return c;
    }(0.6, ["#FFFFFF"]));
    ΔΔ[Cr.ΔΔΔⵠᐃ] = [];
    ΔΔ[Cr.ΔΔΔⵠᐃ][Cr.ⵠⵠΔ] = ur(jb(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
    ΔΔ[Cr.ΔΔΔⵠᐃ][Cr.ΔΔⵠ] = ur(jb(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
    ΔΔ[Cr.ᐃⵠⵠⵠᐃ] = [];
    ΔΔ[Cr.ᐃⵠⵠⵠᐃ][Cr.ⵠⵠΔ] = ur(Rd(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
    ΔΔ[Cr.ᐃⵠⵠⵠᐃ][Cr.ΔΔⵠ] = ur(Rd(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
    ΔΔ[Cr.ⵠΔᐃⵠⵠ] = [];
    ΔΔ[Cr.ⵠΔᐃⵠⵠ][Cr.ⵠⵠΔ] = ur(Ed(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
    ΔΔ[Cr.ⵠΔᐃⵠⵠ][Cr.ΔΔⵠ] = ur(Ed(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
    ΔΔ[Cr.ΔΔᐃⵠⵠ] = [];
    ΔΔ[Cr.ΔΔᐃⵠⵠ][Cr.ⵠⵠΔ] = ur(Dd(0.63, ls, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
    ΔΔ[Cr.ΔΔᐃⵠⵠ][Cr.ΔΔⵠ] = ur(Dd(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
    ΔΔ[Cr.Δⵠⵠᐃᐃ] = [];
    ΔΔ[Cr.Δⵠⵠᐃᐃ][Cr.ⵠⵠΔ] = ur(Vt(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
    ΔΔ[Cr.Δⵠⵠᐃᐃ][Cr.ΔΔⵠ] = ur(Vt(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
    ΔΔ[Cr.ⲆᐃⲆᐃᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(Tt(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
    ΔΔ[Cr.ⲆᐃⲆᐃᐃ][Cr.ΔΔⵠ] = ur(Tt(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
    ΔΔ[Cr.ⵠᐃΔⲆⲆⲆΔ] = [];
    ΔΔ[Cr.ⵠᐃΔⲆⲆⲆΔ][Cr.ⵠⵠΔ] = ur(zc(0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
    ΔΔ[Cr.ⵠᐃΔⲆⲆⲆΔ][Cr.ΔΔⵠ] = ur(zc(0.42, d, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
    ΔΔ[Cr.ΔᐃᐃΔᐃᐃⵠ] = [];
    ΔΔ[Cr.ΔᐃᐃΔᐃᐃⵠ][Cr.ⵠⵠΔ] = ur(Fc(0.9, ["#e4c027"]));
    ΔΔ[Cr.ΔᐃᐃΔᐃᐃⵠ][Cr.ΔΔⵠ] = ur(Fc(0.9, ["#D8E57F"]));
    ΔΔ[Cr.ᐃⲆΔⵠⲆᐃᐃ] = [];
    ΔΔ[Cr.ᐃⲆΔⵠⲆᐃᐃ][Cr.ⵠⵠΔ] = ur(_c(0.42, Xo, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
    ΔΔ[Cr.ᐃⲆΔⵠⲆᐃᐃ][Cr.ΔΔⵠ] = ur(_c(0.42, Nn, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
    ΔΔ[Cr.ⲆᐃⲆᐃⵠᐃᐃ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 149;
      c.height = a * 356;
      d.save();
      d.translate(a * 74.5, a * 177.5);
      nb(d, a * -57.5, a * -161.5, a * Bl, a * 323, a * 10);
      d.restore();
      tb(d, b[Ol], b[1], a * 4);
      d.save();
      d.translate(a * 74.5, a * 177.5);
      nb(d, a * -57.5, a * 50.5, a * 100, a * 105, a * Fg);
      d.restore();
      tb(d, b[hi], b[ce], xt * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 125);
      d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
      d.closePath();
      tb(d, b[2], b[Le], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 120);
      d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
      d.closePath();
      tb(d, b[3], b[Gg], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 228);
      d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
      d.closePath();
      tb(d, b[2], b[2], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 16, a * 224);
      d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
      d.closePath();
      tb(d, b[3], b[Vl], Hr * a);
      d.save();
      d.translate(a * 72, a * 68.5);
      nb(d, a * -41.5, a * -36.5, a * 73, a * 73, Y * a);
      d.restore();
      tb(d, b[4]);
      d.save();
      d.translate(a * 72, a * 175.5);
      nb(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
      d.restore();
      tb(d, b[Lb]);
      d.save();
      d.translate(a * 72, a * 279.5);
      nb(d, a * -41.5, a * -40.5, a * 73, a * 73, a * eq);
      d.restore();
      tb(d, b[4]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Sa * a, a * 338);
      d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
      d.closePath();
      tb(d, b[C], b[2], a * Fs);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Sa * a, a * 333);
      d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
      d.closePath();
      tb(d, b[lk], b[3], a * 10);
      return c;
    }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
    ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(yd(0.5, d, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
    ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆᐃ][Cr.ΔΔⵠ] = ur(yd(0.5, Kh, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
    ΔΔ[Cr.ᐃΔᐃⵠⵠΔⲆ] = [];
    ΔΔ[Cr.ᐃΔᐃⵠⵠΔⲆ][Cr.ⵠⵠΔ] = ur(Fd(0.5, sh, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
    ΔΔ[Cr.ᐃΔᐃⵠⵠΔⲆ][Cr.ΔΔⵠ] = ur(Fd(0.5, sh, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
    ΔΔ[Cr.ⲆⵠⵠΔⲆΔΔ] = ur(function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 118;
      d.height = a * 129;
      e.save();
      e.translate(a * 90, a * 90);
      nb(e, a * -86.5, a * -86, a * 110, a * 110, a * Et);
      e.restore();
      tb(e, c[0], c[1], kr);
      return d;
    }(0.8, 0, ["#5f6061", "#939393"]));
    ΔΔ[Cr.ᐃⲆᐃᐃⵠⲆⲆ] = Ob(bt, [{
      f: Pt,
      x: Dh,
      y: 0,
      a: 1,
      r: Math.PI / 2.5,
      c: ["#4d2d14", "#432516"]
    }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
    ΔΔ[Cr.ⵠᐃⲆⵠᐃ] = [];
    ΔΔ[Cr.ⵠᐃⲆⵠᐃ][Cr.ⵠⵠΔ] = ur(Md(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Cr.ⵠᐃⲆⵠᐃ][Cr.ΔΔⵠ] = ur(Md(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Cr.ⵠⲆⵠⲆᐃⵠᐃ] = [];
    ΔΔ[Cr.ⵠⲆⵠⲆᐃⵠᐃ][Cr.ⵠⵠΔ] = ur(Td(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
    ΔΔ[Cr.ⵠⲆⵠⲆᐃⵠᐃ][Cr.ΔΔⵠ] = ur(Td(Eg * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
    ΔΔ[Cr.ⵠⵠⲆⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠⲆⵠΔ][Cr.ⵠⵠΔ] = ur(hb(3, Ld(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
    ΔΔ[Cr.ⵠⵠⲆⵠΔ][Cr.ΔΔⵠ] = ur(hb(3, Ld(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
    ΔΔ[Cr.ᐃⲆⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃⲆⵠⲆⲆ][Cr.ⵠⵠΔ] = ur(hb(3, Qd(0.7, Vn, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
    ΔΔ[Cr.ᐃⲆⵠⲆⲆ][Cr.ΔΔⵠ] = ur(hb(3, Qd(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
    ΔΔ[Cr.ⵠⲆᐃᐃΔ] = [];
    ΔΔ[Cr.ⵠⲆᐃᐃΔ][Cr.ⵠⵠΔ] = ur(hb(3, kd(0.65, Xs, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
    ΔΔ[Cr.ⵠⲆᐃᐃΔ][Cr.ΔΔⵠ] = ur(hb(3, kd(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
    ΔΔ[Cr.ΔⲆⲆⵠⲆ] = [];
    ΔΔ[Cr.ΔⲆⲆⵠⲆ][Cr.ⵠⵠΔ] = ur(hb(3, Jd(0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
    ΔΔ[Cr.ΔⲆⲆⵠⲆ][Cr.ΔΔⵠ] = ur(hb(Ik, Jd(0.67, true, [hj[Yq], "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
    ΔΔ[Cr.ΔⵠⲆⵠⵠ] = [];
    ΔΔ[Cr.ΔⵠⲆⵠⵠ][Cr.ⵠⵠΔ] = ur(hb(Dn, Pd(0.67, d, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
    ΔΔ[Cr.ΔⵠⲆⵠⵠ][Cr.ΔΔⵠ] = ur(hb(3, Pd(0.67, Xs, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
    ΔΔ[Cr.ⲆᐃᐃΔⲆ] = [];
    ΔΔ[Cr.ⲆᐃᐃΔⲆ][Cr.ⵠⵠΔ] = ur(hb(Dn, Wd(0.67, ls, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
    ΔΔ[Cr.ⲆᐃᐃΔⲆ][Cr.ΔΔⵠ] = ur(hb(3, Wd(0.67, sh, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
    ΔΔ[Cr.ⵠⲆᐃⲆᐃ] = [];
    ΔΔ[Cr.ⵠⲆᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(hb(Ea, Id(1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
    ΔΔ[Cr.ⵠⲆᐃⲆᐃ][Cr.ΔΔⵠ] = ur(hb(fa, Id(V * 1, tk, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
    ΔΔ[Cr.ⲆᐃᐃᐃⲆ] = [];
    ΔΔ[Cr.ⲆᐃᐃᐃⲆ][Cr.ⵠⵠΔ] = ur(hb(jg, Ad(ub * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
    ΔΔ[Cr.ⲆᐃᐃᐃⲆ][Cr.ΔΔⵠ] = ur(hb(3, Ad(1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
    ΔΔ[Cr.ⵠⲆⲆⵠⲆ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠⲆ][Cr.ⵠⵠΔ] = ur(hb(vg, Ac(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
    ΔΔ[Cr.ⵠⲆⲆⵠⲆ][Cr.ΔΔⵠ] = ur(hb(Fh, Ac(0.5, Rl, ["#030d14", "#485e66", "#1f343f"])));
    ΔΔ[Cr.ⵠᐃⲆⲆΔ] = [];
    ΔΔ[Cr.ⵠᐃⲆⲆΔ][Cr.ⵠⵠΔ] = ur(hb(3, sm(er * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
    ΔΔ[Cr.ⵠᐃⲆⲆΔ][Cr.ΔΔⵠ] = ur(hb(_i, sm(Fo * 1, sh, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
    ΔΔ[Cr.ΔᐃᐃΔⲆ] = [];
    ΔΔ[Cr.ΔᐃᐃΔⲆ][Cr.ⵠⵠΔ] = ur(hb(3, Ad(1, Vn, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
    ΔΔ[Cr.ΔᐃᐃΔⲆ][Cr.ΔΔⵠ] = ur(hb(3, Ad(sd * 1, Oh, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
    ΔΔ[Cr.ⵠᐃᐃΔᐃ] = [];
    ΔΔ[Cr.ⵠᐃᐃΔᐃ][Cr.ⵠⵠΔ] = ur(hb(3, Ad(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
    ΔΔ[Cr.ⵠᐃᐃΔᐃ][Cr.ΔΔⵠ] = ur(hb(3, Ad(Aj * 1, Nn, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
    ΔΔ[Cr.Ⲇᐃᐃⵠᐃ] = [];
    ΔΔ[Cr.Ⲇᐃᐃⵠᐃ][Cr.ⵠⵠΔ] = ur(hb(3, Ad(ub * 1, ha, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
    ΔΔ[Cr.Ⲇᐃᐃⵠᐃ][Cr.ΔΔⵠ] = ur(hb(Vl, Ad(1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
    ΔΔ[Cr.ΔⲆⲆⲆⲆ] = [];
    ΔΔ[Cr.ΔⲆⲆⲆⲆ][Cr.ⵠⵠΔ] = ur(Zc(0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
    ΔΔ[Cr.ΔⲆⲆⲆⲆ][Cr.ΔΔⵠ] = ur(Zc(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
    ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ] = [];
    ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ].push(ur(Zc(0.8, kk, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
    ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ].push(ur(Zc(0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
    ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ].push(ur(Zc(0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
    ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆⲆ].push(ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ][0]);
    ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆⲆ].push(ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ][0]);
    ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆⲆ].push(ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ][0]);
    ΔΔ[Cr.ⵠⲆⲆⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠΔ][Cr.ⵠⵠΔ] = ur($d(0.06, false, ["#141414", "#c4a23a", "#816511"]));
    ΔΔ[Cr.ⵠⲆⲆⵠΔ][Cr.ΔΔⵠ] = ur($d(0.06, Bj, ["#030d14", "#2b6664", "#133d3c"]));
    ΔΔ[Cr.ⲆᐃⲆⲆⲆᐃᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆⲆⲆᐃᐃ].push(ur($d(0.08, false, ["#141414", "#c4a23a", "#816511"])));
    ΔΔ[Cr.ⲆᐃⲆⲆⲆᐃᐃ].push(ur($d(0.08, v, ["#141414", "#e2bd4e", "#a38018"])));
    ΔΔ[Cr.ⲆᐃⲆⲆⲆᐃᐃ].push(ur($d(0.08, Bh, ["#141414", "#b0902e", "#634d09"])));
    ΔΔ[Cr.ᐃⲆⲆΔⲆ] = Ob(1.5, [{
      f: lm,
      x: Ko,
      y: 0,
      a: 1,
      r: tr,
      c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Cr.ᐃⵠⲆⵠⵠⵠⵠ] = [];
    ΔΔ[Cr.ᐃⵠⲆⵠⵠⵠⵠ][Cr.ⵠⵠΔ] = ur(cm(0.8, true, ["#347f93", "#54a4ba"]));
    ΔΔ[Cr.ᐃⵠⲆⵠⵠⵠⵠ][Cr.ΔΔⵠ] = ur(cm(0.8, true, ["#98ede3", "#94f2e7"]));
    ΔΔ[Cr.Δᐃᐃᐃᐃᐃᐃ] = [];
    ΔΔ[Cr.Δᐃᐃᐃᐃᐃᐃ][Cr.ⵠⵠΔ] = ur(vm(0.8, Nr, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
    ΔΔ[Cr.Δᐃᐃᐃᐃᐃᐃ][Cr.ΔΔⵠ] = ur(vm(0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
    ΔΔ[Cr.ΔⲆᐃΔᐃᐃᐃ] = [];
    ΔΔ[Cr.ΔⲆᐃΔᐃᐃᐃ][Cr.ⵠⵠΔ] = ur(mm(0.8, vi, ["#a9e4ed", "#86d4e0"]));
    ΔΔ[Cr.ΔⲆᐃΔᐃᐃᐃ][Cr.ΔΔⵠ] = ur(mm(0.8, true, ["#83ddd4", "#485e66"]));
    ΔΔ[Cr.ⲆΔᐃⲆⲆ] = [];
    ΔΔ[Cr.ⲆΔᐃⲆⲆ][Cr.ⵠⵠΔ] = ur(Nc(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
    ΔΔ[Cr.ⲆΔᐃⲆⲆ][Cr.ΔΔⵠ] = ur(Nc(0.8, Oh, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
    ΔΔ[Cr.ᐃⵠⵠΔⲆⲆΔ] = [];
    ΔΔ[Cr.ᐃⵠⵠΔⲆⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔⲆⵠⵠⲆᐃ;
    ΔΔ[Cr.ᐃⵠⵠΔⲆⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ⲆᐃⵠⲆᐃΔⵠ;
    ΔΔ[Cr.ⲆⲆᐃᐃΔᐃᐃ] = [];
    ΔΔ[Cr.ⲆⲆᐃᐃΔᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔⲆⵠᐃⲆⲆ;
    ΔΔ[Cr.ⲆⲆᐃᐃΔᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔΔᐃᐃⲆⵠⵠ;
    ΔΔ[Cr.ΔⲆΔᐃⵠΔⵠ] = [];
    ΔΔ[Cr.ΔⲆΔᐃⵠΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠᐃᐃΔⵠⲆ;
    ΔΔ[Cr.ΔⲆΔᐃⵠΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⵠᐃⵠΔⲆ;
    ΔΔ[Cr.ᐃᐃᐃⵠᐃ] = [];
    ΔΔ[Cr.ᐃᐃᐃⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⵠΔⲆⲆᐃ;
    ΔΔ[Cr.ᐃᐃᐃⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔΔⲆᐃⵠΔⵠ;
    ΔΔ[Cr.ᐃᐃⵠᐃΔΔⲆ] = [];
    ΔΔ[Cr.ᐃᐃⵠᐃΔΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆΔΔᐃᐃⵠ;
    ΔΔ[Cr.ᐃᐃⵠᐃΔΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⵠⲆⲆⲆᐃ;
    ΔΔ[Cr.ⵠⵠⲆᐃᐃ] = [];
    ΔΔ[Cr.ⵠⵠⲆᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃᐃᐃΔⲆⲆ;
    ΔΔ[Cr.ⵠⵠⲆᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⲆΔΔⵠⲆ;
    ΔΔ[Cr.ⲆΔⵠⵠᐃΔⲆ] = [];
    ΔΔ[Cr.ⲆΔⵠⵠᐃΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⲆᐃⲆⵠᐃ;
    ΔΔ[Cr.ⲆΔⵠⵠᐃΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠᐃⲆⲆ;
    ΔΔ[Cr.ᐃⲆΔᐃΔ] = [];
    ΔΔ[Cr.ᐃⲆΔᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠⲆΔⲆΔᐃ;
    ΔΔ[Cr.ᐃⲆΔᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠⵠⵠⵠⲆΔ;
    ΔΔ[Cr.ⵠΔⵠΔΔⵠⲆ] = [];
    ΔΔ[Cr.ⵠΔⵠΔΔⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔⵠⲆᐃΔ;
    ΔΔ[Cr.ⵠΔⵠΔΔⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠⲆᐃⵠ;
    ΔΔ[Cr.ⵠⲆⲆᐃᐃ] = [];
    ΔΔ[Cr.ⵠⲆⲆᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆⲆⵠᐃᐃΔ;
    ΔΔ[Cr.ⵠⲆⲆᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃᐃⵠⲆⵠ;
    ΔΔ[Cr.ⲆⵠⲆᐃⲆΔᐃ] = [];
    ΔΔ[Cr.ⲆⵠⲆᐃⲆΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔⲆⲆⵠⲆⵠ;
    ΔΔ[Cr.ⲆⵠⲆᐃⲆΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆᐃⵠⵠⵠⵠ;
    ΔΔ[Cr.ΔᐃΔⵠᐃ] = [];
    ΔΔ[Cr.ΔᐃΔⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.Ⲇⵠⵠᐃᐃⵠⵠ;
    ΔΔ[Cr.ΔᐃΔⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆΔⲆᐃⲆⲆ;
    ΔΔ[Cr.ⵠᐃⵠⵠΔΔⵠ] = [];
    ΔΔ[Cr.ⵠᐃⵠⵠΔΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⵠᐃΔⲆᐃ;
    ΔΔ[Cr.ⵠᐃⵠⵠΔΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⵠⲆΔΔⲆ;
    ΔΔ[Cr.ⵠΔΔᐃⲆ] = [];
    ΔΔ[Cr.ⵠΔΔᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃᐃⵠᐃⵠΔ;
    ΔΔ[Cr.ⵠΔΔᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⲆΔᐃⵠⵠ;
    ΔΔ[Cr.ΔΔᐃⵠᐃ] = [];
    ΔΔ[Cr.ΔΔᐃⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔⲆⲆⲆⲆⵠ;
    ΔΔ[Cr.ΔΔᐃⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆΔⲆⲆⲆⲆ;
    ΔΔ[Cr.ᐃⲆⵠⲆⵠΔΔ] = Δᐃ.ᐃⲆⵠⲆⵠΔΔ;
    ΔΔ[Cr.ⵠⵠⲆΔΔ] = [];
    ΔΔ[Cr.ⵠⵠⲆΔΔ][Cr.ⵠⵠΔ] = ur(im(0.75, Rl, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
    ΔΔ[Cr.ⵠⵠⲆΔΔ][Cr.ΔΔⵠ] = ur(im(0.75, le, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
    ΔΔ[Cr.ⲆᐃⲆᐃⵠΔⲆ] = ur(ec(0.3, ["#092813", "#1f773d"], 0));
    ΔΔ[Cr.ⵠⲆᐃⵠⵠᐃᐃ] = ur(ec(0.3, ["#092813", "#1f773d"], Ud));
    ΔΔ[Cr.ⲆⵠⲆⵠᐃᐃΔ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 60;
      c.height = a * 60;
      d.translate(a * -25, a * -25);
      d.translate(Lu, mh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      tb(d, b[0]);
      d.translate(Dh, -Cj * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 24, a * 50);
      d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
      d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
      d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
      d.closePath();
      tb(d, b[1]);
      return c;
    }(0.6, ["#092813", "#1f773d"]));
    ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ] = [];
    ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ].push(ur(Kc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
    ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ].push(ur(Kc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], $t)));
    ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ].push(ur(Kc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
    ΔΔ[Cr.ΔⲆΔΔᐃᐃⵠ] = [];
    var c = ur(Kc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    ΔΔ[Cr.ΔⲆΔΔᐃᐃⵠ].push(c);
    ΔΔ[Cr.ΔⲆΔΔᐃᐃⵠ].push(c);
    ΔΔ[Cr.ΔⲆΔΔᐃᐃⵠ].push(c);
    ΔΔ[Cr.ᐃⲆᐃⵠᐃⵠⵠ] = [];
    ΔΔ[Cr.ᐃⲆᐃⵠᐃⵠⵠ].push(ur(Kc(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], ik)));
    ΔΔ[Cr.ᐃⲆᐃⵠᐃⵠⵠ].push(ur(Kc(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], dn)));
    ΔΔ[Cr.ᐃⲆᐃⵠᐃⵠⵠ].push(ur(Kc(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], ub)));
    ΔΔ[Cr.ΔᐃΔⲆⲆᐃᐃ] = ur(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 170;
      var g = b * 172;
      var i = f / Wq;
      var a = g / 2;
      d.width = f;
      d.height = g;
      e.translate(i, a);
      e.save();
      for (var j = Wh; j < 10; j++) {
        e.rotate(Math.PI / Ca);
        e.save();
        e.translate(b * 65, 0);
        gb(e, 3, hg * b, b * 4);
        tb(e, c[Kr]);
        e.restore();
      }
      e.restore();
      ab(e, 0, 0, b * 40);
      tb(e, undefined, c[Lu], _h * b);
      ab(e, rh, Kr, b * 20);
      tb(e, c[0]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Cr.ᐃΔΔⲆᐃⲆΔ] = ur(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 130;
      var g = b * 142;
      var h = f / 2;
      var a = g / 2;
      d.width = f;
      d.height = g;
      ab(e, h, a, b * 40);
      tb(e, undefined, c[0], b * kg);
      ab(e, h, a, b * 30);
      tb(e, undefined, c[yk], b * 7);
      ab(e, h, a, b * 20);
      tb(e, c[Fj]);
      return d;
    }(0.3, ["#FFFFFF"]));
    ΔΔ[Cr.ⵠⵠΔⲆⲆᐃⲆ] = ur(ec(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], Lg));
    ΔΔ[Cr.ⲆΔⲆΔⵠᐃᐃ] = ur(hb(Math.PI / cd, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 316;
      c.height = a * 365;
      d.save();
      d.translate(a * 156.07142639160156, a * 51.81248474121094);
      d.rotate(0);
      nb(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
      d.restore();
      tb(d, b[0], b[0], a * Hg);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
      d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
      d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
      d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
      d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
      d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
      d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
      d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
      d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
      d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
      d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
      d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
      d.closePath();
      tb(d, b[Fj], b[Ol], a * ng);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
      d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
      d.closePath();
      tb(d, b[Lg], b[$t], $q * a);
      return c;
    }(0.2, ["#FFFFFF"])));
    ΔΔ[Cr.ᐃⵠᐃᐃΔ] = [];
    ΔΔ[Cr.ᐃⵠᐃᐃΔ][Cr.ⵠⵠΔ] = ur(nm(0.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
    ΔΔ[Cr.ᐃⵠᐃᐃΔ][Cr.ΔΔⵠ] = ur(nm(0.85, Xo, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
    ΔΔ[Cr.ΔⲆΔᐃᐃᐃⲆ] = [];
    ΔΔ[Cr.ΔⲆΔᐃᐃᐃⲆ].push(ur(Kc(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
    ΔΔ[Cr.ΔⲆΔᐃᐃᐃⲆ].push(ur(Kc(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], V)));
    ΔΔ[Cr.ΔⲆΔᐃᐃᐃⲆ].push(ur(Kc(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
    ΔΔ[Cr.ᐃᐃᐃⲆᐃ] = [];
    ΔΔ[Cr.ᐃᐃᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(Oc(0.37, vr, ["#2a2938", "#242330", "#313041"]));
    ΔΔ[Cr.ᐃᐃᐃⲆᐃ][Cr.ΔΔⵠ] = ur(Oc(0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
    ΔΔ[Cr.ᐃΔᐃⵠⵠ] = [];
    ΔΔ[Cr.ᐃΔᐃⵠⵠ][Cr.ⵠⵠΔ] = ur(dc(0.17, d, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
    ΔΔ[Cr.ᐃΔᐃⵠⵠ][Cr.ΔΔⵠ] = ur(dc(0.17, pr, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
    ΔΔ[Cr.ⵠⵠⲆⲆⵠ] = [];
    ΔΔ[Cr.ⵠⵠⲆⲆⵠ][Cr.ⵠⵠΔ] = ur(Tc(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
    ΔΔ[Cr.ⵠⵠⲆⲆⵠ][Cr.ΔΔⵠ] = ur(Tc(0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
    ΔΔ[Cr.ᐃΔᐃⵠΔ] = [];
    ΔΔ[Cr.ᐃΔᐃⵠΔ][Cr.ⵠⵠΔ] = ur(Tc(0.55, Nr, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
    ΔΔ[Cr.ᐃΔᐃⵠΔ][Cr.ΔΔⵠ] = ur(Tc(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
    ΔΔ[Cr.ΔⵠᐃⲆᐃ] = [];
    ΔΔ[Cr.ΔⵠᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(hc(0.2, Xo, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
    ΔΔ[Cr.ΔⵠᐃⲆᐃ][Cr.ΔΔⵠ] = ur(hc(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
    ΔΔ[Cr.ΔⲆΔᐃⵠ] = [];
    ΔΔ[Cr.ΔⲆΔᐃⵠ][Cr.ⵠⵠΔ] = ur(hc(0.2, Xo, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
    ΔΔ[Cr.ΔⲆΔᐃⵠ][Cr.ΔΔⵠ] = ur(hc(0.2, Vn, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
    ΔΔ[Cr.ⵠⵠΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠΔΔⵠ][Cr.ⵠⵠΔ] = ur(hc(0.2, vi, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
    ΔΔ[Cr.ⵠⵠΔΔⵠ][Cr.ΔΔⵠ] = ur(hc(0.2, Xo, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
    ΔΔ[Cr.ⲆᐃᐃΔᐃ] = [];
    ΔΔ[Cr.ⲆᐃᐃΔᐃ][Cr.ⵠⵠΔ] = ur(wd(0.24, Xs, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
    ΔΔ[Cr.ⲆᐃᐃΔᐃ][Cr.ΔΔⵠ] = ur(wd(0.24, Kh, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
    ΔΔ[Cr.ⵠΔⵠᐃⵠ] = [];
    ΔΔ[Cr.ⵠΔⵠᐃⵠ][Cr.ⵠⵠΔ] = ur(Od(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
    ΔΔ[Cr.ⵠΔⵠᐃⵠ][Cr.ΔΔⵠ] = ur(Od(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
    ΔΔ[Cr.ⵠΔΔⲆΔ] = [];
    ΔΔ[Cr.ⵠΔΔⲆΔ][Cr.ⵠⵠΔ] = ur(hb(3, pc(0.9, tk, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
    ΔΔ[Cr.ⵠΔΔⲆΔ][Cr.ΔΔⵠ] = ur(hb(lk, pc(0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
    ΔΔ[Cr.ⲆᐃⵠⲆΔᐃⲆ] = [];
    ΔΔ[Cr.ⲆᐃⵠⲆΔᐃⲆ][Cr.ⵠⵠΔ] = ur(hb(fa, pc(ce * 1, ha, [Tg, li, undefined, "#c8efef", "#c8efef"])));
    ΔΔ[Cr.ⲆᐃⵠⲆΔᐃⲆ][Cr.ΔΔⵠ] = ur(hb(3, pc(1, true, [Ya, Qi, us, "#87d2e6", "#87d2e6"])));
    ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ] = [];
    ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ].push(ur($c(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], jj)));
    ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ].push(ur($c(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], sd)));
    ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ].push(ur($c(0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
    ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ] = [];
    ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ].push(ur(Vc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
    ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ].push(ur(Vc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
    ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ].push(ur(Vc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], er)));
    ΔΔ[Cr.ᐃᐃΔⲆⲆᐃⲆ] = [];
    ΔΔ[Cr.ᐃᐃΔⲆⲆᐃⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Ko, 1)));
    ΔΔ[Cr.ᐃᐃΔⲆⲆᐃⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], jh, 1)));
    ΔΔ[Cr.ᐃᐃΔⲆⲆᐃⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], ce, 1)));
    ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ] = [];
    ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, Kr)));
    ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], Yt, Kr)));
    ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ].push(ur(gu(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], Aj, 0)));
    ΔΔ[Cr.Ⲇᐃᐃⵠⵠ] = [];
    ΔΔ[Cr.Ⲇᐃᐃⵠⵠ][Cr.ⵠⵠΔ] = ur(hb(Kk, bm(0.7, Xs, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
    ΔΔ[Cr.Ⲇᐃᐃⵠⵠ][Cr.ΔΔⵠ] = ur(hb(B, bm(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
    ΔΔ[Cr.ⲆΔⵠⵠⲆ] = [];
    ΔΔ[Cr.ⲆΔⵠⵠⲆ][Cr.ⵠⵠΔ] = ur(hb(3, bm(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
    ΔΔ[Cr.ⲆΔⵠⵠⲆ][Cr.ΔΔⵠ] = ur(hb(3, bm(0.7, Kh, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
    ΔΔ[Cr.ΔⵠᐃΔᐃ] = [];
    ΔΔ[Cr.ΔⵠᐃΔᐃ][Cr.ⵠⵠΔ] = ur(hb(3, bm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
    ΔΔ[Cr.ΔⵠᐃΔᐃ][Cr.ΔΔⵠ] = ur(hb(3, bm(0.7, Pg, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
    ΔΔ[Cr.ᐃⵠΔᐃⵠ] = [];
    ΔΔ[Cr.ᐃⵠΔᐃⵠ][Cr.ⵠⵠΔ] = ur(hb(Vl, bm(0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
    ΔΔ[Cr.ᐃⵠΔᐃⵠ][Cr.ΔΔⵠ] = ur(hb(3, bm(0.7, tk, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
    ΔΔ[Cr.ΔⵠΔⲆⵠΔⵠ] = [];
    ΔΔ[Cr.ΔⵠΔⲆⵠΔⵠ].push(ur(nc(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
    ΔΔ[Cr.ΔⵠΔⲆⵠΔⵠ].push(ur(nc(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
    ΔΔ[Cr.ΔⵠΔⲆⵠΔⵠ].push(ur(nc(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
    ΔΔ[Cr.ⵠⵠΔᐃᐃΔⲆ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 188;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
      d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
      d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
      d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
      d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
      d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
      d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
      d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
      d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
      d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
      d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
      d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
      d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
      d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
      d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
      d.closePath();
      tb(d, b[0], b[jj], zg * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
      d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
      d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
      d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
      d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
      d.closePath();
      tb(d, b[0], b[0], a * 2);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
      d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
      d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
      d.closePath();
      tb(d, b[kq], b[0], a * 2);
      return c;
    }(1.1, ["#BB0000"]));
    ΔΔ[Cr.ⲆⲆΔⲆᐃΔᐃ] = ur(hb(Math.PI, function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 238;
      c.height = a * 230;
      d.translate(a * -93, a * -110);
      ab(d, a * 213.5, a * 256.75, a * 75);
      tb(d, b);
      ab(d, a * 213.5, a * 175.75, a * 25);
      tb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 156.5, a * 137.75);
      d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217.5, a * 178.75);
      d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
      d.lineWidth = Ug * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 130.5, a * 124.75);
      d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 183.75);
      d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107.5, a * 213.75);
      d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
      d.lineWidth = jq * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 212.5, a * 187.75);
      d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
      d.lineWidth = Zq * a;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 102.5, a * 258.75);
      d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 214.5, a * 192.75);
      d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
      d.lineWidth = a * 17;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 219.5, a * 158.75);
      d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
      d.closePath();
      d.lineWidth = a * Bq;
      d.strokeStyle = b;
      d.stroke();
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 210.5, a * 160.75);
      d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
      d.closePath();
      d.lineWidth = Ke * a;
      d.strokeStyle = b;
      d.stroke();
      return c;
    }(0.9, "#BB0000")));
    ΔΔ[Cr.ᐃⵠⵠΔᐃ] = [];
    ΔΔ[Cr.ᐃⵠⵠΔᐃ][Cr.ⵠⵠΔ] = ur(Yd(0.55, ha, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
    ΔΔ[Cr.ᐃⵠⵠΔᐃ][Cr.ΔΔⵠ] = ur(Yd(0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", hj[rl], "#070d16"]));
    ΔΔ[Cr.ᐃΔᐃΔΔ] = [];
    ΔΔ[Cr.ᐃΔᐃΔΔ][Cr.ⵠⵠΔ] = ur(om(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
    ΔΔ[Cr.ᐃΔᐃΔΔ][Cr.ΔΔⵠ] = ur(om(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
    ΔΔ[Cr.ΔΔᐃⲆΔ] = [];
    ΔΔ[Cr.ΔΔᐃⲆΔ][Cr.ⵠⵠΔ] = ur(Rc(0.6, vr, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
    ΔΔ[Cr.ΔΔᐃⲆΔ][Cr.ΔΔⵠ] = ur(Rc(0.6, Oh, [hj[cg], "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
    ΔΔ[Cr.ⲆⲆⲆᐃⲆ] = [];
    ΔΔ[Cr.ⲆⲆⲆᐃⲆ][Cr.ⵠⵠΔ] = ur(mc(0.58, Vn, ["#dbce71", hj[Jg], "#c4bc51"]));
    ΔΔ[Cr.ⲆⲆⲆᐃⲆ][Cr.ΔΔⵠ] = ur(mc(0.58, pr, ["#2b7c57", "#15543c", "#1a7961"]));
    ΔΔ[Cr.ᐃⵠᐃⲆᐃ] = [];
    ΔΔ[Cr.ᐃⵠᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(Yc(0.69, Xs, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
    ΔΔ[Cr.ᐃⵠᐃⲆᐃ][Cr.ΔΔⵠ] = ur(Yc(0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ] = [];
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ⵠⵠΔ].push(ur(Zd(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ⵠⵠΔ].push(ur(Ec(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ⵠⵠΔ].push(ur(rc(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ΔΔⵠ].push(ur(Zd(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ΔΔⵠ].push(ur(Ec(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
    ΔΔ[Cr.ⵠⵠΔᐃⵠ][Cr.ΔΔⵠ].push(ur(rc(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
    ΔΔ[Cr.ᐃΔᐃᐃΔ] = [];
    ΔΔ[Cr.ᐃΔᐃᐃΔ][Cr.ⵠⵠΔ] = ur(Mc(wg * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
    ΔΔ[Cr.ᐃΔᐃᐃΔ][Cr.ΔΔⵠ] = ur(Mc(Eg * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
    ΔΔ[Cr.ⵠᐃⲆⵠᐃⲆⲆ] = [];
    ΔΔ[Cr.ⵠᐃⲆⵠᐃⲆⲆ][Cr.ⵠⵠΔ] = ur(cc(ub * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Cr.ⵠᐃⲆⵠᐃⲆⲆ][Cr.ΔΔⵠ] = ur(cc(V * 1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Cr.ᐃⲆⵠⵠⵠΔΔ] = [];
    ΔΔ[Cr.ᐃⲆⵠⵠⵠΔΔ][Cr.ⵠⵠΔ] = ur(vc(wg * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
    ΔΔ[Cr.ᐃⲆⵠⵠⵠΔΔ][Cr.ΔΔⵠ] = ur(vc(1, ["#050505", "#327570", "#021724", "#200333"]));
    ΔΔ[Cr.ⵠΔⲆⲆⵠᐃⲆ] = [];
    ΔΔ[Cr.ⵠΔⲆⲆⵠᐃⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠΔⲆⲆⵠᐃⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠΔⲆⲆⵠᐃⲆ][Cr.ⵠⵠΔ] = [Δᐃ.ⲆⲆⵠⲆΔΔⲆ, Δᐃ.ⵠᐃᐃΔⵠΔΔ, Δᐃ.ᐃⲆⵠΔⲆᐃᐃ, Δᐃ.ΔᐃⵠⲆᐃΔⵠ, Δᐃ.ᐃᐃΔⵠΔⵠⵠ, Δᐃ.ᐃΔⵠᐃⲆⲆΔ, Δᐃ.ᐃⲆΔⲆⵠᐃΔ, Δᐃ.ΔⲆⲆΔⲆⵠⲆ, Δᐃ.ΔᐃⵠᐃΔⲆΔ, Δᐃ.ΔᐃⲆⲆⵠΔΔ, Δᐃ.ΔⵠΔᐃⲆᐃᐃ, Δᐃ.ⵠᐃⲆⲆΔⵠΔ, Δᐃ.ᐃⲆⲆⵠⵠᐃⲆ, Δᐃ.ⲆⲆⵠΔⵠᐃⲆ, Δᐃ.ⵠᐃᐃⵠⵠᐃⲆ, Δᐃ.ⵠⲆⵠᐃⲆⲆⲆ, Δᐃ.ⲆᐃΔⲆᐃᐃᐃ, Δᐃ.ⲆⲆⵠΔⲆᐃⲆ, Δᐃ.ⲆᐃΔΔᐃⵠⲆ, Δᐃ.ⵠΔΔⵠⲆᐃΔ, Δᐃ.ⲆⵠⲆⵠⵠᐃⲆ, Δᐃ.ⵠⵠΔⵠΔⵠΔ, Δᐃ.ΔⲆΔᐃⲆⲆⵠ, Δᐃ.ΔⲆⲆⲆᐃᐃᐃ, Δᐃ.ᐃⲆΔᐃⲆᐃⵠ, Δᐃ.ᐃⲆᐃⵠᐃΔΔ, Δᐃ.ⵠΔΔᐃⵠᐃⵠ, Δᐃ.ⲆᐃⵠⵠⵠᐃΔ, Δᐃ.ⵠⵠᐃΔⲆⲆⲆ, Δᐃ.ᐃⲆΔᐃⵠⵠᐃ, Δᐃ.ᐃΔⵠᐃᐃᐃⲆ, Δᐃ.ⵠⲆⲆΔⲆⲆΔ, Δᐃ.ⲆⵠⵠᐃΔᐃᐃ, Δᐃ.ⲆΔⲆΔⲆⲆᐃ, Δᐃ.ΔΔΔΔⵠᐃᐃ, Δᐃ.ΔⵠⵠⲆᐃᐃⵠ, Δᐃ.ΔⲆᐃΔᐃⵠⵠ, Δᐃ.ΔⵠⵠⲆⲆⲆΔ, Δᐃ.ⵠᐃⲆⵠᐃᐃΔ, Δᐃ.ᐃᐃⵠⲆⲆΔⵠ, Δᐃ.ⵠⲆⲆΔⵠⲆⵠ, Δᐃ.ⵠⲆⲆᐃⲆᐃⵠ, Δᐃ.ΔⲆᐃⵠΔⲆᐃ, Δᐃ.ⵠᐃᐃⵠᐃᐃⵠ, Δᐃ.ΔᐃΔΔΔⲆⵠ, Δᐃ.ᐃⵠΔᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔⵠⵠᐃ, Δᐃ.ΔᐃᐃΔᐃⲆⲆ, Δᐃ.ⵠᐃᐃᐃⵠᐃⲆ, Δᐃ.ⵠⵠᐃΔΔᐃⲆ, Δᐃ.ⲆᐃᐃⲆᐃᐃⵠ, Δᐃ.ᐃΔⲆᐃᐃⵠⵠ, Δᐃ.ⵠⵠᐃⲆⵠⲆⲆ, Δᐃ.ᐃⲆⵠᐃⵠⲆⵠ, Δᐃ.ⲆⵠⵠⵠⲆΔⲆ, Δᐃ.ΔⲆΔⲆΔΔⵠ];
    ΔΔ[Cr.ⵠΔⲆⲆⵠᐃⲆ][Cr.ΔΔⵠ] = [Δᐃ.ⲆΔⵠⵠⵠᐃᐃ, Δᐃ.ⲆⵠⵠΔΔΔΔ, Δᐃ.ΔⵠⵠⵠⵠΔⲆ, Δᐃ.ᐃⵠΔᐃΔⲆᐃ, Δᐃ.ᐃᐃᐃⵠΔⵠⵠ, Δᐃ.ᐃᐃⵠⲆᐃⲆΔ, Δᐃ.ⵠΔⵠⲆΔⵠⲆ, Δᐃ.ᐃⵠᐃΔΔΔΔ, Δᐃ.ⲆᐃⵠᐃΔⵠΔ, Δᐃ.ΔΔⵠⲆᐃⲆᐃ, Δᐃ.ᐃΔᐃⵠΔΔⲆ, Δᐃ.ΔⵠⲆⵠᐃⵠᐃ, Δᐃ.ⲆᐃΔⲆⲆⲆⵠ, Δᐃ.ΔⲆⲆⵠⵠΔΔ, Δᐃ.ⵠⲆⲆᐃⵠΔⵠ, Δᐃ.ⲆᐃΔⵠⲆⵠⲆ, Δᐃ.ⵠΔⲆⵠⵠⲆᐃ, Δᐃ.ᐃᐃⵠΔᐃΔⵠ, Δᐃ.ⲆΔᐃΔΔᐃΔ, Δᐃ.ⵠⲆᐃⵠⲆⲆⵠ, Δᐃ.ⲆⲆⲆᐃⲆⵠⲆ, Δᐃ.ΔΔⲆⵠⲆⵠΔ, Δᐃ.ⲆᐃᐃⵠⵠᐃΔ, Δᐃ.ⵠⵠⲆᐃΔⵠⵠ, Δᐃ.ⲆⵠⵠΔΔⵠΔ, Δᐃ.ΔⲆᐃᐃⲆΔⲆ, Δᐃ.ⲆΔΔᐃᐃⵠⲆ, Δᐃ.ᐃᐃⵠΔᐃᐃⵠ, Δᐃ.ⲆΔᐃᐃΔᐃΔ, Δᐃ.ⵠΔⵠᐃⲆⲆΔ, Δᐃ.ΔᐃⵠⲆᐃᐃⵠ, Δᐃ.ΔⲆΔᐃΔⲆⵠ, Δᐃ.ΔⲆⵠᐃΔⲆⲆ, Δᐃ.ⲆᐃⵠᐃΔᐃⵠ, Δᐃ.ⵠⵠⲆⲆⲆᐃⵠ, Δᐃ.ᐃᐃᐃᐃⲆΔⲆ, Δᐃ.ⵠⲆᐃΔΔⵠᐃ, Δᐃ.ⵠⲆΔⵠΔΔⵠ, Δᐃ.ⲆⵠΔΔΔΔⲆ, Δᐃ.ⵠⵠΔⵠᐃᐃΔ, Δᐃ.ⵠΔᐃⲆΔΔⲆ, Δᐃ.ᐃΔᐃΔΔΔᐃ, Δᐃ.ⵠⵠΔⵠΔᐃᐃ, Δᐃ.ΔⲆΔⲆᐃⵠⲆ, Δᐃ.ⵠΔΔⵠⵠΔΔ, Δᐃ.ⵠᐃⲆⵠⲆΔⲆ, Δᐃ.ᐃⵠⵠⵠᐃⲆΔ, Δᐃ.ⵠᐃᐃⵠⵠⲆΔ, Δᐃ.ⲆᐃΔᐃᐃᐃᐃ, Δᐃ.ⵠⲆΔΔᐃᐃⲆ, Δᐃ.ⲆᐃΔⵠᐃⲆⲆ, Δᐃ.ΔⵠⵠⵠⲆⲆΔ, Δᐃ.ᐃΔⵠᐃᐃᐃⵠ, Δᐃ.ⵠᐃⲆⲆᐃⵠⲆ, Δᐃ.ⲆΔΔᐃⵠⵠⲆ, Δᐃ.ⵠᐃⵠΔΔⵠᐃ];
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ] = [];
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ⵠⵠΔ].push(ur(zu(1.1, Bj, ["#252B28", "#747471", "#83827e"], Ko)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ⵠⵠΔ].push(ur(zu(0.9, aa, ["#252B28", "#747471", "#83827e"], Eg)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ⵠⵠΔ].push(ur(zu(1, false, ["#252B28", "#747471", "#83827e"], 2)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ⵠⵠΔ].push(ur(zu(0.9, bs, ["#252B28", "#747471", "#83827e"], _t)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ΔΔⵠ].push(ur(zu(1.1, bs, ["#030d14", "#123335", "#183f3f"], Ol)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ΔΔⵠ].push(ur(zu(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ΔΔⵠ].push(ur(zu(V * 1, ys, [hj[Ds], "#123335", "#183f3f"], 2)));
    ΔΔ[Cr.ⵠⵠᐃⵠᐃ][Cr.ΔΔⵠ].push(ur(zu(0.9, Pk, [hj[Yg], "#123335", "#183f3f"], ij)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ] = [];
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ].push(ur(zu(1.1, true, ["#252B28", "#58645F", "#75827D"], tg)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ].push(ur(zu(0.9, Xo, ["#252B28", "#58645F", "#75827D"], 2)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ].push(ur(zu(1, vi, ["#252B28", "#58645F", "#75827D"], $r)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ].push(ur(zu(0.9, true, ["#252B28", "#58645F", "#75827D"], Le)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ].push(ur(zu(1.1, true, [hj[mk], "#123335", "#183f3f"], 2)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ].push(ur(zu(0.9, ha, [hj[Cq], "#123335", "#183f3f"], eh)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ].push(ur(zu(1, Xs, ["#030d14", "#123335", "#183f3f"], yh)));
    ΔΔ[Cr.ⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ].push(ur(zu(0.9, Pg, [hj[Cq], "#123335", "#183f3f"], 2)));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ] = [];
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ⵠⵠΔ].push(ur(Au(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Cr.ᐃⵠᐃᐃⲆ][Cr.ΔΔⵠ].push(ur(Au(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ] = [];
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ⵠⵠΔ].push(ur(Hu(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ⵠⵠΔ].push(ur(Hu(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ⵠⵠΔ].push(ur(Hu(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ΔΔⵠ].push(ur(Hu(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ΔΔⵠ].push(ur(Hu(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Cr.ⲆΔⵠᐃⵠ][Cr.ΔΔⵠ].push(ur(Hu(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
    ΔΔ[Cr.ᐃᐃᐃΔ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ⵠⵠΔ].push(ur(Uc(1.7, ls, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ⵠⵠΔ].push(ur(Uc(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ⵠⵠΔ].push(ur(Uc(1.3, wt, ["#1d051e", "#c27add", "#cd98e5"])));
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ΔΔⵠ].push(ur(Uc(1.7, Vn, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ΔΔⵠ].push(ur(Uc(1.5, Vn, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Cr.ᐃᐃᐃΔ][Cr.ΔΔⵠ].push(ur(Uc(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
    ΔΔ[Cr.ⵠⲆⵠᐃⵠⵠⲆ] = [];
    ΔΔ[Cr.ⵠⲆⵠᐃⵠⵠⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆⵠᐃⵠⵠⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆⵠᐃⵠⵠⲆ][Cr.ⵠⵠΔ].push(ur(gc(1, ["#2d53c4"])));
    ΔΔ[Cr.ⵠⲆⵠᐃⵠⵠⲆ][Cr.ΔΔⵠ].push(ur(gc(1, ["#2d53c4"])));
    ΔΔ[Cr.ⵠΔⵠⲆΔⵠΔ] = [];
    ΔΔ[Cr.ⵠΔⵠⲆΔⵠΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠΔⵠⲆΔⵠΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠΔⵠⲆΔⵠΔ][Cr.ⵠⵠΔ].push(ur(gc(1, ["#c4912d"])));
    ΔΔ[Cr.ⵠΔⵠⲆΔⵠΔ][Cr.ΔΔⵠ].push(ur(gc(1, ["#c4912d"])));
    ΔΔ[Cr.ΔⲆⵠΔⵠΔᐃ] = [];
    ΔΔ[Cr.ΔⲆⵠΔⵠΔᐃ][Cr.ⵠⵠΔ] = ur(um(1, ["#414040"]));
    ΔΔ[Cr.ΔⲆⵠΔⵠΔᐃ][Cr.ΔΔⵠ] = ur(um(1, ["#153635"]));
    ΔΔ[Cr.ⵠΔΔΔⵠⵠⲆ] = [];
    ΔΔ[Cr.ⵠΔΔΔⵠⵠⲆ][Cr.ⵠⵠΔ] = ur(vd(1, Pe, [hj[Jr], "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Cr.ⵠΔΔΔⵠⵠⲆ][Cr.ΔΔⵠ] = ur(vd(ub * 1, tq, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Cr.ΔⵠΔⲆᐃⲆᐃ] = [];
    ΔΔ[Cr.ΔⵠΔⲆᐃⲆᐃ][Cr.ⵠⵠΔ] = ur(bd(Yt * 1, false, [hj[vh], "#EBF2F0", "#b2d4d1", "#b2d4d1", hj[Hg], "#b2d4d1"]));
    ΔΔ[Cr.ΔⵠΔⲆᐃⲆᐃ][Cr.ΔΔⵠ] = ur(bd(1, Pk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Cr.ᐃΔⵠⵠΔⵠᐃ] = [];
    ΔΔ[Cr.ᐃΔⵠⵠΔⵠᐃ][Cr.ⵠⵠΔ] = ur(bd(1, tq, ["#EBF2F0", hj[$q], "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Cr.ᐃΔⵠⵠΔⵠᐃ][Cr.ΔΔⵠ] = ur(bd(1, v, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Cr.ⵠΔⲆΔⵠᐃΔ] = [];
    ΔΔ[Cr.ⵠΔⲆΔⵠᐃΔ][Cr.ⵠⵠΔ] = ur(jd(Cs * 1, v, [hj[Gs], "#EBF2F0", "#b2d4d1", "#b2d4d1", hj[Js], "#b2d4d1"]));
    ΔΔ[Cr.ⵠΔⲆΔⵠᐃΔ][Cr.ΔΔⵠ] = ur(jd(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Cr.ΔⲆⵠⵠⵠΔⲆ] = [];
    ΔΔ[Cr.ΔⲆⵠⵠⵠΔⲆ][Cr.ⵠⵠΔ] = ur(ud(Br * 1, false, ["#EBF2F0", hj[Hg], "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
    ΔΔ[Cr.ΔⲆⵠⵠⵠΔⲆ][Cr.ΔΔⵠ] = ur(ud(Fo * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
    ΔΔ[Cr.ΔⵠⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⵠⵠⵠΔ][Cr.ⵠⵠΔ] = ur(fc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
    ΔΔ[Cr.ΔⵠⵠⵠΔ][Cr.ΔΔⵠ] = ur(fc(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
    ΔΔ[Cr.ⲆᐃⲆΔΔ] = [];
    ΔΔ[Cr.ⲆᐃⲆΔΔ][Cr.ⵠⵠΔ] = ur(jc(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
    ΔΔ[Cr.ⲆᐃⲆΔΔ][Cr.ΔΔⵠ] = ur(jc(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
    ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ] = [];
    ΔΔ[Cr.ᐃᐃΔᐃΔ] = [];
    ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ] = [];
    ΔΔ[Cr.ΔΔΔⵠⵠ] = [];
    for (a = ko; Ok > a; a++) {
      ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ][a] = document.createElement("canvas");
      ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ][a].width = 193;
      ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ][a].height = 193;
      ΔΔ[Cr.ᐃᐃΔᐃΔ][a] = ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ][a].getContext("2d");
      ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ][a] = document.createElement("canvas");
      ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ][a].width = 600;
      ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ][a].height = 600;
      ΔΔ[Cr.ΔΔΔⵠⵠ][a] = ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ][a].getContext("2d");
    }
    ΔΔ[Cr.ⵠⲆΔᐃⵠᐃⵠ] = [];
    ΔΔ[Cr.ⵠⲆΔᐃⵠᐃⵠ][Cr.ⵠⵠΔ] = ur(um(1, ["#c8e0de"]));
    ΔΔ[Cr.ⵠⲆΔᐃⵠᐃⵠ][Cr.ΔΔⵠ] = ur(um(1, ["#147071"]));
    ΔΔ[Cr.ⲆᐃⵠⲆΔⲆⲆ] = [];
    ΔΔ[Cr.ⲆᐃⵠⲆΔⲆⲆ][Cr.ⵠⵠΔ] = ur(um(1, ["#231912"]));
    ΔΔ[Cr.ⲆᐃⵠⲆΔⲆⲆ][Cr.ΔΔⵠ] = ur(um(1, ["#021719"]));
    ΔΔ[Cr.ⵠΔⲆΔᐃⵠⲆ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 253;
      c.height = a * 192;
      d.save();
      d.translate(a * 37, a * 94);
      nb(d, a * -7, -Wr * a, a * 14, a * 37, mt * a);
      d.restore();
      tb(d, b[0]);
      d.save();
      d.translate(a * 131, a * 94);
      nb(d, a * -84, a * -67, a * 168, a * 134, a * ns);
      d.restore();
      tb(d, b[0], b[kq], a * Ui);
      d.save();
      d.translate(a * 223, a * 94.5);
      nb(d, -Gt * a, a * -18.5, zq * a, a * 37, aq * a);
      d.restore();
      tb(d, b[0]);
      d.save();
      d.translate(a * 128.5, a * 170.5);
      nb(d, a * -22.5, a * -6.5, a * 45, Cg * a, a * Ye);
      d.restore();
      tb(d, b[rh]);
      return c;
    }(0.5, ["#BB0000"]));
    ΔΔ[Cr.ΔΔᐃᐃΔⵠⲆ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 161;
      c.height = a * 190;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 9, a * 93);
      d.bezierCurveTo(a * 17, a * 95, a * Wl, a * 95, a * 21, a * 95);
      d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
      d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
      d.bezierCurveTo(a * Xh, a * 67, Y * a, a * 67, ds * a, a * 59);
      d.bezierCurveTo(a * 14, a * 59, a * Cq, a * 59, a * 21, a * 59);
      d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
      d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * Ak);
      d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
      d.bezierCurveTo(a * 76, a * 7, a * 75, a * Pj, a * 76, a * 6);
      d.bezierCurveTo(a * 81, a * Nh, a * 84, no * a, a * 89, a * 27);
      d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
      d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
      d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
      d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
      d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
      d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
      d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
      d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
      d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
      d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
      d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
      d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, xo * a, a * 93);
      d.closePath();
      tb(d, b, b, Rh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 25, a * 63);
      d.bezierCurveTo(a * 16, a * 58, a * Es, a * 51, a * 17, a * 33);
      d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * $h);
      d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
      tb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 91, a * 53);
      d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
      d.bezierCurveTo(a * 137, a * dl, a * 137, Jh * a, a * 139, a * 27);
      d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
      tb(d, b, b, Yn * a);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Cr.ᐃⲆⲆᐃⲆΔᐃ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 147;
      c.height = a * 172;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(Cl * a, a * 50);
      d.bezierCurveTo(Ag * a, a * $j, a * 49, za * a, a * 67, a * ol);
      d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
      d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
      d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
      d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
      d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
      d.closePath();
      tb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(zl * a, a * 57);
      d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
      d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
      tb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 47);
      d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
      d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
      tb(d, b, b, a * 4);
      return c;
    }(0.9, "#BB0000"));
    ΔΔ[Cr.ᐃᐃⵠⲆⵠᐃⵠ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 271;
      c.height = a * 366;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 133, a * 99);
      d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
      d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
      d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
      d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
      d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
      d.closePath();
      tb(d, b[Lg]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 73, a * 270);
      d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
      d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
      d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
      d.bezierCurveTo(a * 94, a * 319, a * sg, a * 321, a * 107, a * 320);
      d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
      d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
      d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
      d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
      d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
      d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
      d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
      d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
      d.closePath();
      tb(d, b[_s]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 76, a * 252);
      d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
      d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
      d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
      d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
      d.closePath();
      tb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 84, a * 257);
      d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
      d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
      d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
      d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
      d.closePath();
      tb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 125, a * 65);
      d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
      d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
      d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
      d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
      d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
      d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
      d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
      d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
      d.closePath();
      tb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 115, a * 37);
      d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
      d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
      d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
      d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
      d.closePath();
      tb(d, b[Fj]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 146, a * 34);
      d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
      d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
      d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
      d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
      d.closePath();
      tb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 143, a * 69);
      d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
      d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
      d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
      d.closePath();
      tb(d, b[Dh]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 149, a * 92);
      d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
      d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
      d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
      d.closePath();
      tb(d, b[0]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 111, a * 61);
      d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
      d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
      d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
      d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
      d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
      d.closePath();
      tb(d, b[$t]);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 107, a * 81);
      d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
      d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
      d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
      d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
      d.closePath();
      tb(d, b[kq]);
      return c;
    }(dn * 1, ["#BB0000"]));
    ΔΔ[Cr.ⲆⲆⲆᐃᐃⲆⲆ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -20, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 50, a * 105);
      d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
      d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
      d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
      d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
      d.closePath();
      tb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 44, a * 106);
      d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
      d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
      d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
      d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
      d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
      d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
      d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
      d.closePath();
      tb(d, b, b, a * 4);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 30, a * 159);
      d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
      d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
      d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
      d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
      d.closePath();
      tb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Cr.ΔⵠᐃΔⲆΔΔ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 85;
      c.height = a * 145;
      d.translate(a * -165, a * -95);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 217, a * 103);
      d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
      d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
      d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
      d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
      d.closePath();
      tb(d, b);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 231, a * 163);
      d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
      d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
      d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
      d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
      d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
      d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
      d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
      d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
      d.closePath();
      tb(d, b, b, Dt * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 234, a * 154);
      d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
      d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
      d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
      d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
      d.closePath();
      tb(d, b);
      return c;
    }(0.8, "#BB0000"));
    ΔΔ[Cr.ⵠⵠⵠᐃᐃⵠᐃ] = ur(function (b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      var f = b * 85;
      var g = b * 115;
      var h = b * 4;
      d.width = f;
      d.height = g;
      e.translate(b * -130, b * -60);
      e.globalAlpha = 1;
      e.beginPath();
      e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
      e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
      e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
      e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
      e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
      e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
      e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
      e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
      e.closePath();
      tb(e, c, c, h);
      return d;
    }(0.9, "#BB0000"));
    ΔΔ[Cr.ᐃΔⵠⵠ] = ur(pb(0.6, "#BB0000"));
    ΔΔ[Cr.ᐃΔΔΔⵠ] = ur(pb(0.6, "#1CE7E0"));
    ΔΔ[Cr.ⲆΔⵠΔᐃΔⲆ] = ur(pb(0.6, "#DBE71C"));
    ΔΔ[Cr.ΔⲆᐃΔⵠᐃΔ] = ur(pb(0.6, "#00BB00"));
    ΔΔ[Cr.ΔΔⲆⲆⲆⵠΔ] = [];
    ΔΔ[Cr.ΔΔⲆⲆⲆⵠΔ][Cr.ⵠⵠΔ] = ur(um(1, ["#dac291"]));
    ΔΔ[Cr.ΔΔⲆⲆⲆⵠΔ][Cr.ΔΔⵠ] = ur(um(1, ["#0D423D"]));
    ΔΔ[Cr.ⲆⵠⲆᐃΔⵠⵠ] = [];
    ΔΔ[Cr.ⲆⵠⲆᐃΔⵠⵠ][Cr.ⵠⵠΔ] = ur(um(1, ["#dac291"]));
    ΔΔ[Cr.ⲆⵠⲆᐃΔⵠⵠ][Cr.ΔΔⵠ] = ur(um(1, ["#0D423D"]));
    ΔΔ[Cr.ΔᐃΔⵠⲆⵠΔ] = [];
    ΔΔ[Cr.ΔᐃΔⵠⲆⵠΔ][Cr.ⵠⵠΔ] = ur(Kd(0.3, pr, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
    ΔΔ[Cr.ΔᐃΔⵠⲆⵠΔ][Cr.ΔΔⵠ] = ur(Kd(0.3, wt, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
    ΔΔ[Cr.ᐃᐃᐃⲆⵠⲆᐃ] = [];
    ΔΔ[Cr.ᐃᐃᐃⲆⵠⲆᐃ][Cr.ⵠⵠΔ] = ur(Kd(0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
    ΔΔ[Cr.ᐃᐃᐃⲆⵠⲆᐃ][Cr.ΔΔⵠ] = ur(Kd(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
    ΔΔ[Cr.ᐃⲆᐃⵠᐃ] = [ur(rm(1, le, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Cr.ⵠᐃⲆⵠⵠ] = [ur(rm(1, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
    ΔΔ[Cr.ᐃⲆΔΔᐃ] = [];
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(Pc(1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(bc(1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(ac(V * 1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(Xd(1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(kc(dn * 1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(am(er * 1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ⵠⵠΔ].push(ur(Vd(1, ["#0B6A84"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(Pc(yl * 1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(bc(1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(ac(ub * 1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(Xd(1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(kc(Ud * 1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(am(wg * 1, ["#09373F"])));
    ΔΔ[Cr.ᐃⲆΔΔᐃ][Cr.ΔΔⵠ].push(ur(Vd(ik * 1, ["#09373F"])));
    ΔΔ[Cr.ΔΔᐃΔᐃ] = [];
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ⵠⵠΔ].push(ur(Bd(1.7, ["#FBEFBC"], 0)));
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ⵠⵠΔ].push(ur(Bd(1.9, ["#FBEFBC"], ub)));
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ⵠⵠΔ].push(ur(Bd(1.7, ["#FBEFBC"], 2)));
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ΔΔⵠ].push(ur(Bd(1.7, ["#0F4C48"], 0)));
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ΔΔⵠ].push(ur(Bd(1.9, ["#0F4C48"], 1)));
    ΔΔ[Cr.ΔΔᐃΔᐃ][Cr.ΔΔⵠ].push(ur(Bd(1.7, ["#0F4C48"], Uh)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ⵠⵠΔ].push(ur(Bd(1.8, ["#A9D6D3"], 0)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ⵠⵠΔ].push(ur(Bd(2, ["#A9D6D3"], jh)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ⵠⵠΔ].push(ur(Bd(1.8, ["#A9D6D3"], 2)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ΔΔⵠ].push(ur(Bd(1.8, ["#115E60"], 0)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ΔΔⵠ].push(ur(Bd(2, ["#115E60"], Yt)));
    ΔΔ[Cr.ᐃΔⵠⲆⲆ][Cr.ΔΔⵠ].push(ur(Bd(1.8, ["#115E60"], 2)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ⵠⵠΔ].push(ur(Bd(1.9, ["#2A8B9B"], 0)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ⵠⵠΔ].push(ur(Bd(2.1, ["#2A8B9B"], jh)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ⵠⵠΔ].push(ur(Bd(1.9, ["#2A8B9B"], 2)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ΔΔⵠ].push(ur(Bd(1.9, ["#0F464C"], 0)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ΔΔⵠ].push(ur(Bd(2.1, ["#0F464C"], 1)));
    ΔΔ[Cr.ⵠⵠᐃΔⵠ][Cr.ΔΔⵠ].push(ur(Bd(1.9, ["#0F464C"], Qs)));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ] = [];
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ⵠⵠΔ].push(ur(hd(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ⵠⵠΔ].push(ur(hd(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ⵠⵠΔ].push(ur(hd(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ΔΔⵠ].push(ur(hd(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ΔΔⵠ].push(ur(hd(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Cr.ΔⲆⵠⲆⵠ][Cr.ΔΔⵠ].push(ur(hd(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
    ΔΔ[Cr.ᐃⲆᐃᐃΔ] = [];
    ΔΔ[Cr.ᐃⲆᐃᐃΔ][Cr.ⵠⵠΔ] = ur(dm(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
    ΔΔ[Cr.ᐃⲆᐃᐃΔ][Cr.ΔΔⵠ] = ur(dm(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
    ΔΔ[Cr.ΔⲆᐃᐃⵠⲆΔ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 376;
      c.height = a * 371;
      d.globalAlpha = 1;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 191.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
      d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
      d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
      d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
      d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
      d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
      d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
      d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
      d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
      d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
      d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
      d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
      d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
      d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
      d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
      d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
      d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
      d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
      d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
      d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
      d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
      d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
      d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
      d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
      d.closePath();
      tb(d, b[$t], b[0], a * 12);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Cr.ⲆΔΔΔΔ] = [];
    ΔΔ[Cr.ⲆΔΔΔΔ][Cr.ⵠⵠΔ] = ur(em(0.8, Rl, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
    ΔΔ[Cr.ⲆΔΔΔΔ][Cr.ΔΔⵠ] = ur(em(0.8, wt, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
    ΔΔ[Cr.ΔᐃⲆᐃᐃⵠΔ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 158;
      c.height = a * 201;
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96.5, a * 76.421875);
      d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
      d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
      d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
      d.closePath();
      tb(d, b[0], b[Lg], St * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 61.5, a * 78.421875);
      d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
      d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
      d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
      d.closePath();
      tb(d, b[Jt], b[0], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116.5, a * 127.421875);
      d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
      d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
      d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
      d.closePath();
      tb(d, b[_s], b[0], Dl * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 41.5, a * 134.421875);
      d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
      d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
      d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
      d.closePath();
      tb(d, b[0], b[yk], Bq * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 78.5, a * 51.921875);
      d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
      d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
      d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
      d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
      d.closePath();
      tb(d, b[0], b[0], a * Fs);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      tb(d, b[0], b[Wh], Ke * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 42.5, a * 163.421875);
      d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
      d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
      d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
      d.closePath();
      tb(d, b[Wh], b[Lu], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 79.5, a * 61.421875);
      d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
      d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
      d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
      d.closePath();
      tb(d, b[0], b[Kr], a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 72.5, a * 72.421875);
      d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
      d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
      d.closePath();
      tb(d, b[jj], b[0], a * 10);
      return c;
    }(0.8, ["#B6222A"]));
    ΔΔ[Cr.ⲆⵠΔⵠΔᐃⲆ] = [];
    ΔΔ[Cr.ⲆⵠΔⵠΔᐃⲆ][Cr.ⵠⵠΔ] = ur(Jb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], Ol));
    ΔΔ[Cr.ⲆⵠΔⵠΔᐃⲆ][Cr.ΔΔⵠ] = ur(Jb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], kq));
    ΔΔ[Cr.ᐃⵠⵠⲆⲆⵠΔ] = [];
    ΔΔ[Cr.ᐃⵠⵠⲆⲆⵠΔ][Cr.ⵠⵠΔ] = ur(Jb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
    ΔΔ[Cr.ᐃⵠⵠⲆⲆⵠΔ][Cr.ΔΔⵠ] = ur(Jb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
    ΔΔ[Cr.ⲆΔⵠΔⵠⲆⲆ] = [];
    ΔΔ[Cr.ⲆΔⵠΔⵠⲆⲆ][Cr.ⵠⵠΔ] = ur(Jb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
    ΔΔ[Cr.ⲆΔⵠΔⵠⲆⲆ][Cr.ΔΔⵠ] = ur(Jb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], Mn));
    ΔΔ[Cr.ᐃⲆⲆⵠⲆΔΔ] = ur(Mb(0.4, ["#B6222A"]));
    ΔΔ[Cr.ΔᐃΔⵠᐃΔⵠ] = ur(Mb(0.4, ["#B6222A"]));
    ΔΔ[Cr.ⵠⲆᐃⵠⲆⲆΔᐃΔ] = ur(Mb(0.4, ["#B6222A"]));
    ΔΔ[Cr.ᐃᐃᐃⲆⲆ] = ur(zd(0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
    ΔΔ[Cr.ᐃⲆΔⵠΔ] = ur(hu(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
    ΔΔ[Cr.ⵠⲆⲆⲆⲆᐃⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆⲆⲆᐃⵠ][Cr.ⵠⵠΔ] = ur(ju(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
    ΔΔ[Cr.ⵠⲆⲆⲆⲆᐃⵠ][Cr.ΔΔⵠ] = ur(ju(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], Ud));
    ΔΔ[Cr.ΔⵠΔᐃⲆ] = [];
    ΔΔ[Cr.ΔⵠΔᐃⲆ][Cr.ⵠⵠΔ] = ur(ju(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
    ΔΔ[Cr.ΔⵠΔᐃⲆ][Cr.ΔΔⵠ] = ur(ju(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], Fj));
    ΔΔ[Cr.ⲆᐃⲆⲆⲆⲆᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ] = ur(fu(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Cr.ⲆᐃⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ] = ur(fu(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Cr.ᐃᐃΔᐃΔᐃⲆ] = [];
    ΔΔ[Cr.ᐃᐃΔᐃΔᐃⲆ][Cr.ⵠⵠΔ] = ur(mu(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
    ΔΔ[Cr.ᐃᐃΔᐃΔᐃⲆ][Cr.ΔΔⵠ] = ur(mu(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
    ΔΔ[Cr.ⵠⵠⲆⲆᐃⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠⲆⲆᐃⵠΔ][Cr.ⵠⵠΔ] = ur(fu(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Cr.ⵠⵠⲆⲆᐃⵠΔ][Cr.ΔΔⵠ] = ur(fu(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Cr.ⲆⲆΔⵠⲆΔⵠ] = [];
    ΔΔ[Cr.ⲆⲆΔⵠⲆΔⵠ][Cr.ⵠⵠΔ] = ur(mu(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
    ΔΔ[Cr.ⲆⲆΔⵠⲆΔⵠ][Cr.ΔΔⵠ] = ur(mu(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
    ΔΔ[Cr.ΔᐃⲆⵠⲆⲆᐃ] = ur(eu(0.35, ["#B6222A"]));
    ΔΔ[Cr.ⵠᐃΔⲆᐃᐃᐃ] = ur(fu(0.35, 0, [undefined, "#B6222A"]));
    ΔΔ[Cr.ᐃᐃΔⵠⵠΔⵠ] = ur(mu(0.35, 0, [Zl, "#B6222A"]));
    ΔΔ[Cr.ⵠᐃΔᐃΔⲆᐃ] = ur(eu(0.35, ["#22E066"]));
    ΔΔ[Cr.ᐃⲆᐃᐃⵠⲆᐃ] = ur(fu(0.35, 0, [La, "#22E066"]));
    ΔΔ[Cr.ΔⲆΔⵠⲆⲆⵠ] = ur(mu(0.35, 0, [Zl, "#22E066"]));
    ΔΔ[Cr.ⵠΔⲆⲆΔ] = [];
    ΔΔ[Cr.ⵠΔⲆⲆΔ][Cr.ⵠⵠΔ] = ur(ed(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
    ΔΔ[Cr.ⵠΔⲆⲆΔ][Cr.ΔΔⵠ] = ur(ed(0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
    ΔΔ[Cr.ⵠⲆᐃᐃⵠ] = [];
    ΔΔ[Cr.ⵠⲆᐃᐃⵠ][Cr.ⵠⵠΔ] = ur(Pu(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
    ΔΔ[Cr.ⵠⲆᐃᐃⵠ][Cr.ΔΔⵠ] = ur(Pu(0.45, mn, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
    ΔΔ[Cr.ΔⵠΔΔⲆ] = [];
    ΔΔ[Cr.ΔⵠΔΔⲆ][Cr.ⵠⵠΔ] = ur(uc(0.63, Nn, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
    ΔΔ[Cr.ΔⵠΔΔⲆ][Cr.ΔΔⵠ] = ur(uc(0.63, Rl, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Cr.ᐃⲆΔⲆⲆ] = [];
    ΔΔ[Cr.ᐃⲆΔⲆⲆ][Cr.ⵠⵠΔ] = ur(Lc(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
    ΔΔ[Cr.ᐃⲆΔⲆⲆ][Cr.ΔΔⵠ] = ur(Lc(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
    ΔΔ[Cr.ᐃΔΔᐃⵠ] = [];
    ΔΔ[Cr.ᐃΔΔᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃΔⵠᐃΔⵠ;
    ΔΔ[Cr.ᐃΔΔᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⵠⲆΔⵠⵠ;
    ΔΔ[Cr.ⲆΔⵠⲆΔ] = [];
    ΔΔ[Cr.ⲆΔⵠⲆΔ][Cr.ⵠⵠΔ] = ur(fb(0.59, 0, ["#0d1b1c", "#44301b", hj[ag], "#523e26"]));
    ΔΔ[Cr.ⲆΔⵠⲆΔ][Cr.ΔΔⵠ] = ur(fb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ] = [ΔΔ[Cr.ⲆΔⵠⲆΔ]];
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][1] = [];
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][2] = [];
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][1][Cr.ⵠⵠΔ] = ur(Tb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][1][Cr.ΔΔⵠ] = ur(Tb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][2][Cr.ⵠⵠΔ] = ur(cb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
    ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][2][Cr.ΔΔⵠ] = ur(cb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
    ΔΔ[Cr.ΔᐃᐃⲆⲆ] = [];
    ΔΔ[Cr.ΔᐃᐃⲆⲆ][Cr.ⵠⵠΔ] = ur(hb(Fh - Math.PI / 2, Wc(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
    ΔΔ[Cr.ΔᐃᐃⲆⲆ][Cr.ΔΔⵠ] = ur(hb(lk - Math.PI / ij, Wc(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
    ΔΔ[Cr.ΔΔⲆΔΔΔⵠ] = [];
    ΔΔ[Cr.ΔΔⲆΔΔΔⵠ][Cr.ⵠⵠΔ] = ur(Nb(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
    ΔΔ[Cr.ΔΔⲆΔΔΔⵠ][Cr.ΔΔⵠ] = ur(Nb(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], Lg));
    ΔΔ[Cr.ⵠᐃᐃΔⵠⵠΔ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 650;
      c.height = a * 650;
      d.scale(1.9, 1.9);
      d.save();
      d.translate(a * 202.5, a * 147.5);
      nb(d, a * -96.5, a * -21.5, a * 193, a * 193, a * jj);
      d.restore();
      tb(d, b[qo], b[1], pk * a);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      nb(d, a * -115.5, a * -20.5, a * 231, a * 41, wh * a);
      d.restore();
      tb(d, b[3], b[wg], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      nb(d, a * -115.5, a * -ws, a * 231, a * 40, a * oa);
      d.restore();
      tb(d, b[3], b[er], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      nb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      tb(d, b[Kk], b[ub], a * Ws);
      d.save();
      d.translate(a * 108.5, a * 210);
      nb(d, a * -20.5, a * -109, a * 41, a * 218, a * Dl);
      d.restore();
      tb(d, b[Dn], b[1], a * 12);
      d.save();
      d.translate(a * 204, a * 121.5);
      nb(d, a * -92, a * -9.5, a * 184, qi * a, a * 10);
      d.restore();
      tb(d, b[nh], b[3], a * 10);
      d.save();
      d.translate(a * 197, a * 299);
      nb(d, a * 85, a * -9, a * -170, Tq * a, a * 10);
      d.restore();
      tb(d, b[3], b[3], a * Ke);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94, a * 317);
      d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
      d.closePath();
      tb(d, undefined, b[Ur], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 279, a * 142);
      d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
      d.closePath();
      tb(d, undefined, b[Aj], Ws * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 93, a * 106);
      d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
      d.closePath();
      tb(d, undefined, b[Aj], a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 281, a * 282);
      d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
      d.closePath();
      tb(d, undefined, b[ik], a * 12);
      return c;
    }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
    ΔΔ[Cr.ⵠⵠᐃΔⲆᐃⲆ] = ur(function (a, b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 400;
      c.height = a * 400;
      d.save();
      d.translate(a * 202.5, a * 147.5);
      nb(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
      d.restore();
      tb(d, b[0], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 190.5);
      nb(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
      d.restore();
      tb(d, b[0], b[0], a * Mq);
      d.save();
      d.translate(a * 202.5, a * 233.5);
      nb(d, a * -96.5, a * -20.5, a * 193, a * 41, a * Mn);
      d.restore();
      tb(d, b[_s], b[0], a * 12);
      d.save();
      d.translate(a * 202.5, a * 275);
      nb(d, a * 96.5, a * -21, a * -193, a * 42, kq * a);
      d.restore();
      tb(d, b[0], b[xb], a * 12);
      d.save();
      d.translate(a * 203.5, a * 121.5);
      nb(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
      d.restore();
      tb(d, b[Wh], b[xb], a * 12);
      d.save();
      d.translate(a * 203.5, a * 299);
      nb(d, a * -115.5, a * -20, a * 231, a * 40, a * ll);
      d.restore();
      tb(d, b[Dh], b[jj], a * 12);
      d.save();
      d.translate(a * 298.5, a * 210);
      nb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      tb(d, b[Fj], b[Ol], a * 12);
      d.save();
      d.translate(a * 108.5, a * 210);
      nb(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
      d.restore();
      tb(d, b[0], b[jj], dl * a);
      return c;
    }(0.3, ["#BB0000"]));
    ΔΔ[Cr.ᐃΔⲆΔⲆΔⲆ] = Ob(jh, [{
      f: Cc,
      x: Jt,
      y: Kr,
      a: 1,
      r: tr,
      c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
    ΔΔ[Cr.ⲆᐃΔᐃⲆ] = Ob(1.5, [{
      f: lm,
      x: 0,
      y: Gd,
      a: 1,
      r: 0,
      c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
    ΔΔ[Cr.ⲆΔⲆΔⵠΔΔ] = yc(0.35, ["#072428", "#67A242", "#67A242"], _s);
    ΔΔ[Cr.ΔⲆᐃⲆⲆᐃᐃ] = yc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], ub);
    ΔΔ[Cr.ⵠⵠᐃⵠᐃⲆᐃ] = yc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
    ΔΔ[Cr.ᐃΔⲆⲆᐃΔᐃ] = yc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], vo);
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[Cr.ⲆⵠⲆᐃⵠⲆΔ] = ur(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 180;
        var g = b * 8;
        c.width = e;
        c.height = f;
        d.beginPath();
        nb(d, jj, Dh, e, f - g, g);
        d.globalAlpha = 0.8;
        tb(d, "#1D6055");
        d.globalAlpha = jh;
        var h = Bu(b, "Leaderboard", 25, "#FFF");
        d.drawImage(h, (e - h.width) / 2, b * Bk);
        return c;
      }(1));
    } else {
      ΔΔ[Cr.ⲆⵠⲆᐃⵠⲆΔ] = ur(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 270;
        var g = b * 8;
        c.width = e;
        c.height = f + Mg;
        d.beginPath();
        nb(d, Gd, Ko, e, f - g, g);
        d.globalAlpha = 0.5;
        tb(d, "#1D6055");
        d.globalAlpha = 1;
        var h = Bu(b, "Leaderboard", 25, hj[cu]);
        d.drawImage(h, (e - h.width) / Uh, Rj * b);
        return c;
      }(1));
    }
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[Cr.ⵠᐃΔΔΔᐃⲆ] = ur(function (b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 335;
        var f = b * 250;
        var i = b * 120;
        var j = b * 20;
        var a = b * 35;
        var k = b * 65;
        var h = kn * b;
        var l = b * 4;
        c.width = e;
        c.height = i;
        d.beginPath();
        d.translate(tr, b * 15);
        nb(d, k, 0, f, j, h);
        tb(d, null, "#69A148", l);
        d.translate(tr, a);
        nb(d, k, 0, f, j, h);
        tb(d, null, "#AF352A", l);
        d.translate(0, a);
        nb(d, k, 0, f, j, h);
        tb(d, null, "#669BB1", l);
        return c;
      }(0.75));
    } else {
      ΔΔ[Cr.ⵠᐃΔΔΔᐃⲆ] = ur(function (c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = c * 950;
        var i = c * 180;
        var j = c * 50;
        var k = c * Gh;
        var a = c * 240;
        var m = c * 35;
        var h = er * c;
        var l = c * 4;
        var g = c * qo;
        d.width = f;
        d.height = j;
        e.translate(0, Gs * c);
        nb(e, m, h, i, k, l);
        tb(e, null, "#69A148", g);
        var n = ΔΔ[Cr.ⲆΔⲆΔⵠΔΔ];
        e.drawImage(n, K, -xo);
        e.translate(a, xb);
        nb(e, m, h, i, k, l);
        tb(e, null, "#AF352A", g);
        n = ΔΔ[Cr.ⵠⵠᐃⵠᐃⲆᐃ];
        e.drawImage(n, ok, -pg);
        e.translate(a, 0);
        nb(e, m, h, i, k, l);
        tb(e, null, "#669BB1", g);
        n = ΔΔ[Cr.ΔⲆᐃⲆⲆᐃᐃ];
        e.drawImage(n, bh, -8);
        e.translate(a, 0);
        nb(e, m, h, i, k, l);
        tb(e, null, "#074A87", g);
        n = ΔΔ[Cr.ᐃΔⲆⲆᐃΔᐃ];
        e.drawImage(n, Zs, -xo);
        return d;
      }(1));
    }
    if (ⵠⵠΔⵠΔⵠᐃ) {
      ΔΔ[Cr.ᐃΔⲆᐃⲆⲆⵠ] = ur(qc(0.75));
    } else {
      ΔΔ[Cr.ᐃΔⲆᐃⲆⲆⵠ] = ur(qc(1));
    }
    ΔΔ[Cr.ⲆΔⵠⵠⲆΔⵠ] = ur(Rc(0.16, wt, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
    ΔΔ[Cr.ⵠⲆΔΔΔᐃⵠ] = ur(hb(5.8, ru(0.15, sh, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
    ΔΔ[Cr.ⵠⵠ] = [];
    ΔΔ[Cr.ⵠⵠⲆᐃⵠΔΔ] = [];
    for (a = jj; a < bw.ⲆᐃⵠⲆᐃⵠᐃ + 2; a++) {
      ΔΔ[Cr.ⵠⵠⲆᐃⵠΔΔ][a] = Bu(1, "" + (a + 1), b, "#FFF");
    }
    ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ] = [];
    ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ].push(ur(xc(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
    ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ].push(ur(xc(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], ik)));
    ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ].push(ur(xc(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], Aj)));
    ΔΔ[Cr.ΔᐃᐃΔᐃΔΔ] = [];
    ΔΔ[Cr.ΔᐃᐃΔᐃΔΔ].push(ur(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(Fj, cd * a);
      c.translate(Wh, Ye * a);
      ab(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      tb(c, "#322413", "#322413", a * 4);
      c.translate(jj, a * -20);
      ab(c, a * 160.5, a * 159.5, a * 156.39595138242822);
      tb(c, "#392C16", "#5E3E1A", wh * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      c.closePath();
      tb(c, "#12432D");
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      c.closePath();
      tb(c, "#3A2A0D");
      ab(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      tb(c, Qi, "#5E3E1A", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      c.closePath();
      tb(c, li, "#5E3E1A", zt * a);
      c.translate(Ol, a * ob);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      tb(c, jr, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      tb(c, Tg, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      tb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      tb(c, Lk, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      tb(c, undefined, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      tb(c, La, "#c7a726", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      tb(c, li, "#c7a726", tn * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      tb(c, Nl, "#c7a726", a * ps);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      tb(c, D, "#c7a726", a * co);
      c.translate(jj, a * -ob);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 66, a * 158.29513549804688);
      c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      c.closePath();
      tb(c, vl, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      c.closePath();
      tb(c, Uq, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 95, a * 90.29513549804688);
      c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      c.closePath();
      tb(c, undefined, "#EDCE4F", co * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 116, a * 52.850677490234375);
      c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      c.closePath();
      tb(c, undefined, "#EDCE4F", ul * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 159, a * 61.295135498046875);
      c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      c.closePath();
      tb(c, Tg, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 203, a * 51.295135498046875);
      c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      c.closePath();
      tb(c, li, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 225, a * 89.29513549804688);
      c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      c.closePath();
      tb(c, undefined, "#EDCE4F", a * Nh);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      c.closePath();
      tb(c, D, "#EDCE4F", a * 12);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      c.closePath();
      tb(c, undefined, "#EDCE4F", a * ul);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      c.closePath();
      tb(c, "#704618", "#5D3D1A", ob * a);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 96, a * 166);
      c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      c.closePath();
      tb(c, "#ECBE35", "#EDCE4F", a * 8);
      ab(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      tb(c, "#392C16", "#5E3E1A", a * rk);
      return b;
    }(0.22)));
    ΔΔ[Cr.ΔᐃᐃΔᐃΔΔ].push(ur(function (a) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = a * 321;
      c.height = a * 345;
      d.translate(0, a * 5);
      d.translate(0, Wr * a);
      ab(d, a * 160.5, a * 159.5, a * 156.39595138242822);
      tb(d, "#322413", "#322413", In * a);
      d.translate(_s, -_j * a);
      ab(d, a * 160.5, a * 159.5, a * 156.39595138242822);
      tb(d, "#392C16", "#5E3E1A", a * ll);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 31.999969482421875, a * 163.07290649414062);
      d.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
      d.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
      d.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
      d.closePath();
      tb(d, "#3A2A0D");
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 32.999969482421875, a * 165.07290649414062);
      d.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
      d.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
      d.closePath();
      tb(d, "#071A1B");
      ab(d, a * 161, a * 158.07290649414062, a * 133.4053971921676);
      tb(d, Nl, "#5E3E1A", a * 10);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 31.999969482421875, a * 161.62844848632812);
      d.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
      d.closePath();
      tb(d, undefined, "#5E3E1A", Ml * a);
      d.translate(0, a * Db);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 66, a * 158.29513549804688);
      d.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      d.closePath();
      tb(d, vl, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      d.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      d.closePath();
      tb(d, Ya, "#281C08", a * fs);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 95, a * 90.29513549804688);
      d.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      d.closePath();
      tb(d, Hh, "#281C08", Nh * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116, a * 52.850677490234375);
      d.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      d.closePath();
      tb(d, us, "#281C08", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 159, a * 61.295135498046875);
      d.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      d.closePath();
      tb(d, Nl, "#281C08", Mq * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 203, a * 51.295135498046875);
      d.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      d.closePath();
      tb(d, undefined, "#281C08", Ws * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 225, a * 89.29513549804688);
      d.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      d.closePath();
      tb(d, undefined, "#281C08", a * Da);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      d.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      d.closePath();
      tb(d, gh, "#281C08", b * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      d.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      d.closePath();
      tb(d, undefined, "#281C08", a * Ah);
      d.translate(Ko, a * -8);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 66, a * 158.29513549804688);
      d.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
      d.closePath();
      tb(d, On, "#5E3C10", a * co);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 57.999969482421875, a * 117.29513549804688);
      d.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
      d.closePath();
      tb(d, Zl, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 95, a * 90.29513549804688);
      d.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
      d.closePath();
      tb(d, On, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 116, a * 52.850677490234375);
      d.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
      d.closePath();
      tb(d, undefined, "#5E3C10", a * co);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 159, a * 61.295135498046875);
      d.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
      d.closePath();
      tb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 203, a * 51.295135498046875);
      d.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
      d.closePath();
      tb(d, lq, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 225, a * 89.29513549804688);
      d.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
      d.closePath();
      tb(d, Nl, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 266.9999694824219, a * 112.29513549804688);
      d.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
      d.closePath();
      tb(d, undefined, "#5E3C10", a * 12);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 256.9999694824219, a * 155.29513549804688);
      d.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
      d.closePath();
      tb(d, undefined, "#5E3C10", a * pk);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 96, a * 166);
      d.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
      d.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
      d.closePath();
      tb(d, "#704618", "#5D3D1A", xo * a);
      d.beginPath();
      d.lineCap = "round";
      d.lineJoin = "round";
      d.moveTo(a * 94.00003051757812, a * 164.40341186523438);
      d.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
      d.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
      d.closePath();
      tb(d, "#E1DDD5", "#EAE7E4", a * zn);
      ab(d, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
      tb(d, "#392C16", "#5E3E1A", a * rk);
      return c;
    }(0.22)));
    ΔΔ[Cr.ⲆⵠⵠⵠᐃⲆΔ] = ur(function (a) {
      var b = document.createElement("canvas");
      var c = b.getContext("2d");
      b.width = a * 321;
      b.height = a * 345;
      c.translate(0, Bb * a);
      ab(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
      tb(c, "#C09D6F", "#A37943", a * 10);
      c.beginPath();
      c.lineCap = "round";
      c.lineJoin = "round";
      c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
      c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
      c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
      c.closePath();
      tb(c, "#C09D6F", "#A37943", a * 10);
      c.save();
      c.translate(a * 161.50003051757812, a * 117.90341186523438);
      nb(c, a * -5.5, a * -37.5, a * 11, a * 75, Dl * a);
      c.restore();
      tb(c, "#C09D6F", "#A37943", a * St);
      c.save();
      c.translate(a * 162.00003051757812, a * 78.90341186523438);
      nb(c, a * -10, a * -5.5, a * 20, a * 11, Ur * a);
      c.restore();
      tb(c, "#C09D6F");
      ab(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
      tb(c, "#C09D6F");
      return b;
    }(0.22));
    ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ] = [];
    ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ].push(ur(Ib(1.5, ["#795026", "#654320", "#eda80d"], 0)));
    ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ].push(ur(Ib(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], sd)));
    ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ].push(ur(Ib(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
    ΔΔ[Cr.ᐃΔⵠⵠᐃⵠⲆ] = Δᐃ.ᐃΔⵠⵠᐃⵠⲆ;
    ΔΔ[Cr.ⵠⲆⵠΔΔⲆⵠ] = Δᐃ.ⵠⲆⵠΔΔⲆⵠ;
    ΔΔ[Cr.ⵠⲆᐃΔⵠⵠⲆ] = Δᐃ.ⵠⲆᐃΔⵠⵠⲆ;
    ΔΔ[Cr.ᐃᐃᐃⵠΔᐃᐃ] = Δᐃ.ᐃᐃᐃⵠΔᐃᐃ;
    ΔΔ[Cr.ᐃⲆΔⲆᐃⲆᐃ] = Bu(1, "Show spectators", 25, "#FFF", Uq, undefined, "#000", 5, 220);
    ΔΔ[Cr.ΔΔΔΔᐃᐃⵠ] = Bu(1, "Reconnecting...", 30, "#FFF");
    console.log(undefined, Tg);
  }
  function nc(b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    var f = b * 120;
    var g = b * 140;
    d.width = f;
    d.height = g;
    d.width = b * 130;
    d.height = b * 120;
    nb(e, rd * b, b * 12, b * 110, b * 90, b * 10);
    tb(e, c[0]);
    nb(e, rk * b, b * 5, b * 110, b * 90, b * 10);
    tb(e, c[1], c[$r], zg * b);
    var h = hb(-Math.PI / Th, su(b * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", hj[eh], hj[Qs], hj[_t], hj[Ok]]));
    e.drawImage(h, _o * b, b * 18);
    h = hb(Math.PI / 4, Ad(b * 0.55, true, ["rgba(255, 255, 255, 0)", hj[$r], hj[xl], hj[Wq], "#FFF"]));
    e.drawImage(h, b * 36, b * sk);
    return d;
  }
  function oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.5;
    ab(e, a * 69, a * 64, a * 48.16637831516918);
    tb(e, c[1]);
    e.globalAlpha = 0.7;
    ab(e, a * 69, a * 64, a * 38.23105625617661);
    tb(e, c[2]);
    e.globalAlpha = 0.7;
    ab(e, a * 69, a * 64, a * 32.01562118716424);
    tb(e, c[ib], c[3], a * th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72, a * 41);
    e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
    e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
    e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 93, a * 62);
    e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
    e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
    e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
    e.closePath();
    tb(e, c[3]);
    return d;
  }
  function rc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 149;
    c.height = a * 153;
    d.globalAlpha = 0.5;
    ab(d, a * 74.5, a * 85, a * 66);
    tb(d, b[Kr]);
    d.globalAlpha = er;
    ab(d, a * 75.5, a * 72.5, a * 67);
    tb(d, b[Ur], b[eh], a * 4);
    ab(d, a * 75.5, a * 73.5, a * 54);
    tb(d, b[3]);
    d.globalAlpha = 0.5;
    ab(d, a * 74.5, a * 80.5, a * 39);
    tb(d, b[4]);
    d.globalAlpha = jh;
    ab(d, a * 74.5, a * 74.5, a * 37);
    tb(d, b[lt]);
    return c;
  }
  function ac(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 320;
    d.translate(a * -60, a * -Hg);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 188.5, a * 3.953125);
    d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
    d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
    d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
    d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
    d.closePath();
    tb(d, b[jj]);
    return c;
  }
  function sc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 253;
    c.height = a * 192;
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 42, a * 99);
    d.globalAlpha = 0.5;
    nb(d, a * -7, -Wr * a, a * 14, a * 39, a * 20);
    d.restore();
    tb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 37, a * 94);
    nb(d, a * -7, a * -20, a * 14, a * 37, a * vj);
    d.restore();
    tb(d, b[2]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 136, a * 99);
    d.globalAlpha = 0.5;
    nb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    tb(d, b[0], b[_s], Aq * a);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 131, a * 94);
    nb(d, a * -84, a * -67, a * 168, a * 134, a * 20);
    d.restore();
    tb(d, b[2], b[Uh], a * 13);
    d.save();
    d.translate(a * 131, a * 94);
    nb(d, a * -76, a * -61, a * 152, a * 122, a * 20);
    d.restore();
    tb(d, b[3], b[sd], a * 8);
    d.save();
    d.translate(a * 168.5, a * 93.5);
    nb(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
    d.restore();
    tb(d, b[jg], b[bn], a * 6);
    d.save();
    d.translate(a * 93.5, a * 95.5);
    nb(d, a * -32, a * -59.5, a * 59, a * 119, a * ql);
    d.restore();
    tb(d, b[3], b[qo], a * 6);
    d.save();
    d.translate(a * 130.5, a * 94);
    nb(d, a * -36, a * -67, a * 73, a * 134, a * 20);
    d.restore();
    tb(d, b[3], b[tg], a * 8);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 133, a * 97);
    nb(d, a * -83, a * -12, a * 160, a * 24, a * Lg);
    d.restore();
    tb(d, b[0]);
    d.globalAlpha = 1;
    d.save();
    d.translate(a * 133, a * 92);
    nb(d, a * -83, a * -12, a * 160, a * 24, _s * a);
    d.restore();
    tb(d, b[yg]);
    d.globalAlpha = 0.5;
    d.save();
    d.translate(a * 228, a * 99.5);
    d.globalAlpha = 0.5;
    nb(d, a * -5, a * -18.5, ll * a, a * 37, a * 20);
    d.restore();
    tb(d, b[0]);
    d.globalAlpha = jh;
    d.save();
    d.translate(a * 223, a * 94.5);
    nb(d, -cd * a, a * -18.5, a * 10, a * 37, ql * a);
    d.restore();
    tb(d, b[tg]);
    d.save();
    d.translate(a * 133.5, a * 175.5);
    d.globalAlpha = 0.5;
    nb(d, a * -22.5, a * -6.5, a * 45, a * 13, a * Ye);
    d.restore();
    tb(d, b[Gd]);
    d.globalAlpha = Cs;
    d.save();
    d.translate(a * 128.5, a * 170.5);
    nb(d, a * -22.5, a * -6.5, a * 45, eq * a, a * Wr);
    d.restore();
    tb(d, b[_t]);
    return c;
  }
  function hc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 372;
    d.height = a * 358;
    e.translate(a * 0, Pr * a);
    e.globalAlpha = b ? 0.2 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    tb(e, c[0], c[kq], Fg * a);
    e.translate(a * 0, a * -oa);
    e.globalAlpha = Br;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
    e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
    e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
    e.closePath();
    tb(e, c[yg], c[Mo], a * Fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
    e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
    e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
    e.closePath();
    tb(e, c[Qs], c[3], a * rd);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
    e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
    e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
    e.closePath();
    tb(e, c[Uh], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
    e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
    e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
    e.closePath();
    tb(e, c[2], c[Ea], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.000030517578125, a * 122.3125);
    e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
    e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
    e.closePath();
    tb(e, c[1], c[Aj], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 310.0000305175781, a * 127.3125);
    e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
    e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
    e.closePath();
    tb(e, c[1], c[1], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
    e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
    e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
    e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
    e.closePath();
    tb(e, c[2], c[Mo], a * Fs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
    e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
    e.closePath();
    tb(e, c[1], c[Yt], Hr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
    e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
    e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
    e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
    e.closePath();
    tb(e, c[Qs], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
    e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
    e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
    e.closePath();
    tb(e, c[2], c[3], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
    e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
    e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
    e.closePath();
    tb(e, c[2], c[lk], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
    e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
    e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
    e.closePath();
    tb(e, c[Uh], c[3], a * Fg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
    e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
    e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
    e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
    e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
    e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
    e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
    e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
    e.closePath();
    tb(e, c[1], c[Cs], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
    e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
    e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
    e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
    e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
    e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
    e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
    e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
    e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
    e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
    e.closePath();
    tb(e, c[2], c[_i], Fg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
    e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
    e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
    e.closePath();
    tb(e, c[ij], c[vg], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
    e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
    e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
    e.closePath();
    tb(e, c[yl], c[1], a * 1);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
    e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
    e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
    e.closePath();
    tb(e, c[Fh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
    e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
    e.closePath();
    tb(e, c[Le], c[3], ft * a);
    ab(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
    tb(e, c[4], c[_g], a * Fo);
    ab(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
    tb(e, c[qo], c[5], a * 1);
    ab(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
    tb(e, c[4], c[Ca], Ur * a);
    ab(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
    tb(e, c[jt], c[_g], a * Ur);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
    e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
    e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
    e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
    e.closePath();
    tb(e, c[4], c[5], a * ft);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
    e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
    e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
    e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
    e.closePath();
    tb(e, c[6]);
    return d;
  }
  function lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 218;
    d.height = a * 185;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 64, a * 53.135406494140625);
    e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
    e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
    e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
    e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
    e.bezierCurveTo(a * Ui, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
    e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
    e.closePath();
    tb(e, c[_s], c[Ur], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107, a * 25.135406494140625);
    e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
    e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
    e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
    e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
    e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
    e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
    e.closePath();
    tb(e, c[er]);
    return d;
  }
  function gc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 100;
    c.height = a * Kn;
    d.globalAlpha = 0.5;
    d.fillStyle = b[0];
    d.fillRect(0, Mn, c.width, c.height);
    return c;
  }
  function uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 163;
    d.height = a * 163;
    e.save();
    e.translate(a * 82.5, a * 81.1015625);
    e.rotate(Mn);
    nb(e, a * -65.5, a * -66, a * 131, a * 131, a * Bk);
    e.restore();
    tb(e, c[Cs]);
    e.globalAlpha = b ? 0.5 : jh;
    e.translate(Oq * a, a * 5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    nb(e, a * -64, a * -4.5, a * 129, a * ks, a * 5);
    e.restore();
    tb(e, c[Jt]);
    e.globalAlpha = 1;
    e.translate(-Ju * a, a * -5);
    e.save();
    e.translate(a * 80, a * 17.1015625);
    nb(e, a * -64, a * -4.5, a * 129, rl * a, a * 5);
    e.restore();
    tb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, Bb * a);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    nb(e, a * -4.5, a * -61, yn * a, a * 129, a * 5);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = V;
    e.translate(a * -Gt, -U * a);
    e.save();
    e.translate(a * 145.5, a * 83.6015625);
    nb(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
    e.restore();
    tb(e, c[2], c[3], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * Cj);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    nb(e, a * -4.5, a * -65, a * 9, a * 129, a * lt);
    e.restore();
    tb(e, c[Ol]);
    e.globalAlpha = 1;
    e.translate(a * -Bk, -mh * a);
    e.save();
    e.translate(a * 17.5, a * 82.6015625);
    nb(e, a * -4.5, a * -65, Hk * a, a * 129, U * a);
    e.restore();
    tb(e, c[2], c[cl], a * Fh);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Bb, Cj * a);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    nb(e, a * -65.5, a * -th, a * 129, a * 9, a * uh);
    e.restore();
    tb(e, c[yk]);
    e.globalAlpha = 1;
    e.translate(a * -5, -mh * a);
    e.save();
    e.translate(a * 80.5, a * 145.6015625);
    nb(e, a * -65.5, -Ka * a, a * 129, a * 9, a * _g);
    e.restore();
    tb(e, c[Uh], c[3], a * Kk);
    e.globalAlpha = b ? 0.5 : Yt;
    e.translate(a * Rj, a * 5);
    e.save();
    e.translate(a * 17, a * 18.1015625);
    nb(e, a * -11, a * -11.5, a * 22, a * 22, Wn * a);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, -Oq * a);
    e.save();
    e.translate(a * Lj, a * 18.1015625);
    nb(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
    e.restore();
    tb(e, c[Ok], c[Ea], a * 3);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Rj, a * 5);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    nb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = Cs;
    e.translate(a * -5, a * -uh);
    e.save();
    e.translate(a * 145.5, a * 16.6015625);
    nb(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
    e.restore();
    tb(e, c[cu], c[3], Gg * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * 5, a * 5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    nb(e, a * -10.5, -At * a, a * 22, a * 22, a * 5);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    e.translate(a * 145.5, a * 144.1015625);
    nb(e, a * -10.5, -Kg * a, a * 22, a * 22, Bb * a);
    e.restore();
    tb(e, c[2], c[sn], cl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * mh, a * 5);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    nb(e, a * -11.5, a * -Ql, a * 22, a * 22, a * 5);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = wg;
    e.translate(a * -mh, -Rj * a);
    e.save();
    e.translate(a * 17.5, a * 145.1015625);
    nb(e, a * -11.5, a * -x, a * 22, a * 22, a * 5);
    e.restore();
    tb(e, c[yg], c[3], a * Kk);
    return d;
  }
  function bc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -200, a * -40);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 344, a * 18.40625);
    d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
    d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
    d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
    d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 335, a * 38.072906494140625);
    d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
    d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
    d.closePath();
    tb(d, b[0]);
    return c;
  }
  function vc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -165, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217, a * 103);
    d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
    d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
    d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
    d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
    d.closePath();
    tb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 231, a * 163);
    d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
    d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
    d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
    d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
    d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
    d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
    d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
    d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
    d.closePath();
    tb(d, b[Le], b[fa], Ka * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 234, a * 154);
    d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
    d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
    d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
    d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
    d.closePath();
    tb(d, b[2]);
    return c;
  }
  function dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 405;
    e.globalAlpha = 1;
    e.translate(_ * a, a * Lg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
    e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
    e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
    e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
    e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
    e.closePath();
    tb(e, c[Ea]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    tb(e, c[yk], c[Fo], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
    e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
    e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
    e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
    e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
    e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
    e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
    e.closePath();
    tb(e, c[ib]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
    e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
    e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
    e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
    e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
    e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
    e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
    e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
    e.closePath();
    tb(e, undefined, c[1], a * 16);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
    e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
    e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
    e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
    e.closePath();
    tb(e, c[0], c[er], a * 13);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
    e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
    e.closePath();
    tb(e, c[Dh], c[jh], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
    e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
    e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
    e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
    e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
    e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
    e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
    e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
    e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
    e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
    e.closePath();
    tb(e, c[2], c[1], a * 20);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
    e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
    e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
    e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
    e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
    e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
    e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
    e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
    e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
    e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
    e.closePath();
    tb(e, c[Fj], c[Yt], a * Gh);
    return d;
  }
  function cc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 85;
    c.height = a * 145;
    d.translate(a * -20, a * -95);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 50, a * 105);
    d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
    d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
    d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
    d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
    d.closePath();
    tb(d, b[V]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44, a * 106);
    d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
    d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
    d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
    d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
    d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
    d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
    d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
    d.closePath();
    tb(d, b[2], b[3], Il * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 30, a * 159);
    d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
    d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
    d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
    d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
    d.closePath();
    tb(d, b[pa]);
    return c;
  }
  function mc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.save();
    e.translate(a * 70.16665649414062, a * 38.20831298828125);
    nb(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
    e.restore();
    tb(e, c[0], c[ce], Ai * a);
    e.save();
    e.translate(a * 70, a * 42.70831298828125);
    nb(e, a * -61, a * -Tl, a * 122, a * 40, Fr * a);
    e.restore();
    tb(e, c[2], c[1], qo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123, a * 70.375);
    e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
    e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
    e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
    e.closePath();
    tb(e, c[2], c[bt], qo * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 11, a * 68.375);
    e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * wh, a * 100.375);
    e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
    e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, ok * a, a * 68.375);
    e.closePath();
    tb(e, c[2], c[sd], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46, a * 32.375);
    e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
    e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
    e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
    e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
    e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
    e.bezierCurveTo(a * Va, a * 84.375, a * 7, a * 70.375, sb * a, a * 59.375);
    e.bezierCurveTo(a * zk, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
    e.closePath();
    tb(e, c[ib], c[Eg], xt * a);
    ab(e, a * 71, a * 44.375, a * 16.55294535724685);
    tb(e, c[Xn], c[1], a * 4);
    ab(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
    tb(e, c[Le], c[1], a * 4);
    return d;
  }
  function pc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 46;
    d.height = a * 140;
    e.scale(-dn * a, a * 1);
    e.translate(a * -50, a * 40);
    e.translate(a * -20, tr);
    e.globalAlpha = b ? 0.5 : ik;
    e.translate(rd * a, 0);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    tb(e, c[Wh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, 0);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    tb(e, c[Dh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * Ud, 0);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(Gd);
    nb(e, a * -Eh, -kr * a, a * 14, a * Sl, a * 10);
    e.restore();
    tb(e, c[0]);
    e.translate(Lg * a, 0);
    e.globalAlpha = Cs;
    e.translate(a * 10, Mn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
    e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
    e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
    e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
    e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
    e.closePath();
    tb(e, c[B], c[4], a * jg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -1, Ol);
    e.moveTo(a * 17.599990844726562, a * 89.75);
    e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
    e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
    e.closePath();
    tb(e, c[1], c[2], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * er, Lu);
    e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
    e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
    e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
    e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
    e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
    e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
    e.closePath();
    tb(e, c[1], c[eh], Gg * a);
    e.save();
    e.translate(a * 23.599990844726562, a * 110.94999694824219);
    e.rotate(0);
    nb(e, a * -7, a * -4, a * 14, a * 8, a * St);
    e.restore();
    tb(e, c[ub], c[2], a * Gg);
    return d;
  }
  function Cc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 170;
    e.translate(0, a * -170);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 159.5, a * 322.0625);
    e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
    e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
    e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
    e.closePath();
    tb(e, c[Dh], c[1], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 212.5, a * 270.0625);
    e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
    e.closePath();
    tb(e, Uq, c[0], tn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 193.5, a * 226.0625);
    e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
    e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
    e.closePath();
    tb(e, c[Wq], c[Dn], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164.5, a * 245.0625);
    e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
    e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
    e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
    e.closePath();
    tb(e, c[tg], c[vg], a * dl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 260.0625);
    e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
    e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
    e.closePath();
    tb(e, c[2], c[3], Ws * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 152.5, a * 278.0625);
    e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
    e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
    e.closePath();
    tb(e, c[_t], c[Mo], a * 12);
    return d;
  }
  function Tc(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 198;
    e.height = a * 147;
    f.globalAlpha = b ? 0.5 : 1;
    f.translate(0, a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 44, a * 76);
    f.bezierCurveTo(a * 50, a * 82, a * 50, a * 82, a * 56, a * 88);
    f.bezierCurveTo(a * 59, a * 82, a * 59, a * 82, a * 62, a * 76);
    f.bezierCurveTo(a * 59, a * 71, a * 59, a * 71, a * 56, a * 66);
    f.bezierCurveTo(a * 59, a * 69, a * 59, a * 69, a * 62, a * 72);
    f.bezierCurveTo(a * 80, a * 48, a * 102, a * 50, a * 120, a * 62);
    f.bezierCurveTo(a * 127, a * 58, a * 127, a * 58, a * 134, a * 54);
    f.bezierCurveTo(a * 129, a * 60, a * 129, a * 60, a * 124, a * 66);
    f.bezierCurveTo(a * 129, a * 73, a * 129, a * 73, a * 134, a * 80);
    f.bezierCurveTo(a * 140, a * 74, a * 140, a * 74, a * 146, a * 68);
    f.bezierCurveTo(a * 142, a * 76, a * 142, a * 76, a * 138, a * 84);
    f.bezierCurveTo(a * 144, a * 90, a * 142, a * 90, a * 144, a * 90);
    f.bezierCurveTo(a * 136, a * 97, a * 136, a * 97, a * 128, a * 104);
    f.bezierCurveTo(a * 154, a * 110, a * 164, a * 90, a * 160, a * 80);
    f.bezierCurveTo(a * 138, a * 22, a * 148, a * 51, a * 136, a * 22);
    f.bezierCurveTo(a * 97, a * 24, a * 97, a * 24, a * 58, a * 26);
    f.bezierCurveTo(a * 47, a * 54, a * 36, a * 80, a * 36, a * 82);
    f.bezierCurveTo(a * 40, a * 108, a * 54, a * 104, a * 62, a * 104);
    f.bezierCurveTo(a * 46, a * 92, a * 54, a * 97, a * 46, a * 90);
    f.closePath();
    tb(f, c[kq]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, Er * a);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, Bs * a, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, sg * a);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    tb(f, c[0]);
    f.globalAlpha = 1;
    f.translate(ko, a * -6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 36, a * 80);
    f.bezierCurveTo(a * 30, a * 84, a * 28, a * 92, a * 34, a * A);
    f.bezierCurveTo(a * 41.5, a * 102, a * 41.5, a * 102, a * 49, a * 104);
    f.bezierCurveTo(a * 43, a * 105.5, a * 43, a * 105.5, a * 37, a * 107);
    f.bezierCurveTo(a * 46, a * 111, a * 60, a * 114, a * 76, a * 114);
    f.bezierCurveTo(a * 78, a * 110.5, a * 78, a * 110.5, a * 80, a * 107);
    f.bezierCurveTo(a * 81, a * 110.5, a * 81, a * 110.5, a * 82, a * 114);
    f.bezierCurveTo(a * 94.5, a * 113.5, a * 94.5, a * 113.5, a * 107, a * 113);
    f.bezierCurveTo(a * 108.5, a * 110, a * 108.5, a * 110, a * 110, a * 107);
    f.bezierCurveTo(a * 111.5, a * 110.5, a * 111.5, a * 110.5, a * 113, a * 114);
    f.bezierCurveTo(a * 131, a * 112.5, a * 131, a * 112.5, a * 149, a * 111);
    f.bezierCurveTo(a * 148.5, a * 107.5, a * 148.5, a * 107.5, a * 148, a * 104);
    f.bezierCurveTo(a * 150.5, a * 107, a * 150.5, a * 107, a * 153, a * 110);
    f.bezierCurveTo(a * 155.5, a * 108.5, a * 155.5, a * 108.5, a * 158, a * 107);
    f.bezierCurveTo(a * 156.5, a * 104, a * 156.5, a * 104, a * 155, a * 101);
    f.bezierCurveTo(a * 158.5, a * 102.5, a * 158.5, a * 102.5, a * 162, a * 104);
    f.bezierCurveTo(a * 168, a * wa, a * 170, a * 92, a * 169, a * 85);
    f.bezierCurveTo(a * 166, a * 86, a * 166, a * 86, a * 163, a * 87);
    f.bezierCurveTo(a * 165.5, a * 83, a * 165.5, a * 83, a * 168, a * 79);
    f.bezierCurveTo(a * 165.5, a * 76.5, a * 165.5, a * 76.5, a * 163, a * 74);
    f.bezierCurveTo(a * 155, a * 82.5, a * 155, a * 82.5, a * 147, a * 91);
    f.bezierCurveTo(a * 139, a * 95.5, a * 139, a * 95.5, a * 131, dg * a);
    f.bezierCurveTo(a * 97.5, a * 100.5, a * 97.5, a * 100.5, a * 64, a * 101);
    f.bezierCurveTo(a * 49, a * 102, a * 43, a * 90, a * 36, a * 80);
    f.closePath();
    tb(f, c[js], c[xl], Rh * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 49, a * 98);
    f.bezierCurveTo(a * 96.5, a * 98, a * 96.5, a * 98, a * 144, a * 98);
    f.bezierCurveTo(a * 136.5, a * 102, a * 136.5, a * 102, a * 129, a * 106);
    f.bezierCurveTo(a * 103, a * 105.5, a * 103, a * 105.5, a * 77, a * 105);
    f.bezierCurveTo(a * 65, a * 105, a * 65, a * 105, a * 53, a * 105);
    f.closePath();
    tb(f, c[1]);
    f.globalAlpha = 0.5;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 54, a * 98);
    f.bezierCurveTo(a * 97, a * 98, a * 97, a * 98, a * 140, a * 98);
    f.bezierCurveTo(a * 134, a * 101, a * 134, a * 101, a * 128, a * 104);
    f.bezierCurveTo(a * 92, a * 104, a * 92, a * 104, a * 56, a * 104);
    f.closePath();
    tb(f, c[Ko]);
    f.globalAlpha = ik;
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 118, a * 47);
    f.bezierCurveTo(a * 124.5, a * 43.5, a * 124.5, a * 43.5, a * 131, a * 40);
    f.bezierCurveTo(a * 128, a * 46, a * 128, a * 46, a * 125, a * 52);
    f.bezierCurveTo(a * 131, a * 57, a * 135, a * 64, a * 139, a * 73);
    f.bezierCurveTo(a * 142.5, a * 69.5, a * 142.5, a * 69.5, a * 146, a * 66);
    f.bezierCurveTo(a * 143.5, a * 72.5, a * 143.5, a * 72.5, a * 141, a * 79);
    f.bezierCurveTo(a * 142, a * 91, a * 141, a * 94, a * 132, a * 98);
    f.bezierCurveTo(a * 117, a * 102, a * 126, a * 108, a * 142, a * 102);
    f.bezierCurveTo(a * 159, a * 98, a * 164, a * 80, a * 162, a * 47);
    f.bezierCurveTo(a * 160, a * 19, a * 150, a * 6, a * 117, a * oj);
    f.bezierCurveTo(a * 44, a * Gd, a * 35, a * 20, a * 33, a * 37);
    f.bezierCurveTo(a * 29, a * 69, a * 33, a * 88, a * 44, a * 96);
    f.bezierCurveTo(a * 64, a * 107, a * 70, a * 102, a * 54, a * 93);
    f.bezierCurveTo(a * 49, a * 88, a * 50, a * 82, a * 53, a * 77);
    f.bezierCurveTo(a * 51.5, a * 71, a * 51.5, a * 71, a * 50, a * 65);
    f.bezierCurveTo(a * 53, a * 68.5, a * 53, a * 68.5, a * 56, a * 72);
    f.bezierCurveTo(a * 59, a * 67.5, a * 59, a * 67.5, a * 62, a * 63);
    f.bezierCurveTo(a * 60.5, a * 59.5, a * 60.5, a * 59.5, a * 59, a * 56);
    f.bezierCurveTo(a * 62, a * 57, a * 62, a * 57, a * 65, a * 58);
    f.bezierCurveTo(a * 78, a * 35, a * 103, a * 36, a * 117, a * 47);
    f.closePath();
    tb(f, c[Br], c[2], a * 6);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 62, a * 21);
    f.bezierCurveTo(a * 63, a * 34, a * 64, a * 37, a * 66, a * 40);
    f.bezierCurveTo(a * 54, a * 49, a * 53, a * 51, a * 48, a * 58);
    f.bezierCurveTo(a * 44, a * 51, a * 42, a * 43, a * 40, a * 36);
    f.bezierCurveTo(a * 47, a * 28, a * 52, a * 25, a * 61, a * 21);
    f.closePath();
    tb(f, c[Ai]);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 60, a * 29);
    f.bezierCurveTo(a * 62, a * 25, a * 65, a * 24, a * 70, a * 23);
    tb(f, Zl, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 61, a * 37);
    f.bezierCurveTo(a * 63, a * 32, a * 66, a * 32, a * 71, a * 32);
    tb(f, vl, c[jg], a * In);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 52, a * 31);
    f.bezierCurveTo(a * 50, a * 26, a * 50, a * 25, a * 51, a * 23);
    tb(f, Qi, c[lk], a * Il);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 35);
    f.bezierCurveTo(a * 44, a * 31, a * 43, a * 29, a * 45, a * 26);
    tb(f, Ya, c[3], a * Lb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 58, a * 44);
    f.bezierCurveTo(a * 57, a * 48, a * 57, a * 50, a * 60, a * 52);
    tb(f, jr, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 53, a * 48);
    f.bezierCurveTo(a * 52, a * 52, a * 52, a * 54, a * 55, a * 57);
    tb(f, undefined, c[nh], jt * a);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 46, a * 41);
    f.bezierCurveTo(a * 41, a * 42, a * 39, a * 45, a * 38, a * 48);
    tb(f, undefined, c[3], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 48, a * 48);
    f.bezierCurveTo(a * 42, a * 51, a * 42, a * 53, a * 40, a * 55);
    tb(f, undefined, c[Ik], a * 4);
    if (d == 0) {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 99, a * 101);
      f.bezierCurveTo(a * 118.6666259765625, a * 104.33331298828125, a * 124.6666259765625, a * 116.33331298828125, a * 112.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 104.6666259765625, a * 112.33331298828125, a * 100.6666259765625, a * 105.33331298828125, a * 99.6666259765625, a * 101.33331298828125);
      tb(f, undefined, c[5], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 97.6666259765625, a * 101.33331298828125);
      f.bezierCurveTo(a * 81.6666259765625, a * 106.33331298828125, a * 79.6666259765625, a * 114.33331298828125, a * 89.6666259765625, a * 114.33331298828125);
      f.bezierCurveTo(a * 95.6666259765625, a * 111.33331298828125, a * 95.6666259765625, a * 109.33331298828125, a * 98.6666259765625, a * 102.33331298828125);
      tb(f, jr, c[Rj], a * 6);
    } else {
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 120, a * 106.39999389648438, a * 118, a * 107.39999389648438, a * 120, a * 111.39999389648438);
      tb(f, Qi, c[5], a * 6);
      f.beginPath();
      f.lineCap = "round";
      f.lineJoin = "round";
      f.moveTo(a * 103, a * 100.39999389648438);
      f.bezierCurveTo(a * 90, a * 103.39999389648438, a * 89, a * 106.39999389648438, a * 87, a * 112.39999389648438);
      tb(f, kj, c[Rj], a * 6);
      ab(f, a * 86, a * 114.39999389648438, a * 4.5);
      tb(f, c[1], c[5], Bt * a);
      ab(f, a * 121, a * 114.39999389648438, a * 4.5);
      tb(f, c[Eg], c[vu], a * 6);
    }
    return e;
  }
  function fc(a, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 190;
    e.globalAlpha = 0.5;
    e.translate($t, 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 9, a * 93);
    e.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
    e.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
    e.bezierCurveTo(a * 11, a * 75, oo * a, a * 75, a * 18, a * 75);
    e.bezierCurveTo(a * Cg, a * 67, a * eq, a * 67, Ba * a, a * 59);
    e.bezierCurveTo(Zn * a, a * 59, Un * a, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    e.bezierCurveTo(a * 81, a * Mq, a * 84, a * os, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, a * 100, a * ah, a * 105, a * 14);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = dn;
    e.translate(Fj, -Ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(I * a, a * 93);
    e.bezierCurveTo(a * 17, a * 95, a * Yo, a * 95, a * 21, a * 95);
    e.bezierCurveTo(a * 9, a * 83, hr * a, a * 93, kr * a, a * 76);
    e.bezierCurveTo(Qn * a, a * 75, a * 11, a * 75, a * 18, a * 75);
    e.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
    e.bezierCurveTo(Ds * a, a * 59, a * 14, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * Jh);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
    e.bezierCurveTo(a * 81, ul * a, a * 84, $o * a, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, a * 100, Sq * a, a * 105, a * Vg);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(a * 18, a * 95, Xh * a, a * 99, al * a, a * 93);
    e.closePath();
    tb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 63);
    e.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    e.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    e.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    e.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    e.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    e.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    e.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    e.closePath();
    tb(e, c[lk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 55);
    e.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    e.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    e.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    e.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    e.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    e.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    e.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    e.closePath();
    tb(e, c[3]);
    ab(e, a * 103, a * 110, a * kl);
    tb(e, c[bn]);
    ab(e, a * 55, a * 111, a * 11);
    tb(e, c[4]);
    ab(e, a * 99, a * 107, a * 5);
    tb(e, c[1]);
    ab(e, a * 51, a * 108, a * Th);
    tb(e, c[bt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 121);
    e.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
    e.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
    e.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
    e.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
    e.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
    e.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
    e.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(-Xn, 0);
    e.moveTo(a * 71, a * 162);
    e.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
    e.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
    e.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
    e.closePath();
    tb(e, c[3]);
    e.translate(Wq, Ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(jl * a, a * 93);
    e.bezierCurveTo(Yr * a, a * 95, a * 19, a * 95, a * 21, a * 95);
    e.bezierCurveTo(a * 9, a * 83, sj * a, a * 93, a * Il, a * 76);
    e.bezierCurveTo(Qb * a, a * 75, a * 11, a * 75, gl * a, a * 75);
    e.bezierCurveTo(a * Mk, a * 67, a * 13, a * 67, a * Ba, a * 59);
    e.bezierCurveTo(a * Ck, a * 59, a * 14, a * 59, a * 21, a * 59);
    e.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
    e.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * Sq);
    e.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
    e.bezierCurveTo(a * 76, a * 7, a * 75, xg * a, a * 76, a * dt);
    e.bezierCurveTo(a * 81, a * 12, a * 84, os * a, a * 89, a * 27);
    e.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * ve);
    e.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
    e.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
    e.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
    e.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
    e.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
    e.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
    e.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
    e.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
    e.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
    e.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
    e.bezierCurveTo(Tq * a, a * 95, Wg * a, a * 99, a * 8, a * 93);
    e.closePath();
    tb(e, Qi, c[_t], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 25, a * 63);
    e.bezierCurveTo(a * Ak, a * 58, sa * a, a * 51, a * 17, a * 33);
    e.bezierCurveTo(a * tl, b * a, a * 21, a * 12, a * 32, a * 17);
    e.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
    tb(e, c[jh], c[ij], Lb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 91, a * 53);
    e.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
    e.bezierCurveTo(a * 137, dl * a, a * 137, a * 16, a * 139, a * 27);
    e.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
    tb(e, c[jh], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 63);
    e.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
    e.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
    e.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
    e.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
    e.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
    e.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
    e.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99, a * 55);
    e.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
    e.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
    e.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
    e.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
    e.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
    e.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
    e.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
    e.closePath();
    tb(e, c[3]);
    return d;
  }
  function zc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : er;
    e.translate(a * 5, a * 5);
    ab(e, a * 220, a * 201, a * 170.41713528867922);
    tb(e, c[0], c[Jt], a * bg);
    e.globalAlpha = Fo;
    e.translate(a * -5, a * -5);
    ab(e, a * 220, a * 201, a * 170.41713528867922);
    tb(e, c[ub], c[Qs], a * Bt);
    ab(e, a * 220, a * 201, a * 130);
    tb(e, c[11], c[2], Bt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    tb(e, c[5], c[Rb], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    tb(e, c[Ca], c[ss], Lb * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
    e.closePath();
    tb(e, c[Th], c[6], a * qo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    tb(e, c[Rj], c[6], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    tb(e, c[5], c[So], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    tb(e, c[Bb], c[_h], In * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142, a * 223);
    e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
    e.closePath();
    tb(e, c[eg], c[10], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 133);
    e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
    e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
    e.closePath();
    tb(e, c[10], c[lj], a * jt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 203, a * 102);
    e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
    e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
    e.closePath();
    tb(e, c[oa], c[ll], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 196, a * 324);
    e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
    e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
    e.closePath();
    tb(e, c[bb], c[wh], Yn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 266, a * 166);
    e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
    tb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 269, a * 192);
    e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
    tb(e, On, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 217);
    e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
    tb(e, undefined, c[6], Mr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 204, a * 141);
    e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
    tb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 230);
    e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
    tb(e, undefined, c[zk], a * dt);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 210, a * 258);
    e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
    tb(e, undefined, c[hi], a * _);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 196);
    e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
    tb(e, On, c[6], a * ol);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 218, a * 97);
    e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
    e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
    e.closePath();
    tb(e, undefined, c[Bt], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 224, a * 181);
    e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
    e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
    e.bezierCurveTo(a * 253, a * 264, a * 240, qs * a, a * 233, a * 238);
    e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
    e.closePath();
    tb(e, undefined, c[Vo], a * Bt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 169, a * 289);
    e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
    e.bezierCurveTo(a * 219, a * 189, a * 222, a * _r, a * 216, a * 307);
    e.closePath();
    tb(e, undefined, c[mg], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 143, a * 146);
    e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
    e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
    e.closePath();
    tb(e, undefined, c[6], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 283, a * 135);
    e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
    e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
    e.closePath();
    tb(e, Ya, c[6], a * _h);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 318, a * 223);
    e.bezierCurveTo(a * 290, a * 195, a * 271, rn * a, a * 283, a * 281);
    e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
    e.closePath();
    tb(e, undefined, c[zk], a * 6);
    ab(e, a * 222, a * 199, a * 120.74767078498864);
    tb(e, undefined, c[Dn], a * 40);
    ab(e, a * 220, a * 200, a * 95.44108130150245);
    tb(e, undefined, c[2], a * Js);
    ab(e, a * 220, a * 201, a * 85);
    tb(e, Qi, c[4], a * 10);
    e.globalAlpha = 0.5;
    ab(e, a * 220, a * 201, a * 82);
    tb(e, c[9]);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Rj, a * Bk);
    ab(e, a * 63, a * 136, a * 49.193495504995376);
    tb(e, c[Gd], c[Mn], a * 4);
    e.globalAlpha = ce;
    e.translate(-cd * a, a * -5);
    ab(e, a * 63, a * 136, a * 49.193495504995376);
    tb(e, c[8], c[2], a * bn);
    ab(e, a * 63, a * 137, a * 25.632011235952593);
    tb(e, c[El], c[2], a * 4);
    return d;
  }
  function yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 109;
    d.height = a * 110;
    ab(e, a * 54.5, a * 55, a * 48.038209575038294);
    tb(e, b[0], b[1], a * 8);
    if (c == 0) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
      e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
      e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
      e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
      e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
      e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
      e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
      e.closePath();
      tb(e, b[Ok]);
    } else if (c == 1) {
      e.save();
      e.translate(a * 55, a * 39.48748779296875);
      nb(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
      e.restore();
      tb(e, b[Qs], b[3], a * 4);
      ab(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
      tb(e, b[4], b[3], a * 4);
      e.save();
      e.translate(a * 55.5, a * 57.287506103515625);
      nb(e, a * -9, a * -16, a * 18, a * 32, a * rk);
      e.restore();
      tb(e, b[4]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 25.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
      e.closePath();
      tb(e, kj, b[Rj], a * 4);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 37.287506103515625);
      e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
      e.closePath();
      tb(e, Qi, b[5], a * oj);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 66.5, a * 50.287506103515625);
      e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
      e.closePath();
      tb(e, undefined, b[Gl], a * Ai);
    } else if (c == yh) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
      e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
      e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
      e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
      e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
      e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
      e.closePath();
      tb(e, b[C]);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
      e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
      e.closePath();
      tb(e, b[B], b[In], ol * a);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
      e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
      e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
      e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
      e.closePath();
      tb(e, b[3], b[Ai], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
      e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
      e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
      e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
      e.closePath();
      tb(e, b[2]);
    } else if (Kk == c) {
      e.scale(0.9, 0.9);
      e.translate(a * mg, 0);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 54, a * 0.421875);
      e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
      e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
      e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
      e.closePath();
      tb(e, b[pa], b[3], a * 6);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 74, a * 52.421875);
      e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
      e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
      e.closePath();
      tb(e, b[3]);
    }
    return d;
  }
  function wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 247;
    d.height = a * 247;
    e.translate(0, a * 10);
    e.globalAlpha = b ? 0.5 : 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    tb(e, c[yk]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * Fr, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(Ys * a, a * 174, a * Fr, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    tb(e, c[0]);
    e.translate(xb, a * -10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 150, a * 62);
    e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
    e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 164, a * 171);
    e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
    e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
    e.closePath();
    tb(e, c[5]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * ns, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    tb(e, c[1], c[_l], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137, a * 137);
    e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
    e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
    e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
    e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
    e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
    e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
    e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
    e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
    e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
    e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
    e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
    e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
    e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
    e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
    e.closePath();
    tb(e, c[vg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 132, a * 95);
    e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
    e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
    e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
    e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
    e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
    e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
    e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
    e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
    e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
    e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
    e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
    e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
    e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
    e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
    e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
    e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
    e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
    e.closePath();
    tb(e, Qi, c[tg], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 63);
    e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
    e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
    e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
    e.closePath();
    tb(e, c[4], c[_g], _g * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, a * 40);
    e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
    e.bezierCurveTo(a * 123, a * 25, a * 129, a * hr, a * 134, a * 12);
    e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
    e.closePath();
    tb(e, c[f], c[gs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 189, a * 43);
    e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
    e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
    e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
    e.closePath();
    tb(e, c[4], c[5], lt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 98);
    e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
    e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
    e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
    e.closePath();
    tb(e, c[4], c[uh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 180, a * 85);
    e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
    e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
    e.bezierCurveTo(a * 169, a * wr, a * 176, a * 96, a * 180, a * 85);
    e.closePath();
    tb(e, c[4], c[gs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96, a * 114);
    e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
    e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
    e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
    e.closePath();
    tb(e, c[bn], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 92);
    e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
    e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
    e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
    e.closePath();
    tb(e, c[4], c[mh], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39, a * 130);
    e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
    e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
    e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
    e.closePath();
    tb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 113, a * 189);
    e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
    e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
    e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
    e.closePath();
    tb(e, c[In], c[pl], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 74, a * 154);
    e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
    e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
    e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
    e.closePath();
    tb(e, c[4], c[Oq], Cj * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206, a * 152);
    e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
    e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
    e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
    e.closePath();
    tb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 181, a * 184);
    e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
    e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
    e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
    e.closePath();
    tb(e, c[zg], c[_g], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 199);
    e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
    e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
    e.closePath();
    tb(e, c[4], c[Gt], a * mh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 143);
    e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
    e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
    e.closePath();
    tb(e, c[xt], c[5], a * Oq);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 159);
    e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
    e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
    e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
    e.closePath();
    tb(e, c[Ai], c[gs], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110, a * 214);
    e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
    e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
    e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
    e.closePath();
    tb(e, c[4], c[5], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 40, a * 52);
    e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
    e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
    e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
    e.closePath();
    tb(e, c[bn], c[Oq], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 81);
    e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
    e.bezierCurveTo(a * 23, a * 97, a * kt, a * 96, a * 16, a * 93);
    e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
    e.closePath();
    tb(e, c[th], c[Ca], a * Bb);
    return d;
  }
  function Pc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 300;
    d.translate(a * -80, -Wr);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 200.5, a * 14.953125);
    d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
    d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
    d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
    d.closePath();
    tb(d, b[Jt]);
    return c;
  }
  function Ac(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 144;
    d.height = a * 280;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(U * a, a * pl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * sg, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    tb(e, c[kq]);
    e.globalAlpha = 1;
    e.translate(a * -Cj, a * -mh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 62, a * 103.79999542236328);
    e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
    e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
    e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
    e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
    e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
    e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * me, a * 229.79999542236328);
    e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
    e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
    e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
    e.bezierCurveTo(a * 98, a * 37, a * 65, ve * a, a * 74, a * 33);
    e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
    e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
    e.bezierCurveTo(a * 46, Tl * a, a * 37, a * 61, a * 50, a * 68);
    e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
    e.closePath();
    tb(e, c[1], c[yh], Ll * a);
    return d;
  }
  function kc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 48;
    c.height = a * 47;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 7.1875, a * 25.434661865234375);
    d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
    d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
    d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
    d.closePath();
    tb(d, b[0]);
    return c;
  }
  function xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 573;
    d.height = a * 350;
    if (c == 1) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 336, a * 72);
      e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
      e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
      e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
      e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
      e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
      e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
      e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
      e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
      e.bezierCurveTo(a * 323, a * vs, a * 322, a * 25, a * 337, a * 74);
      e.closePath();
      tb(e, b[4], b[4], a * 35);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 168, a * 42);
    e.bezierCurveTo(a * 255, a * 60, $l * a, a * 60, a * 342, a * 78);
    e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
    e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
    e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
    e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
    e.closePath();
    tb(e, b[Fj], b[Ur], a * Ah);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 188, a * 41);
    e.bezierCurveTo(a * 308, kh * a, a * 325, a * zh, a * 337, a * 66);
    e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
    e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
    e.closePath();
    tb(e, b[Le], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 336, a * 71);
    e.bezierCurveTo(a * 375, xo * a, a * 429, a * 50, a * 518, a * 92);
    e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
    e.bezierCurveTo(a * 227, a * 301, a * 261, cq * a, a * 188, a * 308);
    e.closePath();
    tb(e, b[2], b[3], a * Ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 357, a * 76);
    e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
    e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
    e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
    e.closePath();
    tb(e, b[nh], b[3], a * Ql);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 309, a * 168);
    e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
    tb(e, b[yh], b[Kk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 263, a * 54);
    e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
    e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
    e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
    e.closePath();
    tb(e, b[3], b[3], Ml * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 292, a * 198);
    e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
    tb(e, b[2], b[3], x * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 245, a * 68);
    e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
    tb(e, b[2], b[3], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 96);
    e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
    tb(e, b[2], b[Kk], a * dl);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 207, a * 124);
    e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
    tb(e, b[2], b[Kk], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 183);
    e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
    tb(e, b[2], b[3], Ig * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 213);
    e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
    tb(e, b[2], b[Mo], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 399, a * 257);
    e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
    e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
    e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
    tb(e, b[3], b[Kk], a * 12);
    return d;
  }
  function Jc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 167;
    d.height = a * 136;
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    nb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
    e.restore();
    tb(e, c[jj]);
    e.globalAlpha = 0.8;
    e.save();
    e.translate(a * 76.71426391601562, a * 67.85713195800781);
    nb(e, a * -57.5, a * -54.5, a * 115, a * 109, a * Wa);
    e.restore();
    tb(e, undefined, c[1], iq * a);
    e.globalAlpha = 0.5;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    nb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = Ud;
    e.save();
    e.translate(a * 91.21426391601562, a * 67.35713195800781);
    nb(e, a * -56, a * -55, a * 115, a * 109, a * 15);
    e.restore();
    tb(e, undefined, c[jh], iq * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
    e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
    tb(e, undefined, c[1], a * 10);
    return d;
  }
  function Mc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 271;
    c.height = a * 366;
    d.globalAlpha = 0.5;
    d.translate(0, a * 10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    tb(d, b[tr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * Vh);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * or, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    tb(d, b[Gd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    tb(d, b[Ol]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    tb(d, b[Fj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    tb(d, b[0]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    tb(d, b[Fj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    tb(d, b[Kr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    tb(d, b[Ol]);
    d.globalAlpha = 1;
    d.translate(0, a * -10);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    tb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    tb(d, b[Ea], b[ta], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * rn);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    tb(d, b[ta], b[3], a * Oi);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * Kn, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    tb(d, b[3], b[B], ih * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    tb(d, b[Gg], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    tb(d, b[3], b[Fh], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    tb(d, b[3], b[vo], a * Db);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    tb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    tb(d, b[3], b[ta], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    tb(d, b[Mo], b[Gg], a * Cl);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    tb(d, b[3], b[3], a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 99);
    d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
    d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
    d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
    d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
    d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
    d.closePath();
    tb(d, b[1]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 73, a * 270);
    d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
    d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
    d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
    d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
    d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
    d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
    d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
    d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
    d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
    d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
    d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
    d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
    d.closePath();
    tb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 76, a * 252);
    d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
    d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
    d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, og * a);
    d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
    d.closePath();
    tb(d, b[2]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 84, a * 257);
    d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
    d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
    d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, Kn * a, a * 277);
    d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
    d.closePath();
    tb(d, b[1]);
    ab(d, a * 102, a * 269, a * Kl);
    tb(d, b[_i]);
    ab(d, a * 98, a * 266, a * 5);
    tb(d, b[ol]);
    ab(d, a * 168, a * 269, a * 11);
    tb(d, b[Ea]);
    ab(d, a * 164, a * 266, a * 5);
    tb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 125, a * 65);
    d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
    d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
    d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
    d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
    d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
    d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
    d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
    d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
    d.closePath();
    tb(d, b[Wq]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 235);
    d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
    d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
    d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
    d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
    d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
    d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
    d.closePath();
    tb(d, b[mj]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 132, a * 219);
    d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
    d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
    d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
    d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
    d.closePath();
    tb(d, b[Xr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 179);
    d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
    d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
    d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
    d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
    d.closePath();
    tb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 143);
    d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
    d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
    d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
    d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
    d.closePath();
    tb(d, b[Ih]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 115);
    d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
    d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
    d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
    d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
    d.closePath();
    tb(d, b[Ss]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 133, a * 94);
    d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
    d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
    d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
    d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
    d.closePath();
    tb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 130, a * 279);
    d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
    d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
    d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
    d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
    d.closePath();
    tb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 147, a * 303);
    d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
    d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
    d.closePath();
    tb(d, b[Db]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 303);
    d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
    d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
    d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
    d.closePath();
    tb(d, b[Ft]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 89, a * 280);
    d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
    d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
    d.closePath();
    tb(d, b[Xr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 94, a * 290);
    d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
    d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
    d.closePath();
    tb(d, b[8]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 163, a * 295);
    d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
    d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
    d.closePath();
    tb(d, b[zn]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 172, a * 286);
    d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
    d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
    d.closePath();
    tb(d, b[lr]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 115, a * 37);
    d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
    d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
    d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
    d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
    d.closePath();
    tb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 146, a * 34);
    d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
    d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
    d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
    d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
    d.closePath();
    tb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 143, a * 69);
    d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
    d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
    d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
    d.closePath();
    tb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 149, a * 92);
    d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
    d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
    d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
    d.closePath();
    tb(d, b[Ba]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 111, a * 61);
    d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
    d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
    d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
    d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
    d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
    d.closePath();
    tb(d, b[7]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 107, a * 81);
    d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
    d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
    d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
    d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
    d.closePath();
    tb(d, b[tt]);
    return c;
  }
  function Bc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 170;
    d.height = a * 170;
    e.globalAlpha = b ? 0.5 : Yt;
    e.translate(a * -10, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * 10, a * -10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 4.109375);
    e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
    e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
    e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
    e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
    e.closePath();
    tb(e, c[Eg], c[2], Hr * a);
    return d;
  }
  function Dc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 137;
    d.height = a * 129;
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    tb(e, undefined, c[2], a * 40);
    e.globalAlpha = 0.4;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    tb(e, undefined, c[1], a * fq);
    e.globalAlpha = 0.8;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    tb(e, c[0], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
    e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
    e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
    e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
    e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
    e.closePath();
    tb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
    e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
    e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
    e.closePath();
    tb(e, c[1], c[Le], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.00003051757812, a * 49.625);
    e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
    e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
    e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
    e.closePath();
    tb(e, c[js], c[_i], a * xt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 47.000030517578125, a * 36.625);
    e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
    e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
    e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
    e.closePath();
    tb(e, c[Ud], c[ta], xt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 53.000030517578125, a * 52.625);
    e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
    e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
    e.closePath();
    tb(e, c[3]);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
    e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
    e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
    e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
    e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
    e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
    e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
    e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
    e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
    e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
    e.closePath();
    tb(e, Uq, c[Fh], a * Lb);
    return d;
  }
  function Ec(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 173;
    c.height = a * 178;
    d.globalAlpha = 0.5;
    ab(d, a * 86.5, a * 98, a * 80);
    tb(d, b[kq]);
    d.globalAlpha = jh;
    ab(d, a * 86.5, a * 89, a * 81);
    tb(d, b[Eg], b[2], a * 4);
    ab(d, a * 86.5, a * 86, a * 59);
    tb(d, b[3], b[4], a * 4);
    d.globalAlpha = 0.5;
    ab(d, a * 86.5, a * 95, a * 34);
    tb(d, b[Kr]);
    d.globalAlpha = 1;
    ab(d, a * 86.5, a * 89, a * 34);
    tb(d, b[uh]);
    return c;
  }
  function Ic() {
    var b = Vw.time;
    if (ΔΔ[Cr.ΔᐃΔᐃᐃ]) {
      to.drawImage(ΔΔ[Cr.ΔᐃΔᐃᐃ][b][ik], lo + 480, gq + 190);
      to.drawImage(ΔΔ[Cr.ΔᐃΔᐃᐃ][b][2], lo + 180, gq - 430);
      to.drawImage(ΔΔ[Cr.ΔᐃΔᐃᐃ][b][ce], lo - 855, gq + 100);
      to.drawImage(ΔΔ[Cr.ΔᐃΔᐃᐃ][b][ko], lo - 550, gq - 300);
      to.drawImage(ΔΔ[Cr.ΔᐃΔᐃᐃ][b][_s], lo - 1020, gq - 520);
    }
    if (ΔΔ[Cr.ⵠᐃⲆΔΔ]) {
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][bt], lo - 80, gq - 640);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][1], lo + 80, gq + 490);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][Xn], lo - 180, gq - 700);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][0], lo + 550, gq + 100);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][1], lo + 450, gq + 300);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][js], lo + 780, gq + 300);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][Wq], lo + 980, gq + 200);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][Xn], lo + 680, gq + 600);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][Xn], lo - 380, gq + 100);
      to.drawImage(ΔΔ[Cr.ⵠᐃⲆΔΔ][b][_l], lo + 280, gq + 250);
    }
    if (ΔΔ[Cr.ᐃᐃΔⲆⲆ]) {
      to.drawImage(ΔΔ[Cr.ᐃᐃΔⲆⲆ][b][ko], lo - 590, gq);
      to.drawImage(ΔΔ[Cr.ᐃᐃΔⲆⲆ][b][Ko], lo + 120, gq - 390);
      to.drawImage(ΔΔ[Cr.ᐃᐃΔⲆⲆ][b][0], lo - 270, gq + 340);
    }
    if (ΔΔ[Cr.ᐃΔᐃΔ]) {
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][4], lo - 700, gq - 600);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][_t], lo - 970, gq - 250);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][vu], lo - 720, gq - 200);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][2], lo - 1020, gq + 340);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][Jt], lo - 1120, gq - Ko);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][Fo], lo - 650, gq - 330);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][4], lo - 495, gq - 90);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][vg], lo - 520, gq + 340);
      to.drawImage(ΔΔ[Cr.ᐃΔᐃΔ][b][_t], lo + 830, gq - 520);
    }
    ΔΔ[Cr.ⵠⵠΔᐃⵠ];
    if (Ww && gf) {
      var c = Ww.ᐃᐃᐃ.x;
      var d = Ww.ᐃᐃᐃ.y;
      Ww.ᐃᐃᐃ.x = lo;
      Ww.ᐃᐃᐃ.y = gq;
      var e = gf.time;
      gf.time = Vw.time;
      var f;
      var g = Vw.items;
      g[2].x = 400;
      g[pa].y = 100;
      g[2].ᐃⵠⲆᐃ(Cr.ᐃⵠΔⲆᐃ);
      (f = g[1]).x = -500;
      f.y = 100;
      f.ⵠⵠⵠᐃ[0].x = f.x - 20.5;
      f.ⵠⵠⵠᐃ[0].y = f.y - 22.5;
      f.ⵠⵠⵠᐃ[Cs].x = f.x - 35.5;
      f.ⵠⵠⵠᐃ[1].y = f.y + 7.5;
      f.ⵠⵠⵠᐃ[2].x = f.x + 7.5;
      f.ⵠⵠⵠᐃ[2].y = f.y - 30;
      f.ⵠⵠⵠᐃ[cl].x = f.x + 22.5;
      f.ⵠⵠⵠᐃ[ta].y = f.y;
      f.ⵠⵠⵠᐃ[Ai].x = f.x - 7.5;
      f.ⵠⵠⵠᐃ[4].y = f.y + 14.5;
      for (var h = Gd; f.info > h; h++) {
        f.ⵠⵠⵠᐃ[h].ᐃⵠⲆᐃ(Cr.ⲆⵠⲆΔⲆ);
      }
      (f = g[3]).x = 210;
      f.y = -290;
      f.ⵠⵠⵠᐃ[0].x = f.x - 20.5;
      f.ⵠⵠⵠᐃ[Mn].y = f.y - 22.5;
      f.ⵠⵠⵠᐃ[1].x = f.x - 35.5;
      f.ⵠⵠⵠᐃ[1].y = f.y + 7.5;
      f.ⵠⵠⵠᐃ[cu].x = f.x + 7.5;
      f.ⵠⵠⵠᐃ[2].y = f.y - 30;
      f.ⵠⵠⵠᐃ[3].x = f.x + 22.5;
      f.ⵠⵠⵠᐃ[ta].y = f.y;
      f.ⵠⵠⵠᐃ[4].x = f.x - 7.5;
      f.ⵠⵠⵠᐃ[4].y = f.y + 14.5;
      for (h = 0; h < f.info; h++) {
        f.ⵠⵠⵠᐃ[h].ᐃⵠⲆᐃ(Cr.ⲆⵠⲆΔⲆ);
      }
      g[kq].x = 450;
      g[0].y = -rs;
      g[Wh].ΔⵠΔᐃⵠ(Cr.ⵠⵠⲆΔⲆⵠᐃ);
      g[Jt].ⵠⵠᐃⵠⲆ();
      Ww.ᐃᐃᐃ.x = c;
      Ww.ᐃᐃᐃ.y = d;
      gf.time = e;
    }
  }
  function Sc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 160;
    d.height = a * 161;
    e.globalAlpha = b ? 0.5 : bt;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 80.5, a * 78);
    nb(e, a * -71.5, a * -71, a * 143, a * 143, Fs * a);
    e.restore();
    tb(e, c[Kr]);
    e.globalAlpha = ub;
    e.translate(Fj, a * -10);
    e.save();
    e.translate(a * 80.5, a * 78);
    nb(e, a * -71.5, a * -71, a * 143, a * 143, a * ft);
    e.restore();
    tb(e, c[ik], c[_l], a * 6);
    e.save();
    e.translate(a * 80, a * 78.5);
    nb(e, a * -17, a * -72.5, a * 34, a * 145, a * Bq);
    e.restore();
    tb(e, c[3], c[4], a * Vo);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, zq * a);
    e.save();
    e.translate(a * 80, a * 79.5);
    nb(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(0, -bb * a);
    e.save();
    e.translate(a * 80, a * 79.5);
    nb(e, a * -73, a * -16.5, a * 145, a * 34, a * Ke);
    e.restore();
    tb(e, c[3], c[4], a * xu);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    tb(e, c[Jt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    tb(e, c[Kr]);
    e.globalAlpha = 1;
    e.translate(Wh, a * -rk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79, a * 71);
    e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
    e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
    e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
    e.closePath();
    tb(e, c[Kk], c[4], Mr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84, a * 78);
    e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
    e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
    e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
    e.closePath();
    tb(e, c[3], c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 73);
    e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
    e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
    e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
    e.closePath();
    tb(e, c[3], c[f], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 82, a * 83);
    e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
    e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
    e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
    e.closePath();
    tb(e, c[sn], c[4], So * a);
    e.globalAlpha = b ? 0.5 : Yt;
    e.translate(0, a * eg);
    e.save();
    e.translate(a * 78.5, a * 78);
    nb(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
    e.restore();
    tb(e, c[yk]);
    e.globalAlpha = 1;
    e.translate(0, a * -rd);
    e.save();
    e.translate(a * 78.5, a * 78);
    nb(e, a * -13.5, -Qr * a, a * 27, a * 27, a * hn);
    e.restore();
    tb(e, c[B], c[Yn], a * 6);
    return d;
  }
  function Qc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.globalAlpha = 1;
    e.translate(a * Tl, a * Wr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    tb(e, c[0]);
    e.translate(a * -20, a * -mt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    tb(e, c[1], c[eh], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    tb(e, Uq, c[eh], a * bk);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    tb(e, Lk, c[yh], Ch * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    tb(e, c[3], c[cu], bk * a);
    ab(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
    tb(e, c[mj]);
    ab(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
    tb(e, c[Il]);
    ab(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
    tb(e, c[oj]);
    ab(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
    tb(e, c[4]);
    ab(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
    tb(e, c[f]);
    ab(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
    tb(e, c[4]);
    ab(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
    tb(e, c[bn]);
    ab(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
    tb(e, c[th]);
    ab(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
    tb(e, c[4]);
    ab(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
    tb(e, c[4]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    tb(e, c[5]);
    return d;
  }
  function _c(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 440;
    d.height = a * 388;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(pl * a, a * 5);
    ab(e, a * 220, a * 201, a * 170.41713528867922);
    tb(e, c[0], c[0], a * 6);
    e.globalAlpha = wg;
    e.translate(a * -5, a * -5);
    ab(e, a * 220, a * 201, a * 170.41713528867922);
    tb(e, c[Aj], c[$r], a * ol);
    ab(e, a * 220, a * 201, a * 130);
    tb(e, c[io], c[xl], a * _);
    ab(e, a * 222, a * 199, a * 120.74767078498864);
    tb(e, Hh, c[Vl], a * 40);
    ab(e, a * 220, a * 200, a * 95.44108130150245);
    tb(e, undefined, c[2], a * 15);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(a * Th, a * uh);
    ab(e, a * 63, a * 136, a * 49.193495504995376);
    tb(e, c[kq], c[0], a * Il);
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    ab(e, a * 63, a * 136, a * 49.193495504995376);
    tb(e, c[8], c[2], a * 4);
    ab(e, a * 63, a * 137, a * 25.632011235952593);
    tb(e, c[7], c[C], oj * a);
    return d;
  }
  function Fc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 110;
    c.height = a * 110;
    d.globalAlpha = 0.2;
    ab(d, a * 55, a * 55, a * 55);
    tb(d, b[rh]);
    return c;
  }
  function Rc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 175;
    d.height = a * 106;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(Jt, a * xo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    tb(e, c[Lu]);
    e.globalAlpha = V;
    e.translate(0, a * -zn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, sg * a, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    tb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 38, a * 46);
    e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
    e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
    e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
    e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
    e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
    e.closePath();
    tb(e, c[Rj]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 75);
    e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * Bs, a * 27);
    e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
    e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
    e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
    e.closePath();
    tb(e, us, c[2], a * Il);
    e.translate(0, -fa * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    tb(e, c[wh], c[10], Rh * a);
    e.translate(0, a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * F);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * sj);
    e.bezierCurveTo(a * 7, a * 34, F * a, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    tb(e, c[Za]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 19);
    e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
    e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
    e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
    e.closePath();
    tb(e, c[hi]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 148, Yl * a);
    e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
    e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
    e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * Ot);
    e.closePath();
    tb(e, c[mg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 131, a * 43);
    e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
    e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
    e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
    e.closePath();
    tb(e, undefined, c[qo], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41, a * 43);
    e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
    e.bezierCurveTo(a * 7, a * 34, a * Jl, a * 63, a * 33, a * 66);
    e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
    e.closePath();
    tb(e, Ya, c[4], a * 4);
    e.save();
    e.translate(a * 87, a * 34.5);
    e.rotate(Dh);
    nb(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
    e.restore();
    tb(e, c[7], c[2], a * Ai);
    e.save();
    e.translate(a * 87, a * 57);
    e.rotate(0);
    nb(e, -zn * a, a * -23, a * 16, a * 46, a * 10);
    e.restore();
    tb(e, c[Cl], c[2], Dt * a);
    ab(e, a * 87, a * 39, a * 4.123105625617661);
    tb(e, c[9], c[2], a * 4);
    ab(e, a * 87, a * 60, a * 4.242640687119285);
    tb(e, c[ch], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 67);
    e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
    e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
    e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
    e.closePath();
    tb(e, c[8], c[yg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * j, a * 77, a * $j, a * 74, a * 27, a * 80);
    e.closePath();
    tb(e, c[9], c[yg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 70);
    e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
    e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
    e.closePath();
    tb(e, c[Hk], c[2], a * 4);
    ab(e, a * 50, a * 80, Cj * a);
    tb(e, c[Rr], c[ij], oj * a);
    ab(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
    tb(e, c[9], c[xl], In * a);
    ab(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
    tb(e, c[ug], c[2], a * 4);
    return d;
  }
  function jc(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 147;
    c.height = a * 172;
    d.globalAlpha = 0.5;
    d.translate(ko, a * 8);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(Sl * a, a * 50);
    d.bezierCurveTo(a * 15, zs * a, a * 49, a * 6, a * 67, Fq * a);
    d.bezierCurveTo(a * 121, a * Kk, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(a * 2, a * 127, fa * a, a * 87, a * 8, a * 50);
    d.closePath();
    tb(d, b[0]);
    d.translate(tr, a * -8);
    d.globalAlpha = dn;
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 8, a * 50);
    d.bezierCurveTo(vh * a, Jh * a, a * 49, bg * a, a * 67, a * 6);
    d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
    d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
    d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
    d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
    d.bezierCurveTo(yg * a, a * 127, Vl * a, a * 87, a * lr, a * 50);
    d.closePath();
    tb(d, b[1], b[eh], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(zr * a, a * 57);
    d.bezierCurveTo(yh * a, a * 50, a * 5, a * 22, a * 24, a * 22);
    d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
    tb(d, b[Yt], b[Wq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 93, a * 47);
    d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, Tl * a);
    d.bezierCurveTo(a * 144, Yr * a, a * 146, a * 52, a * 133, a * 58);
    tb(d, b[Br], b[tg], a * 4);
    ab(d, a * 51, a * 91, a * rb);
    tb(d, b[vg]);
    ab(d, a * 95, a * 91, a * 9);
    tb(d, b[ta]);
    ab(d, a * 91, a * 89, a * Il);
    tb(d, b[4]);
    ab(d, a * 47, a * 89, a * qo);
    tb(d, b[4]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 54, a * 133);
    d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
    d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
    d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
    d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
    d.closePath();
    tb(d, b[5]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 65.25, a * 135);
    d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
    d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
    d.closePath();
    tb(d, b[6]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 74, a * 145);
    d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
    d.closePath();
    tb(d, undefined, b[Vo], a * 2);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * An, a * 58);
    d.bezierCurveTo(ft * a, a * 38, a * 18, a * 33, a * 28, a * 34);
    d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
    d.closePath();
    tb(d, b[So]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * rs, a * 51);
    d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
    d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
    d.closePath();
    tb(d, b[6]);
    return c;
  }
  function Lc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 102;
    d.height = a * 102;
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(3, 3);
    nb(e, a * 24, a * 26, a * 70, a * 9, a * 10);
    tb(e, c[0]);
    nb(e, a * 26, a * 70, a * 70, a * 9, a * lj);
    tb(e, c[ko]);
    nb(e, a * Bk, a * 3, a * 22, a * 94, a * 5);
    tb(e, c[0]);
    nb(e, a * 40, a * 3, a * 22, a * 94, a * 5);
    tb(e, c[rh]);
    nb(e, a * 75, a * Mo, a * 22, a * 94, _g * a);
    tb(e, c[yk]);
    e.globalAlpha = Ud;
    e.translate(-sn, -3);
    nb(e, a * 24, a * 26, a * 70, a * 9, a * Fs);
    tb(e, c[V]);
    nb(e, a * 26, a * 70, a * 70, Ze * a, a * Pr);
    tb(e, c[er]);
    nb(e, a * 5, a * Ea, a * 22, a * 94, gs * a);
    tb(e, c[2], c[3], a * 4);
    nb(e, a * 40, a * Kk, a * 22, a * 94, a * lt);
    tb(e, c[2], c[3], a * oj);
    nb(e, a * 75, fa * a, a * 22, a * 94, a * 5);
    tb(e, c[2], c[Kk], a * f);
    return d;
  }
  function Wc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 168;
    d.height = Lh * a;
    e.globalAlpha = b ? 0.5 : sd;
    e.translate(a * 10, _g * a);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    nb(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
    e.restore();
    tb(e, c[Ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    tb(e, c[0]);
    ab(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(a * -10, -Cj * a);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    nb(e, a * -19.5, a * -8.5, a * 39, ok * a, a * 10);
    e.restore();
    tb(e, undefined, c[lk], a * Bt);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    tb(e, D, c[3], a * mg);
    ab(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
    tb(e, undefined, c[3], a * Rb);
    e.save();
    e.translate(a * 24.5, a * 44.30000305175781);
    nb(e, a * -19.5, a * -8.5, a * 39, jq * a, a * Fg);
    e.restore();
    tb(e, c[dn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115, a * 37.80000305175781);
    e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
    e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
    e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
    e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
    e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
    e.closePath();
    tb(e, c[1]);
    ab(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
    tb(e, c[tg], c[1], xt * a);
    ab(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
    tb(e, c[vo], c[V], a * 4);
    ab(e, a * 78, a * 44, a * Ye);
    tb(e, c[Yn]);
    return d;
  }
  function Gc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 104;
    d.height = a * 117;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * zg, a * 90);
    e.bezierCurveTo(a * mt, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
    e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
    e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
    e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, qa * a);
    e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, hl * a, a * 13, a * 16);
    e.closePath();
    tb(e, c[ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 6, a * 76);
    e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
    e.bezierCurveTo(a * 37.5, a * Es, a * 37.5, a * 17, a * 54, a * id);
    e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * Qh, a * 18);
    e.closePath();
    tb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 24, a * 62);
    e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
    e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
    e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
    e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
    e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
    e.closePath();
    tb(e, c[1]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
    e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
    e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * bt, a * 89);
    e.bezierCurveTo(a * Yj, Oj * a, a * 34, a * 110, a * 35, a * 111);
    e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
    e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
    e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
    e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, Ur * a, a * 97);
    e.closePath();
    tb(e, c[Dn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36, a * 107);
    e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
    e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
    e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * fa);
    e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * Fa);
    e.bezierCurveTo(al * a, a * 53, a * Oi, a * 53, a * th, a * 90);
    e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
    e.closePath();
    tb(e, gh, c[4], a * Vo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 22, a * 71);
    e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
    e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
    e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
    e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
    e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
    e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
    e.closePath();
    tb(e, undefined, c[bn], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(_g * a, a * 89);
    e.bezierCurveTo(a * Fr, a * 73, a * 12.5, a * 80.5, Fl * a, a * 72);
    e.closePath();
    tb(e, Tg, c[qa], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35, a * 102);
    e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
    e.closePath();
    tb(e, undefined, c[4], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68, a * 62);
    e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
    e.closePath();
    tb(e, undefined, c[4], H * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 70, a * 41);
    e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
    e.closePath();
    tb(e, Tg, c[4], zk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 28, a * 33);
    e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
    e.closePath();
    tb(e, li, c[Ka], a * 6);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 51, a * 28);
    e.bezierCurveTo(a * 53, a * 17, a * 53, a * Vk, a * 55, a * 6);
    e.closePath();
    tb(e, undefined, c[Il], So * a);
    return d;
  }
  function Oc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 465;
    d.height = a * 310;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 192);
    e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
    e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
    e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
    e.closePath();
    tb(e, c[Mn], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146, a * 239);
    e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
    e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
    e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
    e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
    e.closePath();
    tb(e, c[Kr], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126, a * 193);
    e.bezierCurveTo(a * 173, a * 94, a * 209, a * wr, a * 228, a * 57);
    e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
    e.closePath();
    tb(e, lq, c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 230, a * 57);
    e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
    e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
    e.closePath();
    tb(e, undefined, c[wg], kr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 154, a * 212);
    e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
    e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
    e.closePath();
    tb(e, li, c[ik], a * kr);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 239, a * 59);
    e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
    e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
    e.closePath();
    tb(e, c[Xn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216, a * 61);
    e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
    e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
    e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
    e.closePath();
    tb(e, c[tg]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 175, a * 125);
    e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
    e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
    e.bezierCurveTo(a * 207, a * Zr, a * 192, a * 104, a * 177, a * 123);
    e.closePath();
    tb(e, c[2]);
    return d;
  }
  function qc(b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    var e = b * 600;
    var f = b * 22;
    var g = jt * b;
    var h = b * 4;
    c.width = e;
    c.height = f;
    nb(d, b * 5, _g * b, e - b * 10, f - rd * b, g);
    tb(d, null, "#BBE8EF", h);
    return c;
  }
  function Nc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * Yt);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    nb(e, -Ak * a, a * -16.5, a * 32, a * 33, a * ds);
    e.restore();
    tb(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    tb(e, c[2]);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    nb(e, a * -15.5, -Sq * a, a * 31, a * 32, Lq * a);
    e.restore();
    tb(e, c[ij]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    tb(e, c[Qs]);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    nb(e, a * -16.5, a * -17.5, a * 33, a * 35, ph * a);
    e.restore();
    tb(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    tb(e, c[xl]);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    nb(e, a * -18, a * -18, a * 36, a * 36, Ba * a);
    e.restore();
    tb(e, c[Le]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    tb(e, c[2]);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    nb(e, a * -Vs, a * -Lt, a * 36, a * 38, a * Va);
    e.restore();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    tb(e, c[ij]);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    nb(e, -Yh * a, a * -17.5, a * 40, a * 35, a * 7);
    e.restore();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    tb(e, c[2]);
    e.globalAlpha = Ur;
    e.translate(_s, a * -10);
    e.save();
    e.translate(a * 98, a * 41.15177917480469);
    e.rotate(0.8);
    nb(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
    e.restore();
    tb(e, c[3], c[jt], a * Rj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 22.5089111328125);
    e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
    tb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 147.5, a * 69.5089111328125);
    e.rotate(0.2);
    nb(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
    e.restore();
    tb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 163, a * 59.50892639160156);
    e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
    tb(e, undefined, c[4], a * 5);
    e.save();
    e.translate(a * 143.5, a * 128.2946319580078);
    e.rotate(1.24);
    nb(e, a * -16.5, a * -17.5, a * 33, a * 35, Ij * a);
    e.restore();
    tb(e, c[Gg], c[qa], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 162, a * 135.93748474121094);
    e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
    tb(e, On, c[4], mh * a);
    e.save();
    e.translate(a * 99, a * 156.08035278320312);
    e.rotate(0.84);
    nb(e, a * -$o, -xh * a, a * 36, a * 36, a * 7);
    e.restore();
    tb(e, c[3], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 98, a * 136.08035278320312);
    e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
    tb(e, us, c[qo], a * 5);
    e.save();
    e.translate(a * 54, a * 72.22320556640625);
    e.rotate(1.32);
    nb(e, a * -18, -Rq * a, a * 36, a * 38, a * Va);
    e.restore();
    tb(e, c[Vl], c[gn], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 34, a * 60.79463195800781);
    e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
    tb(e, li, c[4], a * 5);
    e.save();
    e.translate(a * 49, a * 127.29463195800781);
    e.rotate(1.76);
    nb(e, a * -aq, a * -17.5, a * 40, a * 35, iq * a);
    e.restore();
    tb(e, c[Za], c[4], a * 5);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 141.7946319580078);
    e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
    tb(e, lq, c[4], pl * a);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(kq, Ke * a);
    e.save();
    e.translate(a * 98, a * 99);
    gb(e, 6, a * 70.28669492273468, a * 10);
    e.restore();
    tb(e, c[2]);
    e.save();
    e.translate(a * 98, a * 99);
    gb(e, Fq, a * 56.455940020351264, a * Fs);
    e.restore();
    tb(e, c[C]);
    e.globalAlpha = 1;
    e.translate(0, a * -10);
    e.save();
    e.translate(a * 98, a * 99);
    gb(e, dt, a * 70.28669492273468, a * 10);
    e.restore();
    tb(e, c[U], c[6], a * 5);
    e.save();
    e.translate(a * 98, a * 99);
    gb(e, 6, a * 56.455940020351264, a * 10);
    e.restore();
    tb(e, c[id], c[ob], tt * a);
    return d;
  }
  function Hc() {
    new Date().getTime();
    function a(a) {
      var b = tr;
      for (var c = 0, d = Gd; c < a.length; c++) {
        var e = a.charAt(c);
        if (e !== "_" && c !== 5) {
          if (e === "1") {
            b += Math.pow(2, d);
          }
          d++;
        }
      }
      return b;
    }
    ᐃⵠⲆⵠⵠΔᐃ();
    ΔΔ[Cr.ⲆΔΔⲆⵠⵠⲆ] = [Δᐃ.ⵠᐃΔΔⵠᐃΔ, Δᐃ.ⵠⲆᐃⲆΔⲆᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_010_000")] = [Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_010_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_010_000")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a(hj[Ye])] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_010_000")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_011_010")] = [Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_011_011")] = [Δᐃ.ΔⵠΔⲆΔᐃⲆ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_110_000")] = [Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ⵠⲆⲆᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_110_010")] = [Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ΔΔΔᐃⵠᐃⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_110_110")] = [Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ⵠⵠⵠⲆⵠⲆΔ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ΔΔΔᐃⵠᐃⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_111_000")] = [Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_111_111")] = [Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ΔⵠΔⲆΔᐃⲆ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_010_000")] = [Δᐃ.ⵠⲆⲆᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_010_010")] = [Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_011_000")] = [Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⲆΔⲆⵠⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_000")] = [Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")] = [Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_011_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_011_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_111_000")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_111_111")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("000_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_011_000")] = [Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⲆΔⲆⵠⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_011_010")] = [Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_011_011")] = [Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ΔⵠΔⲆΔᐃⲆ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_000")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_011_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_010")] = [Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("011_111_111")] = [Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ΔⵠΔⲆΔᐃⲆ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_110_000")] = [Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ⵠᐃᐃᐃⲆⵠⵠ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_110_010")] = [Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_110_110")] = [Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_000")] = [Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ⵠᐃᐃᐃⲆⵠⵠ, Δᐃ.ⵠᐃⲆᐃΔᐃᐃ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_110")] = [Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ⵠᐃⲆᐃΔᐃᐃ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_111")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a(hj[jt])] = [Δᐃ.ⵠⵠⵠᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⵠᐃⲆᐃΔᐃᐃ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⵠⵠⲆⵠⲆΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a(hj[ta])] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a(hj[zg])];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("111_111_000")] = [Δᐃ.ⵠᐃᐃᐃⲆⵠⵠ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠᐃⲆᐃΔᐃᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("111_111_111")] = [Δᐃ.ⲆⵠⵠⲆⵠⲆΔ, Δᐃ.ⵠⵠᐃΔᐃ, Δᐃ.ⲆⲆⲆⵠΔ, Δᐃ.ΔⵠΔⲆΔᐃⲆ, Δᐃ.ⵠᐃⲆᐃⲆ, Δᐃ.ⵠᐃΔᐃⵠ, Δᐃ.ⵠⲆⲆⲆᐃ, Δᐃ.ΔΔⵠⵠⵠⲆⲆ, Δᐃ.ΔⲆⲆⵠᐃⲆⲆ, Δᐃ.ᐃΔᐃΔⵠ, Δᐃ.ΔⲆⲆⵠⲆᐃΔ, Δᐃ.ⲆⵠΔᐃⲆᐃⵠ, Δᐃ.ⲆᐃⲆᐃᐃⵠΔ, Δᐃ.ᐃΔⵠⵠᐃ, Δᐃ.ⲆⲆᐃᐃⲆⵠΔ, Δᐃ.ⵠᐃᐃⲆᐃᐃⲆ, Δᐃ.ⵠⲆⲆᐃⲆ, Δᐃ.ⵠᐃⲆΔⲆ, Δᐃ.ᐃᐃⵠᐃⲆΔⲆ, Δᐃ.ⲆⵠⲆΔⲆⵠⵠ, Δᐃ.ΔΔΔⵠⲆΔᐃ, Δᐃ.ᐃᐃᐃᐃⲆ, Δᐃ.ⲆΔⲆⵠⲆ, Δᐃ.ⵠⵠⵠᐃⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("111_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ⵠⵠΔ][a("111_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_010_000")] = [Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃⵠⵠᐃΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_010_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_010_000")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a(hj[da])] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_010_000")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_011_010")] = [Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_011_011")] = [Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_110_000")] = [Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ᐃⵠⵠᐃΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_110_010")] = [Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ⵠᐃΔⲆΔⵠⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_110_110")] = [Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⵠⵠⵠⲆⵠᐃΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ⵠᐃΔⲆΔⵠⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_111_000")] = [Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_111_111")] = [Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_010_000")] = [Δᐃ.ᐃⵠⵠᐃΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_010_010")] = [Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_011_000")] = [Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_000")] = [Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")] = [Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_011_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_011_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_111_000")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_111_111")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("000_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("010_110_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_011_000")] = [Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_011_010")] = [Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_011_011")] = [Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_000")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_011_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_010")] = [Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_110")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_010")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("011_111_111")] = [Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_110_000")] = [Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⲆᐃᐃΔΔΔᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_110_010")] = [Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_110_110")] = [Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_000")] = [Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⲆᐃᐃΔΔΔᐃ, Δᐃ.ΔⵠᐃΔⵠΔⲆ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_110")] = [Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ΔⵠᐃΔⵠΔⲆ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_111")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_011")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("110_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("111_111_110")] = [Δᐃ.ᐃⵠⵠⵠΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔⵠᐃΔⵠΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⵠᐃᐃ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a(hj[nh])] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("111_111_110")];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("111_111_000")] = [Δᐃ.ⲆᐃᐃΔΔΔᐃ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔⵠᐃΔⵠΔⲆ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("111_111_111")] = [Δᐃ.ⵠΔᐃⵠⵠᐃᐃ, Δᐃ.ΔΔⲆᐃΔ, Δᐃ.ΔΔⵠΔⵠ, Δᐃ.ⵠⵠⵠᐃⵠⵠⵠ, Δᐃ.ⵠΔⵠΔⵠ, Δᐃ.ΔᐃΔⵠⵠ, Δᐃ.ᐃⲆᐃⵠΔ, Δᐃ.ⲆᐃⵠΔⲆⵠΔ, Δᐃ.ⲆΔⲆⵠⲆᐃⵠ, Δᐃ.ⲆᐃΔΔⲆ, Δᐃ.ΔᐃᐃⲆΔⲆᐃ, Δᐃ.ⲆΔⲆⲆⲆⵠⲆ, Δᐃ.ΔᐃⵠⲆⵠᐃᐃ, Δᐃ.ⵠΔⵠᐃⲆ, Δᐃ.ΔⵠⲆⵠΔΔⵠ, Δᐃ.ⵠΔⲆΔΔⲆᐃ, Δᐃ.ᐃⵠⵠᐃΔ, Δᐃ.Δᐃᐃᐃⵠ, Δᐃ.ᐃᐃᐃᐃΔⵠⲆ, Δᐃ.ᐃᐃᐃⲆⲆⵠⵠ, Δᐃ.ⲆⲆᐃΔⲆⲆᐃ, Δᐃ.ᐃΔΔⲆΔ, Δᐃ.ⲆΔΔΔᐃ, Δᐃ.ᐃⵠⵠⵠΔ];
    ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a("111_111_010")] = ΔΔ[Cr.ⵠⲆⲆⵠ][Cr.ΔΔⵠ][a(hj[th])];
    ΔΔ[Cr.ᐃΔⲆⲆ] = [];
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_010_000")] = Δᐃ.ⵠⵠΔΔⵠᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_010_010")] = Δᐃ.ΔᐃᐃΔΔᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_011_000")] = Δᐃ.ⲆⲆᐃⲆⵠⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_011_010")] = Δᐃ.ⵠⲆⵠⵠΔⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_011_011")] = Δᐃ.ⵠⲆᐃᐃⵠᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_110_000")] = Δᐃ.ⲆᐃᐃⲆⲆⲆⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_110_010")] = Δᐃ.ⲆⲆⵠⵠⵠΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_110_110")] = Δᐃ.ⲆⵠⲆⲆΔⲆⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_111_000")] = Δᐃ.ⲆⲆᐃⲆⲆΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_111_010")] = Δᐃ.ⵠΔⲆⵠⲆᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_111_011")] = Δᐃ.ⲆⲆᐃᐃᐃΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_111_110")] = Δᐃ.ⲆᐃⲆᐃⵠᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("000_111_111")] = Δᐃ.ⵠᐃⵠⵠⲆⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_010_000")] = Δᐃ.ⲆⲆⲆΔⲆⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_010_010")] = Δᐃ.ᐃᐃΔᐃⵠⲆΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_011_000")] = Δᐃ.ⵠⲆΔⲆᐃᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_011_010")] = Δᐃ.ⵠⵠΔᐃΔΔⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_011_011")] = Δᐃ.ⵠⲆⲆⵠΔⲆᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_110_000")] = Δᐃ.ⵠΔΔⲆΔᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_110_010")] = Δᐃ.ⲆΔⲆⵠⲆΔⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_110_110")] = Δᐃ.ⵠⲆⲆᐃⲆᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_111_000")] = Δᐃ.ᐃΔⵠⲆⲆⲆᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_111_010")] = Δᐃ.ⵠΔᐃⵠⲆΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_111_011")] = Δᐃ.ᐃᐃⲆᐃᐃᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_111_110")] = Δᐃ.ⵠⵠⲆⵠᐃᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("010_111_111")] = Δᐃ.ᐃⲆⲆⲆΔᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_011_000")] = Δᐃ.ⲆΔⵠΔⲆᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_011_010")] = Δᐃ.ᐃΔᐃⲆⵠⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_011_011")] = Δᐃ.ΔᐃⵠᐃᐃⲆᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_111_000")] = Δᐃ.ⲆᐃⵠⲆᐃΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_111_010")] = Δᐃ.ⵠΔᐃⵠΔΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_111_011")] = Δᐃ.ⲆΔΔⲆΔⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_111_110")] = Δᐃ.ᐃⲆⲆΔⵠⲆΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("011_111_111")] = Δᐃ.ᐃⲆⵠΔⲆⲆΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_110_000")] = Δᐃ.ᐃᐃΔⵠᐃᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_110_010")] = Δᐃ.ΔᐃΔⲆⲆΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_110_110")] = Δᐃ.ⲆΔⵠΔⲆⲆᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_111_000")] = Δᐃ.ⵠᐃⲆⲆΔⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_111_010")] = Δᐃ.ΔᐃΔⲆᐃΔⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_111_011")] = Δᐃ.ᐃⵠⲆᐃᐃᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_111_110")] = Δᐃ.ⵠᐃⲆᐃⵠⲆⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("110_111_111")] = Δᐃ.ΔⲆΔⵠᐃᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("111_111_011")] = Δᐃ.ΔⵠΔⵠΔⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a(hj[zg])] = Δᐃ.ᐃᐃΔⲆᐃⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a(hj[B])] = Δᐃ.ΔⵠΔⵠΔⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("111_111_000")] = Δᐃ.ⲆⵠΔⵠⵠᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("111_111_111")] = Δᐃ.ⵠΔᐃᐃΔΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ⵠⵠΔ][a("111_111_010")] = Δᐃ.ΔⲆⲆΔⲆΔⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_010_000")] = Δᐃ.ⵠᐃΔΔⵠΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_010_010")] = Δᐃ.ᐃΔⵠⵠᐃⲆⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a(hj[Mh])] = Δᐃ.ⲆΔΔⵠⵠⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_011_010")] = Δᐃ.ⵠᐃⵠⵠᐃⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_011_011")] = Δᐃ.ᐃⵠᐃⵠⲆΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_110_000")] = Δᐃ.ⵠᐃΔᐃᐃΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_110_010")] = Δᐃ.ⵠⲆⵠⵠⲆⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_110_110")] = Δᐃ.ᐃᐃᐃⲆΔΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_111_000")] = Δᐃ.ᐃΔΔⵠⲆᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_111_010")] = Δᐃ.ᐃΔΔⲆΔΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_111_011")] = Δᐃ.ᐃΔΔⵠΔΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_111_110")] = Δᐃ.ᐃᐃᐃⵠΔⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("000_111_111")] = Δᐃ.ᐃᐃᐃⲆᐃᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_010_000")] = Δᐃ.ⲆⵠᐃⵠᐃⲆᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_010_010")] = Δᐃ.ΔΔΔⲆᐃⵠΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_011_000")] = Δᐃ.ΔΔⵠⵠⲆΔⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_011_010")] = Δᐃ.ΔⲆΔⵠⲆΔΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_011_011")] = Δᐃ.ⲆⵠᐃᐃᐃᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_110_000")] = Δᐃ.ΔΔⲆⲆΔΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_110_010")] = Δᐃ.ⵠΔᐃΔΔᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_110_110")] = Δᐃ.ᐃⵠⵠⲆⵠⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_111_000")] = Δᐃ.ᐃΔΔⵠΔᐃΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_111_010")] = Δᐃ.ⵠΔΔᐃⵠⲆΔ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_111_011")] = Δᐃ.ΔΔⵠᐃⵠⲆⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_111_110")] = Δᐃ.ΔⲆΔᐃΔΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("010_111_111")] = Δᐃ.ᐃᐃⲆᐃΔᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_011_000")] = Δᐃ.ΔᐃΔᐃⵠΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_011_010")] = Δᐃ.ⵠⲆΔⵠⵠⵠⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_011_011")] = Δᐃ.ⵠᐃⲆⲆⲆΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_111_000")] = Δᐃ.ΔᐃⲆⲆⵠΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_111_010")] = Δᐃ.ᐃᐃᐃⵠⵠⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_111_011")] = Δᐃ.ΔᐃᐃⲆΔΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_111_110")] = Δᐃ.ⵠΔⵠⵠΔⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("011_111_111")] = Δᐃ.ⵠⲆᐃᐃⵠᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_110_000")] = Δᐃ.ⲆⲆΔⲆⲆᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_110_010")] = Δᐃ.ⲆᐃΔΔᐃᐃⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_110_110")] = Δᐃ.ⵠⲆΔⲆⵠΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_111_000")] = Δᐃ.ᐃΔⲆⵠᐃⲆⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_111_010")] = Δᐃ.ⲆΔΔᐃΔⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_111_011")] = Δᐃ.ᐃⲆⲆⲆᐃᐃⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_111_110")] = Δᐃ.ⲆΔⵠⵠΔⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("110_111_111")] = Δᐃ.ⲆᐃᐃⲆⵠⵠⲆ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a(hj[ta])] = Δᐃ.ⲆⲆⲆᐃⵠⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a(hj[In])] = Δᐃ.ⵠᐃΔΔΔΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("111_111_011")] = Δᐃ.ⲆⲆⲆᐃⵠⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("111_111_000")] = Δᐃ.ᐃⵠᐃⲆΔΔⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("111_111_111")] = Δᐃ.ⵠⲆᐃⵠⲆΔᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆ][Cr.ΔΔⵠ][a("111_111_010")] = Δᐃ.ᐃᐃΔΔⵠᐃⲆ;
    ΔΔ[Cr.ΔⲆⵠΔⲆ] = [];
    ΔΔ[Cr.ΔⲆⵠΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔⵠⵠΔΔ;
    ΔΔ[Cr.ΔⲆⵠΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔᐃᐃᐃⵠᐃ;
    ΔΔ[Cr.ⲆΔⵠᐃⲆ] = [];
    ΔΔ[Cr.ⲆΔⵠᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆⵠⵠᐃⲆⲆ;
    ΔΔ[Cr.ⲆΔⵠᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠᐃⵠⲆᐃ;
    ΔΔ[Cr.ⲆⲆⲆΔⵠᐃΔ] = [];
    ΔΔ[Cr.ⲆⲆⲆΔⵠᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃΔΔⵠⵠᐃ;
    ΔΔ[Cr.ⲆⲆⲆΔⵠᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⲆⲆⵠⵠ;
    ΔΔ[Cr.ΔⵠⲆΔᐃ] = [];
    ΔΔ[Cr.ΔⵠⲆΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔΔⲆᐃΔΔ;
    ΔΔ[Cr.ΔⵠⲆΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠⵠᐃΔ;
    ΔΔ[Cr.ⵠΔᐃΔᐃⲆΔ] = [];
    ΔΔ[Cr.ⵠΔᐃΔᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⵠΔⲆᐃⵠⲆ;
    ΔΔ[Cr.ⵠΔᐃΔᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠⲆⲆᐃ;
    ΔΔ[Cr.ⲆΔᐃⵠⲆᐃΔ] = [];
    ΔΔ[Cr.ⲆΔᐃⵠⲆᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃᐃⵠⵠΔⲆ;
    ΔΔ[Cr.ⲆΔᐃⵠⲆᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⲆⲆᐃΔⵠ;
    ΔΔ[Cr.ⵠᐃⵠⲆⵠ] = [];
    ΔΔ[Cr.ⵠᐃⵠⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃⵠᐃΔⵠⵠ;
    ΔΔ[Cr.ⵠᐃⵠⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔΔΔΔΔⲆ;
    ΔΔ[Cr.ⵠⵠⲆⲆⲆⲆᐃ] = [];
    ΔΔ[Cr.ⵠⵠⲆⲆⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⵠⲆⵠᐃⵠ;
    ΔΔ[Cr.ⵠⵠⲆⲆⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⲆⵠⲆᐃᐃ;
    ΔΔ[Cr.ΔⲆⲆΔⵠΔΔ] = [];
    ΔΔ[Cr.ΔⲆⲆΔⵠΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆΔⲆⵠⵠΔ;
    ΔΔ[Cr.ΔⲆⲆΔⵠΔΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔᐃᐃΔⲆᐃ;
    ΔΔ[Cr.ⵠᐃⵠΔⵠᐃⵠ] = [];
    ΔΔ[Cr.ⵠᐃⵠΔⵠᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠᐃⵠⵠⵠΔ;
    ΔΔ[Cr.ⵠᐃⵠΔⵠᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⲆᐃⵠⲆ;
    ΔΔ[Cr.ⲆΔⵠᐃᐃ] = [];
    ΔΔ[Cr.ⲆΔⵠᐃᐃ][Cr.ⵠⵠΔ] = [Δᐃ.ⵠⵠⵠⲆⵠΔⵠ];
    ΔΔ[Cr.ⲆΔⵠᐃᐃ][Cr.ΔΔⵠ] = [Δᐃ.ⲆᐃΔΔⲆⵠΔ];
    ΔΔ[Cr.ⲆⲆᐃⲆᐃ] = [];
    ΔΔ[Cr.ⲆⲆᐃⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⵠᐃᐃⵠⲆ;
    ΔΔ[Cr.ⲆⲆᐃⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠⵠⵠΔ;
    ΔΔ[Cr.ᐃᐃⵠΔⵠ] = [];
    ΔΔ[Cr.ᐃᐃⵠΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆⲆⵠⵠⵠ;
    ΔΔ[Cr.ᐃᐃⵠΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠⵠⵠⵠ;
    ΔΔ[Cr.ⲆⲆΔᐃⲆ] = [];
    ΔΔ[Cr.ⲆⲆΔᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆⲆⵠⲆΔ;
    ΔΔ[Cr.ⲆⲆΔᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⵠⲆⲆΔⲆ;
    ΔΔ[Cr.ᐃⵠᐃΔⲆ] = [];
    ΔΔ[Cr.ᐃⵠᐃΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠᐃⵠⵠⲆᐃ;
    ΔΔ[Cr.ᐃⵠᐃΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆᐃⵠᐃⲆⲆ;
    ΔΔ[Cr.ᐃⵠⲆⵠⵠ] = [];
    ΔΔ[Cr.ᐃⵠⲆⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⲆⲆⲆΔⵠ;
    ΔΔ[Cr.ᐃⵠⲆⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔⵠΔⵠⵠᐃ;
    ΔΔ[Cr.ⵠΔⲆⵠᐃ] = [];
    ΔΔ[Cr.ⵠΔⲆⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆΔΔⲆⲆᐃ;
    ΔΔ[Cr.ⵠΔⲆⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠⲆⵠᐃᐃ;
    ΔΔ[Cr.ΔⵠⲆⵠΔ] = [];
    ΔΔ[Cr.ΔⵠⲆⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⵠⲆⵠⲆⵠ;
    ΔΔ[Cr.ΔⵠⲆⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃⲆⲆⲆΔ;
    ΔΔ[Cr.ΔⵠⲆⵠⲆ] = [];
    ΔΔ[Cr.ΔⵠⲆⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠᐃΔⵠⵠΔ;
    ΔΔ[Cr.ΔⵠⲆⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃⲆᐃᐃᐃ;
    ΔΔ[Cr.ⲆΔⵠⵠᐃ] = [];
    ΔΔ[Cr.ⲆΔⵠⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠⵠΔⲆⲆᐃ;
    ΔΔ[Cr.ⲆΔⵠⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠⲆⵠᐃΔⲆ;
    ΔΔ[Cr.ΔΔⵠᐃΔⲆΔ] = [];
    ΔΔ[Cr.ΔΔⵠᐃΔⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⵠᐃⲆΔⲆ;
    ΔΔ[Cr.ΔΔⵠᐃΔⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⲆᐃⲆᐃⲆ;
    ΔΔ[Cr.ⵠᐃᐃⲆⲆⲆᐃ] = [];
    ΔΔ[Cr.ⵠᐃᐃⲆⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆΔᐃᐃΔⲆ;
    ΔΔ[Cr.ⵠᐃᐃⲆⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔΔᐃⲆⲆᐃΔ;
    ΔΔ[Cr.ⵠΔᐃⵠᐃ] = [];
    ΔΔ[Cr.ⵠΔᐃⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆΔΔⵠΔᐃ;
    ΔΔ[Cr.ⵠΔᐃⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆΔᐃΔⲆᐃ;
    ΔΔ[Cr.ᐃⲆⵠⲆΔⲆᐃ] = Δᐃ.ᐃⲆⵠⲆΔⲆᐃ;
    ΔΔ[Cr.ΔΔⲆⵠⵠⵠⲆ] = Δᐃ.ΔΔⲆⵠⵠⵠⲆ;
    ΔΔ[Cr.ΔΔΔᐃΔ] = [];
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃⲆΔⲆⲆᐃ);
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠᐃᐃⲆΔᐃⵠ);
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ΔⵠᐃⵠΔΔΔ);
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ΔⲆᐃⵠᐃΔΔ);
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ΔⵠⲆᐃⲆᐃⲆ);
    ΔΔ[Cr.ΔΔΔᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ⲆΔᐃⲆᐃΔΔ);
    ΔΔ[Cr.ⵠΔΔΔᐃ] = [];
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃⲆⵠⲆΔᐃ);
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⵠⵠⲆⲆⲆᐃ);
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃᐃⲆΔⲆᐃⵠ);
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ⲆΔⵠⵠⵠⲆⵠ);
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ΔⲆⲆⲆΔⲆΔ);
    ΔΔ[Cr.ⵠΔΔΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ⵠᐃⵠΔⵠⵠⵠ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ] = [];
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃⵠⵠⲆⲆΔ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠΔⵠⵠᐃᐃΔ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃⲆⵠΔⵠⲆ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ΔⲆⵠᐃⵠⲆⵠ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆⵠⲆΔⲆⲆⵠ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ⲆΔⲆⲆⲆΔᐃ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ⵠⲆⵠⲆᐃᐃΔ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ᐃΔⵠᐃⵠⵠⲆ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ⵠΔᐃⲆⵠⲆⵠ);
    ΔΔ[Cr.ⲆᐃⵠᐃΔ][Cr.ΔΔⵠ].push(Δᐃ.ᐃⵠⲆΔᐃⲆᐃ);
    ΔΔ[Cr.Δⵠᐃⵠᐃ] = [];
    ΔΔ[Cr.Δⵠᐃⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆᐃⲆⵠⲆ;
    ΔΔ[Cr.Δⵠᐃⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠΔᐃⲆⲆᐃ;
    ΔΔ[Cr.ⵠᐃΔᐃᐃⵠΔ] = [];
    ΔΔ[Cr.ⵠᐃΔᐃᐃⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⵠᐃⲆⲆΔ;
    ΔΔ[Cr.ⵠᐃΔᐃᐃⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔᐃⲆⲆΔ;
    ΔΔ[Cr.ΔᐃⲆⲆⵠⲆᐃ] = [];
    ΔΔ[Cr.ΔᐃⲆⲆⵠⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃᐃΔⲆⵠⵠ;
    ΔΔ[Cr.ΔᐃⲆⲆⵠⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔⵠΔᐃᐃⲆ;
    ΔΔ[Cr.ΔΔΔᐃΔᐃⲆ] = Δᐃ.ΔΔΔᐃΔᐃⲆ;
    ΔΔ[Cr.ᐃⵠᐃⲆΔⵠⲆ] = Δᐃ.ᐃⵠᐃⲆΔⵠⲆ;
    ΔΔ[Cr.ᐃⲆⲆⲆⲆΔⵠ] = Δᐃ.ᐃⲆⲆⲆⲆΔⵠ;
    ΔΔ[Cr.ᐃⵠΔΔᐃ] = [];
    ΔΔ[Cr.ᐃⵠΔΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⲆᐃΔᐃᐃ;
    ΔΔ[Cr.ᐃⵠΔΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃᐃᐃᐃⵠΔ;
    ΔΔ[Cr.ⵠⲆⲆᐃΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⵠⲆᐃᐃᐃ;
    ΔΔ[Cr.ⵠⲆⲆᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔⲆΔⲆⲆⲆ;
    ΔΔ[Cr.ⵠⲆⵠᐃⲆ] = [];
    ΔΔ[Cr.ⵠⲆⵠᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃⲆⵠΔⵠΔ;
    ΔΔ[Cr.ⵠⲆⵠᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔΔⵠΔⲆⲆᐃ;
    ΔΔ[Cr.ΔⵠⲆⲆᐃⲆΔ] = [];
    ΔΔ[Cr.ΔⵠⲆⲆᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⵠⲆᐃᐃᐃ;
    ΔΔ[Cr.ΔⵠⲆⲆᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔⲆΔⲆⲆⲆ;
    ΔΔ[Cr.ⲆΔⲆⲆᐃ] = [];
    ΔΔ[Cr.ⲆΔⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔΔᐃⵠⵠ;
    ΔΔ[Cr.ⲆΔⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠⵠΔᐃΔⲆ;
    ΔΔ[Cr.ⵠΔⲆΔᐃ] = [];
    ΔΔ[Cr.ⵠΔⲆΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔⵠΔⲆΔΔ;
    ΔΔ[Cr.ⵠΔⲆΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠᐃⵠᐃᐃⵠ;
    ΔΔ[Cr.ᐃΔⵠᐃⵠ] = [];
    ΔΔ[Cr.ᐃΔⵠᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠⵠⲆᐃᐃΔ;
    ΔΔ[Cr.ᐃΔⵠᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔᐃΔᐃΔ;
    ΔΔ[Cr.ΔᐃᐃⲆΔ] = [];
    ΔΔ[Cr.ΔᐃᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆⵠⵠᐃᐃ;
    ΔΔ[Cr.ΔᐃᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔᐃᐃⲆⲆ;
    ΔΔ[Cr.ⵠⲆⲆⵠⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔᐃⵠⵠΔΔ;
    ΔΔ[Cr.ⵠⲆⲆⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⲆᐃΔΔⵠ;
    ΔΔ[Cr.ⵠⵠⵠᐃᐃ] = [];
    ΔΔ[Cr.ⵠⵠⵠᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔᐃⵠⵠΔΔ;
    ΔΔ[Cr.ⵠⵠⵠᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆΔᐃᐃⲆⲆ;
    ΔΔ[Cr.ᐃⵠⲆⲆⲆ] = [];
    ΔΔ[Cr.ᐃⵠⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⲆⲆᐃᐃᐃ;
    ΔΔ[Cr.ᐃⵠⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠᐃᐃΔⲆⵠ;
    ΔΔ[Cr.ᐃᐃⲆⵠⲆ] = [];
    ΔΔ[Cr.ᐃᐃⲆⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆΔⵠΔΔ;
    ΔΔ[Cr.ᐃᐃⲆⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⵠΔⲆΔ;
    ΔΔ[Cr.ᐃΔᐃⲆΔ] = [];
    ΔΔ[Cr.ᐃΔᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔᐃᐃΔⲆⵠ;
    ΔΔ[Cr.ᐃΔᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔⲆⵠⵠⵠᐃ;
    ΔΔ[Cr.ΔⲆΔᐃΔ] = [];
    ΔΔ[Cr.ΔⲆΔᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔⲆⲆΔᐃ;
    ΔΔ[Cr.ΔⲆΔᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆⲆᐃⵠⲆΔ;
    ΔΔ[Cr.ⵠΔⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠΔⵠⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃΔⵠⵠⵠⲆ;
    ΔΔ[Cr.ⵠΔⵠⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⵠⲆⲆᐃⲆ;
    ΔΔ[Cr.ΔΔⲆΔΔ] = [];
    ΔΔ[Cr.ΔΔⲆΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⵠⵠᐃΔΔⵠ;
    ΔΔ[Cr.ΔΔⲆΔΔ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠΔΔⲆᐃⵠ;
    ΔΔ[Cr.ⵠⲆⵠⲆⵠ] = [];
    ΔΔ[Cr.ⵠⲆⵠⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆⵠᐃᐃΔ;
    ΔΔ[Cr.ⵠⲆⵠⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⵠⵠⲆⲆⲆ;
    ΔΔ[Cr.Δᐃᐃᐃᐃ] = [];
    ΔΔ[Cr.Δᐃᐃᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆΔΔⲆⵠ;
    ΔΔ[Cr.Δᐃᐃᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃⵠΔⲆⲆⵠ;
    ΔΔ[Cr.ⵠⵠΔΔΔ] = [];
    ΔΔ[Cr.ⵠⵠΔΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⵠⵠⵠⲆⵠᐃ;
    ΔΔ[Cr.ⵠⵠΔΔΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⲆⲆΔⲆⲆ;
    ΔΔ[Cr.ᐃⵠⵠᐃⵠ] = [];
    ΔΔ[Cr.ᐃⵠⵠᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔⲆⵠᐃᐃ;
    ΔΔ[Cr.ᐃⵠⵠᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⲆᐃᐃΔᐃ;
    ΔΔ[Cr.ⵠⲆⲆⲆΔ] = [];
    ΔΔ[Cr.ⵠⲆⲆⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠⲆΔΔⲆΔ;
    ΔΔ[Cr.ⵠⲆⲆⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆⵠⲆⵠⵠⲆ;
    ΔΔ[Cr.ⲆᐃΔΔᐃ] = [];
    ΔΔ[Cr.ⲆᐃΔΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃⲆⵠⵠΔΔ;
    ΔΔ[Cr.ⲆᐃΔΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃⲆⲆⵠᐃⵠ;
    ΔΔ[Cr.ⵠᐃⲆⲆᐃ] = [];
    ΔΔ[Cr.ⵠᐃⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔΔΔΔⲆⲆ;
    ΔΔ[Cr.ⵠᐃⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆΔⵠᐃⲆⵠ;
    ΔΔ[Cr.ᐃⵠᐃⲆⲆ] = [];
    ΔΔ[Cr.ᐃⵠᐃⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃΔΔⵠᐃᐃ;
    ΔΔ[Cr.ᐃⵠᐃⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⲆᐃΔΔⲆ;
    ΔΔ[Cr.ⵠⲆⵠΔᐃ] = [];
    ΔΔ[Cr.ⵠⲆⵠΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆⵠᐃⲆⲆΔ;
    ΔΔ[Cr.ⵠⲆⵠΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⵠⵠᐃΔⵠ;
    ΔΔ[Cr.ⵠᐃᐃⲆᐃ] = [];
    ΔΔ[Cr.ⵠᐃᐃⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆⲆⲆᐃΔΔ;
    ΔΔ[Cr.ⵠᐃᐃⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆᐃⵠⲆⵠΔ;
    ΔΔ[Cr.ⲆΔᐃⵠⲆ] = [];
    ΔΔ[Cr.ⲆΔᐃⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔᐃⵠᐃᐃⲆ;
    ΔΔ[Cr.ⲆΔᐃⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃΔⵠⲆᐃⵠ;
    ΔΔ[Cr.ᐃᐃᐃΔⲆ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⵠᐃᐃΔᐃ;
    ΔΔ[Cr.ᐃᐃᐃΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⵠΔΔⵠⲆ;
    ΔΔ[Cr.ΔⲆᐃᐃᐃ] = [];
    ΔΔ[Cr.ΔⲆᐃᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃᐃⲆΔⵠⲆ;
    ΔΔ[Cr.ΔⲆᐃᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔΔᐃⵠᐃΔ;
    ΔΔ[Cr.ᐃΔΔⲆᐃ] = [];
    ΔΔ[Cr.ᐃΔΔⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆⵠΔⵠΔᐃ;
    ΔΔ[Cr.ᐃΔΔⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔΔⲆΔᐃᐃ;
    ΔΔ[Cr.ΔᐃⲆⲆⲆ] = [];
    ΔΔ[Cr.ΔᐃⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⵠⵠⵠⲆΔ;
    ΔΔ[Cr.ΔᐃⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⵠΔⲆⵠᐃ;
    ΔΔ[Cr.ᐃΔⲆⲆⲆ] = [];
    ΔΔ[Cr.ᐃΔⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔⵠΔΔⵠⵠ;
    ΔΔ[Cr.ᐃΔⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃⵠⵠⵠⵠᐃ;
    ΔΔ[Cr.Ⲇⵠᐃᐃⵠ] = [];
    ΔΔ[Cr.Ⲇⵠᐃᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃΔΔΔᐃⵠ;
    ΔΔ[Cr.Ⲇⵠᐃᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔᐃⵠⲆᐃⵠ;
    ΔΔ[Cr.ⵠᐃᐃᐃΔ] = [];
    ΔΔ[Cr.ⵠᐃᐃᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔⲆᐃⵠᐃᐃ;
    ΔΔ[Cr.ⵠᐃᐃᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆΔΔⲆⲆⲆ;
    ΔΔ[Cr.ⲆΔⲆⲆⲆ] = [];
    ΔΔ[Cr.ⲆΔⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠΔⲆⲆⲆᐃ;
    ΔΔ[Cr.ⲆΔⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠᐃΔᐃⵠ;
    ΔΔ[Cr.ΔⵠⲆᐃⲆ] = [];
    ΔΔ[Cr.ΔⵠⲆᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃᐃⲆΔᐃⲆ;
    ΔΔ[Cr.ΔⵠⲆᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆᐃⵠΔⵠᐃ;
    ΔΔ[Cr.ΔΔΔᐃⵠ] = [];
    ΔΔ[Cr.ΔΔΔᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ;
    ΔΔ[Cr.ΔΔΔᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔΔⲆⲆⲆⵠⲆ;
    ΔΔ[Cr.ΔᐃΔⲆⲆ] = [];
    ΔΔ[Cr.ΔᐃΔⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃⲆⵠΔΔᐃ;
    ΔΔ[Cr.ΔᐃΔⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆᐃΔⲆⵠⵠ;
    ΔΔ[Cr.ⲆᐃⲆⲆⲆ] = [];
    ΔΔ[Cr.ⲆᐃⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⵠⵠⲆⲆᐃ;
    ΔΔ[Cr.ⲆᐃⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⵠΔⲆⲆΔ;
    ΔΔ[Cr.ⵠᐃⵠⲆⲆ] = [];
    ΔΔ[Cr.ⵠᐃⵠⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔⲆΔⲆᐃⵠ;
    ΔΔ[Cr.ⵠᐃⵠⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠᐃᐃⲆΔΔ;
    ΔΔ[Cr.ⵠⲆΔⲆΔ] = [];
    ΔΔ[Cr.ⵠⲆΔⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⵠᐃⵠⵠⵠ;
    ΔΔ[Cr.ⵠⲆΔⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⵠⲆⲆⲆⲆ;
    ΔΔ[Cr.ΔΔⵠᐃᐃΔΔ] = [];
    ΔΔ[Cr.ΔΔⵠᐃᐃΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃᐃⲆᐃΔᐃ;
    ΔΔ[Cr.ΔΔⵠᐃᐃΔΔ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⵠᐃⵠΔᐃ;
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ] = [];
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠⵠⵠⲆᐃΔΔⲆⲆ);
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆⵠᐃΔᐃᐃΔΔᐃ);
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ΔΔⵠ].push(Δᐃ.ⲆⵠᐃΔᐃᐃΔΔᐃ);
    ΔΔ[Cr.ⵠⵠⵠⲆⵠⲆⲆ][Cr.ΔΔⵠ].push(Δᐃ.ΔᐃᐃⵠⵠᐃᐃΔΔ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ] = [];
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃᐃⲆᐃᐃΔⵠ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ΔᐃᐃΔⵠᐃⵠ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⲆᐃᐃΔⲆⲆ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ⲆⵠᐃΔᐃⵠⲆ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ᐃⲆⵠᐃΔⲆᐃ);
    ΔΔ[Cr.ᐃⵠⲆΔᐃ][Cr.ΔΔⵠ].push(Δᐃ.ΔΔⵠⲆⵠᐃⵠ);
    ΔΔ[Cr.ᐃⲆⵠⲆᐃ] = [];
    ΔΔ[Cr.ᐃⲆⵠⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃⵠᐃᐃΔΔ;
    ΔΔ[Cr.ᐃⲆⵠⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆⲆᐃΔΔΔ;
    ΔΔ[Cr.ΔΔΔⲆᐃ] = [];
    ΔΔ[Cr.ΔΔΔⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃⲆⲆⵠᐃᐃ;
    ΔΔ[Cr.ΔΔΔⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⲆⲆᐃᐃΔ;
    ΔΔ[Cr.ΔⵠΔⲆΔ] = [];
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⵠⵠⵠⵠⵠⵠ);
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ⵠⵠΔ].push(Δᐃ.ΔΔΔᐃᐃⲆⲆ);
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃᐃᐃⵠΔΔΔ);
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ΔΔⵠ].push(Δᐃ.ⲆⵠᐃᐃᐃⵠⲆ);
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ΔΔⵠ].push(Δᐃ.ⲆᐃᐃⵠⲆᐃΔ);
    ΔΔ[Cr.ΔⵠΔⲆΔ][Cr.ΔΔⵠ].push(Δᐃ.ΔⵠΔⵠΔᐃᐃ);
    ΔΔ[Cr.ⵠⲆᐃⲆ] = [];
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠᐃⲆΔᐃΔⲆ);
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⵠⲆᐃΔᐃᐃ);
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ΔⵠΔᐃΔⵠᐃ);
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ΔΔⵠ].push(Δᐃ.ⵠᐃⲆⵠⵠᐃⵠ);
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ΔΔⵠ].push(Δᐃ.ΔΔⲆⵠⲆΔⵠ);
    ΔΔ[Cr.ⵠⲆᐃⲆ][Cr.ΔΔⵠ].push(Δᐃ.ΔΔⲆⲆⲆⲆᐃ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ] = [];
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⲆᐃᐃᐃΔⲆ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠᐃᐃᐃᐃΔᐃ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ΔⵠᐃⵠᐃⲆΔ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠⵠⵠⵠⵠᐃⵠ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃᐃᐃᐃΔⵠ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⲆΔᐃΔᐃΔ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ΔⲆᐃⲆᐃᐃᐃ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ⵠⲆⲆᐃᐃΔᐃ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ⵠⲆⲆⵠⲆⵠⲆ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ᐃᐃΔⲆᐃᐃᐃ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ΔᐃΔⲆⵠⲆⲆ);
    ΔΔ[Cr.ⲆⲆΔΔⲆ][Cr.ΔΔⵠ].push(Δᐃ.ⲆᐃΔⲆᐃⲆⵠ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ] = [];
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆⲆⵠᐃⵠᐃᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ΔΔᐃⵠᐃⵠᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃΔᐃΔⵠⲆΔ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ΔⲆΔᐃⵠᐃᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆⲆᐃⵠⲆⵠᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ⵠⵠΔⲆⵠΔⲆ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ᐃΔⵠⲆⲆΔⲆ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ᐃᐃⲆⲆΔⵠᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ᐃⵠⵠⵠⲆⵠⲆ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ⵠΔΔⵠᐃⲆΔ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ⲆΔⲆⵠΔⲆᐃ);
    ΔΔ[Cr.ᐃᐃⲆΔⵠ][Cr.ΔΔⵠ].push(Δᐃ.ⲆᐃⲆⲆΔᐃᐃ);
    ΔΔ[Cr.ⲆⵠΔΔᐃⲆΔ] = [];
    ΔΔ[Cr.ⲆⵠΔΔᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔᐃΔΔⲆ;
    ΔΔ[Cr.ⲆⵠΔΔᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⵠΔᐃΔᐃ;
    ΔΔ[Cr.ⲆΔⲆⲆⲆⵠⵠ] = Δᐃ.ⵠⲆⲆⲆⲆᐃⲆ;
    ΔΔ[Cr.ⲆΔⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆΔⵠⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔⲆᐃⲆⵠⵠ;
    ΔΔ[Cr.ⲆΔⵠⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⵠⲆΔΔΔ;
    ΔΔ[Cr.ⲆᐃⲆΔⵠ] = [];
    ΔΔ[Cr.ⲆᐃⲆΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔⲆΔᐃᐃΔ;
    ΔΔ[Cr.ⲆᐃⲆΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔΔⵠⲆⲆᐃ;
    ΔΔ[Cr.ᐃᐃⲆᐃⵠ] = [];
    ΔΔ[Cr.ᐃᐃⲆᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⲆᐃᐃᐃᐃ;
    ΔΔ[Cr.ᐃᐃⲆᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆⵠⲆⲆⲆΔ;
    ΔΔ[Cr.ᐃᐃⵠⲆⵠ] = [];
    ΔΔ[Cr.ᐃᐃⵠⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⲆᐃⲆⲆΔ;
    ΔΔ[Cr.ᐃᐃⵠⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⵠⲆΔⵠᐃ;
    ΔΔ[Cr.ΔΔⲆΔᐃ] = [];
    ΔΔ[Cr.ΔΔⲆΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⵠΔᐃᐃⲆ;
    ΔΔ[Cr.ΔΔⲆΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⲆⲆᐃⲆᐃ;
    ΔΔ[Cr.ΔᐃΔᐃᐃⲆᐃ] = Δᐃ.ΔᐃΔᐃᐃⲆᐃ;
    ΔΔ[Cr.ⵠⵠΔᐃⲆⵠΔ] = [];
    ΔΔ[Cr.ⵠⵠΔᐃⲆⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆᐃᐃⲆΔⵠ;
    ΔΔ[Cr.ⵠⵠΔᐃⲆⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆⵠⲆⵠᐃⵠ;
    ΔΔ[Cr.ᐃⲆᐃⵠⲆⵠⲆ] = [];
    ΔΔ[Cr.ᐃⲆᐃⵠⲆⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆΔⵠⲆΔᐃ;
    ΔΔ[Cr.ᐃⲆᐃⵠⲆⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆᐃⲆΔΔⵠ;
    ΔΔ[Cr.ⵠᐃᐃᐃΔⲆΔ] = Δᐃ.ⵠᐃᐃᐃΔⲆΔ;
    ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆⲆ] = Δᐃ.ⲆᐃⲆᐃᐃⲆⲆ;
    ΔΔ[Cr.Δᐃᐃⵠᐃᐃᐃ] = Δᐃ.Δᐃᐃⵠᐃᐃᐃ;
    ΔΔ[Cr.ⵠᐃⲆᐃⵠᐃᐃ] = [];
    ΔΔ[Cr.ⵠᐃⲆᐃⵠᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⵠΔΔⵠⲆ;
    ΔΔ[Cr.ⵠᐃⲆᐃⵠᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆⲆⵠΔⲆ;
    ΔΔ[Cr.ⲆᐃΔⲆᐃᐃⲆ] = [];
    ΔΔ[Cr.ⲆᐃΔⲆᐃᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃᐃⲆΔΔᐃ;
    ΔΔ[Cr.ⲆᐃΔⲆᐃᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠⲆⲆⵠⵠⵠ;
    ΔΔ[Cr.ⲆΔΔᐃᐃⲆⵠ] = [];
    ΔΔ[Cr.ⲆΔΔᐃᐃⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃΔΔᐃⲆᐃ;
    ΔΔ[Cr.ⲆΔΔᐃᐃⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠᐃⲆΔΔⵠ;
    ΔΔ[Cr.ᐃᐃᐃⵠΔⲆΔ] = Δᐃ.ᐃᐃᐃⵠΔⲆΔ;
    ΔΔ[Cr.ⲆⲆⵠᐃᐃᐃΔ] = Δᐃ.ⲆⲆⵠᐃᐃᐃΔ;
    ΔΔ[Cr.ᐃⵠⲆⵠΔΔⲆ] = Δᐃ.ᐃⵠⲆⵠΔΔⲆ;
    ΔΔ[Cr.ᐃᐃᐃⲆⵠᐃΔ] = [];
    ΔΔ[Cr.ᐃᐃᐃⲆⵠᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⲆⲆΔΔⲆ;
    ΔΔ[Cr.ᐃᐃᐃⲆⵠᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔΔΔⲆΔⲆ;
    ΔΔ[Cr.ⵠᐃΔⵠᐃᐃⲆ] = [];
    ΔΔ[Cr.ⵠᐃΔⵠᐃᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃΔΔⵠΔᐃ;
    ΔΔ[Cr.ⵠᐃΔⵠᐃᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⵠⲆᐃⲆΔ;
    ΔΔ[Cr.ᐃᐃΔⵠᐃ] = [];
    ΔΔ[Cr.ᐃᐃΔⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔΔΔⵠΔΔ;
    ΔΔ[Cr.ᐃᐃΔⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔΔⵠΔⲆⲆⲆ;
    ΔΔ[Cr.ΔⲆᐃΔΔⵠᐃ] = [];
    ΔΔ[Cr.ΔⲆᐃΔΔⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆᐃᐃΔⲆⵠ;
    ΔΔ[Cr.ΔⲆᐃΔΔⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⵠⵠⲆⲆⵠ;
    ΔΔ[Cr.ᐃᐃᐃⵠᐃᐃΔ] = [];
    ΔΔ[Cr.ᐃᐃᐃⵠᐃᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⲆⵠᐃⵠⲆ;
    ΔΔ[Cr.ᐃᐃᐃⵠᐃᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⲆᐃⲆⲆⲆ;
    ΔΔ[Cr.ⲆΔᐃⵠᐃᐃⵠ] = [];
    ΔΔ[Cr.ⲆΔᐃⵠᐃᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⲆΔΔⲆᐃ;
    ΔΔ[Cr.ⲆΔᐃⵠᐃᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆᐃᐃⲆⵠᐃ;
    ΔΔ[Cr.ΔⵠᐃⲆⵠⵠΔ] = [];
    ΔΔ[Cr.ΔⵠᐃⲆⵠⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔΔⲆⵠⵠⵠ;
    ΔΔ[Cr.ΔⵠᐃⲆⵠⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠⲆⲆᐃⵠⲆ;
    ΔΔ[Cr.ⲆᐃᐃΔᐃᐃⵠ] = Δᐃ.ⲆᐃᐃΔᐃᐃⵠ;
    ΔΔ[Cr.ᐃⵠⲆⵠⲆΔⵠ] = Δᐃ.ᐃⵠⲆⵠⲆΔⵠ;
    ΔΔ[Cr.ⲆᐃΔⲆⲆⲆΔ] = Δᐃ.ⲆᐃΔⲆⲆⲆΔ;
    ΔΔ[Cr.ΔⵠᐃⲆⵠΔⲆ] = Δᐃ.ΔⵠᐃⲆⵠΔⲆ;
    ΔΔ[Cr.ⵠᐃᐃᐃⲆⵠᐃ] = Δᐃ.ⵠᐃᐃᐃⲆⵠᐃ;
    ΔΔ[Cr.ᐃᐃⲆᐃⵠⲆΔ] = Δᐃ.ᐃᐃⲆᐃⵠⲆΔ;
    ΔΔ[Cr.ΔⲆΔΔᐃⵠⲆ] = [];
    ΔΔ[Cr.ΔⲆΔΔᐃⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃⵠⲆⵠΔⵠ;
    ΔΔ[Cr.ΔⲆΔΔᐃⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃⲆⲆΔ;
    ΔΔ[Cr.ⵠΔⵠΔΔ] = [];
    ΔΔ[Cr.ⵠΔⵠΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔᐃΔᐃⲆⲆ;
    ΔΔ[Cr.ⵠΔⵠΔΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆΔΔⵠⲆⵠ;
    ΔΔ[Cr.ⲆⵠᐃⲆⵠ] = [];
    ΔΔ[Cr.ⲆⵠᐃⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔᐃⵠΔⲆΔ;
    ΔΔ[Cr.ⲆⵠᐃⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⵠᐃⵠⵠⲆ;
    ΔΔ[Cr.ⵠⵠⵠⵠᐃⲆⵠ] = [];
    ΔΔ[Cr.ⵠⵠⵠⵠᐃⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔⵠⲆⲆΔⵠ;
    ΔΔ[Cr.ⵠⵠⵠⵠᐃⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔΔΔᐃⲆᐃ;
    ΔΔ[Cr.ⲆΔᐃⲆΔᐃΔ] = Δᐃ.ⲆΔᐃⲆΔᐃΔ;
    ΔΔ[Cr.ⲆⵠΔᐃⲆⲆⵠ] = Δᐃ.ⲆⵠΔᐃⲆⲆⵠ;
    ΔΔ[Cr.ΔⵠᐃⵠⲆⵠᐃ] = [];
    ΔΔ[Cr.ΔⵠᐃⵠⲆⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⵠⵠⵠⲆⲆΔ;
    ΔΔ[Cr.ΔⵠᐃⵠⲆⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠΔᐃᐃΔ;
    ΔΔ[Cr.ⲆΔⵠⵠⵠ] = [];
    ΔΔ[Cr.ⲆΔⵠⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔᐃᐃᐃᐃΔ;
    ΔΔ[Cr.ⲆΔⵠⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃΔⵠⵠⵠᐃ;
    ΔΔ[Cr.ⲆᐃⲆⵠᐃΔᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆⵠᐃΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⲆⵠⲆⵠⲆ;
    ΔΔ[Cr.ⲆᐃⲆⵠᐃΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃΔⵠᐃΔⲆ;
    ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⲆ] = [];
    ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔΔⵠᐃᐃᐃ;
    ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔΔᐃⵠⲆⵠΔ;
    ΔΔ[Cr.ΔΔⵠⵠᐃΔⵠ] = [];
    ΔΔ[Cr.ΔΔⵠⵠᐃΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆΔⵠΔᐃᐃ;
    ΔΔ[Cr.ΔΔⵠⵠᐃΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⲆΔᐃⵠⵠ;
    ΔΔ[Cr.ᐃⲆⲆΔⵠΔᐃ] = [];
    ΔΔ[Cr.ᐃⲆⲆΔⵠΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⲆᐃⵠⲆᐃ;
    ΔΔ[Cr.ᐃⲆⲆΔⵠΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠΔΔⵠⲆᐃ;
    ΔΔ[Cr.ⲆⲆⵠⲆΔΔᐃ] = [];
    ΔΔ[Cr.ⲆⲆⵠⲆΔΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃΔΔᐃⵠᐃ;
    ΔΔ[Cr.ⲆⲆⵠⲆΔΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆΔᐃΔⵠΔ;
    ΔΔ[Cr.ⲆᐃⲆΔᐃⵠΔ] = [];
    ΔΔ[Cr.ⲆᐃⲆΔᐃⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠⲆΔΔⲆⵠ;
    ΔΔ[Cr.ⲆᐃⲆΔᐃⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠΔᐃⵠᐃᐃ;
    ΔΔ[Cr.ⲆⲆΔⵠⵠⵠⵠ] = [];
    ΔΔ[Cr.ⲆⲆΔⵠⵠⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃΔᐃⲆⲆⵠ;
    ΔΔ[Cr.ⲆⲆΔⵠⵠⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃΔΔᐃⲆΔ;
    ΔΔ[Cr.ⲆᐃⵠⵠΔⲆⲆ] = Δᐃ.ⲆᐃⵠⵠΔⲆⲆ;
    ΔΔ[Cr.ΔΔᐃⵠΔᐃⲆ] = Δᐃ.ΔΔᐃⵠΔᐃⲆ;
    ΔΔ[Cr.ΔⵠᐃⵠⲆᐃⲆ] = Δᐃ.ΔⵠᐃⵠⲆᐃⲆ;
    ΔΔ[Cr.ⵠⲆΔⵠᐃⲆⵠ] = [];
    ΔΔ[Cr.ⵠⲆΔⵠᐃⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆΔᐃⲆΔᐃ;
    ΔΔ[Cr.ⵠⲆΔⵠᐃⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆᐃⲆⲆΔⲆΔ;
    ΔΔ[Cr.ⵠⲆᐃⲆⵠ] = [];
    ΔΔ[Cr.ⵠⲆᐃⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃΔⵠⵠⵠⲆ;
    ΔΔ[Cr.ⵠⲆᐃⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⵠΔΔⲆΔ;
    ΔΔ[Cr.ⲆⲆΔⵠⲆⵠⵠ] = [];
    ΔΔ[Cr.ⲆⲆΔⵠⲆⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⲆⵠⵠⵠᐃ;
    ΔΔ[Cr.ⲆⲆΔⵠⲆⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.Δⵠⵠᐃⵠⵠᐃ;
    ΔΔ[Cr.ⵠⵠⲆΔᐃⵠⲆ] = [];
    ΔΔ[Cr.ⵠⵠⲆΔᐃⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆⲆⵠⵠΔ;
    ΔΔ[Cr.ⵠⵠⲆΔᐃⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃⵠⲆⵠΔⵠ;
    ΔΔ[Cr.ᐃᐃⵠⲆⵠⵠⵠ] = [];
    ΔΔ[Cr.ᐃᐃⵠⲆⵠⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆᐃⵠⲆⵠⵠ;
    ΔΔ[Cr.ᐃᐃⵠⲆⵠⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠΔⵠⵠᐃᐃ;
    ΔΔ[Cr.ⵠⵠᐃΔⵠⲆᐃ] = [];
    ΔΔ[Cr.ⵠⵠᐃΔⵠⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃⲆᐃⵠⵠⲆ;
    ΔΔ[Cr.ⵠⵠᐃΔⵠⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃᐃᐃᐃᐃΔ;
    ΔΔ[Cr.ΔⲆΔᐃᐃΔⲆ] = [];
    ΔΔ[Cr.ΔⲆΔᐃᐃΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⵠΔᐃᐃᐃ;
    ΔΔ[Cr.ΔⲆΔᐃᐃΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃⲆⵠⲆΔΔ;
    ΔΔ[Cr.ⲆΔⲆⲆᐃⵠΔ] = [];
    ΔΔ[Cr.ⲆΔⲆⲆᐃⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⲆⵠⵠⵠⵠ;
    ΔΔ[Cr.ⲆΔⲆⲆᐃⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ΔᐃⲆΔΔⲆⵠ;
    ΔΔ[Cr.ⵠΔΔΔᐃⲆΔ] = [];
    ΔΔ[Cr.ⵠΔΔΔᐃⲆΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⲆⵠⲆᐃᐃ;
    ΔΔ[Cr.ⵠΔΔΔᐃⲆΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⵠⵠⲆⵠⲆ;
    ΔΔ[Cr.ΔΔᐃⲆᐃⲆⵠ] = Δᐃ.ΔΔᐃⲆᐃⲆⵠ;
    ΔΔ[Cr.ⵠΔᐃᐃΔᐃⵠ] = Δᐃ.ⵠΔᐃᐃΔᐃⵠ;
    ΔΔ[Cr.ⵠⲆΔᐃΔⲆⲆ] = Δᐃ.ⵠⲆΔᐃΔⲆⲆ;
    ΔΔ[Cr.ⵠΔΔΔⲆᐃΔ] = [];
    ΔΔ[Cr.ⵠΔΔΔⲆᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔᐃΔⵠᐃΔ;
    ΔΔ[Cr.ⵠΔΔΔⲆᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔᐃᐃⵠⵠⲆ;
    ΔΔ[Cr.ΔⵠΔΔᐃ] = [];
    ΔΔ[Cr.ΔⵠΔΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⲆᐃⵠⵠᐃⲆ;
    ΔΔ[Cr.ΔⵠΔΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔⵠᐃᐃΔΔ;
    ΔΔ[Cr.ⲆⵠⵠⲆⲆⵠⵠ] = Δᐃ.ⲆⵠⵠⲆⲆⵠⵠ;
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃⲆ] = [];
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔⵠᐃⵠΔⲆ;
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃⵠⵠⲆⵠⲆ;
    ΔΔ[Cr.ᐃΔΔⲆⲆΔⵠ] = [];
    ΔΔ[Cr.ᐃΔΔⲆⲆΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆᐃⵠᐃⵠⵠ;
    ΔΔ[Cr.ᐃΔΔⲆⲆΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃⵠⵠᐃⲆΔ;
    ΔΔ[Cr.ⲆΔⲆⵠⲆⲆᐃ] = [];
    ΔΔ[Cr.ⲆΔⲆⵠⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔΔᐃⲆᐃΔ;
    ΔΔ[Cr.ⲆΔⲆⵠⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔᐃΔⵠᐃⵠ;
    ΔΔ[Cr.ΔⲆᐃⲆⲆᐃⲆ] = [];
    ΔΔ[Cr.ΔⲆᐃⲆⲆᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⵠⵠⲆⵠⵠ;
    ΔΔ[Cr.ΔⲆᐃⲆⲆᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔΔᐃᐃⵠⲆ;
    ΔΔ[Cr.ΔⵠᐃᐃΔⵠⵠ] = [];
    ΔΔ[Cr.ΔⵠᐃᐃΔⵠⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃᐃᐃᐃⵠᐃ;
    ΔΔ[Cr.ΔⵠᐃᐃΔⵠⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠᐃⵠᐃⵠΔ;
    ΔΔ[Cr.ⲆⲆᐃⲆⵠᐃᐃ] = [];
    ΔΔ[Cr.ⲆⲆᐃⲆⵠᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⵠⵠᐃⲆΔ;
    ΔΔ[Cr.ⲆⲆᐃⲆⵠᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆᐃΔΔᐃⵠⵠ;
    ΔΔ[Cr.ⵠⲆⵠᐃⵠΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆⵠᐃⵠΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⵠΔᐃⲆⲆ;
    ΔΔ[Cr.ⵠⲆⵠᐃⵠΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠΔΔᐃᐃⵠ;
    ΔΔ[Cr.ΔⵠⵠΔᐃᐃᐃ] = [];
    ΔΔ[Cr.ΔⵠⵠΔᐃᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⵠᐃᐃⵠⲆ;
    ΔΔ[Cr.ΔⵠⵠΔᐃᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠᐃᐃⲆⵠⵠ;
    ΔΔ[Cr.ᐃⵠᐃᐃⲆⵠⲆ] = [];
    ΔΔ[Cr.ᐃⵠᐃᐃⲆⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔⲆⲆⲆⵠⵠᐃ;
    ΔΔ[Cr.ᐃⵠᐃᐃⲆⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⲆⲆⲆΔΔ;
    ΔΔ[Cr.ⲆⲆΔΔⲆᐃΔ] = Δᐃ.ⲆⲆΔΔⲆᐃΔ;
    ΔΔ[Cr.ⵠⲆᐃⵠΔⲆⲆ] = Δᐃ.ⵠⲆᐃⵠΔⲆⲆ;
    ΔΔ[Cr.ⲆᐃⲆΔΔⵠΔ] = Δᐃ.ⲆᐃⲆΔΔⵠΔ;
    ΔΔ[Cr.ᐃⵠⵠᐃΔⵠⲆ] = [];
    ΔΔ[Cr.ᐃⵠⵠᐃΔⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔⵠΔⲆⵠΔᐃ;
    ΔΔ[Cr.ᐃⵠⵠᐃΔⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃᐃⵠΔᐃⵠ;
    ΔΔ[Cr.ⲆΔΔᐃΔ] = [];
    ΔΔ[Cr.ⲆΔΔᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃᐃᐃⵠⲆᐃ;
    ΔΔ[Cr.ⲆΔΔᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ⵠᐃΔΔΔⵠⲆ;
    ΔΔ[Cr.ⲆΔᐃΔⵠΔᐃ] = Δᐃ.ⲆΔᐃΔⵠΔᐃ;
    ΔΔ[Cr.ᐃⵠⲆᐃⲆⲆⵠ] = [];
    ΔΔ[Cr.ᐃⵠⲆᐃⲆⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔΔⲆᐃⲆⲆ;
    ΔΔ[Cr.ᐃⵠⲆᐃⲆⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆⵠⵠⲆᐃⵠⵠ;
    ΔΔ[Cr.ⲆⵠⲆⲆΔᐃᐃ] = [];
    ΔΔ[Cr.ⲆⵠⲆⲆΔᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃΔⲆⵠⲆⲆ;
    ΔΔ[Cr.ⲆⵠⲆⲆΔᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠⲆᐃⵠⵠᐃ;
    ΔΔ[Cr.ⵠᐃΔⲆⲆΔᐃ] = [];
    ΔΔ[Cr.ⵠᐃΔⲆⲆΔᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆΔⲆΔΔⲆ;
    ΔΔ[Cr.ⵠᐃΔⲆⲆΔᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆᐃᐃⵠⵠⲆᐃ;
    ΔΔ[Cr.ⵠⲆⲆⲆⲆΔⵠ] = [];
    ΔΔ[Cr.ⵠⲆⲆⲆⲆΔⵠ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃᐃⲆⲆᐃⲆ;
    ΔΔ[Cr.ⵠⲆⲆⲆⲆΔⵠ][Cr.ΔΔⵠ] = Δᐃ.ᐃΔᐃΔⵠⵠⲆ;
    ΔΔ[Cr.ⲆᐃⲆⵠΔᐃᐃ] = [];
    ΔΔ[Cr.ⲆᐃⲆⵠΔᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⵠΔⲆⵠⵠᐃΔ;
    ΔΔ[Cr.ⲆᐃⲆⵠΔᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⵠⵠΔⲆΔᐃΔ;
    ΔΔ[Cr.ⵠⲆΔⲆᐃᐃᐃ] = [];
    ΔΔ[Cr.ⵠⲆΔⲆᐃᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆⲆᐃⲆⵠ;
    ΔΔ[Cr.ⵠⲆΔⲆᐃᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⲆᐃⲆⲆⲆ;
    ΔΔ[Cr.ᐃᐃΔΔⵠⵠⲆ] = [];
    ΔΔ[Cr.ᐃᐃΔΔⵠⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆⲆⵠΔΔΔ;
    ΔΔ[Cr.ᐃᐃΔΔⵠⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ᐃⵠᐃᐃᐃΔΔ;
    ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⲆ] = [];
    ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃᐃᐃΔⲆΔ;
    ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⲆⲆⵠΔⵠⵠ;
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃΔ] = [];
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔᐃⲆⵠΔⵠ;
    ΔΔ[Cr.ⵠⲆΔⵠΔᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃᐃᐃⲆⵠᐃ;
    ΔΔ[Cr.ᐃᐃᐃᐃⲆᐃᐃ] = Δᐃ.ᐃᐃᐃᐃⲆᐃᐃ;
    ΔΔ[Cr.ᐃᐃᐃᐃᐃⲆⲆ] = Δᐃ.ᐃᐃᐃᐃᐃⲆⲆ;
    ΔΔ[Cr.ΔⲆⲆⲆⵠⲆⵠ] = Δᐃ.ΔⲆⲆⲆⵠⲆⵠ;
    ΔΔ[Cr.ⵠᐃᐃⲆⲆ] = [];
    ΔΔ[Cr.ⵠᐃᐃⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔᐃⲆⲆⵠΔ;
    ΔΔ[Cr.ⵠᐃᐃⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆᐃᐃⲆⲆΔ;
    ΔΔ[Cr.ᐃⵠΔΔⲆⲆⵠ] = [];
    ΔΔ[Cr.ᐃⵠΔΔⲆⲆⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠᐃΔᐃⵠΔⲆ;
    ΔΔ[Cr.ᐃⵠΔΔⲆⲆⵠ][Cr.ΔΔⵠ] = Δᐃ.ⲆᐃⵠᐃⵠΔΔ;
    ΔΔ[Cr.ⲆⲆΔᐃⵠΔΔ] = [];
    ΔΔ[Cr.ⲆⲆΔᐃⵠΔΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃΔᐃⲆⵠΔΔ;
    ΔΔ[Cr.ⲆⲆΔᐃⵠΔΔ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔᐃΔⵠⵠ;
    ΔΔ[Cr.ᐃⲆⲆᐃᐃⵠΔ] = [];
    ΔΔ[Cr.ᐃⲆⲆᐃᐃⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆᐃᐃⵠΔ;
    ΔΔ[Cr.ᐃⲆⲆᐃᐃⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃⲆⲆᐃᐃⵠΔ;
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃᐃ] = [];
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆⵠⵠⲆᐃᐃ;
    ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ⲆⲆⵠⵠⲆᐃᐃ;
    ΔΔ[Cr.ᐃᐃΔⲆΔᐃᐃ] = [];
    ΔΔ[Cr.ᐃᐃΔⲆΔᐃᐃ][Cr.ⵠⵠΔ] = Δᐃ.ᐃᐃΔⲆΔᐃᐃ;
    ΔΔ[Cr.ᐃᐃΔⲆΔᐃᐃ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃΔⲆΔᐃᐃ;
    ΔΔ[Cr.ⲆⲆⵠⵠⵠᐃⲆ] = Δᐃ.ⲆⲆⵠⵠⵠᐃⲆ;
    ΔΔ[Cr.ⲆΔᐃⵠᐃ] = [];
    ΔΔ[Cr.ⲆΔᐃⵠᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆⲆᐃᐃΔⵠΔ;
    ΔΔ[Cr.ⲆΔᐃⵠᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔⲆᐃⵠⵠ;
    ΔΔ[Cr.ᐃᐃⵠᐃⲆ] = [];
    ΔΔ[Cr.ᐃᐃⵠᐃⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔΔⵠΔΔⲆⵠ;
    ΔΔ[Cr.ᐃᐃⵠᐃⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠᐃΔⵠᐃⲆ;
    ΔΔ[Cr.ᐃᐃⵠᐃᐃ] = [];
    ΔΔ[Cr.ᐃᐃⵠᐃᐃ][Cr.ⵠⵠΔ] = [Δᐃ.ⲆΔᐃΔᐃⲆⵠ, Δᐃ.ΔΔᐃᐃΔⵠᐃ, Δᐃ.ⵠⲆⵠᐃⲆⲆΔ, Δᐃ.ΔΔᐃⵠᐃᐃⲆ, Δᐃ.ΔᐃᐃⲆΔⵠⲆ, Δᐃ.ᐃⲆⵠⵠⵠⲆΔ, Δᐃ.ᐃᐃΔΔΔᐃⵠ, Δᐃ.ⲆⵠΔⲆⲆⲆᐃ, Δᐃ.ⲆᐃⵠⲆᐃⲆᐃ];
    ΔΔ[Cr.ᐃᐃⵠᐃᐃ][Cr.ΔΔⵠ] = [Δᐃ.ⲆᐃⲆⲆⵠⵠⲆ, Δᐃ.ⵠⲆⵠⵠⵠΔⲆ, Δᐃ.ΔⲆⵠⵠᐃΔⵠ, Δᐃ.ᐃᐃΔⵠⲆᐃⵠ, Δᐃ.ᐃΔΔᐃⵠᐃΔ, Δᐃ.ⵠΔⵠΔⲆⵠᐃ, Δᐃ.ᐃΔᐃⵠⲆᐃⵠ, Δᐃ.ⲆⵠΔⲆⲆⲆᐃ, Δᐃ.ΔΔⲆⲆⲆⵠⲆ];
    ΔΔ[Cr.ⵠⲆᐃⵠΔ] = [];
    ΔΔ[Cr.ⵠⲆᐃⵠΔ][Cr.ⵠⵠΔ] = Δᐃ.ⲆᐃᐃⲆΔᐃⲆ;
    ΔΔ[Cr.ⵠⲆᐃⵠΔ][Cr.ΔΔⵠ] = Δᐃ.ΔΔⲆΔᐃᐃⵠ;
    ΔΔ[Cr.ⲆᐃⵠᐃⲆⲆᐃ] = [];
    ΔΔ[Cr.ⲆᐃⵠᐃⲆⲆᐃ][Cr.ⵠⵠΔ] = Δᐃ.ⲆΔⲆᐃⲆᐃⵠ;
    ΔΔ[Cr.ⲆᐃⵠᐃⲆⲆᐃ][Cr.ΔΔⵠ] = Δᐃ.ΔΔᐃᐃΔᐃⲆ;
    ΔΔ[Cr.ⵠᐃⵠⲆⵠᐃⵠ] = [];
    ΔΔ[Cr.ⵠᐃⵠⲆⵠᐃⵠ][Cr.ⵠⵠΔ] = Δᐃ.ⵠⵠⵠΔⲆΔᐃ;
    ΔΔ[Cr.ⵠᐃⵠⲆⵠᐃⵠ][Cr.ΔΔⵠ] = Δᐃ.ⵠΔⵠᐃᐃΔⵠ;
    ΔΔ[Cr.ΔⵠⵠᐃΔ] = [];
    ΔΔ[Cr.ΔⵠⵠᐃΔ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⲆⲆⵠΔΔⵠ;
    ΔΔ[Cr.ΔⵠⵠᐃΔ][Cr.ΔΔⵠ] = Δᐃ.ᐃᐃⲆⲆⵠᐃᐃ;
    ΔΔ[Cr.ⵠⲆΔΔⲆ] = [];
    ΔΔ[Cr.ⵠⲆΔΔⲆ][Cr.ⵠⵠΔ] = Δᐃ.ᐃⵠⵠⵠⲆᐃΔ;
    ΔΔ[Cr.ⵠⲆΔΔⲆ][Cr.ΔΔⵠ] = Δᐃ.ΔⵠΔⵠΔⵠⵠ;
    ΔΔ[Cr.ΔⵠΔⵠⲆ] = [];
    ΔΔ[Cr.ΔⵠΔⵠⲆ][Cr.ⵠⵠΔ] = Δᐃ.Δⵠᐃᐃⵠⵠᐃ;
    ΔΔ[Cr.ΔⵠΔⵠⲆ][Cr.ΔΔⵠ] = Δᐃ.ⲆΔᐃⵠⵠⵠⵠ;
    ΔΔ[Cr.ⲆⵠⲆⲆⲆ] = [];
    ΔΔ[Cr.ⲆⵠⲆⲆⲆ][Cr.ⵠⵠΔ] = Δᐃ.ΔᐃⵠᐃᐃᐃⲆ;
    ΔΔ[Cr.ⲆⵠⲆⲆⲆ][Cr.ΔΔⵠ] = Δᐃ.ⵠⲆΔⲆᐃⵠⵠ;
    ΔΔ[Cr.ᐃⵠΔⵠᐃ] = [];
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆΔΔΔⵠⵠⲆⵠΔ);
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃⲆⲆⵠⵠⵠⲆⲆᐃ);
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃⲆⲆⵠΔⵠΔⵠ);
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ΔΔⵠ].push(Δᐃ.ΔΔᐃᐃΔⵠⵠⵠⲆ);
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ΔΔⵠ].push(Δᐃ.ΔᐃⵠⵠᐃⵠΔᐃᐃ);
    ΔΔ[Cr.ᐃⵠΔⵠᐃ][Cr.ΔΔⵠ].push(Δᐃ.ᐃΔⲆⲆΔᐃᐃΔΔ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ] = [];
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃᐃⲆⵠⲆⵠⵠⵠ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆᐃᐃⲆᐃⲆⲆΔΔ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆΔᐃⵠⵠΔΔᐃⵠ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ΔΔⵠ].push(Δᐃ.ΔⲆᐃΔⵠⲆᐃᐃΔ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ΔΔⵠ].push(Δᐃ.ⵠⵠⵠⲆᐃⲆΔⵠᐃ);
    ΔΔ[Cr.ⲆᐃᐃΔΔ][Cr.ΔΔⵠ].push(Δᐃ.ⵠⵠᐃⲆⲆⵠᐃⵠΔ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ] = [];
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ⵠⵠΔ] = [];
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ΔΔⵠ] = [];
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ᐃᐃΔⵠⲆⵠⵠΔⵠ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ΔᐃⵠⲆⲆᐃᐃⵠᐃ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ⵠⵠΔ].push(Δᐃ.ⲆⵠᐃⲆⵠΔᐃᐃⲆ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ΔΔⵠ].push(Δᐃ.ⲆⵠΔⲆⲆΔΔⵠΔ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ΔΔⵠ].push(Δᐃ.ΔΔⵠⵠⲆⵠᐃⵠⲆ);
    ΔΔ[Cr.ΔΔⲆⵠⵠ][Cr.ΔΔⵠ].push(Δᐃ.ᐃⲆⵠᐃⵠⲆⲆⵠΔ);
    ⲆⲆΔⲆ.g = [];
    ⲆⲆΔⲆ.g[Lg] = [Δᐃ.ⵠⵠⵠⵠΔᐃⲆ, Δᐃ.ⵠᐃⵠᐃⵠⵠΔ];
    ⲆⲆΔⲆ.g[Aj] = ⲆⲆΔⲆ.g[0];
    ⲆⲆΔⲆ.g[2] = [Δᐃ.ᐃⵠᐃⵠᐃⵠⵠ, Δᐃ.ⵠⵠⵠΔᐃᐃΔ];
    ⲆⲆΔⲆ.m = [];
    ⲆⲆΔⲆ.m[0] = [Δᐃ.ⲆⵠᐃⵠⲆΔⲆ, Δᐃ.ᐃΔⵠᐃⵠΔᐃ];
    ⲆⲆΔⲆ.m[yl] = ⲆⲆΔⲆ.m[ko];
    ⲆⲆΔⲆ.m[_l] = [Δᐃ.ⲆᐃⲆᐃΔⲆⵠ, Δᐃ.ΔΔΔᐃᐃᐃΔ];
    ⲆⲆΔⲆ.la = [];
    ⲆⲆΔⲆ.la[Dh] = [Δᐃ.ⵠⲆΔⲆᐃⲆᐃ, Δᐃ.ⵠᐃᐃⲆΔΔΔ];
    ⲆⲆΔⲆ.la[1] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[2] = ⲆⲆΔⲆ.la[rh];
    ⲆⲆΔⲆ.la[Mo] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[qo] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.la[5] = ⲆⲆΔⲆ.la[0];
    ⲆⲆΔⲆ.s = [];
    ⲆⲆΔⲆ.s[0] = [Δᐃ.ΔⲆⲆΔⲆᐃᐃ, Δᐃ.ΔⵠⵠᐃⲆⵠⲆ];
    ⲆⲆΔⲆ.s[Yt] = ⲆⲆΔⲆ.s[0];
    ⲆⲆΔⲆ.s[xl] = [Δᐃ.ΔΔⲆᐃΔΔⵠ, Δᐃ.ⵠᐃⵠⵠᐃΔⲆ];
    ⲆⲆΔⲆ.p = [];
    ⲆⲆΔⲆ.p[0] = [Δᐃ.ᐃᐃⲆᐃⵠΔᐃ, Δᐃ.ᐃᐃⲆᐃⵠΔᐃ];
    ⲆⲆΔⲆ.a = [];
    ⲆⲆΔⲆ.a[0] = [Δᐃ.ᐃⲆΔᐃⲆᐃΔ, Δᐃ.ⵠⵠⲆⲆᐃᐃᐃ];
    ⲆⲆΔⲆ.a[1] = ⲆⲆΔⲆ.a[0];
    ⲆⲆΔⲆ.a[2] = ⲆⲆΔⲆ.a[Lg];
    ⲆⲆΔⲆ.d = [];
    ⲆⲆΔⲆ.d[0] = [Δᐃ.ⲆᐃⲆΔΔᐃⵠ, Δᐃ.ⲆⵠⲆⵠⲆⲆⵠ];
    ⲆⲆΔⲆ.d[ik] = ⲆⲆΔⲆ.d[Jt];
    ⲆⲆΔⲆ.d[cu] = ⲆⲆΔⲆ.d[0];
    ⲆⲆΔⲆ.re = [];
    ⲆⲆΔⲆ.re[0] = [Δᐃ.ⵠΔΔΔᐃᐃΔ, Δᐃ.ⲆΔⵠᐃΔᐃᐃ];
    ⲆⲆΔⲆ.re[ce] = ⲆⲆΔⲆ.re[_s];
    ⲆⲆΔⲆ.re[pa] = ⲆⲆΔⲆ.re[0];
    ⲆⲆΔⲆ.f = [];
    ⲆⲆΔⲆ.f[ko] = [Δᐃ.ⵠᐃΔᐃᐃΔⲆ, Δᐃ.ⵠⲆⲆⵠⵠΔᐃ];
    ⲆⲆΔⲆ.f[bt] = ⲆⲆΔⲆ.f[Fj];
    ⲆⲆΔⲆ.f[xl] = ⲆⲆΔⲆ.f[0];
    ⲆⲆΔⲆ.isl = [];
    ⲆⲆΔⲆ.isl[kq] = [Δᐃ.ⵠⵠⲆⲆᐃⵠⲆ, Δᐃ.ΔⲆⵠΔΔᐃΔ];
    ⲆⲆΔⲆ.isl[1] = ⲆⲆΔⲆ.isl[Wh];
    ⲆⲆΔⲆ.isl[2] = ⲆⲆΔⲆ.isl[Jt];
    ⲆⲆΔⲆ.c = [];
    ⲆⲆΔⲆ.c[0] = [Δᐃ.ΔⲆᐃⲆΔⲆΔ, Δᐃ.ΔΔⵠᐃΔⵠᐃ];
    ⲆⲆΔⲆ.c[Br] = ⲆⲆΔⲆ.c[0];
    ⲆⲆΔⲆ.c[2] = ⲆⲆΔⲆ.c[Ko];
    ⲆⲆΔⲆ.wtb = [];
    ⲆⲆΔⲆ.wtb[0] = [Δᐃ.ᐃΔΔᐃⲆᐃⲆ, Δᐃ.ΔΔⵠᐃⵠΔⲆ];
    ⲆⲆΔⲆ.PIRANHA = [Δᐃ.ᐃΔᐃⲆΔⵠᐃ, Δᐃ.ⵠΔᐃⵠⵠⵠⵠ];
    ⲆⲆΔⲆ.KRAKEN = [Δᐃ.ⲆΔⲆⲆⲆⵠΔ, Δᐃ.ᐃⲆΔⲆᐃⵠᐃ];
    ⲆⲆΔⲆ.FOX = [Δᐃ.ᐃᐃⵠΔⵠⵠᐃ, Δᐃ.ⵠᐃⲆΔᐃⲆⵠ];
    ⲆⲆΔⲆ.WOLF = [Δᐃ.ᐃᐃⵠᐃᐃΔⲆ, Δᐃ.ⲆΔᐃⵠⵠᐃⲆ];
    ⲆⲆΔⲆ.SPIDER = [Δᐃ.ΔⵠΔⲆΔΔⲆ, Δᐃ.ΔⵠⲆⵠⵠⵠⲆ];
    ⲆⲆΔⲆ.BEAR = [Δᐃ.ΔⵠΔᐃΔΔΔ, Δᐃ.ⲆⲆᐃᐃⲆⲆⲆ];
    ⲆⲆΔⲆ.CAVE = [Δᐃ.ᐃᐃΔⵠⵠⲆⲆ, Δᐃ.ⲆⲆᐃΔⲆΔᐃ];
    ⲆⲆΔⲆ.MAP = [Δᐃ.ⲆΔⲆⵠⵠΔⵠ, Δᐃ.ⵠΔᐃⵠⵠⵠᐃ];
    ⲆⲆΔⲆ.FOREST = [Δᐃ.ᐃⵠⵠⵠᐃⵠᐃ, Δᐃ.ᐃᐃᐃᐃⲆΔΔ];
    ⲆⲆΔⲆ.WINTER = [Δᐃ.ΔΔΔΔᐃᐃΔ, Δᐃ.ᐃⲆᐃΔⵠⲆΔ];
    ⲆⲆΔⲆ[hj[Yt]] = [Δᐃ.ΔⲆⲆⵠΔᐃᐃ, Δᐃ.ΔΔⵠⲆᐃΔᐃ];
    ⲆⲆΔⲆ.LAVA = [Δᐃ.ⵠⲆᐃⵠⲆᐃⲆ, Δᐃ.ᐃΔᐃΔΔᐃⵠ];
    for (var b in ⲆⲆΔⲆ) {
      for (var c = ⲆⲆΔⲆ[b], d = tr; d < c.length; d++) {
        var e = c[d];
        if (e.ⵠᐃⵠⵠⵠᐃᐃ !== Lk) {
          e.ⵠᐃⵠⵠⵠᐃᐃ();
        } else if (e.length > ko) {
          for (var f = Kr; f < e.length; f++) {
            if (e[f].ⵠᐃⵠⵠⵠᐃᐃ !== Tg) {
              e[f].ⵠᐃⵠⵠⵠᐃᐃ();
            }
          }
        }
      }
    }
    console.log(undefined, undefined);
  }
  function Uc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 139;
    d.height = a * 135;
    e.translate(0, a * hl);
    e.globalAlpha = b ? 0.5 : dn;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * Rb, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * 6, a * 28, a * Vo, a * 37, _ * a);
    e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * qj);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, fh * a, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * 5, a * 99, Ju * a, a * 101, a * 8, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    tb(e, c[0]);
    e.translate(Lu, a * -10);
    e.globalAlpha = Yt;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 32, a * 77);
    e.bezierCurveTo(a * 6, a * 41, a * mg, a * 33, a * 12, a * 27);
    e.bezierCurveTo(a * 27, a * Rb, a * 28, a * 6, a * 37, Rb * a);
    e.bezierCurveTo(a * 62, a * vo, a * 64, a * 5, a * 67, a * 13);
    e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
    e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
    e.closePath();
    tb(e, c[V]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 37);
    e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
    e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
    e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
    e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
    e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
    e.closePath();
    tb(e, c[bt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 30, a * 63);
    e.bezierCurveTo(a * Gl, a * 99, vu * a, a * 101, al * a, a * 103);
    e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
    e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
    e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
    e.closePath();
    tb(e, c[ik]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
    e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, wq * a);
    e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * Ke);
    e.closePath();
    tb(e, c[xl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65, a * 65);
    e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
    e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
    e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
    e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
    e.closePath();
    tb(e, c[_t]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 27, a * 69);
    e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
    e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
    e.bezierCurveTo(a * 8, a * 103, zn * a, a * 103, ug * a, a * 103);
    e.bezierCurveTo(a * cd, a * 98, Qb * a, a * 89, a * 26, a * 70);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 26, a * 69);
    e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
    e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80, a * 38);
    e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
    e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
    e.closePath();
    tb(e, c[kn]);
    return d;
  }
  function Yc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 142;
    d.height = a * 118;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 111, a * 27.3671875);
    e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
    e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
    e.closePath();
    tb(e, c[cl], c[4], xt * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 31, a * 23.3671875);
    e.bezierCurveTo(a * Ug, a * 15.3671875, a * 16, a * 14.3671875, a * Es, a * 20.3671875);
    e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
    e.closePath();
    tb(e, c[3], c[4], a * 4);
    e.save();
    e.translate(a * 70.5, a * 34.8671875);
    e.rotate(Dh);
    nb(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
    e.restore();
    tb(e, c[$t], c[1], mj * a);
    e.save();
    e.translate(a * 71, a * 40.8671875);
    e.rotate(Fj);
    nb(e, a * -49, a * -12.5, a * 98, a * 25, Jr * a);
    e.restore();
    tb(e, c[_l], c[1], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
    e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
    e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
    e.closePath();
    tb(e, c[_t], c[er], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
    e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
    e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
    e.closePath();
    tb(e, c[2], c[1], Ka * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 17.800003051757812, a * 49.15625);
    e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
    e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
    e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
    e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
    e.closePath();
    tb(e, c[Kk], c[mj], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
    e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
    e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
    e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
    e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
    e.closePath();
    tb(e, c[3], c[Ai], a * Ka);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * Q, a * 56.3671875);
    e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
    e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
    e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
    e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
    e.bezierCurveTo(qo * a, a * 14.3671875, a * _k, a * 18.3671875, a * 8, a * 27.3671875);
    e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * Lj, a * 56.3671875);
    e.closePath();
    tb(e, c[Ik], c[4], a * Ai);
    e.save();
    e.translate(a * 68.30000305175781, a * 41.45625305175781);
    e.rotate(0.76);
    nb(e, a * -20.5, a * -20.5, a * 41, a * 41, zq * a);
    e.restore();
    tb(e, undefined, c[5], bn * a);
    e.save();
    e.translate(a * 68.80000305175781, a * 44.45625305175781);
    e.rotate(0.76);
    nb(e, a * -21, a * -20.5, a * 42, a * 41, a * Bq);
    e.restore();
    tb(e, c[3], c[Il], a * 4);
    e.save();
    e.translate(a * 69.80000305175781, a * 44.556243896484375);
    e.rotate(0.76);
    nb(e, a * -10, a * -Fg, a * 20, a * 20, a * 5);
    e.restore();
    tb(e, c[6], c[Lq], a * 4);
    return d;
  }
  function Kc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 120;
    d.height = a * 100;
    nb(e, a * 10, a * 10, a * 95, a * 80, a * rd);
    tb(e, b[2]);
    nb(e, eg * a, a * 5, a * 95, a * 80, lj * a);
    tb(e, b[3], b[4], Lb * a);
    if (yk == c) {
      var f = ec(a * 0.75, b, rh);
      e.drawImage(f, a * 22, a * 18);
    } else if (Cs == c) {
      f = ec(a * 0.75, b, 1);
      e.drawImage(f, a * 22, Tq * a);
    }
    return d;
  }
  function Vc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 81;
    d.height = a * 77;
    e.translate(0, a * Hr);
    e.scale(0.2, 0.2);
    e.translate(Ko, a * -30);
    if (c == js) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 36.5, a * 278.0625);
      e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
      e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
      e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
      e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
      e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
      e.closePath();
      tb(e, b[_s], b[lk], a * 50);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 36.5, a * 278.0625);
    e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
    e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
    e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
    e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
    e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
    e.closePath();
    tb(e, b[Dh], b[Ud], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 214.5, a * 124.0625);
    e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
    e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
    e.closePath();
    tb(e, b[0], b[er], a * as);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 157.5, a * 145.0625);
    e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
    e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
    e.closePath();
    tb(e, b[0], b[V], a * ig);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103.5, a * 169.0625);
    e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
    e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
    e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
    e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
    e.closePath();
    tb(e, b[Xn], b[1], a * 19);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 194.5, a * 313.0625);
    e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
    e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
    e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
    e.closePath();
    tb(e, b[Fo]);
    e.scale(3, 3);
    e.translate(ng, hl * a);
    if (c == V) {
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * Ka, a * 32);
      e.bezierCurveTo(k * a, a * 25, a * 19, a * 25, a * 34, a * Jg);
      e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
      e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, Mh * a, a * 70, a * 11);
      tb(e, On, b[3], a * 28);
      e.beginPath();
      e.lineCap = "round";
      e.lineJoin = "round";
      e.moveTo(a * 56, a * 6);
      e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
      e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * _t);
      e.closePath();
      tb(e, b[3], b[3], a * 28);
    }
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * jt, a * 32);
    e.bezierCurveTo(ms * a, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, ws * a, a * 70, Sh * a);
    tb(e, gh, b[ik], a * Zs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, kn * a);
    e.closePath();
    tb(e, b[Cs], b[1], a * 17);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 4, a * 32);
    e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
    e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
    e.bezierCurveTo(a * 59.5, Gh * a, a * 59.5, a * 20, a * 70, a * 11);
    tb(e, undefined, b[2], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 56, a * 6);
    e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
    e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
    e.closePath();
    tb(e, b[2], b[2], a * hl);
    return d;
  }
  function Xc(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : dn;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, gk * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    tb(e, undefined, c[0], a * Ro);
    e.translate(Mn, a * -5);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    tb(e, c[Mo], c[2], a * Nh);
    e.translate(kq, a * 25);
    e.globalAlpha = js;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    tb(e, c[Th]);
    e.translate(tr, a * -25);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    tb(e, c[1], c[C], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    tb(e, undefined, c[pa], pk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    tb(e, undefined, c[2], Da * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    tb(e, c[1], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    tb(e, c[Lb], c[ij], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    tb(e, c[4], c[$r], a * hs);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    tb(e, jr, c[2], a * Qn);
    return d;
  }
  function Zc(a, b, c) {
    var d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    var e;
    d = (e = document.createElement("canvas")).getContext("2d");
    e.width = a * 47;
    e.height = a * 60;
    ab(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
    tb(d, undefined, c[2], a * oj);
    ab(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
    tb(d, Ya, c[ub], a * gn);
    ab(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
    tb(d, li, c[1], a * 4);
    d.save();
    d.translate(a * 23, a * 38.734375);
    d.rotate(Gd);
    nb(d, a * -21.5, -Yo * a, a * 43, a * 38, Dl * a);
    d.restore();
    tb(d, c[Le], c[Br], a * 4);
    d.save();
    d.translate(a * 23.5, a * 43.734375);
    d.rotate(0.5235987755982988);
    gb(d, 3, a * 8.06225774829855, a * 0);
    d.restore();
    tb(d, c[3]);
    ab(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
    tb(d, c[3]);
    return e;
  }
  function $c(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 170;
    e.height = a * 200;
    f.translate(a * 5, a * 15);
    if (d == 1) {
      f.translate(Lu, a * -uh);
      ab(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
      tb(f, c[Yt], c[Ju], a * 20);
      ab(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
      tb(f, c[er], c[Ju], da * a);
      f.save();
      f.translate(a * 77.00003051757812, a * 31.267044067382812);
      nb(f, a * -6, a * -12.5, a * 12, a * 25, ft * a);
      f.restore();
      tb(f, c[sd], c[Bb], a * Tl);
      f.save();
      f.translate(a * 77.00003051757812, a * 13.267044067382812);
      nb(f, -$n * a, a * -10.5, a * 30, a * 21, a * 10);
      f.restore();
      tb(f, c[Eg], c[gs], a * aq);
    }
    ab(f, a * 77.00003051757812, a * 104.49432373046875, a * 71.84010022264724);
    tb(f, c[Fo], c[Ok], a * iq);
    ab(f, a * 77.00003051757812, a * 104.22160339355469, a * 61.554853586049575);
    tb(f, c[1], c[2], a * Gb);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 18.000030517578125, a * 105.85795593261719);
    f.bezierCurveTo(a * 134.00003051757812, a * 104.85795593261719, a * 77.00003051757812, a * 104.85795593261719, a * 136.00003051757812, a * 103.85795593261719);
    f.closePath();
    tb(f, c[bt], c[2], S * a);
    ab(f, a * 77.00003051757812, a * 104.6761474609375, a * 32.55764119219941);
    tb(f, c[Ud], c[2], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 112.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 87.03977966308594, a * 78.00003051757812, a * 62.03977966308594);
    f.closePath();
    tb(f, c[3], c[_t], a * Ft);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 78.00003051757812, a * 48.03977966308594);
    f.bezierCurveTo(a * 82.00003051757812, a * 55.53977966308594, a * 82.00003051757812, a * 55.53977966308594, a * 86.00003051757812, a * 63.03977966308594);
    f.bezierCurveTo(a * 78.00003051757812, a * 63.03977966308594, a * 78.00003051757812, a * 63.03977966308594, a * 70.00003051757812, a * 63.03977966308594);
    f.closePath();
    tb(f, c[3], c[$r], a * 4);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 80.00003051757812, a * 111.6761474609375);
    f.bezierCurveTo(a * 95.00003051757812, a * 97.1761474609375, a * 95.00003051757812, a * 97.1761474609375, a * 110.00003051757812, a * 82.6761474609375);
    f.closePath();
    tb(f, c[B], c[Le], a * 8);
    f.beginPath();
    f.lineCap = "round";
    f.lineJoin = "round";
    f.moveTo(a * 107.00003051757812, a * 76.6761474609375);
    f.bezierCurveTo(a * 111.50003051757812, a * 82.6761474609375, a * 111.50003051757812, a * 82.6761474609375, a * 116.00003051757812, a * 88.6761474609375);
    f.bezierCurveTo(a * 118.50003051757812, a * 81.6761474609375, a * 118.50003051757812, a * 81.6761474609375, a * 121.00003051757812, a * 74.6761474609375);
    f.closePath();
    tb(f, c[nh], c[ij], qo * a);
    ab(f, a * 77.00003051757812, a * 105.03977966308594, a * 15.556349186104045);
    tb(f, c[3], c[2], a * 4);
    f.save();
    f.translate(a * 77.00003051757812, a * 31.267044067382812);
    f.rotate(0);
    nb(f, -Mr * a, a * -12.5, a * 12, a * 25, a * 10);
    f.restore();
    tb(f, c[js], c[2], a * 7);
    f.save();
    f.translate(a * 77.00003051757812, a * 13.267044067382812);
    f.rotate(Gd);
    nb(f, a * -15, a * -10.5, a * 30, a * 21, Fs * a);
    f.restore();
    tb(f, c[1], c[2], a * 7);
    return e;
  }
  function em(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 158;
    d.height = a * 201;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    tb(e, c[S], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    tb(e, c[al], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    tb(e, c[db], c[xo], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    tb(e, c[lr], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    tb(e, c[8], c[ea], a * Fn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    tb(e, c[db], c[8], a * wh);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    tb(e, c[fg], c[Sl], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    tb(e, c[8], c[Ss], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    tb(e, c[8], c[8], a * 10);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 96.5, a * 76.421875);
    e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
    e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
    e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
    e.closePath();
    tb(e, c[ub], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 61.5, a * 78.421875);
    e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
    e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
    e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
    e.closePath();
    tb(e, c[1], c[2], a * th);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 127.421875);
    e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
    e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
    e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
    e.closePath();
    tb(e, c[1], c[ib], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 41.5, a * 134.421875);
    e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
    e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
    e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
    e.closePath();
    tb(e, c[ub], c[tg], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 78.5, a * 51.921875);
    e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
    e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
    e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
    e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
    e.closePath();
    tb(e, c[lk], c[Xn], a * 4);
    ab(e, a * 108.5, a * 148.421875, a * 9);
    tb(e, c[Cj]);
    ab(e, a * 106.5, a * 144.421875, a * 3);
    tb(e, c[Rb]);
    ab(e, a * 46.5, a * 148.421875, a * 9);
    tb(e, c[5]);
    ab(e, a * 44.5, a * 144.421875, a * 3);
    tb(e, c[6]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 114.421875);
    e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
    e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
    tb(e, c[_i], c[2], a * kr);
    e.beginPath();
    e.translate(xb, -tg * a);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 35.5, a * 131.421875);
    e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
    e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
    tb(e, c[Za], c[2], a * gn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 57.421875);
    e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
    e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
    e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
    e.closePath();
    tb(e, c[jt]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 79.5, a * 61.421875);
    e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
    e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
    e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
    e.closePath();
    tb(e, c[fa], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 72.421875);
    e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
    e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
    e.closePath();
    tb(e, c[jg], c[Qs], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 154.421875);
    e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
    e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
    e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
    e.closePath();
    tb(e, c[6], c[El], a * tg);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 81.5, a * 164.421875);
    e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
    e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
    e.closePath();
    tb(e, c[6], c[id], a * 2);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 72.5, a * 164.421875);
    e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
    e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
    e.closePath();
    tb(e, c[_h], c[sb], C * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 65.5, a * 156.421875);
    e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
    e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
    e.closePath();
    tb(e, c[6], c[7], tg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 42.5, a * 163.421875);
    e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
    e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
    e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
    e.closePath();
    tb(e, c[3], c[2], a * 4);
    return d;
  }
  function im(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 185;
    d.height = a * 164;
    e.translate(ko, 0);
    var f = function (a, b, c) {
      var d = document.createElement("canvas");
      var e = d.getContext("2d");
      d.width = a * 201;
      d.height = a * 164;
      e.translate(0, a * 5);
      e.globalAlpha = b ? 0.5 : ub;
      ab(e, a * 100.5, a * 82, a * 74.92746655359852);
      tb(e, c[Dh], c[0], a * Ai);
      ab(e, a * 100.5, a * 82, a * 65.9417374971317);
      tb(e, c[rh], c[0], a * 4);
      e.translate(0, -Cj);
      e.globalAlpha = Cs;
      ab(e, a * 100.5, a * 82, a * 74.92746655359852);
      tb(e, c[wg], c[ta], a * 4);
      ab(e, a * 100.5, a * 82, a * 65.9417374971317);
      tb(e, c[bt], c[Qs], a * 4);
      ab(e, a * 100.5, a * 82, a * 35.9417374971317);
      tb(e, c[1], c[eh], a * 20);
      ab(e, a * 100.5, a * 82, a * 15.9417374971317);
      tb(e, c[wg], c[ib], a * 6);
      return d;
    }(a, b, c);
    e.drawImage(f, a * -10, a * 0);
    f = hm(a, b, c, 0);
    e.drawImage(f, a * -83, a * -40);
    f = hm(a, b, c, Math.PI / 1.4);
    e.drawImage(f, a * -15, a * -88);
    f = hm(a, b, c, Math.PI / -1.4);
    e.drawImage(f, a * 15, a * -8);
    return d;
  }
  function tm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.translate(0, a * 15);
    e.globalAlpha = b ? 0.5 : Ud;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, a * gk, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    tb(e, undefined, c[tr], a * 11);
    e.translate(0, -_g * a);
    e.globalAlpha = ce;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 103, a * 154);
    e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
    e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
    e.closePath();
    tb(e, c[3], c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
    e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
    e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
    e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
    e.closePath();
    tb(e, c[Aj], c[yh], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 182, a * 185);
    e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
    e.closePath();
    tb(e, undefined, c[2], a * 12);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222, a * 287);
    e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
    e.closePath();
    tb(e, undefined, c[2], a * de);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 145, a * 290);
    e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
    e.closePath();
    tb(e, c[Cs], c[$r], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105, a * 184);
    e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
    e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
    e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
    e.closePath();
    tb(e, c[4], c[2], a * 11);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 251, a * 276);
    e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
    e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
    e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
    e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
    e.closePath();
    tb(e, c[f], c[2], Ro * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 102, a * 154);
    e.bezierCurveTo(a * 106, a * 53, oh * a, a * 53, a * 263, a * 154);
    e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
    e.closePath();
    tb(e, undefined, c[Le], Kl * a);
    return d;
  }
  function nm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 145;
    d.height = a * 120;
    e.beginPath();
    e.scale(0.6, 0.6);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 18, a * -8);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, a * 100, a * 93, Dq * a, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    tb(e, c[4], c[5], a * Lb);
    e.beginPath();
    e.scale(1.1, 1.1);
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -9, a * 4);
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, Kn * a, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, dg * a, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    tb(e, c[4], c[mh], a * kr);
    e.scale(1.1, 1.1);
    e.translate(a * -9, a * 4);
    e.save();
    e.translate(a * 100, a * 73.06874084472656);
    e.rotate(0);
    nb(e, a * -61, a * -38.5, a * 122, a * 40, _j * a);
    e.restore();
    tb(e, c[1], c[kn], a * 4);
    e.save();
    e.translate(a * 100, a * 71.36874389648438);
    e.rotate(0);
    nb(e, a * -60.5, a * -$o, a * 121, a * 30, a * 20);
    e.restore();
    tb(e, c[lk], c[Xn], a * qa);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 144, a * 80);
    e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
    e.bezierCurveTo(a * 159, rs * a, a * 159, or * a, a * 160, a * Yi);
    e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 57, a * 75);
    e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
    e.bezierCurveTo(a * 44, a * 100, a * 44, Qk * a, a * 39, a * 97);
    e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
    e.closePath();
    tb(e, c[_l]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 101, a * 72);
    e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
    e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
    e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
    e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
    e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
    e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
    e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
    e.bezierCurveTo(a * 93, Bl * a, a * 93, a * 100, a * 92, a * 94);
    e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
    e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
    e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
    e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
    e.closePath();
    tb(e, c[4], c[_g], a * 4);
    e.translate(0, _s);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 115.5, a * 116.07290649414062);
    e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
    e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
    e.closePath();
    tb(e, c[Mo], c[2], zg * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 39.5, a * 96.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
    e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
    e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
    e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
    e.closePath();
    tb(e, c[Za], c[2], a * Yn);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    tb(e, c[3], c[2], Ai * a);
    e.scale(0.5, 0.5);
    e.translate(a * Yi, a * 71);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86, a * 80);
    e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
    e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
    e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
    e.closePath();
    tb(e, c[6], c[Uh], a * 4);
    return d;
  }
  function om(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 180;
    d.height = a * 120;
    e.translate(a * -65, a * -35);
    e.globalAlpha = b ? 0.5 : 1;
    e.translate(0, a * 10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    nb(e, a * -67, a * -16.5, a * 134, a * 33, a * U);
    e.restore();
    tb(e, c[ko]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    tb(e, c[Mn]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    tb(e, c[0]);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    nb(e, a * -73, a * -20.5, a * 146, a * 41, a * Oq);
    e.restore();
    tb(e, c[0]);
    e.globalAlpha = 1;
    e.translate(tr, a * -10);
    e.save();
    e.translate(a * 150.5, a * 63.84375);
    nb(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
    e.restore();
    tb(e, c[bt], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 75.34375);
    e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
    e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
    e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
    e.closePath();
    tb(e, c[Fo], c[2], bn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 206.5, a * 71.34375);
    e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
    e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
    e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
    e.closePath();
    tb(e, c[er], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 136.5, a * 75.34375);
    e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
    e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
    e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
    e.closePath();
    tb(e, c[Br], c[Ok], a * 4);
    e.save();
    e.translate(a * 152.5, a * 80.84375);
    e.rotate(3.12);
    nb(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
    e.restore();
    tb(e, c[bt], c[2], a * Ai);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 83.5, a * 73.34375);
    e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
    e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
    e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
    e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
    e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
    e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 137.5, a * 65.34375);
    e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 221.5, a * 85.34375);
    e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
    e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
    e.closePath();
    tb(e, c[cl]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 84.5, a * 89.34375);
    e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
    e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 208.5, a * 104.34375);
    e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
    e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
    e.closePath();
    tb(e, c[B]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 87.5, a * 117.34375);
    e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
    e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
    e.closePath();
    tb(e, c[nh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 107.5, a * 51.34375);
    e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
    e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
    e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
    e.closePath();
    tb(e, c[Mo]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 170.5, a * 52.34375);
    e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
    e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
    e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
    e.closePath();
    tb(e, c[nh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 80.5, a * 69.34375);
    e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
    e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 222.5, a * 75.34375);
    e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
    e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
    e.closePath();
    tb(e, c[Qs]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 116.5, a * 100.34375);
    e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
    e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 112.5, a * 48.34375);
    e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
    e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 216.5, a * 109.34375);
    e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
    e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
    e.closePath();
    tb(e, c[2]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 86.5, a * 133.34375);
    e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
    e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
    e.closePath();
    tb(e, c[2]);
    return d;
  }
  function rm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(Jt);
    nb(e, a * -21.5, a * -34, a * 43, a * 68, al * a);
    e.restore();
    tb(e, c[Eg], c[2], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
    e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
    e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
    e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
    e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
    e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
    e.closePath();
    tb(e, c[3], c[4], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    tb(e, undefined, c[lt], nk * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    tb(e, undefined, c[hi], a * 15);
    return d;
  }
  function am(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 120;
    c.height = a * 280;
    d.translate(a * -100, a * -20);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 228.5, a * 331.953125);
    d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
    d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
    d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
    d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
    d.closePath();
    tb(d, b[0]);
    return c;
  }
  function sm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 105;
    d.height = a * 144;
    e.globalAlpha = b ? 0.5 : Fo;
    e.translate(a * -5, a * 0);
    e.save();
    e.translate(a * 52.5, a * 91.5);
    nb(e, a * -4.5, a * -39, Ze * a, a * 78, a * 5);
    e.restore();
    tb(e, c[0], c[Mn], a * 3);
    e.save();
    e.translate(a * 53, a * 36);
    nb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    tb(e, c[0], c[xb], a * 4);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    nb(e, a * -26.5, a * -15, a * 53, a * 30, Bk * a);
    e.restore();
    tb(e, c[Fj], c[0], bn * a);
    e.translate(a * 5, Jt * a);
    e.globalAlpha = yl;
    e.save();
    e.translate(a * 52.5, a * 91.5);
    nb(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
    e.restore();
    tb(e, c[1], c[2], Za * a);
    e.save();
    e.translate(a * 53, a * 36);
    nb(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
    e.restore();
    tb(e, c[3], c[4], Lb * a);
    e.save();
    e.translate(a * 53.5, a * 35.5);
    nb(e, a * -26.5, a * -Ns, a * 53, a * 30, a * 5);
    e.restore();
    tb(e, c[Ca], c[hn], a * qo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 49, a * 60.5);
    e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
    e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
    e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
    e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
    e.closePath();
    tb(e, c[7], c[6], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 66, a * 40.5);
    e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
    e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
    e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
    e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
    e.closePath();
    tb(e, c[id], c[So], a * Mo);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 33.5);
    e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
    e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
    e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
    e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
    e.closePath();
    tb(e, c[Hk], c[ih], a * 3);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 52, a * 47.5);
    e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
    e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
    e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
    e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
    e.closePath();
    tb(e, c[11], c[10], a * 3);
    return d;
  }
  function hm(a, b, c, d) {
    var e = document.createElement("canvas");
    var f = e.getContext("2d");
    e.width = a * 501;
    e.height = a * 564;
    f.scale(0.5, 0.5);
    f.translate(a * 240, a * qn);
    f.rotate(d);
    f.globalAlpha = b ? 0.5 : 0.2;
    ab(f, a * 174, a * 87.984375, a * 20.8806130178211);
    tb(f, c[0], c[0], Ss * a);
    ab(f, a * 174, a * 87.984375, a * 12.165525060596439);
    tb(f, c[xb], c[0], a * zn);
    ab(f, a * 174, a * 87.484375, a * 6);
    tb(f, c[0]);
    ab(f, a * 30, a * 87.984375, a * 20.8806130178211);
    tb(f, c[0], c[0], Rh * a);
    ab(f, a * 30, a * 87.984375, a * 12.165525060596439);
    tb(f, c[0], c[0], a * 4);
    ab(f, a * 30, a * 87.484375, a * Ll);
    tb(f, c[Wh]);
    ab(f, a * 100, a * 30, a * 20.8806130178211);
    tb(f, c[0], c[Ol], a * 4);
    ab(f, a * 100, a * 30, a * 12.165525060596439);
    tb(f, c[Jt], c[0], a * 4);
    ab(f, a * 100, a * 30, a * 6);
    tb(f, c[Lg]);
    ab(f, a * 100, a * 130, a * 20.8806130178211);
    tb(f, c[yk], c[0], a * gn);
    ab(f, a * 100, a * 130, a * 12.165525060596439);
    tb(f, c[0], c[0], a * 4);
    ab(f, sg * a, a * 130, a * 6);
    tb(f, c[0]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    f.rotate(yk);
    nb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    tb(f, c[0], c[0], a * 4);
    f.save();
    f.translate(a * 101, a * 64.984375);
    f.rotate(0);
    nb(f, a * -33, a * -10, a * 66, _j * a, a * vh);
    f.restore();
    tb(f, c[0], c[Dh], a * 4);
    f.save();
    f.translate(a * 102, a * 63.484375);
    f.rotate(0);
    nb(f, a * -I, a * -27.5, a * 18, a * 55, a * Et);
    f.restore();
    f.translate(5, -Bb);
    f.globalAlpha = ub;
    ab(f, a * 174, a * 87.984375, a * 20.8806130178211);
    tb(f, c[yl], c[3], a * Cl);
    ab(f, a * 174, a * 87.984375, a * 12.165525060596439);
    tb(f, c[1], c[cl], a * 8);
    ab(f, a * 174, a * 87.484375, mg * a);
    tb(f, c[2]);
    ab(f, a * 30, a * 87.984375, a * 20.8806130178211);
    tb(f, c[Fo], c[Dn], a * zn);
    ab(f, a * 30, a * 87.984375, a * 12.165525060596439);
    tb(f, c[1], c[fa], a * db);
    ab(f, a * 30, a * 87.484375, So * a);
    tb(f, c[_t]);
    ab(f, a * 102, a * 30, a * 20.8806130178211);
    tb(f, c[Br], c[3], a * 8);
    ab(f, a * 102, a * 30, a * 12.165525060596439);
    tb(f, c[dn], c[3], a * yb);
    ab(f, a * 102, a * 30, a * xu);
    tb(f, c[1]);
    ab(f, a * 102, a * 130, a * 20.8806130178211);
    tb(f, c[1], c[3], a * 8);
    ab(f, a * 102, a * 130, a * 12.165525060596439);
    tb(f, c[ce], c[3], a * ih);
    ab(f, a * 102, a * 130, a * 6);
    tb(f, c[1]);
    f.save();
    f.translate(a * 102, a * 81.984375);
    nb(f, a * -74, a * -57, a * 148, a * 114, a * 23);
    f.restore();
    tb(f, c[ub], c[3], Sl * a);
    f.save();
    f.translate(a * 101, a * 64.984375);
    nb(f, a * -33, a * -10, a * 66, a * 20, a * kh);
    f.restore();
    tb(f, c[yg], c[1], a * 8);
    f.save();
    f.translate(a * 102, a * 63.484375);
    nb(f, a * -rq, a * -27.5, a * hg, a * 55, nk * a);
    f.restore();
    tb(f, c[pa], c[ub], a * Ss);
    ab(f, a * 135, a * 107.36605834960938, a * 21.095023109728988);
    tb(f, c[1], c[vg], al * a);
    ab(f, a * 135, a * 107.36605834960938, Cg * a);
    tb(f, c[js], c[vo], a * ih);
    ab(f, a * 135, a * 107.36605834960938, a * 6.082762530298219);
    tb(f, c[xl]);
    ab(f, a * 70, a * 107.36605834960938, a * 21.095023109728988);
    tb(f, c[jh], c[Gg], a * Db);
    ab(f, a * 70, a * 107.36605834960938, a * Al);
    tb(f, c[1], c[ta], a * 8);
    ab(f, a * 70, a * 107.36605834960938, a * 6.082762530298219);
    tb(f, c[Ok]);
    return e;
  }
  function lm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 161;
    d.height = a * 184;
    e.translate(Wh, a * 10);
    e.globalAlpha = 1;
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    tb(e, c[rh]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    tb(e, c[0]);
    e.translate(0, -Dl * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 45.5, a * 144.609375);
    e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
    e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
    e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
    tb(e, c[Eg], c[cu], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 105.5, a * 34.609375);
    e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
    e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
    e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
    e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
    e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
    e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
    e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
    e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
    e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
    e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
    e.closePath();
    tb(e, c[ce], c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 104.5, a * 35.609375);
    e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
    e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
    e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
    tb(e, undefined, c[2], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 59.5, a * 72.609375);
    e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
    tb(e, undefined, c[2], Rh * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 60.5, a * 85.609375);
    e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
    tb(e, undefined, c[2], a * mj);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 68.5, a * 122.609375);
    e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
    tb(e, c[Ud], c[2], Yn * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 142.5, a * 18.609375);
    e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
    e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
    e.closePath();
    tb(e, c[3]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 146.5, a * 61.50892639160156);
    e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
    e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
    e.closePath();
    tb(e, c[lk]);
    return d;
  }
  function gm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 316;
    d.height = a * 365;
    e.save();
    e.translate(a * 156.07142639160156, a * 51.81248474121094);
    e.rotate(0);
    nb(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
    e.restore();
    tb(e, c[1], c[xl], a * Et);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
    e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
    e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
    e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
    e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
    e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
    e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
    e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
    e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
    e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
    e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
    e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
    e.closePath();
    tb(e, undefined, c[cd], a * 15);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
    e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
    e.closePath();
    tb(e, gh, c[dt], a * 15);
    return d;
  }
  function um(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = Fr * a;
    c.height = a * 35;
    nb(d, 0, rh, Vq, 35, kg);
    tb(d, b[Lu]);
    return c;
  }
  function bm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 80;
    d.height = a * 160;
    e.globalAlpha = b ? 0.5 : Ur;
    e.translate(a * 5, a * Bb);
    e.save();
    nb(e, a * 33, a * 53, a * 10, a * 98, a * 10);
    tb(e, c[0]);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    tb(e, c[0]);
    e.restore();
    e.globalAlpha = 1;
    e.translate(a * -5, a * -5);
    e.save();
    nb(e, a * 33, a * 53, a * 10, a * 98, Bq * a);
    tb(e, c[1], c[2], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * -150, a * -100);
    e.moveTo(a * 167.5, a * 171.0625);
    e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
    e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
    e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
    e.closePath();
    tb(e, c[3], c[4], a * 4);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.translate(a * 0, a * jh);
    e.moveTo(a * 180.5, a * 169.0625);
    e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
    e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
    e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
    e.closePath();
    tb(e, c[5]);
    e.restore();
    return d;
  }
  function vm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 89;
    d.height = a * 89;
    e.save();
    e.translate(a * 44.5, a * 44.5);
    gb(e, dt, a * 40, a * oa);
    e.restore();
    tb(e, c[0], c[1], a * 5);
    e.save();
    e.translate(a * 44.5, a * 44.5);
    gb(e, 6, a * 25.11521001172521, Fs * a);
    e.restore();
    tb(e, c[2], c[vo], cd * a);
    return d;
  }
  function dm(a, b) {
    var c = document.createElement("canvas");
    var d = c.getContext("2d");
    c.width = a * 376;
    c.height = a * 371;
    d.globalAlpha = 0.5;
    d.translate(lt * a, Gl * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    tb(d, b[Jt]);
    d.globalAlpha = wg;
    d.translate(-qo * a, a * -5);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
    d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
    d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
    d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
    d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
    d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
    d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
    d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
    d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
    d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
    d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
    d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
    d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
    d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
    d.closePath();
    tb(d, undefined, b[1], a * 12);
    d.translate(a * -1, a * $t);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 270.633544921875, a * 88.98580932617188);
    d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
    d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
    d.closePath();
    tb(d, b[kr], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 275.633544921875, a * 281.9858093261719);
    d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
    d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
    d.closePath();
    tb(d, b[Ka], b[5], Lb * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 124.633544921875, a * 291.9858093261719);
    d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
    d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
    d.closePath();
    tb(d, b[4], b[5], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 113.633544921875, a * 80.98580932617188);
    d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
    d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
    d.closePath();
    tb(d, b[4], b[Gt], a * Rh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 202.633544921875, a * 20.985809326171875);
    d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
    d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
    d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
    d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
    d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
    d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
    d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
    d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
    d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
    d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
    d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
    d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
    d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
    d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
    d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
    d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
    d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
    d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
    d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
    d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
    d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
    d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
    d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
    d.closePath();
    tb(d, b[2], b[3], Th * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 203.633544921875, a * 21.985809326171875);
    d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
    d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
    d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
    d.closePath();
    tb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.633544921875, a * 25.985809326171875);
    d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
    d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
    d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
    d.closePath();
    tb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 26.633544921875, a * 96.98580932617188);
    d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
    d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
    d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
    d.closePath();
    tb(d, b[vo]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 351.633544921875, a * 99.98580932617188);
    d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
    d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
    d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
    d.closePath();
    tb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 350.633544921875, a * 302.9858093261719);
    d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
    d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
    d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
    d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
    d.closePath();
    tb(d, b[fa]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 95.633544921875, a * 224.98580932617188);
    d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
    d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
    d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
    d.closePath();
    tb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 253.98580932617188);
    d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
    d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
    d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
    d.closePath();
    tb(d, b[3]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 195.633544921875, a * 251.98580932617188);
    d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
    d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
    d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
    d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
    d.closePath();
    tb(d, b[ta]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 316, a * 186.8020782470703);
    d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
    d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
    d.closePath();
    tb(d, b[dt], b[ph], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 340, a * 157.8020782470703);
    d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
    d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
    d.closePath();
    tb(d, b[za], b[Va], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 349, a * 136.8020782470703);
    d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
    d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
    d.closePath();
    tb(d, b[bg], b[id], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 278.75, a * 246.4375);
    d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
    d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
    d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
    d.closePath();
    tb(d, b[ol], b[Ij], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 310.75, a * 277.4375);
    d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
    d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
    d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
    d.closePath();
    tb(d, b[H], b[7], a * f);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 217.75, a * 257.4375);
    d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
    d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
    d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
    d.closePath();
    tb(d, b[za], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 289.4375);
    d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
    d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
    d.closePath();
    tb(d, b[dt], b[Lq], a * mj);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 171.75, a * 256.4375);
    d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
    d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
    d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
    d.closePath();
    tb(d, b[6], b[sb], a * gn);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 175.75, a * 289.9375);
    d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
    d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
    d.closePath();
    tb(d, b[hi], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.75, a * 314.4375);
    d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
    d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
    d.closePath();
    tb(d, b[6], b[Hj], qo * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.75, a * 313.4375);
    d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
    d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
    d.closePath();
    tb(d, b[Bt], b[7], zg * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 103.75, a * 244.4375);
    d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
    d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
    d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
    d.closePath();
    tb(d, b[So], b[ds], a * Rh);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 86.75, a * 182.4375);
    d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
    d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
    d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
    d.closePath();
    tb(d, b[6], b[7], a * Ai);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 44.75, a * 152.4375);
    d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
    d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
    d.closePath();
    tb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 31.75, a * 130.4375);
    d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
    d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
    d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
    d.closePath();
    tb(d, b[6], b[iq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 69.75, a * 274.4375);
    d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
    d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
    d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
    d.closePath();
    tb(d, b[6], b[Lq], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 165.75, a * 95.4375);
    d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
    d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
    d.closePath();
    tb(d, b[6], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 216.75, a * 94.4375);
    d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
    d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
    d.closePath();
    tb(d, b[_h], b[Ba], oj * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 211.75, a * 68.4375);
    d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
    d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
    d.closePath();
    tb(d, b[So], b[7], a * 4);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 169.75, a * 71.4375);
    d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
    d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
    d.closePath();
    tb(d, b[6], b[tt], xt * a);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 193.75, a * 160.4375);
    d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
    d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
    d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
    d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
    d.closePath();
    tb(d, b[8], b[9], a * 3);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
    d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
    d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
    d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
    d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
    d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
    d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
    d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
    d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
    d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
    d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
    d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
    d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
    d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
    d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
    d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
    d.closePath();
    tb(d, b[rd]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 173.8125);
    d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
    d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
    d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
    d.closePath();
    tb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
    d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
    d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
    d.closePath();
    tb(d, b[y]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
    d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
    d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
    d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
    d.closePath();
    tb(d, b[io]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
    d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
    d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
    d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
    d.closePath();
    tb(d, b[At]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 204.1999969482422, a * 201.8125);
    d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
    d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
    d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
    d.closePath();
    tb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
    d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
    d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
    d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
    d.closePath();
    tb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
    d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
    d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
    d.closePath();
    tb(d, b[Qb]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
    d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
    d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
    d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
    d.closePath();
    tb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 183.1999969482422, a * 196.8125);
    d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
    d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
    d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
    d.closePath();
    tb(d, b[11]);
    d.beginPath();
    d.lineCap = "round";
    d.lineJoin = "round";
    d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
    d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
    d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
    d.closePath();
    tb(d, b[la]);
    ab(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
    tb(d, b[Mq]);
    ab(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
    tb(d, b[dh]);
    ab(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
    tb(d, b[12]);
    ab(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
    tb(d, b[Wg]);
    return c;
  }
  function cm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 202;
    d.height = a * 202;
    e.translate(a * 2, a * 1);
    e.globalAlpha = 0.3;
    ab(e, a * 98, a * 99, a * A);
    tb(e, c[Lu]);
    e.globalAlpha = 0.5;
    ab(e, a * 98, a * 99, a * 90);
    tb(e, c[1]);
    return d;
  }
  function mm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 88;
    d.height = a * 88;
    e.save();
    e.translate(a * 44, a * 44);
    e.rotate(0.52);
    gb(e, 6, a * 43, a * 10);
    e.restore();
    tb(e, c[0], c[1], nh * a);
    return d;
  }
  function pm(a, b, c) {
    var d = document.createElement("canvas");
    var e = d.getContext("2d");
    d.width = a * 400;
    d.height = a * 400;
    e.save();
    e.translate(a * 204, a * 195.0833282470703);
    e.rotate(10.16);
    nb(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
    e.restore();
    tb(e, c[Kr], c[er], a * Ih);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 58.5, a * 226.5833282470703);
    e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
    e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
    e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
    e.closePath();
    tb(e, c[2], c[Fh], a * 4);
    e.save();
    e.translate(a * 197, a * 169.0833282470703);
    e.rotate(10.16);
    nb(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
    e.restore();
    tb(e, c[th], c[Ud], a * X);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 226.5, a * 24.583328247070312);
    e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
    e.closePath();
    tb(e, lq, c[Br], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
    e.closePath();
    tb(e, c[4], c[Cs], lr * a);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
    e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
    e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
    e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
    e.closePath();
    tb(e, c[f], c[1], a * 8);
    e.beginPath();
    e.lineCap = "round";
    e.lineJoin = "round";
    e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
    e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
    e.closePath();
    tb(e, c[Dt], c[1], a * 8);
    e.save();
    e.translate(a * 249.63333129882812, a * 120.89999389648438);
    e.rotate(7.04);
    nb(e, a * -58.5, a * -32, a * 117, a * 64, a * zq);
    e.restore();
    tb(e, c[5]);
    return d;
  }
  function Cm() {
    if (Wh < Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length) {
      var b = {
        x: Yw.ⲆⲆⵠΔⲆ.translate.x,
        y: Yw.ⲆⲆⵠΔⲆ.translate.y - mo * 120
      };
    } else {
      b = {
        x: Yw.ⲆⲆⵠΔⲆ.translate.x,
        y: Yw.ⲆⲆⵠΔⲆ.translate.y - mo * 50
      };
    }
    to.globalAlpha = 0.8;
    var c = ΔΔ[Cr.ΔⵠⵠᐃⲆᐃⲆ][gf.time];
    Em(to, c, b.x, b.y);
    to.globalAlpha = Aj;
    if (-Ud < Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.x) {
      to.fillStyle = "#660000";
      ab(to, b.x + mo * Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.x, b.y + mo * Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.y, mo * 5);
      to.fill();
    }
    var d = mo;
    for (var f = Yw.ⲆⲆⵠΔⲆ.ΔⲆᐃⵠ, g = Gd; f.length > g; g++) {
      var h = f[g];
      gf.time;
      to.fillStyle = "#ff0000";
      ab(to, b.x + h.x / (gf.ᐃᐃΔΔⲆ * 100) * 193 * mo, b.y + h.y / (Lh * gf.ΔᐃⲆΔⲆ) * 193 * mo, mo * kn);
      to.fill();
    }
    var i = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
    if (i) {
      to.fillStyle = gf.time ? "#fff" : "#e39716";
      ab(to, b.x + mo * (i.x / (gf.ᐃᐃΔΔⲆ * 100) * 193), b.y + mo * (i.y / (gf.ΔᐃⲆΔⲆ * 100) * 193), mo * 4);
      to.fill();
    }
    mo = d;
  }
  function Tm() {
    if (!Ww.ΔΔΔⲆ.open && !Ww.ᐃⲆⲆⵠⲆ.open) {
      Ww.ⵠᐃᐃΔ.open = sr;
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = bw.ΔᐃⲆⵠΔⵠΔ;
      if (b) {
        for (var d = kq; d < fw.length; d++) {
          for (var e = fw[d][0], f = fw[d][sd], j = 0; j < gf.ⵠᐃΔ[e].length; j++) {
            var k = gf.ⵠᐃΔ[e][j];
            var m = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(k, b);
            if (c > m) {
              c = m;
              Ww.ⵠᐃᐃΔ.ⵠΔⵠᐃΔⵠᐃ = f;
              Ww.ⵠᐃᐃΔ.type = e;
              Ww.ⵠᐃᐃΔ.open = true;
              Ww.ⵠᐃᐃΔ.ⲆΔⲆⵠⵠᐃⵠ = k.info & 255;
              Ww.ⵠᐃᐃΔ.ΔᐃⵠᐃⲆⲆⲆ = (k.info & 65280) >> 8;
              Ww.ⵠᐃᐃΔ.ΔⲆᐃΔ = k.ΔⲆᐃΔ;
              Ww.ⵠᐃᐃΔ.ᐃᐃΔΔΔ = k.id;
            }
          }
        }
        if (bw.ΔᐃⲆⵠΔⵠΔ > c) {
          var p;
          var q = ΔΔ[Cr.ᐃΔⲆᐃΔⵠⲆ];
          var l = (g = Yw.ⵠΔⲆᐃⲆΔᐃ).info.translate.x - 33;
          Em(to, q, l, 0);
          if (Mn < Ww.ⵠᐃᐃΔ.ⲆΔⲆⵠⵠᐃⵠ) {
            g.ᐃⵠⲆᐃ(to);
            if ((p = Ww.ⵠᐃᐃΔ.ⲆΔⲆⵠⵠᐃⵠ) > 1) {
              km(p, g);
            }
          }
          switch (Ww.ⵠᐃᐃΔ.ⵠΔⵠᐃΔⵠᐃ) {
            case Dr.ᐃᐃᐃⵠ:
              var g = Yw.ⲆⵠⵠᐃΔⲆⵠ;
              break;
            case Dr.ⲆΔᐃⲆ:
              g = Yw.ΔΔᐃⵠⲆⲆⲆ;
              break;
            case Dr.ⵠⲆⲆΔ:
              g = Yw.ΔΔΔᐃⵠⲆⲆ;
              break;
            case Dr.ᐃᐃᐃΔ:
              g = Yw.ΔⲆⵠⵠΔⲆⲆ;
              break;
            case Dr.ⵠⲆᐃⲆ:
              g = Yw.ΔⲆΔⵠⲆⵠⲆ;
          }
          if (Ww.ⵠᐃᐃΔ.ΔᐃⵠᐃⲆⲆⲆ > 0) {
            g.ᐃⵠⲆᐃ(to);
            if ((p = Ww.ⵠᐃᐃΔ.ΔᐃⵠᐃⲆⲆⲆ) > bt) {
              km(p, g);
            }
          }
        }
      }
    }
  }
  function fm() {
    if (!Ww.ΔΔΔⲆ.open && !Ww.ᐃⲆⲆⵠⲆ.open && !Ww.ⵠΔᐃⵠ.open && !Ww.ⲆΔᐃΔ.open && !Ww.ⵠᐃᐃΔ.open) {
      Ww.sign.open = false;
      var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var b = bw.ⵠⲆΔᐃᐃⵠⵠ;
      if (a) {
        for (var c = Dh; c < gf.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ].length; c++) {
          var d = gf.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ][c];
          var e = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(d, a);
          if (b > e && d.info === 0 && d.ΔⲆᐃΔ === Ww.id) {
            Ww.sign.open = true;
            b = e;
            Ww.sign.ᐃᐃΔΔΔ = d.id;
          }
        }
        if (bw.ⵠⲆΔᐃᐃⵠⵠ > b) {
          Yw.sign.button.ᐃⵠⲆᐃ(to);
        }
      }
    }
  }
  function zm(a, b, c) {
    var d = ΔΔ[Cr.ⵠⵠⲆᐃⵠΔΔ][a];
    var e = b.info.translate.x + U * mo;
    var f = b.info.translate.y + _g * mo;
    if (Pv == b.info.state || c) {
      f += mo * 5;
    }
    Em(to, d, e, f);
  }
  function ym() {
    Ww.ΔΔΔⲆ.id = -1;
    Ww.ΔΔΔⲆ.lock = Pq;
    Ww.ΔΔΔⲆ.locked = Bj;
    Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ = fl;
    Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ = false;
    Ww.ΔΔΔⲆ.open = false;
    var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
    var c = bw.ᐃᐃᐃΔΔᐃΔ;
    if (b) {
      for (var d = 0; gf.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ].length > d; d++) {
        var e = gf.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ][d];
        var f = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b);
        if (c > f) {
          c = f;
          Ww.ΔΔΔⲆ.open = true;
          Ww.ΔΔΔⲆ.id = e.action < 2 ? -jh : Math.floor((e.action - 1) / kn);
          Ww.ΔΔΔⲆ.ⲆᐃⵠⲆ = e.info;
          Ww.ΔΔΔⲆ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
          Ww.ΔΔΔⲆ.ᐃᐃΔΔΔ = e.id;
          Ww.ΔΔΔⲆ.locked = e.lock;
          Ww.ΔΔΔⲆ.lock = !!e.lock && Ww.id != e.ΔⲆᐃΔ && !Ww.ᐃᐃᐃⵠΔⵠⲆ(e.ΔⲆᐃΔ) && sh;
          Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ = Ww.id === e.ΔⲆᐃΔ && !Ww.ΔΔΔⲆ.locked && Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔⲆⲆⲆⲆ) != -1 && sh;
          if (Ww.ΔΔΔⲆ.locked && -Ud != Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⵠⲆⲆⵠΔ)) {
            Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ = true;
          }
        }
      }
      if (c < bw.ᐃᐃᐃΔΔᐃΔ) {
        var g = ΔΔ[Cr.ⵠⲆΔΔⲆⵠᐃ];
        var j = Yw.ΔⵠΔ[_s];
        var k = Math.floor(j.info.translate.x + (j.info.Ⲇⵠ[0].width - g.width) / 2);
        var m = Math.floor(j.info.translate.y + (j.info.Ⲇⵠ[0].height - g.height) / Ok) + Gg;
        Em(to, g, k, m);
        if ((!Ww.ΔΔΔⲆ.lock || Ww.id === Ww.ΔΔΔⲆ.ΔⲆᐃΔ) && Ww.ΔΔΔⲆ.id >= 0) {
          (j = Yw.ΔⵠΔ[Ww.ΔΔΔⲆ.id]).ᐃⵠⲆᐃ(to);
          var h = Ww.ΔΔΔⲆ.ⲆᐃⵠⲆ;
          if (Ud < h) {
            km(h, j);
          }
        }
        if (Ww.ΔΔΔⲆ.lock) {
          Yw.ᐃΔΔᐃⲆⵠⲆ.ᐃⵠⲆᐃ(to);
        } else if (Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ) {
          Yw.ⵠΔⲆᐃⵠΔⲆ.ᐃⵠⲆᐃ(to);
        }
        if (Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ) {
          Yw.ᐃΔΔⵠᐃΔⵠ.ᐃⵠⲆᐃ(to);
        }
      }
    }
  }
  function wm() {
    if (!Ww.ΔΔΔⲆ.open) {
      Ww.ᐃⲆⲆⵠⲆ.ⲆᐃⵠⲆ = 0;
      Ww.ᐃⲆⲆⵠⲆ.open = false;
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = bw.ΔⵠⵠΔΔⲆⵠ;
      if (b) {
        for (var d = 0; d < gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ].length; d++) {
          var e = gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ][d];
          var f = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Ww.ᐃⲆⲆⵠⲆ.open = true;
            Ww.ᐃⲆⲆⵠⲆ.ⲆᐃⵠⲆ = e.info;
            Ww.ᐃⲆⲆⵠⲆ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            Ww.ᐃⲆⲆⵠⲆ.ᐃᐃΔΔΔ = e.id;
          }
        }
        if (c < bw.ΔⵠⵠΔΔⲆⵠ) {
          var g = ΔΔ[Cr.ⲆⵠⵠΔⲆΔΔ];
          var j = Yw.ⲆⲆΔᐃⵠᐃᐃ;
          var a = Math.floor(j.info.translate.x + (j.info.Ⲇⵠ[0].width - g.width) / 2);
          var k = Math.floor(j.info.translate.y + (j.info.Ⲇⵠ[Gd].height - g.height) / 2) + ta;
          Em(to, g, a, k);
          if (Ww.ᐃⲆⲆⵠⲆ.ⲆᐃⵠⲆ > 0) {
            j.ᐃⵠⲆᐃ(to);
            var h = Ww.ᐃⲆⲆⵠⲆ.ⲆᐃⵠⲆ;
            if (Eg < h) {
              km(h, j);
            }
          }
        }
      }
    }
  }
  function Pm() {
    if (!Ww.ΔΔΔⲆ.open && !Ww.ᐃⲆⲆⵠⲆ.open) {
      Ww.ⵠΔᐃⵠ.open = false;
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = bw.ⲆᐃᐃΔᐃᐃⲆ;
      if (b) {
        for (var d = 0; d < gf.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ].length; d++) {
          var e = gf.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ][d];
          var f = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Ww.ⵠΔᐃⵠ.open = vr;
            Ww.ⵠΔᐃⵠ.ᐃΔᐃⵠⲆⲆΔ = e.info & 255;
            Ww.ⵠΔᐃⵠ.ⵠᐃᐃⵠⵠ = (e.info & 65280) >> db;
            Ww.ⵠΔᐃⵠ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            Ww.ⵠΔᐃⵠ.ᐃᐃΔΔΔ = e.id;
          }
        }
        if (bw.ⲆᐃᐃΔᐃᐃⲆ > c) {
          var g = ΔΔ[Cr.ᐃⵠᐃΔⵠⲆᐃ];
          var j = (k = Yw.ⵠⲆΔΔᐃᐃⵠ).info.translate.x - 33;
          Em(to, g, j, 0);
          if (Ww.ⵠΔᐃⵠ.ᐃΔᐃⵠⲆⲆΔ > 0) {
            k.ᐃⵠⲆᐃ(to);
            if ((a = Ww.ⵠΔᐃⵠ.ᐃΔᐃⵠⲆⲆΔ) > 1) {
              km(a, k);
            }
          }
          var a;
          var k = Yw.ΔᐃᐃΔΔΔᐃ;
          if (rh < Ww.ⵠΔᐃⵠ.ⵠᐃᐃⵠⵠ) {
            k.ᐃⵠⲆᐃ(to);
            if ((a = Ww.ⵠΔᐃⵠ.ⵠᐃᐃⵠⵠ) > 1) {
              km(a, k);
            }
          }
        }
      }
    }
  }
  function Am() {
    if (Ww.reconnect.enabled) {
      to.globalAlpha = 0.9;
      to.fillStyle = "#000";
      nb(to, lo - 150, gq - 90, 300, 180, Wa);
      to.fill();
      to.globalAlpha = Br;
      var a = ΔΔ[Cr.ⵠⲆᐃΔΔⵠΔ];
      to.save();
      Ww.reconnect.rotate = (Ww.reconnect.rotate + pf * 2) % (xl * Math.PI);
      to.translate(ro / _l, so / Uh - 25);
      to.rotate(Ww.reconnect.rotate);
      Em(to, a, -a.width / 2, -a.height / 2);
      to.restore();
      a = ΔΔ[Cr.ΔΔΔΔᐃᐃⵠ];
      Em(to, a, (ro - a.width) / 2, (so - a.height) / yh + 25);
    }
  }
  function km(a, b) {
    ΔΔ[Cr.ⵠⵠ][a] ||= Bu(mo, "x" + a, As, "#FFF");
    var c = ΔΔ[Cr.ⵠⵠ][a];
    var d = b.info.translate.x + b.info.Ⲇⵠ[Mn].width - c.width - mo * Vg;
    var e = b.info.translate.y + b.info.Ⲇⵠ[Gd].height - c.height - mo * Ch;
    if (b.info.state == Pv) {
      e += mo * Bb;
    }
    Em(to, c, d, e);
  }
  function xm() {
    Ww.ᐃⲆⲆⲆⲆ.id = -1;
    Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ = -1;
    if (!Ww.ⵠⵠⵠⵠⲆⵠⵠ && !Ww.ᐃⲆⲆⲆⲆ.wait && !Ww.ⵠⲆᐃᐃⲆ) {
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = bw.ΔᐃᐃⲆⵠⲆΔⲆⲆ;
      if (b) {
        for (var d = 0; gf.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ].length > d; d++) {
          var e = gf.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ][d];
          var f = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Ww.ᐃⲆⲆⲆⲆ.id = e.id;
            Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            Ww.ᐃⲆⲆⲆⲆ.info = e.info;
            Ww.ᐃⲆⲆⲆⲆ.lock = (e.info & sk) >> 4;
          }
        }
      }
      var g = Yw.ⵠᐃΔⵠΔ;
      Yw.ⵠᐃΔⵠΔ = -1;
      if (Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ == -Fo || Ww.ⲆⲆⲆⵠⵠ.length != 0 && Ww.id != Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ) {
        if (tr != Ww.ⲆⲆⲆⵠⵠ.length && Ww.ⲆⲆⲆⵠⵠ[Fj] != Ww.id) {
          Yw.ⵠᐃΔⵠΔ = aw.ⵠⵠⵠⵠΔᐃᐃ;
        } else if (Ww.ⲆⲆⲆⵠⵠ.length != 0 && Ww.id == Ww.ⲆⲆⲆⵠⵠ[0]) {
          Yw.ⵠᐃΔⵠΔ = aw.ⵠⲆⵠⵠᐃⲆⲆ;
        } else if (xb != Ww.ⲆⲆⲆⵠⵠ.length) {
          Yw.ⵠᐃΔⵠΔ = aw.ⵠⲆⵠᐃΔᐃΔ;
        }
      } else if (xb == Ww.ⲆⲆⲆⵠⵠ.length && Ww.ᐃⲆⲆⲆⲆ.info >= Sl) {
        Yw.ⵠᐃΔⵠΔ = aw.ⵠΔⵠᐃᐃᐃⲆ;
      } else if (Ww.ⲆⲆⲆⵠⵠ.length == Lg) {
        Yw.ⵠᐃΔⵠΔ = aw.ⵠⲆⵠᐃΔᐃΔ;
      } else {
        Yw.ⵠᐃΔⵠΔ = aw.ⵠΔⲆⵠᐃⲆᐃ;
      }
      if (Yw.ⵠᐃΔⵠΔ != -1) {
        Yw.ⲆΔⲆΔΔ[Yw.ⵠᐃΔⵠΔ].button.ᐃⵠⲆᐃ(to);
      }
      var h = document.getElementById("team_box").style;
      if (Yw.ⵠᐃΔⵠΔ != -er && g != Yw.ⵠᐃΔⵠΔ && h.display == "inline-block") {
        Yw.ⲆΔⲆΔΔ[Yw.ⵠᐃΔⵠΔ].action();
      }
    }
  }
  function Jm() {
    if (Ww.ⵠΔⵠᐃⵠⲆⲆ) {
      to.globalAlpha = 0.5;
      to.fillStyle = "#000";
      to.fillRect(Gd, Fj, ro, so);
      to.globalAlpha = 0.8;
      var b = ΔΔ[Cr.ⲆⵠⵠⵠΔᐃΔ][gf.time];
      var c = lo - b.width / 2;
      var d = gq - b.height / 2;
      Em(to, b, c, d);
      to.globalAlpha = Eg;
      if (Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.x > -Ur) {
        to.fillStyle = "#660000";
        ab(to, c + mo * (Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.x * Kk), d + Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.y * B * mo, cg * mo);
        to.fill();
      }
      for (var e = Yw.ⲆⲆⵠΔⲆ.ΔⲆᐃⵠ, f = 0; e.length > f; f++) {
        var g = e[f];
        gf.time;
        to.fillStyle = "#ff0000";
        ab(to, c + mo * (g.x / (gf.ᐃᐃΔΔⲆ * 100) * 600), d + g.y / (Oj * gf.ΔᐃⲆΔⲆ) * 600 * mo, mo * 6);
        to.fill();
      }
      var h = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      if (h) {
        to.fillStyle = gf.time ? "#fff" : "#e39716";
        ab(to, c + h.x / (gf.ᐃᐃΔΔⲆ * or) * 600 * mo, d + h.y / (gf.ΔᐃⲆΔⲆ * me) * 600 * mo, mo * fs);
        to.fill();
      }
    }
  }
  function Mm() {
    var a = Yw.ᐃⲆᐃΔᐃ;
    var b = a.id;
    if (a.ⵠᐃⵠⵠᐃ === dn && a.display === bt) {
      if (ᐃΔⵠΔΔ[b] === undefined) {
        ᐃΔⵠΔΔ[b] = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          var e = st[b];
          d.font = "20px Baloo Paaji";
          var f = Ko;
          if (e.length >= 1) {
            f = Math.max(Lg, d.measureText(e[Mn]).width);
          }
          d.font = "17px Baloo Paaji";
          if (e.length >= 2) {
            f = Math.max(f, d.measureText(e[ub]).width);
          }
          d.font = "14px Baloo Paaji";
          ut = 2;
          for (; ut < e.length; ut++) {
            f = Math.max(f, d.measureText(e[ut]).width);
          }
          var g = f + 35;
          var h = 0;
          h = Aj === e.length ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
          c.width = g;
          c.height = h;
          nb(d, Dh, 0, g, h, 10);
          d.fillStyle = "#000000";
          d.globalAlpha = 0.5;
          d.fill();
          if (Fo <= e.length) {
            d.textBaseline = "middle";
            d.font = "20px Baloo Paaji";
            d.globalAlpha = Yt;
            d.fillStyle = "#e2c340";
            d.fillText(e[Lg], 15, 28);
          }
          if (e.length >= 2) {
            d.font = "17px Baloo Paaji";
            d.fillStyle = "#ffffff";
            d.fillText(e[ik], 15, 55);
            h = 55;
          }
          if (e.length >= Kk) {
            d.font = "14px Baloo Paaji";
            d.globalAlpha = 0.7;
            ut = pa;
            for (; ut < e.length; ut++) {
              d.fillText(e[ut], 15, h + 28);
              h += 26;
            }
          }
          return c;
        }(b);
      }
      if (a.ΔⲆᐃᐃ === Eg) {
        Em(to, ᐃΔⵠΔΔ[b], a.x, a.y);
      } else if (ro < a.x - 80 + ᐃΔⵠΔΔ[b].width) {
        Em(to, ᐃΔⵠΔΔ[b], ro - ᐃΔⵠΔΔ[b].width - 10, a.y - ᐃΔⵠΔΔ[b].height - 10);
      } else {
        Em(to, ᐃΔⵠΔΔ[b], a.x - 80, a.y - ᐃΔⵠΔΔ[b].height - ll);
      }
    }
  }
  function Bm() {
    Ww.ΔΔᐃᐃⵠ.open = false;
    var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
    var b = bw.ⵠⲆᐃᐃΔᐃⲆ;
    if (a) {
      for (var c = 0; c < gf.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ].length; c++) {
        var d = gf.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ][c];
        var e = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(d, a);
        if (b > e) {
          b = e;
          Ww.ΔΔᐃᐃⵠ.open = true;
          Ww.ΔΔᐃᐃⵠ.ΔⲆᐃΔ = d.ΔⲆᐃΔ;
          Ww.ΔΔᐃᐃⵠ.ᐃᐃΔΔΔ = d.id;
        }
      }
      if (b < bw.ⵠⲆᐃᐃΔᐃⲆ) {
        Yw.ΔΔᐃᐃⵠ.ᐃⵠⲆᐃ(to);
      }
    }
  }
  function Dm() {
    if (!Ww.ΔΔΔⲆ.open && !Ww.ᐃⲆⲆⵠⲆ.open && !Ww.ⵠΔᐃⵠ.open && !Ww.ⵠᐃᐃΔ.open) {
      Ww.ⲆΔᐃΔ.open = Bg;
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = bw.ᐃᐃΔⵠΔᐃⲆ;
      if (b) {
        for (var d = Ko; gf.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ].length > d; d++) {
          var e = gf.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ][d];
          var f = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b);
          if (f < c) {
            c = f;
            Ww.ⲆΔᐃΔ.open = true;
            Ww.ⲆΔᐃΔ.ⲆΔⲆⵠⵠᐃⵠ = e.info & 31;
            Ww.ⲆΔᐃΔ.ⵠᐃᐃⵠⵠ = (e.info & 992) >> 5;
            Ww.ⲆΔᐃΔ.ΔⲆⵠΔⵠⵠⵠ = (e.info & 31744) >> Dl;
            Ww.ⲆΔᐃΔ.ΔⲆᐃΔ = e.ΔⲆᐃΔ;
            Ww.ⲆΔᐃΔ.ᐃᐃΔΔΔ = e.id;
          }
        }
        if (bw.ᐃᐃΔⵠΔᐃⲆ > c) {
          var g = ΔΔ[Cr.ⲆᐃⲆᐃⵠᐃᐃ];
          var j = (a = Yw.ΔᐃⵠⵠⲆⵠᐃ).info.translate.x - 32;
          Em(to, g, j, 0);
          if (Ww.ⲆΔᐃΔ.ⲆΔⲆⵠⵠᐃⵠ > Jt) {
            a.ᐃⵠⲆᐃ(to);
            if ((k = Ww.ⲆΔᐃΔ.ⲆΔⲆⵠⵠᐃⵠ) > Cs) {
              km(k, a);
            }
          }
          var a = Yw.ᐃⵠᐃΔⲆΔⵠ;
          if (Ww.ⲆΔᐃΔ.ΔⲆⵠΔⵠⵠⵠ > 0) {
            a.ᐃⵠⲆᐃ(to);
            if ((k = Ww.ⲆΔᐃΔ.ΔⲆⵠΔⵠⵠⵠ) > ik) {
              km(k, a);
            }
          }
          var k;
          a = Yw.ΔⲆᐃΔⲆⵠᐃ;
          if (Jt < Ww.ⲆΔᐃΔ.ⵠᐃᐃⵠⵠ) {
            a.ᐃⵠⲆᐃ(to);
            if ((k = Ww.ⲆΔᐃΔ.ⵠᐃᐃⵠⵠ) > 1) {
              km(k, a);
            }
          }
        }
      }
    }
  }
  function Em(b, c, d, e, f, g, i, a, j, h) {
    if (vl === c.ⵠᐃⵠⵠⵠᐃᐃ || c.ⵠᐃⵠⵠⵠᐃᐃ() === 1) {
      if (h !== undefined) {
        b.drawImage(c, d, e, Math.max(ik, f), Math.max(1, g), i, a, j, h);
      } else if (g !== undefined) {
        b.drawImage(c, d, e, f, g);
      } else {
        b.drawImage(c, d, e);
      }
    }
  }
  ᐃΔⵠΔΔ = [];
  ᐃⵠΔᐃΔΔⵠ = [];
  var Im = [];
  function Sm() {
    var a = gf.ⲆⲆⵠΔⵠ;
    var b = ΔΔ[Cr.ΔᐃᐃΔᐃΔΔ][gf.time];
    Em(to, b, a.translate.x, a.translate.y);
    to.save();
    to.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
    gf.ⲆⲆⵠΔⵠ.now = (new Date().getTime() - a.ⵠⲆⵠⲆⲆ + a.ⵠΔΔΔⲆ) % bw.ⵠⵠΔ;
    var c = Math.PI * Qs * gf.ⲆⲆⵠΔⵠ.now / bw.ⵠⵠΔ - Math.PI / 2;
    to.rotate(c);
    Em(to, ΔΔ[Cr.ⲆⵠⵠⵠᐃⲆΔ], -b.width / 2, -b.height / eh);
    to.restore();
  }
  function Qm() {
    var a = -ea;
    if (Ww.ⲆⵠⵠⵠⲆ.enabled) {
      var b = ΔΔ[Cr.ᐃΔⵠⵠᐃⵠⲆ];
      Em(to, b, Ww.ⲆⵠⵠⵠⲆ.translate.x, Ww.ⲆⵠⵠⵠⲆ.translate.y + a);
      a += 70;
    }
    if (Ww.ΔΔᐃᐃⵠᐃⵠ === 1) {
      b = ΔΔ[Cr.ᐃᐃᐃⵠΔᐃᐃ];
      Em(to, b, Ww.ⲆⵠⵠⵠⲆ.translate.x, Ww.ⲆⵠⵠⵠⲆ.translate.y + a);
      a += 70;
    } else if (Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.x < 0.25 || Ww.ᐃⲆΔᐃ.ⲆⲆⵠⵠΔⵠᐃ.x < 0.25 || Ww.ᐃⲆΔᐃ.ᐃⵠⵠΔⵠΔⵠ.x < 0.25 || Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.x < 0.25 || Ww.ᐃⲆΔᐃ.ᐃⲆⵠⵠⵠ.x < 0.25) {
      b = ΔΔ[Cr.ⵠⲆᐃΔⵠⵠⲆ];
      Em(to, b, Ww.ⲆⵠⵠⵠⲆ.translate.x, Ww.ⲆⵠⵠⵠⲆ.translate.y + a);
      a += 70;
    }
    if (jj < Ww.ⵠⲆⲆᐃⵠ) {
      b = ΔΔ[Cr.ⵠⲆⵠΔΔⲆⵠ];
      Em(to, b, Ww.ⲆⵠⵠⵠⲆ.translate.x, Ww.ⲆⵠⵠⵠⲆ.translate.y + a);
      var c = Im[Ww.ⵠⲆⲆᐃⵠ];
      if (c === kj) {
        c = Bu(mo, Ww.ⵠⲆⲆᐃⵠ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", ss);
        Im[Ww.ⵠⲆⲆᐃⵠ] = c;
      }
      if (ch > Ww.ⵠⲆⲆᐃⵠ) {
        Em(to, c, Ww.ⲆⵠⵠⵠⲆ.translate.x - 39, Ww.ⲆⵠⵠⵠⲆ.translate.y + a + 20);
      } else {
        Em(to, c, Ww.ⲆⵠⵠⵠⲆ.translate.x - 46, Ww.ⲆⵠⵠⵠⲆ.translate.y + a + 20);
      }
    }
  }
  function _m(a) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && tq == this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = sr;
      }
      var b = mo * ((Yt - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var c = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * b;
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = tr;
      d = 0;
    }
    if (this.ΔⲆᐃⵠⲆ.Ⲇᐃⵠ()) {
      this.color += 0.2 + Math.random() * 0.3;
    }
    Ⲇⵠ = ΔΔ[Cr.Ⲇᐃᐃᐃᐃ][Math.floor(this.id + this.color) % 5][gf.time];
    ⵠΔΔ = this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + c, -ᐃⵠⲆ / 2 + d, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Fm(a) {
    if ((a = a / 100) <= 0.8) {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = aa;
        }
        var b = (dn - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
        var c = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * b;
        var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
      } else {
        c = 0;
        d = Dh;
      }
      to.globalAlpha = 0.5;
      lb(to, c, d, mo * 18, a);
      tb(to, null, "#000000", mo * 18);
      to.globalAlpha = V;
      lb(to, c, d, mo * 18, a);
      tb(to, null, Cr.ⲆⵠⵠᐃⵠᐃΔ[gf.time], mo * 6);
      to.restore();
    }
  }
  function Rm() {
    var a = Ww.ΔⲆᐃᐃ;
    if (a.ᐃΔⲆΔⲆ) {
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + b.x, Ww.ᐃᐃᐃ.y + b.y);
      var c = ΔΔ[Cr.ΔᐃΔⵠⵠⲆⵠ];
      var d = -c.width / Uh;
      var e = -c.height / 2 - mo * 125;
      Em(to, c, d, e);
      to.beginPath();
      to.lineWidth = mo * mh;
      to.strokeStyle = Cr.ᐃⵠⲆᐃⲆᐃᐃ[gf.time];
      to.lineCap = "round";
      to.arc(Ko, e + c.height / _l, mo * 25, 0, a.timeout.ᐃⲆⵠ * ($r * Math.PI));
      to.stroke();
      to.restore();
    }
  }
  function jm() {
    for (var b = Ww.ᐃᐃⲆᐃ, c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ], d = 0; d < b.ᐃⵠⲆΔⲆ.length; d++) {
      var e = b.ᐃⵠⲆΔⲆ[d];
      var f = false;
      if ((c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ]) && (e.id == c.right || c.ⵠΔⵠⲆᐃ == e.id && c.ⵠΔⵠⲆᐃ > 0)) {
        f = true;
        Em(to, e.info.Ⲇⵠ[xl], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
      } else {
        e.ᐃⵠⲆᐃ(to);
      }
      var g = Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[e.id];
      if (er < g) {
        km(g, e);
      }
      if (Wh < g) {
        zm(d, e, f);
      }
      var h = Ww.ΔΔΔⲆ;
      if (!!h.open && (h.id < 0 || h.id == e.id) && (!h.lock || h.ΔⲆᐃΔ == Ww.id)) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
      if (Ww.ᐃⲆⲆⵠⲆ.open && Dr.ΔΔⲆⵠ == e.id) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
      if (Ww.ⲆΔⵠΔⲆ.open && e.id == Dr.Ⲇᐃⵠⵠᐃ) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
      if (Ww.ⵠΔᐃⵠ.open && Dr.ᐃᐃΔⲆΔ == e.id) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
      if (Ww.ⵠᐃᐃΔ.open && Dr.ΔΔⲆⵠ == e.id) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
      if (!!Ww.ⲆΔᐃΔ.open && (Dr.ΔΔⲆⵠ == e.id || e.id == Dr.ΔᐃᐃⲆᐃ)) {
        Yw.ᐃⲆⲆΔᐃ[e.id].ᐃⵠⲆᐃ(to);
      }
    }
    if (e && b.max > d) {
      var j = ΔΔ[Cr.ⲆΔΔᐃᐃⲆⲆ][ib];
      ᐃⵠ = e.info.translate.x;
      ᐃⲆⲆ = e.info.translate.y;
      Δⵠᐃⵠ = Yt;
      for (; d < b.max; d++, Δⵠᐃⵠ++) {
        Em(to, j, ᐃⵠ + Δⵠᐃⵠ * (j.width + 5), ᐃⲆⲆ);
      }
    }
  }
  function Lm(a) {
    if ((a = a / 100) <= 0.95) {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
        }
        var b = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
        var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
        var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
      } else {
        c = Gd;
        d = 0;
      }
      to.globalAlpha = 0.5;
      lb(to, c, d, mo * 28, a);
      tb(to, null, "#000000", mo * no);
      to.globalAlpha = 1;
      lb(to, c, d, mo * 28, a);
      tb(to, null, Cr.ᐃⵠⲆᐃⲆᐃᐃ[gf.time], ol * mo);
      to.restore();
    }
  }
  function Wm() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Bh) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = ue;
      }
      var a = mo * ((sd - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var b = a * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = kq;
    }
    Ⲇⵠ = ΔΔ[Cr.ⲆΔΔⲆⵠ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + b, -ᐃⵠⲆ / _t + c, ⵠΔΔ, ᐃⵠⲆ);
    if (this.lock) {
      Ⲇⵠ = ΔΔ[Cr.ΔⲆⲆⲆⲆ][gf.time];
      ⵠΔΔ = -Ⲇⵠ.width;
      ᐃⵠⲆ = -Ⲇⵠ.height;
      Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + b - mo * 1, -ᐃⵠⲆ / Xn + c, ⵠΔΔ, ᐃⵠⲆ);
    }
    to.restore();
  }
  function Gm() {
    var b = Ww.ΔΔᐃⵠΔ;
    var c = Yw.ⵠⵠⲆⲆ;
    if (b.Ⲇᐃⵠ) {
      b.Ⲇᐃⵠ = Zh;
      var d = b.ΔᐃⲆᐃΔ;
      var e = c.ⵠᐃ.width;
      var f = c.ⵠᐃ.height;
      var g = c.Δ;
      var i = gf.ΔⲆᐃⵠ;
      var a = kk;
      g.clearRect(0, 0, e, f);
      g.drawImage(c.Ⲇⵠ, 0, 0);
      for (var j = 0; d.length > j; j++) {
        var k = i[d[j]];
        if ((bw.ΔⵠΔⲆⵠⲆΔ !== gf.mode || k.ᐃΔⲆⵠΔ !== "spectator") && (bw.ⲆᐃᐃΔⵠ !== gf.mode || k.ⲆΔⲆⵠ !== bw.ⲆⵠᐃⲆⲆᐃᐃ)) {
          if (d[j] == Ww.id) {
            a = true;
            if (gf.mode === bw.ᐃᐃⵠᐃΔ && bw.ᐃᐃΔⵠⲆᐃᐃ === k.ⲆΔⲆⵠ) {
              ⵠⲆ = "#FF0000";
            } else {
              ⵠⲆ = hj[Ok];
            }
          } else if (bw.ᐃᐃⵠᐃΔ === gf.mode && k.ⲆΔⲆⵠ === bw.ᐃᐃΔⵠⲆᐃᐃ) {
            ⵠⲆ = "#990000";
          } else {
            ⵠⲆ = "#A1BDCD";
          }
          g.drawImage(Bu(mo, "" + (j + js), mo * Hg, ⵠⲆ), mo * Ye, mo * (40 + j * 22));
          if (!k.ΔΔⵠΔᐃᐃᐃ) {
            k.ΔΔⵠΔᐃᐃᐃ = Bu(mo, k.ᐃΔⲆⵠΔ, mo * 15, ⵠⲆ, undefined, undefined, On, vl, mo * 110);
          }
          g.drawImage(k.ΔΔⵠΔᐃᐃᐃ, mo * 39, mo * (40 + j * 22));
          g.drawImage(Bu(mo, ⵠⵠⵠⲆ.ᐃΔⲆⲆⲆⵠᐃ(k.ⲆⲆⲆᐃⵠ), mo * 15, ⵠⲆ), mo * 156, mo * (40 + j * 22));
        }
      }
      if (!a) {
        if (gf.mode === bw.ⲆᐃⵠΔΔ || bw.ᐃᐃⵠᐃΔ === gf.mode || gf.mode === bw.ⲆᐃⲆⵠΔ || gf.mode === bw.ⲆᐃⲆΔⵠⵠⲆ || bw.ⵠⵠᐃᐃΔ === gf.mode || bw.ΔⵠΔⲆⵠⲆΔ === gf.mode && !Ww.ⵠⵠⵠⵠⲆⵠⵠ || bw.ⲆᐃᐃΔⵠ === gf.mode && !Ww.ⵠⲆᐃᐃⲆ) {
          g.drawImage(ΔΔ[Cr.ᐃᐃⵠΔᐃⵠⲆ], mo * 15, (46 + j * 22) * mo);
          g.drawImage(Bu(mo, ⵠⵠⵠⲆ.ᐃΔⲆⲆⲆⵠᐃ(gf.ΔⲆᐃⵠ[Ww.id].ⲆⲆⲆᐃⵠ), mo * 15, "#FFF"), mo * 100, (46 + j * 22) * mo);
        }
      }
    }
    Em(to, c.ⵠᐃ, c.translate.x, c.translate.y);
  }
  function Om() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃΔΔⵠⵠᐃⵠ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Ok, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function qm() {
    var b = Ww.ΔⲆᐃᐃ;
    if (!b.ᐃΔⲆΔⲆ && b.Ⲇⵠᐃᐃ > 0) {
      var c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      if (!c) {
        return;
      }
      to.save();
      if (Or[b.Ⲇⵠᐃᐃ].ⲆⵠⵠΔ === 0 && b.mode === Fj) {
        to.translate(Ww.ᐃᐃᐃ.x + c.x, Ww.ᐃᐃᐃ.y + c.y);
        to.rotate(c.angle);
        to.translate(120, Ko);
      } else {
        var d = Math.floor(c.x + Math.sin(c.angle) * 120);
        var e = Math.floor(c.y + Math.cos(c.angle) * 120);
        d = Ww.ᐃᐃᐃ.x + (d - d % sg + 50);
        e = Ww.ᐃᐃᐃ.y + (e - e % 100 + 50);
        to.translate(d, e);
      }
      var f = ΔΔ[b.Ⲇⵠᐃᐃ][gf.time];
      to.globalAlpha = 0.5;
      Em(to, f, -f.width / 2, -f.height / 2);
      to.globalAlpha = 1;
      to.restore();
      if ($t === Or[b.Ⲇⵠᐃᐃ].ⲆⵠⵠΔ) {
        if (!b.label[b.mode]) {
          if (b.mode === 0) {
            b.label[0] = Bu(mo, st[ΔⵠᐃΔ.ⵠⲆΔΔΔΔⵠ], mt, "#e2c340");
          } else {
            b.label[1] = Bu(mo, st[ΔⵠᐃΔ.ⵠΔᐃΔⲆⵠΔ], _j, "#e2c340");
          }
        }
        f = b.label[b.mode];
        Em(to, f, lo + -f.width / 2, Yw.ᐃⲆΔᐃ.y - 26);
      }
    }
    if (b.ᐃΔⲆΔⲆ) {
      var g = b.timeout.Ⲇᐃⵠ();
      for (var i = 0; b.ⲆⵠᐃⲆᐃ.length > i; i++) {
        var j = b.ⲆⵠᐃⲆᐃ[i];
        if (b.id == j.id) {
          var k = mo * 42;
          var m = Yr * mo;
          nb(to, j.info.translate.x, j.info.translate.y + k * (1 - b.timeout.ᐃⲆⵠ), j.info.width, b.timeout.ᐃⲆⵠ * k + m, mo * rk);
          to.fillStyle = "#55B973";
          to.fill();
          to.globalAlpha = 0.8;
          j.ᐃⵠⲆᐃ(to);
        } else {
          to.globalAlpha = 0.5;
          j.ᐃⵠⲆᐃ(to);
        }
        to.globalAlpha = Aj;
      }
      if (g) {
        b.ᐃΔⲆΔⲆ = false;
        b.timeout.ᐃⲆⵠ = tr;
        b.timeout.ᐃⲆΔ = false;
      }
      return true;
    }
    for (i = 0; b.ⲆⵠᐃⲆᐃ.length > i; i++) {
      b.ⲆⵠᐃⲆᐃ[i].ᐃⵠⲆᐃ(to);
    }
    return false;
  }
  function Nm() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⵠΔΔⵠⲆ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Wq, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Hm() {
    to.save();
    var a = mo;
    if (Ww.ᐃⲆΔᐃ.ΔᐃΔᐃⲆ.x < 0.25) {
      to.globalAlpha = Ww.ᐃⲆΔᐃ.ᐃⲆⲆΔⵠᐃⵠ.ᐃⲆⵠ;
    }
    var b = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length > 0 ? -70 : 0;
    if (Ww.ΔΔΔⲆ.open || Ww.ᐃⲆⲆⵠⲆ.open && Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔΔⲆⵠ) != -1 || Ww.ⵠΔᐃⵠ.open && Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃᐃΔⲆΔ) != -1 || Ww.ⵠᐃᐃΔ.open && Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔΔⲆⵠ) != -Yt || Ww.ⲆΔⵠΔⲆ.open && Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.Ⲇᐃⵠⵠᐃ) != -1 || Ww.ⲆΔᐃΔ.open && (Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔΔⲆⵠ) != -Cs || Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔᐃᐃⲆᐃ) != -1)) {
      b -= mo * 50;
    }
    to.translate((ro - mo * 950) / C, b);
    to.fillStyle = "#69A148";
    to.fillRect(this.translate.x + mo * 37, this.translate.y + mo * 17, mo * (Ww.ᐃⲆΔᐃ.ΔᐃΔᐃⲆ.x * 178), mo * on);
    to.globalAlpha = 1;
    if (Ww.ᐃⲆΔᐃ.ⲆⲆⵠⵠΔⵠᐃ.x < 0.35) {
      to.fillStyle = "#8F050A";
      to.globalAlpha = Ww.ᐃⲆΔᐃ.ΔⲆⲆΔⲆⵠΔ.ᐃⲆⵠ;
      to.fillRect(this.translate.x + mo * 277, this.translate.y + mo * K, mo * 178, mo * 18);
      to.globalAlpha = wg;
    }
    to.fillStyle = "#AF352A";
    to.fillRect(this.translate.x + mo * 277, this.translate.y + mo * 17, mo * (Ww.ᐃⲆΔᐃ.ⲆⲆⵠⵠΔⵠᐃ.x * 178), mo * 18);
    if (Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.x < 0.35) {
      to.fillStyle = "#366B91";
      to.globalAlpha = Ww.ᐃⲆΔᐃ.ΔᐃⲆᐃⵠⵠΔ.ᐃⲆⵠ;
      to.fillRect(this.translate.x + mo * 517, this.translate.y + mo * 17, mo * 178, mo * Vs);
      to.globalAlpha = 1;
    }
    to.fillStyle = "#669BB1";
    to.fillRect(this.translate.x + mo * 517, this.translate.y + mo * 17, Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.x * 178 * mo, mo * 18);
    if (Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.x > 0.99) {
      if (Ww.ᐃⲆΔᐃ.ᐃⲆⵠⵠⵠ.x < 0.35) {
        to.fillStyle = "#6C4036";
        to.globalAlpha = Ww.ᐃⲆΔᐃ.ΔᐃⵠⵠΔΔⵠ.ᐃⲆⵠ;
        to.fillRect(this.translate.x + mo * 517, this.translate.y + mo * jq, mo * 178, mo * 18);
        to.globalAlpha = 1;
      }
      to.fillStyle = "#9C4036";
      to.fillRect(this.translate.x + mo * 517, this.translate.y + F * mo, (bt - Ww.ᐃⲆΔᐃ.ᐃⲆⵠⵠⵠ.x) * 178 * mo, mo * 18);
    }
    if (Ww.ᐃⲆΔᐃ.ᐃⵠⵠΔⵠΔⵠ.x < 0.35) {
      to.fillStyle = "#001A57";
      to.globalAlpha = Ww.ᐃⲆΔᐃ.ΔⲆⲆⵠΔᐃⲆ.ᐃⲆⵠ;
      to.fillRect(this.translate.x + mo * 757, this.translate.y + mo * 17, mo * 178, mo * zh);
      to.globalAlpha = 1;
    }
    to.fillStyle = "#074A87";
    to.fillRect(this.translate.x + mo * 757, this.translate.y + mo * $h, Ww.ᐃⲆΔᐃ.ᐃⵠⵠΔⵠΔⵠ.x * 178 * mo, mo * 18);
    mo = a;
    Em(to, this.Ⲇⵠ, this.translate.x, this.translate.y);
    this.y = this.translate.y + b;
    to.restore();
    if (Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.x < 0.99) {
      var c = Math.floor(lo - ΔΔ[Cr.ᐃΔⲆᐃⲆⲆⵠ].width / 2);
      b += this.translate.y - ΔΔ[Cr.ᐃΔⲆᐃⲆⲆⵠ].height - mo * 5;
      to.fillStyle = "#BBE8EF";
      to.fillRect(c + Th, b + mo * 5, mo * 588 * Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.x, Hr * mo);
      if (Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.x < 0.35) {
        to.fillStyle = "#9BA8AF";
        to.globalAlpha = Ww.ᐃⲆΔᐃ.ⵠⲆⲆΔΔⲆΔ.ᐃⲆⵠ;
        to.fillRect(c + vu, b + Ca, mo * 588, Fn * mo);
        to.globalAlpha = Cs;
      }
      Em(to, ΔΔ[Cr.ᐃΔⲆᐃⲆⲆⵠ], c, b);
      this.y = b;
    }
  }
  function Um() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃΔⲆᐃⵠ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Le, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Ym(b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var c = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var d = c * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var e = c * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      d = ko;
      e = 0;
    }
    var f = ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ].length;
    Ⲇⵠ = ΔΔ[Cr.ᐃΔᐃᐃⲆΔᐃ][(this.Δⵠᐃⵠ + this.ᐃᐃ % 2) % f][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    var g = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
    if (g && (this.ΔⲆᐃΔ === Ww.id || Ww.ᐃᐃᐃⵠΔⵠⲆ(this.ΔⲆᐃΔ))) {
      if (ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, g) < 550) {
        this.opacity = Math.max(this.opacity - pf, 0.3);
      } else {
        this.opacity = Math.min(this.opacity + pf, 1);
      }
    } else if (g && ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ]) < 150) {
      this.opacity = Math.max(this.opacity - pf, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + pf, wg);
    }
    var h = to.globalAlpha;
    to.globalAlpha *= this.opacity;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + d, -ᐃⵠⲆ / 2 + e, ⵠΔΔ, ᐃⵠⲆ);
    to.globalAlpha = h;
    to.restore();
  }
  function Km() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆⲆ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Vm() {
    var a = Ww.ᐃⲆⲆⲆⲆ;
    if (a.wait) {
      var b = a.timeout.Ⲇᐃⵠ();
      to.save();
      var c = ΔΔ[Cr.ⵠⵠΔⲆⲆᐃⲆ];
      var d = ΔΔ[Cr.ⵠⲆΔΔΔᐃⵠ].height + mo * 25;
      to.translate(c.width, Yw.ᐃⲆΔᐃ.translate.y - mo * 188 - d);
      var e = -c.width / $r - ib;
      var f = -c.height / 2 - Ka;
      Em(to, c, e + eh, f);
      to.beginPath();
      to.lineWidth = mo * 5;
      to.strokeStyle = Cr.ⲆⵠⲆᐃΔΔⵠ[gf.time];
      to.lineCap = "round";
      to.arc(0, f + c.height / kn, mo * 25, Wh, a.timeout.ᐃⲆⵠ * (Math.PI * 2));
      to.stroke();
      to.restore();
      if (b) {
        a.wait = Pq;
        a.timeout.ᐃⲆⵠ = 0;
        a.timeout.ᐃⲆΔ = Pa;
      }
    }
  }
  function Xm() {
    var a = Ww.ⵠⵠΔᐃᐃ;
    if (a.wait) {
      var b = a.timeout.Ⲇᐃⵠ();
      to.save();
      var c = ΔΔ[Cr.ⲆΔⵠⵠⲆΔⵠ];
      to.translate(c.width - mo * 2, Yw.ᐃⲆΔᐃ.translate.y - mo * 125);
      var d = -c.width / 2 + lj;
      var e = -c.height / 2 - xt;
      Em(to, c, d, e);
      to.beginPath();
      to.lineWidth = mo * 5;
      to.strokeStyle = Cr.ᐃᐃΔⲆⲆᐃΔ[gf.time];
      to.lineCap = "round";
      to.arc(9, e + c.height / Le, mo * 25, 0, a.timeout.ᐃⲆⵠ * (Math.PI * 2));
      to.stroke();
      to.restore();
      if (b) {
        a.wait = false;
        a.timeout.ᐃⲆⵠ = 0;
        a.timeout.ᐃⲆΔ = false;
      }
    }
  }
  function Zm() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⲆⵠΔⵠⵠⲆᐃ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / xl, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function $m(a) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = (ik - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = ΔΔ[a][gf.time];
    ⵠΔΔ = -e.width;
    ᐃⵠⲆ = -e.height;
    Em(to, e, -ⵠΔΔ / kn + c, -ᐃⵠⲆ / Uh + d, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function ep() {
    var a = Ww.ⵠΔΔⲆᐃ;
    if (a.wait) {
      var b = a.timeout.Ⲇᐃⵠ();
      to.save();
      var c = ΔΔ[Cr.ⵠⲆΔΔΔᐃⵠ];
      to.translate(c.width - yg * mo, Yw.ᐃⲆΔᐃ.translate.y - mo * 60);
      var d = -c.width / 2 - tg;
      var e = -c.height / _t - jt;
      Em(to, c, d, e);
      to.beginPath();
      to.lineWidth = uh * mo;
      to.strokeStyle = Cr.ⲆⵠⲆᐃΔΔⵠ[gf.time];
      to.lineCap = "round";
      to.arc(0, e + c.height / cu, mo * 25, Mn, a.timeout.ᐃⲆⵠ * (Math.PI * ib));
      to.stroke();
      to.restore();
      if (b) {
        a.wait = tq;
        a.timeout.ᐃⲆⵠ = $t;
        a.timeout.ᐃⲆΔ = false;
      }
    }
  }
  function ip() {
    var a = Ww.ⵠⲆΔᐃᐃ;
    if (a.wait) {
      var b = a.timeout.Ⲇᐃⵠ();
      to.save();
      var c = ΔΔ[Cr.ᐃΔΔⲆᐃⲆΔ];
      to.translate(c.width - mo * 12, Yw.ᐃⲆΔᐃ.translate.y - mo * 190);
      var d = -c.width / 2 + 9;
      var e = -c.height / 2 - gn;
      Em(to, c, d, e);
      to.beginPath();
      to.lineWidth = mo * 5;
      to.strokeStyle = Cr.ᐃᐃΔⲆⲆᐃΔ[gf.time];
      to.lineCap = "round";
      to.arc(ug, e + c.height / 2, mo * 25, 0, Math.PI * 2 * a.timeout.ᐃⲆⵠ);
      to.stroke();
      to.restore();
      if (b) {
        a.wait = ue;
        a.timeout.ᐃⲆⵠ = tr;
        a.timeout.ᐃⲆΔ = Pq;
      }
    }
  }
  function tp(a) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Pe) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = mo * ((1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    Ⲇⵠ = ΔΔ[a][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + c, -ᐃⵠⲆ / eh + d, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function np(b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = v;
      }
      var c = (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var d = c * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var e = c * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      d = 0;
      e = 0;
    }
    if (b === Cr.ⵠⲆⵠⲆᐃⵠᐃ && !gf.transition) {
      var f = rh;
      for (var g = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ], h = 0; h < g.length; h++) {
        var i = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(g[h], this);
        if (i < 140 && i > 35) {
          f = Ko;
          break;
        }
        if (i <= 35) {
          f = ik;
        }
      }
      this.opacity = f === 0 ? Math.max(0.5, this.opacity - pf / 1.5) : Math.min(1, this.opacity + pf / 1.5);
      to.globalAlpha = this.opacity;
    }
    Ⲇⵠ = ΔΔ[b][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2 + d, -ᐃⵠⲆ / 2 + e, ⵠΔΔ, ᐃⵠⲆ);
    to.globalAlpha = 1;
    to.restore();
  }
  var op = Lg;
  function Qu() {
    if (rk <= this.info) {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && Pa == this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = Jn;
        }
        var a = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
        var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
        var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
      } else {
        b = 0;
        c = 0;
      }
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      var d = ΔΔ[Cr.ⵠⵠⲆⵠⲆΔΔ][gf.time];
      var e = -d.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var f = -d.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, d, -e / Qs + b, -f / yh + c, e, f);
      to.restore();
    }
  }
  function ap() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var a = pf * (sd - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = Ko;
      c = 0;
    }
    this.ᐃᐃⲆΔΔΔⲆ = (this.ᐃᐃⲆΔΔΔⲆ + pf * vg) % (Math.PI * 2);
    this.ⵠⲆᐃΔⵠⵠⵠ = (this.ⵠⲆᐃΔⵠⵠⵠ - pf * 3) % (Math.PI * 2);
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.save();
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⲆΔᐃⲆⲆ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / xl, -Ⲇⵠ.height / 2);
    to.restore();
    to.save();
    to.rotate(this.ᐃᐃⲆΔΔΔⲆ);
    Ⲇⵠ = ΔΔ[Cr.ΔⲆᐃΔᐃᐃᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / xl, -Ⲇⵠ.height / 2);
    to.restore();
    to.save();
    to.rotate(this.ⵠⲆᐃΔⵠⵠⵠ);
    Ⲇⵠ = ΔΔ[Cr.Δᐃᐃᐃᐃᐃᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / Uh, -Ⲇⵠ.height / Le);
    to.restore();
    to.restore();
  }
  function sp() {
    if (this.info !== 10) {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Bh) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = v;
        }
        var a = (Ud - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
        var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
        var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
      } else {
        b = 0;
        c = ko;
      }
      if (this.info & 16) {
        var d = ΔΔ[Cr.ⲆᐃᐃᐃⲆΔᐃ][gf.time];
      } else {
        d = ΔΔ[Cr.ΔⵠΔᐃⵠᐃⲆ][gf.time];
      }
      Em(to, d, -d.width / 2 + b, -d.width / eh + c);
      to.restore();
      for (var e = this.info & 15, f = 0; f < e; f++) {
        this.ⵠⵠⵠᐃ[f].ᐃⵠⲆᐃ(Cr.ⲆⵠⲆΔⲆ);
      }
    }
  }
  function hp() {
    if (this.info !== Fg) {
      for (var a = this.info & 15, b = 0; b < a; b++) {
        this.ⵠⵠⵠᐃ[b].ᐃⵠⲆᐃ(Cr.ΔⵠⲆΔᐃ, this.x, this.y);
      }
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = tq;
        }
        var c = (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
        var d = c * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
        var e = c * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
      } else {
        d = 0;
        e = 0;
      }
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⲆΔᐃⵠⲆᐃΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆⲆⲆΔⵠᐃΔ][gf.time];
      }
      Em(to, f, -f.width / 2 + d, -f.width / 2 + e);
      to.restore();
    }
  }
  function lp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    var a = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + pf / $r, 1.8) : Math.max(this.scale - pf, 1);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    this.ᐃΔⲆΔ = a < 350 ? Math.max(0, this.ᐃΔⲆΔ - pf * 2.2) : Math.min(1, this.ᐃΔⲆΔ + pf * 2.2);
    b = rh === (this.info & 1) ? ΔΔ[Cr.ⲆⲆⵠⵠⲆᐃⲆ][gf.time] : ΔΔ[Cr.ᐃΔΔⲆⲆΔⵠ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height);
    to.globalAlpha = Br - this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ / mj, -ᐃⵠⲆ / kr, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    b = this.info & Cs ? ΔΔ[Cr.ⵠΔΔΔⲆᐃΔ][gf.time] : ΔΔ[Cr.ΔⵠΔΔᐃ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height);
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ / Lb, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / _t);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == Pk) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = (1 - this.ᐃΔⲆΔ) * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      var b = ΔΔ[Cr.ⲆⵠⵠⲆⲆⵠⵠ];
      ⵠΔΔ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width);
      ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height);
      Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / $r, ᐃⵠⲆ / 2);
      to.globalAlpha = this.ᐃΔⲆΔ * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      b = ΔΔ[Cr.ⲆⲆΔΔⲆᐃΔ];
      ⵠΔΔ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width);
      ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height * this.scale;
      Em(to, b, -ⵠΔΔ / zg, -ᐃⵠⲆ / 4, ⵠΔΔ / _l, ᐃⵠⲆ / 2);
      to.globalAlpha = Fo;
    }
    b = (this.info & jh) === Dh ? ΔΔ[Cr.ΔⲆᐃⲆⲆᐃⲆ][gf.time] : ΔΔ[Cr.ⲆⲆᐃⲆⵠᐃᐃ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width * this.scale;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height * this.scale;
    to.save();
    to.translate(mo * -ws, mo * tr);
    to.rotate(this.rotate.ᐃⲆⵠ);
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ * mo / Yn, -ᐃⵠⲆ * mo / 4, ⵠΔΔ / 2, ᐃⵠⲆ / cu);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ) * this.ᐃΔⲆΔ;
      b = ΔΔ[Cr.ⵠⲆᐃⵠΔⲆⲆ];
      Em(to, b, -ⵠΔΔ * mo / 4, mo * -ᐃⵠⲆ / Rh, ⵠΔΔ / 2, ᐃⵠⲆ / pa);
      to.globalAlpha = jh;
    }
    to.restore();
    b = this.info & yl ? ΔΔ[Cr.ⵠⲆⵠᐃⵠΔⵠ][gf.time] : ΔΔ[Cr.ΔⵠᐃᐃΔⵠⵠ][gf.time];
    to.save();
    to.translate(mo * ns, mo * Dh);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ * mo / 4, -ᐃⵠⲆ * mo / bn, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = this.ᐃΔⲆΔ * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      b = ΔΔ[Cr.ⲆᐃⲆΔΔⵠΔ];
      Em(to, b, mo * -ⵠΔΔ / oj, mo * -ᐃⵠⲆ / f, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      to.globalAlpha = 1;
    }
    to.globalAlpha = 1;
    to.restore();
    to.restore();
  }
  function gp(a, b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    c = ΔΔ[a][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / kn, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = ΔΔ[b];
      Em(to, c, -ⵠΔΔ / C, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = ce;
    }
    to.restore();
  }
  function up(b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
    to.globalAlpha = 0.3;
    var c = ΔΔ[Cr.ⲆᐃⲆΔⲆΔΔ][gf.time];
    var d = -c.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
    var e = -c.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
    Em(to, c, -d / xl, -e / 2, d, e);
    to.globalAlpha = 1;
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == gg) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = gg;
      }
      var f = mo * (pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600);
      var g = f * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var h = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * f;
    } else {
      g = 0;
      h = rh;
    }
    c = ΔΔ[b][gf.time];
    Em(to, c, -c.width / eh + g, -c.height / Ok + h);
    to.restore();
  }
  function bp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = Bg;
      }
      var a = mo * (pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600);
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = _s;
      c = Jt;
    }
    if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
      d = ΔΔ[Cr.ⵠᐃΔⲆⲆⲆΔ][gf.time];
      Em(to, d, -d.width / Qs + b, -d.height / 2 + c);
      this.up.Ⲇᐃⵠ();
      var d = ΔΔ[Cr.ΔᐃᐃΔᐃᐃⵠ][gf.time];
      var e = -d.width * this.up.ᐃⲆⵠ;
      var f = -d.height * this.up.ᐃⲆⵠ;
      Em(to, d, -e / Le + mo * 1, -f / C + Za * mo, e, f);
    } else {
      d = ΔΔ[Cr.ᐃⲆΔⵠⲆᐃᐃ][gf.time];
      Em(to, d, -d.width / cu + b, -d.height / 2 + c);
    }
    to.restore();
  }
  function vp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Pk) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = v;
      }
      var a = mo * ((ub - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = 0;
      c = Ko;
    }
    to.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - ub;
      c += Math.random() * cu - Aj;
    }
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⵠⵠⲆᐃᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / pa);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * 3) % (Math.PI * 2);
    }
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ᐃᐃⵠᐃΔΔⲆ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / C, -Ⲇⵠ.height / Le);
    to.restore();
  }
  function dp(a, b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    c = ΔΔ[a][gf.time];
    ⵠΔΔ = -c.width;
    ᐃⵠⲆ = -c.height;
    Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = ΔΔ[b];
      Em(to, c, -ⵠΔΔ / _t, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = jh;
    }
    to.restore();
  }
  function cp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var a = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = $t;
      c = yk;
    }
    to.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - Fo;
      c += Math.random() * Uh - 1;
    }
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⵠΔΔᐃⲆ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / _t);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * 3) % (Math.PI * 2);
    }
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ⵠᐃⵠⵠΔΔⵠ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / eh, -Ⲇⵠ.height / 2);
    to.restore();
  }
  function mp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Jn) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = M;
      }
      var a = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = rh;
      c = Dh;
    }
    this.ᐃᐃⲆΔΔΔⲆ = (this.ᐃᐃⲆΔΔΔⲆ + pf * 3) % (pa * Math.PI);
    this.ⵠⲆᐃΔⵠⵠⵠ = (this.ⵠⲆᐃΔⵠⵠⵠ - pf * jg) % (Math.PI * Wq);
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.save();
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃᐃᐃⵠᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / Wq, -Ⲇⵠ.height / Wq);
    to.restore();
    to.save();
    to.rotate(this.ᐃᐃⲆΔΔΔⲆ);
    Ⲇⵠ = ΔΔ[Cr.ΔⲆΔᐃⵠΔⵠ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / C, -Ⲇⵠ.height / Le);
    to.restore();
    to.save();
    to.rotate(this.ⵠⲆᐃΔⵠⵠⵠ);
    Ⲇⵠ = ΔΔ[Cr.ⲆⲆᐃᐃΔᐃᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Xn);
    to.restore();
    to.restore();
  }
  function pp() {
    var a = Math.PI / _t;
    var b = Math.PI / 4;
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.ⵠⵠᐃᐃᐃᐃΔ.Ⲇᐃⵠ();
    this.ᐃᐃΔⲆⲆⵠⲆ.Ⲇᐃⵠ();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    c = _s === this.info ? ΔΔ[Cr.ᐃᐃΔⵠᐃ][gf.time] : ΔΔ[Cr.ᐃᐃᐃⲆⵠᐃΔ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = ΔΔ[Cr.ⲆᐃᐃΔᐃᐃⵠ];
      Em(to, c, -ⵠΔΔ / yg, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      if (this.ΔⵠⲆᐃⵠ.Ⲇᐃⵠ() && this.ΔⵠⲆᐃⵠ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔΔΔⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ΔⵠᐃⲆⵠΔⲆ];
      Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    to.restore();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle + b);
    to.translate(sg, 0);
    to.rotate(a);
    c = Mn === this.info ? ΔΔ[Cr.ΔⲆᐃΔΔⵠᐃ][gf.time] : ΔΔ[Cr.ⲆΔᐃⵠᐃᐃⵠ][gf.time];
    ⵠΔΔ = this.ⵠⵠᐃᐃᐃᐃΔ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ⵠⵠᐃᐃᐃᐃΔ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / eh, -ᐃⵠⲆ / Wq, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ᐃⵠⲆⵠⲆΔⵠ];
      Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / kn, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = Eg;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ⵠᐃᐃᐃⲆⵠᐃ];
      Em(to, c, -ⵠΔΔ / yh, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = bt;
    }
    to.restore();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle + a + b);
    to.translate(Zr, 0);
    to.rotate(a);
    c = this.info === 0 ? ΔΔ[Cr.ᐃᐃᐃⵠᐃᐃΔ][gf.time] : ΔΔ[Cr.ΔⵠᐃⲆⵠⵠΔ][gf.time];
    ⵠΔΔ = this.ᐃᐃΔⲆⲆⵠⲆ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ᐃᐃΔⲆⲆⵠⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / ib, -ᐃⵠⲆ / xl, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ⲆᐃΔⲆⲆⲆΔ];
      Em(to, c, -ⵠΔΔ / _l, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = dn;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ᐃᐃⲆᐃⵠⲆΔ];
      Em(to, c, -ⵠΔΔ / yh, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    to.restore();
  }
  function Cp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    var a = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r);
    this.scale = a > 350 ? Math.min(this.scale + pf / tg, 1.8) : Math.max(this.scale - pf, 1);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    this.ᐃΔⲆΔ = a < 350 ? Math.max(0, this.ᐃΔⲆΔ - pf * 2.2) : Math.min(Eg, this.ᐃΔⲆΔ + pf * 2.2);
    b = ΔΔ[Cr.ⲆⵠⲆⲆΔᐃᐃ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width * this.scale;
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height);
    to.globalAlpha = 1 - this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / ij, ᐃⵠⲆ / 2);
    b = ΔΔ[Cr.ᐃⵠⵠᐃΔⵠⲆ][gf.time];
    ⵠΔΔ = -b.width * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    ᐃⵠⲆ = -b.height * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ / Ai, -ᐃⵠⲆ / Dt, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && v == this.ΔᐃⵠΔ.ᐃⲆΔ) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ) * (1 - this.ᐃΔⲆΔ);
      var b = ΔΔ[Cr.ⲆΔᐃΔⵠΔᐃ];
      ⵠΔΔ = this.scale * (-b.width * this.ⲆΔΔⲆ.ᐃⲆⵠ);
      ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height);
      Em(to, b, -ⵠΔΔ / bn, -ᐃⵠⲆ / Ai, ⵠΔΔ / 2, ᐃⵠⲆ / Wq);
      to.globalAlpha = this.ᐃΔⲆΔ * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      b = ΔΔ[Cr.ᐃᐃᐃᐃⲆᐃᐃ];
      ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width * this.scale;
      ᐃⵠⲆ = -b.height * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
      Em(to, b, -ⵠΔΔ / gn, -ᐃⵠⲆ / In, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      to.globalAlpha = Yt;
    }
    b = ΔΔ[Cr.ⵠⲆΔⲆᐃᐃᐃ][gf.time];
    ⵠΔΔ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width);
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.height * this.scale;
    to.save();
    to.translate(mo * -40, mo * 80);
    to.rotate(this.rotate.ᐃⲆⵠ);
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, mo * -ⵠΔΔ / 4, -ᐃⵠⲆ * mo / bn, ⵠΔΔ / 2, ᐃⵠⲆ / Uh);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = this.ᐃΔⲆΔ * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      b = ΔΔ[Cr.ᐃᐃᐃᐃᐃⲆⲆ];
      Em(to, b, -ⵠΔΔ * mo / th, mo * -ᐃⵠⲆ / 4, ⵠΔΔ / yh, ᐃⵠⲆ / yg);
      to.globalAlpha = Ud;
    }
    to.restore();
    b = ΔΔ[Cr.ᐃᐃΔΔⵠⵠⲆ][gf.time];
    to.save();
    to.translate(mo * 40, mo * 80);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    to.globalAlpha = this.ᐃΔⲆΔ;
    Em(to, b, -ⵠΔΔ * mo / Yn, mo * -ᐃⵠⲆ / jt, ⵠΔΔ / Ok, ᐃⵠⲆ / kn);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ) * this.ᐃΔⲆΔ;
      b = ΔΔ[Cr.ΔⲆⲆⲆⵠⲆⵠ];
      Em(to, b, -ⵠΔΔ * mo / 4, mo * -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      to.globalAlpha = Cs;
    }
    to.globalAlpha = jh;
    to.restore();
    to.restore();
  }
  function Tp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var a = (dn - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var b = a * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = Ko;
    }
    to.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - 1;
      c += Math.random() * 2 - Eg;
    }
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ΔᐃΔⵠᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Qs);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * ta) % (Math.PI * Ok);
    }
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ⲆⵠⲆᐃⲆΔᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    to.restore();
  }
  function fp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = Dh;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⵠⵠⵠΔΔᐃΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ΔΔⲆᐃᐃ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = -f.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, f, -g / kn + c, -h / _t + d, g, h);
    } else {
      this.ᐃⵠΔᐃⵠⲆⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        f = ΔΔ[Cr.ⲆⲆⲆⵠⵠⲆΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ᐃᐃΔⲆΔ][gf.time];
      }
      to.translate(0, f.height / C);
      to.rotate(this.ᐃⵠΔᐃⵠⲆⵠ.ᐃⲆⵠ);
      Em(to, f, c - f.width / 2, -f.height + d);
    }
    to.restore();
  }
  function zp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + pf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - pf, 1);
    }
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    a = this.info === Fj ? ΔΔ[Cr.ⲆΔⵠⵠⵠ][gf.time] : ΔΔ[Cr.ΔⵠᐃⵠⲆⵠᐃ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width * this.scale;
    ᐃⵠⲆ = -a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    Em(to, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / qa, ⵠΔΔ / pa, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ⲆᐃⵠⵠΔⲆⲆ];
      Em(to, a, -ⵠΔΔ / In, -ᐃⵠⲆ / 4, ⵠΔΔ / yh, ᐃⵠⲆ / eh);
      to.globalAlpha = 1;
    }
    a = this.info === Lg ? ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⲆ][gf.time] : ΔΔ[Cr.ᐃⲆⲆΔⵠΔᐃ][gf.time];
    ⵠΔΔ = -a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height * this.scale;
    to.save();
    to.translate(mo * -40, Fg * mo);
    to.rotate(this.rotate.ᐃⲆⵠ);
    Em(to, a, -ⵠΔΔ * mo / 4, -ᐃⵠⲆ * mo / Ka, ⵠΔΔ / Wq, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ΔΔᐃⵠΔᐃⲆ];
      Em(to, a, -ⵠΔΔ * mo / Ka, -ᐃⵠⲆ * mo / oj, ⵠΔΔ / 2, ᐃⵠⲆ / xl);
      to.globalAlpha = bt;
    }
    to.restore();
    a = xb === this.info ? ΔΔ[Cr.ΔΔⵠⵠᐃΔⵠ][gf.time] : ΔΔ[Cr.ⲆⲆⵠⲆΔΔᐃ][gf.time];
    to.save();
    to.translate(mo * 40, bb * mo);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    Em(to, a, mo * -ⵠΔΔ / 4, mo * -ᐃⵠⲆ / 4, ⵠΔΔ / C, ᐃⵠⲆ / Qs);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ΔⵠᐃⵠⲆᐃⲆ];
      Em(to, a, -ⵠΔΔ * mo / 4, -ᐃⵠⲆ * mo / f, ⵠΔΔ / _l, ᐃⵠⲆ / eh);
      to.globalAlpha = jh;
    }
    to.restore();
    to.restore();
  }
  function yp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && gg == this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = (jh - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = 0;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === hl || e === 0) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ΔⲆⵠᐃᐃᐃⲆ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆⵠᐃΔⵠᐃⵠ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = -f.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ⵠⵠⲆⲆⲆⲆᐃ][gf.time];
      } else {
        f = ΔΔ[Cr.ⵠᐃⵠⲆⵠ][gf.time];
      }
      to.translate(Lg, f.height / _t);
      Em(to, f, c - f.width / $r, -f.height + d);
    }
    to.restore();
  }
  function wp() {
    var a = Math.PI / 2;
    var b = Math.PI / Yn;
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.ⵠⵠᐃᐃᐃᐃΔ.Ⲇᐃⵠ();
    this.ᐃᐃΔⲆⲆⵠⲆ.Ⲇᐃⵠ();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    c = kq === this.info ? ΔΔ[Cr.ΔⵠΔᐃⲆ][gf.time] : ΔΔ[Cr.ⵠⲆⲆⲆⲆᐃⵠ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = ΔΔ[Cr.ΔᐃⲆⵠⲆⲆᐃ];
      Em(to, c, -ⵠΔΔ / cu, -ᐃⵠⲆ / ij, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      if (this.ΔⵠⲆᐃⵠ.Ⲇᐃⵠ() && this.ΔⵠⲆᐃⵠ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔΔΔⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ⵠᐃΔᐃΔⲆᐃ];
      Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / Le, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    to.restore();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle + b);
    to.translate(55, 0);
    to.rotate(a);
    c = Ol === this.info ? ΔΔ[Cr.ⲆᐃⲆⲆⲆⲆᐃ][gf.time] : ΔΔ[Cr.ⵠⵠⲆⲆᐃⵠΔ][gf.time];
    ⵠΔΔ = this.ⵠⵠᐃᐃᐃᐃΔ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ⵠⵠᐃᐃᐃᐃΔ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ⵠᐃΔⲆᐃᐃᐃ];
      Em(to, c, -ⵠΔΔ / xl, -ᐃⵠⲆ / yg, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = ce;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ᐃⲆᐃᐃⵠⲆᐃ];
      Em(to, c, -ⵠΔΔ / C, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    to.restore();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle + a + b);
    to.translate(55, $t);
    to.rotate(a);
    c = this.info === 0 ? ΔΔ[Cr.ᐃᐃΔᐃΔᐃⲆ][gf.time] : ΔΔ[Cr.ⲆⲆΔⵠⲆΔⵠ][gf.time];
    ⵠΔΔ = this.ᐃᐃΔⲆⲆⵠⲆ.ᐃⲆⵠ * -c.width;
    ᐃⵠⲆ = this.ᐃᐃΔⲆⲆⵠⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / C, -ᐃⵠⲆ / Xn, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ᐃᐃΔⵠⵠΔⵠ];
      Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = wg;
    }
    if (this.action & $v.ᐃΔΔΔⵠ) {
      to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
      c = ΔΔ[Cr.ΔⲆΔⵠⲆⲆⵠ];
      Em(to, c, -ⵠΔΔ / cu, -ᐃⵠⲆ / _l, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = Ud;
    }
    to.restore();
  }
  function Pp() {
    if (this.info >= 10) {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.angle);
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
        if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
          this.ΔᐃⵠΔ.Ⲇᐃⵠ = kk;
        }
        var a = mo * (pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600);
        var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
        var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
      } else {
        b = Ol;
        c = yk;
      }
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      var d = ΔΔ[Cr.ΔⵠΔⵠⲆᐃⵠ][gf.time];
      var e = this.ⵠⲆᐃⵠ.ᐃⲆⵠ * -d.width;
      var f = -d.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, d, -e / 2 + b, -f / 2 + c, e, f);
      to.restore();
    }
  }
  function Ap(a, b, c) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + b, Ww.ᐃᐃᐃ.y + c);
    to.rotate(this.angle);
    to.translate(this.x - b, this.y - c);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[a][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -Ⲇⵠ.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / Qs, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function kp(a, b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (a === Cr.ᐃⲆᐃΔΔ) {
      a = Cr.ⵠⲆᐃⵠⲆ;
      this.info = 36;
    }
    Ⲇⵠ = ΔΔ[a][this.info][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width / 2;
    ᐃⵠⲆ = -Ⲇⵠ.height / 2;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == Pe) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = Yu(this.info, Ⲇⵠ, ᐃΔⵠⲆⲆΔᐃᐃᐃ);
      Em(to, c, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = V;
    }
    to.restore();
  }
  function xp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ΔⲆᐃⵠⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ⲆⲆⲆΔⲆΔⲆ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ;
    ᐃⵠⲆ = this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ * -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Xn, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Jp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + pf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - pf, V);
    }
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    a = ko === this.info ? ΔΔ[Cr.ⵠⲆᐃⲆⵠ][gf.time] : ΔΔ[Cr.ⵠⲆΔⵠᐃⲆⵠ][gf.time];
    ⵠΔΔ = -a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    ᐃⵠⲆ = this.scale * (-a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ);
    Em(to, a, -ⵠΔΔ / Lb, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / eh);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == kk) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ΔΔᐃⲆᐃⲆⵠ];
      Em(to, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      to.globalAlpha = 1;
    }
    a = this.info === Dh ? ΔΔ[Cr.ⵠⵠⲆΔᐃⵠⲆ][gf.time] : ΔΔ[Cr.ⵠⵠᐃΔⵠⲆᐃ][gf.time];
    ⵠΔΔ = -a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height);
    to.save();
    to.translate(mo * -40, mo * 10);
    to.rotate(this.rotate.ᐃⲆⵠ);
    Em(to, a, mo * -ⵠΔΔ / 4, -ᐃⵠⲆ * mo / 4, ⵠΔΔ / kn, ᐃⵠⲆ / Wq);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ⵠΔᐃᐃΔᐃⵠ];
      Em(to, a, -ⵠΔΔ * mo / 4, mo * -ᐃⵠⲆ / 4, ⵠΔΔ / Qs, ᐃⵠⲆ / xl);
      to.globalAlpha = Ud;
    }
    to.restore();
    a = this.info === $t ? ΔΔ[Cr.ᐃᐃⵠⲆⵠⵠⵠ][gf.time] : ΔΔ[Cr.ΔⲆΔᐃᐃΔⲆ][gf.time];
    to.save();
    to.translate(mo * 40, mo * 10);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    Em(to, a, -ⵠΔΔ * mo / th, mo * -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ⵠⲆΔᐃΔⲆⲆ];
      Em(to, a, mo * -ⵠΔΔ / 4, mo * -ᐃⵠⲆ / qo, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      to.globalAlpha = 1;
    }
    to.restore();
    to.restore();
  }
  function Mp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ΔⲆᐃⵠⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ᐃⵠⵠΔⲆⲆΔ][gf.time];
    ⵠΔΔ = this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ * -Ⲇⵠ.width;
    ᐃⵠⲆ = this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ * -Ⲇⵠ.height;
    Em(to, Ⲇⵠ, -ⵠΔΔ / _l, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Bp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ΔⵠΔⵠᐃ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ⵠᐃΔΔᐃ][gf.time];
    ⵠΔΔ = this.ΔⵠΔⵠᐃ.ᐃⲆⵠ * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.ΔⵠΔⵠᐃ.ᐃⲆⵠ;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Xn, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
    this.ΔⲆᐃⵠⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ⲆⲆⲆΔⲆΔⲆ][gf.time];
    ⵠΔΔ = this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ * -Ⲇⵠ.width;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ;
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Dp(f, e, i, j, k, n, o, a, p) {
    if (vl === a) {
      a = ko;
    }
    for (var h = f; e >= h; h++) {
      for (var q = i; j >= q; q++) {
        var r = Uw.ⲆⲆⲆᐃ[h][q];
        if (r !== Uq && r[n] !== undefined) {
          var t = r[n];
          var w = ΔΔ[k][gf.time][t.ⲆΔⵠⵠᐃΔᐃ];
          Em(to, w, Ww.ᐃᐃᐃ.x + t.x - w.width / (ⵠᐃΔΔⵠ * 4), Ww.ᐃᐃᐃ.y + t.y - w.height / (ⵠᐃΔΔⵠ * oj), w.width / (ⵠᐃΔΔⵠ * Wq), w.height / (ⵠᐃΔΔⵠ * 2));
          if (sf.ⵠⲆⵠⲆΔ) {
            var x = 2147483648;
            var y = ((h * 1000 + q) * 1103515245 + 12345) % x / x;
            if (y < 0.2) {
              y = Math.floor(ΔΔ[Cr.ⵠⲆⲆⵠ][gf.time][t.ⲆΔⵠⵠᐃΔᐃ].length * (y * 5));
              w = ΔΔ[Cr.ⵠⲆⲆⵠ][gf.time][t.ⲆΔⵠⵠᐃΔᐃ][y];
              Em(to, w, Ww.ᐃᐃᐃ.x + t.x - w.width / (ⵠᐃΔΔⵠ * 4), Ww.ᐃᐃᐃ.y + t.y - w.height / (ⵠᐃΔΔⵠ * 4), w.width / (ⵠᐃΔΔⵠ * 2), w.height / (ⵠᐃΔΔⵠ * 2));
            } else if (tr !== t.ΔᐃⲆⲆⲆⵠᐃ) {
              w = ΔΔ[Cr.ⲆΔΔⲆⵠⵠⲆ][gf.time];
              var z = (op + h % _t * 30) % 60;
              to.globalAlpha = z < 30 ? z / 30 : 1 - (z - 30) / 30;
              Em(to, w, Ww.ᐃᐃᐃ.x + t.x - w.width / (ⵠᐃΔΔⵠ * 4), Ww.ᐃᐃᐃ.y + t.y - w.height / (ⵠᐃΔΔⵠ * Rh) - 30 + z, w.width / (ⵠᐃΔΔⵠ * yg), w.height / (yh * ⵠᐃΔΔⵠ));
              to.globalAlpha = 1;
            }
          }
        }
      }
    }
  }
  function Ep() {
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    a = this.info === 0 ? ΔΔ[Cr.ⵠᐃᐃⲆⲆ][gf.time] : ΔΔ[Cr.ⲆⲆΔᐃⵠΔΔ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height;
    Em(to, a, -ⵠΔΔ / xl, -ᐃⵠⲆ / yg, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && M == this.ΔᐃⵠΔ.ᐃⲆΔ) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ⲆⲆⵠⵠⵠᐃⲆ];
      Em(to, a, -ⵠΔΔ / 2, -ᐃⵠⲆ / _l, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = Ud;
    }
    to.restore();
  }
  function Ip() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = tr;
      d = xb;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === 0) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⲆᐃΔⵠⲆΔⵠ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆⲆⲆⵠⵠΔΔ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = this.ⵠⲆᐃⵠ.ᐃⲆⵠ * -f.height;
      Em(to, f, -g / 2 + c, -h / kn + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ΔⵠΔⲆⲆⵠⵠ][gf.time];
      } else {
        f = ΔΔ[Cr.ⵠᐃⵠⵠⵠ][gf.time];
      }
      to.translate(0, f.height / 2);
      Em(to, f, c - f.width / kn, -f.height + d);
    }
    to.restore();
  }
  function Sp() {
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    a = this.info === Ko ? ΔΔ[Cr.ⵠΔⵠΔΔ][gf.time] : ΔΔ[Cr.ΔⲆΔΔᐃⵠⲆ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height;
    Em(to, a, -ⵠΔΔ / Ok, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == Bj) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ⲆΔᐃⲆΔᐃΔ];
      Em(to, a, -ⵠΔΔ / 2, -ᐃⵠⲆ / pa, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = er;
    }
    to.restore();
  }
  function Qp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + pf / 2, 1.8);
    } else {
      this.scale = Math.max(this.scale - pf, 1);
    }
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    a = ΔΔ[Cr.ᐃΔᐃᐃΔ][gf.time];
    ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width * this.scale;
    ᐃⵠⲆ = -a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    Em(to, a, -ⵠΔΔ / tg, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && v == this.ΔᐃⵠΔ.ᐃⲆΔ) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ᐃᐃⵠⲆⵠᐃⵠ];
      Em(to, a, -ⵠΔΔ / _l, -ᐃⵠⲆ / Le, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    a = ΔΔ[Cr.ⵠᐃⲆⵠᐃⲆⲆ][gf.time];
    ⵠΔΔ = this.scale * (-a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ);
    ᐃⵠⲆ = this.scale * (-a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ);
    to.save();
    to.translate(mo * -30, mo * 70);
    to.rotate(this.rotate.ᐃⲆⵠ);
    Em(to, a, mo * -10, mo * -40, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ⲆⲆⲆᐃᐃⲆⲆ];
      Em(to, a, -Fn * mo, mo * -40, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = dn;
    }
    to.restore();
    a = ΔΔ[Cr.ᐃⲆⵠⵠⵠΔΔ][gf.time];
    to.save();
    to.translate(mo * 30, mo * 70);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    Em(to, a, mo * 10 - ⵠΔΔ, mo * -40, ⵠΔΔ, ᐃⵠⲆ);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ΔⵠᐃΔⲆΔΔ];
      Em(to, a, mo * Fn - ⵠΔΔ, mo * -40, ⵠΔΔ, ᐃⵠⲆ);
      to.globalAlpha = 1;
    }
    to.restore();
    to.restore();
  }
  function _p() {
    var a = undefined;
    var b = undefined;
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    if (this.ΔᐃⲆΔᐃ >= 0.1 && this.ΔᐃⲆΔᐃ <= 1.1) {
      if ((c = Math.max(0, Math.min(1, this.ΔᐃⲆΔᐃ - 0.1))) < 0.2) {
        c *= vu;
      } else {
        c = c > 0.8 ? (jh - c) * Gt : dn;
      }
      a = ΔΔ[Cr.ⵠⵠΔᐃⲆⵠΔ][gf.time];
      ⵠΔΔ = -a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ;
      ᐃⵠⲆ = -a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ;
      to.globalAlpha = c;
      Em(to, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / kn, ᐃⵠⲆ / yh);
      b = ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆⲆ];
    }
    if (this.ΔᐃⲆΔᐃ >= 0.9) {
      var c;
      if ((c = Math.max(0, Math.min(V, this.ΔᐃⲆΔᐃ - 0.9))) < 0.2) {
        c *= Rj;
      } else {
        c = 1;
      }
      a = ΔΔ[Cr.ᐃⲆᐃⵠⲆⵠⲆ][gf.time];
      ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width;
      ᐃⵠⲆ = -a.height * this.ⲆΔΔⲆ.ᐃⲆⵠ;
      to.globalAlpha = c;
      Em(to, a, -ⵠΔΔ / qo, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
      b = ΔΔ[Cr.Δᐃᐃⵠᐃᐃᐃ];
    }
    if (this.action & $v.ᐃΔⵠⵠ && b !== undefined) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == ue) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = c * (0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ);
      ⵠΔΔ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -b.width;
      ᐃⵠⲆ = -b.height * this.ⲆΔΔⲆ.ᐃⲆⵠ;
      Em(to, b, -ⵠΔΔ / qo, -ᐃⵠⲆ / Ai, ⵠΔΔ / Xn, ᐃⵠⲆ / tg);
    }
    to.globalAlpha = 1;
    to.restore();
  }
  function Fp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r) > 300) {
      this.scale = Math.min(this.scale + pf / Le, 1.8);
    } else {
      this.scale = Math.max(this.scale - pf, bt);
    }
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    this.rotate.Ⲇᐃⵠ();
    a = ΔΔ[Cr.Δⵠᐃⵠᐃ][gf.time];
    ⵠΔΔ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.width);
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height);
    Em(to, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / f, ⵠΔΔ / C, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var a = ΔΔ[Cr.ΔΔΔᐃΔᐃⲆ];
      Em(to, a, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / ij, ᐃⵠⲆ / Le);
      to.globalAlpha = 1;
    }
    a = ΔΔ[Cr.ⵠᐃΔᐃᐃⵠΔ][gf.time];
    ⵠΔΔ = -a.width * this.ⲆΔΔⲆ.ᐃⲆⵠ * this.scale;
    ᐃⵠⲆ = this.scale * (this.ⲆΔΔⲆ.ᐃⲆⵠ * -a.height);
    to.save();
    to.translate(mo * -60, mo * 20);
    to.rotate(this.rotate.ᐃⲆⵠ);
    Em(to, a, -ⵠΔΔ * mo / gn, -ᐃⵠⲆ * mo / Ai, ⵠΔΔ / 2, ᐃⵠⲆ / eh);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ᐃⵠᐃⲆΔⵠⲆ];
      Em(to, a, -ⵠΔΔ * mo / 4, -ᐃⵠⲆ * mo / kr, ⵠΔΔ / ib, ᐃⵠⲆ / 2);
      to.globalAlpha = 1;
    }
    to.restore();
    a = ΔΔ[Cr.ΔᐃⲆⲆⵠⲆᐃ][gf.time];
    to.save();
    to.translate(mo * 60, mo * 20);
    to.rotate(-this.rotate.ᐃⲆⵠ);
    Em(to, a, -ⵠΔΔ * mo / Lb, -ᐃⵠⲆ * mo / Rh, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      a = ΔΔ[Cr.ᐃⲆⲆⲆⲆΔⵠ];
      Em(to, a, -ⵠΔΔ * mo / 4, mo * -ᐃⵠⲆ / Ai, ⵠΔΔ / 2, ᐃⵠⲆ / Le);
      to.globalAlpha = V;
    }
    to.restore();
    to.restore();
  }
  function Rp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == ue) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = (Aj - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600 * mo;
      var c = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * b;
      var d = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * b;
    } else {
      c = xb;
      d = xb;
    }
    var e = this.info & 15;
    if (this.info === 10 || e === Wh) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ᐃᐃⵠΔΔⲆᐃ][gf.time];
      } else {
        f = ΔΔ[Cr.ΔⲆⵠΔᐃⵠⲆ][gf.time];
      }
      var g = this.ⵠⲆᐃⵠ.ᐃⲆⵠ * -f.width;
      var h = -f.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, f, -g / 2 + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ᐃΔΔᐃⵠⲆⲆ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆⵠⲆΔⵠ][gf.time];
      }
      to.translate(_s, f.height / 2);
      Em(to, f, c - f.width / ij, -f.height + d);
    }
    to.restore();
  }
  function jp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = Pk;
      }
      var a = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = 0;
      c = ko;
    }
    to.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Math.random() * 2 - Ud;
      c += Math.random() * Qs - 1;
    }
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ⵠⲆⲆᐃᐃ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * 3) % (Math.PI * 2);
    }
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ⵠΔⵠΔΔⵠⲆ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / ij, -Ⲇⵠ.height / _t);
    to.restore();
  }
  function Lp(a, b, c) {
    if (a >= Dh) {
      Ⲇⵠ = ΔΔ[a][gf.time];
      switch (a) {
        case Cr.ⵠⵠΔΔΔ:
        case Cr.ᐃⵠⵠᐃⵠ:
        case Cr.ⵠⲆⲆⲆΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / Ka - mo * (0 + b), -Ⲇⵠ.height / 4 + (c + 35) * mo);
          break;
        case Cr.ⲆᐃΔΔᐃ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (wg + b), -Ⲇⵠ.height / th + (c + 45) * mo);
          break;
        case Cr.ⵠᐃⲆⲆᐃ:
        case Cr.ᐃⵠᐃⲆⲆ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (1 + b) * mo, -Ⲇⵠ.height / mj + (c + 40) * mo);
      }
    }
  }
  function Wp(a) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[a][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.ⲆΔΔⲆ.ᐃⲆⵠ;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.ⲆΔΔⲆ.ᐃⲆⵠ;
    Em(to, Ⲇⵠ, -ⵠΔΔ / yg, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Gp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ΔⲆᐃⵠⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ᐃⵠⲆⵠⵠⵠⵠ][gf.time];
    ⵠΔΔ = -Ⲇⵠ.width * this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ;
    ᐃⵠⲆ = -Ⲇⵠ.height * this.ΔⲆᐃⵠⲆ.ᐃⲆⵠ;
    Em(to, Ⲇⵠ, -ⵠΔΔ / Wq, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
    to.restore();
  }
  function Op() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Zh) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = rh;
      d = 0;
    }
    var e = this.info & 15;
    if (this.info === 10 || Ko === e) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⲆⲆⲆⵠⲆᐃΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ΔΔᐃΔⵠᐃⲆ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = this.ⵠⲆᐃⵠ.ᐃⲆⵠ * -f.height;
      Em(to, f, -g / Wq + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ⵠΔᐃΔᐃⲆΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆΔⵠᐃⲆ][gf.time];
      }
      to.translate(xb, f.height / $r);
      Em(to, f, c - f.width / 2, -f.height + d);
    }
    to.restore();
  }
  function qp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == Bg) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = mo * ((1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = Wh;
      d = jj;
    }
    var e = this.info & 15;
    if (this.info === Fs || e === 0) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⵠⲆΔⵠⵠⵠΔ][gf.time];
      } else {
        f = ΔΔ[Cr.ΔⲆᐃᐃⲆᐃⵠ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = -f.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, f, -g / pa + c, -h / 2 + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ⵠᐃⵠΔⵠᐃⵠ][gf.time];
      } else {
        f = ΔΔ[Cr.ΔⲆⲆΔⵠΔΔ][gf.time];
      }
      to.translate(0, f.height / Le);
      Em(to, f, c - f.width / 2, -f.height + d);
    }
    to.restore();
  }
  function Np() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⵠᐃⲆⵠⵠΔⵠ = Math.min(js, this.ⵠᐃⲆⵠⵠΔⵠ + pf * C);
    to.globalAlpha = this.ⵠᐃⲆⵠⵠΔⵠ * Math.min(dn, Math.max(0, ⵠⵠⵠⲆ.ΔⲆⲆⲆ(this, this.r) / 80));
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    Ⲇⵠ = ΔΔ[Cr.ᐃᐃⵠᐃᐃ][gf.time][this.ΔⲆⲆⵠᐃ];
    if (eh > this.ΔⲆⲆⵠᐃ) {
      ⵠΔΔ = -Ⲇⵠ.width * this.ⲆΔΔⲆ.ᐃⲆⵠ;
      ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -Ⲇⵠ.height;
    } else if (this.ⲆΔΔᐃᐃΔΔ === 0) {
      ⵠΔΔ = -Ⲇⵠ.width;
      ᐃⵠⲆ = -Ⲇⵠ.height;
    } else {
      ⵠΔΔ = -Ⲇⵠ.width * 1.35;
      ᐃⵠⲆ = -Ⲇⵠ.height * 1.35;
    }
    Em(to, Ⲇⵠ, -ⵠΔΔ / 2, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
    to.globalAlpha = 1;
    to.restore();
  }
  function Hp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = Bg;
      }
      var a = pf * (V - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = Math.cos(this.ΔᐃⵠΔ.angle - this.angle) * a;
    } else {
      b = Ko;
      c = Wh;
    }
    to.save();
    if (this.info & 255 && ~this.info & 65280) {
      b += Wq * Math.random() - wg;
      c += Math.random() * 2 - 1;
    }
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃⲆΔᐃΔ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / eh);
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * 3) % (Math.PI * 2);
    }
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ⲆΔⵠⵠᐃΔⲆ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Wq);
    to.restore();
  }
  function Up() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = Pa;
      }
      var a = mo * (pf * (Eg - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600);
      var b = a * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = Lu;
      c = Mn;
    }
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.rotate(this.angle);
    Ⲇⵠ = ΔΔ[Cr.ᐃⲆΔⵠⵠ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    to.restore();
  }
  function Yp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ == 0) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var a = pf * (1 - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600 * mo;
      var b = Math.sin(this.ΔᐃⵠΔ.angle - this.angle) * a;
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = rh;
      c = 0;
    }
    if ($r == this.action) {
      Ⲇⵠ = ΔΔ[Cr.ⲆᐃⲆᐃᐃⲆᐃ][gf.time];
    } else {
      Ⲇⵠ = ΔΔ[Cr.ᐃΔᐃⵠⵠΔⲆ][gf.time];
    }
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2 + b, -Ⲇⵠ.height / 2 + c);
    to.restore();
  }
  function Kp(a, b, c) {
    if (xb <= a) {
      Ⲇⵠ = ΔΔ[a][gf.time];
      switch (a) {
        case Cr.ⵠⵠⵠΔⵠ:
        case Cr.ᐃⲆⵠΔⲆ:
        case Cr.ⲆΔᐃᐃᐃ:
        case Cr.ᐃⵠΔᐃⲆ:
        case Cr.ΔᐃⲆⲆⵠ:
        case Cr.ΔⲆⵠΔⲆ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / Ok - mo * (45 + b), -Ⲇⵠ.height / xl + (c + 22) * mo);
          break;
        case Cr.ᐃⵠⲆⲆⲆ:
        case Cr.ᐃᐃⲆⵠⲆ:
        case Cr.ᐃΔᐃⲆΔ:
        case Cr.ΔⲆΔᐃΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / Yn - mo * (52 + b), -Ⲇⵠ.height / 4 + (c + ws) * mo);
          break;
        case Cr.ⵠΔⵠⵠΔ:
        case Cr.ΔΔⲆΔΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (57 + b) * mo, -Ⲇⵠ.height / 4 + (c + Vq) * mo);
          break;
        case Cr.ᐃⲆᐃΔⲆ:
        case Cr.ⵠⲆΔᐃΔ:
        case Cr.ⲆΔⵠⲆᐃ:
        case Cr.ΔᐃⲆⵠΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (47 + b), -Ⲇⵠ.height / 4 + mo * (c + 45));
          break;
        case Cr.ⲆΔⵠΔⵠ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / xt - (52 + b) * mo, -Ⲇⵠ.height / 4 + (c + 45) * mo);
          break;
        case Cr.ⵠΔⲆΔᐃ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (47 + b), -Ⲇⵠ.height / 4 + (c + 44) * mo);
          break;
        case Cr.ⵠⵠⵠⵠΔ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - (47 + b) * mo, -Ⲇⵠ.height / 2 + (c + 44) * mo);
          break;
        case Cr.ⵠΔΔⲆΔ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / _l - mo * (40 + b), -Ⲇⵠ.height / tg + (c + 65) * mo);
          break;
        case Cr.ᐃⲆⵠⲆⲆ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (37 + b), -Ⲇⵠ.height / 4 + mo * (c + 85));
          break;
        case Cr.ᐃΔⵠᐃⵠ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / oj - (37 + b) * mo, -Ⲇⵠ.height / 4 + mo * (c + 85));
          break;
        case Cr.ΔΔΔⲆᐃ:
        case Cr.ᐃⲆⵠⲆᐃ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (26 + b), -Ⲇⵠ.height / bn + (c + 77) * mo);
          break;
        case Cr.ΔᐃᐃⲆΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (37 + b), -Ⲇⵠ.height / 4 + (c + 85) * mo);
          break;
        case Cr.ⵠⲆⲆⵠⵠ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / bn - (47 + b) * mo, -Ⲇⵠ.height / 4 + mo * (c + 44));
          break;
        case Cr.ⵠᐃᐃⲆᐃ:
        case Cr.ᐃᐃᐃΔⲆ:
        case Cr.ᐃΔΔⲆᐃ:
        case Cr.ᐃΔⲆⲆⲆ:
        case Cr.ⵠᐃᐃᐃΔ:
        case Cr.ΔⵠⲆᐃⲆ:
        case Cr.ΔᐃΔⲆⲆ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (37 + b), -Ⲇⵠ.height / kr + (c + 30) * mo);
          break;
        case Cr.ⲆΔⵠⵠΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / In - mo * (47 + b), -Ⲇⵠ.height / 4 + (c + 35) * mo);
          break;
        case Cr.ᐃᐃⵠᐃⲆ:
        case Cr.ⵠⲆᐃⵠΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - (47 + b) * mo, -Ⲇⵠ.height / zg + (c + 40) * mo);
          break;
        case Cr.ⲆΔᐃⵠᐃ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / Ka - mo * (47 + b), -Ⲇⵠ.height / Ka + mo * (c + 34));
          break;
        case Cr.ⵠⲆᐃᐃΔ:
        case Cr.ΔⲆⲆⵠⲆ:
        case Cr.ΔⵠⲆⵠⵠ:
        case Cr.ⲆᐃᐃΔⲆ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / 4 - mo * (37 + b), -Ⲇⵠ.height / th + mo * (c + 90));
          break;
        case Cr.ⵠⵠⲆⵠΔ:
          Gv(a, Ⲇⵠ, -Ⲇⵠ.width / mj - mo * (40 + b), -Ⲇⵠ.height / bn + (c + 85) * mo);
          break;
        case Cr.ⵠⲆᐃⲆᐃ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - mo * (39 + b), -Ⲇⵠ.height / 2 + mo * (c + 90));
          break;
        case Cr.ⲆᐃᐃᐃⲆ:
        case Cr.ΔᐃᐃΔⲆ:
        case Cr.ⵠᐃᐃΔᐃ:
        case Cr.Ⲇᐃᐃⵠᐃ:
        case Cr.ⵠΔᐃⵠᐃ:
        case Cr.ⵠᐃⲆⲆΔ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - mo * (46 + b), -Ⲇⵠ.height / cu + (c + 35) * mo);
          break;
        case Cr.ΔᐃᐃⲆⲆ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / ij - mo * (47 + b), -Ⲇⵠ.height / 2 + (c + 54) * mo);
          break;
        case Cr.Ⲇᐃᐃⵠⵠ:
        case Cr.ⲆΔⵠⵠⲆ:
        case Cr.ΔⵠᐃΔᐃ:
        case Cr.ᐃⵠΔᐃⵠ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / 2 - mo * (46 + b), -Ⲇⵠ.height / 2 + (c + 35) * mo);
          break;
        case Cr.ⵠⲆⲆⵠⲆ:
          sv(a, Ⲇⵠ, -Ⲇⵠ.width / eh - (47 + b) * mo, -Ⲇⵠ.height / 2 + mo * (c + 20));
      }
    }
  }
  function Vp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ⵠⲆⵠⲆᐃ.length == 0 || Cr.ⲆⲆΔᐃⵠⲆᐃ >= this.ⵠⲆⵠⲆᐃ[this.ⵠⲆⵠⲆᐃ.length - Yt])) {
      this.ⵠⲆⵠⲆᐃ.push(Cr.ⵠⵠᐃⵠⵠⵠⲆ);
    }
    for (var a = rh; this.ⵠⲆⵠⲆᐃ.length > a; a++) {
      this.ⵠⲆⵠⲆᐃ[a] = Math.max(0, this.ⵠⲆⵠⲆᐃ[a] - Cr.ⲆᐃΔᐃⵠᐃⲆ * pf);
      to.globalAlpha = this.ⵠⲆⵠⲆᐃ[a] / 1.3;
      var b = (er - this.ⵠⲆⵠⲆᐃ[a]) * 40;
      var c = (jh - this.ⵠⲆⵠⲆᐃ[a]) * 35 + 10;
      ab(to, mo * -68 + Math.sin(-this.angle - Math.PI / 2) * b, mo * -ql + b * Math.cos(-this.angle - Math.PI / $r), c);
      tb(to, "#333333");
    }
    to.globalAlpha = Br;
    if ($t < this.ⵠⲆⵠⲆᐃ.length && this.ⵠⲆⵠⲆᐃ[0] === Kr) {
      this.ⵠⲆⵠⲆᐃ.shift();
    }
    to.restore();
  }
  function Xp() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
    to.globalAlpha = 0.3;
    var a = ΔΔ[Cr.ⲆᐃⲆΔⲆΔΔ][gf.time];
    var b = -a.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
    var c = this.ⵠⲆᐃⵠ.ᐃⲆⵠ * -a.height;
    Em(to, a, -b / 2, -c / Qs, b, c);
    to.globalAlpha = Fo;
    to.restore();
  }
  function Zp() {
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      var a = mo * ((Yt - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var b = a * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = yk;
      c = Fj;
    }
    if (this.info & 255 && ~this.info & 65280) {
      this.rotate = (this.rotate + pf * 0.5) % (Math.PI * C);
    }
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x + b, Ww.ᐃᐃᐃ.y + this.y + c);
    to.save();
    to.rotate(this.rotate);
    Ⲇⵠ = ΔΔ[Cr.ⵠΔⲆΔᐃᐃⵠ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / 2);
    to.restore();
    to.save();
    to.rotate(this.ΔΔΔⲆΔⲆⲆⲆⲆ);
    Ⲇⵠ = ΔΔ[Cr.ⲆΔΔⵠⲆΔⵠ][gf.time];
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / 2, -Ⲇⵠ.height / Uh);
    to.restore();
    to.restore();
  }
  function $p() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && M == this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = false;
      }
      var b = mo * (pf * (yl - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * 600);
      var c = b * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var d = b * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      c = 0;
      d = Kr;
    }
    var e = this.info & 15;
    if (eg === this.info || Dh === e) {
      to.rotate(this.angle);
      this.ⵠⲆᐃⵠ.Ⲇᐃⵠ();
      if (this.info & 16) {
        var f = ΔΔ[Cr.ⵠΔⲆᐃᐃⲆⲆ][gf.time];
      } else {
        f = ΔΔ[Cr.ᐃΔⵠΔΔᐃᐃ][gf.time];
      }
      var g = -f.width * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      var h = -f.height * this.ⵠⲆᐃⵠ.ᐃⲆⵠ;
      Em(to, f, -g / tg + c, -h / _l + d, g, h);
    } else {
      if (this.info & 16) {
        f = ΔΔ[Cr.ⵠⲆΔⵠΔᐃⲆ][gf.time];
      } else {
        f = ΔΔ[Cr.ⲆⵠⵠⲆⵠ][gf.time];
      }
      to.translate(0, f.height / 2);
      Em(to, f, c - f.width / Ok, -f.height + d);
    }
    to.restore();
  }
  function Ru() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    if (this.ΔᐃⵠΔ.Ⲇᐃⵠ) {
      if (this.ΔᐃⵠΔ.Δⵠⵠⵠ.Ⲇᐃⵠ() && Bh == this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆΔ) {
        this.ΔᐃⵠΔ.Ⲇᐃⵠ = bs;
      }
      var a = mo * ((Fo - this.ΔᐃⵠΔ.Δⵠⵠⵠ.ᐃⲆⵠ) * pf * 600);
      var b = a * Math.sin(this.ΔᐃⵠΔ.angle - this.angle);
      var c = a * Math.cos(this.ΔᐃⵠΔ.angle - this.angle);
    } else {
      b = kq;
      c = 0;
    }
    if (this.info === 0) {
      Ⲇⵠ = ΔΔ[Cr.ᐃᐃⵠΔΔ][gf.time];
    } else {
      Ⲇⵠ = ΔΔ[Cr.ΔⲆⲆⲆⵠ][gf.time][this.info - Yt];
    }
    Em(to, Ⲇⵠ, -Ⲇⵠ.width / yg + b, -Ⲇⵠ.height / ib + c);
    to.restore();
  }
  function Su() {
    if ((this.info & Aj) === Ur) {
      this.ΔᐃⲆΔᐃ = Math.min(this.ΔᐃⲆΔᐃ + pf, 2.2);
    } else {
      this.ΔᐃⲆΔᐃ = Math.max(this.ΔᐃⲆΔᐃ - pf, 0);
      this.ⲆᐃΔⵠᐃⵠΔ += pf;
      if (this.ⲆᐃΔⵠᐃⵠΔ > 0.1) {
        this.ⲆᐃΔⵠᐃⵠΔ = 0;
        var a = {
          x: this.x + Math.random() * 60 - 30,
          y: this.y + Math.random() * 60 - 30,
          a: 0,
          r: Math.random() * 30 + 30
        };
        this.ⵠⲆᐃⵠ.push(a);
      }
    }
    for (var b = 0; b < this.ⵠⲆᐃⵠ.length; b++) {
      a = this.ⵠⲆᐃⵠ[b];
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + a.x, Ww.ᐃᐃᐃ.y + a.y);
      a.a = Math.min(1, a.a + pf / 2);
      var c = a.a;
      if (c < 0.2) {
        c *= 5;
      } else {
        c = c > 0.8 ? (Ud - c) * Oq : 1;
      }
      to.globalAlpha = c * 0.8;
      ab(to, tr, tr, a.r);
      tb(to, Cr.ΔᐃΔⲆⲆⲆⲆ[gf.time]);
      to.restore();
      if (bt === a.a) {
        this.ⵠⲆᐃⵠ.splice(b, yl);
        b--;
      }
    }
  }
  function Tu(a, b) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    to.rotate(this.angle);
    this.ⲆΔΔⲆ.Ⲇᐃⵠ();
    c = ΔΔ[a][gf.time];
    ⵠΔΔ = -c.width * this.ⲆΔΔⲆ.ᐃⲆⵠ;
    ᐃⵠⲆ = this.ⲆΔΔⲆ.ᐃⲆⵠ * -c.height;
    Em(to, c, -ⵠΔΔ / Yn, -ᐃⵠⲆ / Dt, ⵠΔΔ / _t, ᐃⵠⲆ / 2);
    if (this.action & $v.ᐃΔⵠⵠ) {
      if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && this.ΔᐃⵠΔ.ᐃⲆΔ == sr) {
        this.action -= $v.ᐃΔⵠⵠ;
      }
      to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
      var c = ΔΔ[b];
      Em(to, c, -ⵠΔΔ / 4, -ᐃⵠⲆ / f, ⵠΔΔ / _l, ᐃⵠⲆ / pa);
      to.globalAlpha = 1;
    }
    to.restore();
  }
  function Uu(a) {
    if (a > Jt) {
      var b = ΔΔ[a][gf.time];
      switch (a) {
        case Cr.ᐃΔᐃΔΔ:
          sv(a, b, -b.width / 2 + mo * $r, -b.height / yh - mo * 5);
          break;
        case Cr.ᐃⵠⵠⵠᐃ:
          sv(a, b, -b.width / 2, -b.height / Le - mo * Q);
          break;
        case Cr.ⵠΔᐃⵠⵠ:
          sv(a, b, -b.width / C, -b.height / Uh - mo * 10);
          break;
        case Cr.ᐃⵠⵠΔᐃ:
          sv(a, b, -b.width / 2, -b.height / $r - mo * 19);
          break;
        case Cr.ΔⵠⵠᐃΔ:
          Gv(a, b, -b.width / 4, -b.height / f - mo * 20);
          break;
        case Cr.ΔΔᐃⲆΔ:
          sv(a, b, -b.width / Qs - mo * 1, -b.height / Uh - mo * 23);
          break;
        case Cr.ⲆⲆⲆᐃⲆ:
          sv(a, b, -b.width / _l, -b.height / 2 - pl * mo);
          break;
        case Cr.ᐃⵠᐃⲆᐃ:
          sv(a, b, -b.width / $r, -b.height / $r - mo * 2);
          break;
        case Cr.ᐃⵠᐃᐃΔ:
          sv(a, b, -b.width / yh + mo * 1.5, -b.height / Le - yl * mo);
          break;
        case Cr.ⲆΔⲆⲆᐃ:
        case Cr.ᐃⵠΔΔᐃ:
        case Cr.ⵠⲆⵠᐃⲆ:
        case Cr.ⵠⲆΔⲆΔ:
        case Cr.ⲆᐃⲆⲆⲆ:
        case Cr.ⵠᐃⵠⲆⲆ:
        case Cr.ⲆⵠⲆⲆⲆ:
        case Cr.ⵠⵠⵠᐃᐃ:
        case Cr.ⵠⲆⵠⲆⵠ:
        case Cr.ⵠⲆΔΔⲆ:
        case Cr.ΔⵠΔⵠⲆ:
          Gv(a, b, -b.width / 4, -b.height / 4 + mo * 2);
          break;
        case Cr.Δⵠⵠᐃᐃ:
        case Cr.ⲆᐃⲆᐃᐃ:
          sv(a, b, -b.width / 2 - Oq * mo, -b.height / 2 - mo * pa);
          break;
        case Cr.ΔΔᐃⵠⵠ:
          sv(a, b, -b.width / Le, -b.height / Xn - Ok * mo);
          break;
        case Cr.ᐃΔᐃⵠⵠ:
          sv(a, b, -b.width / 2, -b.height / Xn - mo * _t);
          break;
        case Cr.ⵠΔⲆⲆΔ:
          sv(a, b, -b.width / 2, -b.height / ib - mo * Uh);
          break;
        case Cr.ⵠⲆᐃᐃⵠ:
          sv(a, b, -b.width / 2 + _l * mo, -b.height / 2);
          break;
        case Cr.ⵠΔⵠᐃⵠ:
          sv(a, b, -b.width / 2, -b.height / Qs - mo * 5);
          break;
        case Cr.ΔⵠᐃⲆᐃ:
        case Cr.ΔⲆΔᐃⵠ:
        case Cr.ⵠⵠΔΔⵠ:
          sv(a, b, -b.width / 2 - mo * 1, -b.height / 2);
          break;
        case Cr.ᐃᐃᐃⲆᐃ:
          sv(a, b, -b.width / ij, -b.height / C + mo * 2);
          break;
        case Cr.ᐃΔᐃⵠΔ:
        case Cr.ⵠⵠⲆⲆⵠ:
          sv(a, b, -b.width / 2, -b.height / 2 + db * mo);
          break;
        case Cr.ⲆᐃᐃΔᐃ:
          sv(a, b, -b.width / 2, -b.height / 2 - mo * 4);
      }
    }
  }
  function Xu() {
    if (!this.ⵠΔᐃᐃΔ && this.ⵠⵠⲆΔᐃ !== 0) {
      if (this.r.x != this.x || this.y != this.r.y) {
        var a = (ⵠⵠⵠⲆ.ⵠΔⵠⲆΔⲆⵠ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
        this.ⵠⵠΔⲆΔ = ⵠⵠⵠⲆ.ⲆΔΔΔⵠⲆΔ(a, this.ⵠⵠΔⲆΔ);
        this.ⵠⵠΔⲆΔ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ⵠⵠΔⲆΔ, a, 0.018);
      }
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      to.rotate(this.ⵠⵠΔⲆΔ);
      if (this.ⵠⵠⲆΔᐃ === Dr.ⲆᐃⲆΔⵠ) {
        if (this.ⲆⵠⲆⲆⵠ > 50 || this.ΔΔⲆⵠΔ > Mn) {
          if (this.ⲆⵠⲆⲆⵠ > 50) {
            this.ΔΔⲆⵠΔ = Math.min(1, this.ΔΔⲆⵠΔ + pf);
          } else {
            this.ΔΔⲆⵠΔ = Math.max(tr, this.ΔΔⲆⵠΔ - pf);
          }
          to.globalAlpha = this.ΔΔⲆⵠΔ;
          var b = ΔΔ[Cr.ⲆᐃⵠᐃⲆⲆᐃ][gf.time];
          Gv(Cr.ⲆᐃⵠᐃⲆⲆᐃ, b, -b.width / gn, -b.height / kr);
          to.globalAlpha = 1;
        }
        b = ΔΔ[Cr.ⲆᐃⲆΔⵠ][gf.time];
        Gv(Cr.ⲆᐃⲆΔⵠ, b, -b.width / In, -b.height / zg);
      } else if (Dr.ΔⵠΔΔᐃ === this.ⵠⵠⲆΔᐃ) {
        this.ΔⵠⵠⲆⲆ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ΔⵠⵠⲆⲆ, this.ⲆⵠⲆⲆⵠ, 0.018);
        this.ⲆⲆⵠΔⵠΔⵠ.Ⲇᐃⵠ();
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(1, this.ΔΔⲆⵠΔ + pf / Ka);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(0.1, this.ΔΔⲆⵠΔ - pf);
        }
        b = ΔΔ[Cr.ⲆΔⲆⵠⲆⲆᐃ][gf.time];
        Gv(Cr.ⲆΔⲆⵠⲆⲆᐃ, b, -b.width / Yn, -b.height / 4);
        b = ΔΔ[Cr.ΔⵠⵠΔᐃᐃᐃ][gf.time];
        ⵠΔΔ = -b.width;
        ᐃⵠⲆ = -b.height;
        to.save();
        to.translate(-u * mo, -ns * mo);
        to.rotate(this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ * this.ΔΔⲆⵠΔ);
        Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / mj, ⵠΔΔ / pa, ᐃⵠⲆ / 2);
        to.restore();
        b = ΔΔ[Cr.ᐃⵠᐃᐃⲆⵠⲆ][gf.time];
        to.save();
        to.translate(mo * 20, mo * -20);
        to.rotate(this.ΔΔⲆⵠΔ * -this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ);
        Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / In, ⵠΔΔ / Wq, ᐃⵠⲆ / $r);
        to.restore();
      } else if (Dr.ⵠⲆᐃⲆⵠ === this.ⵠⵠⲆΔᐃ) {
        this.ΔⵠⵠⲆⲆ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ΔⵠⵠⲆⲆ, this.ⲆⵠⲆⲆⵠ, 0.018);
        this.ⲆⲆⵠΔⵠΔⵠ.Ⲇᐃⵠ();
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(Cs, this.ΔΔⲆⵠΔ + pf / 4);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(0.1, this.ΔΔⲆⵠΔ - pf);
        }
        b = ΔΔ[Cr.ⲆⲆΔⵠⲆⵠⵠ][gf.time];
        Gv(Cr.ⲆⲆΔⵠⲆⵠⵠ, b, -b.width / f, -b.height / gn);
        b = ΔΔ[Cr.ⲆΔⲆⲆᐃⵠΔ][gf.time];
        ⵠΔΔ = -b.width;
        ᐃⵠⲆ = -b.height;
        to.save();
        to.translate(mo * -40, mo * -45);
        to.rotate(this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ * this.ΔΔⲆⵠΔ);
        Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / 2);
        to.restore();
        b = ΔΔ[Cr.ⵠΔΔΔᐃⲆΔ][gf.time];
        to.save();
        to.translate(mo * 40, mo * -45);
        to.rotate(this.ΔΔⲆⵠΔ * -this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ);
        Em(to, b, -ⵠΔΔ / kr, -ᐃⵠⲆ / Lb, ⵠΔΔ / tg, ᐃⵠⲆ / _l);
        to.restore();
      } else if (Dr.ⲆΔⵠⵠⵠ === this.ⵠⵠⲆΔᐃ) {
        this.ΔⵠⵠⲆⲆ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ΔⵠⵠⲆⲆ, this.ⲆⵠⲆⲆⵠ, 0.018);
        this.ⲆⲆⵠΔⵠΔⵠ.Ⲇᐃⵠ();
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(Br, this.ΔΔⲆⵠΔ + pf / Il);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(0.1, this.ΔΔⲆⵠΔ - pf);
        }
        b = ΔΔ[Cr.ⲆᐃⲆⵠᐃΔᐃ][gf.time];
        Gv(Cr.ⲆᐃⲆⵠᐃΔᐃ, b, -b.width / qo, -b.height / 4);
        b = ΔΔ[Cr.ⲆᐃⲆΔᐃⵠΔ][gf.time];
        ⵠΔΔ = -b.width;
        ᐃⵠⲆ = -b.height;
        to.save();
        to.translate(mo * -40, mo * -45);
        to.rotate(this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ * this.ΔΔⲆⵠΔ);
        Em(to, b, -ⵠΔΔ / 4, -ᐃⵠⲆ / 4, ⵠΔΔ / 2, ᐃⵠⲆ / Qs);
        to.restore();
        b = ΔΔ[Cr.ⲆⲆΔⵠⵠⵠⵠ][gf.time];
        to.save();
        to.translate(mo * 40, mo * -45);
        to.rotate(-this.ⲆⲆⵠΔⵠΔⵠ.ᐃⲆⵠ * this.ΔΔⲆⵠΔ);
        Em(to, b, -ⵠΔΔ / Dt, -ᐃⵠⲆ / oj, ⵠΔΔ / ij, ᐃⵠⲆ / xl);
        to.restore();
      } else if (Dr.Δᐃᐃᐃᐃ === this.ⵠⵠⲆΔᐃ) {
        this.ΔⵠⵠⲆⲆ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ΔⵠⵠⲆⲆ, this.ⲆⵠⲆⲆⵠ, 0.018);
        b = ΔΔ[Cr.Δᐃᐃᐃᐃ][gf.time];
        Gv(Cr.Δᐃᐃᐃᐃ, b, -b.width / Rh, -b.height / In);
      } else if (Dr.ᐃᐃⵠⲆⵠ === this.ⵠⵠⲆΔᐃ) {
        this.ΔⵠⵠⲆⲆ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(this.ΔⵠⵠⲆⲆ, this.ⲆⵠⲆⲆⵠ, 0.018);
        b = ΔΔ[Cr.ᐃᐃⵠⲆⵠ][gf.time];
        Gv(Cr.ᐃᐃⵠⲆⵠ, b, -b.width / 4, -b.height / 4);
      } else if (this.ⵠⵠⲆΔᐃ === Dr.ᐃᐃⲆᐃⵠ) {
        b = ΔΔ[Cr.ᐃᐃⲆᐃⵠ][gf.time];
        Gv(Cr.ᐃᐃⲆᐃⵠ, b, -b.width / 4, -b.height / Il);
      } else if (this.ⵠⵠⲆΔᐃ === Dr.ⵠΔⵠΔΔ) {
        b = ΔΔ[Cr.ⵠⵠⵠⵠᐃⲆⵠ][gf.time];
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(1, this.ΔΔⲆⵠΔ + pf / mj);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(0, this.ΔΔⲆⵠΔ - pf);
        }
        this.ᐃᐃⲆΔⲆ += pf * 60;
        if (this.ᐃᐃⲆΔⲆ > 60) {
          this.ᐃᐃⲆΔⲆ -= 60;
        }
        var c = ((this.ᐃᐃⲆΔⲆ < 30 ? this.ᐃᐃⲆΔⲆ / 30 : Aj - (this.ᐃᐃⲆΔⲆ - 30) / 30) * 12 - 6) * this.ΔΔⲆⵠΔ;
        Gv(Cr.ⵠⵠⵠⵠᐃⲆⵠ, b, -b.width / 4, -b.height / qo + c);
      } else if (this.ⵠⵠⲆΔᐃ === Dr.ⵠΔᐃΔⵠ) {
        b = ΔΔ[Cr.ᐃⵠΔΔⲆⲆⵠ][gf.time];
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(ub, this.ΔΔⲆⵠΔ + pf / 4);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(jj, this.ΔΔⲆⵠΔ - pf);
        }
        this.ᐃᐃⲆΔⲆ += pf * 60;
        if (this.ᐃᐃⲆΔⲆ > 60) {
          this.ᐃᐃⲆΔⲆ -= 60;
        }
        c = (-Ll + (this.ᐃᐃⲆΔⲆ < 30 ? this.ᐃᐃⲆΔⲆ / 30 : 1 - (this.ᐃᐃⲆΔⲆ - 30) / 30) * 12) * this.ΔΔⲆⵠΔ;
        Gv(Cr.ᐃⵠΔΔⲆⲆⵠ, b, -b.width / Il, -b.height / 4 + c);
      } else if (this.ⵠⵠⲆΔᐃ === Dr.ᐃᐃΔⵠᐃ) {
        var d = Math.PI / pa;
        var e = Math.PI / qa;
        b = ΔΔ[Cr.ⵠᐃΔⵠᐃᐃⲆ][gf.time];
        if (this.ⲆⵠⲆⲆⵠ > 85) {
          this.ΔΔⲆⵠΔ = Math.min(Fo, this.ΔΔⲆⵠΔ + pf / Ai);
        } else {
          this.ΔΔⲆⵠΔ = Math.max(0, this.ΔΔⲆⵠΔ - pf);
        }
        this.ᐃᐃⲆΔⲆ += pf * 60;
        if (this.ᐃᐃⲆΔⲆ > 60) {
          this.ᐃᐃⲆΔⲆ -= 60;
        }
        c = this.ΔΔⲆⵠΔ * (-hn + (this.ᐃᐃⲆΔⲆ < 30 ? this.ᐃᐃⲆΔⲆ / 30 : V - (this.ᐃᐃⲆΔⲆ - 30) / 30) * 12);
        Gv(Cr.ⵠᐃΔⵠᐃᐃⲆ, b, -b.width / Lb + c, -b.height / In);
        to.restore();
        to.save();
        to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
        to.rotate(Math.PI + this.ⵠⵠΔⲆΔ + e);
        to.translate(120, c);
        to.rotate(d);
        b = ΔΔ[Cr.ΔⲆᐃΔΔⵠᐃ][gf.time];
        ⵠΔΔ = -b.width;
        ᐃⵠⲆ = -b.height;
        Em(to, b, -ⵠΔΔ / Le, -ᐃⵠⲆ / C, ⵠΔΔ, ᐃⵠⲆ);
        to.restore();
        to.save();
        to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
        to.rotate(Math.PI + this.ⵠⵠΔⲆΔ + d + e);
        to.translate(120, c);
        to.rotate(d);
        b = ΔΔ[Cr.ᐃᐃᐃⵠᐃᐃΔ][gf.time];
        ⵠΔΔ = -b.width;
        ᐃⵠⲆ = -b.height;
        Em(to, b, -ⵠΔΔ / eh, -ᐃⵠⲆ / 2, ⵠΔΔ, ᐃⵠⲆ);
      }
      to.restore();
    }
  }
  function Yu(b, c, d) {
    if (c.ⵠᐃⵠⵠⵠᐃᐃ() !== yl) {
      return c;
    }
    var e = ⵠΔᐃⵠΔᐃΔ[d][b];
    if (Z === e) {
      var f = (e = document.createElement("canvas")).getContext("2d");
      var g = c.width;
      var h = c.height;
      e.width = g;
      e.height = h;
      f.drawImage(c, kq, 0);
      f.globalCompositeOperation = "source-in";
      f.fillStyle = ΔᐃⲆⲆᐃⲆᐃᐃᐃ[d];
      f.fillRect(0, 0, g, h);
      ⵠΔᐃⵠΔᐃΔ[d][b] = e;
    }
    return e;
  }
  function Zu() {
    var c = Lg;
    switch (this.right) {
      case Cr.ⵠⵠΔΔΔ:
      case Cr.ᐃⵠⵠᐃⵠ:
      case Cr.ⵠⲆⲆⲆΔ:
      case Cr.ⲆᐃΔΔᐃ:
      case Cr.ⵠᐃⲆⲆᐃ:
      case Cr.ᐃⵠᐃⲆⲆ:
        c = Eg;
    }
    if (this.ⵠΔᐃᐃΔ) {
      for (var d = 0; this.bubbles.length > d; d++) {
        var f = this.bubbles[d];
        if (f.ΔᐃΔᐃⲆ > 0.5) {
          var j = 1 - (f.ΔᐃΔᐃⲆ - 0.5) * 2;
        } else {
          j = f.ΔᐃΔᐃⲆ * 2;
        }
        to.globalAlpha = j;
        var k = ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][gf.time][f.id];
        Em(to, k, Ww.ᐃᐃᐃ.x + f.x - k.width / 2, Ww.ᐃᐃᐃ.y + f.y - k.height / Le);
        to.globalAlpha = Aj;
      }
    } else {
      to.save();
      to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
      gf.ᐃᐃᐃⵠΔᐃΔⵠᐃ(this);
      if (this.action & $v.ᐃᐃⲆᐃΔⵠΔ) {
        (function (a) {
          if (a.right >= rh) {
            switch (a.right) {
              case Cr.ΔᐃᐃⲆⲆ:
                to.save();
                var b = a.attack.ᐃⲆⵠ * -Vl / Math.PI;
                if (a.attack.ᐃⲆΔ) {
                  var c = -Math.PI / Vl - (Math.PI / 3 + a.attack.ᐃⲆⵠ) / Mo;
                } else {
                  c = a.attack.ᐃⲆⵠ;
                }
                to.rotate(a.angle - Math.PI / Le + c);
                to.globalAlpha = b / 1.2;
                ab(to, mo * -40, mo * 90, mo * Wn);
                tb(to, "#0B6A84");
                to.globalAlpha = b / 1.2;
                ab(to, mo * -52, Yi * mo, fg * mo);
                tb(to, "#0B6A84");
                to.globalAlpha = b / 1.2;
                ab(to, mo * -30, mo * 95, Lb * mo);
                tb(to, "#0B6A84");
                to.globalAlpha = 1;
                to.restore();
                break;
              case Cr.Ⲇᐃᐃⵠⵠ:
              case Cr.ⲆΔⵠⵠⲆ:
              case Cr.ΔⵠᐃΔᐃ:
              case Cr.ᐃⵠΔᐃⵠ:
                if (a.ⲆΔΔᐃᐃΔΔ === 1) {
                  break;
                }
                if (a.ⲆⲆᐃΔᐃ > rh) {
                  var d = Cr.ⵠⲆΔᐃΔᐃⲆ[gf.time];
                } else {
                  d = a.ᐃⲆⲆⲆΔⵠⵠ > Gd || a.ⲆᐃⵠⲆⵠ > 0 ? Cr.ΔΔⵠⵠᐃⵠᐃ[gf.time] : Cr.ΔΔᐃΔΔΔⵠ[gf.time];
                }
                b = a.attack.ᐃⲆⵠ * -3 / Math.PI;
                c = a.attack.ᐃⲆΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / Le, 0);
                if (Ol === c) {
                  a.ᐃᐃᐃᐃᐃᐃᐃ = a.angle;
                }
                to.save();
                to.rotate(a.ᐃᐃᐃᐃᐃᐃᐃ - Math.PI / yg);
                to.globalAlpha = b;
                var e = mo * 25 + c * 25;
                ab(to, e, mo * 80, mo * 15);
                tb(to, d);
                ab(to, -e, mo * 80, m * mo);
                tb(to, d);
                to.globalAlpha = jh;
                to.restore();
            }
          }
        })(this);
      }
      to.save();
      to.rotate(this.angle - Math.PI / _l);
      if (!(this.action & $v.ᐃᐃⲆᐃΔⵠΔ)) {
        if (this.action & $v.IDLE || Lg !== this.ⵠⵠⲆΔᐃ) {
          this.ΔⵠΔΔᐃᐃᐃ.Ⲇᐃⵠ();
        } else if (this.action & $v.ΔᐃⲆⵠⵠᐃᐃ) {
          this.ΔΔⵠⲆᐃⵠᐃ.Ⲇᐃⵠ();
        }
      }
      var p;
      var q = this.ΔⵠΔΔᐃᐃᐃ.ᐃⲆⵠ;
      var w = this.ΔΔⵠⲆᐃⵠᐃ.ᐃⲆⵠ;
      if (Cr.ᐃΔᐃⵠⵠ === this.ⵠΔⵠⲆᐃ) {
        k = ΔΔ[Cr.ⵠⲆⵠΔⲆ][gf.time];
        p = Cr.ⵠⲆⵠΔⲆ;
      } else if (Cr.ᐃⵠΔΔᐃ === this.ⵠΔⵠⲆᐃ) {
        k = ΔΔ[Cr.ⵠⲆⲆᐃΔ][gf.time];
        p = Cr.ⵠⲆⲆᐃΔ;
      } else if (this.ⵠΔⵠⲆᐃ === Cr.ⵠⲆⵠᐃⲆ) {
        k = ΔΔ[Cr.ΔⵠⲆⲆᐃⲆΔ][gf.time];
        p = Cr.ΔⵠⲆⲆᐃⲆΔ;
      } else if (this.ⵠΔⵠⲆᐃ === Cr.ⵠⲆΔⲆΔ) {
        k = ΔΔ[Cr.ΔΔⵠᐃᐃΔΔ][gf.time];
        p = Cr.ΔΔⵠᐃᐃΔΔ;
      } else if (this.ᐃⲆᐃΔⲆᐃΔ) {
        k = ΔΔ[Cr.ᐃΔⵠⲆᐃᐃⲆ][gf.time];
        p = Cr.ᐃΔⵠⲆᐃᐃⲆ;
      } else {
        k = ΔΔ[Cr.ΔⲆⲆᐃᐃ][this.ⲆΔⲆⵠ][gf.time];
        p = Cr.ΔⲆⲆᐃᐃ;
      }
      ᐃᐃΔⲆ = ΔΔ[Cr.ⵠⲆⲆΔⲆ][gf.time];
      var x = k;
      var h = p;
      if (this.action & $v.ᐃᐃⲆᐃΔⵠΔ) {
        if (this.attack.Ⲇᐃⵠ() && this.attack.ᐃⲆΔ == 0) {
          this.ᐃᐃⵠⵠᐃ = !this.ᐃᐃⵠⵠᐃ;
          this.action -= $v.ᐃᐃⲆᐃΔⵠΔ;
          if (Ww.ᐃⲆᐃⲆ == this.ᐃⲆᐃⲆ) {
            Ww.control.ⲆᐃΔᐃ = 0;
          }
        }
        if (ko <= this.right) {
          this.ᐃᐃⵠⵠᐃ = le;
        }
        var l = this.ᐃᐃⵠⵠᐃ ? this.attack.ᐃⲆⵠ : -this.attack.ᐃⲆⵠ / 3;
        var y = this.ᐃᐃⵠⵠᐃ ? this.attack.ᐃⲆⵠ / Za : -this.attack.ᐃⲆⵠ;
        if (this.ᐃⲆᐃΔⲆᐃΔ) {
          to.save();
          to.rotate(l);
          sv(p, k, -k.width / yh - (66 + q) * mo, -k.height / tg + (5 + w) * mo);
          to.restore();
          to.save();
          to.rotate(y);
          sv(p, k, -k.width / 2 + (66 + q) * mo, -k.height / 2 + (5 + w) * mo);
          to.restore();
        } else if (c === 0) {
          if (Cr.ⵠᐃᐃⲆᐃ === this.right) {
            l = -ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ(-l);
          }
          to.save();
          to.rotate(l);
          sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 - (49 + q) * mo, -ᐃᐃΔⲆ.height / pa + mo * (Ag + w));
          if (this.right === Cr.ⲆⵠⵠⲆⲆ) {
            var u = ΔΔ[this.right][this.ΔⲆⵠⵠᐃ][gf.time];
            Fv(this.right, this.ΔⲆⵠⵠᐃ, u, -u.width / kr - mo * (62 + q), -u.height / 4 + (w + N) * mo);
          } else {
            Kp(this.right, q, w);
          }
          if (Cr.ⵠⲆⲆᐃΔ <= p) {
            Gv(p, k, -k.width / Rh - (49 + q) * mo, -k.height / Ka + mo * (xg + w));
          } else if (p !== Cr.ⵠⲆⵠΔⲆ) {
            Fv(p, this.ⲆΔⲆⵠ, k, -k.width / qa - mo * (49 + q), -k.height / oj + mo * (11 + w));
          } else {
            sv(p, k, -k.width / 2 - (49 + q) * mo, -k.height / 2 + (oo + w) * mo);
          }
          to.restore();
          to.save();
          to.rotate(y);
          sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / pa + mo * (49 + q), -ᐃᐃΔⲆ.height / 2 + mo * (vh + w));
          if (Cr.ⵠⲆⲆᐃΔ <= p) {
            Gv(p, k, -k.width / Lb + (49 + q) * mo, -k.height / qa + mo * (11 + w));
          } else if (p !== Cr.ⵠⲆⵠΔⲆ) {
            Fv(p, this.ⲆΔⲆⵠ, k, -k.width / Ka + mo * (49 + q), -k.height / 4 + (11 + w) * mo);
          } else {
            sv(p, k, -k.width / 2 + mo * (49 + q), -k.height / Le + (Lr + w) * mo);
          }
          to.restore();
        }
      } else if (this.ᐃⲆᐃΔⲆᐃΔ) {
        sv(p, k, -k.width / eh - (66 + q) * mo, -k.height / 2 + (vu + w) * mo);
        sv(p, k, -k.width / 2 + (66 + q) * mo, -k.height / kn + (5 + w) * mo);
      } else if (c === Kr) {
        sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 - mo * (49 + q), -ᐃᐃΔⲆ.height / 2 + (15 + w) * mo);
        if (Cr.ⲆⵠⵠⲆⲆ === this.right) {
          u = ΔΔ[this.right][this.ΔⲆⵠⵠᐃ][gf.time];
          Fv(this.right, this.ΔⲆⵠⵠᐃ, u, -u.width / 4 - mo * (62 + q), -u.height / Ai + mo * (w + $a));
        } else {
          Kp(this.right, q, w);
        }
        if (p >= Cr.ⵠⲆⲆᐃΔ) {
          Gv(p, k, -k.width / Yn - mo * (49 + q), -k.height / 4 + mo * (11 + w));
        } else if (Cr.ⵠⲆⵠΔⲆ !== p) {
          Fv(p, this.ⲆΔⲆⵠ, k, -k.width / 4 - mo * (49 + q), -k.height / 4 + (11 + w) * mo);
        } else {
          sv(p, k, -k.width / 2 - mo * (49 + q), -k.height / xl + (11 + w) * mo);
        }
        sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / 2 + mo * (49 + q), -ᐃᐃΔⲆ.height / eh + mo * (15 + w));
        if (p >= Cr.ⵠⲆⲆᐃΔ) {
          Gv(p, k, -k.width / kr + mo * (49 + q), -k.height / oj + (11 + w) * mo);
        } else if (p !== Cr.ⵠⲆⵠΔⲆ) {
          Fv(p, this.ⲆΔⲆⵠ, k, -k.width / 4 + mo * (49 + q), -k.height / 4 + (Kg + w) * mo);
        } else {
          sv(p, k, -k.width / xl + mo * (49 + q), -k.height / Qs + mo * (11 + w));
        }
      }
      if (this.ᐃΔᐃᐃⲆ && this.ⵠΔⵠⲆᐃ < 1) {
        k = ΔΔ[Cr.ᐃⵠΔⵠ][this.ΔΔⲆⲆᐃⲆⲆ][gf.time];
        Fv(Cr.ᐃⵠΔⵠ, this.ΔΔⲆⲆᐃⲆⲆ, k, -k.width / 4, -k.height / 4 - mo * 39);
      }
      if (this.ᐃⲆᐃΔⲆᐃΔ) {
        k = ΔΔ[Cr.ⲆΔⵠΔᐃⲆᐃ][gf.time];
        sv(Cr.ⲆΔⵠΔᐃⲆᐃ, k, -k.width / _t, -k.height / pa);
        this.ⲆⵠᐃⲆΔⲆΔ.Ⲇᐃⵠ();
        k = ΔΔ[Cr.ⲆⲆⵠΔᐃⲆⵠ][gf.time];
        sv(Cr.ⲆⲆⵠΔᐃⲆⵠ, k, -k.width / 2, -k.height / 2 + this.ⲆⵠᐃⲆΔⲆΔ.ᐃⲆⵠ);
      } else {
        k = ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][gf.time];
        if (Cr.ᐃΔᐃⵠⵠ !== this.ⵠΔⵠⲆᐃ && (Fv(Cr.ⲆⵠᐃΔΔⵠⲆ, this.ⲆΔⲆⵠ, k, -k.width / Yn, -k.height / 4), this.ΔᐃᐃΔⵠ > Mn)) {
          k = ΔΔ[Cr.ⲆⵠᐃᐃΔ][this.ΔᐃᐃΔⵠ][gf.time];
          Fv(Cr.ⲆⵠᐃᐃΔ, this.ΔᐃᐃΔⵠ, k, -k.width / qo, -k.height / Yn);
        }
      }
      if (this.action & $v.ΔⲆᐃΔⵠᐃΔ) {
        if (this.ΔⵠⲆᐃⵠ.Ⲇᐃⵠ() && this.ΔⵠⲆᐃⵠ.ᐃⲆΔ == ys) {
          this.action -= $v.ΔⲆᐃΔⵠᐃΔ;
        }
        to.globalAlpha = 0.6 - this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ;
        if (this.ᐃⲆᐃΔⲆᐃΔ) {
          k = ΔΔ[Cr.ⲆᐃⵠⲆΔΔⲆ];
          Em(to, k, -k.width / 2, -k.height / 2);
        } else {
          k = Yu(this.ⲆΔⲆⵠ, ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][Ol], ⲆᐃᐃⲆⵠΔΔᐃⲆ);
          Em(to, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / Uh);
        }
        to.globalAlpha = 1;
      }
      if (this.action & $v.ⲆΔⲆΔⵠᐃⵠ) {
        if (this.ΔᐃᐃⲆᐃΔⲆ.Ⲇᐃⵠ() && this.ΔᐃᐃⲆᐃΔⲆ.ᐃⲆΔ == 0) {
          this.action -= $v.ⲆΔⲆΔⵠᐃⵠ;
        }
        to.globalAlpha = 0.6 - this.ΔᐃᐃⲆᐃΔⲆ.ᐃⲆⵠ;
        k = ΔΔ[Cr.ⲆΔⲆΔⵠᐃⵠ];
        Em(to, k, -k.width / 2, -k.height / 2);
        to.globalAlpha = 1;
      }
      if (this.action & $v.ᐃΔⵠⵠ) {
        if (this.ΔᐃⵠΔ.Ⲇᐃⵠ() && ue == this.ΔᐃⵠΔ.ᐃⲆΔ) {
          this.action -= $v.ᐃΔⵠⵠ;
        }
        to.globalAlpha = 0.6 - this.ΔᐃⵠΔ.ᐃⲆⵠ;
        if (this.ᐃⲆᐃΔⲆᐃΔ) {
          k = ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃᐃ];
          Em(to, k, -k.width / xl, -k.height / 2);
        } else {
          k = Yu(this.ⲆΔⲆⵠ, ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][0], ᐃⲆⵠΔⵠⲆⲆⲆᐃ);
          Em(to, k, k.width / gn, k.height / Ka, -k.width / cu, -k.height / Wq);
        }
        to.globalAlpha = ce;
      }
      if (this.action & $v.ᐃΔΔΔⵠ) {
        if (this.freeze.Ⲇᐃⵠ() && this.freeze.ᐃⲆΔ == 0) {
          this.action -= $v.ᐃΔΔΔⵠ;
        }
        to.globalAlpha = 0.6 - this.freeze.ᐃⲆⵠ;
        k = Yu(this.ⲆΔⲆⵠ, ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][Fj], ᐃⵠⲆⲆΔⵠⲆΔⲆ);
        Em(to, k, k.width / bn, k.height / Rh, -k.width / _t, -k.height / 2);
        to.globalAlpha = 1;
      }
      if (this.action & $v.ⲆΔⵠΔᐃΔⲆ) {
        if (this.ΔⵠᐃⵠⲆⲆΔ.Ⲇᐃⵠ() && sr == this.ΔⵠᐃⵠⲆⲆΔ.ᐃⲆΔ) {
          this.action -= $v.ⲆΔⵠΔᐃΔⲆ;
        }
        to.globalAlpha = 0.6 - this.ΔⵠᐃⵠⲆⲆΔ.ᐃⲆⵠ;
        if (this.ᐃⲆᐃΔⲆᐃΔ) {
          k = ΔΔ[Cr.ᐃⵠⲆΔⵠᐃᐃ];
          Em(to, k, -k.width / 2, -k.height / 2);
        } else {
          k = Yu(this.ⲆΔⲆⵠ, ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][0], ⲆΔᐃΔᐃΔᐃᐃⲆ);
          Em(to, k, k.width / 4, k.height / bn, -k.width / Xn, -k.height / yg);
        }
        to.globalAlpha = 1;
      }
      Uu(this.ⵠΔⵠⲆᐃ);
      if (c === 1) {
        if (this.action & $v.ᐃᐃⲆᐃΔⵠΔ) {
          q += Jr * this.attack.ᐃⲆⵠ;
        }
        sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / eh - mo * 26, -ᐃᐃΔⲆ.height / yh + (31 + w + q) * mo);
        if (h >= Cr.ⵠⲆⲆᐃΔ) {
          Gv(h, x, -x.width / 4 - mo * 26, -x.height / bn + (27 + w + q) * mo);
        } else if (h !== Cr.ⵠⲆⵠΔⲆ) {
          Fv(h, this.ⲆΔⲆⵠ, x, -x.width / 4 - mo * 26, -x.height / mj + mo * (27 + w + q));
        } else {
          sv(h, x, -x.width / tg - mo * 26, -x.height / 2 + (27 + w + q) * mo);
        }
        sv(Cr.ⵠⲆⲆΔⲆ, ᐃᐃΔⲆ, -ᐃᐃΔⲆ.width / ij + mo * 26, -ᐃᐃΔⲆ.height / Xn + mo * (31 + w + q));
        if (h >= Cr.ⵠⲆⲆᐃΔ) {
          Gv(h, x, -x.width / 4 + mo * 26, -x.height / 4 + (27 + w + q) * mo);
        } else if (Cr.ⵠⲆⵠΔⲆ !== h) {
          Fv(h, this.ⲆΔⲆⵠ, x, -x.width / 4 + mo * 26, -x.height / Yn + mo * (27 + w + q));
        } else {
          sv(h, x, -x.width / pa + mo * 26, -x.height / 2 + (27 + w + q) * mo);
        }
        Lp(this.right, 0, w + q);
      }
      to.restore();
      if (Cr.ᐃᐃᐃⲆᐃ !== this.ⵠΔⵠⲆᐃ && Cr.ᐃΔᐃⵠⵠ !== this.ⵠΔⵠⲆᐃ) {
        if (Lu < this.ⲆⲆᐃΔᐃ) {
          if (!this.ᐃⲆⲆΔ.ⲆⵠⵠᐃᐃⲆⲆ) {
            this.ᐃⲆⲆΔ.ⲆⵠⵠᐃᐃⲆⲆ = Bu(mo, this.ᐃⲆⲆΔ.ᐃΔⲆⵠΔ, 20, "#187484", "#000", 2, null, null, mo * 300);
          }
          k = this.ᐃⲆⲆΔ.ⲆⵠⵠᐃᐃⲆⲆ;
        } else {
          if (!this.ᐃⲆⲆΔ.label) {
            this.ᐃⲆⲆΔ.label = Bu(mo, this.ᐃⲆⲆΔ.ᐃΔⲆⵠΔ, vj, "#FFF", "#000", 2, null, null, mo * 300);
          }
          k = this.ᐃⲆⲆΔ.label;
        }
        if (Cr.ΔΔⵠ == gf.Δⵠⵠ) {
          to.globalAlpha = 0.5;
        }
        q = Math.floor(-k.width / 2);
        w = Math.floor(-k.height / pa - mo * 70);
        Em(to, k, q, w);
        if (ko < this.ᐃⲆⲆΔ.level) {
          var z = q + k.width + Th;
          k = ΔΔ[Cr.ⲆⵠⲆⵠᐃᐃΔ];
          if (ᐃⵠΔᐃΔΔⵠ[this.ᐃⲆⲆΔ.level] === Nl) {
            ᐃⵠΔᐃΔΔⵠ[this.ᐃⲆⲆΔ.level] = Bu(mo, "[" + this.ᐃⲆⲆΔ.level + "]", 20, "#F9E8A2", "#000", tg, null, null, mo * 50);
          }
          Em(to, ᐃⵠΔᐃΔΔⵠ[this.ᐃⲆⲆΔ.level], z, w);
        }
        to.globalAlpha = ub;
      } else {
        w = Math.floor(mo * -70);
        q = Math.floor(ΔΔ[Cr.ⲆᐃⲆᐃⵠΔⲆ].width / 1.5);
      }
      if (Ww.ᐃᐃᐃⵠΔⵠⲆ(this.ΔⲆᐃΔ)) {
        if (this.ΔⲆᐃΔ == Ww.ⲆⲆⲆⵠⵠ[0]) {
          k = ΔΔ[Cr.ⵠⲆᐃⵠⵠᐃᐃ];
        } else {
          k = ΔΔ[Cr.ⲆᐃⲆᐃⵠΔⲆ];
        }
        Em(to, k, q - k.width - 5, w - hi);
      }
      to.restore();
    }
  }
  function $u() {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + this.x, Ww.ᐃᐃᐃ.y + this.y);
    if (this.text.length > 0) {
      for (var a = 0; this.text.length > a && a < 2; a++) {
        if (!this.label[a]) {
          this.label[a] = vb(mo, this.text[a]);
          this.ΔΔⲆⲆⵠⵠⵠ[a] = Ol;
          this.ᐃⲆᐃΔᐃⵠᐃ[a] = Lu;
        }
        if (Ur === a) {
          this.ᐃⲆᐃΔᐃⵠᐃ[Mn] = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(this.ⲆⵠⵠᐃⲆΔⲆ) * 30;
        }
      }
      this.ΔΔⲆⲆⵠⵠⵠ[0] += pf;
      if (this.text.length > 1) {
        this.ⲆⵠⵠᐃⲆΔⲆ = Math.min(this.ⲆⵠⵠᐃⲆΔⲆ + pf, 1);
        if (this.ΔΔⲆⲆⵠⵠⵠ[xb] > 1 && this.ⲆⵠⵠᐃⲆΔⲆ > 0.5) {
          this.ΔΔⲆⲆⵠⵠⵠ[er] += pf;
        }
      }
      for (a = tr; this.text.length > a && $r > a; a++) {
        var b = this.ΔΔⲆⲆⵠⵠⵠ[a];
        if (b > 0) {
          to.globalAlpha = b < 0.25 ? b * xt : b > 3.75 ? Math.max((4 - b) * 4, Gd) : 1;
          Em(to, this.label[a], -this.label[a].width / 2, -this.ᐃⲆᐃΔᐃⵠᐃ[a] + -this.label[a].height / eh - mo * 110);
        }
      }
      if (Lb < this.ΔΔⲆⲆⵠⵠⵠ[0]) {
        this.ΔΔⲆⲆⵠⵠⵠ.shift();
        this.text.shift();
        this.ᐃⲆᐃΔᐃⵠᐃ.shift();
        this.label.shift();
        this.ⲆⵠⵠᐃⲆΔⲆ = _s;
      }
    }
    to.restore();
  }
  function _u() {
    if (Lk !== this.message) {
      var a = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length > 0 ? -95 : 0;
      Em(to, this.message, 0, so - this.message.height + a);
    }
  }
  function av() {
    if (this.enabled && this.ΔⵠᐃⲆⲆ >= 0) {
      var a = new Date().getTime() - this.ΔⵠᐃⲆⲆ;
      var b = a % 1000 / 1000;
      if (b > 0.5) {
        b = 1 - (b - 0.5) * kn;
      } else {
        b *= 2;
      }
      a = Math.floor(a / 1000);
      if (bw.ᐃⲆΔⵠⵠᐃⲆ > a) {
        a = bw.ᐃⲆΔⵠⵠᐃⲆ - a;
        if (!this.label) {
          this.label = Bu(mo, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
        }
        if (a != this.now || !this.ⵠⲆⵠΔⲆⲆⲆ) {
          this.now = a;
          this.ⵠⲆⵠΔⲆⲆⲆ = Bu(mo, "" + a, 40, "#660000", null, null, null, null, null, "#000", oa);
        }
        Em(to, this.label, (ro - this.label.width) / 2, mo * 100);
        to.globalAlpha = b;
        Em(to, this.ⵠⲆⵠΔⲆⲆⲆ, (ro - this.label.width) / 2 - this.ⵠⲆⵠΔⲆⲆⲆ.width + mo * 15, mo * 100);
        to.globalAlpha = Cs;
      }
    }
  }
  function bv(a, b) {
    if (this.text) {
      if (this.timeout.ᐃⲆΔ) {
        to.globalAlpha = 1 - this.timeout.ᐃⲆⵠ;
      } else {
        to.globalAlpha = 1;
      }
      this.label ||= Bu(mo, this.text, 40, a, null, null, null, null, null, b, 10);
      Em(to, this.label, (ro - this.label.width) / 2, mo * 50);
      to.globalAlpha = Ur;
      if (this.timeout.Ⲇᐃⵠ() && v == this.timeout.ᐃⲆΔ) {
        this.text = this.list.shift();
        this.label = null;
      }
    }
  }
  ᐃⲆⵠΔⵠⲆⲆⲆᐃ = 0;
  ⲆᐃᐃⲆⵠΔΔᐃⲆ = 1;
  ᐃⵠⲆⲆΔⵠⲆΔⲆ = 2;
  ⲆΔᐃΔᐃΔᐃᐃⲆ = Mo;
  ᐃΔⵠⲆⲆΔᐃᐃᐃ = Lb;
  ⵠΔᐃⵠΔᐃΔ = [[], [], [], [], []];
  ΔᐃⲆⲆᐃⲆᐃᐃᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
  var cv = 0;
  function dv(j, e, i, k, n, o, q, a) {
    if (a === jr) {
      a = 0;
    }
    for (var r = q; a <= r; r--) {
      for (var t = j; e >= t; t++) {
        for (var w = i; w <= k; w++) {
          var x = Uw.ⲆⲆⲆᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (y !== Ya) {
              for (var z = ko; z < y.length; z++) {
                var A = y[z];
                var B = ΔΔ[n][gf.time][r];
                var D = (cv + cl * (t + w)) % 60;
                var E = D < 30 ? D / 30 : Br - (D - 30) / 30;
                var F = -B.width * (sd + E * 0.9 / 30);
                var G = (ik + E * 0.9 / 30) * -B.height;
                E = (D = (cv + (t + w) * 7) % 60) < 30 ? D / 30 : 1 - (D - 30) / 30;
                var H = to.globalAlpha;
                to.globalAlpha = H * (0.9 + E * 0.1);
                Em(to, B, Ww.ᐃᐃᐃ.x + A.x - F / 2, Ww.ᐃᐃᐃ.y + A.y - G / 2, F, G);
                to.globalAlpha = H;
              }
            }
          }
        }
      }
    }
  }
  function ev(j, e, i, k, n, o, q, a) {
    if (Qi === a) {
      a = Dh;
    }
    gf.ⲆΔΔⲆ[n].Ⲇᐃⵠ();
    for (var r = q; a <= r; r--) {
      for (var t = j; t <= e; t++) {
        for (var w = i; w <= k; w++) {
          var x = Uw.ⲆⲆⲆᐃ[t][w];
          if (x && x[o]) {
            var y = x[o][r];
            if (gh !== y) {
              for (var z = 0; y.length > z; z++) {
                var A = y[z];
                if (A.Ⲇᐃⵠ) {
                  if (A.ΔᐃⵠΔ.Ⲇᐃⵠ() && Pq == A.ΔᐃⵠΔ.ᐃⲆΔ) {
                    A.Ⲇᐃⵠ = false;
                  }
                  var B = mo * ((sd - A.ΔᐃⵠΔ.ᐃⲆⵠ) * pf * 600);
                  var D = Math.sin(A.angle) * B;
                  var E = Math.cos(A.angle) * B;
                } else {
                  D = 0;
                  E = Jt;
                }
                var F = ΔΔ[n][gf.time][r];
                var G = -F.width * gf.ⲆΔΔⲆ[n].ᐃⲆⵠ;
                var H = gf.ⲆΔΔⲆ[n].ᐃⲆⵠ * -F.height;
                Em(to, F, Ww.ᐃᐃᐃ.x + A.x - G / $r + D, Ww.ᐃᐃᐃ.y + A.y - H / 2 + E, G, H);
              }
            }
          }
        }
      }
    }
  }
  var fv = [];
  for (ut = Wh; ut < 100; ut++) {
    var gv = Yt;
    if (Math.random() < 0.25) {
      gv = Dh;
    }
    fv.push(gv);
  }
  function hv(j, e, i, k, n, o, q, a = 0, r) {
    for (var h = q; a <= h; h--) {
      for (var s = j; e >= s; s++) {
        for (var t = i; t <= k; t++) {
          var w = Uw.ⲆⲆⲆᐃ[s][t];
          if (w !== Tg && D !== w[o]) {
            var x = w[o][h];
            if (x !== vl) {
              for (var A = 0; A < x.length; A++) {
                var B = x[A];
                if (B.Ⲇᐃⵠ) {
                  if (B.ΔᐃⵠΔ.Ⲇᐃⵠ() && B.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
                    B.Ⲇᐃⵠ = false;
                  }
                  var E = mo * (pf * (Yt - B.ΔᐃⵠΔ.ᐃⲆⵠ) * 600);
                  var F = Math.sin(B.angle) * E;
                  var G = Math.cos(B.angle) * E;
                } else {
                  F = _s;
                  G = ko;
                }
                for (var H = 0; ΔΔᐃᐃⵠⵠⵠ[h].ⲆᐃⵠⲆ > H; H++) {
                  if (gf.ᐃΔⵠⲆⵠ[H].ⲆᐃᐃⵠΔᐃᐃ !== $w) {
                    gf.ᐃΔⵠⲆⵠ[H].Ⲇᐃⵠ();
                    gf.ᐃΔⵠⲆⵠ[H].ⲆᐃᐃⵠΔᐃᐃ = $w;
                  }
                  var I = ΔΔ[Cr.ᐃⵠⲆΔᐃ][gf.time][ΔΔᐃᐃⵠⵠⵠ[h].ⵠⵠᐃᐃ[H].ⵠᐃⲆ];
                  var J = -I.width * gf.ᐃΔⵠⲆⵠ[H].ᐃⲆⵠ;
                  var K = -I.height * gf.ᐃΔⵠⲆⵠ[H].ᐃⲆⵠ;
                  Em(to, I, Ww.ᐃᐃᐃ.x + B.x - J / 4 + F + ΔΔᐃᐃⵠⵠⵠ[h].ⵠⵠᐃᐃ[H].x, Ww.ᐃᐃᐃ.y + B.y - K / Dt + G + ΔΔᐃᐃⵠⵠⵠ[h].ⵠⵠᐃᐃ[H].y, J / 2, K / cu);
                }
              }
            }
          }
        }
      }
    }
  }
  function iv(f, e, i, j, k, n, o, a, q) {
    if (a === Qi) {
      a = 0;
    }
    for (var h = o; h >= a; h--) {
      for (var r = f; r <= e; r++) {
        for (var t = i; j >= t; t++) {
          if (q <= 0 || fv[(r + t * q) % fv.length] !== 1) {
            var w = Uw.ⲆⲆⲆᐃ[r][t];
            if (w !== undefined && w[n] !== Hh) {
              var x = w[n][h];
              if (x !== On) {
                for (var y = 0; x.length > y; y++) {
                  var z = x[y];
                  if (z.Ⲇᐃⵠ) {
                    if (z.ΔᐃⵠΔ.Ⲇᐃⵠ() && z.ΔᐃⵠΔ.ᐃⲆΔ == 0) {
                      z.Ⲇᐃⵠ = false;
                    }
                    var A = mo * (pf * (1 - z.ΔᐃⵠΔ.ᐃⲆⵠ) * 600);
                    var B = A * Math.sin(z.angle);
                    var D = Math.cos(z.angle) * A;
                  } else {
                    B = 0;
                    D = 0;
                  }
                  var E = ΔΔ[k][gf.time][h];
                  Em(to, E, Ww.ᐃᐃᐃ.x + z.x - E.width / (ⵠᐃΔΔⵠ * 2) + B, Ww.ᐃᐃᐃ.y + z.y - E.height / (ⵠᐃΔΔⵠ * Wq) + D, E.width / ⵠᐃΔΔⵠ, E.height / ⵠᐃΔΔⵠ);
                }
              }
            }
          }
        }
      }
    }
  }
  function jv(c, e, f, i, j, k, m, a, n) {
    if (a === jr) {
      a = 0;
    }
    for (var h = c; e >= h; h++) {
      for (var o = f; o <= i; o++) {
        var p = Uw.ⲆⲆⲆᐃ[h][o];
        if (p !== undefined && p[k] !== jr) {
          var q = p[k];
          if (vl !== q) {
            if (q.scale === 1) {
              var r = ΔΔ[j][gf.time][q.ΔᐃⲆΔ];
              to.save();
              to.translate(Ww.ᐃᐃᐃ.x + q.x, Ww.ᐃᐃᐃ.y + q.y);
              to.rotate(q.angle);
              Em(to, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
              to.restore();
            } else if (q.scale === 3) {
              for (var t = ko; t < q.ΔⵠⲆ.length; t++) {
                to.save();
                to.translate(Ww.ᐃᐃᐃ.x + q.x, Ww.ᐃᐃᐃ.y + q.y);
                to.rotate(q.ΔⵠⲆ[t].angle);
                r = ΔΔ[j][gf.time][q.ΔⵠⲆ[t].ΔᐃⲆΔ];
                Em(to, r, -r.width / Vl + q.ΔⵠⲆ[t].x, -r.height / nh + q.ΔⵠⲆ[t].y, r.width / 1.5, r.height / 1.5);
                to.restore();
              }
            } else {
              r = ΔΔ[j][gf.time][q.ΔᐃⲆΔ];
              to.save();
              to.translate(Ww.ᐃᐃᐃ.x + q.x, Ww.ᐃᐃᐃ.y + q.y);
              to.rotate(q.angle);
              Em(to, r, -r.width / Uh, -r.height / 2, r.width, r.height);
              to.restore();
            }
          }
        }
      }
    }
  }
  ⵠᐃΔΔⵠ = 1;
  ΔΔᐃᐃⵠⵠⵠ = [{
    ⲆᐃⵠⲆ: oa,
    ⵠⵠᐃᐃ: [{
      x: -128,
      y: -Ye,
      ⵠᐃⲆ: 0
    }, {
      x: -86,
      y: -Yn,
      ⵠᐃⲆ: 1
    }, {
      y: -74,
      x: -60,
      ⵠᐃⲆ: eh
    }, {
      y: -144,
      ⵠᐃⲆ: Ol,
      x: -22
    }, {
      x: -58,
      ⵠᐃⲆ: rh,
      y: 86
    }, {
      y: -30,
      ⵠᐃⲆ: Jt,
      x: 3
    }, {
      y: -115,
      x: 65,
      ⵠᐃⲆ: V
    }, {
      y: -50,
      ⵠᐃⲆ: 0,
      x: 118
    }, {
      ⵠᐃⲆ: Eg,
      x: 73,
      y: Gs
    }, {
      y: 79,
      x: 67,
      ⵠᐃⲆ: 0
    }]
  }, {
    ⲆᐃⵠⲆ: Bb,
    ⵠⵠᐃᐃ: [{
      x: -45,
      ⵠᐃⲆ: jj,
      y: -26
    }, {
      y: _j,
      ⵠᐃⲆ: yh,
      x: -45
    }, {
      ⵠᐃⲆ: 1,
      y: -60,
      x: bb
    }, {
      x: 52,
      y: -$h,
      ⵠᐃⲆ: 1
    }, {
      x: 14,
      ⵠᐃⲆ: 0,
      y: 45
    }]
  }, {
    ⲆᐃⵠⲆ: nh,
    ⵠⵠᐃᐃ: [{
      x: -30,
      y: 3,
      ⵠᐃⲆ: _t
    }, {
      x: 7,
      ⵠᐃⲆ: 2,
      y: -38
    }, {
      ⵠᐃⲆ: 2,
      x: 37,
      y: 5
    }]
  }, {
    ⲆᐃⵠⲆ: 11,
    ⵠⵠᐃᐃ: [{
      ⵠᐃⲆ: $r,
      x: -74,
      y: -87
    }, {
      x: -11,
      y: -ll,
      ⵠᐃⲆ: 1
    }, {
      ⵠᐃⲆ: 1,
      x: -99,
      y: 17
    }, {
      x: -66,
      y: 84,
      ⵠᐃⲆ: 0
    }, {
      y: 123,
      x: -55,
      ⵠᐃⲆ: 1
    }, {
      x: rd,
      ⵠᐃⲆ: 2,
      y: 81
    }, {
      ⵠᐃⲆ: 0,
      x: 52,
      y: 50
    }, {
      x: 138,
      y: rb,
      ⵠᐃⲆ: 1
    }, {
      ⵠᐃⲆ: 0,
      y: -28,
      x: 104
    }, {
      ⵠᐃⲆ: 2,
      y: -56,
      x: 67
    }, {
      y: -112,
      x: 5,
      ⵠᐃⲆ: 0
    }]
  }, {
    ⵠⵠᐃᐃ: [{
      x: -33,
      y: -66,
      ⵠᐃⲆ: 2
    }, {
      ⵠᐃⲆ: 0,
      x: -58,
      y: Dl
    }, {
      y: 44,
      x: -19,
      ⵠᐃⲆ: ub
    }, {
      y: Fl,
      ⵠᐃⲆ: Ko,
      x: 44
    }, {
      y: -36,
      x: 53,
      ⵠᐃⲆ: cu
    }, {
      ⵠᐃⲆ: kq,
      y: -62,
      x: Ba
    }],
    ⲆᐃⵠⲆ: So
  }, {
    ⵠⵠᐃᐃ: [{
      y: -25,
      x: -19,
      ⵠᐃⲆ: ik
    }, {
      ⵠᐃⲆ: _t,
      x: -29,
      y: 13
    }, {
      ⵠᐃⲆ: 0,
      x: 12,
      y: 12
    }],
    ⲆᐃⵠⲆ: 3
  }];
  var kv = 0;
  var lv = 0;
  var mv = 0;
  var nv = 0;
  function ov(b, c, d, e, f, g, i) {
    var a;
    var j = "#";
    j += (a = Math.floor(i * e + (ik - i) * b)) < 16 ? "0" + a.toString(Ak) : a.toString(Jh);
    j += (a = Math.floor(f * i + c * (ce - i))) < 16 ? "0" + a.toString(Jh) : a.toString($j);
    return j += (a = Math.floor(g * i + (Yt - i) * d)) < 16 ? "0" + a.toString(es) : a.toString(Fa);
  }
  function pv(a, b, c, d, e) {
    if (gf.transition && e == 1) {
      to.globalAlpha = 1;
      Em(to, ΔΔ[a][gf.time][b], c, d);
      gf.time = gf.time ? yk : Ur;
      to.globalAlpha = Ur - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      Em(to, ΔΔ[a][gf.time][b], c, d);
      gf.time = gf.time ? 0 : er;
      to.globalAlpha = 1;
    } else {
      to.globalAlpha = e;
      Em(to, ΔΔ[a][gf.time][b], c, d);
      to.globalAlpha = bt;
    }
  }
  function qv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Ww.ᐃᐃᐃ.y + j + 710;
    var l = Math.max(Ww.ᐃᐃᐃ.x + e, 0);
    var g = Math.max(-Ww.ᐃᐃᐃ.x + ro - i - 100, 0);
    var t = l;
    var b = ro - l - g;
    if (o) {
      var u = q.ⵠᐃⲆ(r);
    } else {
      u = r.r;
    }
    var v = h + bw.Δⵠⵠⵠⵠ;
    var F = v;
    var m = t;
    var p = -u.x + bw.ΔⲆⵠΔᐃ;
    var C = b;
    var G = v += -u.x + bw.ΔⲆⵠΔᐃ + 2;
    if (o) {
      u = q.ⵠᐃⲆ(a);
    } else {
      u = a.r;
    }
    var f = h - bw.ⵠΔΔᐃΔ - v - u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f + ib) - Uh;
    if (o) {
      u = q.ⵠᐃⲆ(s);
    } else {
      u = s.r;
    }
    if (v + (f = h - bw.ᐃⵠᐃⵠⲆ - v - u.x) < A) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f + 2;
    } else {
      k = false;
      v = A;
      D = -er;
    }
    f = h - bw.ⵠⵠᐃⵠⲆΔᐃ - v;
    if (gf.transition) {
      var N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(m, F, C, p);
    if (o) {
      if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 70, 76, 42, 139, 155, N);
      } else {
        to.fillStyle = Cr.ΔⵠⲆⵠⲆⲆⵠ[gf.time];
      }
    } else if (gf.transition) {
      N = gf.time ? bt - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (gf.transition) {
          N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
          to.fillStyle = ov(17, 94, 96, 169, 214, 211, N);
        } else {
          to.fillStyle = Cr.ΔΔΔⵠᐃΔΔ[gf.time];
        }
      } else if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
      } else {
        to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
      }
      to.fillRect(J, L, B, M);
    }
    if (sf.ⵠⲆⵠⲆΔ && o) {
      q.ΔᐃᐃⲆᐃᐃΔⵠⲆ(A, D, G, h, -Ww.ᐃᐃᐃ.x + m, -Ww.ᐃᐃᐃ.x + m + C);
    }
  }
  function rv(a, b) {
    if (gf.transition) {
      to.globalAlpha = ce;
      a.ΔⵠΔᐃⵠ(b);
      gf.time = gf.time ? 0 : Ur;
      to.globalAlpha = 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      a.ΔⵠΔᐃⵠ(b);
      gf.time = gf.time ? 0 : Cs;
      to.globalAlpha = jh;
    } else {
      a.ΔⵠΔᐃⵠ(b);
    }
  }
  function sv(a, b, c, d) {
    if (gf.transition) {
      to.globalAlpha = 1;
      Em(to, ΔΔ[a][gf.time], c, d);
      gf.time = gf.time ? 0 : 1;
      to.globalAlpha = 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      Em(to, ΔΔ[a][gf.time], c, d);
      gf.time = gf.time ? 0 : Ud;
      to.globalAlpha = Ud;
    } else {
      Em(to, b, c, d);
    }
  }
  function tv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Ww.ᐃᐃᐃ.x + j + 820;
    var l = Math.max(Ww.ᐃᐃᐃ.y + e, kq);
    var g = Math.max(-Ww.ᐃᐃᐃ.y + so - i - Er, Lu);
    var t = l;
    var b = so - l - g;
    if (o) {
      var u = q.ⵠᐃⲆ(r);
    } else {
      u = r.r;
    }
    var v = h + bw.Δⵠⵠⵠⵠ;
    var F = v;
    var m = t;
    var p = -u.x + bw.ΔⲆⵠΔᐃ;
    var G = b;
    var H = v += -u.x + bw.ΔⲆⵠΔᐃ + 2;
    if (o) {
      u = q.ⵠᐃⲆ(a);
    } else {
      u = a.r;
    }
    var f = h - bw.ⵠΔΔᐃΔ - v - u.x;
    var K = v;
    var y = t;
    var w = f;
    var L = b;
    var A = (v += f + 2) - 2;
    if (o) {
      u = q.ⵠᐃⲆ(s);
    } else {
      u = s.r;
    }
    if (A > v + (f = h - bw.ᐃⵠᐃⵠⲆ - v - u.x)) {
      var k = true;
      var M = v;
      var J = t;
      var B = f;
      var D = b;
      var E = v += f + C;
    } else {
      k = Bg;
      v = A;
      E = -Cs;
    }
    f = h - bw.ⵠⵠᐃⵠⲆΔᐃ - v;
    if (gf.transition) {
      var N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(F, m, p, G);
    if (o) {
      if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 70, 76, 42, 139, 155, N);
      } else {
        to.fillStyle = Cr.ΔⵠⲆⵠⲆⲆⵠ[gf.time];
      }
    } else if (gf.transition) {
      N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(K, y, w, L);
    if (k) {
      if (o) {
        if (gf.transition) {
          N = gf.time ? Aj - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
          to.fillStyle = ov(17, 94, 96, 169, 214, 211, N);
        } else {
          to.fillStyle = Cr.ΔΔΔⵠᐃΔΔ[gf.time];
        }
      } else if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
      } else {
        to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
      }
      to.fillRect(M, J, B, D);
    }
    if (sf.ⵠⲆⵠⲆΔ && o) {
      q.ΔΔⲆΔⲆⵠⲆΔΔ(A, E, H, h, -Ww.ᐃᐃᐃ.y + m, -Ww.ᐃᐃᐃ.y + m + G);
    }
  }
  function uv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Ww.ᐃᐃᐃ.x + f - 700;
    var l = Math.max(Ww.ᐃᐃᐃ.y + e, Ko);
    var g = Math.max(-Ww.ᐃᐃᐃ.y + so - i - 100, xb);
    var r = l;
    var b = so - l - g;
    if (n) {
      var s = j.ⵠᐃⲆ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + bw.Δⵠⵠⵠⵠ;
    bw.ΔⲆⵠΔᐃ;
    t += s + bw.ΔⲆⵠΔᐃ - Wq;
    if (n) {
      s = j.ⵠᐃⲆ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + bw.ⵠΔΔᐃΔ - t + s;
    var v = (t += u - 2) - 2;
    if (n) {
      s = j.ⵠᐃⲆ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + bw.ᐃⵠᐃⵠⲆ - t + s) - 3) {
      t += u - 2;
    } else {
      t = v;
    }
    u = h + bw.ⵠⵠᐃⵠⲆΔᐃ - t;
    if (n > 0 && k.ᐃΔⲆᐃᐃΔⲆ === 1) {
      if (gf.transition) {
        var p = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 77, 72, 252, 239, 187, p);
      } else {
        to.fillStyle = Cr.ΔⲆΔΔᐃⲆⲆ[gf.time];
      }
      to.fillRect(t, r, u, b);
    } else {
      if (gf.transition) {
        p = gf.time ? js - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(k.ᐃⵠᐃ[0], k.ᐃⵠᐃ[ik], k.ᐃⵠᐃ[2], k.Δⵠⵠ[_s], k.Δⵠⵠ[Fo], k.Δⵠⵠ[2], p);
      } else {
        to.fillStyle = k.ᐃⵠⲆᐃᐃ[gf.time];
      }
      to.fillRect(t, r, u, b);
    }
  }
  function vv(a, b) {
    if (gf.transition) {
      to.globalAlpha = js;
      a.ⵠⵠᐃⵠⲆ(b);
      gf.time = gf.time ? $t : 1;
      to.globalAlpha = sd - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      a.ⵠⵠᐃⵠⲆ(b);
      gf.time = gf.time ? Gd : yl;
      to.globalAlpha = 1;
    } else {
      a.ⵠⵠᐃⵠⲆ(b);
    }
  }
  function wv(a, b, c) {
    if (gf.transition) {
      to.globalAlpha = Cs;
      a.ᐃⵠⲆᐃ(b, c);
      gf.time = gf.time ? yk : wg;
      to.globalAlpha = 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      a.ᐃⵠⲆᐃ(b, c);
      gf.time = gf.time ? Ol : Eg;
      to.globalAlpha = sd;
    } else {
      a.ᐃⵠⲆᐃ(b, c);
    }
  }
  function xv() {
    to.globalAlpha = er;
    if (gf.transition) {
      var a = gf.ⵠΔⵠⵠ.Ⲇᐃⵠ();
    }
    gf.ΔⲆⲆᐃⲆⲆⲆⲆⲆ(-Ww.ᐃᐃᐃ.x, -Ww.ᐃᐃᐃ.y);
    kv = Math.max(Math.floor(-Ww.ᐃᐃᐃ.x / gf.ⵠⵠᐃΔᐃⲆⵠ) - 5, 0);
    lv = Math.min(Math.floor((-Ww.ᐃᐃᐃ.x + Ww.ᐃᐃᐃ.w) / gf.ⵠⵠᐃΔᐃⲆⵠ) + Yn, gf.ᐃᐃΔΔⲆ - er);
    mv = Math.max(Math.floor(-Ww.ᐃᐃᐃ.y / gf.ⵠΔⵠᐃⲆⵠΔ) - vo, kq);
    nv = Math.min(Math.floor((-Ww.ᐃᐃᐃ.y + Ww.ᐃᐃᐃ.ᐃⵠⲆ) / gf.ⵠΔⵠᐃⲆⵠΔ) + B, gf.ΔᐃⲆΔⲆ - er);
    (function () {
      for (var c = gf.ΔⲆⵠΔ.length - 1; c >= Ol; c--) {
        var f = gf.ΔⲆⵠΔ[c];
        if (gf.ΔⵠΔⵠΔ === f.ⵠᐃⲆ) {
          var j = gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ];
          if (f.x1 - 230 - ro <= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.x <= f.x2 + 330 && f.y1 - so <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= f.y2 + 100) {
            var k = f.x2;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              k -= 610;
            }
            var m = f.x1;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              m += 610;
            }
            var p = f.y2;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              p -= 610;
            }
            var q = f.y1;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              q += 610;
            }
            if (gf.transition) {
              var w = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
              to.fillStyle = ov(j.ᐃⵠᐃ[0], j.ᐃⵠᐃ[yl], j.ᐃⵠᐃ[ij], j.Δⵠⵠ[ko], j.Δⵠⵠ[Ur], j.Δⵠⵠ[js], w);
            } else {
              to.fillStyle = j.ᐃⵠⲆᐃᐃ[gf.time];
            }
            var x = Math.max(Ww.ᐃᐃᐃ.x + m - 2 - 230, 0);
            var y = Math.max(-Ww.ᐃᐃᐃ.x + ro - k - 330 - kn, 0);
            var z = Math.max(Ww.ᐃᐃᐃ.y + q - 2, Dh);
            var A = Math.max(-Ww.ᐃᐃᐃ.y + so - p - 100 - Le, 0);
            to.beginPath();
            to.fillRect(x, z, ro - y - x, so - z - A);
          }
        }
      }
      for (c = gf.ΔⲆⵠΔ.length - js; c >= 0; c--) {
        if ((f = gf.ΔⲆⵠΔ[c]).ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
          k = f.x2;
          if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
            q += 300;
          }
          if (Ol === (f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ) && -Ww.ᐃᐃᐃ.x >= k - ro + 120 && -Ww.ᐃᐃᐃ.x <= k + 820 && -Ww.ᐃᐃᐃ.y >= q + 88 - so && p + 50 >= -Ww.ᐃᐃᐃ.y) {
            Cv(k, q + 88, p - 88, Ww.ΔᐃᐃⲆ[0], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ);
            tv(k, q + 88, p - 88, Ww.ΔᐃᐃⲆ[0], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ);
          }
          if (!(f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ) && m - ro - 700 <= -Ww.ᐃᐃᐃ.x && m - 20 >= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.y >= q + 88 - so && -Ww.ᐃᐃᐃ.y <= p + 50) {
            uv(m, q + 88, p - 88, Ww.ΔᐃᐃⲆ[Ur], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ);
            Hv(m, q + 88, p - 88, Ww.ΔᐃᐃⲆ[js], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ);
          }
          if ((f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ) === Fj && m - 235 - ro <= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.x <= k + 350 && p - so - 275 <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= p + 490) {
            Av(p - 230, m - 230, k + 230, Ww.ΔᐃᐃⲆ[2], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ);
            qv(p - 230, m - 230, k + 230, Ww.ΔᐃᐃⲆ[2], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ);
          }
          if ((f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ) === rh && m - 235 - ro <= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.x <= k + 350 && q - so - 390 <= -Ww.ᐃᐃᐃ.y && q + 315 >= -Ww.ᐃᐃᐃ.y) {
            Dv(q + 310, m - 230, k + 230, Ww.ΔᐃᐃⲆ[3], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ);
            Bv(q + 310, m - 230, k + 230, Ww.ΔᐃᐃⲆ[vo], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ);
          }
        }
      }
      for (c = gf.ΔⲆⵠΔ.length - 1; c >= ko; c--) {
        f = gf.ΔⲆⵠΔ[c];
        if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
          k = f.x2;
          if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            q += 300;
          }
          if (f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ && -Ww.ᐃᐃᐃ.x >= k - ro + 120 && -Ww.ᐃᐃᐃ.x <= k + 820 && -Ww.ᐃᐃᐃ.y >= q + 88 - so && p + 50 >= -Ww.ᐃᐃᐃ.y) {
            Cv(k, q + 88, p - 88, Ww.ΔᐃᐃⲆ[0], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ);
          }
          if (f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ && -Ww.ᐃᐃᐃ.x >= m - ro - 700 && m - 20 >= -Ww.ᐃᐃᐃ.x && q + 88 - so <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= p + 50) {
            uv(m, q + 88, p - 88, Ww.ΔᐃᐃⲆ[1], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ);
          }
          if (f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ && -Ww.ᐃᐃᐃ.x >= m - 235 - ro && k + 350 >= -Ww.ᐃᐃᐃ.x && p - so - 275 <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= p + 490) {
            Av(p - 230, m - 230, k + 230, Ww.ΔᐃᐃⲆ[2], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ);
          }
          if (Gd !== (f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ) && -Ww.ᐃᐃᐃ.x >= m - 235 - ro && k + 350 >= -Ww.ᐃᐃᐃ.x && q - so - 390 <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= q + 315) {
            Dv(q + 310, m - 230, k + 230, Ww.ΔᐃᐃⲆ[3], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ);
          }
        }
      }
      for (c = gf.ΔⲆⵠΔ.length - jh; Mn <= c; c--) {
        f = gf.ΔⲆⵠΔ[c];
        if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
          j = gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ];
          if (-Ww.ᐃᐃᐃ.x >= f.x1 - 230 - ro && f.x2 + 330 >= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.y >= f.y1 - so && -Ww.ᐃᐃᐃ.y <= f.y2 + 100) {
            k = f.x2;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              if (Kr === (f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ)) {
                k -= 414;
              } else {
                k -= 610;
              }
            }
            m = f.x1;
            if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
              if (f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ) {
                m += 610;
              } else {
                m += 414;
              }
            }
            p = f.y2;
            if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
              if (f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ) {
                p -= 610;
              } else {
                p -= 414;
              }
            }
            q = f.y1;
            if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
              if (rh === (f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ)) {
                q += 414;
              } else {
                q += 610;
              }
            }
            if (gf.transition) {
              w = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
              to.fillStyle = ov(j.ᐃⵠᐃ[Gd], j.ᐃⵠᐃ[yl], j.ᐃⵠᐃ[2], j.Δⵠⵠ[0], j.Δⵠⵠ[js], j.Δⵠⵠ[2], w);
            } else {
              to.fillStyle = j.ᐃⵠⲆᐃᐃ[gf.time];
            }
            x = Math.max(Ww.ᐃᐃᐃ.x + m - 2 - 230, xb);
            y = Math.max(-Ww.ᐃᐃᐃ.x + ro - k - 330 - 2, 0);
            z = Math.max(Ww.ᐃᐃᐃ.y + q - Xn, 0);
            A = Math.max(-Ww.ᐃᐃᐃ.y + so - p - Qk - C, Jt);
            to.beginPath();
            to.fillRect(x, z, ro - y - x, so - z - A);
          }
        }
      }
      if (sf.ⵠⲆⵠⲆΔ) {
        Iv(ev, mv, nv, kv, lv, Cr.ⵠⵠᐃΔⵠ, "isl", 2);
        Iv(ev, mv, nv, kv, lv, Cr.ᐃΔⵠⲆⲆ, "isl", pa);
      }
      Iv(iv, mv, nv, kv, lv, Cr.ΔΔᐃΔᐃ, "isl", Ok);
      if (sf.ⵠⲆⵠⲆΔ) {
        Iv(jv, mv, nv, kv, lv, Cr.ⵠΔⲆⲆⵠᐃⲆ, "de");
      }
      var B = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      for (c = $t; B.length > c; c++) {
        for (var b = B[c], D = 0; D < b.ⵠⵠΔⲆᐃ.length; D++) {
          yv(b.ⵠⵠΔⲆᐃ[D]);
        }
      }
      if ((op += pf * 40) > 60) {
        op -= 60;
      }
      Iv(Dp, mv, nv, kv, lv, Cr.ᐃΔⲆⲆ, "r", Lu);
      c = 0;
      for (; gf.ΔⲆⵠΔ.length > c; c++) {
        if ((f = gf.ΔⲆⵠΔ[c]).ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
          k = f.x2;
          if (gf.ΔⵠΔⵠΔ !== f.ⵠᐃⲆ) {
            k -= 400;
          }
          m = f.x1;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            m += 400;
          }
          p = f.y2;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            p -= 300;
          }
          q = f.y1;
          if (f.ⵠᐃⲆ !== gf.ΔⵠΔⵠΔ) {
            q += 300;
          }
          if (jj < (f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ) && k - ro + 120 <= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.x <= k + 820 && q + 88 - so <= -Ww.ᐃᐃᐃ.y && -Ww.ᐃᐃᐃ.y <= p + 50) {
            tv(k, q + 88, p - 88, Ww.ΔᐃᐃⲆ[0], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ);
          }
          if ((f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ) > Lg && m - ro - 700 <= -Ww.ᐃᐃᐃ.x && m - 20 >= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.y >= q + 88 - so && p + 50 >= -Ww.ᐃᐃᐃ.y) {
            Hv(m, q + 88, p - 88, Ww.ΔᐃᐃⲆ[wg], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ);
          }
          if ((f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ) > 0 && -Ww.ᐃᐃᐃ.x >= m - 235 - ro && k + 350 >= -Ww.ᐃᐃᐃ.x && p - so - 275 <= -Ww.ᐃᐃᐃ.y && p + 490 >= -Ww.ᐃᐃᐃ.y) {
            qv(p - 230, m - 230, k + 230, Ww.ΔᐃᐃⲆ[kn], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ);
          }
          if ((f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ) > 0 && m - 235 - ro <= -Ww.ᐃᐃᐃ.x && -Ww.ᐃᐃᐃ.x <= k + 350 && -Ww.ᐃᐃᐃ.y >= q - so - 390 && q + 315 >= -Ww.ᐃᐃᐃ.y) {
            Bv(q + 310, m - 230, k + 230, Ww.ΔᐃᐃⲆ[Kk], gf.ΔⵠⲆᐃᐃ[f.ⵠᐃⲆ], f.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ);
          }
        }
      }
    })();
    (function () {
      var f = kv;
      var e = lv;
      var i = mv;
      var t = nv;
      if (sf.ⵠⲆⵠⲆΔ) {
        Iv(iv, i, t, f, e, Cr.ᐃⵠΔⵠᐃ, "l", 2);
      }
      if (sf.ⵠⲆⵠⲆΔ) {
        Iv(iv, i, t, f, e, Cr.ᐃᐃⲆΔⵠ, "la", 5);
      }
      Iv(iv, i, t, f, e, Cr.ⲆⲆΔΔⲆ, "la", 5);
      Iv(ev, i, t, f, e, Cr.ΔΔⲆⵠⵠ, "l", xl);
      if (sf.ⵠⲆⵠⲆΔ) {
        Iv(hv, i, t, f, e, Cr.ⲆⲆΔΔⲆ, "la", mh);
        Iv(ev, i, t, f, e, Cr.ⲆᐃᐃΔΔ, "l", Qs);
      }
      Iv(iv, i, t, f, e, Cr.ⲆᐃⵠᐃΔ, "ma", th);
      for (var n = gf.ⵠᐃΔ[ew.ⲆⲆᐃⵠΔΔᐃ], aa = jj; n.length > aa; aa++) {
        n[aa].ᐃᐃⵠᐃΔΔⵠ();
      }
      var ba = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      for (aa = Gd; ba.length > aa; aa++) {
        for (var ca = ba[aa], da = 0; ca.ᐃΔΔΔⲆ.length > da; da++) {
          Ev(ca.ᐃΔΔΔⲆ[da]);
        }
      }
      var ea = gf.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ];
      for (aa = 0; aa < ea.length; aa++) {
        wv(ea[aa], Cr.ᐃⲆΔⲆⲆ);
        ea[aa].ⵠᐃΔᐃᐃ(ea[aa].info);
      }
      var l = gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ];
      for (aa = 0; l.length > aa; aa++) {
        if (l[aa].action == yg) {
          rv(l[aa]);
        }
      }
      var fa = gf.ⵠᐃΔ[ew.ⵠᐃΔΔᐃ];
      for (aa = tr; aa < fa.length; aa++) {
        rv(fa[aa], Cr.ⵠⵠⲆΔⲆⵠᐃ);
      }
      var ha = gf.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ];
      for (aa = rh; aa < ha.length; aa++) {
        rv(ha[aa]);
      }
      var ia = gf.ⵠᐃΔ[ew.ᐃᐃᐃⵠᐃ];
      for (aa = 0; ia.length > aa; aa++) {
        rv(ia[aa]);
      }
      var ja = gf.ⵠᐃΔ[ew.Ⲇⵠᐃⵠᐃ];
      for (aa = 0; aa < ja.length; aa++) {
        rv(ja[aa], Cr.ᐃⲆᐃⲆᐃΔᐃ);
      }
      var d = gf.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ];
      for (aa = 0; d.length > aa; aa++) {
        wv(d[aa]);
      }
      var c = gf.ⵠᐃΔ[ew.ΔⵠΔΔⲆ];
      for (aa = 0; aa < c.length; aa++) {
        wv(c[aa], Cr.ΔⵠΔΔⲆ);
      }
      var m = gf.ⵠᐃΔ[ew.ΔⵠᐃᐃΔ];
      for (aa = 0; aa < m.length; aa++) {
        rv(m[aa]);
      }
      m = gf.ⵠᐃΔ[ew.ΔΔΔᐃⲆ];
      aa = rh;
      for (; aa < m.length; aa++) {
        rv(m[aa]);
      }
      m = gf.ⵠᐃΔ[ew.ΔⵠᐃᐃΔ];
      aa = _s;
      for (; aa < m.length; aa++) {
        vv(m[aa]);
      }
      var ka = gf.ⵠᐃΔ[ew.ᐃΔⲆⲆᐃ];
      for (aa = $t; aa < ka.length; aa++) {
        if (!(ka[aa].info & 15) || ka[aa].info === 10) {
          wv(ka[aa]);
        }
      }
      var la = gf.ⵠᐃΔ[ew.ᐃΔⵠᐃᐃ];
      for (aa = Dh; la.length > aa; aa++) {
        if (!(la[aa].info & 15) || rk === la[aa].info) {
          wv(la[aa]);
        }
      }
      var ma = gf.ⵠᐃΔ[ew.ⵠⵠⵠⲆΔ];
      for (aa = 0; aa < ma.length; aa++) {
        if (!(ma[aa].info & 15) || Ke === ma[aa].info) {
          wv(ma[aa]);
        }
      }
      var na = gf.ⵠᐃΔ[ew.ᐃΔⲆᐃⵠ];
      for (aa = Kr; aa < na.length; aa++) {
        wv(na[aa], Cr.ΔΔⲆᐃᐃ);
      }
      var oa = gf.ⵠᐃΔ[ew.ⵠΔⵠⲆΔ];
      for (aa = 0; aa < oa.length; aa++) {
        if (Dh === (oa[aa].info & 15) || bb === oa[aa].info) {
          wv(oa[aa]);
        }
      }
      var pa = gf.ⵠᐃΔ[ew.ⵠᐃⵠⲆᐃ];
      for (aa = Kr; aa < pa.length; aa++) {
        if (!(pa[aa].info & 15) || pa[aa].info === ll) {
          wv(pa[aa]);
        }
      }
      var qa = gf.ⵠᐃΔ[ew.ⲆΔⲆΔᐃ];
      for (aa = 0; aa < qa.length; aa++) {
        if (!(qa[aa].info & 15) || qa[aa].info === 10) {
          wv(qa[aa]);
        }
      }
      na = gf.ⵠᐃΔ[ew.ΔΔⲆᐃᐃ];
      aa = tr;
      for (; aa < na.length; aa++) {
        wv(na[aa]);
      }
      var ra = gf.ⵠᐃΔ[ew.ⵠⲆᐃⵠⲆ];
      for (aa = _s; ra.length > aa; aa++) {
        wv(ra[aa], Cr.ⵠⲆᐃⵠⲆ, Cr.ⵠⵠᐃΔⲆᐃⲆ);
      }
      var k = gf.ⵠᐃΔ[ew.ΔΔⲆΔΔΔⵠ];
      for (aa = ko; aa < k.length; aa++) {
        wv(k[aa], Cr.ⵠⲆᐃⵠⲆ, Cr.ⵠⵠᐃΔⲆᐃⲆ);
      }
      var x = gf.ⵠᐃΔ[ew.ᐃⲆᐃΔΔ];
      for (aa = 0; aa < x.length; aa++) {
        wv(x[aa], Cr.ᐃⲆᐃΔΔ, Cr.ⲆⲆⲆᐃⵠⲆΔ);
      }
      var J = gf.ⵠᐃΔ[ew.ᐃⵠᐃΔⲆ];
      for (aa = kq; J.length > aa; aa++) {
        if (J[aa].info & 1) {
          wv(J[aa], Cr.ΔⵠⲆⲆⲆⲆⵠ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ᐃⵠⲆⵠⵠ];
      aa = Ko;
      for (; J.length > aa; aa++) {
        if (J[aa].info & js) {
          wv(J[aa], Cr.ⵠᐃⵠⲆΔᐃᐃ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ⵠΔⲆⵠᐃ];
      aa = xb;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⵠᐃⵠⲆⲆᐃ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ΔⵠⲆⵠΔ];
      aa = Lg;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⲆⵠⵠⵠⲆⵠ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ΔⵠⲆⵠⲆ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ⲆⲆΔᐃᐃⵠⲆ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠᐃ];
      aa = xb;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⵠᐃⵠⲆⲆᐃ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ⵠⵠΔⲆⲆ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info & Cs) {
          wv(J[aa], Cr.ΔⵠⲆⲆⲆⲆⵠ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ΔΔΔΔⲆ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info & 1) {
          wv(J[aa], Cr.ⵠᐃⵠⲆΔᐃᐃ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ᐃᐃⲆᐃⲆ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⵠᐃⵠⲆⲆᐃ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ᐃⵠᐃⲆΔ];
      aa = Lg;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⲆⵠⵠⵠⲆⵠ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ΔΔⵠᐃⲆ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ⲆⲆΔᐃᐃⵠⲆ);
        }
      }
      J = gf.ⵠᐃΔ[ew.ⲆⲆΔᐃⲆ];
      aa = rh;
      for (; J.length > aa; aa++) {
        if (J[aa].info) {
          wv(J[aa], Cr.ᐃⵠᐃⵠⲆⲆᐃ);
        }
      }
      var sa = gf.ⵠᐃΔ[ew.ⵠⵠΔⵠᐃ];
      for (aa = 0; aa < sa.length; aa++) {
        wv(sa[aa], Cr.ⵠⵠΔⵠᐃ, Cr.ⵠⵠⵠᐃᐃⵠᐃ);
      }
      var B = gf.ⵠᐃΔ[ew.ⵠᐃⲆⵠᐃ];
      for (aa = 0; aa < B.length; aa++) {
        wv(B[aa], Cr.ⵠᐃⲆⵠᐃ);
      }
      n = gf.ⵠᐃΔ[ew.ⲆⲆᐃⵠΔΔᐃ];
      aa = kq;
      for (; n.length > aa; aa++) {
        wv(n[aa], Cr.ⲆⲆᐃⵠΔΔᐃ, Cr.ⲆⲆⵠⲆⵠⲆᐃⵠⵠ);
      }
      var ta = gf.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ];
      for (aa = Mn; aa < ta.length; aa++) {
        if (ta[aa].ⲆΔΔᐃᐃΔΔ === 0) {
          wv(ta[aa]);
        }
      }
      ba = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      aa = 0;
      for (; aa < ba.length; aa++) {
        ca = ba[aa];
        if (Dr.ⲆΔⵠⵠⵠ !== ba[aa].ⵠⵠⲆΔᐃ && Dr.ⵠⲆᐃⲆⵠ !== ba[aa].ⵠⵠⲆΔᐃ && Dr.ΔⵠΔΔᐃ !== ba[aa].ⵠⵠⲆΔᐃ && ba[aa].ⵠⵠⲆΔᐃ !== Dr.ᐃᐃⵠⲆⵠ && ba[aa].ⵠⵠⲆΔᐃ !== Dr.Δᐃᐃᐃᐃ) {
          if (Kr === ca.ⲆⵠᐃⲆⲆᐃⲆ) {
            if (ca.ΔⵠᐃⲆΔᐃᐃ > 0.001) {
              ca.ΔⵠᐃⲆΔᐃᐃ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(ca.ΔⵠᐃⲆΔᐃᐃ, 0, 0.018);
              var ua = Eg + Math.min(1, Math.max(ca.ΔⵠᐃⲆΔᐃᐃ, 0) / Bl) * 0.18;
              to.save();
              to.scale(ua, ua);
              Ww.ᐃᐃᐃ.x /= ua;
              Ww.ᐃᐃᐃ.y /= ua;
              ca.x /= ua;
              ca.y /= ua;
              ca.r.x /= ua;
              ca.r.y /= ua;
              ca.Δⵠᐃᐃⵠⵠⵠ();
              ca.ᐃⵠⲆᐃ();
              Ww.ᐃᐃᐃ.x *= ua;
              Ww.ᐃᐃᐃ.y *= ua;
              ca.x *= ua;
              ca.y *= ua;
              ca.r.x *= ua;
              ca.r.y *= ua;
              to.restore();
            } else {
              ca.ⲆΔΔᐃᐃΔΔ = Lu;
              ca.Δⵠᐃᐃⵠⵠⵠ();
              ca.ᐃⵠⲆᐃ();
            }
          }
        } else if (ca.ⲆⵠⲆⲆⵠ <= 180) {
          to.save();
          ua = wg + Math.min(1, Math.max(ca.ΔⵠⵠⲆⲆ - 30, 0) / 180) * 0.35;
          to.scale(ua, ua);
          Ww.ᐃᐃᐃ.x /= ua;
          Ww.ᐃᐃᐃ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.ⲆΔΔᐃᐃΔΔ = 0;
          ca.Δⵠᐃᐃⵠⵠⵠ();
          ca.ᐃⵠⲆᐃ();
          Ww.ᐃᐃᐃ.x *= ua;
          Ww.ᐃᐃᐃ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          to.restore();
        }
      }
      B = gf.ⵠᐃΔ[ew.ⵠᐃⲆⵠᐃ];
      aa = 0;
      for (; B.length > aa; aa++) {
        wv(B[aa], Cr.ⵠⲆⵠⲆᐃⵠᐃ);
      }
      var va = gf.ⵠᐃΔ[ew.ΔⵠΔᐃⲆ];
      for (aa = Kr; va.length > aa; aa++) {
        wv(va[aa]);
      }
      var S = gf.ⵠᐃΔ[ew.ΔⵠⵠⵠΔ];
      for (aa = tr; aa < S.length; aa++) {
        wv(S[aa], Cr.ΔⵠⵠⵠΔ, Cr.ΔΔᐃᐃΔⵠⲆ);
      }
      var Q = gf.ⵠᐃΔ[ew.ⵠᐃᐃⲆⲆ];
      for (aa = 0; aa < Q.length; aa++) {
        wv(Q[aa]);
      }
      var _ = gf.ⵠᐃΔ[ew.ΔΔΔⵠᐃ];
      for (aa = 0; aa < _.length; aa++) {
        wv(_[aa], Cr.ΔΔΔⵠᐃ, Cr.ⵠⵠΔᐃᐃΔⲆ);
      }
      var F = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠⵠ];
      for (aa = 0; F.length > aa; aa++) {
        wv(F[aa], Cr.ⲆΔⵠⵠⵠ, Cr.ⲆᐃⵠⵠΔⲆⲆ);
      }
      var R = gf.ⵠᐃΔ[ew.ⵠⲆᐃⲆⵠ];
      for (aa = Lg; aa < R.length; aa++) {
        wv(R[aa], Cr.ⵠⲆᐃⲆⵠ, Cr.ΔΔᐃⲆᐃⲆⵠ);
      }
      ka = gf.ⵠᐃΔ[ew.ᐃΔⲆⲆᐃ];
      aa = $t;
      for (; aa < ka.length; aa++) {
        if (Wh !== (ka[aa].info & 15) && ka[aa].info !== hl) {
          wv(ka[aa]);
        }
      }
      la = gf.ⵠᐃΔ[ew.ᐃΔⵠᐃᐃ];
      aa = 0;
      for (; aa < la.length; aa++) {
        if (rh !== (la[aa].info & 15) && la[aa].info !== 10) {
          wv(la[aa]);
        }
      }
      ma = gf.ⵠᐃΔ[ew.ᐃΔⲆⵠΔⵠⵠ];
      aa = Lg;
      for (; ma.length > aa; aa++) {
        wv(ma[aa], Cr.ⵠΔΔⵠⲆ);
      }
      ma = gf.ⵠᐃΔ[ew.ⵠⵠⵠⲆΔ];
      aa = Kr;
      for (; aa < ma.length; aa++) {
        if (ma[aa].info & 15 && ma[aa].info !== Fn) {
          wv(ma[aa]);
        }
      }
      m = gf.ⵠᐃΔ[ew.ΔΔΔᐃⲆ];
      aa = Wh;
      for (; m.length > aa; aa++) {
        vv(m[aa]);
      }
      oa = gf.ⵠᐃΔ[ew.ⵠΔⵠⲆΔ];
      aa = kq;
      for (; oa.length > aa; aa++) {
        if (Fj !== (oa[aa].info & 15) && oa[aa].info !== 10) {
          wv(oa[aa]);
        }
      }
      pa = gf.ⵠᐃΔ[ew.ⵠᐃⵠⲆᐃ];
      aa = 0;
      for (; pa.length > aa; aa++) {
        if ($t !== (pa[aa].info & 15) && pa[aa].info !== 10) {
          wv(pa[aa]);
        }
      }
      qa = gf.ⵠᐃΔ[ew.ⲆΔⲆΔᐃ];
      aa = 0;
      for (; aa < qa.length; aa++) {
        if (qa[aa].info & 15 && qa[aa].info !== hl) {
          wv(qa[aa]);
        }
      }
      var j = gf.ⵠᐃΔ[ew.ᐃⵠΔⲆⵠ];
      for (aa = 0; aa < j.length; aa++) {
        wv(j[aa], Cr.ᐃⵠΔⲆⵠ, Cr.ⵠΔⲆΔᐃⵠⲆ);
      }
      var L = gf.ⵠᐃΔ[ew.ᐃⲆᐃᐃΔ];
      for (aa = Gd; aa < L.length; aa++) {
        wv(L[aa], Cr.ᐃⲆᐃᐃΔ, Cr.ΔⲆᐃᐃⵠⲆΔ);
      }
      var W = gf.ⵠᐃΔ[ew.ⲆΔΔΔΔ];
      for (aa = Lu; W.length > aa; aa++) {
        wv(W[aa], Cr.ⲆΔΔΔΔ, Cr.ΔᐃⲆᐃᐃⵠΔ);
      }
      var G = gf.ⵠᐃΔ[ew.ⵠᐃᐃΔΔ];
      for (aa = 0; aa < G.length; aa++) {
        wv(G[aa], Cr.ⵠᐃᐃΔΔ, Cr.ⲆⲆΔⲆᐃΔᐃ);
      }
      var O = gf.ⵠᐃΔ[ew.ΔΔⲆΔᐃ];
      for (aa = 0; aa < O.length; aa++) {
        wv(O[aa], Cr.ΔΔⲆΔᐃ, Cr.ΔᐃΔᐃᐃⲆᐃ);
      }
      var q = gf.ⵠᐃΔ[ew.ⲆᐃⲆΔΔ];
      for (aa = Fj; aa < q.length; aa++) {
        wv(q[aa], Cr.ⲆᐃⲆΔΔ, Cr.ᐃⲆⲆᐃⲆΔᐃ);
      }
      var N = gf.ⵠᐃΔ[ew.ⵠΔⵠΔΔ];
      for (aa = 0; aa < N.length; aa++) {
        wv(N[aa]);
      }
      var H = gf.ⵠᐃΔ[ew.ⲆⵠⲆⵠᐃ];
      for (aa = Mn; H.length > aa; aa++) {
        wv(H[aa], Cr.ⲆⵠΔΔᐃⲆΔ, Cr.ⲆΔⲆⲆⲆⵠⵠ);
      }
      var U = gf.ⵠᐃΔ[ew.ᐃᐃΔⵠᐃ];
      for (aa = Jt; aa < U.length; aa++) {
        wv(U[aa]);
      }
      var Y = gf.ⵠᐃΔ[ew.ⲆⵠᐃⲆⵠ];
      for (aa = 0; aa < Y.length; aa++) {
        wv(Y[aa], Cr.ⲆⵠᐃⲆⵠ, Cr.ⲆⵠΔᐃⲆⲆⵠ);
      }
      var K = gf.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ];
      for (aa = 0; aa < K.length; aa++) {
        if (K[aa].scale === 1) {
          wv(K[aa], Cr.ᐃΔᐃᐃΔ, Cr.ᐃᐃⵠⲆⵠᐃⵠ);
        }
      }
      K = gf.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ];
      aa = Ko;
      for (; K.length > aa; aa++) {
        if (ce === K[aa].scale) {
          wv(K[aa], Cr.Δⵠᐃⵠᐃ, Cr.ΔΔΔᐃΔᐃⲆ);
        }
      }
      var wa = gf.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ];
      for (aa = 0; wa.length > aa; aa++) {
        wv(wa[aa]);
      }
      var X = gf.ⵠᐃΔ[ew.ᐃⵠΔⲆᐃ];
      for (aa = 0; aa < X.length; aa++) {
        wv(X[aa], Cr.ᐃⵠΔⲆᐃ);
      }
      l = gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ];
      aa = 0;
      for (; aa < l.length; aa++) {
        wv(l[aa]);
      }
      var Z = gf.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ];
      for (aa = Jt; Z.length > aa; aa++) {
        wv(Z[aa]);
      }
      J = gf.ⵠᐃΔ[ew.ⵠⵠΔⲆⲆ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          wv(J[aa], Cr.ᐃⲆᐃΔⲆⲆⲆ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ΔΔΔΔⲆ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & 1)) {
          wv(J[aa], Cr.ⲆᐃⵠⵠⵠΔⵠ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> yl);
      }
      J = gf.ⵠᐃΔ[ew.ᐃᐃⲆᐃⲆ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          wv(J[aa], Cr.ⲆⵠᐃⵠᐃⲆⵠ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ᐃⵠᐃⲆΔ];
      aa = Kr;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Aj)) {
          wv(J[aa], Cr.ⲆⲆᐃΔΔⲆⵠ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ΔΔⵠᐃⲆ];
      aa = Fj;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & sd)) {
          wv(J[aa], Cr.ⲆΔⲆᐃᐃᐃᐃ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> Yt);
      }
      J = gf.ⵠᐃΔ[ew.ⲆⲆΔᐃⲆ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Eg)) {
          wv(J[aa], Cr.ⲆⲆΔᐃⲆ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ᐃⵠᐃΔⲆ];
      aa = ko;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          wv(J[aa], Cr.ᐃⵠᐃΔⲆ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> Yt);
      }
      J = gf.ⵠᐃΔ[ew.ᐃⵠⲆⵠⵠ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & 1)) {
          wv(J[aa], Cr.ᐃⵠⲆⵠⵠ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ⵠΔⲆⵠᐃ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Eg)) {
          wv(J[aa], Cr.ⵠΔⲆⵠᐃ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      J = gf.ⵠᐃΔ[ew.ΔⵠⲆⵠΔ];
      aa = 0;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & wg)) {
          wv(J[aa], Cr.ΔⵠⲆⵠΔ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> ce);
      }
      J = gf.ⵠᐃΔ[ew.ΔⵠⲆⵠⲆ];
      aa = Wh;
      for (; J.length > aa; aa++) {
        if (!(J[aa].info & Br)) {
          wv(J[aa], Cr.ΔⵠⲆⵠⲆ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> dn);
      }
      J = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠᐃ];
      aa = 0;
      for (; aa < J.length; aa++) {
        if (!(J[aa].info & Br)) {
          wv(J[aa], Cr.ⲆΔⵠⵠᐃ);
        }
        J[aa].ⵠᐃΔᐃᐃ(J[aa].info >> 1);
      }
      var xa = gf.ⵠᐃΔ[ew.ᐃⲆⲆⲆᐃ];
      for (aa = 0; aa < xa.length; aa++) {
        wv(xa[aa], Cr.ᐃⲆⲆⲆᐃ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      xa = gf.ⵠᐃΔ[ew.ⲆⲆΔⵠⵠ];
      aa = 0;
      for (; aa < xa.length; aa++) {
        wv(xa[aa], Cr.ⲆⲆΔⵠⵠ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      xa = gf.ⵠᐃΔ[ew.ᐃⵠⵠΔⵠ];
      aa = 0;
      for (; xa.length > aa; aa++) {
        wv(xa[aa], Cr.ᐃⵠⵠΔⵠ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      xa = gf.ⵠᐃΔ[ew.ⲆⲆᐃⲆΔ];
      aa = jj;
      for (; aa < xa.length; aa++) {
        wv(xa[aa], Cr.ⲆⲆᐃⲆΔ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      xa = gf.ⵠᐃΔ[ew.ΔⲆᐃⲆⵠ];
      aa = 0;
      for (; xa.length > aa; aa++) {
        wv(xa[aa], Cr.ΔⲆᐃⲆⵠ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      xa = gf.ⵠᐃΔ[ew.ⲆⲆᐃⲆᐃ];
      aa = yk;
      for (; xa.length > aa; aa++) {
        wv(xa[aa], Cr.ⲆⲆᐃⲆᐃ);
        xa[aa].ⵠᐃΔᐃᐃ(xa[aa].info);
      }
      var ya = gf.ⵠᐃΔ[ew.ᐃΔⲆᐃᐃ];
      for (aa = 0; aa < ya.length; aa++) {
        wv(ya[aa], Cr.ᐃΔⲆᐃᐃ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      ya = gf.ⵠᐃΔ[ew.Ⲇᐃⵠⵠⵠ];
      aa = 0;
      for (; ya.length > aa; aa++) {
        wv(ya[aa], Cr.Ⲇᐃⵠⵠⵠ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      ya = gf.ⵠᐃΔ[ew.ⲆΔⲆᐃᐃ];
      aa = 0;
      for (; ya.length > aa; aa++) {
        wv(ya[aa], Cr.ⲆΔⲆᐃᐃ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      ya = gf.ⵠᐃΔ[ew.ᐃᐃᐃΔⵠ];
      aa = Mn;
      for (; ya.length > aa; aa++) {
        wv(ya[aa], Cr.ᐃᐃᐃΔⵠ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      ya = gf.ⵠᐃΔ[ew.ᐃᐃᐃᐃⵠ];
      aa = 0;
      for (; aa < ya.length; aa++) {
        wv(ya[aa], Cr.ᐃᐃᐃᐃⵠ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      ya = gf.ⵠᐃΔ[ew.ᐃᐃⵠΔⵠ];
      aa = Dh;
      for (; ya.length > aa; aa++) {
        wv(ya[aa], Cr.ᐃᐃⵠΔⵠ);
        ya[aa].ⵠᐃΔᐃᐃ(ya[aa].info);
      }
      var za = gf.ⵠᐃΔ[ew.ᐃΔΔΔΔ];
      for (aa = ko; aa < za.length; aa++) {
        var Aa = za[aa];
        if (Aa.info > 0) {
          wv(Aa, Cr.ΔᐃΔⵠⲆⵠΔ);
        } else {
          wv(Aa, Cr.ᐃᐃᐃⲆⵠⲆᐃ);
        }
      }
      var Ba = gf.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ];
      for (aa = tr; Ba.length > aa; aa++) {
        wv(Ba[aa], Cr.ⵠⵠⲆΔΔ);
      }
      Iv(iv, i, t, f, e, Cr.ⲆΔᐃⲆ, "g", Wq);
      Iv(iv, i, t, f, e, Cr.ᐃⵠᐃᐃⲆ, "gw", Qs);
      Iv(iv, i, t, f, e, Cr.ⵠⲆⲆΔ, "d", 2);
      Iv(iv, i, t, f, e, Cr.ⲆΔⵠᐃⵠ, "dw", 2);
      Iv(iv, i, t, f, e, Cr.ᐃᐃΔⲆⲆ, "p", Wh);
      Iv(iv, i, t, f, e, Cr.ΔⵠΔⲆΔ, "m", 2);
      Iv(iv, i, t, f, e, Cr.ᐃᐃᐃΔ, "a", 2);
      Iv(iv, i, t, f, e, Cr.ⵠⲆᐃⲆ, "re", 2);
      Iv(iv, i, t, f, e, Cr.ⲆⲆⲆⲆᐃ, "cs", 3, Gg);
      Iv(iv, i, t, f, e, Cr.ⲆⲆⲆⲆᐃ, "cs", 2, 2);
      Iv(iv, i, t, f, e, Cr.ⲆⲆⲆⲆᐃ, "cs", bt, 1);
      Iv(iv, i, t, f, e, Cr.ⲆⲆⲆⲆᐃ, "cs", 0, 0);
      Iv(iv, i, t, f, e, Cr.ⵠⵠᐃⵠᐃ, "cs", 3, 3);
      Iv(iv, i, t, f, e, Cr.ⵠⵠᐃⵠᐃ, "cs", 2, 2);
      Iv(iv, i, t, f, e, Cr.ⵠⵠᐃⵠᐃ, "cs", Ud, Br);
      Iv(iv, i, t, f, e, Cr.ⵠⵠᐃⵠᐃ, "cs", 0, 0);
      var Ca = gf.ⵠᐃΔ[ew.ⲆⵠⲆΔⲆ];
      for (aa = 0; Ca.length > aa; aa++) {
        for (da = $t; Ca[aa].info > da; da++) {
          wv(Ca[aa].ⵠⵠⵠᐃ[da], Cr.ⲆⵠⲆΔⲆ);
        }
      }
      Iv(iv, i, t, f, e, Cr.ⵠᐃⲆΔΔ, "s", 2);
      var Da = gf.ⵠᐃΔ[ew.ⵠⵠⲆᐃᐃ];
      for (aa = 0; aa < Da.length; aa++) {
        wv(Da[aa]);
      }
      Da = gf.ⵠᐃΔ[ew.ᐃⲆΔᐃΔ];
      aa = yk;
      for (; aa < Da.length; aa++) {
        wv(Da[aa]);
      }
      Da = gf.ⵠᐃΔ[ew.ⵠⲆⲆᐃᐃ];
      aa = $t;
      for (; aa < Da.length; aa++) {
        wv(Da[aa]);
      }
      Da = gf.ⵠᐃΔ[ew.ΔᐃΔⵠᐃ];
      aa = 0;
      for (; aa < Da.length; aa++) {
        wv(Da[aa]);
      }
      Da = gf.ⵠᐃΔ[ew.ⵠΔΔᐃⲆ];
      aa = 0;
      for (; Da.length > aa; aa++) {
        wv(Da[aa]);
      }
      var Ea = gf.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ];
      for (aa = 0; aa < Ea.length; aa++) {
        rv(Ea[aa]);
      }
      fa = gf.ⵠᐃΔ[ew.ⵠᐃΔΔᐃ];
      aa = Mn;
      for (; aa < fa.length; aa++) {
        vv(fa[aa]);
      }
      fa = gf.ⵠᐃΔ[ew.Ⲇⵠᐃⵠᐃ];
      aa = Lu;
      for (; fa.length > aa; aa++) {
        vv(fa[aa]);
      }
      l = gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ];
      aa = 0;
      for (; aa < l.length; aa++) {
        if (kn == l[aa].action) {
          vv(l[aa]);
        }
      }
      Z = gf.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ];
      aa = 0;
      for (; aa < Z.length; aa++) {
        vv(Z[aa]);
      }
      ha = gf.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ];
      aa = 0;
      for (; aa < ha.length; aa++) {
        vv(ha[aa]);
      }
      ia = gf.ⵠᐃΔ[ew.ᐃᐃᐃⵠᐃ];
      aa = Lg;
      for (; aa < ia.length; aa++) {
        vv(ia[aa]);
        ia[aa].ⵠᐃΔᐃᐃ(ia[aa].info);
      }
      Iv(iv, i, t, f, e, Cr.ⲆΔⵠᐃᐃ, "c", xb);
      Iv(iv, i, t, f, e, Cr.ᐃΔᐃΔ, "t", gs, Il);
      Iv(iv, i, t, f, e, Cr.ⵠⵠΔᐃⵠ, "f", Uh, 2);
      Iv(iv, i, t, f, e, Cr.ΔⲆⵠⲆⵠ, "plm", 0, 0);
      Iv(iv, i, t, f, e, Cr.ᐃΔΔⵠⵠ, "b", 3, Ok);
      Iv(iv, i, t, f, e, Cr.ᐃΔᐃΔ, "t", 3, 2);
      Iv(iv, i, t, f, e, Cr.ᐃΔΔⵠⵠ, "b", Cs, Gd);
      Iv(iv, i, t, f, e, Cr.ⵠⵠΔᐃⵠ, "f", 1, 1);
      Iv(iv, i, t, f, e, Cr.ΔⲆⵠⲆⵠ, "plm", Eg, 1);
      Iv(iv, i, t, f, e, Cr.ᐃΔᐃΔ, "t", Eg, $t);
      Iv(iv, i, t, f, e, Cr.ⵠⵠΔᐃⵠ, "f", xb, Wh);
      Iv(iv, i, t, f, e, Cr.ΔⲆⵠⲆⵠ, "plm", _l, 2);
      Ea = gf.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ];
      aa = 0;
      for (; aa < Ea.length; aa++) {
        vv(Ea[aa]);
      }
      var Fa = gf.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ];
      for (aa = 0; aa < Fa.length; aa++) {
        wv(Fa[aa], Cr.ᐃΔΔᐃⵠ);
      }
      ba = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      aa = 0;
      for (; ba.length > aa; aa++) {
        if ((ca = ba[aa]).ⲆⵠᐃⲆⲆᐃⲆ === 1 && (ca.ⲆⵠⲆⲆⵠ < 180 || Dr.ⲆΔⵠⵠⵠ !== ca.ⵠⵠⲆΔᐃ && ca.ⵠⵠⲆΔᐃ !== Dr.ⵠⲆᐃⲆⵠ && ca.ⵠⵠⲆΔᐃ !== Dr.Δᐃᐃᐃᐃ && ca.ⵠⵠⲆΔᐃ !== Dr.ΔⵠΔΔᐃ && Dr.ᐃᐃⵠⲆⵠ !== ca.ⵠⵠⲆΔᐃ)) {
          ca.ΔⵠᐃⲆΔᐃᐃ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(ca.ΔⵠᐃⲆΔᐃᐃ, fh, 0.018);
          ua = 1 + Math.min(ik, Math.max(ca.ΔⵠᐃⲆΔᐃᐃ, 0) / Qk) * 0.18;
          to.save();
          to.scale(ua, ua);
          Ww.ᐃᐃᐃ.x /= ua;
          Ww.ᐃᐃᐃ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.Δⵠᐃᐃⵠⵠⵠ();
          ca.ᐃⵠⲆᐃ();
          Ww.ᐃᐃᐃ.x *= ua;
          Ww.ᐃᐃᐃ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          to.restore();
        }
      }
      var Ga = gf.ⵠᐃΔ[ew.ⲆΔⵠⲆΔ];
      for (aa = Jt; Ga.length > aa; aa++) {
        wv(Ga[aa], Cr.ⲆΔⵠⲆΔ);
        Ga[aa].ⵠᐃΔᐃᐃ(Ga[aa].info);
      }
      var Ha = gf.ⵠᐃΔ[ew.ΔΔᐃⵠᐃ];
      for (aa = ko; aa < Ha.length; aa++) {
        wv(Ha[aa], Cr.ΔΔᐃⵠᐃ, Cr.ᐃⲆⵠⲆⵠΔΔ);
      }
      var Ia = gf.ⵠᐃΔ[ew.ᐃⵠⲆᐃⵠ];
      for (aa = 0; aa < Ia.length; aa++) {
        wv(Ia[aa], Cr.ᐃⵠⲆᐃⵠ);
      }
      ba = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      aa = Wh;
      for (; ba.length > aa; aa++) {
        ca = ba[aa];
        if ((Dr.ⲆΔⵠⵠⵠ === ca.ⵠⵠⲆΔᐃ || ca.ⵠⵠⲆΔᐃ === Dr.ⵠⲆᐃⲆⵠ || ca.ⵠⵠⲆΔᐃ === Dr.Δᐃᐃᐃᐃ || ca.ⵠⵠⲆΔᐃ === Dr.ΔⵠΔΔᐃ || Dr.ᐃᐃⵠⲆⵠ === ca.ⵠⵠⲆΔᐃ) && ca.ⲆⵠⲆⲆⵠ > 180) {
          ca.ⲆΔΔᐃᐃΔΔ = 1;
          to.save();
          ua = Ur + Math.min(er, Math.max(ca.ΔⵠⵠⲆⲆ - 30, Lu) / 180) * 0.35;
          to.scale(ua, ua);
          Ww.ᐃᐃᐃ.x /= ua;
          Ww.ᐃᐃᐃ.y /= ua;
          ca.x /= ua;
          ca.y /= ua;
          ca.r.x /= ua;
          ca.r.y /= ua;
          ca.Δⵠᐃᐃⵠⵠⵠ();
          ca.ᐃⵠⲆᐃ();
          Ww.ᐃᐃᐃ.x *= ua;
          Ww.ᐃᐃᐃ.y *= ua;
          ca.x *= ua;
          ca.y *= ua;
          ca.r.x *= ua;
          ca.r.y *= ua;
          to.restore();
        }
      }
      ta = gf.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ];
      aa = 0;
      for (; ta.length > aa; aa++) {
        if (ta[aa].ⲆΔΔᐃᐃΔΔ === 1) {
          wv(ta[aa]);
        }
      }
      K = gf.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ];
      aa = 0;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          wv(K[aa], Cr.ᐃΔᐃᐃΔ, Cr.ᐃᐃⵠⲆⵠᐃⵠ);
        }
      }
      K = gf.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ];
      aa = kq;
      for (; aa < K.length; aa++) {
        if (K[aa].scale > 1) {
          wv(K[aa], Cr.Δⵠᐃⵠᐃ, Cr.ΔΔΔᐃΔᐃⲆ);
        }
      }
      var Ja = gf.ⵠᐃΔ[ew.ΔⵠΔΔᐃ];
      for (aa = xb; Ja.length > aa; aa++) {
        wv(Ja[aa], Cr.ΔⵠΔΔᐃ, Cr.ⲆⲆΔΔⲆᐃΔ);
      }
      var Ka = gf.ⵠᐃΔ[ew.ⲆΔΔᐃΔ];
      for (aa = Ko; aa < Ka.length; aa++) {
        wv(Ka[aa], Cr.ⲆΔΔᐃΔ, Cr.ᐃᐃᐃᐃⲆᐃᐃ);
      }
      if ((cv += pf * 15) > 60) {
        cv -= 60;
      }
      Iv(dv, i, t, f, e, Cr.ΔΔΔᐃΔ, "fo", 2);
      Iv(dv, i, t, f, e, Cr.ⵠΔΔΔᐃ, "fod", Qs);
    })();
    if (sf.ⵠⲆⵠⲆΔ && gf.mode !== bw.ⲆᐃᐃΔⵠ && gf.mode !== bw.ⲆᐃⲆⵠΔ && gf.mode !== bw.ⲆᐃⲆΔⵠⵠⲆ) {
      (function () {
        var a = Ww.ⲆᐃⲆⵠᐃ;
        if (Gd === a.ⲆⲆΔΔᐃ) {
          a.ⵠΔᐃᐃⲆ = Math.max(rh, a.ⵠΔᐃᐃⲆ - pf / 10);
        } else {
          a.ⵠΔᐃᐃⲆ = Math.min(1, a.ⵠΔᐃᐃⲆ + pf / 10);
        }
        for (var b = a.ᐃⵠᐃⵠᐃ, c = xb; c < b.length; c++) {
          var d = b[c];
          a.Ⲇᐃⵠ(d);
          pv(Cr.ᐃΔᐃⲆⲆⵠᐃ, d.id, Ww.ᐃᐃᐃ.x + d.x, Ww.ᐃᐃᐃ.y + d.y, d.alpha);
        }
        for (c = Kr; b.length > c; c++) {
          if ((d = b[c]).ΔᐃΔᐃⲆ <= 0 || d.x > -Ww.ᐃᐃᐃ.x + ro || -Ww.ᐃᐃᐃ.x - Ww.ᐃᐃᐃ.w / cu > d.x || -Ww.ᐃᐃᐃ.y + so < d.y) {
            b.splice(c, ik);
          }
        }
        var e = -Ww.ᐃᐃᐃ.y;
        if (gf.ⲆᐃⵠⲆⵠ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Ww.ᐃΔᐃΔᐃ;
        if (a.ⲆⲆΔΔᐃ === yk) {
          a.ⵠΔᐃᐃⲆ = Math.max(0, a.ⵠΔᐃᐃⲆ - pf / Pr);
        } else {
          a.ⵠΔᐃᐃⲆ = Math.min(Yt, a.ⵠΔᐃᐃⲆ + pf / Ke);
        }
        for (var b = a.ᐃⵠᐃⵠᐃ, c = rh; b.length > c; c++) {
          var d = b[c];
          a.Ⲇᐃⵠ(d);
          pv(Cr.ⲆᐃᐃᐃⲆΔΔ, d.id, Ww.ᐃᐃᐃ.x + d.x, Ww.ᐃᐃᐃ.y + d.y, d.alpha);
        }
        for (c = rh; c < b.length; c++) {
          if ((d = b[c]).ΔᐃΔᐃⲆ <= 0 || d.x > -Ww.ᐃᐃᐃ.x + ro || -Ww.ᐃᐃᐃ.x > d.x || -Ww.ᐃᐃᐃ.y + so < d.y) {
            b.splice(c, ce);
          }
        }
        var e = -Ww.ᐃᐃᐃ.y;
        if (gf.ⲆⲆᐃΔᐃ > -1000) {
          a.add(e);
        }
      })();
      (function () {
        var a = Ww.ⵠΔΔΔΔⵠⵠ;
        for (var b = a.ᐃⵠᐃⵠᐃ, c = Lg; c < b.length; c++) {
          var d = b[c];
          a.Ⲇᐃⵠ(d);
          pv(Cr.ΔⲆⵠΔⲆᐃΔ, d.id, Ww.ᐃᐃᐃ.x + d.x, Ww.ᐃᐃᐃ.y + d.y, d.alpha);
        }
        for (c = yk; c < b.length; c++) {
          if ((d = b[c]).ΔᐃΔᐃⲆ <= 0 || d.x > -Ww.ᐃᐃᐃ.x + ro || -Ww.ᐃᐃᐃ.x > d.x || -Ww.ᐃᐃᐃ.y + so < d.y) {
            b.splice(c, bt);
          }
        }
        var e = -Ww.ᐃᐃᐃ.y;
        if (gf.ᐃⲆΔᐃⲆ > -1000) {
          a.add(e);
        }
      })();
    }
    if (gf.transition && a) {
      gf.transition = false;
      gf.ⵠΔⵠⵠ.ᐃⲆⵠ = 0;
      gf.ⵠΔⵠⵠ.ᐃⲆΔ = ue;
    }
  }
  function yv(a) {
    to.save();
    to.translate(Ww.ᐃᐃᐃ.x + a.x, Ww.ᐃᐃᐃ.y + a.y);
    to.rotate(a.angle);
    to.globalAlpha = a.alpha;
    var b = ΔΔ[a.id][gf.time];
    Em(to, b, -b.width / eh, -b.height / 2);
    to.globalAlpha = ub;
    to.restore();
  }
  var zv = Vf.console;
  function Av(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Ww.ᐃᐃᐃ.y + f + 710;
    var l = Math.max(Ww.ᐃᐃᐃ.x + e, 0);
    var g = Math.max(-Ww.ᐃᐃᐃ.x + ro - i - Oj, Kr);
    var r = l;
    var b = ro - l - g;
    if (n) {
      var s = j.ⵠᐃⲆ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + bw.Δⵠⵠⵠⵠ;
    bw.ΔⲆⵠΔᐃ;
    t += -s + bw.ΔⲆⵠΔᐃ + Xn;
    if (n) {
      s = j.ⵠᐃⲆ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - bw.ⵠΔΔᐃΔ - t - s;
    var v = (t += u + tg) - _l;
    if (n) {
      s = j.ⵠᐃⲆ(q).x;
    } else {
      s = q.r.x;
    }
    if (t + (u = h - bw.ᐃⵠᐃⵠⲆ - t - s) < v) {
      t += u + tg;
    } else {
      t = v;
    }
    u = h - bw.ⵠⵠᐃⵠⲆΔᐃ - t;
    if (n > Mn && V === k.ᐃΔⲆᐃᐃΔⲆ) {
      if (gf.transition) {
        var p = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 77, 72, 252, 239, 187, p);
      } else {
        to.fillStyle = Cr.ΔⲆΔΔᐃⲆⲆ[gf.time];
      }
      to.fillRect(r, t, b, u);
    } else {
      if (gf.transition) {
        p = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(k.ᐃⵠᐃ[0], k.ᐃⵠᐃ[1], k.ᐃⵠᐃ[2], k.Δⵠⵠ[kq], k.Δⵠⵠ[1], k.Δⵠⵠ[_t], p);
      } else {
        to.fillStyle = k.ᐃⵠⲆᐃᐃ[gf.time];
      }
      to.fillRect(r, t, b, u);
    }
  }
  function Bv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Ww.ᐃᐃᐃ.y + j - 700;
    var l = Math.max(Ww.ᐃᐃᐃ.x + e, 0);
    var g = Math.max(-Ww.ᐃᐃᐃ.x + ro - i - Bl, $t);
    var t = l;
    var b = ro - l - g;
    if (o) {
      var u = q.ⵠᐃⲆ(r);
    } else {
      u = r.r;
    }
    var v = h + bw.Δⵠⵠⵠⵠ;
    var F = t;
    var m = v;
    var p = u.x + bw.ΔⲆⵠΔᐃ;
    var C = b;
    var G = v += u.x + bw.ΔⲆⵠΔᐃ - 2;
    if (o) {
      u = q.ⵠᐃⲆ(a);
    } else {
      u = a.r;
    }
    var f = h + bw.ⵠΔΔᐃΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - 2) - 2;
    if (o) {
      u = q.ⵠᐃⲆ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + bw.ᐃⵠᐃⵠⲆ - v + u.x) - 3) {
      var k = Rl;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - pa;
    } else {
      k = false;
      v = A;
      D = -1;
    }
    f = h + bw.ⵠⵠᐃⵠⲆΔᐃ - v;
    if (gf.transition) {
      var N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(F, m, C, p);
    if (o) {
      if (gf.transition) {
        N = gf.time ? ik - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 70, 76, 42, 139, 155, N);
      } else {
        to.fillStyle = Cr.ΔⵠⲆⵠⲆⲆⵠ[gf.time];
      }
    } else if (gf.transition) {
      N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(y, H, K, w);
    if (k) {
      if (o) {
        if (gf.transition) {
          N = gf.time ? wg - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
          to.fillStyle = ov(17, 94, 96, 169, 214, 211, N);
        } else {
          to.fillStyle = Cr.ΔΔΔⵠᐃΔΔ[gf.time];
        }
      } else if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
      } else {
        to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
      }
      to.fillRect(J, L, B, M);
    }
    if (sf.ⵠⲆⵠⲆΔ && o) {
      q.ⵠᐃᐃⲆᐃΔⵠⲆΔ(A, D, G, h, -Ww.ᐃᐃᐃ.x + F, -Ww.ᐃᐃᐃ.x + F + C);
    }
  }
  function Cv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Ww.ᐃᐃᐃ.x + f + 820;
    var l = Math.max(Ww.ᐃᐃᐃ.y + e, yk);
    var g = Math.max(-Ww.ᐃᐃᐃ.y + so - i - Bl, Dh);
    var r = l;
    var b = so - l - g;
    if (n) {
      var s = j.ⵠᐃⲆ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + bw.Δⵠⵠⵠⵠ;
    bw.ΔⲆⵠΔᐃ;
    t += -s + bw.ΔⲆⵠΔᐃ + Ok;
    if (n) {
      s = j.ⵠᐃⲆ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h - bw.ⵠΔΔᐃΔ - t - s;
    var v = (t += u + yh) - 2;
    if (n) {
      s = j.ⵠᐃⲆ(q).x;
    } else {
      s = q.r.x;
    }
    if (v > t + (u = h - bw.ᐃⵠᐃⵠⲆ - t - s)) {
      t += u + 2;
    } else {
      t = v;
    }
    u = h - bw.ⵠⵠᐃⵠⲆΔᐃ - t;
    if (n > Gd && k.ᐃΔⲆᐃᐃΔⲆ === 1) {
      if (gf.transition) {
        var p = gf.time ? js - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 77, 72, 252, 239, 187, p);
      } else {
        to.fillStyle = Cr.ΔⲆΔΔᐃⲆⲆ[gf.time];
      }
      to.fillRect(t, r, u, b);
    } else {
      if (gf.transition) {
        p = gf.time ? Ud - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(k.ᐃⵠᐃ[0], k.ᐃⵠᐃ[1], k.ᐃⵠᐃ[2], k.Δⵠⵠ[Gd], k.Δⵠⵠ[1], k.Δⵠⵠ[eh], p);
      } else {
        to.fillStyle = k.ᐃⵠⲆᐃᐃ[gf.time];
      }
      to.fillRect(t, r, u, b);
    }
  }
  function Dv(f, e, i, j, k, n) {
    var o = j.w1;
    var a = j.w2;
    var q = j.w3;
    var h = Ww.ᐃᐃᐃ.y + f - 700;
    var l = Math.max(Ww.ᐃᐃᐃ.x + e, rh);
    var g = Math.max(-Ww.ᐃᐃᐃ.x + ro - i - 100, 0);
    var r = l;
    var b = ro - l - g;
    if (n) {
      var s = j.ⵠᐃⲆ(o).x;
    } else {
      s = o.r.x;
    }
    var t = h + bw.Δⵠⵠⵠⵠ;
    bw.ΔⲆⵠΔᐃ;
    t += s + bw.ΔⲆⵠΔᐃ - Xn;
    if (n) {
      s = j.ⵠᐃⲆ(a).x;
    } else {
      s = a.r.x;
    }
    var u = h + bw.ⵠΔΔᐃΔ - t + s;
    var v = (t += u - 2) - 2;
    if (n) {
      s = j.ⵠᐃⲆ(q).x;
    } else {
      s = q.r.x;
    }
    if (v < t + (u = h + bw.ᐃⵠᐃⵠⲆ - t + s) - nh) {
      t += u - Le;
    } else {
      t = v;
    }
    u = h + bw.ⵠⵠᐃⵠⲆΔᐃ - t;
    if (n > 0 && k.ᐃΔⲆᐃᐃΔⲆ === Br) {
      if (gf.transition) {
        var p = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 77, 72, 252, 239, 187, p);
      } else {
        to.fillStyle = Cr.ΔⲆΔΔᐃⲆⲆ[gf.time];
      }
      to.fillRect(r, t, b, u);
    } else {
      if (gf.transition) {
        p = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(k.ᐃⵠᐃ[0], k.ᐃⵠᐃ[sd], k.ᐃⵠᐃ[2], k.Δⵠⵠ[0], k.Δⵠⵠ[Ur], k.Δⵠⵠ[2], p);
      } else {
        to.fillStyle = k.ᐃⵠⲆᐃᐃ[gf.time];
      }
      to.fillRect(r, t, b, u);
    }
  }
  function Ev(a) {
    to.globalAlpha = a.alpha;
    ab(to, a.x + Ww.ᐃᐃᐃ.x, a.y + Ww.ᐃᐃᐃ.y, a.r);
    tb(to, Cr.ⲆᐃⵠⵠⵠΔΔ[gf.time]);
    to.globalAlpha = wg;
  }
  function Fv(b, c, d, e, f) {
    var g = d.width;
    var i = d.height;
    var a = Math.floor(g / _l);
    var j = Math.floor(i / Qs);
    if (gf.transition) {
      to.globalAlpha = Yt;
      Em(to, ΔΔ[b][c][gf.time], 0, 0, g, i, e, f, a, j);
      gf.time = gf.time ? 0 : 1;
      to.globalAlpha = ub - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      Em(to, ΔΔ[b][c][gf.time], 0, Jt, g, i, e, f, a, j);
      gf.time = gf.time ? Lu : jh;
      to.globalAlpha = 1;
    } else {
      Em(to, ΔΔ[b][c][gf.time], Ol, 0, g, i, e, f, a, j);
    }
  }
  function Gv(b, c, d, e) {
    var f = c.width;
    var g = c.height;
    var h = Math.floor(f / 2);
    var a = Math.floor(g / eh);
    if (gf.transition) {
      to.globalAlpha = 1;
      Em(to, ΔΔ[b][gf.time], Dh, Jt, f, g, d, e, h, a);
      gf.time = gf.time ? jj : bt;
      to.globalAlpha = js - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      Em(to, ΔΔ[b][gf.time], 0, Lg, f, g, d, e, h, a);
      gf.time = gf.time ? Fj : 1;
      to.globalAlpha = 1;
    } else {
      Em(to, c, Lg, 0, f, g, d, e, h, a);
    }
  }
  function Hv(j, e, i, q, n, o) {
    var r = q.w1;
    var a = q.w2;
    var s = q.w3;
    var h = Ww.ᐃᐃᐃ.x + j - 700;
    var l = Math.max(Ww.ᐃᐃᐃ.y + e, xb);
    var g = Math.max(-Ww.ᐃᐃᐃ.y + so - i - Zr, 0);
    var t = l;
    var b = so - l - g;
    if (o) {
      var u = q.ⵠᐃⲆ(r);
    } else {
      u = r.r;
    }
    var v = h + bw.Δⵠⵠⵠⵠ;
    var F = v;
    var m = t;
    var p = u.x + bw.ΔⲆⵠΔᐃ;
    var C = b;
    var G = v += u.x + bw.ΔⲆⵠΔᐃ - $r;
    if (o) {
      u = q.ⵠᐃⲆ(a);
    } else {
      u = a.r;
    }
    var f = h + bw.ⵠΔΔᐃΔ - v + u.x;
    var H = v;
    var y = t;
    var w = f;
    var K = b;
    var A = (v += f - yg) - 2;
    if (o) {
      u = q.ⵠᐃⲆ(s);
    } else {
      u = s.r;
    }
    if (A < v + (f = h + bw.ᐃⵠᐃⵠⲆ - v + u.x) - Dn) {
      var k = true;
      var L = v;
      var J = t;
      var M = f;
      var B = b;
      var D = v += f - 2;
    } else {
      k = ue;
      v = A;
      D = -1;
    }
    f = h + bw.ⵠⵠᐃⵠⲆΔᐃ - v;
    if (gf.transition) {
      var N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(F, m, p, C);
    if (o) {
      if (gf.transition) {
        N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(15, 70, 76, 42, 139, 155, N);
      } else {
        to.fillStyle = Cr.ΔⵠⲆⵠⲆⲆⵠ[gf.time];
      }
    } else if (gf.transition) {
      N = gf.time ? 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
    } else {
      to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
    }
    to.fillRect(H, y, w, K);
    if (k) {
      if (o) {
        if (gf.transition) {
          N = gf.time ? yl - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
          to.fillStyle = ov(17, 94, 96, 169, 214, 211, N);
        } else {
          to.fillStyle = Cr.ΔΔΔⵠᐃΔΔ[gf.time];
        }
      } else if (gf.transition) {
        N = gf.time ? Aj - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
        to.fillStyle = ov(9, 55, 63, 11, 106, 132, N);
      } else {
        to.fillStyle = Cr.ᐃᐃⵠⵠⵠ[gf.time];
      }
      to.fillRect(L, J, M, B);
    }
    if (sf.ⵠⲆⵠⲆΔ && o) {
      q.ΔⵠΔⲆⵠᐃᐃⲆⵠ(A, D, G, h, -Ww.ᐃᐃᐃ.y + m, -Ww.ᐃᐃᐃ.y + m + C);
    }
  }
  function Iv(b, c, d, e, f, g, i, a, j, h) {
    if (gf.transition) {
      to.globalAlpha = yl;
      b(c, d, e, f, g, i, a, j, h);
      gf.time = gf.time ? tr : er;
      to.globalAlpha = 1 - gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
      b(c, d, e, f, g, i, a, j, h);
      gf.time = gf.time ? rh : 1;
      to.globalAlpha = 1;
    } else {
      b(c, d, e, f, g, i, a, j, h);
    }
  }
  zv.log = zv.info = zv.error = zv.warn = zv.debug = zv.ᐃⵠᐃᐃᐃΔᐃⵠⵠ = zv.trace = zv.time = zv.timeEnd = function () { };
  var Jv = Dh;
  var Lv = er;
  var Mv = 2;
  var Nv = _s;
  var Ov = 1;
  var Pv = 2;
  function Qv(f, e, i, j, k, m, n, a = undefined, p = 0, h, q) {
    if (a === undefined) a = Mn;
    if (jr === h) {
      h = 0;
    }
    if (kj === q) {
      q = 1;
    }
    if (m !== 1) {
      m = ko;
    }
    if (j) {
      var t = j;
    }
    var u;
    var w = {
      width: f,
      height: e,
      Ⲇⵠ: t,
      state: Nv,
      translate: {
        x: a,
        y: p,
        ᐃᐃⲆⵠΔ: a,
        ΔⵠⵠⲆⵠ: p
      },
      ΔⲆΔⲆⵠᐃⲆⲆⵠ: m,
      ⲆΔΔⲆ: 0,
      callback: n,
      position: h,
      active: q
    };
    function v() {
      return w.Ⲇⵠ[w.state];
    }
    function d(a) {
      var b = w.translate;
      if (Fj === w.width || w.height === 0) {
        w.width = w.Ⲇⵠ[Dh].width;
        w.height = w.Ⲇⵠ[yk].height;
      }
      return a.x > b.x && a.x < b.x + w.width / k && a.y > b.y && a.y < b.y + w.height / k;
    }
    m = function () {
      var a = tr;
      if (w.ΔⲆΔⲆⵠᐃⲆⲆⵠ === 1) {
        if (w.state === Ov || w.state === Pv) {
          w.ⲆΔΔⲆ = (w.ⲆΔΔⲆ + pf * 1000) % 1000;
        } else if (w.ⲆΔΔⲆ > Ol) {
          w.ⲆΔΔⲆ = w.ⲆΔΔⲆ > 500 ? w.ⲆΔΔⲆ + pf * 1000 : w.ⲆΔΔⲆ - pf * 1000;
          if (w.ⲆΔΔⲆ < 0 || w.ⲆΔΔⲆ > 1000) {
            w.ⲆΔΔⲆ = 0;
          }
        }
        a = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(w.ⲆΔΔⲆ > 500 ? (1000 - w.ⲆΔΔⲆ) / 500 : w.ⲆΔΔⲆ / 500) * 0.2;
      }
      return a;
    };
    if (Qs === (k = k === ta ? cl : k === Cs ? 2 : Ur)) {
      u = function (b) {
        var c = 1 + m();
        var d = v();
        var e = w.width * c / 2;
        var f = c * w.height / Ok;
        var g = (e - w.width / 2) / 2;
        var a = (f - w.height / 2) / Uh;
        Em(b, d, w.translate.x - g, w.translate.y - a, e, f);
      };
    } else if (k === 3) {
      u = function (a) {
        var b = v();
        var c = w.width;
        var d = w.height;
        var e = (c - w.width) / 2;
        var f = (d - w.height) / Wq;
        Em(a, b, w.translate.x - e, w.translate.y - f, c, d);
      };
      k = 1;
    } else {
      u = function (a) {
        Em(a, v(), w.translate.x, w.translate.y);
      };
    }
    return {
      info: w,
      ᐃⲆΔⲆ: function (a, b, c) {
        if (d(b)) {
          if (c == Lv) {
            w.state = Pv;
          } else if (Mv == c || c == Jv && w.state != Pv) {
            w.state = Ov;
          }
          return ha;
        } else {
          w.state = Nv;
          return false;
        }
      },
      ᐃⵠⲆᐃ: u,
      ΔᐃⲆⵠΔⲆⲆ: d
    };
  }
  function Rv(a, b) {
    const c = a ^ 13261;
    const d = (24 << (b >> Jt & 255)) + (0 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 16 & 255));
    const e = nt(c, d);
    const f = Xk(c, d, c, d, c);
    return (0 << ((e ^ f) & 255)) + (24 << ((e ^ f) >> 24 & 255)) + (8 << ((e ^ f) >> ge & 255)) + (16 << ((e ^ f) >> 8 & 255));
  }
  function Sv(f, j, i, k, n, p, q, r, t, w, l, g, u, b, x) {
    if (f.length === 0) {
      f = " ";
    }
    if (Ya === q) {
      q = 0;
    }
    if (r === undefined) {
      r = Ko;
    }
    if (t === us) {
      t = 0;
    }
    if (b === undefined) {
      b = Fj;
    }
    var d = document.createElement("canvas");
    var c = d.getContext("2d");
    c.textBaseline = "middle";
    c.font = (x !== vl ? x + " " : "") + k + "px " + j;
    n = n !== On ? Math.min(c.measureText(f).width, n) : c.measureText(f).width;
    d.width = n + q;
    d.height = k + r;
    if (p !== undefined) {
      if (Zl !== l) {
        c.globalAlpha = l;
      }
      c.fillStyle = p;
      if (g !== Qi) {
        ⵠⵠΔⵠΔΔⵠⵠᐃ(c, t + 2, t, n + q - t * 2 - 4, k + r - t * 2, g);
        c.fill();
      } else {
        c.fillRect(t, t, n + q - yg * t, k + r - t * 2);
      }
      c.globalAlpha = 1;
      if (t !== 0) {
        c.lineWidth = t;
        c.strokeStyle = w;
        c.stroke();
      }
    }
    c.textBaseline = "middle";
    c.font = (x !== undefined ? x + " " : "") + k + "px " + j;
    if (u !== undefined) {
      c.strokeStyle = u;
      c.lineWidth = b;
      c.lineJoin = "miter";
      c.miterLimit = $r;
      c.strokeText(f, Math.floor(q / 2), Math.floor(r / 2) + Math.floor(k / 2), n);
    }
    c.fillStyle = i;
    c.fillText(f, Math.floor(q / Le), Math.floor(r / 2) + Math.floor(k / yh), n);
    d.w2 = d.width / cu;
    d.ⵠᐃⵠΔⵠ = d.height / Xn;
    return d;
  }
  function Tv(a, b, c, d, e) {
    var f = {
      x: c,
      y: d,
      ᐃᐃⲆⵠΔ: c,
      ΔⵠⵠⲆⵠ: d
    };
    return {
      translate: f,
      ᐃⵠⲆᐃ: function (b) {
        Em(b, a, f.x, f.y, a.width / 2, a.height / Le);
      },
      active: b,
      position: e
    };
  }
  function Uv(a, b) {
    var c = a.getBoundingClientRect();
    return {
      x: b.clientX - c.left,
      y: b.clientY - c.top
    };
  }
  var Vv = "send";
  var Wv = ⵠⵠⵠⲆ.ⲆΔᐃⵠΔⲆⲆ("id") === "1" ? 1 : Lg;
  var Xv = ⵠⵠⵠⲆ.ⲆΔᐃⵠΔⲆⲆ("password");
  var Yv = ⵠⵠⵠⲆ.ⲆΔᐃⵠΔⲆⲆ("debug") || Uq;
  if (Hh !== Yv) {
    Yv = JSON.parse(Vf.decodeURIComponent(Yv));
  }
  var Zv = "https://api.eg.rivet.gg";
  var $v = {
    ᐃΔΔΔⵠ: th,
    ⲆΔⲆΔⵠᐃⵠ: qs,
    ⲆΔⵠΔᐃΔⲆ: 8,
    ᐃᐃⲆᐃΔⵠΔ: Pl,
    ΔⲆᐃΔⵠᐃΔ: 128,
    ᐃΔⵠⵠ: Qs,
    ⵠΔⲆᐃᐃᐃΔⵠᐃ: V,
    IDLE: 64,
    ΔᐃⲆⵠⵠᐃᐃ: 32
  };
  var _v = [{
    ⲆⵠΔΔΔ: 1000,
    items: [[eh, Dr.ⵠᐃΔΔᐃ], [wg, Dr.ᐃΔⵠᐃⲆ], [Xr, Dr.ᐃᐃΔⲆⲆ], [1, Dr.ᐃᐃⵠⲆᐃ]]
  }, {
    ⲆⵠΔΔΔ: 2000,
    items: [[yh, Dr.Ⲇⵠᐃⵠᐃ], [dn, Dr.ᐃⵠΔᐃⲆ], [2, Dr.ᐃΔⵠᐃⲆ], [qh, Dr.ᐃᐃΔⲆⲆ], [pa, Dr.ᐃᐃⵠⲆᐃ]]
  }, {
    ⲆⵠΔΔΔ: 4000,
    items: [[3, Dr.Ⲇⵠᐃⵠᐃ], [1, Dr.ⵠⵠⵠΔⵠ], [f, Dr.ᐃΔⵠᐃⲆ], [20, Dr.ᐃᐃΔⲆⲆ], [zg, Dr.ᐃᐃⵠⲆᐃ], [1, Dr.ᐃⵠΔⲆᐃ], [80, Dr.ᐃᐃᐃⵠ], [140, Dr.ΔΔⲆⵠ]]
  }, {
    ⲆⵠΔΔΔ: 8000,
    items: [[ce, Dr.ᐃⵠΔⵠ], [4, Dr.Ⲇⵠᐃⵠᐃ], [1, Dr.ᐃⲆⵠΔⲆ], [Ll, Dr.ᐃΔⵠᐃⲆ], [30, Dr.ᐃᐃΔⲆⲆ], [So, Dr.ᐃᐃⵠⲆᐃ], [1, Dr.ᐃⵠΔⲆᐃ], [150, Dr.ᐃᐃᐃⵠ], [200, Dr.ΔΔⲆⵠ], [60, Dr.ⲆΔᐃⲆ], [Ok, Dr.ᐃⲆᐃⵠᐃ]]
  }, {
    ⲆⵠΔΔΔ: 16000,
    items: [[1, Dr.ᐃⵠΔⵠ], [Fo, Dr.ⲆΔᐃᐃᐃ], [Fo, Dr.ⵠᐃⲆⵠᐃ], [Eh, Dr.ⲆᐃᐃⵠⲆ], [2, Dr.ᐃⲆᐃⵠᐃ], [Le, Dr.Ⲇⵠᐃⵠᐃ], [1, Dr.ⲆⵠᐃᐃⲆ], [15, Dr.ⲆⲆΔⵠⵠ], [yh, Dr.ΔΔΔΔⲆ], [1, Dr.ⵠⵠⲆΔΔ], [Ud, Dr.ⵠⲆⲆⵠⲆ], [200, Dr.ᐃᐃᐃⵠ], [300, Dr.ΔΔⲆⵠ]]
  }, {
    ⲆⵠΔΔΔ: 16000,
    items: [[1, Dr.ᐃⵠΔⵠ], [Cs, Dr.ⵠΔᐃⵠⵠ], [bt, Dr.ⲆΔⵠⵠⲆ], [1, Dr.ᐃⲆⵠΔⲆ], [zq, Dr.ⲆᐃᐃⵠⲆ], [In, Dr.ᐃⲆᐃⵠᐃ], [_h, Dr.Ⲇⵠᐃⵠᐃ], [3, Dr.ⲆᐃΔᐃᐃ], [1, Dr.ⲆⵠⵠⲆⲆ], [200, Dr.ᐃᐃᐃⵠ], [300, Dr.ΔΔⲆⵠ]]
  }, {
    ⲆⵠΔΔΔ: 16000,
    items: [[dn, Dr.ᐃⵠΔⵠ], [sd, Dr.ᐃᐃᐃⲆᐃ], [1, Dr.ΔᐃᐃΔⲆ], [Gg, Dr.ⲆᐃΔᐃᐃ], [ik, 0], [1, Dr.ᐃⲆⵠΔⲆ], [7, Dr.ⲆᐃᐃⵠⲆ], [2, Dr.ᐃⲆᐃⵠᐃ], [4, Dr.Ⲇⵠᐃⵠᐃ], [150, Dr.ᐃᐃᐃⵠ], [200, Dr.ΔΔⲆⵠ], [dn, Dr.ⵠⲆⲆⵠΔ]]
  }, {
    ⲆⵠΔΔΔ: 16000,
    items: [[Cs, Dr.ᐃⵠΔⵠ], [1, Dr.ᐃΔᐃⵠΔ], [1, Dr.ᐃⲆⵠΔⲆ], [7, Dr.ⲆᐃᐃⵠⲆ], [2, Dr.ᐃⲆᐃⵠᐃ], [4, Dr.Ⲇⵠᐃⵠᐃ], [2, Dr.ᐃⲆΔⵠⵠ], [4, Dr.ⵠⲆⵠⵠᐃ], [10, Dr.ΔⵠΔΔⲆ], [_, Dr.ΔΔⲆᐃᐃ], [xt, Dr.ΔⵠᐃᐃΔ], [Ud, Dr.ΔᐃᐃⲆⲆ], [500, Dr.ΔΔⲆⵠ]]
  }, {
    ⲆⵠΔΔΔ: 16000,
    items: [[1, Dr.ᐃⵠΔⵠ], [1, Dr.ᐃⲆⵠΔⲆ], [z, Dr.Ⲇⵠᐃⵠⵠ], [bt, Dr.ᐃⲆᐃⵠᐃ], [6, Dr.Ⲇⵠᐃⵠᐃ], [Mo, Dr.ⲆᐃΔᐃᐃ], [1, Dr.ⵠΔⲆⲆΔ], [1, Dr.ⵠⲆΔᐃΔ], [16, Dr.ᐃⲆΔⲆⲆ], [150, Dr.ᐃᐃᐃⵠ], [200, Dr.ΔΔⲆⵠ]]
  }, {
    ⲆⵠΔΔΔ: 20000,
    items: [[er, Dr.ᐃⵠΔⵠ], [1, Dr.ᐃⲆⵠΔⲆ], [er, Dr.ⲆᐃᐃⵠⲆ], [Aj, Dr.ᐃⲆᐃⵠᐃ], [Ea, Dr.Ⲇⵠᐃⵠᐃ], [3, Dr.ⲆᐃΔᐃᐃ], [wg, Dr.ⲆⲆⲆᐃⲆ], [1, Dr.ⲆΔⵠⲆᐃ], [er, Dr.ΔⵠⲆⵠⵠ], [2, Dr.ⲆΔⲆᐃᐃ], [50, Dr.ᐃᐃᐃⵠ], [100, Dr.ΔΔⲆⵠ]]
  }];
  var aw = {
    ⲆⲆΔⲆΔᐃᐃΔⵠ: 60000,
    ᐃᐃⲆᐃΔⵠΔ: 0.2,
    ⲆⲆⵠΔᐃⲆⲆ: 600000,
    ᐃⵠⲆᐃᐃⵠΔⵠⵠ: Zn,
    ⵠⵠᐃⲆⵠⲆⲆⲆᐃ: 14,
    ⲆⵠⲆᐃΔΔᐃⵠⲆ: 15,
    ΔΔᐃΔΔᐃᐃᐃⲆ: 8000,
    ⵠΔⵠᐃᐃᐃⲆ: 4,
    ᐃⲆᐃⵠΔⵠΔⵠⲆ: 2000,
    ΔⲆⵠⲆΔᐃᐃⵠᐃ: nh,
    ⵠᐃⵠᐃᐃⵠⲆ: 52,
    ⵠⲆⵠⵠᐃⲆⲆ: wg,
    ⲆⵠⵠⲆᐃⵠΔ: 4,
    ᐃⲆᐃⲆΔᐃⵠΔⲆ: 15,
    ᐃⵠⲆΔⵠᐃᐃᐃⲆ: 20,
    ⲆᐃΔⵠᐃΔⲆⲆⲆ: 200,
    ⵠⲆⵠᐃΔᐃΔ: 3,
    ⲆᐃΔⲆᐃΔΔᐃⵠ: 125000,
    ⲆΔⵠΔΔΔᐃ: 0.2,
    ⵠⵠⵠⵠΔᐃᐃ: cu,
    ⵠΔⲆⵠᐃⲆᐃ: 0,
    ΔⲆⵠⲆΔΔΔⲆΔ: 0.58,
    ΔⵠᐃⵠΔΔⵠⲆΔ: "[25]",
    ΔᐃⵠΔᐃⵠⲆⵠⲆ: 50,
    ΔⵠΔⲆⲆᐃᐃΔⲆ: Bb
  };
  var bw = {
    ⵠⵠΔ: 480000,
    ⵠⵠⵠⵠⲆΔᐃ: 10,
    ⲆᐃⵠⲆᐃⵠᐃ: 16,
    ⵠᐃⵠⵠΔⵠΔᐃΔ: 6,
    ᐃⲆΔⵠⵠᐃⲆ: 60,
    ᐃⲆⵠᐃⲆ: 1,
    ⲆΔΔⲆΔ: 2,
    ᐃΔⲆⲆⵠ: 4,
    ᐃΔⲆᐃⲆ: 8,
    ⲆΔⵠΔΔΔᐃ: 10,
    ᐃᐃᐃΔΔᐃΔ: Er,
    ΔⵠⵠΔΔⲆⵠ: 100,
    ⲆᐃᐃΔᐃᐃⲆ: 100,
    ⲆΔᐃⵠᐃᐃⵠᐃᐃ: Zr,
    ᐃᐃΔⵠΔᐃⲆ: 100,
    ⵠⲆΔᐃᐃⵠⵠ: 100,
    ΔᐃᐃⲆⵠⲆΔⲆⲆ: Yi,
    ⵠⲆΔᐃᐃⵠⵠ: 100,
    ⵠⲆᐃᐃΔᐃⲆ: Bl,
    ΔᐃⲆⵠΔⵠΔ: fh,
    ⲆᐃⵠΔΔ: 0,
    ΔⵠΔⲆⵠⲆΔ: 1,
    ⲆᐃᐃΔⵠ: Qs,
    ᐃᐃⵠᐃΔ: 3,
    ⲆᐃⲆⵠΔ: 4,
    ⲆᐃⲆΔⵠⵠⲆ: 5,
    ᐃⲆⲆⵠᐃ: 6,
    ⵠⵠᐃᐃΔ: 7,
    ΔᐃⲆⲆⵠⵠΔⵠⲆ: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      6: "community",
      7: "experimental"
    },
    ⲆⵠᐃⲆⲆᐃᐃ: 0,
    ᐃᐃΔⵠⲆᐃᐃ: yk,
    ⵠΔⲆᐃΔⵠⵠ: 30,
    ⲆⵠΔⲆᐃⵠᐃⵠΔ: Le,
    ᐃⲆΔⵠⵠᐃⲆ: 60000,
    ⲆΔᐃΔᐃⲆⵠΔᐃ: 0,
    ⲆᐃⵠᐃⲆⵠⵠⵠⵠ: _s,
    ⲆᐃᐃΔΔΔΔⵠⲆ: 50,
    ⲆᐃⲆⵠⵠⵠⵠᐃⲆ: ko,
    ⵠⲆΔⲆⲆΔⲆΔᐃ: 40,
    ⵠⲆⵠΔΔⵠⵠΔΔ: 39,
    ΔᐃΔᐃΔΔⵠⲆΔ: 830,
    ⵠⵠΔⲆᐃΔᐃ: 25,
    ᐃΔΔᐃⵠⲆΔ: db,
    ΔⲆⵠΔᐃ: ko,
    Δⵠⵠⵠⵠ: Jt,
    ⵠⵠᐃⲆⲆⲆⵠ: 200,
    ΔΔᐃᐃⵠΔⵠ: Mn,
    ⵠΔΔᐃΔ: 250,
    ⵠΔΔᐃⵠⲆⵠ: 150,
    ᐃⲆΔΔⵠⵠΔ: Ko,
    ᐃⵠᐃⵠⲆ: 350,
    ᐃᐃΔΔᐃⵠᐃ: Dq,
    ⵠⵠᐃⵠⲆΔᐃ: 700,
    ΔⵠᐃᐃΔ: 39879
  };
  var cw = [];
  for (ut = jj; ut < 500; ut++) {
    cw[ut] = Lu;
  }
  cw[Cr.ⵠⲆᐃᐃⵠ] = 1;
  cw[Cr.ᐃⲆᐃΔⲆ] = 1;
  cw[Cr.ⵠⲆΔᐃΔ] = 1;
  cw[Cr.ⲆΔⵠⲆᐃ] = Eg;
  cw[Cr.ΔᐃⲆⵠΔ] = Eg;
  cw[Cr.ⲆΔⵠΔⵠ] = Br;
  cw[Cr.ⵠΔⲆΔᐃ] = Aj;
  cw[Cr.ⵠⵠⵠⵠΔ] = dn;
  cw[Cr.ⵠΔΔⲆΔ] = 1;
  cw[Cr.ⵠⲆⲆⵠⵠ] = 1;
  cw[Cr.ⵠⲆᐃᐃΔ] = jh;
  cw[Cr.ΔⲆⲆⵠⲆ] = 1;
  cw[Cr.ΔⵠⲆⵠⵠ] = 1;
  cw[Cr.ⲆᐃᐃΔⲆ] = Aj;
  cw[Cr.ᐃΔⵠᐃⵠ] = 1;
  cw[Cr.ⵠⲆᐃⲆᐃ] = bt;
  cw[Cr.ΔᐃᐃⲆΔ] = 1;
  cw[Cr.ᐃⲆⵠⲆⲆ] = 1;
  cw[Cr.ⵠⵠⲆⵠΔ] = 1;
  var dw = [{
    time: 2880000
  }, {
    time: zn * 60000 * lk
  }, {
    time: bn * 480000
  }, {
    time: db * 60000 * 3
  }, {
    time: ol * (Sl * 60000)
  }, {
    time: vu * (ob * 60000)
  }, {
    time: Gt * 480000
  }, {
    time: rd * (yb * 60000)
  }, {
    time: hi * 480000
  }, {
    time: xo * 60000 * 7
  }, {
    time: za * 480000
  }, {
    time: Ss * 480000
  }, {
    time: X * 60000 * 7
  }];
  var ew = {
    ᐃⵠᐃⲆΔ: Ug,
    ᐃᐃᐃᐃⵠ: 20,
    ⵠⲆⵠⵠᐃ: 34,
    ΔᐃᐃⲆⵠⵠⲆ: 83,
    ᐃᐃⵠᐃᐃ: 91,
    ᐃᐃⵠΔΔ: 36,
    ⵠᐃΔΔᐃ: 1,
    ⲆⲆᐃⵠΔΔᐃ: 76,
    ᐃΔᐃᐃΔ: 64,
    ⲆΔᐃⲆⲆ: 22,
    ⵠⵠⲆΔΔ: 29,
    ᐃⲆᐃΔΔ: 87,
    ᐃⵠᐃΔⲆ: 45,
    ᐃⲆᐃᐃΔ: 66,
    ᐃⵠΔⲆⵠ: 81,
    ⲆΔⲆᐃᐃ: 13,
    ⵠᐃᐃΔΔ: 61,
    ⲆΔΔΔΔ: 65,
    ⵠΔΔᐃⲆ: 28,
    ΔⵠΔΔᐃ: 74,
    ΔΔⲆΔΔΔⵠ: 82,
    ΔΔᐃⵠᐃ: 90,
    ΔΔⲆΔᐃ: 88,
    ⵠΔⲆⵠᐃ: 47,
    ᐃᐃᐃⵠᐃ: 23,
    ⲆΔⵠⵠ: 0,
    ΔⵠⲆⵠΔ: 48,
    ΔⵠⵠⵠΔ: 62,
    ⵠΔⵠⲆΔ: 39,
    ΔΔΔΔⲆ: 15,
    ᐃΔⲆⵠΔⵠⵠ: 89,
    ᐃⵠⵠΔⵠ: 8,
    ᐃΔⵠᐃᐃ: 54,
    ΔⵠΔᐃⲆ: 67,
    ᐃΔΔΔΔ: 35,
    ⲆΔⵠⵠⵠ: 72,
    ᐃΔⲆⲆᐃ: 44,
    ΔΔⲆᐃᐃ: 31,
    ⵠΔⵠΔΔ: 77,
    ᐃⲆΔⲆⲆ: 30,
    ⲆⲆΔⵠⵠ: 7,
    ⵠⵠⲆᐃᐃ: 24,
    ⲆΔΔᐃΔ: 75,
    ⵠⲆⲆᐃᐃ: 26,
    ΔⵠᐃᐃΔ: 3,
    ΔⵠⲆⵠⲆ: 49,
    Ⲇⵠᐃⵠᐃ: mg,
    ⲆⲆᐃⲆᐃ: 50,
    ΔΔⵠᐃⲆ: 21,
    ᐃΔΔᐃⵠ: 56,
    ᐃᐃⲆᐃⲆ: 16,
    ⲆᐃⲆΔΔ: 63,
    ᐃᐃⵠΔⵠ: 52,
    ΔΔΔⵠᐃ: 60,
    ⲆΔⲆΔᐃ: 37,
    ᐃᐃᐃΔΔΔᐃ: 85,
    ⲆⲆΔᐃⲆ: 51,
    ΔΔΔᐃⲆ: 43,
    Ⲇᐃⵠⵠⵠ: 12,
    ᐃⲆΔᐃΔ: 25,
    ᐃᐃΔⵠᐃ: 71,
    ΔᐃΔⵠᐃ: 27,
    ⵠᐃᐃⲆⲆ: 70,
    ⲆⵠᐃᐃⲆ: 18,
    ⲆⵠⲆⵠᐃ: 68,
    ᐃⲆⲆⲆᐃ: jt,
    ⲆΔⵠⵠᐃ: 53,
    ⲆΔΔⲆⵠ: Sh,
    ⵠⵠΔⵠᐃ: 80,
    ⵠⵠⵠⲆΔ: 55,
    ᐃⵠΔⲆᐃ: xl,
    Δⵠᐃⵠᐃ: 69,
    ᐃᐃᐃΔⵠ: zr,
    ᐃⵠⲆⵠⵠ: 46,
    ΔⵠΔΔⲆ: 33,
    ΔⲆᐃⲆⵠ: Wl,
    ᐃΔⲆᐃᐃ: 5,
    ⵠᐃⲆⵠᐃ: 41,
    ᐃⲆΔⵠⵠ: 32,
    ⵠⲆᐃⵠⲆ: 86,
    ⵠⵠΔⲆⲆ: Pr,
    ⲆⵠᐃⲆⵠ: 78,
    ⵠᐃⵠⲆᐃ: 40,
    ⲆΔⵠⲆΔ: 38,
    ᐃⵠⲆᐃⵠ: 42,
    ᐃᐃⵠⲆⲆⵠⲆ: 84,
    ⲆⵠⲆΔⲆ: 100,
    ᐃΔⲆᐃⵠ: 79,
    ⵠⲆᐃⲆⵠ: 73,
    ⲆⲆᐃⲆΔ: wl
  };
  var fw = [[ew.ⵠⵠⲆᐃᐃ, Dr.ᐃᐃᐃⵠ], [ew.ᐃⲆΔᐃΔ, Dr.ⲆΔᐃⲆ], [ew.ⵠⲆⲆᐃᐃ, Dr.ⵠⲆⲆΔ], [ew.ΔᐃΔⵠᐃ, Dr.ᐃᐃᐃΔ], [ew.ⵠΔΔᐃⲆ, Dr.ⵠⲆᐃⲆ]];
  function gw(a, b, c, d) {
    this.id = a;
    this.ⲆⵠⲆⲆⵠ = Cl * (a + 5);
    this.ΔᐃΔᐃⲆ = ro / 1366;
    this.x = b;
    this.y = c;
    this.c = Math.sin(d);
    this.ᐃᐃⵠⲆ = Math.cos(d);
    this.alpha = _s;
  }
  function hw(b, c, d, e, f, i, j, a, k, h) {
    this.type = b;
    this.ΔⲆᐃΔ = c;
    this.id = d;
    this.x = e;
    this.y = f;
    this.angle = i;
    this.ΔΔΔⲆⲆΔΔ = i;
    this.action = j;
    this.info = a;
    this.ᐃΔⲆⲆΔ = h;
    this.r = {
      x: e,
      y: f
    };
    this.ⲆⵠⲆⲆⵠ = k;
    if (gf) {
      this.ᐃⲆᐃⲆ = gf.ΔᐃᐃⲆⵠⲆⵠ * c + d;
    }
    switch (b) {
      case ew.ⲆΔⵠⵠ:
        this.ᐃⲆⲆΔ = gf.ΔⲆᐃⵠ[this.ΔⲆᐃΔ];
        this.ⲆΔⲆⵠ = this.ᐃⲆⲆΔ.ⲆΔⲆⵠ;
        this.ΔΔⲆⲆᐃⲆⲆ = this.ᐃⲆⲆΔ.ΔΔⲆⲆᐃⲆⲆ;
        this.ΔⲆⵠⵠᐃ = this.ᐃⲆⲆΔ.ΔⲆⵠⵠᐃ;
        this.ΔᐃᐃΔⵠ = this.ᐃⲆⲆΔ.ΔᐃᐃΔⵠ;
        this.ⲆΔΔΔⵠΔΔ = -1000000;
        this.ᐃⲆΔᐃⲆ = -1000000;
        this.ⲆⲆᐃΔᐃ = -1000000;
        this.ⲆᐃⵠⲆⵠ = -1000000;
        this.Δᐃᐃᐃⵠᐃᐃ = -1000000;
        this.ᐃⲆⲆⲆΔⵠⵠ = -1000000;
        this.ⲆⲆΔⵠΔ = -1000000;
        this.ⵠⲆᐃᐃⲆ = bw.ⲆᐃᐃΔⵠ === gf.mode && bw.ⲆⵠᐃⲆⲆᐃᐃ === this.ⲆΔⲆⵠ ? Pg : sr;
        this.Δᐃⵠⵠⵠⵠᐃ = bw.ᐃᐃⵠᐃΔ === gf.mode && this.ⲆΔⲆⵠ === bw.ᐃᐃΔⵠⲆᐃᐃ && Oh;
        this.ᐃⲆᐃΔⲆᐃΔ = !!this.ⵠⲆᐃᐃⲆ && this.ᐃⲆⲆΔ.ᐃΔⲆⵠΔ === "  " || Bh;
        this.ⵠⵠΔⲆᐃ = [];
        this.ⲆⵠᐃⲆⲆᐃⲆ = 0;
        this.ᐃΔⲆᐃ = tk;
        this.ᐃⵠᐃΔⲆᐃᐃ = Wh;
        this.ⲆΔΔᐃᐃΔΔ = 0;
        this.ᐃΔΔΔⲆ = [];
        this.r = {
          x: e,
          y: f
        };
        this.ᐃⵠⲆᐃ = Zu;
        this.Δⵠᐃᐃⵠⵠⵠ = Xu;
        this.ΔΔⲆⵠΔ = 0;
        this.ⵠⵠΔⲆΔ = Gd;
        this.ᐃᐃⲆΔⲆ = 0;
        this.ⲆⲆⵠΔⵠΔⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, 0, -Math.PI / Mr, 0.5, 1);
        this.ΔⵠⵠⲆⲆ = 0;
        this.ΔⵠᐃⲆΔᐃᐃ = 0;
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, 0, uh, 3);
        this.ΔⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, Jt, 5, Vl);
        this.freeze = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, 0, mh, 3);
        this.ΔⵠᐃⵠⲆⲆΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, 0.6, 0.6, 0, 5, 3);
        this.ΔⵠΔΔᐃᐃᐃ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(vr, 0, 2.25, -1.5, 3.75, 7.5);
        this.ΔΔⵠⲆᐃⵠᐃ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(true, rh, 7.5, -3, 22.5, 33.75);
        this.attack = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, Ko, -Math.PI / 3, 6, 9);
        this.ⵠᐃⲆΔΔΔⲆΔΔ = Ol;
        this.ΔᐃᐃⲆᐃΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, 0, Aj, Fh);
        this.ⲆⵠᐃⲆΔⲆΔ = this.ᐃⲆᐃΔⲆᐃΔ ? new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ha, ko, 2.25, -1.5, 2.75, 5.5) : Mn;
        this.ᐃᐃᐃᐃᐃᐃᐃ = 0;
        this.ⲆⵠⵠᐃⲆΔⲆ = 0;
        this.ΔΔⲆⲆⵠⵠⵠ = [];
        this.ᐃⲆᐃΔᐃⵠᐃ = [];
        this.text = [];
        this.label = [];
        this.ⲆⲆΔᐃⵠⵠΔ = $u;
        this.ᐃᐃⵠⵠᐃ = Xo;
        this.right = -js;
        this.ⵠⵠⲆΔᐃ = -jh;
        this.action = $v.IDLE;
        this.ⲆᐃⵠⵠⵠⲆⵠ = tq;
        this.ⵠΔⵠⲆᐃ = Fj;
        this.ⵠΔᐃᐃΔ = false;
        this.bubbles = [];
        this.ᐃΔᐃᐃⲆ = 0;
        this.ᐃⵠΔᐃΔ = -Aj;
        this.Ⲇᐃⵠ = function (a) {
          if (this.info & 32768) {
            this.ⲆᐃⵠⵠⵠⲆⵠ = pr;
            this.info = this.info & -32769;
          } else {
            this.ⲆᐃⵠⵠⵠⲆⵠ = gg;
          }
          if (this.info & 16384) {
            this.info = this.info & -16385;
            this.ᐃΔᐃᐃⲆ = 1;
          } else {
            this.ᐃΔᐃᐃⲆ = 0;
          }
          this.ⵠΔⵠⲆᐃ = Math.floor(this.info / 128);
          this.info -= this.ⵠΔⵠⲆᐃ * 128;
          if (this.info === Dr.ΔⲆⲆᐃᐃ || this.ᐃⲆᐃΔⲆᐃΔ) {
            this.right = -dn;
          } else {
            this.right = this.info;
          }
          this.ⲆⵠᐃⲆⲆᐃⲆ = gf.ΔᐃⲆⲆᐃⲆᐃⲆⵠ(Math.floor(this.r.y / 100), Math.floor(this.r.x / wr));
          this.ⵠⵠⲆΔᐃ = this.ᐃΔⲆⲆΔ & 255;
          if (this.right === bw.ⲆⵠΔⲆᐃⵠᐃⵠΔ) {
            this.ⵠΔᐃᐃΔ = wt;
          } else {
            this.ⵠΔᐃᐃΔ = false;
          }
          if (cw[this.right]) {
            this.ⵠΔΔⲆᐃ = vi;
          } else {
            this.ⵠΔΔⲆᐃ = false;
          }
          if (a & $v.ⲆΔⲆΔⵠᐃⵠ) {
            this.ΔᐃᐃⲆᐃΔⲆ.ᐃⲆΔ = Pq;
            this.ΔᐃᐃⲆᐃΔⲆ.ᐃⲆⵠ = 0.6;
          } else if (a & $v.ᐃΔΔΔⵠ) {
            this.freeze.ᐃⲆΔ = ue;
            this.freeze.ᐃⲆⵠ = 0.6;
          } else if (a & $v.ΔⲆᐃΔⵠᐃΔ) {
            this.ΔⵠⲆᐃⵠ.ᐃⲆΔ = Bj;
            this.ΔⵠⲆᐃⵠ.ᐃⲆⵠ = 0.6;
          }
          if (a & $v.ⲆΔⵠΔᐃΔⲆ) {
            this.ΔⵠᐃⵠⲆⲆΔ.ᐃⲆΔ = tq;
            this.ΔⵠᐃⵠⲆⲆΔ.ᐃⲆⵠ = 0.6;
          }
          if (a & $v.ᐃΔⵠⵠ) {
            this.ΔᐃⵠΔ.ᐃⲆΔ = Bg;
            this.ΔᐃⵠΔ.ᐃⲆⵠ = 0.6;
          }
          if (a & $v.ᐃᐃⲆᐃΔⵠΔ) {
            this.ⵠᐃⲆΔΔΔⲆΔΔ = aw.ΔⲆⵠⲆΔΔΔⲆΔ;
            if (Zw.ᐃⲆⵠΔⵠ && this.ᐃⵠΔᐃΔ !== -Eg) {
              Zw.ΔⲆᐃⵠ[this.ᐃⵠΔᐃΔ].ⵠⵠⲆΔⵠⵠΔⵠⲆ(Pw[this.right]);
            }
          }
        };
        this.Ⲇᐃⵠ();
        break;
      case ew.ᐃᐃᐃⵠᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, er, V, 0, 10, Fg),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ΔⵠΔᐃⵠ = Mp;
        this.ⵠⵠᐃⵠⲆ = mp;
        this.ΔⲆᐃⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(kk, js, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃⲆΔΔΔⲆ = 0;
        this.ⵠⲆᐃΔⵠⵠⵠ = jj;
        this.ⵠᐃΔᐃᐃ = Lm;
        break;
      case ew.ⲆΔᐃⲆⲆ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, 0, 10, 10),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ΔⵠΔᐃⵠ = Gp;
        this.ⵠⵠᐃⵠⲆ = ap;
        this.ΔⲆᐃⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, ce, 1.23, 1.18, 0.01, 0.01);
        this.ᐃᐃⲆΔΔΔⲆ = _s;
        this.ⵠⲆᐃΔⵠⵠⵠ = rh;
        break;
      case ew.ⵠᐃΔΔᐃ:
      case ew.Ⲇⵠᐃⵠᐃ:
        this.ΔⵠΔᐃⵠ = up;
        this.ⵠⵠᐃⵠⲆ = Bp;
        this.ΔⵠΔⵠᐃ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ue, 1, 1.03, 0.98, 0.3, 0.3);
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pk, jh, 1.23, 1.18, 0.01, 0.01);
        this.ΔⲆᐃⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Jn, bt, 1.23, 1.18, 0.01, 0.01);
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pa, ik, wg, xb, 10, oa),
          Ⲇᐃⵠ: false,
          angle: Dh
        };
        break;
      case ew.ΔΔΔᐃⲆ:
        this.ΔⵠΔᐃⵠ = Pp;
        this.ⵠⵠᐃⵠⲆ = hp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pq, Yt, 1, 0, 10, wh),
          Ⲇᐃⵠ: Bg,
          angle: 0
        };
        this.ⵠⵠⵠᐃ = [];
        for (var l = Lg; l < Fh; l++) {
          this.ⵠⵠⵠᐃ.push({
            ᐃⵠⲆᐃ: Ap,
            ⲆΔΔⲆ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(kk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠⵠᐃ[0].x = this.x - 16.5;
        this.ⵠⵠⵠᐃ[0].y = this.y - 15.5;
        this.ⵠⵠⵠᐃ[Lg].angle = this.angle;
        this.ⵠⵠⵠᐃ[Yt].x = this.x + 36;
        this.ⵠⵠⵠᐃ[bt].y = this.y + ok;
        this.ⵠⵠⵠᐃ[1].angle = this.angle;
        this.ⵠⵠⵠᐃ[C].x = this.x - 18.5;
        this.ⵠⵠⵠᐃ[2].y = this.y + 39;
        this.ⵠⵠⵠᐃ[Ok].angle = this.angle;
        break;
      case ew.ΔⵠᐃᐃΔ:
        this.ΔⵠΔᐃⵠ = Qu;
        this.ⵠⵠᐃⵠⲆ = sp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, Ur, 0, 10, eg),
          Ⲇᐃⵠ: false,
          angle: ko
        };
        this.ⵠⵠⵠᐃ = [];
        for (l = 0; l < 3; l++) {
          this.ⵠⵠⵠᐃ.push({
            ᐃⵠⲆᐃ: Wp,
            ⲆΔΔⲆ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        this.ⵠⵠⵠᐃ[Kr].x = this.x - 16.5;
        this.ⵠⵠⵠᐃ[Ko].y = this.y - 15.5;
        this.ⵠⵠⵠᐃ[ub].x = this.x - 5.5;
        this.ⵠⵠⵠᐃ[1].y = this.y + 7.5;
        this.ⵠⵠⵠᐃ[2].x = this.x + 18;
        this.ⵠⵠⵠᐃ[2].y = this.y - uh;
        break;
      case ew.ⵠΔⵠΔΔ:
        this.ᐃⵠⲆᐃ = Sp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(fl, 0.6, 0.6, Dh, mh, 3);
        break;
      case ew.ⵠᐃᐃⲆⲆ:
        this.ᐃⵠⲆᐃ = Ep;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(sr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.6, 0.6, xb, pl, 3);
        break;
      case ew.ᐃᐃΔⵠᐃ:
        this.ᐃⵠⲆᐃ = pp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃᐃᐃᐃΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Zh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔⲆⲆⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(kk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, Kr, 5, _i);
        this.ΔⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bj, 0.6, 0.6, xb, 5, Gg);
        break;
      case ew.ΔⵠΔᐃⲆ:
        this.ᐃⵠⲆᐃ = wp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ⵠⵠᐃᐃᐃᐃΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ᐃᐃΔⲆⲆⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, $t, 5, _i);
        this.ΔⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, Lu, Cj, 3);
        break;
      case ew.ⲆⵠⲆⵠᐃ:
        this.ᐃⵠⲆᐃ = Tu;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(kk, 0.6, 0.6, jj, 5, _i);
        break;
      case ew.ΔΔᐃⵠᐃ:
        this.ᐃⵠⲆᐃ = gp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Jn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, Fj, 5, _i);
        break;
      case ew.ᐃᐃⵠᐃᐃ:
        this.ΔⲆⲆⵠᐃ = this.info & 15;
        this.ⲆΔΔᐃᐃΔΔ = this.ᐃΔⲆⲆΔ & Aj;
        this.ⵠᐃⲆⵠⵠΔⵠ = 0;
        this.x = this.info;
        this.y = this.ᐃΔⲆⲆΔ;
        this.ᐃⵠⲆᐃ = Np;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
        break;
      case ew.ⵠⵠΔⵠᐃ:
      case ew.ΔΔΔⵠᐃ:
      case ew.ⵠᐃᐃΔΔ:
      case ew.ΔⵠⵠⵠΔ:
      case ew.ⲆᐃⲆΔΔ:
      case ew.ⲆⵠᐃⲆⵠ:
      case ew.ⲆΔΔΔΔ:
      case ew.ᐃⲆᐃᐃΔ:
      case ew.ΔΔⲆΔᐃ:
        this.ᐃⵠⲆᐃ = gp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, rh, 5, Ik);
        break;
      case ew.ᐃᐃⵠΔΔ:
        this.ᐃⵠⲆᐃ = Ru;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bg, 1, Cs, 0, rk, 10),
          Ⲇᐃⵠ: M,
          angle: 0
        };
        break;
      case ew.ⵠⲆⵠⵠᐃ:
        this.ⵠⵠᐃⵠⲆ = Vp;
        this.ᐃⵠⲆᐃ = bp;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, 0, 10, Hr),
          Ⲇᐃⵠ: false,
          angle: Jt
        };
        this.up = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Aj, 1.03, 0.98, 0.1, 0.1);
        this.ⵠⲆⵠⲆᐃ = [];
        break;
      case ew.ᐃⲆᐃΔΔ:
        this.angle = Math.PI * Math.random() / 2;
      case ew.ⵠⲆᐃⵠⲆ:
      case ew.ΔΔⲆΔΔΔⵠ:
        this.ᐃⵠⲆᐃ = kp;
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.6, 0.6, Kr, cd, fa);
        break;
      case ew.ᐃⵠΔⲆⵠ:
        this.ᐃⵠⲆᐃ = dp;
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pa, 0.6, 0.6, kq, Cj, 3);
        break;
      case ew.Δⵠᐃⵠᐃ:
        this.scale = Yt;
        this.ᐃⵠⲆᐃ = Fp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(bs, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, tr, _s, -Math.PI / 6, 0.5, Fo);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, 0.6, 0.6, 0, Gl, ta);
        break;
      case ew.ⲆⲆᐃⵠΔΔᐃ:
        this.ΔᐃⲆΔᐃ = 0;
        this.ⵠⲆᐃⵠ = [];
        this.ⲆᐃΔⵠᐃⵠΔ = $t;
        this.ᐃᐃⵠᐃΔΔⵠ = Su;
        this.ᐃⵠⲆᐃ = _p;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, $t, 0, -Math.PI / 6, 0.5, wg);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, 0, cd, 3);
        break;
      case ew.ⲆΔΔᐃΔ:
        this.x = this.info;
        this.y = this.ᐃΔⲆⲆΔ;
        this.scale = 1;
        this.ᐃΔⲆΔ = 0;
        this.ᐃⵠⲆᐃ = Cp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(M, _s, Lu, -Math.PI / 6, 0.5, 1);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bg, 0.6, 0.6, 0, Th, Kk);
        break;
      case ew.ΔⵠΔΔᐃ:
        this.x = this.info;
        this.y = this.ᐃΔⲆⲆΔ;
        this.scale = 1;
        this.ᐃΔⲆΔ = 0;
        this.ᐃⵠⲆᐃ = lp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, xb, -Math.PI / H, 0.5, dn);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, Dh, gs, Gg);
        break;
      case ew.ⵠⲆᐃⲆⵠ:
        this.scale = sd;
        this.ᐃⵠⲆᐃ = Jp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Mn, 0, -Math.PI / 6, 0.5, wg);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 0.6, 0, 5, nh);
        break;
      case ew.ⲆΔⵠⵠⵠ:
        this.scale = jh;
        this.ᐃⵠⲆᐃ = zp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Fj, 0, -Math.PI / 6, 0.5, Fo);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Zh, 0.6, 0.6, 0, 5, B);
        break;
      case ew.ᐃΔᐃᐃΔ:
        this.scale = dn;
        this.ᐃⵠⲆᐃ = Qp;
        this.ⲆΔΔⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
        this.rotate = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, 0, -Math.PI / ss, 0.5, 1);
        this.ΔᐃⵠΔ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.6, 0.6, 0, Bk, 3);
        break;
      case ew.ⲆⵠⲆΔⲆ:
        this.ⵠⵠⵠᐃ = [];
        for (l = 0; l < Oq; l++) {
          this.ⵠⵠⵠᐃ.push({
            ᐃⵠⲆᐃ: Wp,
            ⲆΔΔⲆ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
          });
        }
        switch (this.id % 3) {
          case 0:
            this.ⵠⵠⵠᐃ[0].x = this.x - 20.5;
            this.ⵠⵠⵠᐃ[Ol].y = this.y - 22.5;
            this.ⵠⵠⵠᐃ[Cs].x = this.x - 35.5;
            this.ⵠⵠⵠᐃ[1].y = this.y + 7.5;
            this.ⵠⵠⵠᐃ[2].x = this.x + 7.5;
            this.ⵠⵠⵠᐃ[$r].y = this.y - 30;
            this.ⵠⵠⵠᐃ[3].x = this.x + 22.5;
            this.ⵠⵠⵠᐃ[Gg].y = this.y;
            this.ⵠⵠⵠᐃ[jt].x = this.x - 7.5;
            this.ⵠⵠⵠᐃ[qo].y = this.y + 14.5;
            break;
          case wg:
            this.ⵠⵠⵠᐃ[Ol].x = this.x - 30.5;
            this.ⵠⵠⵠᐃ[xb].y = this.y - 22.5;
            this.ⵠⵠⵠᐃ[dn].x = this.x - 15.5;
            this.ⵠⵠⵠᐃ[Yt].y = this.y + 7.5;
            this.ⵠⵠⵠᐃ[Le].x = this.x + 15.5;
            this.ⵠⵠⵠᐃ[2].y = this.y - 30;
            this.ⵠⵠⵠᐃ[3].x = this.x + 12.5;
            this.ⵠⵠⵠᐃ[ta].y = this.y + Th;
            this.ⵠⵠⵠᐃ[kr].x = this.x - 40.5;
            this.ⵠⵠⵠᐃ[4].y = this.y + 14.5;
            break;
          case Xn:
            this.ⵠⵠⵠᐃ[Lg].x = this.x - 20.5;
            this.ⵠⵠⵠᐃ[Lu].y = this.y - 20.5;
            this.ⵠⵠⵠᐃ[1].x = this.x - 35.5;
            this.ⵠⵠⵠᐃ[yl].y = this.y + 15.5;
            this.ⵠⵠⵠᐃ[tg].x = this.x + 7.5;
            this.ⵠⵠⵠᐃ[2].y = this.y - Ug;
            this.ⵠⵠⵠᐃ[3].x = this.x + 22.5;
            this.ⵠⵠⵠᐃ[3].y = this.y + lt;
            this.ⵠⵠⵠᐃ[qo].x = this.x - 7.5;
            this.ⵠⵠⵠᐃ[Yn].y = this.y + 1.5;
        }
        break;
      case ew.ΔΔⲆᐃᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(bs, 1, Fo, 0, zq, ll),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ᐃⵠⲆᐃ = fp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0.9, 1.05, 0.9, 0.2, 0.2);
        this.ᐃⵠΔᐃⵠⲆⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
        break;
      case ew.ⵠᐃⵠⲆᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, ub, Eg, _s, zq, 10),
          Ⲇᐃⵠ: false,
          angle: Wh
        };
        this.ᐃⵠⲆᐃ = Rp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(bs, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ⵠΔⵠⲆΔ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, V, 0, 10, 10),
          Ⲇᐃⵠ: tq,
          angle: 0
        };
        this.ᐃⵠⲆᐃ = $p;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ᐃΔⲆⲆᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bh, Ur, 1, 0, 10, 10),
          Ⲇᐃⵠ: M,
          angle: 0
        };
        this.ᐃⵠⲆᐃ = Op;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ⵠⵠⵠⲆΔ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Jn, 1, 1, jj, 10, 10),
          Ⲇᐃⵠ: ue,
          angle: 0
        };
        this.ᐃⵠⲆᐃ = qp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pq, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ᐃΔⵠᐃᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bg, ik, V, Ol, Pr, lj),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ᐃⵠⲆᐃ = yp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ⲆΔⲆΔᐃ:
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, bt, 0, 10, Dl),
          Ⲇᐃⵠ: false,
          angle: jj
        };
        this.ᐃⵠⲆᐃ = Ip;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bh, 0.9, 1.05, 0.9, 0.2, 0.2);
        break;
      case ew.ⵠⵠⲆᐃᐃ:
        this.ᐃⵠⲆᐃ = vp;
        this.rotate = 0;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ue, 1, Ur, 0, Hr, 10),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        break;
      case ew.ᐃⲆΔᐃΔ:
        this.ᐃⵠⲆᐃ = Hp;
        this.rotate = Jt;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, tr, 10, 10),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        break;
      case ew.ⵠⲆⲆᐃᐃ:
        this.ᐃⵠⲆᐃ = jp;
        this.rotate = Lu;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(sr, 1, jh, tr, Fn, ft),
          Ⲇᐃⵠ: sr,
          angle: ko
        };
        break;
      case ew.ΔᐃΔⵠᐃ:
        this.ᐃⵠⲆᐃ = Tp;
        this.rotate = 0;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, Yt, Mn, ll, Pr),
          Ⲇᐃⵠ: false,
          angle: Jt
        };
        break;
      case ew.ⵠΔΔᐃⲆ:
        this.ᐃⵠⲆᐃ = cp;
        this.rotate = 0;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(sr, Ud, yl, Wh, eg, 10),
          Ⲇᐃⵠ: kk,
          angle: 0
        };
        break;
      case ew.ᐃⲆΔⵠⵠ:
        this.ΔⵠΔᐃⵠ = Up;
        this.ⵠⵠᐃⵠⲆ = Zp;
        this.rotate = Mn;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, ik, 1, xb, 10, 10),
          Ⲇᐃⵠ: Bh,
          angle: Kr
        };
        break;
      case ew.ⲆΔⵠⲆΔ:
        this.ᐃⵠⲆᐃ = Ym;
        this.Δⵠᐃⵠ = Math.floor(this.x / 100);
        this.ᐃᐃ = Math.floor(this.y / Kn);
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, Ud, 0, Bq, 10),
          Ⲇᐃⵠ: Pq,
          angle: 0
        };
        this.opacity = js;
        this.ⵠᐃΔᐃᐃ = Fm;
        break;
      case ew.ᐃⵠⲆᐃⵠ:
        this.ᐃⵠⲆᐃ = _m;
        this.ΔⲆᐃⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ys, ik, 1.15, Yt, 0.3, 0.3);
        this.color = Gd;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(fl, 1, 1, 0, 10, bb),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        break;
      case ew.ΔⵠΔΔⲆ:
      case ew.ᐃⵠΔⲆᐃ:
      case ew.ᐃΔΔᐃⵠ:
      case ew.ᐃΔΔΔΔ:
      case ew.ⵠⵠⲆΔΔ:
        this.ᐃⵠⲆᐃ = tp;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ue, 1, 1, 0, hl, 10),
          Ⲇᐃⵠ: sr,
          angle: ko
        };
        break;
      case ew.ᐃⲆΔⲆⲆ:
        this.ᐃⵠⲆᐃ = tp;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(sr, Ur, 1, Lg, Ke, 10),
          Ⲇᐃⵠ: M,
          angle: 0
        };
        this.ⵠᐃΔᐃᐃ = Fm;
        break;
      case ew.ᐃⲆⲆⲆᐃ:
      case ew.ⲆⲆΔⵠⵠ:
      case ew.ᐃⵠⵠΔⵠ:
      case ew.ⲆⲆᐃⲆΔ:
      case ew.ΔⲆᐃⲆⵠ:
      case ew.ⲆⲆᐃⲆᐃ:
      case ew.ᐃΔⲆᐃᐃ:
      case ew.Ⲇᐃⵠⵠⵠ:
      case ew.ⲆΔⲆᐃᐃ:
      case ew.ᐃᐃᐃΔⵠ:
      case ew.ᐃᐃᐃᐃⵠ:
      case ew.ᐃᐃⵠΔⵠ:
        this.ᐃⵠⲆᐃ = tp;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ys, 1, bt, Fj, Ke, 10),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ⵠᐃΔᐃᐃ = Lm;
        break;
      case ew.ⵠᐃⲆⵠᐃ:
        this.ᐃⵠⲆᐃ = np;
        this.opacity = Ud;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(bs, js, 1, tr, 10, bb),
          Ⲇᐃⵠ: false,
          angle: Gd
        };
        var m = this.angle % (Math.PI / C);
        if (m < Math.PI / 4) {
          this.angle -= m;
        } else {
          this.angle += Math.PI / C - m;
        }
        break;
      case ew.ᐃΔⲆᐃⵠ:
        this.ᐃⵠⲆᐃ = Um;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case ew.ᐃΔⲆⵠΔⵠⵠ:
        this.ᐃⵠⲆᐃ = Nm;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case ew.ΔᐃᐃⲆⵠⵠⲆ:
        this.ᐃⵠⲆᐃ = Om;
        this.angle = Math.random() * Math.PI * 2;
        break;
      case ew.ᐃᐃⵠⲆⲆⵠⲆ:
        this.ᐃⵠⲆᐃ = Zm;
        this.angle = Xn * (Math.PI * Math.random());
        break;
      case ew.ᐃᐃᐃΔΔΔᐃ:
        this.ᐃⵠⲆᐃ = Km;
        this.angle = Math.random() * Math.PI * C;
        break;
      case ew.ⲆΔΔⲆⵠ:
        this.Ⲇᐃⵠ = function (a) {
          this.lock = this.info & 8192 ? 1 : ko;
          this.info = this.info & 8191;
          this.action = a;
        };
        this.ᐃⵠⲆᐃ = Wm;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ys, 1, 1, ko, 10, ll),
          Ⲇᐃⵠ: v,
          angle: 0
        };
        this.lock = 0;
        this.Ⲇᐃⵠ(this.action);
        break;
      case ew.ᐃⵠᐃΔⲆ:
      case ew.ᐃⵠⲆⵠⵠ:
      case ew.ⵠΔⲆⵠᐃ:
      case ew.ΔⵠⲆⵠΔ:
      case ew.ΔⵠⲆⵠⲆ:
      case ew.ⲆΔⵠⵠᐃ:
      case ew.ⵠⵠΔⲆⲆ:
      case ew.ΔΔΔΔⲆ:
      case ew.ᐃᐃⲆᐃⲆ:
      case ew.ᐃⵠᐃⲆΔ:
      case ew.ΔΔⵠᐃⲆ:
      case ew.ⲆⲆΔᐃⲆ:
        this.ᐃⵠⲆᐃ = $m;
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, js, $t, Bq, 10),
          Ⲇᐃⵠ: false,
          angle: 0
        };
        this.ⵠᐃΔᐃᐃ = Lm;
        break;
      case ew.ⲆⵠᐃᐃⲆ:
        this.ΔⵠΔᐃⵠ = Xp;
        this.ᐃⵠⲆᐃ = Yp;
        this.ⵠⵠᐃⵠⲆ = xp;
        this.ⵠⲆᐃⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(M, Fo, 1.23, 1.18, 0.02, 0.02);
        this.ΔⲆᐃⵠⲆ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, ik, 1.23, 1.18, 0.04, 0.04);
        this.ΔᐃⵠΔ = {
          Δⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(v, 1, sd, Wh, 10, 10),
          Ⲇᐃⵠ: false,
          angle: Ol
        };
        this.Ⲇᐃⵠ = function (a) {
          this.action = a;
        };
    }
  }
  function iw(b, c, d, e, f, i) {
    const j = ((b + 16631) * 214013 + 2531011) % 4294967296;
    const a = ((c + 38140) * 2147483629 + 2147483587) % 2147483647;
    const k = ~(d & 9232) & 9232 | ~(d & 9232) & d;
    const h = e ^ 59044;
    const l = (0 << (i >> 16 & 255)) + (8 << (i & 255)) + (Gn << (i >> 24 & 255)) + (24 << (i >> 8 & 255));
    const g = of(j, a, k, h, (X << (f >> 16 & 255)) + (0 << (f >> 8 & 255)) + (24 << (f >> 24 & 255)) + (16 << (f & 255)));
    of(l, j, a, k, h);
    return (g | 29500) & ~(g & 29500);
  }
  function jw(j) {
    function e(b, c, d, e, f) {
      for (var g = Jt; g < f && bt !== k(b, c, d, e, Ss); g++);
      if (f === g) {
        return 0;
      } else {
        return 1;
      }
    }
    function k(c, d, e, f, i) {
      var j = d + Math.floor(gf.ΔⲆⵠⲆΔ.get() * f);
      var k = e + Math.floor(f * gf.ΔⲆⵠⲆΔ.get());
      var a = 10 + Math.floor((gf.ᐃᐃΔΔⲆ - j - _j) * gf.ΔⲆⵠⲆΔ.get());
      var m = Fg + Math.floor((gf.ΔᐃⲆΔⲆ - k - 20) * gf.ΔⲆⵠⲆΔ.get());
      var h = a + j;
      var l = m + k;
      for (var g = 0; gf.ΔⲆⵠΔ.length > g; g++) {
        var n = gf.ΔⲆⵠΔ[g];
        if (ⵠⵠⵠⲆ.ᐃΔΔᐃΔⵠΔ(a, h, m, l, n.x1 / Kn - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
          return 0;
        }
      }
      gf.ΔⲆⵠΔ.push(new gf.ⵠᐃⲆⵠⵠⵠⲆ(c, a, m, j, k, 15));
      return 1;
    }
    function i(a, b, c) {
      var d = b;
      for (var e = c; e < gf.ΔᐃⲆΔⲆ; e++) {
        for (var f = b; gf.ᐃᐃΔΔⲆ > f && (e === c && (d = Math.max(f, d)), d >= f) && a[e][f] !== 1; f++) {
          a[e][f] = sd;
        }
        if (d > f) {
          break;
        }
      }
      gf.ΔⲆⵠΔ.push(new gf.ⵠᐃⲆⵠⵠⵠⲆ(gf.ΔⵠΔⵠΔ, b, c, d - b + dn, e - c, 15));
    }
    function n(f, j, k, m, n, o, p, a) {
      var q = Math.floor(p / 2);
      var h = Math.max(1, Math.floor(p / 2));
      var l = Math.floor(a / _t);
      var g = Math.max(js, Math.floor(a / 2));
      for (var b = 0; b < k; b++) {
        for (var r = f - l; r < f + g; r++) {
          for (var s = j - q; s < j + h; s++) {
            if (x(r, s, "wtb", Gd, Yt) === 1) {
              o.push([r, s, 1]);
            }
          }
        }
        f += m;
        j += n;
      }
    }
    function o(f, e) {
      var i = gf.ΔⲆⵠΔ[f];
      var j = Math.floor(i.y1 / Bl);
      var k = Math.floor(i.x1 / 100);
      var o = Math.floor(i.ᐃⵠⲆ / 100);
      var a = k + (A = Math.floor(i.w / Bl));
      var q = xl;
      var r = o;
      var s = j;
      for (var t = k + 10 + Math.floor(gf.ΔⲆⵠⲆΔ.get() * (A - 20)), u = t - 4; t + kr > u; u++) {
        x(j - ce, u, "wtb", Lg, 1);
      }
      while (r > jj) {
        if (q !== Wq) {
          if (Ke > r) {
            for (B = Fo; Ol < r; B++) {
              n(s, t, ub, 1, yk, e, B, 1);
              r -= Fo;
              s += 1;
            }
          } else if (q !== sd) {
            q = Ud;
            var w = Math.floor(1 + gf.ΔⲆⵠⲆΔ.get() * 2);
            var y = 1 + Math.floor(gf.ΔⲆⵠⲆΔ.get() * 4);
            if (k + Sq > t) {
              n(s, t, w, tr, 1, e, y, y);
              t += w;
            } else if (t > a - 16) {
              n(s, t, w, Jt, -Ud, e, y, y);
              t -= w;
            } else if (gf.ΔⲆⵠⲆΔ.get() > 0.5) {
              n(s, t, w, ko, 1, e, y, y);
              t += w;
            } else {
              n(s, t, w, tr, -ub, e, y, y);
              t -= w;
            }
          } else {
            var z = Math.min(r, Math.floor(Aj + gf.ΔⲆⵠⲆΔ.get() * 4));
            var A = 1 + Math.floor(gf.ΔⲆⵠⲆΔ.get() * 4);
            n(s, t, z, sd, 0, e, A, A);
            q = Gd;
            r -= z;
            s += z;
          }
        } else {
          for (var B = 10; Yt < B; B--) {
            n(s, t, 1, Ud, Wh, e, B, 1);
            r -= 1;
            s += js;
          }
          q = 0;
        }
      }
      for (u = t - sd; t + 2 > u; u++) {
        x(s, u, "wtb", xb, ce);
      }
    }
    function p(b, c) {
      for (var d = 0; c.length > d; d++) {
        a(c[d][Ko], c[d][wg], b, c[d][Ok]);
      }
    }
    function a(a, b, c, d) {
      if (r(a, b) && (ⲆⲆⲆᐃ = Uw.ⲆⲆⲆᐃ, Nl === ⲆⲆⲆᐃ[a][b] && (ⲆⲆⲆᐃ[a][b] = {}), ⲆⲆⲆᐃ[a][b].r === undefined)) {
        var e = xb;
        if (r(a - yl, b) && ⲆⲆⲆᐃ[a - Aj][b] !== jr && Qi !== ⲆⲆⲆᐃ[a - wg][b].wtb) {
          e += xl;
        }
        if (r(a, b - 1) && ⲆⲆⲆᐃ[a][b - 1] !== undefined && ⲆⲆⲆᐃ[a][b - 1].wtb !== undefined) {
          e += Sl;
        }
        if (r(a, b + 1) && ⲆⲆⲆᐃ[a][b + 1] !== undefined && ⲆⲆⲆᐃ[a][b + ce].wtb !== undefined) {
          e += Fa;
        }
        if (r(a + Yt, b) && ⲆⲆⲆᐃ[a + 1][b] !== undefined && lq !== ⲆⲆⲆᐃ[a + Cs][b].wtb) {
          e += 64;
        }
        if (r(a - 1, b - bt) && (e & db + 2) === 8 + xl && ⲆⲆⲆᐃ[a - Aj][b - js] !== Qi && Lk !== ⲆⲆⲆᐃ[a - ub][b - Fo].wtb) {
          e += 1;
        }
        if (r(a - 1, b + 1) && (e & Sa + 2) == 18 && ⲆⲆⲆᐃ[a - js][b + bt] !== Lk && ⲆⲆⲆᐃ[a - 1][b + Cs].wtb !== undefined) {
          e += 4;
        }
        if (r(a + 1, b - 1) && (e & 72) === ea + 64 && kj !== ⲆⲆⲆᐃ[a + 1][b - js] && ⲆⲆⲆᐃ[a + js][b - 1].wtb !== undefined) {
          e += 32;
        }
        if (r(a + 1, b + bt) && (e & qh + 64) == 80 && ⲆⲆⲆᐃ[a + wg][b + 1] !== undefined && ⲆⲆⲆᐃ[a + 1][b + Fo].wtb !== undefined) {
          e += 128;
        }
        ⲆⲆⲆᐃ[a][b].r = {};
        ⲆⲆⲆᐃ[a][b].r.ⲆΔⵠⵠᐃΔᐃ = e;
        ⲆⲆⲆᐃ[a][b].r.ΔᐃⲆⲆⲆⵠᐃ = d;
        ⲆⲆⲆᐃ[a][b].r.ΔⲆⲆⲆ = gf.Δⵠᐃᐃⵠ(c, sg * b + 50, a * 100 + 50) - 400;
        ⲆⲆⲆᐃ[a][b].r.x = b * rs + 50;
        ⲆⲆⲆᐃ[a][b].r.y = sg * a + 50;
      }
    }
    function q(a, b) {
      for (var e = 0; e < 3; e++) {
        c(a, "s", e, Math.floor(b * xh));
      }
      for (e = 0; e < 3; e++) {
        c(a, "f", e, Math.floor(b * 24));
      }
      for (e = 0; e < fa; e++) {
        c(a, "d", e, Math.max(1, Math.floor(b * 2)), 0.3);
      }
      for (e = Mn; Vl > e; e++) {
        c(a, "g", e, Math.floor(b * hi));
      }
      d(a);
    }
    function h(a) {
      for (var b = 0; b < Mo; b++) {
        c(a, "s", b, nk);
      }
      for (b = rh; b < 3; b++) {
        c(a, "a", b, er);
      }
      for (b = Ko; B > b; b++) {
        c(a, "d", b, 1);
      }
      d(a);
    }
    function l(a, b) {
      for (var e = 0; e < 6; e++) {
        c(a, "t", e, Math.floor(b * 20));
      }
      for (e = 0; e < 4; e++) {
        c(a, "b", e, Math.floor(b * 20));
      }
      for (e = Mn; e < Vl; e++) {
        c(a, "s", e, Math.floor(b * 20));
      }
      var f = [];
      o(a, f);
      p(a, f);
      f = [];
      c(a, "p", Ko, Math.floor(b * 24));
      for (e = 0; e < 3; e++) {
        c(a, "g", e, Math.floor(mh * b));
      }
      if (bw.ⲆᐃᐃΔⵠ === gf.mode) {
        for (e = Dh; e < 3; e++) {
          c(a, "d", e, Math.floor(b * B));
        }
        for (e = 0; e < 3; e++) {
          c(a, "a", e, Math.floor(b * 2));
        }
      }
      d(a);
    }
    function x(a, b, c, d, e) {
      if (a >= Wh && b >= 0 && gf.ΔᐃⲆΔⲆ > a && gf.ᐃᐃΔΔⲆ > b) {
        ⲆⲆⲆᐃ = Uw.ⲆⲆⲆᐃ;
        if (ⲆⲆⲆᐃ[a][b] === Z) {
          ⲆⲆⲆᐃ[a][b] = {};
        }
        if (ⲆⲆⲆᐃ[a][b][c] !== vl) {
          return yk;
        } else {
          ⲆⲆⲆᐃ[a][b][c] = [];
          ⲆⲆⲆᐃ[a][b][c][d] = [{
            x: b * 100 + 50,
            y: a * Kn + 50
          }];
          if (e === Ud) {
            (function (a, b, c, d) {
              Ht.push([a, b, c, d]);
            })(c, d, a, b);
          }
          return 1;
        }
      }
    }
    function g(a, b) {
      for (var e = rh; e < 6; e++) {
        c(a, "t", e, Math.floor(b * 80));
      }
      for (e = 0; e < 4; e++) {
        c(a, "b", e, Math.floor(b * 80));
      }
      for (e = 0; B > e; e++) {
        c(a, "s", e, Math.floor(b * 50));
      }
      var f = [];
      for (e = Lu; e < _h; e++) {
        o(a, f);
      }
      p(a, f);
      f = [];
      c(a, "p", Kr, Math.floor(b * 28));
      for (e = 0; e < vo; e++) {
        c(a, "g", e, Math.floor(b * 7));
      }
      for (e = 0; e < 3; e++) {
        c(a, "d", e, Math.floor(b * 2));
      }
      for (e = 0; e < Kk; e++) {
        c(a, "a", e, Math.floor(Ur * b));
      }
      for (e = 0; e < 3; e++) {
        c(a, "m", e, Math.floor(b * 1));
      }
      c(a, "a", 0, Math.floor(b * wg));
      d(a);
    }
    function b(a, b) {
      (function (c, d) {
        var e = gf.ΔⲆⵠΔ[d];
        for (var f = 0, i = xb; i < c && f < 10000; f++) {
          var j = e.y1 + e.ᐃⵠⲆ * gf.ΔⲆⵠⲆΔ.get();
          var k = e.x1 + gf.ΔⲆⵠⲆΔ.get() * e.w;
          var m = Math.floor(j / 100);
          var p = Math.floor(k / Dq);
          if (gf.Δⵠᐃᐃⵠ(d, p * 100 + 50, m * Lh + 50) >= 600) {
            for (var q = 1, t = m - bn; q === 1 && m + 4 >= t; t++) {
              for (var u = p - 4; q === Ur && p + bn >= u; u++) {
                if (Uw.ⲆⲆⲆᐃ[t][u] !== undefined) {
                  q = kq;
                }
              }
            }
            if (Ol !== q) {
              x(m, p, "la", i % _h, 0);
              i++;
            }
          }
        }
      })(b * 80, a);
      for (var e = 0; e < Za; e++) {
        c(a, "s", e, Math.floor(b * 12));
      }
      for (e = Mn; e < 3; e++) {
        c(a, "g", e, Math.floor(b * 6));
      }
      for (e = 0; Ea > e; e++) {
        c(a, "re", e, Math.max(bt, Math.floor(b * 1)), 0.2);
      }
      for (e = _s; e < Ik; e++) {
        c(a, "a", e, Math.max(1, Math.floor(b * 2)));
      }
      d(a);
    }
    function r(a, b) {
      return a >= Kr && b >= 0 && a < gf.ΔᐃⲆΔⲆ && b < gf.ᐃᐃΔΔⲆ;
    }
    function d(a) {
      var b = gf.ΔⲆⵠΔ[a];
      x(-3 + Math.floor(b.y2 / Yi), -V + Math.floor(b.x2 / 100), "s", Kr, 0);
      x(Fh + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / Kn), "s", Lu, xb);
      x(-3 + Math.floor(b.y2 / Qk), jh + Math.floor(b.x1 / Oj), "s", kq, 0);
      x(fa + Math.floor(b.y1 / Dq), dn + Math.floor(b.x1 / Er), "s", 0, 0);
    }
    function c(f, e, i, j, k) {
      var n = gf.ΔⲆⵠΔ[f];
      var p = Math.floor(n.x1 / 100);
      var q = Math.floor(n.y1 / sg);
      var r = Math.floor(n.w / 100);
      var t = Math.floor(n.ᐃⵠⲆ / 100);
      if (Lk !== k) {
        k = V - k;
        p += Math.floor(r * k / 2);
        q += Math.floor(k * t / 2);
        r -= Math.floor(r * k);
        t -= Math.floor(t * k);
      }
      var u = Uw.ⲆⲆⲆᐃ;
      for (var g = 0, w = 0; j > g && w <= 50000; w++) {
        var y = q + Math.floor(gf.ΔⲆⵠⲆΔ.get() * t);
        var z = p + Math.floor(r * gf.ΔⲆⵠⲆΔ.get());
        if (gf.Δⵠᐃᐃⵠ(f, z * 100 + 50, y * Er + 50) >= 400 && ((A = u[y][z + 1]) === undefined || A[e] === undefined || A[e][i] === vl) && ((A = u[y][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = u[y + 1][z]) === Qi || A[e] === us || A[e][i] === undefined) && ((A = u[y - Ur][z]) === undefined || A[e] === gh || A[e][i] === undefined) && ((A = u[y + jh][z - 1]) === undefined || li === A[e] || A[e][i] === undefined) && ((A = u[y - Fo][z + bt]) === undefined || A[e] === undefined || A[e][i] === undefined)) {
          var A = u[y + 1][z + 1];
          if (lq === A || A[e] === Hh || kj === A[e][i]) {
            if ((A = u[y - 1][z - jh]) === vl || gh === A[e] || Tg === A[e][i]) {
              if (u[y][z] === undefined) {
                x(y, z, e, i, 1);
                g++;
              }
            }
          }
        }
      }
    }
    function s(a, b) {
      for (var d = Dh; d < 3; d++) {
        c(a, "s", d, Math.floor(b * pk));
      }
      for (d = Ol; d < Za; d++) {
        c(a, "m", d, Math.max(1, Math.floor(b * 1)), 0.2);
      }
      c(a, "c", $t, Math.floor(b * 36));
      var e = [];
      (function (c, d) {
        var e = gf.ΔⲆⵠΔ[c];
        var f = Math.floor(e.y1 / fh);
        var i = Math.floor(e.x1 / dg);
        var j = Math.floor(e.ᐃⵠⲆ / Zr);
        var k = Math.floor(e.w / Kn);
        var a = f + Math.floor(j / 2);
        var m = i + Math.floor(k / 2);
        for (var h = 0; h < 3; h++) {
          x(n = Math.floor(a - 3 + gf.ΔⲆⵠⲆΔ.get() * 6), o = Math.floor(m - 3 + gf.ΔⲆⵠⲆΔ.get() * 6), "plm", h, ce);
        }
        for (h = rh; h < 80; h++) {
          var n;
          var o;
          if (x(n = Math.floor(a - 3 + gf.ΔⲆⵠⲆΔ.get() * 6), o = Math.floor(m - 3 + _h * gf.ΔⲆⵠⲆΔ.get()), "wtb", tr, bt) === yl) {
            d.push([n, o, 0]);
          }
        }
      })(a, e);
      p(a, e);
      e = [];
    }
    function m(a, b, c) {
      if (a[b]) {
        for (Sk = rh; a[b].length > Sk; Sk++) {
          if (a[b][Sk]) {
            for (ⵠΔⲆΔ = 0; ⵠΔⲆΔ < a[b][Sk].length; ⵠΔⲆΔ++) {
              a[b][Sk][ⵠΔⲆΔ].ΔᐃⵠΔ = c;
              a[b][Sk][ⵠΔⲆΔ].Ⲇᐃⵠ = false;
              a[b][Sk][ⵠΔⲆΔ].time = 0;
              a[b][Sk][ⵠΔⲆΔ].angle = Fj;
            }
          }
        }
      }
    }
    this.mode = bw.ⲆᐃⵠΔΔ;
    this.ΔᐃᐃⲆⵠⲆⵠ = j;
    this.ⲆΔᐃᐃⵠ = 0;
    this.ᐃᐃΔⵠⲆⵠⲆ = Vo;
    this.ΔⲆᐃⵠ = [];
    this.ⵠᐃΔ = [];
    this.ⵠᐃΔ[ew.ⲆΔⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆⵠⲆΔⲆ] = [];
    this.ⵠᐃΔ[ew.ⵠⵠΔⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ΔΔΔⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ΔⵠΔᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ⵠᐃᐃⲆⲆ] = [];
    this.ⵠᐃΔ[ew.ⵠΔⵠΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃΔⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆΔⵠⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ⵠⲆᐃⲆⵠ] = [];
    this.ⵠᐃΔ[ew.ΔⵠΔΔᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆΔΔΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆᐃᐃΔ] = [];
    this.ⵠᐃΔ[ew.ΔⵠⵠⵠΔ] = [];
    this.ⵠᐃΔ[ew.ΔΔⲆΔᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ΔΔᐃⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆᐃⲆΔΔ] = [];
    this.ⵠᐃΔ[ew.ⲆⵠᐃⲆⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ] = [];
    this.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆⵠⲆⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃΔⲆᐃⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃΔⲆⵠΔⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ΔᐃᐃⲆⵠⵠⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃⵠⲆⲆⵠⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃᐃΔΔΔᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠΔⲆⵠ] = [];
    this.ⵠᐃΔ[ew.ΔΔⲆΔΔΔⵠ] = [];
    this.ⵠᐃΔ[ew.ⵠⲆᐃⵠⲆ] = [];
    this.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ] = [];
    this.ⵠᐃΔ[ew.ⵠᐃᐃΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠΔⲆᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠᐃΔΔᐃ] = [];
    this.ⵠᐃΔ[ew.Ⲇⵠᐃⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ΔⵠᐃᐃΔ] = [];
    this.ⵠᐃΔ[ew.ᐃΔⲆᐃᐃ] = [];
    this.ⵠᐃΔ[ew.Ⲇᐃⵠⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆΔⲆᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃᐃΔⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃᐃᐃⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃⵠΔⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆⲆⲆᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆⲆΔⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠⵠΔⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆⲆᐃⲆΔ] = [];
    this.ⵠᐃΔ[ew.ΔⲆᐃⲆⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆⲆᐃⲆᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠᐃⲆⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠⵠΔⲆⲆ] = [];
    this.ⵠᐃΔ[ew.ΔΔΔΔⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃⲆᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠᐃⲆΔ] = [];
    this.ⵠᐃΔ[ew.ΔΔⵠᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ⲆⲆΔᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠᐃΔⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠⲆⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ⵠΔⲆⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ΔⵠⲆⵠΔ] = [];
    this.ⵠᐃΔ[ew.ΔⵠⲆⵠⲆ] = [];
    this.ⵠᐃΔ[ew.ⲆΔⵠⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ] = [];
    this.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃᐃᐃⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ] = [];
    this.ⵠᐃΔ[ew.ⲆΔⵠⲆΔ] = [];
    this.ⵠᐃΔ[ew.ΔⵠΔΔⲆ] = [];
    this.ⵠᐃΔ[ew.ΔΔⲆᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠⵠⵠⲆΔ] = [];
    this.ⵠᐃΔ[ew.ⲆΔⲆΔᐃ] = [];
    this.ⵠᐃΔ[ew.ΔΔΔᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃΔⲆⲆᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃΔⵠᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠΔⵠⲆΔ] = [];
    this.ⵠᐃΔ[ew.ⵠᐃⵠⲆᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ] = [];
    this.ⵠᐃΔ[ew.ⵠⵠⲆᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆΔᐃΔ] = [];
    this.ⵠᐃΔ[ew.ⵠⲆⲆᐃᐃ] = [];
    this.ⵠᐃΔ[ew.ΔᐃΔⵠᐃ] = [];
    this.ⵠᐃΔ[ew.ⵠΔΔᐃⲆ] = [];
    this.ⵠᐃΔ[ew.ᐃΔΔΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃⲆᐃΔΔ] = [];
    this.ⵠᐃΔ[ew.ᐃⵠⲆᐃⵠ] = [];
    this.ΔΔⵠΔ = [];
    this.ᐃᐃΔΔⲆ = 260;
    this.ΔᐃⲆΔⲆ = 260;
    this.ⵠⵠᐃΔᐃⲆⵠ = 100;
    this.ⵠΔⵠᐃⲆⵠΔ = 100;
    this.w = this.ⵠⵠᐃΔᐃⲆⵠ * this.ᐃᐃΔΔⲆ;
    this.ᐃⵠⲆ = this.ΔᐃⲆΔⲆ * this.ⵠΔⵠᐃⲆⵠΔ;
    this.ΔⲆⵠⲆΔ = new Gk.ⲆᐃΔΔⲆⲆᐃ();
    this.ΔⲆⵠΔ = [];
    this.ⵠΔⵠⵠ = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pq, kq, jh, 0, sd, ce);
    this.transition = sr;
    this.ΔⵠⲆᐃᐃ = [];
    this.ⲆᐃΔⲆᐃ = 0;
    this.ⲆΔᐃᐃⵠⵠⵠ = ce;
    this.ⲆⲆΔⵠⲆⵠⲆ = 2;
    this.ᐃᐃⵠᐃⵠⲆⵠ = 3;
    this.ΔⵠΔⵠΔ = 4;
    this.ⵠⵠⵠⵠⲆⵠⲆ = Fn;
    this.ΔⵠⲆᐃᐃ[this.ⲆᐃΔⲆᐃ] = {
      ᐃΔⲆᐃᐃΔⲆ: 1,
      Δⵠⵠ: [19, 58, 43],
      ᐃⵠᐃ: [4, 43, 48],
      ᐃⵠⲆᐃᐃ: ["#133a2b", "#042b30"]
    };
    this.ΔⵠⲆᐃᐃ[this.ΔⵠΔⵠΔ] = {
      ᐃΔⲆᐃᐃΔⲆ: 0,
      Δⵠⵠ: [11, 106, 132],
      ᐃⵠᐃ: [9, 55, 63],
      ᐃⵠⲆᐃᐃ: ["#0B6A84", "#09373F"]
    };
    this.ΔⵠⲆᐃᐃ[this.ⲆΔᐃᐃⵠⵠⵠ] = {
      ᐃΔⲆᐃᐃΔⲆ: 0,
      Δⵠⵠ: [235, 242, 240],
      ᐃⵠᐃ: [19, 97, 103],
      ᐃⵠⲆᐃᐃ: [hj[Hg], "#136167"]
    };
    this.ΔⵠⲆᐃᐃ[this.ⲆⲆΔⵠⲆⵠⲆ] = {
      ᐃΔⲆᐃᐃΔⲆ: Fj,
      Δⵠⵠ: [45, 32, 23],
      ᐃⵠⲆᐃᐃ: ["#2D2017", "#031C1E"],
      ᐃⵠᐃ: [3, 28, 30]
    };
    this.ΔⵠⲆᐃᐃ[this.ᐃᐃⵠᐃⵠⲆⵠ] = {
      ᐃⵠᐃ: [24, 61, 60],
      Δⵠⵠ: [74, 74, 74],
      ᐃⵠⲆᐃᐃ: ["#4A4A4A", "#183D3C"],
      ᐃΔⲆᐃᐃΔⲆ: 0
    };
    this.ΔⵠⲆᐃᐃ[this.ⵠⵠⵠⵠⲆⵠⲆ] = {
      Δⵠⵠ: [235, 216, 166],
      ᐃⵠᐃ: [9, 61, 56],
      ᐃΔⲆᐃᐃΔⲆ: 0,
      ᐃⵠⲆᐃᐃ: ["#EBD8A6", "#093D38"]
    };
    this.ⵠᐃⲆⵠⵠⵠⲆ = function (a, b, c, d, e, f) {
      this.x1 = b * 100;
      this.y1 = Lh * c;
      this.w = A * d;
      this.ᐃⵠⲆ = me * e;
      this.x2 = (b + d) * Bs;
      this.y2 = (c + e) * 100;
      this.ⵠᐃⲆ = a;
      this.ᐃⲆⵠ = f === Rg ? 15 : f;
    };
    this.ᐃΔᐃΔⲆ = -1000000;
    this.ⲆⲆᐃΔᐃ = this.ᐃΔᐃΔⲆ;
    this.ⲆᐃⵠⲆⵠ = this.ᐃΔᐃΔⲆ;
    this.ᐃⲆΔᐃⲆ = this.ᐃΔᐃΔⲆ;
    this.ⲆΔΔΔⵠΔΔ = this.ᐃΔᐃΔⲆ;
    this.Δᐃᐃᐃⵠᐃᐃ = this.ᐃΔᐃΔⲆ;
    this.ⲆⲆΔⵠΔ = this.ᐃΔᐃΔⲆ;
    this.ᐃᐃᐃⵠΔᐃΔⵠᐃ = function (b) {
      var c = b.r.x;
      var d = b.r.y;
      var e = Math.floor(d / Bl);
      var f = Math.floor(c / A);
      b.ⲆⲆᐃΔᐃ = gf.ᐃΔᐃΔⲆ;
      b.ⲆᐃⵠⲆⵠ = gf.ᐃΔᐃΔⲆ;
      b.ᐃⲆΔᐃⲆ = gf.ᐃΔᐃΔⲆ;
      b.ⲆΔΔΔⵠΔΔ = gf.ᐃΔᐃΔⲆ;
      b.ⲆⲆΔⵠΔ = gf.ᐃΔᐃΔⲆ;
      b.ᐃⲆⲆⲆΔⵠⵠ = gf.ᐃΔᐃΔⲆ;
      for (var g = 0; gf.ΔⵠΔⵠΔ !== gf.ΔⲆⵠΔ[g].ⵠᐃⲆ; g++) {
        if (gf.ⲆᐃΔⲆᐃ === gf.ΔⲆⵠΔ[g].ⵠᐃⲆ) {
          var h = gf.Δⵠᐃᐃⵠ(g, c, d);
          b.ⲆΔΔΔⵠΔΔ = Math.max(b.ⲆΔΔΔⵠΔΔ, h);
          if (h > yk && gf.ᐃΔΔⲆⲆΔᐃᐃⲆ(g, c, d) === 1) {
            b.ᐃⲆⲆⲆΔⵠⵠ = 1;
          }
        } else if (gf.ⲆΔᐃᐃⵠⵠⵠ === gf.ΔⲆⵠΔ[g].ⵠᐃⲆ) {
          b.ⲆⲆᐃΔᐃ = Math.max(b.ⲆⲆᐃΔᐃ, gf.Δⵠᐃᐃⵠ(g, c, d));
        } else if (gf.ⵠⵠⵠⵠⲆⵠⲆ === gf.ΔⲆⵠΔ[g].ⵠᐃⲆ) {
          b.ⲆᐃⵠⲆⵠ = Math.max(b.ⲆᐃⵠⲆⵠ, gf.Δⵠᐃᐃⵠ(g, c, d));
        } else if (gf.ΔⲆⵠΔ[g].ⵠᐃⲆ === gf.ⲆⲆΔⵠⲆⵠⲆ) {
          b.ᐃⲆΔᐃⲆ = Math.max(b.ᐃⲆΔᐃⲆ, gf.Δⵠᐃᐃⵠ(g, c, d));
        } else if (gf.ΔⲆⵠΔ[g].ⵠᐃⲆ === gf.ᐃᐃⵠᐃⵠⲆⵠ) {
          b.ⲆⲆΔⵠΔ = Math.max(b.ⲆⲆΔⵠΔ, gf.Δⵠᐃᐃⵠ(g, c, d));
        }
      }
      try {
        if (Uw.ⲆⲆⲆᐃ[e][f].iblk) {
          b.ᐃⲆⲆⲆΔⵠⵠ = 1;
        }
        if (gf.ⵠⲆΔΔΔⵠᐃⲆⵠ(f, e)) {
          b.Δᐃᐃᐃⵠᐃᐃ = b.ᐃΔᐃΔⲆ;
        } else if (Uw.ⲆⲆⲆᐃ[e][f].wtb || b.ⲆⲆᐃΔᐃ < 0 && tr > b.ᐃⲆΔᐃⲆ && b.ⲆΔΔΔⵠΔΔ < 0 && b.ᐃⲆⲆⲆΔⵠⵠ < 0 && b.ⲆⲆΔⵠΔ < Ol && b.ⲆᐃⵠⲆⵠ < 0) {
          b.Δᐃᐃᐃⵠᐃᐃ = Fo;
        } else {
          b.Δᐃᐃᐃⵠᐃᐃ = b.ᐃΔᐃΔⲆ;
        }
      } catch (e) {
      }
    };
    this.ΔⲆⲆᐃⲆⲆⲆⲆⲆ = function (a, b) {
      gf.ⲆⲆᐃΔᐃ = gf.ᐃΔᐃΔⲆ;
      gf.ⲆᐃⵠⲆⵠ = gf.ᐃΔᐃΔⲆ;
      gf.ᐃⲆΔᐃⲆ = gf.ᐃΔᐃΔⲆ;
      gf.ⲆⲆΔⵠΔ = gf.ᐃΔᐃΔⲆ;
      gf.ⲆΔΔΔⵠΔΔ = gf.ᐃΔᐃΔⲆ;
      for (var c = 0; gf.ΔⵠΔⵠΔ !== gf.ΔⲆⵠΔ[c].ⵠᐃⲆ; c++) {
        if (gf.ⲆᐃΔⲆᐃ === gf.ΔⲆⵠΔ[c].ⵠᐃⲆ) {
          gf.ⲆΔΔΔⵠΔΔ = Math.max(gf.ⲆΔΔΔⵠΔΔ, gf.Δⵠᐃᐃⵠ(c, a, b));
        } else if (gf.ΔⲆⵠΔ[c].ⵠᐃⲆ === gf.ⲆΔᐃᐃⵠⵠⵠ) {
          gf.ⲆⲆᐃΔᐃ = Math.max(gf.ⲆⲆᐃΔᐃ, gf.Δⵠᐃᐃⵠ(c, a, b));
        } else if (gf.ⵠⵠⵠⵠⲆⵠⲆ === gf.ΔⲆⵠΔ[c].ⵠᐃⲆ) {
          gf.ⲆᐃⵠⲆⵠ = Math.max(gf.ⲆᐃⵠⲆⵠ, gf.Δⵠᐃᐃⵠ(c, a, b));
        } else if (gf.ⲆⲆΔⵠⲆⵠⲆ === gf.ΔⲆⵠΔ[c].ⵠᐃⲆ) {
          gf.ᐃⲆΔᐃⲆ = Math.max(gf.ᐃⲆΔᐃⲆ, gf.Δⵠᐃᐃⵠ(c, a, b));
        } else if (gf.ᐃᐃⵠᐃⵠⲆⵠ === gf.ΔⲆⵠΔ[c].ⵠᐃⲆ) {
          gf.ⲆⲆΔⵠΔ = Math.max(gf.ⲆⲆΔⵠΔ, gf.Δⵠᐃᐃⵠ(c, a, b));
        }
      }
      if (gf.ⲆⲆᐃΔᐃ < 0 && gf.ⲆⲆΔⵠΔ < Dh && gf.ⲆΔΔΔⵠΔΔ < kq && gf.ⲆⲆΔⵠΔ < 0 && gf.ⲆᐃⵠⲆⵠ < Gd) {
        gf.Δᐃᐃᐃⵠᐃᐃ = yl;
      } else {
        gf.Δᐃᐃᐃⵠᐃᐃ = gf.ᐃΔᐃΔⲆ;
      }
    };
    this.ᐃΔΔⲆⲆΔᐃᐃⲆ = function (a, b, c) {
      var d = gf.ΔⲆⵠΔ[a];
      var e = Lg;
      ⵠⲆⵠᐃ = d.x1 + 30 + ((d.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ) === Kr ? 150 : $t);
      var f = b - ⵠⲆⵠᐃ;
      if ((d.ᐃⲆⵠ & bw.ᐃΔⲆⲆⵠ) > 0 && f > 0 && f < 320) {
        e = js;
      }
      ⲆΔⲆᐃ = d.y1 + 250 + (d.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ ? 0 : 150);
      f = c - ⲆΔⲆᐃ;
      if ((d.ᐃⲆⵠ & bw.ᐃⲆⵠᐃⲆ) > 0 && f > 0 && f < 320) {
        e = 1;
      }
      ᐃⵠⵠⵠ = d.x2 + 80 + (d.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ ? Gd : -200);
      f = ᐃⵠⵠⵠ - b;
      if ((d.ᐃⲆⵠ & bw.ᐃΔⲆᐃⲆ) > 0 && f > 0 && f < 320) {
        e = er;
      }
      ΔᐃΔⲆ = d.y2 - 200 + (Jt === (d.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ) ? -200 : _s);
      f = ΔᐃΔⲆ - c;
      if (Wh < (d.ᐃⲆⵠ & bw.ⲆΔΔⲆΔ) && Mn < f && f < 320) {
        e = Ud;
      }
      if (ⵠⲆⵠᐃ <= b && b <= ᐃⵠⵠⵠ && c >= ⲆΔⲆᐃ && ΔᐃΔⲆ >= c) {
        return e;
      } else {
        return 0;
      }
    };
    this.Δⵠᐃᐃⵠ = function (a, b, c) {
      var d = gf.ΔⲆⵠΔ[a];
      ⵠⲆⵠᐃ = d.x1 + 30;
      ⲆΔⲆᐃ = d.y1 + 250;
      ᐃⵠⵠⵠ = d.x2 + 80;
      ΔᐃΔⲆ = d.y2 - 200;
      if (ⵠⲆⵠᐃ <= b && ᐃⵠⵠⵠ >= b && c >= ⲆΔⲆᐃ && ΔᐃΔⲆ >= c) {
        return Math.min(b - ⵠⲆⵠᐃ, ᐃⵠⵠⵠ - b, c - ⲆΔⲆᐃ, ΔᐃΔⲆ - c);
      }
      var e = -1000000;
      if (b - ⵠⲆⵠᐃ < 0) {
        e = Math.max(e, b - ⵠⲆⵠᐃ);
      } else if (ᐃⵠⵠⵠ - b < 0) {
        e = Math.max(e, ᐃⵠⵠⵠ - b);
      }
      ᐃᐃᐃⵠΔΔⲆ = -1000000;
      if (ⲆΔⲆᐃ > c || ΔᐃΔⲆ < c) {
        if (c - ⲆΔⲆᐃ < 0) {
          ᐃᐃᐃⵠΔΔⲆ = Math.max(ᐃᐃᐃⵠΔΔⲆ, c - ⲆΔⲆᐃ);
        } else {
          ᐃᐃᐃⵠΔΔⲆ = Math.max(ᐃᐃᐃⵠΔΔⲆ, ΔᐃΔⲆ - c);
        }
        e = e !== -1000000 && ᐃᐃᐃⵠΔΔⲆ !== -1000000 ? Math.min(e, ᐃᐃᐃⵠΔΔⲆ) : ᐃᐃᐃⵠΔΔⲆ;
      }
      return e;
    };
    this.ⵠᐃᐃᐃΔⲆᐃ = function (b, c, d) {
      var e = d;
      var g = c;
      x(e, g, "isl", b, 1);
      for (var h = 0; h < 4; h++) {
        for (var i = 0; i < 3; i++) {
          x(e - i, g - h, "iblk", 0);
          x(e + i, g - h, "iblk", 0);
          x(e + i, g + h, "iblk", _s);
          x(e - i, g + h, "iblk", Fj);
        }
      }
      if (b === 0) {
        for (h = 0; h < 2; h++) {
          x(e - h, g - 4, "iblk", 0);
          x(e + h, g - 4, "iblk", Dh);
          x(e - h, g + 4, "iblk", 0);
          x(e + h, g + 4, "iblk", Mn);
        }
        for (h = $t; ta > h; h++) {
          x(e - vo, g + h, "iblk", 0);
          x(e + 3, g + h, "iblk", 0);
          x(e - 3, g - h, "iblk", 0);
          x(e + 3, g - h, "iblk", xb);
        }
        x(e - $r, g - f, "iblk", kq);
        x(e - Vl, g - B, "iblk", 0);
        x(e + yg, g + 4, "iblk", Jt);
        x(e + 3, g + lk, "iblk", yk);
      } else if (ik === b) {
        for (h = Mn; h < 3; h++) {
          x(e - h, g - 4, "iblk", xb);
          x(e + h, g - 4, "iblk", yk);
          x(e - h, g + mj, "iblk", jj);
          x(e + h, g + f, "iblk", jj);
        }
        for (h = rh; h < 4; h++) {
          x(e - 3, g + h, "iblk", 0);
          x(e + 3, g + h, "iblk", 0);
          x(e - Vl, g - h, "iblk", jj);
          x(e + 3, g - h, "iblk", 0);
        }
      } else if (b === 2) {
        for (h = 0; h < 2; h++) {
          x(e - h, g - 4, "iblk", 0);
          x(e + h, g - Yn, "iblk", 0);
          x(e - h, g + Ka, "iblk", 0);
          x(e + h, g + th, "iblk", 0);
        }
        for (h = rh; jg > h; h++) {
          x(e - 3, g + h, "iblk", 0);
          x(e + 3, g + h, "iblk", $t);
          x(e - 3, g - h, "iblk", 0);
          x(e + 3, g - h, "iblk", 0);
        }
      }
    };
    this.ⲆᐃⲆΔᐃᐃⲆΔᐃ = function (b) {
      for (var c = 0; c < gf.ΔⲆⵠΔ.length && b > 0; c++) {
        var d = gf.ΔⲆⵠΔ[c];
        if (d.ⵠᐃⲆ === gf.ΔⵠΔⵠΔ && d.w > 1800 && d.ᐃⵠⲆ > 1000) {
          var f = Math.floor((d.x1 + d.w / xl) / 100);
          var g = Math.floor((d.y1 + d.ᐃⵠⲆ / 2) / Oj);
          gf.ⵠᐃᐃᐃΔⲆᐃ(b % 3, f, g);
          for (var h = 0; _i > h; h++) {
            var j = g - 2 + Math.floor(th * gf.ΔⲆⵠⲆΔ.get());
            var k = f - vo + Math.floor(gf.ΔⲆⵠⲆΔ.get() * 6);
            if (Uw.ⲆⲆⲆᐃ[j][k].s === undefined) {
              x(j, k, "plm", h);
            }
            j = g - Ok + Math.floor(gf.ΔⲆⵠⲆΔ.get() * 4);
            k = f - Mo + Math.floor(_ * gf.ΔⲆⵠⲆΔ.get());
            if (Tg === Uw.ⲆⲆⲆᐃ[j][k].plm) {
              x(j, k, "s", h);
            }
          }
          j = g - 2 + Math.floor(kr * gf.ΔⲆⵠⲆΔ.get());
          k = f - vo + Math.floor(gf.ΔⲆⵠⲆΔ.get() * 6);
          if (Uw.ⲆⲆⲆᐃ[j][k].plm === undefined && La === Uw.ⲆⲆⲆᐃ[j][k].s) {
            x(j, k, "p", 0, dn);
          }
          b--;
        }
      }
    };
    this.ⵠᐃᐃᐃⵠᐃⲆᐃΔ = function (a) {
      gf.ΔⲆⵠⲆΔ.ⵠⲆⵠⲆⲆ(a);
      var j = Fj;
      while (dn) {
        if (++j > 10000) {
          return;
        }
        gf.ΔⲆⵠΔ = [];
        if (gf.ⲆΔᐃᐃⵠ === 0 && (gf.mode === bw.ᐃᐃⵠᐃΔ || bw.ⵠⵠᐃᐃΔ === gf.mode || gf.mode === bw.ⲆᐃⵠΔΔ)) {
          gf.ⲆΔᐃᐃⵠ = Na;
        }
        if (gf.mode === bw.ⲆᐃᐃΔⵠ) {
          gf.ΔⲆⵠΔ.push(new gf.ⵠᐃⲆⵠⵠⵠⲆ(gf.ⲆᐃΔⲆᐃ, 2, 2, 80, 80, 15));
        } else if (bw.ⲆᐃⲆⵠΔ === gf.mode) {
          gf.ΔⲆⵠΔ.push(new gf.ⵠᐃⲆⵠⵠⵠⲆ(gf.ⲆᐃΔⲆᐃ, 2, C, 150, 150, 15));
        } else if (gf.ⲆΔᐃᐃⵠ !== tr && Jt < gf.ⲆΔᐃᐃⵠ.length && Ea < gf.ⲆΔᐃᐃⵠ[0].length) {
          for (var k = Gd; gf.ⲆΔᐃᐃⵠ.length > k; k++) {
            var n = gf.ⲆΔᐃᐃⵠ[k];
            if (Lu !== n[0]) {
              break;
            }
            var u = bw.ⲆᐃΔⲆᐃ;
            switch (n[1]) {
              case "FOREST":
                u = gf.ⲆᐃΔⲆᐃ;
                break;
              case "WINTER":
                u = gf.ⲆΔᐃᐃⵠⵠⵠ;
                break;
              case "DESERT":
                u = gf.ⵠⵠⵠⵠⲆⵠⲆ;
                break;
              case "LAVA":
                u = gf.ⲆⲆΔⵠⲆⵠⲆ;
                break;
              case "DRAGON":
                u = gf.ᐃᐃⵠᐃⵠⲆⵠ;
            }
            gf.ΔⲆⵠΔ.push(new gf.ⵠᐃⲆⵠⵠⵠⲆ(u, n[ib], n[Mo], n[Ka], n[5], n[6], n[7]));
          }
        } else if (yk !== gf.ⲆΔᐃᐃⵠ) {
          for (k = Ol; gf.ⲆΔᐃᐃⵠ.length > k; k++) {
            var v = gf.ⲆΔᐃᐃⵠ[k];
            u = bw.ⲆᐃΔⲆᐃ;
            switch (v[0]) {
              case "FOREST":
                u = gf.ⲆᐃΔⲆᐃ;
                break;
              case "WINTER":
                u = gf.ⲆΔᐃᐃⵠⵠⵠ;
                break;
              case "DESERT":
                u = gf.ⵠⵠⵠⵠⲆⵠⲆ;
                break;
              case "LAVA":
                u = gf.ⲆⲆΔⵠⲆⵠⲆ;
                break;
              case "DRAGON":
                u = gf.ᐃᐃⵠᐃⵠⲆⵠ;
            }
            if (e(u, v[Aj], v[2], 0, (k + 1) * St) === Kr) {
              break;
            }
          }
          if (k !== gf.ⲆΔᐃᐃⵠ.length) {
            continue;
          }
        }
        break;
      }
      ⵠᐃᐃⵠΔΔΔ();
      var A = [];
      for (var c = $t; gf.ΔᐃⲆΔⲆ > c; c++) {
        A[c] = new Array(gf.ᐃᐃΔΔⲆ);
        for (var B = 0; B < gf.ᐃᐃΔΔⲆ; B++) {
          A[c][B] = Dh;
        }
      }
      for (c = 0; gf.ΔⲆⵠΔ.length > c; c++) {
        for (var D = (v = gf.ΔⲆⵠΔ[c]).x2 / 100, E = v.y2 / Kn, F = v.x1 / wr; F <= D; F++) {
          for (var G = v.y1 / 100; G <= E; G++) {
            A[G][F] = jh;
          }
        }
      }
      for (G = 0; G < gf.ΔᐃⲆΔⲆ; G++) {
        for (F = Lg; F < gf.ᐃᐃΔΔⲆ; F++) {
          if (Kr === A[G][F]) {
            i(A, F, G);
          }
        }
      }
      Uw = {
        w: gf.ᐃᐃΔΔⲆ,
        ᐃⵠⲆ: gf.ΔᐃⲆΔⲆ,
        ⲆⲆⲆᐃ: []
      };
      for (c = Ko; gf.ΔᐃⲆΔⲆ > c; c++) {
        Uw.ⲆⲆⲆᐃ[c] = [];
      }
      if (gf.ⲆΔᐃᐃⵠ !== 0 && gf.ⲆΔᐃᐃⵠ.length > 0 && gf.ⲆΔᐃᐃⵠ[kq].length > sn) {
        for (k = 0; gf.ⲆΔᐃᐃⵠ.length > k; k++) {
          n = gf.ⲆΔᐃᐃⵠ[k];
          if (n[yl] === "isl") {
            gf.ⵠᐃᐃᐃΔⲆᐃ(n[Le], n[Gg], n[qa]);
          }
        }
      } else {
        gf.ⲆᐃⲆΔᐃᐃⲆΔᐃ(gf.ᐃᐃΔⵠⲆⵠⲆ);
      }
      if (gf.ⲆΔᐃᐃⵠ !== Jt && gf.ⲆΔᐃᐃⵠ.length > 0 && gf.ⲆΔᐃᐃⵠ[Wh].length > fa) {
        var H = [];
        for (k = Wh; k < gf.ⲆΔᐃᐃⵠ.length; k++) {
          if ((n = gf.ⲆΔᐃᐃⵠ[k])[Lg] === 1) {
            if (n[1] === "r") {
              x(n[Mo], n[2], "wtb", 0, 1);
              H.push([n[fa], n[2], n[bn]]);
            } else {
              x(n[4], n[3], n[Eg], n[kn], n[5]);
            }
          }
        }
        p(0, H);
        H = [];
      } else {
        for (c = Dh; c < gf.ΔⲆⵠΔ.length; c++) {
          v = gf.ΔⲆⵠΔ[c];
          if (bw.ⲆᐃⲆⵠΔ === gf.mode) {
            if (gf.ⲆᐃΔⲆᐃ === v.ⵠᐃⲆ) {
              g(c, v.w / (me * sg));
            }
          } else {
            if (gf.ⲆᐃΔⲆᐃ === v.ⵠᐃⲆ) {
              l(c, v.w / (wa * Zr));
            }
            if (v.ⵠᐃⲆ === gf.ⲆⲆΔⵠⲆⵠⲆ) {
              b(c, v.w / (Oj * 100));
            }
            if (v.ⵠᐃⲆ === gf.ⲆΔᐃᐃⵠⵠⵠ) {
              q(c, v.w / (sg * or));
            }
            if (v.ⵠᐃⲆ === gf.ⵠⵠⵠⵠⲆⵠⲆ) {
              s(c, v.w / (Zr * 100));
            }
            if (v.ⵠᐃⲆ === gf.ᐃᐃⵠᐃⵠⲆⵠ) {
              h(c);
            }
          }
        }
      }
      It("isl", wg);
      It("wtb", aq);
      It("la", Cs);
      It("c", 1);
      It("s", 1);
      It("f", er);
      It("p", ik);
      It("g", 1);
      It("d", 1);
      It("a", 1);
      It("re", 1);
      It("m", 1);
      Ht = [];
      gf.ΔⵠⵠⵠΔᐃⵠΔΔ(Uw);
    };
    this.ΔⲆΔⵠ = x;
    this.ΔⵠⵠⵠΔᐃⵠΔΔ = function (b) {
      for (var c = 0; this.ΔᐃⲆΔⲆ > c; c++) {
        for (var d = Dh; this.ᐃᐃΔΔⲆ > d; d++) {
          b.ⲆⲆⲆᐃ[c] ||= [];
          if (b.ⲆⲆⲆᐃ[c][d]) {
            var e = b.ⲆⲆⲆᐃ[c][d];
            if (e.de && _s < e.de.length) {
              for (var f = 0; f < e.de.length; f++) {
                if (e.de[f] && e.de[f].length > 0) {
                  e.de = e.de[f][0];
                  if (f >= 41 && f <= 49) {
                    e.de.scale = 3;
                    var g = Math.floor(Math.random() * 3 + 1);
                    e.de.ΔⵠⲆ = [];
                    for (var h = Mn; h < g; h++) {
                      e.de.ΔⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.PI * Math.random() * 2,
                        ΔᐃⲆΔ: 41 + Math.floor(Math.random() * I)
                      });
                    }
                  } else if (nq <= f && f <= 26) {
                    e.de.scale = Gg;
                    g = Math.floor(Math.random() * 3 + ub);
                    e.de.ΔⵠⲆ = [];
                    for (h = 0; h < g; h++) {
                      e.de.ΔⵠⲆ.push({
                        x: Math.random() * 120 - 60,
                        y: Math.random() * 120 - 60,
                        angle: Math.random() * Math.PI * 2,
                        ΔᐃⲆΔ: 19 + Math.floor(Math.random() * 8)
                      });
                    }
                  } else if (f <= 15 || f >= 27 && f <= 40) {
                    e.de.angle = 0;
                    e.de.scale = Ok;
                    e.de.ΔᐃⲆΔ = f;
                  } else {
                    e.de.angle = Math.random() * Math.PI * yh;
                    e.de.scale = 1;
                    e.de.ΔᐃⲆΔ = f;
                  }
                }
              }
            }
            m(e, "p", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, 0, 10, rk));
            m(e, "t", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(tq, ub, Fo, Ol, Ke, eg));
            m(e, "s", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bj, Cs, 1, rh, oa, ft));
            m(e, "g", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(bs, 1, Fo, Mn, Fg, St));
            m(e, "d", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bj, jh, Ur, rh, bb, wh));
            m(e, "b", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, Br, 1, tr, lj, 10));
            m(e, "f", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Aj, 1, Mn, 10, 10));
            m(e, "sw", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, _s, eg, Hr));
            m(e, "gw", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(sr, 1, 1, xb, 10, bb));
            m(e, "dw", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(aa, jh, js, ko, 10, 10));
            m(e, "a", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, yl, 1, 0, wh, 10));
            m(e, "cs", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, jh, 0, Fn, Fn));
            m(e, "plm", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Zh, Fo, ub, 0, zq, 10));
            m(e, "re", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1, 0, Fg, rd));
            m(e, "c", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, Br, Gd, rd, oa));
            m(e, "m", new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bj, 1, Ud, 0, oa, Fs));
          } else {
            b.ⲆⲆⲆᐃ[c][d] = [];
          }
        }
      }
    };
    this.time = Cr.ⵠⵠΔ;
    this.ⲆⲆⵠΔⵠ = {
      ⵠΔΔΔⲆ: 0,
      now: Ol,
      ⵠⲆⵠⲆⲆ: ko,
      translate: {
        x: 0,
        y: 0
      }
    };
    this.ΔᐃᐃΔⵠΔⲆΔΔ = function () {
      this.ΔΔⵠΔ = [];
      this.ⵠᐃΔ[ew.ⲆΔⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠΔⲆᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠᐃΔΔᐃ] = [];
      this.ⵠᐃΔ[ew.Ⲇⵠᐃⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ΔⵠᐃᐃΔ] = [];
      this.ⵠᐃΔ[ew.ᐃΔⲆᐃᐃ] = [];
      this.ⵠᐃΔ[ew.Ⲇᐃⵠⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆΔⲆᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃᐃΔⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃᐃᐃⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃⵠΔⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆΔⵠⲆΔ] = [];
      this.ⵠᐃΔ[ew.ΔⵠΔΔⲆ] = [];
      this.ⵠᐃΔ[ew.ΔΔⲆᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠⵠⵠⲆΔ] = [];
      this.ⵠᐃΔ[ew.ⲆΔⲆΔᐃ] = [];
      this.ⵠᐃΔ[ew.ΔΔΔᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃΔⲆⲆᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃΔⵠᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠΔⵠⲆΔ] = [];
      this.ⵠᐃΔ[ew.ⵠᐃⵠⲆᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ⵠⵠⲆᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆΔᐃΔ] = [];
      this.ⵠᐃΔ[ew.ⵠⲆⲆᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ΔᐃΔⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠΔΔᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃΔΔΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆⲆⲆᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆⲆΔⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠⵠΔⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆⲆᐃⲆΔ] = [];
      this.ⵠᐃΔ[ew.ΔⲆᐃⲆⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆⲆᐃⲆᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠᐃⲆⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⵠⵠΔⲆⲆ] = [];
      this.ⵠᐃΔ[ew.ΔΔΔΔⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃⲆᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠᐃⲆΔ] = [];
      this.ⵠᐃΔ[ew.ΔΔⵠᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ⲆⲆΔᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠᐃΔⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠⲆⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ⵠΔⲆⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ΔⵠⲆⵠΔ] = [];
      this.ⵠᐃΔ[ew.ΔⵠⲆⵠⲆ] = [];
      this.ⵠᐃΔ[ew.ⲆΔⵠⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃᐃⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆⵠⲆΔⲆ] = [];
      this.ⵠᐃΔ[ew.ⵠⵠΔⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ΔΔΔⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ΔⵠΔᐃⲆ] = [];
      this.ⵠᐃΔ[ew.ⵠᐃᐃⲆⲆ] = [];
      this.ⵠᐃΔ[ew.ⵠΔⵠΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃΔⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆΔⵠⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ⵠⲆᐃⲆⵠ] = [];
      this.ⵠᐃΔ[ew.ΔⵠΔΔᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆΔΔΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆᐃᐃΔ] = [];
      this.ⵠᐃΔ[ew.ΔⵠⵠⵠΔ] = [];
      this.ⵠᐃΔ[ew.ΔΔⲆΔᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ] = [];
      this.ⵠᐃΔ[ew.ΔΔᐃⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆᐃⲆΔΔ] = [];
      this.ⵠᐃΔ[ew.ⲆⵠᐃⲆⵠ] = [];
      this.ⵠᐃΔ[ew.ⲆΔΔᐃΔ] = [];
      this.ⵠᐃΔ[ew.ⲆⲆᐃⵠΔΔᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ] = [];
      this.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ⲆⵠⲆⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃΔⲆᐃⵠ] = [];
      this.ⵠᐃΔ[ew.ᐃΔⲆⵠΔⵠⵠ] = [];
      this.ⵠᐃΔ[ew.ΔᐃᐃⲆⵠⵠⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃⵠⲆⲆⵠⲆ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃᐃΔΔΔᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠΔⲆⵠ] = [];
      this.ⵠᐃΔ[ew.ΔΔⲆΔΔΔⵠ] = [];
      this.ⵠᐃΔ[ew.ⵠⲆᐃⵠⲆ] = [];
      this.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ] = [];
      this.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ] = [];
      this.ⵠᐃΔ[ew.ⵠᐃᐃΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃⲆᐃΔΔ] = [];
      this.ⵠᐃΔ[ew.ᐃⵠⲆᐃⵠ] = [];
    };
    this.ΔⵠΔⵠⵠⲆⵠⲆΔ = function (a) {
      if (this.ΔΔⵠΔ[a]) {
        ⵠΔᐃΔ = this.ΔΔⵠΔ[a].type;
        this.ΔΔⵠΔ[a] = null;
        for (var b = this.ⵠᐃΔ[ⵠΔᐃΔ], c = 0; c < b.length; c++) {
          if (b[c].ᐃⲆᐃⲆ == a) {
            b.splice(c, 1);
            return;
          }
        }
      }
    };
    this.ΔᐃⲆⲆᐃⲆᐃⲆⵠ = function (a, b) {
      for (var c = Fj; c < this.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ].length; c++) {
        var d = this.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ][c];
        if (Math.floor(d.x / wr) === b && a === Math.floor(d.y / Qk)) {
          return Fo;
        }
      }
      return Fj;
    };
    this.ⵠⲆΔΔΔⵠᐃⲆⵠ = function (a, b) {
      for (var c = xb; c < this.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ].length; c++) {
        var d = this.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ][c];
        if (a == Math.floor(d.x / fh) && b == Math.floor(d.y / Qk)) {
          return wt;
        }
      }
      return kk;
    };
    this.ⵠΔⲆΔⲆ = function (j) {
      for (var e = kq; j.length > e; e++) {
        ⵠΔⲆᐃ = j[e];
        if (ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ != ⵠΔⲆᐃ.angle) {
          var p = Math.PI * 2;
          ⵠΔⲆᐃ.angle = (ⵠΔⲆᐃ.angle + p) % p;
          ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ = (ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ + p) % p;
          if (ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ != ⵠΔⲆᐃ.angle) {
            var q = ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ - ⵠΔⲆᐃ.angle;
            var B = Math.abs(q);
            if (B > Math.PI) {
              B = Xn * Math.PI - B;
            }
            var D = pf * (Ik * (B / Math.PI) * bw.ⲆΔⵠΔΔΔᐃ);
            if (q > Math.PI) {
              ⵠΔⲆᐃ.angle -= D;
            } else if (q < -Math.PI) {
              ⵠΔⲆᐃ.angle += D;
            } else if (q < 0) {
              ⵠΔⲆᐃ.angle -= D;
            } else {
              ⵠΔⲆᐃ.angle += D;
            }
            ⵠΔⲆᐃ.angle = (ⵠΔⲆᐃ.angle + p) % p;
            if (Math.abs(ⵠΔⲆᐃ.angle - ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ) < D) {
              ⵠΔⲆᐃ.angle = ⵠΔⲆᐃ.ΔΔΔⲆⲆΔΔ;
            }
          }
        }
        Math.floor(ⵠΔⲆᐃ.r.y / 100);
        Math.floor(ⵠΔⲆᐃ.r.x / 100);
        if (ⵠΔⲆᐃ.x != ⵠΔⲆᐃ.r.x || ⵠΔⲆᐃ.r.y != ⵠΔⲆᐃ.y) {
          if (ⵠΔⲆᐃ.action & $v.IDLE) {
            ⵠΔⲆᐃ.action -= $v.IDLE;
          }
          ⵠΔⲆᐃ.action |= $v.ΔᐃⲆⵠⵠᐃᐃ;
          var E = ⵠⵠⵠⲆ.ⲆⵠⵠΔΔⵠⵠ(ⵠΔⲆᐃ, ⵠΔⲆᐃ.r) + Math.PI;
          var F = ⵠΔⲆᐃ.ⲆⵠⲆⲆⵠ * pf;
          var G = ⵠⵠⵠⲆ.ⵠⲆⲆⲆⵠᐃⲆ(F, E);
          if (ⵠⵠⵠⲆ.ᐃⲆΔΔⵠᐃⲆ(ⵠⵠⵠⲆ.ᐃΔᐃΔΔΔⵠ(ⵠΔⲆᐃ, ⵠΔⲆᐃ.r)) > ⵠⵠⵠⲆ.ᐃⲆΔΔⵠᐃⲆ(G)) {
            ⵠⵠⵠⲆ.ⵠΔΔⵠⵠᐃΔ(ⵠΔⲆᐃ, G);
          } else {
            if (ⵠΔⲆᐃ.action & $v.ΔᐃⲆⵠⵠᐃᐃ) {
              ⵠΔⲆᐃ.action -= $v.ΔᐃⲆⵠⵠᐃᐃ;
            }
            ⵠΔⲆᐃ.action |= $v.IDLE;
            ⵠⵠⵠⲆ.ΔⵠⲆΔΔΔᐃ(ⵠΔⲆᐃ.r, ⵠΔⲆᐃ);
          }
        }
        if (ⵠΔⲆᐃ.ⵠΔᐃᐃΔ) {
          var H = ⵠΔⲆᐃ.bubbles;
          if ((M = H.length) === 0 || Cr.ᐃΔⲆⲆⲆΔΔ > M && H[M - 1].ΔᐃΔᐃⲆ < 0.95) {
            H.push({
              id: Math.floor(Math.random() * ΔΔ[Cr.ᐃᐃⵠΔΔᐃᐃ][0].length),
              x: Math.floor(ⵠΔⲆᐃ.x + Math.random() * 80 - 40),
              y: Math.floor(ⵠΔⲆᐃ.y + Math.random() * 80 - 40),
              ΔᐃΔᐃⲆ: 1
            });
          }
          for (var I = 0; I < M; I++) {
            H[I].ΔᐃΔᐃⲆ = Math.max(_s, H[I].ΔᐃΔᐃⲆ - pf);
          }
          for (I = 0; I < M; I++) {
            if (H[I].ΔᐃΔᐃⲆ === 0) {
              H.splice(I, jh);
              break;
            }
          }
        }
        var K = 0;
        if (ⵠΔⲆᐃ.ᐃΔⲆᐃ && sf.ⵠⲆⵠⲆΔ) {
          var L = ⵠΔⲆᐃ.ᐃΔΔΔⲆ;
          var M = L.length;
          if (ⵠΔⲆᐃ.Δᐃᐃᐃⵠᐃᐃ > 0 && Dr.ⲆΔⵠⵠⵠ !== ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ && Dr.ⵠⲆᐃⲆⵠ !== ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ && Dr.ᐃᐃⵠⲆⵠ !== ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ && ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ !== Dr.ΔⵠΔΔᐃ && ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ !== Dr.Δᐃᐃᐃᐃ && !ⵠΔⲆᐃ.ⵠΔᐃᐃΔ && (K = Cs, M === _s || Cr.ΔⵠᐃΔᐃΔⵠ < ⵠⵠⵠⲆ.ΔⲆⲆⲆ(L[M - ik], ⵠΔⲆᐃ))) {
            var N = -ⵠΔⲆᐃ.angle;
            var O = Math.cos(N) * 45 * mo;
            var Q = mo * (Math.sin(N) * 45);
            L.push({
              x: ⵠΔⲆᐃ.x + O,
              y: ⵠΔⲆᐃ.y + Q,
              r: fg,
              alpha: 0.8
            });
            L.push({
              x: ⵠΔⲆᐃ.x - O,
              y: ⵠΔⲆᐃ.y - Q,
              r: 8,
              alpha: 0.8
            });
            L.push({
              x: ⵠΔⲆᐃ.x,
              y: ⵠΔⲆᐃ.y,
              r: 24,
              alpha: Cs
            });
          }
          for (I = 0; M > I; I++) {
            L[I].alpha = Math.max(Mn, L[I].alpha - pf / 2.2);
            L[I].r += Ye * pf;
          }
          if (L.length > 0 && L[kq].alpha === ko) {
            L.splice(0, yl);
          }
          var R = ⵠΔⲆᐃ.ⵠⵠΔⲆᐃ;
          M = R.length;
          var S = -Ur;
          var U = Math.max(rh, Math.sign(ⵠΔⲆᐃ.ᐃⲆⲆⲆΔⵠⵠ));
          var V = Math.max(0, Math.sign(ⵠΔⲆᐃ.ⲆⲆᐃΔᐃ));
          Math.max(rh, Math.sign(ⵠΔⲆᐃ.ⲆᐃⵠⲆⵠ));
          var W = Math.max(Lg, Math.sign(ⵠΔⲆᐃ.ᐃⲆΔᐃⲆ));
          var X = Math.max(0, Math.sign(ⵠΔⲆᐃ.ⲆⲆΔⵠΔ));
          if (ⵠΔⲆᐃ.ᐃⲆⲆⲆΔⵠⵠ > 0 || ⵠΔⲆᐃ.ⲆᐃⵠⲆⵠ > 0) {
            S = Cr.ΔΔⲆⲆⲆⵠΔ;
          } else if (Mn < ⵠΔⲆᐃ.ⲆⲆΔⵠΔ) {
            S = Cr.ΔⲆⵠΔⵠΔᐃ;
          } else if (ⵠΔⲆᐃ.ⲆⲆᐃΔᐃ > Ol) {
            S = Cr.ⵠⲆΔᐃⵠᐃⵠ;
          } else if (ⵠΔⲆᐃ.ᐃⲆΔᐃⲆ > ko) {
            S = Cr.ⲆᐃⵠⲆΔⲆⲆ;
          }
          if (Dr.ⵠΔᐃΔⵠ === ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ && Fo === (U | V | W | X)) {
            S = Cr.ᐃⲆⲆᐃᐃⵠΔ;
            var Y = ⵠΔⲆᐃ.ⵠⵠΔⲆΔ - Math.PI / ij;
            var Z = 15;
            var _ = 11;
            var aa = Cr.ΔΔΔⵠⵠⲆⵠ;
          } else if (ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ === Dr.ⵠΔⵠΔΔ && (U | V | W | X) == 1) {
            S = Cr.ᐃᐃΔⲆΔᐃᐃ;
            Y = ⵠΔⲆᐃ.ⵠⵠΔⲆΔ - Math.PI / 2;
            Z = 21;
            _ = an;
            aa = Cr.ΔΔΔⵠⵠⲆⵠ;
          } else if (ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ === Dr.ᐃᐃΔⵠᐃ && (U | V | W | X) === Br) {
            S = Cr.ⲆⲆⵠⵠⲆᐃᐃ;
            Y = ⵠΔⲆᐃ.ⵠⵠΔⲆΔ - Math.PI / Wq;
            var ba = Math.random() * 50;
            Z = rk + ba;
            _ = xb + ba;
            aa = Cr.ΔΔΔⵠⵠⲆⵠ * 0.9;
          } else {
            Y = ⵠΔⲆᐃ.angle;
            Z = 15;
            _ = Kg;
            aa = Cr.ΔΔΔⵠⵠⲆⵠ;
          }
          if (Dr.ⲆΔⵠⵠⵠ === ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ || Dr.ⵠⲆᐃⲆⵠ === ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ || ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ === Dr.Δᐃᐃᐃᐃ || ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ === Dr.ΔⵠΔΔᐃ || ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ === Dr.ᐃᐃⵠⲆⵠ || ⵠΔⲆᐃ.ⵠΔᐃᐃΔ); else if (Dr.ᐃᐃⲆᐃⵠ === ⵠΔⲆᐃ.ⵠⵠⲆΔᐃ) {
            if (_s === M || ⵠⵠⵠⲆ.ΔⲆⲆⲆ(R[M - wg], ⵠΔⲆᐃ) > Cr.ΔᐃⲆⲆᐃⲆᐃ) {
              R.push({
                x: ⵠΔⲆᐃ.x,
                y: ⵠΔⲆᐃ.y,
                angle: ⵠΔⲆᐃ.ⵠⵠΔⲆΔ,
                alpha: Br,
                id: Cr.ⵠᐃⵠⲆⵠᐃⵠ
              });
            }
          } else if (S != -1 && K === 0 && (M === 0 || aa < ⵠⵠⵠⲆ.ΔⲆⲆⲆ(R[M - Ur], ⵠΔⲆᐃ))) {
            ⵠΔⲆᐃ.ᐃⵠᐃΔⲆᐃᐃ++;
            if (Math.abs(ⵠΔⲆᐃ.x - ⵠΔⲆᐃ.r.x) > ub && Br < Math.abs(ⵠΔⲆᐃ.y - ⵠΔⲆᐃ.r.y)) {
              if (ⵠΔⲆᐃ.r.x > ⵠΔⲆᐃ.x && ⵠΔⲆᐃ.r.y < ⵠΔⲆᐃ.y || ⵠΔⲆᐃ.r.x < ⵠΔⲆᐃ.x && ⵠΔⲆᐃ.r.y > ⵠΔⲆᐃ.y) {
                if (ⵠΔⲆᐃ.ᐃⵠᐃΔⲆᐃᐃ % Qs) {
                  O = mo * -_;
                  Q = -_ * mo;
                } else {
                  Q = mo * _;
                  O = _ * mo;
                }
              } else if (ⵠΔⲆᐃ.ᐃⵠᐃΔⲆᐃᐃ % xl) {
                O = mo * _;
                Q = mo * -_;
              } else {
                Q = _ * mo;
                O = -_ * mo;
              }
            } else if (ⵠΔⲆᐃ.ᐃⵠᐃΔⲆᐃᐃ % 2) {
              O = mo * (Math.cos(Y) * Z);
              Q = Z * Math.sin(Y) * mo;
            } else {
              O = -Math.cos(Y) * Z * mo;
              Q = mo * (Z * -Math.sin(Y));
            }
            R.push({
              x: ⵠΔⲆᐃ.x + O,
              y: ⵠΔⲆᐃ.y + Q,
              angle: Y + Math.PI / 2,
              alpha: bt,
              id: S
            });
          }
          for (I = Gd; I < M; I++) {
            if (R[I].id === Cr.ⵠᐃⵠⲆⵠᐃⵠ) {
              R[I].alpha = Math.max(0, R[I].alpha - pf * 1.5);
            } else {
              R[I].alpha = Math.max(0, R[I].alpha - pf / 2.85);
            }
          }
          if (R.length > 0 && R[0].alpha === 0) {
            R.splice(0, yl);
          }
        }
      }
    };
    this.Ⲇᐃⵠ = function () {
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆΔⵠⵠ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⵠⵠΔⵠᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔΔΔⵠᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔⵠΔᐃⲆ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⵠᐃᐃⲆⲆ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⵠΔⵠΔΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ᐃᐃΔⵠᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆΔⵠⵠⵠ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⵠⲆᐃⲆⵠ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔⵠΔΔᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⵠᐃᐃΔΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔⵠⵠⵠΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔΔⲆΔᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ΔΔᐃⵠᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆᐃⲆΔΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆⵠᐃⲆⵠ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆΔΔᐃΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆⲆᐃⵠΔΔᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆⵠⲆⵠᐃ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ⲆΔΔΔΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.ᐃⲆᐃᐃΔ]);
      this.ⵠΔⲆΔⲆ(this.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ]);
    };
    this.ⲆΔΔⲆ = [];
    this.ⲆΔΔⲆ[Cr.ΔΔⲆⵠⵠ] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, ik, 1.05, 1, 0.008, 0.008);
    this.ⲆΔΔⲆ[Cr.ⲆᐃᐃΔΔ] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, wg, 1.08, 1, 0.006, 0.006);
    this.ⲆΔΔⲆ[Cr.ᐃΔⵠⲆⲆ] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 1, 1.02, 1, 0.008, 0.008);
    this.ⲆΔΔⲆ[Cr.ⵠⵠᐃΔⵠ] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, wg, 1.08, js, 0.006, 0.006);
    this.ᐃΔⵠⲆⵠ = [];
    this.ᐃΔⵠⲆⵠ[Fj] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ue, 0.1, Yt, _s, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[js] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pa, 0.4, 1, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[2] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(M, 0.3, Ud, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[_i] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Zh, 0.8, dn, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[4] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.3, 1, tr, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[5] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(tq, 0.8, wg, Lg, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[6] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.5, Eg, Ko, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[iq] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ue, 0.9, 1, Kr, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[8] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.6, 1, _s, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[9] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Bh, 0.2, ub, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[10] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, 0.6, Yt, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[11] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(aa, 0.4, bt, Wh, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[12] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.8, Br, 0, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[13] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.2, 1, Mn, 0.6, 0.6);
    this.ᐃΔⵠⲆⵠ[zr] = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0.7, jh, 0, 0.6, 0.6);
  }
  function kw() {
    this.ᐃΔⲆⵠΔ = "";
    this.ⲆΔⲆⵠ = $t;
    this.ΔᐃᐃΔⵠ = 0;
    this.ᐃΔᐃᐃⲆ = rh;
    this.ΔΔⲆⲆᐃⲆⲆ = 0;
    this.ΔⲆⵠⵠᐃ = 0;
    this.ΔᐃⲆΔⵠ = 0;
    this.ᐃⵠⲆΔΔ = 0;
    this.level = 0;
    this.label = null;
    this.ⲆⵠⵠᐃᐃⲆⲆ = null;
    this.ΔΔⵠΔᐃᐃᐃ = null;
    this.ᐃⵠᐃΔΔ = Pe;
    this.ⲆⲆⲆᐃⵠ = 0;
  }
  function lw() {
    Math.random();
    return "a";
  }
  function mw() {
    Math.random();
    return "s";
  }
  function nw() {
    Math.random();
    return "d";
  }
  function ow() {
    Math.random();
    return "i";
  }
  function pw() {
    Math.random();
    return "r";
  }
  function qw() {
    Math.random();
    return "p";
  }
  function rw() {
    Math.random();
    return "n";
  }
  function sw() {
    Math.random();
    return "C";
  }
  function tw() {
    Math.random();
    return "g";
  }
  function lw() {
    Math.random();
    return "a";
  }
  function uw() {
    Math.random();
    return "o";
  }
  function vw() {
    Math.random();
    return "t";
  }
  function vw() {
    Math.random();
    return "t";
  }
  function ww() {
    Math.random();
    return "e";
  }
  function xw() {
    this.ⵠⲆⵠⲆⲆ = function () { };
    this.ΔΔᐃᐃⵠ = {
      open: fl,
      ΔⲆᐃΔ: 1,
      ᐃᐃΔΔΔ: 1
    };
    this.ⲆΔⵠΔⲆ = {
      ΔⲆᐃΔ: 1,
      open: bs,
      ᐃᐃΔΔΔ: -1
    };
    this.ⵠΔᐃⵠ = {
      ΔⲆᐃΔ: sd,
      ᐃᐃΔΔΔ: -1,
      ⵠᐃᐃⵠⵠ: 0,
      ᐃΔᐃⵠⲆⲆΔ: Mn,
      open: fl
    };
    this.ⵠᐃᐃΔ = {
      open: ys,
      ⲆΔⲆⵠⵠᐃⵠ: 0,
      type: xb,
      ᐃᐃΔΔΔ: -1,
      ΔⲆᐃΔ: er,
      ⵠΔⵠᐃΔⵠᐃ: 0,
      ΔᐃⵠᐃⲆⲆⲆ: Dh
    };
    this.ⲆΔᐃΔ = {
      ΔⲆⵠΔⵠⵠⵠ: Wh,
      ᐃᐃΔΔΔ: -1,
      ⲆΔⲆⵠⵠᐃⵠ: jj,
      ΔⲆᐃΔ: 1,
      ⵠᐃᐃⵠⵠ: 0,
      open: Bh
    };
    this.sign = {
      ᐃᐃΔΔΔ: -dn,
      open: Pa
    };
    this.ᐃⲆⲆⵠⲆ = {
      ⲆᐃⵠⲆ: 0,
      ΔⲆᐃΔ: 1,
      ᐃᐃΔΔΔ: -1,
      open: false
    };
    this.ⵠΔᐃᐃΔ = {
      enabled: Pe,
      ΔⵠᐃⲆⲆ: -Cs,
      label: Zh,
      now: -Ud,
      ᐃⵠⲆᐃ: av
    };
    this.ΔΔΔⲆ = {
      id: -1,
      ⲆᐃⵠⲆ: 0,
      ΔⲆᐃΔ: jh,
      ᐃᐃΔΔΔ: -bt,
      open: false,
      lock: false,
      locked: kk,
      ᐃⲆⵠΔⲆⲆᐃ: Bg,
      ᐃⵠΔⲆᐃⲆⵠ: Jn
    };
    this.ᐃⵠᐃΔΔ = mn;
    this.reconnect = {
      rotate: Dh,
      enabled: false
    };
    this.key = ⵠⵠⵠⲆ.ⲆⵠΔᐃⵠⵠᐃ("key", Vf.location.href);
    var a = ⵠⵠⵠⲆ.ⲆⵠΔᐃⵠⵠᐃ("egg", Vf.location.href);
    if (a) {
      sf.ⲆΔⲆⵠ = parseInt(a);
    }
    this.beta = Vf.location.href.indexOf("http://starve.io/beta") === 0 ? er : 0;
    if (this.key && this.beta) {
      ⲆᐃΔⵠ.set("starve_beta", this.key);
    } else if (this.beta) {
      this.key = ⲆᐃΔⵠ.get("starve_beta");
    }
    this.ΔᐃΔⲆⵠ = ⲆᐃΔⵠ.get("starve_token") ? ⲆᐃΔⵠ.get("starve_token") : ⵠⵠⵠⲆ.ⲆᐃⵠⵠᐃΔⲆ(aw.ⵠⵠᐃⲆⵠⲆⲆⲆᐃ);
    Vf.baguette();
    var b = Vf.kot2;
    function c() {
      this.seed = 1;
      this.ΔᐃⲆΔᐃᐃⲆ = 2;
      this.ⲆⲆᐃΔᐃΔⵠ = 3;
      this.ΔΔⵠᐃᐃⵠᐃΔᐃ = 1;
      this.ⵠⲆΔⵠᐃᐃⲆΔΔ = xl;
      this.ⲆⲆᐃⵠⲆᐃᐃΔΔ = 3;
      this.ⲆⲆⵠΔΔᐃⵠ = function (a) {
        this.seed = 2 + Math.floor(bw.ΔⵠᐃᐃΔ * Math.random());
      };
      this.ᐃᐃⵠⲆⵠΔᐃ = function (a) {
        this.ΔᐃⲆΔᐃᐃⲆ = eh + Math.floor(Math.random() * bw.ΔⵠᐃᐃΔ);
      };
      this.ⵠⲆⵠⲆⵠⲆⲆ = function (a) {
        this.ⲆⲆᐃΔᐃΔⵠ = 2 + Math.floor(bw.ΔⵠᐃᐃΔ * Math.random());
      };
      this.ΔⲆⲆᐃⵠⲆⲆⵠⵠ = function (a) {
        this.ΔΔⵠᐃᐃⵠᐃΔᐃ = 2 + Math.floor(bw.ΔⵠᐃᐃΔ * Math.random());
      };
      this.ΔΔᐃⵠᐃⵠⵠᐃᐃ = function (a) {
        this.ⵠⲆΔⵠᐃᐃⲆΔΔ = 2 + Math.floor(Math.random() * bw.ΔⵠᐃᐃΔ);
      };
      this.ᐃᐃΔᐃⵠⲆΔⵠΔ = function (a) {
        this.ⲆⲆᐃⵠⲆᐃᐃΔΔ = _t + Math.floor(Math.random() * bw.ΔⵠᐃᐃΔ);
      };
      this.ᐃᐃᐃᐃⲆᐃⲆ = function (c, d, e, f, i, j, k) {
        for (var a = ce; a < k;) {
          var m = e * a % ⲆⲆᐃⲆᐃⲆᐃ;
          var n = ⵠⵠᐃᐃᐃᐃⵠ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(f * n + i);
            if (a > j && k > a) {
              var p = Math.random() > 0.5 ? -Fs * pf : pf * 10;
              var q = d * o;
              this.ⵠᐃΔΔᐃΔΔ[m] = Math.max(-bw.ⵠⵠΔⲆᐃΔᐃ, Math.min(bw.ⵠⵠΔⲆᐃΔᐃ, this.ⵠᐃΔΔᐃΔΔ[m] + p));
              this.ᐃΔⲆᐃΔΔΔ[m] = Math.max(-bw.ᐃΔΔᐃⵠⲆΔ, Math.min(bw.ᐃΔΔᐃⵠⲆΔ, this.ᐃΔⲆᐃΔΔΔ[m] + p));
              if (Wh < q) {
                to.beginPath();
                to.arc(a + Ww.ᐃᐃᐃ.x + this.ᐃΔⲆᐃΔΔΔ[m], c + this.ⵠᐃΔΔᐃΔΔ[m] - bw.ⵠⵠΔⲆᐃΔᐃ * 0.8, q, kq, Math.PI * 2);
                if (gf.transition) {
                  var r = gf.time ? sd - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
                  to.fillStyle = ov(83, 156, 160, 236, 247, 249, r);
                } else {
                  to.fillStyle = Cr.ⲆΔᐃⲆⲆΔⲆ[gf.time];
                }
                to.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ΔΔΔⲆⵠΔⵠ = function (c, d, e, f, i, j, k) {
        for (var a = bt; a < k;) {
          var m = a * e % ⲆⲆᐃⲆᐃⲆᐃ;
          var n = ⵠⵠᐃᐃᐃᐃⵠ[m];
          if (n < 0.1) {
            o += 50;
            a += 50;
          } else {
            var o = Math.floor(n * f + i);
            if (j < a && k > a) {
              var p = Math.random() > 0.5 ? pf * -10 : Fn * pf;
              var q = d * o;
              this.ΔⲆΔⲆⲆ[m] = Math.max(-bw.ⵠⵠΔⲆᐃΔᐃ, Math.min(bw.ⵠⵠΔⲆᐃΔᐃ, this.ΔⲆΔⲆⲆ[m] + p));
              this.ΔⵠⵠⲆΔ[m] = Math.max(-bw.ᐃΔΔᐃⵠⲆΔ, Math.min(bw.ᐃΔΔᐃⵠⲆΔ, this.ΔⵠⵠⲆΔ[m] + p));
              if (yk < q) {
                to.beginPath();
                to.arc(c + this.ΔⲆΔⲆⲆ[m] - bw.ⵠⵠΔⲆᐃΔᐃ * 0.8, a + Ww.ᐃᐃᐃ.y + this.ΔⵠⵠⲆΔ[m], q, Mn, Math.PI * 2);
                if (gf.transition) {
                  var r = gf.time ? er - gf.ⵠΔⵠⵠ.ᐃⲆⵠ : gf.ⵠΔⵠⵠ.ᐃⲆⵠ;
                  to.fillStyle = ov(83, 156, 160, 236, 247, 249, r);
                } else {
                  to.fillStyle = Cr.ⲆΔᐃⲆⲆΔⲆ[gf.time];
                }
                to.fill();
              }
            }
            a += o * 2;
          }
        }
      };
      this.ΔᐃᐃⲆᐃᐃΔⵠⲆ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(d - bw.Δⵠⵠⵠⵠ - e - _t) / bw.ⵠⵠᐃⲆⲆⲆⵠ) === rh) {
          this.ⵠⲆⵠⲆⵠⲆⲆ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ᐃᐃᐃᐃⲆᐃⲆ(d, h, this.ⲆⲆᐃΔᐃΔⵠ, 18, lg, f, g);
        to.globalAlpha = Ud;
        if ((h = -(b - bw.ⵠΔΔᐃΔ - e + 500) / bw.ⵠΔΔᐃⵠⲆⵠ) === 0) {
          this.ⲆⲆⵠΔΔᐃⵠ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ᐃᐃᐃᐃⲆᐃⲆ(b, h, this.seed, ps, wh, f, g);
        to.globalAlpha = Fo;
        if (c !== -ub) {
          if ((h = -(c - bw.ᐃⵠᐃⵠⲆ - e + 698) / bw.ᐃᐃΔΔᐃⵠᐃ) <= 0.01) {
            this.ᐃᐃⵠⲆⵠΔᐃ();
          }
          to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
          this.ᐃᐃᐃᐃⲆᐃⲆ(c, h, this.ΔᐃⲆΔᐃᐃⲆ, 6, Ll, f, g);
          to.globalAlpha = 1;
        }
      };
      this.ⵠᐃᐃⲆᐃΔⵠⲆΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(-d + bw.Δⵠⵠⵠⵠ + e + 2) / bw.ⵠⵠᐃⲆⲆⲆⵠ) === Wh) {
          this.ⵠⲆⵠⲆⵠⲆⲆ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ᐃᐃᐃᐃⲆᐃⲆ(d, h, this.ⲆⲆᐃΔᐃΔⵠ, Yj, 16, f, g);
        to.globalAlpha = sd;
        var h = -(-b + bw.ⵠΔΔᐃΔ + e) / bw.ⵠΔΔᐃⵠⲆⵠ;
        if (rh === h) {
          this.ⲆⲆⵠΔΔᐃⵠ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ᐃᐃᐃᐃⲆᐃⲆ(b, h, this.seed, 12, 10, f, g);
        to.globalAlpha = Yt;
        if (c !== -1) {
          if ((h = -(-c + bw.ᐃⵠᐃⵠⲆ + e) / bw.ᐃᐃΔΔᐃⵠᐃ) <= 0.01) {
            this.ᐃᐃⵠⲆⵠΔᐃ();
          }
          to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
          this.ᐃᐃᐃᐃⲆᐃⲆ(c, h, this.ΔᐃⲆΔᐃᐃⲆ, 6, Mr, f, g);
          to.globalAlpha = V;
        }
      };
      this.ΔⵠΔⲆⵠᐃᐃⲆⵠ = function (b, c, d, e, f, g) {
        var h;
        f -= 30;
        g += 30;
        if ((h = -(-d + bw.Δⵠⵠⵠⵠ + e + _l) / bw.ⵠⵠᐃⲆⲆⲆⵠ) === Ko) {
          this.ⵠⲆⵠⲆⵠⲆⲆ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ΔΔΔⲆⵠΔⵠ(d, h, this.ⲆⲆᐃΔᐃΔⵠ, Ot, 16, f, g);
        to.globalAlpha = 1;
        if ((h = -(-b + bw.ⵠΔΔᐃΔ + e) / bw.ⵠΔΔᐃⵠⲆⵠ) === ko) {
          this.ⲆⲆⵠΔΔᐃⵠ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ΔΔΔⲆⵠΔⵠ(b, h, this.seed, pk, 10, f, g);
        to.globalAlpha = 1;
        if (c !== -1) {
          if ((h = -(-c + bw.ᐃⵠᐃⵠⲆ + e) / bw.ᐃᐃΔΔᐃⵠᐃ) <= 0.01) {
            this.ᐃᐃⵠⲆⵠΔᐃ();
          }
          to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
          this.ΔΔΔⲆⵠΔⵠ(c, h, this.ΔᐃⲆΔᐃᐃⲆ, za, 6, f, g);
          to.globalAlpha = 1;
        }
      };
      this.ΔΔⲆΔⲆⵠⲆΔΔ = function (b, c, d, e, f, g) {
        f -= 30;
        g += 30;
        if ((h = -(d - bw.Δⵠⵠⵠⵠ - e - _t) / bw.ⵠⵠᐃⲆⲆⲆⵠ) === Fj) {
          this.ⵠⲆⵠⲆⵠⲆⲆ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ΔΔΔⲆⵠΔⵠ(d, h, this.ⲆⲆᐃΔᐃΔⵠ, Kt, 16, f, g);
        to.globalAlpha = 1;
        var h = -(b - bw.ⵠΔΔᐃΔ - e + 500) / bw.ⵠΔΔᐃⵠⲆⵠ;
        if (jj === h) {
          this.ⲆⲆⵠΔΔᐃⵠ();
        }
        to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
        this.ΔΔΔⲆⵠΔⵠ(b, h, this.seed, dl, lj, f, g);
        to.globalAlpha = Ud;
        if (c !== -er) {
          if ((h = -(c - bw.ᐃⵠᐃⵠⲆ - e + 698) / bw.ᐃᐃΔΔᐃⵠᐃ) <= 0.01) {
            this.ᐃᐃⵠⲆⵠΔᐃ();
          }
          to.globalAlpha = ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(h);
          this.ΔΔΔⲆⵠΔⵠ(c, h, this.ΔᐃⲆΔᐃᐃⲆ, ss, xu, f, g);
          to.globalAlpha = 1;
        }
      };
      this.w1 = {
        r: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ΔⵠΔⲆΔΔᐃ, 0, eg, bw.ΔⲆⵠΔᐃ, bw.ΔⲆⵠΔᐃ, bw.ⵠⵠᐃⲆⲆⲆⵠ),
        ⵠΔⲆΔ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ᐃᐃΔΔΔⵠⵠ, 0, rk, bw.ⵠⵠᐃⲆⲆⲆⵠ, bw.ⵠⵠᐃⲆⲆⲆⵠ, bw.ΔⲆⵠΔᐃ)
      };
      this.w2 = {
        r: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ᐃᐃΔᐃᐃⲆᐃ, 0, 10, bw.ΔΔᐃᐃⵠΔⵠ, bw.ΔΔᐃᐃⵠΔⵠ, bw.ⵠΔΔᐃⵠⲆⵠ),
        ⵠΔⲆΔ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ, tr, 10, bw.ⵠΔΔᐃⵠⲆⵠ, bw.ⵠΔΔᐃⵠⲆⵠ, bw.ΔΔᐃᐃⵠΔⵠ)
      };
      this.w3 = {
        r: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⲆΔᐃⲆⵠᐃᐃ, 0, 10, bw.ᐃⲆΔΔⵠⵠΔ, bw.ᐃⲆΔΔⵠⵠΔ, bw.ᐃᐃΔΔᐃⵠᐃ),
        ⵠΔⲆΔ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ, 0, Pr, bw.ᐃᐃΔΔᐃⵠᐃ, bw.ᐃᐃΔΔᐃⵠᐃ, bw.ᐃⲆΔΔⵠⵠΔ)
      };
      this.ⲆᐃⵠⲆΔⲆⵠᐃⵠ = function (a) {
        if (a.r.x === a.r.ᐃⲆⲆⵠΔ) {
          if (a.ⵠΔⲆΔ.ᐃⲆⲆⵠΔ === a.ⵠΔⲆΔ.x) {
            return a.r;
          } else {
            return a.ⵠΔⲆΔ;
          }
        } else {
          return a.r;
        }
      };
      this.ⵠᐃⲆ = function (a) {
        var b;
        if (a.r.x === a.r.ᐃⲆⲆⵠΔ) {
          if (a.ⵠΔⲆΔ.x === a.ⵠΔⲆΔ.ᐃⲆⲆⵠΔ) {
            a.r.ᐃⵠⲆⵠΔΔⵠ();
            a.ⵠΔⲆΔ.ᐃⵠⲆⵠΔΔⵠ();
            b = a.r;
          } else {
            b = a.ⵠΔⲆΔ;
          }
        } else {
          b = a.r;
        }
        b.ⵠⵠΔⲆⵠⵠⲆ(b.ᐃⲆⲆⵠΔ);
        return b;
      };
      this.ΔⲆΔⲆⲆ = [];
      this.ΔⵠⵠⲆΔ = [];
      this.ⵠᐃΔΔᐃΔΔ = [];
      this.ᐃΔⲆᐃΔΔΔ = [];
      this.ⵠⲆⵠⲆⲆ = function () {
        for (var a = 0; a < ⲆⲆᐃⲆᐃⲆᐃ; a++) {
          this.ΔⲆΔⲆⲆ[a] = Math.floor(ⵠⵠᐃᐃᐃᐃⵠ[a] * bw.ⵠⵠΔⲆᐃΔᐃ);
          this.ΔⵠⵠⲆΔ[a] = Math.floor(bw.ᐃΔΔᐃⵠⲆΔ * ⵠⵠᐃᐃᐃᐃⵠ[a]);
          this.ⵠᐃΔΔᐃΔΔ[a] = Math.floor(ⵠⵠᐃᐃᐃᐃⵠ[a] * bw.ⵠⵠΔⲆᐃΔᐃ);
          this.ᐃΔⲆᐃΔΔΔ[a] = Math.floor(bw.ᐃΔΔᐃⵠⲆΔ * ⵠⵠᐃᐃᐃᐃⵠ[a]);
        }
        this.w1.r.x = this.w1.r.ᐃⲆⲆⵠΔ;
        this.w2.r.ᐃΔⲆᐃΔ = 3.5;
        this.w3.r.ᐃΔⲆᐃΔ = 2;
      };
      this.ⵠⲆⵠⲆⲆ();
    }
    this.ΔᐃΔⲆⵠ = b.substring(0, 6) + this.ΔᐃΔⲆⵠ.substring(za);
    this.ⵠⵠⵠⵠΔⵠᐃ = ⲆᐃΔⵠ.get("starve_token_id") ? ⲆᐃΔⵠ.get("starve_token_id") : "";
    this.id = Wh;
    this.ᐃⲆᐃⲆ = 0;
    this.Δⵠⵠ = 0;
    this.ⵠⲆΔᐃⲆΔⲆ = {
      ΔΔᐃΔⲆⲆⲆ: "",
      ⲆⲆⲆᐃⵠ: 0,
      ⲆⲆΔᐃΔ: yk,
      ΔᐃⲆΔᐃⵠⵠ: 0
    };
    this.ΔⲆᐃⵠⲆΔΔⲆⲆ = {
      connected: 0,
      ⲆᐃᐃⵠΔᐃᐃ: new Date().getTime()
    };
    this.ⲆⲆⲆⵠⵠ = [];
    this.ᐃᐃᐃⵠΔⵠⲆ = function (a) {
      for (var b = 0; b < this.ⲆⲆⲆⵠⵠ.length; b++) {
        if (this.ⲆⲆⲆⵠⵠ[b] == a) {
          return Vn;
        }
      }
      return false;
    };
    this.ΔⵠΔⲆᐃ = {
      ΔⵠᐃⲆⲆ: Ko,
      time: 0,
      value: 0,
      open: false,
      ᐃⵠⲆᐃ: function () {
        if (this.open) {
          var a = new Date().getTime();
          this.time = Math.floor((a - this.ΔⵠᐃⲆⲆ) / 1000);
          if (this.time < 60) {
            Yw.ΔⵠΔⲆᐃ.button.ᐃⵠⲆᐃ(to);
          } else {
            document.getElementById("shop_starterkit").style.display = "none";
            this.open = false;
          }
        }
      }
    };
    this.ᐃⲆⲆⲆⲆ = {
      id: -1,
      ΔⲆᐃΔ: -dn,
      lock: 0,
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, bt, 0, Br / 30, jh),
      wait: false
    };
    this.ⵠⵠΔᐃᐃ = {
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Lu, 1, 0, 0.2, 1),
      wait: aa
    };
    this.ⵠⲆΔᐃᐃ = {
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, _s, Yt, 0, Yt, sd),
      wait: ys
    };
    this.ⵠΔΔⲆᐃ = {
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(gg, 0, 1, 0, 1 / oa, 1),
      wait: false
    };
    this.ᐃᐃᐃ = new ⵠⵠⵠⲆ.ΔⲆᐃⲆⵠᐃⲆ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, Lu, 0.4, Ol, 0, lo, gq, lo, gq);
    this.ᐃᐃᐃ.ΔⵠᐃⲆⲆ = 0;
    this.ᐃᐃᐃ.ⵠΔᐃⲆⲆⵠⵠ = 0;
    this.ᐃᐃᐃ.Ⲇᐃⵠ = function () {
      if (Dh < this.ⵠΔᐃⲆⲆⵠⵠ) {
        this.ⵠΔᐃⲆⲆⵠⵠ -= pf;
      } else {
        var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        if (!Spectator) {
          if (a) {
            this.ΔⵠᐃⲆⲆ = 0;
            var b = Math.max(Math.min(lo - a.x, -2), 2 - gf.w + ro);
            var c = Math.max(Math.min(gq - a.y, -2), -gf.ᐃⵠⲆ + tg + so);
            this.ⵠⵠΔⲆⵠⵠⲆ({
              x: b,
              y: c
            });
          } else {
            this.ΔⵠᐃⲆⲆ += pf;
            if (vg < this.ΔⵠᐃⲆⲆ) {
              this.ΔⵠᐃⲆⲆ = 0;
              if (!Ww.reconnect.enabled) {
                ᐃΔΔᐃ.ⵠⲆᐃᐃⵠΔⵠᐃⲆ();
              }
            }
          }
        }
      }
    };
    this.ᐃᐃᐃ.w = screen.width;
    this.ᐃᐃᐃ.ᐃⵠⲆ = screen.height;
    this.ᐃᐃᐃ.ⲆΔΔΔⲆⵠᐃ = this.ᐃᐃᐃ.w;
    this.ᐃᐃᐃ.ᐃᐃᐃᐃⲆⲆⵠ = this.ᐃᐃᐃ.ᐃⵠⲆ;
    this.ᐃᐃᐃ.rx = tr;
    this.ᐃᐃᐃ.ry = 0;
    this.ᐃᐃᐃ.ᐃΔᐃⵠⵠΔⵠⲆⲆ = 0;
    this.ᐃᐃᐃ.ᐃΔⵠⲆⲆⲆⵠᐃᐃ = 0;
    this.ᐃᐃᐃ.ᐃΔᐃⲆⵠ = function (a, b) {
      this.x = -Math.min(Math.max(-gf.ⵠⵠᐃΔᐃⲆⵠ * _l, a - gf.ⵠⵠᐃΔᐃⲆⵠ - this.ⲆΔΔΔⲆⵠᐃ / 2), gf.w - this.ⲆΔΔΔⲆⵠᐃ);
      this.y = -Math.min(Math.max(-gf.ⵠΔⵠᐃⲆⵠΔ * 2, b - (gf.ⵠΔⵠᐃⲆⵠΔ + this.ᐃᐃᐃᐃⲆⲆⵠ) / 2), gf.ᐃⵠⲆ - this.ᐃᐃᐃᐃⲆⲆⵠ + gf.ⵠΔⵠᐃⲆⵠΔ);
      this.ᐃⲆⲆⵠΔ = this.x;
      this.ᐃᐃⲆⲆΔᐃⲆ = this.y;
    };
    this.control = {
      angle: kq,
      timeout: rh,
      ᐃⲆⵠΔΔⵠΔ: 0,
      ⲆᐃΔᐃ: Mn,
      attack: 0,
      Ⲇᐃⵠ: function () {
        var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        if (a) {
          var b = {
            x: Ww.ᐃᐃᐃ.x + a.x,
            y: Ww.ᐃᐃᐃ.y + a.y
          };
        } else {
          b = hq;
        }
        var c = ⵠⵠⵠⲆ.ⲆⵠⵠΔΔⵠⵠ(mf.ⵠⵠᐃᐃ, b);
        var d = false;
        this.ⲆᐃΔᐃ += pf;
        if (!mf.state) {
          if (a && !(a.action & $v.ᐃᐃⲆᐃΔⵠΔ) && this.ⲆᐃΔᐃ > aw.ᐃᐃⲆᐃΔⵠΔ) {
            this.attack = 1;
            d = le;
            this.ⲆᐃΔᐃ = Ko;
            ᐃΔΔᐃ.ⵠⵠᐃⵠⲆⲆΔⲆΔ(c);
          }
        }
        if (a) {
          a.angle = c;
          a.ΔΔΔⲆⲆΔΔ = c;
        }
        if (!d) {
          this.timeout += pf;
          if (this.timeout > aw.ⲆΔⵠΔΔΔᐃ) {
            this.timeout = Fj;
            if (Math.abs(this.angle - c) > 0.005) {
              ᐃΔΔᐃ.ⵠⲆⵠⵠᐃᐃᐃΔⲆ(c);
              this.angle = c;
            }
          }
        }
        if (!Ww.ΔΔⲆⲆΔ.open && !Ww.ΔⵠⵠⵠⲆ.open) {
          var e = _s;
          if (cf.ᐃⵠΔΔⲆᐃᐃ()) {
            e |= js;
          }
          if (cf.ΔⲆΔⵠΔⵠⲆ()) {
            e |= ib;
          }
          if (cf.ⲆⵠᐃΔⲆⵠᐃ()) {
            e |= 4;
          }
          if (cf.ⲆᐃⵠⵠΔᐃΔ()) {
            e |= 8;
          }
          if (this.ᐃⲆⵠΔΔⵠΔ != e) {
            ᐃΔΔᐃ.ΔᐃᐃᐃᐃΔⲆⵠᐃ(e);
          }
          this.ᐃⲆⵠΔΔⵠΔ = e;
        }
      }
    };
    this.ᐃⲆΔᐃ = {
      c: 1,
      ⵠΔⲆΔ: 1,
      ᐃⵠⲆ: 1,
      ⵠᐃⲆ: er,
      ᐃⲆΔ: wg,
      ᐃᐃᐃⲆⲆᐃⲆ: ik,
      ΔᐃⲆᐃⵠⵠΔ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(tk, Kr, 1, 0, 3, 3),
      ᐃⲆⲆΔⵠᐃⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Rl, 0, bt, Wh, 2, 2),
      ΔⲆⲆΔⲆⵠΔ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Xs, Lu, ce, 0, 3, B),
      ΔⲆⲆⵠΔᐃⲆ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(true, 0, 1, 0, Kk, _i),
      ⵠⲆⲆΔΔⲆΔ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Rl, 0, 1, Ko, ta, 3),
      ΔᐃⵠⵠΔΔⵠ: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(ha, 0, 1, Dh, 3, 3),
      ᐃΔᐃⲆⲆ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, Jt, js, 0, kq, Eg),
      ΔᐃΔᐃⲆ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, xb, 1, Kr, 0, ik),
      ⲆⲆⵠⵠΔⵠᐃ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, jj, dn, 0, 0, 1),
      ᐃⵠⵠΔⵠΔⵠ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, $t, 1, 0, 0, 1),
      ᐃⲆⲆᐃΔⵠⵠ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, 0, wg, xb, Fj, 1),
      ᐃⲆⵠⵠⵠ: new ⵠⵠⵠⲆ.ⲆΔᐃⲆΔ(ⵠⵠⵠⲆ.ⵠⵠΔⵠⲆⲆⵠ, Lu, ik, $t, 0, 1),
      Ⲇᐃⵠ: function () {
        this.ΔᐃⲆᐃⵠⵠΔ.Ⲇᐃⵠ();
        this.ᐃⲆⲆΔⵠᐃⵠ.Ⲇᐃⵠ();
        this.ΔⲆⲆΔⲆⵠΔ.Ⲇᐃⵠ();
        this.ΔⲆⲆⵠΔᐃⲆ.Ⲇᐃⵠ();
        this.ⵠⲆⲆΔΔⲆΔ.Ⲇᐃⵠ();
        this.ΔᐃⵠⵠΔΔⵠ.Ⲇᐃⵠ();
        this.ᐃΔᐃⲆⲆ.ⵠⵠΔⲆⵠⵠⲆ(this.c);
        this.ΔᐃΔᐃⲆ.ⵠⵠΔⲆⵠⵠⲆ(this.ⵠΔⲆΔ);
        this.ⲆⲆⵠⵠΔⵠᐃ.ⵠⵠΔⲆⵠⵠⲆ(this.ᐃⵠⲆ);
        this.ᐃⵠⵠΔⵠΔⵠ.ⵠⵠΔⲆⵠⵠⲆ(this.ⵠᐃⲆ);
        this.ᐃⲆⲆᐃΔⵠⵠ.ⵠⵠΔⲆⵠⵠⲆ(this.ᐃⲆΔ);
        this.ᐃⲆⵠⵠⵠ.ⵠⵠΔⲆⵠⵠⲆ(this.ᐃᐃᐃⲆⲆᐃⲆ);
      }
    };
    this.ⵠΔⵠᐃⵠⲆⲆ = false;
    this.ⵠⵠⵠⵠⲆⵠⵠ = false;
    this.ⵠⲆᐃᐃⲆ = sr;
    this.Δᐃⵠⵠⵠⵠᐃ = false;
    this.ᐃᐃⲆᐃ = {
      max: bw.ⵠⵠⵠⵠⲆΔᐃ,
      ᐃⲆᐃΔᐃⵠⲆ: 0,
      ᐃΔᐃᐃⲆ: 0,
      ⲆᐃΔ: [],
      ᐃⵠⲆΔⲆ: [],
      ΔΔᐃⵠⲆᐃΔ: function (a, b) {
        if (a === 1) {
          this.ᐃΔᐃᐃⲆ = bw.ⵠᐃⵠⵠΔⵠΔᐃΔ;
        }
        this.ᐃⲆᐃΔᐃⵠⲆ += b;
        this.max = bw.ⵠⵠⵠⵠⲆΔᐃ + this.ᐃⲆᐃΔᐃⵠⲆ + this.ᐃΔᐃᐃⲆ;
      },
      ⲆᐃᐃΔⵠᐃⵠ: {
        item: -1,
        Ⲇⵠ: null,
        ⵠⲆΔⲆⵠ: Mn,
        ΔΔⲆᐃⵠΔᐃ: Lg,
        ᐃᐃⲆⵠΔ: -1,
        ΔⵠⵠⲆⵠ: -1,
        ⵠⲆᐃⵠⵠ: function (a) {
          if (!!this.ⵠⲆΔⲆⵠ && (a.x !== this.ᐃᐃⲆⵠΔ || a.y !== this.ΔⵠⵠⲆⵠ)) {
            this.ΔΔⲆᐃⵠΔᐃ = 1;
          }
        },
        start: function (a, b) {
          this.ᐃᐃⲆⵠΔ = b.x;
          this.ΔⵠⵠⲆⵠ = b.y;
          this.item = a;
          this.Ⲇⵠ = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ[a].info.Ⲇⵠ[2];
          this.ⵠⲆΔⲆⵠ = 1;
        },
        stop: function () {
          this.ⵠⲆΔⲆⵠ = tr;
          this.ΔΔⲆᐃⵠΔᐃ = 0;
          this.ᐃᐃⲆⵠΔ = -1;
          this.ΔⵠⵠⲆⵠ = -ce;
        },
        release: function () {
          var a = -ce;
          var b = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ;
          var c = 0;
          if (this.ⵠⲆΔⲆⵠ && this.ΔΔⲆᐃⵠΔᐃ) {
            for (var d = 0; d < b.length; d++) {
              if (b[d].info.state === Ov) {
                a = d;
                break;
              }
            }
            if (a !== -Eg && a !== this.item && b[this.item]) {
              c = Eg;
              var f = b[a];
              b[a] = b[this.item];
              b[this.item] = f;
              Yw.ⵠⲆⲆᐃⵠᐃⵠ();
            }
          }
          this.stop();
          return c;
        },
        ᐃⵠⲆᐃ: function (a, b) {
          if (this.ⵠⲆΔⲆⵠ && this.ΔΔⲆᐃⵠΔᐃ) {
            Em(to, this.Ⲇⵠ, Math.floor(a - this.Ⲇⵠ.width / Ok), Math.floor(b - this.Ⲇⵠ.height / yh));
          }
        }
      },
      ⲆⵠⵠⵠᐃΔᐃΔΔ: function (a) {
        for (d = 0; d < a.length; d++) {
          if (this.ⲆᐃΔ[a[d][Ko]] == a[d][er]) {
            return true;
          }
        }
        return false;
      },
      ΔᐃⵠΔⵠ: function (a) {
        for (var b = tr; b < this.ᐃⵠⲆΔⲆ.length; b++) {
          if (this.ᐃⵠⲆΔⲆ[b].id == a) {
            return b;
          }
        }
        return -ce;
      },
      ᐃΔΔⲆᐃⵠⲆ: function (a, b) {
        this.ⲆᐃΔ[a] = 0;
        this.ᐃⵠⲆΔⲆ.splice(b, 1);
        Yw.ⵠⲆⲆᐃⵠᐃⵠ();
      },
      ⵠᐃΔⵠΔΔⵠ: function (a, b, c) {
        Ⲇᐃⵠ = true;
        this.ⲆᐃΔ[a] = Math.max(Wh, this.ⲆᐃΔ[a] - b);
        if (!this.ⲆᐃΔ[a] && c >= _s) {
          this.ᐃΔΔⲆᐃⵠⲆ(a, c);
        }
      }
    };
    this.ⵠⵠⲆᐃΔ = {
      enabled: Bh,
      translate: {
        y: Ko,
        x: 0
      },
      ⲆΔΔⲆΔΔΔ: function () {
        if (gf.mode == bw.ΔⵠΔⲆⵠⲆΔ && !Ww.ⵠⵠⵠⵠⲆⵠⵠ) {
          Ww.ⵠⵠⲆᐃΔ.enabled = !Ww.ⵠⵠⲆᐃΔ.enabled;
          if (Ww.ⵠⵠⲆᐃΔ.enabled) {
            Yw.options.ⵠᐃΔⲆΔⲆᐃ.display = "inline-block";
          } else {
            Yw.options.ⵠᐃΔⲆΔⲆᐃ.display = "none";
          }
        }
      }
    };
    Yw.options.ⵠᐃΔⲆΔⲆᐃ.display = "none";
    this.ⲆⵠⵠⵠⲆ = {
      enabled: ys,
      translate: {
        x: 0,
        y: 0
      },
      ΔⵠᐃⲆⲆ: Ko,
      ⲆΔΔⲆΔΔΔ: function () {
        Ww.ⲆⵠⵠⵠⲆ.enabled = !Ww.ⲆⵠⵠⵠⲆ.enabled;
        if (Ww.ⲆⵠⵠⵠⲆ.enabled) {
          Yw.options.ⵠⵠΔⲆΔⵠᐃ.display = "inline-block";
        } else {
          Yw.options.ⵠⵠΔⲆΔⵠᐃ.display = "none";
        }
      },
      Ⲇᐃⵠ: function () {
        if (!!this.enabled && Ww.ΔⲆᐃᐃ.id < 0 && !Yw.ΔΔΔⵠ.open) {
          this.ΔⵠᐃⲆⲆ += pf;
          if (this.ΔⵠᐃⲆⲆ > Qs) {
            this.ΔⵠᐃⲆⲆ = 0;
            if (Ww.ᐃⲆΔᐃ.ᐃⵠⲆ < 0.35) {
              if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃᐃΔⲆⲆ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃᐃΔⲆⲆ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃᐃΔⲆⲆ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ⲆⵠⵠⲆⵠ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ⲆⵠⵠⲆⵠ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⲆⵠⵠⲆⵠ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃⲆΔⵠΔ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃⲆΔⵠΔ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃⲆΔⵠΔ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ⵠᐃⵠⵠⵠ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ⵠᐃⵠⵠⵠ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⵠᐃⵠⵠⵠ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ΔⵠⲆΔᐃ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ΔⵠⲆΔᐃ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔⵠⲆΔᐃ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ⲆΔⵠᐃⲆ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ⲆΔⵠᐃⲆ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⲆΔⵠᐃⲆ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ⵠᐃⵠⲆⵠ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ⵠᐃⵠⲆⵠ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⵠᐃⵠⲆⵠ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃᐃⵠⲆᐃ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃᐃⵠⲆᐃ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃᐃⵠⲆᐃ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃΔⵠᐃⲆ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃΔⵠᐃⲆ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃΔⵠᐃⲆ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.Ⲇⵠᐃⵠⵠ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.Ⲇⵠᐃⵠⵠ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.Ⲇⵠᐃⵠⵠ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ΔᐃᐃΔΔ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ΔᐃᐃΔΔ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ΔᐃᐃΔΔ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃⵠⲆⵠΔ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃⵠⲆⵠΔ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃⵠⲆⵠΔ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ⲆᐃᐃⵠⲆ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ⲆᐃᐃⵠⲆ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ⲆᐃᐃⵠⲆ));
              } else if (Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃᐃᐃⲆⲆ]) {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃᐃᐃⲆⲆ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃᐃᐃⲆⲆ));
              }
            } else if (Ww.ᐃⲆΔᐃ.ⵠᐃⲆ < 0.35 && Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[Dr.ᐃⲆᐃⵠᐃ]) {
              ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(Dr.ᐃⲆᐃⵠᐃ, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Dr.ᐃⲆᐃⵠᐃ));
            }
          }
        }
      }
    };
    Yw.options.ⵠⵠΔⲆΔⵠᐃ.display = "none";
    this.ΔⲆᐃᐃ = {
      id: -1,
      ⵠᐃΔΔ: -1,
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pk, ko, ub, 0, Ur, 1),
      ᐃΔⲆΔⲆ: Zh,
      Ⲇⵠᐃᐃ: -1,
      mode: 0,
      label: [],
      ⲆⵠᐃⲆᐃ: [],
      ᐃⵠΔΔΔ: false,
      ΔⵠΔⵠᐃ: false,
      ⲆᐃⵠⵠΔⵠΔ: false,
      ⲆΔⵠΔⲆ: false,
      ⲆΔⵠⵠᐃⲆⲆΔΔ: function () {
        this.mode = this.mode === Gd ? yl : 0;
      },
      ΔᐃⲆᐃⲆⲆΔΔΔ: function (a) {
        this.ᐃⵠΔΔΔ = a;
        var b = Yw.ΔΔΔⵠ;
        if (b.open) {
          b.ⵠⵠⲆΔᐃⵠⵠ(b.button);
        }
        this.Ⲇᐃⵠ();
      },
      ΔⲆΔⵠⲆⲆΔΔⵠ: function (a) {
        var b = Hs[a];
        this.id = a;
        this.ᐃΔⲆΔⲆ = Rl;
        gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        this.timeout.ΔⲆⵠΔΔΔⵠ = b.time * 8;
        this.ⵠᐃΔΔ = b.ⵠᐃΔΔ;
      },
      ᐃⵠⲆⲆᐃᐃⲆⵠᐃ: function (a) {
        var b = Hs[a];
        this.id = a;
        this.ᐃΔⲆΔⲆ = wt;
        var c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        if (c && c.right == Dr.ⲆⵠⵠⲆⲆ) {
          this.timeout.ΔⲆⵠΔΔΔⵠ = b.time * 3;
        } else {
          this.timeout.ΔⲆⵠΔΔΔⵠ = b.time;
        }
        this.ⵠᐃΔΔ = b.ⵠᐃΔΔ;
        for (var d = Wh; d < b.r.length; d++) {
          var e = b.r[d];
          Ww.ᐃᐃⲆᐃ.ⵠᐃΔⵠΔΔⵠ(e[0], e[1], Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(e[Wh]));
        }
        Yw.ⵠⲆⲆᐃⵠᐃⵠ();
      },
      Ⲇᐃⵠ: function () {
        this.ⲆⵠᐃⲆᐃ = [];
        if (Yw.ᐃⲆᐃΔᐃ.ΔⲆᐃᐃ === ce) {
          Yw.ᐃⲆᐃΔᐃ.display = 0;
        }
        for (var a in Hs) {
          var b = Hs[a];
          var c = ha;
          if (b.r) {
            for (var d = Jt; d < b.r.length; d++) {
              if (Ww.ᐃᐃⲆᐃ.max >= bw.ⲆᐃⵠⲆᐃⵠᐃ && b.id === Xa.ᐃⵠΔⵠ) {
                c = kk;
                break;
              }
              if (b.w > this.ᐃⵠΔΔΔ || b.f > this.ΔⵠΔⵠᐃ || b.ᐃⲆΔ > this.ⲆᐃⵠⵠΔⵠΔ || b.e > this.ⲆΔⵠΔⲆ) {
                c = Zh;
                break;
              }
              var f = b.r[d];
              if (!Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[f[0]] || Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[f[Lg]] < f[Cs]) {
                c = aa;
                break;
              }
            }
            if (c) {
              this.ⲆⵠᐃⲆᐃ.push(Yw.ⵠⵠⵠ[b.id]);
            }
          }
        }
        Yw.ᐃΔⵠⵠᐃᐃⲆ();
        Yw.ᐃⲆᐃⵠⲆΔⵠ();
        Yw.ΔⲆⵠⵠⲆⵠΔ();
        Yw.ⵠⵠᐃⵠΔⲆᐃ();
        Yw.ΔᐃᐃΔΔᐃΔ();
        Yw.ΔⵠᐃᐃᐃⲆΔ();
        Yw.sign.ⲆΔᐃΔⲆⵠⲆ();
      },
      ᐃⵠⲆⵠΔΔⵠ: function () {
        this.id = -1;
        this.ᐃΔⲆΔⲆ = Bj;
        this.timeout.ᐃⲆⵠ = Ol;
        this.timeout.ᐃⲆΔ = tq;
        this.Ⲇᐃⵠ();
      }
    };
    this.ᐃⵠᐃᐃΔΔⵠ = {
      message: Uq,
      ᐃⵠⲆᐃ: _u
    };
    this.alert = {
      timeout: new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pq, dn, er, tr, 4, 0.3),
      text: "",
      label: null,
      ᐃⵠⲆᐃ: bv,
      list: []
    };
    this.ΔΔᐃⵠΔ = {
      ⵠᐃ: document.createElement("canvas"),
      ΔᐃⲆᐃΔ: [],
      Ⲇᐃⵠ: vi,
      translate: {
        x: 0,
        y: 0
      },
      sort: function () {
        var a = [];
        for (var b = gf.ΔⲆᐃⵠ, c = 0; c < b.length; c++) {
          if (b[c].ᐃⵠᐃΔΔ) {
            a.push({
              id: c,
              ᐃᐃⵠⲆ: b[c].ⲆⲆⲆᐃⵠ
            });
          }
        }
        a.sort(function (a, b) {
          return b.ᐃᐃⵠⲆ - a.ᐃᐃⵠⲆ;
        });
        this.ΔᐃⲆᐃΔ = [];
        for (c = Lu; c < a.length && c < 10; c++) {
          this.ΔᐃⲆᐃΔ.push(a[c].id);
        }
        this.Ⲇᐃⵠ = Xs;
      },
      ⵠⲆⵠⲆⲆ: function (a) {
        for (var b = gf.ΔⲆᐃⵠ, c = jj; c < b.length; c++) {
          b[c].ⲆⲆⲆᐃⵠ = 0;
        }
        b[Ww.id].ⲆⲆⲆᐃⵠ = ⵠⵠⵠⲆ.ⲆΔⵠᐃᐃⵠΔ(a[jh]);
        this.ΔᐃⲆᐃΔ = [];
        for (c = 2; c < a.length; c += $r) {
          this.ΔᐃⲆᐃΔ.push(a[c]);
          b[a[c]].ⲆⲆⲆᐃⵠ = ⵠⵠⵠⲆ.ⲆΔⵠᐃᐃⵠΔ(a[c + js]);
        }
        this.Ⲇᐃⵠ = Oh;
      }
    };
    this.ΔΔᐃⵠΔ.ⵠᐃ.width = mo * 180;
    this.ΔΔᐃⵠΔ.ⵠᐃ.height = mo * 300;
    this.ΔΔᐃⵠΔ.Δ = this.ΔΔᐃⵠΔ.ⵠᐃ.getContext("2d");
    this.ΔⵠⵠⵠⲆ = {
      open: false,
      input: document.getElementById("commandInput"),
      ΔΔΔΔⵠᐃΔ: document.getElementById("commandsBox"),
      style: document.getElementById("commandMainBox").style,
      ⵠᐃⲆⲆᐃΔⵠⵠΔ: function (a) {
        this.ΔΔΔΔⵠᐃΔ.innerHTML += a;
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(ro / tg - 300) + "px";
        this.style.top = Math.floor(so / 2 - 250) + "px";
      },
      ΔⲆⵠⲆⵠᐃΔᐃⵠ: function () {
        this.ΔΔΔΔⵠᐃΔ.innerHTML = "";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        this.open = false;
        this.style.display = "none";
      },
      ⵠⵠᐃⵠⵠ: function (a) {
        var b = "<table class=\"tableList\">";
        for (var c = 0; c < a.length; c++) {
          if (c % 3 == 0) {
            b += "<tr>";
          }
          b += "<td class=\"tableList\">" + a[c] + "</td>";
          if ((c + 1) % lk == 0 || c + 1 === a.length) {
            b += "</tr>";
          }
        }
        return b += "</table>";
      },
      ΔΔⵠⵠⵠ: function (a, b, c, d) {
        d = d || "";
        var f = "<div class=commandWritten>" + (a = a || "");
        f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
        f += (c = c || "") + "</div>" + d + "</div>";
        this.ⵠᐃⲆⲆᐃΔⵠⵠΔ(f);
        this.ⲆⵠⲆᐃⵠᐃΔⲆⲆ();
      },
      ⲆⵠⲆᐃⵠᐃΔⲆⲆ: function () {
        this.ΔΔΔΔⵠᐃΔ.scrollTop = this.ΔΔΔΔⵠᐃΔ.scrollHeight;
      },
      ΔⲆᐃⲆᐃⲆⲆ: function (a) {
        switch (a) {
          case "clean":
            this.ΔⲆⵠⲆⵠᐃΔᐃⵠ();
            return true;
          case "list":
            var b = "";
            for (var c = gf.ΔⲆᐃⵠ, d = 0; d < c.length; d++) {
              var e = c[d];
              if (e.ᐃⵠᐃΔΔ) {
                b += e.ᐃΔⲆⵠΔ + " <span style=\"color:green\">#" + d + "</span><br />";
              }
            }
            this.ΔΔⵠⵠⵠ("list", 1, "List all connected players", b);
            return true;
          case "weapon-list":
            this.ΔΔⵠⵠⵠ("Weapons", er, "List all weapons in the game", this.ⵠⵠᐃⵠⵠ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
            return true;
          case "tool-list":
            this.ΔΔⵠⵠⵠ("Tools", wg, "List all tools in the game", this.ⵠⵠᐃⵠⵠ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
            return ha;
          case "survival-list":
            this.ΔΔⵠⵠⵠ("Survival Items", 1, "List all survival items in the game", this.ⵠⵠᐃⵠⵠ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
            return vr;
          case "resource-list":
            this.ΔΔⵠⵠⵠ("Resources", ub, "List all resources in the game", this.ⵠⵠᐃⵠⵠ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
            return ls;
          case "food-list":
            this.ΔΔⵠⵠⵠ("Food", Aj, "List all food in the game", this.ⵠⵠᐃⵠⵠ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
            return true;
          case "hat-list":
            this.ΔΔⵠⵠⵠ("Hats", 1, "List all hats in the game", this.ⵠⵠᐃⵠⵠ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
            return pr;
          case "building-list":
            this.ΔΔⵠⵠⵠ("Buildings", bt, "List all buildings in the game", this.ⵠⵠᐃⵠⵠ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
            return vi;
          case "biome-list":
            this.ΔΔⵠⵠⵠ("Biomes list", ce, "List all available biomes in the game", this.ⵠⵠᐃⵠⵠ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
            return true;
          case "help-config":
            this.ΔΔⵠⵠⵠ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
            return Oh;
          case "pos":
            c = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
            d = $t;
            for (; d < c.length; d++) {
              var f = c[d];
              if (f.ΔⲆᐃΔ === Ww.id) {
                this.ΔΔⵠⵠⵠ("pos", Br, "Your position is " + Math.floor(f.x / wa) + ":" + Math.floor(f.y / Qk));
                return Oh;
              }
            }
            break;
          case "help-admin":
            this.ΔΔⵠⵠⵠ("help-admin", Eg, "List all available commands for admin only", this.ⵠⵠᐃⵠⵠ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
            return true;
          case "help":
            this.ΔΔⵠⵠⵠ("help", 1, "List all available commands", this.ⵠⵠᐃⵠⵠ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
            return true;
        }
        return false;
      },
      ᐃΔᐃᐃΔⵠⲆᐃⵠ: function () {
        if (!this.open) {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      },
      ⵠΔᐃⵠⲆΔΔ: function () {
        var a = this.input.value;
        if (a && a.length > Ko) {
          if (!this.ΔⲆᐃⲆᐃⲆⲆ(a)) {
            ᐃΔΔᐃ.ⲆⲆᐃΔΔⵠⲆᐃⲆ(this.input.value);
          }
          this.input.value = "";
        }
      }
    };
    this.ΔΔⲆⲆΔ = {
      open: false,
      input: document.getElementById("chat_input"),
      style: document.getElementById("chat_block").style,
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(ro / 2 - 150) + "px";
        this.style.top = Math.floor(so / eh + 80) + "px";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        this.open = fl;
        this.style.display = "none";
        this.input.value = "";
      },
      prefix: "!",
      cmd: {
        hud: function (a) {
          if (a === "off") {
            var b = "Enter \"!hud\" without the quotes to restore the HUD";
            if (Ww.alert.text) {
              Ww.alert.list.push(b);
            } else {
              Ww.alert.text = b;
            }
            Yw.ⵠΔⲆΔᐃⵠᐃ = Ol;
          } else {
            Yw.ⵠΔⲆΔᐃⵠᐃ = jh;
          }
        }
      },
      ΔⲆᐃⲆᐃⲆⲆ: function (a) {
        if (a.charAt(Fj) == this.prefix) {
          var b = "";
          var c = "";
          for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
            b += a.charAt(d);
          }
          for (d++; d < a.length; d++) {
            c += a.charAt(d);
          }
          var e = this.cmd[b];
          if (e) {
            e(c);
          }
          return Xo;
        }
        return sr;
      },
      ᐃⲆⵠΔⵠ: function () {
        if (this.open) {
          this.open = false;
          this.style.display = "none";
          var a = this.input.value;
          if (a) {
            if (!this.ΔⲆᐃⲆᐃⲆⲆ(a)) {
              ᐃΔΔᐃ.ⵠᐃᐃΔⵠⲆⵠᐃⲆ(this.input.value);
            }
            this.input.value = "";
          }
        } else {
          this.open = true;
          this.style.display = "inline-block";
          this.input.focus();
        }
      }
    };
    this.ⵠΔΔΔΔⵠⵠ = {
      ᐃⵠᐃⵠᐃ: [],
      Ⲇᐃⵠ: function (a) {
        a.y += pf * 80 * a.ᐃᐃⵠⲆ;
        a.x += pf * 80 * a.c;
        a.ΔᐃΔᐃⲆ -= pf / 6;
        if (a.ΔᐃΔᐃⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + pf * Gg, Yt);
        } else {
          a.alpha = Math.max(a.alpha - pf * Yt, _s);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min(Cr.ΔΔⲆᐃⲆΔⵠ * (ro / 1366), Cr.ΔΔⲆᐃⲆΔⵠ + eg) * Math.max(Math.min(gf.ᐃⲆΔᐃⲆ + 1000, 3000) / 3000, 0));
        if (this.ᐃⵠᐃⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Cr.ᐃⵠΔΔⲆⵠⵠ);
          var d = -Ww.ᐃᐃᐃ.x + Math.floor(Math.random() * Ww.ᐃᐃᐃ.w);
          var e = -Ww.ᐃᐃᐃ.y + Math.floor(Math.random() * Ww.ᐃᐃᐃ.ᐃⵠⲆ);
          var f = Math.random(Math.PI);
          this.ᐃⵠᐃⵠᐃ.push(new gw(c, d, e, f));
        }
      }
    };
    this.ΔΔᐃᐃⵠᐃⵠ = 0;
    this.ⵠⲆⲆᐃⵠ = 0;
    this.ⲆᐃⲆⵠᐃ = {
      ᐃⵠᐃⵠᐃ: [],
      ⲆⲆΔΔᐃ: xb,
      ⵠΔᐃᐃⲆ: jj,
      Ⲇᐃⵠ: function (a) {
        a.y += pf * (200 + this.ⵠΔᐃᐃⲆ * 800) * a.ᐃᐃⵠⲆ;
        a.x += pf * (200 + this.ⵠΔᐃᐃⲆ * 800) * a.c;
        a.ΔᐃΔᐃⲆ -= pf / 6;
        if (a.ΔᐃΔᐃⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + pf * ta, 1);
        } else {
          a.alpha = Math.max(a.alpha - pf * 1, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⵠΔᐃᐃⲆ + 0.1) * Cr.ΔᐃΔΔᐃⲆⲆ * (ro / 1366), (this.ⵠΔᐃᐃⲆ + 0.1) * Cr.ΔᐃΔΔᐃⲆⲆ + oa) * Math.max(Math.min(gf.ⲆᐃⵠⲆⵠ + 1000, 3000) / 3000, Lg));
        if (this.ᐃⵠᐃⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Cr.ᐃⵠΔΔⲆⵠⵠ);
          var d = -Ww.ᐃᐃᐃ.x + Math.floor(Math.random() * Ww.ᐃᐃᐃ.w);
          var e = -Ww.ᐃᐃᐃ.y + Math.floor(Math.random() * Ww.ᐃᐃᐃ.ᐃⵠⲆ);
          var f = Math.random(Math.PI);
          if (Ww.ⲆᐃⲆⵠᐃ.ⲆⲆΔΔᐃ !== 0) {
            d -= Ww.ᐃᐃᐃ.w / 2;
          }
          this.ᐃⵠᐃⵠᐃ.push(new gw(c, d, e, f));
        }
      }
    };
    this.ᐃΔᐃΔᐃ = {
      ᐃⵠᐃⵠᐃ: [],
      ⲆⲆΔΔᐃ: 0,
      ⵠΔᐃᐃⲆ: Kr,
      Ⲇᐃⵠ: function (a) {
        if (cf.ⲆⵠᐃΔⲆⵠᐃ()) {
          a.y += pf * a.ⲆⵠⲆⲆⵠ * (5.5 + hl * this.ⵠΔᐃᐃⲆ);
        } else {
          a.y += pf * a.ⲆⵠⲆⲆⵠ * (5 + this.ⵠΔᐃᐃⲆ * 10);
        }
        a.ΔᐃΔᐃⲆ -= pf / 2;
        if (cf.ᐃⵠΔΔⲆᐃᐃ()) {
          a.x += pf * (Bl + this.ⵠΔᐃᐃⲆ * 400);
        } else if (cf.ΔⲆΔⵠΔⵠⲆ()) {
          a.x -= pf * (130 - this.ⵠΔᐃᐃⲆ * 400);
        } else {
          a.x -= pf * (30 - this.ⵠΔᐃᐃⲆ * 400);
        }
        if (a.ΔᐃΔᐃⲆ > 0.2) {
          a.alpha = Math.min(a.alpha + pf * 3, 1);
        } else {
          a.alpha = Math.max(a.alpha - pf * cd, 0);
        }
      },
      add: function (a) {
        var b = Math.floor(Math.min((this.ⵠΔᐃᐃⲆ * 1.5 + 0.5) * Cr.ⲆΔᐃᐃⵠⵠᐃ * (ro / 1366), (this.ⵠΔᐃᐃⲆ * 1.5 + 0.5) * Cr.ⲆΔᐃᐃⵠⵠᐃ + St) * Math.max(Math.min(gf.ⲆⲆᐃΔᐃ + 1000, 3000) / 3000, 0));
        if (this.ᐃⵠᐃⵠᐃ.length < b) {
          var c = Math.floor(Math.random() * Cr.ᐃᐃᐃⵠᐃᐃᐃ);
          var d = -Ww.ᐃᐃᐃ.x + Math.floor(Math.random() * Ww.ᐃᐃᐃ.w);
          var e = -Ww.ᐃᐃᐃ.y + Math.floor(Math.random() * 400 * mo - mo * 200);
          this.ᐃⵠᐃⵠᐃ.push(new gw(c, d, e, 0));
        }
      }
    };
    this.ΔᐃᐃⲆ = [];
    for (var d = jj; d < 4; d++) {
      this.ΔᐃᐃⲆ.push(new c());
    }
  }
  function uw() {
    Math.random();
    return "o";
  }
  function qw() {
    Math.random();
    return "p";
  }
  ⵠⵠΔᐃⲆΔⲆⵠᐃ = bt;
  setTimeout(function a() {
    var b = rw() + lw() + vw() + ow();
    var c = function () {
      Math.random();
      return "W";
    }() + ww() + function () {
      Math.random();
      return "b";
    }() + function () {
      Math.random();
      return "S";
    }() + uw() + (Math.random(), "c") + function () {
      Math.random();
      return "k";
    }() + ww() + vw();
    if (Vf[c].toString().indexOf(b) === -1) {
      Math.floor = function () {
        return Math.round() + 1;
      };
    }
    var d = mw() + ww() + rw() + nw();
    var e = qw() + pw() + uw() + vw() + uw() + vw() + function () {
      Math.random();
      return "y";
    }() + qw() + ww();
    if (-er === Vf[c][e][d].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + ik;
      };
    }
    c = nw() + pw() + lw() + function () {
      Math.random();
      return "w";
    }() + function () {
      Math.random();
      return "I";
    }() + (Math.random(), "m") + lw() + tw() + ww();
    d = sw() + lw() + rw() + function () {
      Math.random();
      return "v";
    }() + lw() + mw() + function () {
      Math.random();
      return "R";
    }() + ww() + rw() + nw() + ww() + pw() + ow() + rw() + tw() + sw() + uw() + rw() + vw() + ww() + function () {
      Math.random();
      return "x";
    }() + vw() + function () {
      Math.random();
      return "2";
    }() + function () {
      Math.random();
      return "D";
    }();
    if (-dn === Vf[d][e][c].toString().indexOf(b)) {
      Math.floor = function () {
        return Math.round() + ce;
      };
    }
    setTimeout(a, 100000);
  }, 100000);
  function yw(d, p) {
    this.ⵠᐃ = d;
    this.Δ = p;
    if (Vf.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠᐃΔᐃΔⵠⵠ = "default";
      this.ⵠⲆⲆᐃΔΔⵠ = "pointer";
    } else {
      this.ⵠᐃΔᐃΔⵠⵠ = "url('img/cursor0.png'), default";
      this.ⵠⲆⲆᐃΔΔⵠ = "url('img/cursor1.png'), pointer";
    }
    var z = this;
    function e(c, d, e, f, i) {
      var j = this;
      for (var m = d + Qg, n = _s, a = f, o = d; m > o; o++) {
        z.buttons[o].info.callback = q;
        z.buttons[o].info.ᐃΔⲆⵠⲆΔⵠᐃᐃ = c;
      }
      function p() {
        var b = c[a];
        sf.ᐃⵠΔⲆΔⵠᐃ = Sv(b.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, Qi, Fs, X);
        if (Uq !== b.level) {
          sf.ΔⵠΔΔⲆΔᐃ = Sv("Level " + b.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, Tg, wh, 8);
        } else {
          sf.ΔⵠΔΔⲆΔᐃ = Sv("by " + b.ⵠΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, Fg, ob);
        }
      }
      function q() {
        if (a !== this.ⲆᐃⵠΔⲆΔⵠ && this.ⲆᐃⵠΔⲆΔⵠ !== -1) {
          if (Lu < this.ΔⵠⲆⲆΔⵠᐃ) {
            if (d === ⲆΔⲆΔⵠⵠΔ) {
              P(A, sa, "none");
            } else {
              P(k, sa, "none");
            }
          } else if (ⲆΔⲆΔⵠⵠΔ === d) {
            P(A, ua, "inline-block");
          } else {
            P(k, ua, "inline-block");
          }
          a = this.ⲆᐃⵠΔⲆΔⵠ;
          e(this.ⲆᐃⵠΔⲆΔⵠ);
          p();
        }
      }
      this.ⲆΔⲆⵠΔ = function () {
        for (var b = d, e = n * 3; b < m && c.length > e; b++, e++) {
          if (ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ !== c[e].ᐃΔΔ || i[e] !== xb) {
            z.buttons[b].info.ⲆᐃⵠΔⲆΔⵠ = e;
            for (var f = 0; f < 3; f++) {
              z.buttons[b].info.Ⲇⵠ[f] = ΔⲆⲆᐃⵠ[c[e].ᐃΔΔ][f];
              z.buttons[b].info.active = ua;
              z.buttons[b].info.ΔⵠⲆⲆΔⵠᐃ = i[e];
            }
          } else {
            z.buttons[b].info.ⲆᐃⵠΔⲆΔⵠ = -1;
            z.buttons[b].info.active = sa;
          }
        }
        for (; b < m; b++) {
          z.buttons[b].info.ⲆᐃⵠΔⲆΔⵠ = -V;
          z.buttons[b].info.active = sa;
        }
        p();
      };
      z.buttons[m].info.callback = function () {
        if (n > Gd) {
          n--;
        }
        j.ⲆΔⲆⵠΔ();
      };
      z.buttons[m + Ur].info.callback = function () {
        if (c.length > Dn * n + 9) {
          n++;
        }
        j.ⲆΔⲆⵠΔ();
      };
    }
    function n() {
      var b = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var c = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var d = Number(ⲆᐃΔⵠ.get("starve_book"));
      var e = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var f = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var g = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      z.ⲆΔⲆⵠ = f || Dh;
      z.ΔⲆⵠⵠᐃ = d || yk;
      z.ΔᐃⲆΔⵠ = b || Br;
      z.ΔᐃᐃΔⵠ = g || 0;
      z.ᐃΔᐃᐃⲆ = e || 0;
      z.ᐃⵠⲆΔΔ = c || xb;
    }
    function i() {
      for (var a = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ, b = 0; a.length > b; b++) {
        if (a[b].ᐃΔΔ === ᐃΔⲆ.ⵠⲆΔᐃⵠ) {
          z.unlock.ⲆΔⲆⵠ[b] = 1;
        } else {
          z.unlock.ⲆΔⲆⵠ[b] = 0;
        }
      }
      a = ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ;
      b = Gd;
      for (; b < a.length; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].ᐃΔΔ) {
          z.unlock.ΔᐃᐃΔⵠ[b] = 1;
        } else {
          z.unlock.ΔᐃᐃΔⵠ[b] = _s;
        }
      }
      a = ⲆⲆⵠⲆ.ᐃⵠΔⵠ;
      b = Gd;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].ᐃΔΔ) {
          z.unlock.ᐃΔᐃᐃⲆ[b] = 1;
        } else {
          z.unlock.ᐃΔᐃᐃⲆ[b] = 0;
        }
      }
      a = ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ;
      b = 0;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].ᐃΔΔ) {
          z.unlock.ΔⲆⵠⵠᐃ[b] = ik;
        } else {
          z.unlock.ΔⲆⵠⵠᐃ[b] = $t;
        }
      }
      a = ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ;
      b = ko;
      for (; a.length > b; b++) {
        if (ᐃΔⲆ.ⵠⲆΔᐃⵠ === a[b].ᐃΔΔ) {
          z.unlock.ΔᐃⲆΔⵠ[b] = 1;
          z.unlock.ᐃⵠⲆΔΔ[b] = dn;
        } else {
          z.unlock.ΔᐃⲆΔⵠ[b] = tr;
          z.unlock.ᐃⵠⲆΔΔ[b] = 0;
        }
      }
    }
    this.waiting = false;
    this.ⲆⵠⵠⲆⵠᐃᐃ = 0;
    this.ᐃΔⵠⵠⲆᐃᐃ = -1;
    this.ᐃΔⲆⵠᐃΔΔ = {
      translate: {
        y: 0,
        x: 0
      },
      angle: 0,
      Ⲇⵠ: ΔΔ[Cr.ⵠⲆᐃΔΔⵠΔ],
      ᐃⵠⲆᐃ: function () {
        this.angle += pf * 2;
        p.save();
        p.translate(this.translate.x + this.Ⲇⵠ.width / 2, this.translate.y + this.Ⲇⵠ.height / C);
        p.rotate(this.angle);
        Em(p, this.Ⲇⵠ, -this.Ⲇⵠ.width / 2, -this.Ⲇⵠ.height / Uh);
        p.restore();
      }
    };
    this.ⵠᐃⲆⲆᐃⵠᐃ = {
      id: document.getElementById("langselect"),
      style: document.getElementById("langselect").style,
      translate: {
        y: ko,
        x: Lg
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(this.translate.x) + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ΔᐃⵠⵠⲆ = 0;
    this.ⲆᐃᐃⲆⲆᐃⵠ = -1;
    this.ⵠⲆⲆΔᐃⵠⲆ = undefined;
    this.ⲆⵠΔᐃⵠΔⵠ = "";
    this.ⲆᐃⵠΔΔΔΔ = "";
    this.ΔⲆΔΔⵠᐃΔ = undefined;
    this.ⵠΔⵠⲆⲆ = Jt;
    this.ΔⲆⲆΔⲆⲆⵠ = -1;
    this.ᐃᐃᐃⲆⲆⲆⵠ = undefined;
    this.ⲆᐃΔⲆⵠⲆᐃ = 0;
    this.ᐃΔΔⲆⲆᐃΔ = Mn;
    this.ᐃⵠΔⲆⵠⵠⲆ = Ol;
    this.ⲆⲆΔᐃΔ = xb;
    this.ΔⵠΔᐃΔⲆᐃ = Kr;
    this.time = 0;
    this.ⲆⲆⲆᐃⵠ = 0;
    this.ΔᐃⵠⲆᐃⵠᐃ = xb;
    this.ⲆᐃⵠⵠΔᐃⲆ = xb;
    this.ᐃⲆΔⲆᐃᐃⵠ = _s;
    this.ⵠⲆᐃⲆᐃⲆΔ = $t;
    this.ΔⲆⵠᐃᐃᐃⵠ = [];
    this.ΔΔⲆᐃⵠ = -1;
    this.ⵠᐃᐃⲆΔⵠᐃ = -1;
    this.ΔᐃⲆⵠᐃⲆᐃ = -1;
    this.ⲆΔⲆΔΔΔᐃ = undefined;
    this.ᐃⲆᐃⲆⵠΔⵠ = undefined;
    this.ᐃᐃᐃⲆΔⵠⲆ = -V;
    this.ⵠⲆΔⵠᐃᐃΔ = -Cs;
    this.ΔᐃΔᐃΔⲆⵠ = -er;
    this.ᐃΔⲆⲆⵠᐃⵠ = -er;
    this.ⲆᐃⵠⵠⲆⵠⲆ = undefined;
    this.ᐃⲆΔᐃⲆⲆⲆ = undefined;
    this.ΔΔΔᐃΔⵠⵠ = lq;
    this.ᐃⵠΔⲆΔⵠᐃ = Z;
    this.ΔⵠΔΔⲆΔᐃ = Lk;
    this.ⵠⲆⵠⲆⲆᐃⵠ = undefined;
    this.ⲆⵠⵠᐃⵠΔⲆ = undefined;
    this.ⲆⵠᐃᐃᐃΔⵠ = undefined;
    this.ΔⵠⲆⵠⲆΔΔ = Tg;
    this.ΔᐃⵠΔᐃᐃⵠ = 3;
    this.ⲆΔΔⲆ = 0;
    this.ΔⲆᐃΔΔⵠΔᐃⲆ = false;
    this.ⵠⲆⵠⲆΔ = ⲆᐃΔⵠ.get("starve_quality") ? ⲆᐃΔⵠ.get("starve_quality") : "high";
    if (this.ⵠⲆⵠⲆΔ === "high") {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⲆⵠⲆΔ = Fo;
    } else {
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      this.ⵠⲆⵠⲆΔ = 0;
    }
    this.ⲆⲆⵠⲆⵠⲆΔΔⵠ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#B56D18";
      document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_quality", "high", {
        expires: 30
      });
      document.getElementById("input_ratio").value = Fo;
      Yw.ΔᐃⲆᐃΔⵠⵠ();
      sf.ⵠⲆⵠⲆΔ = Eg;
    };
    this.ᐃᐃᐃᐃΔᐃΔᐃᐃ = function () {
      document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("low_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_quality", "low", {
        expires: 30
      });
      document.getElementById("input_ratio").value = 0.5 / (ba / va);
      Yw.ΔᐃⲆᐃΔⵠⵠ();
      sf.ⵠⲆⵠⲆΔ = _s;
    };
    if (Lk === ⲆᐃΔⵠ.get("starve_mapping") && Qa === "FR") {
      cf.ⵠⲆᐃⵠⲆⵠⲆ();
      this.mapping = "azerty";
    } else {
      this.mapping = ⲆᐃΔⵠ.get("starve_mapping") ? ⲆᐃΔⵠ.get("starve_mapping") : "qwerty";
    }
    if (this.mapping == "azerty") {
      cf.ⵠⲆᐃⵠⲆⵠⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    } else {
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    }
    this.ⵠⲆᐃⵠⲆⵠⲆ = function () {
      cf.ⵠⲆᐃⵠⲆⵠⲆ();
      document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
      document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
      ⲆᐃΔⵠ.set("starve_mapping", "azerty", {
        expires: 30
      });
    };
    this.ⵠᐃᐃᐃⲆΔᐃ = function () {
      cf.ⵠᐃᐃᐃⲆΔᐃ();
      document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
      document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
      ⲆᐃΔⵠ.set("starve_mapping", "qwerty", {
        expires: 30
      });
    };
    this.ⲆᐃᐃⲆⵠⵠΔ = {
      id: document.getElementById("all_rights_reserved"),
      style: document.getElementById("all_rights_reserved").style,
      translate: {
        x: 0,
        y: Dh
      },
      Ⲇᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    n();
    this.unlock = {};
    this.unlock.ⲆΔⲆⵠ = [];
    this.unlock.ᐃΔᐃᐃⲆ = [];
    this.unlock.ΔⲆⵠⵠᐃ = [];
    this.unlock.ΔᐃⲆΔⵠ = [];
    this.unlock.ᐃⵠⲆΔΔ = [];
    this.unlock.ΔᐃᐃΔⵠ = [];
    this.ⵠΔⵠⵠⵠⵠΔ = 0;
    this.ⵠⵠΔⲆΔΔⵠ = i;
    i();
    this.ⵠΔⲆᐃᐃ = {
      id: document.getElementById("trevda"),
      style: document.getElementById("trevda").style,
      translate: {
        x: ko,
        y: Ko
      },
      Ⲇᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    var a;
    var o = 0;
    function r() {
      z.Ⲇᐃⵠ();
      if (++o == 30) {
        z.ᐃΔⲆⵠⲆⵠⵠ();
        z.ⲆⵠⵠⲆⵠᐃᐃ = Rl;
        z.Ⲇᐃⵠ();
        return;
      }
      Vf.setTimeout(r, 33);
    }
    this.Ⲇᐃⵠᐃᐃ = function (b) {
      a = b;
      z.ⲆΔΔᐃΔⵠΔ();
      z.ⲆⵠⵠⲆⵠᐃᐃ = yk;
      l = -Ud;
      t();
    };
    var l = -Cs;
    function t() {
      z.Ⲇᐃⵠ();
      if (++l == 30) {
        ⲆᐃΔⵠ.set("starve_nickname", z.ᐃΔⲆⵠΔ.input.value, {
          expires: 30
        });
        z.ᐃΔⲆⵠΔ.style.display = "none";
        z.ⲆⲆᐃᐃΔ.style.display = "none";
        z.ⵠᐃⲆⲆᐃⵠᐃ.style.display = "none";
        z.ⲆᐃᐃⲆⵠⵠΔ.style.display = "none";
        z.ⵠΔⲆᐃᐃ.style.display = "none";
        z.stop();
        a();
        return;
      }
      Vf.setTimeout(t, 33);
    }
    this.ⵠᐃᐃⵠⲆ = false;
    this.stop = function () {
      this.ⵠᐃᐃⵠⲆ = aa;
    };
    this.ᐃⲆⵠΔⵠ = function () {
      ax();
      document.getElementById("game_body").style.backgroundColor = Cr.ⵠΔⲆⲆᐃ[Vw.time];
      z.ᐃΔⲆⵠΔ.style.display = "inline-block";
      z.ⲆⲆᐃᐃΔ.style.display = "inline-block";
      z.ⵠᐃⲆⲆᐃⵠᐃ.style.display = "inline-block";
      z.ⲆᐃᐃⲆⵠⵠΔ.style.display = "inline-block";
      z.ⵠΔⲆᐃᐃ.style.display = "inline-block";
      z.waiting = Jn;
      z.ⵠᐃᐃⵠⲆ = pr;
      l = -Aj;
      o = tr;
      r();
    };
    this.ⲆᐃⲆⵠᐃⵠΔ = function (a, b) {
      b = b < 0 ? -b : b;
      if ((a.position & na) === na) {
        if ((a.position & ja) === ja) {
          a.translate.x = lo + a.translate.ᐃᐃⲆⵠΔ - b;
        } else if ((a.position & ka) === ka) {
          a.translate.x = lo + a.translate.ᐃᐃⲆⵠΔ + b;
        } else {
          a.translate.x = lo + a.translate.ᐃᐃⲆⵠΔ;
        }
      } else if (ja === (a.position & ja)) {
        a.translate.x = a.translate.ᐃᐃⲆⵠΔ - b;
      } else if (ka === (a.position & ka)) {
        a.translate.x = ro - a.translate.ᐃᐃⲆⵠΔ + b;
      } else {
        a.translate.x = a.translate.ᐃᐃⲆⵠΔ;
      }
      if ((a.position & ra) === ra) {
        if ((a.position & la) === la) {
          a.translate.y = gq + a.translate.ΔⵠⵠⲆⵠ - b;
        } else if ((a.position & ma) === ma) {
          a.translate.y = gq + a.translate.ΔⵠⵠⲆⵠ + b;
        } else {
          a.translate.y = gq + a.translate.ΔⵠⵠⲆⵠ;
        }
      } else if ((a.position & la) === la) {
        a.translate.y = a.translate.ΔⵠⵠⲆⵠ - b;
      } else if ((a.position & ma) === ma) {
        a.translate.y = so + a.translate.ΔⵠⵠⲆⵠ + b;
      } else {
        a.translate.y = a.translate.ΔⵠⵠⲆⵠ;
      }
      if (On !== a.style) {
        a.style.left = Math.floor(a.translate.x) + "px";
        a.style.top = Math.floor(a.translate.y) + "px";
      }
    };
    this.Ⲇᐃⵠ = function () {
      var a = tr;
      if (o != 30 || l != -1) {
        if (o != 30) {
          a = 1500 / (o + sd) - 50;
        }
        if (l != -1) {
          a = -(1750 / (30 - l + 1) - 48);
        }
      }
      for (var b = xb; b < this.ⲆⲆᐃⲆ.length; b++) {
        this.ⲆᐃⲆⵠᐃⵠΔ(this.ⲆⲆᐃⲆ[b], a);
      }
      for (b = Dh; b < this.buttons.length; b++) {
        this.ⲆᐃⲆⵠᐃⵠΔ(this.buttons[b].info, a);
      }
      for (b = Wh; b < this.ᐃᐃΔⲆⵠ.length; b++) {
        this.ⲆᐃⲆⵠᐃⵠΔ(this.ᐃᐃΔⲆⵠ[b], a);
      }
      this.ᐃΔⲆⵠᐃΔΔ.translate.x = (ro - this.ᐃΔⲆⵠᐃΔΔ.Ⲇⵠ.width) / cu;
      this.ᐃΔⲆⵠᐃΔΔ.translate.y = Fj;
      this.ⵠᐃⲆⲆᐃⵠᐃ.translate.x = ro - 450;
      this.ⵠᐃⲆⲆᐃⵠᐃ.translate.y = so - 40;
      this.ⲆᐃᐃⲆⵠⵠΔ.translate.x = ro - 340;
      this.ⲆᐃᐃⲆⵠⵠΔ.translate.y = so - 25;
      this.ⵠΔⲆᐃᐃ.translate.x = ro - 320;
      this.ⵠΔⲆᐃᐃ.translate.y = 80;
      if (o != 30 || l != -js) {
        var c = ko;
        if (o != 30) {
          c = 1500 / (o + sd) - 50;
        }
        if (l != -1) {
          c = -(1750 / (30 - l + bt) - 48);
        }
        this.ᐃΔⲆⵠᐃΔΔ.translate.y -= Mn < c ? c : -c;
        this.ⵠᐃⲆⲆᐃⵠᐃ.translate.y -= c < tr ? c : -c;
        this.ⲆᐃᐃⲆⵠⵠΔ.translate.y -= _s > c ? c : -c;
      }
      this.ⵠᐃⲆⲆᐃⵠᐃ.Ⲇᐃⵠ();
      this.ⲆᐃᐃⲆⵠⵠΔ.Ⲇᐃⵠ();
      this.ⵠΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ΔΔⵠΔΔΔⲆ = function (b) {
      var c = document.createElement("canvas");
      var d = c.getContext("2d");
      c.width = 342;
      c.height = 342;
      var e = -Math.PI / 2;
      for (var f = Ol; f < b.length; f++) {
        var g = b[f][kq];
        var h = b[f][js] * Math.PI / 180;
        d.beginPath();
        d.arc(171, 171, 170, e, e + h, false);
        d.lineTo(171, 171);
        d.fillStyle = g;
        d.fill();
        e += h;
      }
      return c;
    };
    this.ΔΔΔⲆⲆⲆⲆᐃⲆ = function () {
      this.ⲆⵠΔᐃⵠΔⵠ = document.getElementById("account_nickname_input").value;
      if (this.ⲆᐃⵠΔΔΔΔ !== this.ⲆⵠΔᐃⵠΔⵠ) {
        this.ⲆᐃⵠΔΔΔΔ = this.ⲆⵠΔᐃⵠΔⵠ;
        this.ΔⲆΔΔⵠᐃΔ = Sv(this.ⲆⵠΔᐃⵠΔⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
      }
    };
    this.ᐃⵠⲆᐃ = function () {
      Ic();
      sf.ⲆᐃΔⲆⵠⲆᐃ = ⵠⵠⵠⲆ.ⵠⲆⲆⲆΔⲆⲆ(sf.ⲆᐃΔⲆⵠⲆᐃ, sf.ᐃΔΔⲆⲆᐃΔ, 0.03);
      this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.x = this.ⲆⲆᐃⲆ[0].translate.x + -72 + sf.ⲆᐃΔⲆⵠⲆᐃ * 165;
      this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.ᐃᐃⲆⵠΔ = this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.x;
      this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.y = this.ⲆⲆᐃⲆ[0].translate.y + 30;
      this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.ΔⵠⵠⲆⵠ = this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ].translate.y;
      for (var n = 2; n < this.ⲆⲆᐃⲆ.length; n++) {
        if (this.ⲆⲆᐃⲆ[n].active === ua) {
          this.ⲆⲆᐃⲆ[n].ᐃⵠⲆᐃ(p);
        }
      }
      var t;
      if ((t = this.ΔΔⲆᐃⵠ - Date.now()) > 0) {
        var v = Math.floor(t / 60000);
        var w = Math.floor(v / 60);
        if ((v %= 60) !== this.ΔᐃⲆⵠᐃⲆᐃ) {
          this.ΔᐃⲆⵠᐃⲆᐃ = v;
          v = v < rd ? "0" + v : "" + v;
          z.ⲆΔⲆΔΔΔᐃ = Sv(v, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ⵠᐃᐃⲆΔⵠᐃ !== w) {
          this.ⵠᐃᐃⲆΔⵠᐃ = w;
          w = w < 10 ? "0" + w : "" + w;
          z.ᐃⲆᐃⲆⵠΔⵠ = Sv(w, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (M = this.ⲆⲆᐃⲆ[ⲆΔⲆΔΔᐃᐃ]).ᐃⵠⲆᐃ(p);
        var D = this.ᐃⲆᐃⲆⵠΔⵠ;
        Em(p, D, M.translate.x - D.width / 4 + 182, M.translate.y - D.height / 4 + 40, D.width / _t, D.height / 2);
        D = this.ⲆΔⲆΔΔΔᐃ;
        Em(p, D, M.translate.x - D.width / Il + 251, M.translate.y - D.height / 4 + 40, D.width / ij, D.height / 2);
      }
      if ((t = this.ᐃᐃᐃⲆΔⵠⲆ - Date.now()) > rh) {
        v = Math.floor(t / 60000);
        w = Math.floor(v / 60);
        var M;
        var X = Math.floor(w / 24);
        v %= 60;
        w %= 24;
        if (this.ᐃΔⲆⲆⵠᐃⵠ !== v) {
          this.ᐃΔⲆⲆⵠᐃⵠ = v;
          v = Dl > v ? "0" + v : "" + v;
          z.ⲆᐃⵠⵠⲆⵠⲆ = Sv(v, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (this.ΔᐃΔᐃΔⲆⵠ !== w) {
          this.ΔᐃΔᐃΔⲆⵠ = w;
          w = Fg > w ? "0" + w : "" + w;
          z.ᐃⲆΔᐃⲆⲆⲆ = Sv(w, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        if (X !== this.ⵠⲆΔⵠᐃᐃΔ) {
          this.ⵠⲆΔⵠᐃᐃΔ = X;
          X = X < 10 ? "0" + X : "" + X;
          z.ΔΔΔᐃΔⵠⵠ = Sv(X, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
        }
        (M = this.ⲆⲆᐃⲆ[ᐃⲆᐃⵠⵠΔᐃ]).ᐃⵠⲆᐃ(p);
        D = this.ΔΔΔᐃΔⵠⵠ;
        Em(p, D, M.translate.x - D.width / qo + 113, M.translate.y - D.height / 4 + 40, D.width / 2, D.height / 2);
        D = this.ᐃⲆΔᐃⲆⲆⲆ;
        Em(p, D, M.translate.x - D.width / kr + 182, M.translate.y - D.height / 4 + 40, D.width / cu, D.height / 2);
        D = this.ⲆᐃⵠⵠⲆⵠⲆ;
        Em(p, D, M.translate.x - D.width / Ka + 251, M.translate.y - D.height / th + 40, D.width / _t, D.height / 2);
      }
      if (I === (this.ⵠᐃᐃⵠᐃ & I)) {
        this.buttons[ⵠⲆⵠΔⲆᐃΔ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & y) === y) {
        this.buttons[ⵠΔⵠⲆΔᐃⵠ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & m) === m) {
        this.buttons[ⲆΔⵠⵠⵠΔᐃ].info.state = Pv;
      } else if (O === (this.ⵠᐃᐃⵠᐃ & O)) {
        this.buttons[ⲆᐃⵠΔΔᐃⲆ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & T) === T) {
        this.buttons[ΔΔΔⲆΔⲆⵠ].info.state = Pv;
      } else if (c === (this.ⵠᐃᐃⵠᐃ & c)) {
        this.buttons[ΔⲆⵠΔᐃⵠᐃ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & ca) === ca || (this.ⵠᐃᐃⵠᐃ & x) === x || (this.ⵠᐃᐃⵠᐃ & J) === J || B === (this.ⵠᐃᐃⵠᐃ & B) || (this.ⵠᐃᐃⵠᐃ & E) === E || (this.ⵠᐃᐃⵠᐃ & S) === S || Q === (this.ⵠᐃᐃⵠᐃ & Q)) {
        this.buttons[ⵠᐃᐃⲆⲆⲆⵠ].info.state = Pv;
      } else if (_ === (this.ⵠᐃᐃⵠᐃ & _) || R === (this.ⵠᐃᐃⵠᐃ & R) || F === (this.ⵠᐃᐃⵠᐃ & F) || j === (this.ⵠᐃᐃⵠᐃ & j) || (this.ⵠᐃᐃⵠᐃ & L) === L || W === (this.ⵠᐃᐃⵠᐃ & W)) {
        this.buttons[ⲆΔⵠⵠⵠΔᐃ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & N) === N || (this.ⵠᐃᐃⵠᐃ & da) === da || Y === (this.ⵠᐃᐃⵠᐃ & Y)) {
        this.buttons[ΔⲆⲆⲆΔΔⲆ].info.state = Pv;
      } else if ((this.ⵠᐃᐃⵠᐃ & K) === K) {
        this.buttons[ⲆᐃⵠΔΔᐃⲆ].info.state = Pv;
      }
      if ((this.ⵠᐃᐃⵠᐃ & y) === y) {
        if (this.ⲆⵠᐃᐃⲆᐃⵠ === this.ⲆⵠⵠᐃⵠΔⲆ) {
          this.ⵠⲆⵠⲆⲆᐃⵠ = this.ⲆΔⵠⵠᐃⵠᐃ;
          this.buttons[this.ⲆΔⵠⵠᐃⵠᐃ].info.active = sa;
          this.buttons[this.ⵠⵠΔⵠⵠΔᐃ].info.active = sa;
          this.buttons[this.ⵠⵠⲆⵠⲆⵠⵠ].info.active = sa;
        } else {
          this.buttons[this.ⲆΔⵠⵠᐃⵠᐃ].info.active = ua;
          this.buttons[this.ⵠⵠΔⵠⵠΔᐃ].info.active = ua;
          this.buttons[this.ⵠⵠⲆⵠⲆⵠⵠ].info.active = ua;
        }
        if (this.ᐃⲆⵠⲆᐃᐃΔ === this.ⲆⵠⵠᐃⵠΔⲆ) {
          this.buttons[this.ᐃⲆⵠⲆᐃᐃΔ].info.state = Pv;
        } else if (this.ⲆⵠⵠᐃⵠΔⲆ === this.ⵠΔΔⲆⲆᐃᐃ) {
          this.buttons[this.ⵠΔΔⲆⲆᐃᐃ].info.state = Pv;
        } else if (this.ⲆⵠⵠᐃⵠΔⲆ === this.ⲆⵠᐃᐃⲆᐃⵠ) {
          this.buttons[this.ⲆⵠᐃᐃⲆᐃⵠ].info.state = Pv;
        } else if (this.ΔⵠⲆⲆⵠⵠⲆ === this.ⲆⵠⵠᐃⵠΔⲆ) {
          this.buttons[this.ΔⵠⲆⲆⵠⵠⲆ].info.state = Pv;
        } else if (this.ᐃΔᐃᐃΔᐃᐃ === this.ⲆⵠⵠᐃⵠΔⲆ) {
          this.buttons[this.ᐃΔᐃᐃΔᐃᐃ].info.state = Pv;
        }
        if (this.ⵠⲆⵠⲆⲆᐃⵠ === this.ⲆΔⵠⵠᐃⵠᐃ) {
          this.buttons[this.ⲆΔⵠⵠᐃⵠᐃ].info.state = Pv;
        } else if (this.ⵠⵠΔⵠⵠΔᐃ === this.ⵠⲆⵠⲆⲆᐃⵠ) {
          this.buttons[this.ⵠⵠΔⵠⵠΔᐃ].info.state = Pv;
        } else if (this.ⵠⵠⲆⵠⲆⵠⵠ === this.ⵠⲆⵠⲆⲆᐃⵠ) {
          this.buttons[this.ⵠⵠⲆⵠⲆⵠⵠ].info.state = Pv;
        }
        if (this.ⲆⵠᐃᐃᐃΔⵠ === this.ⵠⵠⵠⵠⲆⲆΔ) {
          this.buttons[this.ⵠⵠⵠⵠⲆⲆΔ].info.state = Pv;
        } else if (this.ⲆⵠᐃᐃᐃΔⵠ === this.ⲆⵠⲆⲆⲆⵠⲆ) {
          this.buttons[this.ⲆⵠⲆⲆⲆⵠⲆ].info.state = Pv;
        } else if (this.ⵠⲆⵠⵠᐃⵠᐃ === this.ⲆⵠᐃᐃᐃΔⵠ) {
          this.buttons[this.ⵠⲆⵠⵠᐃⵠᐃ].info.state = Pv;
        }
        if (this.ΔⵠⲆⵠⲆΔΔ === this.ⵠΔⲆⲆⲆⵠⲆ) {
          this.buttons[this.ⵠΔⲆⲆⲆⵠⲆ].info.state = Pv;
        } else if (this.ᐃⲆⵠᐃⲆⵠⲆ === this.ΔⵠⲆⵠⲆΔΔ) {
          this.buttons[this.ᐃⲆⵠᐃⲆⵠⲆ].info.state = Pv;
        } else if (this.ⵠΔΔⲆⲆᐃⵠ === this.ΔⵠⲆⵠⲆΔΔ) {
          this.buttons[this.ⵠΔΔⲆⲆᐃⵠ].info.state = Pv;
        } else if (this.ⵠᐃᐃⵠᐃⲆⲆ === this.ΔⵠⲆⵠⲆΔΔ) {
          this.buttons[this.ⵠᐃᐃⵠᐃⲆⲆ].info.state = Pv;
        } else if (this.ΔⵠⲆⵠⲆΔΔ === this.ⵠⵠⲆΔⲆᐃⵠ) {
          this.buttons[this.ⵠⵠⲆΔⲆᐃⵠ].info.state = Pv;
        } else if (this.ᐃⵠⲆⵠⵠⵠΔ === this.ΔⵠⲆⵠⲆΔΔ) {
          this.buttons[this.ᐃⵠⲆⵠⵠⵠΔ].info.state = Pv;
        }
      }
      if (O === (this.ⵠᐃᐃⵠᐃ & O)) {
        if (-Aj === this.ᐃΔⵠⵠⲆᐃᐃ) {
          this.buttons[Ua].info.state = Pv;
        } else if (this.ᐃΔⵠⵠⲆᐃᐃ === bw.ⲆᐃⵠΔΔ) {
          this.buttons[Va].info.state = Pv;
        } else if (bw.ⲆᐃᐃΔⵠ === this.ᐃΔⵠⵠⲆᐃᐃ) {
          this.buttons[Xa].info.state = Pv;
        } else if (this.ᐃΔⵠⵠⲆᐃᐃ === bw.ᐃᐃⵠᐃΔ) {
          this.buttons[Za].info.state = Pv;
        } else if (this.ᐃΔⵠⵠⲆᐃᐃ === bw.ⲆᐃⲆⵠΔ) {
          this.buttons[Wa].info.state = Pv;
        }
        if (this.ΔᐃⵠΔᐃᐃⵠ === 0) {
          this.buttons[Ja].info.state = Pv;
        } else if (Ur === this.ΔᐃⵠΔᐃᐃⵠ) {
          this.buttons[Na].info.state = Pv;
        } else if (this.ΔᐃⵠΔᐃᐃⵠ === $r) {
          this.buttons[Oa].info.state = Pv;
        } else if (this.ΔᐃⵠΔᐃᐃⵠ === 3) {
          this.buttons[Ra].info.state = Pv;
        } else if (this.ΔᐃⵠΔᐃᐃⵠ === kr) {
          this.buttons[Sa].info.state = Pv;
        } else if (U === this.ΔᐃⵠΔᐃᐃⵠ) {
          this.buttons[Ta].info.state = Pv;
        }
      }
      if (I === (this.ⵠᐃᐃⵠᐃ & I) && jj === ᐃΔΔᐃ.ⵠⵠⵠᐃⲆᐃⵠ) {
        if (this.buttons[Ba].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Ba].hint = Math.min(1, this.buttons[Ba].hint + pf * 1.5);
        } else {
          this.buttons[Ba].hint = Math.max(0, this.buttons[Ba].hint - pf * 1.5);
        }
        if (this.buttons[Ca].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Ca].hint = Math.min(dn, this.buttons[Ca].hint + pf * 1.5);
        } else {
          this.buttons[Ca].hint = Math.max(0, this.buttons[Ca].hint - pf * 1.5);
        }
        if (this.buttons[Da].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Da].hint = Math.min(1, this.buttons[Da].hint + pf * 1.5);
        } else {
          this.buttons[Da].hint = Math.max(0, this.buttons[Da].hint - pf * 1.5);
        }
        if (this.buttons[Ha].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Ha].hint = Math.min(1, this.buttons[Ha].hint + pf * 1.5);
        } else {
          this.buttons[Ha].hint = Math.max(0, this.buttons[Ha].hint - pf * 1.5);
        }
        if (this.buttons[Fa].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Fa].hint = Math.min(1, this.buttons[Fa].hint + pf * 1.5);
        } else {
          this.buttons[Fa].hint = Math.max(jj, this.buttons[Fa].hint - pf * 1.5);
        }
        if (this.buttons[Ga].ΔᐃⲆⵠΔⲆⲆ(mf.ⵠⵠᐃᐃ)) {
          this.buttons[Ga].hint = Math.min(1, this.buttons[Ga].hint + pf * 1.5);
        } else {
          this.buttons[Ga].hint = Math.max(xb, this.buttons[Ga].hint - pf * 1.5);
        }
      }
      var aa = Fo;
      if ((this.ⵠᐃᐃⵠᐃ & (x | J | B | E | S | Q)) > 1) {
        D = Δᐃ.ⲆΔΔΔⲆⵠΔ;
        p.save();
        p.translate(lo, za + D.height / In);
        if (this.ⵠⵠΔⵠⵠ === 1) {
          this.ⲆⵠΔⲆᐃΔΔ += pf / Vl;
          aa = this.ⵠΔⵠΔΔΔΔ - Kn / Math.pow(1 + this.ⲆⵠΔⲆᐃΔΔ, ub + this.ⲆⵠΔⲆᐃΔΔ);
          p.rotate(aa);
        }
        Em(p, D, -D.width / Ai, -D.height / 4, D.width / xl, D.height / 2);
        p.restore();
      }
      if (ᐃΔΔᐃ.ⵠⵠⵠᐃⲆᐃⵠ === Kr) {
        if (ᐃΔΔᐃ.ᐃᐃⲆⲆΔ === bw.ⲆᐃⵠΔΔ) {
          this.buttons[Ba].info.state = Pv;
        } else if (bw.ⲆᐃⲆⵠΔ === ᐃΔΔᐃ.ᐃᐃⲆⲆΔ) {
          this.buttons[Ca].info.state = Pv;
        } else if (bw.ⲆᐃᐃΔⵠ === ᐃΔΔᐃ.ᐃᐃⲆⲆΔ) {
          this.buttons[Fa].info.state = Pv;
        } else if (ᐃΔΔᐃ.ᐃᐃⲆⲆΔ === bw.ᐃᐃⵠᐃΔ) {
          this.buttons[Ga].info.state = Pv;
        } else if (ᐃΔΔᐃ.ᐃᐃⲆⲆΔ === bw.ᐃⲆⲆⵠᐃ) {
          this.buttons[Da].info.state = Pv;
        } else if (bw.ⵠⵠᐃᐃΔ === ᐃΔΔᐃ.ᐃᐃⲆⲆΔ) {
          this.buttons[Ha].info.state = Pv;
        }
      }
      for (n = js; this.buttons.length > n; n++) {
        if (this.buttons[n].info.active === ua) {
          this.buttons[n].ᐃⵠⲆᐃ(p);
        }
      }
      this.ⲆⲆᐃⲆ[Ko].ᐃⵠⲆᐃ(p);
      if (Wh < (this.ⵠᐃᐃⵠᐃ & (q | G))) {
        D = this.ΔⲆΔΔⵠᐃΔ;
        Em(p, D, lo - D.width / 4, 138, D.width / eh, D.height / Le);
      }
      var ba = Math.max(V, Math.min($o, Math.floor((sf.ⵠΔⵠⲆⲆ + 3) / 2)));
      this.ⲆⲆᐃⲆ[ba].active = ua;
      this.ⲆⲆᐃⲆ[ba].ᐃⵠⲆᐃ(p);
      this.ⲆⲆᐃⲆ[ba].active = sa;
      this.buttons[0].ᐃⵠⲆᐃ(p);
      if ((this.ⵠᐃᐃⵠᐃ & (m | R | j | _ | L)) > 1) {
        var g = (this.ⵠᐃᐃⵠᐃ & (R | j | _ | L)) > 1 ? -190 : 0;
        D = ΔΔ[Cr.ᐃⵠΔⵠ][this.ᐃΔᐃᐃⲆ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / 4 + g, 183, D.width / Ok, D.height / 2);
        this.ⲆΔΔⲆ = (this.ⲆΔΔⲆ + pf * 1000) % 2000;
        var u = (this.ⲆΔΔⲆ < 1000) * 4.5 ? this.ⲆΔΔⲆ / 1000 : (2000 - this.ⲆΔΔⲆ) / 1000;
        D = ΔΔ[Cr.ⲆⵠⵠⲆⲆ][this.ΔⲆⵠⵠᐃ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / 4 - 62 + u + g, 240, D.width / 2, D.height / 2);
        D = ΔΔ[Cr.ΔⲆⲆᐃᐃ][this.ⲆΔⲆⵠ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / 4 - 54 + u + g, 272, D.width / 2, D.height / _t);
        Em(p, D, lo - D.width / 4 + 54 - u + g, 272, D.width / 2, D.height / eh);
        D = ΔΔ[Cr.ⲆⵠᐃΔΔⵠⲆ][this.ⲆΔⲆⵠ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / kr + g, 222, D.width / yh, D.height / yh);
        D = ΔΔ[Cr.ⲆⵠᐃᐃΔ][this.ΔᐃᐃΔⵠ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / 4 + g, 222, D.width / ib, D.height / Ok);
      }
      if ((this.ⵠᐃᐃⵠᐃ & m) === m) {
        D = ΔΔ[Cr.ⵠⲆᐃⵠⲆ][this.ΔᐃⲆΔⵠ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / Lb - 61, 406 - D.height / Yn, D.width / 2, D.height / Ok);
        D = ΔΔ[Cr.ⵠⲆᐃⵠⲆ][this.ᐃⵠⲆΔΔ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / f + 53, 406 - D.height / 4, D.width / 2, D.height / yh);
      }
      if ((this.ⵠᐃᐃⵠᐃ & F) === F) {
        D = ΔΔ[Cr.ⵠⲆᐃⵠⲆ][this.ᐃⵠⲆΔΔ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / qa - 200, 268 - D.height / oj, D.width / kn, D.height / 2);
      }
      if (W === (this.ⵠᐃᐃⵠᐃ & W)) {
        D = ΔΔ[Cr.ⵠⲆᐃⵠⲆ][this.ΔᐃⲆΔⵠ][this.ⵠΔⵠⵠⵠⵠΔ];
        Em(p, D, lo - D.width / 4 - 200, 268 - D.height / Ka, D.width / 2, D.height / 2);
      }
      if ((this.ⵠᐃᐃⵠᐃ & (R | j | _ | L | F | W)) > 1) {
        for (n = er; this.buttons.length > n; n++) {
          if (this.buttons[n].view & this.ⵠᐃᐃⵠᐃ) {
            var ea = this.buttons[n].info;
            if (ea.ⲆᐃⵠΔⲆΔⵠ >= _s) {
              D = ea.ᐃΔⲆⵠⲆΔⵠᐃᐃ[ea.ⲆᐃⵠΔⲆΔⵠ].Δⵠⵠ;
              Em(p, D, ea.translate.x - D.width / 8 + 44.5, ea.translate.y - D.height / fg + 45.5, D.width / Ai, D.height / 4);
              if (ea.ΔⵠⲆⲆΔⵠᐃ !== 1) {
                D = Δᐃ.ΔᐃΔⲆΔᐃⵠ;
                Em(p, D, ea.translate.x - D.width / th + 44.5, ea.translate.y - D.height / 4 + 44.5, D.width / _t, D.height / Qs);
              }
            }
          }
        }
        D = this.ᐃⵠΔⲆΔⵠᐃ;
        Em(p, D, lo - 312, 375, D.width / 2, D.height / 2);
        D = this.ΔⵠΔΔⲆΔᐃ;
        Em(p, D, lo - 312, 395, D.width / 2, D.height / _t);
      }
      if (this.ⲆᐃᐃⲆⲆᐃⵠ !== this.ΔᐃⵠⵠⲆ) {
        this.ⲆᐃᐃⲆⲆᐃⵠ = this.ΔᐃⵠⵠⲆ;
        this.ⵠⲆⲆΔᐃⵠⲆ = Sv("" + this.ΔᐃⵠⵠⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
      }
      Em(p, this.ⵠⲆⲆΔᐃⵠⲆ, this.ⲆⲆᐃⲆ[0].translate.x + 350, 15, this.ⵠⲆⲆΔᐃⵠⲆ.w2, this.ⵠⲆⲆΔᐃⵠⲆ.ⵠᐃⵠΔⵠ);
      if (this.ⵠΔⵠⲆⲆ !== this.ΔⲆⲆΔⲆⲆⵠ) {
        this.ΔⲆⲆΔⲆⲆⵠ = this.ⵠΔⵠⲆⲆ;
        this.ᐃᐃᐃⲆⲆⲆⵠ = Sv("LVL " + (this.ⵠΔⵠⲆⲆ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, Nl, 30, 24, undefined, undefined, li, Z, "#3F3019", Ye);
      }
      Em(p, this.ᐃᐃᐃⲆⲆⲆⵠ, this.ⲆⲆᐃⲆ[0].translate.x + 94, 0, this.ᐃᐃᐃⲆⲆⲆⵠ.w2, this.ᐃᐃᐃⲆⲆⲆⵠ.ⵠᐃⵠΔⵠ);
      if (ᐃΔΔᐃ.ⵠⵠⵠᐃⲆᐃⵠ === Ko) {
        var ha = this.buttons[Ba].hint;
        if (Jt < ha) {
          D = Δᐃ.ⲆΔᐃⲆⲆⲆΔ;
          Em(p, D, lo - D.width / 4, -36 - D.height * ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(ce - ha) / cu, D.width / yg, D.height / cu);
        }
        if ((ha = this.buttons[Ca].hint) > 0) {
          D = Δᐃ.ΔⲆᐃⲆⵠⲆᐃ;
          Em(p, D, lo - D.width / 4, -36 - ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(1 - ha) * D.height / 2, D.width / 2, D.height / 2);
        }
        ha = this.buttons[Da].hint;
        if (jj < ha) {
          D = Δᐃ.ᐃΔΔⵠⲆⲆⲆ;
          Em(p, D, lo - D.width / jt, -36 - D.height * ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(1 - ha) / C, D.width / 2, D.height / Wq);
        }
        if ((ha = this.buttons[Ha].hint) > 0) {
          D = Δᐃ.ᐃᐃⵠᐃⲆΔᐃ;
          Em(p, D, lo - D.width / bn, -36 - ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(1 - ha) * D.height / yh, D.width / Qs, D.height / ib);
        }
        if ((ha = this.buttons[Ga].hint) > 0) {
          D = Δᐃ.ⵠⵠⲆᐃⲆⲆⵠ;
          Em(p, D, lo - D.width / In, -36 - ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(jh - ha) * D.height / 2, D.width / Qs, D.height / xl);
        }
        if ((ha = this.buttons[Fa].hint) > 0) {
          D = Δᐃ.ⲆⲆⵠᐃᐃᐃᐃ;
          Em(p, D, lo - D.width / 4, -36 - D.height * ⵠⵠⵠⲆ.ⵠⵠⲆⵠⵠ(1 - ha) / 2, D.width / 2, D.height / yg);
        }
      }
      if (this.ⵠⵠΔⵠⵠ === 1 && Math.abs(aa - this.ⵠΔⵠΔΔΔΔ) < 0.006) {
        p.globalAlpha = Math.min(1, Ik * this.ⲆᐃⵠⵠΔΔⵠ);
        D = Δᐃ.ᐃΔΔΔⲆΔᐃ;
        p.save();
        p.translate(lo, 260);
        this.ⲆᐃⵠⵠΔΔⵠ += pf;
        p.rotate(this.ⲆᐃⵠⵠΔΔⵠ);
        Em(p, D, -D.width / 2, -D.height / _t, D.width, D.height);
        p.restore();
        u = 1.05 + Math.cos(this.ⲆᐃⵠⵠΔΔⵠ * lt) * 0.05;
        if (this.ⵠᐃⵠⲆⵠᐃᐃ === Jt) {
          var ia = u * (D = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[this.ⵠΔⲆⵠΔᐃⲆ].Δⵠⵠ).width;
          var ja = D.height * u;
          Em(p, D, lo - ia / 2, 260 - ja / 2, ia, ja);
        } else if (this.ⵠᐃⵠⲆⵠᐃᐃ === 1) {
          ia = (D = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[Jt].Δⵠⵠ).width * u;
          ja = u * D.height;
          Em(p, D, lo - ia / cu, 260 - ja / 2, ia, ja);
          ia = (D = ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ[this.ⵠΔⲆⵠΔᐃⲆ].Δⵠⵠ).width * u;
          ja = u * D.height;
          Em(p, D, lo - ia / Xn, 260 - ja / yg, ia, ja);
        } else if (Xn === this.ⵠᐃⵠⲆⵠᐃᐃ) {
          ia = (D = ⲆⲆⵠⲆ.ᐃⵠΔⵠ[this.ⵠΔⲆⵠΔᐃⲆ].Δⵠⵠ).width * u;
          ja = D.height * u;
          Em(p, D, lo - ia / 2, 180 - ja / ij, ia, ja);
          ia = (D = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[tr].Δⵠⵠ).width * u;
          ja = u * D.height;
          Em(p, D, lo - ia / 2, 260 - ja / yg, ia, ja);
        } else if (this.ⵠᐃⵠⲆⵠᐃᐃ === 3) {
          ia = (D = ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ[this.ⵠΔⲆⵠΔᐃⲆ].Δⵠⵠ).width * u;
          ja = D.height * u;
          p.save();
          p.translate(lo, 260);
          p.rotate(Math.PI);
          Em(p, D, -ia / ib, -ja / 2, ia, ja);
          p.restore();
        } else if (Ai === this.ⵠᐃⵠⲆⵠᐃᐃ) {
          ia = u * (D = ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ[this.ⵠΔⲆⵠΔᐃⲆ].Δⵠⵠ).width;
          ja = u * D.height;
          Em(p, D, lo - ia / ib, 260 - ja / 2, ia, ja);
        }
        D = this.ⲆΔᐃⵠᐃᐃΔ;
        Em(p, D, lo - D.width / 4, 340, D.width / yh, D.height / 2);
        D = this.ᐃⵠᐃⵠΔⲆⲆ;
        Em(p, D, lo - D.width / kr, 365, D.width / ib, D.height / pa);
        if (H < this.ⲆᐃⵠⵠΔΔⵠ) {
          this.ⵠⵠΔⵠⵠ = 0;
          fa(ca);
        }
        p.globalAlpha = wg;
      }
      Ww.alert.ᐃⵠⲆᐃ("#FFF", "#000");
      if (z.waiting) {
        this.ᐃΔⲆⵠᐃΔΔ.ᐃⵠⲆᐃ();
      }
    };
    var u = 0;
    var I = Math.pow(2, u++);
    var O = Math.pow(Ok, u++);
    this.ⲆⲆⲆⲆⵠ = O;
    var c = Math.pow(_t, u++);
    var m = Math.pow($r, u++);
    var ca = Math.pow(pa, u++);
    var T = Math.pow(2, u++);
    var y = Math.pow(ij, u++);
    var w = Math.pow($r, u++);
    this.ᐃⲆⲆΔΔ = w;
    var A = Math.pow(2, u++);
    var k = Math.pow(2, u++);
    var x = Math.pow(kn, u++);
    var J = Math.pow(Ok, u++);
    var B = Math.pow(2, u++);
    var E = Math.pow(Qs, u++);
    var S = Math.pow(xl, u++);
    var Q = Math.pow(Le, u++);
    var _ = Math.pow(2, u++);
    var F = Math.pow(kn, u++);
    var R = Math.pow(kn, u++);
    var j = Math.pow(2, u++);
    var L = Math.pow(2, u++);
    var W = Math.pow(Le, u++);
    var G = Math.pow(2, u++);
    var q = Math.pow(2, u++);
    var N = Math.pow(ij, u++);
    this.ⲆⲆⵠᐃᐃ = N;
    var da = Math.pow(eh, u++);
    this.ΔⲆⵠⲆⲆ = da;
    var Y = Math.pow(2, u++);
    this.ⲆⲆᐃⲆⲆ = Y;
    var K = Math.pow(2, u++);
    function P(a, b, c) {
      for (var d = yk; z.ⲆⲆᐃⲆ.length > d; d++) {
        if (z.ⲆⲆᐃⲆ[d].view & a) {
          z.ⲆⲆᐃⲆ[d].active = b;
        }
      }
      for (d = jj; z.buttons.length > d; d++) {
        if (yk !== (z.buttons[d].view & a)) {
          z.buttons[d].info.active = b;
        }
      }
      for (d = xb; d < z.ᐃᐃΔⲆⵠ.length; d++) {
        if ((z.ᐃᐃΔⲆⵠ[d].view & a) !== Ko) {
          z.ᐃᐃΔⲆⵠ[d].style.display = c;
        }
      }
    }
    this.ⵠᐃᐃⵠᐃ = I;
    function ea() {
      var a = Number(ⲆᐃΔⵠ.get("starve_crate"));
      var b = Number(ⲆᐃΔⵠ.get("starve_dead"));
      var c = Number(ⲆᐃΔⵠ.get("starve_book"));
      var d = Number(ⲆᐃΔⵠ.get("starve_bag"));
      var e = Number(ⲆᐃΔⵠ.get("starve_skin"));
      var f = Number(ⲆᐃΔⵠ.get("starve_accessory"));
      if (sf.unlock.ⲆΔⲆⵠ[sf.ⲆΔⲆⵠ] <= rh) {
        sf.ⲆΔⲆⵠ = sf.unlock.ⲆΔⲆⵠ[e] > $t ? e : Ko;
      }
      if (sf.unlock.ΔⲆⵠⵠᐃ[sf.ΔⲆⵠⵠᐃ] <= xb) {
        sf.ΔⲆⵠⵠᐃ = sf.unlock.ΔⲆⵠⵠᐃ[c] > 0 ? c : 0;
      }
      if (sf.unlock.ᐃⵠⲆΔΔ[sf.ᐃⵠⲆΔΔ] <= 0) {
        sf.ᐃⵠⲆΔΔ = sf.unlock.ᐃⵠⲆΔΔ[b] > Wh ? b : Fj;
      }
      if (sf.unlock.ΔᐃⲆΔⵠ[sf.ΔᐃⲆΔⵠ] <= 0) {
        sf.ΔᐃⲆΔⵠ = sf.unlock.ΔᐃⲆΔⵠ[a] > Jt ? a : _s;
      }
      if (sf.unlock.ΔᐃᐃΔⵠ[sf.ΔᐃᐃΔⵠ] <= 0) {
        sf.ΔᐃᐃΔⵠ = sf.unlock.ΔᐃᐃΔⵠ[f] > Wh ? f : Jt;
      }
      if (sf.unlock.ᐃΔᐃᐃⲆ[sf.ᐃΔᐃᐃⲆ] <= Lu) {
        sf.ᐃΔᐃᐃⲆ = sf.unlock.ᐃΔᐃᐃⲆ[d] > 0 ? d : Kr;
      }
    }
    function fa(a) {
      if (z.ⲆⵠⵠⲆⵠᐃᐃ !== false) {
        P(A, sa, "none");
        P(k, sa, "none");
        ea();
        if (a !== z.ⵠᐃᐃⵠᐃ && z.ⵠⵠΔⵠⵠ < 1) {
          z.ⵠΔⲆᐃᐃ.style.display = a === I || ca === a || a === O || y === a || a === m || T === a ? "inline-block" : "none";
          P(z.ⵠᐃᐃⵠᐃ, sa, "none");
          z.ⵠᐃᐃⵠᐃ = a;
          P(z.ⵠᐃᐃⵠᐃ, ua, "inline-block");
        }
      }
    }
    function ha() {
      if (Ww.ᐃⲆΔᐃⵠⲆᐃ !== undefined && Ww.ΔⵠΔΔⲆΔⵠ !== undefined && Ww.ΔᐃⵠΔⲆⲆⵠ !== undefined) {
        ea();
        if (zf % 2) {
          console.log(gh);
          ᐃΔΔᐃ.connect();
        } else {
          console.log(undefined);
          if (Vf.Widget.isBlocked === 1) {
            Vf.Widget.createAdPlayer(ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ), ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ));
          } else {
            Vf.Widget.preroll();
            Vf.Widget.play = ᐃΔΔᐃ.connect.bind(ᐃΔΔᐃ);
          }
        }
      }
    }
    function ia(a, b, c) {
      const d = new XMLHttpRequest();
      d.open("GET", a);
      d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      d.onreadystatechange = function () {
        if (this.readyState == Ka && this.status == 200) {
          if (b !== undefined) {
            b(d.responseText);
          }
        } else if (kr == this.readyState && c !== undefined) {
          c();
        }
      };
      d.send();
    }
    this.ᐃⲆᐃᐃΔᐃⵠ = jj;
    this.ⲆΔⲆΔ = fa;
    this.Δᐃᐃⵠⵠⵠᐃ = function () {
      if (z.waiting === Pa) {
        Ww.reconnect.enabled = tq;
        z.waiting = vi;
        if (Ww.ᐃⲆΔᐃⵠⲆᐃ) {
          ha();
        } else {
          ia(`${Af}token`, function (a) {
            const b = a.split("_");
            const c = b[Fj] + "_";
            const d = Number(b[1]);
            const e = Math.abs(function (a) {
              return ln(a, 8260, 46947, 8004, 37330, 5330);
            }(d));
            Ww.ᐃⲆΔᐃⵠⲆᐃ = c + e;
            ha();
          }, function () {
            z.waiting = false;
          });
        }
        ia(`${kf}get`, function (a) {
          const b = a.split("_");
          const c = b[yk] + "_";
          const d = Number(b[1]);
          const e = Math.abs(wk(d));
          Ww.ΔⵠΔΔⲆΔⵠ = c + e;
          ha();
        }, function () {
          z.waiting = v;
        });
        ia(`${kf}set`, function (a) {
          const b = a.split("_");
          const c = b[Dh] + "_";
          const d = Number(b[1]);
          const e = Math.abs(function (a) {
            return function (a, b, c, d) {
              ki(Zg, a, b, c, d);
              const e = function (b, c, d, e, f, g) {
                Jj(Zg, b, c, d, e, f, g);
                const h = Ps(Ks[_s], Ks[ik]);
                const a = function (a, b, c) {
                  mi(Zg, a, b, c);
                  const d = Aa(Ks[0], Ks[Fo], Ks[eh], Ks[tr], Ks[Aj]);
                  Ma(Ks[$r], Ks[0]);
                  return (d | 55787) & ~(d & 55787);
                }(Ks[xl], Ks[Ea], Ks[4]);
                return (8 << ((h ^ a) & 255)) + (24 << ((h ^ a) >> 24 & yq)) + (16 << ((h ^ a) >> 8 & rg)) + (0 << ((h ^ a) >> 16 & 255));
              }(Ks[0], Ks[1], Ks[_l], Ks[3], Ks[0], Ks[1]);
              Ma(Ks[Le], Ks[3]);
              return (e | 33577) & ~(e & 33577);
            }(a, 22898, 64010, 26473);
          }(d));
          Ww.ΔᐃⵠΔⲆⲆⵠ = c + e;
          ha();
        }, function () {
          z.waiting = fl;
        });
      }
    };
    var ja = Br;
    var ka = 2;
    var la = 4;
    var ma = 8;
    var na = 16;
    var ra = 32;
    var sa = Fj;
    var ua = Aj;
    if (Vf.innerWidth < 1300) {
      this.ᐃΔⲆⵠΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ua,
        position: la | ja,
        view: I,
        translate: {
          ΔⵠⵠⲆⵠ: 184,
          y: Dh,
          x: 0,
          ᐃᐃⲆⵠΔ: 200
        }
      };
    } else {
      this.ᐃΔⲆⵠΔ = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: ua,
        position: la | na,
        view: I,
        translate: {
          y: 0,
          ΔⵠⵠⲆⵠ: 184,
          x: 0,
          ᐃᐃⲆⵠΔ: -180
        }
      };
    }
    this.ᐃΔⲆⵠΔ.id.addEventListener("keyup", function (a) {
      a.preventDefault();
      if (a.keyCode == gt && !z.waiting && !z.ΔⲆᐃΔΔⵠΔᐃⲆ) {
        z.Δᐃᐃⵠⵠⵠᐃ();
      }
    });
    this.ᐃΔⲆⵠΔ.input.value = ⲆᐃΔⵠ.get("starve_nickname") ? ⲆᐃΔⵠ.get("starve_nickname") : "";
    this.ᐃΔΔᐃⲆΔΔⵠΔ = {
      id: document.getElementById("account_nickname_block"),
      style: document.getElementById("account_nickname_block").style,
      input: document.getElementById("account_nickname_input"),
      active: sa,
      position: la | na,
      view: O,
      translate: {
        ᐃᐃⲆⵠΔ: -122,
        x: 0,
        y: kq,
        ΔⵠⵠⲆⵠ: 110
      }
    };
    if (Vf.innerWidth < 1300) {
      this.ⲆⲆᐃᐃΔ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ua,
        position: la | ja,
        view: I,
        translate: {
          y: Fj,
          ΔⵠⵠⲆⵠ: 225,
          ᐃᐃⲆⵠΔ: 208,
          x: 0
        }
      };
    } else {
      this.ⲆⲆᐃᐃΔ = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: ua,
        position: la | na,
        view: I,
        translate: {
          ΔⵠⵠⲆⵠ: 225,
          y: 0,
          x: Dh,
          ᐃᐃⲆⵠΔ: -180
        }
      };
    }
    this.ⵠⵠⲆⲆ = {
      id: document.getElementById("leaderboard"),
      style: document.getElementById("leaderboard").style,
      active: sa,
      position: la | na,
      view: y,
      translate: {
        y: 0,
        x: 0,
        ᐃᐃⲆⵠΔ: -294.5,
        ΔⵠⵠⲆⵠ: 190
      }
    };
    this.ⲆΔΔᐃⵠᐃᐃⵠⵠ = {
      id: document.getElementById("stats_box"),
      style: document.getElementById("stats_box").style,
      active: sa,
      position: la | na,
      view: O,
      translate: {
        y: rh,
        ΔⵠⵠⲆⵠ: 187,
        ᐃᐃⲆⵠΔ: 125,
        x: 0
      }
    };
    this.ⵠᐃⲆᐃⵠⲆΔᐃΔ = {
      id: document.getElementById("serverAddressBlock"),
      style: document.getElementById("serverAddressBlock").style,
      input: document.getElementById("serverAddressInput"),
      active: sa,
      position: la | na,
      view: Y,
      translate: {
        ΔⵠⵠⲆⵠ: 350,
        y: Lg,
        x: Kr,
        ᐃᐃⲆⵠΔ: -220
      }
    };
    u = 0;
    this.ᐃᐃΔⲆⵠ = [];
    this.ᐃᐃΔⲆⵠ[u++] = this.ᐃΔⲆⵠΔ;
    this.ᐃᐃΔⲆⵠ[u++] = this.ⲆⲆᐃᐃΔ;
    this.ᐃᐃΔⲆⵠ[u++] = this.ⵠⵠⲆⲆ;
    this.ᐃᐃΔⲆⵠ[u++] = this.ᐃΔΔᐃⲆΔΔⵠΔ;
    this.ᐃᐃΔⲆⵠ[u++] = this.ⲆΔΔᐃⵠᐃᐃⵠⵠ;
    this.ᐃᐃΔⲆⵠ[u++] = this.ⵠᐃⲆᐃⵠⲆΔᐃΔ;
    u = Lu;
    this.ⲆⲆᐃⲆ = [];
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃᐃΔⲆⵠⲆⵠ, ua, 0, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⲆΔᐃⲆΔⲆⲆ, sa, tr, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠⵠⵠⵠᐃᐃⲆ, sa, kq, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠᐃⵠⲆⵠⲆⲆ, sa, yk, kq, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠΔⵠⵠⲆΔᐃ, sa, 0, jj, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃΔⵠΔⲆⲆΔ, sa, $t, Mn, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⲆⵠⲆⵠᐃⵠᐃ, sa, 0, Jt, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠⵠᐃᐃᐃᐃᐃ, sa, Wh, Jt, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃⲆⵠᐃΔᐃⲆ, sa, 0, Dh, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃⵠⲆΔᐃⲆⲆ, sa, 0, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃⲆᐃⵠⲆᐃΔ, sa, Gd, Mn, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠΔⵠⲆⲆᐃⵠ, sa, Lu, Kr, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⲆΔⵠⵠⵠⲆΔ, sa, Ko, _s, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃⵠⲆⵠⵠᐃⲆ, sa, 0, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⲆⵠⵠᐃᐃⵠⲆ, sa, Mn, Mn, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃᐃⲆΔᐃΔΔ, sa, 0, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⲆᐃᐃⵠᐃⲆⵠ, sa, 0, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ⵠⲆᐃΔᐃⵠΔ, sa, tr, 0, ja);
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.Δᐃⵠⵠᐃᐃᐃ, sa, Lu, 0, ja);
    if (Vf.innerWidth < 1300) {
      this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⲆᐃⲆⵠⲆⲆⵠ, ua, 200, Yi, la | ja);
    } else {
      this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⲆᐃⲆⵠⲆⲆⵠ, ua, -753 / oj, 100, la | na);
    }
    this.ⲆⲆᐃⲆ[u++].view = I;
    this.ⲆⲆᐃⲆ[u++] = Tv(Δᐃ.ᐃᐃⲆΔⲆΔⲆ, ua, 403, -oa, ka);
    if (Vf.innerWidth > 1300) {
      this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔⵠⲆⲆᐃⲆⵠ, ua, -885 / kr, -319 / xl, ma | na);
      this.ⲆⲆᐃⲆ[u++].view = I;
    }
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃⲆᐃⲆⲆΔᐃ, sa, -323.25, wr, la | na);
    this.ⲆⲆᐃⲆ[u++].view = O;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠⲆⲆΔᐃΔⲆ, sa, -1425 / In, 100, la | na);
    this.ⲆⲆᐃⲆ[u++].view = m;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠⲆΔⵠᐃΔⲆ, sa, -905 / 4, 50, la | na);
    this.ⲆⲆᐃⲆ[u++].view = c;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔᐃⲆⵠᐃⵠΔ, sa, -402, 130, la | na);
    this.ⲆⲆᐃⲆ[u++].view = ca;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔᐃΔⵠⲆⵠ, sa, -279.25, 130, la | na);
    this.ⲆⲆᐃⲆ[u++].view = N;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔⲆⲆᐃᐃⵠ, sa, -305.5, 130, la | na);
    this.ⲆⲆᐃⲆ[u++].view = da;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠⲆⲆΔᐃⵠΔ, sa, -305.5, 100, la | na);
    this.ⲆⲆᐃⲆ[u++].view = Y;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃΔΔᐃⵠⲆᐃ, sa, -Δᐃ.ᐃΔΔᐃⵠⲆᐃ.width / Yn - 350, -15, la | na);
    this.ⲆⲆᐃⲆ[u++].view = K;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⲆΔΔⲆⵠⲆᐃ, sa, -1497 / th, 110, la | na);
    this.ⲆⲆᐃⲆ[u++].view = T;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔⲆⲆⲆΔⲆᐃ, sa, -1226 / xt, 100, la | na);
    this.ⲆⲆᐃⲆ[u++].view = y;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠᐃⵠᐃᐃΔΔ, sa, -345.25, 80, la | na);
    this.ⲆⲆᐃⲆ[u++].view = w;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔΔΔⲆⵠⲆ, sa, -1542 / f, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = x;
    var xa = 360 / dg;
    var ya = this.ΔΔⵠΔΔΔⲆ([["#25c5d6", xa * 3], ["#e2cf27", zq * xa], ["#afac98", xa * 30], ["#d88e23", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / In, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = x;
    this.ⲆΔⵠⲆΔΔⲆᐃⵠ = function (a, b, c) {
      var d;
      z.ⵠⵠΔⵠⵠ = ce;
      z.ⲆⵠΔⲆᐃΔΔ = Ko;
      z.ⲆᐃⵠⵠΔΔⵠ = ko;
      z.ⵠΔⵠΔΔΔΔ = a;
      z.ⵠᐃⵠⲆⵠᐃᐃ = b;
      var e = Fj;
      if (b === 0) {
        for (e = 0; e < ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ.length && c !== ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[e].id; e++);
        d = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ[e];
        z.unlock.ⲆΔⲆⵠ[e] = 1;
      } else if (b === bt) {
        for (e = 0; e < ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ.length && c !== ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ[e].id; e++);
        d = ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ[e];
        z.unlock.ΔᐃᐃΔⵠ[e] = 1;
      } else if (b === kn) {
        for (e = 0; ⲆⲆⵠⲆ.ᐃⵠΔⵠ.length > e && c !== ⲆⲆⵠⲆ.ᐃⵠΔⵠ[e].id; e++);
        d = ⲆⲆⵠⲆ.ᐃⵠΔⵠ[e];
        z.unlock.ᐃΔᐃᐃⲆ[e] = ce;
      } else if (b === 3) {
        for (e = xb; e < ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ.length && c !== ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ[e].id; e++);
        d = ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ[e];
        z.unlock.ΔⲆⵠⵠᐃ[e] = 1;
      } else if (b === qa) {
        for (e = Gd; e < ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ.length && ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ[e].id !== c; e++);
        d = ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ[e];
        z.unlock.ΔᐃⲆΔⵠ[e] = er;
        z.unlock.ᐃⵠⲆΔΔ[e] = Ur;
      }
      z.ⵠΔⲆⵠΔᐃⲆ = e;
      z.ᐃⵠᐃⵠΔⲆⲆ = Sv("by " + d.ⵠΔⲆ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, Zl, lq, Qi, undefined, "#000000", 24);
      z.ⲆΔᐃⵠᐃᐃΔ = Sv(d.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, gh, 30, 24, undefined, Rg, undefined, undefined, "#000000", 20);
    };
    this.ⵠⵠΔⵠⵠ = $t;
    this.ⲆⵠΔⲆᐃΔΔ = ko;
    this.ⵠΔⵠΔΔΔΔ = 0;
    this.ⵠᐃⵠⲆⵠᐃᐃ = ko;
    this.ⲆᐃⵠⵠΔΔⵠ = 0;
    this.ᐃⵠᐃⵠΔⲆⲆ = undefined;
    this.ⲆΔᐃⵠᐃᐃΔ = undefined;
    var za = 197;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⲆΔⵠᐃⲆⵠⵠ, sa, -1542 / zg, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = S;
    ya = this.ΔΔⵠΔΔΔⲆ([["#d45ce5", xa * ta], ["#25c5d6", xa * 10], ["#e2cf27", xa * 30], ["#afac98", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / 4, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = S;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃⵠΔᐃᐃⲆΔ, sa, -385.5, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = B;
    ya = this.ΔΔⵠΔΔΔⲆ([["#d33a2a", xa * _i], ["#d45ce5", xa * zq], ["#25c5d6", xa * 30], ["#e2cf27", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / bn, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = B;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃΔⲆⵠΔΔⲆ, sa, -1542 / Dt, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = E;
    ya = this.ΔΔⵠΔΔΔⲆ([["#25c5d6", xa * Kk], ["#e2cf27", xa * Fg], ["#afac98", xa * 30], ["#d88e23", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / 4, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = E;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔΔᐃⲆᐃᐃ, sa, -1542 / qa, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = J;
    ya = this.ΔΔⵠΔΔΔⲆ([["#d45ce5", xa * lk], ["#25c5d6", xa * oa], ["#e2cf27", xa * 30], ["#afac98", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / 4, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = J;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⲆᐃᐃΔⵠᐃⲆ, sa, -1542 / bn, 150, la | na);
    this.ⲆⲆᐃⲆ[u++].view = Q;
    ya = this.ΔΔⵠΔΔΔⲆ([["#d33a2a", xa * 3], ["#d45ce5", xa * 10], ["#25c5d6", xa * 30], ["#e2cf27", xa * 57]]);
    this.ⲆⲆᐃⲆ[u] = Tv(ya, sa, -ya.width / Lb, 178, la | na);
    this.ⲆⲆᐃⲆ[u++].view = Q;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔΔⵠᐃΔΔΔ, sa, -341.5, Er, la | na);
    this.ⲆⲆᐃⲆ[u++].view = _;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔⵠΔⲆᐃΔ, sa, -1366 / oj, 100, la | na);
    this.ⲆⲆᐃⲆ[u++].view = L;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠⵠⲆⲆⲆⲆΔ, sa, -341.5, 100, la | na);
    this.ⲆⲆᐃⲆ[u++].view = R;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃⵠΔΔⲆⲆΔ, sa, -1366 / Lb, Bs, la | na);
    this.ⲆⲆᐃⲆ[u++].view = j;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔⵠⲆΔᐃⵠΔ, sa, -341.5, rs, la | na);
    this.ⲆⲆᐃⲆ[u++].view = F;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠΔᐃⲆΔᐃᐃ, sa, -341.5, Kn, la | na);
    this.ⲆⲆᐃⲆ[u++].view = W;
    ⲆΔⲆΔΔᐃᐃ = u++;
    this.ⲆⲆᐃⲆ[ⲆΔⲆΔΔᐃᐃ] = Tv(Δᐃ.ⲆΔⲆΔΔᐃᐃ, sa, 484, yk, la);
    ᐃⲆᐃⵠⵠΔᐃ = u++;
    this.ⲆⲆᐃⲆ[ᐃⲆᐃⵠⵠΔᐃ] = Tv(Δᐃ.ᐃⲆᐃⵠⵠΔᐃ, sa, 454 + 597 / cu + 60, 0, la);
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠⲆⲆⲆΔⲆᐃ, sa, -189.5, -Wn, la | na);
    this.ⲆⲆᐃⲆ[u++].view = k;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ⵠᐃⲆⵠⲆⲆⵠ, sa, -189.5, -uh, la | na);
    this.ⲆⲆᐃⲆ[u++].view = A;
    ⲆᐃΔΔΔᐃⲆ = u++;
    this.ⲆⲆᐃⲆ[ⲆᐃΔΔΔᐃⲆ] = Tv(Δᐃ.ⲆⵠᐃⲆⵠᐃΔ, ua, 93, 30, la);
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ΔⲆⵠⲆⵠⵠΔ, sa, -692 / xt, 110, la | na);
    this.ⲆⲆᐃⲆ[u++].view = G;
    this.ⲆⲆᐃⲆ[u] = Tv(Δᐃ.ᐃΔⵠΔⵠᐃⲆ, sa, -173, 110, la | na);
    this.ⲆⲆᐃⲆ[u++].view = q;
    u = 0;
    this.buttons = [];
    this.buttons[u] = Qv(50, 57, 0, [Δᐃ.ⲆᐃᐃⲆᐃⲆⲆ, Δᐃ.ⵠⲆᐃⲆᐃⲆⲆ, Δᐃ.ᐃⵠⵠΔⲆᐃᐃ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        fa(w);
      } else {
        fa(c);
      }
    }, 320, rh, ja, ua);
    u++;
    if (Vf.innerWidth < 1300) {
      this.buttons[u] = Qv(202, 97, 0, [Δᐃ.ᐃⵠⵠⲆᐃΔⲆ, Δᐃ.ⵠⲆⵠᐃⲆΔΔ, Δᐃ.ΔΔⵠⲆⲆⲆⵠ], 1, 0, this.Δᐃᐃⵠⵠⵠᐃ, 462, 235, la | ja, ua);
    } else {
      this.buttons[u] = Qv(202, 97, 0, [Δᐃ.ᐃⵠⵠⲆᐃΔⲆ, Δᐃ.ⵠⲆⵠᐃⲆΔΔ, Δᐃ.ΔΔⵠⲆⲆⲆⵠ], 1, 0, this.Δᐃᐃⵠⵠⵠᐃ, 74, 235, la | na, ua);
    }
    this.buttons[u].view = I;
    u++;
    if (Vf.innerWidth > 1300) {
      this.buttons[u] = Qv(355, 168, 0, [Δᐃ.ⲆᐃᐃⲆⲆᐃᐃ, Δᐃ.ⲆᐃᐃⲆⲆᐃᐃ, Δᐃ.ⲆᐃᐃⲆⲆᐃᐃ], 1, 0, function () {
        Vf.open("./changelog.html", "_blank");
      }, -195, -115, ma | na, ua);
      this.buttons[u++].view = I;
      this.buttons[u] = Qv(355, 168, 0, [Δᐃ.ⵠⵠⲆⲆⲆⵠⵠ, Δᐃ.ⵠⵠⲆⲆⲆⵠⵠ, Δᐃ.ⵠⵠⲆⲆⲆⵠⵠ], 1, 0, function () {
        Vf.open("https://taming.io", "_blank");
      }, Gh, -115, ma | na, ua);
      this.buttons[u++].view = I;
    }
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⲆⵠⵠⲆΔᐃⵠ, Δᐃ.ΔΔᐃⲆΔᐃⲆ, Δᐃ.ⵠΔΔⲆΔⵠᐃ], 1, 0, function () {
      Vf.open("https://lapamauve.creator-spring.com/", "_blank");
    }, 380, Ke, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⲆΔⵠⲆⵠⵠΔ, Δᐃ.ᐃᐃᐃΔᐃᐃⲆ, Δᐃ.ⵠΔΔΔⵠΔⵠ], 1, 0, function () {
      Vf.open("https://discord.gg/starveio", "_blank");
    }, 330, 10, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⵠⲆΔΔΔΔΔ, Δᐃ.ᐃΔⲆⵠᐃⲆᐃ, Δᐃ.ⵠΔⵠᐃⲆΔΔ], 1, 0, function () {
      Vf.open("https://reddit.com/r/starveio", "_blank");
    }, 280, 10, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⲆⵠⲆᐃⵠΔΔ, Δᐃ.ⲆⲆⲆΔΔⵠᐃ, Δᐃ.ⲆⵠⲆΔⵠᐃΔ], 1, 0, function () {
      Vf.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, 230, Fn, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⲆⵠᐃᐃⲆⵠΔ, Δᐃ.ⲆⵠᐃΔⵠΔⵠ, Δᐃ.ᐃⲆⲆᐃΔΔᐃ], 1, 0, function () {
      Vf.open("https://www.facebook.com/LapaMauve/", "_blank");
    }, 155, Fn, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ⲆⵠΔΔⲆΔⲆ, Δᐃ.ⵠΔΔⵠΔΔⲆ, Δᐃ.ⲆΔΔⲆⵠΔᐃ], 1, 0, function () {
      Vf.open("https://twitter.com/lapamauve", "_blank");
    }, 105, lj, ka, ua);
    this.buttons[u++] = Qv(80, 80, 0, [Δᐃ.ᐃΔⲆⲆᐃΔⲆ, Δᐃ.ⲆⵠⵠⵠⵠᐃⲆ, Δᐃ.ⲆⵠⲆⵠⵠᐃΔ], 1, 0, function () {
      Vf.open("https://www.youtube.com/@lapamauveofficial", "_blank");
    }, 55, hl, ka, ua);
    ⵠΔⵠⲆΔᐃⵠ = u++;
    this.buttons[ⵠΔⵠⲆΔᐃⵠ] = Qv(232, 142, 0, [Δᐃ.ⵠⲆⲆⵠⲆΔⵠ, Δᐃ.ⵠⵠⵠΔᐃⲆᐃ, Δᐃ.Ⲇⵠᐃⵠⵠᐃᐃ], 1, 0, function () {
      fa(y);
      Of(sf.ⲆΔⵠⵠᐃⵠᐃ, sf.ⲆⵠᐃᐃⲆᐃⵠ, sf.ⲆⵠⲆⲆⲆⵠⲆ, sf.ᐃⵠⲆⵠⵠⵠΔ);
    }, -5, 573, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ΔΔΔᐃⲆⲆᐃ, Δᐃ.ΔΔΔᐃⲆⲆᐃ, Δᐃ.ΔΔΔᐃⲆⲆᐃ], 1, 1, function () {
      fa(y);
    }, -5, 566, ja, ua);
    ΔΔΔⲆΔⲆⵠ = u++;
    this.buttons[ΔΔΔⲆΔⲆⵠ] = Qv(236, 165, 0, [Δᐃ.ᐃΔⵠⵠⲆΔΔ, Δᐃ.ⵠᐃᐃᐃΔⲆⵠ, Δᐃ.ⲆΔᐃᐃⵠᐃⲆ], 1, 0, function () {
      fa(T);
    }, -5, 494, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ⵠⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆΔᐃᐃΔⵠ, Δᐃ.ⵠⲆΔᐃᐃΔⵠ], 1, 1, function () {
      fa(T);
    }, -5, 494, ja, ua);
    ΔⲆⲆⲆΔΔⲆ = u++;
    this.buttons[ΔⲆⲆⲆΔΔⲆ] = Qv(236, 165, 0, [Δᐃ.ᐃΔⵠⵠⲆΔΔ, Δᐃ.ⵠᐃᐃᐃΔⲆⵠ, Δᐃ.ⲆΔᐃᐃⵠᐃⲆ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        if (sf.ᐃᐃᐃⲆΔⵠⲆ - Date.now() > 0) {
          fa(Y);
        }
      } else {
        fa(c);
      }
    }, -Wn, 415, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ΔΔᐃΔⲆΔⲆ, Δᐃ.ΔΔᐃΔⲆΔⲆ, Δᐃ.ΔΔᐃΔⲆΔⲆ], 1, 1, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        if (xb < sf.ᐃᐃᐃⲆΔⵠⲆ - Date.now()) {
          fa(Y);
        }
      } else {
        fa(c);
      }
    }, -vu, 415, ja, ua);
    ⵠᐃᐃⲆⲆⲆⵠ = u++;
    this.buttons[ⵠᐃᐃⲆⲆⲆⵠ] = Qv(236, 165, 0, [Δᐃ.ᐃΔⵠⵠⲆΔΔ, Δᐃ.ⵠᐃᐃᐃΔⲆⵠ, Δᐃ.ⲆΔᐃᐃⵠᐃⲆ], 1, 0, function () {
      fa(ca);
    }, -U, 336, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ΔΔΔᐃᐃΔⵠ, Δᐃ.ΔΔΔᐃᐃΔⵠ, Δᐃ.ΔΔΔᐃᐃΔⵠ], 1, 1, function () {
      fa(ca);
    }, -5, 336, ja, ua);
    ⲆΔⵠⵠⵠΔᐃ = u++;
    this.buttons[ⲆΔⵠⵠⵠΔᐃ] = Qv(236, 165, 0, [Δᐃ.ᐃΔⵠⵠⲆΔΔ, Δᐃ.ⵠᐃᐃᐃΔⲆⵠ, Δᐃ.ⲆΔᐃᐃⵠᐃⲆ], 1, 0, function () {
      fa(m);
    }, -5, 257, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ⲆⵠᐃⵠⲆⲆⵠ, Δᐃ.ⲆⵠᐃⵠⲆⲆⵠ, Δᐃ.ⲆⵠᐃⵠⲆⲆⵠ], 1, 1, function () {
      fa(m);
    }, -vu, 257, ja, ua);
    ⵠⲆⵠΔⲆᐃΔ = u++;
    this.buttons[ⵠⲆⵠΔⲆᐃΔ] = Qv(236, 165, 0, [Δᐃ.ᐃΔⵠⵠⲆΔΔ, Δᐃ.ⵠᐃᐃᐃΔⲆⵠ, Δᐃ.ⲆΔᐃᐃⵠᐃⲆ], 1, 0, function () {
      fa(I);
    }, -Rj, 178, ja, ua);
    this.buttons[u++] = Qv(236, 165, 0, [Δᐃ.ⵠΔⵠⵠΔⵠᐃ, Δᐃ.ⵠΔⵠⵠΔⵠᐃ, Δᐃ.ⵠΔⵠⵠΔⵠᐃ], 1, 1, function () {
      fa(I);
    }, -U, 178, ja, ua);
    ΔⲆⵠΔᐃⵠᐃ = u++;
    this.ΔⲆⵠΔᐃⵠᐃ = ΔⲆⵠΔᐃⵠᐃ;
    this.buttons[ΔⲆⵠΔᐃⵠᐃ] = Qv(324, 222, 0, [Δᐃ.ⵠᐃᐃᐃⲆΔⵠ, Δᐃ.ΔⵠΔᐃᐃⵠⵠ, Δᐃ.ⲆΔⲆⵠⲆⲆⲆ], 1, 0, function () {
      fa(c);
    }, 0, 70, ja, ua);
    ⲆᐃⵠΔΔᐃⲆ = u++;
    ᐃᐃΔΔⵠⲆΔ = u++;
    this.ⲆᐃⵠΔΔᐃⲆ = ⲆᐃⵠΔΔᐃⲆ;
    this.ᐃᐃΔΔⵠⲆΔ = ᐃᐃΔΔⵠⲆΔ;
    this.buttons[ⲆᐃⵠΔΔᐃⲆ] = Qv(324, 222, 0, [Δᐃ.ΔⲆᐃᐃⵠᐃΔ, Δᐃ.ⲆⲆⲆⲆᐃᐃΔ, Δᐃ.ᐃⲆⲆᐃᐃᐃᐃ], 1, 0, function () {
      fa(O);
      Ia(-Ur);
    }, 0, 70, ja, sa);
    this.buttons[ᐃᐃΔΔⵠⲆΔ] = Qv(324, 222, 0, [Δᐃ.ᐃⲆΔᐃΔⵠⲆ, Δᐃ.ᐃⲆΔᐃΔⵠⲆ, Δᐃ.ᐃⲆΔᐃΔⵠⲆ], 1, 1, function () {
      fa(O);
      Ia(-er);
    }, Gd, 70, ja, sa);
    if (ᐃΔΔᐃ.ⵠⵠⵠᐃⲆᐃⵠ === 0) {
      var Ba = u++;
      if (Vf.innerWidth < 1300) {
        this.buttons[Ba] = Qv(266, 176, 0, [Δᐃ.ⲆᐃⲆΔΔΔⵠ, Δᐃ.ⲆⲆⲆⲆⲆⵠⲆ, Δᐃ.ΔⲆⵠΔⵠᐃⲆ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃⵠΔΔ);
        }, 150, 300, ja | la, ua);
      } else {
        this.buttons[Ba] = Qv(266, 176, 0, [Δᐃ.ⲆᐃⲆΔΔΔⵠ, Δᐃ.ⲆⲆⲆⲆⲆⵠⲆ, Δᐃ.ΔⲆⵠΔⵠᐃⲆ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃⵠΔΔ);
        }, -340, wa, na | la, ua);
      }
      this.buttons[Ba].view = I;
      this.buttons[Ba].hint = 0;
      var Ca = u++;
      if (Vf.innerWidth < 1300) {
        this.buttons[Ca] = Qv(266, 176, 0, [Δᐃ.ⵠⵠⵠΔⵠΔⵠ, Δᐃ.ᐃᐃⵠⵠΔⲆΔ, Δᐃ.ᐃᐃᐃⵠⵠᐃⵠ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃⲆⵠΔ);
        }, 150, 400, ja | la, ua);
      } else {
        this.buttons[Ca] = Qv(266, 176, 0, [Δᐃ.ⵠⵠⵠΔⵠΔⵠ, Δᐃ.ᐃᐃⵠⵠΔⲆΔ, Δᐃ.ᐃᐃᐃⵠⵠᐃⵠ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃⲆⵠΔ);
        }, -340, 200, na | la, ua);
      }
      this.buttons[Ca].view = I;
      this.buttons[Ca].hint = 0;
      var Da = u++;
      if (Vf.innerWidth < 1300) {
        this.buttons[Da] = Qv(266, 176, 0, [Δᐃ.ᐃᐃⵠⵠⵠⲆΔ, Δᐃ.ᐃᐃⵠⵠⲆᐃⵠ, Δᐃ.Δⵠⵠⵠᐃᐃᐃ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ᐃⲆⲆⵠᐃ);
        }, 450, 300, ja | la, ua);
      } else {
        this.buttons[Da] = Qv(266, 176, 0, [Δᐃ.ᐃᐃⵠⵠⵠⲆΔ, Δᐃ.ᐃᐃⵠⵠⲆᐃⵠ, Δᐃ.Δⵠⵠⵠᐃᐃᐃ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ᐃⲆⲆⵠᐃ);
        }, -340, 300, na | la, ua);
      }
      this.buttons[Da].view = I;
      this.buttons[Da].hint = Ko;
      var Fa = u++;
      if (Vf.innerWidth < 1300) {
        this.buttons[Fa] = Qv(266, 176, 0, [Δᐃ.ᐃΔⲆⵠⲆⵠᐃ, Δᐃ.ᐃΔⵠΔᐃᐃⲆ, Δᐃ.ᐃΔΔᐃΔⲆΔ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃᐃΔⵠ);
        }, 300, 300, ja | la, ua);
      } else {
        this.buttons[Fa] = Qv(266, 176, 0, [Δᐃ.ᐃΔⲆⵠⲆⵠᐃ, Δᐃ.ᐃΔⵠΔᐃᐃⲆ, Δᐃ.ᐃΔΔᐃΔⲆΔ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⲆᐃᐃΔⵠ);
        }, 204, fh, na | la, ua);
      }
      this.buttons[Fa].view = I;
      this.buttons[Fa].hint = Fj;
      var Ga = u++;
      if (Vf.innerWidth < 1300) {
        this.buttons[Ga] = Qv(266, 176, 0, [Δᐃ.ⵠΔⲆⲆᐃΔⲆ, Δᐃ.ΔᐃⲆⲆⵠⵠΔ, Δᐃ.ⲆᐃΔⵠᐃᐃⲆ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ᐃᐃⵠᐃΔ);
        }, 300, 400, ja | la, ua);
      } else {
        this.buttons[Ga] = Qv(266, 176, 0, [Δᐃ.ⵠΔⲆⲆᐃΔⲆ, Δᐃ.ΔᐃⲆⲆⵠⵠΔ, Δᐃ.ⲆᐃΔⵠᐃᐃⲆ], 1, 0, function () {
          ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ᐃᐃⵠᐃΔ);
        }, 204, 200, na | la, ua);
      }
      this.buttons[Ga].view = I;
      this.buttons[Ga].hint = 0;
      var Ha = u++;
      this.buttons[Ha] = Qv(266, 176, 0, [Δᐃ.ⵠⲆⵠΔΔⲆΔ, Δᐃ.ⲆⲆⵠΔΔΔⲆ, Δᐃ.ᐃⲆⵠⵠⲆⵠⲆ], 1, 0, function () {
        ᐃΔΔᐃ.ΔᐃⲆᐃⲆ(bw.ⵠⵠᐃᐃΔ);
      }, Vf.innerWidth < 1300 ? 450 : 204, Vf.innerWidth < 1300 ? 400 : 300, (Vf.innerWidth < 1300 ? ja : na) | la, ua);
      this.buttons[Ha].view = I;
      this.buttons[Ha].hint = Dh;
    }
    function Ia(a, b) {
      if (D !== b) {
        sf.ΔᐃⵠΔᐃᐃⵠ = b;
        var c = sf.ΔⲆⵠᐃᐃᐃⵠ[b];
        sf.ⲆⲆⲆᐃⵠ = c.score;
        sf.ⲆⲆΔᐃΔ = c.kill;
        sf.ΔⵠΔᐃΔⲆᐃ = c.death;
        sf.time = c.time;
        sf.ⵠⲆᐃⲆᐃⲆΔ = c.bestScore;
        sf.ⲆᐃⵠⵠΔᐃⲆ = c.bestKill;
        sf.ᐃⲆΔⲆᐃᐃⵠ = c.bestTime;
        sf.ΔᐃⵠⲆᐃⵠᐃ = c.scoreTotal;
      }
      if (a === vl) {
        a = sf.ᐃΔⵠⵠⲆᐃᐃ;
      }
      sf.ᐃΔⵠⵠⲆᐃᐃ = a;
      if (Dh <= a) {
        document.getElementById("stats_box_time").innerHTML = sf.ᐃⲆΔⲆᐃᐃⵠ[a];
        document.getElementById("stats_box_kill").innerHTML = sf.ⲆᐃⵠⵠΔᐃⲆ[a];
        document.getElementById("stats_box_score").innerHTML = sf.ⵠⲆᐃⲆᐃⲆΔ[a];
      } else {
        var d = Fj;
        for (var f = kq; sf.ⲆⲆΔᐃΔ.length > f; f++) {
          d += sf.ⲆⲆΔᐃΔ[f];
        }
        var g = Fj;
        for (f = Dh; sf.time.length > f; f++) {
          g += sf.time[f];
        }
        document.getElementById("stats_box_time").innerHTML = g;
        document.getElementById("stats_box_kill").innerHTML = d;
        document.getElementById("stats_box_score").innerHTML = sf.ⲆⲆⲆᐃⵠ;
      }
    }
    this.buttons[u] = Qv(87, 78, 0, [Δᐃ.ⵠΔⲆⲆᐃΔΔ, Δᐃ.ᐃⲆΔⵠᐃΔⵠ, Δᐃ.ᐃⵠⲆⵠⵠᐃⵠ], 1, 0, function () {
      sf.ΔΔΔⲆⲆⲆⲆᐃⲆ();
      if (sf.ᐃⵠΔⲆⵠⵠⲆ === xb) {
        fa(q);
      } else {
        fa(G);
      }
    }, 127, 110, na | la, sa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qv(87, 78, 0, [Δᐃ.ΔⵠⲆⲆᐃᐃⲆ, Δᐃ.ΔⵠⵠΔΔⵠⲆ, Δᐃ.ΔΔΔⵠΔΔᐃ], 1, 0, function () {
      (function () {
        if (Mf === Jf && Vf.FB.getUserID()) {
          Vf.FB.logout();
        }
        if (xf === Mf && fx !== Nl) {
          Vf.gapi.auth2.getAuthInstance().signOut();
          fx = undefined;
        }
        cx = gh;
        bx = undefined;
        Mf = undefined;
        sf.ΔΔⲆᐃⵠ = ko;
        sf.ΔᐃⵠⵠⲆ = Gd;
        sf.ⲆⲆⲆᐃⵠ = Lg;
        sf.ⵠⵠΔⲆΔΔⵠ();
        ⵠΔᐃᐃⵠΔᐃⵠⵠ();
      })();
    }, yq, 110, na | la, sa);
    this.buttons[u++].view = O;
    this.buttons[u] = Qv(58, 64, 0, [Δᐃ.ΔⵠⲆΔᐃᐃᐃ, Δᐃ.ΔΔᐃΔΔΔΔ, Δᐃ.ΔⵠⵠᐃᐃⲆⵠ], 1, 0, function () {
      fa(I);
    }, 189, 118, na | la, sa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qv(497, 72, 0, [Δᐃ.ⵠⲆᐃⲆᐃⲆⵠ, Δᐃ.ⲆⲆΔⲆⲆᐃΔ, Δᐃ.ⲆⵠᐃΔᐃⲆᐃ], 1, 0, function () {
      Vf.gapi[hj[ts]].getAuthInstance().signIn();
    }, -130, 390, na | la, sa);
    this.buttons[u++].view = c;
    this.buttons[u] = Qv(497, 72, 0, [Δᐃ.ⲆΔᐃⵠᐃΔⲆ, Δᐃ.ᐃⵠⵠⵠⵠΔⵠ, Δᐃ.Ⲇᐃⵠᐃᐃᐃᐃ], 1, 0, function () {
      Vf.FB.login(function (a) {
        if (a.authResponse) {
          Vf.FB.api("/me", function (a) {
            Mf = Jf;
            bx = Vf.FB.getAuthResponse().accessToken;
            Yf();
            Vf.ⵠⲆΔⲆᐃΔΔ(cx);
          });
        }
      });
    }, -130, 430, na | la, sa);
    this.buttons[u++].view = c;
    ΔⵠᐃᐃⵠⵠΔ = 20000;
    this.ⲆⲆⲆⲆΔΔⵠ = function (a) {
      var b = sf.ⲆⵠⵠΔⵠⲆΔ(a);
      var c = ΔⵠᐃᐃⵠⵠΔ * (b * b);
      return (a -= c) / (ΔⵠᐃᐃⵠⵠΔ * ((b + Yt) * (b + js)) - c);
    };
    this.ⲆⵠⵠΔⵠⲆΔ = function (a) {
      return Math.floor(Math.sqrt(a / ΔⵠᐃᐃⵠⵠΔ));
    };
    this.ⲆⲆⲆᐃᐃⲆᐃΔᐃ = function (a) {
      sf.ⵠΔⵠⲆⲆ = sf.ⲆⵠⵠΔⵠⲆΔ(a);
      sf.ᐃΔΔⲆⲆᐃΔ = sf.ⲆⲆⲆⲆΔΔⵠ(a);
      sf.ⲆᐃΔⲆⵠⲆᐃ = 0;
      sf.ⲆⲆⲆᐃⵠ = a;
    };
    this.ΔΔΔΔᐃⲆⲆᐃⵠ = function (b) {
      sf.buttons[sf.ΔⲆⵠΔᐃⵠᐃ].info.active = 0;
      sf.buttons[sf.ⲆᐃⵠΔΔᐃⲆ].info.active = Eg;
      sf.buttons[sf.ᐃᐃΔΔⵠⲆΔ].info.active = 1;
      n();
      if (-dn === b.name.indexOf("Starver#")) {
        document.getElementById("account_nickname_input").value = Vf.decodeURIComponent(Vf.escape(Vf.atob(b.name)));
      } else {
        document.getElementById("account_nickname_input").value = b.name;
      }
      sf.ΔᐃⵠⵠⲆ = b.bread;
      var c = b.seasons;
      var d = c[c.length - yl];
      sf.ΔⲆⵠᐃᐃᐃⵠ = c;
      z.ⲆⲆⲆᐃᐃⲆᐃΔᐃ(d.score);
      sf.ⲆⲆⲆᐃⵠ = d.score;
      sf.ⲆⲆΔᐃΔ = d.kill;
      sf.ΔⵠΔᐃΔⲆᐃ = d.death;
      sf.time = d.time;
      sf.ⵠⲆᐃⲆᐃⲆΔ = d.bestScore;
      sf.ⲆᐃⵠⵠΔᐃⲆ = d.bestKill;
      sf.ᐃⲆΔⲆᐃᐃⵠ = d.bestTime;
      sf.ΔᐃⵠⲆᐃⵠᐃ = d.scoreTotal;
      sf.ᐃⵠΔⲆⵠⵠⲆ = b.firstName;
      document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + b.privateServer;
      if (sf.ᐃⵠΔⲆⵠⵠⲆ === undefined) {
        sf.ᐃⵠΔⲆⵠⵠⲆ = Fj;
      }
      sf.ᐃᐃᐃⲆΔⵠⲆ = Date.now() + b.privateServerTime;
      if (Number(b.privateServerTime) > jj) {
        sf.ᐃᐃᐃⲆΔⵠⲆ = Date.now() + Number(b.privateServerTime);
      }
      sf.ΔΔⲆᐃⵠ = Date.now() + b.kit;
      if (Number(b.kit) > 0) {
        sf.ΔΔⲆᐃⵠ = Date.now() + Number(b.kit);
      }
      var e = ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ;
      for (var f = Kr; f < b.skins.length; f++) {
        if ((i = b.skins[f]) > 0) {
          for (var g = 0; g < e.length; g++) {
            if (f === e[g].id) {
              z.unlock.ⲆΔⲆⵠ[g] = 1;
            }
          }
        }
      }
      e = ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ;
      f = 0;
      for (; f < b.accessories.length; f++) {
        var i = b.accessories[f];
        if (Ol < i) {
          for (g = 0; g < e.length; g++) {
            if (f === e[g].id) {
              z.unlock.ΔᐃᐃΔⵠ[g] = dn;
            }
          }
        }
      }
      e = ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ;
      f = 0;
      for (; f < b.books.length; f++) {
        if ((i = b.books[f]) > 0) {
          for (g = Mn; g < e.length; g++) {
            if (e[g].id === f) {
              z.unlock.ΔⲆⵠⵠᐃ[g] = 1;
            }
          }
        }
      }
      e = ⲆⲆⵠⲆ.ᐃⵠΔⵠ;
      f = Ko;
      for (; f < b.bags.length; f++) {
        if ((i = b.bags[f]) > 0) {
          for (g = Lu; g < e.length; g++) {
            if (f === e[g].id) {
              z.unlock.ᐃΔᐃᐃⲆ[g] = 1;
            }
          }
        }
      }
      e = ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ;
      f = 0;
      for (; b.crates.length > f; f++) {
        if ((i = b.crates[f]) > 0) {
          for (g = xb; e.length > g; g++) {
            if (e[g].id === f) {
              z.unlock.ΔᐃⲆΔⵠ[g] = Cs;
              z.unlock.ᐃⵠⲆΔΔ[g] = 1;
            }
          }
        }
      }
    };
    this.ᐃⲆΔᐃΔΔΔⵠⵠ = function () {
      Vf.ⵠⲆΔⲆᐃΔΔ = function () {
        fa(I);
        (function (a) {
          var b = new XMLHttpRequest();
          b.open("GET", Af + "login?token=" + bx + "&type=" + Mf);
          b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          b.onreadystatechange = function () {
            if (this.readyState === kr && this.status === 200 && b.responseText !== "0") {
              a(JSON.parse(b.responseText));
            }
          };
          b.send();
        })(z.ΔΔΔΔᐃⲆⲆᐃⵠ);
      };
      if (Ur === dx) {
        Vf.ⵠⲆΔⲆᐃΔΔ();
      }
    };
    Vf.ⵠΔᐃᐃⵠΔᐃⵠⵠ = function () {
      sf.buttons[sf.ΔⲆⵠΔᐃⵠᐃ].info.active = 1;
      sf.buttons[sf.ⲆᐃⵠΔΔᐃⲆ].info.active = 0;
      sf.buttons[sf.ᐃᐃΔΔⵠⲆΔ].info.active = Fj;
      fa(I);
    };
    this.ΔⲆⲆⵠⵠ = function () {
      return sf.buttons[sf.ⲆᐃⵠΔΔᐃⲆ].info.active;
    };
    this.buttons[u] = Qv(461, 105, 0, [Δᐃ.ⲆΔΔᐃⲆᐃᐃ, Δᐃ.ⲆⵠⵠΔΔⲆΔ, Δᐃ.ΔΔᐃⵠΔⲆΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        fa(w);
      } else {
        fa(c);
      }
    }, -100, 80, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(157, 158, 0, [Δᐃ.ⲆⵠⵠᐃᐃⵠΔ, Δᐃ.ᐃΔⵠᐃᐃⵠᐃ, Δᐃ.ΔⵠᐃᐃⲆΔⲆ], 1, 0, function () {
      Vf.open("https://starveiopro.wikia.com/wiki/", "_blank");
    }, -35, 125, na | la, sa);
    this.buttons[u++].view = T;
    this.buttons[u] = Qv(66, 73, 0, [Δᐃ.ΔᐃΔΔⵠⲆⲆ, Δᐃ.ⲆᐃⵠⵠⲆΔⲆ, Δᐃ.ΔᐃᐃⵠᐃⵠΔ], 1, 0, Z, -68, 340, na | la, sa);
    this.buttons[u++].view = T;
    this.buttons[u] = Qv(66, 73, 0, [Δᐃ.ᐃΔΔΔⵠΔⵠ, Δᐃ.ᐃᐃⵠᐃᐃᐃᐃ, Δᐃ.ᐃⵠⲆᐃⵠΔᐃ], 1, 0, Ya, -30, 340, na | la, sa);
    this.buttons[u++].view = T;
    this.ⲆᐃⲆⵠⵠⵠᐃᐃᐃ = u;
    this.buttons[u] = Qv(97, 66, 0, [Δᐃ.ΔⲆⲆⲆΔⵠΔ, Δᐃ.ⲆⲆⲆΔⲆⵠⵠ, Δᐃ.ⵠᐃΔⵠⲆⵠΔ], 1, 0, function () {
      Of(Ya, undefined, sf.ⲆⵠⲆⲆⲆⵠⲆ);
    }, -ve, 151, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠⵠⵠⵠⲆⲆΔ = u;
    this.buttons[u] = Qv(135, 66, 0, [Δᐃ.ⵠΔⵠⲆᐃᐃᐃ, Δᐃ.ⲆⵠΔΔⵠⲆΔ, Δᐃ.ⵠᐃᐃΔᐃᐃⲆ], 1, 0, function () {
      Of(Lk, Lk, sf.ⵠⵠⵠⵠⲆⲆΔ);
    }, 37.5, 151, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠⲆⵠⵠᐃⵠᐃ = u;
    this.buttons[u] = Qv(160, 66, 0, [Δᐃ.ⲆᐃᐃⲆΔᐃᐃ, Δᐃ.ⲆΔΔᐃⲆᐃΔ, Δᐃ.ⵠⵠΔⵠΔⲆΔ], 1, 0, function () {
      Of(us, La, sf.ⵠⲆⵠⵠᐃⵠᐃ);
    }, 107.5, 151, na | la, sa);
    this.buttons[u++].view = y;
    this.ⲆⵠⲆⲆⲆⵠⲆ = u;
    this.buttons[u] = Qv(207, 66, 0, [Δᐃ.ΔⲆⵠΔⵠΔΔ, Δᐃ.ᐃᐃⲆⵠᐃᐃΔ, Δᐃ.ᐃΔΔᐃⵠΔⲆ], 1, 0, function () {
      Of(La, undefined, sf.ⲆⵠⲆⲆⲆⵠⲆ);
    }, 190.5, 151, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠⵠⲆⵠⲆⵠⵠ = u;
    this.buttons[u] = Qv(144, 66, 0, [Δᐃ.ᐃⲆⵠⲆΔᐃⵠ, Δᐃ.ⵠⲆΔⵠⵠΔΔ, Δᐃ.ⲆⵠᐃΔΔⲆᐃ], 1, 0, function () {
      Of(sf.ⵠⵠⲆⵠⲆⵠⵠ);
    }, 103.5, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠⵠΔⵠⵠΔᐃ = u;
    this.buttons[u] = Qv(124, 66, 0, [Δᐃ.ΔⵠΔⲆΔⵠⵠ, Δᐃ.ⲆⲆⲆⲆΔⲆⲆ, Δᐃ.ᐃᐃⲆΔΔⲆΔ], 1, 0, function () {
      Of(sf.ⵠⵠΔⵠⵠΔᐃ);
    }, 177.5, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ⲆΔⵠⵠᐃⵠᐃ = u;
    this.buttons[u] = Qv(104, 66, 0, [Δᐃ.ⵠⵠⵠⵠⵠⵠⵠ, Δᐃ.ⵠᐃⵠⲆᐃⵠⲆ, Δᐃ.ⲆᐃⵠΔΔᐃᐃ], 1, 0, function () {
      Of(sf.ⲆΔⵠⵠᐃⵠᐃ);
    }, 242, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠΔⲆⲆⲆⵠⲆ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ΔⵠᐃΔᐃᐃΔ, Δᐃ.ΔᐃⵠⵠΔⲆᐃ, Δᐃ.ΔᐃΔⵠⲆᐃΔ], 1, 0, function () {
      Of(Hh, undefined, Hh, sf.ⵠΔⲆⲆⲆⵠⲆ);
    }, -185, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.ᐃⲆⵠᐃⲆⵠⲆ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ΔΔᐃⵠᐃⲆⲆ, Δᐃ.ΔⵠΔᐃⵠᐃⵠ, Δᐃ.ⲆⲆᐃⵠΔⵠΔ], 1, 0, function () {
      Of(kj, kj, undefined, sf.ᐃⲆⵠᐃⲆⵠⲆ);
    }, -149, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠΔΔⲆⲆᐃⵠ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ᐃΔⲆⲆⵠⲆᐃ, Δᐃ.ᐃⲆⵠⵠᐃΔΔ, Δᐃ.ΔᐃⲆᐃΔᐃⵠ], 1, 0, function () {
      Of(undefined, undefined, undefined, sf.ⵠΔΔⲆⲆᐃⵠ);
    }, -113, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠᐃᐃⵠᐃⲆⲆ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ᐃⵠΔⲆⲆⵠⲆ, Δᐃ.ΔᐃⲆΔⲆⲆⵠ, Δᐃ.ᐃᐃΔⲆⵠⵠⵠ], 1, 0, function () {
      Of(undefined, undefined, Zl, sf.ⵠᐃᐃⵠᐃⲆⲆ);
    }, -77, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠⵠⲆΔⲆᐃⵠ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ΔᐃⲆⵠΔΔᐃ, Δᐃ.ⵠⵠᐃΔᐃΔΔ, Δᐃ.ᐃⵠᐃⲆΔⲆⲆ], 1, 0, function () {
      Of(undefined, Qi, undefined, sf.ⵠⵠⲆΔⲆᐃⵠ);
    }, -41, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.ᐃⵠⲆⵠⵠⵠΔ = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ⵠⵠⲆΔᐃⲆⲆ, Δᐃ.ᐃⵠⵠΔⵠⵠΔ, Δᐃ.ⲆⲆᐃⲆⵠΔᐃ], 1, 0, function () {
      Of(Tg, La, undefined, sf.ᐃⵠⲆⵠⵠⵠΔ);
    }, -Gl, 528, na | la, sa);
    this.buttons[u++].view = y;
    this.buttons[u] = Qv(232, 352, 0, [Δᐃ.ΔⵠⲆⲆΔⵠⵠ, Δᐃ.ΔΔᐃΔᐃΔⵠ, Δᐃ.ΔⵠᐃΔⵠⲆⵠ], 1, 0, function () {
      Wf(300);
    }, -330, 135, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(232, 352, 0, [Δᐃ.ⵠᐃⲆⵠΔⲆΔ, Δᐃ.ⵠΔⲆⲆⵠΔΔ, Δᐃ.ΔⲆⵠΔΔᐃⵠ], 1, 0, function () {
      Wf(600);
    }, -195, 135, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(243, 374, 0, [Δᐃ.ᐃⵠΔΔΔΔⵠ, Δᐃ.ΔⵠⲆᐃⲆΔᐃ, Δᐃ.ⲆⲆΔⲆΔⵠⲆ], 1, 0, function () {
      Wf(2600);
    }, -60, 130, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(232, 352, 0, [Δᐃ.ΔⵠΔⲆᐃⲆⲆ, Δᐃ.ⵠⲆΔᐃⵠⵠⲆ, Δᐃ.ⵠⲆⲆⵠⲆⲆⲆ], 1, 0, function () {
      Wf(7000);
    }, 78, 135, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(243, 374, 0, [Δᐃ.ΔᐃΔⵠⵠⲆᐃ, Δᐃ.ⲆⲆⵠⲆⵠⲆΔ, Δᐃ.ΔⵠⲆΔⵠᐃⲆ], 1, 0, function () {
      Wf(20000);
    }, 213, 130, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(58, 64, 0, [Δᐃ.ΔⵠⲆΔᐃᐃᐃ, Δᐃ.ΔΔᐃΔΔΔΔ, Δᐃ.ΔⵠⵠᐃᐃⲆⵠ], 1, 0, function () {
      fa(ca);
    }, 300, 88, na | la, sa);
    this.buttons[u++].view = w;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ᐃᐃⵠⵠᐃⵠΔ, Δᐃ.ΔᐃΔⲆⲆⵠⵠ, Δᐃ.ⵠᐃⲆⲆᐃⵠⵠ], 1, 0, function () {
      fa(_);
      $a.ⲆΔⲆⵠΔ();
    }, -315, 185, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ᐃⲆⲆⲆⲆⵠΔ, Δᐃ.ΔΔᐃⲆΔⲆⵠ, Δᐃ.ⵠᐃᐃΔⵠᐃᐃ], 1, 0, function () {
      fa(L);
      db.ⲆΔⲆⵠΔ();
    }, -315, 321, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ⲆⵠⵠᐃΔⵠⲆ, Δᐃ.ᐃᐃⲆΔⵠⵠⲆ, Δᐃ.ΔⲆΔⲆⲆΔᐃ], 1, 0, function () {
      fa(R);
      _a.ⲆΔⲆⵠΔ();
    }, 153, 185, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ΔⵠⵠⵠⵠᐃⲆ, Δᐃ.ⲆⵠΔⵠᐃⵠⲆ, Δᐃ.ΔᐃⲆⲆⵠⲆⵠ], 1, 0, function () {
      fa(j);
      ab.ⲆΔⲆⵠΔ();
    }, 153, 321, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ⵠⵠᐃⵠⲆⲆⵠ, Δᐃ.ⲆⲆΔᐃΔᐃΔ, Δᐃ.ᐃⵠΔᐃⲆΔⲆ], 1, 0, function () {
      fa(F);
      bb.ⲆΔⲆⵠΔ();
    }, 153, 463, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(323, 112, 0, [Δᐃ.ⵠΔⵠΔᐃⲆⲆ, Δᐃ.ᐃᐃΔⲆΔΔΔ, Δᐃ.ⲆᐃⵠⲆᐃᐃⵠ], 1, 0, function () {
      fa(W);
      cb.ⲆΔⲆⵠΔ();
    }, -315, 463, na | la, sa);
    this.buttons[u++].view = m;
    this.buttons[u] = Qv(327, 117, 0, [Δᐃ.ⲆᐃⲆⲆΔⲆᐃ, Δᐃ.ⵠΔⵠⲆᐃΔⲆ, Δᐃ.ⲆΔⵠΔⵠᐃΔ], 1, 0, function () {
      fa(K);
    }, 155, 70, ja, ua);
    this.buttons[u++].view = I;
    this.buttons[u] = Qv(130, 129, 0, [Δᐃ.ⲆⲆΔⵠⵠⲆⲆ, Δᐃ.ᐃⵠⵠᐃⲆⵠⲆ, Δᐃ.ⲆΔᐃⲆⵠᐃⵠ], 1, 0, function () {
      P(A, sa, "none");
      fa(ca);
    }, hl, 40, na | la, sa);
    this.buttons[u++].view = A;
    this.buttons[u] = Qv(130, 129, 0, [Δᐃ.ⲆⲆΔⵠⵠⲆⲆ, Δᐃ.ᐃⵠⵠᐃⲆⵠⲆ, Δᐃ.ⲆΔᐃⲆⵠᐃⵠ], 1, 0, function () {
      P(k, sa, "none");
      fa(ca);
    }, 10, 40, na | la, sa);
    this.buttons[u++].view = k;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 200, 140, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ΔᐃⲆΔⲆᐃⲆ, Δᐃ.ⵠΔⲆΔᐃⲆⲆ, Δᐃ.ΔⲆΔᐃᐃⲆΔ], 1, 0, function () {
      qf("Atlanta");
    }, -265, 300, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ⵠΔⲆᐃⵠᐃⲆ, Δᐃ.ⵠⵠΔᐃᐃⵠᐃ, Δᐃ.ⲆⲆΔᐃᐃⲆⵠ], 1, 0, function () {
      qf("Dallas");
    }, -130, 300, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ΔⵠⲆⲆΔⲆᐃ, Δᐃ.ΔⵠᐃⵠᐃΔⵠ, Δᐃ.ᐃᐃᐃⵠΔⲆⵠ], 1, 0, function () {
      qf("Fremont");
    }, 5, 300, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ⵠᐃΔⵠᐃⲆᐃ, Δᐃ.ⲆΔΔⲆⵠⲆⵠ, Δᐃ.ⵠⲆⵠΔΔⵠΔ], 1, 0, function () {
      qf("Newark");
    }, 140, 300, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ⵠⵠⵠⲆⲆΔⵠ, Δᐃ.ⲆⲆΔΔⲆΔᐃ, Δᐃ.ΔΔᐃᐃΔΔᐃ], 1, 0, function () {
      qf("London");
    }, -265, 365, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ΔⲆΔⲆⲆⲆΔ, Δᐃ.ΔΔⲆΔᐃΔᐃ, Δᐃ.ΔΔⲆⲆᐃⲆⵠ], 1, 0, function () {
      qf("Frankfurt");
    }, -130, 365, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ΔᐃᐃᐃΔΔⵠ, Δᐃ.ⵠⲆᐃᐃΔⵠΔ, Δᐃ.ⲆᐃᐃᐃΔⵠⲆ], 1, 0, function () {
      qf("Singapore");
    }, 5, 365, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ⲆⲆᐃⲆᐃᐃⲆ, Δᐃ.ΔΔΔⲆⵠᐃΔ, Δᐃ.ⲆΔᐃΔᐃⵠⲆ], 1, 0, function () {
      qf("Tokyo");
    }, 140, 365, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ⵠⲆᐃⲆⵠᐃⵠ, Δᐃ.ⲆⵠᐃᐃⵠⵠΔ, Δᐃ.ⵠⲆⲆΔⲆⲆⲆ], 1, 0, function () {
      qf("Toronto");
    }, -265, 430, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(253, 110, 0, [Δᐃ.ΔⲆᐃΔⲆᐃΔ, Δᐃ.ⵠⲆⲆΔⵠᐃⵠ, Δᐃ.ⵠⲆⲆⲆΔᐃΔ], 1, 0, function () {
      qf("Mumbai");
    }, -130, 430, na | la, sa);
    this.buttons[u++].view = N;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(N);
    }, 230, 140, na | la, sa);
    this.buttons[u++].view = da;
    this.buttons[u] = Qv(230, 352, 0, [Δᐃ.ΔᐃᐃⵠⲆⵠⲆ, Δᐃ.ⵠΔᐃⵠⲆᐃⲆ, Δᐃ.ⲆᐃⵠⲆⲆΔΔ], 1, 0, function () {
      Wf(350);
    }, -280, 240, na | la, sa);
    this.buttons[u++].view = da;
    this.buttons[u] = Qv(230, 352, 0, [Δᐃ.ⵠⲆⵠᐃΔᐃⲆ, Δᐃ.ⵠⵠⵠⲆⲆⲆⵠ, Δᐃ.ⲆΔⲆᐃⵠᐃᐃ], 1, 0, function () {
      Wf(700);
    }, -130, 240, na | la, sa);
    this.buttons[u++].view = da;
    this.buttons[u] = Qv(230, 352, 0, [Δᐃ.ⲆΔΔᐃⵠΔⵠ, Δᐃ.ᐃΔΔΔⵠⵠΔ, Δᐃ.ΔᐃᐃⲆⵠⵠⵠ], 1, 0, function () {
      Wf(1400);
    }, vj, 240, na | la, sa);
    this.buttons[u++].view = da;
    this.buttons[u] = Qv(230, 352, 0, [Δᐃ.ⵠⵠΔⵠⵠⵠⲆ, Δᐃ.ᐃΔᐃᐃⵠⵠᐃ, Δᐃ.ⵠⵠⲆΔᐃᐃΔ], 1, 0, function () {
      Wf(3000);
    }, 170, 240, na | la, sa);
    this.buttons[u++].view = da;
    this.buttons[u] = Qv(105, 119, 0, [Δᐃ.ΔᐃᐃⲆᐃⵠΔ, Δᐃ.ⵠΔᐃⲆⵠⵠΔ, Δᐃ.ΔⲆⵠⲆᐃⵠΔ], 1, 0, function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    }, 170, 310, na | la, sa);
    this.buttons[u++].view = Y;
    this.buttons[u] = Qv(105, 119, 0, [Δᐃ.ᐃⲆΔⲆᐃⵠⲆ, Δᐃ.ΔⵠΔᐃΔⵠΔ, Δᐃ.ⵠΔⲆᐃⲆⲆΔ], 1, 0, function () {
      (function () {
        var a = new XMLHttpRequest();
        a.open("GET", Af + "rebootServer?token=" + bx + "&userid=" + cx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
          if (this.readyState === zg && this.status === 200 && a.responseText !== "0") {
            location.href = document.getElementById("serverAddressInput").value;
          }
        };
        a.send();
      })();
    }, 235, 310, na | la, sa);
    this.buttons[u++].view = Y;
    this.buttons[u] = Qv(204, 115, 0, [Δᐃ.ΔⵠⲆΔⵠⵠⲆ, Δᐃ.ⵠΔΔΔⲆΔᐃ, Δᐃ.ⵠⵠᐃⵠⵠΔⵠ], 1, 0, function () {
      Vf.open("./commands.html", "_blank");
    }, -265, 490, na | la, sa);
    this.buttons[u++].view = Y;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆΔᐃⵠΔΔΔ, Δᐃ.ⲆⵠⲆⵠΔΔᐃ, Δᐃ.ⵠⲆⲆⲆΔⵠⵠ], 1, 0, function () {
      fa(x);
    }, -210, 170, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆⵠⲆΔΔΔᐃ, Δᐃ.ⵠΔⵠΔΔⲆΔ, Δᐃ.ⵠⵠⲆⲆⵠΔΔ], 1, 0, function () {
      fa(E);
    }, 70, 170, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆⵠΔΔᐃⲆⵠ, Δᐃ.ⲆᐃⵠΔΔⲆΔ, Δᐃ.ᐃΔⲆⲆⵠⲆⲆ], 1, 0, function () {
      fa(J);
    }, 70, 204, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆⲆⵠⲆⲆⲆⲆ, Δᐃ.ⲆⵠΔⲆⲆⲆⲆ, Δᐃ.ⵠΔᐃΔⲆⲆᐃ], 1, 0, function () {
      fa(S);
    }, -210, 204, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆⲆⵠⲆⲆⲆⲆ, Δᐃ.ⲆⵠΔⲆⲆⲆⲆ, Δᐃ.ⵠΔᐃΔⲆⲆᐃ], 1, 0, function () {
      fa(Q);
    }, 70, 238, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ⲆⲆⵠⲆⲆⲆⲆ, Δᐃ.ⲆⵠΔⲆⲆⲆⲆ, Δᐃ.ⵠΔᐃΔⲆⲆᐃ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Hf(Fj, 300);
      } else {
        fa(c);
      }
    }, 307, 205, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ᐃᐃⲆⵠᐃⲆⵠ, Δᐃ.ⲆᐃᐃⵠⵠΔⵠ, Δᐃ.ᐃᐃᐃⵠⵠⲆΔ], 1, 0, function () {
      fa(B);
    }, -210, 238, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(145, 69, 0, [Δᐃ.ᐃᐃⲆⵠᐃⲆⵠ, Δᐃ.ⲆᐃᐃⵠⵠΔⵠ, Δᐃ.ᐃᐃᐃⵠⵠⲆΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Hf(bt, 600);
      } else {
        fa(c);
      }
    }, 307, 239, na | la, sa);
    this.buttons[u++].view = ca;
    this.buttons[u] = Qv(192, 101, 0, [Δᐃ.ⵠΔⵠΔⵠⲆΔ, Δᐃ.ᐃⵠⲆΔⵠΔⲆ, Δᐃ.ⲆⲆⵠΔᐃⵠᐃ], 1, 0, function () {
      Nf();
    }, -wa, 250, na | la, sa);
    this.buttons[u++].view = q;
    this.buttons[u] = Qv(192, 104, 0, [Δᐃ.ⲆΔⲆΔⵠⲆᐃ, Δᐃ.ⲆⲆⵠⵠⵠⵠⵠ, Δᐃ.ⲆᐃⵠⲆⲆⵠΔ], 1, 0, function () {
      Nf();
    }, -100, 239, na | la, sa);
    this.buttons[u++].view = G;
    this.buttons[u] = Qv(192, 101, 0, [Δᐃ.ᐃΔⵠⲆᐃΔΔ, Δᐃ.ᐃⲆᐃᐃⵠΔΔ, Δᐃ.ⵠΔΔⵠΔΔΔ], 1, 0, function () {
      fa(O);
    }, 10, 250, na | la, sa);
    this.buttons[u++].view = q;
    this.buttons[u] = Qv(192, 104, 0, [Δᐃ.ᐃⵠⵠΔⲆΔⵠ, Δᐃ.ΔⲆᐃⵠΔᐃⵠ, Δᐃ.ⲆΔⲆⵠⲆΔᐃ], 1, 0, function () {
      fa(O);
    }, 10, 239, na | la, sa);
    this.buttons[u++].view = G;
    ΔⲆⲆᐃⵠ = [];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ⵠⲆΔᐃⵠ] = [Δᐃ.ᐃΔⲆΔΔⲆⵠ, Δᐃ.ᐃΔⲆᐃⲆⲆⲆ, Δᐃ.ⵠΔᐃⵠᐃΔⵠ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ΔΔⲆⵠ] = [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ᐃᐃᐃⵠ] = [Δᐃ.ⵠΔΔᐃⵠⵠΔ, Δᐃ.ⵠΔᐃᐃⵠΔᐃ, Δᐃ.ᐃⲆΔᐃⵠⵠⵠ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ⲆΔᐃⲆ] = [Δᐃ.ᐃᐃⲆⲆⵠⵠⵠ, Δᐃ.ⲆᐃΔΔⲆⲆΔ, Δᐃ.ΔΔⵠⵠⵠᐃΔ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ⵠⲆⲆΔ] = [Δᐃ.ⲆⵠΔⲆⲆⵠΔ, Δᐃ.ᐃⵠΔᐃΔᐃⲆ, Δᐃ.ΔΔⲆᐃⵠᐃⵠ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ᐃᐃᐃΔ] = [Δᐃ.ⲆΔⲆᐃᐃᐃⵠ, Δᐃ.ⲆᐃᐃᐃΔⲆⲆ, Δᐃ.ⲆΔⵠΔᐃΔᐃ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ⵠⲆᐃⲆ] = [Δᐃ.ⵠⵠΔΔⵠᐃⲆ, Δᐃ.ⵠⵠΔᐃΔᐃΔ, Δᐃ.ⲆⵠⵠᐃⲆᐃΔ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ΔⵠᐃⲆΔ] = [Δᐃ.ΔΔᐃᐃⲆⵠᐃ, Δᐃ.ⵠᐃᐃⲆⵠⲆΔ, Δᐃ.ΔⲆⵠᐃⵠΔᐃ];
    ΔⲆⲆᐃⵠ[ᐃΔⲆ.ᐃⲆⲆⵠⲆⲆᐃ] = [Δᐃ.ⲆᐃᐃᐃᐃⲆΔ, Δᐃ.ⵠᐃⵠⲆⲆᐃᐃ, Δᐃ.ⲆⲆΔⵠᐃᐃΔ];
    ⲆΔⲆΔⵠⵠΔ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Rg, -29, 205, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 300, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, us, -29, 395, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 205, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 300, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 395, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 205, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, vl, 159, 300, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Uq, 159, 395, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, undefined, -61, 315, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, Z, 260, 315, na | la, sa);
    this.buttons[u++].view = _;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = _;
    ΔΔᐃᐃⲆⲆᐃⲆᐃ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, gh, -29, 205, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Lk, -29, 300, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 395, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Rg, 65, 205, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Hh, 65, 300, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Qi, 65, 395, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 205, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 300, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, vl, 159, 395, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, undefined, -61, 315, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, li, 260, 315, na | la, sa);
    this.buttons[u++].view = L;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = L;
    ⲆᐃᐃᐃⵠⵠΔⵠⵠ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 205, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, us, -29, 300, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 395, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Qi, 65, 205, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, La, 65, 300, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 395, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Z, 159, 205, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 300, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Tg, 159, 395, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, Z, -61, 315, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, undefined, 260, 315, na | la, sa);
    this.buttons[u++].view = W;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = W;
    ΔⲆᐃᐃⵠᐃᐃⵠⵠ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 205, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 300, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, lq, -29, 395, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 205, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 300, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 395, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Rg, 159, 205, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 300, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 395, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, lq, -61, 315, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, undefined, 260, 315, na | la, sa);
    this.buttons[u++].view = R;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = R;
    ᐃΔᐃⵠⵠΔΔⵠⲆ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, On, -29, 205, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, jr, -29, 300, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, D, -29, 395, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 205, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 300, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 395, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 205, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Nl, 159, 300, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 395, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, On, -61, 315, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, Z, 260, 315, na | la, sa);
    this.buttons[u++].view = j;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = j;
    ᐃΔⲆᐃᐃⲆΔⵠⵠ = u;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Ya, -29, 205, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, -29, 300, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, Uq, -29, 395, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, kj, 65, 205, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, kj, 65, 300, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 65, 395, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, us, 159, 205, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 300, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(178, 182, 0, [Δᐃ.ᐃΔΔΔ, Δᐃ.ᐃΔⵠⲆ, Δᐃ.ΔⲆΔᐃ], 1, 0, undefined, 159, 395, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ᐃΔⲆᐃⲆᐃᐃ, Δᐃ.ᐃΔⵠΔⵠᐃᐃ, Δᐃ.ⵠⲆⵠΔᐃⲆⵠ], 1, 0, vl, -61, 315, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(39, 122, 0, [Δᐃ.ΔⵠΔΔⵠⵠⲆ, Δᐃ.ⵠΔⲆⵠΔΔⵠ, Δᐃ.ⵠⲆᐃΔΔⲆⲆ], 1, 0, undefined, 260, 315, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(m);
    }, -320, 470, na | la, sa);
    this.buttons[u++].view = F;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ⲆⲆᐃᐃⵠⵠⲆ, Δᐃ.ⲆΔᐃᐃΔΔΔ, Δᐃ.ΔΔΔᐃⵠΔΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(Mo, 50);
      } else {
        fa(c);
      }
    }, -65, 150 + 448 / th - 260 / Dt, na | la, sa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = E;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ᐃⲆⵠⲆⵠⵠΔ, Δᐃ.ΔᐃⲆⵠᐃⵠᐃ, Δᐃ.ⲆⵠⵠⵠⵠΔΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(0, Lh);
      } else {
        fa(c);
      }
    }, -65, 150 + 448 / th - 65, na | la, sa);
    this.buttons[u++].view = x;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = x;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ᐃⲆⲆᐃⵠᐃⲆ, Δᐃ.ⵠⲆᐃΔⵠΔΔ, Δᐃ.ⲆΔΔⵠΔⲆΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(4, 150);
      } else {
        fa(c);
      }
    }, -260 / Ka, 197, na | la, sa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = J;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ⵠⵠⵠⵠΔⲆᐃ, Δᐃ.ⲆᐃⲆⲆⵠᐃΔ, Δᐃ.ᐃΔⵠᐃⲆᐃΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(1, 300);
      } else {
        fa(c);
      }
    }, -260 / qa, 262 - 260 / mj, na | la, sa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = S;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ⵠΔᐃⲆᐃⵠΔ, Δᐃ.ⲆⲆⲆⵠⵠΔⵠ, Δᐃ.ⲆⲆⲆΔⲆᐃⲆ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(_t, 600);
      } else {
        fa(c);
      }
    }, -260 / bn, 262 - 260 / Rh, na | la, sa);
    this.buttons[u++].view = B;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = B;
    this.buttons[u] = Qv(260, 260, 0, [Δᐃ.ⵠⵠⵠⵠΔⲆᐃ, Δᐃ.ⲆᐃⲆⲆⵠᐃΔ, Δᐃ.ᐃΔⵠᐃⲆᐃΔ], 1, 0, function () {
      if (z.ΔⲆⲆⵠⵠ()) {
        Gf(5, 300);
      } else {
        fa(c);
      }
    }, -65, 150 + 448 / th - 260 / oj, na | la, sa);
    this.buttons[u++].view = Q;
    this.buttons[u] = Qv(115, 73, 0, [Δᐃ.ⲆⵠΔⲆⲆ, Δᐃ.ΔⲆΔⲆⵠ, Δᐃ.ΔⲆⲆΔΔ], 1, 0, function () {
      fa(ca);
    }, 309, 180, na | la, sa);
    this.buttons[u++].view = Q;
    var Ja = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ΔΔⲆᐃΔⵠᐃ, Δᐃ.ᐃⲆⲆᐃᐃⵠᐃ, Δᐃ.ΔⲆⵠⲆᐃⲆΔ], 1, 0, function () {
      Ia(undefined, 0);
    }, -305, 132, na | la, sa);
    this.buttons[u++].view = O;
    var Na = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ⲆⲆⲆᐃᐃⵠᐃ, Δᐃ.ⲆⵠⵠΔᐃᐃⵠ, Δᐃ.ⲆΔᐃⲆΔΔⲆ], 1, 0, function () {
      Ia(undefined, 1);
    }, -273, 132, na | la, sa);
    this.buttons[u++].view = O;
    var Oa = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ⵠⵠⲆⲆⵠᐃΔ, Δᐃ.ᐃⲆⲆⲆᐃΔᐃ, Δᐃ.ⲆᐃᐃⵠΔᐃⵠ], 1, 0, function () {
      Ia(vl, Uh);
    }, -241, 132, na | la, sa);
    this.buttons[u++].view = O;
    var Ra = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ⵠⵠΔⲆᐃᐃⲆ, Δᐃ.ⲆⲆⲆᐃⲆⵠⵠ, Δᐃ.ⵠᐃⵠᐃⲆⵠᐃ], 1, 0, function () {
      Ia(Nl, 3);
    }, -305, 165, na | la, sa);
    this.buttons[u++].view = O;
    var Sa = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ⵠΔⵠⲆⵠⲆᐃ, Δᐃ.ⵠΔΔΔⵠΔᐃ, Δᐃ.ΔⵠⲆⲆⵠᐃⵠ], 1, 0, function () {
      Ia(Qi, Fh);
    }, -273, 165, na | la, sa);
    this.buttons[u++].view = O;
    var Ta = u;
    this.buttons[u] = Qv(46, 51, 0, [Δᐃ.ᐃⲆⲆΔⵠⲆᐃ, Δᐃ.ⵠⲆⵠΔⲆΔⲆ, Δᐃ.ᐃᐃⵠΔⵠⲆᐃ], 1, 0, function () {
      Ia(Qi, sn);
    }, -241, 165, na | la, sa);
    this.buttons[u++].view = O;
    var Ua = u;
    this.buttons[u] = Qv(460, 73, 0, [Δᐃ.ⵠⲆⵠⲆΔΔⵠ, Δᐃ.ⲆᐃⵠⵠⵠⲆⲆ, Δᐃ.ᐃΔⵠⵠⲆΔⵠ], 1, 0, function () {
      Ia(-1);
    }, -180, 170, na | la, sa);
    this.buttons[u++].view = O;
    var Va = u;
    this.buttons[u] = Qv(222, 68, 0, [Δᐃ.ⲆᐃⲆΔⵠⲆⲆ, Δᐃ.ᐃΔⲆⲆⲆⲆΔ, Δᐃ.ⵠᐃⵠᐃⲆΔΔ], 1, 0, function () {
      Ia(bw.ⲆᐃⵠΔΔ);
    }, -180, 215, na | la, sa);
    this.buttons[u++].view = O;
    var Wa = u;
    this.buttons[u] = Qv(222, 68, 0, [Δᐃ.ᐃⵠᐃΔΔᐃⵠ, Δᐃ.ᐃᐃⵠⲆᐃⲆᐃ, Δᐃ.ᐃᐃΔΔⲆⵠᐃ], 1, 0, function () {
      Ia(bw.ⲆᐃⲆⵠΔ);
    }, -180, 260, na | la, sa);
    this.buttons[u++].view = O;
    var Xa = u;
    this.buttons[u] = Qv(222, 68, 0, [Δᐃ.ⵠⲆⵠⲆⵠⵠⵠ, Δᐃ.ΔᐃⲆⵠᐃⵠⲆ, Δᐃ.ΔⵠᐃⵠⲆⵠΔ], 1, 0, function () {
      Ia(bw.ⲆᐃᐃΔⵠ);
    }, -60, 215, na | la, sa);
    this.buttons[u++].view = O;
    var Za = u;
    this.buttons[u] = Qv(222, 68, 0, [Δᐃ.ⵠΔΔⲆᐃⲆⲆ, Δᐃ.ⲆᐃΔⵠⵠΔⵠ, Δᐃ.ⲆΔⵠⲆⲆΔΔ], 1, 0, function () {
      Ia(bw.ᐃᐃⵠᐃΔ);
    }, -60, 260, na | la, sa);
    this.buttons[u++].view = O;
    this.ⲆⵠᐃᐃⲆᐃⵠ = u;
    this.buttons[u] = Qv(143, 66, 0, [Δᐃ.ᐃⲆΔⵠΔᐃⲆ, Δᐃ.ⵠᐃΔⲆⵠΔᐃ, Δᐃ.ⲆΔⵠᐃᐃⵠⵠ], 1, 0, function () {
      Of(Nl, sf.ⲆⵠᐃᐃⲆᐃⵠ);
    }, -298, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ᐃⲆⵠⲆᐃᐃΔ = u;
    this.buttons[u] = Qv(104, 66, 0, [Δᐃ.ᐃΔⲆᐃᐃᐃⲆ, Δᐃ.ⵠⲆⲆⵠᐃⲆⵠ, Δᐃ.ⵠⲆⵠΔᐃⲆΔ], 1, 0, function () {
      Of(Tg, sf.ᐃⲆⵠⲆᐃᐃΔ);
    }, -223, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ᐃΔᐃᐃΔᐃᐃ = u;
    this.buttons[u] = Qv(110, 66, 0, [Δᐃ.ⲆΔⵠᐃⲆⵠⲆ, Δᐃ.ⲆⵠⵠΔᐃΔⵠ, Δᐃ.ⵠⲆⲆⲆⵠⲆΔ], 1, 0, function () {
      Of(Lk, sf.ᐃΔᐃᐃΔᐃᐃ);
    }, -168, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ΔⵠⲆⲆⵠⵠⲆ = u;
    this.buttons[u] = Qv(88, 66, 0, [Δᐃ.ᐃΔⲆΔᐃᐃᐃ, Δᐃ.ⵠⵠⲆᐃΔΔⵠ, Δᐃ.ᐃⲆΔᐃᐃⵠᐃ], 1, 0, function () {
      Of(undefined, sf.ΔⵠⲆⲆⵠⵠⲆ);
    }, -110, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.ⵠΔΔⲆⲆᐃᐃ = u;
    this.buttons[u] = Qv(88, 66, 0, [Δᐃ.ᐃᐃⵠᐃᐃⲆΔ, Δᐃ.ΔΔⵠⲆⵠΔᐃ, Δᐃ.ᐃΔᐃᐃⲆⵠⲆ], 1, 0, function () {
      Of(vl, sf.ⵠΔΔⲆⲆᐃᐃ);
    }, -63, 110, na | la, sa);
    this.buttons[u++].view = y;
    this.buttons[u] = Qv(86, 44, 0, [Δᐃ.ⲆⲆΔⲆⵠΔᐃ, Δᐃ.ᐃⲆΔᐃΔⲆⲆ, Δᐃ.ⵠⵠΔⲆⲆⵠⵠ], 1, 0, function () {
      Vf.open("./terms.html", "_blank");
    }, 349, 290, na | la, sa);
    this.buttons[u++].view = ca;
    var $a = new e(ⲆⲆⵠⲆ.ⲆΔᐃᐃΔ, ⲆΔⲆΔⵠⵠΔ, function (a) {
      sf.ⲆΔⲆⵠ = a;
      if (sf.unlock.ⲆΔⲆⵠ[a] === 1) {
        ⲆᐃΔⵠ.set("starve_skin", "" + a, {
          expires: 30
        });
      }
    }, this.ⲆΔⲆⵠ, this.unlock.ⲆΔⲆⵠ);
    var _a = new e(ⲆⲆⵠⲆ.ᐃⵠΔⵠ, ΔⲆᐃᐃⵠᐃᐃⵠⵠ, function (a) {
      sf.ᐃΔᐃᐃⲆ = a;
      if (sf.unlock.ᐃΔᐃᐃⲆ[a] === Cs) {
        ⲆᐃΔⵠ.set("starve_bag", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃΔᐃᐃⲆ, this.unlock.ᐃΔᐃᐃⲆ);
    var ab = new e(ⲆⲆⵠⲆ.ⲆⵠⵠⲆⲆ, ᐃΔᐃⵠⵠΔΔⵠⲆ, function (a) {
      sf.ΔⲆⵠⵠᐃ = a;
      if (sf.unlock.ΔⲆⵠⵠᐃ[a] === 1) {
        ⲆᐃΔⵠ.set("starve_book", "" + a, {
          expires: 30
        });
      }
    }, this.ΔⲆⵠⵠᐃ, this.unlock.ΔⲆⵠⵠᐃ);
    var bb = new e(ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ, ᐃΔⲆᐃᐃⲆΔⵠⵠ, function (a) {
      sf.ᐃⵠⲆΔΔ = a;
      if (sf.unlock.ᐃⵠⲆΔΔ[a] === Br) {
        ⲆᐃΔⵠ.set("starve_dead", "" + a, {
          expires: 30
        });
      }
    }, this.ᐃⵠⲆΔΔ, this.unlock.ᐃⵠⲆΔΔ);
    var cb = new e(ⲆⲆⵠⲆ.ⵠⲆᐃⵠⲆ, ⲆᐃᐃᐃⵠⵠΔⵠⵠ, function (a) {
      sf.ΔᐃⲆΔⵠ = a;
      if (sf.unlock.ΔᐃⲆΔⵠ[a] === 1) {
        ⲆᐃΔⵠ.set("starve_crate", "" + a, {
          expires: 30
        });
      }
    }, this.ΔᐃⲆΔⵠ, this.unlock.ΔᐃⲆΔⵠ);
    var db = new e(ⲆⲆⵠⲆ.ⲆⵠᐃᐃΔ, ΔΔᐃᐃⲆⲆᐃⲆᐃ, function (a) {
      sf.ΔᐃᐃΔⵠ = a;
      if (sf.unlock.ΔᐃᐃΔⵠ[a] === 1) {
        ⲆᐃΔⵠ.set("starve_accessory", "" + a, {
          expires: 30
        });
      }
    }, this.ΔᐃᐃΔⵠ, this.unlock.ΔᐃᐃΔⵠ);
    this.ᐃΔᐃᐃΔⵠΔ = function (a) {
      mf.ⵠⵠᐃᐃ = Uv(z.ⵠᐃ, a);
      for (var b = 0; b < z.buttons.length; b++) {
        if (ua === z.buttons[b].info.active) {
          z.buttons[b].ᐃⲆΔⲆ(z.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        }
      }
    };
    this.ᐃⲆΔΔΔᐃΔ = function (a) {
      mf.ⵠⵠᐃᐃ = Uv(z.ⵠᐃ, a);
      for (var b = 0; b < z.buttons.length; b++) {
        var c = z.buttons[b];
        if (c.info.active === ua && c.ᐃⲆΔⲆ(z.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
          c.info.callback();
          return;
        }
      }
    };
    this.ΔⵠᐃᐃⵠⲆⵠ = M;
    this.ΔⲆΔᐃⲆⵠᐃ = function (a) {
      mf.ⵠⵠᐃᐃ = Uv(z.ⵠᐃ, a);
      var b = false;
      for (var c = ko; z.buttons.length > c; c++) {
        if (z.buttons[c].info.active === ua) {
          b |= z.buttons[c].ᐃⲆΔⲆ(z.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        }
      }
      if (z.ΔⵠᐃᐃⵠⲆⵠ !== b) {
        z.ΔⵠᐃᐃⵠⲆⵠ = b;
        d.style.cursor = b ? z.ⵠⲆⲆᐃΔΔⵠ : z.ⵠᐃΔᐃΔⵠⵠ;
      }
    };
    this.ᐃΔⲆⵠⲆⵠⵠ = function () {
      Vf.addEventListener("mousedown", this.ᐃΔᐃᐃΔⵠΔ, fl);
      Vf.addEventListener("mouseup", this.ᐃⲆΔΔΔᐃΔ, false);
      Vf.addEventListener("mousemove", this.ΔⲆΔᐃⲆⵠᐃ, Bh);
    };
    this.ⲆΔΔᐃΔⵠΔ = function () {
      Vf.removeEventListener("mousedown", this.ᐃΔᐃᐃΔⵠΔ, false);
      Vf.removeEventListener("mouseup", this.ᐃⲆΔΔΔᐃΔ, false);
      Vf.removeEventListener("mousemove", this.ΔⲆΔᐃⲆⵠᐃ, false);
    };
  }
  function zw(a, b, c) {
    const d = ~(a & 63203) & 63203 | ~(a & 63203) & a;
    const e = (40806 + b) % 65468;
    const f = (8 << (c >> 24 & 255)) + (16 << (c & bl)) + (24 << (c >> 8 & rr)) + (0 << (c >> 16 & 255));
    return (1013904223 + (31427 + (function (a, b) {
      const c = (0 << (a >> 8 & 255)) + (16 << (a & 255)) + (8 << (a >> 24 & ua)) + (24 << (a >> 16 & 255));
      const d = ((b + 63128) * 214013 + 2531011) % 4294967296;
      return (1013904223 + (38314 + (Pf(c, d, c) ^ Ia(d, c, d))) * 1664525) % 4294967296;
    }(d, e) ^ Ia(f, d, e))) * 1664525) % 4294967296;
  }
  function Aw(a, b, c) {
    const d = (2531011 + (a + 10942) * 214013) % 4294967296;
    const e = ~(b & 14948) & (b | 14948);
    return (12345 + (38365 + (at(d, e, ((39993 + c) * 1664525 + 1013904223) % 4294967296) ^ Gw(d, e))) * 1103515245) % 2147483648;
  }
  function Bw(b, c, d, e, f, g) {
    const i = ~(b & 43697) & (b | 43697);
    const a = (0 << (c >> 8 & 255)) + (16 << (c >> 24 & cs)) + (24 << (c >> 16 & 255)) + (8 << (c & 255));
    const j = ~(d & 59406) & (d | 59406);
    const h = Dw(i, a, j, e ^ 13774, ~(f & 25818) & 25818 | ~(f & 25818) & f, (2531011 + (52141 + g) * 214013) % 4294967296);
    (function (b, c, d) {
      const e = ~(b & 55207) & b | ~(b & 55207) & 55207;
      const f = (er + (64713 + c) * 22695477) % 4294967296;
      const g = ~(d & 4913) & 4913 | ~(d & 4913) & d;
      const h = Aw(e, f, g);
      rf(e, f, g, e, f, g);
    })(i, a, j);
    return (h | 45559) & ~(h & 45559);
  }
  function Cw() {
    ⵠⵠⵠⲆ.ⲆᐃᐃⵠΔⲆⵠ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
  }
  function Dw(b, c, d, e, f, g) {
    const i = ~(b & 19925) & 19925 | ~(b & 19925) & b;
    const a = (2531011 + (12813 + c) * 214013) % 4294967296;
    const j = g ^ 34522;
    const h = Lw(i, a, d ^ 49184, e ^ 26139, f ^ 35152);
    Fw(j, i, a);
    return ~(h & 4382) & 4382 | ~(h & 4382) & h;
  }
  function Ew(b, c) {
    this.ⵠᐃ = b;
    this.Δ = c;
    var f = this;
    this.ΔⵠΔⵠΔΔⵠ = Pe;
    this.ⵠᐃⲆⲆΔᐃᐃ = {
      id: document.getElementById("scoreboard"),
      style: document.getElementById("scoreboard").style,
      height: 0,
      translate: {
        y: Jt,
        x: Jt
      },
      Ⲇᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = this.translate.y + "px";
      },
      ⵠⲆⵠⲆⲆ: function () {
        this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Ww.ⵠⲆΔᐃⲆΔⲆ.ΔΔᐃΔⲆⲆⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + st[ΔⵠᐃΔ.ⲆΔᐃⲆΔΔⵠ] + " : " + Ww.Δⵠⵠ + "</div><div class=\"stats\"> " + st[ΔⵠᐃΔ.ⲆᐃⲆᐃᐃⵠᐃ] + " : " + Ww.ⵠⲆΔᐃⲆΔⲆ.ⲆⲆΔᐃΔ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + st[ΔⵠᐃΔ.ᐃⵠⵠⵠΔⲆΔ] + " : " + Ww.ⵠⲆΔᐃⲆΔⲆ.ⲆⲆⲆᐃⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Ww.ⵠⲆΔᐃⲆΔⲆ.ΔᐃⲆΔᐃⵠⵠ + " " + st[ΔⵠᐃΔ.POINTS] + "</div></div><div id=\"shop_points\">" + st[ΔⵠᐃΔ.ⵠⲆΔΔΔⲆⵠ] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + st[ΔⵠᐃΔ.ⵠⲆⵠⲆⲆⲆⲆ] + "</div><div class=\"social\" id=\"fffacebook\">" + st[ΔⵠᐃΔ.ΔΔⵠⵠⲆⲆⲆ] + "</div></div><div id=\"bbback\">" + st[ΔⵠᐃΔ.ᐃⲆⵠⲆΔᐃᐃ] + "</div>";
        this.style.display = "inline-block";
        document.getElementById("tttwitter").addEventListener("mouseup", Kw, false);
        document.getElementById("bbback").addEventListener("mouseup", function () {
          Xw.Ⲇᐃⵠᐃᐃ(sf.ᐃⲆⵠΔⵠ);
        }, false);
        document.getElementById("fffacebook").addEventListener("mouseup", Cw, false);
        this.height = Math.floor(this.id.clientHeight / Wq);
        (function () {
          var a = new XMLHttpRequest();
          a.open("GET", Af + "getBreadAndScore?userid=" + cx);
          a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          a.onreadystatechange = function () {
            if (Il == this.readyState && this.status == 200 && a.responseText !== "0") {
              var b = JSON.parse(a.responseText);
              var c = b.b - sf.ΔᐃⵠⵠⲆ;
              sf.ΔᐃⵠⵠⲆ = b.b;
              sf.ⲆⲆⲆᐃⵠ = b.s;
              sf.ⵠΔⵠⲆⲆ = sf.ⲆⵠⵠΔⵠⲆΔ(sf.ⲆⲆⲆᐃⵠ);
              sf.ᐃΔΔⲆⲆᐃΔ = sf.ⲆⲆⲆⲆΔΔⵠ(sf.ⲆⲆⲆᐃⵠ);
              sf.ⲆᐃΔⲆⵠⲆᐃ = 0;
              document.getElementById("breadWonInner").innerHTML = "" + c;
            }
          };
          a.send();
        })();
      }
    };
    var g;
    var i = Dh;
    function e() {
      f.Ⲇᐃⵠ();
      if (++i != 30) {
        Vf.setTimeout(e, 33);
      } else {
        f.Ⲇᐃⵠ();
      }
    }
    this.Ⲇᐃⵠᐃᐃ = function (b) {
      if (f.ΔⵠΔⵠΔΔⵠ === true) {
        f.ΔⵠΔⵠΔΔⵠ = false;
        g = b;
        a = -Ur;
        j();
        ff();
      }
    };
    var a = -1;
    function j() {
      f.Ⲇᐃⵠ();
      if (++a == 30) {
        f.stop();
        f.ⵠᐃⲆⲆΔᐃᐃ.style.display = "none";
        g();
        return;
      }
      Vf.setTimeout(j, 33);
    }
    this.ⵠᐃᐃⵠⲆ = false;
    this.stop = function () {
      this.ⵠᐃᐃⵠⲆ = Bj;
    };
    this.ᐃⲆⵠΔⵠ = function () {
      ax();
      document.getElementById("game_body").style.backgroundColor = Cr.ⵠΔⲆⲆᐃ[Vw.time];
      f.ⵠᐃⲆⲆΔᐃᐃ.ⵠⲆⵠⲆⲆ();
      sf.ⵠΔⲆᐃᐃ.style.display = "inline-block";
      f.ⵠᐃᐃⵠⲆ = le;
      f.ΔⵠΔⵠΔΔⵠ = d;
      a = -1;
      i = Dh;
      e();
    };
    this.Ⲇᐃⵠ = function () {
      this.ⵠᐃⲆⲆΔᐃᐃ.translate.x = Math.floor(lo - 275);
      this.ⵠᐃⲆⲆΔᐃᐃ.translate.y = Math.floor(gq - this.ⵠᐃⲆⲆΔᐃᐃ.height - 28);
      sf.ⵠΔⲆᐃᐃ.translate.x = this.ⵠᐃⲆⲆΔᐃᐃ.translate.x - 350;
      sf.ⵠΔⲆᐃᐃ.translate.y = this.ⵠᐃⲆⲆΔᐃᐃ.translate.y + Lg;
      sf.ⵠΔⲆᐃᐃ.Ⲇᐃⵠ();
      if (i != 30 || a != -1) {
        var b = 0;
        if (i != 30) {
          b = 1500 / (i + Ur) - 50;
        }
        if (a != -Aj) {
          b = -(1750 / (30 - a + Br) - 48);
        }
        this.ⵠᐃⲆⲆΔᐃᐃ.translate.y -= b;
      }
      this.ⵠᐃⲆⲆΔᐃᐃ.Ⲇᐃⵠ();
    };
    this.ᐃⵠⲆᐃ = function () {
      Ic();
      Ww.alert.ᐃⵠⲆᐃ("#FFF", "#000");
    };
  }
  function Fw(a, b, c) {
    const d = ((a + 25450) * 2147483629 + 2147483587) % 2147483647;
    const e = (12345 + (43089 + b) * 1103515245) % 2147483648;
    const f = function (b, c, d) {
      const e = ~(b & 22924) & 22924 | ~(b & 22924) & b;
      const f = (c | 5425) & ~(c & 5425);
      const g = (0 << (d & $l)) + (24 << (d >> 8 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> an & 255));
      const h = Tk(e, f, g, e, f, g);
      Tk(e, f, g, e, f, g);
      return (h | 5391) & ~(h & 5391);
    }(d, e, (16 << (c >> 16 & 255)) + (8 << (c >> 24 & 255)) + (0 << (c & 255)) + (24 << (c >> 8 & 255)));
    Rv(d, e);
    return ~(f & 34036) & 34036 | ~(f & 34036) & f;
  }
  function Gw(a, b) {
    const c = ~(a & 52111) & a | ~(a & 52111) & 52111;
    const d = b ^ 17020;
    const e = zw(c, d, c);
    zw(d, c, d);
    return ~(e & 58080) & e | ~(e & 58080) & 58080;
  }
  function Hw(a, b) {
    const c = ((4402 + a) * 1103515245 + 12345) % 2147483648;
    const d = (2147483587 + (43195 + b) * 2147483629) % 2147483647;
    return ((59834 + (Gw(c, d) ^ zw(c, d, c))) * 22695477 + 1) % 4294967296;
  }
  function Iw(c, d) {
    var f = this;
    this.ⵠᐃ = c;
    this.Δ = d;
    if (Vf.navigator.userAgent.indexOf("Edge") > -1) {
      this.ⵠᐃΔᐃΔⵠⵠ = "default";
      this.ⵠⲆⲆᐃΔΔⵠ = "pointer";
    } else {
      this.ⵠᐃΔᐃΔⵠⵠ = "url('img/cursor0.png'), default";
      this.ⵠⲆⲆᐃΔΔⵠ = "url('img/cursor1.png'), pointer";
    }
    this.ⵠΔⲆΔᐃⵠᐃ = Ur;
    this.ᐃⵠⲆΔᐃΔⲆ = 1;
    this.ⵠΔⵠΔΔΔⲆ = 1;
    this.ⵠⲆΔΔⵠᐃΔ = Cs;
    this.ᐃᐃⵠⲆⲆΔⵠΔᐃ = {
      id: document.getElementById("team_box"),
      style: document.getElementById("team_box").style,
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 125) + "px";
        this.style.top = "110px";
      }
    };
    this.ᐃⲆⲆⵠ = {
      ᐃⲆΔΔᐃΔⲆ: Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⲆⲆᐃⲆ]),
      ΔΔᐃⵠⵠᐃⲆ: Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ])
    };
    this.sign = {
      open: false,
      ⵠᐃᐃⲆⵠΔⵠⲆᐃ: 0,
      ⵠⵠΔⵠⵠⲆᐃ: document.getElementById("sign_object"),
      ⲆⲆᐃΔΔΔⵠ: xb,
      id: document.getElementById("sign_window"),
      style: document.getElementById("sign_window").style,
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔΔⲆⲆᐃᐃⵠ]),
      ⲆΔᐃΔⲆⵠⲆ: function () {
        var a = Math.floor(Math.floor((Ik + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / 4) * (rk + ΔΔ[Cr.ⵠΔᐃΔΔⵠᐃ][0].width) + 35);
        this.button.info.translate.x = a;
        this.button.info.translate.y = 22;
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 150) + "px";
        this.style.top = Math.floor(gq - 115) + "px";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.sign.style.display = "none";
        Yw.sign.open = Bg;
      },
      select: function () {
        Yw.sign.open = !Yw.sign.open;
        if (Yw.sign.open) {
          Yw.sign.style.display = "inline-block";
        } else {
          Yw.sign.style.display = "none";
        }
      },
      ok: function () {
        ᐃΔΔᐃ.ⵠΔᐃⵠᐃⵠᐃᐃΔ(Ww.sign.ᐃᐃΔΔΔ, Yw.sign.ⲆⲆᐃΔΔΔⵠ);
        Yw.sign.select();
      },
      up: function () {
        Yw.sign.ⲆⲆᐃΔΔΔⵠ = Yw.sign.ⲆⲆᐃΔΔΔⵠ === 0 ? aw.ⲆⵠⵠⲆᐃⵠΔ - 1 : Yw.sign.ⲆⲆᐃΔΔΔⵠ - 1;
        Yw.sign.ⵠⵠΔⵠⵠⲆᐃ.src = "./img/sign" + Yw.sign.ⲆⲆᐃΔΔΔⵠ + ".png";
      },
      down: function () {
        Yw.sign.ⲆⲆᐃΔΔΔⵠ = (Yw.sign.ⲆⲆᐃΔΔΔⵠ + 1) % aw.ⲆⵠⵠⲆᐃⵠΔ;
        Yw.sign.ⵠⵠΔⵠⵠⲆᐃ.src = "./img/sign" + Yw.sign.ⲆⲆᐃΔΔΔⵠ + ".png";
      }
    };
    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, Bj);
    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, kk);
    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
    this.ⵠᐃⲆⵠⲆ = {
      open: fl,
      id: document.getElementById("shop_market"),
      style: document.getElementById("shop_market").style,
      items: [{
        id: $t,
        name: "wood",
        ⵠᐃⵠΔΔ: Ud,
        b: 1,
        a: sn,
        ⲆⵠⲆⲆΔ: Cr.ⵠΔᐃΔΔⵠᐃ
      }, {
        id: 1,
        name: "stone",
        ⵠᐃⵠΔΔ: ub,
        b: yl,
        a: 4,
        ⲆⵠⲆⲆΔ: Cr.ΔⵠⲆΔⲆⲆΔ
      }, {
        id: 2,
        name: "gold",
        ⵠᐃⵠΔΔ: Eg,
        b: wg,
        a: 6,
        ⲆⵠⲆⲆΔ: Cr.ⲆⵠΔⵠⲆᐃⲆ
      }, {
        id: Mo,
        name: "diamond",
        ⵠᐃⵠΔΔ: 4,
        b: 4,
        a: 1,
        ⲆⵠⲆⲆΔ: Cr.ⵠΔⲆΔᐃΔⲆ
      }, {
        id: 4,
        name: "amethyst",
        ⵠᐃⵠΔΔ: 8,
        b: yb,
        a: Br,
        ⲆⵠⲆⲆΔ: Cr.ᐃΔⵠᐃⲆⵠᐃ
      }, {
        id: 5,
        name: "reidite",
        ⵠᐃⵠΔΔ: es,
        b: 16,
        a: 1,
        ⲆⵠⲆⲆΔ: Cr.ᐃΔⵠᐃᐃⲆⵠ
      }, {
        id: hn,
        name: "pumpkin_seed",
        ⵠᐃⵠΔΔ: 10,
        b: zq,
        a: Aj,
        ⲆⵠⲆⲆΔ: Cr.ⲆⲆⲆΔⲆᐃᐃ
      }, {
        id: Va,
        name: "carrot_seed",
        ⵠᐃⵠΔΔ: is,
        b: 16,
        a: 1,
        ⲆⵠⲆⲆΔ: Cr.ΔΔⲆⵠⵠᐃⲆ
      }, {
        id: xo,
        name: "tomato_seed",
        ⵠᐃⵠΔΔ: 20,
        b: 20,
        a: wg,
        ⲆⵠⲆⲆΔ: Cr.ⲆᐃᐃⲆⵠⲆᐃ
      }, {
        id: ug,
        name: "thornbush_seed",
        ⵠᐃⵠΔΔ: 30,
        b: 30,
        a: jh,
        ⲆⵠⲆⲆΔ: Cr.ΔᐃⵠΔⵠⲆᐃ
      }, {
        id: wh,
        name: "garlic_seed",
        ⵠᐃⵠΔΔ: 40,
        b: 40,
        a: Cs,
        ⲆⵠⲆⲆΔ: Cr.ⵠᐃᐃⲆⲆᐃⵠ
      }, {
        id: 11,
        name: "watermelon_seed",
        ⵠᐃⵠΔΔ: 60,
        b: 60,
        a: 1,
        ⲆⵠⲆⲆΔ: Cr.ΔⵠⲆΔᐃⲆΔ
      }],
      button: Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ]),
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 450) + "px";
        this.style.top = Math.floor(gq - 270) + "px";
      },
      select: function () {
        Yw.ⵠᐃⲆⵠⲆ.open = !Yw.ⵠᐃⲆⵠⲆ.open;
        if (Yw.ⵠᐃⲆⵠⲆ.open) {
          Yw.ⵠᐃⲆⵠⲆ.style.display = "inline-block";
        } else {
          Yw.ⵠᐃⲆⵠⲆ.style.display = "none";
        }
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.ⵠᐃⲆⵠⲆ.style.display = "none";
        Yw.ⵠᐃⲆⵠⲆ.open = ys;
      },
      ᐃⲆᐃᐃΔᐃⲆ: function () {
        ᐃΔΔᐃ.ⵠᐃᐃΔⲆⵠⲆᐃΔ(this.ⲆᐃΔⵠⲆΔᐃ);
      },
      ᐃΔᐃⲆⵠ: function () {
        this.id;
        if (this.ⲆᐃΔⵠⲆΔᐃ.a === 1) {
          var a = Math.floor(Number(this.value) * this.ⲆᐃΔⵠⲆΔᐃ.b);
          this.ⲆᐃΔⵠⲆΔᐃ.ⵠᐃⵠΔΔ = a;
          document.getElementById(this.ⲆᐃΔⵠⲆΔᐃ.name + "_trad_number").innerHTML = a + "";
        } else {
          a = Math.floor(Number(this.value) / this.ⲆᐃΔⵠⲆΔᐃ.a);
          this.ⲆᐃΔⵠⲆΔᐃ.ⵠᐃⵠΔΔ = a;
          document.getElementById(this.ⲆᐃΔⵠⲆΔᐃ.name + "_trad_number").innerHTML = a + "";
        }
      }
    };
    document.getElementById("quit_market").addEventListener("mouseup", this.ⵠᐃⲆⵠⲆ.Ⲇᐃⵠᐃᐃ, aa);
    var e = [["mouseup", this.ⵠᐃⲆⵠⲆ.ᐃⲆᐃᐃΔᐃⲆ, "buy_"], ["click", this.ⵠᐃⲆⵠⲆ.ᐃΔᐃⲆⵠ, ""], ["change", this.ⵠᐃⲆⵠⲆ.ᐃΔᐃⲆⵠ, ""], ["keypress", this.ⵠᐃⲆⵠⲆ.keypress, ""]];
    for (var i = 0; i < this.ⵠᐃⲆⵠⲆ.items.length; i++) {
      var j = this.ⵠᐃⲆⵠⲆ.items[i];
      document.getElementById(j.name + "_market").src = ΔΔ[j.ⲆⵠⲆⲆΔ][Ol].ⵠΔΔΔΔ === undefined ? ΔΔ[j.ⲆⵠⲆⲆΔ][0].src : ΔΔ[j.ⲆⵠⲆⲆΔ][0].ⵠΔΔΔΔ;
      if (j.a === 1) {
        document.getElementById(j.name + "_trad_number").innerHTML = j.b;
        document.getElementById(j.name + "_number").value = 1;
        document.getElementById(j.name + "_number").step = 1;
        document.getElementById(j.name + "_number").min = 1;
        document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
      } else {
        document.getElementById(j.name + "_trad_number").innerHTML = 1;
        document.getElementById(j.name + "_number").value = j.a;
        document.getElementById(j.name + "_number").step = j.a;
        document.getElementById(j.name + "_number").min = j.a;
      }
      document.getElementById("buy_" + j.name + "_number").ⲆᐃΔⵠⲆΔᐃ = j;
      document.getElementById(j.name + "_number").ⲆᐃΔⵠⲆΔᐃ = j;
      for (var k = Mn; e.length > k; k++) {
        document.getElementById(e[k][pa] + j.name + "_number").addEventListener(e[k][rh], e[k][yl], gg);
      }
    }
    $("[type='number']").keypress(function (a) {
      a.preventDefault();
    });
    this.options = {
      open: false,
      id: document.getElementById("option_in_game"),
      style: document.getElementById("option_in_game").style,
      ⵠᐃΔᐃⲆ: document.getElementById("agree_ing").style,
      ⲆᐃⲆⲆᐃΔΔ: document.getElementById("cancel_agree_ing").style,
      ⵠⵠⲆᐃΔⵠΔ: document.getElementById("quest_agree_ing").style,
      ⵠᐃΔⲆΔⲆᐃ: document.getElementById("spectator_agree_ing").style,
      ⵠⵠΔⲆΔⵠᐃ: document.getElementById("auto_feed_agree_ing").style,
      ᐃᐃⲆⲆᐃⵠⲆ: document.getElementById("info_agree_ing").style,
      ΔᐃⲆΔⵠᐃⲆ: document.getElementById("pixelated_agree_ing").style,
      button: Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ]),
      ⵠⲆᐃⵠⲆᐃΔᐃⵠ: function () {
        Yw.options.open = !Yw.options.open;
        if (Yw.options.open) {
          Yw.options.style.display = "inline-block";
        } else {
          Yw.options.style.display = "none";
        }
      },
      ᐃΔΔⲆⵠⲆᐃⵠⲆ: function () {
        sf.ⵠⲆᐃⵠⲆⵠⲆ();
      },
      ⵠⲆΔᐃᐃᐃΔΔΔ: function () {
        sf.ⵠᐃᐃᐃⲆΔᐃ();
      },
      high: function () {
        sf.ⲆⲆⵠⲆⵠⲆΔΔⵠ();
      },
      low: function () {
        sf.ᐃᐃᐃᐃΔᐃΔᐃᐃ();
      },
      ⵠⵠⲆΔⲆ: function () {
        Yw.ΔΔΔⵠ.ⵠⵠⲆΔⲆ();
      },
      ΔᐃⲆΔΔᐃᐃΔⵠ: function () {
        Yw.ᐃΔⵠΔⲆ.ⵠⵠⲆΔⲆ();
      },
      ⵠᐃΔⵠΔΔⲆⲆⵠ: function () {
        Yw.ΔΔⵠⲆ.ⵠⵠⲆΔⲆ();
      },
      ⲆᐃⵠᐃⲆΔⵠⵠᐃ: function () {
        Ww.ⵠⵠⲆᐃΔ.ⲆΔΔⲆΔΔΔ();
      },
      ᐃⵠⲆΔⵠⲆⲆᐃⲆ: function () {
        Ww.ⲆⵠⵠⵠⲆ.ⲆΔΔⲆΔΔΔ();
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.options.style.display = "none";
        Yw.options.open = false;
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 235) + "px";
        this.style.top = Math.floor(gq - 170) + "px";
      }
    };
    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ᐃΔΔⲆⵠⲆᐃⵠⲆ, Pk);
    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ⵠⲆΔᐃᐃᐃΔΔΔ, Bg);
    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, M);
    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
    document.getElementById("quit_opt").addEventListener("mouseup", this.options.Ⲇᐃⵠᐃᐃ, bs);
    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⵠⵠⲆΔⲆ, false);
    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠᐃΔⵠΔΔⲆⲆⵠ, Bh);
    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃⲆΔΔᐃᐃΔⵠ, false);
    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⲆᐃⵠᐃⲆΔⵠⵠᐃ, gg);
    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆΔⵠⲆⲆᐃⲆ, false);
    this.ᐃΔⵠΔⲆ = {
      open: false,
      ⵠᐃⵠⵠᐃ: ⲆᐃΔⵠ.get("starve_cancel") && ⲆᐃΔⵠ.get("starve_cancel") === "0" ? Ol : 1,
      id: document.getElementById("cancel_sure_delete"),
      style: document.getElementById("cancel_sure_delete").style,
      ⵠᐃΔᐃⲆ: document.getElementById("cancel_agree").style,
      button: Gd,
      ᐃᐃ: rh,
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.ᐃΔⵠΔⲆ.style.display = "none";
        Yw.ᐃΔⵠΔⲆ.open = false;
      },
      ᐃᐃⲆⲆᐃᐃᐃ: function () {
        if (Ww.ΔⲆᐃᐃ.ᐃΔⲆΔⲆ) {
          ᐃΔΔᐃ.ᐃΔΔΔᐃⵠΔⲆⲆ();
        }
        Yw.ᐃΔⵠΔⲆ.Ⲇᐃⵠᐃᐃ();
      },
      ⵠⵠⲆΔⲆ: function () {
        if (Yw.ᐃΔⵠΔⲆ.ⵠᐃⵠⵠᐃ) {
          ⲆᐃΔⵠ.set("starve_cancel", "0");
          Yw.ᐃΔⵠΔⲆ.ⵠᐃΔᐃⲆ.display = "inline-block";
          Yw.options.ⲆᐃⲆⲆᐃΔΔ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_cancel", "1");
          Yw.ᐃΔⵠΔⲆ.ⵠᐃΔᐃⲆ.display = "none";
          Yw.options.ⲆᐃⲆⲆᐃΔΔ.display = "inline-block";
        }
        Yw.ᐃΔⵠΔⲆ.ⵠᐃⵠⵠᐃ = !Yw.ᐃΔⵠΔⲆ.ⵠᐃⵠⵠᐃ;
      },
      ⵠⵠⲆΔᐃⵠⵠ: function () {
        if (this.ⵠᐃⵠⵠᐃ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.ᐃᐃⲆⲆᐃᐃᐃ();
        }
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 235) + "px";
        this.style.top = Math.floor(gq - 130) + "px";
      }
    };
    this.ᐃΔⵠΔⲆ.id.oncontextmenu = function () {
      return bs;
    };
    this.ᐃΔⵠΔⲆ.ⵠᐃΔᐃⲆ.display = "none";
    if (this.ᐃΔⵠΔⲆ.ⵠᐃⵠⵠᐃ) {
      this.options.ⲆᐃⲆⲆᐃΔΔ.display = "inline-block";
    } else {
      this.options.ⲆᐃⲆⲆᐃΔΔ.display = "none";
    }
    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ᐃΔⵠΔⲆ.ᐃᐃⲆⲆᐃᐃᐃ, false);
    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ᐃΔⵠΔⲆ.Ⲇᐃⵠᐃᐃ, ys);
    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ᐃΔⵠΔⲆ.ⵠⵠⲆΔⲆ, false);
    document.addEventListener("cancel_sure_delete", function (a) {
      a.preventDefault();
    }, false);
    this.ΔΔⲆᐃΔⵠⲆ = {
      ⵠᐃⵠⵠᐃ: ⲆᐃΔⵠ.get("starve_aliasing") && ⲆᐃΔⵠ.get("starve_aliasing") === "0" ? _s : 1,
      ⲆΔⲆᐃⲆⵠⲆ: function (a) {
        document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
      },
      ⵠⵠⲆΔⲆ: function () {
        if (Yw.ΔΔⲆᐃΔⵠⲆ.ⵠᐃⵠⵠᐃ === Jt) {
          ⲆᐃΔⵠ.set("starve_aliasing", "1");
          Yw.ΔΔⲆᐃΔⵠⲆ.ⲆΔⲆᐃⲆⵠⲆ(V);
          Yw.options.ΔᐃⲆΔⵠᐃⲆ.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_aliasing", "0");
          Yw.ΔΔⲆᐃΔⵠⲆ.ⲆΔⲆᐃⲆⵠⲆ(0);
          Yw.options.ΔᐃⲆΔⵠᐃⲆ.display = "none";
        }
        Yw.ΔΔⲆᐃΔⵠⲆ.ⵠᐃⵠⵠᐃ = (Yw.ΔΔⲆᐃΔⵠⲆ.ⵠᐃⵠⵠᐃ + er) % Xn;
      }
    };
    if (this.ΔΔⲆᐃΔⵠⲆ.ⵠᐃⵠⵠᐃ === ik) {
      this.options.ΔᐃⲆΔⵠᐃⲆ.display = "inline-block";
    } else {
      this.ΔΔⲆᐃΔⵠⲆ.ⲆΔⲆᐃⲆⵠⲆ(Mn);
      this.options.ΔᐃⲆΔⵠᐃⲆ.display = "none";
    }
    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ΔΔⲆᐃΔⵠⲆ.ⵠⵠⲆΔⲆ, sr);
    this.ᐃⲆᐃΔᐃ = {
      ⵠᐃⵠⵠᐃ: ⲆᐃΔⵠ.get("starve_info_box") ? ⲆᐃΔⵠ.get("starve_info_box") === "0" ? 0 : Br : 1,
      display: 0,
      x: 0,
      y: _s,
      id: 0,
      ΔⲆᐃᐃ: Lu,
      ⵠⵠⲆΔⲆ: function () {
        if (Yw.ᐃⲆᐃΔᐃ.ⵠᐃⵠⵠᐃ === jj) {
          ⲆᐃΔⵠ.set("starve_info_box", "1");
          Yw.options.ᐃᐃⲆⲆᐃⵠⲆ.display = "inline-block";
        } else {
          ⲆᐃΔⵠ.set("starve_info_box", "0");
          Yw.options.ᐃᐃⲆⲆᐃⵠⲆ.display = "none";
        }
        Yw.ᐃⲆᐃΔᐃ.ⵠᐃⵠⵠᐃ = (Yw.ᐃⲆᐃΔᐃ.ⵠᐃⵠⵠᐃ + js) % yh;
      },
      ᐃⲆΔⲆ: function (a, b, c) {
        if (a && this.ⵠᐃⵠⵠᐃ) {
          this.display = 1;
          this.id = c === 0 ? b.id : Hs[b.id].ⵠᐃΔΔ;
          this.x = b.info.translate.x + 80;
          this.y = b.info.translate.y;
          this.ΔⲆᐃᐃ = c;
        }
        return a;
      }
    };
    if (this.ᐃⲆᐃΔᐃ.ⵠᐃⵠⵠᐃ === 1) {
      this.options.ᐃᐃⲆⲆᐃⵠⲆ.display = "inline-block";
    } else {
      this.options.ᐃᐃⲆⲆᐃⵠⲆ.display = "none";
    }
    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ᐃⲆᐃΔᐃ.ⵠⵠⲆΔⲆ, sr);
    if (ⲆᐃΔⵠ.get("starve_scale")) {
      fo = Number(ⲆᐃΔⵠ.get("starve_scale"));
      document.getElementById("input_ratio").value = fo;
      fo *= ba / va;
      ca();
    }
    this.ΔᐃⲆᐃΔⵠⵠ = function () {
      ⲆᐃΔⵠ.set("starve_scale", "" + document.getElementById("input_ratio").value);
      fo = ba / va * document.getElementById("input_ratio").value;
      ca();
    };
    document.getElementById("input_ratio").addEventListener("input", this.ΔᐃⲆᐃΔⵠⵠ, fl);
    this.ΔΔΔⵠ = {
      open: kk,
      ⵠᐃⵠⵠᐃ: ⲆᐃΔⵠ.get("starve_safe") ? ⲆᐃΔⵠ.get("starve_safe") === "0" ? 0 : sd : 1,
      id: document.getElementById("sure_delete"),
      style: document.getElementById("sure_delete").style,
      ⵠᐃΔᐃⲆ: document.getElementById("agree").style,
      button: 0,
      ᐃᐃ: Ol,
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.ΔΔΔⵠ.style.display = "none";
        Yw.ΔΔΔⵠ.open = false;
      },
      all: function () {
        if (!Ww.ⵠⲆΔᐃᐃ.wait) {
          if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < $t && Ww.ΔⲆᐃᐃ.id < 0 && !Ww.ⵠΔᐃᐃΔ.enabled) {
            ᐃΔΔᐃ.ⲆⲆⲆᐃΔⲆᐃᐃᐃ(Yw.ΔΔΔⵠ.button);
          }
          Yw.ΔΔΔⵠ.Ⲇᐃⵠᐃᐃ();
        }
      },
      ⲆᐃᐃΔ: function () {
        if (Ww.ΔⲆᐃᐃ.ᐃⵠΔΔΔ && !Ww.ⵠⲆΔᐃᐃ.wait) {
          if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Lu && Ww.ΔⲆᐃᐃ.id < Mn && !Ww.ⵠΔᐃᐃΔ.enabled) {
            ᐃΔΔᐃ.ΔⵠⲆΔΔⵠΔⲆⵠ(Yw.ΔΔΔⵠ.button);
          }
          Yw.ΔΔΔⵠ.Ⲇᐃⵠᐃᐃ();
        }
      },
      ᐃᐃⲆΔᐃᐃᐃᐃⲆ: function () {
        if (!Ww.ⵠⲆΔᐃᐃ.wait) {
          if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < $t && Ww.ΔⲆᐃᐃ.id < Lg && !Ww.ⵠΔᐃᐃΔ.enabled) {
            ᐃΔΔᐃ.ⵠᐃᐃⵠΔᐃⲆⲆΔ(Yw.ΔΔΔⵠ.button);
          }
          Yw.ΔΔΔⵠ.Ⲇᐃⵠᐃᐃ();
        }
      },
      ⵠⵠⲆΔⲆ: function () {
        if (Yw.ΔΔΔⵠ.ⵠᐃⵠⵠᐃ) {
          ⲆᐃΔⵠ.set("starve_safe", "0");
          Yw.ΔΔΔⵠ.ⵠᐃΔᐃⲆ.display = "inline-block";
          Yw.options.ⵠᐃΔᐃⲆ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_safe", "1");
          Yw.ΔΔΔⵠ.ⵠᐃΔᐃⲆ.display = "none";
          Yw.options.ⵠᐃΔᐃⲆ.display = "inline-block";
        }
        Yw.ΔΔΔⵠ.ⵠᐃⵠⵠᐃ = !Yw.ΔΔΔⵠ.ⵠᐃⵠⵠᐃ;
      },
      ⵠⵠⲆΔᐃⵠⵠ: function (a) {
        this.button = a;
        document.getElementById("item_to_del").src = ΔΔ[Or[a].Ⲇⵠ][ko].ⵠΔΔΔΔ === undefined ? ΔΔ[Or[a].Ⲇⵠ][ko].src : ΔΔ[Or[a].Ⲇⵠ][0].ⵠΔΔΔΔ;
        if (Or[a].ⲆᐃᐃΔ && !Ww.ⵠⲆᐃᐃⲆ && Ww.ΔⲆᐃᐃ.ᐃⵠΔΔΔ) {
          document.getElementById("recycle_delete").style.display = "inline-block";
        } else {
          document.getElementById("recycle_delete").style.display = "none";
        }
        if (this.ⵠᐃⵠⵠᐃ) {
          this.style.display = "inline-block";
          this.open = true;
        } else {
          this.all();
        }
      },
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 235) + "px";
        this.style.top = Math.floor(gq - 175) + "px";
      }
    };
    this.ΔΔΔⵠ.ⵠᐃΔᐃⲆ.display = "none";
    if (this.ΔΔΔⵠ.ⵠᐃⵠⵠᐃ) {
      this.options.ⵠᐃΔᐃⲆ.display = "inline-block";
    } else {
      this.options.ⵠᐃΔᐃⲆ.display = "none";
    }
    document.getElementById("one_delete").addEventListener("mouseup", this.ΔΔΔⵠ.ᐃᐃⲆΔᐃᐃᐃᐃⲆ, false);
    document.getElementById("yes_delete").addEventListener("mouseup", this.ΔΔΔⵠ.all, Bh);
    document.getElementById("recycle_delete").addEventListener("mouseup", this.ΔΔΔⵠ.ⲆᐃᐃΔ, gg);
    document.getElementById("no_delete").addEventListener("mouseup", this.ΔΔΔⵠ.Ⲇᐃⵠᐃᐃ, ue);
    document.getElementById("case_agree").addEventListener("mouseup", this.ΔΔΔⵠ.ⵠⵠⲆΔⲆ, Bj);
    this.ΔⵠΔⲆᐃ = {
      open: false,
      ΔΔⲆᐃⵠ: -1,
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔⲆⵠΔⵠ]),
      id: document.getElementById("shop_starterkit"),
      style: document.getElementById("shop_starterkit").style,
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 300) + "px";
        this.style.top = Math.floor(gq - 215) + "px";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.ΔⵠΔⲆᐃ.open = Jn;
        Yw.ΔⵠΔⲆᐃ.style.display = "none";
      },
      select: function () {
        Yw.ΔⵠΔⲆᐃ.open = !Yw.ΔⵠΔⲆᐃ.open;
        if (Yw.ΔⵠΔⲆᐃ.open) {
          Yw.ΔⵠΔⲆᐃ.style.display = "inline-block";
        } else {
          Yw.ΔⵠΔⲆᐃ.style.display = "none";
        }
      },
      ᐃⲆᐃᐃΔᐃⲆ: function () {
        if (Yw.ΔⵠΔⲆᐃ.ΔΔⲆᐃⵠ >= 0) {
          ᐃΔΔᐃ.ⵠΔΔⲆⵠΔⵠᐃⲆ(Yw.ΔⵠΔⲆᐃ.ΔΔⲆᐃⵠ);
          Yw.ΔⵠΔⲆᐃ.Ⲇᐃⵠᐃᐃ();
          if (ga) {
            ga("send", "event", "Game", "kit", "" + Yw.ΔⵠΔⲆᐃ.ΔΔⲆᐃⵠ);
          }
        }
      },
      ⵠⲆⵠⲆⲆ: function () {
        var a = Ww.ΔⵠΔⲆᐃ.value;
        document.getElementById("points_bank").innerHTML = ⵠⵠⵠⲆ.ᐃΔⲆⲆⲆⵠᐃ(a) + " points";
        for (var b = kq; b < _v.length; b++) {
          if (_v[b].ⲆⵠΔΔΔ > a) {
            document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
          } else {
            document.getElementById("starter" + (b + 1)).style.opacity = "1";
          }
        }
        for (b = ik; b < 13; b++) {
          document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + b).innerHTML = "";
        }
        document.getElementById("buy_kit").style.opacity = "0.2";
      },
      ⲆΔᐃΔⵠᐃΔⲆᐃ: function () {
        if (this.id.length > 8) {
          var a = Number(this.id.charAt(7) + this.id.charAt(8));
        } else {
          a = Number(this.id.charAt(7));
        }
        var b = _v[a - Aj];
        if (Ww.ΔⵠΔⲆᐃ.value >= b.ⲆⵠΔΔΔ) {
          Yw.ΔⵠΔⲆᐃ.ΔΔⲆᐃⵠ = a;
          document.getElementById("buy_kit").style.opacity = "1";
        } else {
          Yw.ΔⵠΔⲆᐃ.ΔΔⲆᐃⵠ = -1;
          document.getElementById("buy_kit").style.opacity = "0.2";
        }
        b = b.items;
        for (var c = 1, d = 1; c < b.length + sd; c++) {
          if (b[c - ce][1] !== Dr.ᐃⵠΔⵠ) {
            document.getElementById("inv_shop" + d).style.display = "inline-block";
            document.getElementById("inv_shop" + d).src = ΔΔ[Or[b[c - Yt][1]].Ⲇⵠ][0].ⵠΔΔΔΔ === undefined ? ΔΔ[Or[b[c - sd][jh]].Ⲇⵠ][Ol].src : ΔΔ[Or[b[c - bt][Ur]].Ⲇⵠ][0].ⵠΔΔΔΔ;
            document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][Dh];
            d++;
          }
        }
        for (; d < 13; d++) {
          document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
          document.getElementById("amount_shop" + d).innerHTML = "";
        }
      }
    };
    document.getElementById("quit3").addEventListener("mouseup", this.ΔⵠΔⲆᐃ.Ⲇᐃⵠᐃᐃ, false);
    document.getElementById("buy_kit").addEventListener("mouseup", this.ΔⵠΔⲆᐃ.ᐃⲆᐃᐃΔᐃⲆ, Pq);
    for (k = 1; k < 11; k++) {
      document.getElementById("starter" + k).addEventListener("mouseup", this.ΔⵠΔⲆᐃ.ⲆΔᐃΔⵠᐃΔⲆᐃ, false);
    }
    this.ΔΔⵠⲆ = {
      open: tq,
      ⵠᐃⵠⵠᐃ: ⲆᐃΔⵠ.get("starve_quests") && ⲆᐃΔⵠ.get("starve_quests") === "1" ? 1 : 0,
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ]),
      id: document.getElementById("chronoquest"),
      style: document.getElementById("chronoquest").style,
      Ⲇᐃⵠ: function () {
        this.style.left = Math.floor(lo - 420) + "px";
        this.style.top = Math.floor(gq - 270) + "px";
      },
      Ⲇᐃⵠᐃᐃ: function () {
        Yw.ΔΔⵠⲆ.style.display = "none";
        Yw.ΔΔⵠⲆ.open = sr;
      },
      select: function () {
        Yw.ΔΔⵠⲆ.open = !Yw.ΔΔⵠⲆ.open;
        if (Yw.ΔΔⵠⲆ.open) {
          Yw.ΔΔⵠⲆ.style.display = "inline-block";
        } else {
          Yw.ΔΔⵠⲆ.style.display = "none";
        }
      },
      list: [],
      reset: function () {
        for (var a = 0; a < dw.length; a++) {
          this.list[a] = wg;
          document.getElementById("timeremain_" + a).style.display = "inline-block";
          document.getElementById("time_finished_" + a).style.display = "none";
          document.getElementById("claim_reward_" + a).style.display = "none";
        }
      },
      ΔΔⲆⵠⲆΔΔ: Kr,
      ⵠᐃⲆⵠⵠΔⵠ: Fj,
      ΔᐃᐃΔΔΔⲆᐃⲆ: function () {
        if (Yw.ΔΔⵠⲆ.open) {
          var a = new Date().getTime();
          if (a - this.ΔΔⲆⵠⲆΔΔ >= 1000) {
            this.ΔΔⲆⵠⲆΔΔ = a;
            for (var b = Mn; b < dw.length; b++) {
              if (Yw.ΔΔⵠⲆ.list[b]) {
                var c = dw[b].time - (a - gf.ⲆⲆⵠΔⵠ.ⵠⲆⵠⲆⲆ + Yw.ΔΔⵠⲆ.ⵠᐃⲆⵠⵠΔⵠ);
                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
              }
            }
          }
        }
      },
      restore: function (a) {
        for (var b = 0; b < a.length; b++) {
          if (a[b] != bt) {
            Yw.ΔΔⵠⲆ.ᐃⵠⵠⲆⲆⵠⵠ(b, a[b]);
          }
        }
      },
      ᐃⵠⵠⲆⲆⵠⵠ: function (a, b) {
        if (b === 3 && (a === Uk || a === 12)) {
          Ww.ᐃᐃⲆᐃ.ΔΔᐃⵠⲆᐃΔ(Kr, 1);
          Yw.ⵠⲆⲆᐃⵠᐃⵠ();
        }
        document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        if (b > 1) {
          document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
          document.getElementById("timeremain_" + a).style.display = "none";
        } else if (b === Ko) {
          document.getElementById("time_finished_" + a).innerHTML = "FAILED";
          document.getElementById("timeremain_" + a).style.display = "none";
        }
        document.getElementById("claim_reward_" + a).style.display = b === xl ? "inline-block" : "none";
        document.getElementById("time_finished_" + a).style.display = "inline";
        Yw.ΔΔⵠⲆ.list[a] = Gd;
      },
      modify: function (a, b) {
        Yw.ΔΔⵠⲆ.ᐃⵠⵠⲆⲆⵠⵠ(a, b);
        if (Yw.ΔΔⵠⲆ.ⵠᐃⵠⵠᐃ) {
          Yw.ΔΔⵠⲆ.open = true;
          Yw.ΔΔⵠⲆ.style.display = "inline-block";
        }
      },
      ⵠⵠⲆΔⲆ: function () {
        if (Yw.ΔΔⵠⲆ.ⵠᐃⵠⵠᐃ) {
          ⲆᐃΔⵠ.set("starve_quests", "0");
          Yw.options.ⵠⵠⲆᐃΔⵠΔ.display = "none";
        } else {
          ⲆᐃΔⵠ.set("starve_quests", "1");
          Yw.options.ⵠⵠⲆᐃΔⵠΔ.display = "inline-block";
        }
        Yw.ΔΔⵠⲆ.ⵠᐃⵠⵠᐃ = !Yw.ΔΔⵠⲆ.ⵠᐃⵠⵠᐃ;
      },
      ⲆⵠΔᐃΔⵠΔⲆᐃ: function () {
        var a = Number(this.id.charAt(13));
        var b = Number(this.id.charAt(14));
        if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
          a = a * bb + b;
        }
        ᐃΔΔᐃ.ᐃΔⲆⵠⲆⵠΔΔᐃ(a);
      }
    };
    if (this.ΔΔⵠⲆ.ⵠᐃⵠⵠᐃ) {
      this.options.ⵠⵠⲆᐃΔⵠΔ.display = "inline-block";
    } else {
      this.options.ⵠⵠⲆᐃΔⵠΔ.display = "none";
    }
    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔΔⵠⲆ.Ⲇᐃⵠᐃᐃ, false);
    for (k = 0; k < dw.length; k++) {
      document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ΔΔⵠⲆ.ⲆⵠΔᐃΔⵠΔⲆᐃ, Pq);
    }
    this.ᐃᐃΔⵠ = {
      open: false,
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ]),
      list: {
        id: document.getElementById("recipe_craft"),
        style: document.getElementById("recipe_craft").style,
        ᐃᐃΔⵠⵠΔᐃ: [],
        ᐃⵠⵠⵠⲆⲆⵠ: 0,
        Ⲇᐃⵠ: function () {
          this.style.left = Math.floor(lo - 335) + "px";
          this.style.top = Math.floor(gq - 215) + "px";
        },
        Ⲇᐃⵠᐃᐃ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          Yw.ᐃᐃΔⵠ.open = Bh;
        },
        ᐃⲆⵠΔΔⵠΔ: function () {
          document.getElementById("recipe_craft").style.display = "none";
          document.getElementById("home_craft").style.display = "inline-block";
        },
        ΔⲆⲆΔ: function (a) {
          if ((b = this.ᐃᐃΔⵠⵠΔᐃ[a]).ᐃⲆΔ) {
            document.getElementById("watercraft").style.display = "inline-block";
          } else {
            document.getElementById("watercraft").style.display = "none";
          }
          if (b.f) {
            document.getElementById("firecraft").style.display = "inline-block";
          } else {
            document.getElementById("firecraft").style.display = "none";
          }
          if (b.w) {
            document.getElementById("workcraft").style.display = "inline-block";
          } else {
            document.getElementById("workcraft").style.display = "none";
          }
          if (b.e) {
            document.getElementById("wellcraft").style.display = "inline-block";
          } else {
            document.getElementById("wellcraft").style.display = "none";
          }
          for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
            document.getElementById("inv" + c).style.display = "inline-block";
            document.getElementById("inv" + c).src = ΔΔ[Or[b[a][0]].Ⲇⵠ][0].ⵠΔΔΔΔ === On ? ΔΔ[Or[b[a][jj]].Ⲇⵠ][0].src : ΔΔ[Or[b[a][0]].Ⲇⵠ][0].ⵠΔΔΔΔ;
            document.getElementById("numb" + c).innerHTML = "" + b[a][1];
            c++;
          }
          for (; c < 6; c++) {
            document.getElementById("inv" + c).style.display = "none";
            document.getElementById("numb" + c).innerHTML = "";
          }
        },
        select: function (a) {
          this.ᐃⵠⵠⵠⲆⲆⵠ = a;
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("workcraft").style.display = "none";
          document.getElementById("firecraft").style.display = "none";
          document.getElementById("watercraft").style.display = "none";
          document.getElementById("wellcraft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "inline-block";
          document.getElementById("inv1").style.display = "none";
          document.getElementById("inv2").style.display = "none";
          document.getElementById("inv3").style.display = "none";
          document.getElementById("inv4").style.display = "none";
          document.getElementById("inv5").style.display = "none";
          document.getElementById("numb1").innerHTML = "";
          document.getElementById("numb2").innerHTML = "";
          document.getElementById("numb3").innerHTML = "";
          document.getElementById("numb4").innerHTML = "";
          document.getElementById("numb5").innerHTML = "";
          for (var b = $t, c = Jt; b < Hs.length; b++) {
            var d = Hs[b];
            if (a === d.ⵠᐃⲆ) {
              this.ᐃᐃΔⵠⵠΔᐃ[c] = d;
              c++;
              document.getElementById("img_" + c).style.display = "inline-block";
              document.getElementById("img_" + c).src = ΔΔ[Or[d.ⵠᐃΔΔ].Ⲇⵠ][0].ⵠΔΔΔΔ === undefined ? ΔΔ[Or[d.ⵠᐃΔΔ].Ⲇⵠ][0].src : ΔΔ[Or[d.ⵠᐃΔΔ].Ⲇⵠ][0].ⵠΔΔΔΔ;
            }
          }
          for (c++; c < 49; c++) {
            document.getElementById("img_" + c).style.display = "none";
          }
        }
      },
      ᐃⲆⲆᐃⵠⵠΔ: {
        id: document.getElementById("home_craft"),
        style: document.getElementById("home_craft").style,
        Ⲇᐃⵠ: function () {
          this.style.left = Math.floor(lo - 285) + "px";
          this.style.top = Math.floor(gq - 170) + "px";
        },
        Ⲇᐃⵠᐃᐃ: function () {
          document.getElementById("home_craft").style.display = "none";
          Yw.ᐃᐃΔⵠ.open = false;
        }
      },
      ⲆᐃⲆΔΔⲆⲆᐃⵠ: function () {
        this.open = !this.open;
        if (this.open) {
          document.getElementById("home_craft").style.display = "inline-block";
        } else {
          document.getElementById("home_craft").style.display = "none";
          document.getElementById("recipe_craft").style.display = "none";
        }
      }
    };
    document.getElementById("quit").addEventListener("mouseup", this.ᐃᐃΔⵠ.ᐃⲆⲆᐃⵠⵠΔ.Ⲇᐃⵠᐃᐃ, false);
    document.getElementById("quitmenu").addEventListener("mouseup", this.ᐃᐃΔⵠ.list.Ⲇᐃⵠᐃᐃ, tq);
    document.getElementById("backhome").addEventListener("mouseup", this.ᐃᐃΔⵠ.list.ᐃⲆⵠΔΔⵠΔ, tq);
    document.getElementById("hatcategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.Ⲇⵠⵠᐃᐃ);
    }, ys);
    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.ᐃⵠᐃⵠ);
    }, kk);
    document.getElementById("toolcategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.ⵠΔΔᐃⵠ);
    }, Bh);
    document.getElementById("foodcategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.ⲆⵠⲆⵠⵠ);
    }, Bh);
    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.ΔᐃᐃᐃⲆ);
    }, false);
    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
      Yw.ᐃᐃΔⵠ.list.select(Gr.ΔᐃΔΔΔ);
    }, tq);
    document.getElementById("img_1").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(0);
    }, false);
    document.getElementById("img_2").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(V);
    }, false);
    document.getElementById("img_3").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(2);
    }, false);
    document.getElementById("img_4").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(3);
    }, ue);
    document.getElementById("img_5").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(th);
    }, Pk);
    document.getElementById("img_6").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(Gt);
    }, Pk);
    document.getElementById("img_7").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(So);
    }, Jn);
    document.getElementById("img_8").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(7);
    }, Pe);
    document.getElementById("img_9").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(al);
    }, kk);
    document.getElementById("img_10").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(9);
    }, Pa);
    document.getElementById("img_11").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(10);
    }, ys);
    document.getElementById("img_12").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(11);
    }, bs);
    document.getElementById("img_13").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(12);
    }, false);
    document.getElementById("img_14").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(na);
    }, Pq);
    document.getElementById("img_15").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(Cq);
    }, aa);
    document.getElementById("img_16").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(15);
    }, Bh);
    document.getElementById("img_17").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(zs);
    }, kk);
    document.getElementById("img_18").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(17);
    }, ue);
    document.getElementById("img_19").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(Vs);
    }, false);
    document.getElementById("img_20").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(19);
    }, Bg);
    document.getElementById("img_21").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(Vq);
    }, tq);
    document.getElementById("img_22").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(21);
    }, false);
    document.getElementById("img_23").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(22);
    }, false);
    document.getElementById("img_24").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(23);
    }, false);
    document.getElementById("img_25").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(24);
    }, v);
    document.getElementById("img_26").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(25);
    }, fl);
    document.getElementById("img_27").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(26);
    }, false);
    document.getElementById("img_28").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(27);
    }, Pk);
    document.getElementById("img_29").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(28);
    }, Pk);
    document.getElementById("img_30").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(29);
    }, false);
    document.getElementById("img_31").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(30);
    }, false);
    document.getElementById("img_32").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(31);
    }, false);
    document.getElementById("img_33").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(32);
    }, false);
    document.getElementById("img_34").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(33);
    }, false);
    document.getElementById("img_35").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(34);
    }, ys);
    document.getElementById("img_36").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(35);
    }, false);
    document.getElementById("img_37").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(36);
    }, M);
    document.getElementById("img_38").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(37);
    }, false);
    document.getElementById("img_39").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(38);
    }, Bg);
    document.getElementById("img_40").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(39);
    }, false);
    document.getElementById("img_41").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(40);
    }, ue);
    document.getElementById("img_42").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(41);
    }, false);
    document.getElementById("img_43").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(42);
    }, false);
    document.getElementById("img_44").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(43);
    }, false);
    document.getElementById("img_45").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(44);
    }, false);
    document.getElementById("img_46").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(45);
    }, M);
    document.getElementById("img_47").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(46);
    }, Pe);
    document.getElementById("img_48").addEventListener("mousedown", function () {
      Yw.ᐃᐃΔⵠ.list.ΔⲆⲆΔ(47);
    }, false);
    this.ⲆⲆⵠΔⲆ = {
      translate: {
        y: Mn,
        x: kq
      },
      ΔΔⵠᐃⵠ: {
        x: -1,
        y: -dn
      },
      ΔⲆᐃⵠ: [],
      focus: function (a) {
        var b = this.translate.y + (Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length > 0 ? -120 : -50);
        if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
          this.ΔΔⵠᐃⵠ.x = a.x - this.translate.x;
          this.ΔΔⵠᐃⵠ.y = a.y - b;
        }
      }
    };
    this.ⵠⵠⲆⲆ = {
      translate: {
        y: ko,
        x: 0
      },
      Ⲇⵠ: ΔΔ[Cr.ⲆⵠⲆᐃⵠⲆΔ],
      ⵠᐃ: document.createElement("canvas")
    };
    this.ⵠⵠⲆⲆ.ⵠᐃ.width = this.ⵠⵠⲆⲆ.Ⲇⵠ.width;
    this.ⵠⵠⲆⲆ.ⵠᐃ.height = this.ⵠⵠⲆⲆ.Ⲇⵠ.height;
    this.ⵠⵠⲆⲆ.Δ = this.ⵠⵠⲆⲆ.ⵠᐃ.getContext("2d");
    this.ᐃⲆΔᐃ = {
      translate: {
        x: 0,
        y: ko
      },
      Ⲇⵠ: ΔΔ[Cr.ⵠᐃΔΔΔᐃⲆ],
      ᐃⵠⲆᐃ: Hm,
      y: 0
    };
    this.ΔᐃΔⲆⵠᐃⵠ = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[yk]].ᐃΔⲆⵠΔ + "</div";
      for (var a = 1; Ww.ⲆⲆⲆⵠⵠ.length > a; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[a]].ᐃΔⲆⵠΔ + "</div></div>";
      }
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
      ΔⵠⲆΔⵠ.style.display = "inline-block";
      document.getElementById("leave").addEventListener("click", ᐃΔΔᐃ.ΔᐃΔⲆⵠᐃⵠ, Pe);
    };
    this.ᐃⲆⵠᐃΔᐃᐃⵠⵠ = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[0]].ᐃΔⲆⵠΔ + "</div";
      for (var a = 1; a < Ww.ⲆⲆⲆⵠⵠ.length; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[a]].ᐃΔⲆⵠΔ + "</div></div>";
      }
      ΔⵠⲆΔⵠ.innerHTML += "</div>";
      ΔⵠⲆΔⵠ.style.display = "inline-block";
    };
    this.ᐃΔⲆᐃᐃᐃⵠⲆⲆ = function () {
      ΔⵠⲆΔⵠ = document.getElementById("team_box");
      ΔⵠⲆΔⵠ.innerHTML = "";
      ΔⵠⲆΔⵠ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[jj]].ᐃΔⲆⵠΔ + "</div";
      for (var a = jh; a < Ww.ⲆⲆⲆⵠⵠ.length; a++) {
        ΔⵠⲆΔⵠ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + gf.ΔⲆᐃⵠ[Ww.ⲆⲆⲆⵠⵠ[a]].ᐃΔⲆⵠΔ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
      }
      if (Ww.ᐃⲆⲆⲆⲆ.lock === tr) {
        ΔⵠⲆΔⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
      } else {
        ΔⵠⲆΔⵠ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
      }
      document.getElementById("lock_team").addEventListener("click", ᐃΔΔᐃ.ⲆⵠⲆᐃᐃⲆⵠⵠⵠ, false);
      ΔⵠⲆΔⵠ.style.display = "inline-block";
      for (a = V; Ww.ⲆⲆⲆⵠⵠ.length > a; a++) {
        switch (a) {
          case 1:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(1);
            }, false);
            break;
          case Ok:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(_l);
            }, Pe);
            break;
          case Ik:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(3);
            }, false);
            break;
          case xt:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(4);
            }, Bg);
            break;
          case 5:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(Ju);
            }, false);
            break;
          case 6:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(hn);
            }, ys);
            break;
          case 7:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(Va);
            }, false);
            break;
          case 8:
            document.getElementById("eject_member" + a).addEventListener("click", function () {
              ᐃΔΔᐃ.ⲆⵠᐃᐃⲆᐃΔ(8);
            }, Pe);
        }
      }
    };
    this.ⲆΔⲆΔΔ = [];
    this.ⲆΔⲆΔΔ[aw.ⵠⵠⵠⵠΔᐃᐃ] = {
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ]),
      action: this.ΔᐃΔⲆⵠᐃⵠ
    };
    this.ⲆΔⲆΔΔ[aw.ⵠⲆⵠᐃΔᐃΔ] = {
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ]),
      action: ᐃΔΔᐃ.ⵠⲆᐃⵠⲆⵠΔᐃⲆ
    };
    this.ⲆΔⲆΔΔ[aw.ⵠΔⲆⵠᐃⲆᐃ] = {
      button: Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃⵠᐃⵠⵠ]),
      action: this.ᐃΔⲆᐃᐃᐃⵠⲆⲆ
    };
    this.ⲆΔⲆΔΔ[aw.ⵠⲆⵠⵠᐃⲆⲆ] = {
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔᐃᐃᐃⲆ]),
      action: this.ᐃⲆⵠᐃΔᐃᐃⵠⵠ
    };
    this.ⲆΔⲆΔΔ[aw.ⵠΔⵠᐃᐃᐃⲆ] = {
      button: Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔΔᐃᐃⵠ]),
      action: function () { }
    };
    this.ⵠᐃΔⵠΔ = -Eg;
    this.ΔᐃⵠⵠⲆⵠᐃ = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⲆΔΔᐃ]);
    this.ᐃⵠᐃΔⲆΔⵠ = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⵠΔⲆⵠᐃ]);
    this.ΔⲆᐃΔⲆⵠᐃ = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆΔⲆΔⲆ]);
    this.ⵠⲆΔΔᐃᐃⵠ = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔΔⵠᐃⵠⵠ]);
    this.ΔᐃᐃΔΔΔᐃ = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆΔⲆΔⲆ]);
    this.ⵠΔⲆᐃⲆΔᐃ = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔΔⵠᐃ]);
    this.ⲆⵠⵠᐃΔⲆⵠ = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆΔⲆⲆΔ]);
    this.ΔΔᐃⵠⲆⲆⲆ = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⵠⲆᐃⲆ]);
    this.ΔΔΔᐃⵠⲆⲆ = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔᐃΔⲆ]);
    this.ΔⲆⵠⵠΔⲆⲆ = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃⲆⵠᐃ]);
    this.ΔⲆΔⵠⲆⵠⲆ = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ]);
    this.ⲆⲆΔᐃⵠᐃᐃ = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃᐃⵠⲆⲆ]);
    this.ⵠΔⲆᐃⵠΔⲆ = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⲆⲆᐃⵠ]);
    this.ᐃΔΔⵠᐃΔⵠ = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆⲆⲆᐃᐃ]);
    this.ᐃΔΔᐃⲆⵠⲆ = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆⲆ]);
    this.ΔΔᐃᐃⵠ = Qv(120, 120, 0, ΔΔ[Cr.ᐃⲆⲆΔⲆ]);
    this.ΔΔᐃᐃⵠ.info.translate.x = Hr;
    this.ΔΔᐃᐃⵠ.info.translate.y = 10;
    this.ΔⵠΔ = [];
    this.ΔⵠΔ[Dr.ⵠⲆΔᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠⲆΔⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆΔᐃΔ].id = Dr.ⵠⲆΔᐃΔ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆⲆᐃⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⵠΔⵠ].id = Dr.ⵠⵠⵠΔⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃΔⵠᐃⲆΔ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃᐃⵠ].id = Dr.ᐃᐃᐃⵠ;
    this.ΔⵠΔ[Dr.ΔΔⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆⲆⲆⵠⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ΔΔⲆⵠ].id = Dr.ΔΔⲆⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠΔⲆⲆⲆΔ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃΔⲆⲆ].id = Dr.ᐃᐃΔⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆΔⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃⵠⵠⲆⲆ], sn);
    this.ΔⵠΔ[Dr.ⲆΔⵠᐃᐃ].id = Dr.ⲆΔⵠᐃᐃ;
    this.ΔⵠΔ[Dr.ⲆΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠΔᐃⲆⵠⲆ], Mo);
    this.ΔⵠΔ[Dr.ⲆΔᐃⲆ].id = Dr.ⲆΔᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠᐃᐃᐃΔⲆ], Za);
    this.ΔⵠΔ[Dr.ⵠⲆⲆΔ].id = Dr.ⵠⲆⲆΔ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠⲆᐃⵠⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆⵠΔⲆ].id = Dr.ᐃⲆⵠΔⲆ;
    this.ΔⵠΔ[Dr.ⲆΔᐃᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃᐃⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆΔᐃᐃᐃ].id = Dr.ⲆΔᐃᐃᐃ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔᐃⲆⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⵠⲆᐃ].id = Dr.ⲆΔⵠⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆᐃΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠⵠⵠⵠⵠ], vg);
    this.ΔⵠΔ[Dr.ᐃⲆᐃΔⲆ].id = Dr.ᐃⲆᐃΔⲆ;
    this.ΔⵠΔ[Dr.ΔᐃⲆⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⵠⵠⵠⵠᐃ], Ik);
    this.ΔⵠΔ[Dr.ΔᐃⲆⵠΔ].id = Dr.ΔᐃⲆⵠΔ;
    this.ΔⵠΔ[Dr.ⵠᐃΔΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⵠᐃⲆⲆΔ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃΔΔᐃ].id = Dr.ⵠᐃΔΔᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠΔⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆΔⲆⲆᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠΔⲆᐃ].id = Dr.ᐃⵠΔⲆᐃ;
    this.ΔⵠΔ[Dr.ΔⵠᐃᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆⲆᐃⲆᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⵠᐃᐃΔ].id = Dr.ΔⵠᐃᐃΔ;
    this.ΔⵠΔ[Dr.ᐃⲆⲆⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃⵠⲆⵠᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆⲆⲆᐃ].id = Dr.ᐃⲆⲆⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃΔⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠⲆⲆᐃΔ], vo);
    this.ΔⵠΔ[Dr.ᐃΔⲆᐃᐃ].id = Dr.ᐃΔⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆᐃⲆⵠᐃ], Mo);
    this.ΔⵠΔ[Dr.ᐃⵠΔᐃⲆ].id = Dr.ᐃⵠΔᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠⲆⵠΔⵠΔ], 3);
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃⲆ].id = Dr.ᐃΔⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃⲆⲆⲆⵠΔ], fa);
    this.ΔⵠΔ[Dr.ᐃⵠⵠᐃⲆ].id = Dr.ᐃⵠⵠᐃⲆ;
    this.ΔⵠΔ[Dr.Ⲇⵠᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠᐃᐃΔΔΔ], Dn);
    this.ΔⵠΔ[Dr.Ⲇⵠᐃⵠᐃ].id = Dr.Ⲇⵠᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔⵠᐃⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃᐃ].id = Dr.ⲆᐃΔᐃᐃ;
    this.ΔⵠΔ[Dr.ⵠⵠΔⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠⲆⵠⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠΔⵠΔ].id = Dr.ⵠⵠΔⵠΔ;
    this.ΔⵠΔ[Dr.ⲆⲆΔⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⵠΔⲆⲆⲆ], lk);
    this.ΔⵠΔ[Dr.ⲆⲆΔⵠⵠ].id = Dr.ⲆⲆΔⵠⵠ;
    this.ΔⵠΔ[Dr.ᐃⵠⵠΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔⵠΔⵠᐃ], _i);
    this.ΔⵠΔ[Dr.ᐃⵠⵠΔⵠ].id = Dr.ᐃⵠⵠΔⵠ;
    this.ΔⵠΔ[Dr.ⲆⲆᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃΔᐃᐃᐃ], ta);
    this.ΔⵠΔ[Dr.ⲆⲆᐃⲆΔ].id = Dr.ⲆⲆᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⵠⵠΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃⵠⵠᐃⲆΔ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠΔⲆⲆ].id = Dr.ⵠⵠΔⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆΔΔⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⲆⵠⵠⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ⲆΔΔⲆⵠ].id = Dr.ⲆΔΔⲆⵠ;
    this.ΔⵠΔ[Dr.Ⲇᐃⵠⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆΔⵠⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.Ⲇᐃⵠⵠⵠ].id = Dr.Ⲇᐃⵠⵠⵠ;
    this.ΔⵠΔ[Dr.ⲆΔⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠⵠⵠⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⲆᐃᐃ].id = Dr.ⲆΔⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔᐃⵠⵠⵠᐃ], _i);
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔⵠ].id = Dr.ᐃᐃᐃΔⵠ;
    this.ΔⵠΔ[Dr.ΔⵠⲆᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃⵠⲆⵠΔ], 3);
    this.ΔⵠΔ[Dr.ΔⵠⲆᐃΔ].id = Dr.ΔⵠⲆᐃΔ;
    this.ΔⵠΔ[Dr.ⵠⲆΔⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆⵠᐃⲆΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆΔⵠᐃ].id = Dr.ⵠⲆΔⵠᐃ;
    this.ΔⵠΔ[Dr.ⲆⵠΔΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃᐃᐃΔⵠ], 3);
    this.ΔⵠΔ[Dr.ⲆⵠΔΔᐃ].id = Dr.ⲆⵠΔΔᐃ;
    this.ΔⵠΔ[Dr.ⵠⲆⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔⲆⵠᐃΔ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⵠᐃᐃ].id = Dr.ⵠⲆⵠᐃᐃ;
    this.ΔⵠΔ[Dr.Δᐃⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆΔⵠⵠΔ], Mo);
    this.ΔⵠΔ[Dr.Δᐃⵠᐃᐃ].id = Dr.Δᐃⵠᐃᐃ;
    this.ΔⵠΔ[Dr.ⲆⲆⲆΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃⵠᐃΔⲆ], vo);
    this.ΔⵠΔ[Dr.ⲆⲆⲆΔⵠ].id = Dr.ⲆⲆⲆΔⵠ;
    this.ΔⵠΔ[Dr.ΔⵠΔⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔⵠⵠΔᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⵠΔⲆΔ].id = Dr.ΔⵠΔⲆΔ;
    this.ΔⵠΔ[Dr.ᐃⵠⵠⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠⵠⵠⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠⵠⵠᐃ].id = Dr.ᐃⵠⵠⵠᐃ;
    this.ΔⵠΔ[Dr.ΔΔΔΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔΔⲆΔⲆ], fa);
    this.ΔⵠΔ[Dr.ΔΔΔΔⲆ].id = Dr.ΔΔΔΔⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃⲆᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⵠᐃΔⵠᐃ], vo);
    this.ΔⵠΔ[Dr.ᐃᐃⲆᐃⲆ].id = Dr.ᐃᐃⲆᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃᐃⲆᐃΔⲆ], vg);
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆΔ].id = Dr.ᐃⵠᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⵠΔᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠᐃⵠΔⲆΔ], Za);
    this.ΔⵠΔ[Dr.ⵠΔᐃⵠⵠ].id = Dr.ⵠΔᐃⵠⵠ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃΔⲆᐃⲆⲆ], cl);
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆⲆ].id = Dr.ᐃⲆⵠⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⲆΔΔⵠΔ], Ik);
    this.ΔⵠΔ[Dr.ⵠⲆᐃᐃΔ].id = Dr.ⵠⲆᐃᐃΔ;
    this.ΔⵠΔ[Dr.ΔⲆⲆⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔᐃⲆⵠⵠ], B);
    this.ΔⵠΔ[Dr.ΔⲆⲆⵠⲆ].id = Dr.ΔⲆⲆⵠⲆ;
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠⵠⲆΔᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠⵠ].id = Dr.ΔⵠⲆⵠⵠ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠΔᐃⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆᐃ].id = Dr.ⵠⲆᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆⵠᐃᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆΔᐃⲆᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆⵠᐃᐃⲆ].id = Dr.ⲆⵠᐃᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠⵠΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃⲆΔΔⵠ], jg);
    this.ΔⵠΔ[Dr.ᐃⵠⵠΔᐃ].id = Dr.ᐃⵠⵠΔᐃ;
    this.ΔⵠΔ[Dr.ΔⵠⵠᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃΔᐃᐃᐃⵠ], 3);
    this.ΔⵠΔ[Dr.ΔⵠⵠᐃΔ].id = Dr.ΔⵠⵠᐃΔ;
    this.ΔⵠΔ[Dr.ΔⵠΔⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠᐃⵠⲆΔ], 3);
    this.ΔⵠΔ[Dr.ΔⵠΔⵠⲆ].id = Dr.ΔⵠΔⵠⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆΔΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔᐃΔΔⵠⵠ], lk);
    this.ΔⵠΔ[Dr.ⵠⲆΔΔⲆ].id = Dr.ⵠⲆΔΔⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆⲆΔΔⲆ], B);
    this.ΔⵠΔ[Dr.ⲆᐃⲆⲆⲆ].id = Dr.ⲆᐃⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆⲆⵠⲆΔ], ta);
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆⲆ].id = Dr.ⵠᐃⵠⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆⵠΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠᐃΔᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⵠΔᐃ].id = Dr.ⵠⲆⵠΔᐃ;
    this.ΔⵠΔ[Dr.ⵠᐃᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⲆᐃΔⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃᐃⲆᐃ].id = Dr.ⵠᐃᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ⵠⵠΔΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆΔΔⲆⲆⵠ], cl);
    this.ΔⵠΔ[Dr.ⵠⵠΔΔΔ].id = Dr.ⵠⵠΔΔΔ;
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠⲆ].id = Dr.ⲆΔᐃⵠⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠᐃⵠΔⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔⲆ].id = Dr.ᐃᐃᐃΔⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠⵠᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆᐃⲆΔⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠⵠᐃⵠ].id = Dr.ᐃⵠⵠᐃⵠ;
    this.ΔⵠΔ[Dr.ΔⲆᐃᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⲆⲆᐃᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⲆᐃᐃᐃ].id = Dr.ΔⲆᐃᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃΔΔⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠᐃⵠⵠⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃΔΔⲆᐃ].id = Dr.ᐃΔΔⲆᐃ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆⵠΔⲆΔⵠ], Dn);
    this.ΔⵠΔ[Dr.ⵠⲆⲆⲆΔ].id = Dr.ⵠⲆⲆⲆΔ;
    this.ΔⵠΔ[Dr.ΔᐃⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔᐃΔⲆᐃ], 3);
    this.ΔⵠΔ[Dr.ΔᐃⲆⲆⲆ].id = Dr.ΔᐃⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃΔⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠⲆⲆⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃΔⲆⲆⲆ].id = Dr.ᐃΔⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃΔΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆᐃΔᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃΔΔᐃ].id = Dr.ⲆᐃΔΔᐃ;
    this.ΔⵠΔ[Dr.Ⲇⵠᐃᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔⲆⲆᐃᐃ], 3);
    this.ΔⵠΔ[Dr.Ⲇⵠᐃᐃⵠ].id = Dr.Ⲇⵠᐃᐃⵠ;
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃⵠⲆᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃΔ].id = Dr.ⵠᐃᐃᐃΔ;
    this.ΔⵠΔ[Dr.ⵠᐃⲆⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⵠⵠΔᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃⲆⲆᐃ].id = Dr.ⵠᐃⲆⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆΔⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆᐃⲆΔⲆ], Fh);
    this.ΔⵠΔ[Dr.ⲆΔⲆⲆⲆ].id = Dr.ⲆΔⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ΔⵠⲆᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⲆⲆΔⲆⵠ], Za);
    this.ΔⵠΔ[Dr.ΔⵠⲆᐃⲆ].id = Dr.ΔⵠⲆᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⲆΔΔΔΔ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆⲆ].id = Dr.ᐃⵠᐃⲆⲆ;
    this.ΔⵠΔ[Dr.ΔΔΔᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔΔΔⵠⲆ], fa);
    this.ΔⵠΔ[Dr.ΔΔΔᐃⵠ].id = Dr.ΔΔΔᐃⵠ;
    this.ΔⵠΔ[Dr.ΔᐃΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠⲆᐃΔᐃ], 3);
    this.ΔⵠΔ[Dr.ΔᐃΔⲆⲆ].id = Dr.ΔᐃΔⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔᐃΔⵠΔΔ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠⲆⲆⲆ].id = Dr.ᐃⵠⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃⲆⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠᐃᐃⲆⲆΔ], jg);
    this.ΔⵠΔ[Dr.ᐃᐃⲆⵠⲆ].id = Dr.ᐃᐃⲆⵠⲆ;
    this.ΔⵠΔ[Dr.ᐃΔᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⲆᐃᐃⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃΔᐃⲆΔ].id = Dr.ᐃΔᐃⲆΔ;
    this.ΔⵠΔ[Dr.ΔⲆΔᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⲆΔⵠᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⲆΔᐃΔ].id = Dr.ΔⲆΔᐃΔ;
    this.ΔⵠΔ[Dr.ⵠΔⵠⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔⵠⲆⲆΔ], Vl);
    this.ΔⵠΔ[Dr.ⵠΔⵠⵠΔ].id = Dr.ⵠΔⵠⵠΔ;
    this.ΔⵠΔ[Dr.ΔΔⲆΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔΔⵠⲆⵠⵠ], lk);
    this.ΔⵠΔ[Dr.ΔΔⲆΔΔ].id = Dr.ΔΔⲆΔΔ;
    this.ΔⵠΔ[Dr.ᐃΔᐃΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆⲆΔΔΔⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃΔᐃΔΔ].id = Dr.ᐃΔᐃΔΔ;
    this.ΔⵠΔ[Dr.ΔΔᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔᐃⲆⲆΔΔ], B);
    this.ΔⵠΔ[Dr.ΔΔᐃⲆΔ].id = Dr.ΔΔᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⲆⲆⲆᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔⲆⵠⵠⲆ], Fh);
    this.ΔⵠΔ[Dr.ⲆⲆⲆᐃⲆ].id = Dr.ⲆⲆⲆᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⵠΔⵠΔⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠᐃⲆᐃ].id = Dr.ᐃⵠᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆⵠⵠⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠᐃⲆᐃΔ], fa);
    this.ΔⵠΔ[Dr.ⲆⵠⵠⲆⲆ].id = Dr.ⲆⵠⵠⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆΔΔⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃⵠΔᐃΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆΔΔⵠⲆ].id = Dr.ⲆΔΔⵠⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆᐃΔΔᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠΔⵠ].id = Dr.ᐃⵠΔⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠᐃᐃΔⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃᐃΔ].id = Dr.ᐃᐃᐃΔ;
    this.ΔⵠΔ[Dr.ⲆΔⵠΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔⲆᐃΔⵠ], Gg);
    this.ΔⵠΔ[Dr.ⲆΔⵠΔⵠ].id = Dr.ⲆΔⵠΔⵠ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠⵠΔⲆᐃ], Mo);
    this.ΔⵠΔ[Dr.ⵠⵠⵠⵠΔ].id = Dr.ⵠⵠⵠⵠΔ;
    this.ΔⵠΔ[Dr.ΔᐃⲆⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠⲆΔΔᐃ], lk);
    this.ΔⵠΔ[Dr.ΔᐃⲆⲆⵠ].id = Dr.ΔᐃⲆⲆⵠ;
    this.ΔⵠΔ[Dr.ΔⲆⵠΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆΔⲆⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ΔⲆⵠΔⲆ].id = Dr.ΔⲆⵠΔⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃᐃΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⵠᐃᐃΔᐃ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃᐃΔⲆ].id = Dr.ⲆᐃᐃΔⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃᐃᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔᐃΔΔᐃⲆ], B);
    this.ΔⵠΔ[Dr.ⲆᐃᐃᐃⲆ].id = Dr.ⲆᐃᐃᐃⲆ;
    this.ΔⵠΔ[Dr.ΔᐃᐃΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃΔⵠⲆⲆ], lk);
    this.ΔⵠΔ[Dr.ΔᐃᐃΔⲆ].id = Dr.ΔᐃᐃΔⲆ;
    this.ΔⵠΔ[Dr.ⵠᐃᐃΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⲆⲆⲆΔΔ], Ik);
    this.ΔⵠΔ[Dr.ⵠᐃᐃΔᐃ].id = Dr.ⵠᐃᐃΔᐃ;
    this.ΔⵠΔ[Dr.Ⲇᐃᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆᐃΔⵠⵠᐃ], Dn);
    this.ΔⵠΔ[Dr.Ⲇᐃᐃⵠᐃ].id = Dr.Ⲇᐃᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠΔᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔΔΔⵠⵠ], Za);
    this.ΔⵠΔ[Dr.ⵠΔᐃⵠᐃ].id = Dr.ⵠΔᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ΔⲆᐃⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠᐃⲆⲆⵠ], Gg);
    this.ΔⵠΔ[Dr.ΔⲆᐃⲆⵠ].id = Dr.ΔⲆᐃⲆⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔΔⲆⲆΔ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃᐃᐃⵠ].id = Dr.ᐃᐃᐃᐃⵠ;
    this.ΔⵠΔ[Dr.ΔΔⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃΔΔᐃΔ], Fh);
    this.ΔⵠΔ[Dr.ΔΔⵠᐃⲆ].id = Dr.ΔΔⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ΔΔᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠᐃΔᐃⲆⵠ], Kk);
    this.ΔⵠΔ[Dr.ΔΔᐃⵠⵠ].id = Dr.ΔΔᐃⵠⵠ;
    this.ΔⵠΔ[Dr.ⵠΔΔᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔᐃⲆⲆΔⲆ], fa);
    this.ΔⵠΔ[Dr.ⵠΔΔᐃᐃ].id = Dr.ⵠΔΔᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠΔᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆⵠⵠᐃ].id = Dr.ᐃⲆⵠⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠᐃⵠⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠᐃᐃⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃⵠⵠΔ].id = Dr.ⵠᐃⵠⵠΔ;
    this.ΔⵠΔ[Dr.ΔⲆⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠᐃᐃⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ΔⲆⲆⲆⲆ].id = Dr.ΔⲆⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃⲆⲆΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆᐃᐃΔΔⲆ], Gg);
    this.ΔⵠΔ[Dr.ᐃⲆⲆΔⲆ].id = Dr.ᐃⲆⲆΔⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔⵠΔⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃⲆ].id = Dr.ⲆᐃΔᐃⲆ;
    this.ΔⵠΔ[Dr.ⲆΔᐃⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⲆⵠⲆⲆΔ], fa);
    this.ΔⵠΔ[Dr.ⲆΔᐃⲆⲆ].id = Dr.ⲆΔᐃⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔΔⵠⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠΔ].id = Dr.ⵠⲆⲆⵠΔ;
    this.ΔⵠΔ[Dr.ⵠⵠⲆΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃⲆⲆᐃⲆⲆ], Mo);
    this.ΔⵠΔ[Dr.ⵠⵠⲆΔΔ].id = Dr.ⵠⵠⲆΔΔ;
    this.ΔⵠΔ[Dr.ᐃⵠᐃᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆΔᐃᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠᐃᐃΔ].id = Dr.ᐃⵠᐃᐃΔ;
    this.ΔⵠΔ[Dr.ⵠᐃⲆⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃⲆⲆⵠⲆᐃ], ta);
    this.ΔⵠΔ[Dr.ⵠᐃⲆⲆΔ].id = Dr.ⵠᐃⲆⲆΔ;
    this.ΔⵠΔ[Dr.ᐃⲆΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔΔⲆⲆⲆΔ], cl);
    this.ΔⵠΔ[Dr.ᐃⲆΔⲆⲆ].id = Dr.ᐃⲆΔⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃΔΔᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠⵠⵠⵠΔ], Mo);
    this.ΔⵠΔ[Dr.ᐃΔΔᐃⵠ].id = Dr.ᐃΔΔᐃⵠ;
    this.ΔⵠΔ[Dr.ⲆᐃⲆΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆᐃΔᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃⲆΔⵠ].id = Dr.ⲆᐃⲆΔⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃⲆᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃΔᐃΔⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃⲆᐃⵠ].id = Dr.ᐃᐃⲆᐃⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠᐃⲆⲆⵠⵠ], Fh);
    this.ΔⵠΔ[Dr.ᐃᐃⵠⲆⵠ].id = Dr.ᐃᐃⵠⲆⵠ;
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔⵠⵠⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠᐃ].id = Dr.ⲆΔᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠΔᐃΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆⵠⲆΔΔ], 3);
    this.ΔⵠΔ[Dr.ⵠΔᐃΔⵠ].id = Dr.ⵠΔᐃΔⵠ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⲆᐃⲆⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠⵠ].id = Dr.ⲆΔⵠⵠⵠ;
    this.ΔⵠΔ[Dr.ⵠΔⵠΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔΔΔⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠΔⵠΔΔ].id = Dr.ⵠΔⵠΔΔ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠᐃⲆΔⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆⵠ].id = Dr.ⵠⲆᐃⲆⵠ;
    this.ΔⵠΔ[Dr.ΔⵠΔΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠΔΔⲆᐃ], nh);
    this.ΔⵠΔ[Dr.ΔⵠΔΔᐃ].id = Dr.ΔⵠΔΔᐃ;
    this.ΔⵠΔ[Dr.ᐃᐃΔⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⲆⵠᐃⵠΔ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃΔⵠᐃ].id = Dr.ᐃᐃΔⵠᐃ;
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠΔⲆᐃⵠⵠ], nh);
    this.ΔⵠΔ[Dr.ⲆΔᐃⵠⵠ].id = Dr.ⲆΔᐃⵠⵠ;
    this.ΔⵠΔ[Dr.ᐃⲆᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃᐃⵠΔᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆᐃⵠᐃ].id = Dr.ᐃⲆᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠᐃⲆⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔᐃⲆᐃⵠ], sn);
    this.ΔⵠΔ[Dr.ⵠᐃⲆⵠⵠ].id = Dr.ⵠᐃⲆⵠⵠ;
    this.ΔⵠΔ[Dr.Ⲇᐃᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⲆⲆⲆΔⵠ], 3);
    this.ΔⵠΔ[Dr.Ⲇᐃᐃⵠⵠ].id = Dr.Ⲇᐃᐃⵠⵠ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⵠΔⵠⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠⲆ].id = Dr.ⲆΔⵠⵠⲆ;
    this.ΔⵠΔ[Dr.ΔⵠᐃΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠᐃΔⵠⵠΔ], 3);
    this.ΔⵠΔ[Dr.ΔⵠᐃΔᐃ].id = Dr.ΔⵠᐃΔᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠΔᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃᐃ], Gg);
    this.ΔⵠΔ[Dr.ᐃⵠΔᐃⵠ].id = Dr.ᐃⵠΔᐃⵠ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔⵠⵠᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠⲆ].id = Dr.ⵠⲆⲆⵠⲆ;
    this.ΔⵠΔ[Dr.ⲆⵠⵠΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆΔⵠΔⲆΔ], 3);
    this.ΔⵠΔ[Dr.ⲆⵠⵠΔⲆ].id = Dr.ⲆⵠⵠΔⲆ;
    this.ΔⵠΔ[Dr.ΔⲆᐃΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆΔᐃᐃⲆΔ], Vl);
    this.ΔⵠΔ[Dr.ΔⲆᐃΔᐃ].id = Dr.ΔⲆᐃΔᐃ;
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔᐃᐃΔΔⵠ], Ea);
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆᐃ].id = Dr.ΔᐃᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ΔΔⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆᐃΔᐃΔᐃ], 3);
    this.ΔⵠΔ[Dr.ΔΔⲆᐃᐃ].id = Dr.ΔΔⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ΔᐃᐃΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆΔΔΔᐃᐃ], Gg);
    this.ΔⵠΔ[Dr.ΔᐃᐃΔΔ].id = Dr.ΔᐃᐃΔΔ;
    this.ΔⵠΔ[Dr.ᐃᐃΔⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆᐃⵠΔⵠᐃ], Gg);
    this.ΔⵠΔ[Dr.ᐃᐃΔⲆΔ].id = Dr.ᐃᐃΔⲆΔ;
    this.ΔⵠΔ[Dr.ᐃⲆΔⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔᐃᐃⲆΔⵠ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆΔⵠⵠ].id = Dr.ᐃⲆΔⵠⵠ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠⵠⵠⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆᐃᐃⵠ].id = Dr.ⵠⲆᐃᐃⵠ;
    this.ΔⵠΔ[Dr.ⵠΔⲆⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⲆⵠᐃᐃᐃ], fa);
    this.ΔⵠΔ[Dr.ⵠΔⲆⲆΔ].id = Dr.ⵠΔⲆⲆΔ;
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⲆᐃⲆᐃⵠ], 3);
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆⲆ].id = Dr.ΔᐃᐃⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃᐃⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃⲆⲆᐃΔ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃᐃⵠⲆ].id = Dr.ⲆᐃᐃⵠⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃⲆⵠⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃⵠⲆᐃ].id = Dr.ᐃᐃⵠⲆᐃ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⲆⲆⵠⲆΔ], ta);
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆⲆ].id = Dr.ⵠⵠⵠⲆⲆ;
    this.ΔⵠΔ[Dr.Ⲇⵠᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔΔⲆᐃⲆΔ], Dn);
    this.ΔⵠΔ[Dr.Ⲇⵠᐃⵠⵠ].id = Dr.Ⲇⵠᐃⵠⵠ;
    this.ΔⵠΔ[Dr.ΔⲆᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⲆᐃΔⲆΔ], 3);
    this.ΔⵠΔ[Dr.ΔⲆᐃⲆΔ].id = Dr.ΔⲆᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⵠΔⲆⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠΔΔΔΔⲆ], Fh);
    this.ΔⵠΔ[Dr.ⵠΔⲆⲆᐃ].id = Dr.ⵠΔⲆⲆᐃ;
    this.ΔⵠΔ[Dr.ΔⵠΔΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆᐃⵠⵠⵠΔ], vg);
    this.ΔⵠΔ[Dr.ΔⵠΔΔⲆ].id = Dr.ΔⵠΔΔⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⲆⲆⲆⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃⵠᐃⲆ].id = Dr.ⲆᐃⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆⵠⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃΔⵠᐃᐃⵠ], vo);
    this.ΔⵠΔ[Dr.ⵠⲆⵠⵠᐃ].id = Dr.ⵠⲆⵠⵠᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠⲆⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⲆⵠⲆⲆΔ], lk);
    this.ΔⵠΔ[Dr.ᐃⵠⲆⵠΔ].id = Dr.ᐃⵠⲆⵠΔ;
    this.ΔⵠΔ[Dr.ⵠΔⵠᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆⲆᐃⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠΔⵠᐃⵠ].id = Dr.ⵠΔⵠᐃⵠ;
    this.ΔⵠΔ[Dr.ⵠΔΔⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔⲆⵠᐃⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠΔΔⲆΔ].id = Dr.ⵠΔΔⲆΔ;
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃΔΔⲆⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃᐃ].id = Dr.ⵠᐃᐃᐃᐃ;
    this.ΔⵠΔ[Dr.ⵠⵠᐃⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃΔΔΔⵠ], Gg);
    this.ΔⵠΔ[Dr.ⵠⵠᐃⵠΔ].id = Dr.ⵠⵠᐃⵠΔ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⵠⲆⲆᐃᐃ], Vl);
    this.ΔⵠΔ[Dr.ᐃᐃⵠⵠⲆ].id = Dr.ᐃᐃⵠⵠⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃⵠΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃΔΔΔΔ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃⵠΔᐃ].id = Dr.ⲆᐃⵠΔᐃ;
    this.ΔⵠΔ[Dr.ΔⵠᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔᐃᐃⲆΔⲆ], 3);
    this.ΔⵠΔ[Dr.ΔⵠᐃⲆᐃ].id = Dr.ΔⵠᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆᐃⵠⲆᐃ], Fh);
    this.ΔⵠΔ[Dr.ᐃⲆⵠᐃⵠ].id = Dr.ᐃⲆⵠᐃⵠ;
    this.ΔⵠΔ[Dr.ΔⵠΔᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆΔΔⵠΔ], lk);
    this.ΔⵠΔ[Dr.ΔⵠΔᐃΔ].id = Dr.ΔⵠΔᐃΔ;
    this.ΔⵠΔ[Dr.ΔⲆΔᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃⲆΔⲆᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ΔⲆΔᐃⵠ].id = Dr.ΔⲆΔᐃⵠ;
    this.ΔⵠΔ[Dr.ⲆⲆΔΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠΔΔΔⵠ], B);
    this.ΔⵠΔ[Dr.ⲆⲆΔΔⵠ].id = Dr.ⲆⲆΔΔⵠ;
    this.ΔⵠΔ[Dr.ⵠⵠΔΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⵠⲆⵠⵠⲆ], Mo);
    this.ΔⵠΔ[Dr.ⵠⵠΔΔⵠ].id = Dr.ⵠⵠΔΔⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆΔΔⵠᐃⵠ], Ik);
    this.ΔⵠΔ[Dr.ᐃᐃᐃⲆᐃ].id = Dr.ᐃᐃᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃΔᐃⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆΔⲆΔⵠᐃ], _i);
    this.ΔⵠΔ[Dr.ᐃΔᐃⵠΔ].id = Dr.ᐃΔᐃⵠΔ;
    this.ΔⵠΔ[Dr.ΔᐃⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆⵠⲆⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ΔᐃⵠᐃⲆ].id = Dr.ΔᐃⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃⵠⲆᐃⵠΔ], Vl);
    this.ΔⵠΔ[Dr.ⵠᐃᐃᐃⲆ].id = Dr.ⵠᐃᐃᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⵠⲆⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆⵠⵠᐃⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⲆⲆⵠ].id = Dr.ⵠⵠⲆⲆⵠ;
    this.ΔⵠΔ[Dr.ᐃΔᐃⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆᐃᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃΔᐃⵠⵠ].id = Dr.ᐃΔᐃⵠⵠ;
    this.ΔⵠΔ[Dr.Ⲇᐃⵠⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠᐃΔᐃΔⲆ], lk);
    this.ΔⵠΔ[Dr.Ⲇᐃⵠⵠᐃ].id = Dr.Ⲇᐃⵠⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠⵠᐃᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⲆⵠⲆⲆⲆ], _i);
    this.ΔⵠΔ[Dr.ⵠⵠᐃᐃⵠ].id = Dr.ⵠⵠᐃᐃⵠ;
    this.ΔⵠΔ[Dr.ᐃΔΔΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠΔᐃᐃⲆ], Ik);
    this.ΔⵠΔ[Dr.ᐃΔΔΔΔ].id = Dr.ᐃΔΔΔΔ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠΔΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⲆΔⲆᐃⵠ], Kk);
    this.ΔⵠΔ[Dr.ᐃᐃⵠΔΔ].id = Dr.ᐃᐃⵠΔΔ;
    this.ΔⵠΔ[Dr.ⲆΔⲆΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⵠⲆⵠⲆΔ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⲆΔᐃ].id = Dr.ⲆΔⲆΔᐃ;
    this.ΔⵠΔ[Dr.ⵠᐃⵠⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆΔΔⲆⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃⵠⵠⵠ].id = Dr.ⵠᐃⵠⵠⵠ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔΔⵠᐃⵠ], Mo);
    this.ΔⵠΔ[Dr.ⲆΔⵠⲆΔ].id = Dr.ⲆΔⵠⲆΔ;
    this.ΔⵠΔ[Dr.ⵠΔⵠⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⲆⵠⲆΔⵠ], jg);
    this.ΔⵠΔ[Dr.ⵠΔⵠⲆΔ].id = Dr.ⵠΔⵠⲆΔ;
    this.ΔⵠΔ[Dr.ⲆⵠⵠⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⵠⵠⲆΔᐃ], Gg);
    this.ΔⵠΔ[Dr.ⲆⵠⵠⲆⵠ].id = Dr.ⲆⵠⵠⲆⵠ;
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⲆΔΔᐃΔ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆᐃ].id = Dr.ⵠᐃⵠⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆⵠⲆΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠᐃⵠᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ⲆⵠⲆΔⵠ].id = Dr.ⲆⵠⲆΔⵠ;
    this.ΔⵠΔ[Dr.ΔΔΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆⲆΔᐃⵠ], 3);
    this.ΔⵠΔ[Dr.ΔΔΔᐃⲆ].id = Dr.ΔΔΔᐃⲆ;
    this.ΔⵠΔ[Dr.ΔⵠⲆΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃⲆⵠⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ΔⵠⲆΔᐃ].id = Dr.ΔⵠⲆΔᐃ;
    this.ΔⵠΔ[Dr.ᐃΔⲆⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔΔᐃⵠⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃΔⲆⲆᐃ].id = Dr.ᐃΔⲆⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆΔⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆᐃΔΔΔ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⵠᐃⲆ].id = Dr.ⲆΔⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠⲆⵠᐃᐃ], ta);
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃᐃ].id = Dr.ᐃΔⵠᐃᐃ;
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠΔΔΔᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠᐃⵠⲆⵠ].id = Dr.ⵠᐃⵠⲆⵠ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⵠⵠⵠΔⲆ], _i);
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆΔ].id = Dr.ⵠⵠⵠⲆΔ;
    this.ΔⵠΔ[Dr.ⵠΔΔⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⲆΔΔⵠⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠΔΔⵠⲆ].id = Dr.ⵠΔΔⵠⲆ;
    this.ΔⵠΔ[Dr.Δⵠⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃᐃⲆΔΔⲆ], 3);
    this.ΔⵠΔ[Dr.Δⵠⵠᐃᐃ].id = Dr.Δⵠⵠᐃᐃ;
    this.ΔⵠΔ[Dr.ⲆᐃⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⲆΔⲆⲆⲆ], Ea);
    this.ΔⵠΔ[Dr.ⲆᐃⲆᐃᐃ].id = Dr.ⲆᐃⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃΔⲆᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆⲆ].id = Dr.ᐃⲆⵠⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⵠΔᐃⵠⲆ], Ea);
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆᐃ].id = Dr.ⵠⲆᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆΔⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆᐃᐃᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆΔⵠΔ].id = Dr.ᐃⲆΔⵠΔ;
    this.ΔⵠΔ[Dr.ⵠⵠⲆⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⵠΔⲆⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⲆⵠΔ].id = Dr.ⵠⵠⲆⵠΔ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⵠⵠⵠⲆᐃ], Mo);
    this.ΔⵠΔ[Dr.ᐃᐃᐃⲆⲆ].id = Dr.ᐃᐃᐃⲆⲆ;
    this.ΔⵠΔ[Dr.ⵠᐃⲆⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆⲆ], Vl);
    this.ΔⵠΔ[Dr.ⵠᐃⲆⵠᐃ].id = Dr.ⵠᐃⲆⵠᐃ;
    this.ΔⵠΔ[Dr.ⲆᐃᐃΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆᐃⲆᐃⲆⲆ], Vl);
    this.ΔⵠΔ[Dr.ⲆᐃᐃΔᐃ].id = Dr.ⲆᐃᐃΔᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠⲆᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠᐃΔᐃⲆᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠⲆᐃⵠ].id = Dr.ᐃⵠⲆᐃⵠ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⵠᐃⵠⲆᐃ], nh);
    this.ΔⵠΔ[Dr.ⵠⵠⵠⲆᐃ].id = Dr.ⵠⵠⵠⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆᐃΔⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃΔᐃΔΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃΔⲆⵠ].id = Dr.ⲆᐃΔⲆⵠ;
    this.ᐃⲆⲆΔᐃ = [];
    for (k = Fj; k < 250; k++) {
      this.ᐃⲆⲆΔᐃ[k] = Qv(0, 0, 0, ΔΔ[Cr.ⲆᐃⲆᐃΔΔᐃ]);
    }
    this.ⲆᐃⲆ = [];
    this.ⲆᐃⲆ[Dr.ⵠⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆⵠ], Mo);
    this.ⲆᐃⲆ[Dr.ⵠⲆΔᐃΔ].id = Dr.ⵠⲆΔᐃΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔΔΔᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠΔⵠ].id = Dr.ⵠⵠⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆΔⲆⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠ].id = Dr.ᐃᐃᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠ].info.Ⲇⵠ[ko];
    this.ⲆᐃⲆ[Dr.ΔΔⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔΔⵠᐃ], Ea);
    this.ⲆᐃⲆ[Dr.ΔΔⲆⵠ].id = Dr.ΔΔⲆⵠ;
    this.ⲆᐃⲆ[Dr.ΔΔⲆⵠ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ΔΔⲆⵠ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆⲆⵠⲆΔ], nh);
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆⲆ].id = Dr.ᐃᐃΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔⵠⲆⵠᐃ], Ea);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠᐃᐃ].id = Dr.ⲆΔⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⵠⲆᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆ].id = Dr.ⲆΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔᐃΔⲆ], vg);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆΔ].id = Dr.ⵠⲆⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⵠⲆⲆΔ].info.Ⲇⵠ[$t];
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔⲆⵠⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠΔⲆ].id = Dr.ᐃⲆⵠΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠΔΔⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃᐃᐃ].id = Dr.ⲆΔᐃᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔΔⵠᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⲆᐃ].id = Dr.ⲆΔⵠⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃⵠⵠΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆᐃΔⲆ].id = Dr.ᐃⲆᐃΔⲆ;
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⲆⵠΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⵠΔ].id = Dr.ΔᐃⲆⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠᐃΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆΔᐃⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃΔΔᐃ].id = Dr.ⵠᐃΔΔᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔΔΔΔᐃⲆ], nh);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⲆᐃ].id = Dr.ᐃⵠΔⲆᐃ;
    this.ⲆᐃⲆ[Dr.ΔⵠᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⲆᐃⵠΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠᐃᐃΔ].id = Dr.ΔⵠᐃᐃΔ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃⲆᐃΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆⲆⲆᐃ].id = Dr.ᐃⲆⲆⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆᐃⵠᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔⲆᐃᐃ].id = Dr.ᐃΔⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆⵠⲆⵠΔ], Ea);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔᐃⲆ].id = Dr.ᐃⵠΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠⵠⲆᐃᐃ], Fh);
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃⲆ].id = Dr.ᐃΔⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔⲆΔⲆΔ], nh);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠᐃⲆ].id = Dr.ᐃⵠⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆⲆᐃⲆΔ], Fh);
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃⵠᐃ].id = Dr.Ⲇⵠᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔᐃᐃⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃᐃ].id = Dr.ⲆᐃΔᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠΔⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠⲆᐃᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠΔⵠΔ].id = Dr.ⵠⵠΔⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠΔⵠΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⵠⵠΔⵠΔ].info.Ⲇⵠ[Kr];
    this.ⲆᐃⲆ[Dr.ⲆⲆΔⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆⲆⵠᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⲆΔⵠⵠ].id = Dr.ⲆⲆΔⵠⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃⲆⵠⲆΔ], cl);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠΔⵠ].id = Dr.ᐃⵠⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠΔΔΔᐃᐃ], vo);
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⲆΔ].id = Dr.ⲆⲆᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆᐃⲆⲆⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠΔⲆⲆ].id = Dr.ⵠⵠΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔΔⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔᐃⲆΔΔ], Mo);
    this.ⲆᐃⲆ[Dr.ⲆΔΔⲆⵠ].id = Dr.ⲆΔΔⲆⵠ;
    this.ⲆᐃⲆ[Dr.Ⲇᐃⵠⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⲆᐃⲆᐃⲆ], Ik);
    this.ⲆᐃⲆ[Dr.Ⲇᐃⵠⵠⵠ].id = Dr.Ⲇᐃⵠⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⲆΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆΔⲆⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⲆᐃᐃ].id = Dr.ⲆΔⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃΔᐃᐃⵠ], vg);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔⵠ].id = Dr.ᐃᐃᐃΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⵠ].id = Dr.ᐃⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠⵠⵠⲆᐃ], ta);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠⵠᐃ].id = Dr.ᐃⵠⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ΔΔΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃⲆⵠⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔΔΔΔⲆ].id = Dr.ΔΔΔΔⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠᐃᐃΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆᐃⲆ].id = Dr.ᐃᐃⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠΔⲆⵠΔΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆΔ].id = Dr.ᐃⵠᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⵠⵠᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃΔ].id = Dr.ΔⵠⲆᐃΔ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃΔ].info.Ⲇⵠ[$r] = this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃΔ].info.Ⲇⵠ[Jt];
    this.ⲆᐃⲆ[Dr.ⵠⲆΔⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔⵠΔⵠᐃ], _i);
    this.ⲆᐃⲆ[Dr.ⵠⲆΔⵠᐃ].id = Dr.ⵠⲆΔⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⲆΔⵠᐃ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⵠⲆΔⵠᐃ].info.Ⲇⵠ[Ko];
    this.ⲆᐃⲆ[Dr.ⲆⵠΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔᐃⵠᐃⵠ], vo);
    this.ⲆᐃⲆ[Dr.ⲆⵠΔΔᐃ].id = Dr.ⲆⵠΔΔᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠΔΔᐃ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆⵠΔΔᐃ].info.Ⲇⵠ[Gd];
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆⲆⲆ], fa);
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠᐃᐃ].id = Dr.ⵠⲆⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.Δᐃⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.Δᐃⵠᐃᐃ].id = Dr.Δᐃⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆΔⵠ].id = Dr.ⲆⲆⲆΔⵠ;
    this.ⲆᐃⲆ[Dr.ΔⵠΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠΔⲆΔ].id = Dr.ΔⵠΔⲆΔ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠⵠⵠⲆᐃ], nh);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠⵠᐃ].id = Dr.ᐃⵠⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠᐃᐃᐃΔ], Fh);
    this.ⲆᐃⲆ[Dr.ⵠΔᐃⵠⵠ].id = Dr.ⵠΔᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆⲆΔᐃⲆ], ta);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆⲆ].id = Dr.ᐃⲆⵠⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃᐃⵠΔⵠ], lk);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃᐃΔ].id = Dr.ⵠⲆᐃᐃΔ;
    this.ⲆᐃⲆ[Dr.ΔⲆⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔᐃΔᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔⲆⲆⵠⲆ].id = Dr.ΔⲆⲆⵠⲆ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠΔΔᐃⲆ], Vl);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠⵠ].id = Dr.ΔⵠⲆⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ], B);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆᐃ].id = Dr.ⵠⲆᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠᐃᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⲆⵠᐃΔⲆ], Kk);
    this.ⲆᐃⲆ[Dr.ⲆⵠᐃᐃⲆ].id = Dr.ⲆⵠᐃᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠᐃⲆΔΔ], Vl);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠΔᐃ].id = Dr.ᐃⵠⵠΔᐃ;
    this.ⲆᐃⲆ[Dr.ΔⵠⵠᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃΔⵠⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠⵠᐃΔ].id = Dr.ΔⵠⵠᐃΔ;
    this.ⲆᐃⲆ[Dr.ΔⵠΔⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⵠΔⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠΔⵠⲆ].id = Dr.ΔⵠΔⵠⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔᐃⲆⵠ], _i);
    this.ⲆᐃⲆ[Dr.ⵠⲆΔΔⲆ].id = Dr.ⵠⲆΔΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆΔᐃΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆⲆⲆ].id = Dr.ⲆᐃⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⵠⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆⲆ].id = Dr.ⵠᐃⵠⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⲆⵠⲆΔᐃ], Ik);
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃⲆᐃ].id = Dr.ⵠᐃᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔΔᐃⵠΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠΔᐃ].id = Dr.ⵠⲆⵠΔᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠΔΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆⲆᐃᐃᐃ], B);
    this.ⲆᐃⲆ[Dr.ⵠⵠΔΔΔ].id = Dr.ⵠⵠΔΔΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃⲆᐃⲆΔ], vg);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔⲆ].id = Dr.ᐃᐃᐃΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔᐃⵠⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⲆ].id = Dr.ⲆΔᐃⵠⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠΔⵠⵠⵠⵠ], Gg);
    this.ⲆᐃⲆ[Dr.ᐃⵠⵠᐃⵠ].id = Dr.ᐃⵠⵠᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃΔΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠᐃΔΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔΔⲆᐃ].id = Dr.ᐃΔΔⲆᐃ;
    this.ⲆᐃⲆ[Dr.ΔⲆᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠᐃᐃΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔⲆᐃᐃᐃ].id = Dr.ΔⲆᐃᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃⵠΔΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⲆΔ].id = Dr.ⵠⲆⲆⲆΔ;
    this.ⲆᐃⲆ[Dr.ᐃΔⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔᐃⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔⲆⲆⲆ].id = Dr.ᐃΔⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔΔⵠⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⲆⲆ].id = Dr.ΔᐃⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃΔⲆΔΔ], Kk);
    this.ⲆᐃⲆ[Dr.ⲆᐃΔΔᐃ].id = Dr.ⲆᐃΔΔᐃ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔⵠⲆΔⲆ], vo);
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃΔ].id = Dr.ⵠᐃᐃᐃΔ;
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⵠΔⵠⲆᐃ], B);
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃᐃⵠ].id = Dr.Ⲇⵠᐃᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃᐃᐃᐃⲆ], cl);
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⲆᐃ].id = Dr.ⵠᐃⲆⲆᐃ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⲆⲆΔΔ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆᐃⲆ].id = Dr.ΔⵠⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⲆⵠⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⲆⲆⲆ].id = Dr.ⲆΔⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔΔᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆⲆ].id = Dr.ᐃⵠᐃⲆⲆ;
    this.ⲆᐃⲆ[Dr.ΔᐃΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆΔ], sn);
    this.ⲆᐃⲆ[Dr.ΔᐃΔⲆⲆ].id = Dr.ΔᐃΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ΔΔΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠΔΔⵠⵠ], cl);
    this.ⲆᐃⲆ[Dr.ΔΔΔᐃⵠ].id = Dr.ΔΔΔᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠⲆⲆⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⲆⲆ].id = Dr.ᐃⵠⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃᐃΔⵠᐃ], Kk);
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆⵠⲆ].id = Dr.ᐃᐃⲆⵠⲆ;
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔⵠΔΔⲆ], lk);
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⲆΔ].id = Dr.ᐃΔᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ΔⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆⲆᐃⲆΔ], jg);
    this.ⲆᐃⲆ[Dr.ΔⲆΔᐃΔ].id = Dr.ΔⲆΔᐃΔ;
    this.ⲆᐃⲆ[Dr.ⵠΔⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠΔⵠᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔⵠⵠΔ].id = Dr.ⵠΔⵠⵠΔ;
    this.ⲆᐃⲆ[Dr.ΔΔⲆΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃⲆΔᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔΔⲆΔΔ].id = Dr.ΔΔⲆΔΔ;
    this.ⲆᐃⲆ[Dr.ᐃΔᐃΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃⲆΔⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔᐃΔΔ].id = Dr.ᐃΔᐃΔΔ;
    this.ⲆᐃⲆ[Dr.ΔΔᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃΔⵠᐃ], Kk);
    this.ⲆᐃⲆ[Dr.ΔΔᐃⲆΔ].id = Dr.ΔΔᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃΔⲆⵠ], sn);
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆᐃⲆ].id = Dr.ⲆⲆⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠᐃⲆⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃⲆᐃ].id = Dr.ᐃⵠᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠⲆⲆ].id = Dr.ⲆⵠⵠⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔΔⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔΔΔⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔΔⵠⲆ].id = Dr.ⲆΔΔⵠⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔΔⵠⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆΔΔⵠⲆ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠⵠⵠⲆ], Gg);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔⵠ].id = Dr.ᐃⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃⲆⵠᐃ], B);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔ].id = Dr.ᐃᐃᐃΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔ].info.Ⲇⵠ[_l] = this.ⲆᐃⲆ[Dr.ᐃᐃᐃΔ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⲆΔⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠᐃⲆⵠⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠΔⵠ].id = Dr.ⲆΔⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆᐃΔⵠΔ], Vl);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⵠΔ].id = Dr.ⵠⵠⵠⵠΔ;
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔΔⵠⵠⵠ], lk);
    this.ⲆᐃⲆ[Dr.ΔᐃⲆⲆⵠ].id = Dr.ΔᐃⲆⲆⵠ;
    this.ⲆᐃⲆ[Dr.ΔⲆⵠΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆᐃⲆΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔⲆⵠΔⲆ].id = Dr.ΔⲆⵠΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔᐃⵠΔⲆ], _i);
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃΔⲆ].id = Dr.ⲆᐃᐃΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔΔⵠⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃᐃⲆ].id = Dr.ⲆᐃᐃᐃⲆ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃΔⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃΔⲆ].id = Dr.ΔᐃᐃΔⲆ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔΔᐃᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃΔᐃ].id = Dr.ⵠᐃᐃΔᐃ;
    this.ⲆᐃⲆ[Dr.Ⲇᐃᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃᐃᐃⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.Ⲇᐃᐃⵠᐃ].id = Dr.Ⲇᐃᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠⲆΔᐃⲆ], Fh);
    this.ⲆᐃⲆ[Dr.ⵠΔᐃⵠᐃ].id = Dr.ⵠΔᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔᐃⲆΔⵠ], nh);
    this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆⵠ].id = Dr.ΔⲆᐃⲆⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆΔΔⲆⲆ], nh);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃᐃⵠ].id = Dr.ᐃᐃᐃᐃⵠ;
    this.ⲆᐃⲆ[Dr.ΔΔⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃᐃᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔΔⵠᐃⲆ].id = Dr.ΔΔⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ΔΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃᐃⲆⵠⲆ], B);
    this.ⲆᐃⲆ[Dr.ΔΔᐃⵠⵠ].id = Dr.ΔΔᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠΔΔᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠΔᐃΔΔ], Za);
    this.ⲆᐃⲆ[Dr.ⵠΔΔᐃᐃ].id = Dr.ⵠΔΔᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔΔᐃᐃ].info.Ⲇⵠ[yh] = this.ⲆᐃⲆ[Dr.ⵠΔΔᐃᐃ].info.Ⲇⵠ[Wh];
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃᐃⲆⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⵠᐃ].id = Dr.ᐃⲆⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⵠᐃ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ᐃⲆⵠⵠᐃ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠᐃᐃᐃⵠ], B);
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠΔ].id = Dr.ⵠᐃⵠⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠΔ].info.Ⲇⵠ[Lg];
    this.ⲆᐃⲆ[Dr.ΔⲆⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔΔΔΔᐃ], fa);
    this.ⲆᐃⲆ[Dr.ΔⲆⲆⲆⲆ].id = Dr.ΔⲆⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ΔⲆⲆⲆⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ΔⲆⲆⲆⲆ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ᐃⲆⲆΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔⵠⵠⲆΔ], Kk);
    this.ⲆᐃⲆ[Dr.ᐃⲆⲆΔⲆ].id = Dr.ᐃⲆⲆΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃΔⵠΔⵠ], Ik);
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ].id = Dr.ⲆᐃΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆⲆⵠⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⲆⲆ].id = Dr.ⲆΔᐃⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔΔⲆⲆᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠΔ].id = Dr.ⵠⲆⲆⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⵠΔᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆΔΔ].id = Dr.ⵠⵠⲆΔΔ;
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔⲆΔΔ], jg);
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃᐃΔ].id = Dr.ᐃⵠᐃᐃΔ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃΔⵠΔⲆ], vo);
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⲆΔ].id = Dr.ⵠᐃⲆⲆΔ;
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔΔⲆⵠⲆΔ], vg);
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⲆⲆ].id = Dr.ᐃⲆΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ᐃΔΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃᐃΔⵠᐃ], jg);
    this.ⲆᐃⲆ[Dr.ᐃΔΔᐃⵠ].id = Dr.ᐃΔΔᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠΔⵠⲆΔ], Dn);
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆΔⵠ].id = Dr.ⲆᐃⲆΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔᐃⵠⵠⵠ], Mo);
    this.ⲆᐃⲆ[Dr.ᐃᐃⲆᐃⵠ].id = Dr.ᐃᐃⲆᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔΔⵠᐃⵠΔ], Vl);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⲆⵠ].id = Dr.ᐃᐃⵠⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆⵠⵠⲆΔ], Ik);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠᐃ].id = Dr.ⲆΔᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔᐃΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔᐃΔⵠ].id = Dr.ⵠΔᐃΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠⵠᐃⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⵠᐃ].id = Dr.ᐃᐃΔⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃΔⵠⲆ], jg);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠⵠ].id = Dr.ⲆΔⵠⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠΔⵠΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⵠⲆᐃⲆᐃ], Fh);
    this.ⲆᐃⲆ[Dr.ⵠΔⵠΔΔ].id = Dr.ⵠΔⵠΔΔ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃΔΔⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆⵠ].id = Dr.ⵠⲆᐃⲆⵠ;
    this.ⲆᐃⲆ[Dr.ΔⵠΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠⵠⵠᐃᐃ], jg);
    this.ⲆᐃⲆ[Dr.ΔⵠΔΔᐃ].id = Dr.ΔⵠΔΔᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⲆΔⵠΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⵠ].id = Dr.ⲆΔᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⵠ].info.Ⲇⵠ[ij] = this.ⲆᐃⲆ[Dr.ⲆΔᐃⵠⵠ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ᐃⲆᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠⵠΔⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆᐃⵠᐃ].id = Dr.ᐃⲆᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⲆΔᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⵠⵠ].id = Dr.ⵠᐃⲆⵠⵠ;
    this.ⲆᐃⲆ[Dr.Ⲇᐃᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆⲆⵠᐃᐃ], nh);
    this.ⲆᐃⲆ[Dr.Ⲇᐃᐃⵠⵠ].id = Dr.Ⲇᐃᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆᐃΔᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠⲆ].id = Dr.ⲆΔⵠⵠⲆ;
    this.ⲆᐃⲆ[Dr.ΔⵠᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⵠⲆᐃΔΔ], jg);
    this.ⲆᐃⲆ[Dr.ΔⵠᐃΔᐃ].id = Dr.ΔⵠᐃΔᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃΔᐃΔ], Vl);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔᐃⵠ].id = Dr.ᐃⵠΔᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔⲆᐃΔΔ], vo);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⲆ].id = Dr.ⵠⲆⲆⵠⲆ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃⵠⲆⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠΔⲆ].id = Dr.ⲆⵠⵠΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠΔⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆⵠⵠΔⲆ].info.Ⲇⵠ[Jt];
    this.ⲆᐃⲆ[Dr.ΔⲆᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⵠΔⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ΔⲆᐃΔᐃ].id = Dr.ΔⲆᐃΔᐃ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⵠⲆΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆᐃ].id = Dr.ΔᐃᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆᐃ].info.Ⲇⵠ[Ok] = this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆᐃ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ΔΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃⵠΔᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔΔⲆᐃᐃ].id = Dr.ΔΔⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔⲆΔΔⵠ], vo);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃΔΔ].id = Dr.ΔᐃᐃΔΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⲆΔΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆΔ].id = Dr.ᐃᐃΔⲆΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆΔ].info.Ⲇⵠ[_l] = this.ⲆᐃⲆ[Dr.ᐃᐃΔⲆΔ].info.Ⲇⵠ[Kr];
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠΔⲆᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⵠⵠ].id = Dr.ᐃⲆΔⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠΔΔᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃᐃⵠ].id = Dr.ⵠⲆᐃᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⲆⵠⵠᐃᐃ], Gg);
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆΔ].id = Dr.ⵠΔⲆⲆΔ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠᐃⵠⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆⲆ].id = Dr.ΔᐃᐃⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃⵠΔΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃⵠⲆ].id = Dr.ⲆᐃᐃⵠⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆᐃⲆⲆᐃ], B);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⲆᐃ].id = Dr.ᐃᐃⵠⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔᐃΔⲆΔ], Fh);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆⲆ].id = Dr.ⵠⵠⵠⲆⲆ;
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠΔᐃᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.Ⲇⵠᐃⵠⵠ].id = Dr.Ⲇⵠᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆᐃⵠᐃⲆᐃ], Vl);
    this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆΔ].id = Dr.ΔⲆᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ΔⲆᐃⲆΔ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔⵠᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆᐃ].id = Dr.ⵠΔⲆⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆᐃ].info.Ⲇⵠ[Uh] = this.ⲆᐃⲆ[Dr.ⵠΔⲆⲆᐃ].info.Ⲇⵠ[ko];
    this.ⲆᐃⲆ[Dr.ΔⵠΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃᐃᐃⵠΔ], 3);
    this.ⲆᐃⲆ[Dr.ΔⵠΔΔⲆ].id = Dr.ΔⵠΔΔⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔᐃᐃΔⲆ], ta);
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠᐃⲆ].id = Dr.ⲆᐃⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠᐃⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆᐃⵠᐃⲆ].info.Ⲇⵠ[Ol];
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠᐃΔⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠⵠᐃ].id = Dr.ⵠⲆⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⵠⲆⵠⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⵠΔ].id = Dr.ᐃⵠⲆⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠΔⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⲆⲆΔⵠᐃ], Kk);
    this.ⲆᐃⲆ[Dr.ⵠΔⵠᐃⵠ].id = Dr.ⵠΔⵠᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⵠΔΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔⵠⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔΔⲆΔ].id = Dr.ⵠΔΔⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⲆⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃᐃ].id = Dr.ⵠᐃᐃᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃᐃ].info.Ⲇⵠ[ij] = this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃᐃ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⵠⵠᐃⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠΔᐃᐃΔ], cl);
    this.ⲆᐃⲆ[Dr.ⵠⵠᐃⵠΔ].id = Dr.ⵠⵠᐃⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠᐃⵠΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⵠⵠᐃⵠΔ].info.Ⲇⵠ[Ol];
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ], Kk);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆΔ].id = Dr.ΔᐃᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⵠ].id = Dr.ⵠⲆⲆⵠⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆᐃⵠΔⲆᐃ], nh);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ].id = Dr.ᐃᐃⵠⵠⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ].info.Ⲇⵠ[_s];
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⲆᐃΔⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔᐃ].id = Dr.ⲆᐃⵠΔᐃ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔᐃ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔᐃ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ΔⵠᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆΔᐃᐃⵠ], fa);
    this.ⲆᐃⲆ[Dr.ΔⵠᐃⲆᐃ].id = Dr.ΔⵠᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔⵠⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠᐃⵠ].id = Dr.ᐃⲆⵠᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠᐃⵠ].info.Ⲇⵠ[$r] = this.ⲆᐃⲆ[Dr.ᐃⲆⵠᐃⵠ].info.Ⲇⵠ[yk];
    this.ⲆᐃⲆ[Dr.ΔⵠΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆⵠᐃᐃᐃ], fa);
    this.ⲆᐃⲆ[Dr.ΔⵠΔᐃΔ].id = Dr.ΔⵠΔᐃΔ;
    this.ⲆᐃⲆ[Dr.ΔⵠΔᐃΔ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ΔⵠΔᐃΔ].info.Ⲇⵠ[yk];
    this.ⲆᐃⲆ[Dr.ΔⲆΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔⲆΔᐃⵠ].id = Dr.ΔⲆΔᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⲆⲆΔΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆΔΔᐃᐃ], Mo);
    this.ⲆᐃⲆ[Dr.ⲆⲆΔΔⵠ].id = Dr.ⲆⲆΔΔⵠ;
    this.ⲆᐃⲆ[Dr.ⲆⲆΔΔⵠ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆⲆΔΔⵠ].info.Ⲇⵠ[0];
    this.ⲆᐃⲆ[Dr.ⵠⵠΔΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃΔⲆⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠΔΔⵠ].id = Dr.ⵠⵠΔΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃΔⲆⵠᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⲆᐃ].id = Dr.ᐃᐃᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠᐃⲆᐃⲆⵠ], sn);
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⵠΔ].id = Dr.ᐃΔᐃⵠΔ;
    this.ⲆᐃⲆ[Dr.ΔᐃⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⲆΔⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃⵠᐃⲆ].id = Dr.ΔᐃⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆⵠⲆᐃΔ], jg);
    this.ⲆᐃⲆ[Dr.ⵠᐃᐃᐃⲆ].id = Dr.ⵠᐃᐃᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆⲆᐃΔⵠ], Vl);
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆⲆⵠ].id = Dr.ⵠⵠⲆⲆⵠ;
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃΔⲆⲆⵠⲆ], Dn);
    this.ⲆᐃⲆ[Dr.ᐃΔᐃⵠⵠ].id = Dr.ᐃΔᐃⵠⵠ;
    this.ⲆᐃⲆ[Dr.Ⲇᐃⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃΔⲆΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.Ⲇᐃⵠⵠᐃ].id = Dr.Ⲇᐃⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆᐃⵠⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠᐃᐃⵠ].id = Dr.ⵠⵠᐃᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃΔΔΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆⲆΔⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔΔΔΔ].id = Dr.ᐃΔΔΔΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⵠⲆΔⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠΔΔ].id = Dr.ᐃᐃⵠΔΔ;
    this.ⲆᐃⲆ[Dr.ⲆΔⲆΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆΔⲆᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⲆΔᐃ].id = Dr.ⲆΔⲆΔᐃ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔᐃΔᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⵠⵠ].id = Dr.ⵠᐃⵠⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠΔⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⲆⲆᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔⵠⲆΔ].id = Dr.ⵠΔⵠⲆΔ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆᐃⵠΔᐃᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⵠⵠⲆⵠ].id = Dr.ⲆⵠⵠⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃᐃⵠΔᐃ], _i);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⲆΔ].id = Dr.ⲆΔⵠⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠΔⵠⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆᐃ].id = Dr.ⵠᐃⵠⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔᐃᐃᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆΔⵠ].id = Dr.ⲆⵠⲆΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃΔⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⲆⵠⵠᐃⲆ], Ea);
    this.ⲆᐃⲆ[Dr.ᐃΔⲆⲆᐃ].id = Dr.ᐃΔⲆⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠΔⵠΔΔ], sn);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠᐃⲆ].id = Dr.ⲆΔⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ΔΔΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃⲆⵠⲆᐃ], B);
    this.ⲆᐃⲆ[Dr.ΔΔΔᐃⲆ].id = Dr.ΔΔΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆᐃΔⲆⵠᐃ], Kk);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆΔᐃ].id = Dr.ΔⵠⲆΔᐃ;
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆΔᐃⲆΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃᐃ].id = Dr.ᐃΔⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔᐃⲆᐃΔ], Za);
    this.ⲆᐃⲆ[Dr.ⵠᐃⵠⲆⵠ].id = Dr.ⵠᐃⵠⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔΔⲆΔⲆ], Vl);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆΔ].id = Dr.ⵠⵠⵠⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠΔΔⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔⲆⵠΔΔ], sn);
    this.ⲆᐃⲆ[Dr.ⵠΔΔⵠⲆ].id = Dr.ⵠΔΔⵠⲆ;
    this.ⲆᐃⲆ[Dr.Δⵠⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠⵠΔⲆⲆ], Gg);
    this.ⲆᐃⲆ[Dr.Δⵠⵠᐃᐃ].id = Dr.Δⵠⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠΔΔΔΔΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃⲆᐃᐃ].id = Dr.ⲆᐃⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆⲆΔᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆⲆ].id = Dr.ᐃⲆⵠⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆⲆⲆᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆᐃ].id = Dr.ⵠⲆᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆᐃⵠⲆⵠ], B);
    this.ⲆᐃⲆ[Dr.ᐃⲆΔⵠΔ].id = Dr.ᐃⲆΔⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃⲆⲆⵠᐃ], Ik);
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆⵠΔ].id = Dr.ⵠⵠⲆⵠΔ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠΔⵠⲆⵠ], B);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⲆⲆ].id = Dr.ᐃᐃᐃⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⵠΔⲆᐃ], B);
    this.ⲆᐃⲆ[Dr.ⵠᐃⲆⵠᐃ].id = Dr.ⵠᐃⲆⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃΔΔΔⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃᐃΔᐃ].id = Dr.ⲆᐃᐃΔᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠᐃⲆⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆᐃⵠ].id = Dr.ᐃⵠⲆᐃⵠ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃⲆⵠᐃΔ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃΔⲆⵠ].id = Dr.ⲆᐃΔⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔᐃΔΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠⲆᐃ].id = Dr.ⵠⵠⵠⲆᐃ;
    this.ⵠⵠⵠ = [];
    this.ⵠⵠⵠ[Xa.ⵠⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⲆΔΔⵠ], nh);
    this.ⵠⵠⵠ[Xa.ⵠⲆΔᐃΔ].id = Xa.ⵠⲆΔᐃΔ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠΔᐃᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠΔⵠ].id = Xa.ⵠⵠⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ⵠᐃΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃΔΔⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⵠᐃΔΔᐃ].id = Xa.ⵠᐃΔΔᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆΔᐃΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⲆᐃ].id = Xa.ᐃⵠΔⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⲆⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃⲆΔⲆᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⲆⲆⲆᐃ].id = Xa.ᐃⲆⲆⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⲆΔᐃⲆⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃΔⲆᐃᐃ].id = Xa.ᐃΔⲆᐃᐃ;
    this.ⵠⵠⵠ[Xa.ΔⵠᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆⲆᐃⲆΔ], Fh);
    this.ⵠⵠⵠ[Xa.ΔⵠᐃᐃΔ].id = Xa.ΔⵠᐃᐃΔ;
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃΔΔΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠΔⲆ].id = Xa.ᐃⲆⵠΔⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆΔⵠⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔᐃᐃᐃ].id = Xa.ⲆΔᐃᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆΔᐃⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⲆᐃ].id = Xa.ⲆΔⵠⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⲆᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃΔΔⵠⵠⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⲆᐃΔⲆ].id = Xa.ᐃⲆᐃΔⲆ;
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆⲆⵠⵠⲆ], Vl);
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⵠΔ].id = Xa.ΔᐃⲆⵠΔ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⲆⲆⲆᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔᐃⲆ].id = Xa.ᐃⵠΔᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔⲆⲆᐃΔ], _i);
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃⲆ].id = Xa.ᐃΔⵠᐃⲆ;
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆⲆⵠⵠⵠ], 3);
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃⵠᐃ].id = Xa.Ⲇⵠᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⲆᐃΔᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⵠⵠⲆⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆᐃΔᐃᐃ].id = Xa.ⲆᐃΔᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⲆⲆΔⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔⲆⵠⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⲆΔⵠⵠ].id = Xa.ⲆⲆΔⵠⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠⲆⲆᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠΔⵠ].id = Xa.ᐃⵠⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ⲆⲆᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔᐃⲆΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⲆᐃⲆΔ].id = Xa.ⲆⲆᐃⲆΔ;
    this.ⵠⵠⵠ[Xa.ⵠⵠΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃⵠⲆΔⲆ], nh);
    this.ⵠⵠⵠ[Xa.ⵠⵠΔⲆⲆ].id = Xa.ⵠⵠΔⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔΔⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃΔᐃΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔΔⲆⵠ].id = Xa.ⲆΔΔⲆⵠ;
    this.ⵠⵠⵠ[Xa.Ⲇᐃⵠⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠᐃⵠΔⲆ], Fh);
    this.ⵠⵠⵠ[Xa.Ⲇᐃⵠⵠⵠ].id = Xa.Ⲇᐃⵠⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⲆΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃⵠⵠⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔⲆᐃᐃ].id = Xa.ⲆΔⲆᐃᐃ;
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠᐃⲆⲆᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃΔⵠ].id = Xa.ᐃᐃᐃΔⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⵠΔᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⵠ].id = Xa.ᐃⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⵠΔΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠⵠᐃ].id = Xa.ᐃⵠⵠⵠᐃ;
    this.ⵠⵠⵠ[Xa.ΔΔΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⲆᐃⵠΔⲆ], cl);
    this.ⵠⵠⵠ[Xa.ΔΔΔΔⲆ].id = Xa.ΔΔΔΔⲆ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃΔΔᐃ], lk);
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆᐃⲆ].id = Xa.ᐃᐃⲆᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⲆⲆⲆⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆΔ].id = Xa.ᐃⵠᐃⲆΔ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⵠΔΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠⵠᐃ].id = Xa.ᐃⵠⵠⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⵠⵠᐃⲆΔ], Ea);
    this.ⵠⵠⵠ[Xa.ⵠΔᐃⵠⵠ].id = Xa.ⵠΔᐃⵠⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆΔⲆⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆⲆ].id = Xa.ᐃⲆⵠⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠⵠⵠΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃᐃΔ].id = Xa.ⵠⲆᐃᐃΔ;
    this.ⵠⵠⵠ[Xa.ΔⲆⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆΔΔΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆⲆⵠⲆ].id = Xa.ΔⲆⲆⵠⲆ;
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⵠⵠⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠⵠ].id = Xa.ΔⵠⲆⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔΔΔᐃᐃ], nh);
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⲆᐃ].id = Xa.ⵠⲆᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⲆⵠᐃᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃⲆⲆⲆᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⵠᐃᐃⲆ].id = Xa.ⲆⵠᐃᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃᐃᐃⵠΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠΔᐃ].id = Xa.ᐃⵠⵠΔᐃ;
    this.ⵠⵠⵠ[Xa.ΔⵠⵠᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⵠⲆⲆⲆ], lk);
    this.ⵠⵠⵠ[Xa.ΔⵠⵠᐃΔ].id = Xa.ΔⵠⵠᐃΔ;
    this.ⵠⵠⵠ[Xa.ΔⵠΔⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⲆⲆⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ΔⵠΔⵠⲆ].id = Xa.ΔⵠΔⵠⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔᐃᐃΔΔ], Ik);
    this.ⵠⵠⵠ[Xa.ⵠⲆΔΔⲆ].id = Xa.ⵠⲆΔΔⲆ;
    this.ⵠⵠⵠ[Xa.ⲆᐃⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔⵠⲆΔᐃ], lk);
    this.ⵠⵠⵠ[Xa.ⲆᐃⲆⲆⲆ].id = Xa.ⲆᐃⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆΔᐃⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⲆⲆ].id = Xa.ⵠᐃⵠⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⵠΔᐃᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃⲆᐃ].id = Xa.ⵠᐃᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔⵠⲆⲆⵠ], cl);
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠΔᐃ].id = Xa.ⵠⲆⵠΔᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠΔΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃⲆⵠΔⵠ], Ea);
    this.ⵠⵠⵠ[Xa.ⵠⵠΔΔΔ].id = Xa.ⵠⵠΔΔΔ;
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆⲆᐃⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃΔⲆ].id = Xa.ᐃᐃᐃΔⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃⲆⲆΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⵠⲆ].id = Xa.ⲆΔᐃⵠⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠⲆⲆⵠΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⵠᐃⵠ].id = Xa.ᐃⵠⵠᐃⵠ;
    this.ⵠⵠⵠ[Xa.ᐃΔΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃΔᐃᐃΔ], Za);
    this.ⵠⵠⵠ[Xa.ᐃΔΔⲆᐃ].id = Xa.ᐃΔΔⲆᐃ;
    this.ⵠⵠⵠ[Xa.ΔⲆᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⲆⵠⵠΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆᐃᐃᐃ].id = Xa.ΔⲆᐃᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⵠⵠⲆⵠ], jg);
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⲆΔ].id = Xa.ⵠⲆⲆⲆΔ;
    this.ⵠⵠⵠ[Xa.ᐃΔⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⲆΔΔΔ], nh);
    this.ⵠⵠⵠ[Xa.ᐃΔⲆⲆⲆ].id = Xa.ᐃΔⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃΔⵠᐃᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⲆⲆ].id = Xa.ΔᐃⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃⲆΔⵠⲆ], B);
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⲆⲆ].id = Xa.ᐃⵠⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔΔⲆⲆⵠ], Gg);
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆⵠⲆ].id = Xa.ᐃᐃⲆⵠⲆ;
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔⲆᐃᐃΔ], Fh);
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⲆΔ].id = Xa.ᐃΔᐃⲆΔ;
    this.ⵠⵠⵠ[Xa.ΔⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆⵠᐃΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆΔᐃΔ].id = Xa.ΔⲆΔᐃΔ;
    this.ⵠⵠⵠ[Xa.ⵠΔⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔⲆⲆⲆΔ], cl);
    this.ⵠⵠⵠ[Xa.ⵠΔⵠⵠΔ].id = Xa.ⵠΔⵠⵠΔ;
    this.ⵠⵠⵠ[Xa.ΔΔⲆΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⵠⲆΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔⲆΔΔ].id = Xa.ΔΔⲆΔΔ;
    this.ⵠⵠⵠ[Xa.ⲆᐃΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃⲆᐃᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⲆᐃΔΔᐃ].id = Xa.ⲆᐃΔΔᐃ;
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠΔⵠΔ], fa);
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃᐃΔ].id = Xa.ⵠᐃᐃᐃΔ;
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠΔᐃⵠⵠ], Fh);
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃᐃⵠ].id = Xa.Ⲇⵠᐃᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠΔⲆⲆⵠ], sn);
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⲆᐃ].id = Xa.ⵠᐃⲆⲆᐃ;
    this.ⵠⵠⵠ[Xa.ΔⵠⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⵠΔΔⵠⵠ], 3);
    this.ⵠⵠⵠ[Xa.ΔⵠⲆᐃⲆ].id = Xa.ΔⵠⲆᐃⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆⲆΔᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔⲆⲆⲆ].id = Xa.ⲆΔⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔᐃⵠⲆΔ], Ea);
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆⲆ].id = Xa.ᐃⵠᐃⲆⲆ;
    this.ⵠⵠⵠ[Xa.ΔᐃΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠⲆᐃⵠΔ], vg);
    this.ⵠⵠⵠ[Xa.ΔᐃΔⲆⲆ].id = Xa.ΔᐃΔⲆⲆ;
    this.ⵠⵠⵠ[Xa.ΔΔΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔⲆⲆⵠⵠ], Vl);
    this.ⵠⵠⵠ[Xa.ΔΔΔᐃⵠ].id = Xa.ΔΔΔᐃⵠ;
    this.ⵠⵠⵠ[Xa.ᐃΔᐃΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⵠⲆΔⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃΔᐃΔΔ].id = Xa.ᐃΔᐃΔΔ;
    this.ⵠⵠⵠ[Xa.ΔΔᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⲆⵠΔᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔᐃⲆΔ].id = Xa.ΔΔᐃⲆΔ;
    this.ⵠⵠⵠ[Xa.ⲆⲆⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔΔΔⵠⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⲆⲆᐃⲆ].id = Xa.ⲆⲆⲆᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⵠⲆⲆⵠΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃⲆᐃ].id = Xa.ᐃⵠᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⲆⵠⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔⵠⵠⵠⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⵠⵠⲆⲆ].id = Xa.ⲆⵠⵠⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔΔⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔᐃᐃⲆᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔΔⵠⲆ].id = Xa.ⲆΔΔⵠⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⵠΔᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔⵠ].id = Xa.ᐃⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆᐃᐃΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠΔⵠ].id = Xa.ⲆΔⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃΔΔΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠⵠΔ].id = Xa.ⵠⵠⵠⵠΔ;
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔᐃΔⲆᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔᐃⲆⲆⵠ].id = Xa.ΔᐃⲆⲆⵠ;
    this.ⵠⵠⵠ[Xa.ΔⲆⵠΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔᐃᐃⵠⵠ], Gg);
    this.ⵠⵠⵠ[Xa.ΔⲆⵠΔⲆ].id = Xa.ΔⲆⵠΔⲆ;
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆᐃⲆΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃΔⲆ].id = Xa.ⲆᐃᐃΔⲆ;
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃᐃⲆᐃᐃ], Kk);
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃᐃⲆ].id = Xa.ⲆᐃᐃᐃⲆ;
    this.ⵠⵠⵠ[Xa.ΔᐃᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⲆᐃⵠΔ], 3);
    this.ⵠⵠⵠ[Xa.ΔᐃᐃΔⲆ].id = Xa.ΔᐃᐃΔⲆ;
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆΔⵠⵠⲆⲆ], Vl);
    this.ⵠⵠⵠ[Xa.ⵠᐃᐃΔᐃ].id = Xa.ⵠᐃᐃΔᐃ;
    this.ⵠⵠⵠ[Xa.Ⲇᐃᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠⵠⵠΔⲆ], Ea);
    this.ⵠⵠⵠ[Xa.Ⲇᐃᐃⵠᐃ].id = Xa.Ⲇᐃᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔⲆΔΔⵠ], _i);
    this.ⵠⵠⵠ[Xa.ⵠΔᐃⵠᐃ].id = Xa.ⵠΔᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ΔⲆᐃⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠᐃΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆᐃⲆⵠ].id = Xa.ΔⲆᐃⲆⵠ;
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃΔΔⵠⵠ], jg);
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃᐃⵠ].id = Xa.ᐃᐃᐃᐃⵠ;
    this.ⵠⵠⵠ[Xa.ΔΔⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆᐃΔⲆᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔⵠᐃⲆ].id = Xa.ΔΔⵠᐃⲆ;
    this.ⵠⵠⵠ[Xa.ΔΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠΔⲆΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔᐃⵠⵠ].id = Xa.ΔΔᐃⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⲆⲆᐃⵠ], Mo);
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⵠΔ].id = Xa.ⵠᐃⵠⵠΔ;
    this.ⵠⵠⵠ[Xa.ΔⲆⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⲆΔᐃᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆⲆⲆⲆ].id = Xa.ΔⲆⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆⲆΔΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⲆⲆ].id = Xa.ⲆΔᐃⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃⲆᐃΔᐃ], ta);
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠΔ].id = Xa.ⵠⲆⲆⵠΔ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆᐃΔⵠⵠ], vg);
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆΔΔ].id = Xa.ⵠⵠⲆΔΔ;
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆᐃΔᐃⲆ], Kk);
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃᐃΔ].id = Xa.ᐃⵠᐃᐃΔ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠᐃⲆⲆⲆ], Dn);
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⲆΔ].id = Xa.ⵠᐃⲆⲆΔ;
    this.ⵠⵠⵠ[Xa.ᐃⲆΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠⵠⵠⲆᐃ], Ea);
    this.ⵠⵠⵠ[Xa.ᐃⲆΔⲆⲆ].id = Xa.ᐃⲆΔⲆⲆ;
    this.ⵠⵠⵠ[Xa.ᐃΔΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔⲆᐃⲆᐃ], Ik);
    this.ⵠⵠⵠ[Xa.ᐃΔΔᐃⵠ].id = Xa.ᐃΔΔᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⲆᐃⲆΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆᐃⵠΔᐃ], Dn);
    this.ⵠⵠⵠ[Xa.ⲆᐃⲆΔⵠ].id = Xa.ⲆᐃⲆΔⵠ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃΔⵠΔΔ], Dn);
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆᐃⵠ].id = Xa.ᐃᐃⲆᐃⵠ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠⲆΔⵠΔ], B);
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠⲆⵠ].id = Xa.ᐃᐃⵠⲆⵠ;
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃΔᐃⲆⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔᐃⵠᐃ].id = Xa.ⲆΔᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔᐃΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠᐃⲆⵠᐃ], cl);
    this.ⵠⵠⵠ[Xa.ⵠΔᐃΔⵠ].id = Xa.ⵠΔᐃΔⵠ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔⵠⲆⲆᐃ], _i);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠⵠ].id = Xa.ⲆΔⵠⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⵠΔⵠΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔᐃΔᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⵠΔⵠΔΔ].id = Xa.ⵠΔⵠΔΔ;
    this.ⵠⵠⵠ[Xa.ᐃᐃΔⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆᐃΔᐃᐃ], jg);
    this.ⵠⵠⵠ[Xa.ᐃᐃΔⵠᐃ].id = Xa.ᐃᐃΔⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆᐃⲆΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⵠⵠ].id = Xa.ⵠᐃⲆⵠⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⲆᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃᐃᐃⵠᐃ], _i);
    this.ⵠⵠⵠ[Xa.ᐃⲆᐃⵠᐃ].id = Xa.ᐃⲆᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆⵠⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃᐃᐃⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃⲆⵠⲆⲆΔ].id = Xa.ᐃᐃⲆⵠⲆⲆΔ;
    this.ⵠⵠⵠ[Xa.ΔΔᐃᐃΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃᐃᐃᐃⵠᐃ], Gg);
    this.ⵠⵠⵠ[Xa.ΔΔᐃᐃΔᐃⵠ].id = Xa.ΔΔᐃᐃΔᐃⵠ;
    this.ⵠⵠⵠ[Xa.Ⲇᐃᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃᐃᐃΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.Ⲇᐃᐃⵠⵠ].id = Xa.Ⲇᐃᐃⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃΔᐃᐃⲆ], Kk);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠⲆ].id = Xa.ⲆΔⵠⵠⲆ;
    this.ⵠⵠⵠ[Xa.ΔⵠᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔΔΔΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ΔⵠᐃΔᐃ].id = Xa.ΔⵠᐃΔᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⲆⲆⲆΔⲆ], sn);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔᐃⵠ].id = Xa.ᐃⵠΔᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⲆᐃⵠⵠ], fa);
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠⲆ].id = Xa.ⵠⲆⲆⵠⲆ;
    this.ⵠⵠⵠ[Xa.ΔⲆᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠΔⲆᐃΔ], 3);
    this.ⵠⵠⵠ[Xa.ΔⲆᐃΔᐃ].id = Xa.ΔⲆᐃΔᐃ;
    this.ⵠⵠⵠ[Xa.ΔΔⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠᐃΔⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔⲆᐃᐃ].id = Xa.ΔΔⲆᐃᐃ;
    this.ⵠⵠⵠ[Xa.ΔᐃᐃΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃⵠΔⵠΔ], Ea);
    this.ⵠⵠⵠ[Xa.ΔᐃᐃΔΔ].id = Xa.ΔᐃᐃΔΔ;
    this.ⵠⵠⵠ[Xa.ᐃⲆΔⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆⵠᐃⲆⲆᐃ], Fh);
    this.ⵠⵠⵠ[Xa.ᐃⲆΔⵠⵠ].id = Xa.ᐃⲆΔⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠᐃⲆⵠΔⵠ], Za);
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃᐃⵠ].id = Xa.ⵠⲆᐃᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⵠΔⲆⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔΔⲆⲆ], Ik);
    this.ⵠⵠⵠ[Xa.ⵠΔⲆⲆΔ].id = Xa.ⵠΔⲆⲆΔ;
    this.ⵠⵠⵠ[Xa.ΔᐃᐃⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⲆⵠᐃΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔᐃᐃⲆⲆ].id = Xa.ΔᐃᐃⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔⲆⵠᐃⲆ], jg);
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃⵠⲆ].id = Xa.ⲆᐃᐃⵠⲆ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆΔᐃΔΔᐃ], ta);
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠⲆᐃ].id = Xa.ᐃᐃⵠⲆᐃ;
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃⲆᐃΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.Ⲇⵠᐃⵠⵠ].id = Xa.Ⲇⵠᐃⵠⵠ;
    this.ⵠⵠⵠ[Xa.ΔⵠΔΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃΔᐃᐃⲆ], lk);
    this.ⵠⵠⵠ[Xa.ΔⵠΔΔⲆ].id = Xa.ΔⵠΔΔⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃΔᐃⵠᐃ], Vl);
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠⵠᐃ].id = Xa.ⵠⲆⵠⵠᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆⵠΔᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⵠΔ].id = Xa.ᐃⵠⲆⵠΔ;
    this.ⵠⵠⵠ[Xa.ⵠΔⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆᐃⲆⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ⵠΔⵠᐃⵠ].id = Xa.ⵠΔⵠᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⵠΔΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔⵠⵠⵠ], jg);
    this.ⵠⵠⵠ[Xa.ⵠΔΔⲆΔ].id = Xa.ⵠΔΔⲆΔ;
    this.ⵠⵠⵠ[Xa.ΔⵠᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔⲆΔⵠⲆ], Mo);
    this.ⵠⵠⵠ[Xa.ΔⵠᐃⲆᐃ].id = Xa.ΔⵠᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ΔⲆΔᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⵠⲆᐃΔΔ], Gg);
    this.ⵠⵠⵠ[Xa.ΔⲆΔᐃⵠ].id = Xa.ΔⲆΔᐃⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⵠΔΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠⲆΔΔΔ], Mo);
    this.ⵠⵠⵠ[Xa.ⵠⵠΔΔⵠ].id = Xa.ⵠⵠΔΔⵠ;
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆᐃⵠⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃⲆᐃ].id = Xa.ᐃᐃᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃⵠⵠΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⵠΔ].id = Xa.ᐃΔᐃⵠΔ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔᐃⲆΔᐃ], Fh);
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆⲆⵠ].id = Xa.ⵠⵠⲆⲆⵠ;
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⲆⲆΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃΔᐃⵠⵠ].id = Xa.ᐃΔᐃⵠⵠ;
    this.ⵠⵠⵠ[Xa.Ⲇᐃⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠⲆΔᐃⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.Ⲇᐃⵠⵠᐃ].id = Xa.Ⲇᐃⵠⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠᐃᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃⲆΔΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠᐃᐃⵠ].id = Xa.ⵠⵠᐃᐃⵠ;
    this.ⵠⵠⵠ[Xa.ᐃΔΔΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⵠⲆᐃⲆⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃΔΔΔΔ].id = Xa.ᐃΔΔΔΔ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠΔΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⵠᐃΔⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠΔΔ].id = Xa.ᐃᐃⵠΔΔ;
    this.ⵠⵠⵠ[Xa.ⲆΔⲆΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆⲆⵠⲆΔ], Ik);
    this.ⵠⵠⵠ[Xa.ⲆΔⲆΔᐃ].id = Xa.ⲆΔⲆΔᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃΔΔᐃᐃ], ta);
    this.ⵠⵠⵠ[Xa.ⵠΔⵠⲆΔ].id = Xa.ⵠΔⵠⲆΔ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆΔⲆⲆΔ], Za);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⲆΔ].id = Xa.ⲆΔⵠⲆΔ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔΔⵠᐃΔ], Fh);
    this.ⵠⵠⵠ[Xa.ⵠᐃⵠⲆᐃ].id = Xa.ⵠᐃⵠⲆᐃ;
    this.ⵠⵠⵠ[Xa.ΔΔΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆΔᐃⵠⲆⵠ], 3);
    this.ⵠⵠⵠ[Xa.ΔΔΔᐃⲆ].id = Xa.ΔΔΔᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃΔⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃΔΔⵠⵠⵠ], sn);
    this.ⵠⵠⵠ[Xa.ᐃΔⲆⲆᐃ].id = Xa.ᐃΔⲆⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃᐃᐃᐃⲆ], Vl);
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃᐃ].id = Xa.ᐃΔⵠᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⵠⲆᐃⵠⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠⲆΔ].id = Xa.ⵠⵠⵠⲆΔ;
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠⲆΔⲆⲆΔ], Fh);
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆⲆ].id = Xa.ᐃⲆⵠⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔΔΔᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⲆᐃ].id = Xa.ⵠⲆᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⵠⵠⵠⲆⲆ], ta);
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆⵠΔ].id = Xa.ⵠⵠⲆⵠΔ;
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔⵠⵠΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⵠᐃⲆⵠᐃ].id = Xa.ⵠᐃⲆⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃⲆΔᐃΔ], ta);
    this.ⵠⵠⵠ[Xa.ⲆᐃᐃΔᐃ].id = Xa.ⲆᐃᐃΔᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔΔΔΔΔΔ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆⵠⲆᐃ].id = Dr.ᐃⲆⵠⲆᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔᐃΔⵠᐃ], Dn);
    this.ⲆᐃⲆ[Dr.ᐃⲆⵠⲆᐃ].id = Dr.ᐃⲆⵠⲆᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔⵠⲆΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⲆⵠⲆᐃ].id = Xa.ᐃⲆⵠⲆᐃ;
    this.ΔⵠΔ[Dr.ΔΔΔⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔⲆᐃⲆⵠⵠ], sn);
    this.ΔⵠΔ[Dr.ΔΔΔⲆᐃ].id = Dr.ΔΔΔⲆᐃ;
    this.ⲆᐃⲆ[Dr.ΔΔΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃⵠⵠⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ΔΔΔⲆᐃ].id = Dr.ΔΔΔⲆᐃ;
    this.ⵠⵠⵠ[Xa.ΔΔΔⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠᐃⵠⲆΔ], Vl);
    this.ⵠⵠⵠ[Xa.ΔΔΔⲆᐃ].id = Xa.ΔΔΔⲆᐃ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⵠⲆᐃⲆⲆ], Za);
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠΔ].id = Dr.ⲆΔⵠⵠΔ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔᐃᐃΔⲆⵠ], cl);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠΔ].id = Dr.ⲆΔⵠⵠΔ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠᐃⵠᐃΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠΔ].id = Xa.ⲆΔⵠⵠΔ;
    this.ΔⵠΔ[Dr.ⲆⵠⲆⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔΔΔᐃⲆ], Kk);
    this.ΔⵠΔ[Dr.ⲆⵠⲆⲆⲆ].id = Dr.ⲆⵠⲆⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠⵠΔᐃⵠ], Ea);
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆⲆⲆ].id = Dr.ⲆⵠⲆⲆⲆ;
    this.ⵠⵠⵠ[Xa.ⲆⵠⲆⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⲆᐃⵠᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⵠⲆⲆⲆ].id = Xa.ⲆⵠⲆⲆⲆ;
    this.ΔⵠΔ[Dr.ⲆᐃⵠΔΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⲆᐃᐃⲆΔ], Gg);
    this.ΔⵠΔ[Dr.ⲆᐃⵠΔΔⲆⲆ].id = Dr.ⲆᐃⵠΔΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⵠΔᐃⵠⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃⵠΔΔⲆⲆ].id = Dr.ⲆᐃⵠΔΔⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃᐃⲆⵠΔ], fa);
    this.ΔⵠΔ[Dr.ᐃᐃᐃᐃᐃ].id = Dr.ᐃᐃᐃᐃᐃ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔⵠΔΔΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃᐃᐃ].id = Dr.ᐃᐃᐃᐃᐃ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆᐃΔⲆⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠΔⲆⵠΔᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⲆᐃΔⲆⲆ].id = Dr.ⵠⲆⲆᐃΔⲆⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆᐃΔⲆⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠⵠΔⲆᐃ], ta);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆᐃΔⲆⲆ].id = Dr.ⵠⲆⲆᐃΔⲆⲆ;
    this.ΔⵠΔ[Dr.ᐃᐃᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔᐃⵠⲆⵠΔ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃᐃⵠᐃ].id = Dr.ᐃᐃᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔᐃⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃᐃⵠᐃ].id = Dr.ᐃᐃᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔⵠⲆᐃⵠ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃᐃⵠᐃ].id = Xa.ᐃᐃᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠᐃΔⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔᐃⵠⲆᐃΔ], ta);
    this.ΔⵠΔ[Dr.ᐃⵠᐃΔⲆ].id = Dr.ᐃⵠᐃΔⲆ;
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⵠᐃΔΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠᐃΔⲆ].id = Dr.ᐃⵠᐃΔⲆ;
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃΔⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⲆᐃⵠⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃⵠᐃΔⲆ].id = Xa.ᐃⵠᐃΔⲆ;
    this.ΔⵠΔ[Dr.ᐃⵠⲆⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⵠⲆᐃΔᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠⲆⵠⵠ].id = Dr.ᐃⵠⲆⵠⵠ;
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃⵠⲆⲆⲆ], Fh);
    this.ⲆᐃⲆ[Dr.ᐃⵠⲆⵠⵠ].id = Dr.ᐃⵠⲆⵠⵠ;
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔⵠⲆΔⲆ], fa);
    this.ⵠⵠⵠ[Xa.ᐃⵠⲆⵠⵠ].id = Xa.ᐃⵠⲆⵠⵠ;
    this.ΔⵠΔ[Dr.ⵠΔⲆⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⲆⵠⵠᐃΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠΔⲆⵠᐃ].id = Dr.ⵠΔⲆⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔⵠⵠⵠⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠΔⲆⵠᐃ].id = Dr.ⵠΔⲆⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔⲆⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠᐃⲆᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⵠΔⲆⵠᐃ].id = Xa.ⵠΔⲆⵠᐃ;
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔᐃⵠᐃΔⲆ], Mo);
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠΔ].id = Dr.ΔⵠⲆⵠΔ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠᐃⵠΔΔ], lk);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠΔ].id = Dr.ΔⵠⲆⵠΔ;
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃⵠᐃᐃⵠⵠ], cl);
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠΔ].id = Xa.ΔⵠⲆⵠΔ;
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆⵠΔⲆΔ], 3);
    this.ΔⵠΔ[Dr.ΔⵠⲆⵠⲆ].id = Dr.ΔⵠⲆⵠⲆ;
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆᐃᐃᐃⵠᐃ], fa);
    this.ⲆᐃⲆ[Dr.ΔⵠⲆⵠⲆ].id = Dr.ΔⵠⲆⵠⲆ;
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠⲆᐃⵠᐃ], 3);
    this.ⵠⵠⵠ[Xa.ΔⵠⲆⵠⲆ].id = Xa.ΔⵠⲆⵠⲆ;
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆΔⲆⲆⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⵠⵠᐃ].id = Dr.ⲆΔⵠⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆⵠⲆⵠΔ], Fh);
    this.ⲆᐃⲆ[Dr.ⲆΔⵠⵠᐃ].id = Dr.ⲆΔⵠⵠᐃ;
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆⵠⲆⲆᐃ], Za);
    this.ⵠⵠⵠ[Xa.ⲆΔⵠⵠᐃ].id = Xa.ⲆΔⵠⵠᐃ;
    this.ΔⵠΔ[Dr.ⲆⲆᐃⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⲆⵠⵠⵠⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆⲆᐃⲆᐃ].id = Dr.ⲆⲆᐃⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠᐃⵠⵠⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⲆᐃ].id = Dr.ⲆⲆᐃⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⲆⲆᐃⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⲆⵠⵠΔΔ], 3);
    this.ⵠⵠⵠ[Xa.ⲆⲆᐃⲆᐃ].id = Xa.ⲆⲆᐃⲆᐃ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠΔⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⵠᐃΔΔⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃⵠΔⵠ].id = Dr.ᐃᐃⵠΔⵠ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃⲆᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠΔⵠ].id = Dr.ᐃᐃⵠΔⵠ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠΔⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆⵠⲆⲆᐃ], vg);
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠΔⵠ].id = Xa.ᐃᐃⵠΔⵠ;
    this.ΔⵠΔ[Dr.ⲆⲆΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠΔᐃΔⲆ], vg);
    this.ΔⵠΔ[Dr.ⲆⲆΔᐃⲆ].id = Dr.ⲆⲆΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆⲆΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆΔᐃᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⲆΔᐃⲆ].id = Dr.ⲆⲆΔᐃⲆ;
    this.ⵠⵠⵠ[Xa.ⲆⲆΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃΔᐃⲆⲆΔ], vg);
    this.ⵠⵠⵠ[Xa.ⲆⲆΔᐃⲆ].id = Xa.ⲆⲆΔᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⵠⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⲆᐃⵠΔΔ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⲆᐃᐃ].id = Dr.ⵠⵠⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃᐃⲆⲆⵠ], Ea);
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆᐃᐃ].id = Dr.ⵠⵠⲆᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠᐃΔΔΔᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠⲆᐃᐃ].id = Xa.ⵠⵠⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ᐃⲆΔᐃΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔⵠᐃᐃΔ], 3);
    this.ΔⵠΔ[Dr.ᐃⲆΔᐃΔ].id = Dr.ᐃⲆΔᐃΔ;
    this.ⲆᐃⲆ[Dr.ᐃⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃⵠΔⵠΔΔ], Gg);
    this.ⲆᐃⲆ[Dr.ᐃⲆΔᐃΔ].id = Dr.ᐃⲆΔᐃΔ;
    this.ⵠⵠⵠ[Xa.ᐃⲆΔᐃΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠΔᐃⵠΔΔ], lk);
    this.ⵠⵠⵠ[Xa.ᐃⲆΔᐃΔ].id = Xa.ᐃⲆΔᐃΔ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆΔΔⲆΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⲆᐃᐃ].id = Dr.ⵠⲆⲆᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔᐃᐃⵠⲆⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆᐃᐃ].id = Dr.ⵠⲆⲆᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⵠⵠⵠᐃⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆᐃᐃ].id = Xa.ⵠⲆⲆᐃᐃ;
    this.ΔⵠΔ[Dr.ΔᐃΔⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⵠΔΔⲆᐃ], 3);
    this.ΔⵠΔ[Dr.ΔᐃΔⵠᐃ].id = Dr.ΔᐃΔⵠᐃ;
    this.ⲆᐃⲆ[Dr.ΔᐃΔⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃⲆⲆᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃΔⵠᐃ].id = Dr.ΔᐃΔⵠᐃ;
    this.ⵠⵠⵠ[Xa.ΔᐃΔⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⲆⲆΔⵠᐃ], nh);
    this.ⵠⵠⵠ[Xa.ΔᐃΔⵠᐃ].id = Xa.ΔᐃΔⵠᐃ;
    this.ΔⵠΔ[Dr.ⵠΔΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠⲆᐃⵠⵠΔ], Fh);
    this.ΔⵠΔ[Dr.ⵠΔΔᐃⲆ].id = Dr.ⵠΔΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠΔΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠⲆΔⵠⵠ], Ea);
    this.ⲆᐃⲆ[Dr.ⵠΔΔᐃⲆ].id = Dr.ⵠΔΔᐃⲆ;
    this.ⵠⵠⵠ[Xa.ⵠΔΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠᐃᐃⲆΔⵠ], 3);
    this.ⵠⵠⵠ[Xa.ⵠΔΔᐃⲆ].id = Xa.ⵠΔΔᐃⲆ;
    this.ΔⵠΔ[Dr.ⲆⵠⲆⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆⵠⵠᐃᐃⵠ], 3);
    this.ΔⵠΔ[Dr.ⲆⵠⲆⵠᐃ].id = Dr.ⲆⵠⲆⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠΔⲆⵠⲆ], Za);
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆⵠᐃ].id = Dr.ⲆⵠⲆⵠᐃ;
    this.ⲆᐃⲆ[Dr.ⲆⵠⲆⵠᐃ].info.Ⲇⵠ[2] = this.ⲆᐃⲆ[Dr.ⲆⵠⲆⵠᐃ].info.Ⲇⵠ[0];
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔⵠΔⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⲆᐃΔᐃⲆ].id = Dr.ⲆᐃΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃΔⵠΔⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ].id = Dr.ⲆᐃΔᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ].info.Ⲇⵠ[eh] = this.ⲆᐃⲆ[Dr.ⲆᐃΔᐃⲆ].info.Ⲇⵠ[Wh];
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔⵠᐃᐃᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆᐃⲆ].id = Dr.ⵠⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔⵠᐃᐃⲆⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆ].id = Dr.ⵠⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆ].info.Ⲇⵠ[kn] = this.ⲆᐃⲆ[Dr.ⵠⲆᐃⲆ].info.Ⲇⵠ[Lg];
    this.ΔⵠΔ[Dr.ⵠΔⲆΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ΔΔⲆΔⵠΔⲆ], 3);
    this.ΔⵠΔ[Dr.ⵠΔⲆΔᐃ].id = Dr.ⵠΔⲆΔᐃ;
    this.ⲆᐃⲆ[Dr.ⵠΔⲆΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆᐃᐃⲆⲆᐃ], lk);
    this.ⲆᐃⲆ[Dr.ⵠΔⲆΔᐃ].id = Dr.ⵠΔⲆΔᐃ;
    this.ⵠⵠⵠ[Xa.ⵠΔⲆΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃΔΔΔᐃᐃⲆ], 3);
    this.ⵠⵠⵠ[Xa.ⵠΔⲆΔᐃ].id = Xa.ⵠΔⲆΔᐃ;
    this.ΔⵠΔ[Dr.ᐃⵠΔΔᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠᐃᐃⲆⲆⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ᐃⵠΔΔᐃ].id = Dr.ᐃⵠΔΔᐃ;
    this.ⲆᐃⲆ[Dr.ᐃⵠΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠΔᐃΔΔ], 3);
    this.ⲆᐃⲆ[Dr.ᐃⵠΔΔᐃ].id = Dr.ᐃⵠΔΔᐃ;
    this.ⵠⵠⵠ[Xa.ᐃⵠΔΔᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔΔΔⲆⵠ], vo);
    this.ⵠⵠⵠ[Xa.ᐃⵠΔΔᐃ].id = Xa.ᐃⵠΔΔᐃ;
    this.ΔⵠΔ[Dr.ⵠⲆⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔⲆⲆΔᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⵠᐃⲆ].id = Dr.ⵠⲆⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆΔⲆⵠΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠᐃⲆ].id = Dr.ⵠⲆⵠᐃⲆ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃΔᐃⵠᐃⲆ], _i);
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠᐃⲆ].id = Xa.ⵠⲆⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆΔⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃΔΔᐃⵠⵠⲆ], vg);
    this.ΔⵠΔ[Dr.ⵠⲆΔⲆΔ].id = Dr.ⵠⲆΔⲆΔ;
    this.ⲆᐃⲆ[Dr.ⵠⲆΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠᐃᐃⵠᐃⲆᐃ], Gg);
    this.ⲆᐃⲆ[Dr.ⵠⲆΔⲆΔ].id = Dr.ⵠⲆΔⲆΔ;
    this.ⵠⵠⵠ[Xa.ⵠⲆΔⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔⵠΔΔⵠΔ], vo);
    this.ⵠⵠⵠ[Xa.ⵠⲆΔⲆΔ].id = Xa.ⵠⲆΔⲆΔ;
    this.ΔⵠΔ[Dr.ⵠⵠⵠᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆΔⲆⲆᐃⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⵠᐃᐃ].id = Dr.ⵠⵠⵠᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.Δⵠᐃⵠᐃᐃⵠ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⵠⵠᐃᐃ].id = Dr.ⵠⵠⵠᐃᐃ;
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔΔᐃΔⲆΔ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⵠⵠᐃᐃ].id = Xa.ⵠⵠⵠᐃᐃ;
    this.ΔⵠΔ[Dr.ⵠⲆⵠⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⲆΔⵠⵠⵠᐃ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⵠⲆⵠ].id = Dr.ⵠⲆⵠⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⲆⵠΔΔᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⵠⲆⵠ].id = Dr.ⵠⲆⵠⲆⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠΔΔᐃᐃ], 3);
    this.ⵠⵠⵠ[Xa.ⵠⲆⵠⲆⵠ].id = Xa.ⵠⲆⵠⲆⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⲆⵠΔᐃⲆ], Fh);
    this.ΔⵠΔ[Dr.ᐃᐃⵠᐃⲆ].id = Dr.ᐃᐃⵠᐃⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠⲆⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠᐃⲆ].id = Dr.ᐃᐃⵠᐃⲆ;
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔᐃᐃΔΔⲆ], 3);
    this.ⵠⵠⵠ[Xa.ᐃᐃⵠᐃⲆ].id = Xa.ᐃᐃⵠᐃⲆ;
    this.ΔⵠΔ[Dr.ⵠⲆᐃⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠΔⵠⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆᐃⵠΔ].id = Dr.ⵠⲆᐃⵠΔ;
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⲆᐃᐃⲆΔ], Kk);
    this.ⲆᐃⲆ[Dr.ⵠⲆᐃⵠΔ].id = Dr.ⵠⲆᐃⵠΔ;
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⲆⲆᐃΔ], Dn);
    this.ⵠⵠⵠ[Xa.ⵠⲆᐃⵠΔ].id = Xa.ⵠⲆᐃⵠΔ;
    this.ΔⵠΔ[Dr.Δᐃᐃᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠᐃᐃⲆⵠᐃ], Dn);
    this.ΔⵠΔ[Dr.Δᐃᐃᐃᐃ].id = Dr.Δᐃᐃᐃᐃ;
    this.ⲆᐃⲆ[Dr.Δᐃᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔΔᐃⵠⲆΔⲆ], 3);
    this.ⲆᐃⲆ[Dr.Δᐃᐃᐃᐃ].id = Dr.Δᐃᐃᐃᐃ;
    this.ⵠⵠⵠ[Xa.Δᐃᐃᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃⵠΔⲆⲆⲆ], 3);
    this.ⵠⵠⵠ[Xa.Δᐃᐃᐃᐃ].id = Xa.Δᐃᐃᐃᐃ;
    this.ΔⵠΔ[Dr.ΔΔᐃⵠᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠΔⲆⵠⲆᐃⲆ], Ea);
    this.ΔⵠΔ[Dr.ΔΔᐃⵠᐃ].id = Dr.ΔΔᐃⵠᐃ;
    this.ⲆᐃⲆ[Dr.ΔΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃᐃⵠᐃᐃΔⵠ], B);
    this.ⲆᐃⲆ[Dr.ΔΔᐃⵠᐃ].id = Dr.ΔΔᐃⵠᐃ;
    this.ⵠⵠⵠ[Xa.ΔΔᐃⵠᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔᐃᐃᐃᐃᐃⲆ], lk);
    this.ⵠⵠⵠ[Xa.ΔΔᐃⵠᐃ].id = Xa.ΔΔᐃⵠᐃ;
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠᐃᐃⲆΔ], 3);
    this.ΔⵠΔ[Dr.ᐃΔⵠᐃⵠ].id = Dr.ᐃΔⵠᐃⵠ;
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⵠᐃⲆⲆⲆΔ], Ik);
    this.ⲆᐃⲆ[Dr.ᐃΔⵠᐃⵠ].id = Dr.ᐃΔⵠᐃⵠ;
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⲆⵠⵠΔΔⵠ], fa);
    this.ⵠⵠⵠ[Xa.ᐃΔⵠᐃⵠ].id = Xa.ᐃΔⵠᐃⵠ;
    this.ΔⵠΔ[Dr.ⲆΔⲆⲆᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ᐃⲆᐃΔⵠⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆΔⲆⲆᐃ].id = Dr.ⲆΔⲆⲆᐃ;
    this.ⲆᐃⲆ[Dr.ⲆΔⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠΔⲆᐃⵠᐃ], 3);
    this.ⲆᐃⲆ[Dr.ⲆΔⲆⲆᐃ].id = Dr.ⲆΔⲆⲆᐃ;
    this.ⵠⵠⵠ[Xa.ⲆΔⲆⲆᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆᐃᐃⲆΔⲆⵠ], Vl);
    this.ⵠⵠⵠ[Xa.ⲆΔⲆⲆᐃ].id = Xa.ⲆΔⲆⲆᐃ;
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⲆⲆᐃⲆⲆ], 3);
    this.ΔⵠΔ[Dr.ΔᐃᐃⲆΔ].id = Dr.ΔᐃᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆΔΔΔⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ΔᐃᐃⲆΔ].id = Dr.ΔᐃᐃⲆΔ;
    this.ⵠⵠⵠ[Xa.ΔᐃᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔᐃΔⵠᐃⵠ], Vl);
    this.ⵠⵠⵠ[Xa.ΔᐃᐃⲆΔ].id = Xa.ΔᐃᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠⵠᐃᐃⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ⵠⲆⲆⵠⵠ].id = Dr.ⵠⲆⲆⵠⵠ;
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆⵠⲆⲆⲆⲆⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⵠⲆⲆⵠⵠ].id = Dr.ⵠⲆⲆⵠⵠ;
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⲆⵠᐃⵠΔᐃ], ta);
    this.ⵠⵠⵠ[Xa.ⵠⲆⲆⵠⵠ].id = Xa.ⵠⲆⲆⵠⵠ;
    this.ΔⵠΔ[Dr.ᐃᐃⵠⵠⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ΔᐃⵠⲆⲆᐃᐃ], 3);
    this.ΔⵠΔ[Dr.ᐃᐃⵠⵠⲆ].id = Dr.ᐃᐃⵠⵠⲆ;
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠⲆᐃⵠΔⲆᐃ], 3);
    this.ⲆᐃⲆ[Dr.ᐃᐃⵠⵠⲆ].id = Dr.ᐃᐃⵠⵠⲆ;
    this.ΔⵠΔ[Dr.ΔΔⵠⵠⲆᐃⲆ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆⵠΔⵠΔΔⵠⲆⲆ], Fh);
    this.ΔⵠΔ[Dr.ΔΔⵠⵠⲆᐃⲆ].id = Dr.ΔΔⵠⵠⲆᐃⲆ;
    this.ⲆᐃⲆ[Dr.ΔΔⵠⵠⲆᐃⲆ] = Qv(60, 60, 0, ΔΔ[Cr.ⲆΔⵠᐃΔᐃⵠᐃⵠ], Kk);
    this.ⲆᐃⲆ[Dr.ΔΔⵠⵠⲆᐃⲆ].id = Dr.ΔΔⵠⵠⲆᐃⲆ;
    this.ΔⵠΔ[Dr.ΔⲆⲆᐃΔⵠΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠΔΔᐃⲆⲆⵠ], 3);
    this.ΔⵠΔ[Dr.ΔⲆⲆᐃΔⵠΔ].id = Dr.ΔⲆⲆᐃΔⵠΔ;
    this.ⲆᐃⲆ[Dr.ΔⲆⲆᐃΔⵠΔ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⲆΔⲆΔΔⲆⲆ], Gg);
    this.ⲆᐃⲆ[Dr.ΔⲆⲆᐃΔⵠΔ].id = Dr.ΔⲆⲆᐃΔⵠΔ;
    this.ΔⵠΔ[Dr.ⵠⵠⲆᐃΔᐃᐃ] = Qv(68, 68, 0, ΔΔ[Cr.ⵠⵠⵠⵠⲆΔⵠⵠΔ], 3);
    this.ΔⵠΔ[Dr.ⵠⵠⲆᐃΔᐃᐃ].id = Dr.ⵠⵠⲆᐃΔᐃᐃ;
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆᐃΔᐃᐃ] = Qv(60, 60, 0, ΔΔ[Cr.ⵠΔⲆΔᐃⵠᐃᐃΔ], Mo);
    this.ⲆᐃⲆ[Dr.ⵠⵠⲆᐃΔᐃᐃ].id = Dr.ⵠⵠⲆᐃΔᐃᐃ;
    this.ΔⵠΔ[Dr.ⲆⲆⲆΔᐃⲆΔ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃΔⲆⵠᐃⲆᐃⲆ], Fh);
    this.ΔⵠΔ[Dr.ⲆⲆⲆΔᐃⲆΔ].id = Dr.ⲆⲆⲆΔᐃⲆΔ;
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆΔᐃⲆΔ] = Qv(60, 60, 0, ΔΔ[Cr.ΔⲆⵠⲆⵠᐃᐃⵠⵠ], Kk);
    this.ⲆᐃⲆ[Dr.ⲆⲆⲆΔᐃⲆΔ].id = Dr.ⲆⲆⲆΔᐃⲆΔ;
    this.ΔⵠΔ[Dr.ⲆⲆᐃⵠᐃⲆⵠ] = Qv(68, 68, 0, ΔΔ[Cr.ⲆᐃⵠΔΔⵠⲆⵠⲆ], 3);
    this.ΔⵠΔ[Dr.ⲆⲆᐃⵠᐃⲆⵠ].id = Dr.ⲆⲆᐃⵠᐃⲆⵠ;
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⵠᐃⲆⵠ] = Qv(60, 60, 0, ΔΔ[Cr.ᐃⵠⵠΔᐃⲆⲆᐃⲆ], 3);
    this.ⲆᐃⲆ[Dr.ⲆⲆᐃⵠᐃⲆⵠ].id = Dr.ⲆⲆᐃⵠᐃⲆⵠ;
    this.ᐃΔⵠⵠᐃᐃⲆ = function () {
      for (var a = Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ, b = Ke, c = 10, d = Mn; d < a.length; d++) {
        if (d > 0 && !(d % 4)) {
          b += a[0].info.width + 10;
          c = 10;
        }
        a[d].info.translate.x = b;
        a[d].info.translate.y = c;
        c += 10 + a[d].info.height;
      }
    };
    this.ᐃⲆᐃⵠⲆΔⵠ = function () {
      var a = Math.floor((10 + this.ΔⵠΔ[Ol].info.Ⲇⵠ[Jt].width) * Math.floor((3 + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / 4) + 35);
      for (var b = 0; b < this.ΔⵠΔ.length; b++) {
        if (this.ΔⵠΔ[b]) {
          this.ΔⵠΔ[b].info.translate.x = a;
          this.ΔⵠΔ[b].info.translate.y = 22;
        }
      }
      this.ᐃΔΔⵠᐃΔⵠ.info.translate.x = a + Zs;
      this.ᐃΔΔⵠᐃΔⵠ.info.translate.y = 22 + ΔΔ[Cr.ⵠⲆΔΔⲆⵠᐃ].height;
      this.ᐃΔΔᐃⲆⵠⲆ.info.translate.x = a + ag;
      this.ᐃΔΔᐃⲆⵠⲆ.info.translate.y = 30;
      this.ⵠΔⲆᐃⵠΔⲆ.info.translate.x = a + Vk;
      this.ⵠΔⲆᐃⵠΔⲆ.info.translate.y = 22 + ΔΔ[Cr.ⵠⲆΔΔⲆⵠᐃ].height;
    };
    this.ΔΔⲆⲆΔΔⲆⲆΔ = function () {
      var a = Math.floor((ro - ΔΔ[Cr.ΔΔᐃΔⵠᐃΔ][0].width) / Wq);
      for (var b = 0; b < this.ⲆΔⲆΔΔ.length; b++) {
        this.ⲆΔⲆΔΔ[b].button.info.translate.x = a;
        this.ⲆΔⲆΔΔ[b].button.info.translate.y = -13;
      }
    };
    this.ΔⵠᐃᐃᐃⲆΔ = function () {
      var a = fs + Math.floor((rk + this.ΔᐃⵠⵠⲆⵠᐃ.info.Ⲇⵠ[$t].width) * Math.floor((sn + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / 4) + 35);
      this.ΔᐃⵠⵠⲆⵠᐃ.info.translate.x = a;
      this.ΔᐃⵠⵠⲆⵠᐃ.info.translate.y = 33;
      this.ΔⲆᐃΔⲆⵠᐃ.info.translate.x = this.ΔᐃⵠⵠⲆⵠᐃ.info.translate.x;
      this.ΔⲆᐃΔⲆⵠᐃ.info.translate.y = 137;
      this.ᐃⵠᐃΔⲆΔⵠ.info.translate.x = this.ΔᐃⵠⵠⲆⵠᐃ.info.translate.x;
      this.ᐃⵠᐃΔⲆΔⵠ.info.translate.y = 240;
    };
    this.ΔᐃᐃΔΔᐃΔ = function () {
      var a = _o + Math.floor((10 + this.ⵠΔⲆᐃⲆΔᐃ.info.Ⲇⵠ[Lu].width) * Math.floor((Gg + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / 4) + 35);
      this.ⵠΔⲆᐃⲆΔᐃ.info.translate.x = a;
      this.ⵠΔⲆᐃⲆΔᐃ.info.translate.y = 36;
      a += 83;
      this.ⲆⵠⵠᐃΔⲆⵠ.info.translate.x = a;
      this.ⲆⵠⵠᐃΔⲆⵠ.info.translate.y = 36;
      this.ΔΔᐃⵠⲆⲆⲆ.info.translate.x = a;
      this.ΔΔᐃⵠⲆⲆⲆ.info.translate.y = 36;
      this.ΔΔΔᐃⵠⲆⲆ.info.translate.x = a;
      this.ΔΔΔᐃⵠⲆⲆ.info.translate.y = 36;
      this.ΔⲆⵠⵠΔⲆⲆ.info.translate.x = a;
      this.ΔⲆⵠⵠΔⲆⲆ.info.translate.y = 36;
      this.ΔⲆΔⵠⲆⵠⲆ.info.translate.x = a;
      this.ΔⲆΔⵠⲆⵠⲆ.info.translate.y = 36;
    };
    this.ⵠⵠᐃⵠΔⲆᐃ = function () {
      var a = Ws + Math.floor(Math.floor((3 + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / jt) * (10 + this.ⵠⲆΔΔᐃᐃⵠ.info.Ⲇⵠ[Kr].width) + 35);
      this.ⵠⲆΔΔᐃᐃⵠ.info.translate.x = a;
      this.ⵠⲆΔΔᐃᐃⵠ.info.translate.y = 36;
      a += 83;
      this.ΔᐃᐃΔΔΔᐃ.info.translate.x = a;
      this.ΔᐃᐃΔΔΔᐃ.info.translate.y = 36;
    };
    this.ΔⲆⵠⵠⲆⵠΔ = function () {
      var a = Math.floor((oa + this.ⲆⲆΔᐃⵠᐃᐃ.info.Ⲇⵠ[0].width) * Math.floor((Fh + Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ.length) / 4) + 35);
      this.ⲆⲆΔᐃⵠᐃᐃ.info.translate.x = a;
      this.ⲆⲆΔᐃⵠᐃᐃ.info.translate.y = 22;
    };
    this.ⵠⲆⲆᐃⵠᐃⵠ = function () {
      var a = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ;
      if (tr < a.length) {
        var b = Math.floor((ro - Ww.ᐃᐃⲆᐃ.max * (a[Fj].info.width + 5)) / 2);
      }
      for (var c = Mn; a.length > c; c++) {
        a[c].info.translate.x = b + c * (a[c].info.width + 5);
        a[c].info.translate.y = so - a[c].info.width - Fn;
        this.ᐃⲆⲆΔᐃ[a[c].id].info.translate.x = a[c].info.translate.x + P;
        this.ᐃⲆⲆΔᐃ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃⲆⲆΔᐃ[a[c].id].info.Ⲇⵠ[0].height - 6;
      }
    };
    var m;
    var n = rh;
    function o() {
      f.Ⲇᐃⵠ();
      if (++n == 30) {
        f.ᐃΔⲆⵠⲆⵠⵠ();
        f.Ⲇᐃⵠ();
        return;
      }
      Vf.setTimeout(o, 33);
    }
    this.Ⲇᐃⵠᐃᐃ = function (a) {
      if (Ww.ΔΔⲆⲆΔ.open) {
        Ww.ΔΔⲆⲆΔ.Ⲇᐃⵠᐃᐃ();
      }
      if (Ww.ΔⵠⵠⵠⲆ.open) {
        Ww.ΔⵠⵠⵠⲆ.Ⲇᐃⵠᐃᐃ();
      }
      document.getElementById("team_box").style.display = "none";
      f.ⵠᐃⲆⵠⲆ.style.display = "none";
      f.ⵠᐃⲆⵠⲆ.open = ue;
      f.sign.style.display = "none";
      f.sign.open = false;
      document.getElementById("shop_starterkit").style.display = "none";
      document.getElementById("home_craft").style.display = "none";
      document.getElementById("recipe_craft").style.display = "none";
      f.ᐃᐃΔⵠ.open = ue;
      document.getElementById("option_in_game").style.display = "none";
      f.options.open = ue;
      document.getElementById("sure_delete").style.display = "none";
      f.ΔΔΔⵠ.open = Zh;
      document.getElementById("cancel_sure_delete").style.display = "none";
      f.ᐃΔⵠΔⲆ.open = Jn;
      document.getElementById("chronoquest").style.display = "none";
      f.ΔΔⵠⲆ.open = Pa;
      m = a;
      f.ⲆΔΔᐃΔⵠΔ();
      f.ⵠᐃ.style.cursor = f.ⵠᐃΔᐃΔⵠⵠ;
      Zw.Ⲇᐃⵠᐃᐃ();
      g = -1;
      p();
      ff();
    };
    var g = -Yt;
    function p() {
      f.Ⲇᐃⵠ();
      if (++g == 30) {
        f.stop();
        m();
        return;
      }
      Vf.setTimeout(p, 33);
    }
    this.ⵠᐃᐃⵠⲆ = false;
    this.stop = function () {
      this.ⵠᐃᐃⵠⲆ = Pq;
    };
    this.ᐃⲆⵠΔⵠ = function () {
      ᐃΔΔᐃ.ΔⲆⵠᐃᐃⲆᐃᐃⵠ();
      f.ⵠᐃᐃⵠⲆ = Vn;
      g = -1;
      n = rh;
      o();
    };
    this.Ⲇᐃⵠ = function () {
      this.ⵠⵠⲆⲆ.translate.x = ro - this.ⵠⵠⲆⲆ.Ⲇⵠ.width - ft;
      this.ⵠⵠⲆⲆ.translate.y = 5;
      gf.ⲆⲆⵠΔⵠ.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ΔᐃᐃΔᐃΔΔ][0].width - 85;
      gf.ⲆⲆⵠΔⵠ.translate.y = ft;
      this.ᐃᐃΔⵠ.button.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ][0].width - Hr;
      this.ᐃᐃΔⵠ.button.info.translate.y = 10;
      this.ΔΔⵠⲆ.button.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ΔⲆⲆΔΔᐃⵠ][0].width - Fr;
      this.ΔΔⵠⲆ.button.info.translate.y = this.ᐃᐃΔⵠ.button.info.translate.y + ΔΔ[Cr.ΔΔⲆⵠⲆⲆⵠ][0].height + 5;
      this.options.button.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ][0].width - 20;
      this.options.button.info.translate.y = this.ΔΔⵠⲆ.button.info.translate.y + ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ][0].height + 18;
      this.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ][Jt].width - 20;
      this.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ][Gd].height;
      this.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ⲆᐃⵠⵠⲆᐃⲆ][tr].width - 20;
      this.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.info.translate.y = this.options.button.info.translate.y + ΔΔ[Cr.ΔⲆⲆⲆⵠⵠⲆ][Jt].height;
      this.ⵠᐃⲆⵠⲆ.button.info.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ][0].width - ws;
      this.ⵠᐃⲆⵠⲆ.button.info.translate.y = this.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.info.translate.y + ΔΔ[Cr.ᐃⵠⲆⵠᐃⵠⲆ][0].height;
      Ww.ⲆⵠⵠⵠⲆ.translate.x = this.ⵠⵠⲆⲆ.translate.x - 63 - 85;
      Ww.ⲆⵠⵠⵠⲆ.translate.y = 100;
      Ww.ⵠⵠⲆᐃΔ.translate.x = this.ⵠⵠⲆⲆ.translate.x - ΔΔ[Cr.ᐃⲆΔⲆᐃⲆᐃ].width - 85;
      Ww.ⵠⵠⲆᐃΔ.translate.y = Ww.ⲆⵠⵠⵠⲆ.translate.y + 10 + ΔΔ[Cr.ᐃΔⵠⵠᐃⵠⲆ].height;
      this.ⲆⲆⵠΔⲆ.translate.y = so - vo - 193;
      this.ⲆⲆⵠΔⲆ.translate.x = ro - 3 - 193;
      this.ᐃⲆΔᐃ.translate.x = vu;
      this.ᐃⲆΔᐃ.translate.y = so - this.ᐃⲆΔᐃ.Ⲇⵠ.height - Ca;
      this.ΔⵠΔⲆᐃ.button.info.translate.x = lo - 45.5;
      this.ΔⵠΔⲆᐃ.button.info.translate.y = 50;
      this.ᐃΔⵠⵠᐃᐃⲆ();
      this.ⵠⲆⲆᐃⵠᐃⵠ();
      this.ᐃⲆᐃⵠⲆΔⵠ();
      this.ΔⲆⵠⵠⲆⵠΔ();
      this.ⵠⵠᐃⵠΔⲆᐃ();
      this.ΔᐃᐃΔΔᐃΔ();
      this.ΔⵠᐃᐃᐃⲆΔ();
      this.ΔΔⲆⲆΔΔⲆⲆΔ();
      this.sign.ⲆΔᐃΔⲆⵠⲆ();
      xm();
      Ww.ΔΔⲆⲆΔ.Ⲇᐃⵠ();
      Ww.ΔⵠⵠⵠⲆ.Ⲇᐃⵠ();
      this.ᐃᐃⵠⲆⲆΔⵠΔᐃ.Ⲇᐃⵠ();
      this.ᐃᐃΔⵠ.ᐃⲆⲆᐃⵠⵠΔ.Ⲇᐃⵠ();
      this.ᐃᐃΔⵠ.list.Ⲇᐃⵠ();
      this.ΔΔΔⵠ.Ⲇᐃⵠ();
      this.ᐃΔⵠΔⲆ.Ⲇᐃⵠ();
      this.ΔΔⵠⲆ.Ⲇᐃⵠ();
      this.ΔⵠΔⲆᐃ.Ⲇᐃⵠ();
      this.options.Ⲇᐃⵠ();
      this.ⵠᐃⲆⵠⲆ.Ⲇᐃⵠ();
      this.sign.Ⲇᐃⵠ();
      var a = 0;
      if (n != 30) {
        a = 1500 / (n + jh) - 50;
      }
      if (g != -1) {
        a = -(1500 / (30 - g + er) - 48);
      }
      this.ΔⵠΔⲆᐃ.button.info.translate.y -= a > jj ? a : -a;
      this.ⵠⵠⲆⲆ.translate.y -= Kr < a ? a : -a;
      Ww.ⲆⵠⵠⵠⲆ.translate.y -= a > 0 ? a : -a;
      Ww.ⵠⵠⲆᐃΔ.translate.y -= a > _s ? a : -a;
      this.ᐃᐃΔⵠ.button.info.translate.y -= Ol < a ? a : -a;
      this.ΔΔⵠⲆ.button.info.translate.y -= a > 0 ? a : -a;
      this.options.button.info.translate.y -= a > 0 ? a : -a;
      this.ⵠᐃⲆⵠⲆ.button.info.translate.y -= Fj < a ? a : -a;
      this.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.info.translate.y -= Ko < a ? a : -a;
      this.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.info.translate.y -= a > 0 ? a : -a;
      gf.ⲆⲆⵠΔⵠ.translate.y -= a > 0 ? a : -a;
      this.ᐃⲆΔᐃ.translate.y -= a < 0 ? a : -a;
      this.ⲆⲆⵠΔⲆ.translate.y -= a < Ol ? a : -a;
    };
    this.ⲆΔⵠⲆⵠⲆᐃᐃᐃ = function () {
      if (!Ww.ⵠΔᐃᐃΔ.enabled && this.ⵠΔⲆΔᐃⵠᐃ && !Ww.ⵠⲆᐃᐃⲆ) {
        qm();
      }
      Rm();
      (function () {
        var a = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
        if (gf.mode === bw.ⲆᐃⵠΔΔ || gf.mode === bw.ⵠⵠᐃᐃΔ || bw.ⲆᐃᐃΔⵠ === gf.mode || gf.mode === bw.ⲆᐃⲆⵠΔ || bw.ⲆᐃⲆΔⵠⵠⲆ === gf.mode || gf.mode === bw.ᐃᐃⵠᐃΔ) {
          for (var b = 0; b < a.length; b++) {
            a[b].ⲆⲆΔᐃⵠⵠΔ();
          }
        } else if (bw.ΔⵠΔⲆⵠⲆΔ === gf.mode) {
          for (b = Lg; b < a.length; b++) {
            if (Ww.ⵠⵠⵠⵠⲆⵠⵠ || Ww.ⵠⵠⲆᐃΔ.enabled || a[b].ᐃⲆⲆΔ.ᐃΔⲆⵠΔ !== "spectator") {
              a[b].ⲆⲆΔᐃⵠⵠΔ();
            }
          }
        }
      })();
      if (this.ⵠΔⲆΔᐃⵠᐃ) {
        Cm();
        if (this.ⵠΔⵠΔΔΔⲆ === ce) {
          this.ᐃᐃΔⵠ.button.ᐃⵠⲆᐃ(d);
        }
        if (bw.ⲆᐃᐃΔⵠ !== gf.mode && gf.mode !== bw.ⲆᐃⲆⵠΔ && bw.ⲆᐃⲆΔⵠⵠⲆ !== gf.mode && this.ⵠⲆΔΔⵠᐃΔ === 1) {
          this.ΔΔⵠⲆ.button.ᐃⵠⲆᐃ(d);
        }
        this.options.button.ᐃⵠⲆᐃ(d);
        if (js === this.ᐃⵠⵠᐃᐃᐃⲆ) {
          this.ⵠᐃⲆⵠⲆ.button.ᐃⵠⲆᐃ(d);
        }
        if (Zw.ᐃⲆⵠΔⵠ) {
          this.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.ᐃⵠⲆᐃ(d);
        } else {
          this.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.ᐃⵠⲆᐃ(d);
        }
        Gm();
        Qm();
        this.ᐃⲆΔᐃ.ᐃⵠⲆᐃ();
        ep();
        Xm();
        ip();
        Vm();
        jm();
        ym();
        wm();
        (function () {
          if (!Ww.ΔΔΔⲆ.open && !Ww.ᐃⲆⲆⵠⲆ.open && !Ww.ⵠΔᐃⵠ.open && !Ww.ⲆΔᐃΔ.open && !Ww.ⵠᐃᐃΔ.open) {
            Ww.ⲆΔⵠΔⲆ.open = false;
            var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
            var b = bw.ⲆΔᐃⵠᐃᐃⵠᐃᐃ;
            if (a) {
              for (var c = 0; c < gf.ⵠᐃΔ[ew.ᐃΔΔΔΔ].length; c++) {
                var d = gf.ⵠᐃΔ[ew.ᐃΔΔΔΔ][c];
                var e = ⵠⵠⵠⲆ.ΔⲆⲆⲆ(d, a);
                if (e < b) {
                  b = e;
                  Ww.ⲆΔⵠΔⲆ.open = true;
                  Ww.ⲆΔⵠΔⲆ.ΔⲆᐃΔ = d.ΔⲆᐃΔ;
                  Ww.ⲆΔⵠΔⲆ.ᐃᐃΔΔΔ = d.id;
                }
              }
            }
          }
        })();
        Pm();
        Tm();
        Dm();
        fm();
        xm();
        Mm();
      }
      if (Ww.ⵠΔᐃᐃΔ.enabled) {
        Bm();
      }
      Jm();
      if (this.ⵠΔⲆΔᐃⵠᐃ && this.ᐃⵠⲆΔᐃΔⲆ === 1) {
        Sm();
      }
      Ww.ᐃⵠᐃᐃΔΔⵠ.ᐃⵠⲆᐃ();
      Ww.alert.ᐃⵠⲆᐃ(hj[yh], "#000");
      if (this.ⵠΔⲆΔᐃⵠᐃ) {
        Ww.ⵠΔᐃᐃΔ.ᐃⵠⲆᐃ();
        Ww.ΔⵠΔⲆᐃ.ᐃⵠⲆᐃ();
        Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.ᐃⵠⲆᐃ(mf.ⵠⵠᐃᐃ.x, mf.ⵠⵠᐃᐃ.y);
      }
      Am();
    };
    this.ᐃⵠΔⵠᐃⵠⲆⲆΔ = function () {
      Ww.ᐃᐃᐃ.Ⲇᐃⵠ();
      Ww.ᐃⲆΔᐃ.Ⲇᐃⵠ();
      if (!Ww.reconnect.enabled && Ww.ᐃⵠᐃΔΔ) {
        Ww.control.Ⲇᐃⵠ();
        Ww.ⲆⵠⵠⵠⲆ.Ⲇᐃⵠ();
      }
      gf.Ⲇᐃⵠ();
      this.ΔΔⵠⲆ.ΔᐃᐃΔΔΔⲆᐃⲆ();
    };
    this.ⵠⵠᐃᐃΔΔᐃΔᐃ = function () {
      xv();
    };
    this.ᐃⲆΔⲆⵠᐃᐃⲆⵠ = function () {
      ᐃΔΔᐃ.ᐃΔΔⵠΔᐃⲆⵠᐃ();
      ᐃΔΔᐃ.ⲆᐃⵠⲆΔΔⲆⵠΔ();
      ᐃΔΔᐃ.ⵠΔΔᐃⵠⵠΔᐃΔ();
      ᐃΔΔᐃ.ᐃᐃΔⵠⲆⵠⵠⵠⵠ();
    };
    this.ᐃⵠⲆᐃ = function () {
      if (!Ww.reconnect.enabled && Ww.ᐃⵠᐃΔΔ) {
        this.ᐃⲆΔⲆⵠᐃᐃⲆⵠ();
      }
      Zw.ΔⲆⵠⵠⵠᐃΔⲆΔ();
      this.ᐃⵠΔⵠᐃⵠⲆⲆΔ();
      if (sf.ᐃⲆᐃᐃΔᐃⵠ !== 1) {
        this.ⵠⵠᐃᐃΔΔᐃΔᐃ();
        this.ⲆΔⵠⲆⵠⲆᐃᐃᐃ();
      } else {
        var a = Δᐃ.ⲆⲆΔᐃⵠⵠⵠ;
        Em(d, a, lo - a.width / 4, gq - a.height / kr, a.width / 2, a.height / eh);
      }
    };
    this.ᐃΔⵠΔᐃᐃⵠ = function (a) {
      if (Ww.ΔΔⲆⲆΔ.open && a.keyCode === 27) {
        Ww.ΔΔⲆⲆΔ.Ⲇᐃⵠᐃᐃ();
      } else if (Ww.ΔⵠⵠⵠⲆ.open && a.keyCode === 27) {
        Ww.ΔⵠⵠⵠⲆ.Ⲇᐃⵠᐃᐃ();
      } else if (Ww.ΔΔⲆⲆΔ.open || Ww.ΔⵠⵠⵠⲆ.open || a.keyCode != 79 || g != -Ur) {
        if (Mk == a.keyCode && g == -1) {
          if (Ww.ΔⵠⵠⵠⲆ.open) {
            Ww.ΔⵠⵠⵠⲆ.ⵠΔᐃⵠⲆΔΔ();
          } else {
            Ww.ΔΔⲆⲆΔ.ᐃⲆⵠΔⵠ();
          }
        } else if (!Ww.ΔΔⲆⲆΔ.open && !Ww.ΔⵠⵠⵠⲆ.open) {
          if (a.keyCode === 82) {
            Ww.ⲆⵠⵠⵠⲆ.ⲆΔΔⲆΔΔΔ();
          } else if (a.keyCode !== 80 || gf.mode !== bw.ΔⵠΔⲆⵠⲆΔ || Ww.ⵠⵠⵠⵠⲆⵠⵠ) {
            if (a.keyCode >= 49 && a.keyCode <= 57) {
              if (Ww.ΔⲆᐃᐃ.id < 0) {
                var b = a.keyCode - 49;
                var c = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ[b];
                if (c) {
                  ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(c.id, b);
                }
              }
            } else if (a.keyCode == 89) {
              Ww.ⵠΔⵠᐃⵠⲆⲆ = !Ww.ⵠΔⵠᐃⵠⲆⲆ;
            } else if (a.keyCode == 71) {
              Ww.ΔⲆᐃᐃ.ⲆΔⵠⵠᐃⲆⲆΔΔ();
            }
          } else {
            Ww.ⵠⵠⲆᐃΔ.ⲆΔΔⲆΔΔΔ();
          }
        }
      } else {
        Ww.ΔⵠⵠⵠⲆ.ᐃΔᐃᐃΔⵠⲆᐃⵠ();
      }
      cf.up(a);
    };
    //KEY HANDLER
    this.ΔΔΔⵠᐃΔⲆ = function (a) {
      cf.down(a);
      if (Db == a.keyCode && !Ww.ΔΔⲆⲆΔ.open && !Ww.ΔⵠⵠⵠⲆ.open) {
        a.preventDefault();
      }
      if (a.code === Settings.Spectator.k) {
        Spectator = !Spectator
      }
      if (a.code === Settings.Xray.k) Settings.Xray.e = !Settings.Xray.e
    };
    this.ᐃΔᐃᐃΔⵠΔ = function (b) {
      mf.ⵠⵠᐃᐃ = Uv(f.ⵠᐃ, b);
      var c = Pq;
      if (kq > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ) {
        f.ⲆⲆⵠΔⲆ.focus(mf.ⵠⵠᐃᐃ);
      }
      var d = Ww.ΔΔΔⲆ;
      if (Ww.ΔⲆᐃᐃ.id < 0 && d.id >= 0 && (!Ww.ΔΔΔⲆ.lock || Ww.ΔΔΔⲆ.ΔⲆᐃΔ === Ww.id)) {
        c |= f.ΔⵠΔ[Ww.ΔΔΔⲆ.id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      var e = Ww.ⵠΔᐃⵠ;
      if (e.open && $t < e.ⵠᐃᐃⵠⵠ) {
        c |= f.ΔᐃᐃΔΔΔᐃ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      var j = Ww.ⵠᐃᐃΔ;
      if (j.open && j.ΔᐃⵠᐃⲆⲆⲆ > 0) {
        c |= f.ⲆⵠⵠᐃΔⲆⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        c |= f.ΔΔᐃⵠⲆⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        c |= f.ΔΔΔᐃⵠⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        c |= f.ΔⲆⵠⵠΔⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        c |= f.ΔⲆΔⵠⲆⵠⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      var k = Ww.ⲆΔᐃΔ;
      if (k.open && k.ΔⲆⵠΔⵠⵠⵠ > 0) {
        c |= f.ᐃⵠᐃΔⲆΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (Ww.sign.open) {
        c |= f.sign.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (!Ww.ΔΔΔⲆ.lock) {
        if (Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ) {
          c |= f.ⵠΔⲆᐃⵠΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        }
      }
      if (Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ) {
        c |= f.ᐃΔΔⵠᐃΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (jj > Ww.ΔⲆᐃᐃ.id && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ⵠᐃⲆⵠⲆ.open) {
        for (var a = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ, m = kq; m < a.length; m++) {
          var n = a[m].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
          c |= n;
          if (n) {
            Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.start(m, mf.ⵠⵠᐃᐃ);
          }
          if (d.open && (d.id < 0 || a[m].id == d.id) || Ww.ᐃⲆⲆⵠⲆ.open && Dr.ΔΔⲆⵠ === a[m].id || Ww.ⲆΔⵠΔⲆ.open && Dr.Ⲇᐃⵠⵠᐃ === a[m].id || Ww.ⲆΔᐃΔ.open && (Dr.ΔΔⲆⵠ === a[m].id || Dr.ΔᐃᐃⲆᐃ === a[m].id) || Ww.ⵠΔᐃⵠ.open && Dr.ᐃᐃΔⲆΔ === a[m].id || Ww.ⵠᐃᐃΔ.open && Dr.ΔΔⲆⵠ === a[m].id) {
            c |= f.ᐃⲆⲆΔᐃ[a[m].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
          }
        }
      }
      if (Ww.ΔΔᐃᐃⵠ.open) {
        c |= f.ΔΔᐃᐃⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (f.ⵠᐃΔⵠΔ != -bt) {
        if (c |= f.ⲆΔⲆΔΔ[f.ⵠᐃΔⵠΔ].button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv)) {
          var o = Rl;
        }
      } else {
        o = false;
      }
      if (Ww.ΔⲆᐃᐃ.id < 0 && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < $t && !o && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ⵠᐃⲆⵠⲆ.open && !Ww.ⵠⲆᐃᐃⲆ) {
        a = Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ;
        m = 0;
        for (; a.length > m; m++) {
          c |= a[m].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        }
      }
      if (Ko > Ww.ΔⲆᐃᐃ.id && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !!Ww.ΔⵠΔⲆᐃ.open && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
        c |= f.ΔⵠΔⲆᐃ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
        c |= f.ᐃᐃΔⵠ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
        c |= f.options.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (jj > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open) {
        c |= f.ⵠᐃⲆⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (Gd > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ⵠᐃⲆⵠⲆ.open) {
        if (Zw.ᐃⲆⵠΔⵠ) {
          c |= f.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        } else {
          c |= f.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
        }
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ᐃᐃΔⵠ.open && !f.ⵠᐃⲆⵠⲆ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && bw.ⲆᐃᐃΔⵠ !== gf.mode && bw.ⲆᐃⲆⵠΔ !== gf.mode && bw.ⲆᐃⲆΔⵠⵠⲆ !== gf.mode) {
        c |= f.ΔΔⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Lv);
      }
      if (!c && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open && !f.sign.open) {
        if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ >= 0) {
          ᐃΔΔᐃ.ᐃᐃΔⵠⵠⲆΔⵠᐃ();
        } else if (!o) {
          mf.down();
        }
      }
    };
    this.ᐃⲆΔΔΔᐃΔ = function (b) {
      mf.ⵠⵠᐃᐃ = Uv(f.ⵠᐃ, b);
      mf.up();
      if (!Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.release()) {
        var c = Ww.ΔΔΔⲆ;
        var d = Ww.ᐃⲆⲆⵠⲆ;
        var e = Ww.ⲆΔⵠΔⲆ;
        var i = Ww.ⵠΔᐃⵠ;
        var j = Ww.ⵠᐃᐃΔ;
        var k = Ww.ⲆΔᐃΔ;
        if (Ww.control.attack) {
          Ww.control.attack = 0;
          ᐃΔΔᐃ.ⵠⵠⲆΔⵠΔΔⲆᐃ();
        }
        if (f.ⵠᐃΔⵠΔ != -1) {
          var m = f.ⲆΔⲆΔΔ[f.ⵠᐃΔⵠΔ].button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv);
          var n = document.getElementById("team_box").style;
          if (m && n.display == "inline-block") {
            n.display = "none";
            return;
          }
          if (m) {
            f.ⲆΔⲆΔΔ[f.ⵠᐃΔⵠΔ].action();
          }
        }
        if (Ww.ΔⲆᐃᐃ.id < 0 && c.id >= 0 && !f.ΔΔΔⵠ.open) {
          if (!Ww.ΔΔΔⲆ.lock || Ww.id === Ww.ΔΔΔⲆ.ΔⲆᐃΔ) {
            if (m = f.ΔⵠΔ[Ww.ΔΔΔⲆ.id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
              ᐃΔΔᐃ.ⲆᐃⲆΔΔⲆᐃⲆᐃ(c);
            }
          }
        }
        if ((i = Ww.ⵠΔᐃⵠ).open && Dh < i.ⵠᐃᐃⵠⵠ && !f.ΔΔΔⵠ.open) {
          if (m = f.ΔᐃᐃΔΔΔᐃ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            ᐃΔΔᐃ.ᐃⲆⲆᐃⲆⵠⵠᐃΔ(i);
          }
        }
        if ((j = Ww.ⵠᐃᐃΔ).open && j.ΔᐃⵠᐃⲆⲆⲆ > 0 && !f.ΔΔΔⵠ.open) {
          switch (j.type) {
            case ew.ⵠⵠⲆᐃᐃ:
              if (m = f.ⲆⵠⵠᐃΔⲆⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
                ᐃΔΔᐃ.ᐃⵠΔⵠⲆᐃⲆ(j);
              }
              break;
            case ew.ᐃⲆΔᐃΔ:
              if (m = f.ΔΔᐃⵠⲆⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
                ᐃΔΔᐃ.ᐃⵠΔⵠⲆᐃⲆ(j);
              }
              break;
            case ew.ⵠⲆⲆᐃᐃ:
              if (m = f.ΔΔΔᐃⵠⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
                ᐃΔΔᐃ.ᐃⵠΔⵠⲆᐃⲆ(j);
              }
              break;
            case ew.ΔᐃΔⵠᐃ:
              if (m = f.ΔⲆⵠⵠΔⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
                ᐃΔΔᐃ.ᐃⵠΔⵠⲆᐃⲆ(j);
              }
              break;
            case ew.ⵠΔΔᐃⲆ:
              if (m = f.ΔⲆΔⵠⲆⵠⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
                ᐃΔΔᐃ.ᐃⵠΔⵠⲆᐃⲆ(j);
              }
          }
        }
        if ((k = Ww.ⲆΔᐃΔ).open && k.ΔⲆⵠΔⵠⵠⵠ > 0 && !f.ΔΔΔⵠ.open) {
          if (m = f.ᐃⵠᐃΔⲆΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            ᐃΔΔᐃ.ᐃᐃᐃΔΔΔΔⲆⵠ(k);
          }
        }
        if (Ww.sign.open && !f.ΔΔΔⵠ.open) {
          if (m = f.sign.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            f.sign.select();
          }
        }
        if (!Ww.ΔΔΔⲆ.lock && !f.ΔΔΔⵠ.open) {
          if (Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ && (m = f.ⵠΔⲆᐃⵠΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv))) {
            ᐃΔΔᐃ.ΔᐃⲆΔᐃΔⵠⲆⵠ(c);
          }
        }
        if (Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ && !f.ΔΔΔⵠ.open && (m = f.ᐃΔΔⵠᐃΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv))) {
          ᐃΔΔᐃ.ᐃⲆᐃⵠΔⲆᐃᐃⲆ(c);
          if (ga) {
            ga("send", "event", "Game", "lockpick");
          }
        }
        if (Ww.ΔΔᐃᐃⵠ.open) {
          if (m = f.ΔΔᐃᐃⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            ᐃΔΔᐃ.ΔΔᐃᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "resurrection");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.id < 0 && !Ww.ⵠΔᐃᐃΔ.enabled && !f.ΔΔΔⵠ.open) {
          for (var l = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ, o = Mn; o < l.length; o++) {
            if (m = l[o].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
              if (b.which != 1 || b.shiftKey) {
                if ((b.which == 1 && b.shiftKey || B == b.which) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0) {
                  f.ΔΔΔⵠ.ⵠⵠⲆΔᐃⵠⵠ(l[o].id);
                }
              } else {
                ᐃΔΔᐃ.ᐃΔⲆⵠⵠ(l[o].id, o);
              }
            } else if (c.open && (c.id < $t || l[o].id === c.id)) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0) {
                ᐃΔΔᐃ.ⲆΔⵠⲆⵠΔΔⲆⲆ(c, l[o].id, b.shiftKey ? 10 : Br);
              }
            } else if (e.open && Dr.Ⲇᐃⵠⵠᐃ === l[o].id) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0) {
                ᐃΔΔᐃ.ⲆΔᐃΔⵠᐃⲆⲆᐃ(e);
              }
            } else if (d.open && Dr.ΔΔⲆⵠ === l[o].id) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < $t) {
                ᐃΔΔᐃ.ΔⲆᐃᐃΔᐃⲆΔⵠ(d, b.shiftKey ? Fn : Fo);
              }
            } else if (i.open && Dr.ᐃᐃΔⲆΔ === l[o].id) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0) {
                ᐃΔΔᐃ.ⵠᐃΔΔⲆᐃΔⵠⵠ(i, b.shiftKey ? rk : 1);
              }
            } else if (j.open && Dr.ΔΔⲆⵠ === l[o].id) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && tr > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ) {
                ᐃΔΔᐃ.ᐃᐃΔᐃⲆᐃᐃⵠⲆ(j, b.shiftKey ? 10 : 1);
              }
            } else if (k.open && (Dr.ΔΔⲆⵠ === l[o].id || l[o].id === Dr.ΔᐃᐃⲆᐃ)) {
              if ((m = f.ᐃⲆⲆΔᐃ[l[o].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0) {
                if (Dr.ΔΔⲆⵠ === l[o].id) {
                  ᐃΔΔᐃ.ⵠⲆⲆⲆᐃᐃΔ(k, b.shiftKey ? 10 : 1, ko);
                } else {
                  ᐃΔΔᐃ.ⵠⲆⲆⲆᐃᐃΔ(k, Jt, b.shiftKey ? 10 : 1);
                }
              }
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.id < 0 && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Lg && !Ww.ⵠΔᐃᐃΔ.enabled && !f.ΔΔΔⵠ.open && !Ww.ⵠⲆᐃᐃⲆ) {
          l = Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ;
          o = 0;
          for (; o < l.length; o++) {
            if (m = l[o].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
              ᐃⲆΔⵠⲆ = ᐃΔΔᐃ.ⲆᐃΔⲆⵠⲆⲆᐃⵠ(l[o].id);
              if (ᐃⲆΔⵠⲆ && ga) {
                ga("send", "event", "Game", "craft", Or[Hs[l[o].id].ⵠᐃΔΔ].name);
              }
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.id < 0 && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Wh && Ww.ΔⵠΔⲆᐃ.open && !f.ⵠᐃⲆⵠⲆ.open && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open) {
          if (m = f.ΔⵠΔⲆᐃ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv)) {
            Yw.ΔⵠΔⲆᐃ.select();
          }
        }
        if (kq > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ⵠᐃⲆⵠⲆ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open) {
          if (Zw.ᐃⲆⵠΔⵠ) {
            if (m = f.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
              Zw.select();
              if (ga) {
                ga("send", "event", "Game", "sound on");
              }
            }
          } else if (m = f.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            Zw.select();
            if (ga) {
              ga("send", "event", "Game", "sound off");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
          if (m = f.options.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            f.options.ⵠⲆᐃⵠⲆᐃΔᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "options");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Kr && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open && f.ᐃⵠⵠᐃᐃᐃⲆ === Ur) {
          if (m = f.ⵠᐃⲆⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            f.ⵠᐃⲆⵠⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "market");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ΔΔΔⵠ.open && !f.ⵠᐃⲆⵠⲆ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && Cs === f.ⵠΔⵠΔΔΔⲆ) {
          if (m = f.ᐃᐃΔⵠ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            f.ᐃᐃΔⵠ.ⲆᐃⲆΔΔⲆⲆᐃⵠ();
            if (ga) {
              ga("send", "event", "Game", "recipe");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < yk && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ⵠᐃⲆⵠⲆ.open && bw.ⲆᐃᐃΔⵠ !== gf.mode && bw.ⲆᐃⲆⵠΔ !== gf.mode && bw.ⲆᐃⲆΔⵠⵠⲆ !== gf.mode && f.ⵠⲆΔΔⵠᐃΔ === 1) {
          if (m = f.ΔΔⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Mv)) {
            f.ΔΔⵠⲆ.select();
            if (ga) {
              ga("send", "event", "Game", "quests");
            }
          }
        }
        if (Ww.ΔⲆᐃᐃ.ᐃΔⲆΔⲆ && lk == b.which) {
          f.ᐃΔⵠΔⲆ.ⵠⵠⲆΔᐃⵠⵠ();
        }
      }
    };
    this.ΔⵠᐃᐃⵠⲆⵠ = Pa;
    this.ΔⲆΔᐃⲆⵠᐃ = function (b) {
      mf.ⵠⵠᐃᐃ = Uv(f.ⵠᐃ, b);
      var d = false;
      Yw.ᐃⲆᐃΔᐃ.display = 0;
      Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.ⵠⲆᐃⵠⵠ(mf.ⵠⵠᐃᐃ);
      if (f.ⵠᐃΔⵠΔ != -ce) {
        d |= f.ⲆΔⲆΔΔ[f.ⵠᐃΔⵠΔ].button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      var e = Ww.ⵠΔᐃⵠ;
      if (e.open && e.ⵠᐃᐃⵠⵠ > 0) {
        d |= f.ΔᐃᐃΔΔΔᐃ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      var i = Ww.ⵠᐃᐃΔ;
      if (i.open && Lu < i.ΔᐃⵠᐃⲆⲆⲆ) {
        d |= f.ⲆⵠⵠᐃΔⲆⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        d |= f.ΔΔᐃⵠⲆⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        d |= f.ΔΔΔᐃⵠⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        d |= f.ΔⲆⵠⵠΔⲆⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        d |= f.ΔⲆΔⵠⲆⵠⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      var j = Ww.ⲆΔᐃΔ;
      if (j.open && j.ΔⲆⵠΔⵠⵠⵠ > Ol) {
        d |= f.ᐃⵠᐃΔⲆΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Ww.sign.open) {
        d |= f.sign.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      var a = Ww.ΔΔΔⲆ;
      if (Ww.ΔⲆᐃᐃ.id < 0 && a.id >= Lg && !Ww.ⵠΔᐃᐃΔ.enabled && (!Ww.ΔΔΔⲆ.lock || Ww.ΔΔΔⲆ.ΔⲆᐃΔ === Ww.id)) {
        d |= f.ΔⵠΔ[a.id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Ww.ΔΔᐃᐃⵠ.open) {
        d |= f.ΔΔᐃᐃⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (!Ww.ΔΔΔⲆ.lock && !Ww.ⵠΔᐃᐃΔ.enabled) {
        if (Ww.ΔΔΔⲆ.ᐃⵠΔⲆᐃⲆⵠ) {
          d |= f.ⵠΔⲆᐃⵠΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        }
      }
      if (Ww.ΔΔΔⲆ.ᐃⲆⵠΔⲆⲆᐃ && !Ww.ⵠΔᐃᐃΔ.enabled) {
        d |= f.ᐃΔΔⵠᐃΔⵠ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (rh > Ww.ΔⲆᐃᐃ.id && !Ww.ⵠΔᐃᐃΔ.enabled) {
        for (var k = Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ, m = 0; m < k.length; m++) {
          var n = k[m].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
          d |= Yw.ᐃⲆᐃΔᐃ.ᐃⲆΔⲆ(n, k[m], 0);
          if (a.open && (Mn > a.id || k[m].id == a.id) || Ww.ᐃⲆⲆⵠⲆ.open && Dr.ΔΔⲆⵠ == k[m].id || Ww.ⲆΔⵠΔⲆ.open && k[m].id === Dr.Ⲇᐃⵠⵠᐃ || Ww.ⲆΔᐃΔ.open && (k[m].id == Dr.ΔΔⲆⵠ || k[m].id == Dr.ΔᐃᐃⲆᐃ) || Ww.ⵠΔᐃⵠ.open && Dr.ᐃᐃΔⲆΔ == k[m].id || Ww.ⵠᐃᐃΔ.open && Dr.ΔΔⲆⵠ == k[m].id) {
            d |= f.ᐃⲆⲆΔᐃ[k[m].id].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
          }
        }
      }
      if (Ww.ΔⲆᐃᐃ.id < 0 && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < yk && !Ww.ⵠΔᐃᐃΔ.enabled && !Ww.ⵠⲆᐃᐃⲆ) {
        k = Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ;
        m = 0;
        for (; k.length > m; m++) {
          n = sr;
          n = k[m].ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
          d |= Yw.ᐃⲆᐃΔᐃ.ᐃⲆΔⲆ(n, k[m], 1);
        }
      }
      if (ko > Ww.ΔⲆᐃᐃ.id && Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Lu && Ww.ΔⵠΔⲆᐃ.open && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
        d |= f.ΔⵠΔⲆᐃ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < jj && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open && f.ⵠΔⵠΔΔΔⲆ === 1) {
        d |= f.ᐃᐃΔⵠ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Fj > Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.ⵠᐃⲆⵠⲆ.open) {
        d |= f.options.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open && f.ᐃⵠⵠᐃᐃᐃⲆ === 1) {
        d |= f.ⵠᐃⲆⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < Dh && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.ᐃΔⵠΔⲆ.open && !f.ΔΔⵠⲆ.open && !f.options.open && !f.ⵠᐃⲆⵠⲆ.open) {
        if (Zw.ᐃⲆⵠΔⵠ) {
          d |= f.ᐃⲆⲆⵠ.ᐃⲆΔΔᐃΔⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        } else {
          d |= f.ᐃⲆⲆⵠ.ΔΔᐃⵠⵠᐃⲆ.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
        }
      }
      if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ < 0 && !f.ᐃᐃΔⵠ.open && !f.ΔΔΔⵠ.open && !f.options.open && !f.ᐃΔⵠΔⲆ.open && !f.ⵠᐃⲆⵠⲆ.open && bw.ⲆᐃᐃΔⵠ !== gf.mode && bw.ⲆᐃⲆⵠΔ !== gf.mode && bw.ⵠⵠᐃᐃⵠⲆᐃⵠⵠ !== gf.mode && ik === f.ⵠⲆΔΔⵠᐃΔ) {
        d |= f.ΔΔⵠⲆ.button.ᐃⲆΔⲆ(f.ⵠᐃ, mf.ⵠⵠᐃᐃ, Jv);
      }
      if (f.ΔⵠᐃᐃⵠⲆⵠ !== d) {
        f.ΔⵠᐃᐃⵠⲆⵠ = d;
        c.style.cursor = d ? f.ⵠⲆⲆᐃΔΔⵠ : f.ⵠᐃΔᐃΔⵠⵠ;
      }
    };
    this.ᐃΔⲆⵠⲆⵠⵠ = function () {
      Vf.addEventListener("mousedown", this.ᐃΔᐃᐃΔⵠΔ, gg);
      Vf.addEventListener("mouseup", this.ᐃⲆΔΔΔᐃΔ, Bh);
      Vf.addEventListener("mousemove", this.ΔⲆΔᐃⲆⵠᐃ, Bg);
      Vf.addEventListener("keyup", this.ᐃΔⵠΔᐃᐃⵠ, fl);
      Vf.addEventListener("keydown", this.ΔΔΔⵠᐃΔⲆ, bs);
    };
    this.ⲆΔΔᐃΔⵠΔ = function () {
      Vf.removeEventListener("mousedown", this.ᐃΔᐃᐃΔⵠΔ, false);
      Vf.removeEventListener("mouseup", this.ᐃⲆΔΔΔᐃΔ, false);
      Vf.removeEventListener("mousemove", this.ΔⲆΔᐃⲆⵠᐃ, M);
      Vf.removeEventListener("keyup", this.ᐃΔⵠΔᐃᐃⵠ, tq);
      Vf.removeEventListener("keydown", this.ΔΔΔⵠᐃΔⲆ, false);
    };
  }
  function Jw(b, c, d, e, f, g) {
    Xi(Zg, b, c, d, e, f, g);
    const h = xa(Ks[yk], Ks[1], Ks[cu], Ks[3], Ks[kr]);
    const a = xa(Ks[5], Ks[0], Ks[1], Ks[2], Ks[_i]);
    return (0 << ((h ^ a) >> 8 & 255)) + (16 << ((h ^ a) & 255)) + (8 << ((h ^ a) >> 24 & 255)) + (24 << ((h ^ a) >> 16 & 255));
  }
  function Kw() {
    ⵠⵠⵠⲆ.ⲆᐃᐃⵠΔⲆⵠ("https://twitter.com/intent/tweet?text=I%20survived%20" + Ww.Δⵠⵠ + "%20days%20with%20" + Ww.ⵠⲆΔᐃⲆΔⲆ.ⲆⲆⲆᐃⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
  }
  function Lw(b, c, d, e, f) {
    const g = e ^ 22753;
    const h = (24 << (f & 255)) + (16 << (f >> 24 & 255)) + (8 << (f >> 8 & Iq)) + (0 << (f >> 16 & 255));
    const a = Aw(b ^ 38193, ((c + 14625) * 1103515245 + 12345) % 2147483648, ~(d & 47880) & (d | 47880));
    Hw(g, h);
    return (a | 61421) & ~(a & 61421);
  }
  (function () {
    function b() {
      this.ⵠⲆⵠⲆⲆ();
    }
    b.prototype = {
      ⵠⲆⵠⲆⲆ: function () {
        var a = this || f;
        a.ΔΔⵠΔⵠⲆⲆ = 1000;
        a.ΔⲆΔᐃⵠⲆⵠ = {};
        a.ᐃⲆΔᐃᐃ = [];
        a.ⲆⵠΔⵠⲆ = false;
        a.ⲆᐃⵠⵠⲆ = 1;
        a.ΔΔΔⵠⵠᐃⲆ = "canplaythrough";
        a.ⵠᐃⵠΔⲆ = typeof Vf != "undefined" && Vf.navigator ? Vf.navigator : null;
        a.ΔΔΔΔⵠⲆⵠ = null;
        a.ᐃΔΔᐃⵠⲆⵠ = false;
        a.ⲆⲆⵠᐃⲆ = true;
        a.ΔᐃⵠΔⲆⲆΔ = true;
        a.Δ = null;
        a.ⲆⲆⵠⲆⲆΔⵠ = true;
        a.ⲆⲆⲆⲆΔΔΔ();
        return a;
      },
      volume: function (b) {
        var c = this || f;
        b = parseFloat(b);
        if (!c.Δ) {
          h();
        }
        if (b !== undefined && b >= Fj && b <= 1) {
          c.ⲆᐃⵠⵠⲆ = b;
          if (c.ⲆⵠΔⵠⲆ) {
            return c;
          }
          if (c.ⲆⲆⵠᐃⲆ) {
            c.ΔΔΔΔⵠⲆⵠ.gain.value = b;
          }
          for (var d = Fj; d < c.ᐃⲆΔᐃᐃ.length; d++) {
            if (!c.ᐃⲆΔᐃᐃ[d].ⲆᐃⵠⵠΔ) {
              for (var g = c.ᐃⲆΔᐃᐃ[d].ⲆⵠⲆᐃΔ(), i = 0; i < g.length; i++) {
                var j = c.ᐃⲆΔᐃᐃ[d].ΔᐃⵠⲆⵠ(g[i]);
                if (j && j.ΔΔⲆᐃ) {
                  j.ΔΔⲆᐃ.volume = j.ⲆᐃⵠⵠⲆ * b;
                }
              }
            }
          }
          return c;
        }
        return c.ⲆᐃⵠⵠⲆ;
      },
      ⵠⲆⵠⲆᐃⲆΔ: function (b) {
        var c = this || f;
        if (!c.Δ) {
          h();
        }
        c.ⲆⵠΔⵠⲆ = b;
        if (c.ⲆⲆⵠᐃⲆ) {
          c.ΔΔΔΔⵠⲆⵠ.gain.value = b ? 0 : c.ⲆᐃⵠⵠⲆ;
        }
        for (var d = 0; d < c.ᐃⲆΔᐃᐃ.length; d++) {
          if (!c.ᐃⲆΔᐃᐃ[d].ⲆᐃⵠⵠΔ) {
            for (var e = c.ᐃⲆΔᐃᐃ[d].ⲆⵠⲆᐃΔ(), g = Jt; g < e.length; g++) {
              var i = c.ᐃⲆΔᐃᐃ[d].ΔᐃⵠⲆⵠ(e[g]);
              if (i && i.ΔΔⲆᐃ) {
                i.ΔΔⲆᐃ.muted = !!b || i.ⲆⵠΔⵠⲆ;
              }
            }
          }
        }
        return c;
      },
      ΔᐃᐃⵠΔⵠᐃ: function () {
        var a = this || f;
        for (var b = a.ᐃⲆΔᐃᐃ.length - bt; b >= tr; b--) {
          a.ᐃⲆΔᐃᐃ[b].ΔᐃᐃⵠΔⵠᐃ();
        }
        if (a.ⲆⲆⵠᐃⲆ && a.Δ && a.Δ.close !== undefined) {
          a.Δ.close();
          a.Δ = null;
          h();
        }
        return a;
      },
      ᐃᐃⵠⵠⵠⲆⵠⵠΔ: function (a) {
        return (this || f).ΔⲆΔᐃⵠⲆⵠ[a.replace(/^x-/, "")];
      },
      ⲆⲆⲆⲆΔΔΔ: function () {
        var a = this || f;
        a.state = a.Δ && a.Δ.state || "running";
        a.ⲆⵠⲆΔΔⵠⵠ();
        if (!a.ⲆⲆⵠᐃⲆ) {
          if (typeof Audio != "undefined") {
            try {
              if (new Audio().oncanplaythrough === undefined) {
                a.ΔΔΔⵠⵠᐃⲆ = "canplay";
              }
            } catch (b) {
              a.ᐃΔΔᐃⵠⲆⵠ = true;
            }
          } else {
            a.ᐃΔΔᐃⵠⲆⵠ = true;
          }
        }
        try {
          if (new Audio().muted) {
            a.ᐃΔΔᐃⵠⲆⵠ = true;
          }
        } catch (a) { }
        if (!a.ᐃΔΔᐃⵠⲆⵠ) {
          a.ⵠΔΔⲆᐃᐃⲆⵠᐃ();
        }
        return a;
      },
      ⵠΔΔⲆᐃᐃⲆⵠᐃ: function () {
        var a = this || f;
        var b = null;
        try {
          b = typeof Audio != "undefined" ? new Audio() : null;
        } catch (b) {
          return a;
        }
        if (!b || typeof b.canPlayType != "function") {
          return a;
        }
        var c = b.canPlayType("audio/mpeg;").replace(/^no$/, "");
        var d = a.ⵠᐃⵠΔⲆ && a.ⵠᐃⵠΔⲆ.userAgent.match(/OPR\/([0-6].)/g);
        var e = d && parseInt(d[Lu].split("/")[1], Bq) < 33;
        a.ΔⲆΔᐃⵠⲆⵠ = {
          ᐃⲆⲆΔᐃΔⲆⲆⵠ: !e && (!!c || !!b.canPlayType("audio/mp3;").replace(/^no$/, "")),
          ⵠΔᐃⵠΔⵠΔⲆⲆ: !!c,
          ᐃΔᐃⵠᐃᐃᐃᐃⵠ: !!b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
          ⲆⲆⵠⵠⵠᐃⲆᐃᐃ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃΔⲆⵠⲆⵠᐃᐃⵠ: !!b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
          ᐃⲆΔⵠᐃⲆΔⵠᐃ: !!b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
          ᐃⵠᐃᐃΔⲆⵠⵠΔ: !!b.canPlayType("audio/aac;").replace(/^no$/, ""),
          ᐃᐃⵠΔΔⵠⵠⵠⵠ: !!b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          ⵠⵠΔⲆⲆΔⵠⲆⵠ: !!(b.canPlayType("audio/x-m4a;") || b.canPlayType("audio/m4a;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⲆᐃᐃⲆΔⵠⲆΔᐃ: !!(b.canPlayType("audio/x-mp4;") || b.canPlayType("audio/mp4;") || b.canPlayType("audio/aac;")).replace(/^no$/, ""),
          ⵠΔᐃⲆⵠᐃᐃΔⵠ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠᐃⵠⵠᐃᐃⲆⵠⲆ: !!b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
          ⵠᐃⵠΔⲆᐃΔⲆΔ: !!b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
          ᐃΔⲆⵠΔΔᐃᐃⲆ: !!(b.canPlayType("audio/x-flac;") || b.canPlayType("audio/flac;")).replace(/^no$/, "")
        };
        return a;
      },
      ⲆΔⵠᐃᐃⵠᐃΔⲆ: function () {
        var a = this || f;
        var b = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(a.ⵠᐃⵠΔⲆ && a.ⵠᐃⵠΔⲆ.userAgent);
        var c = !!("ontouchend" in Vf) || !!a.ⵠᐃⵠΔⲆ && a.ⵠᐃⵠΔⲆ.maxTouchPoints > kq || !!a.ⵠᐃⵠΔⲆ && a.ⵠᐃⵠΔⲆ.ΔⵠⵠⵠᐃⲆᐃᐃⲆ > rh;
        if (!a.ΔᐃⲆⵠᐃⲆⵠ && a.Δ && (b || c)) {
          a.ΔᐃⲆⵠᐃⲆⵠ = !Aj;
          if (!a.ⲆⵠΔᐃΔᐃᐃⲆⵠ && a.Δ.sampleRate !== 44100) {
            a.ⲆⵠΔᐃΔᐃᐃⲆⵠ = true;
            a.ΔᐃᐃⵠΔⵠᐃ();
          }
          a.ⲆⲆΔΔⵠⲆⲆ = a.Δ.createBuffer(1, bt, 22050);
          function b() {
            f.ⵠⲆᐃᐃⵠΔᐃ();
            var c = a.Δ.createBufferSource();
            c.buffer = a.ⲆⲆΔΔⵠⲆⲆ;
            c.connect(a.Δ.destination);
            if (c.start === undefined) {
              c.ΔᐃⲆⵠΔⵠⲆⵠⵠ(0);
            } else {
              c.start(Dh);
            }
            if (typeof a.Δ.resume == "function") {
              a.Δ.resume();
            }
            c.onended = function () {
              c.disconnect(0);
              a.ΔᐃⲆⵠᐃⲆⵠ = !Gd;
              a.ⲆⲆⵠⲆⲆΔⵠ = !ub;
              document.removeEventListener("touchend", b, true);
            };
          }
          document.addEventListener("touchend", b, !Kr);
          return a;
        }
      },
      ⲆⵠⲆΔΔⵠⵠ: function () {
        var a = this;
        if (a.ΔᐃⵠΔⲆⲆΔ && a.Δ && a.Δ.suspend !== undefined && f.ⲆⲆⵠᐃⲆ) {
          for (var b = 0; b < a.ᐃⲆΔᐃᐃ.length; b++) {
            if (a.ᐃⲆΔᐃᐃ[b].ⲆᐃⵠⵠΔ) {
              for (var c = 0; c < a.ᐃⲆΔᐃᐃ[b].ΔⲆᐃⲆᐃ.length; c++) {
                if (!a.ᐃⲆΔᐃᐃ[b].ΔⲆᐃⲆᐃ[c].ⲆΔⵠΔΔ) {
                  return a;
                }
              }
            }
          }
          if (a.ⵠΔᐃΔⵠⵠΔ) {
            clearTimeout(a.ⵠΔᐃΔⵠⵠΔ);
          }
          a.ⵠΔᐃΔⵠⵠΔ = setTimeout(function () {
            if (a.ΔᐃⵠΔⲆⲆΔ) {
              a.ⵠΔᐃΔⵠⵠΔ = null;
              a.state = "suspending";
              a.Δ.suspend().then(function () {
                a.state = "suspended";
                if (a.ⲆⲆⵠΔΔⵠⲆ) {
                  delete a.ⲆⲆⵠΔΔⵠⲆ;
                  a.ⵠⲆᐃᐃⵠΔᐃ();
                }
              });
            }
          }, 30000);
          return a;
        }
      },
      ⵠⲆᐃᐃⵠΔᐃ: function () {
        var a = this;
        if (a.Δ && a.Δ.resume !== undefined && f.ⲆⲆⵠᐃⲆ) {
          if (a.state === "running" && a.ⵠΔᐃΔⵠⵠΔ) {
            clearTimeout(a.ⵠΔᐃΔⵠⵠΔ);
            a.ⵠΔᐃΔⵠⵠΔ = null;
          } else if (a.state === "suspended") {
            a.Δ.resume().then(function () {
              a.state = "running";
              for (var b = 0; b < a.ᐃⲆΔᐃᐃ.length; b++) {
                a.ᐃⲆΔᐃᐃ[b].ⵠᐃΔΔⲆ("resume");
              }
            });
            if (a.ⵠΔᐃΔⵠⵠΔ) {
              clearTimeout(a.ⵠΔᐃΔⵠⵠΔ);
              a.ⵠΔᐃΔⵠⵠΔ = null;
            }
          } else if (a.state === "suspending") {
            a.ⲆⲆⵠΔΔⵠⲆ = !Wh;
          }
          return a;
        }
      }
    };
    var f = new b();
    function c(a) {
      if (a.src && a.src.length !== 0) {
        this.ⵠⲆⵠⲆⲆ(a);
      } else {
        console.error(undefined);
      }
    }
    c.prototype = {
      ⵠⲆⵠⲆⲆ: function (a) {
        var b = this;
        if (!f.Δ) {
          h();
        }
        b.ᐃⵠΔⲆⵠᐃⵠᐃᐃ = a.autoplay || !sd;
        b.ⵠΔΔⵠΔᐃⵠ = typeof a.ⵠᐃⲆᐃⵠⵠⵠ != "string" ? a.ⵠᐃⲆᐃⵠⵠⵠ : [a.ⵠᐃⲆᐃⵠⵠⵠ];
        b.ⵠΔⵠΔⵠⲆᐃ = a.ΔᐃⵠⵠᐃΔᐃᐃⲆ || false;
        b.ⲆⵠΔⵠⲆ = a.ⵠⲆⵠⲆᐃⲆΔ || !Aj;
        b.ⵠᐃΔⲆⲆ = a.loop || !ub;
        b.ⵠΔΔⲆΔⲆΔⲆⲆ = a.ⲆⲆⲆⲆⲆⵠΔⲆⵠ || 5;
        b.ᐃᐃⲆⲆΔᐃΔΔⲆ = typeof a.preload != "boolean" || a.preload;
        b.ΔΔᐃⵠⲆ = a.rate || yl;
        b.ᐃⵠⲆΔⵠ = a.ΔΔ || {};
        b.ⵠΔΔΔΔ = typeof a.src != "string" ? a.src : [a.src];
        b.ⲆᐃⵠⵠⲆ = a.volume !== undefined ? a.volume : 1;
        b.ΔⵠᐃᐃⲆⵠⲆ = 0;
        b.Δⵠⵠᐃⵠ = "unloaded";
        b.ΔⲆᐃⲆᐃ = [];
        b.ᐃⲆΔᐃᐃᐃⲆ = {};
        b.ⵠᐃⵠᐃΔ = [];
        b.ᐃᐃⵠᐃⵠⵠᐃⵠΔ = a.onend ? [{
          ⲆⲆⲆΔΔ: a.onend
        }] : [];
        b.ᐃᐃⲆⵠᐃᐃⵠᐃⲆ = a.onfade ? [{
          ⲆⲆⲆΔΔ: a.onfade
        }] : [];
        b.ⵠᐃΔᐃⲆⲆⵠⲆⵠ = a.onload ? [{
          ⲆⲆⲆΔΔ: a.onload
        }] : [];
        b.ΔⲆⵠⲆⲆⵠΔᐃⵠ = a.ⵠΔⲆΔⲆΔᐃΔΔ ? [{
          ⲆⲆⲆΔΔ: a.ⵠΔⲆΔⲆΔᐃΔΔ
        }] : [];
        b.ⲆⲆⲆⵠᐃΔᐃᐃᐃ = a.onpause ? [{
          ⲆⲆⲆΔΔ: a.onpause
        }] : [];
        b.ᐃᐃΔᐃᐃⲆⲆⵠⲆ = a.onplay ? [{
          ⲆⲆⲆΔΔ: a.onplay
        }] : [];
        b.ⵠⵠΔᐃⲆΔⵠΔⲆ = a.onstop ? [{
          ⲆⲆⲆΔΔ: a.onstop
        }] : [];
        b.ΔΔᐃΔⵠⲆᐃⵠⲆ = a.onmute ? [{
          ⲆⲆⲆΔΔ: a.onmute
        }] : [];
        b.ΔⵠᐃⵠΔⵠΔΔⵠ = a.ᐃᐃᐃΔᐃⵠⲆΔΔ ? [{
          ⲆⲆⲆΔΔ: a.ᐃᐃᐃΔᐃⵠⲆΔΔ
        }] : [];
        b.ⲆⲆΔⵠⲆΔⵠⲆᐃ = a.ⵠⲆᐃΔⵠⵠΔⲆⵠ ? [{
          ⲆⲆⲆΔΔ: a.ⵠⲆᐃΔⵠⵠΔⲆⵠ
        }] : [];
        b.ⲆⵠⲆΔⵠΔⵠΔⵠ = a.ΔΔᐃⲆⲆΔᐃᐃΔ ? [{
          ⲆⲆⲆΔΔ: a.ΔΔᐃⲆⲆΔᐃᐃΔ
        }] : [];
        b.ⲆᐃᐃᐃⵠⲆᐃᐃᐃ = [];
        b.ⲆᐃⵠⵠΔ = f.ⲆⲆⵠᐃⲆ && !b.ⵠΔⵠΔⵠⲆᐃ;
        if (f.Δ !== undefined && f.Δ && f.ⲆⲆⵠⲆⲆΔⵠ) {
          f.ⲆΔⵠᐃᐃⵠᐃΔⲆ();
        }
        f.ᐃⲆΔᐃᐃ.push(b);
        if (b.ᐃⵠΔⲆⵠᐃⵠᐃᐃ) {
          b.ⵠᐃⵠᐃΔ.push({
            event: "play",
            action: function () {
              b.play();
            }
          });
        }
        if (b.ᐃᐃⲆⲆΔᐃΔΔⲆ) {
          b.load();
        }
        return b;
      },
      load: function () {
        var a = this;
        var b = null;
        if (!f.ᐃΔΔᐃⵠⲆⵠ) {
          if (typeof a.ⵠΔΔΔΔ == "string") {
            a.ⵠΔΔΔΔ = [a.ⵠΔΔΔΔ];
          }
          for (var c = 0; c < a.ⵠΔΔΔΔ.length; c++) {
            var g;
            var i;
            if (a.ⵠΔΔⵠΔᐃⵠ && a.ⵠΔΔⵠΔᐃⵠ[c]) {
              g = a.ⵠΔΔⵠΔᐃⵠ[c];
            } else {
              if (typeof (i = a.ⵠΔΔΔΔ[c]) != "string") {
                a.ⵠᐃΔΔⲆ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                continue;
              }
              if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                g = /\.([^.]+)$/.exec(i.split("?", er)[Dh]);
              }
              g &&= g[er].toLowerCase();
            }
            if (!g) {
              console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
            }
            if (g && f.ᐃᐃⵠⵠⵠⲆⵠⵠΔ(g)) {
              b = a.ⵠΔΔΔΔ[c];
              break;
            }
          }
          if (b) {
            a.ⵠΔΔΔΔ = b;
            a.Δⵠⵠᐃⵠ = "loading";
            if (Vf.location.protocol === "https:" && b.slice(0, gs) === "http:") {
              a.ⵠΔⵠΔⵠⲆᐃ = !Jt;
              a.ⲆᐃⵠⵠΔ = false;
            }
            new d(a);
            if (a.ⲆᐃⵠⵠΔ) {
              e(a);
            }
            return a;
          } else {
            a.ⵠᐃΔΔⲆ("loaderror", null, "No codec support for selected audio sources.");
            return;
          }
        }
        a.ⵠᐃΔΔⲆ("loaderror", null, "No audio support.");
      },
      play: function (d, j) {
        var k = this;
        var e = null;
        if (typeof d == "number") {
          e = d;
          d = null;
        } else {
          if (typeof d == "string" && k.Δⵠⵠᐃⵠ === "loaded" && !k.ᐃⵠⲆΔⵠ[d]) {
            return null;
          }
          if (d === undefined) {
            d = "__default";
            var n = tr;
            for (var o = 0; o < k.ΔⲆᐃⲆᐃ.length; o++) {
              if (k.ΔⲆᐃⲆᐃ[o].ⲆΔⵠΔΔ && !k.ΔⲆᐃⲆᐃ[o].ⲆⲆΔᐃⵠ) {
                n++;
                e = k.ΔⲆᐃⲆᐃ[o].ΔᐃⲆΔ;
              }
            }
            if (Ud === n) {
              d = null;
            } else {
              e = null;
            }
          }
        }
        var q = e ? k.ΔᐃⵠⲆⵠ(e) : k.ⵠⲆⵠⲆⵠΔΔᐃⲆ();
        if (!q) {
          return null;
        }
        if (e && !d) {
          d = q.ᐃⵠⲆΔⵠ || "__default";
        }
        if (k.Δⵠⵠᐃⵠ !== "loaded") {
          q.ᐃⵠⲆΔⵠ = d;
          q.ⲆⲆΔᐃⵠ = !ik;
          var h = q.ΔᐃⲆΔ;
          k.ⵠᐃⵠᐃΔ.push({
            event: "play",
            action: function () {
              k.play(h);
            }
          });
          return h;
        }
        if (e && !q.ⲆΔⵠΔΔ) {
          if (!j) {
            setTimeout(function () {
              k.ⵠᐃΔΔⲆ("play", q.ΔᐃⲆΔ);
            }, 0);
          }
          return q.ΔᐃⲆΔ;
        }
        if (k.ⲆᐃⵠⵠΔ) {
          f.ⵠⲆᐃᐃⵠΔᐃ();
        }
        var l = Math.max(0, q.ⵠⵠΔΔᐃ > Ol ? q.ⵠⵠΔΔᐃ : k.ᐃⵠⲆΔⵠ[d][_s] / 1000);
        var g = Math.max(Dh, (k.ᐃⵠⲆΔⵠ[d][0] + k.ᐃⵠⲆΔⵠ[d][Ud]) / 1000 - l);
        var p = g * 1000 / Math.abs(q.ΔΔᐃⵠⲆ);
        q.ⲆΔⵠΔΔ = !Fo;
        q.ⲆⲆΔᐃⵠ = false;
        q.ᐃⵠⲆΔⵠ = d;
        q.ⵠⵠΔΔᐃ = l;
        q.ⵠⲆΔⲆⵠ = k.ᐃⵠⲆΔⵠ[d][_s] / 1000;
        q.ΔⲆΔᐃΔⵠⲆ = (k.ᐃⵠⲆΔⵠ[d][Dh] + k.ᐃⵠⲆΔⵠ[d][yl]) / 1000;
        q.ⵠᐃΔⲆⲆ = !!q.ⵠᐃΔⲆⲆ || !!k.ᐃⵠⲆΔⵠ[d][2];
        var b = q.ΔΔⲆᐃ;
        if (k.ⲆᐃⵠⵠΔ) {
          function a() {
            k.ⵠⲆΔⵠΔⵠⲆΔⲆ(q);
            var a = q.ⲆⵠΔⵠⲆ || k.ⲆⵠΔⵠⲆ ? 0 : q.ⲆᐃⵠⵠⲆ;
            b.gain.setValueAtTime(a, f.Δ.currentTime);
            q.ⵠΔⵠⵠᐃⲆᐃ = f.Δ.currentTime;
            if (b.ⵠⲆΔΔⵠ.start === undefined) {
              if (q.ⵠᐃΔⲆⲆ) {
                b.ⵠⲆΔΔⵠ.ΔᐃⵠⵠⲆⵠΔΔⲆ(kq, l, 86400);
              } else {
                b.ⵠⲆΔΔⵠ.ΔᐃⵠⵠⲆⵠΔΔⲆ(Gd, l, g);
              }
            } else if (q.ⵠᐃΔⲆⲆ) {
              b.ⵠⲆΔΔⵠ.start(Wh, l, 86400);
            } else {
              b.ⵠⲆΔΔⵠ.start(0, l, g);
            }
            if (p !== 1 / Wh) {
              k.ᐃⲆΔᐃᐃᐃⲆ[q.ΔᐃⲆΔ] = setTimeout(k.ⲆⲆΔᐃⵠ.bind(k, q), p);
            }
            if (!j) {
              setTimeout(function () {
                k.ⵠᐃΔΔⲆ("play", q.ΔᐃⲆΔ);
              }, Lu);
            }
          }
          var t = f.state === "running";
          if (k.Δⵠⵠᐃⵠ === "loaded" && t) {
            a();
          } else {
            var c = t || k.Δⵠⵠᐃⵠ !== "loaded" ? "load" : "resume";
            k.once(c, a, t ? q.ΔᐃⲆΔ : null);
            k.ⲆΔⲆⵠⲆᐃᐃ(q.ΔᐃⲆΔ);
          }
        } else {
          function a() {
            b.currentTime = l;
            b.muted = q.ⲆⵠΔⵠⲆ || k.ⲆⵠΔⵠⲆ || f.ⲆⵠΔⵠⲆ || b.muted;
            b.volume = q.ⲆᐃⵠⵠⲆ * f.volume();
            b.playbackRate = q.ΔΔᐃⵠⲆ;
            b.play();
            if (p !== Cs / 0) {
              k.ᐃⲆΔᐃᐃᐃⲆ[q.ΔᐃⲆΔ] = setTimeout(k.ⲆⲆΔᐃⵠ.bind(k, q), p);
            }
            if (!j) {
              k.ⵠᐃΔΔⲆ("play", q.ΔᐃⲆΔ);
            }
          }
          var m = k.Δⵠⵠᐃⵠ === "loaded" && (Vf && Vf.ΔΔΔᐃⵠⵠᐃⲆΔ || !b.readyState && f.ⵠᐃⵠΔⲆ.ΔᐃᐃᐃᐃᐃⵠⵠⲆ);
          if (gn === b.readyState || m) {
            a();
          } else {
            function c() {
              a();
              b.removeEventListener(f.ΔΔΔⵠⵠᐃⲆ, c, !dn);
            }
            b.addEventListener(f.ΔΔΔⵠⵠᐃⲆ, c, !Eg);
            k.ⲆΔⲆⵠⲆᐃᐃ(q.ΔᐃⲆΔ);
          }
        }
        return q.ΔᐃⲆΔ;
      },
      pause: function (a) {
        var b = this;
        if (b.Δⵠⵠᐃⵠ !== "loaded") {
          b.ⵠᐃⵠᐃΔ.push({
            event: "pause",
            action: function () {
              b.pause(a);
            }
          });
          return b;
        }
        for (var c = b.ⲆⵠⲆᐃΔ(a), d = ko; d < c.length; d++) {
          b.ⲆΔⲆⵠⲆᐃᐃ(c[d]);
          var e = b.ΔᐃⵠⲆⵠ(c[d]);
          if (e && !e.ⲆΔⵠΔΔ && (e.ⵠⵠΔΔᐃ = b.ΔⵠᐃⵠᐃΔⲆ(c[d]), e.ⵠⲆᐃᐃᐃΔᐃ = Ko, e.ⲆΔⵠΔΔ = !ko, b.ⵠᐃⲆΔⵠΔⵠ(c[d]), e.ΔΔⲆᐃ)) {
            if (b.ⲆᐃⵠⵠΔ) {
              if (!e.ΔΔⲆᐃ.ⵠⲆΔΔⵠ) {
                continue;
              }
              if (e.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.stop === undefined) {
                e.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.ᐃᐃΔᐃⵠⲆΔΔⲆ(Jt);
              } else {
                e.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.stop(0);
              }
              b.ⲆΔΔΔᐃⲆΔ(e.ΔΔⲆᐃ);
            } else if (!isNaN(e.ΔΔⲆᐃ.duration) || e.ΔΔⲆᐃ.duration === wg / Gd) {
              e.ΔΔⲆᐃ.pause();
            }
          }
          if (!arguments[1]) {
            b.ⵠᐃΔΔⲆ("pause", e ? e.ΔᐃⲆΔ : null);
          }
        }
        return b;
      },
      stop: function (a, b) {
        var c = this;
        if (c.Δⵠⵠᐃⵠ !== "loaded") {
          c.ⵠᐃⵠᐃΔ.push({
            event: "stop",
            action: function () {
              c.stop(a);
            }
          });
          return c;
        }
        for (var d = c.ⲆⵠⲆᐃΔ(a), e = $t; e < d.length; e++) {
          c.ⲆΔⲆⵠⲆᐃᐃ(d[e]);
          var f = c.ΔᐃⵠⲆⵠ(d[e]);
          if (f) {
            f.ⵠⵠΔΔᐃ = f.ⵠⲆΔⲆⵠ || Jt;
            f.ⵠⲆᐃᐃᐃΔᐃ = 0;
            f.ⲆΔⵠΔΔ = !Lu;
            f.ⲆⲆΔᐃⵠ = !Dh;
            c.ⵠᐃⲆΔⵠΔⵠ(d[e]);
            if (f.ΔΔⲆᐃ) {
              if (c.ⲆᐃⵠⵠΔ) {
                if (f.ΔΔⲆᐃ.ⵠⲆΔΔⵠ) {
                  if (f.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.stop === undefined) {
                    f.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.ᐃᐃΔᐃⵠⲆΔΔⲆ(Ol);
                  } else {
                    f.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.stop(0);
                  }
                  c.ⲆΔΔΔᐃⲆΔ(f.ΔΔⲆᐃ);
                }
              } else if (!isNaN(f.ΔΔⲆᐃ.duration) || f.ΔΔⲆᐃ.duration === bt / ko) {
                f.ΔΔⲆᐃ.currentTime = f.ⵠⲆΔⲆⵠ || 0;
                f.ΔΔⲆᐃ.pause();
              }
            }
            if (!b) {
              c.ⵠᐃΔΔⲆ("stop", f.ΔᐃⲆΔ);
            }
          }
        }
        return c;
      },
      ⵠⲆⵠⲆᐃⲆΔ: function (b, c) {
        var d = this;
        if (d.Δⵠⵠᐃⵠ !== "loaded") {
          d.ⵠᐃⵠᐃΔ.push({
            event: "mute",
            action: function () {
              d.ⵠⲆⵠⲆᐃⲆΔ(b, c);
            }
          });
          return d;
        }
        if (c === undefined) {
          if (typeof b != "boolean") {
            return d.ⲆⵠΔⵠⲆ;
          }
          d.ⲆⵠΔⵠⲆ = b;
        }
        for (var e = d.ⲆⵠⲆᐃΔ(c), g = Fj; g < e.length; g++) {
          var h = d.ΔᐃⵠⲆⵠ(e[g]);
          if (h) {
            h.ⲆⵠΔⵠⲆ = b;
            if (d.ⲆᐃⵠⵠΔ && h.ΔΔⲆᐃ) {
              h.ΔΔⲆᐃ.gain.setValueAtTime(b ? 0 : h.ⲆᐃⵠⵠⲆ, f.Δ.currentTime);
            } else if (h.ΔΔⲆᐃ) {
              h.ΔΔⲆᐃ.muted = !!f.ⲆⵠΔⵠⲆ || b;
            }
            d.ⵠᐃΔΔⲆ("mute", h.ΔᐃⲆΔ);
          }
        }
        return d;
      },
      volume: function () {
        var b;
        var c;
        var d;
        var g = this;
        var h = arguments;
        if (h.length === 0) {
          return g.ⲆᐃⵠⵠⲆ;
        }
        if (Br === h.length || Xn === h.length && h[Cs] === undefined) {
          if (g.ⲆⵠⲆᐃΔ().indexOf(h[kq]) >= Lu) {
            c = parseInt(h[0], 10);
          } else {
            b = parseFloat(h[0]);
          }
        } else if (h.length >= _l) {
          b = parseFloat(h[Ko]);
          c = parseInt(h[Eg], 10);
        }
        if (b === undefined || b < Fj || b > sd) {
          if (d = c ? g.ΔᐃⵠⲆⵠ(c) : g.ΔⲆᐃⲆᐃ[kq]) {
            return d.ⲆᐃⵠⵠⲆ;
          } else {
            return Mn;
          }
        }
        if (g.Δⵠⵠᐃⵠ !== "loaded") {
          g.ⵠᐃⵠᐃΔ.push({
            event: "volume",
            action: function () {
              g.volume.apply(g, h);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ⲆᐃⵠⵠⲆ = b;
        }
        c = g.ⲆⵠⲆᐃΔ(c);
        for (var j = Lg; j < c.length; j++) {
          if (d = g.ΔᐃⵠⲆⵠ(c[j])) {
            d.ⲆᐃⵠⵠⲆ = b;
            if (!h[2]) {
              g.ⵠᐃⲆΔⵠΔⵠ(c[j]);
            }
            if (g.ⲆᐃⵠⵠΔ && d.ΔΔⲆᐃ && !d.ⲆⵠΔⵠⲆ) {
              d.ΔΔⲆᐃ.gain.setValueAtTime(b, f.Δ.currentTime);
            } else if (d.ΔΔⲆᐃ && !d.ⲆⵠΔⵠⲆ) {
              d.ΔΔⲆᐃ.volume = b * f.volume();
            }
            g.ⵠᐃΔΔⲆ("volume", d.ΔᐃⲆΔ);
          }
        }
        return g;
      },
      fade: function (j, e, i, k) {
        var m = this;
        var n = Math.abs(j - e);
        var a = j > e ? "out" : "in";
        var o = n / 0.01;
        var p = o > 0 ? i / o : i;
        if (p < kr) {
          o = Math.ceil(o / (4 / p));
          p = Yn;
        }
        if (m.Δⵠⵠᐃⵠ !== "loaded") {
          m.ⵠᐃⵠᐃΔ.push({
            event: "fade",
            action: function () {
              m.fade(j, e, i, k);
            }
          });
          return m;
        }
        m.volume(j, k);
        for (var q = m.ⲆⵠⲆᐃΔ(k), g = 0; g < q.length; g++) {
          var r = m.ΔᐃⵠⲆⵠ(q[g]);
          if (r) {
            if (!k) {
              m.ⵠᐃⲆΔⵠΔⵠ(q[g]);
            }
            if (m.ⲆᐃⵠⵠΔ && !r.ⲆⵠΔⵠⲆ) {
              var s = f.Δ.currentTime;
              var t = s + i / 1000;
              r.ⲆᐃⵠⵠⲆ = j;
              r.ΔΔⲆᐃ.gain.setValueAtTime(j, s);
              r.ΔΔⲆᐃ.gain.linearRampToValueAtTime(e, t);
            }
            var w = j;
            r.ⲆⲆⵠᐃⲆⵠⲆ = setInterval(function (b, c) {
              if (o > 0) {
                w += a === "in" ? 0.01 : -0.01;
              }
              w = Math.max(xb, w);
              w = Math.min(1, w);
              w = Math.round(w * 100) / me;
              if (m.ⲆᐃⵠⵠΔ) {
                if (k === undefined) {
                  m.ⲆᐃⵠⵠⲆ = w;
                }
                c.ⲆᐃⵠⵠⲆ = w;
              } else {
                m.volume(w, b, !Wh);
              }
              if (e < j && w <= e || e > j && w >= e) {
                clearInterval(c.ⲆⲆⵠᐃⲆⵠⲆ);
                c.ⲆⲆⵠᐃⲆⵠⲆ = null;
                m.volume(e, b);
                m.ⵠᐃΔΔⲆ("fade", b);
              }
            }.bind(m, q[g], r), p);
          }
        }
        return m;
      },
      ⵠᐃⲆΔⵠΔⵠ: function (a) {
        var b = this;
        var c = b.ΔᐃⵠⲆⵠ(a);
        if (c && c.ⲆⲆⵠᐃⲆⵠⲆ) {
          if (b.ⲆᐃⵠⵠΔ) {
            c.ΔΔⲆᐃ.gain.cancelScheduledValues(f.Δ.currentTime);
          }
          clearInterval(c.ⲆⲆⵠᐃⲆⵠⲆ);
          c.ⲆⲆⵠᐃⲆⵠⲆ = null;
          b.ⵠᐃΔΔⲆ("fade", a);
        }
        return b;
      },
      loop: function () {
        var b;
        var c;
        var d;
        var f = this;
        var g = arguments;
        if (g.length === 0) {
          return f.ⵠᐃΔⲆⲆ;
        }
        if (g.length === 1) {
          if (typeof g[$t] != "boolean") {
            return !!(d = f.ΔᐃⵠⲆⵠ(parseInt(g[xb], ft))) && d.ⵠᐃΔⲆⲆ;
          }
          b = g[0];
          f.ⵠᐃΔⲆⲆ = b;
        } else if (g.length === 2) {
          b = g[Ko];
          c = parseInt(g[1], 10);
        }
        for (var h = f.ⲆⵠⲆᐃΔ(c), j = 0; j < h.length; j++) {
          if (d = f.ΔᐃⵠⲆⵠ(h[j])) {
            d.ⵠᐃΔⲆⲆ = b;
            if (f.ⲆᐃⵠⵠΔ && d.ΔΔⲆᐃ && d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ) {
              d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loop = b;
              if (b) {
                d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loopStart = d.ⵠⲆΔⲆⵠ || 0;
                d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loopEnd = d.ΔⲆΔᐃΔⵠⲆ;
              }
            }
          }
        }
        return f;
      },
      rate: function () {
        var b;
        var c;
        var d;
        var g = this;
        var j = arguments;
        if (j.length === 0) {
          c = g.ΔⲆᐃⲆᐃ[Kr].ΔᐃⲆΔ;
        } else if (Fo === j.length) {
          if (g.ⲆⵠⲆᐃΔ().indexOf(j[Ol]) >= 0) {
            c = parseInt(j[_s], 10);
          } else {
            b = parseFloat(j[0]);
          }
        } else if (j.length === 2) {
          b = parseFloat(j[0]);
          c = parseInt(j[er], 10);
        }
        if (typeof b != "number") {
          if (d = g.ΔᐃⵠⲆⵠ(c)) {
            return d.ΔΔᐃⵠⲆ;
          } else {
            return g.ΔΔᐃⵠⲆ;
          }
        }
        if (g.Δⵠⵠᐃⵠ !== "loaded") {
          g.ⵠᐃⵠᐃΔ.push({
            event: "rate",
            action: function () {
              g.rate.apply(g, j);
            }
          });
          return g;
        }
        if (c === undefined) {
          g.ΔΔᐃⵠⲆ = b;
        }
        c = g.ⲆⵠⲆᐃΔ(c);
        for (var k = 0; k < c.length; k++) {
          if (d = g.ΔᐃⵠⲆⵠ(c[k])) {
            d.ⵠⲆᐃᐃᐃΔᐃ = g.ΔⵠᐃⵠᐃΔⲆ(c[k]);
            d.ⵠΔⵠⵠᐃⲆᐃ = g.ⲆᐃⵠⵠΔ ? f.Δ.currentTime : d.ⵠΔⵠⵠᐃⲆᐃ;
            d.ΔΔᐃⵠⲆ = b;
            if (g.ⲆᐃⵠⵠΔ && d.ΔΔⲆᐃ && d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ) {
              d.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.playbackRate.value = b;
            } else if (d.ΔΔⲆᐃ) {
              d.ΔΔⲆᐃ.playbackRate = b;
            }
            var l = g.ΔⵠᐃⵠᐃΔⲆ(c[k]);
            var m = ((g.ᐃⵠⲆΔⵠ[d.ᐃⵠⲆΔⵠ][0] + g.ᐃⵠⲆΔⵠ[d.ᐃⵠⲆΔⵠ][1]) / 1000 - l) * 1000 / Math.abs(d.ΔΔᐃⵠⲆ);
            if (!!g.ᐃⲆΔᐃᐃᐃⲆ[c[k]] || !d.ⲆΔⵠΔΔ) {
              g.ⲆΔⲆⵠⲆᐃᐃ(c[k]);
              g.ᐃⲆΔᐃᐃᐃⲆ[c[k]] = setTimeout(g.ⲆⲆΔᐃⵠ.bind(g, d), m);
            }
            g.ⵠᐃΔΔⲆ("rate", d.ΔᐃⲆΔ);
          }
        }
        return g;
      },
      ΔⵠᐃⵠᐃΔⲆ: function () {
        var b;
        var c;
        var d = this;
        var g = arguments;
        if (yk === g.length) {
          c = d.ΔⲆᐃⲆᐃ[0].ΔᐃⲆΔ;
        } else if (Ur === g.length) {
          if (d.ⲆⵠⲆᐃΔ().indexOf(g[Gd]) >= Jt) {
            c = parseInt(g[Ko], Fn);
          } else {
            c = d.ΔⲆᐃⲆᐃ[Lu].ΔᐃⲆΔ;
            b = parseFloat(g[Ko]);
          }
        } else if (g.length === 2) {
          b = parseFloat(g[0]);
          c = parseInt(g[1], 10);
        }
        if (c === undefined) {
          return d;
        }
        if (d.Δⵠⵠᐃⵠ !== "loaded") {
          d.ⵠᐃⵠᐃΔ.push({
            event: "seek",
            action: function () {
              d.ΔⵠᐃⵠᐃΔⲆ.apply(d, g);
            }
          });
          return d;
        }
        var j = d.ΔᐃⵠⲆⵠ(c);
        if (j) {
          if (typeof b != "number" || b < Mn) {
            if (d.ⲆᐃⵠⵠΔ) {
              var k = d.ΔⲆⵠⲆΔⵠᐃ(c) ? f.Δ.currentTime - j.ⵠΔⵠⵠᐃⲆᐃ : 0;
              var a = j.ⵠⲆᐃᐃᐃΔᐃ ? j.ⵠⲆᐃᐃᐃΔᐃ - j.ⵠⵠΔΔᐃ : 0;
              return j.ⵠⵠΔΔᐃ + (a + k * Math.abs(j.ΔΔᐃⵠⲆ));
            }
            return j.ΔΔⲆᐃ.currentTime;
          }
          var l = d.ΔⲆⵠⲆΔⵠᐃ(c);
          if (l) {
            d.pause(c, !Lu);
          }
          j.ⵠⵠΔΔᐃ = b;
          j.ⲆⲆΔᐃⵠ = !bt;
          d.ⲆΔⲆⵠⲆᐃᐃ(c);
          if (l) {
            d.play(c, true);
          }
          if (!d.ⲆᐃⵠⵠΔ && j.ΔΔⲆᐃ) {
            j.ΔΔⲆᐃ.currentTime = b;
          }
          d.ⵠᐃΔΔⲆ("seek", c);
        }
        return d;
      },
      ΔⲆⵠⲆΔⵠᐃ: function (a) {
        var b = this;
        if (typeof a == "number") {
          var c = b.ΔᐃⵠⲆⵠ(a);
          return !!c && !c.ⲆΔⵠΔΔ;
        }
        for (var d = xb; d < b.ΔⲆᐃⲆᐃ.length; d++) {
          if (!b.ΔⲆᐃⲆᐃ[d].ⲆΔⵠΔΔ) {
            return true;
          }
        }
        return false;
      },
      duration: function (a) {
        var b = this;
        var c = b.ΔⵠᐃᐃⲆⵠⲆ;
        var d = b.ΔᐃⵠⲆⵠ(a);
        if (d) {
          c = b.ᐃⵠⲆΔⵠ[d.ᐃⵠⲆΔⵠ][1] / 1000;
        }
        return c;
      },
      state: function () {
        return this.Δⵠⵠᐃⵠ;
      },
      ΔᐃᐃⵠΔⵠᐃ: function () {
        var b = this;
        for (var c = b.ΔⲆᐃⲆᐃ, d = 0; d < c.length; d++) {
          if (!c[d].ⲆΔⵠΔΔ) {
            b.stop(c[d].ΔᐃⲆΔ);
          }
          if (!b.ⲆᐃⵠⵠΔ) {
            if (!/MSIE |Trident\//.test(f.ⵠᐃⵠΔⲆ && f.ⵠᐃⵠΔⲆ.userAgent)) {
              c[d].ΔΔⲆᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
            c[d].ΔΔⲆᐃ.removeEventListener("error", c[d].ⲆⵠᐃⲆᐃᐃⵠ, false);
            c[d].ΔΔⲆᐃ.removeEventListener(f.ΔΔΔⵠⵠᐃⲆ, c[d].ⲆΔᐃᐃᐃⵠⲆ, false);
          }
          delete c[d].ΔΔⲆᐃ;
          b.ⲆΔⲆⵠⲆᐃᐃ(c[d].ΔᐃⲆΔ);
          var g = f.ᐃⲆΔᐃᐃ.indexOf(b);
          if (g >= 0) {
            f.ᐃⲆΔᐃᐃ.splice(g, ce);
          }
        }
        var h = true;
        for (d = 0; d < f.ᐃⲆΔᐃᐃ.length; d++) {
          if (f.ᐃⲆΔᐃᐃ[d].ⵠΔΔΔΔ === b.ⵠΔΔΔΔ) {
            h = !dn;
            break;
          }
        }
        if (j && h) {
          delete j[b.ⵠΔΔΔΔ];
        }
        f.ᐃΔΔᐃⵠⲆⵠ = false;
        b.Δⵠⵠᐃⵠ = "unloaded";
        b.ΔⲆᐃⲆᐃ = [];
        b = null;
        return null;
      },
      on: function (a, b, c, d) {
        var e = this[hj[sk] + a];
        if (typeof b == "function") {
          e.push(d ? {
            id: c,
            ⲆⲆⲆΔΔ: b,
            once: d
          } : {
            id: c,
            ⲆⲆⲆΔΔ: b
          });
        }
        return this;
      },
      ᐃᐃᐃᐃⲆⵠⵠΔⲆ: function (b, c, d) {
        var e = this;
        var f = e[hj[Pl] + b];
        var g = Lu;
        if (typeof c == "number") {
          d = c;
          c = null;
        }
        if (c || d) {
          for (g = Wh; g < f.length; g++) {
            var h = d === f[g].id;
            if (c === f[g].ⲆⲆⲆΔΔ && h || !c && h) {
              f.splice(g, yl);
              break;
            }
          }
        } else if (b) {
          e["_on" + b] = [];
        } else {
          var j = Object.keys(e);
          for (g = Ko; g < j.length; g++) {
            if (tr === j[g].indexOf("_on") && Array.isArray(e[j[g]])) {
              e[j[g]] = [];
            }
          }
        }
        return e;
      },
      once: function (a, b, c) {
        this.on(a, b, c, 1);
        return this;
      },
      ⵠᐃΔΔⲆ: function (a, b, c) {
        var d = this;
        var e = d["_on" + a];
        for (var f = e.length - 1; f >= yk; f--) {
          if (!e[f].id || e[f].id === b || a === "load") {
            setTimeout(function (a) {
              a.call(this, b, c);
            }.bind(d, e[f].ⲆⲆⲆΔΔ), 0);
            if (e[f].once) {
              d.ᐃᐃᐃᐃⲆⵠⵠΔⲆ(a, e[f].ⲆⲆⲆΔΔ, e[f].id);
            }
          }
        }
        return d;
      },
      ΔⵠⵠⲆⵠΔⲆ: function () {
        var a = this;
        if (a.ⵠᐃⵠᐃΔ.length > tr) {
          var b = a.ⵠᐃⵠᐃΔ[0];
          a.once(b.event, function () {
            a.ⵠᐃⵠᐃΔ.shift();
            a.ΔⵠⵠⲆⵠΔⲆ();
          });
          b.action();
        }
        return a;
      },
      ⲆⲆΔᐃⵠ: function (a) {
        var b = this;
        var c = a.ᐃⵠⲆΔⵠ;
        if (!b.ⲆᐃⵠⵠΔ && b.ΔΔⲆᐃ && !b.ΔΔⲆᐃ.ended) {
          setTimeout(b.ⲆⲆΔᐃⵠ.bind(b, a), 100);
          return b;
        }
        var d = !!a.ⵠᐃΔⲆⲆ || !!b.ᐃⵠⲆΔⵠ[c][2];
        b.ⵠᐃΔΔⲆ("end", a.ΔᐃⲆΔ);
        if (!b.ⲆᐃⵠⵠΔ && d) {
          b.stop(a.ΔᐃⲆΔ, !Wh).play(a.ΔᐃⲆΔ);
        }
        if (b.ⲆᐃⵠⵠΔ && d) {
          b.ⵠᐃΔΔⲆ("play", a.ΔᐃⲆΔ);
          a.ⵠⵠΔΔᐃ = a.ⵠⲆΔⲆⵠ || kq;
          a.ⵠⲆᐃᐃᐃΔᐃ = 0;
          a.ⵠΔⵠⵠᐃⲆᐃ = f.Δ.currentTime;
          var e = (a.ΔⲆΔᐃΔⵠⲆ - a.ⵠⲆΔⲆⵠ) * 1000 / Math.abs(a.ΔΔᐃⵠⲆ);
          b.ᐃⲆΔᐃᐃᐃⲆ[a.ΔᐃⲆΔ] = setTimeout(b.ⲆⲆΔᐃⵠ.bind(b, a), e);
        }
        if (b.ⲆᐃⵠⵠΔ && !d) {
          a.ⲆΔⵠΔΔ = !Wh;
          a.ⲆⲆΔᐃⵠ = true;
          a.ⵠⵠΔΔᐃ = a.ⵠⲆΔⲆⵠ || 0;
          a.ⵠⲆᐃᐃᐃΔᐃ = $t;
          b.ⲆΔⲆⵠⲆᐃᐃ(a.ΔᐃⲆΔ);
          b.ⲆΔΔΔᐃⲆΔ(a.ΔΔⲆᐃ);
          f.ⲆⵠⲆΔΔⵠⵠ();
        }
        if (!b.ⲆᐃⵠⵠΔ && !d) {
          b.stop(a.ΔᐃⲆΔ);
        }
        return b;
      },
      ⲆΔⲆⵠⲆᐃᐃ: function (a) {
        var b = this;
        if (b.ᐃⲆΔᐃᐃᐃⲆ[a]) {
          clearTimeout(b.ᐃⲆΔᐃᐃᐃⲆ[a]);
          delete b.ᐃⲆΔᐃᐃᐃⲆ[a];
        }
        return b;
      },
      ΔᐃⵠⲆⵠ: function (a) {
        for (var b = this, c = Kr; c < b.ΔⲆᐃⲆᐃ.length; c++) {
          if (a === b.ΔⲆᐃⲆᐃ[c].ΔᐃⲆΔ) {
            return b.ΔⲆᐃⲆᐃ[c];
          }
        }
        return null;
      },
      ⵠⲆⵠⲆⵠΔΔᐃⲆ: function () {
        var a = this;
        a.ᐃΔⵠΔⲆᐃΔΔᐃ();
        for (var b = 0; b < a.ΔⲆᐃⲆᐃ.length; b++) {
          if (a.ΔⲆᐃⲆᐃ[b].ⲆⲆΔᐃⵠ) {
            return a.ΔⲆᐃⲆᐃ[b].reset();
          }
        }
        return new d(a);
      },
      ᐃΔⵠΔⲆᐃΔΔᐃ: function () {
        var a = this;
        var b = a.ⵠΔΔⲆΔⲆΔⲆⲆ;
        var c = 0;
        var d = tr;
        if (a.ΔⲆᐃⲆᐃ.length >= b) {
          for (d = Wh; d < a.ΔⲆᐃⲆᐃ.length; d++) {
            if (a.ΔⲆᐃⲆᐃ[d].ⲆⲆΔᐃⵠ) {
              c++;
            }
          }
          for (d = a.ΔⲆᐃⲆᐃ.length - sd; d >= 0; d--) {
            if (c <= b) {
              return;
            }
            if (a.ΔⲆᐃⲆᐃ[d].ⲆⲆΔᐃⵠ) {
              if (a.ⲆᐃⵠⵠΔ && a.ΔⲆᐃⲆᐃ[d].ΔΔⲆᐃ) {
                a.ΔⲆᐃⲆᐃ[d].ΔΔⲆᐃ.disconnect(Dh);
              }
              a.ΔⲆᐃⲆᐃ.splice(d, Fo);
              c--;
            }
          }
        }
      },
      ⲆⵠⲆᐃΔ: function (a) {
        if (a === undefined) {
          var b = [];
          for (var c = Jt; c < this.ΔⲆᐃⲆᐃ.length; c++) {
            b.push(this.ΔⲆᐃⲆᐃ[c].ΔᐃⲆΔ);
          }
          return b;
        }
        return [a];
      },
      ⵠⲆΔⵠΔⵠⲆΔⲆ: function (a) {
        a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ = f.Δ.createBufferSource();
        a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.buffer = j[this.ⵠΔΔΔΔ];
        if (a.ᐃⲆⵠᐃΔ) {
          a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.connect(a.ᐃⲆⵠᐃΔ);
        } else {
          a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.connect(a.ΔΔⲆᐃ);
        }
        a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loop = a.ⵠᐃΔⲆⲆ;
        if (a.ⵠᐃΔⲆⲆ) {
          a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loopStart = a.ⵠⲆΔⲆⵠ || 0;
          a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.loopEnd = a.ΔⲆΔᐃΔⵠⲆ;
        }
        a.ΔΔⲆᐃ.ⵠⲆΔΔⵠ.playbackRate.value = a.ΔΔᐃⵠⲆ;
        return this;
      },
      ⲆΔΔΔᐃⲆΔ: function (a) {
        var b = this;
        if (b.ⲆⲆΔΔⵠⲆⲆ) {
          a.ⵠⲆΔΔⵠ.onended = null;
          a.ⵠⲆΔΔⵠ.disconnect(xb);
          try {
            a.ⵠⲆΔΔⵠ.buffer = b.ⲆⲆΔΔⵠⲆⲆ;
          } catch (a) { }
        }
        a.ⵠⲆΔΔⵠ = null;
        return b;
      }
    };
    function d(a) {
      this.ΔΔᐃⲆᐃⵠΔ = a;
      this.ⵠⲆⵠⲆⲆ();
    }
    d.prototype = {
      ⵠⲆⵠⲆⲆ: function () {
        var a = this;
        var b = a.ΔΔᐃⲆᐃⵠΔ;
        a.ⲆⵠΔⵠⲆ = b.ⲆⵠΔⵠⲆ;
        a.ⵠᐃΔⲆⲆ = b.ⵠᐃΔⲆⲆ;
        a.ⲆᐃⵠⵠⲆ = b.ⲆᐃⵠⵠⲆ;
        a.ΔΔᐃⵠⲆ = b.ΔΔᐃⵠⲆ;
        a.ⵠⵠΔΔᐃ = 0;
        a.ⲆΔⵠΔΔ = true;
        a.ⲆⲆΔᐃⵠ = !Jt;
        a.ᐃⵠⲆΔⵠ = "__default";
        a.ΔᐃⲆΔ = ++f.ΔΔⵠΔⵠⲆⲆ;
        b.ΔⲆᐃⲆᐃ.push(a);
        a.create();
        return a;
      },
      create: function () {
        var a = this;
        var b = a.ΔΔᐃⲆᐃⵠΔ;
        var c = f.ⲆⵠΔⵠⲆ || a.ⲆⵠΔⵠⲆ || a.ΔΔᐃⲆᐃⵠΔ.ⲆⵠΔⵠⲆ ? Lg : a.ⲆᐃⵠⵠⲆ;
        if (b.ⲆᐃⵠⵠΔ) {
          a.ΔΔⲆᐃ = f.Δ.createGain === undefined ? f.Δ.ΔᐃᐃⲆⲆᐃΔⲆⲆ() : f.Δ.createGain();
          a.ΔΔⲆᐃ.gain.setValueAtTime(c, f.Δ.currentTime);
          a.ΔΔⲆᐃ.paused = true;
          a.ΔΔⲆᐃ.connect(f.ΔΔΔΔⵠⲆⵠ);
        } else {
          a.ΔΔⲆᐃ = new Audio();
          a.ⲆⵠᐃⲆᐃᐃⵠ = a.ΔΔΔᐃⵠⲆⲆᐃⲆ.bind(a);
          a.ΔΔⲆᐃ.addEventListener("error", a.ⲆⵠᐃⲆᐃᐃⵠ, false);
          a.ⲆΔᐃᐃᐃⵠⲆ = a.ⲆⵠⵠⲆⲆΔⲆᐃⲆ.bind(a);
          a.ΔΔⲆᐃ.addEventListener(f.ΔΔΔⵠⵠᐃⲆ, a.ⲆΔᐃᐃᐃⵠⲆ, false);
          a.ΔΔⲆᐃ.src = b.ⵠΔΔΔΔ;
          a.ΔΔⲆᐃ.preload = "auto";
          a.ΔΔⲆᐃ.volume = c * f.volume();
          a.ΔΔⲆᐃ.load();
        }
        return a;
      },
      reset: function () {
        var a = this;
        var b = a.ΔΔᐃⲆᐃⵠΔ;
        a.ⲆⵠΔⵠⲆ = b.ⲆⵠΔⵠⲆ;
        a.ⵠᐃΔⲆⲆ = b.ⵠᐃΔⲆⲆ;
        a.ⲆᐃⵠⵠⲆ = b.ⲆᐃⵠⵠⲆ;
        a.ΔΔᐃⵠⲆ = b.ΔΔᐃⵠⲆ;
        a.ⵠⵠΔΔᐃ = Fj;
        a.ⵠⲆᐃᐃᐃΔᐃ = 0;
        a.ⲆΔⵠΔΔ = true;
        a.ⲆⲆΔᐃⵠ = !kq;
        a.ᐃⵠⲆΔⵠ = "__default";
        a.ΔᐃⲆΔ = ++f.ΔΔⵠΔⵠⲆⲆ;
        return a;
      },
      ΔΔΔᐃⵠⲆⲆᐃⲆ: function () {
        var a = this;
        a.ΔΔᐃⲆᐃⵠΔ.ⵠᐃΔΔⲆ("loaderror", a.ΔᐃⲆΔ, a.ΔΔⲆᐃ.error ? a.ΔΔⲆᐃ.error.code : 0);
        a.ΔΔⲆᐃ.removeEventListener("error", a.ⲆⵠᐃⲆᐃᐃⵠ, !js);
      },
      ⲆⵠⵠⲆⲆΔⲆᐃⲆ: function () {
        var a = this;
        var b = a.ΔΔᐃⲆᐃⵠΔ;
        b.ΔⵠᐃᐃⲆⵠⲆ = Math.ceil(Ke * a.ΔΔⲆᐃ.duration) / bb;
        if (Object.keys(b.ᐃⵠⲆΔⵠ).length === 0) {
          b.ᐃⵠⲆΔⵠ = {
            ΔΔΔⵠΔⲆΔᐃΔ: [tr, b.ΔⵠᐃᐃⲆⵠⲆ * 1000]
          };
        }
        if (b.Δⵠⵠᐃⵠ !== "loaded") {
          b.Δⵠⵠᐃⵠ = "loaded";
          b.ⵠᐃΔΔⲆ("load");
          b.ΔⵠⵠⲆⵠΔⲆ();
        }
        a.ΔΔⲆᐃ.removeEventListener(f.ΔΔΔⵠⵠᐃⲆ, a.ⲆΔᐃᐃᐃⵠⲆ, false);
      }
    };
    var j = {};
    function e(b) {
      var c = b.ⵠΔΔΔΔ;
      if (j[c]) {
        b.ΔⵠᐃᐃⲆⵠⲆ = j[c].duration;
        a(b);
        return;
      }
      if (/^data:[^;]+;base64,/.test(c)) {
        for (var d = atob(c.split(",")[1]), e = new Uint8Array(d.length), f = 0; f < d.length; ++f) {
          e[f] = d.charCodeAt(f);
        }
        m(e.buffer, b);
      } else {
        var g = new XMLHttpRequest();
        g.open("GET", c, !Jt);
        g.responseType = "arraybuffer";
        g.onload = function () {
          var a = (g.status + "")[Fj];
          if (a === "0" || a === "2" || a === "3") {
            m(g.response, b);
          } else {
            b.ⵠᐃΔΔⲆ("loaderror", null, "Failed loading audio file with status: " + g.status + ".");
          }
        };
        g.onerror = function () {
          if (b.ⲆᐃⵠⵠΔ) {
            b.ⵠΔⵠΔⵠⲆᐃ = !Kr;
            b.ⲆᐃⵠⵠΔ = !Eg;
            b.ΔⲆᐃⲆᐃ = [];
            delete j[c];
            b.load();
          }
        };
        k(g);
      }
    }
    function k(a) {
      try {
        a.send();
      } catch (b) {
        a.onerror();
      }
    }
    function m(b, c) {
      f.Δ.decodeAudioData(b, function (b) {
        if (b && c.ΔⲆᐃⲆᐃ.length > $t) {
          j[c.ⵠΔΔΔΔ] = b;
          a(c, b);
        }
      }, function () {
        c.ⵠᐃΔΔⲆ("loaderror", null, "Decoding audio data failed.");
      });
    }
    function a(a, b) {
      if (b && !a.ΔⵠᐃᐃⲆⵠⲆ) {
        a.ΔⵠᐃᐃⲆⵠⲆ = b.duration;
      }
      if (Object.keys(a.ᐃⵠⲆΔⵠ).length === 0) {
        a.ᐃⵠⲆΔⵠ = {
          ΔΔΔⵠΔⲆΔᐃΔ: [0, a.ΔⵠᐃᐃⲆⵠⲆ * 1000]
        };
      }
      if (a.Δⵠⵠᐃⵠ !== "loaded") {
        a.Δⵠⵠᐃⵠ = "loaded";
        a.ⵠᐃΔΔⲆ("load");
        a.ΔⵠⵠⲆⵠΔⲆ();
      }
    }
    function h() {
      try {
        if (typeof AudioContext != "undefined") {
          f.Δ = new AudioContext();
        } else if (typeof ᐃΔᐃΔⲆⲆΔᐃⵠ != "undefined") {
          f.Δ = new ᐃΔᐃΔⲆⲆΔᐃⵠ();
        } else {
          f.ⲆⲆⵠᐃⲆ = !Eg;
        }
      } catch (a) {
        f.ⲆⲆⵠᐃⲆ = false;
      }
      var a = /iP(hone|od|ad)/.test(f.ⵠᐃⵠΔⲆ && f.ⵠᐃⵠΔⲆ.platform);
      var b = f.ⵠᐃⵠΔⲆ && f.ⵠᐃⵠΔⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
      var c = b ? parseInt(b[1], 10) : null;
      if (a && c && c < 9) {
        var d = /safari/.test(f.ⵠᐃⵠΔⲆ && f.ⵠᐃⵠΔⲆ.userAgent.toLowerCase());
        if (f.ⵠᐃⵠΔⲆ && f.ⵠᐃⵠΔⲆ.ⲆⵠᐃⵠᐃΔᐃΔᐃ && !d || f.ⵠᐃⵠΔⲆ && !f.ⵠᐃⵠΔⲆ.ⲆⵠᐃⵠᐃΔᐃΔᐃ && !d) {
          f.ⲆⲆⵠᐃⲆ = false;
        }
      }
      if (f.ⲆⲆⵠᐃⲆ) {
        f.ΔΔΔΔⵠⲆⵠ = f.Δ.createGain === undefined ? f.Δ.ΔᐃᐃⲆⲆᐃΔⲆⲆ() : f.Δ.createGain();
        f.ΔΔΔΔⵠⲆⵠ.gain.value = f.ⲆⵠΔⵠⲆ ? 0 : Cs;
        f.ΔΔΔΔⵠⲆⵠ.connect(f.Δ.destination);
      }
      f.ⲆⲆⲆⲆΔΔΔ();
    }
    if (typeof ᐃᐃⲆⵠᐃⵠⵠ == "function" && ᐃᐃⲆⵠᐃⵠⵠ.ⵠⵠᐃⲆΔΔᐃ) {
      ᐃᐃⲆⵠᐃⵠⵠ([], function () {
        return {
          Howler: f,
          Howl: c
        };
      });
    }
    if (typeof ⲆⵠΔᐃΔᐃᐃ != "undefined") {
      ⲆⵠΔᐃΔᐃᐃ.Howler = f;
      ⲆⵠΔᐃΔᐃᐃ.Howl = c;
    }
    if (typeof Vf != "undefined") {
      Vf.ⲆⲆⲆⵠΔⲆⲆ = b;
      Vf.Howler = f;
      Vf.Howl = c;
      Vf.ᐃⲆⲆⵠⲆΔᐃ = d;
    } else if (typeof ΔⲆⵠᐃΔⲆᐃ != "undefined") {
      ΔⲆⵠᐃΔⲆᐃ.ⲆⲆⲆⵠΔⲆⲆ = b;
      ΔⲆⵠᐃΔⲆᐃ.Howler = f;
      ΔⲆⵠᐃΔⲆᐃ.Howl = c;
      ΔⲆⵠᐃΔⲆᐃ.ᐃⲆⲆⵠⲆΔᐃ = d;
    }
  })();
  (function () {
    ⲆⲆⲆⵠΔⲆⲆ.prototype.ⲆⵠΔᐃⲆ = [kq, Gd, 0];
    ⲆⲆⲆⵠΔⲆⲆ.prototype.ⵠᐃᐃΔⵠ = [0, Lu, -V, 0, Aj, 0];
    ⲆⲆⲆⵠΔⲆⲆ.prototype.ΔΔᐃⵠᐃⵠⲆ = function (a) {
      var b = this;
      if (!b.Δ || !b.Δ.listener) {
        return b;
      }
      for (var c = b.ᐃⲆΔᐃᐃ.length - 1; c >= Ko; c--) {
        b.ᐃⲆΔᐃᐃ[c].ΔΔᐃⵠᐃⵠⲆ(a);
      }
      return b;
    };
    ⲆⲆⲆⵠΔⲆⲆ.prototype.ⵠⵠᐃᐃ = function (a, b, c) {
      var d = this;
      if (d.Δ && d.Δ.listener) {
        b = typeof b != "number" ? d.ⲆⵠΔᐃⲆ[1] : b;
        c = typeof c != "number" ? d.ⲆⵠΔᐃⲆ[eh] : c;
        if (typeof a != "number") {
          return d.ⲆⵠΔᐃⲆ;
        } else {
          d.ⲆⵠΔᐃⲆ = [a, b, c];
          d.Δ.listener.setPosition(d.ⲆⵠΔᐃⲆ[0], d.ⲆⵠΔᐃⲆ[1], d.ⲆⵠΔᐃⲆ[2]);
          return d;
        }
      } else {
        return d;
      }
    };
    ⲆⲆⲆⵠΔⲆⲆ.prototype.orientation = function (b, c, d, e, f, g) {
      var h = this;
      if (!h.Δ || !h.Δ.listener) {
        return h;
      }
      var a = h.ⵠᐃᐃΔⵠ;
      c = typeof c != "number" ? a[1] : c;
      d = typeof d != "number" ? a[2] : d;
      e = typeof e != "number" ? a[B] : e;
      f = typeof f != "number" ? a[4] : f;
      g = typeof g != "number" ? a[5] : g;
      if (typeof b != "number") {
        return a;
      } else {
        h.ⵠᐃᐃΔⵠ = [b, c, d, e, f, g];
        h.Δ.listener.setOrientation(b, c, d, e, f, g);
        return h;
      }
    };
    Howl.prototype.ⵠⲆⵠⲆⲆ = function (a) {
      return function (b) {
        var c = this;
        c.ⵠᐃᐃΔⵠ = b.orientation || [er, 0, 0];
        c.ⲆⵠⵠᐃⵠᐃⲆ = b.ΔΔᐃⵠᐃⵠⲆ || null;
        c.ⲆⵠΔᐃⲆ = b.ⵠⵠᐃᐃ || null;
        c.ΔΔⵠⵠᐃ = {
          coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
          coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
          coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : Dh,
          distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
          maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
          panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
          refDistance: b.refDistance !== undefined ? b.refDistance : 1,
          rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
        };
        c.ΔᐃΔΔᐃⲆⲆⵠⵠ = b.ᐃᐃᐃⲆᐃⲆΔᐃΔ ? [{
          ⲆⲆⲆΔΔ: b.ᐃᐃᐃⲆᐃⲆΔᐃΔ
        }] : [];
        c.ΔΔⵠⵠᐃⲆΔΔⲆ = b.ⵠⲆⵠⵠᐃᐃΔⵠᐃ ? [{
          ⲆⲆⲆΔΔ: b.ⵠⲆⵠⵠᐃᐃΔⵠᐃ
        }] : [];
        c.ΔΔᐃⵠᐃⲆⵠⵠⲆ = b.ΔᐃⲆⵠⵠⲆᐃΔᐃ ? [{
          ⲆⲆⲆΔΔ: b.ΔᐃⲆⵠⵠⲆᐃΔᐃ
        }] : [];
        return a.call(this, b);
      };
    }(Howl.prototype.ⵠⲆⵠⲆⲆ);
    Howl.prototype.ΔΔᐃⵠᐃⵠⲆ = function (b, c) {
      var d = this;
      if (!d.ⲆᐃⵠⵠΔ) {
        return d;
      }
      if (d.Δⵠⵠᐃⵠ !== "loaded") {
        d.ⵠᐃⵠᐃΔ.push({
          event: "stereo",
          action: function () {
            d.ΔΔᐃⵠᐃⵠⲆ(b, c);
          }
        });
        return d;
      }
      var e = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
      if (c === undefined) {
        if (typeof b != "number") {
          return d.ⲆⵠⵠᐃⵠᐃⲆ;
        }
        d.ⲆⵠⵠᐃⵠᐃⲆ = b;
        d.ⲆⵠΔᐃⲆ = [b, Mn, yk];
      }
      for (var f = d.ⲆⵠⲆᐃΔ(c), g = Lu; g < f.length; g++) {
        var h = d.ΔᐃⵠⲆⵠ(f[g]);
        if (h) {
          if (typeof b != "number") {
            return h.ⲆⵠⵠᐃⵠᐃⲆ;
          }
          h.ⲆⵠⵠᐃⵠᐃⲆ = b;
          h.ⲆⵠΔᐃⲆ = [b, Mn, Mn];
          if (h.ΔΔⲆᐃ) {
            h.ΔΔⵠⵠᐃ.panningModel = "equalpower";
            if (!h.ᐃⲆⵠᐃΔ || !h.ᐃⲆⵠᐃΔ.pan) {
              a(h, e);
            }
            if (e === "spatial") {
              h.ᐃⲆⵠᐃΔ.setPosition(b, 0, 0);
            } else {
              h.ᐃⲆⵠᐃΔ.pan.value = b;
            }
          }
          d.ⵠᐃΔΔⲆ("stereo", h.ΔᐃⲆΔ);
        }
      }
      return d;
    };
    Howl.prototype.ⵠⵠᐃᐃ = function (b, c, d, e) {
      var f = this;
      if (!f.ⲆᐃⵠⵠΔ) {
        return f;
      }
      if (f.Δⵠⵠᐃⵠ !== "loaded") {
        f.ⵠᐃⵠᐃΔ.push({
          event: "pos",
          action: function () {
            f.ⵠⵠᐃᐃ(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? jj : c;
      d = typeof d != "number" ? -0.5 : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⲆⵠΔᐃⲆ;
        }
        f.ⲆⵠΔᐃⲆ = [b, c, d];
      }
      for (var g = f.ⲆⵠⲆᐃΔ(e), i = jj; i < g.length; i++) {
        var j = f.ΔᐃⵠⲆⵠ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⲆⵠΔᐃⲆ;
          }
          j.ⲆⵠΔᐃⲆ = [b, c, d];
          if (j.ΔΔⲆᐃ) {
            if (!j.ᐃⲆⵠᐃΔ || !!j.ᐃⲆⵠᐃΔ.pan) {
              a(j, "spatial");
            }
            j.ᐃⲆⵠᐃΔ.setPosition(b, c, d);
          }
          f.ⵠᐃΔΔⲆ("pos", j.ΔᐃⲆΔ);
        }
      }
      return f;
    };
    Howl.prototype.orientation = function (b, c, d, e) {
      var f = this;
      if (!f.ⲆᐃⵠⵠΔ) {
        return f;
      }
      if (f.Δⵠⵠᐃⵠ !== "loaded") {
        f.ⵠᐃⵠᐃΔ.push({
          event: "orientation",
          action: function () {
            f.orientation(b, c, d, e);
          }
        });
        return f;
      }
      c = typeof c != "number" ? f.ⵠᐃᐃΔⵠ[Ud] : c;
      d = typeof d != "number" ? f.ⵠᐃᐃΔⵠ[yh] : d;
      if (e === undefined) {
        if (typeof b != "number") {
          return f.ⵠᐃᐃΔⵠ;
        }
        f.ⵠᐃᐃΔⵠ = [b, c, d];
      }
      for (var g = f.ⲆⵠⲆᐃΔ(e), i = Mn; i < g.length; i++) {
        var j = f.ΔᐃⵠⲆⵠ(g[i]);
        if (j) {
          if (typeof b != "number") {
            return j.ⵠᐃᐃΔⵠ;
          }
          j.ⵠᐃᐃΔⵠ = [b, c, d];
          if (j.ΔΔⲆᐃ) {
            if (!j.ᐃⲆⵠᐃΔ) {
              j.ⲆⵠΔᐃⲆ ||= f.ⲆⵠΔᐃⲆ || [0, 0, -0.5];
              a(j, "spatial");
            }
            j.ᐃⲆⵠᐃΔ.setOrientation(b, c, d);
          }
          f.ⵠᐃΔΔⲆ("orientation", j.ΔᐃⲆΔ);
        }
      }
      return f;
    };
    Howl.prototype.ⲆⵠⲆⵠΔⲆΔΔⵠ = function () {
      var b;
      var c;
      var d;
      var e = this;
      var f = arguments;
      if (!e.ⲆᐃⵠⵠΔ) {
        return e;
      }
      if (f.length === 0) {
        return e.ΔΔⵠⵠᐃ;
      }
      if (ik === f.length) {
        if (typeof f[0] != "object") {
          if (d = e.ΔᐃⵠⲆⵠ(parseInt(f[Ko], wh))) {
            return d.ΔΔⵠⵠᐃ;
          } else {
            return e.ΔΔⵠⵠᐃ;
          }
        }
        b = f[0];
        if (c === undefined) {
          e.ΔΔⵠⵠᐃ = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : e.ⲆⵠⲆⲆⲆΔΔᐃᐃ,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : e.ⲆᐃΔΔⲆⵠⵠΔΔ,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : e.ΔΔⲆΔⲆΔⲆᐃΔ,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : e.ⲆⲆⲆⵠⲆⲆΔⵠᐃ,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : e.ⵠⲆⲆᐃΔᐃⲆΔⲆ,
            panningModel: b.panningModel !== undefined ? b.panningModel : e.ΔⵠᐃⲆⲆⵠᐃⵠⲆ,
            refDistance: b.refDistance !== undefined ? b.refDistance : e.ⵠΔⵠⵠⲆᐃΔⵠⲆ,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : e.ⵠⵠΔⵠⵠⵠΔⲆΔ
          };
        }
      } else if (Le === f.length) {
        b = f[0];
        c = parseInt(f[Eg], 10);
      }
      for (var g = e.ⲆⵠⲆᐃΔ(c), j = 0; j < g.length; j++) {
        if (d = e.ΔᐃⵠⲆⵠ(g[j])) {
          var k = d.ΔΔⵠⵠᐃ;
          k = {
            coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : k.coneInnerAngle,
            coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : k.coneOuterAngle,
            coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : k.coneOuterGain,
            distanceModel: b.distanceModel !== undefined ? b.distanceModel : k.distanceModel,
            maxDistance: b.maxDistance !== undefined ? b.maxDistance : k.maxDistance,
            panningModel: b.panningModel !== undefined ? b.panningModel : k.panningModel,
            refDistance: b.refDistance !== undefined ? b.refDistance : k.refDistance,
            rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : k.rolloffFactor
          };
          var m = d.ᐃⲆⵠᐃΔ;
          if (m) {
            m.coneInnerAngle = k.coneInnerAngle;
            m.coneOuterAngle = k.coneOuterAngle;
            m.coneOuterGain = k.coneOuterGain;
            m.distanceModel = k.distanceModel;
            m.maxDistance = k.maxDistance;
            m.panningModel = k.panningModel;
            m.refDistance = k.refDistance;
            m.rolloffFactor = k.rolloffFactor;
          } else {
            d.ⲆⵠΔᐃⲆ ||= e.ⲆⵠΔᐃⲆ || [0, $t, -0.5];
            a(d, "spatial");
          }
        }
      }
      return e;
    };
    ᐃⲆⲆⵠⲆΔᐃ.prototype.ⵠⲆⵠⲆⲆ = function (a) {
      return function () {
        var b = this;
        var c = b.ΔΔᐃⲆᐃⵠΔ;
        b.ⵠᐃᐃΔⵠ = c.ⵠᐃᐃΔⵠ;
        b.ⲆⵠⵠᐃⵠᐃⲆ = c.ⲆⵠⵠᐃⵠᐃⲆ;
        b.ⲆⵠΔᐃⲆ = c.ⲆⵠΔᐃⲆ;
        b.ΔΔⵠⵠᐃ = c.ΔΔⵠⵠᐃ;
        a.call(this);
        if (b.ⲆⵠⵠᐃⵠᐃⲆ) {
          c.ΔΔᐃⵠᐃⵠⲆ(b.ⲆⵠⵠᐃⵠᐃⲆ);
        } else if (b.ⲆⵠΔᐃⲆ) {
          c.ⵠⵠᐃᐃ(b.ⲆⵠΔᐃⲆ[0], b.ⲆⵠΔᐃⲆ[Eg], b.ⲆⵠΔᐃⲆ[_t], b.ΔᐃⲆΔ);
        }
      };
    }(ᐃⲆⲆⵠⲆΔᐃ.prototype.ⵠⲆⵠⲆⲆ);
    ᐃⲆⲆⵠⲆΔᐃ.prototype.reset = function (a) {
      return function () {
        var b = this;
        var c = b.ΔΔᐃⲆᐃⵠΔ;
        b.ⵠᐃᐃΔⵠ = c.ⵠᐃᐃΔⵠ;
        b.ⲆⵠΔᐃⲆ = c.ⲆⵠΔᐃⲆ;
        b.ΔΔⵠⵠᐃ = c.ΔΔⵠⵠᐃ;
        return a.call(this);
      };
    }(ᐃⲆⲆⵠⲆΔᐃ.prototype.reset);
    function a(a, b) {
      b = b || "spatial";
      if (b === "spatial") {
        a.ᐃⲆⵠᐃΔ = Howler.Δ.createPanner();
        a.ᐃⲆⵠᐃΔ.coneInnerAngle = a.ΔΔⵠⵠᐃ.coneInnerAngle;
        a.ᐃⲆⵠᐃΔ.coneOuterAngle = a.ΔΔⵠⵠᐃ.coneOuterAngle;
        a.ᐃⲆⵠᐃΔ.coneOuterGain = a.ΔΔⵠⵠᐃ.coneOuterGain;
        a.ᐃⲆⵠᐃΔ.distanceModel = a.ΔΔⵠⵠᐃ.distanceModel;
        a.ᐃⲆⵠᐃΔ.maxDistance = a.ΔΔⵠⵠᐃ.maxDistance;
        a.ᐃⲆⵠᐃΔ.panningModel = a.ΔΔⵠⵠᐃ.panningModel;
        a.ᐃⲆⵠᐃΔ.refDistance = a.ΔΔⵠⵠᐃ.refDistance;
        a.ᐃⲆⵠᐃΔ.rolloffFactor = a.ΔΔⵠⵠᐃ.rolloffFactor;
        a.ᐃⲆⵠᐃΔ.setPosition(a.ⲆⵠΔᐃⲆ[0], a.ⲆⵠΔᐃⲆ[er], a.ⲆⵠΔᐃⲆ[xl]);
        a.ᐃⲆⵠᐃΔ.setOrientation(a.ⵠᐃᐃΔⵠ[0], a.ⵠᐃᐃΔⵠ[1], a.ⵠᐃᐃΔⵠ[Le]);
      } else {
        a.ᐃⲆⵠᐃΔ = Howler.Δ.createStereoPanner();
        a.ᐃⲆⵠᐃΔ.pan.value = a.ⲆⵠⵠᐃⵠᐃⲆ;
      }
      a.ᐃⲆⵠᐃΔ.connect(a.ΔΔⲆᐃ);
      if (!a.ⲆΔⵠΔΔ) {
        a.ΔΔᐃⲆᐃⵠΔ.pause(a.ΔᐃⲆΔ, true).play(a.ΔᐃⲆΔ);
      }
    }
  })();
  var Mw = Aj;
  var Nw = Yt;
  var Ow = {
    ⲆΔⵠⵠ: fg,
    Ⲇᐃᐃⵠⵠ: lk,
    ᐃⵠᐃΔⲆᐃΔⲆⵠ: b,
    ΔⲆⲆΔⵠΔⲆ: 3000,
    ⲆΔⵠⵠᐃᐃⲆ: 460000,
    ⵠⲆΔ: 6,
    ᐃΔᐃⵠΔΔⲆΔⵠ: 12,
    ΔⲆⲆᐃᐃ: 1,
    ⵠᐃᐃΔΔⲆⵠ: 12,
    ⵠⵠᐃⵠⵠⲆⲆⲆᐃ: 5000,
    ᐃᐃⲆⲆⲆ: ij,
    ΔⵠΔⵠΔⲆᐃⵠⲆ: 5000,
    ⲆⵠᐃⲆΔΔΔᐃⲆ: 5000
  };
  var Pw = [];
  Pw[-dn] = Ow.ΔⲆⲆᐃᐃ;
  Pw[Dr.ⲆⵠⵠⲆⲆ] = Ow.ΔⲆⲆᐃᐃ;
  Pw[Dr.ΔᐃᐃⲆⲆ] = Ow.ΔⲆⲆᐃᐃ;
  Pw[Dr.ⵠΔΔᐃⲆΔᐃⲆⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⵠΔᐃⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⵠⵠΔⵠ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⲆⵠΔⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⲆΔᐃᐃᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔᐃⲆⲆⵠ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔⲆⵠΔⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⵠⵠⵠΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⲆᐃΔⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⲆΔᐃΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⲆⲆⵠⵠ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔᐃᐃⲆΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⲆΔⵠⲆᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔᐃⲆⵠΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⲆΔⵠΔⵠ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠΔⵠΔΔⵠᐃᐃΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⵠⲆⵠΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⲆⵠⲆⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⲆᐃᐃΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔⲆⲆⵠⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔⵠⲆⵠⵠ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠⲆᐃⲆᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⲆᐃᐃΔⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⵠⵠⵠΔⲆⲆᐃⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⲆᐃᐃᐃⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ΔᐃᐃΔⲆ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠᐃᐃΔᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.Ⲇᐃᐃⵠᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠΔᐃⵠᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠᐃⲆⲆΔ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ⵠΔΔⲆΔ] = Ow.ᐃᐃⲆⲆⲆ;
  if (Vf.ⲆⲆⵠⲆΔⵠⵠⵠⵠ) {
    var Qw = Vf.Math.acos;
    Vf.Math.acos = Vf.Math.asin;
    Vf.Math.asin = Qw;
    var Rw = Vf.Math.acos;
    Vf.Math.acos = Vf.Math.asin;
    Vf.Math.asin = Rw;
  }
  Pw[Dr.ΔΔΔⲆᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.ᐃⲆⵠⲆᐃ] = Ow.ᐃᐃⲆⲆⲆ;
  Pw[Dr.Ⲇᐃᐃⵠⵠ] = Ow.Ⲇᐃᐃⵠⵠ;
  Pw[Dr.ⲆΔⵠⵠⲆ] = Ow.Ⲇᐃᐃⵠⵠ;
  Pw[Dr.ΔⵠᐃΔᐃ] = Ow.Ⲇᐃᐃⵠⵠ;
  Pw[Dr.ᐃⵠΔᐃⵠ] = Ow.Ⲇᐃᐃⵠⵠ;
  ΔΔΔΔ = [];
  ΔΔΔΔ[0] = 0;
  ΔΔΔΔ[yl] = er;
  ΔΔΔΔ[2] = Yt;
  ΔΔΔΔ[3] = 1;
  ΔΔΔΔ[Ai] = Jt;
  ΔΔΔΔ[5] = Lg;
  ΔΔΔΔ[6] = 0;
  ΔΔΔΔ[7] = xb;
  ΔΔΔΔ[lr] = yk;
  ΔΔΔΔ[9] = ko;
  ΔΔΔΔ[10] = 1;
  ΔΔΔΔ[11] = 1;
  ΔΔΔΔ[12] = 1;
  ΔΔΔΔ[13] = 1;
  ΔΔΔΔ[14] = 1;
  ΔΔΔΔ[sl] = jh;
  ΔΔΔΔ[16] = jj;
  ΔΔΔΔ[ok] = 0;
  ΔΔΔΔ[no] = Lu;
  ΔΔΔΔ[19] = 0;
  ΔΔΔΔ[20] = 0;
  ΔΔΔΔ[21] = 0;
  ΔΔΔΔ[22] = 0;
  ΔΔΔΔ[23] = 1;
  ΔΔΔΔ[24] = 1;
  ΔΔΔΔ[25] = 1;
  ΔΔΔΔ[26] = Aj;
  ΔΔΔΔ[27] = 1;
  ΔΔΔΔ[28] = yl;
  ΔΔΔΔ[29] = ce;
  ΔΔΔΔ[30] = jh;
  ΔΔΔΔ[31] = dn;
  ΔΔΔΔ[32] = ce;
  ΔΔΔΔ[33] = 1;
  ΔΔΔΔ[34] = Yt;
  ΔΔΔΔ[35] = ub;
  ΔΔΔΔ[36] = V;
  ΔΔΔΔ[37] = V;
  ΔΔΔΔ[38] = Yt;
  ΔΔΔΔ[40] = 0;
  ΔΔΔΔ[41] = 0;
  ΔΔΔΔ[42] = tr;
  ΔΔΔΔ[50] = 1;
  ΔΔΔΔ[51] = 1;
  ΔΔΔΔ[52] = 1;
  ΔΔΔΔ[55] = 0;
  ΔΔΔΔ[56] = 0;
  ΔΔΔΔ[57] = 0;
  ΔΔΔΔ[58] = yk;
  ΔⵠⵠᐃⲆ = [];
  ΔⵠⵠᐃⲆ[ew.ᐃᐃΔⲆⲆ] = 0;
  ΔⵠⵠᐃⲆ[ew.ⵠᐃΔΔᐃ] = Dh;
  ΔⵠⵠᐃⲆ[ew.ⵠⵠⲆΔΔ] = 0;
  ΔⵠⵠᐃⲆ[ew.Ⲇⵠᐃⵠᐃ] = $t;
  ΔⵠⵠᐃⲆ[ew.ΔⵠᐃᐃΔ] = -1;
  ΔⵠⵠᐃⲆ[ew.ΔΔⲆᐃᐃ] = -jh;
  ΔⵠⵠᐃⲆ[ew.ᐃⵠΔⲆᐃ] = Ol;
  ΔⵠⵠᐃⲆ[ew.ᐃⲆⲆⲆᐃ] = 0;
  ΔⵠⵠᐃⲆ[ew.ᐃⲆΔⲆⲆ] = 0;
  ΔⵠⵠᐃⲆ[ew.ΔⵠΔΔⲆ] = 0;
  ΔⵠⵠᐃⲆ[ew.ᐃⲆΔⵠⵠ] = Br;
  ΔⵠⵠᐃⲆ[ew.ᐃΔΔΔΔ] = Ud;
  ΔⵠⵠᐃⲆ[ew.ⲆⲆΔⵠⵠ] = 1;
  ΔⵠⵠᐃⲆ[ew.ᐃⵠⵠΔⵠ] = yl;
  ΔⵠⵠᐃⲆ[ew.ⲆⲆᐃⲆΔ] = bt;
  ΔⵠⵠᐃⲆ[ew.ΔⲆᐃⲆⵠ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⲆⲆᐃⲆᐃ] = 1;
  ΔⵠⵠᐃⲆ[ew.ᐃΔⲆᐃᐃ] = 0;
  ΔⵠⵠᐃⲆ[ew.Ⲇᐃⵠⵠⵠ] = Cs;
  ΔⵠⵠᐃⲆ[ew.ⲆΔⲆᐃᐃ] = Ud;
  ΔⵠⵠᐃⲆ[ew.ᐃᐃᐃΔⵠ] = 1;
  ΔⵠⵠᐃⲆ[ew.ᐃᐃᐃᐃⵠ] = wg;
  ΔⵠⵠᐃⲆ[ew.ᐃᐃⵠΔⵠ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⵠⵠΔⲆⲆ] = 0;
  ΔⵠⵠᐃⲆ[ew.ΔΔΔΔⲆ] = 1;
  ΔⵠⵠᐃⲆ[ew.ᐃᐃⲆᐃⲆ] = dn;
  ΔⵠⵠᐃⲆ[ew.ᐃⵠᐃⲆΔ] = Eg;
  ΔⵠⵠᐃⲆ[ew.ΔΔⵠᐃⲆ] = V;
  ΔⵠⵠᐃⲆ[ew.ⲆⲆΔᐃⲆ] = 1;
  ΔⵠⵠᐃⲆ[ew.ᐃⵠᐃΔⲆ] = $t;
  ΔⵠⵠᐃⲆ[ew.ᐃⵠⲆⵠⵠ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⵠΔⲆⵠᐃ] = 1;
  ΔⵠⵠᐃⲆ[ew.ΔⵠⲆⵠΔ] = js;
  ΔⵠⵠᐃⲆ[ew.ΔⵠⲆⵠⲆ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⲆΔⵠⵠᐃ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⲆⵠᐃᐃⲆ] = 1;
  ΔⵠⵠᐃⲆ[ew.ⲆΔᐃⲆⲆ] = jh;
  ΔⵠⵠᐃⲆ[ew.ᐃᐃᐃⵠᐃ] = er;
  ΔⵠⵠᐃⲆ[ew.ⲆΔΔⲆⵠ] = Gd;
  ΔⵠⵠᐃⲆ[ew.ⵠⲆⵠⵠᐃ] = 1;
  var Sw = {
    ᐃⵠⲆⲆⲆⵠⵠ: {
      ⲆᐃΔⲆⲆ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        d0: [90086, 300, false],
        d1: [90391, 300, kk],
        d2: [90684, 300, false]
      },
      sample: {
        d0: Ow.ⲆΔⵠⵠ,
        d1: Ow.ⲆΔⵠⵠ,
        d2: Ow.ⲆΔⵠⵠ
      }
    },
    ΔᐃⲆΔⵠᐃΔ: {
      ⲆᐃΔⲆⲆ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        p0: [89303, 300, false],
        p2: [89815, 300, M],
        p1: [89549, 300, false]
      },
      sample: {
        p0: Ow.ⲆΔⵠⵠ,
        p1: Ow.ⲆΔⵠⵠ,
        p2: Ow.ⲆΔⵠⵠ
      }
    },
    ⲆᐃᐃΔⲆΔΔ: {
      ⲆᐃΔⲆⲆ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        w0: [88195, 300, Jn],
        w3: [89025, 300, false],
        w2: [88751, 300, fl],
        w1: [88473, 300, kk]
      },
      sample: {
        w0: Ow.ⲆΔⵠⵠ,
        w1: Ow.ⲆΔⵠⵠ,
        w2: Ow.ⲆΔⵠⵠ,
        w3: Ow.ⲆΔⵠⵠ
      }
    },
    ⲆΔᐃⵠⲆⲆᐃ: {
      ⲆᐃΔⲆⲆ: null,
      path: ["audio/ambience.mp3"],
      ΔΔ: {
        ⵠⲆⲆⵠΔΔᐃ: [66961, 21223, Pg],
        ⲆᐃᐃⵠᐃⲆⲆ: [19882, 8301, true],
        ᐃⲆⵠⲆⲆⵠⲆ: [91022, 400, false],
        ᐃΔΔΔⲆ: [28380, 1797, vi],
        Ⲇⵠⵠᐃⵠⵠᐃ: [66014, 925, Vn],
        ΔΔⵠⵠᐃᐃⵠ: [92249, 500, false],
        ΔⵠΔⵠᐃ: [12356, 6965, Rl],
        ⵠⵠⲆⲆᐃⲆΔ: [3100, 8800, true],
        ⲆᐃᐃΔᐃΔΔ: [66961, 21223, true],
        ⲆⵠⵠᐃⲆⲆⲆ: [30562, 655, true],
        ᐃΔⵠⵠΔΔΔⵠΔ: [100, 2800, mn],
        ΔΔⵠⲆᐃⵠᐃ: [31658, 813, true],
        ⲆⵠᐃΔⲆΔⲆ: [32604, 21890, Oh],
        ᐃᐃⵠⵠᐃ: [91431, 400, kk],
        ΔᐃΔⵠΔⵠⵠ: [54524, 11393, Rl]
      },
      sample: {
        ᐃΔⵠⵠΔΔΔⵠΔ: 1,
        ⵠⵠⲆⲆᐃⲆΔ: 1,
        ⲆᐃᐃⵠᐃⲆⲆ: Br,
        ⲆⵠᐃΔⲆΔⲆ: 1,
        ΔᐃΔⵠΔⵠⵠ: 1,
        ⵠⲆⲆⵠΔΔᐃ: sd,
        ⲆᐃᐃΔᐃΔΔ: 1,
        ΔⵠΔⵠᐃ: Ow.ⲆΔⵠⵠ,
        ᐃΔΔΔⲆ: Ow.ⲆΔⵠⵠ,
        ⲆⵠⵠᐃⲆⲆⲆ: Ow.ⲆΔⵠⵠ,
        ΔΔⵠⲆᐃⵠᐃ: Ow.ⲆΔⵠⵠ,
        Ⲇⵠⵠᐃⵠⵠᐃ: Ow.ⲆΔⵠⵠ,
        ᐃⲆⵠⲆⲆⵠⲆ: Ow.ⵠⲆΔ,
        ᐃᐃⵠⵠᐃ: Ow.ⵠⲆΔ,
        ΔΔⵠⵠᐃᐃⵠ: Ow.ⵠⲆΔ
      }
    }
  };
  function Tw(b, c, d, e, f, i, j, a, k, h, l) {
    this.r = 1;
    this.ΔⵠᐃⲆⲆ = b;
    this.ⲆᐃΔΔⲆᐃΔ = b;
    this.ᐃⵠᐃ = c;
    this.Δⵠⵠ = d;
    this.fade = e;
    this.ⵠΔⲆⵠΔΔⲆ = f;
    this.ⲆⵠΔⲆᐃᐃⵠ = i;
    this.ᐃⲆⲆΔ = j;
    this.ᐃⵠᐃⵠΔΔᐃ = a;
    this.source = k;
    this.source.ⵠΔⵠⵠᐃⵠΔ = k.x + k.w;
    this.source.ΔⵠⵠⲆΔ = k.y + k.ᐃⵠⲆ;
    this.ᐃᐃⵠᐃᐃΔΔⲆᐃ = h;
    this.ⲆⲆΔΔᐃᐃΔ = l;
    this.ⲆⵠΔΔᐃᐃᐃ = Gd;
    this.ⲆᐃᐃⵠᐃᐃⲆ = {
      d: 5,
      ⵠⲆᐃΔ: 5
    };
    this.ⵠⵠⵠΔᐃ = function () {
      this.ΔⵠᐃⲆⲆ -= pf;
      if (this.ΔⵠᐃⲆⲆ < 0) {
        this.ΔⵠᐃⲆⲆ = this.ⲆᐃΔΔⲆᐃΔ;
        var a = Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ.playing(this.ᐃⵠᐃ);
        var b = Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ.playing(this.Δⵠⵠ);
        if (a && !b) {
          var c = Nw * this.ᐃⲆⲆΔ.volume(this.ᐃⵠᐃ);
          var d = Nw * (this.ⲆⵠΔⲆᐃᐃⵠ * Math.random() + this.ⵠΔⲆⵠΔΔⲆ);
          this.ᐃⲆⲆΔ.fade(c, d, this.fade, this.ᐃⵠᐃ);
        } else if (!a && b) {
          c = Nw * this.ᐃⲆⲆΔ.volume(this.Δⵠⵠ);
          d = (Math.random() * this.ⲆⵠΔⲆᐃᐃⵠ + this.ⵠΔⲆⵠΔΔⲆ) * Nw;
          this.ᐃⲆⲆΔ.fade(c, d, this.fade, this.Δⵠⵠ);
        }
      }
    };
    this.transition = function () {
      this.ΔⵠᐃⲆⲆ = this.ⲆᐃΔΔⲆᐃΔ;
      this.ⲆᐃᐃⵠᐃᐃⲆ.d = this.ⲆᐃᐃⵠᐃᐃⲆ.ⵠⲆᐃΔ;
      if (gf.time) {
        this.ᐃⲆⲆΔ.fade(0, this.ⵠΔⲆⵠΔΔⲆ * Nw, this.ᐃⵠᐃⵠΔΔᐃ, this.ᐃⵠᐃ);
        this.ᐃⲆⲆΔ.play(this.ᐃⵠᐃ);
        if (this.ᐃⲆⲆΔ.playing(this.Δⵠⵠ)) {
          var a = Nw * this.ᐃⲆⲆΔ.volume(this.Δⵠⵠ);
          this.ᐃⲆⲆΔ.fade(a, 0, this.ᐃⵠᐃⵠΔΔᐃ, this.Δⵠⵠ);
        }
      } else {
        this.ᐃⲆⲆΔ.fade(yk, this.ⵠΔⲆⵠΔΔⲆ * Nw, this.ᐃⵠᐃⵠΔΔᐃ, this.Δⵠⵠ);
        this.ᐃⲆⲆΔ.play(this.Δⵠⵠ);
        if (this.ᐃⲆⲆΔ.playing(this.ᐃⵠᐃ)) {
          a = this.ᐃⲆⲆΔ.volume(this.ᐃⵠᐃ) * Nw;
          this.ᐃⲆⲆΔ.fade(a, 0, this.ᐃⵠᐃⵠΔΔᐃ, this.ᐃⵠᐃ);
        }
      }
    };
    this.check = function (a) {
      if (this.ⲆⵠΔΔᐃᐃᐃ) {
        if (ⵠⵠⵠⲆ.ⲆⲆΔΔᐃᐃΔ(a, this.ᐃᐃⵠᐃᐃΔΔⲆᐃ)) {
          if (!Zw.transition && Ow.ⲆΔⵠⵠᐃᐃⲆ > gf.ⲆⲆⵠΔⵠ.now) {
            if (gf.time) {
              if (!this.ᐃⲆⲆΔ.playing(this.ᐃⵠᐃ)) {
                this.ⲆᐃᐃⵠᐃᐃⲆ.d -= pf;
                if (Dh > this.ⲆᐃᐃⵠᐃᐃⲆ.d) {
                  this.transition();
                }
              }
            } else if (!this.ᐃⲆⲆΔ.playing(this.Δⵠⵠ)) {
              this.ⲆᐃᐃⵠᐃᐃⲆ.d -= pf;
              if (this.ⲆᐃᐃⵠᐃᐃⲆ.d < 0) {
                this.transition();
              }
            }
          }
        } else {
          this.ⲆⵠΔΔᐃᐃᐃ = xb;
          if (this.ᐃⲆⲆΔ.playing(this.ᐃⵠᐃ)) {
            var b = Nw * this.ᐃⲆⲆΔ.volume(this.ᐃⵠᐃ);
            this.ᐃⲆⲆΔ.fade(b, 0, this.ᐃⵠᐃⵠΔΔᐃ, this.ᐃⵠᐃ);
          }
          if (this.ᐃⲆⲆΔ.playing(this.Δⵠⵠ)) {
            b = Nw * this.ᐃⲆⲆΔ.volume(this.Δⵠⵠ);
            this.ᐃⲆⲆΔ.fade(b, 0, this.ᐃⵠᐃⵠΔΔᐃ, this.Δⵠⵠ);
          }
        }
      } else if (ⵠⵠⵠⲆ.ⲆⲆΔΔᐃᐃΔ(a, this.ⲆⲆΔΔᐃᐃΔ)) {
        this.ⲆⵠΔΔᐃᐃᐃ = Fo;
        if (!Zw.transition && gf.ⲆⲆⵠΔⵠ.now < Ow.ⲆΔⵠⵠᐃᐃⲆ) {
          this.transition();
        }
      }
    };
    this.Ⲇᐃⵠ = function (a, b) {
      var c;
      var d;
      c = a.x < this.source.x ? Zw.ᐃᐃΔⵠᐃⲆⲆ(this.source.x) : a.x > this.source.ⵠΔⵠⵠᐃⵠΔ ? Zw.ᐃᐃΔⵠᐃⲆⲆ(this.source.ⵠΔⵠⵠᐃⵠΔ) : b.x;
      d = this.source.y > a.y ? Zw.ⵠᐃⵠᐃΔΔΔ(this.source.y) : a.y > this.source.ΔⵠⵠⲆΔ ? Zw.ⵠᐃⵠᐃΔΔΔ(this.source.ΔⵠⵠⲆΔ) : b.y;
      this.ᐃⲆⲆΔ.pos(c, d, -0.5, this.ᐃⵠᐃ);
      this.ᐃⲆⲆΔ.pos(c, d, -0.5, this.Δⵠⵠ);
    };
  }
  ⲆΔⲆⲆΔ = {
    ᐃΔⵠⲆⲆΔᐃ: Er,
    ᐃᐃⲆⲆΔΔⲆⲆⵠ: 0.2,
    ΔᐃⲆⵠⵠᐃᐃ: 0,
    ΔⲆⲆΔΔᐃΔⵠᐃ: 0.2,
    ΔⵠⲆᐃⵠⲆΔ: 3,
    ⵠⲆᐃⲆᐃⵠᐃ: 1,
    ⲆᐃΔⲆⵠⲆΔⲆΔ: 0.2,
    ᐃΔΔᐃΔⲆⲆⵠΔ: 0.4,
    ⵠⵠᐃⲆΔΔⲆ: 300,
    ⲆᐃⲆⵠⵠⵠᐃ: 100,
    ⲆΔᐃⵠⵠ: 2,
    ᐃΔᐃᐃⵠᐃⲆ: xl,
    ⵠⲆⲆⵠⲆⵠⵠ: Il,
    ⵠᐃⵠⲆΔᐃⵠ: 100
  };
  function ef(a, b, c) {
    this.ⵠⲆⲆⵠΔⲆⵠ = a;
    this.c = Lg;
    this.ᐃⲆⲆΔ = b;
    this.ΔᐃⲆᐃΔ = c;
    this.max = c.length;
    this.play = function () {
      this.c = (this.c + wg) % this.max;
      var a = this.ΔᐃⲆᐃΔ[this.c];
      this.ⵠⲆⲆⵠΔⲆⵠ.ᐃΔⵠⵠΔⵠⵠ(this.ᐃⲆⲆΔ, a);
      this.ᐃⲆⲆΔ.play(a);
    };
  }
  function tf(a) {
    this.ΔⲆⲆⲆᐃΔΔ = 1;
    this.ᐃⲆᐃⲆ = 0;
    this.mode = -1;
    this.ᐃΔΔΔⲆ = Zw.sample.ᐃΔΔΔⲆ[a];
    this.ⲆⵠⵠᐃⲆⲆⲆ = Zw.sample.ⲆⵠⵠᐃⲆⲆⲆ[a];
    this.ΔΔⵠⲆᐃⵠᐃ = Zw.sample.ΔΔⵠⲆᐃⵠᐃ[a];
    this.Ⲇⵠⵠᐃⵠⵠᐃ = Zw.sample.Ⲇⵠⵠᐃⵠⵠᐃ[a];
    this.ΔᐃΔᐃⲆᐃⲆ = new ef(this, Sw.ΔᐃⲆΔⵠᐃΔ.ⲆᐃΔⲆⲆ, Zw.ⲆⵠᐃⵠⲆ.ΔᐃΔᐃⲆᐃⲆ[a]);
    this.ⵠΔΔⲆᐃ = new ef(this, Sw.ⲆᐃᐃΔⲆΔΔ.ⲆᐃΔⲆⲆ, Zw.ⲆⵠᐃⵠⲆ.ⵠΔΔⲆᐃ[a]);
    this.ΔᐃⲆΔᐃ = new ef(this, Sw.ᐃⵠⲆⲆⲆⵠⵠ.ⲆᐃΔⲆⲆ, Zw.ⲆⵠᐃⵠⲆ.ΔᐃⲆΔᐃ[a]);
    this.ᐃⵠΔᐃΔ = a;
    this.x = 0;
    this.y = 0;
    this.ⵠⲆᐃⵠⵠ = _s;
    this.ΔⵠᐃⲆⲆ = ⲆΔⲆⲆΔ.ᐃᐃᐃⲆⲆᐃⲆⲆⵠ;
    this.ⵠⵠᐃᐃ = {
      x: Wh,
      y: 0
    };
    this.ⲆⲆᐃⵠⲆ = Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ;
    this.ⵠⵠⲆΔⵠⵠΔⵠⲆ = function (a) {
      if (Ow.ΔⲆⲆᐃᐃ === a) {
        this.ΔᐃΔᐃⲆᐃⲆ.play();
      } else if (a === Ow.ᐃᐃⲆⲆⲆ) {
        this.ⵠΔΔⲆᐃ.play();
      } else if (a === Ow.Ⲇᐃᐃⵠⵠ) {
        this.ΔᐃⲆΔᐃ.play();
      }
    };
    this.ΔΔᐃᐃⲆᐃⵠ = function (a) {
      if (a.ᐃⲆⲆⲆΔⵠⵠ > 0) {
        return ⲆΔⲆⲆΔ.ⲆΔᐃⵠⵠ;
      } else if (a.Δᐃᐃᐃⵠᐃᐃ > _s) {
        return ⲆΔⲆⲆΔ.ⵠⲆᐃⲆᐃⵠᐃ;
      } else if (a.ⲆⲆᐃΔᐃ > 0 || a.ᐃⲆΔᐃⲆ > 0) {
        return ⲆΔⲆⲆΔ.ΔⵠⲆᐃⵠⲆΔ;
      } else {
        return ⲆΔⲆⲆΔ.ΔᐃⲆⵠⵠᐃᐃ;
      }
    };
    this.ⵠⲆⵠⲆⲆ = function (a) {
      this.ΔⲆⲆⲆᐃΔΔ = 0;
      this.ᐃⲆᐃⲆ = a;
      var b = gf.ΔΔⵠΔ[a];
      b.ᐃⵠΔᐃΔ = this.ᐃⵠΔᐃΔ;
      this.mode = this.ΔΔᐃᐃⲆᐃⵠ(b);
      this.ⵠⵠᐃᐃ.x = b.x;
      this.ⵠⵠᐃᐃ.y = b.y;
    };
    this.ⲆᐃΔⲆᐃⵠⲆ = function () {
      this.ΔⲆⲆⲆᐃΔΔ = 1;
      this.mode = -1;
      this.ⲆⲆᐃⵠⲆ.stop(this.ᐃΔΔΔⲆ);
      this.ⲆⲆᐃⵠⲆ.stop(this.ⲆⵠⵠᐃⲆⲆⲆ);
      this.ⲆⲆᐃⵠⲆ.stop(this.ΔΔⵠⲆᐃⵠᐃ);
      this.ⲆⲆᐃⵠⲆ.stop(this.Ⲇⵠⵠᐃⵠⵠᐃ);
    };
    this.fade = function (a, b) {
      var c = Mw * this.ⲆⲆᐃⵠⲆ.volume(a);
      this.ⲆⲆᐃⵠⲆ.fade(c, 0, b, a);
    };
    this.ᐃΔⵠⵠΔⵠⵠ = function (a, b) {
      if (this.ⵠⲆᐃⵠⵠ && this.ᐃⵠΔᐃΔ) {
        a.pos(this.x, this.y, -0.5, b);
      }
    };
    this.ⵠⵠⵠΔᐃ = function (b, c, d, e, f, g, i) {
      this.ΔⵠᐃⲆⲆ = g;
      if (e && f === this.mode) {
        var a = this.ⲆⲆᐃⵠⲆ.volume(b) * Mw;
        if (this.ⵠⲆᐃⵠⵠ) {
          var j = (Math.random() * d + c) * Mw;
          this.ⲆⲆᐃⵠⲆ.fade(a, j, i, b);
        } else {
          this.ⲆⲆᐃⵠⲆ.fade(a, 0, i, b);
        }
      } else if (this.mode != f && this.ⵠⲆᐃⵠⵠ) {
        this.ⲆⲆᐃⵠⲆ.fade(0, Mw * (c + d), i, b);
      } else if (this.ⵠⲆᐃⵠⵠ) {
        a = Mw * this.ⲆⲆᐃⵠⲆ.volume(b);
        j = Mw * (d * Math.random() + c);
        this.ⲆⲆᐃⵠⲆ.fade(a, j, i, b);
      }
      this.ᐃΔⵠⵠΔⵠⵠ(this.ⲆⲆᐃⵠⲆ, b);
      this.ⲆⲆᐃⵠⲆ.play(b);
    };
    this.Ⲇᐃⵠ = function () {
      var a = gf.ΔΔⵠΔ[this.ᐃⲆᐃⲆ];
      this.ΔⵠᐃⲆⲆ -= pf;
      if (this.ΔⵠᐃⲆⲆ <= 0) {
        var b = 0;
        if (a.x != this.ⵠⵠᐃᐃ.x || a.y != this.ⵠⵠᐃᐃ.y) {
          if (!this.ⵠⲆᐃⵠⵠ) {
            b = 1;
            this.ⵠⲆᐃⵠⵠ = bt;
          }
          this.x = Zw.ⵠⵠΔⵠⵠᐃⵠ(a.x, ⲆΔⲆⲆΔ.ᐃΔᐃᐃⵠᐃⲆ);
          this.y = Zw.ΔⵠΔᐃΔⲆⵠ(a.y, ⲆΔⲆⲆΔ.ᐃΔᐃᐃⵠᐃⲆ);
        } else if (this.ⵠⲆᐃⵠⵠ) {
          b = 1;
          this.ⵠⲆᐃⵠⵠ = Lu;
        }
        this.ⵠⵠᐃᐃ.x = a.x;
        this.ⵠⵠᐃᐃ.y = a.y;
        ΔⲆᐃⲆ = this.ΔΔᐃᐃⲆᐃⵠ(a);
        if (ΔⲆᐃⲆ != this.mode) {
          if (ⲆΔⲆⲆΔ.ⵠⲆᐃⲆᐃⵠᐃ === this.mode) {
            this.fade(this.ᐃΔΔΔⲆ, ⲆΔⲆⲆΔ.ⵠⵠᐃⲆΔΔⲆ);
          } else if (ⲆΔⲆⲆΔ.ⲆΔᐃⵠⵠ === this.mode) {
            this.fade(this.ⲆⵠⵠᐃⲆⲆⲆ, ⲆΔⲆⲆΔ.ᐃΔⵠⲆⲆΔᐃ);
          } else if (this.mode === ⲆΔⲆⲆΔ.ΔᐃⲆⵠⵠᐃᐃ) {
            this.fade(this.ΔΔⵠⲆᐃⵠᐃ, ⲆΔⲆⲆΔ.ⲆᐃⲆⵠⵠⵠᐃ);
          } else if (this.mode === ⲆΔⲆⲆΔ.ΔⵠⲆᐃⵠⲆΔ) {
            this.fade(this.Ⲇⵠⵠᐃⵠⵠᐃ, ⲆΔⲆⲆΔ.ⵠᐃⵠⲆΔᐃⵠ);
          }
        }
        if (ⲆΔⲆⲆΔ.ⵠⲆᐃⲆᐃⵠᐃ === ΔⲆᐃⲆ) {
          this.ⵠⵠⵠΔᐃ(this.ᐃΔΔΔⲆ, 0.08, 0.3, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.ᐃΔΔᐃΔⲆⲆⵠΔ, ⲆΔⲆⲆΔ.ⵠⵠᐃⲆΔΔⲆ);
        } else if (ⲆΔⲆⲆΔ.ⲆΔᐃⵠⵠ === ΔⲆᐃⲆ) {
          this.ⵠⵠⵠΔᐃ(this.ⲆⵠⵠᐃⲆⲆⲆ, 0.2, 0.3, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.ᐃᐃⲆⲆΔΔⲆⲆⵠ, ⲆΔⲆⲆΔ.ᐃΔⵠⲆⲆΔᐃ);
        } else if (ⲆΔⲆⲆΔ.ΔᐃⲆⵠⵠᐃᐃ === ΔⲆᐃⲆ) {
          this.ⵠⵠⵠΔᐃ(this.ΔΔⵠⲆᐃⵠᐃ, 0.3, 0.6, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.ΔⲆⲆΔΔᐃΔⵠᐃ, ⲆΔⲆⲆΔ.ⲆᐃⲆⵠⵠⵠᐃ);
        } else if (ⲆΔⲆⲆΔ.ΔⵠⲆᐃⵠⲆΔ === ΔⲆᐃⲆ) {
          this.ⵠⵠⵠΔᐃ(this.Ⲇⵠⵠᐃⵠⵠᐃ, 0.1, 0.25, b, ΔⲆᐃⲆ, ⲆΔⲆⲆΔ.ⲆᐃΔⲆⵠⲆΔⲆΔ, ⲆΔⲆⲆΔ.ⵠᐃⵠⲆΔᐃⵠ);
        }
        this.mode = ΔⲆᐃⲆ;
      }
    };
    this.check = function () {
      var a = gf.ΔΔⵠΔ[this.ᐃⲆᐃⲆ];
      if (a) {
        return Oh;
      } else {
        this.ⲆᐃΔⲆᐃⵠⲆ(a);
        return false;
      }
    };
  }
  function nf(b, c, d, e, f, g) {
    const i = ~(e & 37346) & 37346 | ~(e & 37346) & e;
    const a = ~(f & 52871) & 52871 | ~(f & 52871) & f;
    const j = (1013904223 + (g + 22658) * 1664525) % 4294967296;
    const h = Pf(b ^ 35407, ~(c & 19515) & (c | 19515), ~(d & 41194) & (d | 41194));
    Pf(i, a, j);
    return ~(h & 2673) & h | ~(h & 2673) & 2673;
  }
  function of(b, c, d, e, f) {
    const g = ((b + 26734) * 1664525 + 1013904223) % 4294967296;
    const i = ~(c & 26311) & 26311 | ~(c & 26311) & c;
    const a = ~(d & 30541) & 30541 | ~(d & 30541) & d;
    const j = function (b, c, d, e, f) {
      const g = (2531011 + (e + 55849) * 214013) % 4294967296;
      const i = ~(f & 20053) & f | ~(f & 20053) & 20053;
      const a = Is(b ^ 53318, (2147483587 + (c + 25417) * 2147483629) % 2147483647, (1013904223 + (31874 + d) * 1664525) % 4294967296);
      const j = Gw(g, i);
      return (0 << ((a ^ j) >> 8 & 255)) + (8 << ((a ^ j) >> 24 & 255)) + (24 << ((a ^ j) >> sk & w)) + (16 << ((a ^ j) >> jj & 255));
    }(g, i, a, (e | 21061) & ~(e & 21061), ~(f & 50179) & 50179 | ~(f & 50179) & f);
    Aw(g, i, a);
    return ~(j & 57905) & 57905 | ~(j & 57905) & j;
  }
  function rf(b, c, d, e, f, i) {
    const j = (1013904223 + (d + 48545) * 1664525) % 4294967296;
    const a = (2531011 + (e + 27124) * 214013) % 4294967296;
    const k = f ^ 36241;
    const h = Rv(((60748 + b) * 22695477 + 1) % 4294967296, ~(c & 15044) & 15044 | ~(c & 15044) & c);
    const l = function (a, b, c) {
      const d = (2147483587 + (33491 + a) * 2147483629) % 2147483647;
      const e = b ^ 4887;
      const f = (Kr << (c >> 24 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c & w)) + (24 << (c >> fg & 255));
      return (12345 + (5576 + (Gw(d, e) ^ Dw(f, d, e, f, d, e))) * 1103515245) % 2147483648;
    }(j, a, k);
    return (24 << ((h ^ l) >> 24 & 255)) + (Dh << ((h ^ l) >> 8 & 255)) + (16 << ((h ^ l) >> 16 & 255)) + (8 << ((h ^ l) & rr));
  }
  function af(a, b, c, d, e) {
    Di(Zg, a, b, c, d, e);
    const f = Xg(Ks[0], Ks[bt], Ks[_t], Ks[jg], Ks[qo], Ks[Wh]);
    Aa(Ks[1], Ks[Le], Ks[3], Ks[qo], Ks[Lg]);
    return ~(f & 10479) & (f | 10479);
  }
  ⵠⵠΔⵠΔⵠᐃ = Lu;
  document.getElementById("version").innerHTML = aw.ⵠᐃⵠᐃᐃⵠⲆ + ".3";
  var sf;
  var Uw = [];
  var Vw = {
    time: Math.floor(Math.random() * 2),
    items: []
  };
  document.getElementById("game_body").style.backgroundColor = Cr.ⵠΔⲆⲆᐃ[Vw.time];
  Vw.items.push(new hw(ew.ⵠᐃΔΔᐃ, Fj, 0, Jt, 0, Math.random() * Math.PI * 2, 2, 1));
  Vw.items.push(new hw(ew.ⲆⵠⲆΔⲆ, 0, jj, 0, Kr, Kr, xb, Ca));
  Vw.items.push(new hw(ew.ᐃⵠΔⲆᐃ, 0, 0, Dh, 0, Math.PI / 4, 0, _s));
  Vw.items.push(new hw(ew.ⲆⵠⲆΔⲆ, ko, _s, Ko, 0, rh, 0, Wn));
  ᐃΔΔᐃ = new function () {
    var b = this;
    function a(a) {
      if (Ek === Fk) {
        fetch(`${Af}rivet-token`).then(a => {
          if (a.ok) {
            return a.text();
          }
          throw "Failed to list lobbies: " + a.status;
        }).then(b => {
          a(b);
        });
      } else {
        a(null);
      }
    }
    this.ⵠⵠᐃⵠ = null;
    this.ⵠⵠᐃᐃᐃ = ko;
    this.ⲆⲆᐃᐃΔ = [];
    this.ΔⲆΔᐃᐃ = [[], [], [], [], [], [], [], [], []];
    this.ⲆΔΔᐃᐃΔⵠ = [-1, -bt, -Aj, -1, -1, -1, -1, -1, -Fo];
    this.ᐃᐃⲆⲆΔ = tr;
    this.ⵠⵠⵠᐃⲆᐃⵠ = 0;
    this.ΔⵠᐃⲆⲆΔⲆᐃⵠ = function (c) {
      if (Zl !== Yv) {
        b.ⲆⲆᐃᐃΔ.push({
          a: Yv.name,
          gm: Yv.mode,
          idx: 0,
          m: wa,
          nu: Gd,
          id: Dh
        });
        c();
        return;
      }
      a(function (a) {
        let d = {};
        if (a) {
          d.Authorization = `Bearer ${a}`;
        }
        fetch(Zv + "/matchmaker/lobbies/list", {
          method: "GET",
          headers: d
        }).then(a => {
          if (!a.ok) {
            console.error(Uq);
            throw "Failed to list lobbies";
          }
          a.json().then(d => {
            console.log(undefined, undefined);
            b.ⲆⲆᐃᐃΔ = [];
            let f = {};
            for (let a of d.game_modes) {
              b.ⲆⲆᐃᐃΔ.push({
                a: "Auto Select",
                gm: a.game_mode_id,
                m: A,
                nu: Gd,
                auto: true
              });
            }
            for (let c of d.lobbies) {
              let e;
              let g = c.game_mode_id;
              e = g in f ? ++f[g] : f[g] = Ur;
              let h = d.regions.find(a => a.region_id == c.region_id);
              b.ⲆⲆᐃᐃΔ.push({
                a: h.region_display_name + " " + e,
                gm: c.game_mode_id,
                idx: e,
                m: c.max_players_normal,
                nu: c.total_player_count,
                id: c.lobby_id
              });
            }
            c();
          });
        });
      });
    };
    this.ⵠᐃΔΔΔΔⵠⵠᐃ = function (a) {
      var b = [];
      for (var c = kq; a.length > c; c++) {
        if (a[c].a.indexOf(Ga) !== -1) {
          b.push(c);
        }
      }
      if (b.length === Wh) {
        return ko;
      } else {
        return b[Math.floor(Math.random() * b.length)];
      }
    };
    this.ⲆᐃⵠᐃⲆⵠⵠ = function (a) {
      var b = 0;
      for (var c = 0; a.length > c; c++) {
        b += a[c].nu;
      }
      var d = document.getElementById("servselect");
      if (ᐃΔΔᐃ.ⲆΔΔᐃᐃΔⵠ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ] === -1) {
        ᐃΔΔᐃ.ⲆΔΔᐃᐃΔⵠ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ] = d.selectedIndex = ᐃΔΔᐃ.ⵠᐃΔΔΔΔⵠⵠᐃ(a);
      } else {
        d.selectedIndex = ᐃΔΔᐃ.ⲆΔΔᐃᐃΔⵠ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ];
      }
      var e = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + a[d.selectedIndex].a + (ko < a[d.selectedIndex].nu ? " [" + a[d.selectedIndex].nu + " " + st[ΔⵠᐃΔ.ⲆΔⵠⵠ] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + st[ΔⵠᐃΔ.ᐃΔᐃⲆⲆⲆⵠ] + " (" + this.ᐃⲆᐃᐃΔᐃΔ + ") " + st[ΔⵠᐃΔ.ⲆᐃᐃⵠΔⲆⲆ] + "</li>";
      for (c = Fj; c < a.length; c++) {
        e += "<li role=\"option\">" + a[c].a;
        e += " [" + a[c].nu + " " + st[ΔⵠᐃΔ.ⲆΔⵠⵠ] + "]";
        e += "</li>\n";
      }
      e += "<li role=\"option\" id=\"selectDisabled\">(" + b + ") " + st[ΔⵠᐃΔ.ᐃⲆⵠᐃⲆΔΔ] + "</li>";
      e += "</div>";
      d.innerHTML = e;
      $(".md-select").on("click", function () {
        $(this).toggleClass("active");
      });
      $(".md-select ul li").on("click", function () {
        var a = $(this).text();
        var b = -yl;
        for (var c = ᐃΔΔᐃ.ΔⲆΔᐃᐃ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ], d = rh; d < c.length; d++) {
          if (a === c[d].a + " [" + c[d].nu + " " + st[ΔⵠᐃΔ.ⲆΔⵠⵠ] + "]") {
            b = d;
            break;
          }
        }
        if (-sd !== b) {
          document.getElementById("servselect").selectedIndex = b;
          ᐃΔΔᐃ.ⲆΔΔᐃᐃΔⵠ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ] = b;
          $(".md-select ul li").removeClass("active");
          $(this).addClass("active");
          $(".md-select label button").text(a);
        }
      });
    };
    this.ᐃⲆᐃᐃΔᐃΔ = 0;
    this.ΔⵠⵠⵠᐃⵠⲆΔⲆ = function () {
      this.ᐃⲆᐃᐃΔᐃΔ = 0;
      for (var a = Gd; ᐃΔΔᐃ.ⲆⲆᐃᐃΔ.length > a; a++) {
        if (this.ⲆⲆᐃᐃΔ[a].gm == "experimental") {
          this.ΔⲆΔᐃᐃ[bw.ⵠⵠᐃᐃΔ].push(this.ⲆⲆᐃᐃΔ[a]);
        } else if (this.ⲆⲆᐃᐃΔ[a][hj[Pr]] == "zombies") {
          this.ΔⲆΔᐃᐃ[bw.ⲆᐃᐃΔⵠ].push(this.ⲆⲆᐃᐃΔ[a]);
        } else if (hj[E] == this.ⲆⲆᐃᐃΔ[a].gm) {
          this.ΔⲆΔᐃᐃ[bw.ⲆᐃⲆⵠΔ].push(this.ⲆⲆᐃᐃΔ[a]);
        } else if (this.ⲆⲆᐃᐃΔ[a].gm == "battle-royale") {
          this.ΔⲆΔᐃᐃ[bw.ⲆᐃⲆΔⵠⵠⲆ].push(this.ⲆⲆᐃᐃΔ[a]);
        } else if (this.ⲆⲆᐃᐃΔ[a].gm == "vampires") {
          this.ΔⲆΔᐃᐃ[bw.ᐃᐃⵠᐃΔ].push(this.ⲆⲆᐃᐃΔ[a]);
        } else {
          this.ΔⲆΔᐃᐃ[bw.ⲆᐃⵠΔΔ].push(this.ⲆⲆᐃᐃΔ[a]);
        }
        this.ᐃⲆᐃᐃΔᐃΔ += this.ⲆⲆᐃᐃΔ[a].nu;
      }
      for (a = 0; a < this.ΔⲆΔᐃᐃ.length; a++) {
        if (Dh === this.ΔⲆΔᐃᐃ[a].length) {
          this.ΔⲆΔᐃᐃ[a].push({
            a: st[ΔⵠᐃΔ.ⵠᐃΔᐃᐃᐃᐃ],
            ᐃⵠᐃΔⲆᐃΔⵠⲆ: Mn,
            ᐃᐃ: "127.0.0.1",
            ΔⵠⲆ: 80
          });
        }
      }
      this.ⲆᐃⵠᐃⲆⵠⵠ(this.ΔⲆΔᐃᐃ[0]);
      this.ΔᐃⲆᐃⲆ = function (a) {
        ᐃΔΔᐃ.ᐃᐃⲆⲆΔ = a;
        ᐃΔΔᐃ.ⲆᐃⵠᐃⲆⵠⵠ(ᐃΔΔᐃ.ΔⲆΔᐃᐃ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ]);
        ᐃΔΔᐃ.ⲆᐃⵠᐃⲆⵠⵠ(ᐃΔΔᐃ.ΔⲆΔᐃᐃ[ᐃΔΔᐃ.ᐃᐃⲆⲆΔ]);
        document.getElementById("servselect").selectedIndex = ᐃΔΔᐃ.ᐃᐃⲆⲆΔ;
      };
    };
    this.ⵠⵠⲆⲆᐃᐃΔ = Dh;
    this.ⵠΔⵠⲆᐃΔᐃ = Lu;
    this.ΔΔᐃΔΔ = null;
    this.timeout = function () {
      b.ⵠΔⵠⲆᐃΔᐃ++;
      b.ⵠⵠᐃⵠ.close();
      if (aw.ΔⲆⵠⲆΔᐃᐃⵠᐃ < b.ⵠΔⵠⲆᐃΔᐃ) {
        zf = 1;
        sf.ⵠΔⲆᐃΔΔΔⲆⲆ = aw.ΔⲆⲆᐃΔⲆΔⵠΔ;
        b.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠⲆᐃᐃⲆⵠⲆ]);
        sf.waiting = Jn;
        if (Ww.reconnect.enabled) {
          Yw.Ⲇᐃⵠᐃᐃ(sf.ᐃⲆⵠΔⵠ);
        }
      } else {
        b.ⵠⲆΔᐃⲆᐃⵠ();
      }
    };
    this.ⲆᐃᐃᐃⲆᐃΔ = function (a) {
      if (this.ⵠⵠᐃᐃᐃ == this.ⵠⵠᐃⵠ.ⵠⵠᐃᐃᐃ) {
        this.ⵠⵠᐃᐃᐃ++;
        this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃᐃΔΔᐃΔΔ] + a);
        Yw.Ⲇᐃⵠᐃᐃ(sf.ᐃⲆⵠΔⵠ);
      }
    };
    this.ⵠⲆⵠⲆᐃⲆΔ = function () {
      this.ⲆⲆⵠⵠᐃ("You speak too much");
    };
    this.ΔΔᐃⲆⵠΔᐃⲆᐃ = function () {
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆⵠⵠⵠᐃᐃΔ]);
      sf.waiting = false;
    };
    this.ΔⲆᐃᐃΔᐃⵠⲆᐃ = function () {
      Ww.ΔⵠΔⲆᐃ.open = Bj;
    };
    this.ΔⵠⲆⲆΔⵠⲆⵠⵠ = function () {
      Yw.ⵠΔⵠΔΔΔⲆ = Ko;
    };
    this.ⵠᐃΔΔⵠⲆᐃⵠΔ = function () {
      Yw.ᐃⵠⲆΔᐃΔⲆ = 0;
    };
    this.ⲆⵠⵠᐃⲆⲆΔΔΔ = function (a) {
      Ww.ⲆᐃⲆⵠᐃ.ⲆⲆΔΔᐃ = a;
      if (gf.ⲆᐃⵠⲆⵠ > -300) {
        if (a === 0) {
          this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃⲆᐃᐃΔΔⵠ]);
        } else {
          this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆⵠΔᐃⲆᐃⲆ]);
        }
      }
    };
    this.ⵠⲆⲆᐃⵠ = function (a) {
      Ww.ⵠⲆⲆᐃⵠ = a;
    };
    this.ΔⲆⵠⲆᐃⲆⵠᐃⵠ = function (a) {
      Ww.ΔΔᐃᐃⵠᐃⵠ = a;
    };
    this.ΔΔᐃᐃⵠᐃⵠ = function (a) {
      Ww.ᐃΔᐃΔᐃ.ⲆⲆΔΔᐃ = a;
      if (gf.ⲆⲆᐃΔᐃ > -300) {
        if (Lg === a) {
          this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ΔΔⲆⲆⲆⵠⵠ]);
        } else {
          this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆⵠⵠᐃⵠⵠΔ]);
        }
      }
    };
    this.ᐃⲆΔᐃⵠⲆⲆⵠᐃ = function (a) {
      if (Kr === a) {
        document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
      } else if (a === Ud) {
        document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
      } else if (eh === a) {
        document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
      } else if (a === 3) {
        document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
      }
    };
    this.ᐃΔⲆΔᐃⲆⲆⵠⵠ = function () {
      Yw.ᐃⵠⵠᐃᐃᐃⲆ = 0;
    };
    this.ⲆΔⵠᐃⲆᐃᐃⲆΔ = function () {
      Yw.ⵠⲆΔΔⵠᐃΔ = 0;
    };
    this.ⲆⵠⵠᐃᐃᐃᐃΔᐃ = function () {
      Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ = [];
      Ww.ᐃᐃⲆᐃ.ⲆᐃΔ = [];
      Ww.ᐃᐃⲆᐃ.id = -wg;
      Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.stop();
      Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ = [];
      Ww.ΔⲆᐃᐃ.ᐃΔⲆΔⲆ = bs;
      Ww.ΔⲆᐃᐃ.ΔᐃᐃⲆΔⵠⵠᐃⵠ = false;
      Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
      Ww.ΔⲆᐃᐃ.id = -Cs;
      Ww.ΔⲆᐃᐃ.ᐃⵠΔΔΔ = false;
      Ww.ΔⲆᐃᐃ.ⲆΔⵠΔⲆ = Pa;
      Ww.ΔⲆᐃᐃ.ΔⵠΔⵠᐃ = false;
      Ww.ΔⲆᐃᐃ.ⲆᐃⵠⵠΔⵠΔ = Bg;
      Ww.ΔⲆᐃᐃ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, 0, Fo, jj, ik, yl);
    };
    this.ΔⲆⵠΔΔΔⲆΔⵠ = function () {
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ();
      sf.waiting = false;
    };
    this.ΔⲆᐃⲆᐃⲆⲆ = function (a) {
      for (var b = $t; b < a.length; b++) {
        if (typeof a[b] === "string") {
          a[b] = ⵠⵠⵠⲆ.ᐃⵠⲆⲆⲆⲆⵠ(a[b]);
        }
      }
      Ww.ΔⵠⵠⵠⲆ.ΔΔⵠⵠⵠ(a[Br], a[2], a[3], a[4]);
    };
    this.message = function (a) {
      this.ⲆⲆⵠⵠᐃ(a);
    };
    this.ⵠΔᐃΔΔᐃⵠⵠΔ = function () {
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃⲆΔⵠᐃⲆᐃ]);
      sf.waiting = false;
    };
    this.ⲆⵠⲆⵠΔⵠᐃⲆΔ = function () {
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠΔΔᐃΔΔⵠ]);
      sf.waiting = Pq;
    };
    this.ᐃᐃΔᐃⲆᐃΔᐃᐃ = function () {
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃΔᐃ]);
      sf.waiting = gg;
    };
    this.ᐃⲆⵠⲆⲆᐃΔⲆᐃ = function () {
      Ww.ᐃᐃⲆᐃ.ΔΔᐃⵠⲆᐃΔ(1, Wh);
      Yw.ⵠⲆⲆᐃⵠᐃⵠ();
    };
    this.ΔΔⵠⵠΔⲆⵠⵠᐃ = function (a) {
      var b = a[1];
      var c = gf.ΔⲆᐃⵠ[b];
      c.ⲆΔⲆⵠ = a[cu];
      c.ΔᐃᐃΔⵠ = a[Mo];
      c.ΔΔⲆⲆᐃⲆⲆ = a[4];
      c.ΔⲆⵠⵠᐃ = a[vu];
      c.ΔᐃⲆΔⵠ = a[ol];
      c.ᐃⵠⲆΔΔ = a[7];
      c.level = a[8];
      var d = gf.ΔΔⵠΔ[b * gf.ΔᐃᐃⲆⵠⲆⵠ];
      if (d) {
        d.ⲆΔⲆⵠ = a[tg];
        d.ΔᐃᐃΔⵠ = a[vo];
        d.ΔΔⲆⲆᐃⲆⲆ = a[4];
        d.ΔⲆⵠⵠᐃ = a[5];
      }
    };
    this.ᐃⵠⲆⵠΔⲆΔⵠⲆ = function (a) {
      if (a === Dr.ᐃⵠΔⵠ) {
        Ww.ᐃᐃⲆᐃ.ΔΔᐃⵠⲆᐃΔ(Cs, Wh);
        Yw.ⵠⲆⲆᐃⵠᐃⵠ();
      } else {
        this.ᐃᐃΔⵠⵠⵠⲆ([0, a, ik]);
      }
      Ww.ΔⲆᐃᐃ.ᐃⵠⲆⵠΔΔⵠ();
    };
    this.ΔᐃΔⵠᐃⲆᐃᐃⵠ = function (a) {
      Ww.ⲆⵠⵠⵠⲆ.ΔⵠᐃⲆⲆ = 0;
      Ww.ΔⲆᐃᐃ.ΔⲆΔⵠⲆⲆΔΔⵠ(a);
    };
    this.ΔᐃΔᐃΔᐃⵠᐃΔ = function (a) {
      for (var b = Hs[a].r, c = 0; c < b.length; c++) {
        if (Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length < Ww.ᐃᐃⲆᐃ.max || Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[b[c][0]] > 0) {
          var d = Math.floor(b[c][Ud] * 0.8);
          if (!d) {
            continue;
          }
          this.ᐃᐃΔⵠⵠⵠⲆ([_s, b[c][Gd], d]);
        }
      }
      Ww.ΔⲆᐃᐃ.ᐃⵠⲆⵠΔΔⵠ();
    };
    this.ΔᐃⲆⲆⵠᐃⲆᐃᐃ = function (a) {
      Ww.ⲆⵠⵠⵠⲆ.ΔⵠᐃⲆⲆ = 0;
      Ww.ΔⲆᐃᐃ.ᐃⵠⲆⲆᐃᐃⲆⵠᐃ(a);
    };
    this.ⲆⲆⵠⵠᐃ = function (a) {
      if (Ww.alert.text) {
        if (Ww.alert.text !== a && Ww.alert.list[Ww.alert.list.length - 1] !== a) {
          Ww.alert.list.push(a);
        }
      } else {
        Ww.alert.text = a;
      }
    };
    this.ΔΔΔᐃⲆΔᐃⲆⵠ = function () {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃᐃΔⵠⵠᐃᐃ]);
    };
    this.ΔⵠⲆⵠΔᐃⵠᐃⵠ = function () {
      var a;
      a = Ww.Δⵠⵠ == 0 ? st[ΔⵠᐃΔ.ⵠΔⲆⵠⵠⵠⵠ] : st[ΔⵠᐃΔ.ᐃΔⲆᐃⲆΔⲆ] + (Ww.Δⵠⵠ + 1) + st[ΔⵠᐃΔ.ᐃⵠⲆⵠᐃⵠᐃ];
      this.ⲆⲆⵠⵠᐃ(a);
      Ww.Δⵠⵠ++;
    };
    this.ⵠΔⵠΔᐃᐃΔΔᐃ = function () {
      clearTimeout(b.ΔΔᐃΔΔ);
      Ww.reconnect.enabled = Jn;
      Ww.ᐃⵠᐃΔΔ = Pq;
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆⲆᐃⲆᐃⵠⲆ]);
      Yw.Ⲇᐃⵠᐃᐃ(sf.ᐃⲆⵠΔⵠ);
      this.ⵠⵠᐃⵠ.close();
    };
    this.ⲆⵠᐃΔⲆΔΔⲆΔ = function () {
      zf = 1;
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆᐃᐃΔⲆⲆΔ]);
      sf.waiting = v;
    };
    this.ⲆⵠᐃⲆΔⲆᐃΔⵠ = function () {
      zf = 1;
      clearTimeout(this.ΔΔᐃΔΔ);
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠᐃⵠⵠⲆΔᐃ]);
      sf.waiting = false;
    };
    this.ⵠΔᐃᐃᐃⵠᐃΔᐃ = function (a) {
      var b = a[js];
      var c = gf.ΔⲆᐃⵠ;
      c[b].ᐃΔⲆⵠΔ = a[Qs];
      c[b].ⲆΔⲆⵠ = a[3];
      c[b].ΔᐃᐃΔⵠ = a[4];
      c[b].ΔΔⲆⲆᐃⲆⲆ = a[Oq];
      c[b].ΔⲆⵠⵠᐃ = a[xu];
      c[b].ΔᐃⲆΔⵠ = a[Hj];
      c[b].ᐃⵠⲆΔΔ = a[8];
      c[b].level = a[Rr];
      c[b].ⲆⲆⲆᐃⵠ = 0;
      c[b].ΔΔⵠΔᐃᐃᐃ = null;
      c[b].label = null;
      c[b].ⲆⵠⵠᐃᐃⲆⲆ = null;
      c[b].ᐃⵠᐃΔΔ = true;
      if (Wv === 1) {
        c[b].ᐃΔⲆⵠΔ += "|" + b;
      }
    };
    this.ⵠⲆᐃᐃⵠΔⵠᐃⲆ = function () {
      this.ⵠⵠᐃⵠ[Vv](Ao[oq].stringify([33]));
    };
    this.ⵠⵠᐃᐃᐃⵠⵠΔΔ = function () {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.EMPTY]);
    };
    this.ΔΔΔⲆⵠⲆⲆ = function () {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ΔⲆⲆⵠⲆⵠⲆ]);
    };
    this.ⵠΔΔⲆⵠΔⵠᐃⲆ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](uq[Gq].stringify([28, a]));
      Ww.ΔⵠΔⲆᐃ.open = fl;
    };
    this.ⲆⵠⲆⲆΔⵠᐃⵠⲆ = function (a) {
      for (var b = _v[a - 1].items, c = Kr; b.length > c && Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length < Ww.ᐃᐃⲆᐃ.max; c++) {
        var d = b[c][Fo];
        var e = b[c][0];
        if (b[c][1] === Dr.ᐃⵠΔⵠ) {
          Ww.ᐃᐃⲆᐃ.ΔΔᐃⵠⲆᐃΔ(dn, 0);
        } else {
          this.ᐃᐃΔⵠⵠⵠⲆ([Wh, d, e]);
        }
      }
    };
    this.ᐃᐃΔⵠⵠⵠⲆ = function (b) {
      for (var c = b.length, d = Ww.ᐃᐃⲆᐃ, e = 1; e < c; e += Uh) {
        var f = b[e];
        var g = b[e + Ud];
        for (var h = Dh; d.ᐃⵠⲆΔⲆ.length > h; h++) {
          if (f == d.ᐃⵠⲆΔⲆ[h].id) {
            d.ⲆᐃΔ[f] += g;
            break;
          }
        }
        if (h == d.ᐃⵠⲆΔⲆ.length) {
          d.ⲆᐃΔ[f] = g;
          d.ᐃⵠⲆΔⲆ.push(Yw.ⲆᐃⲆ[f]);
          Yw.ⵠⲆⲆᐃⵠᐃⵠ();
        }
      }
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ᐃⲆΔᐃ = function (b, c, d, e, f, g, h) {
      Ww.ᐃⲆΔᐃ.ⵠΔⲆΔ = b / 100;
      Ww.ᐃⲆΔᐃ.ᐃⵠⲆ = c / or;
      Ww.ᐃⲆΔᐃ.c = d / 100;
      Ww.ᐃⲆΔᐃ.ⵠᐃⲆ = e / Bl;
      Ww.ᐃⲆΔᐃ.ᐃⲆΔ = f / 100;
      Ww.ᐃⲆΔᐃ.ᐃᐃᐃⲆⲆᐃⲆ = g / dg;
      Ww.ⵠⲆⲆᐃⵠ = h;
    };
    this.ⲆΔᐃᐃⵠⲆΔⲆⵠ = function (a) {
      Yw.ΔΔⵠⲆ.modify(a, 2);
    };
    this.ⲆⵠΔᐃⵠΔⵠⲆᐃ = function (a) {
      Yw.ΔΔⵠⲆ.modify(a, Dh);
    };
    this.claimed = function (a) {
      Yw.ΔΔⵠⲆ.modify(a, Kk);
    };
    this.ⵠᐃⵠⵠΔⲆⲆⵠᐃ = function (a, b) {
      Ww.ᐃⲆΔᐃ.ⵠΔⲆΔ = a / Qk;
      Ww.ⵠⲆⲆᐃⵠ = b;
    };
    this.ΔⲆᐃΔᐃⵠⵠΔᐃ = function (a) {
      Ww.ᐃⲆΔᐃ.ⵠᐃⲆ = a / Lh;
    };
    this.ⵠᐃᐃᐃΔΔΔⵠΔ = function (a) {
      Ww.ᐃⲆΔᐃ.ᐃⵠⲆ = a / 100;
    };
    this.ΔⲆΔⵠΔⲆΔΔⲆ = function (a) {
      Ww.ᐃⲆΔᐃ.ᐃᐃᐃⲆⲆᐃⲆ = a / rs;
    };
    this.ⵠᐃⲆᐃᐃⲆⵠΔⵠ = function (a) {
      Ww.ᐃⲆΔᐃ.c = a / rs;
    };
    this.ᐃⲆΔⲆΔᐃⲆΔⵠ = function (a) {
      gf.time = a;
      gf.transition = ls;
      Zw.transition = 1;
    };
    this.ΔⲆⵠᐃᐃⲆᐃᐃⵠ = function () {
      document.getElementById("game_body").style.backgroundColor = Cr.ⵠΔⲆⲆᐃ[gf.time];
    };
    this.ⵠⲆΔΔΔⵠᐃᐃⲆ = function (a) {
      if (bw.ΔⵠΔⲆⵠⲆΔ == gf.mode && gf.ΔⲆᐃⵠ[a].ᐃΔⲆⵠΔ !== "spectator") {
        this.ⲆⲆⵠⵠᐃ(gf.ΔⲆᐃⵠ[a].ᐃΔⲆⵠΔ + st[ΔⵠᐃΔ.ⲆᐃᐃⲆⲆΔΔ]);
      }
      gf.ΔⲆᐃⵠ[a].ᐃⵠᐃΔΔ = false;
    };
    this.ⲆⲆⵠⲆⵠⲆᐃΔᐃ = function (a) {
      var b = new Uint16Array(a);
      ᐃⲆⲆΔ.ᐃᐃᐃ.ᐃΔᐃⲆⵠ(b[Ud], b[2]);
    };
    this.ⵠΔΔⵠΔⵠⵠΔΔ = function (a) {
      if (!Spectator) {
        var b = new Uint16Array(a);
        Ww.ᐃᐃᐃ.ᐃΔᐃⲆⵠ(b[1], b[$r]);
      }
    };
    this.ⲆⲆⲆΔⵠᐃΔᐃᐃ = function (b, c) {
      var d = new Uint16Array(c);
      for (var e = (b.length - 2) / 4, f = tr; f < e; f++) {
        var g = d[Eg + f * 2];
        var i = b[4 + mj * f];
        var j = Math.PI * ((b[vu + Ka * f] >> 1) / 127) * tg;
        var k = gf.ΔΔⵠΔ[i * gf.ΔᐃᐃⲆⵠⲆⵠ + g];
        if (k && k.ΔᐃⵠΔ) {
          if (Zw.loaded && Zw.ᐃⲆⵠΔⵠ) {
            Zw.ΔᐃⵠΔ(b[mh + f * 4] & 1, ΔⵠⵠᐃⲆ[k.type], k.x, k.y);
          }
          k.ΔᐃⵠΔ.angle = j;
          k.ΔᐃⵠΔ.Ⲇᐃⵠ = j;
        }
      }
    };
    this.ᐃⲆⵠΔⵠᐃⲆΔᐃ = function (b) {
      var c = new Uint16Array(b);
      for (var d = (c.length - 1) / Ka, e = 0; d > e; e++) {
        var i;
        var j = e * mj;
        var k = c[1 + j];
        var m = c[Ok + j];
        var p = (c[3 + j] >> ub) / 127 * Math.PI * 2;
        var q = c[4 + j];
        var t = Uw.ⲆⲆⲆᐃ[m][k];
        switch (q) {
          case 0:
            (i = t.p[0][Gd]).angle = p;
            i.Ⲇᐃⵠ = le;
            break;
          case 1:
            (i = t.s[ko][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case ij:
            (i = t.s[1][xb]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 3:
            (i = t.s[2][0]).angle = p;
            i.Ⲇᐃⵠ = mn;
            break;
          case 4:
            (i = t.t[_s][0]).angle = p;
            i.Ⲇᐃⵠ = Xo;
            break;
          case 5:
            (i = t.t[V][tr]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 6:
            (i = t.t[2][yk]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 7:
            (i = t.t[3][yk]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 8:
            (i = t.t[f][0]).angle = p;
            i.Ⲇᐃⵠ = ha;
            break;
          case 9:
            (i = t.t[Rj][Jt]).angle = p;
            i.Ⲇᐃⵠ = Pg;
            break;
          case 10:
            (i = t.g[0][0]).angle = p;
            i.Ⲇᐃⵠ = vr;
            break;
          case kl:
            (i = t.g[1][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 12:
            (i = t.g[2][Mn]).angle = p;
            i.Ⲇᐃⵠ = ls;
            break;
          case 13:
            (i = t.d[rh][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 14:
            (i = t.d[1][Fj]).angle = p;
            i.Ⲇᐃⵠ = mn;
            break;
          case 15:
            (i = t.d[Xn][_s]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 16:
            (i = t.b[Gd][0]).angle = p;
            i.Ⲇᐃⵠ = sh;
            break;
          case Vj:
            (i = t.b[1][Kr]).angle = p;
            i.Ⲇᐃⵠ = Pg;
            break;
          case gl:
            (i = t.b[2][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 19:
            (i = t.b[Ea][Jt]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case Vq:
            (i = t.f[Fj][Lu]).angle = p;
            i.Ⲇᐃⵠ = pr;
            break;
          case 21:
            (i = t.f[1][Lu]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 22:
            (i = t.f[Ok][0]).angle = p;
            i.Ⲇᐃⵠ = pr;
            break;
          case 23:
            (i = t.sw[0][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 24:
            (i = t.sw[1][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 25:
            (i = t.sw[2][0]).angle = p;
            i.Ⲇᐃⵠ = vr;
            break;
          case 26:
            (i = t.gw[xb][Gd]).angle = p;
            i.Ⲇᐃⵠ = wt;
            break;
          case 27:
            (i = t.gw[1][Dh]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 28:
            (i = t.gw[ij][Fj]).angle = p;
            i.Ⲇᐃⵠ = sh;
            break;
          case 29:
            (i = t.dw[0][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 30:
            (i = t.dw[1][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 31:
            (i = t.dw[2][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 32:
            (i = t.a[0][Fj]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 33:
            (i = t.a[sd][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 34:
            (i = t.a[2][Kr]).angle = p;
            i.Ⲇᐃⵠ = sh;
            break;
          case 35:
            (i = t.cs[tr][0]).angle = p;
            i.Ⲇᐃⵠ = Nn;
            break;
          case 36:
            (i = t.cs[1][Lu]).angle = p;
            i.Ⲇᐃⵠ = Vn;
            break;
          case 37:
            (i = t.cs[2][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 38:
            (i = t.cs[lk][Dh]).angle = p;
            i.Ⲇᐃⵠ = mn;
            break;
          case 40:
            (i = t.plm[kq][tr]).angle = p;
            i.Ⲇᐃⵠ = wt;
            break;
          case 41:
            (i = t.plm[er][Gd]).angle = p;
            i.Ⲇᐃⵠ = Oh;
            break;
          case 42:
            (i = t.plm[2][0]).angle = p;
            i.Ⲇᐃⵠ = vi;
            break;
          case 50:
            (i = t.re[Mn][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 51:
            (i = t.re[er][0]).angle = p;
            i.Ⲇᐃⵠ = vr;
            break;
          case 52:
            (i = t.re[2][0]).angle = p;
            i.Ⲇᐃⵠ = Kh;
            break;
          case 55:
            (i = t.c[0][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 56:
            (i = t.m[xb][0]).angle = p;
            i.Ⲇᐃⵠ = true;
            break;
          case 57:
            (i = t.m[dn][0]).angle = p;
            i.Ⲇᐃⵠ = Oh;
            break;
          case 58:
            (i = t.m[pa][0]).angle = p;
            i.Ⲇᐃⵠ = true;
        }
        if (Zw.loaded && Zw.ᐃⲆⵠΔⵠ && i) {
          Zw.ΔᐃⵠΔ(c[3 + j] & er, ΔΔΔΔ[q], i.x, i.y);
        }
      }
    };
    this.ΔΔᐃᐃⵠ = function () {
      this.ⵠⵠᐃⵠ[Vv](Qo[Bo].stringify([zl, Ww.ΔΔᐃᐃⵠ.ΔⲆᐃΔ, Ww.ΔΔᐃᐃⵠ.ᐃᐃΔΔΔ]));
    };
    this.ⵠᐃΔΔⲆᐃΔⵠⵠ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](Qo[Ho].stringify([22, b, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ⵠⲆⲆⲆᐃᐃΔ = function (a, b, c) {
      if (b) {
        this.ⵠⵠᐃⵠ[Vv](Qo[Ho].stringify([7, b, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
      } else {
        this.ⵠⵠᐃⵠ[Vv](Qo[jo].stringify([38, c, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
      }
    };
    this.ᐃᐃᐃΔΔΔΔⲆⵠ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([2, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ᐃΔⲆⵠⲆⵠΔΔᐃ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[Nq].stringify([31, a]));
    };
    this.ⲆΔᐃΔⵠᐃⲆⲆᐃ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](Zo[Bo].stringify([Os, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ᐃᐃΔᐃⲆᐃᐃⵠⲆ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](uq[xq].stringify([30, b, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ, a.type]));
    };
    this.ΔⲆᐃᐃΔᐃⲆΔⵠ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](uq[xq].stringify([27, b, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ⲆΔⵠⲆⵠΔΔⲆⲆ = function (a, b, c) {
      this.ⵠⵠᐃⵠ[Vv](Zo[Ho].stringify([no, b, c, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ᐃⵠΔⵠⲆᐃⲆ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([37, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ, a.type]));
    };
    this.ᐃⲆⲆᐃⲆⵠⵠᐃΔ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([6, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ⲆᐃⲆΔΔⲆᐃⲆᐃ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([0, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ᐃⲆᐃⵠΔⲆᐃᐃⲆ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](Hq[Eq].stringify([34, a.ΔⲆᐃΔ, a.ᐃᐃΔΔΔ]));
    };
    this.ΔᐃⲆΔᐃΔⵠⲆⵠ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](Kq[Gq].stringify([th, a.ᐃᐃΔΔΔ]));
    };
    this.ⲆⵠᐃᐃⲆᐃΔ = function (a) {
      b.ⵠⵠᐃⵠ[Vv](Qq[Nq].stringify([Eg, Ww.ᐃⲆⲆⲆⲆ.id, Ww.ⲆⲆⲆⵠⵠ[a]]));
    };
    this.ⵠⲆᐃⵠⲆⵠΔᐃⲆ = function () {
      b.ⵠⵠᐃⵠ[Vv](dr[_q].stringify([19, Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ, Ww.ᐃⲆⲆⲆⲆ.id]));
    };
    this.ΔᐃΔⲆⵠᐃⵠ = function () {
      b.ⵠⵠᐃⵠ[Vv](fr[ar].stringify([35]));
    };
    this.ⲆⵠⲆᐃᐃⲆⵠⵠⵠ = function () {
      b.ⵠⵠᐃⵠ[Vv](fr[Nq].stringify([j, Ww.ᐃⲆⲆⲆⲆ.id]));
      if (document.getElementById("lock_team").innerHTML == "LOCK") {
        Ww.ᐃⲆⲆⲆⲆ.lock = 1;
        document.getElementById("lock_team").innerHTML = "UNLOCK";
      } else {
        Ww.ᐃⲆⲆⲆⲆ.lock = 0;
        document.getElementById("lock_team").innerHTML = "LOCK";
      }
    };
    this.ⵠᐃΔ = function (j, e, i) {
      var k = new Uint16Array(j);
      if (i) {
        gf.ΔᐃᐃΔⵠΔⲆΔΔ();
      }
      for (var n = (e.length - 2) / Yj, o = _s; o < n; o++) {
        var q = 2 + o * 18;
        var t = 1 + xr * o;
        var w = e[q];
        var x = k[t + 1];
        var y = k[t + Rj];
        var z = gf.ΔᐃᐃⲆⵠⲆⵠ * w + y;
        if (x & $v.ⵠΔⲆᐃᐃᐃΔⵠᐃ) {
          gf.ΔⵠΔⵠⵠⲆⵠⲆΔ(z);
        } else {
          var A = k[t + 2];
          var B = k[t + 3];
          var D = k[t + xt];
          var E = k[t + 6];
          var F = k[t + 7];
          var G = k[t + ih];
          var H = ib * (e[q + er] / 255 * Math.PI);
          if (gf.ΔΔⵠΔ[z]) {
            var I = gf.ΔΔⵠΔ[z];
            I.r.x = B;
            I.r.y = D;
            if (rh != w && aw.ⲆᐃΔⵠᐃΔⲆⲆⲆ < ⵠⵠⵠⲆ.ΔⲆⲆⲆ(I, I.r)) {
              I.x = B;
              I.y = D;
            }
            if (Ww.id !== I.id || w === $t) {
              I.ΔΔΔⲆⲆΔΔ = H;
            }
            I.action |= x;
            I.info = E;
            I.ⲆⵠⲆⲆⵠ = F;
            I.ᐃΔⲆⲆΔ = G;
            if (I.Ⲇᐃⵠ) {
              I.Ⲇᐃⵠ(x);
            }
          } else {
            var J = new hw(A, w, y, B, D, H, x, E, F, G);
            gf.ΔΔⵠΔ[z] = J;
            gf.ⵠᐃΔ[A].push(J);
          }
        }
      }
    };
    this.ⵠⵠⲆⲆ = function (a) {
      this.ⵠⵠⲆⲆᐃᐃΔ = $w;
      var b = new Uint16Array(a);
      Ww.ΔΔᐃⵠΔ.ⵠⲆⵠⲆⲆ(b);
    };
    this.ᐃⵠᐃΔᐃⲆⵠᐃΔ = function (a) {
      if (Og !== us) {
        Hs = Og;
      }
      if (Jt < a.length) {
        Og = JSON.parse(JSON.stringify(Hs));
        for (var b = 0; a.length > b; b++) {
          var c = a[b];
          var d = Hs[c.item];
          if (d !== Rg) {
            d.r = c.recipe;
            d.w = c.workbench;
            d.f = c.fire;
            d.ᐃⲆΔ = c.water;
            d.e = c.well;
            d.time = 1 / c.time;
          }
        }
      }
    };
    this.ᐃⵠᐃᐃΔΔⵠ = function (a) {
      if (a && a.length !== 0) {
        Ww.ᐃⵠᐃᐃΔΔⵠ.message = function (b) {
          var c = document.createElement("canvas");
          var d = c.getContext("2d");
          for (d.lineJoin = "round"; b.indexOf("\\n") !== -js;) {
            b = b.replace("\\n", "\n");
          }
          b = b.split("\n");
          ⵠⲆ = [];
          var f = Vg;
          var g = b.length * (f + 4) + wh;
          var h = ko;
          d.font = f + "px Baloo Paaji";
          for (var i = 0; b.length > i; i++) {
            if (b[i].charAt(ko) === "#") {
              ⵠⲆ[i] = b[i].substring($t, 7);
              b[i] = b[i].substring(ea);
            } else {
              ⵠⲆ[i] = "#FFFFFF";
            }
            h = Math.max(d.measureText(b[i]).width + es, h);
          }
          c.height = g;
          c.width = h;
          i = 0;
          for (; i < b.length; i++) {
            var j = Bu(1, b[i], f, ⵠⲆ[i], null, null, null, null, null, "#000", Vo);
            d.drawImage(j, 8, (f + 4) * i + _g);
          }
          return c;
        }(a);
      } else {
        Ww.ᐃⵠᐃᐃΔΔⵠ.message = undefined;
      }
    };
    this.ΔΔⲆⲆΔ = function (a) {
      var b = gf.ΔΔⵠΔ[a[1] * gf.ΔᐃᐃⲆⵠⲆⵠ];
      if (b) {
        if (bw.ⲆᐃᐃΔⵠ === gf.mode && bw.ⲆⵠᐃⲆⲆᐃᐃ === b.ⲆΔⲆⵠ) {
          if (Ww.ⵠⲆᐃᐃⲆ) {
            if (Math.random() > 0.5) {
              b.text.push(a[2] + " ..." + ⵠΔⲆᐃΔ);
            } else {
              b.text.push(ⵠΔⲆᐃΔ + "... " + a[2]);
            }
          } else {
            b.text.push(ΔⲆⵠⲆⲆⲆᐃ[Math.floor(Math.random() * ΔⲆⵠⲆⲆⲆᐃ.length)]);
          }
        } else {
          b.text.push(a[2]);
        }
      }
    };
    this.ⲆᐃΔⲆⵠⲆⲆᐃⵠ = function (a) {
      if (Ww.ᐃᐃⲆᐃ.max !== Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ.length || Hs[a].ⵠᐃΔΔ === Dr.ᐃⵠΔⵠ || -ub != Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(Hs[a].ⵠᐃΔΔ) || Ww.ᐃᐃⲆᐃ.ⲆⵠⵠⵠᐃΔᐃΔΔ(Hs[a].r)) {
        this.ⵠⵠᐃⵠ[Vv](Ao[oq].stringify([Ro, a]));
        return Fo;
      } else {
        this.ΔΔΔⲆⵠⲆⲆ();
        return tr;
      }
    };
    this.ᐃⵠΔΔΔ = function (a) {
      Ww.ΔⲆᐃᐃ.ΔᐃⲆᐃⲆⲆΔΔΔ(a);
    };
    this.ⲆΔⵠΔⲆ = function (a) {
      Ww.ΔⲆᐃᐃ.ⲆΔⵠΔⲆ = a;
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ΔⵠΔⵠᐃ = function (a) {
      Ww.ΔⲆᐃᐃ.ΔⵠΔⵠᐃ = a;
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ⲆᐃⵠⵠΔⵠΔ = function (a) {
      Ww.ΔⲆᐃᐃ.ⲆᐃⵠⵠΔⵠΔ = a;
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ΔΔΔⲆΔⵠⲆⵠⲆ = function (a) {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃⵠⲆᐃⲆⲆⲆ]);
    };
    this.ᐃⵠⲆᐃⲆᐃΔΔⲆ = function () {
      Ww.ΔⲆᐃᐃ.ᐃⵠⲆⵠΔΔⵠ();
    };
    this.ⲆⲆⵠΔⲆ = function (a) {
      Yw.ⲆⲆⵠΔⲆ.ΔⲆᐃⵠ = [];
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      var c = rh;
      for (var d = Fo; d < a.length; d += 2) {
        var e = {
          x: Math.floor(a[d] * gf.w / 250),
          y: Math.floor(a[d + 1] * gf.ᐃⵠⲆ / 250)
        };
        if (b && !c && !Ww.ⵠⵠⵠⵠⲆⵠⵠ && ⵠⵠⵠⲆ.ΔⲆⲆⲆ(e, b) < 250) {
          c += Ur;
        } else {
          Yw.ⲆⲆⵠΔⲆ.ΔⲆᐃⵠ.push(e);
        }
      }
    };
    this.ΔΔⵠΔⵠΔΔⲆᐃ = function () {
      Ww.ΔΔᐃᐃⵠ.open = ys;
      Ww.ⵠΔᐃᐃΔ.enabled = kk;
      Ww.ⵠΔᐃᐃΔ.ΔⵠᐃⲆⲆ = -ce;
      Ww.ⵠΔᐃᐃΔ.label = null;
      Ww.ⵠΔᐃᐃΔ.ⵠⲆⵠΔⲆⲆⲆ = null;
      Ww.ⵠΔᐃᐃΔ.now = -wg;
    };
    this.ⵠΔᐃᐃΔ = function (a) {
      bw.ᐃⲆΔⵠⵠᐃⲆ = a;
      Ww.ⵠΔᐃᐃΔ.enabled = true;
      Ww.ⵠΔᐃᐃΔ.ΔⵠᐃⲆⲆ = new Date().getTime();
      Ww.ⵠΔᐃᐃΔ.label = null;
      Ww.ⵠΔᐃᐃΔ.now = -ik;
      for (var b = [Dr.ⵠᐃⲆⲆΔ, Dr.ᐃⲆⲆΔⲆ, Dr.ᐃⲆᐃΔⲆ, Dr.ⵠⲆΔᐃΔ, Dr.ⲆΔⵠⲆᐃ, Dr.ΔᐃⲆⵠΔ, Dr.ⲆΔⵠΔⵠ, Dr.ⵠΔⲆΔᐃ, Dr.ⵠΔΔⲆΔ, Dr.ⵠⲆⲆⵠⵠ, Dr.ⵠⵠⵠⵠΔ, Dr.ⵠⲆᐃᐃΔ, Dr.ᐃⲆⵠⲆⲆ, Dr.ΔⲆⲆⵠⲆ, Dr.ΔⵠⲆⵠⵠ, Dr.ⲆᐃᐃΔⲆ, Dr.ᐃΔⵠᐃⵠ, Dr.ⵠⲆᐃⲆᐃ, Dr.ΔᐃᐃⲆΔ, Dr.ⵠⵠⲆⵠΔ, Dr.ᐃⵠⲆⲆⲆ, Dr.ᐃᐃⲆⵠⲆ, Dr.ᐃΔᐃⲆΔ, Dr.ΔⲆΔᐃΔ, Dr.ⵠΔⵠⵠΔ, Dr.ΔΔⲆΔΔ, Dr.ⵠᐃᐃⲆᐃ, Dr.ᐃᐃᐃΔⲆ, Dr.ᐃΔΔⲆᐃ, Dr.ᐃΔⲆⲆⲆ, Dr.ⵠᐃᐃᐃΔ, Dr.ΔⵠⲆᐃⲆ, Dr.ΔᐃΔⲆⲆ, Dr.ⵠⵠΔΔΔ, Dr.ᐃⵠⵠᐃⵠ, Dr.ⵠⲆⲆⲆΔ, Dr.ⲆᐃΔΔᐃ, Dr.ⵠᐃⲆⲆᐃ, Dr.ᐃⵠᐃⲆⲆ, Dr.ᐃᐃⵠᐃⲆ, Dr.ⵠⲆᐃⵠΔ, Dr.ᐃⵠΔᐃⲆ, Dr.ⵠⵠⵠΔⵠ, Dr.ᐃⲆⵠΔⲆ, Dr.ⲆΔᐃᐃᐃ, Dr.ΔᐃⲆⲆⵠ, Dr.ΔⲆⵠΔⲆ, Dr.ⵠⲆⲆⵠⲆ, Dr.ᐃⲆⵠⲆᐃ, Dr.ΔΔΔⲆᐃ], c = Jt; b.length > c; c++) {
        var d = Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(b[c]);
        if (d != -wg) {
          Ww.ᐃᐃⲆᐃ.ᐃΔΔⲆᐃⵠⲆ(b.length[c], d);
        }
      }
      Ww.ΔⲆᐃᐃ.ᐃⵠⲆⵠΔΔⵠ();
    };
    this.ᐃⵠⲆΔⵠⵠⵠᐃⲆ = function (a, b, c) {
      this.ⵠᐃΔⵠⵠⵠΔ(a, b * 256 + c);
    };
    this.ⵠᐃΔⵠⵠⵠΔ = function (a, b) {
      Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
      Ww.ᐃᐃⲆᐃ.ⵠᐃΔⵠΔΔⵠ(a, b, Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(a));
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ⵠᐃⲆᐃⵠΔⵠⲆΔ = function (a) {
      Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -jh;
      Ww.ⵠⲆΔᐃᐃ.wait = Pg;
      var b = Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(a);
      Ww.ᐃᐃⲆᐃ.ⵠᐃΔⵠΔΔⵠ(a, 1, b);
      if (b >= yk && !Ww.ᐃᐃⲆᐃ.ⲆᐃΔ[a]) {
        Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
      }
      if (a == Dr.ⵠⵠⲆΔΔ) {
        Ww.ⲆⲆⲆⵠⵠ = [Ww.id];
      }
    };
    this.ᐃΔΔΔᐃⵠΔⲆⲆ = function () {
      this.ⵠⵠᐃⵠ[Vv](Qo[Bo].stringify([32]));
    };
    this.ⵠᐃᐃΔⲆⵠⲆᐃΔ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](uq[jo].stringify([Fr, a.ⵠᐃⵠΔΔ, a.id]));
    };
    this.ⵠΔᐃⵠᐃⵠᐃᐃΔ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](uq[xq].stringify([ea, a, b]));
    };
    this.ᐃᐃΔⵠⵠⲆΔⵠᐃ = function () {
      var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      if (a) {
        var b = Math.PI * 2;
        this.ⵠⵠᐃⵠ[Vv](uq[jo].stringify([36, Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ, Math.floor((a.angle + b) % b * 255 / b), Ww.ΔⲆᐃᐃ.mode]));
      }
    };
    this.ᐃΔⲆⵠⵠ = function (a, b) {
      switch (a) {
        case Dr.ⲆᐃΔᐃᐃ:
        case Dr.ᐃᐃΔⲆⲆ:
        case Dr.ᐃⵠⵠᐃⲆ:
        case Dr.ᐃΔⵠᐃⲆ:
        case Dr.ᐃⵠⲆⵠΔ:
        case Dr.ᐃⲆᐃⵠᐃ:
        case Dr.ΔᐃᐃΔΔ:
        case Dr.ⲆᐃᐃⵠⲆ:
        case Dr.ⲆᐃⵠᐃⲆ:
        case Dr.ᐃᐃⵠⲆᐃ:
        case Dr.ⵠᐃⵠⵠⵠ:
        case Dr.ΔⵠⲆΔᐃ:
        case Dr.ⲆΔⵠᐃᐃ:
        case Dr.ⲆΔⵠᐃⲆ:
        case Dr.ⵠᐃⵠⲆⵠ:
        case Dr.ⵠΔΔⵠⲆ:
        case Dr.ⲆⵠⵠⲆⵠ:
        case Dr.ⵠⵠⵠⲆⲆ:
        case Dr.Ⲇⵠᐃⵠⵠ:
        case Dr.ᐃⲆΔⵠΔ:
        case Dr.ᐃᐃᐃⲆⲆ:
        case Dr.ⲆᐃΔⲆⵠ:
        case Dr.ⵠⵠⵠⲆᐃ:
          Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -Fo;
          this.ⵠⵠᐃⵠ[Vv](Zo[Ho].stringify([23, a]));
          break;
        case Dr.ᐃⵠΔⲆᐃ:
        case Dr.ᐃΔⲆᐃᐃ:
        case Dr.ΔⵠᐃᐃΔ:
        case Dr.ΔΔⲆᐃᐃ:
        case Dr.ⲆΔⲆΔᐃ:
        case Dr.ΔΔΔᐃⲆ:
        case Dr.ᐃΔⲆⲆᐃ:
        case Dr.ⵠΔⵠⲆΔ:
        case Dr.ⵠᐃⵠⲆᐃ:
        case Dr.ᐃΔⵠᐃᐃ:
        case Dr.ⵠⵠⵠⲆΔ:
        case Dr.ⵠᐃΔΔᐃ:
        case Dr.ᐃⲆⲆⲆᐃ:
        case Dr.ⲆⲆΔⵠⵠ:
        case Dr.ᐃⵠⵠΔⵠ:
        case Dr.ⲆⲆᐃⲆΔ:
        case Dr.Ⲇⵠᐃⵠᐃ:
        case Dr.ⲆΔΔⲆⵠ:
        case Dr.ⲆΔᐃⲆⲆ:
        case Dr.ᐃᐃᐃⵠᐃ:
        case Dr.ⵠⵠΔⲆⲆ:
        case Dr.ΔΔΔΔⲆ:
        case Dr.ᐃᐃⲆᐃⲆ:
        case Dr.ᐃⵠᐃⲆΔ:
        case Dr.ΔΔⵠᐃⲆ:
        case Dr.ⲆⲆΔᐃⲆ:
        case Dr.ᐃⵠᐃΔⲆ:
        case Dr.ᐃⵠⲆⵠⵠ:
        case Dr.ⵠΔⲆⵠᐃ:
        case Dr.ΔⵠⲆⵠΔ:
        case Dr.ΔⵠⲆⵠⲆ:
        case Dr.ⲆΔⵠⵠᐃ:
        case Dr.Ⲇᐃⵠⵠⵠ:
        case Dr.ⲆΔⲆᐃᐃ:
        case Dr.ᐃᐃᐃΔⵠ:
        case Dr.ⲆⵠᐃᐃⲆ:
        case Dr.ΔⲆᐃⲆⵠ:
        case Dr.ᐃᐃᐃᐃⵠ:
        case Dr.ⲆⲆᐃⲆᐃ:
        case Dr.ᐃᐃⵠΔⵠ:
        case Dr.ᐃⲆΔⲆⲆ:
        case Dr.ⲆΔⵠⲆΔ:
        case Dr.ΔⵠΔΔⲆ:
        case Dr.ᐃⲆΔⵠⵠ:
        case Dr.ⵠⵠⲆᐃᐃ:
        case Dr.ᐃⲆΔᐃΔ:
        case Dr.ⵠⲆⲆᐃᐃ:
        case Dr.ΔᐃΔⵠᐃ:
        case Dr.ⵠΔΔᐃⲆ:
        case Dr.ⵠᐃⲆⵠᐃ:
        case Dr.ᐃⵠⲆᐃⵠ:
        case Dr.ᐃΔΔΔΔ:
        case Dr.ᐃᐃⵠΔΔ:
        case Dr.ⵠⲆⵠⵠᐃ:
        case Dr.ⵠⵠⲆΔΔ:
        case Dr.ᐃΔΔᐃⵠ:
          if (!Ww.ⵠⲆᐃᐃⲆ) {
            if (Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ === a) {
              Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
            } else {
              Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = a;
            }
          }
          break;
        case Dr.ⵠⲆΔᐃΔ:
        case Dr.ᐃⲆᐃΔⲆ:
        case Dr.ⲆΔⵠⲆᐃ:
        case Dr.ΔᐃⲆⵠΔ:
        case Dr.ⲆΔⵠΔⵠ:
        case Dr.ⵠΔⲆΔᐃ:
        case Dr.ⵠⵠⵠⵠΔ:
        case Dr.ⵠΔΔⲆΔ:
        case Dr.ⵠⲆⲆⵠⵠ:
        case Dr.ⵠᐃᐃⲆᐃ:
        case Dr.ᐃᐃᐃΔⲆ:
        case Dr.ᐃΔΔⲆᐃ:
        case Dr.ᐃΔⲆⲆⲆ:
        case Dr.ⵠᐃᐃᐃΔ:
        case Dr.ΔⵠⲆᐃⲆ:
        case Dr.ΔᐃΔⲆⲆ:
        case Dr.ᐃᐃⵠᐃⲆ:
        case Dr.ⵠⲆᐃⵠΔ:
        case Dr.ᐃⲆⵠⲆⲆ:
        case Dr.ⵠⲆᐃᐃΔ:
        case Dr.ΔⲆⲆⵠⲆ:
        case Dr.ΔⵠⲆⵠⵠ:
        case Dr.ⲆᐃᐃΔⲆ:
        case Dr.ᐃⵠⵠⵠΔⲆⲆᐃⲆ:
        case Dr.ⵠⲆᐃⲆᐃ:
        case Dr.ΔᐃᐃⲆΔ:
        case Dr.ᐃΔⵠᐃⵠ:
        case Dr.ⵠⵠⲆⵠΔ:
        case Dr.ᐃⵠⲆⲆⲆ:
        case Dr.ᐃᐃⲆⵠⲆ:
        case Dr.ᐃΔᐃⲆΔ:
        case Dr.ΔⲆΔᐃΔ:
        case Dr.ⵠΔⵠⵠΔ:
        case Dr.ΔΔⲆΔΔ:
          if (!Ww.ⵠⲆᐃᐃⲆ) {
            Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -jh;
            if ((c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ]) && c.right === a) {
              this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([23, Dr.ΔⲆⲆᐃᐃ]));
            } else {
              Ww.ⵠΔΔⲆᐃ.wait = le;
              this.ⵠⵠᐃⵠ[Vv](Hq[Eq].stringify([23, a]));
            }
          }
          break;
        case Dr.ⵠⵠⵠΔⵠ:
        case Dr.ᐃⵠΔᐃⲆ:
        case Dr.ᐃⲆⵠΔⲆ:
        case Dr.ⲆΔᐃᐃᐃ:
        case Dr.ⲆᐃᐃᐃⲆ:
        case Dr.ΔᐃᐃΔⲆ:
        case Dr.ⵠᐃᐃΔᐃ:
        case Dr.ⲆⵠⵠⲆⲆ:
        case Dr.Ⲇᐃᐃⵠᐃ:
        case Dr.ⵠΔᐃⵠᐃ:
        case Dr.ΔᐃⲆⲆⵠ:
        case Dr.ΔⲆⵠΔⲆ:
        case Dr.ⵠᐃⲆⲆΔ:
        case Dr.Ⲇᐃᐃⵠⵠ:
        case Dr.ⲆΔⵠⵠⲆ:
        case Dr.ΔⵠᐃΔᐃ:
        case Dr.ᐃⵠΔᐃⵠ:
        case Dr.ⵠⲆⲆⵠⲆ:
        case Dr.ⲆΔⵠⵠΔ:
        case Dr.ᐃⲆⵠⲆᐃ:
        case Dr.ΔΔΔⲆᐃ:
        case Dr.ⲆΔᐃⵠᐃ:
        case Dr.ΔᐃᐃⲆⲆ:
        case Dr.ⵠⵠΔΔΔ:
        case Dr.ᐃⵠⵠᐃⵠ:
        case Dr.ⵠⲆⲆⲆΔ:
        case Dr.ⲆᐃΔΔᐃ:
        case Dr.ⵠᐃⲆⲆᐃ:
        case Dr.ᐃⵠᐃⲆⲆ:
          if (!Ww.ⵠⲆᐃᐃⲆ) {
            Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
            if ((c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ]) && a === c.right) {
              this.ⵠⵠᐃⵠ[Vv](Kq[Gq].stringify([23, Dr.ΔⲆⲆᐃᐃ]));
            } else {
              this.ⵠⵠᐃⵠ[Vv](Qq[Nq].stringify([23, a]));
            }
          }
          break;
        case Dr.ⲆᐃⲆΔⵠ:
        case Dr.ᐃᐃⲆᐃⵠ:
        case Dr.ⵠΔᐃΔⵠ:
        case Dr.ⵠΔⵠΔΔ:
        case Dr.ᐃᐃΔⵠᐃ:
        case Dr.ⲆΔⵠⵠⵠ:
        case Dr.ⵠⲆᐃⲆⵠ:
        case Dr.ΔⵠΔΔᐃ:
        case Dr.ᐃᐃⵠⲆⵠ:
        case Dr.Δᐃᐃᐃᐃ:
          if (!Ww.ⵠⲆᐃᐃⲆ) {
            Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
            var c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
            this.ⵠⵠᐃⵠ[Vv](Qq[Nq].stringify([23, a]));
          }
          break;
        case Dr.ΔⵠᐃⲆᐃ:
        case Dr.ΔⲆΔᐃⵠ:
        case Dr.ⵠⵠΔΔⵠ:
        case Dr.ᐃΔᐃΔΔ:
        case Dr.ΔΔᐃⲆΔ:
        case Dr.ⲆⲆⲆᐃⲆ:
        case Dr.ᐃⵠᐃⲆᐃ:
        case Dr.ᐃⵠᐃᐃΔ:
        case Dr.ⲆΔⲆⲆᐃ:
        case Dr.ᐃⵠΔΔᐃ:
        case Dr.ⵠⲆⵠᐃⲆ:
        case Dr.ⵠⲆΔⲆΔ:
        case Dr.ⵠΔⵠᐃⵠ:
        case Dr.ⵠⵠⵠᐃᐃ:
        case Dr.ⵠⲆⵠⲆⵠ:
        case Dr.ⲆᐃᐃΔᐃ:
        case Dr.ⵠⲆᐃᐃⵠ:
          if ((c = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ]) && c.ⵠΔⵠⲆᐃ !== a) {
            Ww.ⵠⵠΔᐃᐃ.wait = pr;
          }
          this.ⵠⵠᐃⵠ[Vv](Zo[xq].stringify([23, a]));
          break;
        case Dr.ᐃⵠⵠⵠᐃ:
        case Dr.ᐃᐃᐃⲆᐃ:
        case Dr.ᐃΔᐃⵠΔ:
        case Dr.ⵠⵠⲆⲆⵠ:
        case Dr.ⵠΔᐃⵠⵠ:
        case Dr.ΔΔᐃⵠⵠ:
        case Dr.ⵠⲆΔΔⲆ:
        case Dr.ⲆⵠⲆⲆⲆ:
        case Dr.ⲆᐃⲆⲆⲆ:
        case Dr.ⵠᐃⵠⲆⲆ:
        case Dr.Δⵠⵠᐃᐃ:
        case Dr.ⲆᐃⲆᐃᐃ:
        case Dr.ᐃΔᐃⵠⵠ:
        case Dr.ᐃⵠⵠΔᐃ:
        case Dr.ΔⵠⵠᐃΔ:
        case Dr.ⵠΔⲆⲆΔ:
          this.ⵠⵠᐃⵠ[Vv](dr[_q].stringify([23, a]));
      }
    };
    this.ⲆⲆⲆᐃΔⲆᐃᐃᐃ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](uq[oq].stringify([Dl, a]));
    };
    this.ⵠᐃⲆⵠⲆⲆΔⲆⵠ = function (a) {
      Ww.ⵠⲆΔᐃᐃ.wait = true;
      var b = Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(a);
      Ww.ᐃᐃⲆᐃ.ᐃΔΔⲆᐃⵠⲆ(a, b);
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ΔⵠⲆΔΔⵠΔⲆⵠ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](Ao[Gq].stringify([ul, a]));
    };
    this.ⵠᐃᐃⵠΔᐃⲆⲆΔ = function (a, b) {
      this.ⵠⵠᐃⵠ[Vv](Qo[Bo].stringify([jg, a]));
    };
    this.ᐃⵠΔⲆΔⲆᐃⵠⲆ = function (a) {
      Ww.ⵠⲆΔᐃᐃ.wait = pr;
      var b = Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(a);
      Ww.ᐃᐃⲆᐃ.ⵠᐃΔⵠΔΔⵠ(a, 1, b);
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ΔⲆⵠᐃⲆⲆⲆΔⵠ = function (a) {
      var b = a[Yt];
      var c = a[2];
      Ww.ⵠⲆΔᐃᐃ.wait = true;
      var d = Ww.ᐃᐃⲆᐃ.ΔᐃⵠΔⵠ(b);
      Ww.ᐃᐃⲆᐃ.ⵠᐃΔⵠΔΔⵠ(b, c, d);
      Ww.ΔⲆᐃᐃ.Ⲇᐃⵠ();
    };
    this.ⵠⵠⲆΔⵠΔΔⲆᐃ = function () {
      this.ⵠⵠᐃⵠ[Vv](Qo[Bo].stringify([24]));
    };
    this.ⵠⵠᐃⵠⲆⲆΔⲆΔ = function (a) {
      var b = Math.PI * 2;
      this.ⵠⵠᐃⵠ[Vv](uq[jo].stringify([29, Math.floor((a + b) % b * bl / b)]));
    };
    this.ⵠⲆⵠⵠᐃᐃᐃΔⲆ = function (a) {
      var b = Math.PI * 2;
      this.ⵠⵠᐃⵠ[Vv](uq[jo].stringify([17, Math.floor(yq * ((a + b) % b) / b)]));
    };
    this.ΔᐃᐃᐃᐃΔⲆⵠᐃ = function (a) {
      if (!Spectator) {
        this.ⵠⵠᐃⵠ[Vv](ⲆΔᐃᐃⵠⲆΔ[qq].stringify([21, a]));
      }
    };
    this.ⲆⲆᐃΔΔⵠⲆᐃⲆ = function (a) {
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([26, a]));
    };
    this.ⵠᐃᐃΔⵠⲆⵠᐃⲆ = function (a) {
      var b = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
      if (Ww.ⵠⲆᐃᐃⲆ) {
        if (Math.random() > 0.5) {
          b.text.push(a.substring($t, 25) + " ..." + ⵠΔⲆᐃΔ);
        } else {
          b.text.push(ⵠΔⲆᐃΔ + "... " + a.substring(0, 25));
        }
      } else {
        b.text.push(a);
      }
      this.ⵠⵠᐃⵠ[Vv](vq[xq].stringify([Ak, a]));
    };
    this.ⵠΔⲆΔⲆ = function (a) {
      var b = ᐃⲆⲆΔ.select.ⵠᐃΔ;
      if (b.length != 0) {
        var c = [21];
        var d = [];
        ⵠⵠⵠⲆ.ⲆⵠΔⵠⵠΔΔ(a, {
          x: ᐃⲆⲆΔ.ᐃᐃᐃ.rx,
          y: ᐃⲆⲆΔ.ᐃᐃᐃ.ry
        });
        c.push(a.x);
        c.push(a.y);
        for (var e = 0; e < b.length; e++) {
          d.push(b[e].ⵠⵠⲆⵠᐃᐃᐃᐃᐃ);
        }
        c.push(d);
        this.ⵠⵠᐃⵠ[Vv](Hq[Eq].stringify(c));
      }
    };
    this.ᐃⵠⲆᐃⵠᐃΔ = $t;
    this.ΔⲆᐃⲆⲆⵠᐃ = {
      ᐃᐃ: xb,
      Δⵠᐃⵠ: 0
    };
    this.ᐃᐃΔⵠⲆⵠⵠⵠⵠ = function () {
      if (aw.ΔᐃⵠΔᐃⵠⲆⵠⲆ < $w - this.ᐃⵠⲆᐃⵠᐃΔ) {
        this.ᐃⵠⲆᐃⵠᐃΔ = $w;
        var a = Ww.ᐃᐃᐃ;
        var b = Math.floor(a.x / sg);
        var c = Math.floor(a.y / sg);
        if (b != this.ΔⲆᐃⲆⲆⵠᐃ.ᐃᐃ || this.ΔⲆᐃⲆⲆⵠᐃ.Δⵠᐃⵠ != c) {
          this.ⵠⵠᐃⵠ[Vv](Qq[Gq].stringify([vu, Math.floor(-a.x), Math.floor(-a.y)]));
          this.ΔⲆᐃⲆⲆⵠᐃ.ᐃᐃ = b;
          this.ΔⲆᐃⲆⲆⵠᐃ.Δⵠᐃⵠ = c;
        }
      }
    };
    this.ᐃⵠᐃⵠΔⵠᐃ = Wh;
    this.ⵠΔΔᐃⵠⵠΔᐃΔ = function () {
      if ($w - this.ᐃⵠᐃⵠΔⵠᐃ > aw.ⲆⲆΔⲆΔᐃᐃΔⵠ) {
        this.ᐃⵠᐃⵠΔⵠᐃ = $w;
        this.ping();
      }
    };
    this.ⲆΔⵠⵠᐃⵠⲆⲆΔ = function () {
      Ww.reconnect.enabled = true;
      if (this.ⵠⵠᐃⵠ.ⵠⵠᐃᐃᐃ == this.ⵠⵠᐃᐃᐃ) {
        this.ⵠⵠᐃᐃᐃ++;
        this.ⵠⵠᐃⵠ.close();
        ᐃΔΔᐃ.connect();
      }
    };
    this.ⵠⲆΔᐃⲆⲆⵠᐃⵠ = function (a) {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠᐃⵠⲆΔⲆᐃ]);
      for (var b = yl; a.length > b; b++) {
        Ww.ⲆⲆⲆⵠⵠ.push(a[b]);
      }
    };
    this.ⲆᐃⵠᐃⲆⲆⲆΔᐃ = function (a) {
      this.ⲆⲆⵠⵠᐃ(gf.ΔⲆᐃⵠ[a].ᐃΔⲆⵠΔ + st[ΔⵠᐃΔ.ⵠⵠⵠΔᐃⲆⵠ]);
      Ww.ⲆⲆⲆⵠⵠ.push(a);
      var b = document.getElementById("team_box");
      if (Yw.ⵠᐃΔⵠΔ != -1 && b.style.display == "inline-block") {
        Yw.ⲆΔⲆΔΔ[Yw.ⵠᐃΔⵠΔ].action();
      }
    };
    this.ᐃⲆⵠΔΔᐃᐃⲆΔ = function () {
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ᐃᐃᐃΔᐃΔΔ]);
      Ww.ᐃⲆⲆⲆⲆ.wait = true;
      Ww.ⲆⲆⲆⵠⵠ = [];
      document.getElementById("team_box").style.display = "none";
    };
    this.ⲆⲆᐃΔΔΔΔᐃΔ = function (a) {
      if (a == Ww.id) {
        this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⲆΔᐃᐃⲆΔⵠ]);
        Ww.ᐃⲆⲆⲆⲆ.wait = d;
        Ww.ⲆⲆⲆⵠⵠ = [];
        document.getElementById("team_box").style.display = "none";
      } else {
        this.ⲆⲆⵠⵠᐃ(gf.ΔⲆᐃⵠ[a].ᐃΔⲆⵠΔ + st[ΔⵠᐃΔ.ΔⲆΔᐃᐃⵠⲆ]);
        for (var b = Ol; b < Ww.ⲆⲆⲆⵠⵠ.length; b++) {
          if (a == Ww.ⲆⲆⲆⵠⵠ[b]) {
            Ww.ⲆⲆⲆⵠⵠ.splice(b, Aj);
            break;
          }
        }
        var c = document.getElementById("team_box");
        if (Yw.ⵠᐃΔⵠΔ != -1 && c.style.display == "inline-block") {
          Yw.ⲆΔⲆΔΔ[Yw.ⵠᐃΔⵠΔ].action();
        }
      }
    };
    this.ⵠⲆⲆᐃⵠⵠΔⲆⲆ = function (a) {
      Ww.ᐃⵠᐃΔΔ = ue;
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠⵠΔᐃⲆ]);
      if (this.ⵠⵠᐃᐃᐃ == this.ⵠⵠᐃⵠ.ⵠⵠᐃᐃᐃ) {
        this.ⵠⵠᐃᐃᐃ++;
        Yw.Ⲇᐃⵠᐃᐃ(sf.ᐃⲆⵠΔⵠ);
        this.ⵠⵠᐃⵠ.close();
      }
    };
    //AUTO RESPAWN CODE
    this.ⵠⲆΔᐃⵠⲆΔΔⵠ = function (a, b) {
      Ww.ᐃⵠᐃΔΔ = Bg;
      var c = new Uint16Array(b);
      var d = new Uint32Array(b);
      Ww.ⵠⲆΔᐃⲆΔⲆ.ΔΔᐃΔⲆⲆⲆ = vt[a][Math.floor(Math.random() * vt[a].length)];
      Ww.ⵠⲆΔᐃⲆΔⲆ.ⲆⲆⲆᐃⵠ = ⵠⵠⵠⲆ.ᐃΔⲆⲆⲆⵠᐃ(gf.ΔⲆᐃⵠ[Ww.id].ⲆⲆⲆᐃⵠ);
      Ww.ⵠⲆΔᐃⲆΔⲆ.ΔᐃⲆΔᐃⵠⵠ = ⵠⵠⵠⲆ.ᐃΔⲆⲆⲆⵠᐃ(d[1]);
      Ww.ⵠⲆΔᐃⲆΔⲆ.ⲆⲆΔᐃΔ = c[Ud];
      this.ⲆⲆⵠⵠᐃ(st[ΔⵠᐃΔ.ⵠᐃⵠΔᐃⲆΔ]);
      if (this.ⵠⵠᐃⵠ.ⵠⵠᐃᐃᐃ == this.ⵠⵠᐃᐃᐃ) {
        this.ⵠⵠᐃᐃᐃ++;
        Yw.Ⲇᐃⵠᐃᐃ(Xw.ᐃⲆⵠΔⵠ);
        this.ⵠⵠᐃⵠ.close();
        try {
          Vf.Widget.adsRefresh();
        } catch (a) { }
      }
    };
    this.ping = function () {
      this.ⵠⵠᐃⵠ[Vv](aw.ΔⵠᐃⵠΔΔⵠⲆΔ);
    };
    this.ᐃΔΔⵠΔᐃⲆⵠᐃ = function () {
      if (this.ⵠⵠᐃⵠ.readyState == B) {
        this.ⵠⵠⲆⲆᐃᐃΔ -= aw.ⲆⲆⵠΔᐃⲆⲆ;
      }
    };
    this.ⲆᐃⵠⲆΔΔⲆⵠΔ = function () {
      if (aw.ᐃⲆᐃⲆΔᐃⵠΔⲆ < pf) {
        this.ⵠⵠⲆⲆᐃᐃΔ = $w;
      }
      if (aw.ⲆⲆⵠΔᐃⲆⲆ < $w - this.ⵠⵠⲆⲆᐃᐃΔ) {
        this.ⵠⵠⲆⲆᐃᐃΔ = $w;
        this.ⲆΔⵠⵠᐃⵠⲆⲆΔ();
      }
    };
    this.ΔᐃΔΔⲆⲆⵠΔΔ = function (c) {
      zf++;
      clearTimeout(this.ΔΔᐃΔΔ);
      document.getElementById("commandMainBoxName").innerHTML = this.ΔⲆΔᐃᐃ[this.ᐃᐃⲆⲆΔ][this.ⲆΔΔᐃᐃΔⵠ[this.ᐃᐃⲆⲆΔ]].a;
      document.getElementById("exploreForest").src = "img/forest-leaf.png";
      document.getElementById("exploreWinter").src = "img/winter-flake.png";
      document.getElementById("exploreDesert").src = "img/desert-cactus.png";
      document.getElementById("exploreLava").src = "img/lava-volcano.png";
      this.ⵠⵠⲆⲆᐃᐃΔ = $w;
      Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.ᐃΔⲆᐃΔ = Ww.ᐃⲆΔᐃ.ᐃΔᐃⲆⲆ.ⵠΔⲆΔⵠ;
      Ww.ᐃⲆΔᐃ.ⲆⲆⵠⵠΔⵠᐃ.ᐃΔⲆᐃΔ = Ww.ᐃⲆΔᐃ.ⲆⲆⵠⵠΔⵠᐃ.ⵠΔⲆΔⵠ;
      Ww.ᐃⲆΔᐃ.ᐃⵠⵠΔⵠΔⵠ.ᐃΔⲆᐃΔ = Ww.ᐃⲆΔᐃ.ᐃⵠⵠΔⵠΔⵠ.ⵠΔⲆΔⵠ;
      Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.ᐃΔⲆᐃΔ = Ww.ᐃⲆΔᐃ.ᐃⲆⲆᐃΔⵠⵠ.ⵠΔⲆΔⵠ;
      Ww.ᐃⲆΔᐃ.ᐃⲆⵠⵠⵠ.ᐃΔⲆᐃΔ = Ww.ᐃⲆΔᐃ.ᐃⲆⵠⵠⵠ.ⵠΔⲆΔⵠ;
      Ww.ᐃⲆΔᐃ.ⵠΔⲆΔ = jh;
      Ww.ᐃⲆΔᐃ.c = 1;
      Ww.ᐃⲆΔᐃ.ᐃⵠⲆ = ce;
      Ww.ᐃⲆΔᐃ.ⵠᐃⲆ = Eg;
      Ww.ᐃⲆΔᐃ.ᐃⲆΔ = 1;
      Ww.ᐃⲆΔᐃ.ᐃᐃᐃⲆⲆᐃⲆ = Ud;
      Ww.ⵠΔⵠᐃⵠⲆⲆ = M;
      Yw.ᐃⲆᐃΔᐃ.display = Lu;
      Ww.ᐃᐃⲆᐃ.ᐃⵠⲆΔⲆ = [];
      Ww.ᐃᐃⲆᐃ.ⲆᐃΔ = [];
      Ww.ᐃᐃⲆᐃ.max = bw.ⵠⵠⵠⵠⲆΔᐃ;
      Ww.ᐃᐃⲆᐃ.ᐃⲆᐃΔᐃⵠⲆ = Jt;
      Ww.ᐃᐃⲆᐃ.ᐃΔᐃᐃⲆ = 0;
      Ww.ᐃᐃⲆᐃ.id = -sd;
      Yw.ⵠΔⵠΔΔΔⲆ = 1;
      Yw.ᐃⵠⲆΔᐃΔⲆ = sd;
      Yw.ⵠⲆΔΔⵠᐃΔ = Aj;
      Yw.ᐃⵠⵠᐃᐃᐃⲆ = V;
      Ww.ᐃⵠᐃΔΔ = true;
      Ww.ᐃᐃⲆᐃ.ⲆᐃᐃΔⵠᐃⵠ.stop();
      Ww.ΔⲆᐃᐃ.ⲆⵠᐃⲆᐃ = [];
      Ww.ΔⲆᐃᐃ.ᐃΔⲆΔⲆ = bs;
      Ww.ΔⲆᐃᐃ.ΔᐃᐃⲆΔⵠⵠᐃⵠ = false;
      Ww.ΔⲆᐃᐃ.Ⲇⵠᐃᐃ = -1;
      Ww.ΔⲆᐃᐃ.id = -1;
      Ww.ΔⲆᐃᐃ.ᐃⵠΔΔΔ = M;
      Ww.ΔⲆᐃᐃ.ⲆΔⵠΔⲆ = false;
      Ww.ΔⲆᐃᐃ.ΔⵠΔⵠᐃ = Jn;
      Ww.ΔⲆᐃᐃ.ⲆᐃⵠⵠΔⵠΔ = ue;
      Ww.ΔⲆᐃᐃ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Kr, ik, 0, V, 1);
      Ww.ⵠΔΔⲆᐃ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pa, Dh, 1, Ko, 1 / wh, bt);
      Ww.ⵠΔΔⲆᐃ.wait = false;
      Ww.ⵠⵠΔᐃᐃ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, Kr, Eg, 0, V / _g, V);
      Ww.ⵠⵠΔᐃᐃ.wait = ys;
      Ww.ⵠⲆΔᐃᐃ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(false, _s, Eg, 0, Fo, Aj);
      Ww.ⵠⲆΔᐃᐃ.wait = false;
      Ww.ᐃⲆⲆⲆⲆ.id = -ce;
      Ww.ᐃⲆⲆⲆⲆ.ΔⲆᐃΔ = -1;
      Ww.ᐃⲆⲆⲆⲆ.wait = false;
      Ww.ᐃⲆⲆⲆⲆ.timeout = new ⵠⵠⵠⲆ.ⲆⲆᐃΔ(Pe, 0, 1, Dh, js / 30, 1);
      Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.x = -Cs;
      Yw.ⲆⲆⵠΔⲆ.ΔΔⵠᐃⵠ.y = -1;
      Yw.ᐃᐃΔⵠ.open = Pa;
      Yw.ⲆⲆⵠΔⲆ.ΔⲆᐃⵠ = [];
      Ww.ⵠⵠⲆᐃΔ.enabled = Pq;
      gf.mode = c[yl];
      if (c[20] !== undefined && Qi !== c[21]) {
        gf.ᐃᐃΔΔⲆ = c[ns];
        gf.ΔᐃⲆΔⲆ = c[21];
        gf.w = gf.ⵠⵠᐃΔᐃⲆⵠ * gf.ᐃᐃΔΔⲆ;
        gf.ᐃⵠⲆ = gf.ΔᐃⲆΔⲆ * gf.ⵠΔⵠᐃⲆⵠΔ;
      }
      gf.ᐃᐃΔⵠⲆⵠⲆ = c[22];
      gf.ⲆΔᐃᐃⵠ = c[23];
      b.ᐃⵠᐃᐃΔΔⵠ(c[24]);
      b.ᐃⵠᐃΔᐃⲆⵠᐃΔ(c[25]);
      Ww.ⲆᐃⲆⵠᐃ.ⲆⲆΔΔᐃ = c[26];
      Ww.ΔΔᐃᐃⵠᐃⵠ = ko;
      Ww.ᐃΔᐃΔᐃ.ⲆⲆΔΔᐃ = c[27];
      gf.ⵠᐃᐃᐃⵠᐃⲆᐃΔ(c[19]);
      gf.time = c[pl];
      gf.ⲆⲆⵠΔⵠ.ⵠΔΔΔⲆ = c[15];
      gf.ⲆⲆⵠΔⵠ.ⵠⲆⵠⲆⲆ = new Date().getTime();
      Yw.ΔΔⵠⲆ.ⵠᐃⲆⵠⵠΔⵠ = c[Sq];
      gf.transition = Bj;
      Ww.Δⵠⵠ = c[Wq];
      Yw.ΔΔⵠⲆ.reset();
      Ww.ⲆⲆⲆⵠⵠ = c[8];
      gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ⲆⵠⲆΔⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠΔⲆᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠᐃΔΔᐃ] = [];
      gf.ⵠᐃΔ[ew.Ⲇⵠᐃⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠᐃᐃΔ] = [];
      gf.ⵠᐃΔ[ew.ΔΔⲆᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔⲆΔᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔΔΔᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔⲆⲆᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠΔⵠⲆΔ] = [];
      gf.ⵠᐃΔ[ew.ⵠᐃⵠⲆᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔⵠᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠⵠⵠⲆΔ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆⲆⲆᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆⲆΔⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠⵠΔⵠ] = [];
      gf.ⵠᐃΔ[ew.ⲆⲆᐃⲆΔ] = [];
      gf.ⵠᐃΔ[ew.ⵠⵠΔⲆⲆ] = [];
      gf.ⵠᐃΔ[ew.ΔΔΔΔⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃⲆᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠᐃⲆΔ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠᐃΔⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠⲆⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ⵠΔⲆⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠⲆⵠΔ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠⲆⵠⲆ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔⵠⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔΔⲆⵠ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔᐃⲆⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃᐃⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔⲆᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.Ⲇᐃⵠⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔⲆᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃᐃΔⵠ] = [];
      gf.ⵠᐃΔ[ew.ΔΔΔⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠᐃᐃⲆⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃΔⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔⵠⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ⵠⲆᐃⲆⵠ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠΔΔᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠΔⲆⵠ] = [];
      gf.ⵠᐃΔ[ew.ΔΔⲆΔΔΔⵠ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆᐃΔΔ] = [];
      gf.ⵠᐃΔ[ew.ⵠⲆᐃⵠⲆ] = [];
      gf.ⵠᐃΔ[ew.ⵠⲆⵠⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔΔΔΔ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆᐃᐃΔ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠΔᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠⵠⵠΔ] = [];
      gf.ⵠᐃΔ[ew.ⲆᐃⲆΔΔ] = [];
      gf.ⵠᐃΔ[ew.ⲆⵠᐃⲆⵠ] = [];
      gf.ⵠᐃΔ[ew.ⵠΔⵠΔΔ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔΔᐃΔ] = [];
      gf.ⵠᐃΔ[ew.ⲆⲆᐃⵠΔΔᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔᐃᐃΔ] = [];
      gf.ⵠᐃΔ[ew.Δⵠᐃⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⲆⵠⲆⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔⲆᐃⵠ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔⲆⵠΔⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ΔᐃᐃⲆⵠⵠⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃⵠⲆⲆⵠⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃᐃΔΔΔᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠⵠΔⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔΔⲆΔᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃⵠᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔΔᐃⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠᐃᐃΔΔ] = [];
      gf.ⵠᐃΔ[ew.ⲆⵠᐃᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ΔⲆᐃⲆⵠ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃᐃᐃⵠ] = [];
      gf.ⵠᐃΔ[ew.ΔΔⵠᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ⲆⲆᐃⲆᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃⵠΔⵠ] = [];
      gf.ⵠᐃΔ[ew.ⲆⲆΔᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ⵠⵠⲆΔΔ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔΔᐃⵠ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆΔⲆⲆ] = [];
      gf.ⵠᐃΔ[ew.ⲆΔⵠⲆΔ] = [];
      gf.ⵠᐃΔ[ew.ΔⵠΔΔⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆΔⵠⵠ] = [];
      gf.ⵠᐃΔ[ew.ⵠⵠⲆᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃⲆΔᐃΔ] = [];
      gf.ⵠᐃΔ[ew.ⵠⲆⲆᐃᐃ] = [];
      gf.ⵠᐃΔ[ew.ΔᐃΔⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ⵠΔΔᐃⲆ] = [];
      gf.ⵠᐃΔ[ew.ᐃⵠⲆᐃⵠ] = [];
      gf.ⵠᐃΔ[ew.ⵠᐃⲆⵠᐃ] = [];
      gf.ⵠᐃΔ[ew.ᐃΔΔΔΔ] = [];
      gf.ⵠᐃΔ[ew.ᐃᐃⵠΔΔ] = [];
      gf.ΔΔⵠΔ = [];
      gf.ΔᐃᐃⲆⵠⲆⵠ = c[_k];
      Ww.id = c[9];
      Ww.ᐃⲆᐃⲆ = Ww.id * gf.ΔᐃᐃⲆⵠⲆⵠ;
      if (Zw.loaded) {
        Zw.ΔⲆᐃⵠ[0].ᐃⲆᐃⲆ = Ww.ᐃⲆᐃⲆ;
        Zw.ΔⲆᐃⵠ[0].ΔⲆⲆⲆᐃΔΔ = Wh;
      }
      cf.ΔᐃΔⵠⲆⵠᐃ();
      Ww.ᐃᐃᐃ.ᐃΔᐃⲆⵠ(c[3], c[10]);
      gf.ΔⲆᐃⵠ = [];
      var d = gf.ΔⲆᐃⵠ;
      for (var e = 0; c[11] > e; e++) {
        d.push(new kw());
      }
      e = 0;
      for (var f = c[4]; e < f.length; e++) {
        var g = d[f[e].i];
        g.ᐃΔⲆⵠΔ = f[e].n;
        g.ⲆΔⲆⵠ = f[e].s;
        g.ΔᐃᐃΔⵠ = f[e].a;
        g.ΔᐃⲆΔⵠ = f[e].c;
        g.ΔⲆⵠⵠᐃ = f[e].b;
        g.ᐃⵠⲆΔΔ = f[e].d;
        g.ΔΔⲆⲆᐃⲆⲆ = f[e].g;
        g.level = f[e].l;
        g.ⲆⲆⲆᐃⵠ = ⵠⵠⵠⲆ.ⲆΔⵠᐃᐃⵠΔ(f[e].p);
        g.ᐃⵠᐃΔΔ = sh;
        if (ce === Wv) {
          g.ᐃΔⲆⵠΔ += "|" + f[e].i;
        }
      }
      Ww.ΔΔᐃⵠΔ.sort();
      if (gf.mode === bw.ΔⵠΔⲆⵠⲆΔ && gf.ΔⲆᐃⵠ[Ww.id].ᐃΔⲆⵠΔ === "spectator") {
        Ww.ⵠⵠⵠⵠⲆⵠⵠ = true;
      } else {
        Ww.ⵠⵠⵠⵠⲆⵠⵠ = fl;
      }
      if (bw.ⲆᐃᐃΔⵠ === gf.mode && gf.ΔⲆᐃⵠ[Ww.id].ⲆΔⲆⵠ === bw.ⲆⵠᐃⲆⲆᐃᐃ) {
        Ww.ⵠⲆᐃᐃⲆ = Oh;
      } else {
        Ww.ⵠⲆᐃᐃⲆ = gg;
      }
      if (bw.ᐃᐃⵠᐃΔ === gf.mode && gf.ΔⲆᐃⵠ[Ww.id].ⲆΔⲆⵠ === bw.ᐃᐃΔⵠⲆᐃᐃ) {
        Ww.Δᐃⵠⵠⵠⵠᐃ = true;
      } else {
        Ww.Δᐃⵠⵠⵠⵠᐃ = false;
      }
      ⲆᐃΔⵠ.set("starve_token", Ww.ΔᐃΔⲆⵠ);
      if (c[12] === Jt) {
        Ww.ΔⵠΔⲆᐃ.ΔⵠᐃⲆⲆ = Dh;
        Yw.ΔΔⵠⲆ.restore(c[sa]);
        var h = c[14];
        if (h[Dr.ᐃⵠΔⵠ]) {
          Ww.ᐃᐃⲆᐃ.ΔΔᐃⵠⲆᐃΔ(1, 0);
        }
        for (e = 0; e < h.length; e++) {
          if (h[e]) {
            if (Dr.ᐃⵠΔⵠ == e) {
              continue;
            }
            if (e == Dr.ΔⲆⲆᐃᐃ) {
              continue;
            }
            this.ᐃᐃΔⵠⵠⵠⲆ([0, e, h[e]]);
          }
        }
        Ww.ΔⵠΔⲆᐃ.open = false;
      } else {
        if (bw.ⲆᐃⲆⵠΔ === gf.mode) {
          this.ᐃᐃΔⵠⵠⵠⲆ([Lu, Dr.ᐃᐃᐃᐃᐃ, Yt]);
        } else if (bw.ᐃᐃⵠᐃΔ === gf.mode) {
          if (Ww.Δᐃⵠⵠⵠⵠᐃ) {
            this.ᐃᐃΔⵠⵠⵠⲆ([0, Dr.ⲆΔⵠⲆΔ, 4]);
          } else {
            this.ᐃᐃΔⵠⵠⵠⲆ([Dh, Dr.ⵠΔⵠⲆΔ, nh]);
          }
        }
        if (gf.mode === bw.ⲆᐃⵠΔΔ || bw.ᐃᐃⵠᐃΔ === gf.mode || bw.ⵠⵠᐃᐃΔ === gf.mode || bw.ⲆᐃⲆⵠΔ === gf.mode) {
          Ww.ΔⵠΔⲆᐃ.ΔⵠᐃⲆⲆ = new Date().getTime();
          Ww.ΔⵠΔⲆᐃ.open = true;
          Ww.ΔⵠΔⲆᐃ.value = c[Ui];
          Yw.ΔⵠΔⲆᐃ.ⵠⲆⵠⲆⲆ();
        } else {
          Ww.ΔⵠΔⲆᐃ.ΔⵠᐃⲆⲆ = 0;
          Ww.ΔⵠΔⲆᐃ.open = false;
          Ww.ΔⵠΔⲆᐃ.value = 0;
        }
        Ww.ⵠⵠⵠⵠΔⵠᐃ = c[12].toString();
      }
      Ww.ⵠΔᐃᐃΔ.enabled = c[6];
      Ww.ⵠΔᐃᐃΔ.ΔⵠᐃⲆⲆ = -sd;
      Ww.ⵠΔᐃᐃΔ.label = null;
      Ww.ⵠΔᐃᐃΔ.now = -1;
      ⲆᐃΔⵠ.set("starve_token_id", Ww.ⵠⵠⵠⵠΔⵠᐃ);
      if (Ww.reconnect.enabled) {
        Ww.reconnect.rotate = 0;
        Ww.reconnect.enabled = false;
      } else {
        sf.Ⲇᐃⵠᐃᐃ(Yw.ᐃⲆⵠΔⵠ);
        if (ga) {
          ga("send", "event", "Game", "play", "S" + sf.ⲆΔⲆⵠ + "A" + sf.ΔᐃᐃΔⵠ);
        }
      }
    };
    this.connect = function () {
      b.ⵠΔⵠⲆᐃΔᐃ = kq;
      b.ⵠⲆΔᐃⲆᐃⵠ();
    };
    this.ⲆᐃⵠⵠΔᐃᐃᐃᐃ = function (c) {
      let d = bw.ΔᐃⲆⲆⵠⵠΔⵠⲆ[b.ᐃᐃⲆⲆΔ];
      console.log(undefined, Uq, undefined);
      let f;
      let g;
      let h = b.ⲆΔΔᐃᐃΔⵠ[b.ᐃᐃⲆⲆΔ];
      if (h == Wh) {
        f = Zv + "/matchmaker/lobbies/find";
        g = {
          game_modes: [d]
        };
      } else {
        console.log(Ya, Zl, undefined, jr);
        let a = b.ⲆⲆᐃᐃΔ.find(a => a[hj[Bq]] == d && a.idx == h);
        console.log(Tg, us);
        f = Zv + "/matchmaker/lobbies/join";
        g = {
          lobby_id: a.id
        };
      }
      let e = {};
      if (c) {
        e.Authorization = `Bearer ${c}`;
      }
      fetch(f, {
        method: "POST",
        headers: e,
        body: JSON.stringify(g)
      }).then(a => {
        if (a.ok) {
          a.json().then(a => {
            console.log(undefined, jr);
            b.ⲆⵠⵠᐃᐃΔΔ(a);
          });
        } else {
          alert("Failed to join lobby");
        }
      });
    };
    this.ⵠⲆΔᐃⲆᐃⵠ = function () {
      console.log(undefined);
      if (Yv === undefined) {
        a(b.ⲆᐃⵠⵠΔᐃᐃᐃᐃ);
      } else {
        b.ⲆⵠⵠᐃᐃΔΔ({
          lobby: {
            player: {
              token: ko
            },
            ports: {
              default: {
                host: Yv.host,
                is_tls: $t
              }
            }
          }
        });
      }
    };
    this.ⲆⵠⵠᐃᐃΔΔ = function (a) {
      let c = a.lobby.ports.default;
      let d = c.host;
      let e = "ws" + (c.is_tls ? "s" : "") + "://" + d + "?token=" + a.lobby.player.token;
      console.log(undefined, Hh);
      b.ⵠⵠᐃⵠ = new Vf.WebSocket(e);
      b.ⵠⵠᐃⵠ.binaryType = "arraybuffer";
      b.ⵠⵠᐃⵠ.ⵠⵠᐃᐃᐃ = b.ⵠⵠᐃᐃᐃ;
      b.ⵠⵠᐃⵠ.onmessage = function (a) {
        if (b.ⵠⵠᐃᐃᐃ == b.ⵠⵠᐃᐃᐃ) {
          if (typeof a.data == "string") {
            var c = JSON.parse(a.data);
            switch (c[0]) {
              case tr:
                b.ΔΔⲆⲆΔ(c);
                break;
              case Yt:
                b.ⲆᐃᐃᐃⲆᐃΔ(c[1]);
                break;
              case 2:
                b.ⵠΔᐃᐃᐃⵠᐃΔᐃ(c);
                break;
              case Ik:
                b.ΔᐃΔΔⲆⲆⵠΔΔ(c);
                break;
              case 4:
                b.message(c[1]);
                break;
              case Ju:
                b.ΔⲆᐃⲆᐃⲆⲆ(c);
                break;
              case Mr:
                b.ᐃⵠᐃᐃΔΔⵠ(c[yl]);
            }
          } else {
            var d = new Uint8Array(a.data);
            switch (d[kq]) {
              case 0:
                b.ⵠᐃΔ(a.data, d, Bj);
                break;
              case 1:
                b.ⵠᐃΔ(a.data, d, Oh);
                break;
              case ij:
                b.ᐃⵠⲆᐃⲆᐃΔΔⲆ();
                break;
              case 3:
                b.ᐃᐃΔⵠⵠⵠⲆ(new Uint16Array(a.data));
                break;
              case kr:
                b.ᐃᐃΔᐃⲆᐃΔᐃᐃ();
                break;
              case 5:
                b.ⲆⵠᐃⲆΔⲆᐃΔⵠ();
                break;
              case mg:
                b.ΔΔΔⲆΔⵠⲆⵠⲆ();
                break;
              case 7:
                b.ᐃⲆⵠΔⵠᐃⲆΔᐃ(a.data);
                break;
              case Oi:
                b.ᐃⵠⲆⵠΔⲆΔⵠⲆ(d[1]);
                break;
              case yn:
                b.ΔᐃⲆⲆⵠᐃⲆᐃᐃ(d[Yt]);
                break;
              case 10:
                b.ΔΔΔⲆⵠⲆⲆ();
                break;
              case 11:
                b.ⵠᐃΔⵠⵠⵠΔ(d[Cs], d[2]);
                break;
              case 12:
                b.ᐃⵠΔΔΔ(d[jh]);
                break;
              case 13:
                b.ⲆⲆⲆΔⵠᐃΔᐃᐃ(d, a.data);
                break;
              case 14:
                b.ⵠⲆⵠⲆᐃⲆΔ();
                break;
              case 15:
                b.ⵠⲆΔΔΔⵠᐃᐃⲆ(d[1]);
                break;
              case Kj:
                b.ᐃⲆΔᐃ(d[1], d[tg], d[3], d[4], d[lt], d[6], d[7]);
                break;
              case 17:
                b.ⵠΔΔⵠΔⵠⵠΔΔ(a.data);
                break;
              case hg:
                b.ⵠⵠᐃᐃᐃⵠⵠΔΔ();
                break;
              case 19:
                b.ΔⵠΔⵠᐃ(d[1]);
                break;
              case 20:
                b.ΔⵠⲆⵠΔᐃⵠᐃⵠ();
                break;
              case 21:
                b.ⵠⵠⲆⲆ(a.data);
                break;
              case 22:
                b.ᐃⲆΔⲆΔᐃⲆΔⵠ(d[1]);
                break;
              case 23:
                b.ⲆⲆⵠⲆⵠⲆᐃΔᐃ(a.data);
                break;
              case 24:
                b.ⵠᐃⲆᐃⵠΔⵠⲆΔ(d[1]);
                break;
              case 25:
                b.ⵠⲆΔᐃⵠⲆΔΔⵠ(d[1], a.data);
                break;
              case 26:
                b.ⲆⲆⵠΔⲆ(d);
                break;
              case 27:
                b.ⵠΔⵠΔᐃᐃΔΔᐃ();
                break;
              case 28:
                b.ⵠΔᐃᐃΔ(d[Aj]);
                break;
              case 29:
                b.ΔΔⵠΔⵠΔΔⲆᐃ();
                break;
              case 30:
                b.ⵠⲆⲆᐃⵠⵠΔⲆⲆ();
                break;
              case 31:
                b.ⵠⲆΔᐃⲆⲆⵠᐃⵠ(d);
                break;
              case 32:
                b.ⲆⲆᐃΔΔΔΔᐃΔ(d[ce]);
                break;
              case 33:
                b.ⲆᐃⵠᐃⲆⲆⲆΔᐃ(d[1]);
                break;
              case 34:
                b.ᐃⲆⵠΔΔᐃᐃⲆΔ();
                break;
              case 35:
                b.ⲆⵠⲆⲆΔⵠᐃⵠⲆ(d[Fo]);
                break;
              case 36:
                b.ⲆᐃⵠⵠΔⵠΔ(d[bt]);
                break;
              case 37:
                b.ⵠᐃⵠⵠΔⲆⲆⵠᐃ(d[1], d[yh]);
                break;
              case 38:
                b.ⵠᐃᐃᐃΔΔΔⵠΔ(d[Ud]);
                break;
              case 39:
                b.ΔⲆᐃΔᐃⵠⵠΔᐃ(d[1]);
                break;
              case 40:
                b.ᐃⲆⵠⲆⲆᐃΔⲆᐃ();
                break;
              case 41:
                b.ΔΔⵠⵠΔⲆⵠⵠᐃ(d);
                break;
              case 42:
                b.ⲆΔᐃᐃⵠⲆΔⲆⵠ(d[js]);
                break;
              case 43:
                b.ⲆⵠΔᐃⵠΔⵠⲆᐃ(d[ik]);
                break;
              case 44:
                b.claimed(d[wg]);
                break;
              case 45:
                b.ΔᐃΔⵠᐃⲆᐃᐃⵠ(d[Aj]);
                break;
              case 46:
                b.ΔᐃΔᐃΔᐃⵠᐃΔ(d[1]);
                break;
              case 47:
                b.ⲆΔⵠΔⲆ(d[1]);
                break;
              case 48:
                b.ΔΔΔᐃⲆΔᐃⲆⵠ();
                break;
              case 50:
                b.ᐃⵠⲆΔⵠⵠⵠᐃⲆ(d[ce], d[Wq], d[3]);
                break;
              case 51:
                b.ⲆⵠᐃΔⲆΔΔⲆΔ();
                break;
              case 52:
                b.ⵠᐃⲆⵠⲆⲆΔⲆⵠ(d[1]);
                break;
              case 53:
                b.ᐃⵠΔⲆΔⲆᐃⵠⲆ(d[1]);
                break;
              case 54:
                b.ᐃⵠΔᐃⲆⲆΔᐃᐃ();
                break;
              case 55:
                b.ΔⲆΔⵠΔⲆΔΔⲆ(d[1]);
                break;
              case 56:
                b.ⵠᐃⲆᐃᐃⲆⵠΔⵠ(d[ub]);
                break;
              case 57:
                b.ⲆⵠⲆⵠΔⵠᐃⲆΔ();
                break;
              case 58:
                b.ⵠΔᐃΔΔᐃⵠⵠΔ();
                break;
              case 59:
                b.ⲆⵠⵠᐃᐃᐃᐃΔᐃ();
                break;
              case 60:
                b.ΔⲆᐃᐃΔᐃⵠⲆᐃ();
                break;
              case 61:
                Ww.ᐃᐃᐃ.ⵠΔᐃⲆⲆⵠⵠ = 0.2;
                Ww.ᐃᐃᐃ.ΔⵠᐃⲆⲆ = 3;
                break;
              case 62:
                b.ΔⲆⵠᐃⲆⲆⲆΔⵠ(new Uint16Array(a.data));
                break;
              case 63:
                b.ⵠᐃΔΔⵠⲆᐃⵠΔ();
                break;
              case 64:
                b.ΔⵠⲆⲆΔⵠⲆⵠⵠ();
                break;
              case 65:
                b.ⲆΔⵠᐃⲆᐃᐃⲆΔ();
                break;
              case 66:
                b.ᐃΔⲆΔᐃⲆⲆⵠⵠ();
                break;
              case 67:
                b.ᐃⲆΔᐃⵠⲆⲆⵠᐃ(d[1]);
                break;
              case 68:
                b.ⲆⵠⵠᐃⲆⲆΔΔΔ(d[1]);
                break;
              case 69:
                b.ΔΔᐃᐃⵠᐃⵠ(d[Yt]);
                break;
              case 70:
                b.ΔⲆⵠⲆᐃⲆⵠᐃⵠ(d[1]);
                break;
              case 71:
                b.ⵠⲆⲆᐃⵠ(d[1]);
            }
          }
        }
      };
      this.ⵠⵠᐃⵠ.onopen = function () {
        clearTimeout(b.ΔΔᐃΔΔ);
        Ww.ᐃⲆΔᐃⵠⲆᐃ = Ww.ᐃⲆΔᐃⵠⲆᐃ || ⵠⵠⵠⲆ.ⲆΔᐃⵠΔⲆⲆ("token");
        ⵠⵠⵠⲆ.ⲆΔΔᐃⲆⲆⲆ().then(a => {
          b.ⵠⵠᐃⵠ[Vv](fr[_q].stringify([sf.ᐃΔⲆⵠΔ.input.value, screen.width + 200, screen.height + 200, aw.ⵠᐃⵠᐃᐃⵠⲆ, Ww.ΔᐃΔⲆⵠ, Ww.ⵠⵠⵠⵠΔⵠᐃ, Ww.reconnect.enabled ? 1 : 0, sf.ⲆΔⲆⵠ, sf.ΔᐃᐃΔⵠ, sf.ᐃΔᐃᐃⲆ, sf.ΔⲆⵠⵠᐃ, sf.ΔᐃⲆΔⵠ, sf.ᐃⵠⲆΔΔ, cx === undefined ? ko : cx, bx === undefined ? 0 : bx.substring(bx.length - 50), Xv, Ww.ᐃⲆΔᐃⵠⲆᐃ, a, Ww.ΔⵠΔΔⲆΔⵠ, Ww.ΔᐃⵠΔⲆⲆⵠ]));
          Ww.ᐃⲆΔᐃⵠⲆᐃ = undefined;
          Ww.ΔⵠΔΔⲆΔⵠ = La;
          Ww.ΔᐃⵠΔⲆⲆⵠ = undefined;
          b.ΔΔᐃΔΔ = setTimeout(b.timeout, aw.ᐃⲆᐃⵠΔⵠΔⵠⲆ);
        });
      };
    };
  }();
  var gf;
  var Ww;
  var Xw;
  var Yw = {
    ⵠᐃᐃⵠⲆ: sr
  };
  var Zw = new function () {
    this.ᐃⲆⵠΔⵠ = 0;
    this.loaded = 0;
    this.transition = _s;
    this.ᐃᐃΔⵠᐃⲆⲆ = function (a) {
      return a / gf.w * 100;
    };
    this.ⵠᐃⵠᐃΔΔΔ = function (a) {
      return or * (a / gf.ᐃⵠⲆ);
    };
    this.ⵠⵠΔⵠⵠᐃⵠ = function (a, b) {
      a = this.ᐃᐃΔⵠᐃⲆⲆ(a) - this.ⵠⲆᐃⵠᐃ.x;
      return this.ⵠⲆᐃⵠᐃ.x + b * a;
    };
    this.ΔⵠΔᐃΔⲆⵠ = function (a, b) {
      a = Math.abs(this.ⵠᐃⵠᐃΔΔΔ(a) - this.ⵠⲆᐃⵠᐃ.y);
      return this.ⵠⲆᐃⵠᐃ.y + b * a;
    };
    this.sample = {};
    this.ⲆⵠᐃⵠⲆ = {};
    this.ᐃⲆⲆΔ = {};
    this.ΔⲆᐃΔⲆⲆΔ = function (a, b, c, d) {
      for (var e = 0; b.length > e; e++) {
        var f = b[e];
        if (!a.playing(f)) {
          a.pos(c, d, -0.5, f);
          a.play(f);
          return true;
        }
      }
      return false;
    };
    this.ΔᐃⵠΔ = function (a, b, c, d) {
      c = this.ⵠⵠΔⵠⵠᐃⵠ(c, ⲆΔⲆⲆΔ.ⵠⲆⲆⵠⲆⵠⵠ);
      d = this.ΔⵠΔᐃΔⲆⵠ(d, ⲆΔⲆⲆΔ.ⵠⲆⲆⵠⲆⵠⵠ);
      console.log("HIT", a, b, c, d, ⲆΔⲆⲆΔ.ⵠⲆⲆⵠⲆⵠⵠ);
      if (a) {
        if (b === 1) {
          this.ΔⲆᐃΔⲆⲆΔ(this.ᐃⲆⲆΔ.ΔΔⵠⵠᐃᐃⵠ, this.sample.ΔΔⵠⵠᐃᐃⵠ, c, d);
        } else if ($t === b) {
          this.ΔⲆᐃΔⲆⲆΔ(this.ᐃⲆⲆΔ.ᐃⲆⵠⲆⲆⵠⲆ, this.sample.ᐃⲆⵠⲆⲆⵠⲆ, c, d);
        }
      } else {
        this.ΔⲆᐃΔⲆⲆΔ(this.ᐃⲆⲆΔ.ᐃᐃⵠⵠᐃ, this.sample.ᐃᐃⵠⵠᐃ, c, d);
      }
    };
    this.ⵠⲆᐃⵠᐃ = {
      y: 0,
      x: $t
    };
    this.ⲆⲆⵠΔᐃᐃⵠ = {
      y: 0,
      x: 0
    };
    this.ᐃᐃⲆᐃᐃ = {};
    this.ΔⲆᐃⵠ = [];
    this.ⲆⲆᐃⵠⲆ = function (a, b) {
      for (var c in this.ᐃᐃⲆᐃᐃ) {
        var d = this.ᐃᐃⲆᐃᐃ[c];
        d.check(a);
        if (d.ⲆⵠΔΔᐃᐃᐃ) {
          if (gf.ⲆⲆⵠΔⵠ.now < Ow.ⲆΔⵠⵠᐃᐃⲆ) {
            d.ⵠⵠⵠΔᐃ();
          }
          if (b) {
            d.Ⲇᐃⵠ(a, this.ⵠⲆᐃⵠᐃ);
          }
          if (this.transition) {
            d.transition();
          }
        }
      }
      this.transition &&= _s;
    };
    this.ᐃᐃⲆⵠᐃⵠⲆⵠⲆ = function () {
      var a = [];
      for (var b = Ol; b < this.ΔⲆᐃⵠ.length; b++) {
        if ((e = this.ΔⲆᐃⵠ[b]).ΔⲆⲆⲆᐃΔΔ) {
          a.push(b);
        } else if (!e.ΔⲆⲆⲆᐃΔΔ && !gf.ΔΔⵠΔ[e.ᐃⲆᐃⲆ]) {
          e.ⲆᐃΔⲆᐃⵠⲆ();
          a.push(b);
        }
      }
      var c = gf.ⵠᐃΔ[ew.ⲆΔⵠⵠ];
      var d = 0;
      for (b = 0; b < c.length && a.length > d; b++) {
        var e = c[b];
        if ((gf.mode != bw.ΔⵠΔⲆⵠⲆΔ || gf.ΔⲆᐃⵠ[e.id].ᐃΔⲆⵠΔ !== "spectator") && -Aj === e.ᐃⵠΔᐃΔ && e.ᐃⲆᐃⲆ !== Ww.ᐃⲆᐃⲆ) {
          this.ΔⲆᐃⵠ[a[d]].ⵠⲆⵠⲆⲆ(e.ᐃⲆᐃⲆ);
          d++;
        }
      }
    };
    this.ᐃΔⵠⵠᐃⵠⲆⵠⵠ = function () {
      this.ᐃᐃⲆⵠᐃⵠⲆⵠⲆ();
      for (var a = Fj; this.ΔⲆᐃⵠ.length > a; a++) {
        var b = this.ΔⲆᐃⵠ[a];
        if (!b.ΔⲆⲆⲆᐃΔΔ && b.check()) {
          b.Ⲇᐃⵠ();
        }
      }
    };
    this.ⵠΔᐃΔᐃⲆⵠⵠᐃ = function (a) {
      if (this.ⲆⲆⵠΔᐃᐃⵠ.x === a.x && a.y === this.ⲆⲆⵠΔᐃᐃⵠ.y) {
        return Fj;
      } else {
        this.ⲆⲆⵠΔᐃᐃⵠ.x = a.x;
        this.ⲆⲆⵠΔᐃᐃⵠ.y = a.y;
        this.ⵠⲆᐃⵠᐃ.x = this.ᐃᐃΔⵠᐃⲆⲆ(a.x);
        this.ⵠⲆᐃⵠᐃ.y = this.ⵠᐃⵠᐃΔΔΔ(a.y);
        Howler.pos(this.ⵠⲆᐃⵠᐃ.x, this.ⵠⲆᐃⵠᐃ.y, $t);
        return Ur;
      }
    };
    this.ΔⲆⵠⵠⵠᐃΔⲆΔ = function () {
      if (this.ᐃⲆⵠΔⵠ && this.loaded) {
        var a = gf.ΔΔⵠΔ[Ww.ᐃⲆᐃⲆ];
        if (a) {
          a.ᐃⵠΔᐃΔ = xb;
          var b = this.ⵠΔᐃΔᐃⲆⵠⵠᐃ(a);
          if (bw.ⲆᐃᐃΔⵠ !== gf.mode && bw.ⲆᐃⲆⵠΔ !== gf.mode && bw.ⲆᐃⲆΔⵠⵠⲆ !== gf.mode) {
            this.ⲆⲆᐃⵠⲆ(a, b);
          }
          this.ᐃΔⵠⵠᐃⵠⲆⵠⵠ();
        }
      }
    };
    this.ᐃΔⵠᐃᐃᐃⲆⵠᐃ = function () {
      for (var b in Sw) {
        var c = Sw[b];
        if (typeof c === "object" && c.path) {
          c.ⲆᐃΔⲆⲆ = new Howl({
            src: c.path,
            volume: $t,
            sprite: c.ΔΔ
          });
        }
        for (var d in c.sample) {
          var f = c.sample[d];
          var g = [];
          console.log(undefined);
          for (var h = 0; h < f; h++) {
            var j = c.ⲆᐃΔⲆⲆ.play(d);
            c.ⲆᐃΔⲆⲆ.stop(j);
            c.ⲆᐃΔⲆⲆ.on("fade", function (a) {
              if (!this.volume(a)) {
                console.log(Zl, Hh);
                this.stop(a);
              }
            }, j);
            g.push(j);
          }
          if (g.length > yl) {
            Zw.sample[d] = g;
          } else {
            Zw.sample[d] = g[0];
          }
          Zw.ᐃⲆⲆΔ[d] = c.ⲆᐃΔⲆⲆ;
        }
      }
    };
    this.ⲆⵠⵠΔⲆΔⲆ = function (a, b, c) {
      for (var d = 0; a.length > d; d++) {
        b.volume(c, a[d]);
      }
    };
    this.ⲆⵠⵠⵠᐃΔΔ = function (b, c, d, e, f, g) {
      var i = b;
      for (var a = Gd; a < d; a++) {
        var j = i[a] = [];
        for (Δⵠᐃⵠ = 0; e > Δⵠᐃⵠ; Δⵠᐃⵠ++) {
          j[Δⵠᐃⵠ] = Zw.sample[f + Δⵠᐃⵠ][a];
          c.ⲆᐃΔⲆⲆ.volume(g, j[Δⵠᐃⵠ]);
        }
      }
    };
    this.ⵠⲆⵠⲆⲆ = function () {
      Zw.ᐃΔⵠᐃᐃᐃⲆⵠᐃ();
      Zw.ⲆⵠᐃⵠⲆ.ΔᐃΔᐃⲆᐃⲆ = [];
      Zw.ⲆⵠᐃⵠⲆ.ⵠΔΔⲆᐃ = [];
      Zw.ⲆⵠᐃⵠⲆ.ΔᐃⲆΔᐃ = [];
      Zw.ⲆⵠⵠⵠᐃΔΔ(Zw.ⲆⵠᐃⵠⲆ.ΔᐃΔᐃⲆᐃⲆ, Sw.ΔᐃⲆΔⵠᐃΔ, Ow.ⲆΔⵠⵠ, Vl, "p", 0.15);
      Zw.ⲆⵠⵠⵠᐃΔΔ(Zw.ⲆⵠᐃⵠⲆ.ⵠΔΔⲆᐃ, Sw.ⲆᐃᐃΔⲆΔΔ, Ow.ⲆΔⵠⵠ, 4, "w", 0.15);
      Zw.ⲆⵠⵠⵠᐃΔΔ(Zw.ⲆⵠᐃⵠⲆ.ΔᐃⲆΔᐃ, Sw.ᐃⵠⲆⲆⲆⵠⵠ, Ow.ⲆΔⵠⵠ, 3, "d", 0.09);
      Zw.ⲆⵠⵠΔⲆΔⲆ(Zw.sample.ᐃᐃⵠⵠᐃ, Zw.ᐃⲆⲆΔ.ᐃᐃⵠⵠᐃ, 0.15);
      Zw.ⲆⵠⵠΔⲆΔⲆ(Zw.sample.ᐃⲆⵠⲆⲆⵠⲆ, Zw.ᐃⲆⲆΔ.ᐃⲆⵠⲆⲆⵠⲆ, 0.2);
      Zw.ⲆⵠⵠΔⲆΔⲆ(Zw.sample.ΔΔⵠⵠᐃᐃⵠ, Zw.ᐃⲆⲆΔ.ΔΔⵠⵠᐃᐃⵠ, 1);
      Zw.ᐃᐃⲆᐃᐃ.ΔⲆΔᐃⵠⵠⵠⵠΔ = new Tw(Ow.ᐃⵠᐃΔⲆᐃΔⲆⵠ, this.sample.ⲆᐃᐃⵠᐃⲆⲆ, this.sample.ⵠⵠⲆⲆᐃⲆΔ, Ow.ΔⵠΔⵠΔⲆᐃⵠⲆ, 0.05, 0.4, Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ, Ow.ΔⲆⲆΔⵠΔⲆ, {
        x: Cr.ⲆΔⵠⲆⵠⲆⲆ,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ,
        w: gf.w,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      }, {
        x: Cr.ⲆΔⵠⲆⵠⲆⲆ - 2300,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ - 4000,
        w: gf.w,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      }, {
        x: Cr.ⲆΔⵠⲆⵠⲆⲆ - 1500,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ - 2000,
        w: gf.w,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      });
      Zw.ᐃᐃⲆᐃᐃ.ⲆᐃⲆⵠᐃⲆΔΔᐃ = new Tw(Ow.ⵠᐃᐃΔΔⲆⵠ, this.sample.ΔᐃΔⵠΔⵠⵠ, this.sample.ⲆⵠᐃΔⲆΔⲆ, Ow.ⲆⵠᐃⲆΔΔΔᐃⲆ, 0.03, 0.25, Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ, Ow.ΔⲆⲆΔⵠΔⲆ, {
        x: Lu,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ + 800,
        w: Cr.ⲆΔⵠⲆⵠⲆⲆ - 2300,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      }, {
        x: -Zr,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ - 300,
        w: Cr.ⲆΔⵠⲆⵠⲆⲆ - 100,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      }, {
        x: -Dq,
        y: Cr.ᐃᐃⵠⵠΔⵠⲆ + 400,
        w: Cr.ⲆΔⵠⲆⵠⲆⲆ - 1400,
        ᐃⵠⲆ: gf.ᐃⵠⲆ
      });
      Zw.ᐃᐃⲆᐃᐃ.Ⲇⵠⵠᐃⵠⵠᐃ = new Tw(Ow.ⵠᐃᐃΔΔⲆⵠ, this.sample.ⲆᐃᐃΔᐃΔΔ, this.sample.ⵠⲆⲆⵠΔΔᐃ, Ow.ⵠⵠᐃⵠⵠⲆⲆⲆᐃ, 0.01, 0.22, Sw.ⲆΔᐃⵠⲆⲆᐃ.ⲆᐃΔⲆⲆ, Ow.ΔⲆⲆΔⵠΔⲆ, {
        x: -me,
        y: -Yi,
        w: gf.w + 200,
        ᐃⵠⲆ: Cr.ᐃᐃⵠⵠΔⵠⲆ - 1000
      }, {
        x: -Lh,
        y: -100,
        w: gf.w + 200,
        ᐃⵠⲆ: Cr.ᐃᐃⵠⵠΔⵠⲆ + 600
      }, {
        x: -100,
        y: -100,
        w: gf.w + 200,
        ᐃⵠⲆ: Cr.ᐃᐃⵠⵠΔⵠⲆ + Qk
      });
      for (var a = 0; Ow.ⲆΔⵠⵠ > a; a++) {
        Zw.ΔⲆᐃⵠ[a] = new tf(a);
      }
      Zw.ΔⲆᐃⵠ[Lu].ⵠⲆⵠⲆⲆ(Ww.ᐃⲆᐃⲆ);
      Zw.loaded = 1;
    };
    this.ᐃⵠⲆΔⵠᐃⵠⲆᐃ = function () {
      if (!this.transition && gf.ⲆⲆⵠΔⵠ.now < Ow.ⲆΔⵠⵠᐃᐃⲆ) {
        this.transition = ik;
      }
    };
    this.Ⲇᐃⵠᐃᐃ = function () {
      if (this.ᐃⲆⵠΔⵠ && this.loaded) {
        for (var a in Zw.sample) {
          var b = Zw.sample[a];
          if (typeof b === "object") {
            for (var c = ko; c < b.length; c++) {
              Zw.ᐃⲆⲆΔ[a].stop(b[c]);
            }
          } else {
            Zw.ᐃⲆⲆΔ[a].stop(b);
          }
        }
        for (c = 0; Zw.ΔⲆᐃⵠ.length > c; c++) {
          Zw.ΔⲆᐃⵠ[c].ⲆᐃΔⲆᐃⵠⲆ();
        }
      }
    };
    this.select = function () {
      if (Zw.ᐃⲆⵠΔⵠ) {
        Zw.Ⲇᐃⵠᐃᐃ();
      } else {
        if (!Zw.loaded) {
          Zw.ⵠⲆⵠⲆⲆ();
        }
        Zw.ΔⲆᐃⵠ[0].ᐃⲆᐃⲆ = Ww.ᐃⲆᐃⲆ;
        Zw.ΔⲆᐃⵠ[Mn].ΔⲆⲆⲆᐃΔΔ = 0;
        Zw.ᐃⵠⲆΔⵠᐃⵠⲆᐃ();
      }
      Zw.ᐃⲆⵠΔⵠ = !Zw.ᐃⲆⵠΔⵠ;
    };
  }();
  var cf = new function () {
    this.ⵠⲆᐃⵠⲆⵠⲆ = function () {
      this.ᐃΔⲆⲆⵠ = 81;
      this.ᐃΔⲆᐃⲆ = 68;
      this.ᐃⲆⵠᐃⲆ = 90;
      this.ⵠᐃᐃⲆⵠᐃᐃ = 83;
    };
    this.ⵠᐃᐃᐃⲆΔᐃ = function () {
      this.ᐃΔⲆⲆⵠ = 65;
      this.ᐃΔⲆᐃⲆ = 68;
      this.ᐃⲆⵠᐃⲆ = 87;
      this.ⲆΔΔⲆΔ = 83;
    };
    this.ⵠᐃΔⵠⲆ = 0;
    this.ⵠᐃᐃⲆⵠᐃᐃ = V;
    this.ⵠⵠⵠᐃΔᐃⲆ = 49;
    this.ΔΔᐃⵠⲆⲆⵠ = 50;
    this.ⵠΔᐃⲆⲆᐃⵠ = 51;
    this.ⵠΔⲆⵠᐃΔΔ = 52;
    this.ⵠⵠΔⵠᐃᐃΔⲆⵠ = 53;
    this.ⲆⲆⲆΔⵠⲆΔ = sj;
    this.ΔᐃᐃⵠⲆᐃⵠ = 37;
    this.ⲆⲆⲆⵠⲆᐃⵠ = 39;
    this.ᐃⵠΔⲆΔΔᐃ = 38;
    this.ᐃᐃⲆΔⲆΔⵠ = 40;
    this.ᐃⲆᐃΔΔΔᐃ = 32;
    this.ⵠⵠⲆᐃⲆⲆΔ = 82;
    this.ⲆΔᐃΔⵠΔⲆ = 71;
    this.ⵠᐃⲆⵠᐃⲆΔ = 86;
    this.ⲆⲆⵠᐃⵠⵠⲆ = 66;
    this.ⵠᐃᐃᐃⲆΔᐃ();
    this.keys = new Array(255);
    for (var a = jj; a < 255; a++) {
      this.keys[a] = this.ⵠᐃΔⵠⲆ;
    }
    this.up = function (a) {
      var b = Math.min(a.charCode || a.keyCode, gk);
      this.keys[b] = this.ⵠᐃΔⵠⲆ;
    };
    this.down = function (a) {
      var b = Math.min(a.charCode || a.keyCode, 255);
      if (this.ᐃΔⲆⲆⵠ == b || this.ΔᐃᐃⵠⲆᐃⵠ == b) {
        this.ⲆΔᐃᐃⲆΔⲆ();
      } else if (b == this.ᐃⲆⵠᐃⲆ || b == this.ᐃⵠΔⲆΔΔᐃ) {
        this.ΔΔᐃΔΔᐃᐃ();
      } else if (this.ⵠᐃᐃⲆⵠᐃᐃ == b || b == this.ⲆΔΔⵠⲆⵠⵠΔᐃ) {
        this.ⲆⵠᐃⵠⲆⵠΔ();
      } else if (this.ᐃΔⲆᐃⲆ == b || this.ⲆⲆⲆⵠⲆᐃⵠ == b) {
        this.ⲆᐃΔⵠⵠⲆᐃ();
      }
      this.keys[b] = this.ⵠᐃᐃⲆⵠᐃᐃ;
      return b;
    };
    this.ⲆΔᐃᐃⲆΔⲆ = function () {
      this.keys[this.ᐃΔⲆᐃⲆ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ⲆⲆⲆⵠⲆᐃⵠ] = this.ⵠᐃΔⵠⲆ;
    };
    this.ⲆᐃΔⵠⵠⲆᐃ = function () {
      this.keys[this.ᐃΔⲆⲆⵠ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ΔᐃᐃⵠⲆᐃⵠ] = this.ⵠᐃΔⵠⲆ;
    };
    this.ⲆⵠᐃⵠⲆⵠΔ = function () {
      this.keys[this.ᐃⲆⵠᐃⲆ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃⵠΔⲆΔΔᐃ] = this.ⵠᐃΔⵠⲆ;
    };
    this.ΔΔᐃΔΔᐃᐃ = function () {
      this.keys[this.ⲆΔΔⲆΔ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃᐃⲆΔⲆΔⵠ] = this.ⵠᐃΔⵠⲆ;
    };
    this.ΔᐃΔⵠⲆⵠᐃ = function () {
      this.keys[this.ᐃΔⲆᐃⲆ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ⲆⲆⲆⵠⲆᐃⵠ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃΔⲆⲆⵠ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ΔᐃᐃⵠⲆᐃⵠ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃⲆⵠᐃⲆ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃⵠΔⲆΔΔᐃ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ⲆΔΔⲆΔ] = this.ⵠᐃΔⵠⲆ;
      this.keys[this.ᐃᐃⲆΔⲆΔⵠ] = this.ⵠᐃΔⵠⲆ;
    };
    this.ᐃⵠΔΔⲆᐃᐃ = function () {
      return this.keys[this.ᐃΔⲆⲆⵠ] || this.keys[this.ΔᐃᐃⵠⲆᐃⵠ];
    };
    this.ΔⲆΔⵠΔⵠⲆ = function () {
      return this.keys[this.ᐃΔⲆᐃⲆ] || this.keys[this.ⲆⲆⲆⵠⲆᐃⵠ];
    };
    this.ⲆᐃⵠⵠΔᐃΔ = function () {
      return this.keys[this.ᐃⲆⵠᐃⲆ] || this.keys[this.ᐃⵠΔⲆΔΔᐃ];
    };
    this.ⲆⵠᐃΔⲆⵠᐃ = function () {
      return this.keys[this.ⲆΔΔⲆΔ] || this.keys[this.ᐃᐃⲆΔⲆΔⵠ];
    };
    this.ᐃⲆᐃⲆᐃⲆⵠᐃⲆ = function () {
      return this.keys[this.ⲆⲆⲆΔⵠⲆΔ];
    };
    this.ΔⵠᐃᐃⵠⵠᐃΔΔ = function () {
      return this.keys[this.ⵠⵠⵠᐃΔᐃⲆ];
    };
    this.ⲆΔⵠⲆⵠᐃΔΔⵠ = function () {
      return this.keys[this.ΔΔᐃⵠⲆⲆⵠ];
    };
    this.ⵠⲆᐃΔⵠⲆⲆⲆⲆ = function () {
      return this.keys[this.ⵠΔᐃⲆⲆᐃⵠ];
    };
    this.ᐃⲆⲆⲆⵠΔᐃⵠΔ = function () {
      return this.keys[this.ⵠΔⲆⵠᐃΔΔ];
    };
    this.ΔⵠⵠΔⲆⵠⲆⲆⵠ = function () {
      return this.keys[this.ᐃⲆᐃΔΔΔᐃ];
    };
    this.ΔⵠⵠΔᐃΔΔⵠⵠ = function () {
      return this.keys[this.ⵠⵠⲆᐃⲆⲆΔ];
    };
    this.ⲆⲆⲆⵠΔⲆⲆⵠⵠ = function () {
      return this.keys[this.ⲆΔᐃΔⵠΔⲆ];
    };
    this.ⲆΔⵠⵠⲆⵠⲆΔΔ = function () {
      return this.keys[this.ⵠᐃⲆⵠᐃⲆΔ];
    };
    this.ᐃᐃⵠᐃⲆⵠΔⲆᐃ = function () {
      return this.keys[this.ⲆⲆⵠᐃⵠⵠⲆ];
    };
  }();
  var mf = new function () {
    this.ⵠᐃᐃⲆⵠᐃᐃ = Fj;
    this.ⵠᐃΔⵠⲆ = ce;
    this.IDLE = 2;
    this.ᐃᐃΔᐃⵠᐃᐃ = jj;
    this.ⵠΔᐃⵠΔΔΔⵠⵠ = Aj;
    this.ⵠⵠᐃᐃ = {
      x: 0,
      y: 0
    };
    this.ᐃΔΔⲆⵠⲆᐃ = Mn;
    this.ⲆⲆΔⵠΔⵠⲆ = Mn;
    this.angle = 0;
    this.state = this.IDLE;
    this.ΔⲆⲆⲆ = this.ᐃᐃΔᐃⵠᐃᐃ;
    this.down = function () {
      this.state = this.ⵠᐃᐃⲆⵠᐃᐃ;
    };
    this.up = function () {
      this.state = this.ⵠᐃΔⵠⲆ;
    };
    this.Ⲇᐃⵠ = function () {
      if (this.ⵠⵠᐃᐃ.x != this.ᐃΔΔⲆⵠⲆᐃ || this.ⵠⵠᐃᐃ.y != this.ⲆⲆΔⵠΔⵠⲆ) {
        this.ᐃΔΔⲆⵠⲆᐃ = this.ⵠⵠᐃᐃ.x;
        this.ⲆⲆΔⵠΔⵠⲆ = this.ⵠⵠᐃᐃ.y;
        return true;
      } else {
        return Jn;
      }
    };
  }();
  var pf = $t;
  var $w = Gd;
  var _w = new function (e, f, i) {
    this.ⵠᐃ = e;
    this.Δ = f;
    this.ⲆⲆᐃᐃΔⲆⲆ = {
      translate: {
        x: _s,
        y: $t
      },
      style: document.getElementById("loading").style,
      Ⲇᐃⵠ: function () {
        this.style.left = this.translate.x + "px";
        this.style.top = Math.floor(this.translate.y) + "px";
      }
    };
    this.ⲆⲆᐃᐃΔⲆⲆ.style.position = "absolute";
    this.ⲆⲆᐃᐃΔⲆⲆ.style.display = "inline-block";
    this.ⲆⲆᐃᐃΔⲆⲆ.Ⲇᐃⵠ();
    this.ⵠᐃᐃⵠⲆ = vi;
    this.stop = function () {
      this.ⵠᐃᐃⵠⲆ = false;
    };
    this.ᐃΔⲆⵠᐃΔΔ = {
      total: 1
    };
    var j = this;
    function k() { }
    var m = 0;
    function n(a) {
      if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
        return Br;
      } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || -Yt !== a.indexOf("day-player") || -ik !== a.indexOf("night-player") || -Aj !== a.indexOf("day-accessory") || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -js || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -Ur || a.indexOf("night-skin") !== -1 || -Br !== a.indexOf("day-river") || a.indexOf("night-river") !== -Ur || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -jh || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || -er !== a.indexOf("day-leaf") || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -V || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -Eg || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -sd || -Yt !== a.indexOf("bigznight") || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || -js !== a.indexOf("-lead-") || -ik !== a.indexOf("day-lava-") || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -yl || a.indexOf("-fog") !== -1 || -dn !== a.indexOf("-lava") || a.indexOf("pebblecompo") !== -js || a.indexOf("avatar-player") !== -Br) {
        return 0;
      } else {
        return 1;
      }
    }
    this.ⵠᐃⲆᐃⵠ = function () {
      j.Ⲇᐃⵠ();
      if (++m == 40) {
        j.stop();
        k();
        return;
      }
      Vf.setTimeout(j.ⵠᐃⲆᐃⵠ, 33);
    };
    this.Ⲇᐃⵠᐃᐃ = function (a) {
      k = a;
      j.ⵠᐃⲆᐃⵠ();
    };
    new Date().getTime();
    Object.keys(Δᐃ).length;
    console.log(undefined, lq);
    for (var o in Δᐃ) {
      if (n(Δᐃ[o]) === 0) {
        0;
      }
    }
    console.log(undefined, undefined);
    function p() {
      if (this.ΔⲆⲆᐃΔᐃΔ !== Lu) {
        return this.ΔⲆⲆᐃΔᐃΔ;
      } else {
        this.ΔⲆⲆᐃΔᐃΔ = kn;
        this.src = this.ⵠΔΔΔΔ;
        return 0;
      }
    }
    function l(a) {
      this.ΔⲆⲆᐃΔᐃΔ = 1;
    }
    var g = 0;
    function q() {
      console.log(Hh);
      if (g !== Ur) {
        g = yl;
        console.log(Zl);
        if (Rs !== yt) {
          Rs();
        }
        yt();
        var a = ⵠⵠⵠⲆ.ⲆΔᐃⵠΔⲆⲆ("server");
        if (a !== null) {
          ᐃΔΔᐃ.ⵠⵠⵠᐃⲆᐃⵠ = Ur;
          ᐃΔΔᐃ.ⲆⲆᐃᐃΔ = [{
            nu: Fj,
            m: 100,
            i: "server" + a + ".starve.io",
            p: 443,
            a: "Private Server " + a,
            ssl: 1
          }];
        }
        ᐃΔΔᐃ.ΔⵠⵠⵠᐃⵠⲆΔⲆ();
        setTimeout(i, Er);
      }
    }
    function b() {
      let a = function () {
        ᐃΔΔᐃ.ΔⵠᐃⲆⲆΔⲆᐃⵠ(q);
      };
      if (document.fonts && document.fonts.check) {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(a, or);
        } else {
          setTimeout(b, 100);
        }
      } else {
        setTimeout(a, 1000);
      }
    }
    function s() {
      this.ⲆΔⲆᐃΔᐃΔ++;
      console.warn(`Image (${this.src}) failed to load, attempt ${this.ⲆΔⲆᐃΔᐃΔ}`, this);
      if (jg < this.ⲆΔⲆᐃΔᐃΔ) {
        console.warn("Failed to load image too many times");
      }
      var a = this.ⲆΔⲆᐃΔᐃΔ;
      var b = this.src;
      var c = n(b) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var c in ⵠⲆⵠⵠᐃᐃΔ) {
          if (b.indexOf(ⵠⲆⵠⵠᐃᐃΔ[c]) !== -wg) {
            Δᐃ[c] = new Image();
            Δᐃ[c].onload = l;
            Δᐃ[c].onerror = s;
            Δᐃ[c].ⲆΔⲆᐃΔᐃΔ = a;
            Δᐃ[c].src = b;
            break;
          }
        }
      }, c);
    }
    function d(a) {
      for (var b in Δᐃ) {
        var c = Δᐃ[b];
        if (typeof c === "string" && n(c) === a) {
          Δᐃ[b] = new Image();
          Δᐃ[b].ΔⲆⲆᐃΔᐃΔ = 0;
          Δᐃ[b].ⲆΔⲆᐃΔᐃΔ = 0;
          Δᐃ[b].onload = l;
          Δᐃ[b].onerror = s;
          Δᐃ[b].ⵠᐃⵠⵠⵠᐃᐃ = p;
          Δᐃ[b].ⵠΔΔΔΔ = c;
        }
      }
    }
    d(dn);
    d(0);
    Bu(1, "l", 20, "#000");
    b();
    Hc();
    this.Ⲇᐃⵠ = function () {
      this.ⲆⲆᐃᐃΔⲆⲆ.translate.x = (ro - 500) / 2;
      this.ⲆⲆᐃᐃΔⲆⲆ.translate.y = (so - 150) / Qs;
      var a = 2500 / (40 - m + er) - 48;
      this.ⲆⲆᐃᐃΔⲆⲆ.translate.y -= a;
      this.ⲆⲆᐃᐃΔⲆⲆ.Ⲇᐃⵠ();
    };
    this.ⲆⲆᐃᐃΔⲆⲆ.Ⲇᐃⵠ();
    this.ᐃⵠⲆᐃ = function () {
      try {
        Ic();
      } catch (a) { }
      this.Ⲇᐃⵠ();
    };
  }(eo, to, function () {
    tc();
    Yw = new Iw(eo, to);
    (sf = new yw(eo, to)).ᐃⲆΔᐃΔΔΔⵠⵠ();
    Xw = new Ew(eo, to);
    gf = new jw();
    Ww = new xw();
    _w.Ⲇᐃⵠᐃᐃ(function () {
      _w.ⲆⲆᐃᐃΔⲆⲆ.style.display = "none";
      sf.ᐃⲆⵠΔⵠ();
    });
  });
  function ff() {
    try {
      Vf.Widget.adsRefresh();
    } catch (a) { }
  }
  Vf.onbeforeunload = function () {
    if (Yw.ⵠᐃᐃⵠⲆ) {
      return "Are you sure you want quit starve.io ;-; ?";
    }
  };
  ca();
  (function b(a) {
    Vf.requestAnimationFrame(b);
    pf = (a - $w) / 1000;
    $w = a;
    pf = ub < pf ? Br : pf;
    if (Yw.ⵠᐃᐃⵠⲆ) {
      Yw.ᐃⵠⲆᐃ();
    } else {
      to.clearRect(0, 0, ro, so);
      if (_w.ⵠᐃᐃⵠⲆ) {
        _w.ᐃⵠⲆᐃ();
      } else if (sf.ⵠᐃᐃⵠⲆ) {
        sf.ᐃⵠⲆᐃ();
      } else if (Xw.ⵠᐃᐃⵠⲆ) {
        Xw.ᐃⵠⲆᐃ();
      }
    }

    if (Spectator) {
      if (cf.ⲆⵠᐃΔⲆⵠᐃ()) Ww.ᐃᐃᐃ.y -= 50, Ww.ᐃᐃᐃ.VU$ -= 50;
      if (cf.ⲆᐃⵠⵠΔᐃΔ()) Ww.ᐃᐃᐃ.y += 50, Ww.ᐃᐃᐃ.VU$ += 50;
      if (cf.ΔⲆΔⵠΔⵠⲆ()) Ww.ᐃᐃᐃ.x -= 50, Ww.ᐃᐃᐃ.WQO -= 50;
      if (cf.ᐃⵠΔΔⲆᐃᐃ()) Ww.ᐃᐃᐃ.x += 50, Ww.ᐃᐃᐃ.WQO += 50
    }
  })(0);
  var zf = 0;
  function ax() {
    wf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", Pg);
    wf.send();
  }
  var wf = new XMLHttpRequest();
  function Pf(a, b, c) {
    const d = ~(a & 64171) & (a | 64171);
    return ((17136 + ((d | 15328) & ~(d & 15328) ^ (c ^ 49669))) * 214013 + 2531011) % 4294967296;
  }
  wf.onreadystatechange = function () {
    if (this.readyState === In) {
      this.status;
    }
  };
  var Af = "https://token.starve.io/";
  var kf = "https://token2.starve.io/";
  var xf = 0;
  var Jf = 1;
  var Mf = Uq;
  var bx = lq;
  var cx = Rg;
  var dx = 0;
  Vf.ⵠⲆΔⲆᐃΔΔ = function () {
    dx = 1;
  };
  var ex = {
    ⵠⵠⵠΔⵠⵠΔᐃᐃ: "ACCESS_TOKEN"
  };
  var Sf = document.createElement("script");
  Sf.type = "text/javascript";
  Sf.async = Xs;
  Sf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
  Sf.addEventListener("load", function (a) {
    Vf.XPayStationWidget[hj[za]](ex);
    Vf.XPayStationWidget.on("status-done", Uf);
  }, false);
  document.getElementsByTagName("head")[Fj].appendChild(Sf);
  Vf.fbAsyncInit = function () {
    Yf();
    console.log(undefined);
  };
  (function (a, b, c) {
    var d;
    var e = a.getElementsByTagName(b)[yk];
    if (!a.getElementById(c)) {
      (d = a.createElement(b)).id = c;
      d.src = "https://connect.facebook.net/en_US/sdk.js";
      e.parentNode.insertBefore(d, e);
    }
  })(document, "script", "facebook-jssdk");
  var Qf = undefined;
  var fx = vl;
  function gx() {
    Vf.gapi[hj[xg]][hj[Vo]]({
      client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
      scope: "https://www.googleapis.com/auth/userinfo.profile"
    }).then(a => {
      (Qf = a).isSignedIn.listen(Rf);
      Qf.currentUser.listen(jf);
      if (Qf.isSignedIn.get()) {
        Qf.signIn();
      }
      Lf();
    });
  }
  function Rf(a) { }
  function jf(a) {
    Yf();
    if (bx === Qi && fx !== undefined) {
      bx = fx.getAuthResponse().id_token;
      console.log(undefined, Z);
      if (bx !== jr) {
        Mf = xf;
        Vf.ⵠⲆΔⲆᐃΔΔ(cx);
      }
    }
    if (Zl !== a && a.isSignedIn() === Xo) {
      fx = a;
      Vf.ⵠⲆΔⲆᐃΔΔ(a.id);
    }
  }
  function Lf() {
    if (Qf) {
      fx = Qf.currentUser.get();
    }
  }
  function Wf(a) {
    if (cx) {
      var b = new XMLHttpRequest();
      b.open("GET", Af + "xsolla?userid=" + cx + "&item=" + a);
      b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      b.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
          ex.access_token = b.responseText;
          Vf.XPayStationWidget.init(ex);
          Vf.XPayStationWidget.open();
        }
      };
      b.send();
    }
  }
  function Gf(a, b) {
    if (sf.ⵠⵠΔⵠⵠ <= 0) {
      if (sf.ΔᐃⵠⵠⲆ < b) {
        sf.ⲆΔⲆΔ(sf.ᐃⲆⲆΔΔ);
      } else {
        sf.ⵠⵠΔⵠⵠ = 2;
        sf.ⲆⵠΔⲆᐃΔΔ = 0;
        sf.ⵠΔⵠΔΔΔΔ = 100;
        var c = new XMLHttpRequest();
        c.open("GET", Af + "buySpin?token=" + bx + "&userid=" + cx + "&spin=" + a);
        c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        c.onreadystatechange = function () {
          if (this.readyState == Il && this.status == 200) {
            if (c.responseText !== "0") {
              var a = JSON.parse(c.responseText);
              sf.ⲆΔⵠⲆΔΔⲆᐃⵠ(Wq * (a.rand * Math.PI), a.type, a.id);
              sf.ΔᐃⵠⵠⲆ -= b;
            } else {
              sf.ⵠⵠΔⵠⵠ = 0;
            }
          }
        };
        c.send();
      }
    }
  }
  function Of(a, b, c, d) {
    a = Ya === a ? sf.ⵠⲆⵠⲆⲆᐃⵠ : a;
    b = kj === b ? sf.ⲆⵠⵠᐃⵠΔⲆ : b;
    c = c === Uq ? sf.ⲆⵠᐃᐃᐃΔⵠ : c;
    d = d === Rg ? sf.ΔⵠⲆⵠⲆΔΔ : d;
    if (a !== sf.ⵠⲆⵠⲆⲆᐃⵠ || b !== sf.ⲆⵠⵠᐃⵠΔⲆ || c !== sf.ⲆⵠᐃᐃᐃΔⵠ || sf.ΔⵠⲆⵠⲆΔΔ !== d) {
      sf.ⵠⲆⵠⲆⲆᐃⵠ = a;
      sf.ⲆⵠⵠᐃⵠΔⲆ = b;
      sf.ⲆⵠᐃᐃᐃΔⵠ = c;
      sf.ΔⵠⲆⵠⲆΔΔ = d;
      if (sf.ⵠΔⲆⲆⲆⵠⲆ === d) {
        d = "0";
      } else if (d === sf.ᐃⲆⵠᐃⲆⵠⲆ) {
        d = "1";
      } else if (sf.ⵠΔΔⲆⲆᐃⵠ === d) {
        d = "2";
      } else if (sf.ⵠᐃᐃⵠᐃⲆⲆ === d) {
        d = "3";
      } else if (sf.ⵠⵠⲆΔⲆᐃⵠ === d) {
        d = "4";
      } else if (d === sf.ᐃⵠⲆⵠⵠⵠΔ) {
        d = "5";
      }
      if (b === sf.ⲆⵠᐃᐃⲆᐃⵠ) {
        b = "total";
      } else if (b === sf.ᐃⲆⵠⲆᐃᐃΔ) {
        b = "normal";
      } else if (b === sf.ΔⵠⲆⲆⵠⵠⲆ) {
        b = "zombie";
      } else if (sf.ⵠΔΔⲆⲆᐃᐃ === b) {
        b = "vampire";
      } else if (sf.ᐃΔᐃᐃΔᐃᐃ === b) {
        b = hj[id];
      }
      if (a === sf.ⲆΔⵠⵠᐃⵠᐃ) {
        a = "all";
      }
      if (sf.ⵠⵠΔⵠⵠΔᐃ === a) {
        a = "week";
      }
      if (sf.ⵠⵠⲆⵠⲆⵠⵠ === a) {
        a = "today";
      }
      if (sf.ⵠⵠⵠⵠⲆⲆΔ === c) {
        c = "kill";
      } else if (c === sf.ⲆⵠⲆⲆⲆⵠⲆ) {
        c = "score";
      } else if (sf.ⵠⲆⵠⵠᐃⵠᐃ === c) {
        c = "time";
      }
      var e = new XMLHttpRequest();
      e.open("GET", Af + "leaderboard?range=" + a + "&mode=" + b + "&sort=" + c + "&season=" + d);
      e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      e.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200 && e.responseText !== "0") {
          for (var a = JSON.parse(e.responseText), b = "", c = 0; a.length > c; c++) {
            ⲆⵠᐃⲆⲆ = a[c];
            var d = ⲆⵠᐃⲆⲆ[dn];
            try {
              if (-er === d.indexOf("Starver#")) {
                d = Vf.decodeURIComponent(Vf.escape(Vf.atob(d)));
              }
            } catch (a) { }
            b += "<div class=\"lineLeaderboard\">";
            b += "<div class=\"rank\">";
            b += c + 1 + "";
            b += "</div>";
            b += "<div class=\"name\">";
            b += d;
            b += "</div>";
            b += "<div class=\"lvl\">";
            b += sf.ⲆⵠⵠΔⵠⲆΔ(ⲆⵠᐃⲆⲆ[za]) + 1 + "";
            b += "</div>";
            b += "<div class=\"kills\">";
            b += ⲆⵠᐃⲆⲆ[5] + "";
            b += "</div>";
            b += "<div class=\"time\">";
            b += ⲆⵠᐃⲆⲆ[4] + "";
            b += "</div>";
            b += "<div class=\"score\">";
            b += ⲆⵠᐃⲆⲆ[sn] + "";
            b += "</div>";
            b += "</div>";
          }
          document.getElementById("leaderboard").innerHTML = b;
        }
      };
      e.send();
    }
  }
  function qf(a) {
    var b = new XMLHttpRequest();
    b.open("GET", Af + "setRegion?token=" + bx + "&userid=" + cx + "&region=" + a);
    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    b.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        if (b.responseText !== "0") {
          sf.ⲆΔⲆΔ(sf.ΔⲆⵠⲆⲆ);
        } else {
          sf.ⲆΔⲆΔ(sf.ΔᐃⵠᐃΔ);
        }
      }
    };
    b.send();
  }
  function Nf() {
    if (sf.ΔᐃⵠⵠⲆ >= 300 || sf.ᐃⵠΔⲆⵠⵠⲆ <= _s) {
      var a = document.getElementById("account_nickname_input").value.trim();
      document.getElementById("account_nickname_input").value = a;
      if (a.length >= dn && a.length <= 20) {
        var b = new XMLHttpRequest();
        b.open("GET", Af + "changeNickname?token=" + bx + "&userid=" + cx + "&nickname=" + encodeURIComponent(a));
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
            var a = Number(b.responseText);
            if (Lg < a) {
              sf.ΔᐃⵠⵠⲆ -= a;
            }
            sf.ᐃⵠΔⲆⵠⵠⲆ = 1;
            sf.ⲆΔⲆΔ(sf.ⲆⲆⲆⲆⵠ);
          }
        };
        b.send();
      }
    }
  }
  function Hf(a, b) {
    if (b > sf.ΔᐃⵠⵠⲆ) {
      sf.ⲆΔⲆΔ(sf.ᐃⲆⲆΔΔ);
    } else {
      var c = new XMLHttpRequest();
      c.open("GET", Af + "buyKit?token=" + bx + "&userid=" + cx + "&kit=" + a);
      c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      c.onreadystatechange = function () {
        if (this.readyState == gn && this.status == 200 && c.responseText !== "0") {
          var a = JSON.parse(c.responseText);
          sf.ΔᐃⵠⵠⲆ -= b;
          sf.ΔΔⲆᐃⵠ = Date.now() + Number(a);
        }
      };
      c.send();
    }
  }
  function Uf() {
    var a = new XMLHttpRequest();
    a.open("GET", Af + "claimBread?userid=" + cx);
    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    a.onreadystatechange = function () {
      if (Yn == this.readyState && this.status == 200 && a.responseText !== "0") {
        var b = Number(a.responseText);
        if (!isNaN(b)) {
          sf.ΔᐃⵠⵠⲆ = b;
        }
      }
    };
    a.send();
  }
  function Yf() {
    Vf.FB[hj[Rb]]({
      xfbml: vi,
      cookie: ls,
      appId: "642017356260407",
      version: "v15.0"
    });
    if (cx === undefined) {
      (function () {
        try {
          if (Vf.FB && Vf.FB.getUserID()) {
            cx = Vf.FB.getUserID();
            if (bx === undefined) {
              Vf.FB.getLoginStatus(function () {
                Mf = Jf;
                bx = Vf.FB.getAuthResponse().accessToken;
                Vf.ⵠⲆΔⲆᐃΔΔ(cx);
              });
            }
          }
        } catch (a) { }
        try {
          cx = fx.getBasicProfile().getId();
        } catch (a) { }
      })();
    }
  }
  Vf.onload = function () {
    Vf.gapi.load(hj[Kg], gx);
  };
})();
