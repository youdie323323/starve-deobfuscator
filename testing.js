(function () {
    const aj = window;
    Math.floor(61[61 .ⲆΔⵠΔⲆⲆⵠ]);
    let bj = 125;
    var cj = 8;
    if (cj === 8) {
        cj = 233;
    }
    var dj = 93;
    if (dj == 5) {
        dj = 2;
    }
    const ej = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += aj.String.fromCharCode(a[c] ^ bj++ % 255);
        }
        return b;
    };
    var o = 144;
    Math.floor(112[112 .ΔΔⲆᐃΔᐃⲆ]);
    if (o == 0) {
        o = 41;
    }
    Ⲇᐃ = [[36, 76, 23, 232, 226, 233, 197, 180], [212, 235, 235, 230, 223, 221, 231, 249, 233, 202, 214, 160, 192, 202, 217, 237, 204, 206, 252, 165], [192, 168, 227, 240, 196, 198, 213, 243, 251, 245, 237, 148], [196, 241, 246, 149], [202, 237, 237, 217], [206, 156, 249, 128, 231, 245, 223, 192, 239, 225, 142, 137, 221, 251, 134, 129], [220, 246, 245, 172, 155, 165, 254, 249], [167, 145, 254, 163, 168, 157, 145, 249], [151, 153, 250, 186, 179, 224, 129, 184, 131, 128, 157, 146, 136, 232, 226, 168, 190, 153, 230, 149, 187, 181, 214, 212], [134, 174, 173, 132, 141, 135, 189, 153, 137, 171, 189, 156, 171, 159, 181, 197, 151, 190, 166, 197], [163, 200, 131, 138, 164, 147, 70, 114, 83, 84, 124, 114, 103, 64, 77, 52], [110, 57, 96, 102, 106, 72, 119, 44], [113, 84, 82, 37, 119, 86, 37, 36], [67, 40, 86, 113, 71, 71, 114, 77, 115, 77, 114, 72, 124, 74, 126, 80], [112, 108, 21, 89, 119, 120, 92, 68], [81, 1, 98, 64, 108, 118, 5, 4], [88, 9, 9, 86, 93, 82, 6, 47, 33, 112, 22, 45, 37, 41, 25, 116], [41, 12, 10, 52, 45, 125, 5, 108], [8, 62, 109, 32, 50, 31, 21, 100], [0, 12, 105, 54], [4, 109, 54, 81], [3, 36, 8, 16, 2, 38, 85, 84], [11, 51, 34, 47, 13, 1, 58, 25, 23, 34, 73, 72], [37, 27, 54, 41, 46, 28, 65, 64], [44, 56, 198, 177, 216, 210, 185, 184], [226, 207, 194, 225, 232, 229, 194, 254, 215, 215, 194, 253], [200, 219, 222, 253, 242, 167, 244, 237, 195, 204, 248, 241], [199, 172, 234, 205, 251, 251, 246, 201, 243, 224, 238, 220, 200, 198, 250, 212], [202, 157, 216, 193, 235, 129, 211, 136], [239, 133, 129, 204, 216, 214, 234, 215, 218, 254, 253, 252], [161, 241, 130, 247, 156, 150, 245, 244], [169, 131, 134, 187, 170, 136, 233, 225, 183, 139, 150, 185], [142, 230, 225, 179, 184, 233, 164, 174, 132, 136, 174, 209], [187, 208, 174, 137, 191, 191, 186, 133, 187, 133, 186, 128, 180, 130, 166, 136, 167, 193, 205, 196, 149, 154, 182, 149], [153, 150, 170, 135, 157, 71, 56, 119, 96, 54, 83, 83, 93, 80, 97, 58], [88, 89, 95, 67, 93, 65, 44, 47], [119, 83, 121, 98, 77, 73, 36, 39], [120, 113, 113, 112, 126, 104, 112, 31], [70, 112, 96, 27], [126, 127, 123, 65, 121, 116, 119, 66, 77, 94, 99, 127, 82, 108, 123, 6, 109, 111, 12, 86, 88, 91, 0, 3], [92, 114, 120, 59, 39, 5, 120, 123], [37, 15, 112, 34, 17, 13, 112, 115], [45, 98, 100, 37, 49, 19, 19, 99], [51, 31, 96, 31, 2, 4, 15, 54, 9, 54, 43, 47], [1, 51, 35, 82], [4, 91, 59, 19, 10, 59, 88, 0, 14, 39, 43, 71], [17, 70, 64, 1, 46, 32, 47, 0, 33, 45, 64, 67], [38, 178, 249, 238, 218, 220, 207, 204, 229, 230, 219, 230, 232, 226, 215, 230, 237, 209, 172, 175], [240, 167, 223, 252], [244, 245, 207, 224, 193, 196, 204, 163], [251, 248, 239, 206, 192, 207, 221, 206, 197, 197, 205, 155, 242, 251, 201, 194], [205, 232, 231, 130, 233, 227, 228, 139], [238, 224, 235, 210, 217, 214, 244, 131], [229, 242, 151, 242, 145, 147, 189, 170, 165, 159, 159, 191, 175, 132, 131, 141, 170, 134, 131, 186, 137, 228, 224, 190, 181, 143, 140, 231], [130, 177, 139, 176, 190, 183, 212, 179, 186, 188, 183, 137], [189, 175, 191, 216, 138, 187, 163, 130, 186, 183, 157, 198, 169, 163, 141, 165, 174, 160, 171, 138, 153, 139, 192, 195], [98, 86, 84, 121, 103, 55, 64, 105, 82, 88, 55, 54], [104, 74, 98, 123, 74, 68, 68, 102, 78, 84, 43, 42], [65, 43, 98, 115, 125, 74, 47, 115, 122, 96, 31, 30], [115, 96, 23, 106, 123, 97, 120, 27, 79, 107, 100, 67, 83, 105, 100, 95, 87, 6, 103, 10], [90, 110, 124, 11, 101, 15, 89, 2], [36, 6, 123, 115, 29, 18, 49, 122], [17, 36, 28, 123, 21, 28, 115, 114], [50, 22, 107, 59, 14, 18, 0, 60], [58, 30, 54, 46, 6, 8, 16, 55, 3, 32, 95, 94], [61, 50, 52, 12], [12, 91, 44, 27, 8, 44, 83, 82], [18, 28, 52, 65, 21, 34, 18, 31, 28, 62, 67, 2], [31, 16, 40, 11, 226, 178, 216, 239, 213, 183, 238, 247, 234, 206, 219, 182], [237, 202, 226, 225, 241, 208, 175, 174], [206, 248, 250, 228, 250, 223, 208, 247, 197, 174, 207, 162], [250, 204, 206, 208, 198, 227, 244, 203, 205, 225, 251, 150], [207, 158, 232, 214, 212, 240, 143, 142], [238, 216, 143, 221, 220, 225, 247, 134], [222, 208, 135, 140], [153, 150, 140, 243, 165, 157, 156, 171], [170, 142, 156, 166, 168, 140, 243, 242], [178, 226, 144, 191, 182, 178, 235, 234], [187, 158, 156, 234, 191, 239, 139, 226], [186, 140, 142, 144, 134, 163, 168, 215, 141, 190, 146, 135], [143, 222, 184, 134, 147, 194, 160, 138, 149, 162, 195, 153], [153, 174, 203, 147, 166, 207, 168, 84, 99, 85, 58, 114, 97, 65, 111, 120, 107, 103, 111, 74, 111, 99, 73, 121, 115, 85, 69, 127], [118, 36, 127, 104, 67, 116, 73, 80, 71, 70, 116, 29], [67, 16, 22, 78, 71, 20, 18, 24, 115, 114, 67, 28, 79, 121, 121, 69, 85, 99, 14, 9], [111, 113, 91, 66, 96, 8, 2, 73, 95, 83, 105, 42, 37, 3, 126, 121], [31, 30, 47, 36, 16, 61, 118, 113], [46, 124, 25, 96, 5, 5, 63, 39, 55, 17, 59, 34, 3, 13, 21, 42, 63, 51, 13, 26], [56, 53, 27, 23], [6, 84, 49, 88, 61, 89, 33, 28, 55, 57, 90, 64, 40, 42, 33, 4, 23, 68, 67, 69], [27, 72, 78, 23, 30, 19, 70, 247], [226, 177, 209, 177, 231, 193, 210, 181], [208, 221, 243, 251, 236, 201, 202, 173], [243, 213, 170, 250], [246, 251, 193, 235, 195, 205, 221, 230, 199, 207, 162, 157], [194, 229, 219, 204, 192, 247, 154, 149], [243, 235, 150, 145], [206, 195, 249, 216, 235, 250, 223, 224, 209, 241, 241, 136, 227, 235, 134, 129], [231, 140, 233, 240, 144, 240, 250, 177, 161, 129, 145, 252, 173, 139, 246, 241], [174, 253, 141, 163, 176, 138, 130, 233], [143, 228, 145, 168, 187, 189, 230, 225], [135, 236, 137, 208, 176, 143, 218, 213, 135, 139, 181, 152, 139, 135, 143, 168, 143, 169, 131, 156, 147, 156, 161, 167, 175, 161, 185, 200], [160, 200, 194, 143, 159, 205, 73, 60], [96, 68, 82, 55, 92, 80, 127, 52], [104, 57, 56, 48], [108, 72, 124, 100, 72, 69, 112, 101, 76, 95, 74, 118], [121, 92, 37, 103, 127, 71, 114, 81, 64, 17, 16, 24], [127, 21, 126, 89, 72, 106, 17, 16], [79, 120, 5, 68, 104, 107, 126, 124, 96, 114, 9, 116], [99, 99, 106, 13, 92, 12, 2, 50, 27, 27, 47, 120], [37, 42, 30, 62, 40, 12, 10, 39, 20, 30, 109, 108], [49, 97, 44, 37, 15, 101, 13, 100], [56, 28, 101, 51, 19, 11, 33, 92], [56, 14, 8, 16, 60, 38, 85, 84], [48, 44, 58, 7, 12, 93, 34, 29, 35, 43, 34, 30, 23, 32, 65, 60, 35, 35, 46, 21], [29, 77, 236, 239, 224, 228, 185, 184], [212, 233, 222, 252, 211, 184, 222, 253, 236, 189, 164, 172], [241, 254, 173, 230, 244, 208, 161, 244, 192, 240, 198, 245, 199, 172, 242, 215, 193, 196, 153, 152], [196, 148, 234, 193, 243, 153, 192, 157, 203, 254, 141, 140], [235, 129, 204, 197, 236, 224, 141, 137, 237, 250, 129, 128], [236, 234, 241, 144, 148, 133, 175, 248], [159, 169, 158, 249, 174, 140, 245, 184, 173, 184, 237, 236], [176, 132, 146, 225, 132, 144, 180, 163, 190, 156, 154, 168, 135, 237, 181, 220], [187, 209, 162, 144, 191, 213, 190, 154, 187, 188, 217, 157, 140, 184, 182, 193, 147, 164, 205, 128, 164, 153, 178, 145, 152, 172, 169, 192], [156, 51, 67, 50, 98, 83, 60, 115, 100, 127, 52, 55], [104, 97, 91, 116, 108, 87, 40, 103, 112, 38, 64, 43], [78, 42, 97, 106, 65, 75, 40, 46, 72, 113, 28, 31], [118, 97, 28, 108, 115, 68, 123, 126], [74, 123, 24, 91, 117, 104, 123, 106, 82, 99, 103, 6, 86, 121, 4, 7], [98, 100, 119, 84, 105, 7, 121, 127], [26, 118, 124, 51, 35, 0, 3, 60, 41, 13, 112, 115], [22, 8, 19, 37, 49, 28, 62, 107], [4, 15, 108, 106, 20, 25, 27, 39, 60, 13, 39, 87], [7, 86, 35, 31, 5, 15, 84, 87], [8, 36, 39, 2, 53, 29, 29, 70], [17, 51, 76, 0, 20, 62, 55, 74, 34, 36, 55, 78], [28, 199, 249, 234, 230, 211, 207, 238, 222, 186, 253, 217, 210, 212, 223, 226], [214, 163, 219, 254, 202, 204, 199, 250, 194, 171, 203, 246, 248, 241, 203, 232, 202, 231, 231, 215, 193, 201, 243, 223], [196, 224, 227, 220, 207, 235, 148, 196, 205, 130, 198, 143], [215, 236, 244, 139], [213, 255, 128, 208, 218, 203, 128, 131], [222, 151, 244, 184, 153, 156, 143, 246, 150, 165, 159, 167, 169, 255, 135, 162], [150, 183, 236, 239], [138, 231, 131, 175, 180, 234, 224, 163], [184, 155, 155, 239, 188, 210, 183, 137], [185, 163, 179, 156, 131, 175, 133, 159, 178, 180, 191, 158, 141, 194, 197, 207], [169, 172, 157, 129, 149, 203, 179, 202, 152, 139, 192, 195], [90, 108, 59, 118, 96, 68, 59, 58], [107, 78, 76, 126, 110, 96, 98, 122, 74, 33, 35, 101, 78, 82, 64, 100], [66, 94, 118, 97, 120, 90, 88, 106, 121, 19, 116, 109, 70, 23, 116, 75, 74, 104, 23, 22], [125, 117, 120, 68, 81, 102, 10, 14], [87, 125, 96, 77, 89, 120, 7, 6], [101, 101, 124, 72, 26, 22, 119, 40, 21, 119, 46, 55, 42, 14, 27, 118], [22, 32, 54, 57, 50, 98, 27, 110], [55, 103, 62, 39, 2, 55, 11, 102], [62, 111, 107, 50, 57, 54, 48, 15], [48, 87, 44, 22, 50, 62, 36, 91], [58, 58, 2, 26, 20, 53, 55, 65, 37, 45, 60, 14, 33, 33, 17, 70], [30, 58, 71, 21, 217, 217, 208, 243, 230, 183, 178, 186], [235, 206, 242, 227, 232, 202, 212, 249, 243, 252, 162, 174], [245, 205, 216, 216, 193, 204, 174, 166], [255, 175, 216, 235, 195, 230, 218, 207], [192, 226, 159, 234, 202, 154, 206, 199, 207, 198, 224, 199, 211, 131, 231, 142], [208, 226, 131, 196, 218, 139, 244, 201], [223, 250, 210, 202, 154, 182, 255, 254], [157, 168, 255, 172, 173, 152, 247, 246], [175, 255, 152, 255, 133, 150, 235, 169, 181, 141, 132, 167, 186, 235, 238, 230], [190, 154, 152, 170, 186, 210, 180, 139, 190, 215, 179, 218], [177, 190, 146, 135, 143, 131, 191, 210], [170, 156, 158, 128, 144, 178, 160, 142], [154, 203, 207, 129, 152, 186, 199, 119], [101, 69, 58, 82, 83, 67, 73, 92, 109, 66, 65, 124, 111, 99, 108, 45], [72, 124, 69, 121, 79, 123, 65, 97], [64, 66, 73, 44, 68, 73, 81, 82], [121, 19, 26, 81, 127, 126, 68, 21], [77, 98, 97, 92, 79, 127, 18, 13], [83, 0, 6, 71, 87, 4, 113, 83], [90, 87, 109, 86, 89, 127, 2, 125], [34, 47, 21, 41, 23, 1, 43, 50, 45, 13, 13, 57, 20, 124, 26, 109], [53, 97, 25, 36, 49, 17, 2, 101], [0, 104, 35, 42, 62, 108, 9, 49, 56, 58, 49, 11], [1, 46, 45, 0, 11, 4, 37, 28, 9, 41, 3, 6, 19, 21, 78, 73], [20, 33, 66, 21, 27, 13, 70, 65], [31, 41, 57, 247, 226, 197, 239, 241, 223, 241, 186, 181], [211, 210, 227, 251, 236, 214, 197, 252, 242, 229, 174, 169], [244, 193, 162, 237, 195, 194, 209, 201, 199, 198, 247, 144], [197, 229, 245, 222, 193, 231, 154, 149], [253, 196, 253, 216, 244, 195, 249, 201], [232, 234, 249, 222], [236, 225, 249, 206, 218, 205, 134, 129], [228, 239, 130, 253], [162, 241, 145, 172, 161, 129, 146, 245], [147, 157, 254, 167, 151, 153, 158, 237], [178, 191, 133, 188, 143, 151, 234, 229], [189, 183, 183, 176, 185, 169, 226, 221], [185, 211, 218, 213, 135, 136, 165, 152, 139, 141, 214, 209], [143, 220, 218, 134, 146, 181, 165, 129], [151, 196, 194, 148, 155, 151, 170, 193], [167, 144, 74, 119, 96, 86, 74, 106, 95, 95, 66, 77, 104, 57, 94, 97], [108, 72, 124, 100, 72, 69, 70, 99], [76, 37, 78, 41, 76, 92, 112, 105, 68, 71, 80, 87, 64, 78, 114, 117, 124, 74, 114, 83, 112, 115, 125, 16], [77, 66, 102, 69, 80, 0, 110, 89, 100, 111, 98, 85, 88, 85, 110, 112, 95, 103, 14, 113, 24, 20, 113, 41, 37, 32, 117, 116], [31, 3, 6, 59, 44, 24, 60, 43, 8, 2, 105, 104], [50, 16, 97, 46], [3, 105, 26, 40, 7, 109, 54, 18, 55, 81, 42, 10, 60, 48, 58, 88, 8, 44, 58, 6, 56, 2, 54, 2, 22, 36, 34, 15], [44, 63, 46, 0, 35, 35, 46, 13, 28, 77, 180, 188], [219, 219, 198, 242, 208, 234, 222, 240, 233, 185, 224, 251, 236, 232, 173, 172], [241, 212, 210, 236, 204, 192, 173, 169, 206, 246, 165, 246, 196, 206, 157, 156], [251, 144, 242, 220, 197, 202, 254, 220, 206, 237, 254, 221, 204, 248, 229, 140], [235, 129, 141, 195, 215, 133, 212, 213], [219, 214, 133, 205, 220, 216, 253, 252], [155, 148, 241, 171, 164, 128, 157, 244], [144, 154, 241, 240], [170, 253, 150, 161, 182, 148, 184, 160, 140, 160, 229, 228], [185, 182, 229, 237, 135, 135, 178, 141], [129, 208, 178, 140, 191, 191, 162, 144, 179, 179, 135, 208], [183, 221, 201, 132, 168, 166, 205, 196, 146, 176, 174, 128, 171, 172, 201, 147, 156, 71, 84, 63], [103, 76, 105, 113, 93, 89, 52, 55], [82, 98, 91, 62, 107, 87, 40, 103], [73, 122, 95, 96, 117, 73, 36, 39], [121, 75, 113, 107], [70, 119, 111, 18, 66, 115, 28, 83], [116, 127, 24, 66, 113, 30, 120, 19], [77, 103, 119, 6, 101, 115, 12, 7, 110, 10, 81, 107, 89, 14, 81, 75, 91, 8, 12, 127], [17, 41, 61, 48, 30, 16, 24, 48, 6, 39, 11, 55, 44, 61, 23, 103], [48, 103, 7, 47, 53, 106, 45, 54, 14, 111, 15, 107, 61, 39, 52, 95], [50, 60, 51, 13, 6, 63, 80, 46, 9, 94, 88, 94, 53, 40, 25, 66], [16, 71, 39, 26, 20, 57, 68, 71], [25, 78, 72, 7, 37, 216, 207, 242, 230, 233, 208, 187], [210, 205, 226, 183], [238, 221, 176, 179], [236, 162, 253, 164, 201, 197, 168, 171], [243, 223, 207, 174, 255, 217, 219, 237, 254, 247, 197, 215], [192, 201, 227, 211, 253, 239, 144, 222], [242, 158, 197, 198, 204, 219, 255, 196, 233, 243, 227, 244, 211, 249, 132, 135], [216, 142, 251, 202, 220, 135, 185, 174, 150, 169, 131, 246, 157, 153, 244, 247], [168, 254, 131, 166, 173, 151, 132, 239], [138, 140, 135, 160, 142, 191, 228, 231], [130, 178, 139, 183, 134, 141, 153, 142, 128, 147, 216, 219], [132, 133, 191, 158, 137, 223, 183, 130, 190, 194, 137, 154, 144, 199, 184, 203], [174, 175, 179, 128], [161, 206, 171, 206, 84, 86, 110, 112, 102, 66, 106, 125, 82, 94, 68, 125, 110, 96, 92, 117], [115, 35, 68, 35, 71, 66, 35, 39, 66, 65, 80, 41, 69, 74, 105, 34], [65, 121, 112, 79, 70, 116, 27, 26], [75, 78, 23, 22], [79, 31, 120, 92, 106, 102, 124, 3, 110, 98, 100, 125, 90, 84, 104, 87, 89, 124, 3, 2], [25, 115, 4, 54, 17, 2, 62, 47, 45, 31, 24, 126, 47, 10, 27, 114], [2, 60, 42, 37, 13, 13, 7, 101, 22, 28, 28, 34, 63, 48, 24, 106], [2, 83, 87, 9, 61, 50, 83, 16, 10, 46, 44, 94, 8, 42, 6, 22, 18, 66, 36, 29, 21, 52, 75, 74], [28, 62, 67, 47, 24, 53, 52, 15, 226, 236, 225, 190], [221, 232, 208, 177, 233, 222, 220, 242, 221, 190, 216, 246, 244, 252, 196, 198, 246, 226, 171, 170], [251, 222, 163, 168], [254, 175, 171, 243, 195, 207, 232, 213, 199, 194, 155, 154], [203, 155, 252, 155], [206, 234, 151, 156], [234, 246, 139, 128, 214, 210, 139, 138], [238, 139, 236, 210, 233, 143, 135, 213, 161, 243, 148, 243], [166, 130, 170, 178, 146, 158, 140, 178, 153, 160, 136, 187, 179, 151, 128, 165, 130, 184, 144, 164, 188, 142, 140, 153, 184, 155, 140, 175, 130, 182, 183, 222], [190, 162, 176, 142, 140, 190, 137, 214], [142, 170, 130, 154, 170, 164, 130, 133, 149, 162, 194, 202], [153, 174, 207, 140, 152, 165, 175, 61], [101, 117, 62, 57], [102, 53, 85, 96, 109, 66, 93, 118], [87, 73, 54, 122, 117, 69, 34, 120, 119, 120, 70, 37], [125, 93, 119, 104, 71, 73, 38, 17, 69, 99, 30, 25], [124, 75, 75, 93, 115, 107, 22, 17], [119, 28, 121, 0, 103, 117, 95, 64, 111, 103, 10, 5], [90, 9, 105, 84, 94, 80, 110, 125], [36, 22, 10, 121], [32, 2, 14, 117], [43, 13, 29, 57, 23, 125, 29, 63], [51, 97, 25, 36, 15, 1, 98, 104, 0, 2, 9, 44, 63, 108, 107, 93], [56, 81, 41, 8, 60, 62, 53, 4], [13, 61, 94, 7, 55, 57, 53, 0, 19, 31, 37, 31], [36, 27, 27, 22, 42, 45, 78, 76, 51, 20, 45, 194, 226, 236, 201, 236, 224, 215, 186, 181], [211, 231, 231, 255, 239, 207, 178, 173], [242, 218, 217, 248, 247, 209, 174, 240, 195, 219, 166, 161], [199, 201, 170, 200, 248, 207, 219, 200, 255, 231, 154, 149], [203, 237, 199, 214, 201, 239, 146, 141], [232, 128, 138, 193, 215, 219, 225, 210, 221, 253, 237, 215], [233, 233, 249, 240, 160, 131, 254, 249], [159, 171, 129, 163, 147, 155, 246, 241], [158, 153, 250, 224, 156, 168, 153, 150, 182, 184, 157, 176, 188, 139, 230, 225], [135, 134, 149, 153, 131, 209, 170, 217], [188, 139, 161, 130, 136, 216, 143, 149, 143, 221, 185, 133, 171, 183, 189, 130, 151, 177, 206, 129], [154, 200, 173, 144, 167, 191, 61, 60], [91, 49, 108, 105, 95, 53, 123, 52], [110, 102, 53, 126, 106, 88, 33, 125], [112, 33, 33, 97, 76, 79, 86, 99, 67, 76, 120, 113], [125, 114, 118, 85, 64, 16, 126, 73], [115, 74, 126, 71, 120, 115, 68, 90], [77, 28, 98, 72, 80, 1, 64, 89], [87, 5, 110, 12, 89, 115, 118, 81, 93, 12, 13, 124], [27, 27, 10, 53, 36, 32, 117, 116], [40, 28, 117, 127, 20, 25, 2, 39], [49, 96, 2, 47, 53, 16, 14, 44, 0, 26, 97, 96], [7, 109, 38, 18, 0, 34, 89, 88], [7, 63, 58, 5, 8, 51, 33, 80], [13, 2, 38, 11, 17, 52, 77, 0, 21, 69, 46, 44, 31, 35, 62, 17], [26, 55, 202, 233, 219, 177, 209, 184], [229, 181, 222, 250, 208, 220, 194, 189], [236, 216, 252, 161, 200, 203, 222, 216, 247, 192, 169, 233, 254, 218, 161, 160], [252, 173, 149, 200, 248, 244, 254, 211, 197, 202, 254, 152, 200, 198, 212, 219, 247, 248, 225, 140], [211, 129, 226, 128], [215, 224, 141, 195, 222, 252, 250, 200, 231, 141, 149, 252], [155, 241, 253, 176, 156, 146, 164, 188, 168, 166, 154, 180, 159, 152, 229, 191, 176, 148, 129, 232], [181, 186, 158, 233, 128, 138, 225, 224], [132, 237, 152, 151, 187, 142, 162, 150, 183, 213, 209, 157, 137, 172, 213, 151, 143, 183, 162, 157, 166, 192, 182, 153, 149, 154, 190, 201, 155, 172, 197, 136], [156, 71, 109, 120, 103, 67, 83, 115, 93, 80, 64, 55], [81, 75, 75, 62, 86, 65, 44, 47], [73, 115, 40, 43], [78, 42, 32, 96], [66, 107, 32, 35], [124, 19, 99, 81, 66, 115, 107, 74], [69, 26, 28, 94, 79, 116, 127, 66], [77, 93, 119, 70, 105, 101, 8, 11], [109, 96, 81, 86, 98, 12, 115, 72, 93, 23, 112, 42, 33, 41, 20, 123], [34, 9, 116, 119], [46, 8, 8, 115], [21, 98, 7, 98, 1, 3, 45, 58, 53, 15, 15, 47, 63, 25, 23, 107, 12, 55, 48, 95], [0, 9, 51, 28, 3, 47, 80, 19, 49, 61, 80, 83], [13, 39, 39, 6, 17, 71, 63, 67], [20, 22, 18, 71], [42, 36, 55, 7, 38, 216, 237, 193, 231, 211, 223, 235, 221, 208, 192, 183], [210, 190, 245, 226, 214, 200, 219, 199, 242, 195, 164, 250, 245, 171, 207, 170], [194, 174, 229, 232, 252, 146, 244, 159], [249, 150, 243, 150, 242, 197, 255, 208, 200, 235, 148, 219, 204, 130, 231, 251, 233, 227, 243, 221, 237, 224, 240, 135], [226, 142, 197, 136, 242, 186, 136, 255], [160, 247, 151, 176, 164, 137, 244, 247], [169, 139, 244, 184, 172, 145, 236, 239], [176, 147, 147, 175, 180, 234, 143, 157, 185, 155, 228, 182, 187, 161, 220, 223], [181, 214, 179, 143, 182, 176, 167, 144, 177, 187, 220, 135, 141, 184, 154, 207], [171, 197, 204, 129, 150, 175, 205, 199], [152, 187, 187, 135, 99, 51, 84, 73, 102, 107, 87, 58], [106, 59, 63, 103, 110, 96, 92, 99, 74, 80, 47, 46], [78, 82, 64, 125, 122, 43, 72, 119, 74, 75, 84, 85, 113, 19, 27, 87, 71, 98, 31, 82, 114, 126, 31, 27], [117, 30, 100, 67, 105, 105, 96, 95, 102, 7, 112, 71, 90, 94, 7, 6], [93, 106, 11, 69, 36, 6, 4, 54, 32, 2, 42, 47, 44, 14, 31, 118], [21, 127, 54, 63, 10, 6, 103, 99, 7, 18, 0, 39, 2, 107, 50, 107], [10, 10, 50, 42, 4, 37, 10, 33, 7, 11, 44, 15, 13, 56, 87, 86], [15, 95, 32, 22, 42, 38, 36, 6], [23, 50, 14, 31, 33, 75, 44, 20, 30, 79, 6, 20, 218, 217, 203, 190], [222, 235, 204, 235, 210, 209, 250, 231], [214, 213, 212, 227, 242, 255, 195, 174], [240, 248, 208, 228, 252, 206, 207, 166], [197, 174, 212, 243, 249, 249, 240, 207, 246, 242, 222, 203, 202, 254, 252, 222, 200, 236, 147, 146], [210, 246, 244, 218, 238, 226, 193, 138], [217, 238, 143, 208, 230, 229, 214, 239, 154, 166, 255, 254], [167, 171, 161, 250], [170, 251, 255, 178, 150, 154, 136, 164, 181, 137, 156, 227, 141, 141, 132, 187, 129, 235, 178, 179, 190, 176, 186, 179], [132, 166, 219, 141, 190, 215, 158, 139, 185, 219, 146, 131, 143, 222, 163, 210], [145, 166, 199, 134, 174, 173, 188, 190, 162, 174, 150, 149, 157, 181, 175, 61], [98, 111, 58, 53, 103, 107, 86, 53], [106, 56, 93, 60, 91, 99, 73, 99, 117, 69, 69, 86, 113, 80, 69, 104, 123, 77, 78, 33], [72, 45, 77, 89, 64, 117, 22, 74], [68, 113, 22, 64, 115, 24, 125, 127, 119, 121, 26, 91, 107, 106, 121, 68, 87, 91, 84, 5], [91, 125, 2, 86, 92, 12, 105, 43], [24, 21, 17, 47, 20, 116, 63, 32, 42, 121, 6, 113], [20, 124, 118, 59, 11, 3, 110, 105], [55, 1, 110, 51, 3, 11, 102, 97], [14, 9, 106, 80, 44, 54, 57, 38, 6, 8, 45, 0, 12, 59, 86, 81], [14, 3, 57, 26, 19, 64, 70, 1, 47, 33, 57, 72], [29, 61, 45, 72, 25, 59, 53, 232, 226, 176, 213, 247, 228, 209, 178, 228], [216, 210, 193, 245, 212, 214, 228, 173], [242, 160, 255, 225], [207, 209, 251, 226, 250, 221, 227, 244, 248, 207, 162, 157], [249, 147, 154, 221, 193, 238, 245, 216, 241, 152, 225, 196, 206, 156, 250, 141], [211, 245, 138, 194, 214, 243, 225, 205, 227, 251, 134, 129], [222, 140, 233, 240, 148, 175, 149, 188, 161, 145, 145, 178, 173, 143, 163, 160, 148, 153, 157, 188, 178, 181, 238, 233], [183, 129, 129, 176, 186, 233, 141, 165, 135, 136, 141, 140, 132, 170, 178, 217], [129, 190, 169, 132, 138, 129, 173, 130, 183, 185, 218, 192], [168, 192, 155, 156, 150, 157, 185, 142, 163, 189, 174, 193], [167, 166, 78, 107, 91, 91, 70, 105], [101, 53, 49, 56, 105, 102, 66, 97], [111, 61, 70, 36, 67, 33, 45, 126, 76, 70, 37, 36], [76, 76, 112, 104, 122, 91, 109, 88, 115, 123, 110, 92, 127, 127, 67, 20], [75, 25, 122, 24, 77, 88, 13, 12], [81, 94, 98, 79, 82, 96, 9, 85], [89, 86, 106, 69, 90, 104, 22, 59, 38, 6, 2, 48, 39, 16, 121, 33, 46, 12, 32, 59, 44, 36, 10, 40, 11, 4, 101, 57], [55, 16, 14, 41, 0, 105, 52, 109], [7, 109, 89, 20, 1, 81, 93, 22, 60, 54, 85, 84], [51, 89, 85, 24, 52, 58, 73, 64, 22, 52, 34, 12, 36, 69, 62, 9, 24, 28, 65, 64], [29, 76, 210, 248, 224, 177, 240, 233, 208, 192, 222, 189, 238, 202, 177, 176]];
    const fj = 18;
    const r = 8;
    const gj = undefined;
    const h = 100;
    const l = 7;
    const g = 255;
    const s = 14;
    const b = 256;
    const u = true;
    const d = 17;
    const m = false;
    const c = 10;
    const p = 19;
    const v = -8;
    const C = 20;
    const f = 256;
    const z = 6;
    const y = -4;
    const w = 12;
    const P = 4;
    const A = 11;
    const k = 13;
    const x = 16;
    const J = 100;
    const M = 9;
    const B = 5;
    const E = 15;
    const D = 255;
    const I = 16;
    const S = 20;
    const Q = 2;
    const T = 4;
    const F = 0;
    const R = 14;
    const G = 6;
    const j = u;
    const W = 11;
    const L = 256;
    const O = 1 << 11;
    const N = 3;
    const H = 100;
    const q = 1 << 12;
    const U = 2;
    const Y = 7;
    const K = 11;
    const V = 1;
    const X = 4;
    const Z = 0;
    const _ = 256;
    const ee = 15;
    let ie = gj;
    const te = 12;
    let oe;
    let hj;
    let ij;
    let jj = gj;
    let kj = gj;
    const lj = 7;
    const ge = 12;
    let ue = gj;
    const mj = 7;
    let de;
    const nj = 14;
    let me = [];
    let ce = gj;
    let oj = "_";
    const pj = 17;
    let Te;
    let qj;
    let rj = gj;
    const sj = 13;
    let we;
    let tj;
    let uj = gj;
    let vj = gj;
    const wj = gj;
    const Je = 14;
    let Me;
    const xj = m;
    let Ee;
    const yj = 12;
    let Ie;
    let zj = gj;
    let Aj = gj;
    let Bj = gj;
    const Cj = 6;
    let Re = gj;
    const Dj = 9;
    let je = wj;
    const Ej = 2;
    let Le = gj;
    const Fj = 6;
    let Ne = wj;
    const Gj = 18;
    const qe = 5;
    const Ue = 17;
    let Ye = wj;
    const Hj = 11;
    let Ve;
    let Ij = gj;
    const Jj = 20;
    let $e = gj;
    const Kj = 19;
    const ii = wj;
    let ti = gj;
    const Lj = 13;
    const oi = u;
    const ai = 256;
    const ri = 16;
    let si;
    let Mj;
    let Nj = wj;
    const Oj = 255;
    const ui = 100;
    let bi = ii;
    let Pj = ii;
    const Qj = xj;
    const mi = 10;
    let ci;
    const Rj = 4;
    const Ci = 100;
    let Ti;
    const Sj = 8;
    let zi;
    let Tj;
    let Uj = wj;
    let Vj = ii;
    const Wj = 6;
    const ki = 9;
    let xi = wj;
    const Xj = 255;
    const Mi = 19;
    const Bi = 12;
    let Ei = ii;
    const Yj = 0;
    let Ii;
    let Zj = wj;
    const $j = 3;
    let _i;
    let _j;
    let ak = ii;
    let bk = ii;
    const ck = 15;
    let Wi;
    const dk = 7;
    let Oi = 0;
    if (!aj.WebAssembly || !aj.WebAssembly.instantiate) {
        ᐃΔⵠⲆΔⵠᐃⲆᐃ();
    }
    const ek = gj;
    const Hi = {
        Date: Date
    };
    aj.WebAssembly.instantiate(Uint8Array.from(aj.atob(""), function (a) {
        return a.charCodeAt(0);
    }), Hi).then(function (a) {
        jj = a.instance;
        ie = jj.exports;
        oe = ie.memory;
        hj = oe.buffer;
        ij = ie.__pin;
        kj = ie.__unpin;
        ue = ie.__new;
        de = ie.__collect;
        oj = "_";
        for (let b = 0; b < 31; b++) {
            me[b] = ie[oj + b];
        }
        ce = ie.__rtti_base;
        Te = new Float32Array(hj);
        qj = new Float64Array(hj);
        rj = new BigUint64Array(hj);
        we = new Uint32Array(hj);
        uj = new Uint16Array(hj);
        tj = new Uint8Array(hj);
        vj = new BigInt64Array(hj);
        Me = new Int32Array(hj);
        Ee = new Int16Array(hj);
        Ie = new Int8Array(hj);
        Uj = me[26];
        Vj = me[25];
        _j = me[10];
        Ij = me[13];
        Ne = me[6];
        Zj = me[29];
        zj = me[24];
        Ti = me[8];
        Ei = me[0];
        xi = me[18];
        Aj = me[12];
        Mj = me[5];
        ci = me[17];
        Re = me[11];
        Nj = me[22];
        je = me[3];
        zi = me[7];
        Pj = me[1];
        Tj = me[16];
        Le = me[19];
        Ii = me[14];
        si = me[23];
        ti = me[30];
        bk = me[21];
        Ve = me[27];
        bi = me[28];
        Bj = me[4];
        Ye = me[9];
        ak = me[15];
        $e = me[20];
        _i = me[2];
        Oi = 1;
        if (Wi) {
            Wi();
        }
    });
    const qi = function (a) {
        return we[(ce + 4 >>> 2) + (a << 1)];
    };
    function Ui(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const Yi = 1;
    const Ki = 9;
    const Vi = 14;
    const Xi = xj;
    function Zi(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return Te;
                case 3:
                    return qj;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Ie;
                    } else {
                        return tj;
                    }
                case 1:
                    if (b) {
                        return Ee;
                    } else {
                        return uj;
                    }
                case 2:
                    if (b) {
                        return Me;
                    } else {
                        return we;
                    }
                case 3:
                    if (b) {
                        return vj;
                    } else {
                        return rj;
                    }
            }
        }
    }
    const $i = 20;
    function fk(b) {
        const c = we[b + v >>> 2];
        const d = qi(c);
        const e = Ui(d);
        let f = d & 4 ? b : we[b + 4 >>> 2];
        const g = d & 2 ? we[b + 12 >>> 2] : we[f + y >>> 2] >>> e;
        return Zi(e, d & O, d & q).subarray(f >>>= e, f + g);
    }
    const gk = 11;
    function hk(b, c, d, e) {
        const f = (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 24 & 255)) + (0 << (b & 255));
        const g = ~(d & 4791) & (d | 4791);
        const a = ~(e & 60413) & 60413 | ~(e & 60413) & e;
        const i = function (b, c) {
            const d = (12345 + (49408 + b) * 1103515245) % 2147483648;
            const e = (24 << (c >> 16 & 255)) + (0 << (c >> 8 & 255)) + (Ba << (c >> 24 & 255)) + (16 << (c & 255));
            const f = yr(d, e, d, e);
            const g = pc(d, e, d, e);
            return ((21747 + (f ^ g)) * 1103515245 + 12345) % 2147483648;
        }(f, ((56193 + c) * 22695477 + 1) % 4294967296);
        const j = er(g, a, f);
        return (24 << ((i ^ j) & 255)) + (8 << ((i ^ j) >> 24 & 255)) + (16 << ((i ^ j) >> 8 & 255)) + (0 << ((i ^ j) >> 16 & 255));
    }
    const ik = 100;
    const jk = 14;
    function kk(b, c, d, e, f) {
        const g = (2147483587 + (b + 27234) * 2147483629) % 2147483647;
        const a = ~(c & 49196) & (c | 49196);
        const i = d ^ 468;
        const j = (e | 44659) & ~(e & 44659);
        return (12345 + (11531 + (function (b, c, d, e, f) {
            const g = ~(b & 53208) & (b | 53208);
            const a = (c + 31833) % 65486;
            const i = (24 << (d >> 16 & 255)) + (16 << (d >> 8 & 255)) + (8 << (d >> 24 & 255)) + (0 << (d & 255));
            const j = function (b, c, d, e, f, i) {
                const a = (b | 52188) & ~(b & 52188);
                const j = ~(e & 61813) & (e | 61813);
                const k = ((32645 + f) * 1664525 + 1013904223) % 4294967296;
                const h = (16 << (i & 255)) + (8 << (i >> 8 & 255)) + (24 << (i >> 16 & 255)) + (0 << (i >> 24 & 255));
                const l = bf(a, (8 << (c >> 8 & 255)) + (0 << (c >> 16 & 255)) + (16 << (c >> 24 & 255)) + (24 << (c & 255)), d ^ 24028);
                const g = vr(j, k, h, a);
                return (2170 + (l ^ g)) % 65451;
            }(g, a, i, ~(e & 18886) & e | ~(e & 18886) & 18886, (f | 12801) & ~(f & 12801), g);
            const h = wr(a, i);
            return (0 << ((j ^ h) >> 24 & 255)) + (Gd << ((j ^ h) & 255)) + (16 << ((j ^ h) >> 8 & 255)) + (24 << ((j ^ h) >> 16 & 255));
        }(g, a, i, j, (f | 24417) & ~(f & 24417)) ^ hk(g, a, i, j))) * 1103515245) % 2147483648;
    }
    function lk(b, c, d, e, f) {
        const g = (8 << (d >> 16 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d & 255)) + (16 << (d >> 8 & 255));
        const a = ~(e & 42033) & e | ~(e & 42033) & 42033;
        return ((7994 + (function (a, b) {
            const c = ((57418 + a) * 1664525 + 1013904223) % 4294967296;
            const d = ~(b & 24797) & (b | 24797);
            const e = function (b, c, d, e, f) {
                const g = (2147483587 + (b + 7859) * 2147483629) % 2147483647;
                const a = (2531011 + (61295 + c) * 214013) % 4294967296;
                const i = ((13102 + e) * 2147483629 + 2147483587) % 2147483647;
                const j = ((32665 + f) * 22695477 + 1) % 4294967296;
                const h = function (b, c, d) {
                    const e = b ^ 14053;
                    const f = (8 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255)) + (24 << (c >> 16 & 255));
                    const g = (8 << (d >> 16 & 255)) + (0 << (d >> 24 & 255)) + (24 << (d & 255)) + (16 << (d >> 8 & 255));
                    const a = Or(e, f, g, e);
                    const h = function (b, c, d, e) {
                        const f = ~(b & 64420) & 64420 | ~(b & 64420) & b;
                        const g = ((c + 1861) * 22695477 + 1) % 4294967296;
                        const a = (d + 55896) % 65299;
                        const i = ~(e & 54649) & e | ~(e & 54649) & 54649;
                        const j = lf(f, g, a, i);
                        (function (b, c, d, e, f) {
                            const g = ~(b & 29382) & (b | 29382);
                            const a = (c | 471) & ~(c & 471);
                            const i = (d | 46077) & ~(d & 46077);
                            const j = kk(g, a, i, ~(e & 34605) & e | ~(e & 34605) & 34605, (f | 22619) & ~(f & 22619));
                            const h = Ns(g, a, i);
                        })(f, g, a, i, f);
                        return (j | 64011) & ~(j & 64011);
                    }(f, g, e, f);
                    return (1013904223 + (47755 + (a ^ h)) * 1664525) % 4294967296;
                }(g, a, (1013904223 + (d + 47996) * 1664525) % 4294967296);
                yr(i, j, g, a);
                return h ^ 30135;
            }(c, d, c, d, c);
            Wv(d, c, d, c, d, c);
            return ~(e & 21952) & e | ~(e & 21952) & 21952;
        }(~(b & 40303) & (b | 40303), c ^ 17687) ^ dr(g, a))) * 1664525 + 1013904223) % 4294967296;
    }
    const mk = oi;
    const nk = "development";
    const ok = "production";
    function pk(a) {
        this.ⲆᐃΔΔ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor(Math.random() * (this.ⲆᐃΔΔ - 1));
    }
    pk.prototype.random = function () {
        this.state = (this.state * this.a + this.c) % this.ⲆᐃΔΔ;
        return this.state / this.ⲆᐃΔΔ;
    };
    const qk = 256;
    pk.prototype.ᐃΔΔᐃΔⵠⵠ = function (a) {
        this.state = a;
    };
    ⲆΔⵠΔΔΔⲆ = 10000;
    const rk = 2;
    const sk = 17;
    ΔᐃⲆⵠᐃΔᐃ = [];
    var tk = new pk();
    const uk = 5;
    const vk = 19;
    const wk = 9;
    tk.ᐃΔΔᐃΔⵠⵠ(new Date().getTime());
    const xk = 8;
    for (var yk = 0; ⲆΔⵠΔΔΔⲆ > yk; yk++) {
        ΔᐃⲆⵠᐃΔᐃ.push(tk.random());
    }
    const zk = 18;
    function Ak(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const n = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const h = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const l = i ^ 52219;
        const g = (j + 3575) % 65503;
        const o = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const b = Cn(a, n, h, l, g);
        const d = function (c, e, f, i, j, k) {
            const a = c ^ 30142;
            const m = (e + 63025) % 65493;
            const h = f ^ 30777;
            const l = ((45939 + i) * 22695477 + 1) % 4294967296;
            const g = (8 << (j >> 16 & 255)) + (32 << (j >> 24 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 8 & 255));
            const n = (k | 45652) & ~(k & 45652);
            const b = Cn(a, m, h, l, g);
            Ck(n, a, m, h, l);
            hn(g, n, a, m, h, l);
            return b ^ 60048;
        }(o, a, n, h, l, g);
        bq(o, a, n, h, l, g);
        const p = (1013904223 + (60709 + (b ^ d)) * 1664525) % 4294967296;
        return ~(p & 42138) & p | ~(p & 42138) & 42138;
    }
    function Bk(c, d, e, f) {
        const i = ~(c & 59259) & c | ~(c & 59259) & 59259;
        const j = ~(d & 56097) & d | ~(d & 56097) & 56097;
        const a = ((43315 + e) * 1664525 + 1013904223) % 4294967296;
        const k = (8 << (f >> 24 & 255)) + (32 << (f >> 32 & 255)) + (24 << (f >> 8 & 255)) + (16 << (f >> 16 & 255));
        const h = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const n = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const h = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const l = i ^ 40782;
            const g = j ^ 41301;
            const b = ~(k & 12091) & (k | 12091);
            const d = Vk(a, n, h, l, g, b);
            Vk(a, n, h, l, g, b);
            un(a, n, h, l, g);
            const o = (d | 3006) & ~(d & 3006);
            return ~(o & 24460) & (o | 24460);
        }(i, j, a, k, i, j);
        const l = Jn(a, k, i, j, a);
        Vk(k, i, j, a, k, i);
        const g = (1013904223 + (26191 + (h ^ l)) * 1664525) % 4294967296;
        return (g | 38630) & ~(g & 38630);
    }
    function Ck(c, e, f, i, j) {
        const k = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = e ^ 63080;
        const m = ((f + 60304) * 22695477 + 1) % 4294967296;
        const h = ~(i & 5467) & 5467 | ~(i & 5467) & i;
        const l = (j | 40165) & ~(j & 40165);
        const g = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const h = Gk(f, i, a, j);
            const k = vn(f, i, a, j);
            Bk(f, i, a, j);
            const g = (24 << ((h ^ k) >> 24 & 255)) + (8 << ((h ^ k) >> 16 & 255)) + (16 << ((h ^ k) >> 32 & 255)) + (32 << ((h ^ k) >> 8 & 255));
            return ~(g & 63304) & (g | 63304);
        }(k, a, m, h);
        const b = Jn(l, k, a, m, h);
        const d = En(l, k, a, m, h, l);
        return ((28765 + ((16 << ((g ^ b) >> 24 & 255)) + (8 << ((g ^ b) >> 16 & 255)) + (24 << ((g ^ b) >> 32 & 255)) + (32 << ((g ^ b) >> 8 & 255)) ^ d)) * 1664525 + 1013904223) % 4294967296;
    }
    const Dk = 13;
    const Ek = 14;
    const Fk = 0;
    function Gk(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    function Hk(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = Mn(j, a);
        const g = Bk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = Dn(c, d, c);
                Zk(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ Nk(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = yn(a, j, f, i, a);
            Mn(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    const Ik = 12;
    const Jk = 11;
    const Kk = 10;
    const Lk = 4;
    const Mk = 16;
    function Nk(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = Gk(i, a, j, k);
        yn(h, i, a, j, k);
        bq(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function Ok(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = zn(i, a);
        yn(j, k, h, i, a);
        hn(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function Pk(c, d, e, f, i, j) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const k = (1013904223 + (13210 + d) * 1664525) % 4294967296;
        const m = ~(e & 32165) & 32165 | ~(e & 32165) & e;
        const h = (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 32 & 255));
        const l = (1 + (39199 + i) * 22695477) % 4294967296;
        const g = j ^ 33037;
        const n = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = eq(e, f, g, e, f);
            const i = En(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = hn(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Ck(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = Rk(a, m, n, h);
                                const b = yn(l, g, a, m, n);
                                const d = Rk(h, l, g, a);
                            })(g, e, f, g, e, f);
                            vn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        un(d, c, d, c, d);
                        Gk(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    Zk(j, k, h, i);
                    const g = Ok(a, j, k, h, i);
                })(c, d, c, d, c);
                zn(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, k, m);
        vn(h, l, g, a);
        return ((34159 + (n ^ 2959 ^ Rk(k, m, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    const Qk = m;
    function Rk(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = Cn(f, i, a, j, f);
            const h = Hk(i, a, j, f, i);
            const l = nn(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        vn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ Cn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const Sk = 6;
    const Tk = ii;
    const Uk = 1;
    function Vk(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (Pn(a, j, k, h, l) ^ vn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ un(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const Wk = 9;
    const Xk = 255;
    const Yk = ek;
    function Zk(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Ak(f, g, a, i, f, g);
        vn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ bq(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const $k = u;
    const _k = 13;
    const aq = m;
    function bq(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (Gk(a, i, d ^ 53590, e ^ 36633) ^ Gk(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    const cq = 2;
    const dq = 11;
    function eq(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = bq(i, a, j, k, h, i);
        const g = Gk(a, j, k, h);
        Dn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    const en = 17;
    const tn = 5;
    function nn(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = bq(d, e, d, e, d, e);
        const g = bq(d, e, d, e, d, e);
        Gk(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    const on = 3;
    const an = 4;
    const rn = 15;
    const sn = 7;
    function hn(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = En(a, m, n, h, l, g);
        Nk(a, m, n, h, l);
        Gk(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    const ln = 4;
    const gn = 19;
    function un(c, d, e, f, i) {
        const j = (2147483587 + (c + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + d) * 214013 + 2531011) % 4294967296;
        const k = (2531011 + (22845 + e) * 214013) % 4294967296;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = ~(i & 11999) & i | ~(i & 11999) & 11999;
        const g = bq(j, a, k, h, l, j);
        const m = hn(a, k, h, l, j, a);
        Gk(k, h, l, j);
        return (8 << ((g ^ m) >> 24 & 255)) + (16 << ((g ^ m) >> 16 & 255)) + (24 << ((g ^ m) >> 8 & 255)) + (32 << ((g ^ m) >> 32 & 255)) ^ 35444;
    }
    const bn = Qj;
    const dn = 20;
    function vn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = zn(f, g);
        zn(a, i);
        Jn(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    const mn = aq;
    const cn = 20;
    const pn = 100;
    function Cn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Ck(i, a, j, k, h);
        En(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ Jn(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    const Tn = bn;
    const fn = wj;
    function zn(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (Pn(c, d, c, d, c) ^ yn(d, c, d, c, d))) % 65357 ^ Gk(c, d, c, d))) * 22695477) % 4294967296;
    }
    function yn(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = En(i, a, j, k, h, i);
        En(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ Gk(j, k, h, i))) * 214013) % 4294967296;
    }
    const wn = 15;
    function Pn(c, e, f, i, j) {
        const k = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = e ^ 55978;
        const m = ((f + 2934) * 1664525 + 1013904223) % 4294967296;
        const h = ~(i & 30642) & (i | 30642);
        const l = (8 << (j >> 8 & 255)) + (24 << (j >> 32 & 255)) + (16 << (j >> 24 & 255)) + (32 << (j >> 16 & 255));
        const g = yn(k, a, m, h, l);
        const n = un(k, a, m, h, l);
        Gk(k, a, m, h);
        const b = (16 << ((g ^ n) >> 32 & 255)) + (24 << ((g ^ n) >> 8 & 255)) + (8 << ((g ^ n) >> 24 & 255)) + (32 << ((g ^ n) >> 16 & 255));
        return ~(b & 23686) & (b | 23686);
    }
    const An = 256;
    const kn = 255;
    const xn = 12;
    function Jn(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = Nk(j, a, k, m, h);
        const g = Mn(j, a);
        Nk(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function Mn(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = Ok(d, e, d, e, d);
        const g = Pn(e, d, e, d, e);
        eq(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const Bn = 15;
    function En(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = nn((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = nn(a, j);
        nn(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    function Dn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = Ok(e, f, g, e, f);
        const h = Ok(g, e, f, g, e);
        Ok(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    const In = 7;
    ΔⲆⵠᐃ = {
        ΔΔⲆΔⵠⲆⵠ: () => new Promise((a, b) => {
            aj.grecaptcha.ready(function () {
                aj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (dw) {
                        a(0);
                    } else {
                        console.log(undefined);
                        b(c);
                    }
                });
            });
        }),
        ⲆΔᐃᐃΔⲆⲆⲆᐃ: function (a) {
            aj.open(a, "_blank").focus();
        },
        ⲆᐃΔⲆΔΔΔ: function (a) {
            aj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ᐃⵠⵠⵠⵠⲆⵠ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return Xi;
                }
            }
            return $k;
        },
        ⵠΔᐃΔᐃΔᐃⵠⲆ: function (a, b) {
            if (a.length != b.length) {
                return Tn;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ᐃⵠⵠⵠⵠⲆⵠ(a[c], b[c])) {
                        return false;
                    }
                } else if (a[c] != b[c]) {
                    return false;
                }
            }
            return oi;
        },
        ΔᐃᐃᐃᐃᐃⲆ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ΔⵠⵠⲆⵠⵠⵠ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ᐃΔᐃⲆⲆᐃⵠᐃⲆ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ⲆᐃⵠⲆᐃᐃⵠ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ⲆⲆΔΔⵠⵠⵠ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ᐃⲆⵠᐃⵠᐃΔ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ΔΔⵠᐃⲆᐃΔ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ⵠⲆΔⲆⵠΔΔ: function (a, b) {
            return Math.asin(this.ⲆᐃⵠⲆᐃᐃⵠ(a, b) / (this.ⲆⲆΔΔⵠⵠⵠ(a) * this.ⲆⲆΔΔⵠⵠⵠ(b))) * this.sign(this.ᐃⲆⵠᐃⵠᐃΔ(a, b));
        },
        ΔᐃⵠᐃⵠⵠΔ: function (a) {
            ⲆⵠΔⲆⵠᐃⲆ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ⲆⵠΔⲆⵠᐃⲆ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ⵠⲆΔⲆΔᐃⲆ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ΔⵠᐃᐃⵠⵠⲆ: function (a, b) {
            return this.ⵠⲆΔⲆⵠΔΔ({
                x: 1,
                y: 0
            }, this.ΔⵠⵠⲆⵠⵠⵠ(a, b));
        },
        Ⲇᐃⵠᐃ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        Ⲇⵠᐃᐃᐃᐃⵠ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ΔⲆⵠⵠⲆᐃΔ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ⲆⵠᐃΔᐃⲆⵠ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ⵠⵠᐃⵠⵠΔⵠᐃⲆ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ᐃΔⲆΔⵠⲆⵠΔⲆ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ΔᐃΔΔⲆ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⵠⵠᐃᐃΔᐃΔ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ᐃΔΔⲆⲆⵠⵠ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ΔⵠΔΔⵠⵠᐃ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ᐃⲆⵠΔᐃᐃⵠΔⵠ: function (b, c, d) {
            var e = this.ΔⵠΔΔⵠⵠᐃ();
            var f = this.ΔⵠΔΔⵠⵠᐃ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ΔⵠΔⵠᐃⵠⲆΔⵠ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ⵠⵠⲆ = d;
        },
        ⲆⲆⵠΔᐃⲆᐃᐃⵠ: function (a) {
            ᐃΔⵠ = [];
            ᐃΔⵠ.push.apply(ᐃΔⵠ, a);
            var b = [];
            while (ᐃΔⵠ.length > 0) {
                var c = Math.floor(Math.random() * ᐃΔⵠ.length);
                b.push(ᐃΔⵠ[c]);
                ᐃΔⵠ.splice(c, 1);
            }
            return b;
        },
        ΔⵠⵠⵠΔⵠΔ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ⲆⲆⵠΔⵠΔΔ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ᐃⲆⵠⲆⵠⲆᐃ: function (a) {
            return a * (2 - a);
        },
        ⲆᐃⲆᐃᐃⵠⵠ: function (a) {
            return --a * a * a + 1;
        },
        ΔⲆΔⵠΔ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ⲆⵠᐃΔᐃⵠᐃ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ΔⲆᐃΔΔⵠΔⵠⲆ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ⲆΔᐃⵠⵠⵠⲆ: function (a) {
            return 1 - --a * a * a * a;
        },
        ΔⵠⲆⲆⵠⲆᐃ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⲆΔᐃᐃ: function (b, c, d, e, f, g) {
            this.ⵠⲆΔ = b;
            this.ⵠΔⲆ = c;
            this.max = d;
            this.min = e;
            this.ⵠⲆⵠⲆᐃᐃⵠ = f;
            this.ⲆⲆⲆⲆΔΔΔ = g;
            this.ⲆᐃⵠⲆⵠᐃᐃ = 0;
            this.ⵠⵠΔ = function () {
                if (this.ⵠⲆΔ) {
                    if ((a = this.ⵠΔⲆ + Xw * this.ⵠⲆⵠⲆᐃᐃⵠ) > this.max) {
                        this.ⵠΔⲆ = this.max;
                        this.ⵠⲆΔ = false;
                        return $k;
                    }
                    this.ⵠΔⲆ = a;
                } else {
                    var a;
                    if ((a = this.ⵠΔⲆ - Xw * this.ⲆⲆⲆⲆΔΔΔ) < this.min) {
                        this.ⵠΔⲆ = this.min;
                        this.ⵠⲆΔ = true;
                    } else {
                        this.ⵠΔⲆ = a;
                    }
                }
            };
            return false;
        },
        ⵠⵠⲆⵠⲆ: function (b, c, d, e, f, g) {
            this.ⵠᐃᐃⲆᐃ = b;
            this.ⲆⵠⲆΔΔ = c;
            this.ᐃⵠᐃⵠⵠ = d;
            this.ⲆⲆⲆⲆᐃ = e;
            this.x = f;
            this.ⲆᐃΔⵠᐃ = g;
            this.ⵠΔⲆΔΔΔⵠ = function () {
                this.x = this.ⲆᐃΔⵠᐃᐃᐃⲆⵠ;
                this.ⲆⵠⲆΔΔ = 0;
            };
            this.ⵠⲆⲆΔᐃⵠᐃ = function (a) {
                if (a !== this.ⲆᐃΔⵠᐃ) {
                    this.ⲆᐃΔⵠᐃ = a;
                    this.ⲆⲆⲆⲆᐃ = this.x;
                    this.ⲆⵠⲆΔΔ = 0;
                }
                if (this.ⲆᐃΔⵠᐃ !== this.x) {
                    this.ⲆⵠⲆΔΔ += Xw;
                    if (this.ⲆⵠⲆΔΔ > this.ᐃⵠᐃⵠⵠ) {
                        this.x = this.ⲆᐃΔⵠᐃ;
                    } else {
                        var b = this.ⵠᐃᐃⲆᐃ(this.ⲆⵠⲆΔΔ / this.ᐃⵠᐃⵠⵠ);
                        this.x = this.ⲆⲆⲆⲆᐃ + (this.ⲆᐃΔⵠᐃ - this.ⲆⲆⲆⲆᐃ) * b;
                    }
                }
            };
        },
        ⵠΔⲆΔᐃⲆⲆ: function (b, c, d, e, f, g, a, i, j) {
            this.ⵠᐃᐃⲆᐃ = b;
            this.ⲆⵠⲆΔΔ = c;
            this.ᐃⵠᐃⵠⵠ = d;
            this.ⲆⲆⲆⲆᐃ = e;
            this.ᐃⲆⵠᐃⲆ = f;
            this.x = g;
            this.y = a;
            this.ⲆᐃΔⵠᐃ = i;
            this.ⵠⲆΔΔⵠⲆⵠ = j;
            this.ⵠⲆⲆΔᐃⵠᐃ = function (a) {
                if (a.x != this.ⲆᐃΔⵠᐃ || a.y != this.ⵠⲆΔΔⵠⲆⵠ) {
                    this.ⲆᐃΔⵠᐃ = a.x;
                    this.ⵠⲆΔΔⵠⲆⵠ = a.y;
                    this.ⲆⲆⲆⲆᐃ = this.x;
                    this.ᐃⲆⵠᐃⲆ = this.y;
                    this.ⲆⵠⲆΔΔ = 0;
                }
                if (this.ⲆᐃΔⵠᐃ != this.x || this.ⵠⲆΔΔⵠⲆⵠ != this.y) {
                    this.ⲆⵠⲆΔΔ += Xw;
                    if (this.ⲆⵠⲆΔΔ > this.ᐃⵠᐃⵠⵠ) {
                        this.x = this.ⲆᐃΔⵠᐃ;
                        this.y = this.ⵠⲆΔΔⵠⲆⵠ;
                    } else {
                        var b = this.ⵠᐃᐃⲆᐃ(this.ⲆⵠⲆΔΔ / this.ᐃⵠᐃⵠⵠ);
                        this.x = this.ⲆⲆⲆⲆᐃ + (this.ⲆᐃΔⵠᐃ - this.ⲆⲆⲆⲆᐃ) * b;
                        this.y = this.ᐃⲆⵠᐃⲆ + (this.ⵠⲆΔΔⵠⲆⵠ - this.ᐃⲆⵠᐃⲆ) * b;
                    }
                }
            };
        },
        ⵠᐃⵠⲆΔᐃⵠ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ΔⵠⵠᐃⲆᐃⲆ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ᐃΔⲆⵠⲆ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ᐃΔᐃⲆⲆⵠⵠ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ⵠⵠⲆ && j;
        },
        ⵠⲆⲆᐃᐃΔᐃ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ⲆⵠᐃⲆⲆᐃⵠ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ⲆΔⵠⵠⵠΔΔ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    const Sn = 18;
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const Qn = 6;
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ⵠᐃΔⵠⲆᐃⵠⲆⲆ;
    };
    (function (a) {
        var b = Qk;
        if (typeof ΔⲆᐃⲆⵠΔⵠ === "function" && ΔⲆᐃⲆⵠΔⵠ.ᐃᐃⵠⲆⵠᐃⲆ) {
            ΔⲆᐃⲆⵠΔⵠ(a);
            b = true;
        }
        if (typeof ⲆᐃⵠⵠⵠⲆⵠ === "object") {
            ⵠⲆΔᐃⵠⲆΔᐃᐃ.exports = a();
            b = mk;
        }
        if (!b) {
            var c = aj.ⵠΔᐃⲆ;
            var d = aj.ⵠΔᐃⲆ = a();
            d.ΔᐃⵠⲆⲆⲆⲆⲆⵠ = function () {
                aj.ⵠΔᐃⲆ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; a < arguments.length; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        if (typeof (j = b({
                            path: "/"
                        }, d.ᐃᐃΔΔᐃᐃⵠ, j)).expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆⵠΔΔⵠΔⵠΔⵠ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; l < n.length; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (s === e) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⵠΔⵠᐃⵠⲆᐃᐃⵠ = function () {
                return d.apply({
                    json: oi
                }, [].slice.call(arguments));
            };
            d.ᐃᐃΔΔᐃᐃⵠ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ⲆⵠᐃΔⵠΔᐃΔΔ = a;
            return d;
        }(function () { });
    });
    const _n = 17;
    const Fn = 12;
    const Rn = 20;
    const Gn = fn;
    var jn = document.getElementById("game_canvas");
    var Wn = jn.getContext("2d");
    const Ln = 14;
    var On = jn.width;
    const fq = 8;
    var Hn = jn.height;
    var gq = jn.width / 2;
    var hq = jn.height / 2;
    var iq = {
        x: gq,
        y: hq
    };
    const jq = 17;
    const Vn = 5;
    const Xn = 8;
    const Zn = 14;
    const $n = 0;
    const eo = wj;
    var io = 1;
    var kq = 1;
    const lq = u;
    const oo = 4;
    var ao = -1;
    const mq = 2;
    const so = 16;
    const ho = 1;
    const lo = 18;
    var go = "J" + oa;
    const nq = 12;
    var bo = "S" + xa;
    var oq = aj;
    const mo = 10;
    const co = 19;
    const po = xj;
    const Co = 13;
    var To;
    var pq = "O";
    var qq = aj.console;
    qq.log = qq.info = qq.error = qq.warn = qq.debug = qq.ⵠⵠⵠⲆⲆⵠΔᐃⵠ = qq.trace = qq.time = qq.timeEnd = function () { };
    const yo = 7;
    var wo;
    var rq = pq + "N";
    const sq = 10;
    var ko = 0;
    const xo = oi;
    var Jo = oq;
    const Mo = 11;
    const Bo = 8;
    const Eo = 9;
    var Do;
    const tq = 20;
    bo = "N";
    const So = mn;
    const Qo = 10;
    var _o = "J";
    pq = "O" + oa;
    const uq = 18;
    const Ro = 8;
    var Go = Jo;
    const jo = 16;
    const Wo = 3;
    var Lo;
    const vq = 15;
    const No = 6;
    const Ho = 256;
    const qo = 100;
    var Uo = Go;
    const Yo = 255;
    const Ko = 17;
    const Vo = 255;
    const Xo = 2;
    rq = "N" + undefined;
    var Zo = Uo;
    var $o;
    var wq;
    var xq;
    var yq = Zo;
    const na = 20;
    var oa;
    var zq = yq;
    const ra = oi;
    var sa;
    var Aq = zq;
    _o = "O";
    const Bq = 12;
    var ua = aj.Math.acos;
    aj.Math.acos = aj.Math.asin;
    aj.Math.asin = ua;
    var ba = aj.Math.cos;
    aj.Math.cos = aj.Math.sin;
    aj.Math.sin = ba;
    const da = 1;
    const va = 14;
    const ma = ek;
    const ca = 0;
    const pa = 13;
    const Ca = 19;
    const Ta = 9;
    var fa;
    const Cq = 6;
    var ya = Aq = zq;
    const wa = 9;
    const Pa = 11;
    var Aa;
    var Dq = ya;
    var xa = "J" + (fa = "S");
    const Ja = 2;
    const Ma = 100;
    jn.oncontextmenu = function () {
        return false;
    };
    const Ba = 8;
    go = "J";
    const Ea = 5;
    function Da(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ⲆΔⵠⵠⵠⵠᐃ = 1;
        return b;
    }
    const Eq = 16;
    const Sa = 4;
    pq = rq;
    const Qa = 15;
    const _a = 16;
    const Fa = 4;
    const Ra = 17;
    const Ga = So;
    const ja = 255;
    const Wa = 14;
    const La = 1;
    const Oa = 7;
    const Na = 20;
    rq = oa;
    const Ha = 10;
    const qa = 15;
    const Ua = 7;
    oa = xa;
    const Ya = 19;
    const Ka = 256;
    const Va = 18;
    const Xa = 9;
    const Za = 17;
    const $a = Qk;
    const Fq = 3;
    pq = xa;
    Lo = $o = xa + (_o += go = bo);
    bo = _o + go;
    wq = To = wo = xa + _o;
    pq = xa + _o;
    xq = wo;
    const Gq = 18;
    const Hq = 255;
    const Iq = 14;
    const Jq = 17;
    const Kq = 4;
    rq = xa + _o;
    const Lq = wj;
    sa = Do = To;
    const Mq = 13;
    _o = oa = xa;
    fa = wo;
    Aa = To;
    const Nq = 14;
    const Oq = 2;
    const Pq = 255;
    go = pq;
    var Qq = aj.devicePixelRatio || 1;
    const Rq = 16;
    var Sq = Wn.ΔᐃⲆΔΔΔΔᐃᐃ || Wn.ⵠⵠⲆⵠᐃᐃᐃᐃΔ || Wn.ᐃᐃⲆⲆΔᐃΔᐃⲆ || Wn.ᐃΔⲆⵠⵠⲆΔⵠᐃ || Wn.ΔⲆⲆΔⲆΔᐃⵠⲆ || 1;
    const Tq = 100;
    const Uq = oi;
    const Vq = 12;
    function Wq() {
        if (jn.width != aj.innerWidth) {
            jn.width = aj.innerWidth;
            On = jn.width;
            gq = jn.width / 2;
        }
        if (aj.innerHeight != jn.height) {
            jn.height = aj.innerHeight;
            Hn = jn.height;
            hq = jn.height / 2;
        }
        iq = {
            x: gq,
            y: hq
        };
        var a = jn.width;
        var b = jn.height;
        kq = ao === -1 ? Qq / Sq : ao;
        jn.width = kq * a;
        jn.height = kq * b;
        jn.style.width = a + "px";
        jn.style.height = b + "px";
        Wn.scale(kq, kq);
        if (Tw) {
            Tw.ⲆⲆⵠ.ⲆⵠⲆΔᐃⵠⲆ = a;
            Tw.ⲆⲆⵠ.ⲆⵠⵠᐃⲆⲆⵠ = b;
        }
        if (Yw.ᐃⲆⲆⲆⵠ) {
            Yw.ⵠⵠΔ();
        } else if (df.ᐃⲆⲆⲆⵠ) {
            df.ⵠⵠΔ();
        } else if (Vw.ᐃⲆⲆⲆⵠ) {
            Vw.ⵠⵠΔ();
        } else if (Uw.ᐃⲆⲆⲆⵠ) {
            Uw.ⵠⵠΔ();
        }
    }
    var Xq = document.getElementById("game_body");
    Xq.ondragstart = function () {
        return Qj;
    };
    const Yq = 1;
    Xq.ondrop = function () {
        return Xi;
    };
    const Zq = 18;
    function $q(a, b, c, d) {
        Ii($v, a, b, c, d);
        return ((144 + (ww(Zv[0], Zv[1], Zv[2], Zv[3], Zv[0], Zv[1]) ^ ww(Zv[2], Zv[3], Zv[0], Zv[1], Zv[2], Zv[3]))) * 8121 + 28411) % 134456;
    }
    Xq.onresize = Wq;
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !aj.requestAnimationFrame; ++c) {
            aj.requestAnimationFrame = aj[a[c] + "RequestAnimationFrame"];
            aj.cancelAnimationFrame = aj[a[c] + "CancelAnimationFrame"] || aj[a[c] + "CancelRequestAnimationFrame"];
        }
        aj.requestAnimationFrame ||= function (c, d) {
            var e = new Date().getTime();
            var f = Math.max(0, 16 - (e - b));
            var a = aj.setTimeout(function () {
                c(e + f);
            }, f);
            b = e + f;
            return a;
        };
        aj.cancelAnimationFrame ||= function (a) {
            clearTimeout(a);
        };
    })();
    const _q = Tk;
    const ar = 5;
    const cr = Xi;
    function dr(a, b) {
        const c = a ^ 3925;
        const d = ((37231 + b) * 1664525 + 1013904223) % 4294967296;
        return ((9785 + (sc(c, d, c) ^ sc(d, c, d))) * 214013 + 2531011) % 4294967296;
    }
    function er(b, c, d) {
        const e = (24 << (b & 255)) + (0 << (b >> 8 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 24 & 255));
        const f = ~(c & 46213) & c | ~(c & 46213) & 46213;
        const g = ((23063 + d) * 2147483629 + 2147483587) % 2147483647;
        return (2531011 + (18797 + (vc(e, f, g, e) ^ function (b, c, d) {
            const e = (1013904223 + (44671 + b) * 1664525) % 4294967296;
            const f = (2531011 + (c + 24015) * 214013) % 4294967296;
            const g = ((d + 62620) * 214013 + 2531011) % 4294967296;
            const a = wr(e, f);
            const h = vr(g, e, f, g);
            return (24 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255));
        }(f, g, e))) * 214013) % 4294967296;
    }
    const fr = 0;
    var gr = navigator.language || navigator.userLanguage;
    const hr = 1;
    var ir = -new Date().getTimezoneOffset() / 60;
    const kr = 19;
    var lr = "Europe";
    const mr = 6;
    const nr = 0;
    var or = "South America";
    const pr = eo;
    const rr = 256;
    const sr = 100;
    const jr = 17;
    var tr = lr;
    if (ir >= -2 && ir <= 2) {
        tr = lr;
    } else if (ir > 2 && ir <= 5) {
        tr = "Russia";
    } else if (ir > 5 && ir <= 9) {
        tr = "Asia";
    } else if (ir > 9) {
        tr = "Australia";
    } else if (ir >= -5 && ir < -2) {
        tr = gr === "pt-BR" || gr === "pt-br" || gr === "pt" || gr === "pt-pt" ? or : "North America";
    } else if (ir < -5) {
        tr = gr === "pt-BR" || gr === "pt-br" || gr === "pt" || gr === "pt-pt" ? or : "West America";
    }
    const ur = 20;
    function vr(b, c, d, e) {
        const f = b ^ 14581;
        const g = (c | 42461) & ~(c & 42461);
        const a = (16 << (d >> 8 & 255)) + (24 << (d >> 24 & 255)) + (0 << (d >> 16 & 255)) + (8 << (d & 255));
        const i = ((35256 + e) * 1664525 + 1013904223) % 4294967296;
        const j = Ns(f, g, a);
        Qr(i, f, g, a);
        return ~(j & 32233) & 32233 | ~(j & 32233) & j;
    }
    function wr(a, b) {
        const c = ~(a & 29003) & (a | 29003);
        const d = ((b + 55660) * 1103515245 + 12345) % 2147483648;
        const e = Ns(c, d, c);
        (function (b, c, d) {
            const e = (2531011 + (b + 53097) * 214013) % 4294967296;
            const f = c ^ 55871;
            const g = (2531011 + (33883 + d) * 214013) % 4294967296;
            const a = vc(e, f, g, e);
            Qr(f, g, e, f);
        })(d, c, d);
        return (e | 25424) & ~(e & 25424);
    }
    function xr(b, c, d, e, f, g) {
        zi($v, b, c, d, e, f, g);
        const a = st(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
        const h = lc(Zv[5], Zv[0], Zv[1], Zv[2]);
        return (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) & 255));
    }
    const qr = 10;
    function yr(b, c, d, e) {
        const f = ~(b & 56577) & b | ~(b & 56577) & 56577;
        const g = ~(c & 8715) & (c | 8715);
        const a = ~(d & 22476) & d | ~(d & 22476) & 22476;
        const i = ~(e & 19905) & (e | 19905);
        const j = sc(f, g, a);
        const h = Or(i, f, g, a);
        return (16 << ((j ^ h) >> 24 & 255)) + (0 << ((j ^ h) >> 16 & 255)) + (8 << ((j ^ h) >> 8 & 255)) + (24 << ((j ^ h) >> 0 & 255));
    }
    const zr = 19;
    const Ar = 6;
    const Cr = 9;
    function Dr(a, b, c, d, e) {
        Ve($v, a, b, c, d, e);
        return ((166 + (Nw(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4], Zv[0]) ^ Nw(Zv[1], Zv[2], Zv[3], Zv[4], Zv[0], Zv[1]))) * 16807 + 0) % 2147483647;
    }
    const Er = 11;
    const Fr = 8;
    const Gr = 0;
    const Hr = 17;
    var pk = {
        ΔⵠᐃⵠΔⲆⵠ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor((b - 1) * Math.random());
            this.Ⲇᐃⵠⵠⵠ = function (a) {
                c = a || Math.floor((b - 1) * Math.random());
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    var Ir = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    const Jr = xo;
    const Kr = Gn;
    const Mr = Qj;
    const Nr = 12;
    function Or(b, c, d, e) {
        const f = (1 + (b + 15798) * 22695477) % 4294967296;
        const g = (24 << (c >> 8 & 255)) + (16 << (c >> 24 & 255)) + (0 << (c & 255)) + (8 << (c >> 16 & 255));
        const a = (d | 22233) & ~(d & 22233);
        const i = ~(e & 61397) & 61397 | ~(e & 61397) & e;
        const j = lf(f, g, a, i);
        vc(f, g, a, i);
        return j ^ 60089;
    }
    function Pr(b, c, d, e, f, g) {
        Pj($v, b, c, d, e, f, g);
        return ((64 + (Xv(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4], Zv[5]) ^ function (a, b, c) {
            ci($v, a, b, c);
            const d = Xv(Zv[0], Zv[1], Zv[2], Zv[0], Zv[1], Zv[2]);
            const e = bt(Zv[0], Zv[1], Zv[2], Zv[0], Zv[1]);
            return (43432 + (d ^ e)) % 65470;
        }(Zv[0], Zv[1], Zv[2]))) * 75 + 74) % 65537;
    }
    function Qr(b, c, d, e) {
        const f = ~(b & 34622) & b | ~(b & 34622) & 34622;
        const g = ~(c & 40110) & 40110 | ~(c & 40110) & c;
        const a = ~(d & 47031) & (d | 47031);
        const h = e ^ 62219;
        return (2531011 + (37231 + (dr(f, g) ^ xf(a, h, f, g, a, h))) * 214013) % 4294967296;
    }
    const Rr = 14;
    var Sr = 0;
    const Tr = 12;
    var Ur = {
        ΔⵠⲆⲆᐃ: ["#133A2B", "#042b30"],
        ⲆⵠⲆΔⵠⵠΔⵠⲆ: ["#EBF2F0", "#136167"],
        ⵠΔⵠⲆΔΔᐃ: ["#4EB687", "#187484"],
        ⵠⲆᐃⵠⵠΔⵠ: ["#664516", "#13474C"],
        ᐃⲆⲆⲆΔΔΔ: ["#FCEFBB", "#0F4D48"],
        ⲆΔⵠⲆΔᐃᐃ: ["#C1AA7E", "#0F423D"],
        ⵠⵠⲆⵠⲆᐃΔ: ["#594837", "#163A3A"],
        ⲆᐃΔⵠΔⲆⵠ: ["#A5D6D6", "#539CA0"],
        ΔⵠⲆΔⵠ: ["#0B6A84", "#09373F"],
        ⵠⲆⲆⲆᐃⵠⲆ: ["#2A8B9B", "#0F464C"],
        ΔⲆⵠᐃΔΔⲆ: ["#A9D6D3", "#115E60"],
        ⲆᐃΔΔⵠⵠΔ: ["#ECF7F9", "#539CA0"],
        ᐃΔⵠΔΔⲆⲆ: ["#FFF", "#FFF"],
        ⵠᐃⲆⲆᐃᐃⲆ: ["#FFF", "#FFF"],
        ᐃⵠΔᐃⲆΔᐃ: ["#1C9BA4", "#00272F"],
        ΔⲆΔⵠⵠ: ["#2D2017", "#031C1E"],
        ⲆⲆΔ: 0,
        ⵠᐃⵠ: 1,
        ⲆᐃⵠⲆΔΔⲆⵠᐃ: 2300,
        ⲆᐃⵠⲆⲆⲆⲆᐃⲆ: 2290,
        ᐃⵠⲆⵠΔΔᐃ: 34,
        ⵠΔⵠⵠⵠᐃᐃ: 5,
        ⲆΔⲆⵠⲆⲆΔ: 68,
        ΔⲆΔᐃΔΔΔ: 34,
        ΔⵠⲆⵠⵠΔⵠ: 5,
        ᐃⲆΔⵠᐃⲆⵠ: 1,
        ΔⵠⵠⵠᐃⵠΔ: 0.6,
        ⵠᐃᐃⵠΔⲆΔ: 0.25,
        ⵠΔⵠᐃⵠΔᐃ: 50,
        ᐃⲆᐃΔⲆⵠᐃ: 10,
        ⲆⲆⲆⵠⲆⲆᐃ: 75,
        ⲆΔⵠⲆΔᐃΔ: 20,
        ᐃᐃΔⲆⵠⲆᐃ: 5,
        ΔⲆⲆΔⵠ: 0,
        ⵠᐃⵠⲆⲆ: 1,
        ΔⲆᐃⲆΔ: 2,
        ΔⵠΔΔᐃ: 3,
        ⵠᐃⲆⵠⲆ: 4,
        ⲆⵠᐃᐃΔ: 5,
        ⲆᐃⵠⲆⵠ: 6,
        ΔᐃⵠⲆⵠ: 7,
        ⲆᐃⲆⲆⲆ: 8,
        ⲆⲆΔᐃⵠ: 9,
        ⵠΔⲆⵠⵠ: 10,
        ᐃᐃᐃⲆⲆ: 11,
        ᐃᐃⵠΔΔ: 12,
        ᐃⲆΔⲆΔ: 13,
        ⵠΔΔΔᐃ: 14,
        ⵠᐃⲆⵠᐃ: 15,
        ⲆᐃⲆᐃᐃ: 16,
        ΔⲆⲆⲆⵠ: 17,
        ΔᐃⵠⲆᐃ: 18,
        ⵠⵠᐃᐃᐃ: 19,
        ⲆⲆΔΔΔ: 20,
        ⵠⲆⲆᐃΔ: 21,
        ⵠⲆⵠⵠᐃ: 22,
        ᐃⲆΔⵠⲆ: 23,
        ⲆΔΔⲆⵠ: 24,
        ⵠΔΔⵠΔ: 25,
        ΔⲆᐃⵠⵠ: 26,
        ΔΔᐃⲆⵠ: 27,
        ᐃᐃᐃⲆⵠ: 28,
        ΔⲆⲆⲆ: 29,
        ᐃᐃΔⲆⲆ: 30,
        Δᐃᐃᐃⵠ: 31,
        ΔⲆⲆΔⲆ: 32,
        ⵠⵠⲆΔⲆ: 33,
        Δⵠⵠⵠᐃ: 34,
        ΔⲆⲆΔᐃ: 35,
        ᐃᐃⵠⵠΔ: 36,
        ΔⵠᐃΔᐃ: 37,
        ᐃⲆⲆⵠⲆ: 38,
        ⲆⵠⲆⲆΔ: 39,
        ᐃΔᐃᐃⵠ: 40,
        ⲆⵠᐃⵠΔ: 41,
        ⵠᐃⲆᐃᐃ: 42,
        Ⲇᐃⵠⵠᐃ: 43,
        ⲆⵠΔᐃΔ: 44,
        ᐃΔⲆⲆᐃ: 45,
        ΔᐃΔΔⵠ: 46,
        ᐃΔΔⲆΔ: 47,
        ⵠⲆΔⲆⲆ: 48,
        ᐃⵠⲆⲆΔ: 49,
        ⲆᐃⲆΔⵠ: 50,
        ⵠⲆᐃⲆΔ: 51,
        ΔⵠΔᐃΔ: 52,
        ᐃⵠⵠⲆᐃ: 53,
        ᐃᐃΔᐃⵠ: 54,
        ΔᐃⲆΔⲆ: 55,
        ᐃᐃⵠΔᐃ: 56,
        ΔΔΔⲆⲆ: 57,
        ᐃⲆⵠᐃⵠ: 58,
        ⵠᐃΔⲆΔ: 59,
        ⲆΔⵠΔⲆ: 60,
        ᐃΔᐃᐃΔ: 61,
        ᐃΔⵠⵠΔ: 62,
        ⵠⲆⲆⲆⵠ: 63,
        ΔⵠᐃⲆⵠ: 64,
        ⵠⲆᐃᐃⲆ: 65,
        ⲆᐃᐃΔⲆ: 66,
        ᐃᐃΔᐃΔ: 67,
        ᐃⵠⲆⵠΔ: 68,
        ᐃⲆⲆΔⵠ: 69,
        ᐃⲆⵠⵠᐃ: 70,
        ΔⲆⵠⵠⵠ: 71,
        ΔⲆΔⲆⵠ: 72,
        ⵠⲆᐃᐃⵠ: 73,
        ⵠⵠⵠⵠΔ: 74,
        ⲆⵠΔⵠⵠ: 75,
        ⲆᐃⲆᐃΔ: 76,
        ⵠⵠⵠΔᐃ: 77,
        ⵠⵠᐃⲆⲆ: 78,
        ⵠⲆⵠΔⵠ: 79,
        ⵠⵠΔΔⲆ: 80,
        ⵠⵠᐃΔΔ: 81,
        ⲆⲆΔⲆᐃ: 82,
        ΔΔᐃⲆᐃ: 83,
        ᐃⵠᐃᐃⲆ: 84,
        ΔΔᐃΔΔ: 85,
        ᐃᐃΔΔⲆ: 86,
        ⵠᐃⲆⲆⵠ: 87,
        ᐃΔᐃΔⲆ: 88,
        ⵠΔⲆᐃⲆ: 89,
        ⲆⵠΔΔⵠ: 90,
        ΔΔⲆⵠᐃ: 91,
        ⲆΔΔⵠᐃ: 92,
        ᐃⲆⲆΔᐃ: 93,
        ᐃⵠⵠᐃⵠ: 94,
        ⵠᐃᐃᐃΔ: 95,
        ΔΔᐃᐃⲆ: 96,
        ⲆⵠᐃⲆⵠ: 97,
        ᐃᐃⵠⵠⵠ: 98,
        ⵠⵠⵠΔΔ: 99,
        ᐃⲆᐃΔⵠⲆⵠᐃΔ: 100,
        ΔΔⵠΔⵠ: 101,
        ᐃΔᐃΔΔ: 102,
        ⲆᐃᐃΔⵠ: 103,
        ⲆᐃΔΔΔ: 104,
        ⲆⲆⲆΔⵠ: 105,
        ᐃⲆΔⲆᐃ: 106,
        ᐃⵠΔⵠⵠ: 107,
        ΔⵠⵠᐃΔ: 108,
        ⵠᐃΔΔ: 109,
        ᐃᐃⲆⵠΔ: 110,
        ΔΔᐃⲆ: 111,
        ⲆᐃⲆⵠ: 112,
        ΔᐃᐃᐃⵠⲆⵠ: 113,
        ⲆⲆΔΔⵠ: 114,
        ΔᐃⵠᐃᐃΔᐃ: 115,
        ⵠⲆⲆᐃᐃ: 116,
        ᐃⵠΔΔⲆ: 117,
        ΔᐃΔⵠΔⲆⲆ: 118,
        ⲆⲆⲆⵠΔⵠⲆ: 119,
        ᐃⵠⲆᐃᐃ: 120,
        ⵠᐃⲆᐃ: 121,
        ΔᐃⵠⲆΔ: 122,
        ᐃⵠⵠᐃΔ: 123,
        ⲆⲆΔᐃΔⵠⵠ: 124,
        ⲆⲆⲆΔⲆ: 125,
        ΔΔΔΔⲆ: 126,
        ⵠⵠᐃΔᐃ: 127,
        ᐃⵠⲆΔⲆ: 128,
        ⵠᐃᐃⵠⲆ: 129,
        ᐃᐃⲆᐃΔ: 130,
        ᐃᐃⵠⲆⲆ: 131,
        ΔⵠⲆⲆⵠ: 132,
        ⲆⵠⲆⲆⲆ: 133,
        Ⲇⵠⵠⵠᐃ: 134,
        ⵠⵠΔΔⵠ: 135,
        ⵠᐃΔᐃⲆ: 136,
        ᐃⲆⵠΔⵠ: 137,
        ⲆΔΔⲆΔ: 138,
        ⵠᐃΔⲆⲆ: 139,
        ΔⵠᐃⵠⲆΔΔ: 140,
        ⲆⵠⲆΔⵠ: 141,
        ⲆΔⵠΔᐃᐃⲆ: 142,
        ΔᐃΔΔΔⵠⲆ: 143,
        ⲆⵠⲆⲆΔᐃⲆ: 144,
        ⵠᐃⲆⲆⵠᐃΔ: 145,
        ΔΔⲆᐃⵠ: 146,
        ⲆⲆⲆᐃⲆ: 147,
        ΔΔᐃΔᐃ: 148,
        ⵠΔᐃΔᐃ: 149,
        Ⲇᐃᐃᐃⵠ: 150,
        ΔⲆⲆⵠⲆ: 151,
        ⵠᐃⵠΔⵠ: 152,
        ⲆⲆⵠᐃⲆ: 153,
        ΔⵠΔᐃⵠ: 154,
        ⲆᐃᐃⲆᐃ: 155,
        ⵠᐃⵠΔⲆ: 156,
        ΔΔΔΔⵠ: 157,
        ΔΔᐃᐃΔ: 158,
        ᐃⲆⲆᐃⲆ: 159,
        ⲆⲆⵠⲆᐃ: 160,
        ⲆΔᐃⵠᐃ: 161,
        ᐃᐃᐃΔⲆ: 162,
        ⵠⲆⵠᐃⵠ: 163,
        ⲆⵠⵠⲆⲆ: 164,
        ⲆⲆⲆΔΔ: 165,
        ᐃⲆΔᐃΔᐃΔ: 166,
        ΔᐃΔᐃΔ: 167,
        ⵠⲆΔⲆΔ: 168,
        Δⵠᐃⵠⵠ: 169,
        ⵠⲆᐃⵠⲆ: 170,
        ΔᐃⲆΔᐃⵠΔ: 171,
        ⵠⲆΔᐃⲆⲆⵠ: 172,
        ⵠⵠΔᐃΔᐃⵠ: 173,
        ᐃⵠⵠᐃᐃ: 174,
        ⵠΔΔΔⲆΔⵠ: 175,
        ⲆᐃⵠΔᐃⲆᐃ: 176,
        ΔᐃⲆΔⲆⵠΔ: 177,
        ΔᐃⵠⵠᐃⲆᐃ: 178,
        ⵠᐃΔΔⲆΔⲆ: 179,
        ΔⵠΔⲆⵠⵠΔ: 180,
        ᐃⵠᐃΔΔΔΔ: 181,
        ᐃΔⲆᐃΔΔⲆ: 182,
        Ⲇᐃⵠᐃᐃ: 183,
        ⲆⲆΔⲆⵠ: 184,
        ⲆᐃⲆⲆⵠ: 185,
        ⲆΔⲆΔᐃ: 186,
        ΔⲆᐃᐃᐃ: 187,
        ΔᐃΔᐃᐃᐃᐃ: 188,
        ⲆⵠΔⲆⵠ: 189,
        ⲆⵠΔᐃⵠ: 190,
        ΔⵠⲆΔΔΔⵠ: 191,
        ΔⲆᐃⲆᐃ: 192,
        ⵠⲆΔᐃᐃⲆⲆ: 193,
        ΔⲆΔΔⲆ: 194,
        ΔΔᐃΔⲆ: 195,
        ⵠⵠⵠⲆᐃΔⵠ: 196,
        ⲆⵠᐃΔⲆΔᐃ: 197,
        ⵠⲆΔΔⵠ: 198,
        ᐃⲆᐃⲆⲆ: 199,
        ⲆⲆⲆⵠⵠΔΔ: 200,
        ⲆΔⵠᐃΔ: 201,
        ⵠⲆΔᐃ: 202,
        ΔΔΔⲆΔ: 203,
        ⲆΔⲆⵠⵠΔⵠ: 204,
        ᐃⵠΔⵠᐃ: 205,
        ⲆΔΔⵠᐃΔΔ: 206,
        ᐃᐃⲆΔⲆ: 207,
        ᐃᐃⲆΔᐃⵠᐃ: 208,
        ᐃᐃⵠⲆΔ: 209,
        ΔⵠΔⵠⵠⵠⵠ: 210,
        ⵠΔᐃΔᐃΔΔ: 211,
        ⵠΔΔⲆΔ: 212,
        ᐃⲆⲆⵠΔ: 213,
        ⵠΔⵠΔΔ: 214,
        ⵠᐃᐃΔᐃ: 215,
        ᐃΔᐃⲆΔ: 216,
        ᐃⲆⵠⵠⵠ: 217,
        ⲆⲆⲆⲆⵠ: 218,
        ᐃⲆⵠⵠΔ: 219,
        ⵠΔᐃΔⲆ: 220,
        ⲆⵠᐃΔⵠ: 221,
        ⲆⲆΔⲆⲆ: 222,
        ᐃⲆᐃΔⵠ: 223,
        Ⲇⵠᐃᐃⵠ: 224,
        ⲆⲆⵠᐃⲆⵠⲆ: 225,
        ΔᐃᐃⲆⲆⵠᐃ: 226,
        ᐃΔΔⵠΔ: 227,
        ΔΔΔᐃᐃᐃⲆ: 228,
        ⲆΔⵠⲆⵠ: 229,
        ⲆⲆᐃΔⲆ: 230,
        ⵠᐃΔⵠᐃ: 231,
        ΔⵠⵠΔᐃ: 232,
        ΔΔΔⲆⵠ: 233,
        ⵠᐃᐃᐃⵠⲆΔ: 234,
        ⲆΔⲆⵠᐃ: 235,
        ᐃΔᐃⲆⲆ: 236,
        ⵠᐃⵠⵠⲆ: 237,
        ⵠΔⲆⲆⲆ: 238,
        ⲆΔⲆᐃΔ: 239,
        ⵠⲆⲆⵠᐃ: 240,
        ᐃⲆᐃⵠⲆ: 241,
        ⵠⲆΔⵠⵠ: 242,
        ⲆᐃⲆⲆᐃΔᐃ: 243,
        ᐃⲆⲆⵠᐃ: 244,
        ⵠⲆᐃⲆⵠ: 245,
        ⵠΔᐃⵠⵠΔⵠ: 246,
        ΔᐃⲆⵠⲆ: 247,
        ⲆᐃᐃⲆⲆ: 248,
        ᐃᐃΔⲆⲆⲆⵠ: 249,
        ΔⵠⵠⲆⲆ: 250,
        ᐃⲆⲆΔⲆ: 251,
        ᐃⵠⲆⲆΔⵠᐃ: 252,
        ᐃᐃᐃⲆⵠΔⵠ: 253,
        ⵠⵠᐃⲆⵠⲆΔ: 254,
        ᐃⵠᐃⲆⲆⲆⵠ: 255,
        ΔⲆΔᐃΔⵠΔ: 256,
        ⲆΔᐃⵠⵠⵠΔ: 257,
        ᐃⲆΔⵠΔⲆⵠ: 258,
        ⵠΔⵠⵠΔⲆⲆ: 259,
        ⵠⲆΔⲆᐃ: 260,
        ᐃⵠⲆᐃᐃⵠΔ: 261,
        ΔⵠⵠⲆⲆᐃⵠ: 262,
        ΔⲆΔΔᐃΔⲆ: 263,
        ΔⲆᐃⵠΔ: 264,
        ᐃⵠᐃⵠΔᐃⵠ: 265,
        ⵠⲆᐃⵠΔⵠᐃ: 266,
        ⵠⲆⲆΔΔⵠΔ: 267,
        ⲆⵠΔᐃΔΔΔ: 268,
        ΔⲆᐃⵠⵠⵠΔ: 269,
        ᐃⵠᐃΔⵠⵠⲆ: 270,
        ΔΔⲆⲆⲆⵠⵠ: 271,
        ⵠΔⵠᐃᐃΔΔ: 272,
        ᐃⲆⲆⲆⵠᐃⲆ: 273,
        ⲆⲆⵠΔⵠⲆⵠ: 274,
        ᐃⲆᐃⵠΔⲆⲆ: 275,
        ⵠᐃⵠⵠᐃΔᐃ: 276,
        ΔⲆⲆⲆᐃᐃⲆ: 277,
        ⲆⵠΔⲆΔⲆⵠ: 278,
        ᐃᐃⵠⲆ: 279,
        ⵠΔᐃᐃⲆ: 280,
        ΔΔⲆΔΔΔΔ: 281,
        ΔΔⵠⵠΔⵠⲆ: 282,
        ᐃⵠ: 283,
        ᐃΔⲆΔⵠᐃⲆ: 284,
        ⵠᐃⲆⵠΔ: 285,
        ⲆⵠⲆⵠⲆ: 286,
        ⲆⲆΔᐃⵠⵠΔ: 287,
        ⵠΔᐃᐃⵠ: 288,
        ⵠᐃΔⵠΔⵠⲆ: 289,
        ⵠⲆⵠᐃⵠⵠΔ: 290,
        ᐃⵠⲆΔΔΔΔ: 291,
        ⵠΔΔⲆⲆᐃⵠ: 292,
        ᐃⲆⵠᐃᐃⵠⲆ: 293,
        ΔⵠᐃⲆΔ: 294,
        ⵠⲆᐃᐃᐃⲆΔ: 295,
        ⵠΔᐃⵠⵠᐃΔ: 296,
        ⵠΔᐃᐃᐃΔⲆ: 297,
        ⵠᐃⲆⲆᐃᐃΔ: 298,
        ᐃΔⲆᐃΔ: 299,
        ⲆⲆΔᐃᐃⲆΔ: 300,
        ΔⵠΔᐃᐃΔⲆ: 301,
        ᐃⵠⲆⲆⵠⵠⲆ: 302,
        ⲆΔⲆΔΔᐃⲆ: 303,
        ΔⲆᐃⵠⲆⵠⲆ: 304,
        ⵠᐃⵠᐃⵠΔⲆ: 305,
        ΔⲆᐃⵠⲆⵠᐃ: 306,
        ΔᐃⵠⲆⲆ: 307,
        ⲆΔΔΔΔᐃΔ: 308,
        ⵠᐃΔΔⵠᐃᐃ: 309,
        ΔΔΔᐃᐃΔⵠ: 310,
        ⲆⵠⲆᐃΔⲆᐃ: 311,
        ⲆΔΔΔⲆᐃᐃ: 312,
        ⲆΔᐃΔΔᐃΔ: 313,
        ⵠΔᐃΔᐃⲆΔ: 314,
        ⵠᐃⲆᐃⵠᐃΔ: 315,
        ⵠᐃΔΔⲆΔΔ: 316,
        ΔᐃⵠᐃΔᐃⲆ: 317,
        ⵠΔⵠᐃⲆᐃⵠ: 318,
        ᐃⲆΔᐃᐃΔⲆ: 319,
        ᐃⲆⵠⵠᐃⲆⲆ: 320,
        ΔᐃⵠᐃΔ: 321,
        ΔΔⲆⲆΔⲆⵠ: 322,
        ⵠΔᐃⲆⲆᐃᐃ: 323,
        ⲆΔⵠⵠⲆΔⵠ: 324,
        ᐃⲆⲆⵠⲆΔᐃ: 325,
        ⲆⵠⵠΔⲆΔΔ: 326,
        ⲆⲆᐃΔⲆⵠᐃ: 327,
        ΔΔΔᐃⲆⲆⲆ: 328,
        ⲆΔⲆΔᐃΔΔ: 329,
        ⵠΔΔΔⵠᐃⵠ: 330,
        ⵠΔⲆᐃΔᐃⲆ: 331,
        ᐃᐃⲆᐃΔᐃⵠ: 332,
        ᐃΔⲆΔⵠⲆⲆ: 333,
        ⵠΔⵠᐃⵠⵠⵠ: 334,
        ΔᐃᐃΔⵠⲆⵠ: 335,
        ΔΔᐃⵠⵠᐃⵠ: 336,
        ᐃⵠⲆᐃᐃᐃⲆ: 337,
        ΔⲆᐃⲆⲆΔΔ: 338,
        ΔΔⲆᐃᐃⲆⵠ: 339,
        ᐃΔⵠᐃⲆΔΔ: 340,
        ⲆΔⲆΔᐃᐃⲆ: 341,
        ⲆⲆΔᐃΔΔⲆ: 342,
        ᐃΔᐃⲆᐃⵠᐃ: 343,
        ΔⲆᐃΔᐃⲆⵠ: 344,
        ⵠΔᐃⲆΔᐃᐃ: 345,
        ᐃⵠⲆᐃΔⲆⵠ: 346,
        ᐃⵠᐃⲆΔΔᐃⵠⵠ: 347,
        ⵠᐃΔⵠᐃⲆⵠ: 348,
        ᐃⵠⵠⲆⵠⵠⵠ: 349,
        ΔⵠⵠⲆⲆⲆᐃ: 350,
        ⵠΔⲆⲆⲆⵠᐃ: 351,
        ΔⵠⲆⲆᐃⵠⲆ: 352,
        ⲆᐃᐃⵠᐃⵠⲆ: 353,
        ΔⵠΔᐃⲆⵠⵠ: 354,
        ᐃⲆⵠⵠⲆⲆⲆ: 355,
        Δⵠⵠᐃⵠⵠᐃ: 356,
        ⲆⲆⲆΔⲆᐃⵠ: 357,
        ᐃⲆⲆᐃΔᐃᐃ: 358,
        ⵠⵠⵠΔᐃⲆᐃ: 359,
        ΔᐃⵠⲆⲆⲆΔ: 360,
        ⵠⲆᐃⲆⵠⵠᐃ: 361,
        ΔⲆᐃᐃⲆⲆⵠ: 362,
        ᐃⵠΔⵠΔΔΔ: 363,
        ᐃⲆⵠⵠⲆᐃⲆ: 364,
        ΔΔᐃᐃΔⵠᐃ: 365,
        ᐃᐃⲆⲆⵠⲆⵠ: 366,
        ⲆⵠΔΔᐃΔΔ: 367,
        ⲆᐃⲆⲆⲆΔⲆ: 368,
        ⵠΔΔⵠᐃᐃΔ: 369,
        ⵠᐃⲆⵠⲆⵠⵠ: 370,
        ᐃΔⲆⵠᐃΔⵠ: 371,
        ᐃⵠᐃᐃⲆᐃⵠ: 372,
        ᐃⵠᐃⲆⲆΔΔ: 373,
        ᐃΔᐃⲆⲆᐃⵠ: 374,
        ⵠⵠⵠᐃΔⲆⵠ: 375,
        ΔⲆⲆⲆⵠⲆΔ: 376,
        ⲆⲆΔⲆΔΔΔ: 377,
        ΔᐃΔΔⵠⵠⲆ: 378,
        ᐃΔΔΔΔⲆⵠ: 379,
        ⵠⵠⲆᐃΔⲆⵠ: 380,
        ᐃⵠⲆᐃΔⲆᐃ: 381,
        ⲆᐃᐃΔᐃⲆΔ: 382,
        ᐃⵠΔⲆⲆΔⲆ: 383,
        ⲆΔΔⲆΔⲆⵠ: 384,
        ⵠⲆΔⲆⲆᐃᐃ: 385,
        ⵠᐃⵠⲆⲆΔΔ: 386,
        ⵠΔᐃⵠⲆᐃᐃ: 387,
        ⲆᐃΔⵠⲆΔΔ: 388,
        ᐃΔⲆⲆᐃⲆᐃ: 389,
        ᐃᐃΔΔᐃⵠⲆ: 390,
        ⲆⲆⲆᐃᐃⲆⲆ: 391,
        ᐃⲆᐃΔΔΔᐃ: 392,
        ᐃⵠⵠⲆᐃΔᐃ: 393,
        ⲆⲆⲆⲆᐃΔᐃ: 394,
        ⵠΔⵠⵠⵠⲆⵠ: 395,
        ᐃⲆᐃΔΔᐃⲆ: 396,
        ⲆⵠᐃΔΔᐃΔ: 397,
        ᐃΔⲆΔⲆⲆⲆ: 398,
        Δⵠⵠᐃᐃᐃⵠ: 399,
        ⵠΔᐃΔⵠΔΔ: 400,
        ΔⲆᐃⲆᐃⲆᐃ: 401,
        ⵠΔᐃΔΔΔⲆ: 402,
        ⲆΔᐃⲆⵠⲆⵠ: 403,
        ⵠᐃⲆᐃΔⲆⵠ: 404,
        ᐃⲆᐃⲆᐃⵠᐃ: 405,
        ᐃΔⵠⵠᐃⵠⲆ: 406,
        ⵠᐃΔⲆⵠⲆⲆ: 407,
        ⵠⲆᐃΔΔⵠᐃ: 408,
        ⵠⵠᐃΔΔᐃΔ: 409,
        ᐃⵠᐃⵠⵠΔᐃ: 410,
        ᐃᐃⵠⲆᐃⲆΔ: 411,
        ⵠΔΔⲆᐃⲆᐃ: 412,
        ᐃⵠΔᐃᐃ: 413,
        ⵠⲆⲆⵠΔⵠⵠΔⲆ: 414,
        ⵠΔᐃⲆⵠ: 415,
        ΔᐃΔⵠⵠ: 416,
        ᐃⵠⲆΔᐃᐃⲆᐃΔ: 417,
        ΔΔᐃΔⲆⵠᐃ: 418,
        ⲆᐃⲆⵠⵠ: 419,
        ᐃᐃᐃΔᐃⵠΔ: 420,
        ⲆΔⲆᐃᐃΔⲆ: 421,
        ⲆⵠΔⲆΔᐃⲆ: 422,
        ⲆⲆⲆⲆⲆⵠⲆ: 423,
        ⵠΔⲆⵠⵠΔΔ: 424,
        ᐃⵠⲆⵠΔΔⵠ: 425,
        ΔⵠⲆⵠΔⵠΔ: 426,
        ⲆⵠⲆⵠⲆⵠⲆ: 427,
        ⵠΔΔΔᐃΔⵠ: 428,
        ᐃΔΔᐃᐃᐃⲆ: 429,
        ⲆᐃⵠⵠΔΔΔ: 430,
        ⲆᐃⵠΔΔΔⵠ: 431,
        ⲆⲆⵠᐃⲆⵠⵠ: 432,
        ΔΔΔΔⵠΔᐃ: 433,
        ΔΔΔΔᐃⲆⲆ: 434,
        ᐃΔⲆⵠⵠⵠⲆ: 435,
        ⵠᐃᐃⵠᐃⲆⵠ: 436,
        ΔᐃΔᐃΔᐃⲆ: 437,
        ᐃᐃⵠΔⲆⵠⵠ: 438,
        ⵠᐃⵠⵠᐃⲆΔ: 439,
        ᐃⲆΔⵠⵠᐃᐃ: 440,
        ⵠᐃⵠΔⵠⲆΔ: 441,
        ᐃⲆᐃᐃⵠⲆᐃ: 442,
        ᐃⲆᐃⵠᐃⵠΔ: 443,
        ᐃⵠⵠΔⲆᐃⵠΔⵠ: 444,
        ᐃⵠᐃᐃΔ: 445,
        ⵠⲆΔΔΔⵠᐃ: 446,
        ⵠⵠᐃᐃⲆᐃᐃ: 447,
        ⲆⲆᐃΔΔᐃᐃΔΔ: 448,
        ⲆⵠᐃⲆⲆ: 449,
        ⵠⵠⵠⲆⵠ: 450,
        ΔⵠΔᐃⵠΔⵠ: 451,
        ⲆΔᐃΔΔⵠⲆ: 452,
        ΔᐃⲆⲆⲆΔᐃ: 453,
        ⲆⵠⵠᐃⲆΔⵠ: 454,
        ⵠᐃⵠΔᐃΔᐃ: 455,
        ⵠⲆⵠΔⵠΔᐃ: 456,
        ⵠᐃⲆΔⵠΔⲆ: 457,
        ⲆⲆᐃⵠⲆⲆΔ: 458,
        ΔⲆᐃⲆᐃⲆⵠ: 459,
        ᐃΔⵠⵠᐃΔΔ: 460,
        ⵠⵠⵠⲆᐃⲆΔ: 461,
        ᐃᐃⲆⲆⲆⲆΔ: 462,
        ΔΔᐃⲆᐃⲆᐃ: 463,
        ⵠΔΔΔᐃᐃᐃ: 464,
        ⵠⵠᐃⵠΔᐃΔ: 465,
        ΔᐃⲆΔⲆᐃⲆ: 466,
        ⵠⵠⵠⵠΔⲆⲆ: 467,
        ᐃΔⲆᐃᐃᐃⲆ: 468,
        ⵠⲆⲆⲆⲆᐃⵠ: 469,
        ΔΔⵠⲆⲆᐃΔ: 470,
        ⲆⲆᐃᐃΔⵠᐃ: 471,
        ⲆᐃΔⲆⵠᐃⵠ: 472,
        ⲆⵠᐃⲆⵠᐃᐃ: 473,
        ⵠᐃⲆΔⲆΔΔ: 474,
        ⲆΔⵠΔᐃⲆΔ: 475,
        ΔⵠⲆⲆⲆⲆΔ: 476,
        ⲆᐃⲆⵠⵠΔΔ: 477,
        ΔᐃⲆⲆⵠⲆⵠ: 478,
        ⲆⲆⲆΔᐃⲆⵠ: 479,
        ΔᐃⲆΔᐃⲆⲆ: 480,
        ΔᐃΔⲆΔᐃⲆ: 481,
        ⵠⵠΔⲆΔΔⵠ: 482,
        ΔΔΔⵠⲆΔⵠ: 483,
        ᐃⲆΔⲆΔΔⲆ: 484,
        ⵠⲆⲆᐃⲆΔⵠ: 485,
        ΔᐃⲆᐃᐃΔⵠ: 486,
        ΔⲆΔⵠⵠᐃⲆ: 487,
        ᐃΔⲆⲆᐃᐃⲆ: 488,
        ⲆⵠΔⵠᐃⵠΔ: 489,
        ΔⲆⲆᐃᐃⵠΔ: 490,
        ⲆᐃⵠⲆⵠΔᐃ: 491,
        ⲆΔᐃⲆᐃⵠΔ: 492,
        ⲆᐃⲆⲆⵠⲆⲆ: 493,
        ⲆⲆⵠΔⵠⲆᐃ: 494,
        ᐃⵠΔΔⲆᐃΔ: 495,
        ᐃⵠⵠⵠⵠⵠΔ: 496,
        ⵠᐃᐃⵠⲆΔⵠ: 497,
        ⲆⲆⵠⵠⵠⵠⲆ: 498,
        ΔⲆⵠΔⲆᐃΔ: 499,
        ⲆΔᐃΔⲆΔᐃ: 500,
        ⵠⵠΔᐃΔⵠΔ: 501,
        ᐃⲆⵠⲆᐃⲆⵠ: 502,
        ᐃⵠⲆΔⲆⲆⲆ: 503,
        ΔΔⵠⲆΔⲆⵠ: 504,
        ΔⵠⵠⵠΔΔⵠ: 505,
        ΔΔᐃΔⲆⲆⲆ: 506,
        ⵠⵠᐃⵠΔᐃΔ: 507,
        ⲆᐃⲆⵠᐃΔⲆ: 508,
        ⵠΔΔᐃᐃⵠᐃ: 509,
        ᐃⲆΔⲆⲆⲆⵠ: 510,
        ᐃᐃΔΔⵠΔᐃ: 511,
        ⵠⲆΔⲆⵠⲆⲆ: 512,
        ᐃⲆᐃⲆΔᐃⲆ: 513,
        ⵠᐃⲆⵠᐃΔⵠ: 514,
        ⲆᐃΔᐃⲆᐃᐃ: 515,
        ᐃⲆᐃⵠᐃΔⲆ: 516,
        ⵠⵠΔⵠⲆΔΔ: 517,
        ᐃᐃⲆᐃᐃⵠⵠ: 518,
        ⵠⲆΔᐃⵠⵠⵠ: 519,
        ⵠᐃᐃⵠⵠⲆᐃ: 520,
        ᐃⵠⵠΔⵠⲆⲆ: 521,
        ᐃᐃᐃⲆⵠⵠᐃ: 522,
        ᐃᐃⲆⵠⲆᐃᐃ: 523,
        ΔᐃⵠⵠᐃⲆΔ: 524,
        ΔⵠⲆⵠᐃⵠⲆ: 525,
        ⵠΔᐃⲆⵠΔΔ: 526,
        ᐃⵠΔᐃᐃΔⲆ: 527,
        ᐃΔⲆⵠᐃⲆᐃ: 528,
        ᐃΔᐃⵠⲆΔΔ: 529,
        ⵠⵠΔΔΔᐃⲆ: 530,
        ᐃΔⵠⵠⲆⲆⲆ: 531,
        ΔⵠⵠᐃⵠΔⲆ: 532,
        ᐃⲆⵠⵠⵠⵠΔ: 533,
        ᐃΔⵠΔᐃⵠⲆ: 534,
        ᐃΔⵠⲆⲆⲆⵠ: 535,
        ΔᐃⲆΔᐃⵠⲆ: 536,
        ᐃⲆΔⵠⵠⵠⲆ: 537,
        ΔⵠⲆΔΔⲆⵠ: 538,
        ΔΔⲆⵠΔⵠᐃⵠΔ: 539,
        ⲆᐃⵠΔⵠⵠΔ: 540,
        ᐃᐃΔⵠⵠⵠΔ: 541,
        ⲆⲆΔⲆⲆΔⲆ: 542,
        ᐃᐃᐃΔΔⲆᐃ: 543,
        ⲆⵠⵠᐃⲆᐃⵠⲆᐃ: 544,
        POINTS: 545,
        ᐃᐃⲆⲆⵠⵠᐃ: 546,
        ⲆᐃⲆΔⲆⵠΔ: 547,
        ⲆⵠᐃᐃᐃⲆⵠ: 548,
        ⵠΔⵠⲆᐃᐃᐃ: 549,
        ⵠᐃⲆⵠΔᐃⵠ: 550,
        ⲆⲆᐃᐃⵠᐃⵠ: 551,
        ΔᐃΔΔⲆᐃᐃ: 552,
        ⲆᐃⲆᐃΔⵠΔ: 553,
        ⵠⲆⵠΔⲆⲆⲆ: 554,
        ⵠⲆᐃΔᐃⵠΔ: 555,
        ᐃΔⵠᐃᐃΔⲆ: 556,
        ΔᐃⲆⲆⵠⲆᐃ: 557,
        ⵠⵠⲆⵠⲆⵠⲆ: 558,
        ΔⵠⲆⲆΔⵠΔ: 559,
        ΔΔⵠⵠⲆⵠⲆ: 560,
        ⵠᐃⲆⵠⵠⲆΔ: 561,
        ΔᐃⵠᐃΔⵠⲆ: 562,
        ΔΔΔⵠⲆᐃΔ: 563,
        ⵠᐃᐃᐃⲆᐃᐃ: 564,
        ⲆΔⵠᐃⲆⲆⵠ: 565,
        ⵠⲆⲆⲆⲆᐃⲆ: 566,
        ⵠⵠΔⵠⵠⵠⲆ: 567,
        ᐃⲆⲆⲆⲆᐃΔ: 568,
        ⲆⵠᐃⵠⲆⲆⵠ: 569,
        ⵠΔΔⲆΔⵠⲆ: 570,
        ΔⲆᐃᐃΔᐃᐃ: 571,
        ΔⲆⲆΔᐃᐃⵠ: 572,
        ᐃⲆⲆΔⲆⲆⵠ: 573,
        ΔΔⵠⵠⵠⲆⲆ: 574,
        ΔΔⲆⵠᐃᐃΔ: 575,
        ΔⲆⲆⵠⲆΔⲆ: 576,
        ΔⵠⵠᐃⲆⵠᐃ: 577,
        ⲆΔᐃΔᐃⲆⲆ: 578,
        ⲆΔⲆⲆΔⵠᐃ: 579,
        ⲆΔⲆⲆⲆⵠΔ: 580,
        ⵠⲆⵠⵠⵠⵠⲆ: 581,
        ᐃᐃᐃⲆᐃⵠΔ: 582,
        ⵠΔⵠⲆⲆⲆⵠ: 583,
        ⲆⲆⵠᐃᐃⵠⲆ: 584,
        ⵠΔⵠⵠⲆⵠΔ: 585,
        ⲆⲆⲆⲆⲆΔⵠ: 586,
        ⵠⵠΔΔΔΔⵠ: 587,
        ⵠᐃⲆᐃⲆⲆⵠ: 588,
        ΔΔΔΔⵠⵠⲆ: 589,
        ΔΔⲆⲆΔⵠᐃ: 590,
        ⵠⵠⵠᐃⵠⲆᐃ: 591,
        ΔⵠⵠⲆⵠΔᐃ: 592,
        ᐃⵠⵠᐃⵠΔⲆΔⲆ: 593,
        ⵠⵠⲆⲆⵠᐃᐃ: 594,
        ⵠⲆⵠⵠⵠⲆⲆⲆΔ: 595,
        ⲆΔⵠᐃⲆᐃⲆ: 596,
        ⲆⲆᐃΔᐃᐃΔΔᐃ: 597,
        ⵠΔΔⲆᐃⵠⲆⵠⵠ: 598,
        ⵠⲆΔΔᐃᐃΔⲆⵠ: 599,
        ⲆⵠᐃⲆⲆⲆΔⵠⵠ: 600,
        ΔᐃᐃΔᐃᐃᐃᐃᐃ: 601,
        ᐃΔⲆᐃΔᐃⵠ: 602,
        Ⲇⵠⵠᐃᐃ: 603,
        ΔⲆΔⵠᐃᐃᐃ: 604,
        ΔᐃⲆᐃΔⵠⲆ: 605,
        ᐃΔΔⵠⲆⵠΔ: 606,
        ⲆⲆΔⲆⲆᐃᐃⲆⵠ: 607,
        Ⲇⵠᐃᐃⵠᐃᐃ: 608,
        ⲆᐃⵠⵠΔⲆΔ: 609,
        ⵠΔⲆΔᐃᐃΔ: 610,
        ⵠᐃⲆⵠᐃΔᐃ: 611,
        ᐃᐃⵠⲆΔΔΔ: 612,
        ⵠᐃΔⲆⲆᐃⵠ: 613,
        ⲆⲆᐃⲆΔⵠⵠ: 614,
        ⵠⵠⲆΔⵠᐃⲆ: 615,
        ⵠᐃᐃⲆⲆΔΔ: 616,
        ΔᐃΔᐃⵠᐃⵠ: 617,
        ΔΔⲆⲆⵠⵠⵠ: 618,
        ⵠⵠⲆΔᐃ: 619,
        Ⲇⵠⵠᐃⵠ: 620,
        ᐃΔΔΔⵠ: 621,
        ΔⲆΔΔᐃΔΔΔᐃ: 622,
        ⵠᐃᐃⲆΔⵠᐃ: 623,
        ΔᐃⵠΔᐃⵠᐃ: 624,
        ⲆⲆⲆᐃⲆᐃⲆ: 625,
        ⵠᐃⵠⵠᐃᐃⲆ: 626,
        ΔⲆⵠⲆⲆⲆⵠ: 627,
        ⵠΔᐃᐃᐃⵠⵠ: 628,
        ⲆⵠΔⵠΔⲆⲆ: 629,
        ᐃΔⲆΔΔᐃΔ: 630,
        ΔΔᐃΔΔᐃⵠ: 631,
        ⵠᐃΔⲆΔΔᐃ: 632,
        ⵠⲆⲆΔΔᐃⲆ: 633,
        ⵠΔΔⲆⲆΔⲆ: 634,
        ⵠⲆᐃᐃΔᐃΔ: 635,
        ΔᐃⵠⲆΔᐃⲆ: 636,
        ⲆΔᐃᐃΔ: 637,
        ΔⵠⲆΔᐃᐃᐃ: 638,
        ⲆᐃⵠⲆΔⲆΔ: 639,
        ⲆΔⲆⲆⲆᐃⲆ: 640,
        ⲆΔⲆᐃⲆⲆᐃ: 641,
        ᐃᐃΔⲆⲆΔⲆ: 642,
        ⲆΔⵠⲆΔΔⲆ: 643,
        ΔⲆΔᐃⵠⵠⵠ: 644,
        ⵠⵠⵠⲆᐃⲆᐃ: 645,
        ⵠⵠΔⲆⵠⵠⵠ: 646,
        ⵠⵠΔⵠⲆᐃⵠ: 647,
        ⲆⵠΔⵠⲆⵠⵠ: 648,
        ⲆᐃⲆΔⵠⲆⵠ: 649,
        ΔᐃⵠⲆᐃⵠⲆ: 650,
        ᐃᐃⵠⵠΔⲆⲆ: 651,
        ᐃΔΔⲆᐃⵠΔ: 652,
        ⵠΔᐃⲆⲆⲆⲆ: 653,
        ⲆⲆⲆⲆⵠⵠᐃ: 654,
        ᐃᐃⲆⲆⲆⵠᐃ: 655,
        ⲆΔⵠᐃΔⲆᐃ: 656,
        ⵠⲆⵠⵠⲆⲆⲆ: 657,
        ΔⵠⵠⲆⲆⲆⵠ: 658,
        ⲆⵠᐃⵠⵠⵠⲆ: 659,
        ᐃΔΔᐃⵠΔⲆ: 660,
        ΔⵠΔᐃⵠⲆΔ: 661,
        ΔᐃΔⵠⲆᐃΔ: 662,
        ⵠⵠⵠⲆⵠⲆᐃ: 663,
        ⵠΔᐃⵠΔᐃᐃ: 664,
        ΔᐃΔΔΔⵠΔ: 665,
        ᐃΔᐃᐃᐃⵠⲆ: 666,
        ΔᐃⵠᐃΔΔⲆ: 667,
        ⲆⲆⲆⲆΔⲆΔ: 668,
        ΔΔᐃᐃΔᐃΔ: 669,
        ΔᐃᐃΔⵠᐃⵠ: 670,
        ΔΔᐃΔⲆⵠⵠ: 671,
        ⵠᐃⵠⵠⵠⲆⲆ: 672,
        ⵠⲆΔΔⲆ: 673,
        ⵠᐃⵠᐃᐃⲆᐃ: 674,
        ⵠⲆΔΔⵠΔΔ: 675,
        ᐃⲆᐃⲆⵠ: 676,
        ᐃᐃⵠⲆΔⵠᐃΔᐃ: 677,
        ᐃⲆⲆⵠᐃⲆⲆ: 678,
        ᐃⵠⲆΔᐃ: 679,
        ΔΔᐃᐃΔᐃⵠ: 680,
        ⲆᐃⲆᐃⲆⲆΔ: 681,
        ΔⲆⲆᐃᐃΔᐃ: 682,
        ΔᐃⲆⲆΔᐃⲆ: 683,
        ⵠΔᐃⲆⲆⵠΔ: 684,
        ᐃⲆΔᐃΔⵠⲆ: 685,
        ⵠΔⲆⲆᐃΔᐃ: 686,
        ΔΔΔⲆⵠᐃᐃ: 687,
        ⵠⲆⲆᐃΔⵠⲆ: 688,
        ⵠᐃΔⵠᐃⵠΔ: 689,
        ⵠⵠⵠΔΔⵠΔ: 690,
        ᐃⲆΔᐃΔ: 691,
        ᐃᐃⵠᐃᐃ: 692,
        ⲆΔᐃⲆᐃ: 693,
        ᐃⲆⲆΔΔ: 694,
        ⲆⵠⵠⵠⲆ: 695,
        ⲆΔΔΔᐃΔᐃ: 696,
        ⲆᐃⲆᐃΔᐃⵠ: 697,
        ⲆΔⵠΔΔᐃⲆ: 698,
        ΔΔⵠᐃΔⲆΔ: 699,
        ⲆⲆΔⲆⵠΔⲆ: 700,
        ⵠΔΔᐃⲆⵠⵠ: 701,
        ΔΔΔⵠⵠᐃᐃ: 702,
        ⲆΔⵠᐃΔⲆⲆ: 703,
        ⲆⲆᐃⵠⵠΔᐃ: 704,
        ΔΔᐃⲆⵠⵠᐃ: 705,
        ⵠⲆᐃⲆⲆᐃΔ: 706,
        ⲆᐃΔⵠᐃᐃⲆ: 707,
        ᐃΔⲆΔⵠⲆⵠ: 708,
        ⵠΔᐃⲆⵠⵠⵠ: 709,
        ⵠⲆᐃⵠᐃⵠⵠ: 710,
        ΔᐃᐃⲆⲆᐃᐃ: 711,
        ΔⲆΔᐃᐃⵠΔ: 712,
        ᐃΔΔᐃⵠᐃⵠ: 713,
        ⲆⵠⲆᐃΔᐃⵠ: 714,
        ΔᐃⵠⲆΔⵠⲆ: 715,
        ΔᐃⲆⲆᐃᐃⵠ: 716,
        ⵠⲆᐃᐃΔⵠΔ: 717,
        ᐃⲆⵠΔⵠᐃᐃ: 718,
        ᐃᐃᐃⵠᐃⲆᐃ: 719,
        ᐃⵠΔᐃⲆΔⵠ: 720,
        ⲆΔⲆⵠΔⵠΔΔᐃ: 721,
        ⵠⵠᐃⵠⲆⲆᐃ: 722,
        ⲆᐃⲆⲆⵠⲆᐃ: 723,
        ΔⲆᐃⵠⵠᐃⲆ: 724,
        ΔᐃⲆⲆᐃᐃΔ: 725,
        ⲆΔᐃᐃⲆᐃΔ: 726,
        ᐃⵠⵠⵠⲆⲆᐃ: 727,
        ⲆΔⵠⲆⵠΔⵠ: 728,
        ⲆⵠⲆⲆᐃⲆΔ: 729,
        ⵠⲆⲆⵠᐃⲆΔ: 730,
        ᐃⵠⲆΔⲆⲆⵠ: 731,
        ⲆΔᐃⵠⲆⵠΔ: 732,
        ⲆᐃΔⲆᐃⲆⵠ: 733,
        ⲆⲆⵠΔΔⵠⵠ: 734,
        ΔΔⵠⲆⵠΔᐃ: 735,
        ⵠⲆᐃⲆᐃⲆⲆ: 736,
        ⲆⲆⵠⵠⲆΔⲆ: 737,
        ΔΔΔΔⵠΔⲆ: 738,
        ΔⲆΔⲆⲆΔⲆ: 739,
        ΔⵠᐃⲆΔⵠᐃ: 740,
        ⵠⲆⲆᐃᐃΔⲆ: 741,
        ⵠΔΔⲆΔⲆΔ: 742,
        ⵠᐃⲆᐃⵠⲆⵠ: 743,
        ⲆΔΔⵠⵠΔⵠ: 744,
        ⲆᐃⲆⲆᐃᐃΔ: 745,
        ⵠΔΔⲆᐃⵠᐃ: 746,
        ⲆⵠⲆⲆⲆⲆᐃ: 747,
        ⵠⵠⲆΔⲆⵠⲆ: 748,
        ⵠΔⵠⲆᐃⲆⵠ: 749,
        ᐃΔᐃᐃᐃⲆΔ: 750,
        ⵠⵠⲆⵠⲆΔΔ: 751,
        ⲆΔⲆᐃᐃⲆΔ: 752,
        ⲆΔΔⵠⲆⵠΔ: 753,
        ᐃⵠⵠᐃⲆΔΔ: 754,
        ⲆΔᐃΔᐃΔⲆ: 755,
        ⵠΔᐃᐃⵠⵠⲆ: 756,
        ᐃΔⲆⵠΔⵠⲆ: 757,
        ⵠᐃⵠΔᐃⵠⵠ: 758,
        ⵠΔΔᐃᐃΔⲆ: 759,
        ⵠᐃΔⵠⵠⵠⲆ: 760,
        ᐃΔᐃᐃⵠⲆⵠ: 761,
        ⲆⵠᐃⲆⵠⵠⵠ: 762,
        ΔⲆⲆΔΔᐃᐃ: 763,
        ᐃⵠⵠⵠⲆⵠᐃ: 764,
        ΔⵠΔⲆΔⵠⵠ: 765,
        ΔΔⵠΔᐃΔⵠ: 766,
        ⵠⲆᐃⵠⲆΔᐃ: 767,
        ⲆⵠΔⲆᐃᐃⵠ: 768,
        ⲆᐃⲆᐃⵠⲆⵠ: 769,
        ᐃᐃⲆΔΔᐃΔ: 770,
        ᐃⵠΔΔⵠⵠᐃ: 771,
        ΔᐃᐃⲆᐃᐃᐃ: 772,
        ΔⵠⵠᐃⲆⵠⵠ: 773,
        ⲆⲆⲆⵠᐃᐃΔ: 774,
        ⲆⲆⵠᐃⵠΔᐃ: 775,
        ⲆᐃⵠⲆⲆΔⵠ: 776,
        ᐃⵠΔⵠⵠⵠᐃ: 777,
        ᐃΔⵠΔⲆⲆΔ: 778,
        ᐃᐃΔⵠⵠᐃΔ: 779,
        ⵠⲆⲆᐃⵠⵠᐃ: 780,
        ᐃΔᐃΔⵠᐃΔ: 781,
        ⵠⵠⵠΔᐃⵠⵠ: 782,
        ΔⲆᐃᐃⵠⵠᐃ: 783,
        ⲆⵠⲆᐃᐃΔΔ: 784,
        ⲆᐃⵠⵠΔΔⵠ: 785,
        ᐃⵠⲆⵠⲆΔᐃ: 786,
        ᐃᐃⵠᐃᐃⲆⲆ: 787,
        ⲆΔᐃⲆΔⵠⲆ: 788,
        ⲆᐃⵠⲆⲆⵠⵠ: 789,
        ΔᐃⵠⲆᐃⲆᐃ: 790,
        ⲆⲆⵠⲆⲆⵠᐃ: 791,
        ΔⵠⵠΔᐃⲆⲆ: 792,
        ᐃⵠᐃΔᐃ: 793,
        ΔᐃⵠⵠΔⲆΔ: 794,
        ⲆⲆᐃΔⲆΔᐃ: 795,
        ⲆΔⵠᐃⵠ: 796,
        ΔᐃΔᐃᐃⲆΔ: 797,
        ⵠᐃⲆⲆΔΔᐃ: 798,
        ⲆⵠⵠⵠⲆᐃΔ: 799,
        ᐃᐃⲆΔΔⲆⵠ: 800,
        ⵠΔΔⵠΔΔΔ: 801,
        ΔΔᐃᐃᐃ: 802,
        ᐃΔᐃⲆⵠⵠⲆ: 803,
        ⵠΔᐃΔⲆⵠⵠᐃΔ: 804,
        ⵠⲆⵠⵠΔΔⵠⲆⵠ: 805,
        ΔᐃΔᐃᐃᐃᐃΔⵠ: 806,
        ⲆⵠᐃΔⲆⲆᐃⲆⲆ: 807,
        ᐃⵠⲆⲆΔⵠΔ: 808,
        ⵠᐃΔΔΔΔΔ: 809,
        ᐃᐃⲆΔΔᐃⲆ: 810,
        ⲆᐃᐃΔΔΔΔ: 811,
        ⵠΔᐃΔⵠᐃⵠ: 812,
        ⲆⵠⵠΔᐃΔⲆ: 813,
        ΔⲆⲆⵠⵠⵠᐃ: 814,
        ΔᐃᐃΔΔⵠⲆ: 815,
        ⵠᐃⵠⵠⲆⵠⲆ: 816,
        ΔⵠᐃⲆΔΔⲆ: 817,
        ᐃᐃΔΔᐃ: 818,
        ᐃⲆᐃⲆᐃ: 819,
        ⲆΔᐃᐃⲆΔⲆ: 820,
        ᐃΔⲆΔⵠΔΔ: 821,
        ΔΔΔⵠⲆᐃᐃ: 822,
        ⵠᐃⲆΔᐃⵠⵠ: 823,
        ⵠΔⲆⵠⵠᐃⵠ: 824,
        ΔⲆⲆⲆⲆⵠᐃ: 825,
        ᐃΔΔⲆⵠⲆΔ: 826,
        ⲆⲆᐃΔᐃⲆᐃ: 827,
        ᐃⵠⵠᐃⲆΔⵠ: 828,
        ᐃᐃΔⲆⵠⲆⲆ: 829,
        ΔΔΔΔᐃᐃΔ: 830,
        ᐃᐃⲆⲆᐃⲆΔ: 831,
        ⵠᐃⵠⲆᐃⵠⲆΔΔ: 832,
        ⵠⵠᐃⲆⵠⲆᐃΔⲆ: 833,
        ᐃᐃᐃⵠⲆΔΔ: 834,
        ΔΔΔⵠⵠᐃΔ: 835,
        ⲆⲆⲆⵠᐃⵠⵠ: 836,
        ᐃᐃΔⲆⲆⲆᐃ: 837,
        ⲆᐃⵠΔⲆᐃᐃ: 838,
        ΔΔΔᐃⵠᐃⵠ: 839,
        ⵠⲆⲆⲆΔⵠᐃ: 840,
        ⵠⲆΔⵠᐃᐃΔ: 841,
        ⵠᐃⵠΔⲆᐃᐃ: 842,
        ⵠᐃΔΔᐃⲆⵠ: 843,
        ᐃⲆΔⵠⵠᐃΔ: 844,
        ᐃᐃⵠⲆⲆΔⲆ: 845,
        ⲆΔᐃᐃΔⵠΔ: 846,
        ⵠᐃⵠΔᐃᐃⵠ: 847,
        ⲆⲆΔᐃⲆΔΔ: 848,
        ᐃⲆΔⲆΔⲆΔ: 849,
        ᐃⲆΔΔⲆΔΔ: 850,
        ⲆⵠᐃΔⵠᐃⵠ: 851,
        ᐃᐃⵠⲆΔⲆⲆΔⵠ: 852,
        ⵠᐃᐃᐃⲆΔᐃ: 853,
        ⲆⲆΔΔⲆ: 854,
        ᐃᐃⲆΔⵠⲆᐃΔⵠ: 855,
        ΔⲆᐃⵠᐃⵠΔⵠᐃ: 856,
        ᐃᐃΔΔΔΔⲆⲆⲆ: 857,
        ⵠᐃᐃΔⵠᐃⵠⲆⲆ: 858,
        ᐃΔΔⵠᐃⲆⲆ: 859,
        ᐃⲆⲆⵠⲆⲆᐃ: 860,
        ᐃΔΔΔΔΔⵠ: 861,
        ΔⵠᐃΔᐃΔⲆ: 862,
        ⲆⲆⵠⲆⲆΔᐃ: 863,
        ⵠᐃⲆⵠⲆᐃᐃᐃᐃ: 864,
        ᐃⲆⲆⵠⵠⲆᐃ: 865,
        ⵠΔⵠⵠⵠⵠᐃ: 866,
        ᐃⵠᐃΔⲆⲆᐃ: 867,
        ᐃᐃⲆᐃⵠⵠΔ: 868,
        ⲆⲆᐃΔⲆᐃⲆ: 869,
        ᐃⲆⲆⲆⵠᐃΔ: 870,
        ⲆᐃⲆᐃⲆⲆᐃ: 871,
        Δᐃⵠᐃᐃ: 872,
        ⵠΔΔⵠΔᐃᐃᐃⵠ: 873,
        ⵠⲆⵠΔᐃⵠᐃ: 874,
        ⲆᐃⵠᐃᐃᐃΔ: 875,
        ΔΔΔᐃⵠᐃⲆ: 876,
        ᐃᐃⲆᐃᐃᐃⵠ: 877,
        ΔⵠΔⲆⵠᐃⲆ: 878,
        Ⲇᐃⵠᐃᐃⵠⵠ: 879,
        ⲆⲆⵠΔᐃⲆⵠ: 880,
        ⵠⵠᐃⲆⲆΔⲆ: 881,
        ⵠⲆᐃΔΔᐃᐃ: 882,
        ⵠᐃⵠΔΔᐃᐃ: 883,
        ⵠⵠⵠⵠⵠⵠⲆ: 884,
        ⵠⲆⵠΔΔΔⲆ: 885,
        ⲆΔᐃⵠⲆᐃⵠ: 886,
        ⵠⵠᐃⲆΔ: 887,
        ΔⲆᐃⵠⵠⵠⵠ: 888,
        ΔⵠᐃⵠΔⲆⲆ: 889,
        ΔΔᐃΔᐃᐃΔ: 890,
        ⲆᐃⵠⲆᐃΔΔ: 891,
        ᐃⲆⲆᐃⵠⲆⵠ: 892,
        ᐃᐃⵠΔⲆⲆΔ: 893,
        ⲆⵠⲆᐃᐃⵠⲆ: 894,
        ⵠⲆⲆᐃΔΔⵠ: 895,
        ⵠᐃⵠⲆⵠⲆⵠ: 896,
        ⵠᐃᐃᐃᐃᐃⲆ: 897,
        ᐃᐃᐃᐃⲆⵠᐃ: 898,
        ᐃΔᐃΔᐃⲆⵠ: 899,
        ⵠⵠᐃⲆΔⲆΔ: 900,
        ⲆⲆᐃⵠᐃⵠⵠ: 901,
        ΔⵠⵠⲆΔⲆᐃ: 902,
        ⵠⵠᐃⲆΔΔΔ: 903,
        ᐃⵠᐃΔᐃⲆⲆ: 904,
        ᐃΔᐃⵠΔᐃᐃ: 905,
        ᐃᐃⵠΔᐃⵠᐃ: 906,
        Δⵠᐃᐃᐃⵠⵠ: 907,
        ᐃⲆΔⲆⲆⵠⲆ: 908,
        ᐃΔΔⲆⲆᐃⲆ: 909,
        ᐃⵠᐃᐃⲆΔⵠ: 910,
        ΔᐃⲆΔΔΔᐃ: 911,
        Δⵠᐃᐃᐃⵠᐃ: 912,
        ⵠⲆⵠᐃⲆⲆⵠ: 913,
        ΔΔⲆⵠᐃΔᐃᐃᐃ: 914,
        ⲆᐃΔᐃⵠᐃⲆᐃⵠ: 915,
        ΔΔᐃΔᐃⲆⵠⵠΔ: 916,
        ΔⲆΔⵠᐃⵠⵠⵠΔ: 917,
        ΔΔⲆΔⵠⵠⲆ: 918,
        ⲆΔⲆⵠⵠᐃⲆ: 919,
        ΔᐃΔΔΔ: 920,
        ᐃΔⵠᐃΔΔᐃ: 921,
        ΔᐃΔⵠᐃⲆΔ: 922,
        ΔⵠᐃΔΔⲆⵠ: 923,
        ΔᐃΔΔᐃΔⲆ: 924,
        ᐃⲆΔΔᐃᐃᐃ: 925,
        ⲆⲆᐃⲆⵠᐃⵠ: 926,
        ⲆΔⲆⲆᐃΔⵠ: 927,
        ⲆΔᐃⲆⲆΔⲆ: 928,
        ΔⲆΔⵠⵠⵠΔ: 929,
        ΔⵠⲆᐃΔⵠⵠ: 930,
        ⲆΔΔΔΔⵠⲆ: 931,
        ⵠΔⵠⲆΔⲆΔ: 932,
        ᐃⲆⵠᐃΔⲆᐃ: 933,
        ᐃΔᐃᐃⲆΔΔ: 934,
        ⲆⵠΔⵠΔⵠΔ: 935,
        ⵠΔᐃⵠⵠⲆⵠ: 936,
        ᐃᐃᐃⵠⲆⵠⵠ: 937,
        ⵠⲆⵠⲆⲆⵠᐃ: 938,
        ᐃΔΔΔⵠⲆⵠ: 939,
        ΔⲆⵠΔⵠⵠⵠΔⲆ: 940,
        Δⵠᐃᐃᐃ: 941,
        ⲆⲆΔΔⲆΔᐃ: 942,
        ᐃⲆⵠᐃⲆᐃΔ: 943,
        ΔᐃΔΔⲆΔⵠ: 944,
        ᐃᐃΔⵠⲆᐃⲆ: 945,
        ⲆΔⵠᐃⲆⵠⲆ: 946,
        ⵠᐃⲆΔⲆᐃᐃ: 947,
        ΔᐃΔⵠⲆⵠᐃ: 948,
        ⲆⲆΔᐃᐃⲆⲆ: 949,
        ⲆΔⵠⵠᐃⵠΔ: 950,
        ΔⵠΔⲆⲆΔⲆ: 951,
        ⲆⵠᐃᐃΔᐃⲆ: 952,
        ᐃⲆᐃΔⵠᐃⵠ: 953,
        ⵠᐃΔⲆⵠⵠΔ: 954,
        ⵠⵠⵠΔᐃᐃⵠ: 955,
        ⵠᐃⲆⵠⵠΔⲆ: 956,
        ⵠᐃᐃΔᐃⵠⵠ: 957,
        ΔⲆⵠΔⵠᐃᐃ: 958,
        ⵠⵠⲆΔⲆⵠᐃ: 959,
        ⲆⲆΔΔⲆΔⵠ: 960,
        ΔᐃᐃⲆΔⵠΔ: 961,
        ⵠⲆᐃΔⵠⲆⲆ: 962,
        ᐃᐃΔⵠᐃᐃⲆ: 963,
        ᐃⲆⲆⲆⵠΔΔΔⲆ: 964,
        ⲆⵠⲆⲆⵠⲆΔ: 965,
        ⲆⵠⵠⲆⲆΔΔ: 966,
        ᐃΔᐃⲆΔΔΔ: 967,
        ⲆⲆΔⵠᐃᐃΔ: 968,
        Ⲇᐃᐃⵠᐃⵠⵠ: 969,
        ΔΔⲆΔΔⲆⵠ: 970,
        ΔⵠΔⵠⲆⲆⵠ: 971,
        ΔΔΔΔΔⵠᐃ: 972,
        ⵠⵠΔᐃΔΔΔ: 973,
        ⲆⲆⵠᐃⵠⵠᐃ: 974,
        ᐃⲆⵠⲆⲆΔⵠ: 975,
        ⲆⲆᐃΔΔⵠⲆ: 976,
        ΔᐃᐃᐃⲆᐃᐃ: 977,
        ΔⲆΔΔⲆⲆⵠ: 978,
        ᐃΔᐃΔⲆᐃⲆ: 979,
        ⲆᐃⲆⲆᐃᐃⲆ: 980,
        ᐃⲆⵠⵠⵠⲆΔ: 981,
        ᐃΔΔΔⵠⲆᐃ: 982,
        ᐃΔΔⲆΔᐃⲆ: 983,
        ᐃΔⵠᐃⲆΔᐃ: 984,
        ΔΔⲆⵠᐃᐃⵠ: 985,
        ᐃⲆΔΔᐃΔΔ: 986,
        ΔⲆⵠᐃᐃⵠΔ: 987,
        ᐃΔⵠᐃⲆΔⵠ: 988,
        ⵠΔΔΔⲆ: 989,
        ⲆΔᐃᐃΔⵠⵠ: 990,
        ⵠⵠᐃᐃⵠᐃΔ: 991,
        ΔⲆᐃⲆⲆᐃΔ: 992,
        ᐃⵠᐃⲆⵠⲆⵠ: 993,
        ⲆᐃᐃⵠΔΔᐃ: 994,
        ⲆⵠΔᐃⵠᐃᐃ: 995,
        ⵠΔΔⵠⲆⲆⲆ: 996,
        ⵠⵠᐃΔᐃΔⲆ: 997,
        ΔⵠⲆᐃΔⲆᐃ: 998,
        ⲆᐃⲆΔⲆⲆᐃ: 999,
        ΔⲆᐃⵠⲆⵠⵠ: 1000,
        ΔΔⵠᐃⵠΔᐃ: 1001,
        ΔⲆⲆΔⲆΔⵠ: 1002,
        ᐃⵠⲆᐃΔⲆΔ: 1003,
        ⲆᐃΔⲆⵠΔⲆ: 1004,
        ⲆⲆⵠⵠᐃᐃᐃ: 1005,
        ᐃⵠⵠⵠΔᐃᐃ: 1006,
        ᐃΔⲆⲆᐃⵠⲆ: 1007,
        ᐃⵠⲆⵠⲆⲆⵠ: 1008,
        ᐃΔᐃⲆⵠᐃΔ: 1009,
        ⲆⵠᐃΔⵠⲆᐃ: 1010,
        ⵠⵠΔⲆⵠΔⲆ: 1011,
        ᐃᐃᐃⲆⵠᐃⵠ: 1012,
        ⲆΔᐃΔΔΔⲆ: 1013,
        ⵠⵠⲆΔⵠᐃⵠ: 1014,
        ⵠⵠΔⵠΔΔΔ: 1015,
        ΔⲆΔⲆⵠᐃⲆ: 1016,
        ⵠⵠᐃΔᐃⲆᐃ: 1017,
        ⵠΔⲆⲆⵠⲆⲆ: 1018,
        ΔΔΔᐃⵠⲆⵠ: 1019,
        ⵠᐃᐃᐃᐃⲆΔ: 1020,
        ⲆᐃⲆⲆⵠⲆΔ: 1021,
        ᐃᐃΔᐃⲆΔᐃ: 1022,
        ᐃΔⵠⵠⵠΔᐃ: 1023,
        ᐃⲆᐃⲆ: 1024,
        ⵠⲆⲆΔ: 1025,
        ΔⵠⲆΔⵠⵠΔ: 1026,
        ⵠᐃᐃⵠᐃⲆᐃ: 1027,
        ⵠⲆᐃⲆⵠⲆΔ: 1028,
        ΔⲆⲆⲆⵠᐃⲆ: 1029,
        ᐃⵠΔⵠᐃⲆⵠ: 1030,
        ⵠᐃᐃⵠΔΔᐃ: 1031,
        ⲆⲆⲆⲆᐃᐃᐃ: 1032,
        ᐃΔⲆᐃⲆ: 1033,
        ᐃⵠᐃΔⵠΔᐃ: 1034,
        ⲆᐃⲆⵠᐃ: 1035,
        ᐃᐃⵠⵠΔΔΔ: 1036,
        ΔᐃⵠᐃⲆ: 1037,
        ⲆΔΔⲆⵠΔΔ: 1038,
        ᐃΔⲆΔΔ: 1039,
        ⲆΔⵠᐃⵠⲆⲆ: 1040,
        ⵠⵠᐃᐃⵠ: 1041,
        ⵠᐃⵠⵠⵠ: 1042,
        ΔΔᐃᐃⲆᐃⵠ: 1043,
        ᐃⲆⵠᐃΔᐃΔ: 1044,
        ᐃⲆΔᐃᐃΔⵠ: 1045,
        ⲆᐃΔⲆⵠⲆᐃ: 1046,
        ΔΔⲆΔⲆⵠᐃ: 1047,
        ΔᐃᐃⲆᐃΔⵠ: 1048,
        ΔⲆⵠⲆⵠΔⵠ: 1049,
        ⲆΔᐃⲆⲆⵠᐃ: 1050,
        ⵠᐃⲆⵠⲆᐃΔ: 1051,
        ᐃᐃΔᐃⲆ: 1052,
        ⵠⲆⵠΔΔΔᐃ: 1053,
        ⵠᐃΔⵠᐃ: 1054,
        ΔⲆᐃᐃΔΔⵠ: 1055,
        ⵠⲆⲆΔⲆΔⲆ: 1056,
        ᐃᐃΔΔΔΔⲆ: 1057,
        ᐃⵠⲆᐃⵠᐃᐃ: 1058,
        ΔⲆⲆⲆᐃⵠⲆ: 1059,
        ⲆⲆᐃΔΔⵠᐃ: 1060,
        ⵠᐃⲆᐃΔⲆⲆΔΔ: 1061,
        ⵠΔΔⲆⵠΔΔ: 1062,
        ΔᐃΔⵠΔᐃΔ: 1063,
        ΔⵠΔᐃᐃΔΔⲆⵠ: 1064,
        ΔⲆΔΔᐃⲆᐃ: 1065,
        ⲆⲆⵠⵠⲆⵠΔ: 1066,
        ΔΔΔᐃⲆΔⵠ: 1067,
        ᐃΔΔΔⵠΔⵠ: 1068,
        ΔⵠⵠΔᐃ: 1069,
        ᐃᐃΔⲆᐃⲆᐃ: 1070,
        ⲆⵠΔΔⵠᐃᐃ: 1071,
        ⵠⲆᐃᐃⲆⲆᐃ: 1072,
        ᐃⵠᐃⵠΔⲆⲆ: 1073,
        ⲆΔⲆᐃⵠΔΔ: 1074,
        ⵠⵠⲆⲆᐃᐃⵠ: 1075,
        ᐃⲆⲆⲆⲆⵠⵠ: 1076,
        ΔᐃᐃᐃⵠⲆⲆ: 1077,
        ᐃⲆΔΔᐃⲆⵠ: 1078,
        ⵠⵠΔΔΔⵠⲆ: 1079,
        ⵠⵠⵠΔⲆⵠⵠ: 1080,
        ⵠᐃⵠΔΔᐃΔ: 1081,
        ᐃⵠⵠΔⲆⵠⲆ: 1082,
        ΔᐃᐃⵠⵠⵠⲆ: 1083,
        ΔΔΔⲆⵠ: 1084,
        ΔᐃᐃΔᐃΔⵠ: 1085,
        ΔᐃⲆᐃⲆⲆⵠ: 1086,
        ᐃᐃⲆⵠⲆᐃⵠ: 1087,
        ΔᐃᐃᐃᐃⲆⵠ: 1088,
        ΔᐃⵠΔΔⲆΔ: 1089,
        ᐃᐃⵠⲆⲆⲆⲆ: 1090,
        ᐃΔⲆⲆⲆΔⲆ: 1091,
        ᐃⵠⵠΔᐃⲆΔ: 1092,
        ⵠᐃⵠᐃΔⵠΔ: 1093,
        ᐃΔᐃΔⵠᐃᐃ: 1094,
        ΔΔⵠΔΔᐃⵠ: 1095,
        ⲆᐃᐃⵠΔⲆⵠ: 1096,
        ᐃᐃᐃᐃΔᐃⵠ: 1097,
        ⲆⵠᐃⵠᐃⵠΔ: 1098,
        ⲆΔⲆⵠᐃ: 1099,
        ⵠⵠⵠᐃᐃᐃⵠ: 1100,
        ⵠⲆⵠᐃΔΔⲆ: 1101,
        ΔᐃᐃΔΔⲆⲆ: 1102,
        ΔᐃΔᐃΔⲆᐃ: 1103,
        ᐃΔΔΔΔⵠᐃ: 1104,
        ΔⵠⲆΔΔⵠᐃ: 1105,
        ⵠⲆΔⲆⲆᐃⵠ: 1106,
        ⵠΔᐃᐃᐃΔΔ: 1107,
        ΔᐃⲆΔⵠΔⲆ: 1108,
        Ⲇᐃⵠᐃᐃⵠᐃ: 1109,
        ⵠⲆΔΔⲆᐃΔ: 1110,
        ΔΔⵠᐃᐃⲆᐃ: 1111,
        ⵠΔᐃΔⵠᐃᐃ: 1112,
        ⵠⲆⵠΔⵠⲆⵠ: 1113,
        ᐃᐃΔⵠⵠⵠⲆ: 1114,
        ⵠⵠⲆⲆΔⲆΔ: 1115,
        ⵠΔⲆΔᐃⵠⵠ: 1116,
        ⵠΔⲆΔⲆⲆᐃ: 1117,
        ᐃⵠᐃΔⲆⲆⵠ: 1118,
        ΔΔⲆΔⵠⵠⵠ: 1119,
        ⵠΔⲆⲆⲆ: 1120,
        ᐃⲆΔⵠⲆΔⲆ: 1121,
        ⲆⵠᐃᐃⵠᐃΔ: 1122,
        ᐃⵠΔᐃᐃⲆⲆ: 1123,
        ᐃΔᐃⲆⵠᐃⵠ: 1124,
        ᐃⵠᐃᐃᐃⵠⲆ: 1125,
        ᐃᐃⵠΔΔΔΔ: 1126,
        ΔᐃⵠΔⲆᐃΔ: 1127,
        ᐃⲆⵠⲆᐃᐃᐃ: 1128,
        ⲆᐃⲆΔᐃⵠᐃ: 1129,
        ⵠᐃᐃⵠⲆΔⲆ: 1130,
        ΔⲆⲆⲆⵠΔΔ: 1131,
        ᐃⵠⵠᐃⲆᐃΔ: 1132,
        ᐃⵠⵠⲆⲆⲆⲆ: 1133,
        ⲆⲆΔⵠⵠΔᐃ: 1134,
        ΔⲆⲆⲆⵠΔⵠ: 1135,
        ᐃⵠΔⲆⵠΔⲆ: 1136,
        ΔⲆᐃⵠΔⵠⵠ: 1137,
        ΔΔᐃᐃⲆⲆΔ: 1138,
        ΔΔⲆⵠΔᐃⲆ: 1139,
        ⲆⲆΔⵠΔⲆΔ: 1140,
        ΔⲆᐃⵠⵠⲆⵠ: 1141,
        ᐃⵠᐃⲆⵠᐃⲆ: 1142,
        ΔⲆΔᐃⲆΔⲆ: 1143,
        ΔⵠᐃᐃⲆⲆᐃ: 1144,
        ⲆΔⵠⲆⵠⲆⲆ: 1145,
        ⵠⵠⵠΔΔᐃΔ: 1146,
        ⵠᐃⲆΔⵠᐃⵠ: 1147,
        ᐃⲆⲆⲆⵠⲆᐃ: 1148,
        ⵠⵠⵠᐃⵠΔΔ: ["#E9CF96", "#144940"],
        ⵠⵠⵠΔⵠΔⵠ: 1149,
        ⲆⲆΔΔⲆⲆⲆ: 1150,
        ᐃᐃᐃⵠⲆⲆⵠ: 1151,
        ⲆΔⲆⵠᐃⵠⵠ: 1152,
        ⲆⲆᐃᐃᐃⲆᐃ: 1153,
        ΔⲆⵠⵠⲆΔⵠ: 1154,
        ᐃⲆⲆⲆΔᐃⵠ: 1155,
        ⲆᐃΔᐃᐃ: 1156,
        ⲆⵠⲆᐃⲆᐃΔ: 1157,
        ΔΔᐃⵠᐃⲆᐃ: 1158,
        ΔᐃᐃΔΔⲆᐃ: 1159,
        ⵠⵠⲆΔⲆᐃᐃ: 1160,
        ⲆⵠⲆᐃⵠⵠⵠ: 1161,
        ᐃᐃⲆⲆⲆⲆᐃ: 1162,
        ⵠᐃⲆᐃᐃⵠⵠ: 1163,
        ᐃⲆᐃᐃⵠⲆⵠ: 1164,
        ⲆⵠᐃΔᐃⵠⲆ: 1165,
        ⵠᐃⵠⲆⲆᐃⲆ: 1166,
        ᐃⵠⵠⲆⲆΔⵠ: 1167,
        ⵠⲆΔⲆⲆⲆΔ: 1168,
        ΔⲆⲆⲆΔⵠΔ: 1169,
        ⲆⲆⲆΔᐃᐃⲆ: 1170,
        ⵠᐃⲆⵠⲆⲆⲆ: 1171,
        ΔⲆⲆⲆΔᐃᐃ: 1172,
        ΔᐃⵠⲆⲆΔⵠ: 1173,
        ΔⲆᐃⵠⲆΔⲆ: 1174,
        ᐃΔᐃᐃΔᐃΔ: 1175,
        ΔΔⵠΔⵠⲆᐃ: 1176,
        ΔΔⵠᐃⲆⵠⲆ: 1177,
        ᐃⲆⵠⵠⵠᐃⲆ: 1178,
        ⲆⲆⵠⲆᐃᐃⲆ: 1179,
        ᐃᐃᐃⵠΔΔⵠ: 1180,
        ⵠⵠⵠⵠᐃΔⵠ: 1181,
        ⲆⲆⵠⵠᐃⵠᐃ: 1182,
        ⲆⵠΔⲆΔΔᐃ: 1183,
        ⲆᐃᐃⵠΔⵠⵠ: 1184,
        ⵠⵠⵠΔⵠΔᐃ: 1185,
        ΔᐃΔΔⲆⲆⵠ: 1186,
        ᐃⲆΔⵠⲆᐃⵠ: 1187,
        ᐃⵠΔⵠⵠᐃᐃ: 1188,
        ᐃⵠⵠᐃⵠΔⵠ: 1189,
        ᐃΔΔⲆᐃΔᐃ: 1190,
        ⲆᐃⵠΔⵠΔⵠ: 1191,
        ⵠⵠⲆⵠⵠⲆᐃ: 1192,
        ⲆⲆⲆᐃᐃⲆΔ: 1193,
        ᐃᐃⲆⲆⲆΔⲆ: 1194,
        ΔⵠΔΔⵠΔⲆ: 1195,
        ⲆᐃⵠⵠⵠⲆᐃ: 1196,
        ⵠⵠⲆⵠⲆⵠⵠ: 1197,
        ᐃᐃⲆⲆⲆᐃᐃ: 1198,
        ⲆΔΔⵠⵠᐃΔ: 1199,
        ᐃⵠᐃΔⲆⵠΔ: 1200,
        ⵠⲆⲆᐃΔΔⲆ: 1201,
        Δⵠⵠⵠⵠⵠⵠ: 1202,
        ⲆⵠᐃⵠᐃΔᐃ: 1203,
        ΔᐃΔⲆΔΔᐃ: 1204,
        ⵠⲆΔΔⵠⵠΔ: 1205,
        ΔⲆⲆΔΔᐃⵠ: 1206,
        ᐃⵠᐃΔΔᐃΔ: 1207,
        ᐃⵠⲆⲆⲆⲆⵠ: 1208,
        ⲆⵠⲆᐃᐃⲆᐃ: 1209,
        ᐃⵠⵠΔΔᐃᐃ: 1210,
        ᐃⵠⲆⲆⲆⵠⲆ: 1211,
        ⲆⲆᐃⵠΔⵠᐃ: 1212,
        ⲆⲆᐃΔⵠᐃⲆ: 1213,
        ⲆΔᐃᐃⲆⲆⲆ: 1214,
        ΔΔⵠⲆΔⵠᐃ: 1215,
        ⵠⲆⵠᐃⲆⵠΔ: 1216,
        ΔⵠⲆⲆΔΔΔ: 1217,
        ᐃⲆⲆᐃᐃ: 1218,
        ⲆΔⵠⲆᐃⵠⵠ: 1219,
        ⲆᐃᐃⲆⲆ: 1220,
        ⲆⲆⵠᐃⲆⲆⲆ: 1221,
        ΔⵠⲆΔΔΔΔ: 1222,
        ᐃⵠᐃΔⵠⵠᐃ: 1223,
        ⲆΔᐃᐃⲆⲆᐃ: 1224,
        ⵠⵠΔⲆⲆᐃᐃ: 1225,
        ⲆΔⵠⵠΔⵠᐃ: 1226,
        Ⲇᐃᐃᐃⵠⵠⵠ: 1227,
        ⲆⵠⲆᐃΔΔⲆ: 1228,
        ᐃⲆᐃΔΔⵠⵠ: 1229,
        ΔⲆⲆᐃᐃⵠᐃ: 1230,
        ΔΔⲆΔᐃᐃᐃ: 1231,
        ᐃⲆᐃΔⲆⲆⵠ: 1232,
        ᐃⲆⲆⵠⵠΔⲆ: 1233,
        ΔᐃⵠⵠⲆⲆᐃ: 1234,
        ᐃⲆΔΔΔⲆⵠ: 1235,
        ⲆᐃⵠΔⲆⲆΔ: 1236,
        ᐃⲆᐃΔⵠⲆΔ: 1237,
        ΔᐃΔΔⵠΔⵠ: 1238,
        ᐃⵠᐃⵠⲆⵠΔ: 1239,
        ⵠⲆᐃⲆⵠᐃᐃ: 1240,
        ΔΔⲆΔᐃⲆᐃ: 1241,
        ⵠⵠΔⲆΔᐃᐃ: 1242,
        ΔΔⲆⲆΔΔᐃ: 1243,
        ΔⵠᐃⲆᐃⵠᐃ: 1244,
        ΔⲆⲆⵠⵠΔⲆ: 1245,
        ᐃⲆΔᐃⵠΔⲆ: 1246,
        ⵠΔⵠⲆⵠΔᐃ: 1247,
        ᐃⲆΔⲆⲆΔΔ: 1248,
        ΔΔΔᐃΔᐃΔ: 1249,
        ⲆᐃΔΔⵠᐃᐃ: 1250,
        ΔⵠᐃⵠⲆⲆⲆ: 1251,
        ⲆⵠᐃΔᐃΔⵠ: 1252,
        ⲆΔⵠⲆⵠΔΔ: 1253,
        ᐃΔⲆᐃᐃⲆᐃ: 1254,
        ᐃΔⵠⵠⵠⵠⲆ: 1255,
        ΔⵠⲆΔⲆⵠᐃ: 1256,
        ᐃᐃⲆᐃⵠⵠⵠ: 1257,
        ΔⲆΔⲆⲆⲆΔ: 1258,
        ΔⵠⵠⵠᐃⵠⲆ: 1259,
        ⲆⵠⲆΔᐃᐃⵠ: 1260,
        ΔⲆⵠⵠⲆⲆⲆ: 1261,
        ⵠⵠΔᐃⲆᐃⵠ: 1262,
        ᐃΔᐃᐃΔⲆⲆ: 1263,
        ΔⵠΔⲆⵠᐃΔ: 1264,
        ᐃᐃᐃⵠⵠΔΔ: 1265,
        ⵠᐃⵠⲆⲆⵠⲆ: 1266,
        ᐃΔⵠⵠⲆⵠⵠ: 1267,
        ⲆⵠΔᐃⲆᐃΔ: 1268,
        ΔΔⵠⲆⵠᐃΔ: 1269,
        ᐃᐃⲆᐃⵠΔⵠ: 1270,
        ⲆΔⲆⵠⲆⵠⲆ: 1271,
        ᐃΔᐃⵠⵠⲆᐃ: 1272,
        ᐃΔΔΔΔΔⲆ: 1273
    };
    const Vr = 3;
    Sr = 0;
    var Wr = {
        ⵠΔᐃᐃⵠ: 0,
        ᐃᐃⵠΔⵠ: 1,
        ᐃⵠⵠⲆⵠ: 2,
        ⲆⲆΔΔⵠ: 3,
        ⲆᐃⲆⲆⲆ: 4,
        ⵠᐃⵠⲆⲆ: 5,
        ΔⵠΔΔᐃ: 6,
        ⵠᐃⲆⵠⲆ: 7,
        Δᐃᐃᐃⵠ: 8,
        ΔⲆⲆΔⲆ: 9,
        ΔⲆⲆΔᐃ: 10,
        ᐃᐃⵠⵠΔ: 11,
        ΔⵠᐃΔᐃ: 12,
        ᐃⲆⲆⵠⲆ: 13,
        ⲆⵠⲆⲆΔ: 14,
        ᐃΔⲆⲆᐃ: 15,
        ΔᐃΔΔⵠ: 16,
        ⲆᐃⲆΔⵠ: 17,
        ⵠⲆᐃⲆΔ: 18,
        ΔⵠΔᐃΔ: 19,
        ᐃᐃⲆᐃΔ: 20,
        ᐃⵠⲆⲆΔ: 21,
        ᐃⵠⵠⲆᐃ: 22,
        ᐃᐃΔᐃⵠ: 23,
        ᐃᐃᐃⲆⵠ: 24,
        ᐃᐃⵠΔΔ: 25,
        ᐃⲆΔⲆΔ: 26,
        ⵠΔΔΔᐃ: 27,
        ⵠᐃⲆⵠᐃ: 28,
        ⵠⵠⲆΔⲆ: 29,
        Δⵠⵠⵠᐃ: 30,
        ⲆᐃⲆᐃᐃ: 31,
        ΔⲆⲆⲆⵠ: 32,
        ΔᐃⵠⲆᐃ: 33,
        ΔΔΔⲆⲆ: 34,
        ΔⲆⲆΔⵠ: 35,
        ⲆⵠᐃᐃΔ: 36,
        ⲆᐃⵠⲆⵠ: 37,
        ᐃᐃΔⲆⲆ: 38,
        ⵠⵠᐃᐃᐃ: 39,
        ᐃⲆⲆΔⲆ: 40,
        ΔⵠⲆⲆⵠ: 41,
        ᐃΔⵠⲆᐃ: 42,
        ⲆΔᐃᐃᐃ: 43,
        ΔΔΔᐃⲆ: 44,
        ᐃⵠᐃᐃᐃ: 45,
        ΔᐃⲆΔΔ: 46,
        ᐃⵠΔᐃⲆ: 47,
        ΔⲆⲆⲆⲆ: 48,
        ᐃⵠΔΔⲆ: 49,
        ⲆΔΔⲆΔ: 50,
        ΔⲆⲆⵠᐃ: 51,
        ⲆⵠⲆⲆⲆ: 52,
        ⵠᐃΔᐃⲆ: 53,
        ΔΔᐃΔⲆ: 54,
        ᐃᐃᐃΔⲆ: 55,
        ⵠⲆⵠᐃⵠ: 56,
        ⲆⵠⵠⲆⲆ: 57,
        ⲆⲆⲆΔΔ: 58,
        ΔᐃⵠⲆΔ: 59,
        ᐃⲆⵠⵠⵠ: 60,
        ⵠΔᐃΔⵠ: 61,
        ⵠⵠⲆΔⵠ: 62,
        ᐃΔΔᐃΔ: 63,
        ΔΔΔᐃΔ: 64,
        ⵠⲆⵠⵠΔ: 65,
        ⲆⲆⲆⲆⵠ: 66,
        ⲆⲆⵠⲆᐃ: 67,
        ⵠⲆΔⲆΔ: 68,
        Δⵠᐃⵠⵠ: 69,
        ⵠⲆᐃⵠⲆ: 70,
        ᐃⵠⵠᐃΔ: 71,
        ᐃⲆⵠⵠΔ: 72,
        ⵠΔΔⲆΔ: 73,
        ᐃⲆⲆⵠΔ: 74,
        ⵠΔⵠΔΔ: 75,
        ⵠᐃᐃΔᐃ: 76,
        ᐃΔᐃⲆΔ: 77,
        ⵠΔᐃΔⲆ: 78,
        ΔᐃΔᐃΔ: 79,
        ᐃⲆΔⵠⲆ: 80,
        ⲆΔΔⲆⵠ: 81,
        ⲆⲆΔⲆᐃ: 82,
        ⵠΔⲆⵠⵠ: 83,
        ᐃᐃᐃⲆⲆ: 84,
        ᐃΔᐃᐃⵠ: 85,
        ᐃΔᐃΔⲆ: 86,
        ᐃⲆⵠᐃⵠ: 87,
        ⵠΔΔⵠΔ: 88,
        ΔⲆᐃⵠⵠ: 89,
        ΔΔᐃⲆⵠ: 90,
        Ⲇᐃⵠⵠᐃ: 91,
        ⲆⵠΔᐃΔ: 92,
        ⵠⲆΔⲆⲆ: 93,
        ᐃΔΔⲆΔ: 94,
        ⲆⲆΔΔΔ: 95,
        ⵠⲆⲆᐃΔ: 96,
        ⵠⲆⵠⵠᐃ: 97,
        ⵠⵠΔΔⲆ: 98,
        ⵠⵠᐃΔΔ: 99,
        ΔⲆⲆⲆ: 100,
        ᐃⵠⲆᐃᐃ: 101,
        ⲆⲆⲆᐃⲆ: 102,
        ΔΔᐃΔᐃ: 103,
        ΔΔᐃᐃΔ: 104,
        ᐃⲆⲆᐃⲆ: 105,
        ⲆⲆⲆΔⲆ: 106,
        ⲆⵠΔᐃⵠ: 107,
        ⲆⵠᐃΔⵠ: 108,
        ⲆⵠⲆΔⵠ: 109,
        ᐃⵠⲆΔⲆ: 110,
        ⵠⵠᐃΔᐃ: 111,
        ⵠΔⵠΔΔⵠⲆ: 112,
        ᐃΔΔⲆᐃⲆᐃ: 113,
        ⵠⵠΔΔⵠ: 114,
        ΔⲆⲆⵠⲆ: 115,
        ⵠᐃⵠΔⵠ: 116,
        ⲆⲆⵠᐃⲆ: 117,
        ΔⵠΔᐃⵠ: 118,
        ⲆᐃᐃⲆᐃ: 119,
        ⵠᐃⵠΔⲆ: 120,
        ΔΔΔΔⵠ: 121,
        ΔᐃⲆΔⲆ: 122,
        ᐃᐃⵠΔᐃ: 123,
        ⲆΔΔΔⵠ: 124,
        ⵠⵠⵠᐃⵠ: 125,
        ⵠᐃΔⲆΔ: 126,
        ⲆΔⵠΔⲆ: 127,
        ᐃΔᐃᐃΔ: 128,
        ᐃΔⵠⵠΔ: 129,
        ⵠⲆⲆⲆⵠ: 130,
        ΔⵠᐃⲆⵠ: 131,
        ΔΔⵠΔⵠ: 132,
        ⵠⲆᐃᐃⲆ: 133,
        ᐃΔᐃΔΔ: 134,
        ⲆᐃᐃΔⲆ: 135,
        ⲆᐃᐃΔⵠ: 136,
        ᐃᐃΔᐃΔ: 137,
        ⲆᐃΔΔΔ: 138,
        ᐃⵠⲆⵠΔ: 139,
        ⲆⲆⲆΔⵠ: 140,
        ᐃⲆⲆΔⵠ: 141,
        ᐃⲆΔⲆᐃ: 142,
        ᐃⲆⵠⵠᐃ: 143,
        ᐃⵠΔⵠⵠ: 144,
        ΔⲆⵠⵠⵠ: 145,
        ΔⲆΔⲆⵠ: 146,
        ⵠⲆᐃᐃⵠ: 147,
        ⵠⵠⵠⵠΔ: 148,
        ⲆⵠΔⵠⵠ: 149,
        ⲆᐃⲆᐃΔ: 150,
        ⵠⵠⵠΔᐃ: 151,
        ⵠⵠᐃⲆⲆ: 152,
        ⵠⲆⵠΔⵠ: 153,
        ΔΔᐃⲆᐃ: 154,
        ᐃⵠᐃᐃⲆ: 155,
        ΔΔᐃΔΔ: 156,
        ᐃᐃΔΔⲆ: 157,
        ⵠⲆⲆΔΔ: 158,
        ⲆᐃΔⲆⲆ: 159,
        ⵠΔΔᐃⲆ: 160,
        Ⲇᐃⵠᐃᐃ: 161,
        ⵠⲆΔΔⵠ: 162,
        ᐃⲆᐃΔⵠ: 163,
        Ⲇⵠᐃᐃⵠ: 164,
        ⵠΔⲆᐃⲆ: 165,
        ᐃΔᐃⲆⲆ: 166,
        ᐃⵠⵠᐃⵠ: 167,
        ⵠᐃᐃᐃΔ: 168,
        ΔΔᐃᐃⲆ: 169,
        ⲆⵠᐃⲆⵠ: 170,
        ᐃᐃⵠⵠⵠ: 171,
        ⵠⵠⵠΔΔ: 172,
        ⲆⵠΔΔⵠ: 173,
        ⲆΔΔⵠᐃ: 174,
        ᐃⲆⲆΔᐃ: 175,
        ΔΔⲆⵠᐃ: 176
    };
    const Xr = 4;
    Sr = 0;
    const Yr = 7;
    const Zr = 256;
    const $r = 10;
    const _r = 15;
    var as = {
        ΔⲆⲆΔⵠ: 0,
        ⵠᐃⵠⲆⲆ: 1,
        ΔⲆᐃⲆΔ: 2,
        ΔⵠΔΔᐃ: 3,
        ⵠᐃⲆⵠⲆ: 4,
        ⲆⵠᐃᐃΔ: 5,
        ⲆᐃⵠⲆⵠ: 6,
        ΔᐃⵠⲆⵠ: 7,
        ⲆᐃⲆⲆⲆ: 8,
        ⲆⲆΔᐃⵠ: 9,
        ⵠΔⲆⵠⵠ: 10,
        ᐃᐃᐃⲆⲆ: 11,
        ᐃᐃⵠΔΔ: 12,
        ᐃⲆΔⲆΔ: 13,
        ⵠΔΔΔᐃ: 14,
        ⵠᐃⲆⵠᐃ: 15,
        ⲆᐃⲆᐃᐃ: 16,
        ΔⲆⲆⲆⵠ: 17,
        ΔᐃⵠⲆᐃ: 18,
        ⵠⵠᐃᐃᐃ: 19,
        ⲆⲆΔΔΔ: 20,
        ⵠⲆⲆᐃΔ: 21,
        ⵠⲆⵠⵠᐃ: 22,
        ᐃⲆΔⵠⲆ: 23,
        ⲆΔΔⲆⵠ: 24,
        ⵠΔΔⵠΔ: 25,
        ΔⲆᐃⵠⵠ: 26,
        ΔΔᐃⲆⵠ: 27,
        ᐃᐃᐃⲆⵠ: 28,
        ΔⲆⲆⲆ: 29,
        ᐃᐃΔⲆⲆ: 30,
        Δᐃᐃᐃⵠ: 31,
        ΔⲆⲆΔⲆ: 32,
        ⵠⵠⲆΔⲆ: 33,
        Δⵠⵠⵠᐃ: 34,
        ΔⲆⲆΔᐃ: 35,
        ᐃᐃⵠⵠΔ: 36,
        ΔⵠᐃΔᐃ: 37,
        ᐃⲆⲆⵠⲆ: 38,
        ⲆⵠⲆⲆΔ: 39,
        ᐃΔᐃᐃⵠ: 40,
        ⲆⵠᐃⵠΔ: 41,
        ⵠᐃⲆᐃᐃ: 42,
        Ⲇᐃⵠⵠᐃ: 43,
        ⲆⵠΔᐃΔ: 44,
        ᐃΔⲆⲆᐃ: 45,
        ΔᐃΔΔⵠ: 46,
        ᐃΔΔⲆΔ: 47,
        ⵠⲆΔⲆⲆ: 48,
        ᐃⵠⲆⲆΔ: 49,
        ⲆᐃⲆΔⵠ: 50,
        ⵠⲆᐃⲆΔ: 51,
        ΔⵠΔᐃΔ: 52,
        ᐃⵠⵠⲆᐃ: 53,
        ᐃᐃΔᐃⵠ: 54,
        ΔᐃⲆΔⲆ: 55,
        ᐃᐃⵠΔᐃ: 56,
        ΔΔΔⲆⲆ: 57,
        ᐃⲆⵠᐃⵠ: 58,
        ⵠᐃΔⲆΔ: 59,
        ⲆΔⵠΔⲆ: 60,
        ᐃΔᐃᐃΔ: 61,
        ᐃΔⵠⵠΔ: 62,
        ⵠⲆⲆⲆⵠ: 63,
        ΔⵠᐃⲆⵠ: 64,
        ⵠⲆᐃᐃⲆ: 65,
        ⲆᐃᐃΔⲆ: 66,
        ᐃᐃΔᐃΔ: 67,
        ᐃⵠⲆⵠΔ: 68,
        ᐃⲆⲆΔⵠ: 69,
        ᐃⲆⵠⵠᐃ: 70,
        ΔⲆⵠⵠⵠ: 71,
        ΔⲆΔⲆⵠ: 72,
        ⵠⲆᐃᐃⵠ: 73,
        ⵠⵠⵠⵠΔ: 74,
        ⲆⵠΔⵠⵠ: 75,
        ⲆᐃⲆᐃΔ: 76,
        ⵠⵠⵠΔᐃ: 77,
        ⵠⵠᐃⲆⲆ: 78,
        ⵠⲆⵠΔⵠ: 79,
        ⵠⵠΔΔⲆ: 80,
        ⵠⵠᐃΔΔ: 81,
        ⲆⲆΔⲆᐃ: 82,
        ΔΔᐃⲆᐃ: 83,
        ᐃⵠᐃᐃⲆ: 84,
        ΔΔᐃΔΔ: 85,
        ᐃᐃΔΔⲆ: 86,
        ⵠᐃⲆⲆⵠ: 87,
        ᐃΔᐃΔⲆ: 88,
        ⵠΔⲆᐃⲆ: 89,
        ⲆⵠΔΔⵠ: 90,
        ΔΔⲆⵠᐃ: 91,
        ⲆΔΔⵠᐃ: 92,
        ᐃⲆⲆΔᐃ: 93,
        ᐃⵠⵠᐃⵠ: 94,
        ⵠᐃᐃᐃΔ: 95,
        ΔΔᐃᐃⲆ: 96,
        ⲆⵠᐃⲆⵠ: 97,
        ᐃᐃⵠⵠⵠ: 98,
        ⵠⵠⵠΔΔ: 99,
        ⵠⲆᐃⲆⵠ: 100,
        ΔΔⵠΔⵠ: 101,
        ᐃΔᐃΔΔ: 102,
        ⲆᐃᐃΔⵠ: 103,
        ⲆᐃΔΔΔ: 104,
        ⲆⲆⲆΔⵠ: 105,
        ᐃⲆΔⲆᐃ: 106,
        ᐃⵠΔⵠⵠ: 107,
        ᐃᐃⵠΔ: 108,
        ᐃΔᐃⲆ: 109,
        ᐃᐃⲆⵠΔ: 110,
        ΔΔᐃⲆ: 111,
        ⲆᐃⲆⵠ: 112,
        ⵠΔᐃᐃⵠ: 113,
        ⲆⲆΔΔⵠ: 114,
        ᐃⲆⲆΔⲆ: 115,
        ⵠⲆⲆᐃᐃ: 116,
        ᐃⵠΔΔⲆ: 117,
        ᐃᐃⵠΔⵠ: 118,
        ᐃⵠⵠⲆⵠ: 119,
        ᐃⵠⲆᐃᐃ: 120,
        ⵠᐃⲆᐃ: 121,
        ΔᐃⵠⲆΔ: 122,
        ᐃⵠⵠᐃΔ: 123,
        ⵠⲆⵠⵠΔ: 124,
        ⲆⲆⲆΔⲆ: 125,
        ΔΔΔΔⲆ: 126,
        ⵠⵠᐃΔᐃ: 127,
        ᐃⵠⲆΔⲆ: 128,
        ⵠᐃᐃⵠⲆ: 129,
        ᐃᐃⲆᐃΔ: 130,
        ᐃᐃⵠⲆⲆ: 131,
        ΔⵠⲆⲆⵠ: 132,
        ⲆⵠⲆⲆⲆ: 133,
        Ⲇⵠⵠⵠᐃ: 134,
        ⵠⵠΔΔⵠ: 135,
        ⵠᐃΔᐃⲆ: 136,
        ᐃⲆⵠΔⵠ: 137,
        ⲆΔΔⲆΔ: 138,
        ⵠᐃΔⲆⲆ: 139,
        ΔⵠⲆⲆᐃ: 140,
        ⲆⵠⲆΔⵠ: 141,
        ⵠΔΔΔⵠ: 142,
        ΔⲆⲆⵠᐃ: 143,
        ⲆΔΔΔⵠ: 144,
        ⵠⵠⵠᐃⵠ: 145,
        ΔΔⲆᐃⵠ: 146,
        ⲆⲆⲆᐃⲆ: 147,
        ΔΔᐃΔᐃ: 148,
        ⵠΔᐃΔᐃ: 149,
        Ⲇᐃᐃᐃⵠ: 150,
        ΔⲆⲆⵠⲆ: 151,
        ⵠᐃⵠΔⵠ: 152,
        ⲆⲆⵠᐃⲆ: 153,
        ΔⵠΔᐃⵠ: 154,
        ⲆᐃᐃⲆᐃ: 155,
        ⵠᐃⵠΔⲆ: 156,
        ΔΔΔΔⵠ: 157,
        ΔΔᐃᐃΔ: 158,
        ᐃⲆⲆᐃⲆ: 159,
        ⲆⲆⵠⲆᐃ: 160,
        ⲆΔᐃⵠᐃ: 161,
        ᐃᐃᐃΔⲆ: 162,
        ⵠⲆⵠᐃⵠ: 163,
        ⲆⵠⵠⲆⲆ: 164,
        ⲆⲆⲆΔΔ: 165,
        ⵠΔᐃΔⵠ: 166,
        ΔᐃΔᐃΔ: 167,
        ⵠⲆΔⲆΔ: 168,
        Δⵠᐃⵠⵠ: 169,
        ⵠⲆᐃⵠⲆ: 170,
        ⵠⵠⲆΔⵠ: 171,
        ᐃΔΔᐃΔ: 172,
        ΔΔΔᐃΔ: 173,
        ᐃⵠⵠᐃᐃ: 174,
        ᐃⵠⵠⵠᐃ: 175,
        ⵠⵠᐃⲆᐃ: 176,
        ΔᐃⵠΔΔ: 177,
        ⵠⲆᐃⲆᐃ: 178,
        ᐃΔᐃⵠΔ: 179,
        ⵠⲆⲆΔΔ: 180,
        ⲆᐃΔⲆⲆ: 181,
        ⵠΔΔᐃⲆ: 182,
        Ⲇᐃⵠᐃᐃ: 183,
        ⲆⲆΔⲆⵠ: 184,
        ⲆᐃⲆⲆⵠ: 185,
        ⲆΔⲆΔᐃ: 186,
        ΔⲆᐃᐃᐃ: 187,
        ᐃΔⵠⲆᐃ: 188,
        ⲆⵠΔⲆⵠ: 189,
        ⲆⵠΔᐃⵠ: 190,
        ⲆΔᐃᐃᐃ: 191,
        ΔⲆᐃⲆᐃ: 192,
        ΔΔΔᐃⲆ: 193,
        ΔⲆΔΔⲆ: 194,
        ΔΔᐃΔⲆ: 195,
        ⲆΔⵠⲆⵠ: 196,
        ⲆⲆᐃΔⲆ: 197,
        ⵠⲆΔΔⵠ: 198,
        ᐃⲆᐃⲆⲆ: 199,
        ⵠᐃⵠᐃⲆ: 200,
        ⲆΔⵠᐃΔ: 201,
        ⵠⲆΔᐃ: 202,
        ⵠⵠⲆⵠⵠ: 203,
        ᐃⵠᐃᐃᐃ: 204,
        ᐃⵠΔⵠᐃ: 205,
        ΔᐃⲆΔΔ: 206,
        ᐃᐃⲆΔⲆ: 207,
        ᐃⵠΔᐃⲆ: 208,
        ᐃᐃⵠⲆΔ: 209,
        ΔⲆⲆⲆⲆ: 210,
        ⲆΔⲆᐃΔ: 211,
        ⵠΔΔⲆΔ: 212,
        ᐃⲆⲆⵠΔ: 213,
        ⵠΔⵠΔΔ: 214,
        ⵠᐃᐃΔᐃ: 215,
        ᐃΔᐃⲆΔ: 216,
        ᐃⲆⵠⵠⵠ: 217,
        ⲆⲆⲆⲆⵠ: 218,
        ᐃⲆⵠⵠΔ: 219,
        ⵠΔᐃΔⲆ: 220,
        ⲆⵠᐃΔⵠ: 221,
        ⲆⲆΔⲆⲆ: 222,
        ᐃⲆᐃΔⵠ: 223,
        Ⲇⵠᐃᐃⵠ: 224,
        ᐃΔΔⵠΔ: 225,
        ⵠᐃΔⵠᐃ: 226,
        ΔⵠⵠΔᐃ: 227,
        ΔΔΔⲆⵠ: 228,
        ⲆΔⲆⵠᐃ: 229,
        ᐃΔᐃⲆⲆ: 230,
        ⵠᐃⵠⵠⲆ: 231,
        ⵠⲆⲆⵠᐃ: 232,
        ⵠΔΔΔⲆ: 233,
        ᐃⲆᐃⵠⲆ: 234,
        ⲆΔⲆⲆΔΔⲆ: 235,
        ⲆⲆⲆⲆᐃⵠⲆ: 236,
        ⵠⲆΔⵠⵠ: 237,
        ΔΔⵠⲆᐃ: 238,
        ⲆᐃᐃⲆⲆ: 239,
        ᐃⵠⲆᐃⲆ: 240
    };
    var bs = {
        ᐃⲆᐃΔᐃ: 1,
        ⵠⲆᐃᐃΔ: 0,
        ⲆⲆⲆⲆΔ: 5,
        ⵠⵠⲆⲆᐃ: 4,
        ⵠᐃⵠᐃᐃ: 2,
        ᐃⲆΔΔⵠ: 3
    };
    const cs = j;
    const ds = 11;
    const es = 13;
    var fs = [];
    fs[109] = {
        name: "Wood",
        ᐃΔ: 316,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[108] = {
        name: "Stone",
        ᐃΔ: 315,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[111] = {
        name: "Gold",
        ᐃΔ: 297,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[112] = {
        name: "Diamond",
        ᐃΔ: 298,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[121] = {
        name: "Amethyst",
        ᐃΔ: 418,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const gs = 255;
    const hs = 5;
    const is = 17;
    fs[2] = {
        name: "Rabbit fur",
        ᐃΔ: 368,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ks = 0;
    const ls = 16;
    fs[174] = {
        name: "Wolf fur",
        ᐃΔ: 393,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[237] = {
        name: "Boar fur",
        ᐃΔ: 1162,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[100] = {
        name: "Firefly",
        ᐃΔ: 1164,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[101] = {
        name: "Wood arrow",
        ᐃΔ: 1166,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ms = 19;
    fs[102] = {
        name: "Stone arrow",
        ᐃΔ: 1169,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[103] = {
        name: "Gold arrow",
        ᐃΔ: 1172,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ns = 1;
    fs[104] = {
        name: "Diamond arrow",
        ᐃΔ: 1175,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[105] = {
        name: "Amethyst arrow",
        ᐃΔ: 1178,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[106] = {
        name: "Reidite arrow",
        ᐃΔ: 1181,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const os = 4;
    const ps = 15;
    const rs = 20;
    fs[107] = {
        name: "Dragon arrow",
        ᐃΔ: 1184,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ss = 7;
    const ts = Lq;
    const us = 15;
    const vs = 18;
    fs[146] = {
        name: "Winter fur",
        ᐃΔ: 505,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[240] = {
        name: "Fur mammoth",
        ᐃΔ: 1233,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[161] = {
        name: "Web",
        ᐃΔ: 305,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const js = 100;
    fs[116] = {
        name: "Meat",
        ᐃΔ: 300,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[137] = {
        name: "Fish",
        ᐃΔ: 662,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ws = 2;
    fs[129] = {
        name: "Kraken skin",
        ᐃΔ: 624,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const xs = 18;
    const ys = 13;
    fs[139] = {
        name: "Piranha scales",
        ᐃΔ: 674,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const zs = 17;
    const As = 3;
    fs[142] = {
        name: "Ice",
        ᐃΔ: 142,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[126] = {
        name: "Sand",
        ᐃΔ: 609,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const qs = 255;
    fs[140] = {
        name: "Dirt",
        ᐃΔ: 140,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Bs = 2;
    fs[110] = {
        name: "Berrie",
        ᐃΔ: 277,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[131] = {
        name: "Flour",
        ᐃΔ: 629,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[134] = {
        name: "Flour",
        ᐃΔ: 639,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[178] = {
        name: "Special fur peasant",
        ᐃΔ: 178,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[179] = {
        name: "Special fur hood",
        ᐃΔ: 179,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[189] = {
        name: "Pumpkin",
        ᐃΔ: 814,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[192] = {
        name: "Garlic",
        ᐃΔ: 840,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Cs = 16;
    const Ds = 14;
    const Es = 18;
    const Fs = 19;
    fs[194] = {
        name: "Thornbush",
        ᐃΔ: 850,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[205] = {
        name: "Carrot",
        ᐃΔ: 955,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Gs = 8;
    const Hs = 12;
    const eh = 0;
    fs[207] = {
        name: "Tomato",
        ᐃΔ: 965,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[209] = {
        name: "Watermelon",
        ᐃΔ: 972,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ih = 1;
    const th = 10;
    const nh = 6;
    fs[211] = {
        name: "Aloe Vera",
        ᐃΔ: 987,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const oh = 9;
    const ah = Mr;
    fs[222] = {
        name: "Penguin Feather",
        ᐃΔ: 1035,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const rh = 5;
    const sh = ra;
    fs[231] = {
        name: "Hawk Feather",
        ᐃΔ: 1037,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[232] = {
        name: "Vulture Feather",
        ᐃΔ: 1039,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const hh = 11;
    fs[233] = {
        name: "Cactus",
        ᐃΔ: 1154,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[236] = {
        name: "Cactus",
        ᐃΔ: 1160,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[235] = {
        name: "Pitchfork Part",
        ᐃΔ: 1158,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[238] = {
        name: "Emerald Machine",
        ᐃΔ: 1187,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[234] = {
        name: "Emerald",
        ᐃΔ: 1156,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[41] = {
        name: "Christmas Hat",
        ᐃΔ: 880,
        ᐃⲆⵠΔ: 0
    };
    fs[42] = {
        name: "Elf Hat",
        ᐃΔ: 882,
        ᐃⲆⵠΔ: 0
    };
    const lh = 100;
    fs[201] = {
        name: "Garland",
        ᐃΔ: 870,
        ᐃⲆⵠΔ: 0,
        ᐃᐃΔΔ: 0
    };
    fs[200] = {
        name: "Candy",
        ᐃΔ: 200,
        ᐃⲆⵠΔ: 0
    };
    fs[199] = {
        name: "Sugar Cane",
        ᐃΔ: 865,
        ᐃⲆⵠΔ: 0
    };
    fs[9] = {
        name: "Pirate Sword",
        ᐃΔ: 860,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[196] = {
        name: "Crab Stick",
        ᐃΔ: 196,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const gh = 19;
    const uh = 9;
    fs[202] = {
        name: "Reidite",
        ᐃΔ: 938,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const bh = 20;
    fs[203] = {
        name: "Flame",
        ᐃΔ: 936,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const dh = 4;
    fs[113] = {
        name: "Campfire",
        ᐃΔ: 302,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[198] = {
        name: "Bed",
        ᐃΔ: 909,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[114] = {
        name: "Workbench",
        ᐃΔ: 262,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const vh = 1;
    fs[0] = {
        name: "Stone sword",
        ᐃΔ: 254,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[1] = {
        name: "Stone pick",
        ᐃΔ: 256,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[115] = {
        name: "Berries bush",
        ᐃΔ: 284,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[3] = {
        name: "Gold pick",
        ᐃΔ: 295,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[4] = {
        name: "Diamond pick",
        ᐃΔ: 257,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const mh = eo;
    fs[57] = {
        name: "Wood sword",
        ᐃΔ: 830,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[5] = {
        name: "Gold sword",
        ᐃΔ: 290,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[6] = {
        name: "Diamond sword",
        ᐃΔ: 291,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ch = 14;
    fs[8] = {
        name: "Wood pick",
        ᐃΔ: 314,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[162] = {
        name: "Wood wall",
        ᐃΔ: 318,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[160] = {
        name: "Wood spike",
        ᐃΔ: 320,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[117] = {
        name: "Cooked meat",
        ᐃΔ: 325,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ph = 12;
    const Ch = Lq;
    const Th = 15;
    const fh = 100;
    const zh = 17;
    const yh = 14;
    fs[118] = {
        name: "Big campfire",
        ᐃΔ: 327,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[195] = {
        name: "Bandage",
        ᐃΔ: 304,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[163] = {
        name: "Stone wall",
        ᐃΔ: 263,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const wh = 16;
    fs[164] = {
        name: "Gold wall",
        ᐃΔ: 265,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Ph = 7;
    fs[165] = {
        name: "Diamond wall",
        ᐃΔ: 332,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Ah = 18;
    const kh = 256;
    fs[166] = {
        name: "Wood door",
        ᐃΔ: 268,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const xh = 0;
    const Jh = 255;
    fs[167] = {
        name: "Chest",
        ᐃΔ: 338,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Mh = 1;
    const Bh = 18;
    const Eh = 14;
    fs[168] = {
        name: "Stone spike",
        ᐃΔ: 360,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Dh = 12;
    fs[169] = {
        name: "Gold spike",
        ᐃΔ: 363,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Ih = 13;
    const Sh = 15;
    fs[170] = {
        name: "Diamond spike",
        ᐃΔ: 365,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Qh = 13;
    const _h = 18;
    const Fh = $k;
    fs[171] = {
        name: "Stone door",
        ᐃΔ: 371,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[172] = {
        name: "Gold door",
        ᐃΔ: 374,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[173] = {
        name: "Diamond door",
        ᐃΔ: 377,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Rh = 255;
    const Gh = 9;
    fs[10] = {
        name: "Chapka",
        ᐃΔ: 370,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const jh = 3;
    const Wh = Qj;
    fs[11] = {
        name: "Big Chapka",
        ᐃΔ: 380,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Lh = 2;
    fs[12] = {
        name: "Wood spear",
        ᐃΔ: 402,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Oh = 100;
    fs[13] = {
        name: "Stone spear",
        ᐃΔ: 396,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Nh = 16;
    fs[14] = {
        name: "Gold spear",
        ᐃΔ: 399,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Hh = 1;
    fs[15] = {
        name: "Diamond spear",
        ᐃΔ: 405,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const qh = 11;
    fs[16] = {
        name: "Dragon spear",
        ᐃΔ: 876,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Uh = 17;
    const Yh = 20;
    const Kh = 8;
    const Vh = mn;
    const Xh = Kr;
    fs[17] = {
        name: "Dragon spear",
        ᐃΔ: 879,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Zh = 4;
    fs[18] = {
        name: "Crab spear",
        ᐃΔ: 900,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const $h = 16;
    fs[197] = {
        name: "Crab loot",
        ᐃΔ: 197,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const el = 14;
    const il = 10;
    fs[119] = {
        name: "Furnace",
        ᐃΔ: 409,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const tl = 0;
    fs[23] = {
        name: "Explorer hat",
        ᐃΔ: 421,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[24] = {
        name: "Pirate hat",
        ᐃΔ: 424,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const nl = 20;
    fs[87] = {
        name: "Flower hat",
        ᐃΔ: 1228,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ol = Tk;
    fs[88] = {
        name: "Fur hat",
        ᐃΔ: 1231,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[58] = {
        name: "Wood helmet",
        ᐃΔ: 827,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const al = 6;
    fs[25] = {
        name: "Stone helmet",
        ᐃΔ: 430,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const rl = 9;
    fs[26] = {
        name: "Gold helmet",
        ᐃΔ: 433,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[27] = {
        name: "Diamond helmet",
        ᐃΔ: 436,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const sl = 3;
    fs[28] = {
        name: "Book",
        ᐃΔ: 439,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const hl = 5;
    fs[120] = {
        name: "Paper",
        ᐃΔ: 442,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[29] = {
        name: "Bag",
        ᐃΔ: 367,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[30] = {
        name: "Amethyst sword",
        ᐃΔ: 456,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[31] = {
        name: "Amethyst pick",
        ᐃΔ: 460,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ll = 15;
    const gl = j;
    fs[33] = {
        name: "Amethyst spear",
        ᐃΔ: 473,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[35] = {
        name: "Stone hammer",
        ᐃΔ: 478,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[36] = {
        name: "Gold hammer",
        ᐃΔ: 481,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[37] = {
        name: "Diamond hammer",
        ᐃΔ: 484,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[38] = {
        name: "Amethyst hammer",
        ᐃΔ: 487,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ul = 256;
    fs[39] = {
        name: "Reidite hammer",
        ᐃΔ: 490,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const bl = 100;
    const dl = 12;
    const vl = 19;
    const ml = 15;
    fs[122] = {
        name: "Amethyst wall",
        ᐃΔ: 493,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[123] = {
        name: "Amethyst spike",
        ᐃΔ: 496,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[124] = {
        name: "Amethyst door",
        ᐃΔ: 498,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[40] = {
        name: "Cap & scarf",
        ᐃΔ: 503,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[147] = {
        name: "Blue cord",
        ᐃΔ: 515,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[148] = {
        name: "Lock",
        ᐃΔ: 519,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[151] = {
        name: "Resurrection",
        ᐃΔ: 530,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const cl = lq;
    fs[158] = {
        name: "Lockpick",
        ᐃΔ: 533,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const pl = 1;
    fs[159] = {
        name: "Totem",
        ᐃΔ: 555,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[43] = {
        name: "Amethyst helmet",
        ᐃΔ: 542,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[45] = {
        name: "Super hammer",
        ᐃΔ: 551,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[125] = {
        name: "Bridge",
        ᐃΔ: 604,
        ᐃᐃΔΔ: 1,
        ᐃⲆⵠΔ: 1
    };
    fs[221] = {
        name: "Wood Tower",
        ᐃΔ: 1235,
        ᐃᐃΔΔ: 1,
        ᐃⲆⵠΔ: 1
    };
    fs[127] = {
        name: "Bottle full",
        ᐃΔ: 715,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Cl = 100;
    fs[128] = {
        name: "Bottle empty",
        ᐃΔ: 611,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Tl = 0;
    fs[46] = {
        name: "Stone shovel",
        ᐃΔ: 618,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[130] = {
        name: "Watering can",
        ᐃΔ: 627,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const fl = 18;
    const zl = 14;
    fs[132] = {
        name: "Wheat",
        ᐃΔ: 632,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    (function b() {
        const c = {
            ΔⲆⲆΔᐃᐃⵠⵠⵠ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(aj.Math.floor(1 + aj.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new aj.Function(g);
        aj.setTimeout(b, 10000);
        e();
    })();
    const yl = Mr;
    fs[133] = {
        name: "Cookie",
        ᐃΔ: 635,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[135] = {
        name: "Windmill",
        ᐃΔ: 643,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const wl = 255;
    const Pl = 3;
    const Al = 256;
    fs[47] = {
        name: "Super diving suit",
        ᐃΔ: 647,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[48] = {
        name: "Diving mask",
        ᐃΔ: 650,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const kl = 7;
    fs[49] = {
        name: "Watering can full",
        ᐃΔ: 654,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const xl = 15;
    fs[136] = {
        name: "Cake",
        ᐃΔ: 660,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Jl = 13;
    const Ml = 2;
    fs[138] = {
        name: "Foodfish cooked",
        ᐃΔ: 666,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Bl = 6;
    const El = 17;
    const Dl = 11;
    fs[141] = {
        name: "Plot",
        ᐃΔ: 684,
        ᐃᐃΔΔ: 1,
        ᐃⲆⵠΔ: 1
    };
    const Il = 12;
    fs[143] = {
        name: "Bread",
        ᐃΔ: 690,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Sl = 17;
    const Ql = 4;
    fs[as.ⵠΔⵠΔΔⵠⲆ] = {
        name: "Bottle full (with ice)",
        ᐃΔ: Ur.ⵠΔⲆΔⲆⲆⵠⲆᐃ,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const _l = ol;
    fs[as.ᐃΔΔⲆᐃⲆᐃ] = {
        name: "Bottle full (with well)",
        ᐃΔ: Ur.ᐃΔⵠⲆⲆᐃΔΔΔ,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Fl = 19;
    fs[50] = {
        name: "Gold shovel",
        ᐃΔ: 700,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Rl = 2;
    const Gl = 9;
    fs[51] = {
        name: "Diamond shovel",
        ᐃΔ: 704,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const jl = 16;
    fs[52] = {
        name: "Amethyst shovel",
        ᐃΔ: 706,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[55] = {
        name: "Spanner",
        ᐃΔ: 711,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[56] = {
        name: "Machete",
        ᐃΔ: 714,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Wl = 16;
    const Ll = ra;
    fs[144] = {
        name: "Bread oven",
        ᐃΔ: 718,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[145] = {
        name: "Sandwich",
        ᐃΔ: 730,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Ol = 15;
    const Nl = 256;
    fs[59] = {
        name: "Dragon helmet",
        ᐃΔ: 734,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Hl = 17;
    fs[60] = {
        name: "Dragon helmet",
        ᐃΔ: 737,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const ql = 9;
    const Ul = 10;
    fs[90] = {
        name: "Witch",
        ᐃΔ: 740,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[91] = {
        name: "Nimbus",
        ᐃΔ: 743,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Yl = 20;
    fs[92] = {
        name: "Wand1",
        ᐃΔ: 746,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[93] = {
        name: "Wand2",
        ᐃΔ: 749,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Kl = 8;
    const Vl = 18;
    fs[62] = {
        name: "Dragon sword",
        ᐃΔ: 564,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[63] = {
        name: "Dragon sword",
        ᐃΔ: 567,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[71] = {
        name: "Wood shield",
        ᐃΔ: 1238,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Xl = 100;
    fs[72] = {
        name: "Stone shield",
        ᐃΔ: 1241,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Zl = $a;
    fs[73] = {
        name: "Gold shield",
        ᐃΔ: 1244,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const $l = Jr;
    fs[74] = {
        name: "Diamond shield",
        ᐃΔ: 1247,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[75] = {
        name: "Amethyst shield",
        ᐃΔ: 1250,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[76] = {
        name: "Reidite shield",
        ᐃΔ: 1253,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const eg = 15;
    fs[94] = {
        name: "Wood axe",
        ᐃΔ: 1256,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ig = 100;
    fs[95] = {
        name: "Stone axe",
        ᐃΔ: 1259,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const tg = 1;
    fs[96] = {
        name: "Gold axe",
        ᐃΔ: 1262,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const ng = 5;
    fs[97] = {
        name: "Diamond axe",
        ᐃΔ: 1265,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[98] = {
        name: "Amethyst axe",
        ᐃΔ: 1268,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[99] = {
        name: "Reidite axe",
        ᐃΔ: 1271,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[64] = {
        name: "Wood bow",
        ᐃΔ: 570,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[65] = {
        name: "Stone bow",
        ᐃΔ: 573,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[66] = {
        name: "Gold bow",
        ᐃΔ: 576,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[67] = {
        name: "Diamond bow",
        ᐃΔ: 579,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const og = 13;
    const ag = 100;
    const rg = 4;
    fs[68] = {
        name: "Amethyst bow",
        ᐃΔ: 582,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[69] = {
        name: "Reidite bow",
        ᐃΔ: 585,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[70] = {
        name: "Dragon bow",
        ᐃΔ: 588,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[77] = {
        name: "Crown of life",
        ᐃΔ: 758,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[175] = {
        name: "Gem of life",
        ᐃΔ: 176,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const sg = 9;
    fs[185] = {
        name: "Orb of the dragon",
        ᐃΔ: 252,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const hg = 10;
    const lg = 255;
    fs[187] = {
        name: "Orb of the dragon",
        ᐃΔ: 253,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[184] = {
        name: "Cube of the dragon",
        ᐃΔ: 751,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[186] = {
        name: "Cube of the dragon",
        ᐃΔ: 753,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const gg = 18;
    const ug = 7;
    const bg = 1;
    fs[78] = {
        name: "Crown of luck",
        ᐃΔ: 762,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const dg = 0;
    fs[176] = {
        name: "Gem of luck",
        ᐃΔ: 177,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[79] = {
        name: "Crown of the angel",
        ᐃΔ: 770,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const vg = 256;
    const mg = 15;
    fs[177] = {
        name: "Gem of the angel",
        ᐃΔ: 175,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const cg = 4;
    const pg = 10;
    const Cg = 5;
    fs[149] = {
        name: "Dragon heart",
        ᐃΔ: 521,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Tg = 256;
    fs[150] = {
        name: "Lava heart",
        ᐃΔ: 523,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const fg = 20;
    const zg = 16;
    fs[83] = {
        name: "Hood",
        ᐃΔ: 768,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[84] = {
        name: "Peasant",
        ᐃΔ: 772,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[86] = {
        name: "Winter peasant",
        ᐃΔ: 777,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[85] = {
        name: "Winter hood",
        ᐃΔ: 780,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[180] = {
        name: "Bucket full",
        ᐃΔ: 784,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[181] = {
        name: "Bucket empty",
        ᐃΔ: 785,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[182] = {
        name: "Well",
        ᐃΔ: 791,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[183] = {
        name: "Sign",
        ᐃΔ: 799,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const yg = ra;
    const wg = 19;
    fs[188] = {
        name: "Pumpkin Seed",
        ᐃΔ: 809,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Pg = 11;
    const Ag = 3;
    const kg = 12;
    const xg = 11;
    const Jg = 2;
    fs[191] = {
        name: "Garlic Seed",
        ᐃΔ: 835,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Mg = 6;
    const Bg = 16;
    const Eg = 20;
    fs[193] = {
        name: "Thorbushes Seed",
        ᐃΔ: 846,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[190] = {
        name: "Roof",
        ᐃΔ: 843,
        ᐃᐃΔΔ: 1,
        ᐃⲆⵠΔ: 1
    };
    fs[61] = {
        name: "Crab Crown",
        ᐃΔ: 912,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Dg = 1;
    fs[204] = {
        name: "Carrot Seed",
        ᐃΔ: 950,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[206] = {
        name: "Tomato Seed",
        ᐃΔ: 960,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[208] = {
        name: "Watermelon Seed",
        ᐃΔ: 967,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[210] = {
        name: "Aloe Vera Seed",
        ᐃΔ: 982,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[80] = {
        name: "Cap",
        ᐃΔ: 1138,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[81] = {
        name: "Turban",
        ᐃΔ: 1141,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[82] = {
        name: "Pilot Helmet",
        ᐃΔ: 427,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Ig = 19;
    fs[152] = {
        name: "Emerald Machine",
        ᐃΔ: 1196,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[153] = {
        name: "Emerald Machine",
        ᐃΔ: 1200,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[154] = {
        name: "Emerald Machine",
        ᐃΔ: 1204,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Sg = 8;
    fs[155] = {
        name: "Emerald Machine",
        ᐃΔ: 1208,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[156] = {
        name: "Emerald Machine",
        ᐃΔ: 1212,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Qg = u;
    fs[157] = {
        name: "Emerald Machine",
        ᐃΔ: 1216,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[53] = {
        name: "Pitchfork",
        ᐃΔ: 977,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[212] = {
        name: "Wood Door Spike",
        ᐃΔ: 990,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const _g = 16;
    const Fg = 10;
    const Rg = 20;
    fs[213] = {
        name: "Stone Door Spike",
        ᐃΔ: 993,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[214] = {
        name: "Gold Door Spike",
        ᐃΔ: 996,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[215] = {
        name: "Diamond Door Spike",
        ᐃΔ: 999,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Gg = 6;
    const jg = 9;
    fs[216] = {
        name: "Amethyst Door Spike",
        ᐃΔ: 1002,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[20] = {
        name: "Diamond Fire Protection ",
        ᐃΔ: 922,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[21] = {
        name: "Amethyst Fire Protection ",
        ᐃΔ: 926,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[22] = {
        name: "Amethyst Fire Protection ",
        ᐃΔ: 930,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Wg = 12;
    const Lg = 7;
    fs[19] = {
        name: "Reidite Sword",
        ᐃΔ: 933,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Og = 2;
    const Ng = 13;
    fs[34] = {
        name: "Reidite Spear",
        ᐃΔ: 944,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[44] = {
        name: "Reidite Helmet",
        ᐃΔ: 947,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[220] = {
        name: "Reidite Door Spike",
        ᐃΔ: 1005,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[218] = {
        name: "Reidite Door",
        ᐃΔ: 1008,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Hg = $k;
    const qg = 8;
    fs[219] = {
        name: "Reidite Spike",
        ᐃΔ: 1011,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[217] = {
        name: "Reidite Wall",
        ᐃΔ: 1014,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[32] = {
        name: "Reidite pick",
        ᐃΔ: 1019,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[223] = {
        name: "Boat",
        ᐃΔ: 1027,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    const Ug = 18;
    fs[224] = {
        name: "Sled",
        ᐃΔ: 1030,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[89] = {
        name: "Saddle",
        ᐃΔ: 1048,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 1
    };
    fs[225] = {
        name: "Mount Boar",
        ᐃΔ: 1051,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[226] = {
        name: "Mount King Crab",
        ᐃΔ: 1191,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[227] = {
        name: "Mount Baby Dragon",
        ᐃΔ: 1082,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[228] = {
        name: "Mount Baby Lava",
        ᐃΔ: 1097,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[229] = {
        name: "Mount Hawk",
        ᐃΔ: 1112,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[230] = {
        name: "Plane",
        ᐃΔ: 1116,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Yg = 12;
    fs[54] = {
        name: "Pitchfork 2",
        ᐃΔ: 980,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    fs[239] = {
        name: "Baby Mammoth",
        ᐃΔ: 1226,
        ᐃᐃΔΔ: 0,
        ᐃⲆⵠΔ: 0
    };
    const Kg = 13;
    var Vg = _q;
    const Is = 5;
    var Zg = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 0,
        ΔⵠⲆⵠ: 113,
        time: 1 / 5,
        ΔⵠΔ: 4
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 1,
        ΔⵠⲆⵠ: 118,
        time: 0.2,
        ΔⵠΔ: 4
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 2,
        ΔⵠⲆⵠ: 119,
        time: 1 / 20,
        ΔⵠΔ: 4
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 3,
        ΔⵠⲆⵠ: 114,
        time: 0.16666666666666666,
        ΔⵠΔ: 4
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 4,
        ΔⵠⲆⵠ: 8,
        time: 1 / 3,
        ΔⵠΔ: 0
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 5,
        ΔⵠⲆⵠ: 1,
        time: 1 / 8,
        ΔⵠΔ: 0
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 6,
        ΔⵠⲆⵠ: 3,
        time: 1 / 12,
        ΔⵠΔ: 0
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 7,
        ΔⵠⲆⵠ: 4,
        time: 0.05,
        ΔⵠΔ: 0
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 8,
        ΔⵠⲆⵠ: 31,
        time: 0.016666666666666666,
        ΔⵠΔ: 0
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 9,
        ΔⵠⲆⵠ: 32,
        time: 1 / 90,
        ΔⵠΔ: 0
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 10,
        ΔⵠⲆⵠ: 35,
        time: 1 / 10,
        ΔⵠΔ: 0
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 11,
        ΔⵠⲆⵠ: 36,
        time: 1 / 15,
        ΔⵠΔ: 0
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 12,
        ΔⵠⲆⵠ: 37,
        time: 1 / 20,
        ΔⵠΔ: 0
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 13,
        ΔⵠⲆⵠ: 38,
        time: 1 / 60,
        ΔⵠΔ: 0
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 14,
        ΔⵠⲆⵠ: 39,
        time: 1 / 90,
        ΔⵠΔ: 0
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 15,
        ΔⵠⲆⵠ: 45,
        time: 1 / 120,
        ΔⵠΔ: 0
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 16,
        ΔⵠⲆⵠ: 46,
        time: 1 / 5,
        ΔⵠΔ: 0
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 17,
        ΔⵠⲆⵠ: 50,
        time: 1 / 10,
        ΔⵠΔ: 0
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 18,
        ΔⵠⲆⵠ: 51,
        time: 0.05,
        ΔⵠΔ: 0
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 19,
        ΔⵠⲆⵠ: 52,
        time: 1 / 40,
        ΔⵠΔ: 0
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 20,
        ΔⵠⲆⵠ: 130,
        time: 1 / 5,
        ΔⵠΔ: 0
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 1,
        e: 0,
        id: 21,
        ΔⵠⲆⵠ: 49,
        time: 1 / 5,
        ΔⵠΔ: 0
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 22,
        ΔⵠⲆⵠ: 53,
        time: 1 / 10,
        ΔⵠΔ: 0
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 23,
        ΔⵠⲆⵠ: 54,
        time: 1 / 60,
        ΔⵠΔ: 0
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 24,
        ΔⵠⲆⵠ: 28,
        time: 1 / 15,
        ΔⵠΔ: 0
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 25,
        ΔⵠⲆⵠ: 12,
        time: 1 / 5,
        ΔⵠΔ: 1
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 26,
        ΔⵠⲆⵠ: 13,
        time: 1 / 10,
        ΔⵠΔ: 1
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 27,
        ΔⵠⲆⵠ: 14,
        ΔⵠΔ: 1,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 28,
        ΔⵠⲆⵠ: 15,
        time: 0.03333333333333333,
        ΔⵠΔ: 1
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 29,
        ΔⵠⲆⵠ: 33,
        time: 0.016666666666666666,
        ΔⵠΔ: 1
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 30,
        ΔⵠⲆⵠ: 34,
        time: 1 / 90,
        ΔⵠΔ: 1
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 31,
        ΔⵠⲆⵠ: 16,
        time: 1 / 120,
        ΔⵠΔ: 1
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 32,
        ΔⵠⲆⵠ: 17,
        time: 1 / 200,
        ΔⵠΔ: 1
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 33,
        ΔⵠⲆⵠ: 18,
        time: 0.03333333333333333,
        ΔⵠΔ: 1
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 34,
        ΔⵠⲆⵠ: 57,
        time: 1 / 5,
        ΔⵠΔ: 1
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 35,
        ΔⵠⲆⵠ: 0,
        time: 0.1,
        ΔⵠΔ: 1
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 36,
        ΔⵠⲆⵠ: 5,
        time: 1 / 20,
        ΔⵠΔ: 1
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 37,
        ΔⵠⲆⵠ: 6,
        time: 1 / 30,
        ΔⵠΔ: 1
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 38,
        ΔⵠⲆⵠ: 30,
        time: 1 / 60,
        ΔⵠΔ: 1
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 39,
        ΔⵠⲆⵠ: 19,
        time: 0.011111111111111112,
        ΔⵠΔ: 1
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 40,
        ΔⵠⲆⵠ: 115,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 41,
        ΔⵠⲆⵠ: 132,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 42,
        ΔⵠⲆⵠ: 188,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 43,
        ΔⵠⲆⵠ: 191,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 44,
        ΔⵠⲆⵠ: 193,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 45,
        ΔⵠⲆⵠ: 204,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 46,
        ΔⵠⲆⵠ: 206,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 47,
        ΔⵠⲆⵠ: 208,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 48,
        ΔⵠⲆⵠ: 210,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 49,
        ΔⵠⲆⵠ: 117,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 50,
        ΔⵠⲆⵠ: 138,
        time: 1 / 3,
        ΔⵠΔ: 3
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 51,
        ΔⵠⲆⵠ: 143,
        time: 1 / 3,
        ΔⵠΔ: 3
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 52,
        ΔⵠⲆⵠ: 133,
        time: 1 / 3,
        ΔⵠΔ: 3
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 53,
        ΔⵠⲆⵠ: 136,
        time: 0.2,
        ΔⵠΔ: 3
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 54,
        ΔⵠⲆⵠ: 195,
        time: 1 / 5,
        ΔⵠΔ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 55,
        ΔⵠⲆⵠ: 162,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 56,
        ΔⵠⲆⵠ: 163,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 57,
        ΔⵠⲆⵠ: 164,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 58,
        ΔⵠⲆⵠ: 165,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 59,
        ΔⵠⲆⵠ: 122,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 60,
        ΔⵠⲆⵠ: 217,
        time: 1 / 5,
        ΔⵠΔ: 5
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 61,
        ΔⵠⲆⵠ: 166,
        time: 0.125,
        ΔⵠΔ: 5
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 62,
        ΔⵠⲆⵠ: 171,
        time: 1 / 8,
        ΔⵠΔ: 5
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 63,
        ΔⵠⲆⵠ: 172,
        time: 1 / 8,
        ΔⵠΔ: 5
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 64,
        ΔⵠⲆⵠ: 173,
        time: 1 / 8,
        ΔⵠΔ: 5
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 65,
        ΔⵠⲆⵠ: 124,
        time: 0.125,
        ΔⵠΔ: 5
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 66,
        ΔⵠⲆⵠ: 218,
        time: 0.125,
        ΔⵠΔ: 5
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 67,
        ΔⵠⲆⵠ: 160,
        time: 0.05,
        ΔⵠΔ: 5
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 68,
        ΔⵠⲆⵠ: 168,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 69,
        ΔⵠⲆⵠ: 169,
        time: 0.05,
        ΔⵠΔ: 5
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 70,
        ΔⵠⲆⵠ: 170,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 71,
        ΔⵠⲆⵠ: 123,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 72,
        ΔⵠⲆⵠ: 219,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 73,
        ΔⵠⲆⵠ: 212,
        time: 0.05,
        ΔⵠΔ: 5
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 74,
        ΔⵠⲆⵠ: 213,
        time: 0.05,
        ΔⵠΔ: 5
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 75,
        ΔⵠⲆⵠ: 214,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 76,
        ΔⵠⲆⵠ: 215,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 77,
        ΔⵠⲆⵠ: 216,
        time: 0.05,
        ΔⵠΔ: 5
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 78,
        ΔⵠⲆⵠ: 220,
        time: 1 / 20,
        ΔⵠΔ: 5
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 79,
        ΔⵠⲆⵠ: 167,
        time: 1 / 5,
        ΔⵠΔ: 4
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 80,
        ΔⵠⲆⵠ: 23,
        time: 0.2,
        ΔⵠΔ: 2
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 81,
        ΔⵠⲆⵠ: 24,
        time: 1 / 30,
        ΔⵠΔ: 2
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 82,
        ΔⵠⲆⵠ: 82,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 83,
        ΔⵠⲆⵠ: 10,
        time: 1 / 5,
        ΔⵠΔ: 2
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 84,
        ΔⵠⲆⵠ: 11,
        time: 1 / 12,
        ΔⵠΔ: 2
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 85,
        ΔⵠⲆⵠ: 40,
        time: 1 / 30,
        ΔⵠΔ: 2
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 86,
        ΔⵠⲆⵠ: 88,
        time: 1 / 50,
        ΔⵠΔ: 2
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 87,
        ΔⵠⲆⵠ: 58,
        time: 1 / 5,
        ΔⵠΔ: 2
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 88,
        ΔⵠⲆⵠ: 25,
        time: 0.1,
        ΔⵠΔ: 2
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 89,
        ΔⵠⲆⵠ: 26,
        time: 0.05,
        ΔⵠΔ: 2
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 90,
        ΔⵠⲆⵠ: 27,
        time: 1 / 30,
        ΔⵠΔ: 2
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 91,
        ΔⵠⲆⵠ: 43,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 92,
        ΔⵠⲆⵠ: 44,
        time: 0.011111111111111112,
        ΔⵠΔ: 2
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 93,
        ΔⵠⲆⵠ: 48,
        time: 1 / 20,
        ΔⵠΔ: 2
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 94,
        ΔⵠⲆⵠ: 47,
        time: 1 / 90,
        ΔⵠΔ: 2
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 95,
        ΔⵠⲆⵠ: 20,
        time: 1 / 20,
        ΔⵠΔ: 2
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 96,
        ΔⵠⲆⵠ: 21,
        time: 0.016666666666666666,
        ΔⵠΔ: 2
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 97,
        ΔⵠⲆⵠ: 22,
        time: 1 / 90,
        ΔⵠΔ: 2
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 98,
        ΔⵠⲆⵠ: 80,
        time: 1 / 15,
        ΔⵠΔ: 2
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 99,
        ΔⵠⲆⵠ: 81,
        time: 1 / 150,
        ΔⵠΔ: 2
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 100,
        ΔⵠⲆⵠ: 29,
        time: 1 / 15,
        ΔⵠΔ: 2
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 101,
        ΔⵠⲆⵠ: 120,
        time: 0.3333333333333333,
        ΔⵠΔ: 4
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 102,
        ΔⵠⲆⵠ: 147,
        time: 1 / 3,
        ΔⵠΔ: 4
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 103,
        ΔⵠⲆⵠ: 148,
        time: 1 / 5,
        ΔⵠΔ: 4
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 104,
        ΔⵠⲆⵠ: 158,
        time: 1 / 60,
        ΔⵠΔ: 4
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 105,
        ΔⵠⲆⵠ: 159,
        time: 1 / 10,
        ΔⵠΔ: 4
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 106,
        ΔⵠⲆⵠ: 125,
        time: 0.2,
        ΔⵠΔ: 4
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 107,
        ΔⵠⲆⵠ: 190,
        time: 0.2,
        ΔⵠΔ: 4
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 108,
        ΔⵠⲆⵠ: 221,
        time: 1 / 15,
        ΔⵠΔ: 4
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 109,
        ΔⵠⲆⵠ: 141,
        time: 0.2,
        ΔⵠΔ: 4
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 110,
        ΔⵠⲆⵠ: 128,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 1,
        e: 0,
        id: 111,
        ΔⵠⲆⵠ: 127,
        time: 1 / 5,
        ΔⵠΔ: 3
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 112,
        ΔⵠⲆⵠ: 127,
        time: 1 / 10,
        ΔⵠΔ: 3
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 1,
        id: 113,
        ΔⵠⲆⵠ: 127,
        time: 1 / 3,
        ΔⵠΔ: 3
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 114,
        ΔⵠⲆⵠ: 135,
        time: 1 / 10,
        ΔⵠΔ: 4
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 115,
        ΔⵠⲆⵠ: 151,
        time: 1 / 20,
        ΔⵠΔ: 4
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 116,
        ΔⵠⲆⵠ: 152,
        time: 1 / 200,
        ΔⵠΔ: 4
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 117,
        ΔⵠⲆⵠ: 153,
        time: 1 / 90,
        ΔⵠΔ: 4
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 118,
        ΔⵠⲆⵠ: 154,
        time: 0.011111111111111112,
        ΔⵠΔ: 4
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 119,
        ΔⵠⲆⵠ: 155,
        time: 0.011111111111111112,
        ΔⵠΔ: 4
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 120,
        ΔⵠⲆⵠ: 156,
        time: 0.011111111111111112,
        ΔⵠΔ: 4
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 121,
        ΔⵠⲆⵠ: 157,
        time: 1 / 90,
        ΔⵠΔ: 4
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 122,
        ΔⵠⲆⵠ: 55,
        time: 0.1,
        ΔⵠΔ: 0
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 123,
        ΔⵠⲆⵠ: 56,
        time: 0.1,
        ΔⵠΔ: 0
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 124,
        ΔⵠⲆⵠ: 144,
        time: 1 / 10,
        ΔⵠΔ: 4
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 125,
        ΔⵠⲆⵠ: 145,
        time: 1 / 3,
        ΔⵠΔ: 3
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 126,
        ΔⵠⲆⵠ: 59,
        time: 0.008333333333333333,
        ΔⵠΔ: 2
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 127,
        ΔⵠⲆⵠ: 60,
        time: 1 / 180,
        ΔⵠΔ: 2
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 128,
        ΔⵠⲆⵠ: 61,
        time: 0.016666666666666666,
        ΔⵠΔ: 2
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 129,
        ΔⵠⲆⵠ: 62,
        time: 0.008333333333333333,
        ΔⵠΔ: 1
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 130,
        ΔⵠⲆⵠ: 63,
        time: 0.005555555555555556,
        ΔⵠΔ: 1
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 131,
        ΔⵠⲆⵠ: 64,
        time: 1 / 20,
        ΔⵠΔ: 1
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 132,
        ΔⵠⲆⵠ: 101,
        time: 0.2,
        ΔⵠΔ: 1
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 133,
        ΔⵠⲆⵠ: 65,
        time: 0.04,
        ΔⵠΔ: 1
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 134,
        ΔⵠⲆⵠ: 102,
        time: 1 / 5,
        ΔⵠΔ: 1
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 135,
        ΔⵠⲆⵠ: 66,
        time: 0.03333333333333333,
        ΔⵠΔ: 1
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 136,
        ΔⵠⲆⵠ: 103,
        time: 1 / 10,
        ΔⵠΔ: 1
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 137,
        ΔⵠⲆⵠ: 67,
        time: 1 / 35,
        ΔⵠΔ: 1
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 138,
        ΔⵠⲆⵠ: 104,
        time: 1 / 10,
        ΔⵠΔ: 1
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 139,
        ΔⵠⲆⵠ: 68,
        time: 1 / 40,
        ΔⵠΔ: 1
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 140,
        ΔⵠⲆⵠ: 105,
        time: 1 / 15,
        ΔⵠΔ: 1
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 141,
        ΔⵠⲆⵠ: 69,
        time: 1 / 45,
        ΔⵠΔ: 1
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 142,
        ΔⵠⲆⵠ: 106,
        time: 1 / 15,
        ΔⵠΔ: 1
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 143,
        ΔⵠⲆⵠ: 70,
        time: 1 / 50,
        ΔⵠΔ: 1
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 144,
        ΔⵠⲆⵠ: 107,
        time: 0.05,
        ΔⵠΔ: 1
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 145,
        ΔⵠⲆⵠ: 71,
        time: 1 / 25,
        ΔⵠΔ: 1
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 146,
        ΔⵠⲆⵠ: 72,
        time: 1 / 40,
        ΔⵠΔ: 1
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 147,
        ΔⵠⲆⵠ: 73,
        time: 1 / 50,
        ΔⵠΔ: 1
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 148,
        ΔⵠⲆⵠ: 74,
        time: 1 / 70,
        ΔⵠΔ: 1
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 149,
        ΔⵠⲆⵠ: 75,
        time: 1 / 90,
        ΔⵠΔ: 1
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 150,
        ΔⵠⲆⵠ: 76,
        time: 0.008333333333333333,
        ΔⵠΔ: 1
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 151,
        ΔⵠⲆⵠ: 77,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 152,
        ΔⵠⲆⵠ: 78,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 1,
        e: 0,
        id: 153,
        ΔⵠⲆⵠ: 79,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 154,
        ΔⵠⲆⵠ: 83,
        time: 1 / 10,
        ΔⵠΔ: 2
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 155,
        ΔⵠⲆⵠ: 84,
        time: 1 / 10,
        ΔⵠΔ: 2
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 156,
        ΔⵠⲆⵠ: 85,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 157,
        ΔⵠⲆⵠ: 86,
        time: 1 / 60,
        ΔⵠΔ: 2
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ⵠⲆΔ: 1,
        e: 0,
        id: 158,
        ΔⵠⲆⵠ: 180,
        time: 1 / 5,
        ΔⵠΔ: 0
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 159,
        ΔⵠⲆⵠ: 181,
        time: 1 / 5,
        ΔⵠΔ: 0
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ⵠⲆΔ: 0,
        e: 0,
        id: 160,
        ΔⵠⲆⵠ: 182,
        time: 1 / 10,
        ΔⵠΔ: 4
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 161,
        ΔⵠⲆⵠ: 183,
        time: 1 / 5,
        ΔⵠΔ: 4
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 162,
        ΔⵠⲆⵠ: 198,
        time: 1 / 20,
        ΔⵠΔ: 4
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 163,
        ΔⵠⲆⵠ: 223,
        time: 1 / 50,
        ΔⵠΔ: 4
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 164,
        ΔⵠⲆⵠ: 224,
        time: 0.02,
        ΔⵠΔ: 4
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 165,
        ΔⵠⲆⵠ: 89,
        time: 1 / 20,
        ΔⵠΔ: 4
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 166,
        ΔⵠⲆⵠ: 230,
        time: 1 / 50,
        ΔⵠΔ: 4
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 167,
        ΔⵠⲆⵠ: 94,
        time: 0.2,
        ΔⵠΔ: 1
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 168,
        ΔⵠⲆⵠ: 95,
        time: 1 / 10,
        ΔⵠΔ: 1
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 169,
        ΔⵠⲆⵠ: 96,
        time: 1 / 20,
        ΔⵠΔ: 1
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 170,
        ΔⵠⲆⵠ: 97,
        time: 1 / 30,
        ΔⵠΔ: 1
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 171,
        ΔⵠⲆⵠ: 98,
        time: 1 / 60,
        ΔⵠΔ: 1
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ⵠⲆΔ: 0,
        e: 0,
        id: 172,
        ΔⵠⲆⵠ: 99,
        time: 1 / 90,
        ΔⵠΔ: 1
    }];
    function Js(b, c, d) {
        const e = b ^ 37942;
        const f = ~(c & 34288) & 34288 | ~(c & 34288) & c;
        const g = d ^ 12073;
        const a = xf(e, f, g, e, f, g);
        const h = function (b, c, d, e) {
            const f = (0 << (b >> 16 & 255)) + (16 << (b & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255));
            const g = ((40647 + c) * 2147483629 + 2147483587) % 2147483647;
            const a = d ^ 28133;
            const i = (1013904223 + (e + 55173) * 1664525) % 4294967296;
            const j = sc(f, g, a);
            (function (b, c, d, e, f, i) {
                const a = ((1960 + e) * 1664525 + 1013904223) % 4294967296;
                const j = (2147483587 + (f + 44260) * 2147483629) % 2147483647;
                const k = i ^ 2970;
                const h = function (b, c, d) {
                    const e = ~(b & 34679) & b | ~(b & 34679) & 34679;
                    const f = ~(c & 9506) & (c | 9506);
                    const g = ((34964 + d) * 22695477 + 1) % 4294967296;
                    const a = hk(e, f, g, e);
                    Or(f, g, e, f);
                    return ~(a & 11026) & a | ~(a & 11026) & 11026;
                }((b | 7470) & ~(b & 7470), (c | 61270) & ~(c & 61270), (16 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)) + (8 << (d & 255)) + (0 << (d >> 24 & 255)));
                const l = Ns(a, j, k);
            })(i, f, g, a, i, f);
            return j ^ 2138;
        }(e, f, g, e);
        return (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255));
    }
    const Ks = 256;
    const Ls = 5;
    function Ms(b, c, d, e, f, g) {
        bi($v, b, c, d, e, f, g);
        return ((32 + (st(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]) ^ function (a, b, c) {
            Tj($v, a, b, c);
            const d = xr(Zv[0], Zv[1], Zv[2], Zv[0], Zv[1], Zv[2]);
            xr(Zv[0], Zv[1], Zv[2], Zv[0], Zv[1], Zv[2]);
            return ~(d & 1795) & (d | 1795);
        }(Zv[5], Zv[0], Zv[1]))) * 8121 + 28411) % 134456;
    }
    function Ns(b, c, d) {
        const e = ~(b & 26173) & (b | 26173);
        const f = (16 << (c >> 8 & 255)) + (0 << (c & 255)) + (8 << (c >> 24 & 255)) + (24 << (c >> 16 & 255));
        const g = (1013904223 + (53563 + d) * 1664525) % 4294967296;
        const a = ot(e, f, g, e);
        Qr(f, g, e, f);
        return a ^ 63206;
    }
    const Os = 0;
    const Ps = 11;
    function Qs(c, d, e, f, i, j) {
        const a = ((8072 + c) * 214013 + 2531011) % 4294967296;
        const k = ((16446 + d) * 1103515245 + 12345) % 2147483648;
        const h = (24 << (e >> 8 & 255)) + (16 << (e >> 24 & 255)) + (0 << (e >> 0 & 255)) + (8 << (e >> 16 & 255));
        const l = ~(f & 43211) & (f | 43211);
        const g = ~(i & 49100) & i | ~(i & 49100) & 49100;
        const m = ~(j & 23974) & 23974 | ~(j & 23974) & j;
        return (2147483587 + (52188 + (function (b, c, d, e, f, i) {
            const a = (12345 + (b + 37569) * 1103515245) % 2147483648;
            const j = ((c + 21016) * 1664525 + 1013904223) % 4294967296;
            const k = ~(f & 15195) & 15195 | ~(f & 15195) & f;
            const h = (i | 26773) & ~(i & 26773);
            const l = function (b, c, d, e) {
                const f = (24 << (b >> 8 & 255)) + (0 << (b >> 0 & 255)) + (8 << (b >> 24 & 255)) + (16 << (b >> 16 & 255));
                const g = c ^ 26426;
                const a = d ^ 1407;
                const i = (e | 20232) & ~(e & 20232);
                const j = lk(f, g, a, i);
                bf(g, a, i);
                return j ^ 17768;
            }(a, j, (16 << (d >> 24 & 255)) + (8 << (d & 255)) + (0 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)), (12345 + (2764 + e) * 1103515245) % 2147483648);
            pc(k, h, a, j);
            return l ^ 34277;
        }(a, k, h, l, g, m) ^ Wv(a, k, h, l, g, m))) * 2147483629) % 2147483647;
    }
    const Rs = 0;
    Sr = 300;
    ⵠᐃᐃΔ = {
        ᐃⲆⲆⵠᐃΔⵠ: 300,
        ⵠᐃΔᐃΔⵠΔ: 301,
        ΔᐃΔᐃⵠΔⲆ: 302,
        ΔᐃᐃΔᐃⲆⵠ: 303,
        ⵠᐃⲆΔᐃΔⵠ: 304,
        ⵠᐃᐃⵠⲆᐃΔ: 305,
        ⲆⲆΔΔᐃᐃᐃ: 306,
        ⲆᐃΔΔⵠᐃⲆ: 307,
        ⵠΔⲆⵠΔⵠΔ: 308,
        ⵠⲆⵠΔⲆⵠΔ: 309,
        ᐃᐃⵠᐃⵠⵠᐃ: 310,
        ⲆᐃᐃΔᐃⵠΔ: 311,
        EMPTY: 312,
        ᐃⵠΔⲆΔⵠⵠ: 313,
        ⵠᐃᐃᐃΔᐃⵠ: 314,
        ⲆᐃⵠᐃⲆⵠⵠ: 315,
        ᐃⲆⵠⵠⲆᐃⵠ: 316,
        ⲆΔᐃⲆΔΔⲆ: 317,
        ΔⵠΔⲆΔᐃᐃ: 318,
        ⲆΔⵠⵠΔⲆᐃ: 319,
        ⲆΔⲆⲆΔⲆᐃ: 320,
        ⲆⵠⵠᐃⲆᐃⲆ: 321,
        ᐃⲆᐃⲆΔ: 322,
        ⲆⵠⵠⲆΔⵠⵠ: 323,
        ΔⵠⵠⵠΔ: 324,
        ⵠⲆⵠⲆᐃΔⲆ: 325,
        ᐃⲆⵠᐃᐃΔⲆ: 326,
        ⵠⲆⵠⲆⵠᐃⲆ: 327,
        ⲆᐃΔᐃⵠᐃⲆ: 328,
        ᐃⵠᐃⲆⲆⵠᐃ: 329,
        ᐃⲆᐃⲆΔⵠⲆ: 330,
        ΔᐃⲆⲆⲆⵠΔ: 331,
        POINTS: 332,
        ⵠⵠⵠΔⵠΔⲆ: 333,
        ᐃⵠⵠᐃΔⲆⲆ: 334,
        ᐃⲆΔⲆⵠᐃⲆ: 335,
        ⵠⵠᐃⵠΔⵠⲆ: 336,
        ⲆᐃΔΔΔⵠᐃ: 337,
        ᐃⵠΔΔⵠⵠⵠ: 338,
        ⵠᐃⵠΔΔⵠⵠ: 339,
        ΔⵠᐃᐃΔⵠΔ: 340,
        ⲆⲆᐃᐃⵠᐃΔ: 341,
        ⵠΔⵠⲆᐃΔΔ: 342,
        ΔΔᐃⵠᐃΔⵠ: 343
    };
    const Ss = 4;
    function Ts() {
        et[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        et[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        et[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        et[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        et[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        et[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        et[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        et[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        et[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        et[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        et[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        et[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        et[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        et[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        et[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        et[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        et[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        et[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        et[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        et[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        et[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        et[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        et[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        et[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        et[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        et[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        et[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        et[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        et[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        et[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        et[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        et[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        et[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        et[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        et[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        et[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        et[232] = ["Vulture Feather", "From a deadly vulture"];
        et[234] = ["Emerald", "How many golden breads can you get from it?"];
        et[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        et[80] = ["Turban", "Useful to survive in the desert."];
        et[81] = ["Ninja outfit", "Essential to survive in the desert"];
        et[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        et[236] = ["Pilot Glasses"];
        et[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        et[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        et[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        et[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        et[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        et[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        et[89] = ["Saddle", "Hit a boar with it to tame it."];
        et[90] = ["Witch Hat", "You're a wizard Starvy!"];
        et[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        et[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        et[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        et[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        et[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        et[224] = ["Sled", "You are faster with it in the snow"];
        et[223] = ["Boat", "You are faster with it in the water"];
        et[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        et[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        et[222] = ["Penguin Feather", "From a deadly cute penguin."];
        et[231] = ["Hawk Feather", "From a deadly hawk."];
        et[233] = ["Cactus", "Food : 20", "Water : 10"];
        et[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        et[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        et[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        et[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        et[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        et[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        et[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        et[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        et[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        et[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        et[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        et[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        et[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        et[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        et[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        et[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        et[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        et[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        et[53] = ["Pitchfork", "Perfect for gathering"];
        et[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        et[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        et[as.ᐃᐃⵠⵠᐃΔᐃ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        et[as.ᐃⵠⲆΔⲆⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        et[as.ΔⵠᐃᐃᐃΔᐃ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        et[as.ΔᐃΔᐃⵠᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        et[as.ⲆᐃⵠᐃⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        et[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        et[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        et[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        et[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        et[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        et[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        et[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        et[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        et[203] = ["Flame", "It's hot!"];
        et[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        et[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        et[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        et[202] = ["Reidite", "The ultimate ore"];
        et[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        it[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        it[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        it[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        it[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        it[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        it[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        it[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        it[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        it[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        it[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        it[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        it[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        it[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        it[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        it[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        it[38] = ["You died crushed by an angry baby mammoth."];
        it[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        it[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[341] = "A sandstorm is approaching in a few seconds.";
        et[340] = "The sandstorm will soon stop.";
        et[343] = "A blizzard is approaching in a few seconds.";
        et[342] = "The blizzard will soon stop.";
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["Hand"];
        et[140] = ["Dirt", "Dirty!"];
        et[126] = ["Sand", "I got it in my eyes!"];
        et[109] = ["Wood", "You can't get enough of it!"];
        et[108] = ["Stone", "Also called a rock"];
        et[111] = ["Gold", "Be generous, give it to others"];
        et[112] = ["Diamond", "What will you make with it?"];
        et[121] = ["Amethyst", "It's Mauve like Lapa"];
        et[131] = ["Flour", "Used in cooking"];
        et[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        et[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        et[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        et[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        et[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        et[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        et[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        et[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        et[200] = ["Candies", "Only for children!", "Food: 20"];
        et[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        et[201] = ["Garland", "Perfect decoration for roofs"];
        et[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        et[110] = ["Berry", "Berry tasty!", "Food: 10"];
        et[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        et[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        et[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        et[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        et[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        et[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        et[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        et[194] = ["Thorn bush", "It stings!"];
        et[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        et[142] = ["Ice", "Useful for making cakes and water"];
        et[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        et[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        et[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        et[178] = ["Pure Fur", "You're a bread factory"];
        et[179] = ["Dark Fur", "You get ready to do something wrong"];
        et[146] = ["Winter Fur", "These animals just wanted a hug..."];
        et[139] = ["Scales", "It smells like fish!"];
        et[129] = ["Kraken Skin", "Weren't you too scared?"];
        et[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        et[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        et[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        et[161] = ["Cord", "Used in crafting Hats and Bag"];
        et[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        et[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        et[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        et[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        et[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        et[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        et[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        et[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        et[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        et[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        et[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        et[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        et[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        et[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        et[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        et[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        et[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        et[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        et[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        et[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        et[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        et[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        et[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        et[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        et[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        et[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        et[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        et[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        et[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        et[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        et[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        et[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        et[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        et[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        et[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        et[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        et[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        et[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        et[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        et[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        et[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        et[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        et[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        et[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        et[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        et[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        et[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        et[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        et[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        et[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        et[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        et[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        et[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        et[177] = ["Blue Gemstone", "For too kind people"];
        et[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        et[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        et[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        et[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        et[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        et[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        et[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        et[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        et[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        et[29] = ["Bag", "More space for your items!"];
        et[120] = ["Paper", "Used in book-crafting"];
        et[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        et[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        et[148] = ["Lock", "Allow you to lock your chest"];
        et[158] = ["Lock-pick", "Allows you to unlock one chest"];
        et[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        et[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        et[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        et[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        et[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        et[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        et[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        et[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        et[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        et[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        et[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        et[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        et[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        et[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        et[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        et[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        et[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        et[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        et[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        et[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        et[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        et[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        et[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        et[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        et[300] = "You cannot join this server";
        et[301] = "Kicked: ";
        et[302] = "Your key is already used by someone else";
        et[303] = "Your key is wrong";
        et[304] = "You have an old version, you need to clear your cache";
        et[338] = "Your client version is too recent for this server. The server is being updated";
        et[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        et[305] = "There are no more new resources";
        et[306] = "You survived 1 day";
        et[307] = "You survived ";
        et[308] = " days";
        et[309] = "You are dead ;-;";
        et[310] = "Server cannot find spawn location! Spam the play button!";
        et[311] = "Server is full! Spam the play button!";
        et[312] = "Resource is empty";
        et[313] = "Inventory is full (right-click to empty items)";
        et[314] = " is dead";
        et[315] = "This is not the right tool";
        et[316] = "You joined a team";
        et[317] = "You are dead";
        et[318] = " joined the team";
        et[319] = "Your team was destroyed";
        et[320] = "You left the team";
        et[321] = " left the team";
        et[322] = "Someone stole your token :>";
        et[323] = "Choose a server";
        et[324] = "players";
        et[325] = "total players";
        et[326] = "players on this mode";
        et[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        it[0] = ["You were killed for no reason"];
        it[1] = ["You starved to death, as the name of the game implies"];
        it[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        it[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        it[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        it[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        it[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        it[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        it[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        it[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        it[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        it[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        it[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        it[13] = ["You died of thirst. Better drink your own piss."];
        it[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        it[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        it[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        it[17] = ["Your skin's falling apart, the sun killed you."];
        it[18] = ["Garlic stored in your pockets boiled your brain."];
        it[19] = ["As a vampire, don't stand near the garlic cloves."];
        it[20] = ["You ate garlic as a vampire, what did you expect?"];
        it[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    function Us() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["Рука"];
        et[140] = ["Земля", "Грязно!"];
        et[126] = ["Песок", "Он в моих глазах!"];
        et[109] = ["Дерево", "Постоянно нужно больше!"];
        et[108] = ["Камень", "Твердый"];
        et[111] = ["Золото", "Будьте щедры, давайте его другим"];
        et[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        et[121] = ["Аметист", "Он сиреневый, как Lapa"];
        et[131] = ["Мука", "Используется в готовке"];
        et[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        et[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        et[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        et[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        et[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        et[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        et[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        et[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        et[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        et[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        et[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        et[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        et[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        et[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        et[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        et[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        et[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        et[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        et[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        et[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        et[194] = ["Колючий Куст", "Это больно!"];
        et[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        et[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        et[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        et[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        et[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        et[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        et[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        et[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        et[139] = ["Чешуя", "Она пахнет рыбой!"];
        et[129] = ["Шкура Кракена", "Вы не испугались?"];
        et[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        et[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        et[114] = ["Верстак", "Необходим для создания многих предметов"];
        et[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        et[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        et[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        et[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        et[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        et[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        et[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        et[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        et[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        et[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        et[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        et[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        et[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        et[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        et[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        et[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        et[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        et[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        et[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        et[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        et[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        et[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        et[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        et[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        et[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        et[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        et[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        et[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        et[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        et[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        et[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        et[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        et[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        et[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        et[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        et[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        et[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        et[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        et[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        et[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        et[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        et[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        et[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        et[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        et[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        et[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        et[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        et[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        et[185] = ["Шар Дракона", "Даётся за квест"];
        et[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        et[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        et[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        et[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        et[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        et[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        et[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        et[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        et[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        et[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        et[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        et[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        et[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        et[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        et[120] = ["Бумага", "Используется при создании книги"];
        et[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        et[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        et[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        et[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        et[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        et[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        et[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        et[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        et[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        et[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        et[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        et[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        et[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        et[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        et[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        et[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        et[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        et[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        et[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        et[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        et[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        et[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        et[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        et[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        et[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        et[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        et[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        et[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        et[300] = "Вы не можете зайти на этот сервер";
        et[301] = "Выгнаны: ";
        et[302] = "Ваш ключ уже используется кем-то";
        et[303] = "Ваш ключ неправильный";
        et[304] = "У вас старая версия, вам нужно очистить кеш";
        et[305] = "Ресурсов больше нет";
        et[306] = "Вы выжили 1 день";
        et[307] = "Вы выжили ";
        et[308] = " дней";
        et[309] = "Вы умерли ;-;";
        et[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        et[311] = "Сервер заполнен! Спамьте кнопку играть!";
        et[312] = "Ресурсы закончились";
        et[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        et[314] = " умер";
        et[315] = "Это не тот инструмент";
        et[316] = "Вы вошли в команду";
        et[317] = "Вы умерли";
        et[318] = " вошёл в команду";
        et[319] = "Ваша команда была разрушена";
        et[320] = "Вы покинули команду";
        et[321] = " покинул команду";
        et[322] = "Кто-то использует ваш токен :>";
        et[323] = "Выберите сервер";
        et[324] = "игроков";
        et[325] = "игроков всего";
        et[326] = "игроков в этом режиме";
        et[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        it[0] = ["Вы были убиты без причины"];
        it[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        it[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        it[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        it[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        it[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        it[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        it[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        it[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        it[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        it[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        it[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        it[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        it[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        it[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        it[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        it[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        it[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        it[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        it[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        it[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        it[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    const Vs = 6;
    const Ws = 20;
    const Xs = 1;
    function Ys() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["mão"];
        et[140] = ["terra", "está sujo!"];
        et[126] = ["areia", "entrou nos meus olhos!"];
        et[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        et[108] = ["pedra", "também chamado rocha"];
        et[111] = ["ouro", "seja generoso, dê para outros"];
        et[112] = ["diamante", "o que você irá fazer com isso?"];
        et[121] = ["ametista", "é mauve como lapa"];
        et[131] = ["farinha", "usada na cozinha"];
        et[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        et[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        et[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        et[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        et[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        et[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        et[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        et[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        et[200] = ["doces", "apenas para crianças!", "comida: 100"];
        et[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        et[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        et[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        et[110] = ["berry", "Berry saborosa!", "comida: 10"];
        et[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        et[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        et[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        et[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        et[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        et[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        et[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        et[194] = ["mato de espinhos", "pica!"];
        et[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        et[142] = ["gelo", "útil para fazer bolo e água"];
        et[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        et[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        et[2] = ["pele de coelho", "o coelho era tão fofo..."];
        et[178] = ["pele pura", "você é uma fábrica de pão"];
        et[179] = ["pele negra", "você está pronto para fazer algo errado"];
        et[146] = ["pele de inverno", "ele só queria um abraço"];
        et[139] = ["escala", "é pequeno como peixe!"];
        et[129] = ["pele do kraken", "você não está com medo?"];
        et[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        et[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        et[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        et[161] = ["linha", "usada para fazer chapéus e mochila"];
        et[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        et[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        et[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        et[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        et[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        et[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        et[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        et[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        et[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        et[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        et[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        et[as.ⲆⲆᐃⲆᐃᐃⵠΔᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        et[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        et[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        et[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        et[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        et[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        et[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        et[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        et[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        et[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        et[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        et[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        et[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        et[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        et[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        et[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        et[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        et[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        et[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        et[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        et[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        et[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        et[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        et[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        et[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        et[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        et[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        et[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        et[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        et[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        et[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        et[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        et[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        et[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        et[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        et[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        et[185] = ["esfera do dragão", "dado na questt"];
        et[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        et[175] = ["pedra verde", "você não vai trapacear, promete?"];
        et[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        et[177] = ["pedra azul", "para pessoas muito gentis"];
        et[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        et[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        et[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        et[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        et[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        et[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        et[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        et[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        et[49] = ["regador", "permite regar as plantas", "dano: 1"];
        et[29] = ["mochila", "mais espaço para seus itens!"];
        et[120] = ["papel", "usado para fazer o livro"];
        et[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        et[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        et[148] = ["fechadura", "permite você trancar seu baú"];
        et[158] = ["chave", "permite destrancar um baú"];
        et[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        et[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        et[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        et[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        et[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        et[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        et[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        et[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        et[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        et[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        et[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        et[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        et[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        et[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        et[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        et[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        et[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        et[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        et[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        et[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        et[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        et[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        et[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        et[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        et[300] = "você não pode entrar no servidor";
        et[301] = "kickado: ";
        et[302] = "sua chave está em uso por outra pessoa";
        et[303] = "sua chave está errada";
        et[304] = "você tem uma versão velha, limpe seu cache";
        et[305] = "não tem mais recursos";
        et[306] = "você sobreviveu 1 dia";
        et[307] = "você sobreviveu ";
        et[308] = " dias";
        et[309] = "você está morto ;-;";
        et[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        et[311] = "servidor está cheio! spam o botão de play!";
        et[312] = "não tem recursos";
        et[313] = "inventário está cheio (botão direito para deletar itens)";
        et[314] = " está morto";
        et[315] = "essa não é a ferramenta certa";
        et[316] = "você entrou no time";
        et[317] = "você está morto";
        et[318] = "entrou no time";
        et[319] = "seu time foi destruido";
        et[320] = "você saiu do time";
        et[321] = " saiu do time";
        et[322] = "alguém roubou sua ficha :>";
        et[323] = "escolha um servidor";
        et[324] = "jogadores";
        et[325] = "jogadores totais";
        et[326] = "jogadores nesse modo";
        et[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        it[0] = ["você morreu sem motivo"];
        it[1] = ["você morreu de fome, como o jogo diz"];
        it[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        it[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        it[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        it[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        it[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        it[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        it[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        it[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        it[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        it[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        it[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        it[13] = ["você morreu de sede. melhor beber sua própria urina."];
        it[14] = ["você sabia que você morre afogado? agora você sabe."];
        it[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        it[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        it[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        it[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        it[19] = ["como vampiro, não chegue perto do alho."];
        it[20] = ["você comeu alho como vampiro, o que você esperava?"];
        it[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    function Zs() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["Mano"];
        et[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        et[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        et[109] = ["Madera", "¡Nunca hay suficiente!"];
        et[108] = ["Piedra", "También llamada roca."];
        et[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        et[112] = ["Diamante", "¿Que vas a hacer con él?"];
        et[121] = ["Amatista", "Es Mauve como Lapa"];
        et[131] = ["Harina", "Usada para cocinar."];
        et[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        et[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        et[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        et[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        et[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        et[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        et[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        et[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        et[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        et[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        et[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        et[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        et[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        et[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        et[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        et[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        et[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        et[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        et[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        et[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        et[194] = ["Planta de Espinas", "¡Te daña!"];
        et[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        et[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        et[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        et[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        et[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        et[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        et[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        et[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        et[139] = ["Escamas", "¡Huele a pescado!"];
        et[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        et[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        et[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        et[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        et[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        et[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        et[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        et[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        et[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        et[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        et[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        et[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        et[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        et[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        et[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        et[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        et[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        et[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        et[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        et[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        et[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        et[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        et[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        et[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        et[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        et[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        et[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        et[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        et[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        et[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        et[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        et[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        et[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        et[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        et[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        et[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        et[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        et[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        et[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        et[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        et[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        et[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        et[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        et[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        et[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        et[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        et[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        et[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        et[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        et[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        et[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        et[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        et[185] = ["Esfera del Dragón", "Dada en la misión"];
        et[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        et[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        et[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        et[177] = ["Gema Azul", "Para gente muy amable"];
        et[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        et[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        et[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        et[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        et[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        et[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        et[128] = ["Botella Vacia", "La puedes llenar de agua"];
        et[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        et[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        et[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        et[120] = ["Hoja", "Usada para hacer un libro"];
        et[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        et[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        et[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        et[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        et[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        et[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        et[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        et[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        et[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        et[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        et[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        et[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        et[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        et[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        et[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        et[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        et[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        et[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        et[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        et[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        et[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        et[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        et[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        et[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        et[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        et[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        et[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        et[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        et[300] = "No puedes unirte a este servidor";
        et[301] = "Expulsado: ";
        et[302] = "Tu llave ya está usada";
        et[303] = "Tu llave está mal";
        et[304] = "Tienes una versión antigua, limpia tu cache";
        et[305] = "No hay mas recursos";
        et[306] = "Has sobrevivido 1 día";
        et[307] = "Has sobrevivido ";
        et[308] = " días";
        et[309] = "Estás muerto ;-;";
        et[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        et[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        et[312] = "Recurso vacio";
        et[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        et[314] = " está muerto";
        et[315] = "Esta no es la herramienta correcta";
        et[316] = "Te has unido a un equipo";
        et[317] = "Estás muerto";
        et[318] = " se unió al equipo";
        et[319] = "Tu equipo ha sido destruido";
        et[320] = "Has dejado el equipo";
        et[321] = " dejo el equipo ";
        et[322] = "Alguien te robó tu token :>";
        et[323] = "Elige un servidor";
        et[324] = "jugadores";
        et[325] = "total de jugadores";
        et[326] = "Jugadores en este modo de juego";
        et[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        it[0] = ["Has muerto por ninguna razón"];
        it[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        it[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        it[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        it[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        it[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        it[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        it[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        it[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        it[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        it[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        it[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        it[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        it[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        it[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        it[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        it[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        it[17] = ["Tu piel se cayó, el sol te quemó."];
        it[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        it[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        it[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        it[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    function $s() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["Hand"];
        et[140] = ["Boden", "Dreckig!"];
        et[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        et[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        et[108] = ["Stein", "Auch Fels gennant"];
        et[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        et[112] = ["Diamant", "Was wirst du daraus machen?"];
        et[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        et[131] = ["Mehl", "wird fürs Backen gebraucht"];
        et[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        et[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        et[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        et[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        et[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        et[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        et[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        et[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        et[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        et[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        et[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        et[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        et[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        et[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        et[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        et[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        et[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        et[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        et[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        et[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        et[194] = ["Dornenbusch", "Es sticht!"];
        et[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        et[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        et[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        et[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        et[2] = ["Hasenfell", "Der Hase war so süß..."];
        et[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        et[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        et[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        et[139] = ["Schuppen", "Es riecht wie Fisch!"];
        et[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        et[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        et[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        et[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        et[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        et[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        et[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        et[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        et[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        et[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        et[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        et[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        et[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        et[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        et[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        et[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        et[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        et[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        et[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        et[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        et[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        et[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        et[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        et[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        et[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        et[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        et[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        et[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        et[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        et[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        et[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        et[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        et[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        et[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        et[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        et[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        et[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        et[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        et[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        et[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        et[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        et[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        et[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        et[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        et[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        et[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        et[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        et[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        et[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        et[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        et[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        et[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        et[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        et[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        et[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        et[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        et[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        et[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        et[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        et[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        et[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        et[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        et[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        et[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        et[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        et[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        et[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        et[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        et[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        et[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        et[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        et[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        et[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        et[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        et[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        et[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        et[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        et[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        et[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        et[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        et[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        et[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        et[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        et[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        et[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        et[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        et[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        et[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        et[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        et[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        et[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        et[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        et[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        et[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        et[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        et[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        et[300] = "Du kannst diesem Server nicht beitreten";
        et[301] = "Gekickt: ";
        et[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        et[303] = "Dein Schlüssel ist falsch";
        et[304] = "Deine Version ist veraltet, säubere dein Cache";
        et[305] = "Es gibt keine neuen Ressourcen";
        et[306] = "Du hast einen Tag überlebt";
        et[307] = "Du hast überlebt ";
        et[308] = " Tage";
        et[309] = "Du bist gestorben ;-;";
        et[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        et[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        et[312] = "Ressource ist leer";
        et[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        et[314] = " ist gestorben";
        et[315] = "Das ist nicht das richtige Werkzeug";
        et[316] = "Du bist einem Team beigetreten";
        et[317] = "Du bist gestorben";
        et[318] = " ist dem Team beigetreten";
        et[319] = "Dein Team wurde zerstört";
        et[320] = "Du hast das Team verlassen";
        et[321] = " hat das Team verlassen";
        et[322] = "Jemand hat dein Token gestohlen :>";
        et[323] = "Suche dir ein Server aus";
        et[324] = "Spieler";
        et[325] = "alle Spieler";
        et[326] = "Spieler in diesem Modus";
        et[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        it[0] = ["Du wurdest ohne Grund getötet"];
        it[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        it[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        it[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        it[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        it[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        it[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        it[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        it[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        it[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        it[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        it[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        it[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        it[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        it[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        it[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        it[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        it[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        it[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        it[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        it[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        it[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    const _s = 19;
    function at() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " BACK TO THE GAME";
        et[329] = " Share on Twitter";
        et[330] = " Share on Facebook";
        et[331] = "You can buy items on the shop in the next game with your points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Kill";
        et[335] = "Days survived";
        et[336] = "Building method: Free. Press G to change";
        et[337] = "Building method: Grid. Press G to change";
        et[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        et[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        et[7] = ["Ręka"];
        et[140] = ["Ziemia", "Brudna!"];
        et[126] = ["Piasek", "Mam go w oczach!"];
        et[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        et[108] = ["Kamień", "Także nazywany skałą"];
        et[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        et[112] = ["Diament", "Co z nim zrobisz?"];
        et[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        et[131] = ["Mąka", "Używana w gotowaniu"];
        et[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        et[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        et[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        et[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        et[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        et[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        et[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        et[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        et[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        et[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        et[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        et[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        et[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        et[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        et[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        et[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        et[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        et[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        et[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        et[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        et[194] = ["Kolczasty krzew", "Kłuje!"];
        et[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        et[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        et[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        et[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        et[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        et[178] = ["Skóra", "Jesteś fabryką chleba"];
        et[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        et[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        et[139] = ["Łuski", "Pachnie jak ryba!"];
        et[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        et[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        et[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        et[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        et[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        et[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        et[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        et[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        et[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        et[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        et[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        et[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        et[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        et[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        et[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        et[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        et[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        et[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        et[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        et[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        et[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        et[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        et[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        et[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        et[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        et[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        et[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        et[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        et[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        et[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        et[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        et[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        et[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        et[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        et[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        et[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        et[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        et[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        et[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        et[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        et[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        et[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        et[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        et[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        et[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        et[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        et[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        et[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        et[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        et[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        et[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        et[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        et[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        et[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        et[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        et[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        et[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        et[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        et[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        et[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        et[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        et[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        et[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        et[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        et[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        et[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        et[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        et[120] = ["Papier", "Używany w tworzeniu książki"];
        et[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        et[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        et[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        et[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        et[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        et[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        et[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        et[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        et[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        et[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        et[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        et[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        et[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        et[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        et[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        et[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        et[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        et[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        et[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        et[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        et[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        et[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        et[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        et[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        et[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        et[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        et[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        et[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        et[300] = "Nie możesz dołączyć do tego serwera";
        et[301] = "Wyrzucony: ";
        et[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        et[303] = "Twój klucz jest nieprawidłowy";
        et[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        et[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        et[306] = "Przeżyłeś 1 dzień";
        et[307] = "Przeżyłeś ";
        et[308] = " dni";
        et[309] = "Jesteś martwy ;-;";
        et[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        et[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        et[312] = "Źródło jest puste";
        et[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        et[314] = " jest martwy";
        et[315] = "To nie jest właściwe narzędzie";
        et[316] = "Dołączyłeś do drużyny";
        et[317] = "Jesteś martwy";
        et[318] = " dołączył do drużyny";
        et[319] = "Twoja drużyna została zniszczona";
        et[320] = " Opuściłeś drużynę";
        et[321] = " opuścił drużynę";
        et[322] = "Ktoś ukradł twój żeton :>";
        et[323] = "Wybierz serwer";
        et[324] = "graczy";
        et[325] = "wszystkich graczy";
        et[326] = "graczy w tym trybie";
        et[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        it[0] = ["Zostałeś zabity bez powodu"];
        it[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        it[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        it[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        it[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        it[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        it[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        it[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        it[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        it[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        it[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        it[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        it[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        it[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        it[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        it[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        it[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        it[17] = ["Twoja skóra odpada, słońce cię zabija."];
        it[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        it[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        it[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        it[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    function bt(b, c, d, e, f) {
        Le($v, b, c, d, e, f);
        const g = lc(Zv[0], Zv[1], Zv[2], Zv[3]);
        a = Zv[4];
        i = Zv[0];
        j = Zv[1];
        ak($v, a, i, j);
        Ms(Zv[0], Zv[1], Zv[2], Zv[0], Zv[1], Zv[2]);
        $q(Zv[0], Zv[1], Zv[2], Zv[0]);
        var a;
        var i;
        var j;
        return ~(g & 28183) & (g | 28183);
    }
    function ct() {
        et[184] = ["You feel a great power emanating from this orb"];
        it[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        et[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        et[328] = " RETOUR AU JEU";
        et[329] = " Partage sur Twitter";
        et[330] = " Partage sur Facebook";
        et[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        et[332] = "points";
        et[333] = "Score";
        et[334] = "Tués";
        et[335] = "Jours survécus";
        et[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        et[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        et[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        et[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        et[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        et[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        et[7] = ["Main"];
        et[140] = ["Terre", "C'est sale!"];
        et[126] = ["Sable", "J'en ai dans les yeux"];
        et[109] = ["Bois", "Tu n'en auras jamais trop!"];
        et[108] = ["Pierre", "Aussi appelée roche"];
        et[111] = ["Or", "Sois généreux, donne en aux autres"];
        et[112] = ["Diamant", "Comme tes yeux! wesh"];
        et[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        et[131] = ["Farine", "Utile pour la cuisine"];
        et[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        et[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        et[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        et[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        et[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        et[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        et[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        et[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        et[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        et[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        et[201] = ["Guirlandes", "Utilisable sur les toits"];
        et[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        et[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        et[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        et[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        et[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        et[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        et[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        et[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        et[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        et[194] = ["Ronces", "Ça pique!"];
        et[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        et[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        et[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        et[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        et[2] = ["Peau de lapin", "Vous êtes un monstre"];
        et[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        et[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        et[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        et[139] = ["Écailles", "Ça sent le poisson!"];
        et[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        et[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        et[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        et[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        et[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        et[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        et[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        et[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        et[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        et[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        et[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        et[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        et[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        et[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        et[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        et[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        et[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        et[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        et[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        et[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        et[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        et[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        et[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        et[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        et[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        et[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        et[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        et[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        et[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        et[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        et[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        et[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        et[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        et[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        et[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        et[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        et[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        et[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        et[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        et[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        et[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        et[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        et[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        et[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        et[185] = ["Orbe du Dragon", "Donné en Quête"];
        et[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        et[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        et[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        et[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        et[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        et[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        et[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        et[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        et[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        et[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        et[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        et[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        et[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        et[29] = ["Sac", "Plus de place dans ton inventaire!"];
        et[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        et[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        et[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        et[148] = ["Cadenas", "Pour verrouiller un coffre"];
        et[158] = ["Clé", "Pour déverrouiller un coffre"];
        et[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        et[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        et[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        et[190] = ["Toit", "Te cache un peu et te réchauffe"];
        et[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        et[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        et[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        et[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        et[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        et[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        et[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        et[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        et[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        et[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        et[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        et[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        et[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        et[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        et[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        et[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        et[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        et[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        et[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        et[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        et[300] = "Tu ne peux pas rejoindre le serveur";
        et[301] = "Expulsé: ";
        et[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        et[303] = "Ta clé est fausse";
        et[304] = "Tu as une vieille version, rafraichis tes caches";
        et[305] = "Il n'y a plus de nouvelles ressources";
        et[306] = "Tu as survécu 1 jour";
        et[307] = "Tu as survécu ";
        et[308] = " jours";
        et[309] = "Tu es mort ;-;";
        et[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        et[311] = "Le serveur est complet! Spam le bouton jouer";
        et[312] = "Cette ressource est vide";
        et[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        et[314] = " est mort";
        et[315] = "Ce n'est pas le bon outil";
        et[316] = "Tu as rejoins une équipe";
        et[317] = "Tu es mort";
        et[318] = " a rejoint l'équipe";
        et[319] = "Ton équipe a été détruite";
        et[320] = "Tu as quitté l'équipe";
        et[321] = " a quitté l'équipe";
        et[322] = "Quelqu'un a volé ton token :>";
        et[323] = "Choisis un serveur";
        et[324] = "joueurs";
        et[325] = "joueurs";
        et[326] = "joueurs dans ce mode";
        et[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        it[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        it[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        it[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        it[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        it[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        it[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        it[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        it[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        it[8] = ["Cet ours voulait juste un câlin."];
        it[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        it[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        it[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        it[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        it[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        it[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        it[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        it[16] = ["Un kraken a 'kraké' tes os."];
        it[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        it[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        it[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        it[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        it[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        ⲆⵠΔⲆΔ = "Uuunnnggg";
        ΔᐃΔⲆᐃᐃⲆ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    function dt(b, c, d, e, f, g) {
        const a = ~(f & 4964) & 4964 | ~(f & 4964) & f;
        const i = (24 << (g >> 8 & 255)) + (16 << (g >> 16 & 255)) + (0 << (g >> 24 & 255)) + (8 << (g & 255));
        const j = ot(b ^ 62365, ((16576 + c) * 1103515245 + 12345) % 2147483648, (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (8 << (d >> 24 & 255)) + (0 << (d >> 8 & 255)), (2147483587 + (e + 52864) * 2147483629) % 2147483647);
        (function (a, b) {
            const c = ~(a & 55774) & a | ~(a & 55774) & 55774;
            const d = (0 << (b >> 8 & 255)) + (24 << (b & 255)) + (16 << (b >> 24 & 255)) + (8 << (b >> 16 & 255));
            const e = vc(c, d, c, d);
            Js(c, d, c);
        })(a, i);
        return ~(j & 60811) & (j | 60811);
    }
    var et = [];
    const gt = 3;
    for (var ht = 0; ht < 344; ht++) {
        et[ht] = "";
    }
    var it = [];
    const jt = 5;
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            Ts();
        } else if (a === "Français") {
            ct();
        } else if (a === "Deutsch") {
            $s();
        } else if (a === "Español") {
            Zs();
        } else if (a === "Português") {
            Ys();
        } else if (a === "Русский") {
            Us();
        } else if (a === "Polski") {
            at();
        }
        ΔΔⵠᐃⲆ = [];
        Tw.ᐃⵠΔᐃ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    var kt;
    gr = "EN";
    switch (navigator.language || navigator.userLanguage) {
        case "ru":
            gr = "RU";
            break;
        case "en":
            gr = "EN";
            break;
        case "es":
            gr = "SP";
            break;
        case "fr":
            gr = "FR";
            break;
        case "pl":
            gr = "PL";
            break;
        case "de":
            gr = "DE";
            break;
        case "pt":
            gr = "PT";
    }
    if (gr === "FR") {
        $(".md-languages label button").text("Français");
        kt = ct;
    } else if (gr === "PL") {
        $(".md-languages label button").text("Polski");
        kt = at;
    } else if (gr === "PT") {
        $(".md-languages label button").text("Português");
        kt = Ys;
    } else if (gr === "SP") {
        $(".md-languages label button").text("Español");
        kt = Zs;
    } else if (gr === "RU") {
        $(".md-languages label button").text("Русский");
        kt = Us;
    } else if (gr === "DE") {
        $(".md-languages label button").text("Deutsch");
        kt = $s;
    } else {
        $(".md-languages label button").text("English");
        kt = Ts;
    }
    const lt = 9;
    const mt = 18;
    ⵠᐃ = {
        ᐃᐃᐃΔⵠⵠᐃⵠⵠ: "img/logo.png",
        ⲆⵠⲆⵠⲆⵠⵠ: "img/mapday.png",
        ᐃⲆⵠΔΔΔⵠ: "img/mapnight.png",
        ᐃᐃⲆΔⵠⲆᐃΔⲆ: "img/bigzday.png",
        ⲆⵠⵠⵠⵠᐃⲆⵠⵠ: "img/bigznight.png",
        ΔⲆⲆⵠΔᐃᐃ: "img/bigday-river1.png",
        ⵠⲆⲆΔⵠⵠⲆⵠⲆ: "img/bigday-lake.png",
        ⵠΔΔⲆᐃⲆⵠ: "img/bigday-berry.png",
        ΔⵠⵠΔⲆⲆᐃ: "img/bigday-stone1.png",
        ⲆΔⵠᐃΔΔⲆ: "img/bigday-stone2.png",
        ⵠᐃΔΔⵠΔⲆ: "img/bigday-gold1.png",
        ᐃⵠⵠΔⵠⲆⵠ: "img/bigday-gold2.png",
        ΔⲆᐃⲆΔᐃⲆ: "img/bigday-emerald1.png",
        ΔΔⵠⵠᐃⲆⵠ: "img/bigday-emerald2.png",
        ⵠΔⲆⵠⵠΔⵠ: "img/bigday-amethyst.png",
        ⵠⵠᐃᐃᐃᐃⲆ: "img/bigday-bear.png",
        ⵠΔΔⵠⵠΔⲆ: "img/bigday-cave.png",
        ᐃᐃᐃΔΔᐃⲆ: "img/bigday-diamond.png",
        ᐃⲆᐃᐃᐃⲆⵠ: "img/bigday-island.png",
        ᐃⲆᐃⵠⲆⵠⵠ: "img/bigday-reidite.png",
        ⲆΔΔⲆⵠᐃⲆ: "img/bigday-spider.png",
        ⵠᐃΔᐃⲆⲆᐃ: "img/bigday-wolf.png",
        ⵠᐃⵠⵠᐃᐃᐃ: "img/bigday-fir-tree.png",
        ⵠⵠⵠⲆΔΔᐃ: "img/bigday-fox.png",
        ⵠᐃᐃⲆᐃΔⵠ: "img/bigday-kraken.png",
        ⵠᐃⵠᐃⲆΔⲆ: "img/bigday-piranha.png",
        ⵠᐃⲆᐃⵠᐃᐃ: "img/bigday-cactus.png",
        ᐃᐃⵠⲆΔᐃᐃ: "img/bigday-magma.png",
        ⲆⲆᐃⵠᐃⲆⲆ: "img/bigday-river1.png",
        ΔⲆⲆΔⵠⵠᐃⲆΔ: "img/bignight-lake.png",
        ΔⲆⵠⵠⲆᐃⵠΔⵠ: "img/bignight-berry.png",
        ⲆⵠⲆᐃⲆΔⲆ: "img/bignight-stone1.png",
        ᐃⵠⵠⵠⵠᐃΔ: "img/bignight-stone2.png",
        ᐃΔΔΔᐃⲆΔ: "img/bignight-gold1.png",
        ΔᐃⵠⲆⲆᐃⲆ: "img/bignight-gold2.png",
        ᐃⲆΔⵠⵠΔⵠ: "img/bignight-emerald1.png",
        ΔᐃⲆⲆⵠⵠⲆ: "img/bignight-emerald2.png",
        ⲆⲆⵠΔΔⲆΔ: "img/bignight-amethyst.png",
        ΔⵠᐃⵠⲆΔⵠ: "img/bignight-bear.png",
        ⵠᐃΔΔΔᐃⲆ: "img/bignight-cave.png",
        ⵠⲆⵠⲆᐃΔⵠ: "img/bignight-diamond.png",
        ⲆⲆᐃⲆⵠᐃⲆ: "img/bignight-island.png",
        ⲆⲆⲆΔⲆᐃⲆ: "img/bignight-reidite.png",
        ΔΔⲆⲆⲆΔⲆ: "img/bignight-spider.png",
        ⵠΔⲆᐃⲆᐃⵠ: "img/bignight-wolf.png",
        ⵠⵠⵠⲆⲆᐃⲆ: "img/bignight-fir-tree.png",
        ⲆΔΔᐃΔⲆⲆ: "img/bignight-fox.png",
        ΔⵠᐃΔⲆΔΔ: "img/bignight-kraken.png",
        ΔᐃⲆⲆⲆⵠᐃ: "img/bignight-piranha.png",
        ΔⵠⲆᐃΔᐃⵠ: "img/bignight-cactus.png",
        ⲆⵠⲆΔΔⵠᐃ: "img/bignight-magma.png",
        ⵠⲆⲆⲆᐃⵠΔ: "img/bigday-desert.png",
        ΔΔⲆᐃⵠΔᐃ: "img/bigday-winter.png",
        ⲆⵠΔⲆⵠΔⵠ: "img/bigday-lava.png",
        ᐃⲆⲆⲆⵠⵠⲆ: "img/bigday-forest.png",
        ⵠᐃΔΔᐃⵠᐃ: "img/bignight-desert.png",
        ᐃΔⵠⲆⵠΔⲆ: "img/bignight-winter.png",
        ⲆⲆᐃⲆⵠⵠⲆ: "img/bignight-lava.png",
        ⵠⲆⵠᐃΔᐃΔ: "img/bignight-forest.png",
        ᐃΔⵠΔⲆⵠᐃ: "img/day-river-wave.png",
        ⵠΔΔⲆⵠⵠⵠ: "img/night-river-wave.png",
        ⵠⲆⲆΔᐃⵠΔ: "img/day-fog0.png",
        ⵠΔⲆⲆΔᐃⵠ: "img/day-fog1.png",
        ⲆᐃᐃΔᐃⲆⲆ: "img/day-fog2.png",
        ⵠᐃᐃⲆΔΔᐃ: "img/night-fog0.png",
        ΔᐃⵠⲆⵠⵠⲆ: "img/night-fog1.png",
        ⲆⲆᐃⵠᐃᐃⵠ: "img/night-fog2.png",
        ᐃⲆⲆⵠⵠⵠΔ: "img/day-fogdesert0.png",
        ⲆⵠΔⵠᐃⲆⲆ: "img/day-fogdesert1.png",
        ⲆⵠΔᐃΔᐃΔ: "img/day-fogdesert2.png",
        ⲆᐃΔⲆᐃⵠⲆ: "img/night-fogdesert0.png",
        ᐃⲆᐃᐃⲆⵠⵠ: "img/night-fogdesert1.png",
        ΔⵠΔⲆᐃⲆΔ: "img/night-fogdesert2.png",
        ΔⲆᐃⵠᐃΔᐃ: "img/day-cross-server.png",
        ⲆⲆᐃΔⵠΔⵠ: "img/day-here-server.png",
        ⵠⵠⵠⵠᐃⲆⲆ: "img/day-finish-server.png",
        ⲆΔΔⲆⲆΔⵠ: "img/day-item-server.png",
        ⵠΔΔⵠᐃΔⲆ: "img/day-skull-server.png",
        ΔⵠⵠⲆᐃΔᐃ: "img/night-cross-server.png",
        ᐃⲆⲆⲆⵠⵠΔ: "img/night-here-server.png",
        ΔᐃΔⲆⵠⵠΔ: "img/night-finish-server.png",
        ᐃⵠⵠⲆᐃⵠⵠ: "img/night-item-server.png",
        ᐃᐃΔⲆⲆⵠⵠ: "img/night-skull-server.png",
        ΔⲆΔⵠⲆⲆΔ: "img/day-reidite0.png",
        ⲆΔΔΔᐃⵠⲆ: "img/night-reidite0.png",
        ⲆᐃⵠᐃⲆΔΔ: "img/day-reidite1.png",
        ⲆᐃⵠᐃΔᐃⲆ: "img/night-reidite1.png",
        ⲆᐃᐃΔᐃⲆⵠ: "img/day-reidite2.png",
        ᐃⲆⲆⵠⵠΔΔ: "img/night-reidite2.png",
        ᐃΔⵠΔΔⵠⲆ: "img/day-lava1.png",
        ⵠᐃⲆⵠΔⲆⲆ: "img/night-lava1.png",
        ⲆⲆⵠⵠⵠᐃᐃ: "img/day-lava2.png",
        ΔⵠⵠΔᐃΔⵠ: "img/night-lava2.png",
        ⲆⲆΔⲆΔⵠᐃ: "img/day-lava3.png",
        ΔΔΔᐃΔⲆΔ: "img/night-lava3.png",
        ΔⵠΔΔⲆⵠΔ: "img/day-lava4.png",
        ⵠΔⵠᐃⲆⲆⲆ: "img/night-lava4.png",
        ⲆΔⵠⲆⲆⲆΔ: "img/day-lava5.png",
        ⲆⲆΔΔΔⵠΔ: "img/night-lava5.png",
        ⵠᐃⲆⲆⵠᐃⲆ: "img/day-lava6.png",
        ⵠⵠⲆⲆⵠΔΔ: "img/night-lava6.png",
        ΔⲆⵠⲆⲆᐃΔ: "img/day-lava-ground1.png",
        ᐃⵠⵠᐃⲆⵠΔ: "img/night-lava-ground1.png",
        ⲆⲆᐃᐃᐃⲆⵠ: "img/day-lava-ground2.png",
        ⵠⵠᐃⲆⲆᐃᐃ: "img/night-lava-ground2.png",
        ΔⲆᐃⵠⲆⲆⵠ: "img/day-lava-ground3.png",
        ᐃᐃⲆⵠᐃⵠΔ: "img/night-lava-ground3.png",
        ⵠⲆⵠⲆᐃⵠⲆ: "img/day-lava-ground4.png",
        ΔᐃΔΔᐃᐃᐃ: "img/night-lava-ground4.png",
        ᐃⵠⵠΔⵠᐃΔ: "img/day-lava-ground5.png",
        ⲆᐃᐃᐃᐃⵠΔ: "img/night-lava-ground5.png",
        ⵠⵠᐃᐃΔᐃᐃ: "img/day-lava-ground6.png",
        ⲆᐃΔⵠᐃⲆᐃ: "img/night-lava-ground6.png",
        ⵠᐃΔⲆⵠⵠⲆ: "img/day-fire-mob.png",
        ⲆΔⲆᐃⲆΔⲆ: "img/night-fire-mob.png",
        ΔᐃΔΔⲆⲆΔ: "img/hurt-fire-mob.png",
        ΔΔᐃⵠᐃᐃᐃ: "img/day-diamond-protection.png",
        ᐃᐃᐃᐃⲆΔⵠ: "img/night-diamond-protection.png",
        ᐃⵠⲆᐃⲆᐃⵠ: "img/day-hand-diamond-protection.png",
        ᐃΔⲆᐃⲆⵠᐃ: "img/night-hand-diamond-protection.png",
        ᐃΔⲆᐃⵠΔΔ: "img/inv-diamond-protection-out.png",
        ΔⵠᐃⵠⵠⵠΔ: "img/inv-diamond-protection-in.png",
        ⵠⵠⲆΔΔⲆᐃ: "img/inv-diamond-protection-click.png",
        ᐃᐃΔⲆᐃΔⵠ: "img/day-amethyst-protection.png",
        ⵠΔᐃᐃⵠⲆᐃ: "img/night-amethyst-protection.png",
        ᐃⲆᐃΔⵠᐃⲆΔΔ: "img/day-hand-amethyst-protection.png",
        ⲆⵠⲆᐃᐃⵠᐃⲆᐃ: "img/night-hand-amethyst-protection.png",
        ⵠⲆⲆⲆΔΔΔ: "img/inv-amethyst-protection-out.png",
        ⲆⲆⲆⵠⲆᐃᐃ: "img/inv-amethyst-protection-in.png",
        ⵠⲆⵠᐃⲆΔΔ: "img/inv-amethyst-protection-click.png",
        ᐃᐃⲆⲆⵠΔᐃ: "img/day-reidite-sword.png",
        ⵠⵠⵠΔΔΔⵠ: "img/night-reidite-sword.png",
        ⲆⵠⵠᐃΔᐃᐃ: "img/inv-reidite-sword-out.png",
        ⵠⲆΔⵠⵠᐃᐃ: "img/inv-reidite-sword-in.png",
        ᐃᐃᐃᐃⵠΔᐃ: "img/inv-reidite-sword-click.png",
        ⲆΔΔᐃⲆⵠⲆ: "img/inv-reidite-out.png",
        ⵠᐃᐃΔᐃΔⲆ: "img/inv-reidite-in.png",
        ᐃΔⲆⲆⵠΔⵠ: "img/inv-reidite-click.png",
        ΔᐃΔᐃΔⵠⵠ: "img/inv-flame-out.png",
        ⵠⲆⵠΔᐃᐃΔ: "img/inv-flame-in.png",
        ᐃΔᐃⵠⵠⵠⵠ: "img/inv-flame-click.png",
        ⵠⵠᐃᐃᐃᐃⵠ: "img/day-magma-buble0.png",
        ΔⲆΔᐃⵠΔᐃ: "img/night-magma-buble0.png",
        ⵠΔᐃΔᐃⵠⵠ: "img/day-magma-buble1.png",
        ⵠⲆᐃⲆᐃΔⲆ: "img/night-magma-buble1.png",
        ΔⲆⵠⲆⵠⵠᐃ: "img/day-magma-buble2.png",
        ΔⵠⵠᐃⵠᐃⲆ: "img/night-magma-buble2.png",
        ⵠⵠᐃⵠᐃⵠΔ: "img/day-lava-dragon.png",
        ⵠⲆⲆΔⵠΔⵠ: "img/night-lava-dragon.png",
        ⵠⲆⵠᐃΔΔⵠⵠᐃ: "img/day-fire-dragon.png",
        ⵠΔᐃⲆⲆⵠΔⵠΔ: "img/night-fire-dragon.png",
        ⵠΔΔΔᐃᐃᐃ: "img/hurt-lava-dragon.png",
        ᐃⲆΔⵠⵠⲆⲆ: "img/day-lava-wing-left.png",
        ᐃΔⲆⵠⲆⲆΔ: "img/night-lava-wing-left.png",
        ᐃⲆⲆᐃᐃⵠⵠ: "img/day-lava-wing-right.png",
        ⵠⲆⲆⲆᐃᐃⲆ: "img/night-lava-wing-right.png",
        ᐃΔⲆᐃᐃᐃⲆ: "img/hurt-lava-wing-left.png",
        ⵠⲆⲆⲆⲆᐃⵠ: "img/hurt-lava-wing-right.png",
        ΔᐃΔⲆⲆⲆⵠ: "img/day-reidite-spear.png",
        ⵠΔΔΔᐃⲆⲆ: "img/night-reidite-spear.png",
        ΔⵠΔⵠⲆⵠⲆ: "img/inv-reidite-spear-out.png",
        ⵠⲆⵠᐃᐃΔⲆ: "img/inv-reidite-spear-in.png",
        ᐃᐃⵠΔᐃᐃⵠ: "img/inv-reidite-spear-click.png",
        ⲆᐃᐃᐃⲆⵠⵠ: "img/day-reidite-helmet.png",
        ⲆΔᐃⵠᐃⲆΔ: "img/night-reidite-helmet.png",
        ᐃⲆⵠⲆⵠΔⵠ: "img/inv-reidite-helmet-out.png",
        ΔⲆⵠⲆⵠᐃⵠ: "img/inv-reidite-helmet-in.png",
        ⵠⲆΔΔⵠᐃⵠ: "img/inv-reidite-helmet-click.png",
        ⵠⲆⵠᐃⲆⵠⵠ: "img/day-hand-reidite-protection.png",
        ᐃᐃᐃΔⵠΔΔ: "img/night-hand-reidite-protection.png",
        ΔⲆⵠΔⵠⵠᐃ: "img/day-reidite-protection.png",
        ΔᐃⲆᐃⲆⵠⵠ: "img/night-reidite-protection.png",
        ΔᐃᐃⲆΔᐃᐃ: "img/inv-reidite-protection-out.png",
        ⲆⵠⲆⲆⵠΔⲆ: "img/inv-reidite-protection-in.png",
        ΔⵠⵠΔᐃΔᐃ: "img/inv-reidite-protection-click.png",
        ⵠⲆⵠⲆⵠΔΔ: "img/day-lava-dragon-sword.png",
        ⵠᐃⵠΔⲆⵠⲆ: "img/night-lava-dragon-sword.png",
        ⵠⵠᐃΔⵠⲆᐃ: "img/inv-lava-dragon-sword-out.png",
        ᐃᐃⲆΔΔⲆΔ: "img/inv-lava-dragon-sword-in.png",
        ᐃⲆᐃⵠΔᐃⵠ: "img/inv-lava-dragon-sword-click.png",
        ⲆᐃⲆⵠⵠᐃᐃ: "img/day-lava-spear.png",
        ⵠⲆΔⵠⵠⵠΔ: "img/night-lava-spear.png",
        ΔᐃᐃⵠⲆᐃⵠ: "img/inv-lava-spear-out.png",
        ᐃᐃᐃⲆⵠⵠΔ: "img/inv-lava-spear-in.png",
        ⵠᐃⵠΔⵠⵠⲆ: "img/inv-lava-spear-click.png",
        ⲆᐃᐃᐃⵠⲆⵠ: "img/day-lava-helmet.png",
        ΔⲆΔⲆᐃΔΔ: "img/night-lava-helmet.png",
        ᐃΔΔⵠΔⲆⵠ: "img/inv-lava-helmet-out.png",
        ⵠⲆⵠΔⵠΔⲆ: "img/inv-lava-helmet-in.png",
        ⲆᐃΔⵠⲆᐃᐃ: "img/inv-lava-helmet-click.png",
        ⲆⲆⵠⲆⲆⵠΔ: "img/day-witch-hat.png",
        ⲆⵠⵠᐃⵠΔΔ: "img/night-witch-hat.png",
        ΔⵠⵠᐃⲆⵠΔ: "img/inv-witch-hat-out.png",
        ᐃⲆΔⵠⲆᐃᐃ: "img/inv-witch-hat-in.png",
        ⵠⲆΔΔΔⵠΔ: "img/inv-witch-hat-click.png",
        ΔⵠΔᐃⵠⵠⵠ: "img/day-nimbus2000.png",
        ⵠⵠⵠⲆⵠⵠⵠ: "img/night-nimbus2000.png",
        ⲆⵠⵠΔΔⵠⲆ: "img/inv-nimbus2000-out.png",
        ΔⵠᐃⲆᐃⵠⵠ: "img/inv-nimbus2000-in.png",
        ᐃΔΔⲆⵠᐃⵠ: "img/inv-nimbus2000-click.png",
        ⲆⲆⲆⵠⲆⵠⲆ: "img/day-accessory1-pacques.png",
        ᐃΔᐃΔⵠⵠΔ: "img/night-accessory1-pacques.png",
        ⵠⲆⵠᐃᐃⵠᐃ: "img/day-accessory2-pacques.png",
        ᐃᐃⲆᐃⵠᐃⵠ: "img/night-accessory2-pacques.png",
        ⵠⲆⲆΔⵠᐃΔ: "img/day-accessory3-pacques.png",
        ⲆⲆⲆΔⲆΔΔ: "img/night-accessory3-pacques.png",
        ΔᐃᐃᐃᐃΔΔ: "img/day-accessory5-pacques.png",
        ⲆⲆΔⵠⲆΔᐃ: "img/night-accessory5-pacques.png",
        ΔᐃⲆⵠΔⲆΔ: "img/day-accessory6-pacques.png",
        ⲆⲆᐃⲆΔⲆⲆ: "img/night-accessory6-pacques.png",
        ᐃᐃⵠⲆⲆΔᐃ: "img/day-accessory7-pacques.png",
        ⵠⵠΔⲆᐃΔⲆ: "img/night-accessory7-pacques.png",
        ⵠΔⲆΔᐃΔΔ: "img/day-accessory8-pacques.png",
        ⵠⵠⲆⵠⲆΔᐃ: "img/night-accessory8-pacques.png",
        ⲆⲆⲆᐃⲆⵠⵠ: "img/day-bag-pacques.png",
        ᐃⲆᐃΔᐃΔⵠ: "img/night-bag-pacques.png",
        ᐃⲆⵠⲆᐃⲆΔ: "img/day-carrot.png",
        ⵠᐃⵠⲆⵠᐃⲆ: "img/night-carrot.png",
        ΔᐃΔⲆᐃⵠΔ: "img/day-carrot-dried.png",
        ΔⲆⵠᐃⲆᐃⲆ: "img/night-carrot-dried.png",
        ⲆᐃⵠΔᐃᐃᐃ: "img/day-tomato-herb.png",
        ⲆᐃᐃⵠΔⵠΔ: "img/night-tomato-herb.png",
        ⵠⵠᐃⲆᐃⲆᐃ: "img/day-tomato-herb-dried.png",
        ᐃΔᐃᐃⲆⵠⵠ: "img/night-tomato-herb-dried.png",
        ⵠΔⲆⵠⲆⵠⵠ: "img/day-tomato.png",
        ᐃΔⵠⲆⵠᐃᐃ: "img/night-tomato.png",
        ⲆⲆⵠΔᐃᐃⵠ: "img/inv-carrot-out.png",
        ᐃⵠΔⵠΔΔᐃ: "img/inv-carrot-in.png",
        ⲆⲆⲆⲆⵠⵠⲆ: "img/inv-carrot-click.png",
        ᐃⲆᐃⵠᐃᐃⵠ: "img/inv-tomato-out.png",
        ⵠⲆⵠΔᐃᐃⵠ: "img/inv-tomato-in.png",
        ΔⲆⲆΔᐃᐃᐃ: "img/inv-tomato-click.png",
        ᐃΔΔΔᐃⲆⲆ: "img/day-player0.png",
        ⵠⵠΔᐃᐃΔΔ: "img/night-player0.png",
        ᐃᐃⵠⵠⵠⲆᐃ: "img/day-player1.png",
        ᐃᐃⵠⵠᐃⲆΔ: "img/night-player1.png",
        ᐃⲆⵠⵠⵠΔⲆ: "img/day-player2.png",
        ΔⵠΔᐃⵠⲆⵠ: "img/night-player22.png",
        ΔᐃᐃⵠⲆⲆΔ: "img/day-player3.png",
        ΔᐃΔⲆΔⵠᐃ: "img/night-player33.png",
        ⲆΔᐃⵠΔᐃⲆ: "img/day-player4.png",
        ᐃΔᐃᐃⲆᐃⵠ: "img/night-player4.png",
        ΔⲆΔᐃᐃΔΔ: "img/day-player5.png",
        ΔᐃᐃᐃⲆᐃⲆ: "img/night-player5.png",
        ⵠΔⲆⲆⲆΔᐃ: "img/day-player6.png",
        ⵠⲆⵠᐃᐃⲆⵠ: "img/night-player6.png",
        ⲆᐃᐃΔᐃᐃΔ: "img/day-player7.png",
        ⵠΔⵠΔᐃⲆⵠ: "img/night-player7.png",
        ⵠⲆΔⲆᐃᐃⲆ: "img/day-player8.png",
        ΔⲆᐃΔⵠⵠᐃ: "img/night-player8.png",
        ⲆᐃΔⲆⲆⵠᐃ: "img/day-player9.png",
        ⲆⵠⲆΔⵠⵠⵠ: "img/night-player9.png",
        ⵠⵠᐃᐃΔⵠΔ: "img/day-player10.png",
        ⵠⲆⲆᐃⲆᐃᐃ: "img/night-player10.png",
        ⵠⵠⲆΔⵠⵠᐃ: "img/day-player11.png",
        ᐃⲆⲆⲆᐃⲆⲆ: "img/night-player11.png",
        ΔⲆΔΔⵠⲆΔ: "img/day-player12.png",
        ᐃΔᐃⲆⲆⲆⵠ: "img/night-player12.png",
        ᐃΔⵠⵠᐃᐃⵠ: "img/day-player13.png",
        ⵠᐃⲆᐃⲆΔΔ: "img/night-player13.png",
        ⵠⵠⵠⵠⲆΔΔ: "img/day-player14.png",
        ⲆⲆᐃⵠⵠⵠᐃ: "img/night-player14.png",
        ΔᐃᐃᐃᐃΔⵠ: "img/day-player15.png",
        ᐃᐃᐃᐃΔⵠΔ: "img/night-player15.png",
        ⵠΔΔΔⲆⵠΔ: "img/day-player16.png",
        ᐃΔᐃⵠⵠᐃᐃ: "img/night-player16.png",
        ΔⲆⲆⵠⲆⵠⲆ: "img/day-player17.png",
        ⵠΔⵠⵠΔⵠⵠ: "img/night-player17.png",
        ⲆᐃΔΔΔⲆᐃ: "img/day-player18.png",
        ⲆΔᐃⲆᐃᐃⲆ: "img/night-player18.png",
        ⵠΔⲆⲆΔⲆΔ: "img/day-player19.png",
        ⵠⵠΔⵠᐃᐃⵠ: "img/night-player19.png",
        ΔⲆⵠⲆᐃⲆΔ: "img/day-hand-player0.png",
        ᐃΔⵠᐃΔⲆⲆ: "img/night-hand-player0.png",
        ⵠⲆⲆΔⵠⲆⲆ: "img/day-hand-player1.png",
        ⵠΔᐃⲆⵠᐃⲆ: "img/night-hand-player1.png",
        ᐃΔⵠᐃⲆⲆᐃ: "img/day-hand-player2.png",
        ⵠⲆᐃᐃᐃΔΔ: "img/night-hand-player22.png",
        ⵠⵠⲆⵠΔⲆⲆ: "img/day-hand-player3.png",
        ⲆⵠΔⵠᐃΔⲆ: "img/night-hand-player33.png",
        ⵠⲆⵠΔⲆⲆᐃ: "img/day-hand-player4.png",
        ⵠΔΔΔΔⲆⲆ: "img/night-hand-player4.png",
        ⲆΔⵠⵠⵠⵠΔ: "img/day-hand-player5.png",
        ΔᐃⲆⲆⵠᐃΔ: "img/night-hand-player5.png",
        ΔΔΔⲆⲆⵠᐃ: "img/day-hand-player6.png",
        ⵠΔΔᐃΔΔᐃ: "img/night-hand-player6.png",
        ⵠᐃΔΔΔⵠⲆ: "img/day-hand-player7.png",
        ᐃⲆᐃⲆΔΔΔ: "img/night-hand-player7.png",
        ᐃᐃᐃⲆⲆΔΔ: "img/day-hand-player8.png",
        ᐃⵠⵠⵠⵠΔⲆ: "img/night-hand-player8.png",
        ⵠΔᐃΔΔⵠΔ: "img/day-hand-player9.png",
        ᐃΔᐃⵠᐃⵠΔ: "img/night-hand-player9.png",
        ᐃΔΔⲆᐃΔⲆ: "img/day-hand-player10.png",
        ᐃΔΔⲆⵠᐃᐃ: "img/night-hand-player10.png",
        ᐃⲆⵠⲆΔⵠⲆ: "img/day-hand-player11.png",
        ⵠⲆⲆⲆᐃΔΔ: "img/night-hand-player11.png",
        ΔⲆⲆᐃᐃⵠⵠ: "img/day-hand-player12.png",
        ⵠᐃᐃⵠᐃΔΔ: "img/night-hand-player12.png",
        ⵠΔΔΔᐃᐃΔ: "img/day-hand-player13.png",
        ⲆⲆᐃⲆⲆΔⲆ: "img/night-hand-player13.png",
        ᐃᐃᐃⲆⲆⲆΔ: "img/day-hand-player14.png",
        ΔⵠⵠᐃΔⲆⲆ: "img/night-hand-player14.png",
        ΔⲆᐃΔᐃΔⵠ: "img/day-hand-player15.png",
        ⵠⲆΔΔᐃⲆⵠ: "img/night-hand-player15.png",
        ᐃⲆᐃⲆᐃΔⲆ: "img/day-hand-player16.png",
        ⲆᐃΔⲆⵠⲆⵠ: "img/night-hand-player16.png",
        ᐃⵠᐃΔᐃΔᐃ: "img/day-hand-player17.png",
        ᐃⲆᐃⵠᐃⲆⲆ: "img/night-hand-player17.png",
        ᐃⲆⵠᐃⲆⵠΔ: "img/day-hand-player18.png",
        ΔᐃⲆᐃⲆⵠⲆ: "img/night-hand-player18.png",
        ⲆⲆΔᐃᐃᐃⵠ: "img/day-hand-player19.png",
        ᐃΔΔⵠⵠΔᐃ: "img/night-hand-player19.png",
        ⲆⵠⲆΔΔΔΔ: "img/day-accessory4.png",
        ΔΔᐃΔⲆⵠⲆ: "img/night-accessory4.png",
        ⲆΔᐃᐃΔᐃⵠ: "img/day-accessory9.png",
        ⵠⲆⲆᐃⲆⲆⵠ: "img/night-accessory9.png",
        ⵠⲆᐃΔⲆⲆᐃ: "img/day-accessory10.png",
        ᐃΔᐃΔⲆⵠⲆ: "img/night-accessory10.png",
        ᐃⵠⵠⵠⵠΔᐃ: "img/day-accessory11.png",
        ΔⵠⲆⲆΔΔⲆ: "img/night-accessory11.png",
        ⵠΔⲆᐃΔΔΔ: "img/day-accessory12.png",
        ᐃᐃⲆⲆΔᐃⲆ: "img/night-accessory12.png",
        ᐃⲆⵠⵠⵠⵠⵠ: "img/day-bag.png",
        ᐃᐃⲆⵠΔᐃᐃ: "img/night-bag.png",
        ⲆᐃⲆⵠΔⵠΔ: "img/inv-bag-out.png",
        ⲆⲆⲆΔⵠⲆᐃ: "img/inv-bag-in.png",
        ⲆⲆⵠⵠⲆᐃΔ: "img/inv-bag-click.png",
        ΔᐃᐃᐃⲆⵠᐃ: "img/day-pitchfork.png",
        ΔΔⵠⵠⲆΔⵠ: "img/night-pitchfork.png",
        ⲆΔΔⲆΔⲆⲆ: "img/inv-pitchfork-out.png",
        ᐃⵠᐃΔᐃⵠⲆ: "img/inv-pitchfork-in.png",
        ᐃΔⵠΔⵠⲆⵠ: "img/inv-pitchfork-click.png",
        ΔⵠᐃΔⵠⲆⲆ: "img/inv-wood-spike-door-out.png",
        ⵠᐃⵠΔⲆⲆⵠ: "img/inv-wood-spike-door-in.png",
        ᐃΔᐃᐃᐃᐃΔ: "img/inv-wood-spike-door-click.png",
        ⲆᐃⵠⵠⲆᐃⵠ: "img/inv-stone-spike-door-out.png",
        ΔᐃⲆΔⵠⵠΔ: "img/inv-stone-spike-door-in.png",
        ΔᐃⲆⲆⵠΔᐃ: "img/inv-stone-spike-door-click.png",
        ⵠⲆᐃⲆᐃΔΔ: "img/inv-gold-spike-door-out.png",
        ⲆⵠⵠᐃⲆⲆᐃ: "img/inv-gold-spike-door-in.png",
        ᐃⲆⵠⵠⵠΔΔ: "img/inv-gold-spike-door-click.png",
        ⲆᐃᐃᐃⲆΔΔ: "img/inv-diamond-spike-door-out.png",
        ⵠⵠΔΔᐃΔΔ: "img/inv-diamond-spike-door-in.png",
        ᐃⵠⲆⲆⵠᐃⲆ: "img/inv-diamond-spike-door-click.png",
        ΔΔⲆⵠⲆΔⵠ: "img/inv-amethyst-spike-door-out.png",
        ΔᐃᐃᐃⲆⵠⵠ: "img/inv-amethyst-spike-door-in.png",
        ᐃⵠᐃⲆⲆᐃⵠ: "img/inv-amethyst-spike-door-click.png",
        ᐃΔⵠⵠΔΔⲆ: "img/day-wood-spike-door.png",
        ΔΔΔᐃⲆΔⲆ: "img/night-wood-spike-door.png",
        ΔⵠΔᐃⵠⲆᐃ: "img/day-stone-spike-door.png",
        ΔⲆᐃΔⲆⵠᐃ: "img/night-stone-spike-door.png",
        ΔⲆΔⵠⵠΔⵠ: "img/day-gold-spike-door.png",
        ⲆΔⵠᐃⵠΔᐃ: "img/night-gold-spike-door.png",
        ⵠΔᐃⲆᐃᐃⵠ: "img/day-diamond-spike-door.png",
        ⲆᐃᐃⵠᐃⲆᐃ: "img/night-diamond-spike-door.png",
        ΔⵠᐃⲆᐃΔΔ: "img/day-amethyst-spike-door.png",
        ⲆⵠΔⵠⵠΔΔ: "img/night-amethyst-spike-door.png",
        ΔᐃΔⲆᐃⲆⲆ: "img/inv-reidite-spike-door-out.png",
        ⵠᐃⵠΔᐃⵠΔ: "img/inv-reidite-spike-door-in.png",
        ᐃᐃᐃᐃΔⵠᐃ: "img/inv-reidite-spike-door-click.png",
        ΔᐃᐃⲆᐃⵠⵠ: "img/inv-reidite-door-out.png",
        ᐃⲆⲆΔΔⲆΔ: "img/inv-reidite-door-in.png",
        ⲆⵠΔⵠⲆⲆᐃ: "img/inv-reidite-door-click.png",
        ⲆⲆΔᐃⵠᐃⲆ: "img/inv-reidite-spike-out.png",
        ⲆΔᐃΔⲆⵠⲆ: "img/inv-reidite-spike-in.png",
        ⵠⵠᐃⲆᐃᐃⵠ: "img/inv-reidite-spike-click.png",
        ᐃΔⵠΔⵠᐃⲆ: "img/inv-reidite-wall-out.png",
        ᐃⲆΔⵠᐃΔⲆ: "img/inv-reidite-wall-in.png",
        ⲆⵠΔⵠΔⵠⲆ: "img/inv-reidite-wall-click.png",
        ⵠⲆΔᐃⲆᐃⲆ: "img/day-reidite-wall.png",
        ΔᐃⲆⵠⵠⲆΔ: "img/night-reidite-wall.png",
        ΔᐃⵠΔΔⲆᐃ: "img/day-reidite-door.png",
        ⵠΔⲆᐃⵠⲆⵠ: "img/night-reidite-door.png",
        ᐃᐃΔᐃⲆᐃⵠ: "img/day-reidite-spike.png",
        ⵠⲆᐃΔⵠᐃΔ: "img/night-reidite-spike.png",
        ΔⲆⲆⵠᐃⲆⲆ: "img/day-reidite-spike-door.png",
        ⵠΔⵠᐃⵠⲆᐃ: "img/night-reidite-spike-door.png",
        ⵠΔΔⲆᐃΔⲆ: "img/inv-reidite-pickaxe-out.png",
        ᐃᐃΔⲆᐃᐃΔ: "img/inv-reidite-pickaxe-in.png",
        ΔΔΔⵠΔⲆⵠ: "img/inv-reidite-pickaxe-click.png",
        ᐃⲆⲆᐃⲆⲆⵠ: "img/day-reidite-pickaxe.png",
        ⵠⲆⵠᐃᐃⵠⵠ: "img/night-reidite-pickaxe.png",
        ᐃⲆΔⵠᐃᐃⲆ: "img/inv-reidite-hammer-out.png",
        ᐃΔⵠⵠᐃⲆᐃ: "img/inv-reidite-hammer-in.png",
        ΔⵠΔΔΔⵠΔ: "img/inv-reidite-hammer-click.png",
        ΔⲆΔΔⵠⵠⲆ: "img/day-reidite-hammer.png",
        ⵠⵠΔⲆⵠⲆΔ: "img/night-reidite-hammer.png",
        ΔΔⲆᐃΔΔΔ: "img/day-watermelon1.png",
        ᐃⵠΔⲆⲆⲆⲆ: "img/night-watermelon1.png",
        ⲆΔΔΔᐃᐃⵠ: "img/day-watermelon-dried1.png",
        ⲆⲆⵠΔⲆᐃⵠ: "img/night-watermelon-dried1.png",
        ΔⵠΔΔᐃⵠΔ: "img/inv-watermelon-out.png",
        ⲆⲆᐃΔΔⲆᐃ: "img/inv-watermelon-in.png",
        ⵠⲆᐃΔΔΔᐃ: "img/inv-watermelon-click.png",
        ⲆⵠⵠⵠᐃΔⲆ: "img/day-boat.png",
        ᐃⲆⵠⵠᐃΔΔ: "img/night-boat.png",
        ᐃᐃᐃΔⲆⵠⵠ: "img/day-boat-wave.png",
        ⵠⲆᐃᐃⲆΔⵠ: "img/night-boat-wave.png",
        ⲆⵠᐃΔΔⲆⲆ: "img/inv-boat-out.png",
        ⲆⲆᐃⵠΔᐃᐃ: "img/inv-boat-in.png",
        Δⵠᐃᐃᐃᐃⵠ: "img/inv-boat-click.png",
        ⵠᐃⲆΔΔᐃᐃ: "img/day-plane.png",
        ⵠΔΔΔⵠⵠⵠ: "img/night-plane.png",
        ⵠⵠΔᐃᐃΔⵠ: "img/inv-plane-out.png",
        ⵠᐃⵠᐃΔⲆΔ: "img/inv-plane-in.png",
        Δⵠⵠⵠᐃⵠᐃ: "img/inv-plane-click.png",
        ⵠΔⲆᐃⵠᐃΔ: "img/day-sled.png",
        ΔΔᐃⵠⵠⲆᐃ: "img/night-sled.png",
        ⲆΔⵠᐃⵠΔⵠ: "img/day-sled-wave.png",
        ΔⵠⲆᐃⵠᐃᐃ: "img/night-sled-wave.png",
        ⲆⵠⵠⲆⵠᐃⲆ: "img/inv-sled-out.png",
        ⲆⵠⵠⵠⵠΔᐃ: "img/inv-sled-in.png",
        ⵠⲆⲆⵠⲆΔᐃ: "img/inv-sled-click.png",
        ⲆⲆⲆⵠᐃⲆᐃ: "img/day-pirate-hat.png",
        ⲆᐃΔΔᐃⲆΔ: "img/night-pirate-hat.png",
        ⲆⵠⵠⲆⵠⵠⲆ: "img/inv-pirate-hat-out.png",
        ⲆⵠΔᐃⲆⲆⵠ: "img/inv-pirate-hat-in.png",
        ᐃᐃⵠΔΔΔᐃ: "img/inv-pirate-hat-click.png",
        ᐃⵠⵠᐃΔⵠΔ: "img/day-penguin.png",
        ΔⲆᐃⲆᐃΔᐃ: "img/night-penguin.png",
        ᐃⵠᐃΔⵠΔᐃ: "img/hurt-penguin.png",
        ⲆᐃⲆⵠᐃ: "img/inv-penguin-feather-click.png",
        ΔᐃⵠᐃⲆ: "img/inv-hawk-feather-click.png",
        ᐃⲆᐃΔᐃⲆᐃ: "img/day-boar1.png",
        ΔⵠⵠⲆⲆⵠᐃ: "img/day-boar1-tamed.png",
        ᐃⲆᐃⲆᐃⲆΔ: "img/day-boar1-angry.png",
        ᐃⲆⲆΔΔⵠᐃ: "img/night-boar1.png",
        ⵠⵠⲆⵠᐃᐃΔ: "img/night-boar1-tamed.png",
        ΔᐃᐃⲆⵠᐃΔ: "img/night-boar1-angry.png",
        ⵠⵠᐃᐃᐃΔΔ: "img/inv-mount-boar-out.png",
        ⲆⲆΔΔΔΔⲆ: "img/inv-mount-boar-in.png",
        ᐃⲆⲆⲆⲆⵠⲆ: "img/inv-mount-boar-click.png",
        ᐃⲆΔᐃᐃΔⵠ: "img/day-hurt-boar1.png",
        ΔΔΔᐃᐃᐃⲆ: "img/boar1-step.png",
        ⵠΔΔᐃⲆⵠΔ: "img/day-saddle1.png",
        ⲆΔᐃⲆⲆΔⵠ: "img/night-saddle1.png",
        ⵠⵠᐃⲆⵠⵠⵠ: "img/inv-saddle-out.png",
        ⲆΔᐃⵠⵠᐃⲆ: "img/inv-saddle-in.png",
        ΔⲆΔⲆΔᐃⵠ: "img/inv-saddle-click.png",
        ᐃΔΔⲆΔⵠⵠ: "img/day-magic-wand0.png",
        ⵠᐃⵠᐃΔΔΔ: "img/night-magic-wand0.png",
        ᐃΔⲆⵠⲆᐃΔ: "img/day-light-wand1.png",
        ΔⵠⵠⵠⵠΔⲆ: "img/night-light-wand1.png",
        ᐃⲆⵠΔⲆᐃᐃ: "img/inv-magic-wand0-out.png",
        ΔⲆΔⲆⵠΔᐃ: "img/inv-magic-wand0-in.png",
        ᐃⵠᐃⵠⵠΔⲆ: "img/inv-magic-wand0-click.png",
        ΔⵠᐃΔΔⲆᐃ: "img/day-magic-wand1.png",
        ⲆⲆⲆⲆᐃⵠᐃ: "img/night-magic-wand1.png",
        ᐃΔΔᐃΔⲆⲆ: "img/day-light-wand0.png",
        ΔⵠⲆΔⲆⲆⵠ: "img/night-light-wand0.png",
        ΔΔΔᐃᐃᐃⵠ: "img/inv-magic-wand1-out.png",
        ᐃⵠᐃⲆⵠΔᐃ: "img/inv-magic-wand1-in.png",
        ⲆΔⲆⵠⵠⵠⲆ: "img/inv-magic-wand1-click.png",
        ⵠΔᐃⲆΔΔⵠ: "img/day-firefly.png",
        ᐃΔΔⵠᐃⲆΔ: "img/night-firefly.png",
        ⵠΔᐃⵠⵠΔⵠ: "img/hurt-firefly.png",
        ᐃΔⵠᐃᐃⲆᐃ: "img/inv-firefly-out.png",
        ⲆⵠΔᐃⲆⵠᐃ: "img/inv-firefly-in.png",
        ⲆⵠᐃᐃᐃΔⵠ: "img/inv-firefly-click.png",
        ⵠⲆΔΔΔⲆⲆ: "img/day-baby-dragon.png",
        ⲆⵠⵠⵠⵠⲆᐃ: "img/night-baby-dragon.png",
        ⵠⲆΔᐃᐃⲆΔ: "img/day-baby-dragon-angry.png",
        ⵠⵠᐃⲆⵠᐃⲆ: "img/night-baby-dragon-angry.png",
        ⵠⲆᐃⲆⵠⲆⲆ: "img/day-baby-dragon-tamed.png",
        ⵠⲆΔⲆΔⵠΔ: "img/night-baby-dragon-tamed.png",
        ⵠⵠⲆᐃⲆᐃᐃ: "img/day-wing-dragon-left-angry.png",
        ⵠΔᐃⵠΔⲆⲆ: "img/night-dragon-wing-left-angry.png",
        ᐃⵠⲆⵠⵠΔⵠ: "img/day-wing-dragon-right-angry.png",
        ΔⵠⵠΔᐃᐃⲆ: "img/night-dragon-wing-right-angry.png",
        ⲆⲆᐃⵠᐃΔⲆ: "img/day-wing-dragon-left-tamed.png",
        ᐃⵠⲆⲆΔᐃΔ: "img/night-dragon-wing-left-tamed.png",
        ⲆⵠⲆᐃᐃⲆⲆ: "img/day-wing-dragon-right-tamed.png",
        ⲆⵠⵠΔΔΔᐃ: "img/night-wing-dragon-right-tamed.png",
        ⲆⲆΔᐃᐃⵠΔ: "img/day-wing-dragon-left.png",
        ⵠⵠᐃᐃⵠⲆⲆ: "img/night-dragon-wing-left.png",
        ⵠⲆᐃΔⲆΔΔ: "img/day-wing-dragon-right.png",
        ⲆⲆⵠⲆΔΔᐃ: "img/night-wing-dragon-right.png",
        ΔᐃᐃᐃⵠⲆⲆ: "img/hurt-baby-dragon.png",
        ᐃⲆΔΔᐃⲆⵠ: "img/hurt-baby-dragon-wing-left.png",
        ⵠⵠΔΔΔⵠⲆ: "img/hurt-baby-dragon-wing-right.png",
        ⵠΔᐃΔⵠᐃⲆ: "img/inv-baby-dragon-out.png",
        ⵠᐃⲆⲆΔⲆⲆ: "img/inv-baby-dragon-in.png",
        ΔⵠΔΔΔᐃⲆ: "img/inv-baby-dragon-click.png",
        ΔΔⲆᐃⵠᐃⲆ: "img/day-baby-lava.png",
        ΔᐃΔⵠΔΔΔ: "img/night-baby-lava.png",
        ΔⲆΔⲆⲆΔᐃ: "img/day-baby-lava-angry.png",
        ⲆⲆᐃᐃᐃⵠⵠ: "img/night-baby-lava-angry.png",
        ⵠⵠΔⲆΔᐃⵠ: "img/day-baby-lava-tamed.png",
        ⵠᐃⵠⵠⲆᐃⵠ: "img/night-baby-lava-tamed.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/day-wing-lava-left-angry.png",
        ⵠᐃᐃⲆⲆᐃᐃ: "img/night-wing-lava-left-angry.png",
        ⲆᐃΔⲆᐃᐃΔ: "img/day-wing-lava-right-angry.png",
        ᐃᐃⲆᐃⲆΔΔ: "img/night-wing-lava-right-angry.png",
        ΔᐃΔⲆⲆⵠⵠ: "img/day-wing-lava-left-tamed.png",
        ⲆΔᐃⲆΔⲆⲆ: "img/night-wing-lava-left-tamed.png",
        Δᐃᐃⵠⵠⵠᐃ: "img/day-wing-lava-right-tamed.png",
        ⲆΔᐃⲆᐃΔⲆ: "img/night-wing-lava-right-tamed.png",
        ᐃⲆⲆⵠᐃᐃⲆ: "img/day-wing-lava-left.png",
        ⵠΔⵠⵠΔⲆΔ: "img/night-wing-lava-left.png",
        ΔᐃⵠΔⵠⵠⲆ: "img/day-wing-lava-right.png",
        ⲆΔⵠⲆᐃⵠᐃ: "img/night-wing-lava-right.png",
        ᐃⵠⵠΔᐃⲆΔ: "img/hurt-baby-lava.png",
        ⵠᐃⵠᐃΔⵠΔ: "img/hurt-baby-lava-wing-left.png",
        ᐃΔᐃΔⵠᐃᐃ: "img/hurt-baby-lava-wing-right.png",
        ᐃⵠΔⲆᐃΔᐃ: "img/inv-baby-lava-out.png",
        ⵠΔⵠᐃⲆΔⵠ: "img/inv-baby-lava-in.png",
        ΔⵠⵠⵠⲆⲆᐃ: "img/inv-baby-lava-click.png",
        ᐃⲆᐃΔⲆⲆΔ: "img/day-falcon.png",
        ⲆᐃᐃΔΔⵠⲆ: "img/night-falcon.png",
        ΔⲆⲆⲆᐃᐃΔ: "img/day-falcon-angry.png",
        ⵠΔⵠᐃᐃⵠᐃ: "img/night-falcon-angry.png",
        ΔⲆⵠⵠᐃᐃⵠ: "img/day-falcon-ground.png",
        ⵠΔΔⵠᐃⲆⲆ: "img/night-falcon-ground.png",
        ΔⵠⲆⵠᐃΔᐃ: "img/day-falcon-ground-angry.png",
        ⵠⲆΔⲆⲆΔΔ: "img/night-falcon-ground-angry.png",
        ⵠΔΔⵠΔⲆᐃ: "img/day-falcon-wings-left.png",
        ⲆⵠⲆⵠⵠⲆᐃ: "img/night-falcon-wings-left.png",
        ⵠΔᐃⲆⲆᐃⲆ: "img/day-falcon-wings-right.png",
        ⵠΔⲆΔᐃⲆⵠ: "img/night-falcon-wings-right.png",
        ⲆΔⲆⵠⵠⲆΔ: "img/day-falcon-angry-wings-left.png",
        ⵠΔⲆⵠⲆⵠΔ: "img/night-falcon-angry-wings-left.png",
        ᐃⵠⲆⲆᐃⲆⵠ: "img/day-falcon-angry-wings-right.png",
        ⲆⵠΔⲆᐃᐃΔ: "img/night-falcon-angry-wings-right.png",
        ⲆⲆΔⲆΔⵠⲆ: "img/day-falcon-wings-left-tamed.png",
        ⵠⲆⵠᐃΔΔᐃ: "img/night-falcon-wings-left-tamed.png",
        ⲆΔΔⲆⵠΔᐃ: "img/day-falcon-wings-right-tamed.png",
        ΔⲆΔΔᐃⵠᐃ: "img/night-falcon-wings-right-tamed.png",
        ⲆΔⵠᐃᐃᐃᐃ: "img/day-falcon-tamed.png",
        ⵠⵠΔᐃⲆⵠⲆ: "img/night-falcon-tamed.png",
        ⵠⵠⲆⲆΔⲆΔ: "img/hurt-falcon-ground.png",
        ⵠΔᐃᐃᐃΔΔ: "img/hurt-falcon.png",
        ΔᐃⲆΔⵠΔⲆ: "img/hurt-falcon-wings-left.png",
        Ⲇᐃⵠᐃᐃⵠᐃ: "img/hurt-falcon-wings-right.png",
        ΔⲆᐃᐃΔⵠⵠ: "img/inv-falcon-out.png",
        ᐃᐃⵠᐃΔΔΔ: "img/inv-falcon-in.png",
        ᐃⵠΔᐃΔΔΔ: "img/inv-falcon-click.png",
        ⲆΔⵠᐃⲆⲆΔ: "img/day-crab-boss.png",
        ⲆΔᐃΔⲆᐃⵠ: "img/night-crab-boss.png",
        ΔᐃⵠᐃⵠⲆⵠ: "img/day-crab-boss-angry.png",
        ⲆΔᐃⵠΔⵠΔ: "img/night-crab-boss-angry.png",
        ΔⲆᐃᐃΔᐃⲆ: "img/day-crab-boss-tamed.png",
        ΔΔᐃᐃΔⵠⲆ: "img/night-crab-boss-tamed.png",
        ⲆⲆΔⲆⵠᐃⲆ: "img/day-crab-boss-claw-left-attack.png",
        ⵠΔⵠᐃⲆᐃΔ: "img/night-crab-boss-claw-left-attack.png",
        ΔᐃΔΔⲆΔᐃ: "img/day-crab-boss-claw-right-attack.png",
        ΔⲆⲆⲆᐃΔᐃ: "img/night-crab-boss-claw-right-attack.png",
        ᐃⵠᐃⵠᐃⵠᐃⵠⲆ: "img/day-crab-boss-claw-left-tamed.png",
        ⲆᐃᐃⲆⵠᐃⵠⲆΔ: "img/night-crab-boss-claw-left-tamed.png",
        ⵠⵠⵠⵠⵠΔΔΔΔ: "img/day-crab-boss-claw-right-tamed.png",
        ᐃᐃᐃΔⵠⲆᐃΔⲆ: "img/night-crab-boss-claw-right-tamed.png",
        ᐃⲆΔᐃᐃⵠΔ: "img/day-crab-boss-claw-left.png",
        ΔᐃᐃⵠⲆᐃΔ: "img/night-crab-boss-claw-left.png",
        ᐃⵠᐃᐃΔⵠΔ: "img/day-crab-boss-claw-right.png",
        ⲆⲆΔᐃΔᐃᐃ: "img/night-crab-boss-claw-right.png",
        ⵠⲆⲆΔⲆΔⲆ: "img/hurt-crab-boss.png",
        ᐃᐃΔΔΔΔⲆ: "img/hurt-crab-boss-claw-left.png",
        ᐃⵠⲆᐃⵠᐃᐃ: "img/hurt-crab-boss-claw-right.png",
        ΔⲆΔΔᐃⲆᐃ: "img/heal-crab-boss.png",
        ⲆⲆⵠⵠⲆⵠΔ: "img/heal-crab-boss-claw-left.png",
        ΔΔΔᐃⲆΔⵠ: "img/heal-crab-boss-claw-right.png",
        ⵠᐃᐃᐃⵠⲆΔ: "img/crab-step.png",
        ⲆᐃΔⲆΔⲆΔ: "img/inv-crab-boss-out.png",
        ᐃⵠᐃΔΔΔⲆ: "img/inv-crab-boss-in.png",
        ⵠⲆᐃΔⵠΔⲆ: "img/inv-crab-boss-click.png",
        ⲆⵠⲆᐃΔⵠⵠ: "img/day-cactus10.png",
        ΔⲆⲆⵠⲆᐃᐃ: "img/night-cactus10.png",
        ⲆⵠΔᐃⲆⲆΔ: "img/inv-cactus-out.png",
        ΔⵠΔΔᐃⵠⵠ: "img/inv-cactus-in.png",
        ⵠΔᐃⲆⵠΔᐃ: "img/inv-cactus-click.png",
        ⲆΔⲆᐃⵠⲆⲆ: "img/day-scorpion.png",
        ⲆⲆΔⲆΔᐃΔ: "img/night-scorpion.png",
        ⲆⲆⵠΔᐃᐃⲆ: "img/day-scorpion-hand-left.png",
        ⵠᐃΔⵠⵠⲆⲆ: "img/night-scorpion-hand-left.png",
        ⵠᐃⵠⵠᐃΔⲆ: "img/day-scorpion-hand-right.png",
        ᐃᐃΔΔⵠⲆⲆ: "img/night-scorpion-hand-right.png",
        ΔⵠᐃᐃⲆⲆᐃ: "img/hurt-scorpion.png",
        ⵠᐃⲆΔⵠᐃⵠ: "img/hurt-scorpion-hand-left.png",
        ᐃⲆⲆⲆⵠⲆᐃ: "img/hurt-scorpion-hand-right.png",
        ⵠᐃᐃⵠᐃΔᐃ: "img/day-vulture.png",
        ΔᐃᐃⲆⵠΔⲆ: "img/night-vulture.png",
        ΔᐃⲆⲆΔΔΔ: "img/day-vulture-angry.png",
        ᐃΔⲆΔΔΔⵠ: "img/night-vulture-angry.png",
        ΔⲆⵠⵠⲆⲆᐃ: "img/day-vulture-ground.png",
        ᐃΔΔⲆⵠⵠⲆ: "img/night-vulture-ground.png",
        ⵠᐃⵠⵠⲆΔᐃ: "img/day-vulture-ground-angry.png",
        ⲆⵠΔⵠⲆⲆΔ: "img/night-vulture-ground-angry.png",
        ΔⵠⲆⵠᐃⵠΔ: "img/day-vulture-wings-left.png",
        ⵠᐃΔⲆⵠΔΔ: "img/night-vulture-wings-left.png",
        ΔⵠⲆᐃⵠⵠⵠ: "img/day-vulture-wings-right.png",
        ΔⲆⵠᐃⵠΔⵠ: "img/night-vulture-wings-right.png",
        ᐃᐃΔΔⵠⵠⵠ: "img/day-vulture-angry-wings-left.png",
        ᐃΔⵠⵠⵠᐃⵠ: "img/night-vulture-angry-wings-left.png",
        ᐃᐃⵠⲆΔⵠΔ: "img/day-vulture-angry-wings-right.png",
        ᐃⲆΔⲆᐃΔΔ: "img/night-vulture-angry-wings-right.png",
        ᐃᐃΔⲆⲆΔⵠ: "img/day-vulture-wings-left-tamed.png",
        ΔⲆᐃᐃⵠⲆΔ: "img/night-vulture-wings-left-tamed.png",
        ⵠΔΔΔΔᐃⵠ: "img/day-vulture-wings-right-tamed.png",
        ΔⵠᐃΔΔΔⵠ: "img/night-vulture-wings-right-tamed.png",
        ΔΔⵠⵠΔΔΔ: "img/day-vulture-tamed.png",
        ΔⲆΔⲆⵠⵠΔ: "img/night-vulture-tamed.png",
        ᐃⵠΔⲆⵠΔⲆ: "img/hurt-vulture-ground.png",
        ᐃⲆⵠⲆᐃᐃᐃ: "img/hurt-vulture.png",
        ⲆᐃⲆΔᐃⵠᐃ: "img/hurt-vulture-wings-left.png",
        ⵠᐃᐃⵠⲆΔⲆ: "img/hurt-vulture-wings-right.png",
        ⵠⵠⲆΔᐃΔᐃ: "img/day-aloe-vera.png",
        ᐃᐃᐃⲆⵠΔᐃ: "img/night-aloe-vera.png",
        ᐃΔᐃᐃᐃⵠᐃ: "img/inv-aloe-vera-out.png",
        ⲆⲆⵠⲆᐃⵠⲆ: "img/inv-aloe-vera-in.png",
        ⲆΔⵠⲆⲆⵠᐃ: "img/inv-aloe-vera-click.png",
        ᐃΔᐃⵠᐃⵠᐃ: "img/day-aloe-vera-grown.png",
        ⵠΔΔΔΔᐃΔ: "img/night-aloe-vera-grown.png",
        ᐃⲆᐃΔΔⲆᐃ: "img/day-aloe-vera-dried.png",
        ΔΔΔᐃᐃΔΔ: "img/night-aloe-vera-dried.png",
        ⲆᐃⲆⲆᐃⲆΔ: "img/day-turban1.png",
        ⵠⵠᐃΔⵠⵠᐃ: "img/night-turban1.png",
        ⲆⵠᐃⲆᐃΔᐃ: "img/day-turban2.png",
        ᐃⵠⵠᐃΔᐃⲆ: "img/night-turban2.png",
        ⵠⲆⲆⲆⲆⲆΔ: "img/inv-turban2-out.png",
        ΔΔⲆᐃⲆΔᐃ: "img/inv-turban2-in.png",
        ⲆΔᐃⲆⲆⵠⵠ: "img/inv-turban2-click.png",
        ᐃⲆΔΔᐃⲆΔ: "img/inv-turban1-out.png",
        ᐃⵠΔΔⲆⲆᐃ: "img/inv-turban1-in.png",
        ᐃᐃᐃΔΔᐃΔ: "img/inv-turban1-click.png",
        ΔⲆΔⲆᐃⵠⲆ: "img/day-pitchfork2.png",
        ΔᐃᐃⵠᐃⵠΔ: "img/night-pitchfork2.png",
        ΔΔᐃⲆᐃⲆⵠ: "img/inv-pitchfork2-out.png",
        ᐃΔⲆΔⵠΔⲆ: "img/inv-pitchfork2-in.png",
        ⵠᐃⵠⵠⲆᐃᐃ: "img/inv-pitchfork2-click.png",
        ⲆⲆⲆⵠΔΔⲆ: "img/inv-gold-fork-click.png",
        ΔᐃᐃⲆⵠᐃⲆ: "img/inv-pilot-glasses-click.png",
        ⵠⲆⲆⲆⲆⵠᐃ: "img/day-pilot-helmet.png",
        ᐃⲆⲆΔΔⵠΔ: "img/night-pilot-helmet.png",
        ⲆⵠⲆⲆΔⵠⲆ: "img/inv-pilot-helmet-out.png",
        ⵠΔⵠⵠⲆⲆΔ: "img/inv-pilot-helmet-in.png",
        ⲆⵠΔΔᐃⲆᐃ: "img/inv-pilot-helmet-click.png",
        ⲆⵠⲆΔᐃⵠᐃⲆᐃ: "img/day-sandworm0.png",
        ⲆⲆⲆᐃΔᐃⲆ: "img/day-sandworm1.png",
        ᐃⲆⲆΔΔΔᐃ: "img/day-sandworm2.png",
        ΔⲆⵠᐃⵠⵠᐃⵠⵠ: "img/night-sandworm0.png",
        ΔⵠⵠⵠᐃΔⵠ: "img/night-sandworm1.png",
        ⲆⵠᐃⲆⵠᐃΔ: "img/night-sandworm2.png",
        ⵠⵠⵠΔⵠΔⵠ: "img/hurt-sandworm0.png",
        ᐃᐃᐃⵠⲆⲆⵠ: "img/hurt-sandworm1.png",
        ⲆⲆᐃᐃᐃⲆᐃ: "img/hurt-sandworm2.png",
        ᐃΔⲆΔΔ: "img/inv-vulture-feather-click.png",
        ⲆΔᐃⲆᐃⲆΔ: "img/day-emerald0.png",
        ΔᐃⵠᐃΔΔΔ: "img/night-emerald0.png",
        ⵠᐃΔⲆΔⲆⵠ: "img/day-emerald1.png",
        ᐃⲆΔΔⵠΔⲆ: "img/night-emerald1.png",
        ᐃⲆⲆⵠᐃⲆᐃ: "img/day-emerald2.png",
        ⲆⲆⵠⵠΔΔᐃ: "img/night-emerald2.png",
        ⲆᐃΔᐃᐃ: "img/inv-emerald-click.png",
        ⲆᐃⵠⵠᐃΔⵠ: "img/inv-sworm-juice-out.png",
        ΔⲆΔᐃⲆⲆΔ: "img/inv-sworm-juice-in.png",
        ΔⵠⲆⵠᐃⲆⲆ: "img/inv-sworm-juice-click.png",
        ⲆΔᐃᐃᐃΔᐃ: "img/day-point-machine.png",
        ᐃⲆⵠⲆᐃᐃΔ: "img/night-point-machine.png",
        ⲆΔᐃᐃΔᐃᐃ: "img/day-point-machine-hole.png",
        ᐃᐃⵠⲆΔⲆⲆ: "img/night-point-machine-hole.png",
        ⵠⲆΔⲆΔᐃⵠ: "img/day-point-machine-ground.png",
        ΔⲆᐃⲆᐃⲆⲆ: "img/night-point-machine-ground.png",
        ⲆⲆⵠⲆΔᐃΔ: "img/day-point-machine-rotate.png",
        ᐃΔⵠⵠⲆⲆⵠ: "img/night-point-machine-rotate.png",
        ΔΔⵠᐃⲆΔᐃ: "img/inv-point-machine-out.png",
        ᐃⲆⲆⵠᐃΔΔ: "img/inv-point-machine-in.png",
        ⵠⵠⲆⲆⲆⲆᐃ: "img/inv-point-machine-click.png",
        ΔᐃⵠⲆΔⲆⲆ: "img/day-extractor-machine0-stone.png",
        ΔΔΔⵠⵠᐃⵠ: "img/night-extractor-machine0-stone.png",
        ᐃΔⵠⲆΔⲆΔ: "img/day-extractor-machine-stone.png",
        ᐃΔΔⲆⲆⵠⲆ: "img/night-extractor-machine-stone.png",
        ⵠΔⲆⵠⲆᐃᐃ: "img/inv-extractor-machine-stone-out.png",
        ΔΔⵠⲆⲆⵠΔ: "img/inv-extractor-machine-stone-in.png",
        ΔᐃⲆΔⵠΔᐃ: "img/inv-extractor-machine-stone-click.png",
        ΔⲆᐃⵠⵠⲆᐃ: "img/day-extractor-machine0-gold.png",
        ⵠΔⵠⵠⲆⲆᐃ: "img/night-extractor-machine0-gold.png",
        ⵠⲆΔᐃΔΔΔ: "img/day-extractor-machine-gold.png",
        ⲆⵠⲆΔᐃᐃᐃ: "img/night-extractor-machine-gold.png",
        ΔⲆᐃⵠᐃᐃᐃ: "img/inv-extractor-machine-gold-out.png",
        ᐃⵠⲆⵠᐃⲆᐃ: "img/inv-extractor-machine-gold-in.png",
        ⲆΔⵠᐃⲆΔⵠ: "img/inv-extractor-machine-gold-click.png",
        ᐃΔΔⵠⲆⵠⲆ: "img/day-extractor-machine0-diamond.png",
        ⲆⲆⲆⵠⲆΔⵠ: "img/night-extractor-machine0-diamond.png",
        ᐃᐃΔⵠⲆΔⵠ: "img/day-extractor-machine-diamond.png",
        ΔⵠᐃⵠⲆⵠᐃ: "img/night-extractor-machine-diamond.png",
        ΔΔᐃⲆᐃΔᐃ: "img/inv-extractor-machine-diamond-out.png",
        ⵠⲆᐃΔⵠⲆⵠ: "img/inv-extractor-machine-diamond-in.png",
        ΔΔⲆⲆΔⵠⲆ: "img/inv-extractor-machine-diamond-click.png",
        ⲆᐃⵠⲆⲆᐃᐃ: "img/day-extractor-machine0-amethyst.png",
        ᐃᐃⵠⲆⵠⲆⲆ: "img/night-extractor-machine0-amethyst.png",
        ΔⵠΔᐃᐃΔΔ: "img/day-extractor-machine-amethyst.png",
        ΔⲆᐃᐃΔⲆⵠ: "img/night-extractor-machine-amethyst.png",
        ⲆᐃᐃⵠⵠⲆⵠ: "img/inv-extractor-machine-amethyst-out.png",
        ⵠⲆΔⵠⵠⲆᐃ: "img/inv-extractor-machine-amethyst-in.png",
        ΔⵠᐃⲆᐃᐃⲆ: "img/inv-extractor-machine-amethyst-click.png",
        ⵠΔⲆᐃΔⲆᐃ: "img/day-extractor-machine0-reidite.png",
        ⵠᐃⲆⲆⲆⲆΔ: "img/night-extractor-machine0-reidite.png",
        ⵠⲆᐃᐃⵠΔⲆ: "img/day-extractor-machine-reidite.png",
        ΔᐃⲆΔⵠⲆΔ: "img/night-extractor-machine-reidite.png",
        ⵠⲆⵠⲆⲆⲆᐃ: "img/inv-extractor-machine-reidite-out.png",
        ΔⲆᐃᐃⲆᐃⵠ: "img/inv-extractor-machine-reidite-in.png",
        ⵠᐃᐃᐃⵠΔᐃ: "img/inv-extractor-machine-reidite-click.png",
        ⲆΔⵠᐃΔⲆᐃ: "img/extractor-cases.png",
        ⲆⲆⵠⵠⵠΔΔ: "img/day-golden-hen.png",
        ⵠⲆⲆᐃᐃᐃⲆ: "img/night-golden-hen.png",
        ⲆⵠᐃⵠᐃΔⵠ: "img/day-golden-chicken.png",
        ΔⲆⲆⵠⲆᐃⵠ: "img/night-golden-chicken.png",
        ᐃᐃΔᐃⲆΔᐃ: "img/hurt-golden-hen.png",
        ᐃΔⵠⵠⵠΔᐃ: "img/hurt-golden-chicken.png",
        ΔᐃⲆⵠᐃᐃΔ: "img/logo-interface.png",
        ᐃΔⵠᐃⵠⲆᐃ: "img/forest-mode-hover.png",
        ⲆⲆⲆᐃⵠⲆⵠ: "img/normal-mode-hover.png",
        ᐃᐃⵠᐃⲆᐃⵠ: "img/vampire-mode-hover.png",
        ᐃⵠⲆᐃⲆⲆⲆ: "img/zombie-mode-hover.png",
        ΔⲆᐃΔⲆⲆᐃ: "img/community-mode-hover2.png",
        ᐃᐃⲆⲆΔⲆᐃ: "img/experimental-mode-hover.png",
        ⵠΔᐃⲆᐃᐃᐃ: "img/zombie-mode-out.png",
        ⲆⲆᐃⲆⵠᐃᐃ: "img/zombie-mode-in.png",
        ⲆⵠΔᐃΔⵠΔ: "img/zombie-mode-click.png",
        ᐃΔΔⵠⵠᐃⲆ: "img/vampire-mode-out.png",
        ΔⲆᐃᐃΔⵠⲆ: "img/vampire-mode-in.png",
        ⵠⲆⵠⲆⵠⲆⵠ: "img/vampire-mode-click.png",
        ΔⵠΔᐃⲆⵠⲆ: "img/normal-mode-out.png",
        ⵠⵠⵠΔⲆⵠΔ: "img/normal-mode-in.png",
        ⵠⵠᐃⲆⵠⲆᐃ: "img/normal-mode-click.png",
        ᐃⲆⲆⲆⵠᐃᐃ: "img/forest-mode-out.png",
        ⲆⲆᐃⲆⲆⲆⲆ: "img/forest-mode-in.png",
        ΔᐃᐃⲆⲆⵠΔ: "img/forest-mode-click.png",
        ⲆⲆΔⵠᐃΔΔ: "img/community-mode-out.png",
        ᐃⲆᐃΔᐃᐃᐃ: "img/community-mode-in.png",
        ᐃⵠΔⵠⲆⵠΔ: "img/community-mode-click.png",
        ⲆⲆΔΔΔΔΔ: "img/experimental-modes-out.png",
        ΔᐃᐃⲆΔⵠⵠ: "img/experimental-modes-in.png",
        ⲆⵠᐃⲆΔⵠⵠ: "img/experimental-modes-click.png",
        ⵠⵠⵠᐃΔⵠⲆ: "img/youtube-button-out.png",
        ΔⵠΔᐃᐃⲆᐃ: "img/youtube-button-in.png",
        ⲆΔⲆⵠᐃᐃⲆ: "img/youtube-button-click.png",
        ᐃⲆᐃΔⵠᐃᐃ: "img/wiki-button-out.png",
        ⵠᐃΔⲆᐃⵠΔ: "img/wiki-button-in.png",
        ⵠΔΔᐃⵠⲆⲆ: "img/wiki-button-click.png",
        ᐃⲆⲆⲆⲆΔⵠ: "img/twitter-button-out.png",
        ᐃⲆΔⵠⵠΔᐃ: "img/twitter-button-in.png",
        ⲆΔᐃⵠΔᐃᐃ: "img/twitter-button-click.png",
        ΔⵠⵠⲆΔⵠⲆ: "img/facebook-button-out.png",
        ⲆⲆⲆᐃᐃⲆᐃ: "img/facebook-button-in.png",
        ⲆᐃΔⵠᐃΔⵠ: "img/facebook-button-click.png",
        ⲆⲆΔⲆⲆᐃᐃ: "img/reddit-button-out.png",
        ⲆᐃᐃΔΔΔⲆ: "img/reddit-button-in.png",
        ⵠⵠⵠΔⵠᐃⲆ: "img/reddit-button-click.png",
        ᐃⲆΔΔⲆΔⵠ: "img/discord-button-out.png",
        ΔⲆᐃⵠⲆⲆΔ: "img/discord-button-in.png",
        ΔⵠᐃⲆⲆΔⵠ: "img/discord-button-click.png",
        ⵠⲆⲆᐃⵠΔⲆ: "img/merch-button-out.png",
        ⵠᐃᐃΔΔᐃⵠ: "img/merch-button-in.png",
        ΔⲆΔⵠⵠⵠᐃ: "img/merch-button-click.png",
        ⲆΔⵠΔᐃⵠⲆΔΔ: "img/terminal-button-out.png",
        ᐃⲆⲆᐃⵠⲆⵠⲆⲆ: "img/terminal-button-in.png",
        ᐃⵠΔⲆᐃⲆⵠΔⲆ: "img/terminal-button-click.png",
        ᐃΔⲆΔⵠⲆΔ: "img/restart-out.png",
        ᐃΔⲆⵠᐃⵠΔ: "img/restart-in.png",
        ⲆΔᐃΔᐃⲆⵠ: "img/restart-click.png",
        ΔᐃΔᐃᐃⵠⵠ: "img/guide-out.png",
        ⲆᐃⵠⵠΔⵠⲆ: "img/guide-in.png",
        ᐃΔᐃᐃᐃⵠΔ: "img/guide-click.png",
        Δⵠᐃⵠⵠⵠⵠ: "img/copy-paste-out.png",
        ᐃⵠΔⲆᐃᐃᐃ: "img/copy-paste-in.png",
        ᐃᐃΔⲆⲆⵠΔ: "img/copy-paste-click.png",
        ᐃᐃⵠΔᐃⵠΔ: "img/link-buttons-bg.png",
        ᐃⵠⵠᐃᐃⲆⲆ: "img/changelog-box2.png",
        ᐃⲆΔᐃⵠⲆⵠ: "img/changelog_31.png",
        ⲆⲆᐃⵠⵠΔⵠ: "img/banner-taming.png",
        ᐃΔΔⵠⵠⵠⲆ: "img/profile-button-out.png",
        ΔⵠΔⲆᐃᐃᐃ: "img/profile-button-in.png",
        ⵠⵠΔᐃᐃⲆᐃ: "img/profile-button-click.png",
        ΔᐃⲆΔⵠᐃᐃ: "img/login-button-out.png",
        ᐃᐃΔⵠΔⲆⵠ: "img/login-button-in.png",
        ⲆⵠⲆⵠΔᐃᐃ: "img/login-button-click.png",
        ⵠⲆᐃᐃᐃᐃⵠ: "img/login-google-out.png",
        ⲆᐃᐃⵠⲆⲆᐃ: "img/login-google-in.png",
        ΔⵠⵠⲆᐃΔⵠ: "img/login-google-click.png",
        ⵠⵠᐃⵠⲆΔᐃ: "img/login-facebook-out.png",
        ⲆⵠᐃⵠΔⲆⲆ: "img/login-facebook-in.png",
        ⵠᐃΔᐃᐃᐃⲆ: "img/login-facebook-click.png",
        ᐃᐃⲆΔΔⵠᐃ: "img/account-box.png",
        ᐃᐃᐃΔΔⵠⵠᐃⲆ: "img/account-under-maintenance.png",
        ΔⲆΔᐃᐃⵠⲆ: "img/close-button-account-out.png",
        ΔⵠⵠᐃⲆⲆᐃ: "img/close-button-account-in.png",
        ⵠⲆⵠⲆⲆⲆⲆ: "img/close-button-account-click.png",
        ΔⲆⵠⲆᐃⲆᐃ: "img/play-button-out.png",
        ⵠΔⲆᐃᐃⲆⲆ: "img/play-button-in.png",
        ⲆⲆᐃⵠⵠⲆᐃ: "img/play-button-click.png",
        ⲆⲆᐃⵠᐃΔⲆᐃΔ: "img/app-store-badge.png",
        ᐃΔᐃᐃⵠΔᐃⵠΔ: "img/play-store-badge.png",
        ⲆΔΔⲆⵠⲆᐃᐃⲆ: "img/mobile-boxad.png",
        ᐃΔⵠⲆᐃΔΔ: "img/modify-name-out.png",
        ᐃᐃΔᐃᐃΔⵠ: "img/modify-name-in.png",
        ⵠᐃᐃⲆᐃΔΔ: "img/modify-name-click.png",
        ⲆⲆΔⵠΔΔΔ: "img/copy-id-button-out.png",
        ⵠⲆΔΔᐃⵠᐃ: "img/copy-id-button-hover.png",
        ⵠΔⲆⵠⲆΔᐃ: "img/copy-id-button-active.png",
        ⵠᐃᐃΔᐃⵠΔ: "img/yes-button-out.png",
        ΔΔᐃΔΔᐃΔ: "img/yes-button-in.png",
        ᐃΔⵠᐃⲆΔⲆ: "img/yes-button-click.png",
        ᐃΔᐃⵠⵠΔΔ: "img/yes-300-button-out.png",
        ᐃᐃΔⲆΔⲆᐃ: "img/yes-300-button-in.png",
        ΔⲆᐃᐃⲆⲆⲆ: "img/yes-300-button-click.png",
        ΔΔⲆⵠΔᐃΔ: "img/no-button-out.png",
        ΔⲆΔⲆᐃⵠⵠ: "img/no-button-in.png",
        ΔⲆᐃⵠⲆΔᐃ: "img/no-button-click.png",
        ⲆᐃⵠⲆΔΔΔ: "img/no-thanks-button-out.png",
        ᐃΔⲆΔᐃⵠΔ: "img/no-thanks-button-in.png",
        ⲆΔⵠᐃᐃⲆᐃ: "img/no-thanks-button-click.png",
        ᐃᐃⲆⲆΔΔᐃ: "img/shop-button-out.png",
        ⲆⵠᐃⲆᐃᐃⲆ: "img/shop-button-in.png",
        ⵠⵠᐃⲆⵠⵠΔ: "img/shop-button-click.png",
        ΔΔⵠⵠⲆⵠᐃ: "img/logout-out.png",
        ΔΔⲆⲆⲆⲆΔ: "img/logout-in.png",
        ⲆᐃⵠⵠⲆΔᐃ: "img/logout-click.png",
        Δᐃⵠⵠⵠⵠⵠ: "img/terms-button-out.png",
        ⲆᐃⲆⵠⵠΔᐃ: "img/terms-button-in.png",
        ΔⲆᐃᐃᐃⲆⵠ: "img/terms-button-click.png",
        ᐃⲆⵠΔᐃΔΔ: "img/tutorial-icon.png",
        Ⲇⵠᐃⵠᐃⵠᐃ: "img/skins-icon.png",
        ᐃᐃⲆᐃΔᐃΔ: "img/shop-icon.png",
        ᐃⲆⵠⲆᐃᐃΔΔⲆ: "img/paint-icon.png",
        ⵠᐃⲆⲆⲆⲆᐃ: "img/leaderboard-icon.png",
        ΔⲆⲆΔⲆΔᐃ: "img/start-icon.png",
        ⵠΔΔΔⲆⲆᐃ: "img/profile-icon.png",
        ⵠᐃⵠᐃⵠⲆⲆ: "img/server-access-icon2.png",
        ΔⵠⲆᐃⵠᐃⵠ: "img/button-homepage-bg-out.png",
        ⲆᐃᐃⲆΔΔⵠ: "img/button-homepage-bg-in.png",
        ΔᐃⵠᐃⲆⲆⲆ: "img/button-homepage-bg-click.png",
        ᐃⵠⵠᐃⲆⵠⵠ: "img/button-bottom-homepage-bg-out.png",
        ⵠᐃᐃⲆⵠΔⵠ: "img/button-bottom-homepage-bg-in.png",
        ᐃΔⲆⵠᐃⲆΔ: "img/button-bottom-homepage-bg-click.png",
        ⲆⵠⲆΔΔⵠⵠ: "img/lvl-player.png",
        ⲆᐃⲆⲆⵠᐃⵠ: "img/avatar-player.png",
        ⵠⲆⵠⵠΔΔⵠ: "img/avatar-player1.png",
        ΔⲆⲆΔᐃΔⵠ: "img/avatar-player2.png",
        ⵠᐃᐃΔᐃᐃᐃ: "img/avatar-player3.png",
        ⲆⵠⲆⲆΔᐃⵠ: "img/avatar-player4.png",
        ΔΔⵠⲆⵠⵠⵠ: "img/avatar-player5.png",
        ⵠΔᐃⵠⵠⵠᐃ: "img/avatar-player6.png",
        ᐃⵠΔΔᐃⵠᐃ: "img/avatar-player7.png",
        ΔⲆᐃΔⲆⵠΔ: "img/avatar-player8.png",
        ᐃⲆΔᐃⲆⲆⵠ: "img/avatar-player9.png",
        ΔΔⲆⵠᐃⲆⵠ: "img/avatar-player10.png",
        ⲆΔⲆⲆⲆᐃⵠ: "img/avatar-player11.png",
        ⵠΔⲆᐃⵠⲆⲆ: "img/avatar-player12.png",
        ΔⲆᐃΔΔⵠΔ: "img/avatar-player13.png",
        ΔᐃⲆⲆᐃⲆΔ: "img/avatar-player14.png",
        ⲆᐃⲆⵠᐃⵠᐃ: "img/avatar-player14.png",
        ⵠⵠᐃⲆᐃⲆΔ: "img/avatar-player14.png",
        ⵠΔᐃⵠⵠᐃⵠ: "img/avatar-player14.png",
        ⵠΔⲆᐃΔⲆᐃⵠⵠ: "img/golden-bread.png",
        ΔᐃⵠᐃⲆⵠⲆ: "img/buy-bread-out.png",
        ⵠΔΔⲆᐃⲆΔ: "img/buy-bread-in.png",
        ⵠΔᐃⲆΔΔΔ: "img/buy-bread-click.png",
        ᐃᐃᐃΔⵠⲆⲆ: "img/gauge.png",
        ⲆΔΔΔⲆⵠΔⵠᐃ: "img/season-4-out.png",
        ⲆΔⵠⵠⵠᐃⲆΔᐃ: "img/season-4-in.png",
        ᐃΔⵠΔⲆΔⵠᐃⵠ: "img/season-4-click.png",
        ΔⵠⲆᐃⲆᐃⵠΔⵠ: "img/season4-box.png",
        ᐃⵠⵠΔⲆᐃᐃⵠⵠ: "img/season-5-out.png",
        ᐃΔᐃⵠⵠΔⵠⵠⲆ: "img/season-5-in.png",
        ΔⲆⲆΔΔⵠⲆΔΔ: "img/season-5-click.png",
        ΔⵠᐃⵠᐃⵠΔᐃⲆ: "img/season5-box.png",
        ⵠΔⵠᐃⲆΔΔ: "img/season-6-out.png",
        ᐃⲆΔⵠᐃΔΔ: "img/season-6-in.png",
        ΔⵠⵠᐃⲆⲆⲆ: "img/season-6-click.png",
        ΔΔᐃⵠᐃᐃⲆ: "img/season6-box.png",
        ⵠⵠΔⲆⵠᐃⲆ: "img/profile3-box.png",
        ⵠΔⲆⲆΔᐃΔ: "img/skins-box.png",
        ⵠⵠⵠᐃΔᐃΔ: "img/shop-box.png",
        ᐃΔⵠⵠⵠᐃΔⵠⲆ: "img/private-server-box.png",
        ⵠⲆΔᐃΔΔⵠ: "img/location-box.png",
        ᐃΔᐃⵠⵠⵠᐃ: "img/server-duration-box.png",
        ⲆⵠΔᐃⵠⵠⲆ: "img/tutorial-box.png",
        ⵠᐃΔΔΔΔⲆ: "img/leaderboard2-box.png",
        ᐃⵠⵠᐃᐃᐃⲆ: "img/buy-breads-box.png",
        ⵠⲆⵠΔⵠⵠⵠ: "img/bag-box.png",
        ΔᐃⲆᐃΔⵠᐃ: "img/deadbox-box.png",
        ⵠᐃᐃⲆᐃⲆⵠ: "img/book-box.png",
        ΔΔⵠΔΔᐃⲆ: "img/accessories-box.png",
        ⵠⲆΔⲆⲆᐃⲆ: "img/customskin-box.png",
        ⵠΔⲆᐃⲆΔⲆ: "img/bag-lasts.png",
        ⲆΔΔⲆΔᐃⲆ: "img/server-lasts.png",
        ΔⲆᐃⵠΔⲆᐃ: "img/server-access-box3.png",
        ΔⵠᐃΔᐃᐃⲆ: "img/lootbox-box.png",
        ⵠᐃⵠⵠΔᐃᐃ: "img/change-nickname0.png",
        ᐃΔΔᐃΔΔᐃ: "img/change-nickname1.png",
        ⲆⵠⲆΔΔΔⵠ: "img/cheating-box.png",
        ᐃᐃⵠΔᐃⲆᐃᐃΔ: "img/daily-quest-box.png",
        ΔᐃⲆΔΔⵠΔᐃᐃ: "img/daily-5-bread.png",
        ⲆΔΔΔᐃⵠᐃⲆᐃ: "img/daily-10-bread.png",
        ⲆΔⲆᐃᐃᐃⵠᐃᐃ: "img/daily-valid.png",
        ⵠΔⵠᐃⵠⲆΔ: "img/normal-profile-out.png",
        ΔᐃᐃⲆᐃΔᐃ: "img/normal-profile-in.png",
        ⵠᐃⵠⲆⲆⲆⲆ: "img/normal-profile-click.png",
        ΔⵠᐃⵠΔⲆΔ: "img/forest-profile-out.png",
        ⵠⵠⵠᐃⲆⵠΔ: "img/forest-profile-in.png",
        ᐃΔⵠᐃⵠᐃⵠ: "img/forest-profile-click.png",
        ⲆᐃΔⲆᐃⲆΔ: "img/zombie-profile-out.png",
        ⵠⲆᐃⵠΔⵠⲆ: "img/zombie-profile-in.png",
        ⵠⲆⵠⲆΔΔᐃ: "img/zombie-profile-click.png",
        ᐃⲆΔᐃΔⵠⵠ: "img/vampire-profile-out.png",
        ᐃΔⵠΔⵠⲆΔ: "img/vampire-profile-in.png",
        ⲆΔⵠᐃⲆᐃᐃ: "img/vampire-profile-click.png",
        ΔΔⵠⲆΔΔᐃ: "img/total-profile-out.png",
        ⲆⵠᐃᐃⲆᐃⵠ: "img/total-profile-in.png",
        ⵠΔⲆⵠⵠᐃⲆ: "img/total-profile-click.png",
        ΔⲆΔⲆⲆΔⵠ: "img/season1-out.png",
        ⲆΔᐃΔᐃᐃⵠ: "img/season1-in.png",
        ᐃᐃᐃⲆΔΔᐃ: "img/season1-click.png",
        ⵠⲆΔⲆᐃⵠⵠ: "img/season2-out.png",
        ΔⵠΔⲆᐃⵠⲆ: "img/season2-in.png",
        ⵠᐃΔᐃΔᐃΔ: "img/season2-click.png",
        ⵠΔΔⵠⲆᐃᐃ: "img/season3-out.png",
        ⲆᐃⲆΔΔΔⵠ: "img/season3-in.png",
        ΔΔΔΔⲆΔⲆ: "img/season3-click.png",
        ᐃΔⵠⵠⲆⵠⲆ: "img/season4-out.png",
        ⵠΔᐃⲆᐃⲆΔ: "img/season4-in.png",
        ΔⵠⵠᐃΔⲆΔ: "img/season4-click.png",
        ΔΔΔⲆΔΔᐃ: "img/season5-out.png",
        ⵠⵠⲆᐃⲆΔΔ: "img/season5-in.png",
        ᐃΔᐃᐃΔΔᐃ: "img/season5-click.png",
        ⵠⵠΔΔᐃⵠⲆ: "img/season6-out.png",
        ᐃⲆⵠⵠᐃⵠΔ: "img/season6-in.png",
        ⵠΔⲆΔΔᐃⲆ: "img/season6-click.png",
        ⵠⲆⵠᐃⵠⲆΔ: "img/locked-skin-alert.png",
        ⵠⵠΔᐃⵠⵠⵠ: "img/locked-custom-alert.png",
        ᐃΔⵠⲆΔΔⲆ: "img/bg-red-locked.png",
        ΔΔΔⵠᐃΔⲆ: "img/skin-button-out.png",
        ⲆⵠᐃⵠΔⲆⵠ: "img/skin-button-in.png",
        ΔΔΔᐃⲆⵠⲆ: "img/skin-button-click.png",
        ⲆᐃᐃᐃΔⵠᐃ: "img/accessory-button-out.png",
        ⵠᐃⲆⲆⵠⵠⲆ: "img/accessory-button-in.png",
        ᐃⲆⵠᐃΔᐃⲆ: "img/accessory-button-click.png",
        ⵠᐃⲆΔⵠⵠΔ: "img/bag-button-out.png",
        ⲆΔᐃΔⵠΔⵠ: "img/bag-button-in.png",
        ⲆⲆΔᐃᐃΔᐃ: "img/bag-button-click.png",
        ⲆⵠⲆⵠΔⵠΔ: "img/book-button-out.png",
        ᐃⵠᐃⲆΔⵠⵠ: "img/book-button-in.png",
        ⵠⵠⵠⲆᐃΔΔ: "img/book-button-click.png",
        ⲆᐃⵠⵠⵠΔⲆ: "img/deadbox-button-out.png",
        ⲆⲆᐃΔⲆΔⲆ: "img/deadbox-button-in.png",
        ⲆΔᐃᐃⲆᐃⵠ: "img/deadbox-button-click.png",
        ⵠΔᐃᐃⵠᐃⲆ: "img/loot-button-out.png",
        ⵠᐃᐃⵠΔΔΔ: "img/loot-button-in.png",
        ⲆⵠⲆⲆⲆᐃΔ: "img/loot-button-click.png",
        ᐃΔΔⵠⵠΔΔ: "img/free-item-out.png",
        ΔΔⵠⲆᐃᐃΔ: "img/free-item-in.png",
        ᐃΔᐃΔΔⲆⲆ: "img/free-item-click.png",
        ⲆⵠⲆΔ: "img/wood-item-out.png",
        ΔΔⲆⵠ: "img/wood-item-in.png",
        ⲆΔΔᐃ: "img/wood-item-click.png",
        ⲆᐃⲆΔⵠⲆⲆ: "img/stone-item.png",
        ᐃᐃⲆΔⲆⵠᐃ: "img/stone-item-in.png",
        ᐃⲆᐃᐃΔⵠᐃ: "img/stone-item-click.png",
        ᐃⵠΔⵠΔⵠᐃ: "img/gold-item.png",
        ᐃⵠΔΔᐃⲆⵠ: "img/gold-item-in.png",
        ⵠΔⲆᐃⲆⵠᐃ: "img/gold-item-click.png",
        ᐃⲆᐃΔⲆᐃΔ: "img/diamond-item.png",
        ⲆᐃᐃⲆΔⵠⵠ: "img/diamond-item-in.png",
        ⵠᐃⲆΔⵠⲆⵠ: "img/diamond-item-click.png",
        ⵠⲆⵠⲆΔⵠⵠ: "img/amethyst-item.png",
        ΔⵠⲆⲆⲆⵠΔ: "img/amethyst-item-in.png",
        ΔᐃΔⵠⵠⵠⵠ: "img/amethyst-item-click.png",
        ΔᐃΔΔᐃⵠⲆ: "img/reidite-item.png",
        ᐃⲆⲆΔΔⵠⵠ: "img/reidite-item-in.png",
        ᐃⲆⲆΔΔΔⵠ: "img/reidite-item-click.png",
        ᐃⲆᐃᐃⲆⲆⲆ: "img/special-item-out.png",
        ᐃⲆΔⲆᐃⲆΔ: "img/special-item-in.png",
        ᐃᐃᐃᐃᐃᐃⲆ: "img/special-item-click.png",
        ΔᐃⲆⵠΔⵠᐃ: "img/level-item-out.png",
        ⲆⲆᐃⵠⵠⵠⲆ: "img/level-item-in.png",
        ᐃΔⵠⲆⲆᐃΔ: "img/level-item-click.png",
        ⵠⵠᐃⲆᐃΔᐃ: "img/skin-previous-out.png",
        ᐃⵠⲆⲆᐃΔΔ: "img/skin-previous-in.png",
        ΔΔⲆⲆᐃⵠᐃ: "img/skin-previous-click.png",
        ⲆΔΔⵠⵠΔΔ: "img/skin-next-out.png",
        ⲆⵠⵠΔⲆⲆᐃ: "img/skin-next-in.png",
        ΔⵠⲆᐃⲆΔⵠ: "img/skin-next-click.png",
        ΔΔⵠΔᐃ: "img/back-button-out.png",
        ⲆⵠⲆΔᐃ: "img/back-button-in.png",
        ⵠΔⵠⲆⲆ: "img/back-button-click.png",
        ⵠᐃⲆⲆᐃΔΔ: "img/get-more-button-out.png",
        ΔⵠᐃᐃⵠΔΔ: "img/get-more-button-in.png",
        ⵠΔⲆⲆΔⵠⲆ: "img/get-more-button-click.png",
        ⵠΔⵠⵠΔᐃⲆ: "img/currency1-out.png",
        ᐃΔΔᐃᐃΔᐃ: "img/currency1-in.png",
        ⵠᐃᐃΔΔⲆⵠ: "img/currency1-click.png",
        ᐃΔⵠⲆⵠΔᐃ: "img/currency2-out.png",
        ⲆⵠΔⵠΔⲆⵠ: "img/currency2-in.png",
        ⲆⵠⵠⲆᐃⲆΔ: "img/currency2-click.png",
        ᐃᐃⲆᐃᐃⲆⲆ: "img/currency3-out.png",
        ᐃⵠⵠᐃΔᐃⵠ: "img/currency3-in.png",
        ᐃΔᐃⵠⵠΔⲆ: "img/currency3-click.png",
        ⲆⲆⵠⲆⵠᐃⵠ: "img/currency4-out.png",
        ⲆΔⵠΔⵠᐃⲆ: "img/currency4-in.png",
        ⲆⵠΔΔⵠⲆΔ: "img/currency4-click.png",
        ᐃⲆΔⵠΔⲆᐃ: "img/currency5-out.png",
        ᐃⲆⵠⵠⲆΔΔ: "img/currency5-in.png",
        ⲆᐃᐃΔΔᐃⲆ: "img/currency5-click.png",
        ⵠⲆⵠᐃΔᐃⵠ: "img/price1-out.png",
        ᐃⲆᐃΔΔⲆΔ: "img/price1-in.png",
        ΔⲆᐃⵠΔⵠΔ: "img/price1-click.png",
        ⲆΔᐃⲆⵠΔᐃ: "img/price2-out.png",
        ⲆⲆⲆᐃⵠΔᐃ: "img/price2-in.png",
        ⲆⲆⵠⲆⵠᐃΔ: "img/price2-click.png",
        ⵠᐃΔⲆᐃⲆⵠ: "img/price3-out.png",
        ⲆⵠⲆᐃⲆⲆΔ: "img/price3-in.png",
        ⵠΔᐃᐃΔⲆΔ: "img/price3-click.png",
        ᐃⵠᐃⵠΔⵠⵠ: "img/price4-out.png",
        ΔⵠⵠΔⵠΔⲆ: "img/price4-in.png",
        ⲆⵠΔⲆⲆⲆΔ: "img/price4-click.png",
        ᐃᐃⲆⵠᐃⲆΔ: "img/price5-out.png",
        ΔⵠΔⲆⲆᐃΔ: "img/price5-in.png",
        ΔⵠᐃᐃΔΔⵠ: "img/price5-click.png",
        ⲆⵠⵠᐃⵠⵠⵠΔΔ: "img/buy-private-server-out.png",
        ᐃⵠⲆⵠⵠΔⵠⵠΔ: "img/buy-private-server-in.png",
        ⲆᐃΔⲆᐃⲆᐃᐃΔ: "img/buy-private-server-click.png",
        ΔⵠᐃⵠⵠᐃΔ: "img/atlanta-button-out.png",
        ⲆⲆⲆᐃⲆΔⵠ: "img/atlanta-button-in.png",
        ⵠⵠⵠⵠΔⲆⵠ: "img/atlanta-button-click.png",
        ΔΔⲆᐃⵠᐃᐃ: "img/los-angeles-button-out.png",
        ⵠⲆΔᐃΔᐃⲆ: "img/los-angeles-button-in.png",
        ᐃⵠⵠⲆΔⲆⲆ: "img/los-angeles-button-click.png",
        ⲆⲆⵠⵠΔᐃᐃ: "img/sydney-button-out.png",
        ⲆΔΔⲆΔⵠⵠ: "img/sydney-button-in.png",
        ᐃᐃᐃⲆⲆΔⵠ: "img/sydney-button-click.png",
        ⲆⵠᐃΔⵠⵠᐃ: "img/frankfurt-button-out.png",
        ⲆᐃΔᐃᐃΔᐃ: "img/frankfurt-button-in.png",
        ΔΔΔⲆΔΔⵠ: "img/frankfurt-button-click.png",
        ⲆΔΔΔⲆⵠⵠ: "img/osaka-button-out.png",
        ⲆΔΔΔⵠⵠᐃ: "img/osaka-button-in.png",
        ᐃΔⵠΔⲆⵠⵠ: "img/osaka-button-click.png",
        ⲆⵠᐃⵠⲆⲆⵠΔᐃ: "img/yes-location-out.png",
        ΔΔᐃᐃⵠⵠⲆᐃᐃ: "img/yes-location-in.png",
        ᐃΔⵠⵠⲆⵠⵠⲆⲆ: "img/yes-location-click.png",
        ⵠⵠⲆⲆⵠⵠᐃ: "img/3days-button-out.png",
        ⲆΔΔᐃᐃᐃⲆ: "img/3days-button-in.png",
        ᐃᐃⵠⲆᐃᐃΔ: "img/3days-button-click.png",
        ΔⵠⵠⲆⵠⲆⲆ: "img/7days-button-out.png",
        ⲆⵠⵠⲆᐃᐃⲆ: "img/7days-button-in.png",
        ⲆᐃⲆΔᐃΔⵠ: "img/7days-button-click.png",
        ᐃᐃⵠΔᐃⲆᐃ: "img/30days-button-out.png",
        ᐃᐃⲆᐃᐃΔΔ: "img/30days-button-in.png",
        ᐃⲆⲆᐃΔⵠᐃ: "img/30days-button-click.png",
        ⵠᐃᐃΔΔΔΔ: "img/90days-button-out.png",
        ΔⲆⵠⵠᐃⵠᐃ: "img/90days-button-in.png",
        ⲆⲆⲆΔᐃᐃΔ: "img/90days-button-click.png",
        ᐃΔⵠⲆⵠᐃⲆ: "img/spin1.png",
        ΔⵠΔⲆⲆΔⵠ: "img/spin2.png",
        ᐃᐃᐃⲆⲆΔⲆ: "img/spin3.png",
        ΔⵠⲆΔΔᐃⵠ: "img/spin4.png",
        ᐃᐃⲆⵠⲆⵠⲆ: "img/spin5.png",
        ⲆⲆΔᐃΔⲆⵠ: "img/spin6.png",
        ⵠΔⲆᐃΔⲆⵠ: "img/arrow-spin.png",
        ⵠᐃⲆᐃΔⵠⲆ: "img/spin-button-1-out.png",
        ᐃᐃⵠⲆΔᐃΔ: "img/spin-button-1-in.png",
        ⲆⲆⲆᐃᐃΔⵠ: "img/spin-button-1-click.png",
        ΔᐃⲆᐃᐃⲆⲆ: "img/spin-button-2-out.png",
        ᐃⵠᐃⲆΔⲆⵠ: "img/spin-button-2-in.png",
        ⵠΔⲆᐃᐃΔΔ: "img/spin-button-2-click.png",
        ΔΔᐃΔᐃⵠᐃ: "img/spin-button-3-out.png",
        ᐃⵠⵠⵠⲆⵠΔ: "img/spin-button-3-in.png",
        ⵠᐃⲆᐃᐃᐃⲆ: "img/spin-button-3-click.png",
        ⲆⵠⲆⵠⵠᐃᐃ: "img/spin-button-4-out.png",
        ΔⵠᐃⲆⵠⵠⵠ: "img/spin-button-4-in.png",
        ⲆΔⵠᐃᐃⲆⵠ: "img/spin-button-4-click.png",
        ⵠⲆⲆⵠΔⲆⵠ: "img/spin-button-5-out.png",
        ΔΔⲆΔΔᐃᐃ: "img/spin-button-5-in.png",
        ⲆᐃⵠⲆΔⵠᐃ: "img/spin-button-5-click.png",
        ᐃΔⵠᐃΔⵠⲆ: "img/spin-light.png",
        ᐃⵠⵠⲆⵠⵠᐃ: "img/tuto-wiki-out.png",
        ⵠⵠⲆᐃΔⵠⵠ: "img/tuto-wiki-in.png",
        ΔⲆⲆΔᐃⵠᐃ: "img/tuto-wiki-click.png",
        ΔⵠᐃᐃⵠⲆᐃ: "img/tuto-previous-out.png",
        Ⲇⵠⵠⵠᐃᐃᐃ: "img/tuto-previous-in.png",
        ΔⲆΔΔΔΔⵠ: "img/tuto-previous-click.png",
        ⵠⲆΔⵠΔⵠᐃ: "img/tuto-next-out.png",
        ⵠⲆⵠΔⵠⲆᐃ: "img/tuto-next-in.png",
        ΔᐃᐃⲆⵠᐃᐃ: "img/tuto-next-click.png",
        ᐃⲆⵠⵠᐃⵠⵠ: "img/time-leaderboard-out.png",
        ⵠⲆᐃΔᐃⲆⵠ: "img/time-leaderboard-in.png",
        ⵠΔᐃᐃⵠᐃΔ: "img/time-leaderboard-click.png",
        ⲆⲆΔⵠⲆΔΔ: "img/score-leaderboard-out.png",
        ⲆΔᐃᐃⵠΔⵠ: "img/score-leaderboard-in.png",
        ΔⵠΔⲆΔⲆⲆ: "img/score-leaderboard-click.png",
        ⵠᐃᐃΔⵠⲆΔ: "img/lvl-leaderboard-out.png",
        ⵠⲆⵠᐃΔᐃⲆ: "img/lvl-leaderboard-in.png",
        ᐃᐃⲆⲆΔᐃᐃ: "img/lvl-leaderboard-click.png",
        ⲆⵠⵠΔᐃⲆⲆ: "img/kill-leaderboard-out.png",
        ⲆⲆⲆᐃΔᐃᐃ: "img/kill-leaderboard-in.png",
        ΔΔⲆᐃΔᐃⵠ: "img/kill-leaderboard-click.png",
        ⲆΔΔΔΔΔᐃ: "img/all-leaderboard-out.png",
        ⲆᐃᐃⲆᐃᐃΔ: "img/all-leaderboard-in.png",
        ᐃΔᐃᐃᐃΔᐃ: "img/all-leaderboard-click.png",
        ΔⵠⵠᐃⵠᐃΔ: "img/today-leaderboard-out.png",
        ΔΔⲆᐃⲆⲆⵠ: "img/today-leaderboard-in.png",
        ᐃⲆΔⲆⲆᐃⵠ: "img/today-leaderboard-click.png",
        ⵠⲆⲆᐃᐃΔⵠ: "img/week-leaderboard-out.png",
        ⵠᐃᐃⵠΔⵠᐃ: "img/week-leaderboard-in.png",
        ⲆΔΔᐃⲆᐃᐃ: "img/week-leaderboard-click.png",
        ΔⵠⲆⲆΔⵠᐃ: "img/season1-out.png",
        ᐃⲆⲆᐃΔΔⲆ: "img/season1-in.png",
        ᐃᐃⲆΔⵠΔΔ: "img/season1-click.png",
        ⲆΔᐃⲆᐃΔΔ: "img/season2-out.png",
        ⲆΔᐃᐃⲆⵠΔ: "img/season2-in.png",
        ᐃⵠⵠⵠΔⲆⵠ: "img/season2-click.png",
        ⲆΔᐃⲆⲆᐃᐃ: "img/season3-out.png",
        ᐃⲆⲆᐃᐃⵠⲆ: "img/season3-in.png",
        ⲆᐃᐃⲆΔΔᐃ: "img/season3-click.png",
        ᐃΔⵠⵠᐃΔᐃ: "img/season4-out.png",
        ΔΔΔⲆⲆΔᐃ: "img/season4-in.png",
        ⵠⲆΔⵠᐃΔⵠ: "img/season4-click.png",
        ⲆⲆᐃⲆᐃⲆⲆ: "img/season5-out.png",
        ⲆᐃⵠΔᐃΔΔ: "img/season5-in.png",
        ⲆΔᐃⲆⲆΔᐃ: "img/season5-click.png",
        ᐃᐃΔᐃⲆⲆΔ: "img/season6-out.png",
        ΔΔΔᐃᐃⲆᐃ: "img/season6-in.png",
        ᐃᐃΔΔⲆᐃΔ: "img/season6-click.png",
        ⵠᐃⲆⲆᐃⵠⲆ: "img/total-lead-out.png",
        ᐃⲆⲆᐃᐃᐃΔ: "img/total-lead-in.png",
        ᐃΔⵠⲆΔᐃⲆ: "img/total-lead-click.png",
        ⲆⲆⲆᐃⵠⵠⲆ: "img/normal-lead-out.png",
        ΔΔᐃΔΔⲆΔ: "img/normal-lead-in.png",
        ⵠⵠᐃⲆΔⵠΔ: "img/normal-lead-click.png",
        ⲆᐃⵠΔᐃᐃΔ: "img/forest-lead-out.png",
        ⲆᐃΔⲆΔᐃⵠ: "img/forest-lead-in.png",
        ᐃⵠΔⲆⵠⵠΔ: "img/forest-lead-click.png",
        ᐃⵠᐃⲆΔⵠᐃ: "img/vampire-lead-out.png",
        ⵠⲆΔΔᐃᐃΔ: "img/vampire-lead-in.png",
        ⵠⲆᐃⲆΔⲆᐃ: "img/vampire-lead-click.png",
        ᐃᐃᐃⵠΔⵠⵠ: "img/zombie-lead-out.png",
        ᐃⲆⵠᐃⵠᐃⵠ: "img/zombie-lead-in.png",
        ΔⲆᐃⲆⵠⲆΔ: "img/zombie-lead-click.png",
        ᐃΔⵠΔⵠΔⵠ: "img/day-level5.png",
        ⵠᐃᐃᐃⵠⵠⵠ: "img/night-level5.png",
        ⲆΔᐃᐃΔⵠᐃ: "img/day-level10.png",
        ⲆⲆⵠⲆΔⵠΔ: "img/night-level10.png",
        ΔΔΔᐃⵠΔⲆ: "img/day-level15.png",
        ⲆⵠᐃⵠⲆⲆᐃ: "img/night-level15.png",
        ᐃᐃᐃᐃⵠⵠⲆ: "img/day-level20.png",
        ᐃᐃᐃⵠⲆᐃⲆ: "img/night-level20.png",
        ᐃΔⵠⲆⲆⵠⲆ: "img/day-level25.png",
        ᐃΔⵠⲆⵠⵠⵠ: "img/night-level25.png",
        ΔᐃΔᐃⵠⲆΔ: "img/day-level30.png",
        ⵠᐃⲆᐃⲆΔⵠ: "img/night-level30.png",
        ᐃΔΔⵠⵠΔⵠ: "img/day-level35.png",
        ⲆⵠⲆΔⲆⲆⵠ: "img/night-level35.png",
        ᐃᐃⵠᐃⲆⵠᐃ: "img/day-level40.png",
        ΔⵠᐃΔⲆΔᐃ: "img/night-level40.png",
        ⵠᐃΔΔⵠⲆⵠ: "img/day-level45.png",
        ΔⲆⲆᐃΔⵠΔ: "img/night-level45.png",
        ⲆⲆⲆᐃⵠΔⲆ: "img/day-level50.png",
        ⵠⲆⲆⵠⲆΔⵠ: "img/night-level50.png",
        ⵠⲆᐃⵠⵠⲆΔ: "img/day-level55.png",
        ⲆⲆΔⵠⲆⵠᐃ: "img/night-level55.png",
        ⵠⲆᐃⲆᐃⵠⵠ: "img/day-level60.png",
        ⵠⵠᐃⲆⲆⵠⵠ: "img/night-level60.png",
        ᐃΔⲆᐃⵠⲆᐃ: "img/day-skin-devast0.png",
        ⲆᐃΔᐃΔᐃⵠ: "img/night-skin-devast0.png",
        ΔΔⵠΔᐃᐃΔ: "img/day-hand-devaster.png",
        ⲆᐃΔⲆΔⵠΔ: "img/night-hand-devaster.png",
        ᐃⵠⲆⲆΔⲆⲆ: "img/day-skin-star0.png",
        ⵠΔΔᐃᐃⲆⵠ: "img/night-skin-star0.png",
        ΔⲆΔⵠⵠᐃΔ: "img/day-hand-star0.png",
        ΔΔᐃⲆΔΔⲆ: "img/night-hand-star0.png",
        ΔᐃⲆᐃᐃᐃᐃ: "img/day-vampire.png",
        ⵠᐃⲆⵠΔⵠΔ: "img/night-vampire.png",
        ⵠᐃⲆΔᐃⲆⲆ: "img/day-hand-vampire.png",
        ᐃᐃᐃⲆᐃⲆᐃ: "img/night-hand-vampire.png",
        ⵠΔᐃᐃⵠⲆⲆ: "img/day-zombie.png",
        ΔᐃⲆⲆⵠΔⵠ: "img/night-zombie.png",
        ⵠⲆⵠᐃΔⲆⲆ: "img/day-hand-zombie.png",
        ᐃⵠⵠⲆⵠⵠⲆ: "img/night-hand-zombie.png",
        ΔᐃᐃⲆⲆⲆⲆ: "img/day-skin113.png",
        ⲆⲆᐃΔⲆᐃΔ: "img/night-skin113.png",
        ᐃᐃⲆΔᐃⲆⲆ: "img/day-hand-skin113.png",
        ᐃᐃᐃᐃᐃⵠᐃ: "img/night-hand-skin113.png",
        ⵠᐃⲆⵠⲆΔⵠ: "img/day-skin0.png",
        ΔᐃΔⲆⵠᐃⵠ: "img/night-skin0.png",
        ᐃⲆΔᐃⲆᐃᐃ: "img/day-skin1.png",
        ⲆⲆΔΔⵠⲆᐃ: "img/night-skin1.png",
        ⵠⵠⲆᐃΔⲆᐃ: "img/day-skin2.png",
        ᐃᐃⵠⵠⲆⲆΔ: "img/night-skin2.png",
        ᐃΔⲆΔⲆⲆⵠ: "img/day-skin3.png",
        ⲆⲆᐃΔΔΔᐃ: "img/night-skin3.png",
        ΔΔΔⲆⵠΔⲆ: "img/day-skin4.png",
        ᐃᐃΔⲆᐃⵠΔ: "img/night-skin4.png",
        ⲆΔΔΔⵠⵠΔ: "img/day-skin5.png",
        ΔⲆΔⵠⲆᐃⵠ: "img/night-skin5.png",
        ⵠⲆⲆⵠⵠΔⲆ: "img/day-skin6.png",
        ᐃΔⲆΔᐃᐃΔ: "img/night-skin6.png",
        ⲆᐃⲆΔΔⲆᐃ: "img/day-skin7.png",
        Ⲇᐃᐃⵠⵠᐃᐃ: "img/night-skin7.png",
        ⲆΔⲆⲆⵠΔΔ: "img/day-skin8.png",
        ᐃⲆᐃᐃΔⲆᐃ: "img/night-skin8.png",
        ⲆΔⲆᐃⵠΔⵠ: "img/day-skin9.png",
        ⵠᐃⲆᐃᐃⲆⲆ: "img/night-skin9.png",
        ⵠΔⲆⲆᐃⲆⵠ: "img/day-skin10.png",
        ΔᐃΔⲆⲆⵠᐃ: "img/night-skin10.png",
        ᐃΔᐃᐃⵠⲆΔ: "img/day-skin11.png",
        ⲆⵠⲆⵠⲆⲆⲆ: "img/night-skin11.png",
        ⲆΔΔⵠⵠᐃⲆ: "img/day-skin12.png",
        ΔΔⵠⲆΔᐃΔ: "img/night-skin12.png",
        ⵠΔᐃⲆⲆⵠⲆ: "img/day-skin13.png",
        ΔⲆⲆⵠᐃΔⵠ: "img/night-skin13.png",
        ⲆⵠⲆᐃΔΔⵠ: "img/day-skin14.png",
        ⲆⵠⲆⲆⵠᐃⲆ: "img/night-skin14.png",
        ⵠΔⲆᐃⵠⵠⵠ: "img/day-skin15.png",
        ΔΔΔⵠⵠⲆⵠ: "img/night-skin15.png",
        ⲆⲆⵠᐃΔⲆΔ: "img/day-skin16.png",
        ᐃⵠᐃⲆⵠⲆᐃ: "img/night-skin16.png",
        ⲆΔᐃΔⵠⲆⵠ: "img/day-skin17.png",
        ⵠΔΔⲆⲆⲆⲆ: "img/night-skin17.png",
        ⲆᐃᐃⲆᐃᐃⲆ: "img/day-skin18.png",
        ΔⲆΔΔⲆᐃⵠ: "img/night-skin18.png",
        ⵠΔΔᐃⲆᐃⲆ: "img/day-skin19.png",
        ΔⵠⲆᐃΔΔΔ: "img/night-skin19.png",
        ΔᐃⲆΔⲆΔⲆ: "img/day-skin20.png",
        ΔⲆⲆⵠⵠᐃⵠ: "img/night-skin20.png",
        ΔⵠⲆᐃⲆΔⲆ: "img/day-skin21.png",
        ΔⵠᐃⲆᐃΔⲆ: "img/night-skin21.png",
        ΔᐃⲆⵠᐃΔΔ: "img/day-skin22.png",
        ⵠⵠⵠⵠⲆΔᐃ: "img/night-skin22.png",
        ΔΔᐃⲆΔᐃᐃ: "img/day-skin23.png",
        ΔⲆⲆⲆⵠⵠⲆ: "img/night-skin23.png",
        ⵠΔⲆΔⵠⵠᐃ: "img/day-skin24.png",
        ⲆᐃΔΔᐃⲆⵠ: "img/night-skin24.png",
        ⲆᐃⵠⵠΔⵠⵠ: "img/day-skin25.png",
        ⲆΔⵠⵠᐃⵠᐃ: "img/night-skin25.png",
        ᐃⲆΔⲆⲆᐃΔ: "img/day-skin26.png",
        ΔⵠᐃΔⲆⲆⲆ: "img/night-skin26.png",
        ΔⵠΔΔⵠᐃΔ: "img/day-skin27.png",
        ⵠⲆᐃΔᐃΔⵠ: "img/night-skin27.png",
        ⵠⲆⲆⲆⲆⲆᐃ: "img/day-skin28.png",
        ΔⲆⵠⲆΔⲆⵠ: "img/night-skin28.png",
        ⵠΔⲆᐃᐃⲆⵠ: "img/day-skin29.png",
        ᐃⲆⵠⵠⲆⵠᐃ: "img/night-skin29.png",
        ΔᐃⵠΔⲆΔⵠ: "img/day-skin30.png",
        ⲆⲆᐃⵠⲆΔᐃ: "img/night-skin30.png",
        ᐃⵠⲆᐃⲆⵠΔ: "img/day-skin31.png",
        ⵠΔⲆᐃΔⵠΔ: "img/night-skin31.png",
        ᐃⲆⵠᐃΔⲆⲆ: "img/day-skin32.png",
        ⵠⲆΔΔΔᐃⲆ: "img/night-skin32.png",
        ⲆᐃΔᐃⵠᐃᐃ: "img/day-skin33.png",
        ΔΔΔⵠᐃⲆⲆ: "img/night-skin33.png",
        ΔΔᐃⵠⵠⵠⲆ: "img/day-skin34.png",
        ᐃΔᐃⲆᐃΔⲆ: "img/night-skin34.png",
        ⲆΔⲆΔᐃⲆⵠ: "img/day-skin35.png",
        ⲆⵠⲆᐃᐃΔᐃ: "img/night-skin35.png",
        ⵠΔᐃⵠⵠᐃⲆ: "img/day-skin36.png",
        ΔⲆⵠⵠᐃᐃⲆ: "img/night-skin36.png",
        ᐃⲆᐃΔᐃΔⲆ: "img/day-skin37.png",
        ΔⵠⵠⵠΔᐃΔ: "img/night-skin37.png",
        ⲆⵠΔᐃᐃⲆⲆ: "img/day-skin38.png",
        ᐃⲆⲆⵠⲆⲆⵠ: "img/night-skin38.png",
        ΔⵠⲆⵠΔᐃⲆ: "img/day-skin39.png",
        ᐃᐃⵠᐃⵠᐃᐃ: "img/night-skin39.png",
        ΔⲆᐃⵠΔΔᐃ: "img/day-skin40.png",
        ⵠⵠⵠΔᐃΔΔ: "img/night-skin40.png",
        ⵠⲆΔⵠⲆⲆᐃ: "img/day-skin41.png",
        ᐃΔⲆΔⲆΔᐃ: "img/night-skin41.png",
        ⵠΔⲆΔΔⵠⲆ: "img/day-skin42.png",
        ΔⵠⲆⲆΔᐃᐃ: "img/night-skin42.png",
        ᐃⵠΔᐃΔⲆⵠ: "img/day-skin43.png",
        ⵠΔⲆⲆΔⵠᐃ: "img/night-skin43.png",
        ⲆⲆⵠΔᐃᐃΔ: "img/day-skin44.png",
        ΔᐃⲆΔⲆⵠⲆ: "img/night-skin44.png",
        ⵠⲆⲆⵠΔⵠⲆ: "img/day-skin45.png",
        ΔⵠᐃⵠΔⵠⵠ: "img/night-skin45.png",
        ΔΔⲆᐃⵠⵠᐃ: "img/day-skin46.png",
        ⲆⲆⲆΔⵠᐃᐃ: "img/night-skin46.png",
        ⵠᐃᐃⲆⵠⵠΔ: "img/day-skin47.png",
        ᐃⵠⲆⵠΔⵠΔ: "img/night-skin47.png",
        ⲆΔΔΔⵠᐃΔ: "img/day-skin48.png",
        ⲆΔⲆⵠⵠⵠᐃ: "img/night-skin48.png",
        ⵠⵠⵠᐃᐃᐃᐃ: "img/day-skin49.png",
        ᐃⵠⲆΔΔᐃΔ: "img/night-skin49.png",
        ᐃⲆᐃΔᐃⲆΔ: "img/day-skin50.png",
        ᐃⵠⲆΔᐃᐃⵠ: "img/night-skin50.png",
        ᐃΔⲆⲆⲆⵠⲆ: "img/day-skin51.png",
        ᐃᐃᐃⵠⲆⵠᐃ: "img/night-skin51.png",
        ⵠⲆΔΔᐃⵠⲆ: "img/day-skin52.png",
        ⲆΔᐃΔⲆᐃⲆ: "img/night-skin52.png",
        ⲆⵠⲆΔΔⲆⵠ: "img/day-skin53.png",
        ⲆΔⲆΔⲆⵠⵠ: "img/night-skin53.png",
        ⲆⵠᐃⵠΔⵠΔ: "img/day-skin54.png",
        ⵠⵠᐃΔⵠΔⲆ: "img/night-skin54.png",
        ⵠⵠⵠᐃⵠⵠⵠ: "img/day-skin55.png",
        ⵠⵠⲆᐃᐃᐃΔ: "img/night-skin55.png",
        ᐃΔᐃⵠⲆⵠΔ: "img/day-skin56.png",
        ⲆⵠΔΔᐃᐃΔ: "img/night-skin56.png",
        ᐃΔᐃᐃⲆΔᐃ: "img/day-skin57.png",
        ΔⵠⵠᐃⲆᐃᐃ: "img/night-skin57.png",
        ᐃΔⵠⲆⲆⵠⵠ: "img/day-skin58.png",
        ⵠΔⵠΔⵠᐃⲆ: "img/night-skin58.png",
        ΔᐃΔⵠⲆⵠⲆ: "img/day-skin59.png",
        ⵠᐃΔᐃⲆⵠⵠ: "img/night-skin59.png",
        ⲆⵠΔᐃΔⲆᐃ: "img/day-skin60.png",
        ⵠᐃΔΔΔᐃΔ: "img/night-skin60.png",
        ΔⲆᐃⲆᐃⵠᐃ: "img/day-skin61.png",
        ⲆⵠΔⲆᐃⲆⲆ: "img/night-skin61.png",
        ΔΔΔⵠΔΔΔ: "img/day-skin62.png",
        ⵠᐃΔΔⲆⲆΔ: "img/night-skin62.png",
        ᐃᐃΔᐃΔⲆⵠ: "img/day-skin63.png",
        ΔᐃΔΔᐃⲆΔ: "img/night-skin63.png",
        ΔΔⲆΔⵠΔᐃ: "img/day-skin64.png",
        ⵠᐃⲆΔⲆⲆΔ: "img/night-skin64.png",
        ⲆΔᐃΔᐃⲆᐃ: "img/day-skin65.png",
        ⲆᐃⲆⲆⵠⵠᐃ: "img/night-skin65.png",
        ΔΔⵠᐃⵠΔⵠ: "img/day-skin66.png",
        ⵠᐃⲆᐃᐃⵠΔ: "img/night-skin66.png",
        ᐃⵠⲆΔᐃⵠⲆ: "img/day-skin67.png",
        ⵠⲆΔᐃᐃⵠΔ: "img/night-skin67.png",
        ᐃⵠᐃⵠⲆᐃᐃ: "img/day-skin68.png",
        ⲆⵠⲆΔⲆⵠᐃ: "img/night-skin68.png",
        ᐃⵠⵠⲆΔᐃΔ: "img/day-skin69.png",
        ⲆⲆⵠⲆΔⲆⲆ: "img/night-skin69.png",
        ᐃⵠⵠΔⵠⵠᐃ: "img/day-skin70.png",
        ΔᐃⲆΔⲆⲆⲆ: "img/night-skin70.png",
        ΔⲆⵠⲆⵠΔᐃ: "img/day-skin71.png",
        ΔⲆⵠⲆⲆⵠΔ: "img/night-skin71.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/day-skin72.png",
        ⲆΔⲆⲆⲆΔΔ: "img/night-skin72.png",
        ⵠⵠⲆⲆⲆⲆΔ: "img/day-skin73.png",
        ΔᐃⲆᐃΔᐃⲆ: "img/night-skin73.png",
        ᐃⲆΔⵠΔⲆΔ: "img/day-skin74.png",
        ⵠΔᐃΔΔⲆⵠ: "img/night-skin74.png",
        Δᐃᐃᐃᐃⵠᐃ: "img/day-skin75.png",
        ᐃⵠⵠⲆⵠᐃᐃ: "img/night-skin75.png",
        ΔᐃⵠΔᐃΔΔ: "img/day-skin76.png",
        ᐃΔⲆΔΔΔⲆ: "img/night-skin76.png",
        ᐃΔΔⵠⵠⲆⵠ: "img/day-skin77.png",
        ᐃΔⵠⵠⲆᐃΔ: "img/night-skin77.png",
        ᐃΔⲆᐃᐃΔΔ: "img/day-skin78.png",
        ⲆⵠᐃᐃⵠΔᐃ: "img/night-skin78.png",
        ᐃⵠΔⵠⲆᐃⵠ: "img/day-skin79.png",
        ΔⵠⲆᐃΔΔⲆ: "img/night-skin79.png",
        ᐃᐃⵠᐃᐃⵠᐃ: "img/day-skin80.png",
        ᐃᐃⵠΔⲆⲆⵠ: "img/night-skin80.png",
        ᐃⵠᐃΔΔᐃⵠ: "img/day-skin81.png",
        ᐃΔΔΔⵠⵠⲆ: "img/night-skin81.png",
        ᐃⲆᐃΔⲆⲆᐃ: "img/day-skin82.png",
        ΔΔᐃⲆⲆⵠᐃ: "img/night-skin82.png",
        ᐃᐃΔᐃⲆⵠⵠ: "img/day-skin83.png",
        ΔᐃⲆᐃΔΔΔ: "img/night-skin83.png",
        ⵠⲆⵠⲆⲆⵠΔ: "img/day-skin84.png",
        ⲆΔᐃⵠᐃⲆⲆ: "img/night-skin84.png",
        ⲆΔΔᐃⲆᐃⲆ: "img/day-skin85.png",
        ⲆⲆᐃΔᐃⵠⵠ: "img/night-skin85.png",
        ᐃⲆⲆⵠᐃᐃΔ: "img/day-skin86.png",
        ⵠⲆⵠⲆⲆⵠⵠ: "img/night-skin86.png",
        ⵠⲆⲆΔⵠⵠⵠ: "img/day-skin87.png",
        ΔΔⵠⵠΔᐃΔ: "img/night-skin87.png",
        ⲆⵠⲆΔⲆΔⵠ: "img/day-skin88.png",
        ⲆⵠᐃⲆΔᐃᐃ: "img/night-skin88.png",
        ᐃⵠᐃᐃⵠⵠΔ: "img/day-skin89.png",
        ΔᐃⵠΔⲆⵠⲆ: "img/night-skin89.png",
        ΔᐃⲆΔⲆⲆΔ: "img/day-skin90.png",
        ⵠⵠΔⵠΔⲆⵠ: "img/night-skin90.png",
        ΔᐃⵠᐃⲆⲆⵠ: "img/day-skin91.png",
        ᐃⲆΔᐃᐃⵠᐃ: "img/night-skin91.png",
        ᐃΔⲆⲆⵠᐃⵠ: "img/day-skin92.png",
        ᐃᐃΔⵠᐃⲆⲆ: "img/night-skin92.png",
        ᐃᐃⵠᐃⲆⵠΔ: "img/day-skin93.png",
        ᐃᐃⵠⲆᐃᐃⲆ: "img/night-skin93.png",
        ᐃΔⵠᐃⲆᐃⲆ: "img/day-skin94.png",
        ΔΔⲆΔΔΔⲆ: "img/night-skin94.png",
        ⵠΔⲆⵠᐃⵠⵠ: "img/day-skin95.png",
        ⲆᐃⲆⲆⵠᐃΔ: "img/night-skin95.png",
        ⲆᐃΔᐃΔᐃᐃ: "img/day-skin96.png",
        ⲆΔⲆⲆⵠⵠᐃ: "img/night-skin96.png",
        ⵠⲆᐃⲆᐃᐃⵠ: "img/day-skin97.png",
        ⵠΔΔΔⲆⲆⵠ: "img/night-skin97.png",
        ⲆΔⲆⵠⲆⲆⵠ: "img/day-skin98.png",
        ⲆΔΔΔᐃΔΔ: "img/night-skin98.png",
        ΔΔⲆΔⲆⵠΔ: "img/day-skin99.png",
        ⵠⵠⲆΔⵠΔⲆ: "img/night-skin99.png",
        ⲆΔᐃΔΔⵠⵠ: "img/day-skin100.png",
        ΔⲆⲆⵠΔΔⲆ: "img/night-skin100.png",
        ⲆⲆⵠⲆⵠΔⵠ: "img/day-skin101.png",
        ΔΔᐃⵠⵠⲆΔ: "img/night-skin101.png",
        ⲆᐃⲆⲆΔⵠᐃ: "img/day-skin102.png",
        ΔᐃⲆᐃⲆⲆⲆ: "img/night-skin102.png",
        ⵠⲆΔΔΔΔᐃ: "img/day-skin103.png",
        ⲆᐃⵠⵠᐃᐃΔ: "img/night-skin103.png",
        ΔⵠᐃΔⲆⵠⲆ: "img/day-skin104.png",
        ᐃᐃⲆΔⵠⵠⲆ: "img/night-skin104.png",
        ⵠⲆᐃᐃⲆⵠⲆ: "img/day-skin105.png",
        ⵠⵠⵠⵠᐃⵠⲆ: "img/night-skin105.png",
        ᐃΔⲆⲆⲆᐃΔ: "img/day-skin106.png",
        ΔΔΔⲆΔⲆⲆ: "img/night-skin106.png",
        ᐃΔⲆⵠⲆᐃⲆ: "img/day-skin107.png",
        ⲆΔᐃⵠⵠΔΔ: "img/night-skin107.png",
        ⵠΔΔᐃⵠⲆⵠ: "img/day-skin108.png",
        ⵠⵠᐃᐃΔΔⲆ: "img/night-skin108.png",
        ΔⵠⲆᐃⵠΔΔ: "img/day-skin109.png",
        ⲆΔᐃΔΔⵠᐃ: "img/night-skin109.png",
        ᐃⲆⲆΔⲆⵠⲆ: "img/day-skin110.png",
        ⲆⵠⵠᐃⲆⲆⲆ: "img/night-skin110.png",
        ᐃΔᐃⵠΔΔΔ: "img/day-skin111.png",
        ⵠᐃⵠⵠⵠⵠΔ: "img/night-skin111.png",
        ⲆⵠⵠⲆΔΔΔ: "img/day-skin112.png",
        ⵠᐃⲆⲆⲆᐃΔ: "img/night-skin112.png",
        ⲆᐃⲆⵠⲆⲆᐃΔⲆ: "img/day-skin113.png",
        ⲆΔᐃⵠⵠⵠᐃⲆᐃ: "img/night-skin113.png",
        ⵠΔΔⵠΔⵠⵠ: "img/day-skin114.png",
        ΔΔᐃᐃⵠΔⲆ: "img/night-skin114.png",
        ⵠⵠⵠᐃⲆⲆᐃ: "img/day-skin115.png",
        ᐃⵠΔⵠⲆⲆⲆ: "img/night-skin115.png",
        ΔᐃⲆΔⲆᐃᐃ: "img/day-skin116.png",
        ᐃᐃᐃⵠⵠΔⵠ: "img/night-skin116.png",
        ⲆⲆΔⵠᐃⲆⲆ: "img/day-skin117.png",
        ΔΔΔⵠᐃΔᐃ: "img/night-skin117.png",
        ᐃΔΔⵠΔΔΔ: "img/day-skin118.png",
        ᐃΔⵠΔΔΔᐃ: "img/night-skin118.png",
        ᐃᐃⲆᐃΔⵠⵠ: "img/day-skin119.png",
        ᐃΔⵠΔⵠⵠⵠ: "img/night-skin119.png",
        ⵠⵠΔⵠⲆⵠΔ: "img/day-skin120.png",
        ᐃᐃΔᐃⵠⲆΔ: "img/night-skin120.png",
        ΔᐃⲆⲆᐃᐃⲆ: "img/day-skin121.png",
        ΔᐃΔᐃᐃΔΔ: "img/night-skin121.png",
        ⵠⵠⵠⵠⲆⲆⵠ: "img/day-skin122.png",
        ΔⵠᐃᐃⲆⵠᐃ: "img/night-skin122.png",
        ⲆⲆⵠⲆⵠⵠΔ: "img/day-skin123.png",
        ΔΔⲆⲆⵠⵠⲆ: "img/night-skin123.png",
        ΔⵠⵠΔⲆᐃΔ: "img/day-skin124.png",
        ᐃΔⲆⵠΔⵠᐃ: "img/night-skin124.png",
        ᐃⵠᐃⵠⲆΔⲆ: "img/day-skin125.png",
        ᐃΔᐃΔⵠΔⲆ: "img/night-skin125.png",
        ⲆⵠΔⲆⲆⲆᐃ: "img/day-skin126.png",
        ⵠⵠⲆΔⲆⲆΔ: "img/night-skin126.png",
        ⲆΔⲆΔΔΔΔ: "img/day-skin127.png",
        ΔΔⵠᐃⵠᐃⵠ: "img/night-skin127.png",
        ᐃⵠᐃⵠΔΔⵠ: "img/day-skin128.png",
        ΔⲆⵠΔᐃΔᐃ: "img/night-skin128.png",
        ᐃⲆΔΔⵠᐃᐃ: "img/day-skin129.png",
        ΔⵠᐃⲆⲆⵠⵠ: "img/night-skin129.png",
        ⵠⵠΔᐃⲆⲆⵠ: "img/day-skin130-1.png",
        ΔⲆⵠΔⲆⵠᐃ: "img/night-skin130-1.png",
        ΔⵠⵠⵠⲆⲆⵠ: "img/day-skin131.png",
        ⲆᐃⲆΔⲆᐃⲆ: "img/night-skin131.png",
        ⵠΔⵠⲆⲆΔⵠ: "img/day-skin132.png",
        ᐃᐃΔΔΔⲆⵠ: "img/night-skin132.png",
        ⲆΔⲆⲆⵠⵠⵠ: "img/day-skin133.png",
        ᐃΔᐃⲆⲆⲆⲆ: "img/night-skin133.png",
        ⲆⲆΔⲆᐃⲆΔ: "img/day-skin134.png",
        ᐃⲆⲆⲆⲆΔᐃ: "img/night-skin134.png",
        ⵠⲆᐃᐃⵠⲆᐃ: "img/day-skin135.png",
        ⲆⵠᐃᐃⵠⲆⵠ: "img/night-skin135.png",
        ΔⵠᐃⵠⲆᐃⲆ: "img/day-skin136.png",
        ⵠⲆⲆΔⲆⵠᐃ: "img/night-skin136.png",
        ΔⵠΔΔᐃⲆⲆ: "img/day-skin137.png",
        ΔᐃⲆᐃᐃΔΔ: "img/night-skin137.png",
        ⵠᐃΔΔΔΔⵠ: "img/day-skin138.png",
        ΔⵠⵠΔⵠⵠⲆ: "img/night-skin138.png",
        ᐃⲆⵠΔᐃᐃᐃ: "img/day-skin139.png",
        ⵠΔⵠᐃΔⲆⲆ: "img/night-skin139.png",
        ΔΔⲆᐃⲆΔⵠ: "img/day-skin140.png",
        ᐃⵠΔᐃᐃᐃⲆ: "img/night-skin140.png",
        ⲆΔᐃᐃΔᐃⲆ: "img/day-skin141.png",
        ⲆΔΔⲆⵠⵠⲆ: "img/night-skin141.png",
        ΔⵠΔᐃⵠᐃⵠ: "img/day-skin142.png",
        ᐃⲆᐃⵠⵠᐃΔ: "img/night-skin142.png",
        ⵠΔᐃᐃᐃΔⵠ: "img/day-skin143.png",
        ⵠΔΔΔᐃⵠᐃ: "img/night-skin143.png",
        ᐃⵠⲆΔⲆⵠⲆ: "img/day-skin144.png",
        ΔⵠᐃΔᐃⲆⲆ: "img/night-skin144.png",
        ⵠⵠⲆΔᐃΔⵠ: "img/day-skin145.png",
        ΔⲆⵠⵠⲆⵠⵠ: "img/night-skin145.png",
        ⵠⲆⲆⲆΔⵠΔ: "img/day-skin146.png",
        ΔΔΔᐃⲆⵠΔ: "img/night-skin146.png",
        ⲆᐃᐃⵠⵠⵠΔ: "img/day-skin147.png",
        ⲆᐃⵠⵠⵠᐃⲆ: "img/night-skin147.png",
        Ⲇᐃᐃᐃⵠᐃᐃ: "img/day-skin148.png",
        ᐃᐃᐃⲆᐃⲆⲆ: "img/night-skin148.png",
        ΔⲆΔⵠᐃᐃⲆ: "img/day-skin149.png",
        ᐃⵠⲆΔᐃΔⵠ: "img/night-skin149.png",
        ⵠⵠΔᐃⵠⵠΔ: "img/day-skin150.png",
        ⲆⵠΔᐃⵠⵠΔ: "img/night-skin150.png",
        ⵠΔⵠⲆⵠⲆΔ: "img/day-skin151.png",
        ΔᐃΔΔΔᐃΔ: "img/night-skin151.png",
        ᐃᐃᐃⲆΔᐃⲆ: "img/day-skin152.png",
        ⲆⲆᐃᐃⵠⲆᐃ: "img/night-skin152.png",
        ⵠΔⵠΔⲆⵠⵠ: "img/day-skin153.png",
        ⵠⲆⵠᐃΔⵠⲆ: "img/night-skin153.png",
        ⵠⲆᐃΔᐃΔᐃ: "img/day-skin154.png",
        ⲆⵠⵠⵠΔⲆᐃ: "img/night-skin154.png",
        ⵠⵠᐃⲆΔᐃⵠ: "img/day-skin155.png",
        ⲆⲆⵠΔⵠⵠⵠ: "img/night-skin155.png",
        ⲆⵠⲆΔΔᐃᐃ: "img/day-skin156.png",
        ᐃⵠⵠⲆΔⲆᐃ: "img/night-skin156.png",
        ᐃⵠᐃⵠⲆᐃⲆ: "img/day-skin157.png",
        ΔᐃⵠⲆΔᐃⵠ: "img/night-skin157.png",
        ᐃⲆΔᐃⲆⲆᐃ: "img/day-skin158.png",
        ᐃᐃΔⵠⲆᐃⵠ: "img/night-skin158.png",
        ⵠᐃⲆⲆΔᐃΔ: "img/day-skin159.png",
        ⲆⲆⲆⵠᐃΔΔ: "img/night-skin159.png",
        ᐃⵠΔᐃⵠⲆΔ: "img/day-skin160.png",
        ᐃΔΔⲆⵠᐃΔ: "img/night-skin160.png",
        ⲆᐃᐃᐃΔᐃⲆ: "img/day-skin161.png",
        ΔΔⵠⵠΔⵠⵠ: "img/night-skin161.png",
        ⲆⵠⵠΔᐃⲆⵠ: "img/day-skin162.png",
        ΔⵠᐃᐃΔᐃⵠ: "img/night-skin162.png",
        ⵠⲆΔⲆⲆⵠⲆ: "img/day-skin163.png",
        ᐃΔⲆΔᐃᐃⵠ: "img/night-skin163.png",
        ΔⲆⵠΔⲆΔⵠ: "img/day-skin164.png",
        ⲆⵠΔⵠΔΔⵠ: "img/night-skin164.png",
        ⲆⵠⵠⵠᐃⲆⵠ: "img/day-skin165.png",
        ΔΔⵠⲆΔΔⲆ: "img/night-skin165.png",
        ΔⵠΔΔΔⲆᐃ: "img/day-skin166.png",
        ⵠᐃⵠΔᐃⵠⲆ: "img/night-skin166.png",
        ΔᐃᐃᐃᐃⲆⲆ: "img/day-skin167.png",
        ⲆⵠᐃⲆⲆΔⵠ: "img/night-skin167.png",
        ᐃⲆᐃᐃⵠᐃⲆ: "img/day-skin168.png",
        ⵠᐃΔⲆΔΔΔ: "img/night-skin168.png",
        ⵠᐃΔᐃⲆᐃΔ: "img/day-skin169.png",
        ⲆᐃⲆΔⵠΔⵠ: "img/night-skin169.png",
        ⲆⵠᐃΔᐃⵠⵠ: "img/day-skin170.png",
        ᐃⵠⲆⵠⵠⵠⲆ: "img/night-skin170.png",
        ⵠⵠⵠᐃΔᐃⲆ: "img/day-skin171.png",
        ⵠⵠⲆⵠⵠᐃⵠ: "img/night-skin171.png",
        ⵠⵠⲆⵠⲆⲆⲆ: "img/day-skin172.png",
        ΔᐃⵠΔΔᐃⲆ: "img/night-skin172.png",
        ⵠⵠΔⵠᐃⵠⵠ: "img/day-skin173.png",
        ⲆⵠΔᐃⲆΔⵠ: "img/night-skin173.png",
        ⲆᐃⵠⲆΔⲆᐃ: "img/day-skin174.png",
        ⵠⵠΔⵠⵠⲆⲆ: "img/night-skin174.png",
        ⲆⵠⵠΔⲆⵠᐃ: "img/day-skin175.png",
        ⲆΔᐃΔⵠⲆⲆ: "img/night-skin175.png",
        ⲆᐃⲆᐃⵠᐃΔ: "img/day-skin176.png",
        ⲆΔΔᐃⵠⵠᐃ: "img/night-skin176.png",
        ΔⵠⵠⲆΔΔⲆ: "img/day-skin177.png",
        ᐃⲆᐃⵠⲆΔᐃ: "img/night-skin177.png",
        ΔⵠⵠⵠΔᐃᐃ: "img/day-skin178.png",
        ᐃΔᐃⵠⲆⲆⵠ: "img/night-skin178.png",
        ⲆΔΔᐃⵠΔΔ: "img/day-skin179.png",
        ᐃᐃᐃᐃᐃⵠΔ: "img/night-skin179.png",
        ΔⵠᐃⲆΔⵠΔ: "img/day-skin180.png",
        ⵠᐃⲆᐃⵠΔᐃ: "img/night-skin180.png",
        ⲆΔⵠΔΔⵠⵠ: "img/day-skin181.png",
        ⵠΔΔΔⵠⲆᐃ: "img/night-skin181.png",
        ⵠⵠΔΔᐃᐃⵠ: "img/day-skin182.png",
        ᐃΔΔⵠᐃⵠⵠ: "img/night-skin182.png",
        ᐃⵠΔΔⲆΔⵠ: "img/day-skin183.png",
        ⵠᐃⵠⲆⲆΔᐃ: "img/night-skin183.png",
        ᐃΔΔⲆⲆΔᐃ: "img/day-skin184.png",
        ⵠᐃⲆΔΔΔⵠ: "img/night-skin184.png",
        ⲆⵠᐃᐃᐃⲆΔ: "img/day-skin185.png",
        ⲆΔⲆⲆᐃⵠΔ: "img/night-skin185.png",
        ⵠᐃⵠⵠⵠⵠᐃ: "img/day-skin186.png",
        ᐃᐃᐃᐃⵠⲆⵠ: "img/night-skin186.png",
        ⵠⲆᐃᐃᐃⵠΔ: "img/day-skin187.png",
        ⵠΔᐃΔᐃᐃΔ: "img/night-skin187.png",
        ΔΔᐃᐃᐃⵠⲆ: "img/day-skin188.png",
        ⵠᐃΔᐃΔᐃᐃ: "img/night-skin188.png",
        ᐃⲆᐃΔΔⵠΔ: "img/day-skin189.png",
        ⲆᐃᐃΔⵠΔΔ: "img/night-skin189.png",
        ΔⵠᐃᐃΔᐃΔ: "img/day-skin190.png",
        ᐃⵠⵠⵠⵠᐃⲆ: "img/night-skin190.png",
        ⲆⲆⲆΔⵠᐃⵠ: "img/day-skin191.png",
        ⵠᐃⲆΔᐃⵠᐃ: "img/night-skin191.png",
        ΔⵠⲆᐃⲆΔΔ: "img/day-skin192.png",
        ᐃᐃⵠⵠΔΔⲆ: "img/night-skin192.png",
        ⵠΔⲆΔΔⲆⲆ: "img/day-skin193.png",
        ⵠᐃΔⵠᐃⵠᐃ: "img/night-skin193.png",
        ⲆⲆΔᐃⵠⲆᐃ: "img/day-skin194.png",
        ⵠⲆⲆᐃᐃⵠⲆ: "img/night-skin194.png",
        ⵠⵠΔⲆᐃᐃᐃ: "img/day-skin195.png",
        ΔᐃᐃⲆⵠⵠΔ: "img/night-skin195.png",
        ᐃΔᐃⵠⲆΔⲆ: "img/day-skin196.png",
        ⲆΔᐃΔΔΔⵠ: "img/night-skin196.png",
        ⵠⵠΔⲆᐃⲆⲆ: "img/day-skin197.png",
        ⵠⲆᐃⵠⲆⲆⵠ: "img/night-skin197.png",
        ⵠⵠΔᐃⲆⵠᐃ: "img/day-skin198.png",
        ᐃⲆⲆⵠⲆΔⲆ: "img/night-skin198.png",
        ΔⲆⵠΔⲆΔⲆ: "img/day-skin199.png",
        ⵠⵠⲆΔⵠⲆⲆ: "img/night-skin199.png",
        ⵠⵠⲆⵠᐃⵠᐃ: "img/day-skin200.png",
        ⵠᐃΔΔⲆᐃᐃ: "img/night-skin200.png",
        ⲆᐃⲆⵠΔᐃⵠ: "img/day-skin201.png",
        ᐃⲆᐃΔⵠΔⲆ: "img/night-skin201.png",
        ⵠⵠⲆⵠⲆⵠΔ: "img/day-skin202.png",
        ΔⲆΔⵠⵠⲆⵠ: "img/night-skin202.png",
        ⵠᐃᐃⵠⲆⵠⵠ: "img/day-skin203.png",
        ΔᐃᐃⵠΔⲆⵠ: "img/night-skin203.png",
        ᐃⲆⵠⵠᐃⵠᐃ: "img/day-skin204.png",
        ⵠⵠⲆⵠΔⵠⵠ: "img/night-skin204.png",
        ᐃΔⲆᐃⲆⵠⲆ: "img/day-skin205.png",
        ΔⲆⲆᐃⵠᐃⵠ: "img/night-skin205.png",
        ΔᐃⵠⲆᐃΔᐃ: "img/day-skin206.png",
        ᐃΔⲆⵠⵠΔᐃ: "img/night-skin206.png",
        ⲆΔⵠᐃᐃⲆⲆ: "img/day-skin207.png",
        ΔⲆᐃΔⵠᐃⵠ: "img/night-skin207.png",
        ΔⲆΔⲆⵠⲆⵠ: "img/day-skin208.png",
        ⵠⵠᐃⵠᐃⵠⲆ: "img/night-skin208.png",
        ⵠⵠΔⵠΔᐃᐃ: "img/day-skin209.png",
        ⵠᐃΔⵠᐃΔⲆ: "img/night-skin209.png",
        ΔⲆΔⲆⵠᐃΔ: "img/day-skin210.png",
        ⵠΔⵠᐃⲆΔⲆ: "img/night-skin210.png",
        ⵠⵠΔⲆᐃⲆΔ: "img/day-skin211.png",
        ⵠⵠⵠᐃⲆⵠᐃ: "img/night-skin211.png",
        ⵠΔⵠΔⲆΔⵠ: "img/day-skin212.png",
        ᐃⵠΔⲆⵠⲆⵠ: "img/night-skin212.png",
        Ⲇⵠᐃᐃᐃⵠᐃ: "img/day-hand-skin0.png",
        ⲆⵠⲆⵠⵠΔΔ: "img/night-hand-skin0.png",
        ⲆⵠᐃⵠⵠⲆⲆ: "img/day-hand-skin1.png",
        ⲆΔᐃᐃⵠⲆⵠ: "img/night-hand-skin1.png",
        ᐃⵠΔᐃⲆⵠΔ: "img/day-hand-skin2.png",
        ⵠΔᐃⵠⵠⲆΔ: "img/night-hand-skin2.png",
        ⵠⲆᐃΔⵠᐃⵠ: "img/day-hand-skin3.png",
        ΔΔⲆⵠⵠⲆΔ: "img/night-hand-skin3.png",
        ⵠⵠᐃⵠΔⲆᐃ: "img/day-hand-skin4.png",
        ⵠⵠᐃⲆΔΔⲆ: "img/night-hand-skin4.png",
        ᐃⲆⲆⲆⲆᐃᐃ: "img/day-hand-skin5.png",
        ᐃΔⵠᐃⲆᐃᐃ: "img/night-hand-skin5.png",
        ⵠΔⲆᐃᐃᐃⵠ: "img/day-hand-skin6.png",
        ΔⵠⵠⵠⵠⵠᐃΔⵠ: "img/night-hand-skin6.png",
        ⲆⵠⵠᐃⲆᐃΔ: "img/day-hand-skin6.png",
        ⲆᐃᐃⵠⲆΔᐃ: "img/night-hand-skin6.png",
        ⲆⵠⵠΔⵠⵠⲆ: "img/day-hand-skin8.png",
        ⵠⵠᐃΔᐃⵠⲆ: "img/night-hand-skin8.png",
        ΔΔⵠᐃΔⲆⲆ: "img/day-hand-skin9.png",
        ᐃᐃΔᐃⲆΔΔ: "img/night-hand-skin9.png",
        ⵠΔⵠⵠᐃⵠⵠ: "img/day-hand-skin10.png",
        ⲆⵠⲆⵠᐃᐃⲆ: "img/night-hand-skin10.png",
        ⵠⵠⵠⵠⵠΔⵠ: "img/day-hand-skin11.png",
        ᐃⲆᐃⲆᐃᐃⵠ: "img/night-hand-skin11.png",
        ᐃⵠⲆΔⵠⲆΔ: "img/day-hand-skin12.png",
        ⵠⲆΔⲆᐃΔⵠ: "img/night-hand-skin12.png",
        ⵠⲆⲆⲆᐃⲆΔ: "img/day-hand-skin13.png",
        ⵠΔΔⲆΔΔⵠ: "img/night-hand-skin13.png",
        ΔⵠᐃᐃⲆΔΔ: "img/day-hand-skin14.png",
        ΔⵠᐃΔⲆⲆΔ: "img/night-hand-skin14.png",
        ΔΔⵠᐃⵠΔⲆ: "img/day-hand-skin15.png",
        ⵠΔⵠΔⵠΔⲆ: "img/night-hand-skin15.png",
        ⵠⵠⲆᐃᐃⵠⵠ: "img/day-hand-skin16.png",
        ᐃⲆᐃⵠⵠⵠⲆ: "img/night-hand-skin16.png",
        ᐃᐃⲆᐃⲆᐃⲆ: "img/day-hand-skin17.png",
        ⵠΔⲆⵠⲆᐃⲆ: "img/night-hand-skin17.png",
        ⲆⵠⲆΔᐃⲆΔ: "img/day-hand-skin18.png",
        ΔⵠⲆⲆⵠΔⵠ: "img/night-hand-skin18.png",
        ⵠⲆᐃⲆᐃᐃᐃ: "img/day-hand-skin19.png",
        ⵠⲆⵠᐃⵠⵠⲆ: "img/night-hand-skin19.png",
        ΔⵠⲆΔⲆⵠⲆ: "img/day-hand-skin20.png",
        ⲆⲆⵠⵠⲆᐃⲆ: "img/night-hand-skin20.png",
        ⵠⵠⵠⲆⲆⲆΔ: "img/day-hand-skin21.png",
        ⵠⲆᐃΔᐃΔΔ: "img/night-hand-skin21.png",
        ΔΔⵠⵠⵠᐃⵠ: "img/day-hand-skin22.png",
        ⵠᐃΔⲆⵠΔᐃ: "img/night-hand-skin22.png",
        ᐃΔΔᐃⵠⲆᐃ: "img/day-hand-skin23.png",
        ⵠⲆⵠⵠΔⲆⵠ: "img/night-hand-skin23.png",
        ᐃⲆΔⵠΔᐃⵠ: "img/day-hand-skin24.png",
        ᐃΔᐃⵠΔΔⲆ: "img/night-hand-skin24.png",
        ᐃⵠᐃΔᐃⵠⵠ: "img/day-hand-skin25.png",
        ΔΔΔΔᐃⵠΔ: "img/night-hand-skin25.png",
        ⲆᐃⲆᐃⲆΔⵠ: "img/day-hand-skin26.png",
        ᐃᐃⵠΔⵠΔⲆ: "img/night-hand-skin26.png",
        ⵠᐃᐃᐃⵠⲆⵠ: "img/day-hand-skin27.png",
        ⵠⵠΔᐃΔΔᐃ: "img/night-hand-skin27.png",
        ⲆⵠᐃΔΔⵠΔ: "img/day-hand-skin28.png",
        ΔⲆΔᐃΔⲆᐃ: "img/night-hand-skin28.png",
        ΔⲆΔⲆⲆᐃⲆ: "img/day-hand-skin29.png",
        ᐃⲆΔΔⲆΔᐃ: "img/night-hand-skin29.png",
        ⲆᐃᐃⲆⵠΔⵠ: "img/day-hand-skin30.png",
        ᐃᐃΔⲆⲆⵠᐃ: "img/night-hand-skin30.png",
        ΔᐃΔⲆΔⵠⲆ: "img/day-hand-skin31.png",
        ᐃᐃᐃⵠᐃΔΔ: "img/night-hand-skin31.png",
        ⲆᐃⲆΔⲆᐃΔ: "img/day-hand-skin32.png",
        ⵠΔⵠᐃᐃᐃᐃ: "img/night-hand-skin32.png",
        ΔⲆⵠᐃΔⲆᐃ: "img/day-hand-skin33.png",
        ⲆⵠᐃᐃⲆΔⵠ: "img/night-hand-skin33.png",
        ⵠΔᐃᐃᐃⲆΔ: "img/day-hand-skin34.png",
        ⲆⲆⲆᐃᐃᐃᐃ: "img/night-hand-skin34.png",
        ΔⵠⵠⲆⵠΔⵠ: "img/day-hand-skin35.png",
        ⵠᐃΔΔⵠᐃΔ: "img/night-hand-skin35.png",
        ⲆⵠᐃΔᐃᐃⵠ: "img/day-hand-skin36.png",
        ⲆΔⲆⵠΔⲆⲆ: "img/night-hand-skin36.png",
        ΔᐃᐃᐃΔⵠΔ: "img/day-hand-skin37.png",
        ⵠⲆⵠⵠⵠⲆⵠ: "img/night-hand-skin37.png",
        ⵠᐃΔᐃⲆⵠⲆ: "img/day-hand-skin38.png",
        ΔᐃΔΔΔᐃⲆ: "img/night-hand-skin38.png",
        ᐃⵠⲆᐃΔᐃⲆ: "img/day-hand-skin39.png",
        ⲆⵠᐃⲆⲆⵠᐃ: "img/night-hand-skin39.png",
        ⲆⲆⵠⲆᐃΔᐃ: "img/day-hand-skin40.png",
        ⲆΔⲆΔⵠⲆΔ: "img/night-hand-skin40.png",
        ⵠⵠΔⲆΔΔᐃ: "img/day-hand-skin41.png",
        ⲆΔΔΔⵠΔⵠ: "img/night-hand-skin41.png",
        ᐃⵠᐃⵠⵠⲆⲆ: "img/day-hand-skin42.png",
        ⲆⵠⲆᐃⲆᐃᐃ: "img/night-hand-skin42.png",
        ⲆⲆΔΔⵠᐃⲆ: "img/day-hand-skin43.png",
        ⲆΔⲆⲆᐃΔᐃ: "img/night-hand-skin43.png",
        ⲆΔΔⵠᐃⵠΔ: "img/day-hand-skin16.png",
        ⵠΔⲆⵠΔⲆᐃ: "img/night-hand-skin16.png",
        ΔΔΔⵠΔⵠⵠ: "img/day-hand-skin45.png",
        ΔⲆⲆᐃⲆⵠⵠ: "img/night-hand-skin45.png",
        ⵠⵠᐃⵠᐃΔᐃ: "img/day-hand-skin46.png",
        ⵠⵠⵠᐃΔⲆᐃ: "img/night-hand-skin46.png",
        ΔΔⵠⲆΔⲆᐃ: "img/day-hand-skin47.png",
        ΔΔᐃⲆᐃⲆΔ: "img/night-hand-skin47.png",
        ⲆΔᐃⵠᐃᐃΔ: "img/day-hand-skin48.png",
        ⲆⲆⲆᐃᐃⵠⵠ: "img/night-hand-skin48.png",
        ⵠᐃΔΔⵠⵠᐃ: "img/day-hand-skin49.png",
        ⲆⲆⵠΔᐃΔΔ: "img/night-hand-skin49.png",
        ⵠΔΔᐃⲆⲆᐃ: "img/day-hand-skin49.png",
        ⵠⲆΔΔᐃⲆⲆ: "img/night-hand-skin49.png",
        ⵠᐃΔⵠᐃⵠⲆ: "img/day-hand-skin51.png",
        ⵠᐃᐃΔᐃΔᐃ: "img/night-hand-skin51.png",
        ΔᐃΔⲆⲆᐃΔ: "img/day-hand-skin52.png",
        ΔᐃⲆⲆΔᐃᐃ: "img/night-hand-skin52.png",
        ᐃΔᐃⲆᐃΔᐃ: "img/day-hand-skin53.png",
        ᐃⲆΔⵠⵠⲆⵠ: "img/night-hand-skin53.png",
        ⵠᐃⵠⵠᐃⵠΔ: "img/day-hand-skin53.png",
        ⵠⲆΔⵠΔⵠⵠ: "img/night-hand-skin53.png",
        ⲆᐃΔⲆⲆΔⲆ: "img/day-hand-skin55.png",
        ⵠⵠⲆⲆᐃΔⵠ: "img/night-hand-skin55.png",
        ⵠⵠⵠⲆᐃⲆⲆ: "img/day-hand-skin56.png",
        ᐃᐃⲆΔᐃⵠⵠ: "img/night-hand-skin56.png",
        ⲆΔᐃᐃΔᐃΔ: "img/day-hand-skin57.png",
        ΔᐃⵠᐃΔⲆᐃ: "img/night-hand-skin57.png",
        ᐃᐃᐃᐃⲆΔΔ: "img/day-hand-skin58.png",
        ⲆᐃΔⵠΔⲆⲆ: "img/night-hand-skin58.png",
        ⵠⲆᐃᐃΔΔⲆ: "img/day-hand-skin59.png",
        ⲆⲆᐃⲆΔΔⲆ: "img/night-hand-skin59.png",
        ⵠⲆⵠⵠⲆⲆΔ: "img/day-hand-skin61.png",
        ⵠⲆΔᐃⲆΔᐃ: "img/night-hand-skin61.png",
        ⲆⲆⲆᐃⲆᐃⵠ: "img/day-hand-skin61.png",
        ⲆᐃᐃⵠⲆⲆⲆ: "img/night-hand-skin61.png",
        ⵠⵠᐃΔΔⵠⲆ: "img/day-hand-skin62.png",
        ⲆΔΔⵠⲆⵠⵠ: "img/night-hand-skin62.png",
        ΔⵠΔⵠⵠΔⵠ: "img/day-hand-skin63.png",
        ᐃᐃⵠΔΔⵠᐃ: "img/night-hand-skin63.png",
        ⵠⵠᐃΔⵠⵠⲆ: "img/day-hand-skin64.png",
        ΔⲆΔⵠΔⵠⵠ: "img/night-hand-skin64.png",
        ΔⲆⵠⲆⵠⲆⲆ: "img/day-hand-skin65.png",
        ⲆⵠᐃᐃΔⵠⵠ: "img/night-hand-skin65.png",
        ⵠⲆᐃⲆⲆΔⵠ: "img/day-hand-skin66.png",
        ⵠᐃⵠⵠⲆΔⲆ: "img/night-hand-skin66.png",
        ΔⲆⵠᐃΔΔⵠ: "img/day-hand-skin67.png",
        ⵠⵠⲆΔᐃⲆᐃ: "img/night-hand-skin67.png",
        ⵠⵠⲆΔᐃⵠᐃ: "img/day-hand-skin68.png",
        ⵠᐃΔᐃᐃⵠⵠ: "img/night-hand-skin68.png",
        ΔΔᐃⲆⲆΔᐃ: "img/day-hand-skin69.png",
        ⵠΔᐃᐃⵠⵠΔ: "img/night-hand-skin69.png",
        ΔⲆΔⵠᐃᐃΔ: "img/day-hand-skin70.png",
        ΔᐃᐃⵠⵠΔᐃ: "img/night-hand-skin70.png",
        ΔⲆⲆᐃⵠᐃⲆ: "img/day-hand-skin71.png",
        ΔⵠⲆΔⵠⲆⲆ: "img/night-hand-skin71.png",
        ᐃᐃⵠᐃⲆΔᐃ: "img/day-hand-skin72.png",
        ᐃⵠΔⲆⲆΔⵠ: "img/night-hand-skin72.png",
        ⵠᐃⵠⲆΔⵠⵠ: "img/day-hand-skin73.png",
        ⵠᐃⵠⵠⵠⵠⲆ: "img/night-hand-skin73.png",
        ⲆΔΔⵠΔⲆΔ: "img/day-hand-skin74.png",
        ⵠΔⵠᐃⲆⵠⵠ: "img/night-hand-skin74.png",
        ΔⵠΔⲆⵠΔⵠ: "img/day-hand-skin75.png",
        ⲆⲆΔⵠΔᐃⲆ: "img/night-hand-skin75.png",
        ⲆᐃⵠᐃⵠᐃⲆ: "img/day-hand-skin76.png",
        ΔⲆⲆⵠⵠᐃᐃ: "img/night-hand-skin76.png",
        ΔΔΔⵠᐃᐃⵠ: "img/day-hand-skin77.png",
        ⵠᐃⲆⵠΔΔΔ: "img/night-hand-skin77.png",
        ᐃⲆⵠᐃⲆΔΔ: "img/day-hand-skin78.png",
        ᐃⵠⲆΔᐃⲆᐃ: "img/night-hand-skin78.png",
        ⲆⵠⵠⲆⵠⵠᐃ: "img/day-hand-skin79.png",
        ⲆⲆᐃΔᐃΔⲆ: "img/night-hand-skin79.png",
        ᐃΔⲆᐃᐃΔⵠ: "img/day-hand-skin80.png",
        ᐃⵠΔⵠᐃᐃⲆ: "img/night-hand-skin80.png",
        ᐃⵠΔⲆΔⲆᐃ: "img/day-hand-skin81.png",
        ΔΔⲆⵠⵠⲆⵠ: "img/night-hand-skin81.png",
        ⲆΔΔⲆⲆⲆΔ: "img/day-hand-skin82.png",
        ΔⲆⲆᐃⲆⲆⲆ: "img/night-hand-skin82.png",
        ⵠⵠΔᐃΔΔⵠ: "img/day-hand-skin83.png",
        ᐃⵠᐃⲆᐃᐃᐃ: "img/night-hand-skin83.png",
        ⵠᐃΔⵠⵠⵠᐃ: "img/day-hand-skin84.png",
        ⲆᐃᐃⲆΔⲆΔ: "img/night-hand-skin84.png",
        ⲆⲆΔΔᐃⵠΔ: "img/day-hand-skin85.png",
        ⵠΔᐃⵠᐃⵠᐃ: "img/night-hand-skin85.png",
        ⵠᐃᐃᐃⵠᐃⵠ: "img/day-hand-skin86.png",
        ᐃᐃⲆΔⵠᐃⲆ: "img/night-hand-skin86.png",
        ⵠⲆⵠⲆⵠΔⵠ: "img/day-hand-skin87.png",
        ⲆⵠⵠⵠⵠⲆΔ: "img/night-hand-skin87.png",
        ⵠΔⵠᐃⲆΔᐃ: "img/day-hand-skin88.png",
        ΔⲆⲆⵠΔᐃⵠ: "img/night-hand-skin88.png",
        ⲆΔΔᐃᐃᐃᐃ: "img/day-hand-skin89.png",
        ᐃᐃⲆⲆⲆΔᐃ: "img/night-hand-skin89.png",
        ᐃⲆⲆᐃⲆⵠⲆ: "img/day-hand-skin90.png",
        ⵠⲆᐃⵠᐃⲆⵠ: "img/night-hand-skin90.png",
        ⲆⵠᐃⲆᐃΔⵠ: "img/day-hand-skin91.png",
        ᐃΔΔⲆΔⲆⵠ: "img/night-hand-skin91.png",
        ⵠⵠⲆⵠⵠΔⵠ: "img/day-hand-skin92.png",
        ⵠᐃⵠΔⲆᐃΔ: "img/night-hand-skin92.png",
        ΔⲆⲆⲆᐃⲆΔ: "img/day-hand-skin93.png",
        ⲆΔⵠΔⲆⵠⲆ: "img/night-hand-skin93.png",
        ᐃⲆⲆᐃᐃΔⲆ: "img/day-hand-skin94.png",
        ⲆΔᐃⵠⲆᐃΔ: "img/night-hand-skin94.png",
        ΔⲆⲆⵠΔⲆΔ: "img/day-hand-skin95.png",
        ⲆΔΔⵠⵠᐃᐃ: "img/night-hand-skin95.png",
        ΔᐃⲆⲆΔⲆᐃ: "img/day-hand-skin96.png",
        ΔⲆΔⲆΔⵠΔ: "img/night-hand-skin96.png",
        ΔᐃᐃᐃΔΔᐃ: "img/day-hand-skin97.png",
        ᐃⲆⵠⵠΔΔⵠ: "img/night-hand-skin97.png",
        ⲆⲆⲆᐃⲆⲆΔ: "img/day-hand-skin98.png",
        ⵠΔΔⵠⵠⵠᐃ: "img/night-hand-skin98.png",
        ⵠᐃᐃᐃⲆⵠⲆ: "img/day-hand-skin99.png",
        ⲆᐃᐃⵠⲆᐃᐃ: "img/night-hand-skin99.png",
        ⲆᐃᐃⵠΔᐃΔ: "img/day-hand-skin100.png",
        ⲆᐃⵠᐃΔⲆⲆ: "img/night-hand-skin100.png",
        ⵠᐃᐃⲆΔΔⵠ: "img/day-hand-skin101.png",
        ΔᐃΔΔᐃΔⵠ: "img/night-hand-skin101.png",
        ΔᐃΔᐃΔⵠΔ: "img/day-hand-skin102.png",
        ⵠⲆᐃᐃΔⵠᐃ: "img/night-hand-skin102.png",
        ⲆΔᐃᐃᐃᐃᐃ: "img/day-hand-skin103.png",
        ᐃⲆᐃΔⵠⲆᐃ: "img/night-hand-skin103.png",
        ᐃᐃᐃᐃⲆΔⲆ: "img/day-hand-skin104.png",
        ⵠΔⲆᐃⲆᐃⲆ: "img/night-hand-skin104.png",
        ΔⵠᐃᐃⵠⲆΔ: "img/day-hand-skin105.png",
        ΔᐃⲆᐃⲆⲆΔ: "img/night-hand-skin105.png",
        ᐃⲆΔΔⵠΔΔ: "img/day-hand-skin106.png",
        ⲆⲆΔᐃⲆᐃⲆ: "img/night-hand-skin106.png",
        ᐃⲆΔⲆΔΔΔ: "img/day-hand-skin107.png",
        ⵠΔᐃΔΔΔⵠ: "img/night-hand-skin107.png",
        ⲆΔⵠΔⵠⵠⵠ: "img/day-hand-skin108.png",
        ΔⵠᐃᐃᐃΔΔ: "img/night-hand-skin108.png",
        ⵠⵠⵠⲆᐃᐃᐃ: "img/day-hand-skin109.png",
        ⵠⲆⲆᐃⲆⵠⲆ: "img/night-hand-skin109.png",
        ⵠⵠᐃⲆⲆⲆⵠ: "img/day-hand-skin110.png",
        ᐃⵠΔΔⲆᐃⲆ: "img/night-hand-skin110.png",
        ΔΔΔΔⲆᐃⵠ: "img/day-hand-skin111.png",
        ⲆⵠⵠΔⲆᐃᐃ: "img/night-hand-skin111.png",
        ⲆⵠΔⲆⲆⵠΔ: "img/day-hand-skin112.png",
        ΔΔⲆⲆⲆᐃᐃ: "img/night-hand-skin112.png",
        ᐃᐃⵠᐃⵠΔᐃᐃⵠ: "img/day-hand-skin113.png",
        ΔΔΔᐃⲆΔΔΔⲆ: "img/night-hand-skin113.png",
        ⵠΔᐃᐃΔᐃΔ: "img/day-hand-skin114.png",
        ⵠⵠⲆᐃⲆⵠⲆ: "img/night-hand-skin114.png",
        ⵠⵠⵠᐃᐃᐃΔ: "img/day-hand-skin115.png",
        ⵠⲆⵠᐃⵠᐃΔ: "img/night-hand-skin115.png",
        ⲆⲆⵠⵠⲆⵠⵠ: "img/day-hand-skin116.png",
        ⵠⲆᐃᐃⲆⲆⵠ: "img/night-hand-skin116.png",
        ⲆⵠⵠⲆⵠⲆⲆ: "img/day-hand-skin117.png",
        ᐃⲆⵠΔⵠΔᐃ: "img/night-hand-skin117.png",
        ⲆⲆⵠⲆΔᐃⵠ: "img/day-hand-skin118.png",
        ΔΔᐃⲆᐃⵠⲆ: "img/night-hand-skin118.png",
        ⵠᐃΔⵠᐃᐃᐃ: "img/day-hand-skin119.png",
        ⵠⲆΔⲆⵠⵠᐃ: "img/night-hand-skin119.png",
        ⲆᐃΔⲆᐃⵠΔ: "img/day-hand-skin120.png",
        ⲆΔⲆᐃΔᐃⵠ: "img/night-hand-skin120.png",
        ΔⵠⲆⲆΔⲆᐃ: "img/day-hand-skin122.png",
        ⲆⵠⵠΔⵠⵠΔ: "img/night-hand-skin122.png",
        ΔᐃᐃΔᐃᐃᐃ: "img/day-hand-skin122.png",
        ⵠⵠⵠⵠⲆᐃⵠ: "img/night-hand-skin122.png",
        ⲆΔⵠⵠⲆⲆᐃ: "img/day-hand-skin122.png",
        ᐃⵠΔΔⵠᐃⲆ: "img/night-hand-skin122.png",
        ΔᐃΔⵠⵠΔᐃ: "img/day-hand-skin124.png",
        ⵠⲆⲆᐃΔΔᐃ: "img/night-hand-skin124.png",
        ⵠᐃᐃⲆⲆᐃⲆ: "img/day-hand-skin125.png",
        ΔⵠΔⵠᐃΔΔ: "img/night-hand-skin125.png",
        ⵠΔᐃⲆᐃⵠⵠ: "img/day-hand-skin126.png",
        ⵠⲆΔⲆⲆΔⲆ: "img/night-hand-skin126.png",
        ⲆΔᐃᐃΔΔᐃ: "img/day-hand-skin127.png",
        ΔⵠⵠΔΔⲆⵠ: "img/night-hand-skin127.png",
        ᐃᐃⵠΔᐃⲆⵠ: "img/day-hand-skin128.png",
        ᐃᐃⵠΔᐃⵠⵠ: "img/night-hand-skin128.png",
        ⵠⵠᐃᐃⲆᐃⲆ: "img/day-hand-skin129.png",
        ⲆⵠⵠⲆⵠⵠⵠ: "img/night-hand-skin129.png",
        ΔᐃᐃⲆΔⲆⲆ: "img/day-hand-skin130.png",
        ⵠᐃⲆⲆⵠᐃᐃ: "img/night-hand-skin130.png",
        ⲆΔΔⵠⵠᐃⵠ: "img/day-hand-skin131.png",
        ᐃⲆⲆⵠⲆⵠΔ: "img/night-hand-skin131.png",
        ᐃΔΔⲆⲆⵠΔ: "img/day-hand-skin130.png",
        ⵠΔᐃⲆΔⲆΔ: "img/night-hand-skin130.png",
        ᐃΔᐃⵠⲆⲆΔ: "img/day-hand-skin133.png",
        ⵠᐃⵠᐃΔᐃⲆ: "img/night-hand-skin133.png",
        ⵠᐃⵠⵠΔᐃⵠ: "img/day-hand-skin134.png",
        ⵠⲆⲆΔⲆⲆⲆ: "img/night-hand-skin134.png",
        ⲆⲆΔⵠᐃΔⲆ: "img/day-hand-skin135.png",
        ⵠᐃΔᐃⲆⲆⵠ: "img/night-hand-skin135.png",
        ΔⵠᐃⵠΔΔⲆ: "img/day-hand-skin136.png",
        ⲆⲆᐃⲆᐃᐃᐃ: "img/night-hand-skin136.png",
        ᐃⲆⲆⲆΔⲆⵠ: "img/day-hand-skin137.png",
        ⲆᐃΔᐃⵠⵠⲆ: "img/night-hand-skin137.png",
        ⲆⵠⵠΔΔᐃᐃ: "img/day-hand-skin138.png",
        ⵠⵠⲆⲆⲆⲆⵠ: "img/night-hand-skin138.png",
        ⵠⵠᐃⵠΔⵠⵠ: "img/day-hand-skin139.png",
        ᐃⲆⲆⲆᐃⵠⵠ: "img/night-hand-skin139.png",
        Ⲇⵠᐃⵠᐃⵠⵠ: "img/day-hand-skin140.png",
        ⲆⲆΔⵠΔⲆᐃ: "img/night-hand-skin140.png",
        ᐃⲆΔⵠᐃⵠⵠ: "img/day-hand-skin141.png",
        ᐃΔᐃⲆᐃⵠΔ: "img/night-hand-skin141.png",
        ΔΔᐃⲆⵠⵠⲆ: "img/day-hand-skin142.png",
        ΔΔⲆⲆΔᐃᐃ: "img/night-hand-skin142.png",
        ᐃΔᐃΔᐃⲆⲆ: "img/day-hand-skin143.png",
        ΔᐃⵠⲆᐃⲆⵠ: "img/night-hand-skin143.png",
        ΔΔⲆΔᐃⵠᐃ: "img/day-hand-skin144.png",
        ⲆⲆᐃⵠⲆᐃᐃ: "img/night-hand-skin144.png",
        ⲆⲆΔᐃᐃΔΔ: "img/day-hand-skin145.png",
        ⵠⲆᐃⲆⵠⲆⵠ: "img/night-hand-skin145.png",
        ⵠΔΔΔΔⵠΔ: "img/day-hand-skin146.png",
        ⵠᐃΔᐃⵠᐃⵠ: "img/night-hand-skin146.png",
        ⵠΔΔΔⲆΔᐃ: "img/day-hand-skin147.png",
        ⵠᐃΔⲆΔⵠᐃ: "img/night-hand-skin147.png",
        ᐃᐃⲆᐃⵠᐃΔ: "img/day-hand-skin148.png",
        ⲆᐃⲆⲆⲆᐃⲆ: "img/night-hand-skin148.png",
        ⲆΔⵠⲆᐃᐃᐃ: "img/day-hand-skin149.png",
        ⲆⲆⵠΔⵠᐃⲆ: "img/night-hand-skin149.png",
        ΔΔΔᐃΔΔᐃ: "img/day-hand-skin150.png",
        ⲆΔⲆᐃΔⲆᐃ: "img/night-hand-skin150.png",
        ⵠΔⲆⵠᐃⲆⲆ: "img/day-hand-skin151.png",
        ⲆⵠⲆᐃΔⵠᐃ: "img/night-hand-skin151.png",
        ⲆΔⵠᐃᐃⲆΔ: "img/day-hand-skin152.png",
        ΔⲆΔⲆΔΔΔ: "img/night-hand-skin152.png",
        ⲆΔΔⲆΔᐃⵠ: "img/day-hand-skin153.png",
        ⲆⲆᐃⵠⵠⵠΔ: "img/night-hand-skin153.png",
        ⲆⵠΔⲆⵠⵠᐃ: "img/day-hand-skin154.png",
        ⲆⲆⲆᐃⵠⵠᐃ: "img/night-hand-skin154.png",
        ᐃⲆᐃᐃⲆⵠⲆ: "img/day-hand-skin155.png",
        ᐃⵠΔᐃⲆⵠⲆ: "img/night-hand-skin155.png",
        Δᐃⵠⵠⵠᐃᐃ: "img/day-hand-skin156.png",
        ΔΔΔⲆⲆᐃᐃ: "img/night-hand-skin156.png",
        ᐃⲆⵠΔⲆⵠⲆ: "img/day-hand-skin157.png",
        ⵠⵠⲆⵠΔᐃᐃ: "img/night-hand-skin157.png",
        ⲆⲆⵠΔΔⲆⵠ: "img/day-hand-skin158.png",
        ΔᐃⵠΔΔΔⲆ: "img/night-hand-skin158.png",
        ΔᐃⲆⵠΔⲆⲆ: "img/day-hand-skin159.png",
        ᐃⲆᐃⵠΔⵠᐃ: "img/night-hand-skin159.png",
        ΔⵠⵠΔΔⵠΔ: "img/day-hand-skin160.png",
        ⵠΔΔᐃⵠΔᐃ: "img/night-hand-skin160.png",
        ᐃᐃΔⲆᐃⲆΔ: "img/day-hand-skin161.png",
        ᐃⵠⵠΔΔⵠⲆ: "img/night-hand-skin161.png",
        ᐃΔᐃᐃⵠⲆᐃ: "img/day-hand-skin162.png",
        ⵠᐃᐃΔⲆΔⵠ: "img/night-hand-skin162.png",
        ⲆΔΔΔⵠⲆᐃ: "img/day-hand-skin163.png",
        ΔΔᐃΔΔΔΔ: "img/night-hand-skin163.png",
        ΔⵠΔⵠΔΔⵠ: "img/day-hand-skin164.png",
        ΔⲆᐃᐃᐃⵠⲆ: "img/night-hand-skin164.png",
        ⵠΔᐃΔⲆΔΔ: "img/day-hand-skin165.png",
        ⵠᐃⲆᐃⲆⵠⲆ: "img/night-hand-skin165.png",
        ⵠⵠᐃⲆΔⲆⵠ: "img/day-hand-skin166.png",
        ⲆⵠΔΔⲆⲆΔ: "img/night-hand-skin166.png",
        ᐃⲆⵠᐃΔⲆΔ: "img/day-hand-skin167.png",
        ᐃⵠᐃⲆⲆⵠⵠ: "img/night-hand-skin167.png",
        ⲆΔΔⲆⲆΔΔ: "img/day-hand-skin168.png",
        ⵠⲆⲆᐃΔᐃᐃ: "img/night-hand-skin168.png",
        ⲆᐃΔΔΔΔⲆ: "img/day-hand-skin169.png",
        ⵠᐃⲆⲆΔⵠⵠ: "img/night-hand-skin169.png",
        ⵠΔᐃΔΔⵠⵠ: "img/day-hand-skin170.png",
        ⵠᐃΔΔᐃΔΔ: "img/night-hand-skin170.png",
        Ⲇᐃᐃᐃᐃⵠⵠ: "img/day-hand-skin171.png",
        ⲆⵠΔⵠΔⵠᐃ: "img/night-hand-skin171.png",
        ᐃΔⵠΔⲆΔⲆ: "img/day-hand-skin172.png",
        ΔᐃⵠᐃΔᐃΔ: "img/night-hand-skin172.png",
        ᐃⵠⵠⲆⲆᐃᐃ: "img/day-hand-skin173.png",
        ⲆΔᐃⵠΔᐃΔ: "img/night-hand-skin173.png",
        ΔᐃⵠⵠⲆⲆⵠ: "img/day-hand-skin174.png",
        ΔⲆᐃΔⵠⲆⵠ: "img/night-hand-skin174.png",
        ΔⵠⵠΔⵠⲆⵠ: "img/day-hand-skin175.png",
        ⵠΔⵠⲆⵠⲆᐃ: "img/night-hand-skin175.png",
        ⵠⲆᐃᐃⲆᐃᐃ: "img/day-hand-skin176.png",
        ΔΔⵠⲆⵠᐃⲆ: "img/night-hand-skin176.png",
        ⵠᐃΔⲆᐃⲆⲆ: "img/day-hand-skin177.png",
        ⵠΔᐃΔⲆⲆⲆ: "img/night-hand-skin177.png",
        ⵠΔⲆΔⲆⲆⵠ: "img/day-hand-skin178.png",
        ⵠⵠᐃΔⵠΔⵠ: "img/night-hand-skin178.png",
        ΔΔⲆΔⲆᐃⲆ: "img/day-hand-skin179.png",
        ᐃΔᐃⵠᐃᐃΔ: "img/night-hand-skin179.png",
        ⵠⲆᐃⵠⲆⲆⲆ: "img/day-hand-skin180.png",
        ⵠⲆΔΔⵠⵠᐃ: "img/night-hand-skin180.png",
        ⲆⵠᐃⵠⵠⵠΔ: "img/day-hand-skin181.png",
        ⵠⲆⵠΔᐃⲆΔ: "img/night-hand-skin181.png",
        ⵠΔᐃΔⵠⵠΔ: "img/day-hand-skin182.png",
        ⲆⲆΔΔᐃΔⵠ: "img/night-hand-skin182.png",
        ᐃᐃᐃᐃⲆᐃᐃ: "img/day-hand-skin183.png",
        ΔⲆᐃⵠⵠΔⵠ: "img/night-hand-skin183.png",
        ⵠᐃΔΔᐃᐃᐃ: "img/day-hand-skin184.png",
        ⲆⲆΔⲆⲆⵠⵠ: "img/night-hand-skin184.png",
        ⲆᐃⵠᐃᐃΔᐃ: "img/day-hand-skin185.png",
        ⵠⲆᐃᐃΔⲆΔ: "img/night-hand-skin185.png",
        ⵠᐃᐃᐃⲆᐃΔ: "img/day-hand-skin186.png",
        ᐃⵠᐃⵠⵠⵠⲆ: "img/night-hand-skin186.png",
        ⲆΔⵠⵠΔⲆⲆ: "img/day-hand-skin187.png",
        ΔⲆᐃⵠⲆᐃⵠ: "img/night-hand-skin187.png",
        ⲆΔⲆΔⵠΔΔ: "img/day-hand-skin188.png",
        ᐃᐃⵠⲆΔⵠⲆ: "img/night-hand-skin188.png",
        ⲆᐃⲆᐃΔⵠⵠ: "img/day-hand-skin189.png",
        ⲆⵠⲆⵠᐃⲆᐃ: "img/night-hand-skin189.png",
        ⲆⵠΔᐃⵠΔⲆ: "img/day-hand-skin190.png",
        ΔⲆΔⲆᐃΔᐃ: "img/night-hand-skin190.png",
        ⵠⵠᐃΔⲆΔΔ: "img/day-hand-skin191.png",
        ΔΔⵠⲆⲆΔⵠ: "img/night-hand-skin191.png",
        ⵠⲆⲆᐃⲆΔΔ: "img/day-hand-skin192.png",
        ⲆΔΔⵠΔⵠⲆ: "img/night-hand-skin192.png",
        ΔΔⲆⵠⵠΔᐃ: "img/day-hand-skin193.png",
        ΔⲆΔⵠⲆΔⲆ: "img/night-hand-skin193.png",
        ⲆΔⲆΔΔⵠⲆ: "img/day-hand-skin194.png",
        ΔⲆⲆⲆⲆΔⲆ: "img/night-hand-skin194.png",
        ᐃⲆⵠᐃⲆⵠⲆ: "img/day-hand-skin195.png",
        ⵠΔΔⲆⵠⲆⲆ: "img/night-hand-skin195.png",
        ΔΔⵠΔⲆⲆⲆ: "img/day-hand-skin196.png",
        ⵠΔⲆᐃᐃᐃⲆ: "img/night-hand-skin196.png",
        ΔⲆΔⵠᐃⲆΔ: "img/day-hand-skin197.png",
        ᐃⲆΔⵠΔᐃᐃ: "img/night-hand-skin197.png",
        ΔⲆⵠⲆᐃⵠⲆ: "img/day-hand-skin198.png",
        ᐃᐃⵠΔⵠᐃⵠ: "img/night-hand-skin198.png",
        ΔᐃⲆΔΔⲆΔ: "img/day-hand-skin199.png",
        ᐃᐃᐃᐃᐃⲆᐃ: "img/night-hand-skin199.png",
        ᐃⲆΔᐃⲆⵠⵠ: "img/day-hand-skin200.png",
        ᐃⲆⲆⲆΔΔⵠ: "img/night-hand-skin200.png",
        ⵠⲆΔᐃⲆᐃᐃ: "img/day-hand-skin201.png",
        ΔΔΔΔΔⲆΔ: "img/night-hand-skin201.png",
        ⵠⲆⵠⲆΔΔⲆ: "img/day-hand-skin202.png",
        ΔⵠΔΔᐃⲆΔ: "img/night-hand-skin202.png",
        ⵠᐃΔⲆⲆᐃⲆ: "img/day-hand-skin203.png",
        ᐃⵠΔᐃⵠⵠⵠ: "img/night-hand-skin203.png",
        ⲆⵠⲆᐃⵠΔᐃ: "img/day-hand-skin204.png",
        ΔⲆᐃⵠΔⵠⲆ: "img/night-hand-skin204.png",
        ⵠⵠᐃⵠⲆⲆⵠ: "img/day-hand-skin205.png",
        ⵠⵠΔΔⵠᐃΔ: "img/night-hand-skin205.png",
        ᐃᐃⵠΔⲆⵠᐃ: "img/day-hand-skin206.png",
        ⵠΔⲆΔⲆΔⲆ: "img/night-hand-skin206.png",
        ΔⵠΔΔⵠΔᐃ: "img/day-hand-skin207.png",
        ⵠⲆΔⵠⲆᐃⲆ: "img/night-hand-skin207.png",
        ᐃⲆⲆⲆⲆⲆⵠ: "img/day-hand-skin208.png",
        ⵠⵠᐃΔⵠⲆΔ: "img/night-hand-skin208.png",
        ΔⲆᐃⲆᐃΔΔ: "img/day-hand-skin209.png",
        ⲆᐃᐃⲆⵠⲆⵠ: "img/night-hand-skin209.png",
        ΔⲆⲆᐃΔᐃⵠ: "img/day-hand-skin210.png",
        ᐃⵠΔⵠⲆⵠᐃ: "img/night-hand-skin210.png",
        ⵠᐃᐃⵠΔᐃⲆ: "img/day-hand-skin211.png",
        ⲆᐃΔᐃᐃᐃⵠ: "img/night-hand-skin211.png",
        ᐃΔⵠᐃⲆⵠⵠ: "img/day-hand-skin212.png",
        Δⵠⵠⵠⵠᐃᐃ: "img/night-hand-skin212.png",
        ⵠᐃΔΔᐃⲆΔ: "img/day-bag-star0.png",
        ΔᐃⵠⲆⵠⲆⲆ: "img/night-bag-star0.png",
        ᐃⵠᐃᐃᐃΔᐃ: "img/day-bag0.png",
        ΔΔⲆΔⲆᐃᐃ: "img/night-bag0.png",
        ⲆᐃⵠⲆⵠⲆⲆ: "img/day-bag1.png",
        ΔᐃΔΔΔΔΔ: "img/night-bag1.png",
        ΔⲆⲆⵠⲆⵠⵠ: "img/day-bag2.png",
        ᐃⵠᐃΔΔⲆΔ: "img/night-bag2.png",
        ᐃⵠⵠⵠΔΔᐃ: "img/day-bag3.png",
        ⵠᐃⵠᐃⵠⵠΔ: "img/night-bag3.png",
        ΔⵠⵠᐃⵠⵠΔ: "img/day-bag4.png",
        ᐃⵠⵠⵠΔⵠΔ: "img/night-bag4.png",
        ⵠᐃⲆᐃⵠⵠⵠ: "img/day-bag5.png",
        ⲆΔΔⵠᐃⵠᐃ: "img/night-bag5.png",
        ΔᐃⵠⲆᐃᐃⵠ: "img/day-bag6.png",
        ⵠᐃⵠⵠΔᐃⲆ: "img/night-bag6.png",
        ᐃΔᐃⲆᐃᐃⵠ: "img/day-bag7.png",
        ᐃⵠΔⲆⲆⵠᐃ: "img/night-bag7.png",
        ΔⲆᐃⵠᐃΔΔ: "img/day-bag8.png",
        ᐃΔⵠΔⵠⵠᐃ: "img/night-bag8.png",
        ᐃⲆⲆΔⲆⵠΔ: "img/day-bag9.png",
        ᐃΔΔⵠΔⲆΔ: "img/night-bag9.png",
        ΔΔᐃⵠⲆⲆⵠ: "img/day-bag10.png",
        ⵠⵠᐃⲆΔⵠᐃ: "img/night-bag10.png",
        ᐃᐃΔΔⲆᐃⲆ: "img/day-bag11.png",
        ΔⵠⵠΔⵠⵠᐃ: "img/night-bag11.png",
        ⵠΔⲆⲆᐃΔΔ: "img/day-bag13.png",
        ⵠⲆⵠⵠⵠᐃⲆ: "img/night-bag13.png",
        ⲆΔⲆⲆⵠᐃᐃ: "img/day-bag14.png",
        ΔᐃΔⵠΔⲆⵠ: "img/night-bag14.png",
        ΔⲆⲆΔⵠΔⲆ: "img/day-bag16.png",
        ΔⵠⲆᐃᐃⲆᐃ: "img/night-bag16.png",
        ᐃΔⵠΔᐃⵠⵠ: "img/day-bag17.png",
        ⲆΔⵠΔΔⲆᐃ: "img/night-bag17.png",
        ⲆⵠⵠⲆⲆᐃΔ: "img/day-bag18.png",
        ᐃⲆᐃⲆΔᐃⵠ: "img/night-bag18.png",
        ΔᐃⵠⲆⵠᐃᐃ: "img/day-bag19.png",
        ᐃΔⵠᐃΔⲆΔ: "img/night-bag19.png",
        ΔⵠⲆΔᐃΔᐃ: "img/day-bag20.png",
        ᐃΔⵠⲆⲆⲆΔ: "img/night-bag20.png",
        ΔⵠⲆⲆΔᐃⵠ: "img/day-bag21.png",
        ᐃⵠⵠⲆᐃⵠΔ: "img/night-bag21.png",
        ⵠΔⵠⲆᐃᐃΔ: "img/day-bag22.png",
        ⲆᐃᐃⲆⵠΔⲆ: "img/night-bag22.png",
        ΔⲆΔⲆⵠᐃⵠ: "img/day-bag23.png",
        ΔⵠⵠᐃΔΔΔ: "img/night-bag23.png",
        ᐃᐃΔᐃⵠⲆᐃ: "img/day-bag24.png",
        ⵠⲆΔⵠᐃⲆᐃ: "img/night-bag24.png",
        ⵠⵠᐃΔⵠⲆⵠ: "img/day-bag25.png",
        ⵠⲆΔΔᐃⲆᐃ: "img/night-bag25.png",
        ΔΔΔᐃⵠᐃΔ: "img/day-bag26.png",
        ⵠⵠⲆΔΔⵠⵠ: "img/night-bag26.png",
        ᐃΔΔⲆⵠΔᐃ: "img/day-bag27.png",
        ⲆᐃⲆᐃⵠᐃᐃ: "img/night-bag27.png",
        ᐃⵠⵠᐃΔᐃᐃ: "img/day-bag28.png",
        ⲆΔΔⲆⵠⵠΔ: "img/night-bag28.png",
        ΔΔΔⲆᐃᐃΔ: "img/day-bag29.png",
        ᐃᐃΔᐃⵠⵠᐃ: "img/night-bag29.png",
        ⲆᐃᐃΔⲆΔᐃ: "img/day-bag30.png",
        ⵠⲆⵠⵠⲆⲆᐃ: "img/night-bag30.png",
        ΔΔᐃᐃⵠΔⵠ: "img/day-bag31.png",
        ⵠⲆᐃᐃⲆⵠΔ: "img/night-bag31.png",
        ᐃⵠⵠᐃⲆΔᐃ: "img/day-bag32.png",
        ᐃᐃᐃⲆⲆᐃᐃ: "img/night-bag32.png",
        ᐃⵠⵠⲆΔⲆΔ: "img/day-bag33.png",
        ᐃΔⲆⲆΔᐃⵠ: "img/night-bag33.png",
        ⵠⵠⲆⲆᐃⲆᐃ: "img/day-bag34.png",
        ⲆⵠᐃΔⲆⵠΔ: "img/night-bag34.png",
        ᐃᐃΔⲆΔᐃΔ: "img/day-bag35.png",
        ΔⵠΔᐃΔⲆⲆ: "img/night-bag35.png",
        ΔⵠΔΔⵠⲆᐃ: "img/day-bag36.png",
        ᐃⲆⵠⲆⵠⲆⲆ: "img/night-bag36.png",
        ⲆⲆⵠᐃΔΔⵠ: "img/day-bag37.png",
        ᐃΔΔΔΔⵠⵠ: "img/night-bag37.png",
        ΔⲆⲆΔⵠⲆⵠ: "img/day-bag38.png",
        ᐃᐃᐃᐃⲆᐃⲆ: "img/night-bag38.png",
        ᐃΔⲆⵠⲆⵠΔ: "img/day-bag39.png",
        ᐃᐃⵠⲆⲆᐃⲆ: "img/night-bag39.png",
        ΔΔⲆⵠΔΔⵠ: "img/day-bag40.png",
        ᐃᐃΔᐃⵠⵠⵠ: "img/night-bag40.png",
        ⵠΔᐃⵠⲆΔᐃ: "img/day-bag41.png",
        ᐃⲆⲆΔⲆⵠⵠ: "img/night-bag41.png",
        Δᐃⵠⵠᐃⵠᐃ: "img/day-bag42.png",
        ᐃⵠⲆⵠⲆⵠᐃ: "img/night-bag42.png",
        ⵠⵠΔⲆᐃⵠᐃ: "img/day-bag43.png",
        ⲆⲆᐃⲆⲆⵠⵠ: "img/night-bag43.png",
        ⵠΔⲆⲆᐃⲆⲆ: "img/day-bag44.png",
        ΔⵠⵠⵠᐃⲆᐃ: "img/night-bag44.png",
        ⵠⵠⲆᐃⲆⲆⲆ: "img/day-bag45.png",
        ⵠⵠⵠⲆΔΔⲆ: "img/night-bag45.png",
        ΔᐃΔᐃⵠΔⵠ: "img/day-bag46.png",
        ΔⵠⲆᐃⵠⲆΔ: "img/night-bag46.png",
        ᐃⲆⵠΔΔⲆΔ: "img/day-bag47.png",
        ᐃΔⲆΔⲆᐃⵠ: "img/night-bag47.png",
        ⲆΔⲆⲆⵠᐃⵠ: "img/day-bag48.png",
        ⲆΔⲆⵠⲆΔⵠ: "img/night-bag48.png",
        ⵠΔⲆⲆⵠΔⵠ: "img/day-bag49.png",
        ᐃΔΔⵠⵠΔⲆ: "img/night-bag49.png",
        ΔⲆⵠᐃⲆᐃⵠ: "img/day-bag50.png",
        ΔⲆΔⲆΔᐃᐃ: "img/night-bag50.png",
        ⲆⲆᐃΔᐃΔᐃ: "img/day-bag51.png",
        ⲆΔⵠⵠᐃⵠⵠ: "img/night-bag51.png",
        ⵠΔΔΔⵠᐃΔ: "img/day-bag52.png",
        ΔⲆⲆⲆᐃⲆⵠ: "img/night-bag52.png",
        ⲆⵠΔᐃᐃⵠⲆ: "img/day-bag53.png",
        ΔΔⵠΔⵠⲆⵠ: "img/night-bag53.png",
        ΔⲆⵠⵠⲆΔᐃ: "img/day-bag54.png",
        ΔⲆⵠⲆⲆᐃⲆ: "img/night-bag54.png",
        ⵠΔⲆᐃⲆⵠⵠ: "img/day-bag55.png",
        ⵠⲆⲆᐃᐃΔΔ: "img/night-bag55.png",
        ΔⵠⲆᐃΔᐃΔ: "img/day-bag56.png",
        ⲆⲆᐃΔⵠⵠᐃ: "img/night-bag56.png",
        ᐃᐃΔᐃⲆᐃΔ: "img/day-bag57.png",
        ⵠⲆΔᐃᐃᐃⵠ: "img/night-bag57.png",
        ⵠᐃΔᐃᐃⲆⵠ: "img/day-bag58.png",
        ᐃΔⲆⵠΔⵠⵠ: "img/night-bag58.png",
        ⲆᐃΔᐃΔⵠΔ: "img/day-bag59.png",
        ⲆⵠⵠⲆⵠᐃᐃ: "img/night-bag59.png",
        ⲆᐃⲆⲆΔΔⲆ: "img/day-bag60.png",
        ᐃΔⲆΔⵠⵠⵠ: "img/night-bag60.png",
        ᐃΔΔⲆᐃⲆⲆ: "img/day-bag61.png",
        ᐃΔᐃᐃⵠΔΔ: "img/night-bag61.png",
        ⲆΔᐃΔⵠⵠⵠ: "img/day-bag62.png",
        ΔⲆⵠⵠᐃΔᐃ: "img/night-bag62.png",
        ⵠⵠⲆⲆΔⵠΔ: "img/day-bag63.png",
        ⵠⵠⵠΔⲆΔⵠ: "img/night-bag63.png",
        ΔΔⲆᐃⲆⵠᐃ: "img/day-bag64.png",
        ᐃᐃΔⵠⵠΔᐃ: "img/night-bag64.png",
        ᐃⵠⲆⵠΔⵠᐃ: "img/day-bag65.png",
        ⵠⲆⲆᐃᐃⲆΔ: "img/night-bag65.png",
        ⲆΔⵠⵠⲆⵠⵠ: "img/day-bag66.png",
        ΔⵠᐃᐃᐃᐃⲆ: "img/night-bag66.png",
        ΔᐃΔⲆΔΔⵠ: "img/day-bag67.png",
        ΔΔⵠΔΔΔⲆ: "img/night-bag67.png",
        ⲆΔΔⲆΔΔⲆ: "img/day-bag68.png",
        ⲆᐃᐃΔⵠΔⲆ: "img/night-bag68.png",
        ⲆᐃΔⲆΔᐃᐃ: "img/day-bag69.png",
        ΔᐃΔᐃᐃᐃΔ: "img/night-bag69.png",
        ⵠᐃⲆⲆᐃⲆⵠ: "img/day-bag70.png",
        ⲆⲆᐃΔⵠᐃⵠ: "img/night-bag70.png",
        ⵠᐃⵠᐃⵠᐃⵠ: "img/day-bag71.png",
        ⵠᐃΔⵠΔᐃᐃ: "img/night-bag71.png",
        ᐃⲆΔⵠΔᐃⲆ: "img/day-bag72.png",
        ⲆⵠⲆΔⵠΔⲆ: "img/night-bag72.png",
        ⵠⲆⵠⵠΔᐃⲆ: "img/day-bag73.png",
        ⲆⲆΔⵠᐃⵠΔ: "img/night-bag73.png",
        ᐃᐃᐃⲆⵠⵠⵠ: "img/day-bag74.png",
        ⲆⵠⵠᐃᐃΔⲆ: "img/night-bag74.png",
        ᐃⵠⵠᐃⲆΔⲆ: "img/day-bag75.png",
        ᐃᐃΔⵠΔΔΔ: "img/night-bag75.png",
        ⵠΔⵠⵠᐃᐃⲆ: "img/day-bag76.png",
        ⵠΔΔΔⵠᐃᐃ: "img/night-bag76.png",
        ᐃⵠⲆⲆΔⲆᐃ: "img/day-bag77.png",
        ΔⵠⵠⲆⵠᐃⵠ: "img/night-bag77.png",
        ΔΔⲆᐃᐃⵠΔ: "img/day-bag78.png",
        ᐃⲆⵠΔΔᐃΔ: "img/night-bag78.png",
        ⵠⵠᐃⲆⵠΔⵠ: "img/day-bag79.png",
        ⲆⵠΔΔⲆⵠΔ: "img/night-bag79.png",
        ᐃᐃΔᐃⲆⵠᐃ: "img/day-bag80.png",
        ⲆⲆⲆⲆⵠᐃⵠ: "img/night-bag80.png",
        ΔⲆᐃⵠᐃⲆΔ: "img/day-accessory0.png",
        ⲆΔΔⲆⲆⵠᐃ: "img/day-accessory0-pacques.png",
        ᐃᐃΔⵠⲆⵠᐃ: "img/night-accessory0-pacques.png",
        ⵠΔΔⲆⵠⲆⵠ: "img/day-accessory13.png",
        ΔᐃᐃΔⲆΔⲆ: "img/night-accessory13.png",
        ⵠⲆⲆᐃⲆⵠⵠ: "img/day-accessory14.png",
        ᐃⲆⲆᐃⲆⵠΔ: "img/night-accessory14.png",
        ᐃⲆⲆⲆᐃΔᐃ: "img/day-accessory15.png",
        ⲆΔᐃⵠΔΔⲆ: "img/night-accessory15.png",
        ᐃᐃⵠᐃΔᐃⵠ: "img/day-accessory16.png",
        ΔⲆᐃΔᐃⵠⲆ: "img/night-accessory16.png",
        ⵠⵠᐃΔⲆⲆΔ: "img/day-accessory17.png",
        ⵠⲆⲆᐃⲆΔᐃ: "img/day-accessory17.png",
        ⲆⲆⵠΔⲆⲆᐃ: "img/day-accessory19.png",
        ⵠΔⵠⲆᐃⵠΔ: "img/night-accessory19.png",
        ΔᐃΔᐃⲆⲆΔ: "img/day-accessory20.png",
        ΔⲆᐃⵠⲆᐃΔ: "img/night-accessory20.png",
        ᐃᐃᐃⵠᐃⵠⲆ: "img/day-accessory21.png",
        ΔⲆΔⲆⲆⲆᐃ: "img/night-accessory21.png",
        ⵠΔⵠⲆⵠⲆⵠ: "img/day-accessory22.png",
        ᐃⲆᐃΔΔⵠᐃ: "img/night-accessory22.png",
        ⵠᐃᐃⵠⵠᐃⵠ: "img/day-accessory23.png",
        ᐃⲆΔⲆΔⵠⲆ: "img/night-accessory23.png",
        ⲆΔΔᐃⲆⲆⲆ: "img/day-accessory24.png",
        ⵠⲆⲆⲆⵠⲆⲆ: "img/night-accessory24.png",
        ᐃⵠⵠᐃΔΔⵠ: "img/day-accessory25.png",
        ΔⵠⲆᐃᐃᐃᐃ: "img/night-accessory25.png",
        ⵠⲆⲆΔᐃᐃᐃ: "img/day-accessory26.png",
        ᐃⵠⲆⵠᐃΔⲆ: "img/night-accessory26.png",
        ᐃᐃⵠⲆⲆⵠⲆ: "img/day-accessory27.png",
        ⲆⵠⵠΔⲆᐃⲆ: "img/night-accessory27.png",
        ⵠΔⲆⵠⵠⲆⵠ: "img/day-accessory18.png",
        ᐃᐃᐃⲆᐃΔⲆ: "img/night-accessory18.png",
        ΔᐃᐃΔⵠᐃΔ: "img/day-accessory29.png",
        ᐃⲆⲆᐃⵠⵠⲆ: "img/night-accessory29.png",
        ΔⲆΔⲆᐃᐃᐃ: "img/day-accessory30.png",
        ⲆⵠᐃᐃᐃⵠΔ: "img/night-accessory30.png",
        ΔⵠⵠⵠΔᐃⲆ: "img/day-accessory31.png",
        ⵠⲆⲆⵠᐃΔᐃ: "img/night-accessory31.png",
        ⲆΔΔⲆⲆΔᐃ: "img/day-accessory32.png",
        ⲆΔⵠⲆⲆⲆⲆ: "img/night-accessory32.png",
        ⵠΔⵠⵠⵠΔΔ: "img/day-accessory33.png",
        ΔⵠⵠΔᐃⵠᐃ: "img/night-accessory33.png",
        ⵠⲆⲆᐃⵠⲆⲆ: "img/day-accessory34.png",
        ⵠᐃᐃᐃΔⲆⵠ: "img/night-accessory34.png",
        ⵠᐃᐃΔⵠⵠⵠ: "img/day-accessory35.png",
        ᐃⲆᐃⲆⲆⵠᐃ: "img/night-accessory35.png",
        ⲆΔⵠΔⵠⲆᐃ: "img/day-accessory28.png",
        ⵠᐃᐃᐃⲆᐃⵠ: "img/night-accessory28.png",
        ⵠΔⲆⲆⲆᐃΔ: "img/day-accessory36.png",
        ᐃⵠᐃΔᐃᐃΔ: "img/night-accessory36.png",
        ΔᐃᐃⵠΔᐃΔ: "img/day-accessory37.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/night-accessory37.png",
        ⵠΔᐃΔᐃᐃⵠ: "img/day-accessory39.png",
        ⵠΔᐃⵠⲆⲆⵠ: "img/night-accessory39.png",
        ⲆⲆᐃΔⲆΔΔ: "img/day-accessory40.png",
        ⵠⵠΔΔⵠⵠⵠ: "img/night-accessory40.png",
        ⵠΔⲆⵠΔⲆΔ: "img/day-accessory41.png",
        Δⵠⵠᐃᐃᐃᐃ: "img/night-accessory41.png",
        ᐃᐃᐃᐃⲆⵠΔ: "img/day-accessory42.png",
        ⵠᐃΔᐃⲆᐃⲆ: "img/night-accessory42.png",
        ⵠⲆΔⲆΔⲆⲆ: "img/day-accessory43.png",
        ΔᐃⵠⲆᐃᐃΔ: "img/night-accessory43.png",
        ⵠᐃΔΔⵠⵠⲆ: "img/day-accessory44.png",
        ⲆⲆΔⲆⵠΔⵠ: "img/night-accessory44.png",
        ΔᐃᐃᐃᐃΔⲆ: "img/day-accessory38.png",
        ΔᐃΔΔᐃⲆᐃ: "img/night-accessory38.png",
        ΔⵠⵠⲆΔⲆΔ: "img/day-accessory46.png",
        ⵠⲆᐃⵠΔⲆⵠ: "img/night-accessory46.png",
        ⲆⵠⵠⲆΔᐃⲆ: "img/day-accessory47.png",
        ΔⲆᐃΔᐃᐃⲆ: "img/night-accessory47.png",
        ⵠⲆⵠᐃⲆⲆᐃ: "img/day-accessory48.png",
        ⵠᐃⲆⲆⵠⲆΔ: "img/night-accessory48.png",
        ᐃⵠⵠΔᐃᐃⵠ: "img/day-accessory49.png",
        ΔⵠᐃΔⲆⲆⵠ: "img/night-accessory49.png",
        ΔΔᐃⲆⵠᐃⵠ: "img/day-accessory45.png",
        ⲆⵠⵠᐃΔΔΔ: "img/night-accessory45.png",
        ᐃⲆⲆⵠᐃⵠᐃ: "img/day-accessory50.png",
        ⲆᐃⵠⲆⵠⵠΔ: "img/night-accessory50.png",
        ᐃⲆⵠᐃᐃⲆᐃ: "img/day-accessory51.png",
        ΔΔⲆⵠⲆⵠΔ: "img/night-accessory51.png",
        ⵠⵠΔⲆⵠᐃΔ: "img/day-accessory52.png",
        ΔⵠⲆᐃᐃΔⵠ: "img/night-accessory52.png",
        ⵠᐃΔⲆⵠᐃⵠ: "img/day-accessory53.png",
        ⲆⲆⵠⵠΔᐃⵠ: "img/night-accessory53.png",
        ⵠᐃⵠⲆΔⲆⲆ: "img/day-accessory54.png",
        ᐃΔⵠⵠⵠⲆⵠ: "img/night-accessory54.png",
        ᐃⲆⵠᐃᐃΔΔ: "img/day-accessory55.png",
        ΔⵠⵠᐃΔᐃⵠ: "img/night-accessory55.png",
        ᐃᐃⵠⵠⵠⵠⵠ: "img/day-accessory56.png",
        ΔΔᐃⲆΔᐃΔ: "img/night-accessory56.png",
        ᐃⵠⲆΔᐃⵠΔ: "img/day-accessory57.png",
        ΔⵠⲆᐃᐃⲆⲆ: "img/night-accessory57.png",
        ᐃⲆⵠⲆⵠⲆⵠ: "img/day-accessory58.png",
        ΔΔⲆⲆᐃⵠΔ: "img/night-accessory58.png",
        ᐃΔᐃⲆⵠΔᐃ: "img/day-accessory59.png",
        ⵠᐃᐃΔⲆᐃⲆ: "img/night-accessory59.png",
        ⵠᐃᐃΔⵠᐃⲆ: "img/day-accessory60.png",
        ⵠᐃⵠᐃⵠⵠᐃ: "img/night-accessory60.png",
        ⲆⵠΔᐃⲆΔⲆ: "img/day-accessory61.png",
        ΔⲆⵠᐃⲆΔⵠ: "img/night-accessory61.png",
        ⵠᐃⲆⲆΔΔⵠ: "img/day-accessory62.png",
        ⲆᐃᐃⲆⲆΔᐃ: "img/night-accessory62.png",
        ΔΔᐃᐃᐃⲆᐃ: "img/day-accessory63.png",
        ⵠⵠΔΔᐃⲆⲆ: "img/night-accessory63.png",
        ΔΔⲆⵠⲆⲆᐃ: "img/day-accessory64.png",
        ΔΔⵠΔⲆᐃⵠ: "img/night-accessory64.png",
        ΔⵠᐃⲆᐃᐃΔ: "img/day-accessory65.png",
        ᐃⵠⲆΔⲆⵠΔ: "img/night-accessory65.png",
        Δⵠᐃⵠⵠᐃᐃ: "img/day-accessory66.png",
        ⲆⵠⵠΔⲆΔⲆ: "img/night-accessory66.png",
        ⲆⲆⵠΔⵠⲆⲆ: "img/day-accessory67.png",
        ᐃⲆⲆⵠⵠΔᐃ: "img/night-accessory67.png",
        ΔⲆⵠΔᐃⵠⲆ: "img/day-accessory68.png",
        ⵠⵠⵠΔᐃΔᐃ: "img/night-accessory68.png",
        ⵠΔᐃⲆΔⲆⲆ: "img/day-accessory69.png",
        ⲆⲆⲆⲆᐃⲆⲆ: "img/night-accessory69.png",
        ᐃⲆᐃⲆⲆΔⵠ: "img/day-accessory70.png",
        ⵠⲆⲆΔᐃⲆⵠ: "img/night-accessory70.png",
        ᐃⵠᐃᐃᐃⵠᐃ: "img/day-accessory71.png",
        ⵠΔⵠⲆΔᐃⵠ: "img/night-accessory71.png",
        Ⲇᐃⵠⵠᐃᐃᐃ: "img/day-accessory72.png",
        ΔᐃⵠᐃⲆⵠⵠ: "img/night-accessory72.png",
        ⵠⲆΔⲆⲆΔⵠ: "img/day-accessory73.png",
        ᐃⲆⵠⵠᐃᐃᐃ: "img/night-accessory73.png",
        ⵠᐃⵠⵠᐃΔⵠ: "img/day-accessory74.png",
        ᐃⵠᐃⵠᐃⲆᐃ: "img/night-accessory74.png",
        ⵠΔΔⵠΔⲆⵠ: "img/day-accessory75.png",
        ᐃᐃᐃⵠᐃᐃⲆ: "img/night-accessory75.png",
        ⲆⲆΔᐃᐃⵠᐃ: "img/day-accessory76.png",
        ᐃⲆⲆᐃΔΔⵠ: "img/night-accessory76.png",
        ⲆⲆᐃᐃΔⵠΔ: "img/day-accessory77.png",
        ᐃᐃᐃⵠᐃⵠⵠ: "img/night-accessory77.png",
        ΔⵠⵠᐃᐃΔⵠ: "img/day-accessory78.png",
        ⲆᐃⲆⲆⲆⲆΔ: "img/night-accessory78.png",
        ⵠΔᐃᐃΔⵠⲆ: "img/day-accessory79.png",
        ⵠᐃᐃᐃΔΔᐃ: "img/night-accessory79.png",
        ⵠⲆΔⵠΔᐃᐃ: "img/day-accessory80.png",
        ΔᐃΔΔΔⵠᐃ: "img/night-accessory80.png",
        ⵠΔᐃⲆⵠⲆΔ: "img/day-accessory81.png",
        ⲆⵠᐃΔⲆΔⵠ: "img/night-accessory81.png",
        ΔΔⲆⲆᐃᐃᐃ: "img/day-accessory83.png",
        ᐃⵠΔᐃⲆᐃΔ: "img/night-accessory83.png",
        ⲆⲆᐃΔΔⲆΔ: "img/day-accessory84.png",
        ⵠⵠⲆᐃᐃΔⲆ: "img/night-accessory84.png",
        ⵠᐃΔⲆᐃⵠⵠ: "img/day-accessory85.png",
        ⵠᐃⵠⲆⵠⵠΔ: "img/night-accessory85.png",
        ΔⲆⲆᐃΔⲆΔ: "img/day-accessory86.png",
        ⵠⲆⵠΔⵠⲆⲆ: "img/night-accessory86.png",
        ΔΔⲆⲆΔⲆⲆ: "img/day-accessory87.png",
        ⲆⵠΔΔΔᐃΔ: "img/night-accessory87.png",
        ⲆⲆⲆΔⵠᐃΔ: "img/day-accessory88.png",
        ᐃΔⲆⵠᐃᐃⲆ: "img/night-accessory88.png",
        ⵠⵠᐃΔΔⵠΔ: "img/day-accessory89.png",
        ⵠⵠⵠΔⵠΔΔ: "img/night-accessory89.png",
        ᐃⵠΔⲆᐃᐃⵠ: "img/day-accessory90.png",
        ΔⲆᐃⲆᐃΔⲆ: "img/night-accessory90.png",
        ᐃⵠⲆΔⲆᐃᐃ: "img/day-accessory91.png",
        ⲆⲆⲆᐃⵠⲆⲆ: "img/night-accessory91.png",
        ⲆⲆᐃⲆᐃⵠΔ: "img/day-accessory92.png",
        ⵠᐃⲆΔⲆᐃΔ: "img/night-accessory92.png",
        ⵠᐃᐃᐃΔΔΔ: "img/day-accessory93.png",
        ΔⲆⵠΔΔⲆᐃ: "img/night-accessory93.png",
        ⵠⵠⲆᐃΔᐃⵠ: "img/day-accessory94.png",
        ΔⲆᐃᐃᐃᐃⲆ: "img/night-accessory94.png",
        ⵠᐃΔᐃⲆΔΔ: "img/day-accessory95.png",
        ⵠᐃⵠᐃⵠⵠⵠ: "img/night-accessory95.png",
        ᐃΔⲆᐃᐃⲆΔ: "img/day-accessory96.png",
        ᐃΔⵠΔᐃᐃⵠ: "img/night-accessory96.png",
        ⲆⲆⲆΔΔΔᐃ: "img/day-accessory97.png",
        ΔⵠⵠⵠΔⵠᐃ: "img/night-accessory97.png",
        ΔΔⵠⲆᐃⵠᐃ: "img/day-accessory98.png",
        ᐃΔΔⲆΔᐃⵠ: "img/night-accessory98.png",
        ᐃΔᐃᐃᐃᐃᐃ: "img/day-accessory99.png",
        ΔⲆⵠⲆΔΔⲆ: "img/night-accessory99.png",
        ΔⲆᐃᐃΔΔᐃ: "img/day-accessory100.png",
        ⵠΔⵠⲆΔⲆⲆ: "img/night-accessory100.png",
        ⲆⲆᐃΔᐃᐃᐃ: "img/day-accessory101.png",
        ΔⲆΔΔⲆΔᐃ: "img/night-accessory101.png",
        ᐃⵠΔⲆⲆⵠⲆ: "img/day-accessory102.png",
        ᐃⵠⲆⲆΔᐃᐃ: "img/night-accessory102.png",
        ᐃΔΔΔⲆΔᐃ: "img/day-accessory103.png",
        ᐃⲆΔᐃⵠᐃⵠ: "img/night-accessory103.png",
        ⲆⲆΔΔⲆⵠⵠ: "img/day-accessory104.png",
        ⲆⵠⲆⵠᐃⵠⲆ: "img/night-accessory104.png",
        ⵠⵠᐃⵠⲆΔⲆ: "img/day-accessory105.png",
        ᐃᐃⵠᐃⲆΔⲆ: "img/night-accessory105.png",
        ΔᐃⵠⲆⲆΔΔᐃⵠ: "img/day-accessory106.png",
        ⲆⲆⲆⵠⵠⲆⲆⵠⵠ: "img/night-accessory106.png",
        ⲆᐃΔΔⲆΔΔᐃΔ: "img/day-accessory107.png",
        ⵠⵠᐃᐃⵠⲆⲆΔΔ: "img/night-accessory107.png",
        ᐃᐃΔᐃⵠΔⵠ: "img/day-accessory82.png",
        ᐃᐃⵠΔΔΔⲆ: "img/night-accessory82.png",
        ᐃᐃⲆⵠᐃΔΔ: "img/day-book0.png",
        ⵠⲆᐃΔΔⵠⵠ: "img/night-book0.png",
        ⲆᐃⲆⵠᐃᐃⲆ: "img/day-book1.png",
        ⵠⲆᐃⲆⵠᐃⲆ: "img/night-book1.png",
        ⲆΔᐃⵠᐃⵠᐃ: "img/day-book2.png",
        ΔⲆΔᐃⲆⵠᐃ: "img/night-book2.png",
        ⵠⵠΔⵠΔΔⲆ: "img/day-book3.png",
        ᐃᐃⲆᐃⲆⵠⲆ: "img/night-book3.png",
        ᐃⵠⲆΔⵠᐃᐃ: "img/day-book4.png",
        ᐃᐃⵠΔᐃᐃᐃ: "img/night-book4.png",
        ᐃⲆⲆΔⵠᐃᐃ: "img/day-book5.png",
        ᐃᐃΔΔΔⵠΔ: "img/night-book5.png",
        ⵠΔⵠⲆᐃⲆⲆ: "img/day-book6.png",
        ᐃⵠᐃᐃⵠⵠᐃ: "img/night-book6.png",
        ᐃΔΔᐃΔⵠΔ: "img/day-book7.png",
        ΔⲆΔⵠΔΔⲆ: "img/night-book7.png",
        ᐃⲆⵠⵠΔⵠᐃ: "img/day-book8.png",
        ⲆΔΔΔⵠᐃⵠ: "img/night-book8.png",
        ΔⵠΔᐃⲆⲆΔ: "img/day-book9.png",
        ᐃⵠⲆᐃΔΔᐃ: "img/night-book9.png",
        ⵠⵠΔⲆⵠᐃⵠ: "img/day-book10.png",
        ᐃᐃᐃⲆᐃᐃⲆ: "img/night-book10.png",
        ⵠᐃⲆᐃⲆᐃⵠ: "img/day-book11.png",
        ΔⵠΔⵠΔⵠᐃ: "img/night-book11.png",
        ΔΔΔΔⵠⵠΔ: "img/day-book12.png",
        ⵠᐃΔⵠΔΔᐃ: "img/night-book12.png",
        ᐃΔⲆⵠΔⲆΔ: "img/day-book13.png",
        ⵠⲆᐃΔᐃΔⲆ: "img/night-book13.png",
        ⵠⵠᐃⲆⵠⵠᐃ: "img/day-book14.png",
        ΔⵠⲆⵠΔᐃⵠ: "img/night-book14.png",
        ⲆⲆⵠⲆⵠᐃⲆ: "img/day-book15.png",
        ᐃⲆΔΔᐃΔⲆ: "img/night-book15.png",
        ⲆⵠᐃΔⵠᐃΔ: "img/day-book16.png",
        ⵠⵠᐃᐃⵠᐃⲆ: "img/night-book16.png",
        ⲆᐃΔᐃⵠΔⲆ: "img/day-book17.png",
        ΔΔᐃⵠΔᐃⲆ: "img/night-book17.png",
        ᐃⲆᐃⲆⲆΔΔ: "img/day-book18.png",
        ⲆΔΔⲆᐃᐃⲆ: "img/night-book18.png",
        ⵠᐃΔⲆΔⵠⲆ: "img/day-book19.png",
        ⵠΔⵠⵠⲆΔᐃ: "img/night-book19.png",
        ⲆᐃⵠⲆⵠⲆⵠ: "img/day-book20.png",
        ⲆᐃⲆᐃᐃΔⲆ: "img/night-book20.png",
        ᐃⵠᐃᐃΔⲆⵠ: "img/day-book21.png",
        ⲆΔΔΔΔᐃⲆ: "img/night-book21.png",
        ᐃᐃⵠΔⵠⵠⲆ: "img/day-book22.png",
        ⲆᐃΔᐃΔⲆΔ: "img/night-book22.png",
        ᐃΔⵠⲆⲆᐃⲆ: "img/day-book23.png",
        ΔΔⵠⲆⵠⲆΔ: "img/night-book23.png",
        ⵠⲆⲆⵠⵠⲆᐃ: "img/day-book24.png",
        ᐃⵠΔᐃΔⵠⲆ: "img/night-book24.png",
        ᐃΔΔⲆᐃᐃΔ: "img/day-book25.png",
        ΔᐃⵠΔⵠⵠᐃ: "img/night-book25.png",
        ⲆⲆⵠⵠᐃΔΔ: "img/day-book26.png",
        ⵠⵠⵠΔΔᐃⵠ: "img/night-book26.png",
        ᐃΔⲆΔΔⵠⲆ: "img/day-book27.png",
        ΔⵠⵠᐃⲆⲆⵠ: "img/night-book27.png",
        ⲆⵠΔᐃΔⵠⲆ: "img/day-book28.png",
        ᐃⵠⵠⵠⲆᐃⲆ: "img/night-book28.png",
        ᐃⲆⵠᐃΔᐃᐃ: "img/day-book29.png",
        ᐃⲆⲆⲆΔΔⲆ: "img/night-book29.png",
        ᐃⲆΔⲆⵠΔⲆ: "img/day-book30.png",
        ⵠΔΔΔⵠᐃⲆ: "img/night-book30.png",
        ⵠⲆⲆⵠᐃᐃⵠ: "img/day-book31.png",
        ΔΔᐃΔΔⵠΔ: "img/night-book31.png",
        ᐃⵠⵠⲆⲆⲆᐃ: "img/day-book32.png",
        ⲆΔⲆⲆᐃⵠⲆ: "img/night-book32.png",
        ΔⵠΔᐃᐃⲆⲆ: "img/day-book33.png",
        ⵠΔΔⵠⲆⲆⵠ: "img/night-book33.png",
        ᐃⲆᐃᐃⵠⵠⲆ: "img/day-book34.png",
        ⵠⲆⲆΔᐃᐃⵠ: "img/night-book34.png",
        ΔᐃⵠⵠⵠΔⲆ: "img/day-book35.png",
        ⵠᐃΔⵠⵠᐃⵠ: "img/night-book35.png",
        ⵠⲆⲆⵠᐃᐃⲆ: "img/day-book36.png",
        ⵠⵠᐃⲆⵠᐃᐃ: "img/night-book36.png",
        ᐃⲆᐃΔⲆᐃᐃΔⲆ: "img/day-book37.png",
        ⵠⲆⵠⵠⵠⵠΔᐃᐃ: "img/night-book37.png",
        ᐃⵠΔⲆᐃᐃΔ: "img/day-book38.png",
        ⵠⲆΔᐃΔⲆⵠ: "img/night-book38.png",
        ΔᐃⵠΔⵠⲆⲆ: "img/day-book39.png",
        ⲆΔⵠⵠΔⵠⵠ: "img/night-book39.png",
        ⲆΔⲆᐃⵠᐃᐃ: "img/day-book40.png",
        ᐃΔΔΔΔΔΔ: "img/night-book40.png",
        ΔⲆΔⲆᐃⲆᐃ: "img/day-book41.png",
        ⲆᐃⵠⲆᐃⵠⲆ: "img/night-book41.png",
        ⲆΔᐃⲆΔⵠᐃ: "img/day-book42.png",
        ⵠⲆⵠⵠⲆᐃᐃ: "img/night-book42.png",
        ΔᐃⵠⵠⲆΔⲆ: "img/day-book43.png",
        ⵠΔΔⲆⲆⲆⵠ: "img/night-book43.png",
        ᐃᐃΔΔⵠⵠᐃ: "img/day-book44.png",
        ⲆΔΔΔΔᐃᐃ: "img/night-book44.png",
        ΔᐃⵠᐃᐃⲆᐃ: "img/day-book45.png",
        ⵠΔⲆᐃΔⲆⲆ: "img/night-book45.png",
        ΔΔⲆⲆΔᐃⵠ: "img/day-book46.png",
        ⵠΔⲆⵠΔⲆⲆ: "img/night-book46.png",
        ⵠᐃⲆᐃᐃᐃΔ: "img/day-book47.png",
        ᐃⲆΔᐃⲆⵠⲆ: "img/night-book47.png",
        ⵠΔᐃᐃⲆⵠΔ: "img/day-book48.png",
        ⲆⲆΔᐃⵠⵠⵠ: "img/night-book48.png",
        ᐃᐃᐃⲆⵠⲆΔ: "img/day-book49.png",
        ᐃⵠΔᐃΔΔᐃ: "img/night-book49.png",
        ⲆⲆᐃᐃⲆⵠⲆ: "img/day-book50.png",
        ⲆⵠΔⲆⲆᐃΔ: "img/night-book50.png",
        ⵠⵠΔΔⵠⲆΔ: "img/day-crate1.png",
        ᐃⵠⵠⲆⲆΔᐃ: "img/night-crate1.png",
        ⲆΔΔᐃⲆⵠΔ: "img/day-crate2.png",
        ⲆΔⵠᐃⲆⲆᐃ: "img/night-crate2.png",
        ⵠΔᐃⵠⵠΔΔ: "img/day-crate3.png",
        ⵠᐃⵠᐃᐃⵠΔ: "img/night-crate3.png",
        ᐃᐃⲆᐃⲆΔⲆ: "img/day-crate4.png",
        ⵠΔⵠΔⲆⵠᐃ: "img/night-crate4.png",
        ⵠΔᐃΔᐃΔᐃ: "img/day-crate5.png",
        ⲆⵠΔᐃΔΔⲆ: "img/night-crate5.png",
        ᐃᐃⲆⵠᐃⲆᐃ: "img/day-crate6.png",
        ⲆΔⵠᐃⵠΔΔ: "img/night-crate6.png",
        ⵠⵠⵠⲆΔᐃᐃ: "img/day-crate7.png",
        ⵠΔⵠⲆᐃⲆᐃ: "img/night-crate7.png",
        ⲆⵠᐃᐃⵠⲆΔ: "img/day-crate8.png",
        ΔΔΔΔΔⲆᐃ: "img/night-crate8.png",
        ⲆΔᐃΔⲆΔⵠ: "img/day-crate9.png",
        ⵠᐃⲆΔⲆⵠⵠ: "img/night-crate9.png",
        ΔⲆΔᐃⲆⲆᐃ: "img/day-crate10.png",
        ⵠⵠⵠᐃΔΔⵠ: "img/night-crate10.png",
        ⵠⵠΔᐃⲆⲆΔ: "img/day-crate11.png",
        ⲆⲆΔᐃᐃᐃΔ: "img/night-crate11.png",
        ⲆⲆⲆᐃΔⲆⵠ: "img/day-crate12.png",
        ΔⲆⵠⲆᐃΔⵠ: "img/night-crate12.png",
        ΔⲆⵠⲆᐃⵠΔ: "img/day-crate13.png",
        ᐃΔⵠΔⵠⵠΔ: "img/night-crate13.png",
        ⲆΔᐃⵠᐃΔⵠ: "img/day-crate14.png",
        ⲆᐃⲆⵠᐃⵠⲆ: "img/night-crate14.png",
        ⲆⵠΔⵠΔΔⲆ: "img/day-crate15.png",
        ΔᐃⲆᐃΔⲆⲆ: "img/night-crate15.png",
        ⵠᐃᐃⵠⵠΔⵠ: "img/day-crate16.png",
        ⲆΔΔⵠΔⵠⵠ: "img/night-crate16.png",
        ΔΔⵠᐃᐃⲆⵠ: "img/day-crate17.png",
        ⵠⲆⲆᐃΔⵠᐃ: "img/night-crate17.png",
        ⵠᐃΔᐃⵠΔᐃ: "img/day-crate18.png",
        ΔⲆᐃΔⲆⲆⵠ: "img/night-crate18.png",
        ᐃⵠᐃⵠⵠⲆᐃ: "img/day-crate19.png",
        ⲆᐃᐃᐃΔⲆⵠ: "img/night-crate19.png",
        ΔⵠⲆᐃᐃⵠᐃ: "img/day-crate20.png",
        ⵠⵠⲆΔΔᐃΔ: "img/night-crate20.png",
        ⲆⵠⲆᐃΔᐃᐃ: "img/day-crate21.png",
        ⲆΔᐃⵠⵠⲆΔ: "img/night-crate21.png",
        ⲆΔᐃⲆᐃⲆⲆ: "img/day-crate22.png",
        ΔⵠΔⵠⵠΔⲆ: "img/night-crate22.png",
        ΔⵠⲆᐃⵠΔᐃ: "img/day-crate23.png",
        ᐃᐃΔⲆⵠᐃⵠ: "img/night-crate23.png",
        ⵠΔⵠᐃΔΔΔ: "img/day-crate24.png",
        ⵠⵠᐃⵠⲆᐃⵠ: "img/night-crate24.png",
        ᐃΔⲆⲆΔⲆⵠ: "img/day-crate25.png",
        ⲆⲆⵠΔΔⵠΔ: "img/night-crate25.png",
        ⵠΔⲆᐃⲆᐃᐃ: "img/day-crate26.png",
        ⲆΔⵠⲆⲆΔᐃ: "img/night-crate26.png",
        ΔⲆᐃᐃΔⲆⲆ: "img/day-crate27.png",
        ᐃⵠⵠⲆⵠᐃⵠ: "img/night-crate27.png",
        ᐃⵠⵠᐃⵠⵠⵠ: "img/day-crate28.png",
        ᐃΔⲆᐃᐃᐃⵠ: "img/night-crate28.png",
        ΔΔΔᐃⲆᐃΔ: "img/day-crate29.png",
        ΔΔⲆⲆⵠᐃⵠ: "img/night-crate29.png",
        ⲆⵠΔⵠᐃΔΔ: "img/day-crate30.png",
        ⲆⵠΔΔᐃΔᐃ: "img/night-crate30.png",
        ⵠⲆⵠⲆⵠⵠΔ: "img/day-crate31.png",
        ΔⵠⵠⲆᐃᐃⲆ: "img/night-crate31.png",
        ΔⲆΔⲆΔⵠⵠ: "img/day-crate32.png",
        ⲆⲆᐃᐃⲆᐃᐃ: "img/night-crate32.png",
        ⵠⲆΔᐃⵠⲆΔ: "img/day-crate33.png",
        ΔⵠⲆᐃᐃᐃΔ: "img/night-crate33.png",
        ⲆΔᐃᐃᐃⵠⲆ: "img/day-crate34.png",
        ⲆᐃΔⲆⵠᐃⲆ: "img/night-crate34.png",
        ⲆΔᐃⵠⵠᐃᐃ: "img/day-crate35.png",
        ΔⲆⵠᐃΔᐃⵠ: "img/night-crate35.png",
        ΔᐃᐃΔⲆᐃᐃ: "img/day-crate36.png",
        ᐃΔΔΔᐃΔⲆ: "img/night-crate36.png",
        ⵠⵠⵠⵠⵠⵠᐃ: "img/day-crate37.png",
        ⵠⲆΔᐃΔⲆΔ: "img/night-crate37.png",
        ΔΔᐃⲆᐃΔⵠ: "img/day-crate38.png",
        ⵠΔⲆⵠⲆⵠⲆ: "img/night-crate38.png",
        ⵠⲆⲆⲆⲆⲆⲆ: "img/day-crate39.png",
        ⲆΔᐃⲆΔᐃΔ: "img/night-crate39.png",
        ⵠⵠΔⲆⲆΔⲆ: "img/day-crate40.png",
        ⲆⲆΔΔΔΔᐃ: "img/night-crate40.png",
        ⲆᐃⲆΔΔᐃⲆ: "img/day-crate41.png",
        ⵠⵠⲆᐃΔΔᐃ: "img/night-crate41.png",
        ΔΔⲆⵠΔⲆᐃ: "img/day-crate42.png",
        ⵠⵠⲆᐃⲆⵠᐃ: "img/night-crate42.png",
        ᐃⵠᐃΔⲆΔⲆ: "img/day-crate43.png",
        ⲆᐃΔⲆΔΔⵠ: "img/night-crate43.png",
        ΔΔⵠΔⲆΔᐃ: "img/day-crate44.png",
        ⲆΔΔᐃⵠⲆᐃ: "img/night-crate44.png",
        ⵠΔⵠⵠᐃᐃΔ: "img/day-crate45.png",
        ⲆᐃⲆΔⲆΔᐃ: "img/night-crate45.png",
        ΔᐃⵠⵠⲆᐃⵠ: "img/day-crate46.png",
        ᐃⵠΔⲆⲆᐃⵠ: "img/night-crate46.png",
        ⵠᐃⵠᐃⵠⵠⲆ: "img/day-crate47.png",
        ᐃΔᐃΔΔⵠΔ: "img/night-crate47.png",
        ᐃⲆᐃᐃᐃⵠⵠ: "img/day-crate48.png",
        ΔᐃⵠⲆⲆΔᐃ: "img/night-crate48.png",
        ⵠΔΔⵠᐃⲆⵠ: "img/day-crate49.png",
        ΔᐃΔⵠᐃⵠᐃ: "img/night-crate49.png",
        ⲆΔΔⲆΔⲆΔ: "img/day-crate50.png",
        ᐃⵠΔΔΔᐃΔ: "img/night-crate50.png",
        ⵠᐃⵠⵠⵠⵠⵠ: "img/day-crate51.png",
        ⵠⵠⲆᐃⵠᐃΔ: "img/night-crate51.png",
        ⵠᐃⲆΔΔᐃⲆ: "img/day-crate52.png",
        ΔⵠΔⲆΔⲆᐃ: "img/night-crate52.png",
        ΔΔⲆⲆᐃⲆⵠ: "img/day-crate53.png",
        ⵠⵠⲆᐃᐃⲆⲆ: "img/night-crate53.png",
        ⲆᐃⵠᐃΔⵠⵠ: "img/day-crate54.png",
        ᐃᐃᐃⵠⲆᐃΔ: "img/night-crate54.png",
        ⵠΔᐃΔⵠᐃΔ: "img/day-crate55.png",
        ᐃᐃⲆⲆᐃⲆᐃ: "img/night-crate55.png",
        ⵠΔΔᐃⵠⵠⲆ: "img/day-crate56.png",
        ⵠⲆⵠᐃⲆᐃᐃ: "img/night-crate56.png",
        ⲆΔⲆⲆⵠΔⲆ: "img/day-crate57.png",
        ⲆᐃⵠᐃⲆⲆΔ: "img/night-crate57.png",
        ᐃⵠᐃΔⵠⵠΔ: "img/day-crate58.png",
        ⲆΔΔΔΔⲆⵠ: "img/night-crate58.png",
        ΔΔⲆΔⲆⲆᐃ: "img/day-crate59.png",
        ᐃⲆᐃᐃⵠᐃⵠ: "img/night-crate59.png",
        ⲆⲆⵠᐃⵠⵠⵠ: "img/day-crate60.png",
        ᐃⲆΔⲆⵠⲆⲆ: "img/night-crate60.png",
        ⲆⵠⲆᐃⵠᐃⲆ: "img/day-crate61.png",
        ΔΔᐃᐃⲆⲆⵠ: "img/night-crate61.png",
        ΔⵠΔΔΔⵠⵠ: "img/day-crate62.png",
        ᐃᐃΔⵠΔⵠⲆ: "img/night-crate62.png",
        ΔᐃⲆⵠᐃⲆΔ: "img/day-crate63.png",
        ΔΔⵠᐃΔΔⲆ: "img/night-crate63.png",
        ΔΔΔᐃΔⲆⵠ: "img/day-crate64.png",
        ᐃᐃΔΔᐃⵠΔ: "img/night-crate64.png",
        ΔΔⲆᐃⵠⲆⵠ: "img/day-crate65.png",
        ᐃᐃᐃᐃΔⲆΔ: "img/night-crate65.png",
        ᐃⵠⵠΔᐃⲆⲆ: "img/day-crate66.png",
        ⲆⵠΔⲆΔᐃᐃ: "img/night-crate66.png",
        ΔᐃΔᐃⲆⲆᐃ: "img/day-crate67.png",
        ᐃⵠΔⵠⵠΔΔ: "img/night-crate67.png",
        ⵠᐃⵠᐃΔⲆⲆ: "img/day-crate68.png",
        ᐃⲆΔⲆⲆᐃᐃ: "img/night-crate68.png",
        ⲆⲆᐃⲆᐃⵠⵠ: "img/day-crate69.png",
        ᐃΔⲆⲆⲆΔᐃ: "img/night-crate69.png",
        ⲆⵠⲆΔΔΔⲆ: "img/day-crate70.png",
        ᐃⵠⲆᐃⲆΔᐃ: "img/night-crate70.png",
        ⵠΔⵠⵠᐃΔᐃ: "img/day-crate71.png",
        ΔᐃᐃⵠᐃᐃΔ: "img/night-crate71.png",
        ⲆᐃⲆΔⵠⲆΔ: "img/day-crate72.png",
        ⵠᐃΔⲆⲆᐃΔ: "img/night-crate72.png",
        ΔⲆΔΔᐃᐃⲆ: "img/day-crate73.png",
        ᐃᐃᐃⲆⵠΔⲆ: "img/night-crate73.png",
        ΔΔᐃⵠΔⵠΔ: "img/day-crate74.png",
        ⵠⲆⲆⲆⵠΔᐃ: "img/night-crate74.png",
        ⵠᐃⵠⵠᐃⵠⵠ: "img/day-crate75.png",
        ᐃΔⵠΔᐃᐃᐃ: "img/night-crate75.png",
        ⵠᐃΔᐃᐃⵠⲆ: "img/day-crate76.png",
        ⲆⲆⵠΔᐃⲆᐃ: "img/night-crate76.png",
        ᐃᐃΔᐃᐃⲆⲆ: "img/day-crate77.png",
        ΔΔⲆⵠⲆΔⲆ: "img/night-crate77.png",
        ⲆⵠⲆⵠⵠΔⵠ: "img/day-crate78.png",
        ⵠⵠⵠΔᐃⲆⲆ: "img/night-crate78.png",
        ᐃᐃᐃⵠⲆΔⲆ: "img/day-crate79.png",
        ⲆᐃⲆⲆⲆⵠⵠ: "img/night-crate79.png",
        ⵠΔⲆⵠΔⲆⵠ: "img/day-herb0.png",
        ΔⲆⲆᐃΔΔᐃ: "img/day-herb1.png",
        ⵠᐃⵠⲆⲆⲆΔ: "img/day-herb2.png",
        ΔᐃᐃΔⲆⵠⲆ: "img/day-herb3.png",
        ⵠΔⲆΔΔⲆΔ: "img/day-herb4.png",
        ᐃⵠⵠΔΔⵠᐃ: "img/day-herb5.png",
        ⵠⲆⵠΔᐃΔᐃ: "img/day-herb6.png",
        ⵠⲆⵠᐃᐃⲆΔ: "img/day-herb7.png",
        ᐃᐃᐃᐃⲆᐃⵠ: "img/day-herb8.png",
        Δⵠⵠⵠⵠᐃⵠ: "img/day-herb9.png",
        ⲆᐃᐃⵠΔⲆΔ: "img/day-herb10.png",
        ⵠⵠᐃⲆⵠⲆⲆ: "img/day-herb11.png",
        ᐃⵠⵠⲆΔⲆⵠ: "img/day-herb12.png",
        ⲆⲆΔΔⲆᐃΔ: "img/day-herb13.png",
        ΔⵠᐃᐃΔⲆⲆ: "img/day-herb14.png",
        ⵠⵠⵠΔⲆⵠᐃ: "img/day-herb15.png",
        ⵠᐃᐃᐃΔⵠᐃ: "img/day-shell0.png",
        ΔΔⲆⲆΔⲆΔ: "img/day-shell1.png",
        ⲆⲆΔⲆⲆⲆΔ: "img/day-shell2.png",
        ΔᐃⲆᐃΔⲆΔ: "img/day-leaf1.png",
        ⵠⵠⵠᐃⲆⵠⵠ: "img/day-leaf2.png",
        ΔⵠⲆⲆⲆΔⲆ: "img/day-leaf3.png",
        ⲆⲆΔⵠΔⲆⵠ: "img/day-leaf4.png",
        ΔΔΔᐃⲆⵠᐃ: "img/day-leaf5.png",
        ᐃⵠΔⲆΔᐃⵠ: "img/day-leaf6.png",
        ⲆⵠⵠᐃⵠΔᐃ: "img/day-leaf7.png",
        ⵠⵠⲆⵠⲆⲆⵠ: "img/day-leaf8.png",
        ⵠΔⲆᐃᐃⵠⵠ: "img/day-rock0.png",
        ⲆΔΔΔⵠⲆⲆ: "img/day-rock1.png",
        ⵠⲆᐃΔΔΔⵠ: "img/day-rock2.png",
        ᐃⲆⵠⵠΔΔᐃ: "img/day-rock3.png",
        ᐃⲆⲆΔⲆΔⲆ: "img/day-rock4.png",
        ⵠΔᐃⵠᐃΔΔ: "img/day-rock5.png",
        ⵠᐃⲆⲆⲆΔⵠ: "img/day-rock6.png",
        ᐃΔΔΔᐃΔᐃ: "img/day-rock7.png",
        ⵠⵠᐃⲆⲆᐃⵠ: "img/day-rock8.png",
        ⲆⲆⵠᐃⵠΔΔ: "img/day-rock9.png",
        ᐃᐃΔⵠⲆⲆᐃ: "img/day-rock10.png",
        ⵠⲆΔᐃᐃᐃΔ: "img/day-rock11.png",
        ⲆΔᐃᐃᐃᐃⵠ: "img/day-rock12.png",
        ⲆⲆⵠⲆⲆⵠⲆ: "img/day-rock13.png",
        ᐃⵠᐃᐃⲆⵠⵠ: "img/day-flower1.png",
        ⵠⵠⵠᐃⲆᐃⲆ: "img/day-flower2.png",
        ⵠΔⲆΔΔΔᐃ: "img/day-flower3.png",
        ⵠⵠⲆⵠΔΔⵠ: "img/day-flower4.png",
        ΔⵠΔΔΔⲆⵠ: "img/day-flower5.png",
        ⲆΔΔᐃᐃⲆᐃ: "img/day-flower6.png",
        ΔᐃΔⲆⲆⵠΔ: "img/day-flower7.png",
        ⵠᐃⲆⵠᐃⵠⲆ: "img/day-flower8.png",
        ᐃⲆᐃΔⵠⲆⵠ: "img/day-flower9.png",
        ⵠⵠᐃΔΔⲆΔ: "img/day-herb16.png",
        ΔΔᐃΔᐃΔᐃ: "img/day-herb17.png",
        ᐃⲆᐃⲆⲆⵠⲆ: "img/day-herb18.png",
        ⵠᐃΔⲆΔⵠΔ: "img/day-herb19.png",
        ⵠᐃⲆⲆⲆⵠᐃ: "img/day-herb20.png",
        ᐃᐃⲆⲆⵠⵠⵠ: "img/day-herb21.png",
        ⵠⲆᐃⵠᐃΔΔ: "img/night-herb0.png",
        ΔⵠⲆΔⲆᐃⵠ: "img/night-herb1.png",
        ⵠⵠΔΔΔⵠⵠ: "img/night-herb2.png",
        ᐃᐃⵠΔᐃⲆⲆ: "img/night-herb3.png",
        ⲆᐃⵠⵠⲆⲆΔ: "img/night-herb4.png",
        ᐃⵠΔⵠⵠⵠⵠ: "img/night-herb5.png",
        ⲆᐃΔᐃᐃᐃⲆ: "img/night-herb6.png",
        ⵠⲆΔⲆᐃⲆⵠ: "img/night-herb7.png",
        ᐃᐃⲆᐃⲆⲆⵠ: "img/night-herb8.png",
        ᐃΔⲆᐃΔⲆⵠ: "img/night-herb9.png",
        ΔᐃᐃⲆᐃⲆⲆ: "img/night-herb10.png",
        ᐃⵠⵠΔΔᐃⲆ: "img/night-herb11.png",
        ⲆⵠⵠΔⲆⲆΔ: "img/night-herb12.png",
        ⲆΔⲆⵠᐃΔⵠ: "img/night-herb13.png",
        ⵠⵠΔΔᐃᐃᐃ: "img/night-herb14.png",
        ⵠᐃΔⵠΔⵠⵠ: "img/night-herb15.png",
        ⵠΔⵠⲆⵠⵠΔ: "img/night-shell0.png",
        ⲆⲆⲆᐃⲆᐃᐃ: "img/night-shell1.png",
        ᐃⲆΔᐃⲆⲆΔ: "img/night-shell2.png",
        ⵠΔⵠⲆⲆᐃΔ: "img/night-leaf1.png",
        ᐃΔⵠΔΔᐃΔ: "img/night-leaf2.png",
        ⲆⵠᐃⲆⵠΔᐃ: "img/night-leaf3.png",
        ⲆⲆᐃᐃⵠⵠᐃ: "img/night-leaf4.png",
        ᐃⲆⵠΔⵠΔⵠ: "img/night-leaf5.png",
        ΔᐃᐃⵠΔⵠΔ: "img/night-leaf6.png",
        Δⵠᐃⵠᐃᐃᐃ: "img/night-leaf7.png",
        ΔⲆΔΔΔΔᐃ: "img/night-leaf8.png",
        ΔΔᐃⲆᐃᐃⵠ: "img/night-rock0.png",
        ⵠⲆᐃΔΔⲆⲆ: "img/night-rock1.png",
        ΔᐃᐃᐃⲆᐃⵠ: "img/night-rock2.png",
        ⲆΔⲆΔΔⲆᐃ: "img/night-rock3.png",
        ⲆΔⲆᐃⵠⲆᐃ: "img/night-rock4.png",
        ⲆΔᐃᐃⲆⲆⵠ: "img/night-rock5.png",
        ᐃⲆⲆⵠⲆⲆⲆ: "img/night-rock6.png",
        ⵠΔΔⲆΔⲆⲆ: "img/night-rock7.png",
        ᐃΔⲆᐃΔΔΔ: "img/night-rock8.png",
        ΔΔⵠΔΔⲆᐃ: "img/night-rock9.png",
        ᐃᐃᐃΔⲆⵠΔ: "img/night-rock10.png",
        ΔᐃᐃⵠᐃⲆⵠ: "img/night-rock11.png",
        ΔᐃⲆⲆᐃⵠⵠ: "img/night-rock12.png",
        ᐃᐃⲆΔⵠΔⵠ: "img/night-rock13.png",
        ᐃΔⵠΔⲆⵠⲆ: "img/night-flower1.png",
        ᐃⵠⵠⲆΔⵠⵠ: "img/night-flower2.png",
        ΔⵠᐃᐃᐃⲆᐃ: "img/night-flower3.png",
        ⲆⵠΔΔΔΔᐃ: "img/night-flower4.png",
        ⲆⵠⵠⵠⲆⲆᐃ: "img/night-flower5.png",
        ⲆΔⲆⵠᐃⵠᐃ: "img/night-flower6.png",
        ΔΔⵠⵠⲆΔⲆ: "img/night-flower7.png",
        ⵠⵠᐃΔⲆΔⲆ: "img/night-flower8.png",
        ΔⵠⲆⵠⵠᐃᐃ: "img/night-flower9.png",
        ΔᐃΔΔⵠⵠᐃ: "img/night-herb16.png",
        ⲆΔᐃᐃⲆⵠᐃ: "img/night-herb17.png",
        ᐃᐃⲆⲆΔⲆΔ: "img/night-herb18.png",
        ⲆΔΔⵠⵠⵠᐃ: "img/night-herb19.png",
        ⲆΔⵠⵠᐃΔⲆ: "img/night-herb20.png",
        ᐃⵠᐃⵠΔⲆᐃ: "img/night-herb21.png",
        ΔⵠⲆⲆᐃΔᐃ: "img/day-river000-010-000.png",
        ΔᐃⵠⵠⵠᐃΔ: "img/day-river000-010-010.png",
        ΔΔⵠᐃΔⲆᐃ: "img/day-river000-011-000.png",
        ⵠⲆΔⵠΔⲆᐃ: "img/day-river000-011-010.png",
        ⲆⲆΔᐃⵠⵠⲆ: "img/day-river000-011-011.png",
        ⵠⵠᐃΔᐃᐃⵠ: "img/day-river000-110-000.png",
        ΔⲆⵠⲆΔⲆⲆ: "img/day-river000-110-010.png",
        ⵠⲆΔΔⵠΔⵠ: "img/day-river000-110-110.png",
        ᐃᐃⵠΔᐃΔⵠ: "img/day-river000-111-000.png",
        ⲆᐃⲆⵠⲆΔᐃ: "img/day-river000-111-010.png",
        ⵠⵠΔΔⲆᐃΔⵠⲆ: "img/day-river000-111-011.png",
        ΔⲆⵠⵠΔᐃΔᐃⵠ: "img/day-river000-111-110.png",
        ᐃᐃᐃⲆⵠⵠΔΔΔ: "img/day-river000-111-111.png",
        ᐃᐃᐃⵠΔⵠΔΔΔ: "img/day-river010-010-000.png",
        ΔⲆⵠΔΔⵠΔⵠⲆ: "img/day-river010-010-010.png",
        ⵠⵠⵠⲆΔΔᐃⲆⲆ: "img/day-river010-011-000.png",
        ⲆᐃΔⲆⲆⵠΔⵠΔ: "img/day-river010-011-010.png",
        ⵠⲆⲆΔᐃᐃᐃΔⲆ: "img/day-river010-011-011.png",
        ⵠⲆⲆΔⵠⲆᐃⵠⲆ: "img/day-river010-110-000.png",
        ᐃᐃⵠⵠΔⲆΔⵠⲆ: "img/day-river010-110-010.png",
        ⲆᐃⲆⲆΔᐃΔᐃⵠ: "img/day-river010-110-110.png",
        ᐃⲆⲆΔⲆⵠⲆΔⵠ: "img/day-river010-111-000.png",
        ⵠⵠΔᐃⵠⵠΔᐃΔ: "img/day-river010-111-010.png",
        ⲆᐃⵠΔⲆΔΔⵠⲆ: "img/day-river010-111-011.png",
        ⲆⲆⲆᐃⲆⵠⲆΔΔ: "img/day-river010-111-110.png",
        ΔⵠⵠⵠⲆⵠⵠⲆⲆ: "img/day-river010-111-111.png",
        ⵠᐃⲆᐃⲆⵠⲆⵠⵠ: "img/day-river011-011-000.png",
        ⵠᐃΔΔⵠᐃⵠⵠΔ: "img/day-river011-011-010.png",
        ΔⲆᐃᐃⲆΔⲆΔⲆ: "img/day-river011-011-011.png",
        ⵠⵠΔⵠⵠᐃⵠᐃΔ: "img/day-river011-111-000.png",
        ⵠⵠⵠᐃΔΔᐃⵠᐃ: "img/day-river011-111-010.png",
        ᐃⵠⲆⲆⲆⵠΔΔⲆ: "img/day-river011-111-011.png",
        ⵠⲆⲆᐃΔⲆΔⲆⵠ: "img/day-river011-111-110.png",
        ᐃⵠᐃΔⵠᐃⲆΔᐃ: "img/day-river011-111-111.png",
        ⵠⲆΔΔⵠⲆⵠⵠᐃ: "img/day-river110-110-000.png",
        ᐃⲆΔΔΔⵠⵠᐃⲆ: "img/day-river110-110-010.png",
        ΔⵠⲆⲆΔᐃᐃⲆⲆ: "img/day-river110-110-110.png",
        ⲆⵠⲆᐃΔⵠⵠⵠⲆ: "img/day-river110-111-000.png",
        ⲆⲆᐃⲆⵠΔᐃΔⵠ: "img/day-river110-111-010.png",
        ΔᐃᐃⲆⲆⲆⲆΔΔ: "img/day-river110-111-011.png",
        ⲆⵠΔⵠΔⵠΔΔⵠ: "img/day-river110-111-110.png",
        ᐃⲆⲆⲆⲆᐃᐃⵠⲆ: "img/day-river110-111-111.png",
        ΔⲆΔⵠΔᐃᐃ: "img/day-river111-111-011.png",
        ΔΔⲆⲆⵠΔΔⲆⵠ: "img/day-river111-111-110.png",
        ΔⲆΔⵠΔᐃᐃ: "img/day-river111-111-011.png",
        ΔⵠΔᐃᐃᐃⵠⲆⵠ: "img/day-river111-111-000.png",
        ᐃⲆⵠΔⵠⵠⵠⵠΔ: "img/day-river111-111-111.png",
        ⲆᐃⵠᐃᐃⵠⲆΔⵠ: "img/day-river111-111-010.png",
        ᐃⵠⵠⵠΔⲆᐃⵠⲆ: "img/night-river000-010-000.png",
        ΔⵠᐃᐃⵠΔΔⵠΔ: "img/night-river000-010-010.png",
        ᐃⲆΔᐃⵠᐃΔᐃᐃ: "img/night-river000-011-000.png",
        ᐃΔⵠΔⵠⲆⲆⵠⵠ: "img/night-river000-011-010.png",
        ΔΔⲆΔⲆⲆΔΔᐃ: "img/night-river000-011-011.png",
        ⲆᐃⲆⲆᐃΔⵠᐃⵠ: "img/night-river000-110-000.png",
        ⵠΔᐃᐃⵠⲆⲆᐃⲆ: "img/night-river000-110-010.png",
        ΔΔᐃⲆᐃⵠⵠⵠΔ: "img/night-river000-110-110.png",
        ΔⲆⵠΔⵠⲆⲆᐃⲆ: "img/night-river000-111-000.png",
        ΔᐃⵠΔΔⵠⵠᐃⲆ: "img/night-river000-111-010.png",
        ΔⵠΔΔⵠⲆᐃΔⵠ: "img/night-river000-111-011.png",
        ΔΔⵠᐃⵠᐃⵠᐃΔ: "img/night-river000-111-110.png",
        ΔⲆⵠⵠΔⵠⵠΔΔ: "img/night-river000-111-111.png",
        ⵠⵠΔᐃᐃⲆⵠᐃⵠ: "img/night-river010-010-000.png",
        ⵠΔᐃΔⵠᐃⵠⵠⵠ: "img/night-river010-010-010.png",
        ⲆⵠⵠⵠᐃᐃⲆΔⲆ: "img/night-river010-011-000.png",
        ΔⲆᐃⵠⲆΔⵠᐃⲆ: "img/night-river010-011-010.png",
        ⵠⵠᐃᐃⲆⲆⲆΔⲆ: "img/night-river010-011-011.png",
        ΔⵠᐃⵠᐃΔⲆᐃⵠ: "img/night-river010-110-000.png",
        ᐃᐃᐃⲆⲆⲆᐃⵠΔ: "img/night-river010-110-010.png",
        ⵠⲆⲆᐃᐃΔⵠᐃⲆ: "img/night-river010-110-110.png",
        ΔⲆⲆᐃⵠⲆⵠΔⲆ: "img/night-river010-111-000.png",
        ⵠⵠⵠΔⲆⵠΔⲆⵠ: "img/night-river010-111-010.png",
        ΔⲆΔᐃΔᐃⵠᐃⲆ: "img/night-river010-111-011.png",
        ⲆΔΔΔⵠΔᐃΔᐃ: "img/night-river010-111-110.png",
        ⲆΔΔᐃⵠⵠⵠⵠⲆ: "img/night-river010-111-111.png",
        ⲆᐃⲆᐃᐃᐃΔΔΔ: "img/night-river011-011-000.png",
        ΔⲆⲆⲆᐃᐃΔΔⲆ: "img/night-river011-011-010.png",
        ⲆΔⲆⵠᐃⵠΔΔⲆ: "img/night-river011-011-011.png",
        ᐃΔⲆΔⲆΔⲆⲆᐃ: "img/night-river011-111-000.png",
        ΔⲆⵠᐃⵠΔᐃΔΔ: "img/night-river011-111-010.png",
        ᐃᐃⵠᐃⵠᐃᐃⵠᐃ: "img/night-river011-111-011.png",
        ⵠᐃΔⵠⲆⲆⵠⵠⲆ: "img/night-river011-111-110.png",
        ⵠⵠⵠⲆⵠⵠΔΔⲆ: "img/night-river011-111-111.png",
        ⲆΔⲆᐃΔⲆⵠΔᐃ: "img/night-river110-110-000.png",
        ΔᐃΔΔⲆΔᐃᐃⵠ: "img/night-river110-110-010.png",
        ⵠⲆᐃⵠΔᐃⵠᐃᐃ: "img/night-river110-110-110.png",
        ΔⵠᐃⲆⲆΔⵠᐃⵠ: "img/night-river110-111-000.png",
        ΔⲆᐃΔⲆΔⵠⵠᐃ: "img/night-river110-111-010.png",
        ᐃⲆⲆΔΔΔᐃⵠΔ: "img/night-river110-111-011.png",
        ⵠⲆΔⵠⲆⲆⲆⵠⵠ: "img/night-river110-111-110.png",
        ᐃᐃⵠⲆᐃᐃΔⵠⵠ: "img/night-river110-111-111.png",
        ⲆᐃΔⲆⵠⲆΔ: "img/night-river111-111-011.png",
        ⵠⵠⲆⵠΔᐃⲆᐃⵠ: "img/night-river111-111-110.png",
        ⲆᐃΔⲆⵠⲆΔ: "img/night-river111-111-011.png",
        ⵠΔⵠᐃⵠⵠⵠⲆᐃ: "img/night-river111-111-000.png",
        ΔΔⵠⵠⲆᐃⵠΔⲆ: "img/night-river111-111-111.png",
        ⲆⵠᐃⲆᐃΔᐃⵠⵠ: "img/night-river111-111-010.png",
        ⲆⵠᐃΔᐃᐃⲆ: "img/day-pebblecompo1.png",
        ᐃⲆᐃᐃᐃ: "img/day-pebblecompo2.png",
        ⲆⵠᐃⵠⲆ: "img/day-pebblecompo3.png",
        ΔⵠΔᐃᐃᐃⵠ: "img/day-pebblecompo4.png",
        ᐃⵠΔⲆΔ: "img/day-pebblecompo5.png",
        ⵠᐃⵠⲆⵠ: "img/day-pebblecompo6.png",
        ⵠⲆⲆᐃⲆ: "img/day-pebblecompo7.png",
        ΔⵠΔⲆⵠⵠΔⵠΔ: "img/day-pebblecompo8.png",
        ᐃⵠΔⲆⲆⵠΔ: "img/day-pebblecompo9.png",
        ⵠᐃᐃⲆᐃⵠΔ: "img/day-pebblecompo10.png",
        ΔΔⲆⵠΔ: "img/day-pebblecompo11.png",
        ⵠⲆᐃᐃΔΔᐃ: "img/day-pebblecompo12.png",
        ⲆΔⲆⵠΔΔᐃ: "img/day-pebblecompo13.png",
        ⲆⵠᐃⲆⲆⲆⲆ: "img/day-pebblecompo14.png",
        ΔΔⵠⵠⲆᐃⵠ: "img/day-pebblecompo15.png",
        ΔⲆⲆⲆⲆⲆᐃ: "img/day-pebblecompo16.png",
        ⵠᐃⵠᐃΔ: "img/day-pebblecompo17.png",
        ᐃⲆⵠⵠⲆⲆᐃ: "img/day-pebblecompo18.png",
        ⲆᐃⲆⲆⲆⲆⵠ: "img/day-pebblecompo19.png",
        ⲆⲆⵠΔᐃ: "img/day-pebblecompo20.png",
        ⵠᐃΔΔⲆ: "img/day-pebblecompo21.png",
        ⵠⵠΔⵠⵠΔⵠ: "img/day-pebblecompo22.png",
        ᐃᐃΔⵠⲆⲆⲆ: "img/day-pebblecompo23.png",
        ⵠⵠⲆΔΔⵠⲆ: "img/day-pebblecompo24.png",
        ⵠΔⲆᐃΔ: "img/day-pebblecompo25.png",
        ⲆⲆΔᐃⲆ: "img/day-pebblecompo26.png",
        ᐃΔⵠΔⵠΔᐃ: "img/day-pebblecompo27.png",
        ⵠΔⵠΔⲆ: "img/day-pebblecompo28.png",
        ⵠⵠⵠΔⵠᐃᐃ: "img/night-pebblecompo1.png",
        ⲆΔᐃΔⲆ: "img/night-pebblecompo2.png",
        ᐃⲆᐃΔⲆ: "img/night-pebblecompo3.png",
        ΔᐃᐃⲆᐃΔⲆ: "img/night-pebblecompo4.png",
        ⵠᐃᐃⵠΔ: "img/night-pebblecompo5.png",
        ᐃᐃⵠᐃΔ: "img/night-pebblecompo6.png",
        ΔⵠⲆⲆⲆ: "img/night-pebblecompo7.png",
        ⲆⲆΔΔᐃΔᐃⲆⲆ: "img/night-pebblecompo8.png",
        ⵠⲆᐃⲆΔΔⲆ: "img/night-pebblecompo9.png",
        ⵠΔᐃⲆΔⲆᐃ: "img/night-pebblecompo10.png",
        ⵠⲆΔⵠⲆ: "img/night-pebblecompo11.png",
        ⵠⵠⵠΔΔᐃᐃ: "img/night-pebblecompo12.png",
        ΔᐃⵠΔᐃⵠⵠ: "img/night-pebblecompo13.png",
        ⵠⵠΔⵠⲆⲆⵠ: "img/night-pebblecompo14.png",
        ΔΔⲆⲆⲆⲆⲆ: "img/night-pebblecompo15.png",
        ⲆᐃⲆᐃⵠᐃⵠ: "img/night-pebblecompo16.png",
        ΔᐃⲆΔᐃ: "img/night-pebblecompo17.png",
        ⲆᐃΔΔⵠΔⲆ: "img/night-pebblecompo18.png",
        ⲆᐃⲆⲆⲆⵠⲆ: "img/night-pebblecompo19.png",
        ΔⵠΔᐃⲆ: "img/night-pebblecompo20.png",
        ⵠΔΔⲆⵠ: "img/night-pebblecompo21.png",
        ⵠΔᐃΔᐃᐃᐃ: "img/night-pebblecompo22.png",
        ⲆⵠⲆⵠΔΔᐃ: "img/night-pebblecompo23.png",
        ⲆⵠΔΔᐃᐃᐃ: "img/night-pebblecompo24.png",
        ⲆΔᐃⵠⵠ: "img/night-pebblecompo25.png",
        ΔⵠΔΔΔ: "img/night-pebblecompo26.png",
        ᐃΔᐃⲆΔᐃⲆ: "img/night-pebblecompo27.png",
        ⲆΔⵠⲆⲆ: "img/night-pebblecompo28.png",
        ⵠᐃᐃᐃⲆⲆⵠⵠᐃ: "img/day-baby-mammoth.png",
        ΔΔⵠⵠⲆΔᐃᐃΔ: "img/day-baby-mammoth-tamed.png",
        ⵠᐃⵠΔⲆᐃΔⲆΔ: "img/day-baby-mammoth-angry.png",
        ⲆⲆⵠⵠⲆⵠᐃⵠΔ: "img/night-baby-mammoth.png",
        ⵠᐃⲆⲆᐃΔᐃⲆⲆ: "img/night-baby-mammoth-tamed.png",
        ᐃⲆⲆᐃⲆᐃⲆΔᐃ: "img/night-baby-mammoth-angry.png",
        ᐃᐃΔⲆⵠⵠⵠⵠⵠ: "img/inv-mammoth-out.png",
        ΔⵠᐃⲆⲆΔΔⲆⵠ: "img/inv-mammoth-in.png",
        ΔⲆⵠⲆᐃΔⵠᐃᐃ: "img/inv-mammoth-click.png",
        ᐃⵠᐃΔⵠⵠᐃ: "img/hurt-baby-mammoth.png",
        ᐃᐃΔⲆⲆⲆⵠ: "img/baby-mammoth-step.png",
        ⵠⲆᐃⵠΔⲆⲆⵠᐃ: "img/day-flower-hat.png",
        ΔⵠΔⵠᐃᐃⲆⵠⵠ: "img/night-flower-hat.png",
        ΔⲆᐃⵠΔᐃⲆⲆᐃ: "img/inv-flower-hat-out.png",
        ⲆᐃΔΔⲆΔΔⲆⵠ: "img/inv-flower-hat-in.png",
        ⵠᐃⵠⵠⵠΔⵠΔⵠ: "img/inv-flower-hat-click.png",
        ᐃΔⲆΔⲆᐃΔⵠΔ: "img/day-fur-hat.png",
        ΔᐃΔᐃⲆΔⵠΔᐃ: "img/night-fur-hat.png",
        ΔⲆⲆⲆⵠΔⵠⵠⵠ: "img/inv-fur-hat-out.png",
        ΔⲆⲆΔⲆⲆⲆⵠⲆ: "img/inv-fur-hat-in.png",
        ᐃⲆⵠⲆᐃⵠⲆᐃᐃ: "img/inv-fur-hat-click.png",
        ᐃⲆⵠⵠᐃΔⵠΔᐃ: "img/day-mammoth.png",
        ᐃⵠᐃⲆᐃΔⲆⵠΔ: "img/night-mammoth.png",
        ⲆΔⵠⲆᐃⵠⵠ: "img/hurt-mammoth.png",
        ᐃᐃᐃΔⵠΔⲆᐃᐃ: "img/inv-mammoth-fur-out.png",
        ⵠᐃⲆᐃⲆⲆᐃⲆⵠ: "img/inv-mammoth-fur-in.png",
        ⲆⵠᐃⵠⲆⲆΔᐃΔ: "img/inv-mammoth-fur-click.png",
        ⲆΔⵠΔⵠᐃᐃΔⵠ: "img/inv-wood-bow-out.png",
        ᐃⵠⵠᐃⵠΔⲆⲆᐃ: "img/inv-wood-bow-in.png",
        ⲆⵠⵠⵠⵠΔⵠⵠⲆ: "img/inv-wood-bow-click.png",
        ΔΔᐃΔⲆᐃⲆⵠⲆ: "img/inv-wood-arrow-out.png",
        ⲆⲆⵠⲆⲆᐃᐃⲆⵠ: "img/inv-wood-arrow-in.png",
        ᐃΔΔⲆΔⵠⵠΔⲆ: "img/inv-wood-arrow-click.png",
        ΔⵠΔΔΔᐃⲆⵠΔ: "img/day-wood-bow2.png",
        ΔΔⵠΔⲆᐃΔΔᐃ: "img/night-wood-bow2.png",
        ⵠΔᐃⲆⵠᐃᐃ: "img/day-wood-arrow.png",
        ⲆⵠᐃΔⵠΔⵠ: "img/night-wood-arrow.png",
        ᐃΔᐃⵠᐃⵠⵠⵠⲆ: "img/inv-stone-bow-out.png",
        ⵠⵠⵠⵠΔⲆⵠΔΔ: "img/inv-stone-bow-in.png",
        ⲆⵠΔⲆᐃⲆᐃⲆᐃ: "img/inv-stone-bow-click.png",
        ᐃΔⵠⵠΔⲆⲆⲆⵠ: "img/inv-stone-arrow-out.png",
        ⵠΔᐃΔᐃΔΔⲆᐃ: "img/inv-stone-arrow-in.png",
        ⲆⲆᐃᐃⲆⵠⲆΔᐃ: "img/inv-stone-arrow-click.png",
        ᐃⲆⲆⵠⵠⲆⲆⲆΔ: "img/day-stone-bow.png",
        ΔⲆᐃⲆΔⲆⵠⵠⲆ: "img/night-stone-bow.png",
        ᐃᐃⲆᐃΔⲆᐃ: "img/day-stone-arrow.png",
        ΔⲆⵠⲆΔⵠⵠ: "img/night-stone-arrow.png",
        ᐃᐃⲆⵠᐃⵠᐃᐃΔ: "img/inv-gold-bow-out.png",
        ΔⵠᐃⵠⲆⲆᐃᐃⲆ: "img/inv-gold-bow-in.png",
        ᐃᐃΔⵠⵠⵠⵠᐃⵠ: "img/inv-gold-bow-click.png",
        ⲆᐃᐃᐃΔᐃⲆΔᐃ: "img/inv-gold-arrow-out.png",
        ᐃᐃⵠⲆᐃⵠᐃⵠⵠ: "img/inv-gold-arrow-in.png",
        ΔΔⵠⲆᐃⵠⲆⲆΔ: "img/inv-gold-arrow-click.png",
        ⲆΔᐃⲆⲆΔᐃᐃⵠ: "img/day-gold-bow.png",
        ΔⲆⵠⵠᐃᐃΔΔⵠ: "img/night-gold-bow.png",
        ΔⵠΔⲆᐃΔⲆ: "img/day-gold-arrow.png",
        ⵠΔⵠⲆΔⵠᐃ: "img/night-gold-arrow.png",
        ΔⵠᐃⲆᐃᐃΔᐃⲆ: "img/inv-diamond-bow-out.png",
        ᐃⵠⲆⵠΔΔᐃⵠᐃ: "img/inv-diamond-bow-in.png",
        ⲆⵠⲆᐃᐃᐃⵠⵠΔ: "img/inv-diamond-bow-click.png",
        ⵠⲆⲆⵠⵠΔⵠⲆⲆ: "img/inv-diamond-arrow-out.png",
        ⲆⲆⲆⲆΔⵠᐃⵠⵠ: "img/inv-diamond-arrow-in.png",
        ᐃⲆΔᐃΔΔⲆⲆᐃ: "img/inv-diamond-arrow-click.png",
        ᐃΔⵠⵠⲆᐃⵠᐃΔ: "img/day-diamond-bow.png",
        ᐃⲆᐃΔᐃᐃⵠⵠⵠ: "img/night-diamond-bow.png",
        ⲆᐃΔⵠⵠᐃᐃ: "img/day-diamond-arrow.png",
        ΔⵠΔΔΔⵠᐃ: "img/night-diamond-arrow.png",
        ⵠᐃᐃᐃⲆᐃⲆᐃⵠ: "img/inv-amethyst-bow-out.png",
        ⵠⵠⲆΔᐃΔⵠⲆΔ: "img/inv-amethyst-bow-in.png",
        ΔⵠᐃΔⵠⲆⲆⵠⲆ: "img/inv-amethyst-bow-click.png",
        ⵠᐃᐃΔⵠΔΔⲆΔ: "img/inv-amethyst-arrow-out.png",
        ⲆⵠΔⵠᐃΔΔΔᐃ: "img/inv-amethyst-arrow-in.png",
        ΔᐃⵠⲆΔᐃΔⲆⵠ: "img/inv-amethyst-arrow-click.png",
        ΔⵠΔⲆⵠΔᐃⲆⵠ: "img/day-amethyst-bow.png",
        ᐃΔᐃⵠⵠΔᐃⵠΔ: "img/night-amethyst-bow.png",
        ᐃⵠᐃΔᐃⲆⵠ: "img/day-amethyst-arrow.png",
        ᐃᐃⵠⵠⲆⲆᐃ: "img/night-amethyst-arrow.png",
        ⵠΔᐃⵠⲆᐃΔⲆΔ: "img/inv-dragon-bow-out.png",
        ΔᐃᐃΔⲆⵠⲆⲆⲆ: "img/inv-dragon-bow-in.png",
        ⵠⵠⵠⵠΔⲆⲆⲆⲆ: "img/inv-dragon-bow-click.png",
        ⲆΔⲆⵠⲆΔⲆⵠⵠ: "img/inv-dragon-arrow-out.png",
        ⲆⲆⲆΔᐃᐃⲆⵠᐃ: "img/inv-dragon-arrow-in.png",
        ΔᐃⲆⵠⲆⲆⵠⲆⵠ: "img/inv-dragon-arrow-click.png",
        ΔΔΔⲆᐃⵠΔΔⲆ: "img/day-dragon-bow.png",
        ΔⵠᐃΔⲆΔᐃΔᐃ: "img/night-dragon-bow.png",
        ΔΔⵠⲆᐃᐃᐃ: "img/day-dragon-arrow.png",
        ⵠⵠΔⵠⲆⲆΔ: "img/night-dragon-arrow.png",
        ⲆᐃⲆⲆΔⵠᐃΔᐃ: "img/inv-reidite-bow-out.png",
        ⵠⲆᐃⲆⲆⲆⵠΔΔ: "img/inv-reidite-bow-in.png",
        ⵠⵠᐃΔᐃᐃⵠᐃⲆ: "img/inv-reidite-bow-click.png",
        ΔⲆᐃⵠᐃΔⲆⵠⵠ: "img/inv-reidite-arrow-out.png",
        ⲆΔᐃΔΔΔᐃᐃᐃ: "img/inv-reidite-arrow-in.png",
        ᐃⵠΔΔᐃᐃⲆⵠΔ: "img/inv-reidite-arrow-click.png",
        ⵠⲆΔⲆΔΔᐃⵠⵠ: "img/day-reidite-bow.png",
        ⵠΔⵠᐃⵠⲆΔΔᐃ: "img/night-reidite-bow.png",
        ᐃᐃⲆⵠⲆⲆᐃ: "img/day-reidite-arrow.png",
        ⵠⵠΔⵠⵠᐃΔⲆⲆ: "img/night-reidite-arrow.png",
        ⲆⲆᐃᐃⵠᐃΔⲆⲆ: "img/inv-wooden-axe-out.png",
        ᐃⵠⲆⲆᐃᐃΔᐃⵠ: "img/inv-wooden-axe-in.png",
        ΔⲆⵠⵠᐃΔΔⲆⵠ: "img/inv-wooden-axe-click.png",
        ⵠᐃⲆⵠⲆΔΔΔⵠ: "img/day-wooden-axe.png",
        ⵠⲆⵠⲆⲆᐃⵠⲆΔ: "img/night-wooden-axe.png",
        ᐃⲆⵠⲆᐃΔΔⵠⲆ: "img/inv-stone-axe-out.png",
        ΔⲆᐃΔᐃᐃᐃⵠᐃ: "img/inv-stone-axe-in.png",
        ⵠᐃⵠᐃΔᐃᐃΔⲆ: "img/inv-stone-axe-click.png",
        ⲆⲆᐃᐃΔΔⵠⲆΔ: "img/day-stone-axe.png",
        ⵠⲆⵠᐃᐃᐃⲆᐃⵠ: "img/night-stone-axe.png",
        ⲆⲆΔΔⲆⵠᐃⲆᐃ: "img/inv-golden-axe-out.png",
        ⵠΔΔᐃᐃⵠⵠⲆᐃ: "img/inv-golden-axe-in.png",
        ΔⲆⲆΔΔⵠⲆⵠᐃ: "img/inv-golden-axe-click.png",
        ⲆⲆΔᐃⵠᐃⵠⵠΔ: "img/day-golden-axe.png",
        ΔⵠᐃᐃⵠⲆⵠᐃⵠ: "img/night-golden-axe.png",
        ᐃⵠᐃΔᐃⲆᐃⲆⲆ: "img/inv-diamond-axe-out.png",
        ᐃⵠⲆΔΔΔᐃⵠᐃ: "img/inv-diamond-axe-in.png",
        ᐃΔⵠᐃⲆⵠᐃΔⵠ: "img/inv-diamond-axe-click.png",
        ᐃΔᐃΔΔΔΔΔⲆ: "img/day-diamond-axe.png",
        ⵠᐃΔⵠⵠΔⲆⵠⲆ: "img/night-diamond-axe.png",
        ΔⵠⲆⲆΔⵠΔⵠᐃ: "img/inv-amethyst-axe-out.png",
        ⵠⲆᐃᐃΔΔⵠⲆᐃ: "img/inv-amethyst-axe-in.png",
        ᐃΔΔⲆⲆᐃΔⲆⲆ: "img/inv-amethyst-axe-click.png",
        ΔⲆⲆⵠⵠⲆⵠΔⵠ: "img/day-amethyst-axe.png",
        ⵠᐃⵠⲆᐃⵠᐃΔᐃ: "img/night-amethyst-axe.png",
        ᐃΔⵠᐃⵠⲆᐃᐃⲆ: "img/inv-reidite-axe-out.png",
        ᐃΔⵠΔⲆⵠᐃⲆΔ: "img/inv-reidite-axe-in.png",
        ᐃⲆᐃⵠⵠⵠⲆⵠᐃ: "img/inv-reidite-axe-click.png",
        ⵠᐃⵠΔⵠⲆⵠΔⲆ: "img/day-reidite-axe.png",
        ⲆᐃⵠᐃⵠⵠᐃᐃⲆ: "img/night-reidite-axe.png",
        ⲆᐃⲆΔⲆⵠΔ: "img/bandage-activated.png",
        ᐃᐃⲆⲆⵠⵠᐃ: "img/auto-feed.png",
        ⵠΔⵠⲆᐃᐃᐃ: "img/stop-regeneration.png",
        ⲆⵠᐃᐃᐃⲆⵠ: "img/stop-regeneration2.png",
        ⲆⵠΔⵠⲆⲆᐃᐃⵠ: "img/day-wood-platform.png",
        ⵠΔⲆΔᐃⵠΔⲆΔ: "img/night-wood-platform.png",
        ⵠΔᐃᐃⲆΔΔᐃΔ: "img/inv-wood-platform-in.png",
        ⲆⵠᐃⵠⵠⵠⵠᐃΔ: "img/inv-wood-platform-out.png",
        ᐃⲆΔΔΔᐃⵠΔⲆ: "img/inv-wood-platform-click.png",
        ⲆΔⲆⲆⵠⲆⵠⵠᐃ: "img/day-wood-shield.png",
        ⲆⲆᐃΔΔᐃⲆᐃᐃ: "img/night-wood-shield.png",
        ⲆΔΔⵠⵠΔⲆᐃⵠ: "img/day-stone-shield.png",
        ΔⲆᐃᐃⵠⲆⵠᐃΔ: "img/night-stone-shield.png",
        ⵠΔⲆⲆΔᐃⵠΔΔ: "img/day-gold-shield.png",
        ⵠᐃΔΔⵠⲆⵠΔᐃ: "img/night-gold-shield.png",
        ΔⵠᐃⲆⵠᐃᐃⵠᐃ: "img/day-diamond-shield.png",
        ⲆΔⲆⵠΔΔⲆᐃᐃ: "img/night-diamond-shield.png",
        ᐃᐃⲆᐃᐃᐃⵠⵠΔ: "img/day-amethyst-shield.png",
        ⲆΔΔⵠᐃᐃᐃⵠⵠ: "img/night-amethyst-shield.png",
        ᐃΔΔᐃⵠᐃⲆⵠᐃ: "img/day-reidite-shield.png",
        ⵠΔⲆΔⲆΔⵠᐃᐃ: "img/night-reidite-shield.png",
        ᐃⲆᐃΔⵠΔᐃⲆⵠ: "img/inv-wood-shield-in.png",
        ᐃᐃᐃⵠⵠᐃᐃⵠⲆ: "img/inv-wood-shield-out.png",
        ⵠᐃⵠΔᐃⲆΔᐃⲆ: "img/inv-wood-shield-click.png",
        ⲆΔᐃⵠⲆᐃⵠᐃᐃ: "img/inv-stone-shield-in.png",
        ⲆΔⵠΔⵠᐃⵠᐃⲆ: "img/inv-stone-shield-out.png",
        ΔⵠΔΔΔᐃⵠⵠΔ: "img/inv-stone-shield-click.png",
        ⵠⲆᐃⲆⵠᐃᐃΔᐃ: "img/inv-gold-shield-in.png",
        ⲆⲆΔΔΔΔⲆᐃΔ: "img/inv-gold-shield-out.png",
        ⲆΔⲆⵠⵠᐃⵠΔⵠ: "img/inv-gold-shield-click.png",
        ⵠᐃΔⲆⲆⵠΔⲆΔ: "img/inv-diamond-shield-in.png",
        ᐃⵠΔⵠΔⲆΔΔΔ: "img/inv-diamond-shield-out.png",
        ᐃΔⲆⵠⲆΔⵠΔᐃ: "img/inv-diamond-shield-click.png",
        ΔᐃᐃⵠⲆⵠᐃᐃΔ: "img/inv-amethyst-shield-in.png",
        ᐃᐃᐃᐃⵠᐃⵠΔᐃ: "img/inv-amethyst-shield-out.png",
        ᐃⲆⵠΔΔⲆΔᐃⲆ: "img/inv-amethyst-shield-click.png",
        ⵠⵠΔᐃⵠΔΔᐃᐃ: "img/inv-reidite-shield-in.png",
        ⵠᐃᐃΔⲆᐃⵠⵠⵠ: "img/inv-reidite-shield-out.png",
        ᐃⲆⲆⵠᐃⲆⵠᐃⲆ: "img/inv-reidite-shield-click.png",
        ⵠΔᐃⲆⲆᐃΔΔᐃ: "img/day-machete.png",
        ⲆⲆⲆΔⲆⵠᐃⵠΔ: "img/night-machete.png",
        ⵠⵠⲆᐃⵠⲆⵠⵠΔ: "img/inv-machete-in.png",
        ΔᐃΔΔᐃⵠⲆΔΔ: "img/inv-machete-out.png",
        ⲆᐃᐃΔΔⲆⲆᐃᐃ: "img/inv-machete-click.png"
    };
    ⲆⲆΔⵠΔⵠⵠ = [{}];
    ⲆⲆΔⵠΔⵠⵠ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    ᐃᐃⵠᐃΔΔⲆ = {};
    ΔΔΔⵠᐃⵠΔⲆΔ = {};
    const nt = 10;
    for (var ht in ⵠᐃ) {
        ᐃᐃⵠᐃΔΔⲆ[ht] = ⵠᐃ[ht];
    }
    function ot(b, c, d, e) {
        const f = (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b & 255)) + (16 << (b >> 24 & 255));
        const g = ~(c & 27487) & 27487 | ~(c & 27487) & c;
        const a = ((16317 + d) * 22695477 + 1) % 4294967296;
        const i = e ^ 1758;
        const j = Qr(f, g, a, i);
        Wv(f, g, a, i, f, g);
        return (j | 1866) & ~(j & 1866);
    }
    const pt = 2;
    const qt = 7;
    const rt = 8;
    function st(a, b, c, d, e) {
        Zj($v, a, b, c, d, e);
        return (29011 + (function (b, c, d, e, f) {
            si($v, b, c, d, e, f);
            const g = Dr(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
            lc(Zv[0], Zv[1], Zv[2], Zv[3]);
            return ~(g & 56182) & (g | 56182);
        }(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]) ^ ww(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4], Zv[0]))) % 65378;
    }
    var Δⵠ = [];
    ⵠᐃΔ = {};
    ⵠᐃΔ.ⲆᐃΔᐃⵠ = 0;
    ⵠᐃΔ.ᐃΔᐃⲆ = 1;
    const tt = 8;
    ⵠᐃΔ.ᐃᐃⵠΔ = 2;
    ⵠᐃΔ.ΔΔᐃⲆ = 3;
    ⵠᐃΔ.ⲆᐃⲆⵠ = 4;
    const vt = 11;
    ⵠᐃΔ.ⵠᐃⲆᐃ = 5;
    ⵠᐃΔ.ⵠⲆΔᐃ = 6;
    ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ = 7;
    ⵠᐃΔ.ⵠⲆᐃᐃᐃ = 8;
    const wt = 5;
    ⵠⲆⲆⲆ = {};
    ᐃⲆⲆⲆ = [];
    ᐃΔᐃΔⲆᐃⵠ = function (a, b) {
        for (var c = 0; a.length > c; c++) {
            if (b === a[c].id) {
                return c;
            }
        }
        return -1;
    };
    var xt = [];
    function yt(a, b) {
        for (var c = 0; c < xt.length; c += b) {
            var d = xt[c];
            if (a === d[0]) {
                zt(d[0], d[1], d[2], d[3]);
            }
        }
    }
    function zt(b, c, d, e) {
        var f = ᐃⲆⲆⲆ[b];
        if (f !== fn) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / cf.ⵠⵠⲆⵠΔ;
                var m = d * 193 / cf.ⵠⵠⲆΔΔ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                Δⵠ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / cf.ⵠⵠⲆⵠΔ;
                m = d * 600 / cf.ⵠⵠⲆΔΔ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                Δⵠ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    ΔⵠⵠⲆⵠⲆⵠⵠⲆ = function () {
        for (var b = 0; b < 2; b++) {
            Δⵠ[818][b].clearRect(0, 0, 193, 193);
            Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.MAP[b], 0, 0, 193, 193);
            Δⵠ[819][b].clearRect(0, 0, 600, 600);
            Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.MAP[b], 0, 0, 600, 600);
            for (var c = cf.ⵠⵠⵠⵠⲆ.length - 1; c >= 0; c--) {
                var d = cf.ⵠⵠⵠⵠⲆ[c];
                var f = d.x1 * 193 / (cf.ⵠⵠⲆⵠΔ * 100);
                var j = d.y1 * 193 / (cf.ⵠⵠⲆΔΔ * 100);
                var k = d.w * 193 / (cf.ⵠⵠⲆⵠΔ * 100);
                var m = d.ⵠⵠⲆ * 193 / (cf.ⵠⵠⲆΔΔ * 100);
                var p = d.x1 * 600 / (cf.ⵠⵠⲆⵠΔ * 100);
                var q = d.y1 * 600 / (cf.ⵠⵠⲆΔΔ * 100);
                var u = d.w * 600 / (cf.ⵠⵠⲆⵠΔ * 100);
                var v = d.ⵠⵠⲆ * 600 / (cf.ⵠⵠⲆΔΔ * 100);
                if (cf.ΔⵠⲆⲆΔ === d.ΔⵠΔ) {
                    Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.FOREST[b], f, j, k, m);
                    Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.FOREST[b], p, q, u, v);
                }
                if (d.ΔⵠΔ === cf.ⵠΔⵠⵠΔᐃΔ) {
                    Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.WINTER[b], f, j, k, m);
                    Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.WINTER[b], p, q, u, v);
                }
                if (d.ΔⵠΔ === cf.ΔⵠΔⲆⲆΔᐃ) {
                    Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.LAVA[b], f, j, k, m);
                    Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.LAVA[b], p, q, u, v);
                }
                if (d.ΔⵠΔ === cf.ᐃΔⵠⵠⵠΔΔ) {
                    Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.CAVE[b], f, j, k, m);
                    Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.CAVE[b], p, q, u, v);
                }
                if (cf.ΔⵠⲆⲆⲆᐃᐃ === d.ΔⵠΔ) {
                    Δⵠ[818][b].drawImage(ᐃⲆⲆⲆ.DESERT[b], f, j, k, m);
                    Δⵠ[819][b].drawImage(ᐃⲆⲆⲆ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ⲆᐃⲆⲆΔΔΔᐃᐃ = function () {
        ⵠⲆⲆⲆ = {
            ᐃⲆᐃΔΔ: [{
                id: 0,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔΔᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔᐃᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⵠⲆᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔⵠᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃⵠⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔⲆΔⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⲆⵠΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠΔⵠᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠΔᐃⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔⵠᐃⲆⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃᐃᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔⲆⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆΔⵠⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃΔΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔᐃⵠᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠⵠⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠⵠᐃⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⲆΔⵠⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃⲆⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⵠΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃᐃⲆᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⵠΔⲆⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔΔΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔᐃᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃᐃᐃⲆᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠⵠⵠⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⲆⲆⵠᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠᐃᐃⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔΔⲆⲆⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃᐃΔᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠΔᐃⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔΔΔⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃⲆΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⲆᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃΔⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃᐃⲆⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠⵠⵠⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃᐃΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃⲆᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔΔⲆᐃΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔΔⲆⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆΔⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⲆᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠⲆΔⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⲆⲆᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔΔⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃⲆⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⲆᐃᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃᐃⵠᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠⵠᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆᐃⲆΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔΔΔᐃᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃⲆⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠⵠⲆΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃⵠⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃᐃⲆⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠⵠᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃᐃᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃᐃΔⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆᐃΔᐃΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔΔᐃⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔΔⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃⵠⵠᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆᐃⲆᐃΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃΔⲆⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⲆⵠⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⵠΔⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠᐃΔᐃΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃⵠᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔΔΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⲆᐃᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠᐃⲆⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⲆᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔⵠᐃᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆΔᐃᐃᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔΔⵠⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆΔΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.Ⲇᐃᐃⵠⵠᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⵠᐃⲆᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃᐃⵠⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆⵠⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔⲆⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.Ⲇⵠᐃᐃᐃⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆⵠⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆᐃᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃᐃⵠΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠᐃⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠⲆΔᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠΔⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔⲆᐃᐃΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔⵠᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃΔΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔΔⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠΔⲆΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⲆⵠⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃⵠⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆΔⵠᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆΔⵠΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔⵠⲆᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃΔᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆᐃᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆⵠΔⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃⲆΔᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃᐃⲆᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃᐃⵠⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆⲆⵠΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⵠᐃΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠⵠⲆⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆᐃⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃΔᐃΔᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠΔᐃᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃΔⲆΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠᐃⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔᐃᐃⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠᐃⲆᐃΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔΔⲆΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔᐃⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃΔΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃⲆᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⵠᐃⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆΔⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆⵠⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠⲆΔⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⵠⵠⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆΔⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃΔΔᐃⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆΔⵠΔᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔᐃⵠΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⵠⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃⲆᐃΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃᐃᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⲆᐃᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔᐃⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔⵠᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⵠᐃΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠᐃᐃⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠⲆΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠⲆΔⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔᐃⲆⲆΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃᐃⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⵠⲆⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⵠᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔⵠⵠⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃᐃⲆΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠΔⲆⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔᐃᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⲆⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⵠᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆⲆⵠᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⲆⵠΔⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔΔⵠⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃⵠΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃΔΔⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⵠⲆᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⲆᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆΔⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠᐃⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⲆⲆⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔΔⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃⵠΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔΔΔⲆᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⵠΔⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠⲆΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆⲆⲆᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠΔⲆⲆⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⲆⲆⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔⵠΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃᐃⵠΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃᐃΔᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⲆᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠᐃⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔⵠⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⵠᐃᐃᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⵠᐃⵠᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆΔⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠⵠΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⵠⵠⲆⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃᐃⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆΔⵠᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔⵠᐃΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⵠⲆⵠⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆⵠΔⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⵠΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔΔΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⵠⲆΔᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔᐃⲆᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠΔⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⵠΔⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃΔⵠⵠΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⲆᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃΔⵠΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃⲆⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠΔⵠᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔⲆⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆΔⲆⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃⲆᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔⲆⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆΔΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠᐃⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔᐃᐃΔΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠⵠΔΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠΔᐃΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⵠΔᐃⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⵠΔᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔΔⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃⲆⲆⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃᐃⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⵠⲆⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔᐃⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠΔⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃᐃⲆΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⲆⲆⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠⵠⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆΔⲆᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⵠⵠᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆⲆⵠⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⲆⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔΔΔⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔΔⲆⲆⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃⲆΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃᐃⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃᐃⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆΔⵠᐃΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔᐃⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃᐃᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔΔᐃⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔᐃΔᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⵠⲆᐃⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⲆΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔᐃⲆⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔΔΔΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔᐃⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃᐃⵠⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⵠⵠⵠᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔΔΔⲆΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔⲆΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⵠᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆΔᐃΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠⲆᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⵠΔⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔᐃⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔⲆⵠᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠⵠΔΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔᐃⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠⲆⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃᐃᐃⲆᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆᐃⵠⵠΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃᐃⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃᐃⲆᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠᐃⵠⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⵠᐃᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃΔⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠΔΔⵠΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔⵠⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃⵠᐃⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⲆⲆⲆⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠᐃΔⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⵠΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⵠᐃΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆᐃⲆᐃΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃᐃⲆⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠᐃⲆΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⲆᐃΔᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔⵠⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆᐃΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠⵠⲆⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠΔᐃⲆⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃⵠⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆΔⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃΔΔΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃΔⵠᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⲆⵠⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔⲆⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⲆᐃⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⵠΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠᐃⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔΔⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔⵠⲆᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⲆⲆⲆᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔⵠᐃⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⲆⵠΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃᐃΔⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⵠΔⵠⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠᐃΔᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆᐃⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆᐃᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠᐃΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃΔᐃⲆΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔⲆⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔⵠⵠᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆⵠᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃΔⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔⲆⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⲆᐃⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⲆⵠⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃΔᐃΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃᐃⵠⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠΔᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⲆⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⲆΔⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠᐃΔΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔᐃΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠᐃᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆΔΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔΔⵠⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⵠΔᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃΔᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆΔᐃᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔΔᐃⲆⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔΔᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆΔᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆᐃᐃΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠⵠⲆⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔΔⵠᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⵠⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⵠᐃᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠᐃΔᐃᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⲆⵠΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⵠΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃⵠΔⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔΔⵠΔⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆⲆᐃⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆᐃⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆΔⵠᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⵠᐃΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⵠᐃΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔΔᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃΔⲆᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃΔⲆⲆᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⲆⲆΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔⵠΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔΔⲆⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃΔΔⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔΔⵠⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆΔΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆΔⲆⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔᐃⲆᐃΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆΔⵠⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠᐃⵠΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃΔⵠΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃⵠⵠᐃⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔⵠΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠⲆⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⲆⲆⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⲆᐃⵠᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠⲆΔⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⵠⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠⵠⲆᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔΔⵠᐃᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⲆⵠΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃΔⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃⲆⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⲆⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆⲆᐃⲆⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⵠⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⵠⵠΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆΔⲆΔΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃΔΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆⵠᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠⲆⲆⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃᐃⵠᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⲆΔⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃⲆΔᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔⵠᐃⲆΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆⲆⵠΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⲆⵠⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⵠΔⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠᐃⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠⲆᐃᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⲆⲆᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⵠΔⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠᐃⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆΔΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⲆᐃᐃΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔᐃⵠⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃⲆᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔΔⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃᐃᐃΔΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆⵠⵠΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆⲆΔⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆᐃⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃΔᐃΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃᐃΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠᐃⵠⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆΔⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠᐃⵠΔΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃⲆᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔΔΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠΔⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⵠΔΔᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⲆⲆⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔᐃⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃⵠⵠᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔᐃⲆⵠⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⲆⲆΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆΔᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⵠⲆⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆΔᐃᐃΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃⲆⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                ⵠᐃⲆ: ⵠᐃ.Ⲇᐃᐃᐃⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⲆᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⲆᐃⵠᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃⲆⲆⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃΔᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠⵠΔⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠΔⲆⵠⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⲆᐃⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃⲆΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠΔⵠⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆᐃᐃⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠⲆΔᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠΔⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⲆⵠΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃᐃᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃⲆⲆΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠᐃΔⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠᐃⲆⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⵠⲆΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔⵠⵠⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃⵠⵠⲆⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆᐃΔⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆᐃⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔᐃⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃᐃⲆᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⵠⲆⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔᐃⵠΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃᐃᐃⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⲆΔⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔᐃⵠᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠᐃⲆΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆᐃⵠΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃⵠⲆⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔΔⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃᐃᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔᐃΔᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⲆΔⵠΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⵠⲆΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠᐃᐃΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⵠⵠᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠΔᐃⵠΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔⲆᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃⵠⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃΔΔΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠΔⲆⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⲆᐃᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔᐃⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⵠⲆΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⵠⲆᐃⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⵠΔⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠΔⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆΔⵠⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃⲆΔΔⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃᐃᐃᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⵠᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔΔⲆᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆΔᐃⲆⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆⲆⲆΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆᐃⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆᐃⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⵠⲆⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠΔΔⵠᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⲆᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⵠⵠΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⵠΔⲆⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⲆΔⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆⵠΔⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⲆᐃⵠΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆᐃⵠΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⵠⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔᐃᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔⲆᐃᐃᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆⵠⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆⲆΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔᐃᐃⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆΔⵠⵠᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔᐃⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃᐃⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆⵠⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⵠⵠⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃⲆᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔΔᐃⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠΔⵠⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⵠΔΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔᐃΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⲆⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃⲆⲆΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔⲆΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆⵠᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠⵠⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠⵠⵠᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔⲆⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⲆΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆⲆⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔΔᐃⵠⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⵠⵠΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠᐃΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠᐃⲆⵠⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⲆᐃᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃⵠⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠΔᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆΔⲆⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⵠᐃⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⲆⵠΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔⲆⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃΔⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃⲆᐃⲆΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⵠΔⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔᐃⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃᐃΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠΔⵠⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠᐃᐃᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃⵠⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃᐃⲆⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃΔⲆⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔᐃΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⲆⲆΔⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆΔΔⵠᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⲆⲆᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃΔᐃΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠⵠΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃᐃᐃΔⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⵠⵠⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆᐃⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⲆᐃΔⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃΔⲆΔⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃᐃⵠᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃⲆⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆⵠΔⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠⲆΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔᐃⲆᐃⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⵠⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔᐃⵠᐃᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆⲆᐃᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆΔⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⲆΔᐃⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔᐃᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃᐃⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠᐃⲆᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔᐃᐃΔᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⵠᐃΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠⲆⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠΔⵠᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃᐃᐃⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃΔⵠΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔⵠⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔᐃⲆⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃᐃΔΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔᐃΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔΔΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⵠⵠⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔᐃⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃⲆᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔⲆᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃᐃⵠⲆⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆⵠⲆᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⲆⲆΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⵠᐃⲆΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔⲆⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⲆⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆᐃΔᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃⵠⲆΔⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠⲆⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃⵠⵠⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃⲆΔΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃΔΔᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆⲆᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔᐃᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠⲆⲆΔⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⵠΔⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠⵠⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃᐃⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃᐃΔᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⵠⵠⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠⲆⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆⲆⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠⵠⲆⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔΔⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆΔⲆᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⲆⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃⵠⵠΔᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⲆΔⲆⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠΔᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠᐃΔⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⵠΔⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆⲆⲆᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆᐃⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔᐃᐃᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.Ⲇⵠᐃⵠᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆΔⵠΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔΔᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆᐃᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⲆⲆΔⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃΔᐃⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆΔⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃΔᐃⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⲆΔᐃⵠᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃⵠⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔᐃⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔᐃⵠⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔΔᐃΔΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⲆᐃΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⲆⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔΔΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔⲆⵠᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆᐃΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃⲆΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃᐃⵠⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠᐃᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔⲆΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠΔⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠᐃΔⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⲆΔᐃⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆᐃⵠⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔᐃⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠⲆᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⵠΔΔⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⵠΔΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃᐃᐃΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠⵠΔⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃΔⲆᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠⵠΔΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠΔᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃᐃΔᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔᐃᐃⵠⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃᐃΔⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔᐃᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔΔⵠⲆᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔᐃΔΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔⵠΔΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠΔⵠΔΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆᐃᐃᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠⵠᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠⲆΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃΔⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⲆᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔΔΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠΔᐃⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃⲆΔⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠΔΔⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⵠⲆⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠΔΔᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔⵠΔⲆΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⵠᐃΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠⵠΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃⵠⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔⲆΔⲆⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠᐃΔⵠΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⲆⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆΔΔΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔΔᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆΔⲆⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃΔΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃᐃΔⵠΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃⲆᐃΔⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆⵠᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃᐃⲆⵠⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⵠᐃⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔⲆⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆⵠΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃΔⵠΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆΔᐃⲆᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔΔΔΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⵠⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔⵠⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⵠⲆΔΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠΔΔᐃⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔⲆⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔⵠᐃⲆⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.Δⵠⵠⵠⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠᐃⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃⵠΔᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃΔᐃᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆᐃΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆⲆⵠᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠᐃᐃⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠᐃΔⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⵠᐃⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆᐃᐃⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆᐃⲆⲆΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⵠⵠⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆᐃⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔⵠⵠⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⵠᐃⵠΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⵠΔⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃᐃⲆᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔΔⲆᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠⲆΔᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⵠⲆⲆⵠΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⵠⵠΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠⵠᐃⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠᐃΔᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔΔΔᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆᐃᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⵠⵠⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆΔⲆⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆΔΔⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠᐃΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔΔΔᐃⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃⲆΔⲆᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⵠᐃᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆⵠΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠᐃⵠᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠⲆᐃΔᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠᐃⲆⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃⵠΔΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⵠⲆᐃΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⲆΔⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆΔᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔᐃᐃⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⵠᐃΔΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⲆΔᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⵠⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠΔⲆΔΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔΔΔⵠΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠᐃⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃᐃᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃΔⲆⲆΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⵠⲆⲆᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃⵠⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔΔᐃᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⵠⲆᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃⲆΔᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔⵠΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔᐃΔΔⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⵠΔⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⵠᐃⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                ⵠᐃⲆ: ⵠᐃ.Δᐃᐃᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⲆⵠᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠΔⲆⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆΔⵠΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆΔⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔⵠΔⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆⲆᐃⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃⵠᐃⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠΔᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃⵠᐃⵠᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆⲆⵠⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⲆⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔⲆΔⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆΔΔⵠΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆΔᐃⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⲆᐃΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔⵠⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔⵠᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔⲆⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⵠⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔᐃⵠⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃΔⲆᐃⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔⲆᐃΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆΔΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⲆΔⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.Δᐃⵠⵠⵠᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔΔⲆⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔᐃⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆΔⵠΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃΔΔΔΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⲆⲆΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠᐃΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆⵠⵠᐃⵠ,
                ΔΔᐃⵠ: ⵠᐃ.Ⲇᐃᐃᐃᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠΔⵠΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⵠᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔᐃⲆΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠⵠⲆⲆᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔᐃⵠΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠΔⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃΔⵠⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠⵠΔⵠⲆⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⵠⲆⵠⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠⲆΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃⵠⲆΔᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔⲆᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃΔⲆⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⵠΔΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔΔⵠⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠᐃⵠⵠⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⵠΔᐃⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃᐃᐃⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔᐃΔᐃᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⵠⵠΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆᐃⵠⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆΔⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆΔᐃⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃΔⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔΔⵠⲆⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃⲆΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠⵠΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⲆᐃⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔΔⵠΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆΔᐃⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃᐃⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔⲆΔΔⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆⲆⲆⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠΔⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆΔⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆΔⵠᐃᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃᐃⵠⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠⲆⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔⵠᐃⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃᐃΔᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔᐃⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔΔⵠⲆᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⵠᐃⵠⵠⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆΔᐃᐃⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃΔᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆⲆⵠⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⲆⵠⲆⵠⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠᐃᐃΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆΔⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆΔⵠΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃᐃᐃⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃᐃⵠⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔⵠⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠⲆΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠⲆΔⵠⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆΔⲆᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆⵠᐃΔⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⲆⲆᐃⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔⲆΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆᐃΔΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠΔᐃΔΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠᐃⲆᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⵠⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔΔᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆⲆᐃⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔΔⵠⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔΔΔΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⵠⵠᐃᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔᐃᐃᐃᐃᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃΔⵠⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃΔΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆⵠΔΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃᐃⵠΔᐃΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆᐃⵠᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃⲆᐃΔⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠⵠⲆⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃΔᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠᐃΔⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆΔⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃᐃᐃⲆΔⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔⲆᐃⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔᐃᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⵠⲆⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔᐃⲆⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃΔΔΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆΔΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆⲆΔᐃᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⵠᐃⵠⵠⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⲆᐃⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃᐃⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠⵠᐃⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ΔⵠᐃᐃⵠⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔᐃⲆᐃⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆΔⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆΔⲆⲆΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⵠᐃΔⵠⵠⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔⵠΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆΔⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠⵠΔᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠⲆⵠⲆⵠΔⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⵠⵠⵠⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆⲆΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆⵠᐃΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ΔᐃⲆⵠΔⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⲆᐃⵠΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃᐃⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⲆΔΔΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆΔΔⲆⲆΔΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆⲆᐃΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠᐃΔᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆⵠⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃΔΔⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃΔΔᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔΔᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔⵠᐃⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠΔᐃΔⵠⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⲆⲆΔΔᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠᐃᐃᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⲆᐃⵠΔ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆᐃⵠᐃᐃΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠⲆᐃᐃΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆΔΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⵠᐃⵠᐃ,
                ΔΔᐃⵠ: ⵠᐃ.ΔΔⲆⵠⵠΔᐃ,
                ⲆⲆⵠᐃ: ⵠᐃ.ΔⲆΔⵠⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃⵠⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃᐃⵠΔⲆⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⵠᐃΔⲆⲆᐃⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃⵠΔᐃⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃⲆⲆⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃΔⲆᐃΔ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃᐃⲆΔᐃⲆⲆ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃᐃᐃᐃᐃⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔᐃⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃΔᐃⵠⵠ,
                ΔΔᐃⵠ: ⵠᐃ.ⲆⲆΔΔᐃⵠΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠΔᐃⵠᐃⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⲆⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃⲆⲆⲆⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃΔᐃⵠⲆⲆΔ,
                ⲆⲆⵠᐃ: ⵠᐃ.ⵠᐃⵠᐃΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃᐃΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔⲆⵠⵠⲆ,
                ΔΔᐃⵠ: ⵠᐃ.ᐃⲆΔⵠᐃⵠⵠ,
                ⲆⲆⵠᐃ: ⵠᐃ.ᐃΔᐃⲆᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ,
                ⵠⵠᐃ: "OmarJr13",
                name: "Blob Skin"
            }],
            ΔⲆⲆⲆ: [{
                id: 0,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆⵠΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆΔⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠᐃⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⵠΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆᐃⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔⵠᐃⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⲆᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠⵠΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃⲆᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔⲆⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠᐃΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⲆΔⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔΔⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⵠⲆⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⲆΔⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃᐃⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃⲆⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⲆⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔⵠΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃΔᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔΔᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠⲆⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆΔⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔⵠΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠΔᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠΔΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔⵠᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠⵠⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠᐃΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔΔΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔᐃᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠΔⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔᐃᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⵠΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⲆᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃᐃⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆⲆᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃΔⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆⲆΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠⲆⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⵠⲆⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃⲆΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠⲆⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃⲆΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃΔⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔΔᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃᐃⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃᐃⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⵠΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔᐃⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔᐃⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠᐃⲆᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔⲆΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆⲆᐃⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔᐃᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔᐃΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆⲆΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠⲆⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⲆΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔⲆΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃᐃΔⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔⲆΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔᐃᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠᐃⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⵠΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔⵠΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆΔⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⵠⵠΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔⵠᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠᐃⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⵠⲆⵠⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔΔΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⲆⵠⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠᐃΔΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠΔΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠᐃⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃⵠᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⲆⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠᐃΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⲆᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃᐃⲆⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔᐃⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆΔΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⵠⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠⲆⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠⵠᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆᐃⲆⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃΔᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠⵠᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆᐃⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⵠⵠⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃᐃᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⵠᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔΔⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃⲆⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔΔⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆⲆⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠΔΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆΔⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆΔᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠⲆⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⲆⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆᐃⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃᐃΔⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠⵠⲆⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠᐃⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⲆⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                ⵠᐃⲆ: ⵠᐃ.Δᐃⵠⵠᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆⵠⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆⲆᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃΔⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔⵠⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆᐃⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃᐃΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃΔⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆⵠΔⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃᐃⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔⲆΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠΔΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃⲆⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠᐃᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆᐃᐃⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⵠΔΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆⲆΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⲆᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔΔⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠΔⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⵠⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔⲆΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠΔᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠⵠⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⲆⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠᐃΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔⲆⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔⲆᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔᐃⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠⲆΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⲆΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⵠⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆΔⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃΔⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⵠᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Engineer Bag"
            }],
            ΔⵠⵠⲆⲆ: [{
                id: 0,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠⲆΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⲆᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⲆⵠᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠᐃⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔΔⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔᐃⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠᐃⲆⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⵠⵠΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠᐃᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⲆᐃⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠΔⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃΔᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔᐃΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠᐃᐃⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔΔΔΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃΔⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆΔⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔᐃⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠᐃΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔᐃⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔᐃᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⲆᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⲆⲆⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⲆΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠⲆᐃⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃⵠⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃᐃᐃΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆΔΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔᐃⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆⲆⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠᐃⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃΔΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔᐃᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠΔᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆᐃΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⵠⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⵠᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆⵠᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⲆᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠΔⵠⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆᐃⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔⵠᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔΔᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⵠⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠᐃΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃΔⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔΔᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⵠᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃᐃⵠᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠⵠᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆⵠⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔⵠΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⲆᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔᐃⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃΔⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃᐃΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⲆⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃᐃⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔᐃⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃᐃᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃΔⲆⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⵠⵠⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔᐃΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃΔⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃΔⲆΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔΔᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⲆⵠΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⲆᐃⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⲆⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃⵠⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔⵠΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⲆΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠΔΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠᐃⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆᐃᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆΔΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⵠΔⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔΔΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⵠΔⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔᐃⵠⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃᐃᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔⵠᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔⵠᐃⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃⵠⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆⲆⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⵠⲆᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔⲆⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⵠᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆΔⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⵠᐃᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠᐃΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃⵠⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⵠⲆⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠⲆᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⲆᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⲆⵠⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔⲆΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔΔΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠⵠⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃⵠᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆΔΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠΔⲆΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⲆᐃⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⵠᐃΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆⲆᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔᐃⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠᐃⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆⲆⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⵠᐃⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃΔⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔΔΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆΔⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃᐃⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠᐃⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔⲆⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆᐃⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃᐃⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔΔΔⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆⵠᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠᐃΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔᐃΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔΔᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆᐃⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃᐃΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠΔᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔⲆΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔᐃⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔⵠⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠᐃΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔⲆⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃⲆᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆΔΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆᐃⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆΔⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⲆⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⵠΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆⲆⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆⵠⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ᐃᐃᐃⲆⵠ: [{
                id: 0,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⲆⵠᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃΔΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⵠΔΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆΔⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠΔᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆΔⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔΔΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⲆᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠᐃᐃⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃⲆⲆΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔⲆᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⲆⵠᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃⲆⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⵠᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔᐃⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔᐃΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔⵠΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃⵠⲆⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆᐃᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⵠⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔᐃΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃᐃⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔᐃⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆⵠΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃΔᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔᐃⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠⲆⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔΔᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                ⵠᐃⲆ: ⵠᐃ.ⲆᐃΔᐃⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃⵠΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⲆᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠΔⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠⲆⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⲆⲆᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠΔⵠⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠⵠΔⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔⲆᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆΔᐃΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⲆᐃⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔΔΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⲆᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠⵠΔⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔΔⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠᐃΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃᐃⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠΔⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃΔᐃΔⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠⲆⲆᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠⲆⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆΔⲆⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔΔⵠᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⵠᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃΔΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃⲆⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃᐃⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔⲆⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆᐃⲆᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠΔⵠΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔᐃΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⵠⵠⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠᐃΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆΔΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠᐃⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⵠⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⵠⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆⵠᐃᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃⲆⵠᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⵠⲆᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃⲆΔⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠⵠⲆᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⲆΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⲆⵠΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠΔᐃᐃⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔⵠⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃᐃⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆΔᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔΔⵠⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔⵠΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃⲆⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆⵠΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠⵠᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔⲆΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⵠⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔΔΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠⵠⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔΔⲆⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔΔⵠⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔΔΔΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⵠᐃᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⲆᐃΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆᐃᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔᐃⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Cursed Book"
            }],
            ⲆΔⵠᐃⵠ: [{
                id: 0,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃⵠᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃⵠᐃⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⲆΔΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃΔⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃᐃᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔⵠⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆΔⲆΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃⲆⵠΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆᐃⲆΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃΔᐃⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆΔᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆⵠⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃᐃΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆⲆᐃΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔᐃⵠΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃΔⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃΔⲆⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔⵠΔⵠⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃᐃᐃⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠⵠⲆΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃΔᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠⲆΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠⵠⵠⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠᐃᐃΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠᐃΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠⵠⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔᐃⲆΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔⲆⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃΔⵠⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠⲆⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔⲆᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔⲆⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃᐃΔⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠⵠⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔΔⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔⲆⵠΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃⵠⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔⲆΔⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⵠᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆᐃⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆΔⲆᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃᐃᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃⵠΔᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆⲆᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                ⵠᐃⲆ: ⵠᐃ.ⲆⵠΔᐃⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠᐃⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⲆⲆΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃᐃⲆⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                ⵠᐃⲆ: ⵠᐃ.Δⵠᐃⵠⵠᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠΔⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆΔᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆᐃΔΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃᐃΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠᐃⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⲆΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠΔΔΔᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆΔⲆᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆᐃⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃᐃΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠΔΔⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⲆᐃᐃⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠΔᐃᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⵠⲆᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔΔⲆΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ᐃᐃⵠΔ,
                ⵠⵠᐃ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠᐃΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃΔᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃⵠᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔⲆⲆⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔᐃⲆⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆⲆⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⲆⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃΔΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆᐃⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆᐃⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆᐃⵠⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠⵠΔᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆⵠᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃΔⲆΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔΔⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠᐃΔΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠⲆΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆᐃⵠΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃᐃΔⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃᐃᐃΔΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⵠΔᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔΔΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⲆⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃΔⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃΔᐃⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠΔΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⲆᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠΔᐃⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃΔΔⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔⵠΔΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔⲆᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃⲆᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔᐃⲆΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠᐃⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆΔΔⲆⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆⵠᐃⵠⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃⵠⲆΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⵠᐃⲆΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ΔΔᐃⲆ,
                ⵠⵠᐃ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆⵠⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔᐃΔⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠᐃΔΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆᐃΔΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃⲆⲆΔᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠΔⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⲆᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⵠⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⲆᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⲆⲆᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠᐃΔᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃΔᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔᐃⵠⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⲆΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠⲆᐃᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⵠΔᐃᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃΔⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⲆⵠᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⵠⲆⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠΔⲆⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃᐃΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔⲆⵠᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠⵠΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠⲆΔᐃⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⲆᐃᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠⲆⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆⲆᐃⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃⲆⵠΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃᐃΔⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃΔⵠᐃⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠᐃⵠⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                ⵠᐃⲆ: ⵠᐃ.ΔΔᐃᐃᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠΔΔᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                ⵠᐃⲆ: ⵠᐃ.ΔΔⲆⵠⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⵠΔⲆᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠᐃⲆᐃᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆΔⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⵠΔⵠⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⲆⵠⵠΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⵠΔᐃⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⵠΔᐃΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔᐃⲆΔⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⲆⲆᐃⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆᐃⲆⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆΔᐃⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠᐃᐃᐃⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⲆΔᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                ⵠᐃⲆ: ⵠᐃ.ΔⵠⵠᐃᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆᐃⲆⲆⲆⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆΔⵠᐃΔ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⲆⵠᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃⲆᐃⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆΔⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆᐃᐃΔΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠΔⵠⲆΔⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃΔᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆΔΔⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                ⵠᐃⲆ: ⵠᐃ.ᐃⵠΔⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆⲆΔᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⲆᐃⲆⵠ,
                ⵠⵠᐃ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⵠΔⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔᐃⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃⵠⲆᐃΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔΔⲆⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆΔⵠⲆⲆⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⵠⵠⵠΔΔ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠΔᐃⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆᐃⵠⲆⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃᐃᐃΔⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔⲆⵠΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.Δⵠⵠᐃᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃᐃⲆⵠΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃΔᐃⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                ⵠᐃⲆ: ⵠᐃ.Ⲇᐃⵠⵠᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃⵠᐃⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆΔΔΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠⵠⵠΔⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠᐃⲆᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⵠᐃⲆⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆⲆⵠⲆΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆⲆΔᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠⲆⵠᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠᐃΔⲆⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆᐃⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃᐃΔⵠⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆᐃⲆⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                ⵠᐃⲆ: ⵠᐃ.ᐃⲆⵠᐃᐃⲆᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔΔⲆⵠⲆⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃᐃᐃᐃΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ΔᐃΔΔᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆΔⲆⲆΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆⵠⵠᐃᐃᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃⵠⵠᐃΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⵠᐃⵠᐃⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                ⵠᐃⲆ: ⵠᐃ.ⵠΔΔⵠΔⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆᐃΔΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠⲆᐃᐃΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔⲆᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⵠⲆⵠⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                ⵠᐃⲆ: ⵠᐃ.ΔⲆⲆᐃΔⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⵠΔⵠⲆⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                ⵠᐃⲆ: ⵠᐃ.ⵠⵠⲆᐃΔᐃⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆᐃᐃᐃᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔᐃᐃᐃᐃᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⵠⲆΔΔⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔΔⲆΔᐃ,
                ⵠⲆⲆ: ⵠᐃ.ᐃⲆΔᐃⵠᐃⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆΔᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠΔⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃᐃᐃⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                ⵠᐃⲆ: ⵠᐃ.ⲆΔᐃᐃΔⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆⵠⲆΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                ⵠᐃⲆ: ⵠᐃ.ΔΔΔᐃⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠᐃⵠⲆⲆᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃᐃᐃⵠⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃᐃᐃⵠⲆᐃⲆ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔⵠⲆⲆⵠⲆ,
                ⵠⲆⲆ: ⵠᐃ.ᐃΔⵠⲆⵠⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                ⵠᐃⲆ: ⵠᐃ.ΔᐃΔᐃⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⵠᐃⲆᐃⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                ⵠᐃⲆ: ⵠᐃ.ᐃΔΔⵠⵠΔⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⵠⲆΔⲆⲆⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                ⵠᐃⲆ: ⵠᐃ.ᐃᐃⵠᐃⲆⵠᐃ,
                ⵠⲆⲆ: ⵠᐃ.ΔⵠᐃΔⲆΔᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                ⵠᐃⲆ: ⵠᐃ.ⵠᐃΔΔⵠⲆⵠ,
                ⵠⲆⲆ: ⵠᐃ.ΔⲆⲆᐃΔⵠΔ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                ⵠᐃⲆ: ⵠᐃ.ⲆⲆⲆᐃⵠΔⲆ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⲆⲆⵠⲆΔⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃⵠⵠⲆΔ,
                ⵠⲆⲆ: ⵠᐃ.ⲆⲆΔⵠⲆⵠᐃ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                ⵠᐃⲆ: ⵠᐃ.ⵠⲆᐃⲆᐃⵠⵠ,
                ⵠⲆⲆ: ⵠᐃ.ⵠⵠᐃⲆⲆⵠⵠ,
                ᐃⵠᐃ: ⵠᐃΔ.ⵠⲆᐃᐃᐃ,
                ⵠⵠᐃ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        pw.ⵠΔΔΔΔⵠⲆ = ᐃΔᐃΔⲆᐃⵠ(ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ, 21);
        pw.ⲆΔᐃⵠⲆⵠⵠ = ᐃΔᐃΔⲆᐃⵠ(ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ, 20);
        Δⵠ[255] = [];
        Δⵠ[7] = [];
        Δⵠ[250] = [];
        Δⵠ[28] = [];
        Δⵠ[29] = [];
        Δⵠ[796] = [];
        for (var a = 0; a < ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ.length; a++) {
            Δⵠ[255][a] = [ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[a].ⵠᐃⲆ, ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[a].ⵠⲆⲆ];
            Δⵠ[7][a] = [ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[a].ΔΔᐃⵠ, ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[a].ⲆⲆⵠᐃ];
        }
        for (a = 0; ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ.length > a; a++) {
            Δⵠ[28][a] = [ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ[a].ⵠᐃⲆ, ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ[a].ⵠⲆⲆ];
        }
        for (a = 0; a < ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ.length; a++) {
            Δⵠ[250][a] = [ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ[a].ⵠᐃⲆ, ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ[a].ⵠⲆⲆ];
        }
        for (a = 0; a < ⵠⲆⲆⲆ.ΔⲆⲆⲆ.length; a++) {
            Δⵠ[29][a] = [ⵠⲆⲆⲆ.ΔⲆⲆⲆ[a].ⵠᐃⲆ, ⵠⲆⲆⲆ.ΔⲆⲆⲆ[a].ⵠⲆⲆ];
        }
        for (a = 0; ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ.length > a; a++) {
            Δⵠ[796][a] = [ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ[a].ⵠᐃⲆ, ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ[a].ⵠⲆⲆ];
        }
    };
    const At = 10;
    const Bt = 1;
    const Ct = 0;
    function Dt(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    const Et = 10;
    function Ft(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    function Gt(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var o = l / 2;
        var b = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        Kt(i, -g, -o, h, l, n);
        Dt(i, e, e, b);
        return f;
    }
    function Ht(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        Kt(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        Dt(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    function It(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; c > i; i++) {
            g.push({
                x: Math.sin(i * f) * d,
                y: d * Math.cos(i * f)
            });
            var j = g.length;
            a.push(ΔⲆⵠᐃ.ᐃΔΔⲆⲆⵠⵠ(g[j - 2], g[j - 1]));
        }
        a.push(ΔⲆⵠᐃ.ᐃΔΔⲆⲆⵠⵠ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; i < c; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    function Jt(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, Math.PI * 2 * e);
    }
    function Kt(b, c, d, e, f, g) {
        if (g * 2 > e) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    function Lt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    const eb = 4;
    const ib = 6;
    const tb = 11;
    function nb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        Ft(e, a * 26, a * 26, a * 9);
        Dt(e, c[0]);
        Ft(e, a * 56, a * 36, a * 9);
        Dt(e, c[1]);
        Ft(e, a * 40, a * 50, a * 9);
        Dt(e, c[2]);
        e.globalAlpha = 1;
        Ft(e, a * 26, a * 26, a * 5);
        Dt(e, c[0]);
        Ft(e, a * 56, a * 36, a * 5);
        Dt(e, c[1]);
        Ft(e, a * 40, a * 50, a * 5);
        Dt(e, c[2]);
        return d;
    }
    function ob(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        return d;
    }
    function ab(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        Ft(e, a * 11, a * 11, a * 10);
        Dt(e, c[0]);
        e.globalAlpha = 0.7;
        Ft(e, a * 11, a * 11, a * 7);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        Ft(e, a * 11, a * 11, a * 4);
        Dt(e, c[0]);
        return d;
    }
    const rb = 10;
    const sb = 19;
    function hb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Kt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Dt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        Kt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        Dt(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        Ft(e, a * 68, a * 111.29513549804688, a * 15);
        Dt(e, c[7], c[8], a * 4);
        Ft(e, a * 123, a * 111.29510498046875, a * 15);
        Dt(e, c[7], c[8], a * 4);
        Ft(e, a * 63, a * 106, a * 5);
        Dt(e, c[9]);
        Ft(e, a * 118, a * 106, a * 5);
        Dt(e, c[9]);
        return d;
    }
    function lb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        Kt(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        Dt(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        Dt(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        Kt(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        Dt(d, b[0], b[0], a * 4);
        return c;
    }
    function gb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        Kt(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        Kt(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        Kt(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        Dt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        Kt(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        Dt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        Kt(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        Dt(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        Dt(e, c[1]);
        return d;
    }
    function ub(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = g * b / 2;
        var j = b * a / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Ft(f, 0, 0, k);
        Dt(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ft(f, 0, 0, k);
        Dt(f, d[1]);
        f.restore();
        return e;
    }
    function bb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        Kt(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        Kt(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        Kt(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        Dt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        Kt(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        Dt(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        Kt(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        Dt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        Dt(e, c[1]);
        return d;
    }
    function db(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Kt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Dt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        Kt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        return d;
    }
    function vb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        Kt(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        Kt(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        Kt(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        Dt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        Dt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        Dt(e, c[3], c[1], a * 6);
        return d;
    }
    const mb = 3;
    const cb = 13;
    function pb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var o = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            Ft(j, 0, 0, c * 10);
            Dt(j, e[2], e[2], c * 3);
            for (var b = 0; b < 4; b++) {
                Kt(j, -g, -o, h, l, c * 2);
                j.rotate(Math.PI / 4);
                Dt(j, e[2], e[2], c * 4);
            }
        }
        Ft(j, 0, 0, c * 10);
        Dt(j, e[0], e[1], c * 1.5);
        for (b = 0; b < 4; b++) {
            Kt(j, -g, -o, h, l, c * 2);
            j.rotate(Math.PI / 4);
            Dt(j, e[0], e[1], c * 1.5);
        }
        Ft(j, 0, 0, c * 10);
        Dt(j, e[0]);
        Ft(j, 0, 0, c * 4);
        Dt(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        Ft(j, 0, 0, c * 4);
        Dt(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        Ft(j, 0, 0, c * 4);
        Dt(j, undefined, e[1], c * 2);
        return i;
    }
    function Cb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function Tb(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = jd(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = Ud(0.9, xj, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = Ud(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = Ud(0.9, mn, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = Ud(0.9, Ga, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function fb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        e.width = i;
        e.height = j;
        f.translate(c * -130, c * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        Dt(f, d[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        Dt(f, d[1], d[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = k + c * -3;
        var n = m + c * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        Ft(f, 0, 0, h);
        Dt(f, d[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        Ft(f, 0, 0, l);
        Dt(f, d[4]);
        f.restore();
        f.save();
        f.translate(k + c * 27, m);
        f.globalAlpha = 1;
        Ft(f, 0, 0, h);
        Dt(f, d[3]);
        f.restore();
        f.save();
        f.translate(c * 27 + g, n);
        f.globalAlpha = 1;
        Ft(f, 0, 0, l);
        Dt(f, d[4]);
        return e;
    }
    function zb(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var n = (d = f * 125) / 2;
        var a = (r = f * 95) / 2;
        var o = f * 10;
        var p = f * 8;
        var h = f * 112;
        var l = f * 82;
        var g = h / 2;
        var q = l / 2;
        var b = f * 4;
        j.width = d;
        j.height = r;
        k.translate(n - f * 4, a + f * 4);
        k.globalAlpha = e ? 0.5 : 1;
        Kt(k, -g, -q, h, l, o);
        Dt(k, i[0]);
        k.globalAlpha = 1;
        k.translate(0, -p);
        Kt(k, -g, -q, h, l, o);
        Dt(k, i[1], i[2], b);
        var d = f * 55;
        var r = f * 45;
        o = 5;
        k.translate(f * -40, f * -30);
        Kt(k, 0, 0, d, r, o);
        Dt(k, i[3]);
        var t = wb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * -25);
        t = wb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * 15);
        t = wb(f * 1.2, i[3]);
        k.drawImage(t, f * 28, f * -30);
        d = f * 15;
        r = f * 70;
        o = f * 5;
        k.translate(f * 78, f * -5);
        Kt(k, 0, 0, d, r, o);
        Dt(k, i[4]);
        d = f * 9;
        r = f * 50;
        o = f * 3;
        k.translate(f * -20, f * 20);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        Kt(k, 0, 0, d, r, o);
        Dt(k, i[5]);
        k.translate(f * -20, f * 29);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        k.beginPath();
        k.lineJoin = "round";
        k.moveTo(0, 0);
        k.lineTo(0, f * 30);
        k.lineTo(f * 30, f * 30);
        k.closePath();
        Dt(k, null, i[5], f * 8);
        return j;
    }
    function yb(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Dt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        Dt(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            Dt(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            Dt(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            Dt(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        Dt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        Dt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        Dt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        Dt(g, undefined, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        Dt(g, undefined, d[2], b * 4);
        Ft(g, b * 63, b * 180, b * 15.231546211727817);
        Dt(g, d[4]);
        Ft(g, b * 121, b * 181, b * 15.652475842498529);
        Dt(g, d[4]);
        Ft(g, b * 58, b * 175, b * 5.656854249492381);
        Dt(g, d[2]);
        Ft(g, b * 116, b * 175, b * 5.656854249492381);
        Dt(g, d[2]);
        return f;
    }
    function wb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            Kt(f, -l, -g, m, h, c * 2);
            f.rotate(Math.PI / 4);
            Dt(f, d);
        }
        f.arc(0, 0, c * 10, 0, Math.PI * 2);
        Dt(f, d);
        f.globalCompositeOperation = "destination-out";
        Ft(f, 0, 0, c * 4);
        f.fill();
        return e;
    }
    const Pb = 10;
    function Ab(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Dt(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Dt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        Dt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        Dt(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Dt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        Dt(d, ts, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        Dt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        Dt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        Dt(d, b[3]);
        Ft(d, a * 77, a * 107, a * 6);
        Dt(d, b[2]);
        Ft(d, a * 110, a * 107, a * 6);
        Dt(d, b[2]);
        Ft(d, a * 75, a * 105, a * 3);
        Dt(d, b[4]);
        Ft(d, a * 108, a * 105, a * 3);
        Dt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        Dt(d, b[1]);
        return c;
    }
    const kb = 6;
    const xb = 7;
    function Jb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        Dt(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        Dt(f, d[2], d[3], 3);
        return e;
    }
    const Mb = 8;
    const Bb = 0;
    function Eb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        Ft(d, a * 213.5, a * 256.75, a * 75);
        Dt(d, b[5]);
        Ft(d, a * 213.5, a * 175.75, a * 25);
        Dt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        Ft(d, a * 213.5, a * 256.75, a * 75);
        Dt(d, b[3]);
        Ft(d, a * 213.5, a * 175.75, a * 25);
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        Ft(d, a * 213.5, a * 256.75, a * 70);
        Dt(d, b[0]);
        Ft(d, a * 213.5, a * 175.75, a * 20);
        Dt(d, b[0]);
        Ft(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Ft(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        Ft(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        Ft(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        Kt(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        Kt(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    const Db = 2;
    const Ib = 5;
    function Sb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        It(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        It(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        It(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        It(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ft(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ft(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        Dt(e, c[5], c[6], a * 4);
        return d;
    }
    function Qb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        Kt(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        Dt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        Kt(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        Dt(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        Kt(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        Kt(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        Dt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        Kt(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        Kt(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        Kt(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        Kt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        Kt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        Dt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        Kt(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        Dt(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        Kt(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        Dt(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        Dt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        Dt(e, Kr, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        Dt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        Dt(e, undefined, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            Dt(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            Dt(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            Dt(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            Dt(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            Dt(e, Tk, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            Dt(e, fn, b[0], a * 20);
            Ft(e, a * 142, a * 221, a * 16.1245154965971);
            Dt(e, b[0]);
        }
        return d;
    }
    function _b(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 50, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 54, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        It(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        Dt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        Dt(e, mh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        Dt(e, Lq, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        It(e, 6, a * 30, a * 15);
        e.restore();
        Dt(e, c[3]);
        return d;
    }
    function Fb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Dt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        Dt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Dt(e, wj, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        Dt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Dt(e, Gn, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        Dt(e, ma, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Dt(e, ma, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        Dt(e, _l, c[6], a * 4);
        return d;
    }
    function Rb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        Dt(e, Tk, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        Dt(e, fn, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        Dt(e, _l, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        Dt(e, ol, c[1], a * 2);
        return d;
    }
    function Gb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        Dt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        Dt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        Dt(e, eo, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        Dt(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        Dt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        Dt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        Dt(e, undefined, c[1], a * 14);
        Ft(e, a * 161, a * 201, a * 13);
        Dt(e, c[5]);
        Ft(e, a * 216, a * 205, a * 8.06225774829855);
        Dt(e, c[5]);
        Ft(e, a * 216, a * 175, a * 6.708203932499369);
        Dt(e, c[5]);
        Ft(e, a * 271, a * 191, a * 5.0990195135927845);
        Dt(e, c[5]);
        Ft(e, a * 206, a * 180, a * 11.180339887498949);
        Dt(e, c[5]);
        return d;
    }
    function jb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        It(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        It(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        Dt(e, c[8], c[9], a * 4);
        return d;
    }
    const Wb = 11;
    const Lb = 6;
    function Ob(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 195;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 35;
        var g = c * 150;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m - c * 5, n - c * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        j.translate(0, 5);
        Kt(j, -o / 2, -b / 2, l / 2, g / 3, h - 2);
        Dt(j, f[1]);
        return i;
    }
    function Nb(f, e, i, j, k) {
        var n = document.createElement("canvas");
        var a = n.getContext("2d");
        var o = f * 70;
        var p = f * 70;
        var h = f * 10;
        var l = f * 5;
        n.width = o;
        n.height = p + l;
        for (var g = 0; e.length > g; g++) {
            var q = e[g];
            a.globalAlpha = q.a;
            var r = q.f(i, Ga, q.c);
            a.save();
            a.translate(o / 2 + f * q.x, p / 2 + q.y * f);
            a.rotate(q.r);
            a.drawImage(r, -r.width / 2, -r.height / 2);
            a.restore();
        }
        var s = [];
        for (g = 0; g < j.length; g++) {
            var t = document.createElement("canvas");
            var v = t.getContext("2d");
            t.width = o;
            t.height = p + l;
            v.globalAlpha = k / 2;
            if (g == 2) {
                Kt(v, 0, l, o, p, h);
            } else {
                Kt(v, 0, 0, o, p + l, h);
            }
            Dt(v, "#081a19");
            v.globalAlpha = k;
            if (g == 2) {
                Kt(v, 0, l, o, p, h);
            } else {
                Kt(v, 0, 0, o, p, h);
            }
            Dt(v, j[g]);
            v.globalAlpha = 1;
            if (g == 2) {
                v.drawImage(n, 0, l);
            } else {
                v.drawImage(n, 0, 0);
            }
            s.push(Da(t));
        }
        return s;
    }
    function Hb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        Dt(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        Dt(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        Dt(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        Dt(f, d[2]);
        return e;
    }
    const qb = 1;
    function Ub(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 193;
        var a = c * 198;
        var m = c * 140;
        var n = c * 90;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(c * -25, c * 1);
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        j.translate(c * -30, c * -25);
        j.rotate(Math.PI / 3);
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        j.translate(c * 35, c * 30);
        j.rotate(Math.PI / 3);
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        return i;
    }
    function Yb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 135;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        Kt(j, -o, -b, l, g, h);
        Dt(j, f[0], f[1], d);
        return i;
    }
    function Kb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        Ft(f, i, j, h);
        Dt(f, d[0]);
        return e;
    }
    function Vb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        Ft(f, 0, 0, h);
        Dt(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ft(f, 0, 0, h);
        Dt(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ft(f, 0, 0, h);
        Dt(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        Ft(f, 0, 0, h);
        Dt(f, d[2]);
        return e;
    }
    function Xb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ft(f, 0, 0, h);
        Dt(f, d[0]);
        return e;
    }
    const Zb = 7;
    const $b = 6;
    function ed(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 105;
        var a = c * 125;
        var m = c * 4;
        var n = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var o = l / 2;
        var b = g / 2;
        i.width = k;
        i.height = a;
        j.save();
        j.globalAlpha = e ? 0.5 : 1;
        j.translate(k / 2 + c * 8, a / 2 + h);
        Kt(j, -o, -b, l, g, n);
        Dt(j, e ? f[0] : f[1]);
        j.translate(c * -130 + h, c * -128 + h);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        Dt(j, f[2]);
        j.restore();
        j.translate(k / 2 + 8, a / 2);
        j.globalAlpha = 1;
        Kt(j, -o, -b, l, g, n);
        Dt(j, f[3], f[4], m);
        j.translate(c * -130, c * -125);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        Dt(j, f[5], f[6], m);
        return i;
    }
    function id(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        Ft(e, 0, 0, a);
        Dt(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        Ft(e, 0, 0, a);
        Dt(e, c[1], c[2], h);
        return d;
    }
    function td(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        Ft(e, 0, 0, a);
        Dt(e, c[0], c[1], h);
        return d;
    }
    function nd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        Ft(e, 0, 0, a);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function od(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (b = c * 450) / 2;
        var a = (p = c * 145) / 2;
        var m = c * 10;
        var n = c * 300;
        var h = c * 30;
        var l = n / 2;
        var g = h / 2;
        var o = 4;
        if (f) {
            var b = c * 145;
            var p = c * 450;
            i.width = b;
            i.height = p;
            j.rotate(Math.PI / 2);
            j.save();
            j.globalAlpha = 0.5;
            Kt(j, c * 100, c * -110, n, h, m);
            Dt(j, e[0]);
            j.translate(c * 178, c * -98);
            Kt(j, -l, -g - c * 6, c * 100, c * 100, m);
            Dt(j, e[0]);
            j.translate(c * -50, c * 5);
            Kt(j, c * 220, c * -15, c * 90, c * 90, m);
            Dt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 250, c * -63);
            Kt(j, -l - c * 20, -g, n, h, m);
            Dt(j, e[1], e[2], o);
            j.translate(c * -70, c * -40);
            Kt(j, -l - c * 20, -g, c * 100, c * 100, m);
            Dt(j, e[3], e[4], o);
            j.translate(c * -70, c * 15);
            Kt(j, c * 220, c * -22, c * 90, c * 90, m);
            Dt(j, e[3], e[4], o);
            Kt(j, c * 230, c * -12, c * 55, c * 55, m);
            Dt(j, e[5]);
            j.translate(c * -70, 0);
            Kt(j, c * -15, c * -2, c * 60, c * 60, m);
            Dt(j, e[5]);
            j.restore();
        } else {
            i.width = b;
            i.height = p;
            j.save();
            j.globalAlpha = 0.5;
            j.translate(k, a + c * 10);
            Kt(j, -l, -g, n, h, m);
            Dt(j, e[0]);
            j.translate(c * -65, c * -25);
            Kt(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
            Dt(j, e[0]);
            j.translate(c * -35, c * -5);
            Kt(j, c * 220, c * -15, c * 90, c * 90, c * 15);
            Dt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 240, c * 70);
            Kt(j, -l, -g, n, h, m);
            Dt(j, e[1], e[2], o);
            j.translate(c * -60, c * -40);
            Kt(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
            Dt(j, e[3], e[4], o);
            j.translate(c * -55, c * 10);
            Kt(j, c * 220, c * -22, c * 90, c * 90, c * 15);
            Dt(j, e[3], e[4], o);
            Kt(j, c * 240, c * -12, c * 55, c * 55, c * 12);
            Dt(j, e[5]);
            j.translate(c * 45, c * 0);
            Kt(j, c * -145, c * -2, c * 60, c * 60, c * 12);
            Dt(j, e[5]);
            j.restore();
        }
        return i;
    }
    function ad(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function rd(c, e, f, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var a = c * 210;
        var m = c * 205;
        var n = c * 30;
        var h = c * 20;
        var l = c * 200;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        j.width = a;
        j.height = m;
        j.width = c * 419;
        j.height = c * 412;
        if (i == 1) {
            k.save();
            k.translate(c * 10, c * 0);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
            k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
            Dt(k, Yk, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
            k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
            k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
            Dt(k, pr, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
            k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
            Dt(k, Lq, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
            k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
            k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
            k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
            k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
            k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
            k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
            k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
            Dt(k, eo, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
            k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
            k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
            k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
            k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
            k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
            k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
            k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
            k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
            Dt(k, undefined, e[4], c * 3);
            k.restore();
        } else if (i == 2) {
            k.save();
            k.translate(c * 130, c * 35);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
            k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
            Dt(k, Tk, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
            k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
            k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
            Dt(k, fn, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
            Dt(k, ts, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
            k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
            k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
            k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
            Dt(k, ek, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
            k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
            k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
            k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
            k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
            Dt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
            k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
            k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
            k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
            k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
            Dt(k, Lq, e[4], c * 3);
            k.restore();
        }
        k.translate(j.width / 2, j.height / 2);
        if (!i) {
            k.globalAlpha = 0.5;
            Kt(k, -o, -b, l, g + h, n);
            Dt(k, e[0]);
            if (f) {
                k.rotate(Math.PI);
            }
            k.globalAlpha = 1;
            Kt(k, -o, -b, l, g, n);
            Dt(k, e[1], e[2], 4);
            k.globalAlpha = 1;
            Kt(k, c * 35 - o, c * 20 - b, l - c * 50, g - c * 50, n - c * 10);
            Dt(k, e[3]);
        }
        if (i == 3) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            Dt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            Dt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            Dt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            Dt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            Dt(k, e[5]);
        } else if (i == 4) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 30, c * 167);
            k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
            k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
            k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
            k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
            k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
            k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 26, c * 145);
            k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
            k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
            k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 13, c * 193);
            k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
            k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 335, c * 196);
            k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
            k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
            k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
            k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
            k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 349, c * 212);
            k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
            k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 46, c * 165);
            k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
            k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
            k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
            k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
            k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
            k.closePath();
            Dt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            Dt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            Dt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            Dt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            Dt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            Dt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 367, c * 164);
            k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
            k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
            k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
            k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
            k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
            k.closePath();
            Dt(k, e[4]);
        }
        return j;
    }
    function sd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            Dt(g, Gn, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        Dt(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Dt(g, Kr, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Dt(g, ek, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Dt(g, ma, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                Dt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                Dt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                Dt(g, Gn, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            Dt(g, eo, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            Dt(g, undefined, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            Dt(g, mh, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Dt(g, undefined, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Dt(g, undefined, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                Dt(g, undefined, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                Dt(g, Ch, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            Dt(g, Kr, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            Dt(g, undefined, c[2], b * 7);
        }
        return f;
    }
    function hd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Dt(e, mh, c[2], a * 4);
        Ft(e, a * 18, a * 38, a * 14.866068747318506);
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Dt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        Dt(e, c[6], c[7], a * 6);
        return d;
    }
    function ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        Dt(e, mh, c[2], a * 4);
        Ft(e, a * 18, a * 38, a * 14.866068747318506);
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        Dt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        return d;
    }
    const gd = 3;
    function ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Dt(e, c[0]);
        Ft(e, a * 160.5, a * 243.03125, a * 7);
        Dt(e, c[0]);
        Ft(e, a * 227.5, a * 242.03125, a * 7);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Dt(e, c[0], c[0], a * 5);
        Ft(e, a * 194, a * 298, a * 9);
        Dt(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        Dt(e, c[1], c[2], a * 5);
        Ft(e, a * 160.5, a * 243.03125, a * 7);
        Dt(e, c[1], c[2], a * 5);
        Ft(e, a * 227.5, a * 242.03125, a * 7);
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        Ft(e, a * 194, a * 298, a * 9);
        Dt(e, c[1], c[2], a * 7);
        return d;
    }
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Kt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        Dt(e, ek, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        Dt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        Dt(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        Kt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        Dt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        Dt(e, c[6]);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Kt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Dt(e, c[0]);
        Ft(e, a * 204, a * 693, a * 36.013886210738214);
        Dt(e, c[0]);
        Ft(e, a * 105, a * 518, a * 30);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        Kt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        Dt(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        Dt(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        Dt(e, c[6], c[4], a * 16);
        Ft(e, a * 204, a * 693, a * 36.013886210738214);
        Dt(e, c[6], c[4], a * 16);
        Ft(e, a * 105, a * 518, a * 30);
        Dt(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        Dt(e, c[6]);
        Ft(e, a * 204, a * 693, a * 17.029386365926403);
        Dt(e, c[7]);
        Ft(e, a * 106, a * 518, a * 12);
        Dt(e, c[7]);
        return d;
    }
    const vd = 13;
    const md = 2;
    function cd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Kt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Dt(e, c[0]);
        Ft(e, a * 122, a * 480, a * 18.439088914585774);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        Kt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        Dt(e, c[4], c[5], a * 12.5);
        Ft(e, a * 122, a * 480, a * 18.439088914585774);
        Dt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        Dt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        Dt(e, c[3]);
        return d;
    }
    function pd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        Dt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        Dt(d, eo, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        Dt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        Dt(d, ek, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        Dt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        Dt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function Cd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Dt(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Dt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Dt(g, ii, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Dt(g, gj, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Dt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Dt(g, Gn, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Dt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        Dt(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        Dt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        Dt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        Dt(g, ek, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        Dt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        Dt(g, Lq, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        Dt(g, _q, d[1], b * 20);
        Ft(g, b * 101, b * 155, b * 20.591260281974);
        Dt(g, d[3]);
        Ft(g, b * 180, b * 155, b * 20.591260281974);
        Dt(g, d[3]);
        Ft(g, b * 95, b * 148, b * 7.211102550927978);
        Dt(g, d[4]);
        Ft(g, b * 173, b * 148, b * 7.211102550927978);
        Dt(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            Dt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            Dt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            Dt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            Dt(g, d[2]);
        }
        return f;
    }
    const Td = 4;
    const fd = 2;
    function zd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Kt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Dt(e, c[0]);
        Ft(e, a * 121, a * 480, a * 20.396078054371138);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        Kt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        Dt(e, c[4], c[5], a * 12.5);
        Ft(e, a * 121, a * 480, a * 20.396078054371138);
        Dt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        return d;
    }
    function yd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Kt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        Kt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        Dt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        Dt(e, c[3]);
        return d;
    }
    function wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Kt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        It(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        Kt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        Dt(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        It(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        Dt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        Dt(e, c[3]);
        return d;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        return d;
    }
    function Ad(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        Dt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        Dt(e, c[0], c[1], a * 8);
        Ft(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        Dt(e, c[2]);
        Ft(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        Dt(e, c[2]);
        Ft(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        Dt(e, c[2]);
        Ft(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        Dt(e, c[2]);
        Ft(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        Dt(e, c[2]);
        Ft(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        return d;
    }
    function kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Dt(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Dt(e, undefined, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        Dt(e, ii, c[4], a * 4);
        return d;
    }
    function xd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        return d;
    }
    function Jd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        Dt(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        Ft(e, a * 107, a * 152, a * 9);
        Dt(e, c[6]);
        Ft(e, a * 105, a * 173, a * 9);
        Dt(e, c[6]);
        Ft(e, a * 87, a * 161, a * 9);
        Dt(e, c[6]);
        Ft(e, a * 106, a * 147, a * 4);
        Dt(e, c[7]);
        Ft(e, a * 104, a * 167, a * 4);
        Dt(e, c[7]);
        Ft(e, a * 86, a * 154, a * 4);
        Dt(e, c[7]);
        return d;
    }
    const Md = 5;
    function Bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        Dt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        Dt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        Dt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        Dt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        Dt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        Dt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        Dt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        Dt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        Dt(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        Dt(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        Dt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        Dt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        Dt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        Dt(e, pr, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        Dt(e, _q, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        Dt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        Dt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        Dt(e, eo, c[3], a * 4);
        return d;
    }
    function Ed(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        Ft(e, a * 42, a * 43, a * 24.758836806279895);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -10);
        Ft(e, a * 42, a * 43, a * 24.758836806279895);
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        Dt(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        Dt(e, c[7], c[8], a * 5);
        return d;
    }
    function Dd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Dt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Dt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Dt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Dt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Dt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        Dt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        Dt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        Dt(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    const Id = 0;
    function Sd(c, e, f, i, j, k, n, o, p, h, l = 0) {
        var g = document.createElement("canvas");
        var q = g.getContext("2d");
        k = k ? c * k : 0;
        var b = Math.floor(f * c);
        q.font = b + "px Baloo Paaji";
        q.lineJoin = "round";
        o *= c;
        var r = n ? o * 2 : 0;
        if (p) {
            var t = Math.min(q.measureText(e).width + c * 2 + r, p);
        } else {
            t = q.measureText(e).width + c * 2 + r + c * l * 2;
        }
        b = c * (b + k + l) + r;
        g.width = t;
        g.height = b;
        if (n) {
            q.fillStyle = n;
            Kt(q, 0, 0, t, b, o * 2);
            q.fill();
            q.translate(o, o);
        }
        q.textBaseline = "middle";
        q.font = f + "px Baloo Paaji";
        q.lineJoin = "round";
        if (j) {
            q.beginPath();
            q.fillStyle = j;
            q.fillText(e, 0, b / 2 + k - r / 2, t);
        }
        q.beginPath();
        if (h) {
            q.strokeStyle = h;
            q.lineWidth = l;
            q.strokeText(e, l, (b - r) / 2, t);
        }
        q.fillStyle = i;
        q.fillText(e, l, (b - r) / 2, t);
        return g;
    }
    function Qd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        It(g, 7, j, h);
        Dt(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            It(g, 6, j * 0.65, h * 0.65);
            Dt(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            It(g, 6, j * 0.45, h * 0.4);
            Dt(g, d[2]);
        }
        return f;
    }
    function _d(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        It(f, 5, h, i);
        Dt(f, d[2]);
        f.restore();
        Ft(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        Dt(f, d[2]);
        return e;
    }
    function Fd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        It(f, 8, i, j);
        Dt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        It(f, 8, i, j);
        Dt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        It(f, 5, i * 0.5, j * 0.4);
        Dt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        It(f, 5, i * 0.5, j * 0.4);
        Dt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        It(f, 5, i * 0.5, j * 0.4);
        Dt(f, d[2]);
        f.restore();
        return e;
    }
    function Rd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        It(f, 7, i, j);
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        It(f, 7, i, j);
        Dt(f, d[1]);
        It(f, 6, i * 0.65, j * 0.65);
        Dt(f, d[2]);
        return e;
    }
    const Gd = 8;
    function jd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Dt(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        Dt(f, d[1], d[2], j);
        return e;
    }
    function Wd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = c * b * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        Ft(f, 0, 0, c * b);
        Dt(f, d);
        return e;
    }
    function Ld(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        Dt(d, b[0], b[0], a * 4);
        return c;
    }
    function Mt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        Dt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        Dt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        Dt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        Dt(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        Dt(e, c[5], c[6], a * 12);
        Ft(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        Dt(e, c[7]);
        Ft(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        Dt(e, c[8]);
        return d;
    }
    function Ld(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Dt(d, Tk, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        Dt(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        Dt(d, undefined, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        Dt(d, Gn, b[2], a * 8);
        return c;
    }
    function Nd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Kt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Dt(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Dt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Kt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Dt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Kt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Dt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Kt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Dt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Kt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Dt(e, c[0], c[0], a * 6);
        Ft(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Dt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        Kt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        Dt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        Kt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        Dt(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        Kt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        Dt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        Kt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        Dt(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Kt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Dt(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        Kt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        Dt(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        Ft(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        Dt(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function Hd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Dt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Dt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Dt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Dt(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        Dt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        Dt(e, c[4]);
        Ft(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        Dt(e, c[5]);
        Ft(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        Dt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        Dt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        Dt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        Dt(e, ma, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        Dt(e, ol, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        Dt(e, Ch, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        Dt(e, undefined, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        Dt(e, undefined, c[9], a * 3);
        return d;
    }
    function qd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        It(e, 7, a * 60, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        It(e, 7, a * 60, a * 10);
        Dt(e, c[1], c[2], 4);
        e.rotate(0.64);
        It(e, 7, a * 40, a * 10);
        Dt(e, c[3], c[4], 4);
        e.rotate(0.12);
        It(e, 7, a * 23, a * 5);
        e.restore();
        Dt(e, c[5]);
        return d;
    }
    function Ud(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        Ft(f, 0, 0, k);
        Dt(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        Ft(f, 0, 0, k);
        Dt(f, d[1]);
        f.restore();
        return e;
    }
    function Yd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        Dt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        Dt(e, c[2], c[3], a * 1);
        return d;
    }
    function Kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Dt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Dt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Dt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Dt(e, Kr, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        Dt(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        Dt(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        Dt(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        Dt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        Dt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        Dt(e, pr, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        Dt(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        Dt(e, ts, c[1], a * 2);
        return d;
    }
    function Vd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Dt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Dt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Dt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Dt(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        Dt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        Dt(e, c[1], c[2], a * 7);
        return d;
    }
    function Xd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Dt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        Dt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        Dt(d, undefined, b[2], a * 4);
        return c;
    }
    function Zd(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            Dt(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            Dt(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            Dt(a, d[0]);
        }
        return g;
    }
    function $d(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        Ft(f, 0, 0, b * 60);
        Dt(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        Ft(f, 0, 0, b * 60);
        Dt(f, d[1], d[2], b * 4);
        Ft(f, 0, 0, b * 40);
        Dt(f, d[3]);
        Ft(f, 0, 0, b * 25);
        Dt(f, d[4], d[5], b * 8);
        return e;
    }
    function Nt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        It(e, 9, a * 60, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        It(e, 9, a * 60, a * 10);
        Dt(e, c[1], c[2], 4);
        e.rotate(-0.32);
        It(e, 9, a * 38, a * 10);
        Dt(e, c[3], c[4], 4);
        e.rotate(0.68);
        It(e, 9, a * 20, a * 8);
        Dt(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    const Ot = 7;
    const Pt = 13;
    function Qt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (ht === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            It(e, 7, a * 41, a * 10);
            e.restore();
            Dt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        It(e, 7, a * 41, a * 10);
        Dt(e, c[1], c[2], a * 4);
        It(e, 7, a * 35, a * 10);
        Dt(e, c[3], c[4], a * 4);
        It(e, 7, a * 23, a * 5);
        e.restore();
        Dt(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        Ft(e, a * 45, a * 29, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 45, a * 61, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 28, a * 45, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 62, a * 45, a * 7);
        Dt(e, c[5]);
        return d;
    }
    function Rt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (ht === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            It(e, 8, a * 41, a * 10);
            Dt(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        It(e, 8, a * 41, a * 10);
        Dt(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        It(e, 8, a * 33, a * 10);
        Dt(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        It(e, 8, a * 24, a * 8);
        Dt(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        Ft(e, a * 45, a * 29, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 45, a * 61, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 28, a * 45, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 62, a * 45, a * 7);
        Dt(e, c[5]);
        return d;
    }
    function St(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        It(e, 6, a * 146, a * 30);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        It(e, 6, a * 146, a * 30);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        It(e, 6, a * 105, a * 30);
        e.restore();
        Dt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        It(e, 6, a * 66, a * 30);
        e.restore();
        Dt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        It(e, 6, a * 31, a * 30);
        e.restore();
        Dt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Dt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Dt(e, _l, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Dt(e, undefined, c[2], a * 8);
        return d;
    }
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        It(e, 8, a * 60, a * 10);
        Dt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        It(e, 8, a * 60, a * 10);
        Dt(e, c[1], c[2], 4);
        e.rotate(0.56);
        It(e, 8, a * 40, a * 10);
        Dt(e, c[3], c[4], 4);
        e.rotate(0.28);
        It(e, 8, a * 28, a * 8);
        Dt(e, c[5]);
        e.restore();
        return d;
    }
    function Ut(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if (ht === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            Ft(e, a * 44, a * 55, a * 41);
            Dt(e, c[0]);
        }
        e.globalAlpha = 1;
        Ft(e, a * 44, a * 45, a * 41);
        Dt(e, c[1], c[2], a * 4);
        Ft(e, a * 44, a * 45, a * 31);
        Dt(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        Kt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        Kt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        Ft(e, a * 45, a * 29, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 45, a * 61, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 28, a * 45, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 62, a * 45, a * 7);
        Dt(e, c[5]);
        return d;
    }
    const Vt = 4;
    function Wt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        It(e, 6, a * 146, a * 30);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        It(e, 6, a * 146, a * 30);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        It(e, 6, a * 105, a * 30);
        e.restore();
        Dt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        It(e, 6, a * 66, a * 30);
        e.restore();
        Dt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        It(e, 7, a * 17, a * 8);
        e.restore();
        Dt(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        It(e, 7, a * 25, a * 8);
        e.restore();
        Dt(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        It(e, 7, a * 11, a * 8);
        e.restore();
        Dt(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        It(e, 7, a * 12, a * 8);
        e.restore();
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        Dt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        Dt(e, _l, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        Dt(e, undefined, c[2], a * 8);
        return d;
    }
    function Xt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if (ht === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            It(e, 9, a * 41, a * 10);
            e.restore();
            Dt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        It(e, 9, a * 41, a * 10);
        Dt(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        It(e, 9, a * 32, a * 10);
        Dt(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        It(e, 9, a * 23, a * 8);
        Dt(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        Kt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        Dt(e, c[4], c[4], a * 2);
        Ft(e, a * 45, a * 29, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 45, a * 61, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 28, a * 45, a * 7);
        Dt(e, c[5]);
        Ft(e, a * 62, a * 45, a * 7);
        Dt(e, c[5]);
        return d;
    }
    function Yt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        Dt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        Dt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        Dt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        Dt(e, c[2], c[3], a * 7);
        return d;
    }
    const Zt = 3;
    function $t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Kt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        Kt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        Dt(e, c[8]);
        return d;
    }
    function _t(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        Kt(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        Kt(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        Dt(e, c[0]);
        return d;
    }
    function au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Kt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        Kt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        Dt(e, ii, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        Dt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        Dt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        Dt(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        Dt(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        Dt(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        Dt(e, c[10]);
        return d;
    }
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        Dt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        Dt(e, c[3], c[4], a * 15);
        return d;
    }
    function cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        Kt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        Kt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        Dt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        Dt(e, c[8]);
        return d;
    }
    function du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Kt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        Kt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        Dt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        Dt(e, c[8]);
        return d;
    }
    function eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        Kt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        Kt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        Dt(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        Kt(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        Dt(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        Kt(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        Dt(e, undefined, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        Dt(e, ek, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        Dt(e, wj, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        Dt(e, ii, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        Dt(e, ek, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        Kt(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        Dt(e, wj, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        Kt(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        Dt(e, c[8]);
        return d;
    }
    function fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        Kt(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        Kt(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        Dt(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        Kt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        Kt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Dt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Dt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Kt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Kt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        return d;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        Dt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        Dt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        Kt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        Kt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        return d;
    }
    function hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        Dt(e, Xh, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        Dt(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        Dt(e, Lq, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        Dt(e, Tk, c[5], a * 8);
        return d;
    }
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Kt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        Kt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        Dt(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        Dt(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        Dt(e, undefined, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        Dt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        return d;
    }
    function ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        Dt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        Dt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        Dt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        Dt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        Dt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        Dt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        Dt(e, c[3], c[2], a * 10);
        return d;
    }
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Kt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        Kt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        Dt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        Dt(e, c[8]);
        return d;
    }
    const mu = 2;
    const nu = 5;
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        Dt(e, _q, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        Dt(e, ek, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        return d;
    }
    function pu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        Dt(e, c[0], c[1], 4);
        return d;
    }
    function qu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        Dt(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        Dt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        Dt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        Dt(e, c[0], c[1], 4);
        return d;
    }
    function ru(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        Ft(f, 0, 0, b * 60);
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            It(f, 3, b * 20, b * 4);
            Dt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        Ft(f, 0, 0, b * 60);
        Dt(f, d[3], d[4], b * 4);
        Ft(f, 0, 0, b * 40);
        Dt(f, d[5]);
        Ft(f, 0, 0, b * 25);
        Dt(f, d[6], d[7], b * 8);
        return e;
    }
    const su = 8;
    function tu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function uu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        Ft(d, a * 126.5, a * 134, a * 119);
        Dt(d, b[0]);
        d.globalAlpha = 1;
        Ft(d, a * 126.5, a * 124, a * 119);
        Dt(d, b[1], b[2], a * 4);
        Ft(d, a * 126.5, a * 127, a * 100);
        Dt(d, b[3]);
        d.globalAlpha = 0.5;
        Ft(d, a * 126.5, a * 135, a * 81);
        Dt(d, b[0]);
        d.globalAlpha = 1;
        Ft(d, a * 126.5, a * 125, a * 84);
        Dt(d, b[4], b[5], a * 4);
        Ft(d, a * 126.5, a * 125, a * 61);
        Dt(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        Ft(d, a * 126.5, a * 134, a * 40);
        Dt(d, b[8]);
        d.globalAlpha = 1;
        Ft(d, a * 126.5, a * 125, a * 40);
        Dt(d, b[9]);
        return c;
    }
    function vu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        Dt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Dt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Dt(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        Dt(e, Tk, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        Dt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        Dt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        Dt(e, c[3], c[4], a * 8);
        return d;
    }
    function wu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function xu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function yu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 41, a * 30, a * 14.7648230602334);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 369, a * 30, a * 15.556349186104045);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 364, a * 190, a * 15.620499351813308);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 41, a * 186, a * 15.556349186104045);
            Dt(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 41, a * 30, a * 14.7648230602334);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 369, a * 30, a * 15.556349186104045);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 364, a * 190, a * 15.620499351813308);
            Dt(e, b[3], b[3], a * 32);
            Ft(e, a * 41, a * 186, a * 15.556349186104045);
            Dt(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Dt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Dt(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Dt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Dt(e, b[2], b[0], a * 12);
        Ft(e, a * 41, a * 30, a * 14.7648230602334);
        Dt(e, b[2], b[0], a * 12);
        Ft(e, a * 369, a * 30, a * 15.556349186104045);
        Dt(e, b[2], b[0], a * 12);
        Ft(e, a * 364, a * 190, a * 15.620499351813308);
        Dt(e, b[2], b[0], a * 12);
        Ft(e, a * 41, a * 186, a * 15.556349186104045);
        Dt(e, b[2], b[0], a * 12);
        return d;
    }
    function zu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function Bu(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = Fu(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            Ft(g, b * 113, b * 120, b * 66);
            Dt(g, ek, d[4], b * 13);
            a = ud(b * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Dt(g, undefined, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            Ft(g, b * 113, b * 120, b * 66);
            Dt(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            Kt(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            Dt(g, "#dff2f7", "#187484", b * 7);
            Ft(g, b * 22, b * 82, b * 12);
            Dt(g, "#dff2f7", "#187484", b * 7);
            Ft(g, b * 145, b * 82, b * 12);
            Dt(g, "#dff2f7", "#187484", b * 7);
            a = jd(b * 0.5, Fh, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = jd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = jd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = Ud(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            Ft(g, b * 113, b * 120, b * 66);
            Dt(g, undefined, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            Kt(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            Dt(g, gj, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            Dt(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            Dt(g, undefined, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            Dt(g, Gn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            Dt(g, Ch, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            Dt(g, Lq, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            Dt(g, Lq, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            Dt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            Dt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            Dt(g, undefined, d[5], b * 14);
        }
        return f;
    }
    function Cu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        Ft(d, a * 86.5, a * 98, a * 80);
        Dt(d, b[0]);
        d.globalAlpha = 1;
        Ft(d, a * 86.5, a * 89, a * 81);
        Dt(d, b[1], b[2], a * 4);
        Ft(d, a * 86.5, a * 86, a * 59);
        Dt(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        Ft(d, a * 86.5, a * 95, a * 34);
        Dt(d, b[0]);
        d.globalAlpha = 1;
        Ft(d, a * 86.5, a * 89, a * 34);
        Dt(d, b[5]);
        return c;
    }
    function Du(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function Eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        Dt(e, c[2]);
        return d;
    }
    function Fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        Kt(e, 0, 0, a * 400, a * 220, a * 30);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        Dt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        Dt(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        Dt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        Dt(e, c[3], c[1], a * 12);
        Ft(e, a * 41, a * 30, a * 14.7648230602334);
        Dt(e, c[3], c[1], a * 12);
        Ft(e, a * 369, a * 30, a * 15.556349186104045);
        Dt(e, c[3], c[1], a * 12);
        Ft(e, a * 364, a * 190, a * 15.620499351813308);
        Dt(e, c[3], c[1], a * 12);
        Ft(e, a * 41, a * 186, a * 15.556349186104045);
        Dt(e, c[3], c[1], a * 12);
        return d;
    }
    function Gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        Kt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        Kt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        Kt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        Kt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        Kt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        Kt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        Kt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        Kt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        Dt(e, c[3], c[4], a * 3);
        return d;
    }
    function Hu(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            Dt(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            Dt(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            Dt(d, b[0]);
        }
        return e;
    }
    function Iu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Dt(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        Dt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        Dt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        Dt(d, b[1], b[2], a * 4);
        Ft(d, a * 51, a * 91, a * 9);
        Dt(d, b[3]);
        Ft(d, a * 95, a * 91, a * 9);
        Dt(d, b[3]);
        Ft(d, a * 91, a * 89, a * 4);
        Dt(d, b[4]);
        Ft(d, a * 47, a * 89, a * 4);
        Dt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        Dt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        Dt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        Dt(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        Dt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        Dt(d, b[6]);
        return c;
    }
    function Ku(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        Kt(d, 0, 0, 20, 35, 7);
        Dt(d, b[0]);
        return c;
    }
    function Lu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        It(f, 7, b * 60, b * 10);
        f.restore();
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            It(f, 3, b * 21, b * 4);
            Dt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        It(f, 7, b * 60, b * 10);
        Dt(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        It(f, 7, b * 40, b * 10);
        Dt(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        It(f, 7, b * 23, b * 5);
        f.restore();
        Dt(f, d[7]);
        return e;
    }
    function Mu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Dt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Dt(d, b[3]);
        Ft(d, a * 103, a * 110, a * 11);
        Dt(d, b[4]);
        Ft(d, a * 55, a * 111, a * 11);
        Dt(d, b[4]);
        Ft(d, a * 99, a * 107, a * 5);
        Dt(d, b[1]);
        Ft(d, a * 51, a * 108, a * 5);
        Dt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        Dt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        Dt(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        Dt(d, gj, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        Dt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        Dt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        Dt(d, b[3]);
        return c;
    }
    function Nu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function Ou(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        It(f, 7, b * 60, b * 10);
        f.restore();
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            It(f, 3, b * 21, b * 4);
            Dt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        It(f, 8, b * 60, b * 10);
        Dt(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        It(f, 8, b * 40, b * 10);
        Dt(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        It(f, 8, b * 28, b * 8);
        Dt(f, d[7]);
        f.restore();
        return e;
    }
    function Pu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    function em(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        It(f, 7, b * 60, b * 10);
        f.restore();
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            It(f, 3, b * 21, b * 4);
            Dt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        It(f, 9, b * 60, b * 10);
        Dt(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        It(f, 9, b * 38, b * 10);
        Dt(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        It(f, 9, b * 20, b * 8);
        Dt(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        Ft(d, a * 74.5, a * 85, a * 66);
        Dt(d, b[0]);
        d.globalAlpha = 1;
        Ft(d, a * 75.5, a * 72.5, a * 67);
        Dt(d, b[1], b[2], a * 4);
        Ft(d, a * 75.5, a * 73.5, a * 54);
        Dt(d, b[3]);
        d.globalAlpha = 0.5;
        Ft(d, a * 74.5, a * 80.5, a * 39);
        Dt(d, b[4]);
        d.globalAlpha = 1;
        Ft(d, a * 74.5, a * 74.5, a * 37);
        Dt(d, b[5]);
        return c;
    }
    function tm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        Dt(d, b[0]);
        return c;
    }
    const nm = 3;
    function om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Dt(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        Dt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        Dt(e, undefined, c[1], a * 4);
        Ft(e, a * 58, a * 50, a * 5);
        Dt(e, c[4]);
        Ft(e, a * 43, a * 65, a * 5);
        Dt(e, c[4]);
        Ft(e, a * 58, a * 73, a * 5);
        Dt(e, c[4]);
        Ft(e, a * 58, a * 50, a * 2);
        Dt(e, c[5]);
        Ft(e, a * 43, a * 65, a * 2);
        Dt(e, c[5]);
        Ft(e, a * 58, a * 73, a * 2);
        Dt(e, c[5]);
        return d;
    }
    function am(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        Dt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        Dt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        Dt(d, b[2]);
        return c;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Kt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Kt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        Kt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        Kt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        Dt(e, c[2]);
        return d;
    }
    function sm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        Dt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        Dt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        Dt(d, b[2]);
        return c;
    }
    function hm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        Kt(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        Dt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        Kt(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        Dt(e, c[2], c[1], a * 4);
        Ft(e, a * 71, a * 44.375, a * 16.55294535724685);
        Dt(e, c[2], c[1], a * 4);
        Ft(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        Dt(e, c[2], c[1], a * 4);
        return d;
    }
    function lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        Dt(e, undefined, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Dt(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        Dt(e, ol, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        Dt(e, eo, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        Kt(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        Dt(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        Kt(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        Dt(e, c[8], c[2], a * 4);
        Ft(e, a * 87, a * 39, a * 4.123105625617661);
        Dt(e, c[9], c[2], a * 4);
        Ft(e, a * 87, a * 60, a * 4.242640687119285);
        Dt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        Dt(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        Dt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        Dt(e, c[9], c[2], a * 4);
        Ft(e, a * 50, a * 80, a * 5);
        Dt(e, c[9], c[2], a * 4);
        Ft(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        Dt(e, c[9], c[2], a * 4);
        Ft(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        Dt(e, c[9], c[2], a * 4);
        return d;
    }
    function gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Dt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Dt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        Dt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        Dt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        Dt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        Dt(d, b[1]);
        Ft(d, a * 102, a * 269, a * 11);
        Dt(d, b[3]);
        Ft(d, a * 98, a * 266, a * 5);
        Dt(d, b[6]);
        Ft(d, a * 168, a * 269, a * 11);
        Dt(d, b[3]);
        Ft(d, a * 164, a * 266, a * 5);
        Dt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        Dt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        Dt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        Dt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        Dt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        Dt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        Dt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        Dt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        Dt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        Dt(d, b[7]);
        return c;
    }
    const um = 5;
    function bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        Kt(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        Dt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        Kt(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        Dt(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        Dt(e, c[6], c[2], a * 4);
        return d;
    }
    function dm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        Ft(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        Dt(d, _q, c[2], a * 4);
        Ft(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        Dt(d, undefined, c[1], a * 4);
        Ft(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        Dt(d, undefined, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        Kt(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        Dt(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        It(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        Dt(d, c[3]);
        Ft(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        Dt(d, c[3]);
        return e;
    }
    function vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        Kt(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        Dt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        Dt(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        Kt(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        Dt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        Dt(e, undefined, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        Dt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        Dt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        Dt(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        Kt(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        Dt(e, c[5]);
        return d;
    }
    function mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        Dt(e, c[1], c[2], a * 10);
        return d;
    }
    function cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        Kt(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        Dt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        Kt(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        Dt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        Kt(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        Dt(e, Ch, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        Kt(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        Kt(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        Dt(e, c[6], c[7], a * 4);
        return d;
    }
    const pm = 8;
    function Cm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        Kt(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        Dt(f, c[2]);
        Kt(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        Dt(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = ym(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = ym(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function Tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        It(e, 6, a * 40, a * 10);
        e.restore();
        Dt(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        It(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        Dt(e, c[2], c[3], a * 5);
        return d;
    }
    function fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        It(e, 6, a * 43, a * 10);
        e.restore();
        Dt(e, c[0], c[1], a * 3);
        return d;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Kt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Dt(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Kt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Dt(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Kt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Dt(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Kt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Dt(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Kt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Dt(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Kt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Dt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        Kt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        Dt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        Kt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        Dt(e, fn, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        Kt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        Dt(e, Lq, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        Kt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        Dt(e, eo, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        Kt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        Dt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        Kt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        Dt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        Dt(e, ek, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        It(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Dt(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        It(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Dt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        It(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        Dt(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        It(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        Dt(e, c[7], c[8], a * 7);
        return d;
    }
    function ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            Kt(e, a * 0, a * 5, a * 90, a * 60, 10);
            Dt(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            Ft(e, a * 25, a * 40, a * 10);
            e.fill();
            Ft(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            Kt(e, 0, 0, a * 90, a * 60, a * 10);
            Dt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Ft(e, a * 25, a * 40, a * 10);
            e.fill();
            Ft(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            Dt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            Dt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            Dt(e, b[1]);
            e.restore();
            e.save();
            Kt(e, 0, a * 15, a * 90, a * 50, a * 10);
            Dt(e, b[0]);
            Kt(e, 0, a * 10, a * 90, a * 50, a * 10);
            Dt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            Ft(e, a * 25, a * 40, a * 10);
            e.fill();
            Ft(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        Ft(e, a * 98, a * 99, a * 100);
        Dt(e, c[0]);
        e.globalAlpha = 0.5;
        Ft(e, a * 98, a * 99, a * 90);
        Dt(e, c[1]);
        return d;
    }
    function Pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = 0;
        Ft(e, a * 178.5, a * 172.828125, a * 150);
        Dt(e, undefined, c[0], a * 65);
        Ft(e, a * 178.5, a * 172.828125, a * 150);
        Dt(e, ts, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Kt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Kt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Kt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        Dt(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Dt(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        Ft(e, a * 178.5, a * 172.828125, a * 150);
        Dt(e, undefined, c[2], a * 95);
        Ft(e, a * 178.5, a * 172.828125, a * 150);
        Dt(e, undefined, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        Kt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        Dt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        Kt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        Dt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        Kt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        Dt(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        Dt(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        Dt(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        Dt(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function Am(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        Ft(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Dt(g, d[0], d[0], b * 8);
        Ft(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Dt(g, d[0], d[0], b * 8);
        Ft(g, b * 174, b * 87.484375, b * 6);
        Dt(g, d[0]);
        Ft(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 30, b * 87.484375, b * 6);
        Dt(g, d[0]);
        Ft(g, b * 100, b * 30, b * 20.8806130178211);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 100, b * 30, b * 12.165525060596439);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 100, b * 30, b * 6);
        Dt(g, d[0]);
        Ft(g, b * 100, b * 130, b * 20.8806130178211);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 100, b * 130, b * 12.165525060596439);
        Dt(g, d[0], d[0], b * 4);
        Ft(g, b * 100, b * 130, b * 6);
        Dt(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        Kt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Dt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        Kt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Dt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        Kt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        Ft(g, b * 174, b * 87.984375, b * 20.8806130178211);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 174, b * 87.984375, b * 12.165525060596439);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 174, b * 87.484375, b * 6);
        Dt(g, d[2]);
        Ft(g, b * 30, b * 87.984375, b * 20.8806130178211);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 30, b * 87.984375, b * 12.165525060596439);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 30, b * 87.484375, b * 6);
        Dt(g, d[2]);
        Ft(g, b * 102, b * 30, b * 20.8806130178211);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 102, b * 30, b * 12.165525060596439);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 102, b * 30, b * 6);
        Dt(g, d[1]);
        Ft(g, b * 102, b * 130, b * 20.8806130178211);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 102, b * 130, b * 12.165525060596439);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 102, b * 130, b * 6);
        Dt(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        Kt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        Dt(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        Kt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        Dt(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        Kt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        Dt(g, d[2], d[1], b * 8);
        Ft(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 135, b * 107.36605834960938, b * 13);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        Dt(g, d[2]);
        Ft(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 70, b * 107.36605834960938, b * 13);
        Dt(g, d[1], d[3], b * 8);
        Ft(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        Dt(g, d[2]);
        return f;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Dt(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        Dt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        Dt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        Dt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        Dt(e, c[3]);
        return d;
    }
    function xm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            Ft(e, a * 100.5, a * 82, a * 74.92746655359852);
            Dt(e, c[0], c[0], a * 4);
            Ft(e, a * 100.5, a * 82, a * 65.9417374971317);
            Dt(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            Ft(e, a * 100.5, a * 82, a * 74.92746655359852);
            Dt(e, c[1], c[3], a * 4);
            Ft(e, a * 100.5, a * 82, a * 65.9417374971317);
            Dt(e, c[1], c[2], a * 4);
            Ft(e, a * 100.5, a * 82, a * 35.9417374971317);
            Dt(e, c[1], c[2], a * 20);
            Ft(e, a * 100.5, a * 82, a * 15.9417374971317);
            Dt(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = Am(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = Am(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = Am(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    const Jm = 3;
    function Mm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        Kt(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        Dt(e, c[0]);
        Kt(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        Dt(e, c[1], c[2], b * 4);
        var a = Lt(-Math.PI / 5, ed(b * 0.5, ra, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = Lt(Math.PI / 4, Gu(b * 0.55, mk, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function Bm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ft(e, a * 220, a * 201, a * 170.41713528867922);
        Dt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ft(e, a * 220, a * 201, a * 170.41713528867922);
        Dt(e, c[1], c[2], a * 6);
        Ft(e, a * 220, a * 201, a * 130);
        Dt(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        Dt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        Dt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        Dt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        Dt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        Dt(e, ts, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        Dt(e, ma, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        Dt(e, Yk, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        Dt(e, _q, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        Dt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        Dt(e, wj, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        Dt(e, Tk, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        Dt(e, undefined, c[6], a * 6);
        Ft(e, a * 222, a * 199, a * 120.74767078498864);
        Dt(e, undefined, c[3], a * 40);
        Ft(e, a * 220, a * 200, a * 95.44108130150245);
        Dt(e, Kr, c[2], a * 15);
        Ft(e, a * 220, a * 201, a * 85);
        Dt(e, undefined, c[4], a * 10);
        e.globalAlpha = 0.5;
        Ft(e, a * 220, a * 201, a * 82);
        Dt(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ft(e, a * 63, a * 136, a * 49.193495504995376);
        Dt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ft(e, a * 63, a * 136, a * 49.193495504995376);
        Dt(e, c[8], c[2], a * 4);
        Ft(e, a * 63, a * 137, a * 25.632011235952593);
        Dt(e, c[7], c[2], a * 4);
        return d;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Kt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Dt(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Kt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Dt(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Kt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Dt(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        Kt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        Dt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        Kt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        Dt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        Kt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        Dt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        Dt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        Dt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        Dt(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        Dt(e, c[11], c[10], a * 3);
        return d;
    }
    function Dm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        Ft(e, a * 69, a * 64, a * 48.16637831516918);
        Dt(e, c[1]);
        e.globalAlpha = 0.7;
        Ft(e, a * 69, a * 64, a * 38.23105625617661);
        Dt(e, c[2]);
        e.globalAlpha = 0.7;
        Ft(e, a * 69, a * 64, a * 32.01562118716424);
        Dt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        Dt(e, c[3]);
        return d;
    }
    function Im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        Ft(d, a * 55, a * 55, a * 55);
        Dt(d, b[0]);
        return c;
    }
    function Sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Dt(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Kt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        Dt(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        Dt(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        Dt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        Kt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 3);
        return d;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ft(e, a * 220, a * 201, a * 170.41713528867922);
        Dt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ft(e, a * 220, a * 201, a * 170.41713528867922);
        Dt(e, c[1], c[2], a * 6);
        Ft(e, a * 220, a * 201, a * 130);
        Dt(e, c[11], c[2], a * 6);
        Ft(e, a * 222, a * 199, a * 120.74767078498864);
        Dt(e, Ch, c[3], a * 40);
        Ft(e, a * 220, a * 200, a * 95.44108130150245);
        Dt(e, undefined, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        Ft(e, a * 63, a * 136, a * 49.193495504995376);
        Dt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        Ft(e, a * 63, a * 136, a * 49.193495504995376);
        Dt(e, c[8], c[2], a * 4);
        Ft(e, a * 63, a * 137, a * 25.632011235952593);
        Dt(e, c[7], c[2], a * 4);
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        Kt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Dt(e, c[0]);
        Kt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Dt(e, c[0]);
        Kt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[0]);
        Kt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[0]);
        Kt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        Kt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        Dt(e, c[1]);
        Kt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        Dt(e, c[1]);
        Kt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[2], c[3], a * 4);
        Kt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[2], c[3], a * 4);
        Kt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        Dt(e, c[2], c[3], a * 4);
        return d;
    }
    function Fm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        Dt(d, undefined, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        Dt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        Dt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        Dt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        Dt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        Dt(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        Dt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        Dt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        Dt(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        Dt(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        Dt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        Dt(d, b[11]);
        Ft(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        Dt(d, b[12]);
        Ft(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        Dt(d, b[13]);
        Ft(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        Dt(d, b[12]);
        Ft(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        Dt(d, b[13]);
        return c;
    }
    function Rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Dt(e, gj, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Dt(e, undefined, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        Dt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        Dt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        Dt(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        Dt(e, undefined, c[3], a * 4);
        return d;
    }
    function Gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Dt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Dt(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Dt(e, _q, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Dt(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Dt(e, c[3], c[2], a * 19);
        Ft(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        Dt(e, c[4]);
        Ft(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        Dt(e, c[4]);
        Ft(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        Dt(e, c[4]);
        Ft(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        Dt(e, c[4]);
        Ft(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        Dt(e, c[4]);
        Ft(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        Dt(e, c[4]);
        Ft(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        Dt(e, c[4]);
        Ft(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        Dt(e, c[4]);
        Ft(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        Dt(e, c[4]);
        Ft(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        Dt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Dt(e, c[5]);
        return d;
    }
    function jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        Dt(e, Kr, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        Dt(e, Gn, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        Dt(e, Ch, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        Dt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        Dt(e, Lq, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        Dt(e, mh, c[4], a * 6);
        return d;
    }
    const Wm = 3;
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Dt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        Ft(e, a * 108.5, a * 148.421875, a * 9);
        Dt(e, c[5]);
        Ft(e, a * 106.5, a * 144.421875, a * 3);
        Dt(e, c[6]);
        Ft(e, a * 46.5, a * 148.421875, a * 9);
        Dt(e, c[5]);
        Ft(e, a * 44.5, a * 144.421875, a * 3);
        Dt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        Dt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        Dt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        Dt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        Dt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        Dt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        Dt(e, c[3], c[2], a * 4);
        return d;
    }
    function Om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        Dt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        Dt(e, pr, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        Dt(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        Dt(e, Yk, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        Dt(e, c[2]);
        return d;
    }
    function Nm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        Dt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Dt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        Dt(e, undefined, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        Dt(e, c[4], c[5], a * 5);
        return d;
    }
    function Hm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        Dt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Dt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        Dt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        Dt(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        Dt(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        Dt(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        Dt(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        Dt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        Dt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        Dt(g, Lq, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        Dt(g, wj, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        Dt(g, Gn, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        Dt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        Dt(g, ma, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        Dt(g, undefined, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            Dt(g, gj, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            Dt(g, undefined, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            Dt(g, fn, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            Dt(g, Xh, d[5], b * 6);
            Ft(g, b * 86, b * 114.39999389648438, b * 4.5);
            Dt(g, d[1], d[5], b * 6);
            Ft(g, b * 121, b * 114.39999389648438, b * 4.5);
            Dt(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Dt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        Dt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        Dt(e, c[4], c[5], a * 6);
        return d;
    }
    function Um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Kt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        Kt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        Dt(e, undefined, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Kt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        Kt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        Dt(e, undefined, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        Dt(e, undefined, c[1], a * 10);
        return d;
    }
    function Ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Kt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Dt(e, c[0]);
        Ft(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Kt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Dt(e, Kr, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Dt(e, fn, c[3], a * 6);
        Ft(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        Dt(e, undefined, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        Kt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        Dt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        Dt(e, c[1]);
        Ft(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        Dt(e, c[2], c[1], a * 4);
        Ft(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        Dt(e, c[3], c[1], a * 4);
        Ft(e, a * 78, a * 44, a * 20);
        Dt(e, c[4]);
        return d;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Dt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        Dt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        Dt(e, ek, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        Dt(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        Dt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        Dt(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        Dt(e, c[0], c[1], a * 20);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        Kt(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        Dt(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Kt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        Kt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Kt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        Kt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Kt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        Kt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Kt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        Kt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Kt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        Kt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Kt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        Kt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Kt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        Kt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Kt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        Kt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        Dt(e, c[2], c[3], a * 3);
        return d;
    }
    function Xm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        Kt(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        Kt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        Dt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        Kt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Dt(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        Kt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        Dt(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        Kt(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        Dt(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        Kt(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        Dt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        Kt(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        Dt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        Kt(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        Dt(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        Kt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        Kt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        Dt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        Kt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        Kt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        Dt(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        Kt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Dt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        Kt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        Dt(d, b[2]);
        return c;
    }
    function Zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        Dt(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        Dt(e, c[1]);
        return d;
    }
    function $m(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        Dt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        Ft(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Dt(f, d[5], fn, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        Dt(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            Ft(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            Dt(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            Ft(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            Dt(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        Ft(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        Dt(f, eo, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        Dt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        Dt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        Dt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        Dt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Dt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        Dt(f, d[4], d[2], b * 12);
        return e;
    }
    function ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        Dt(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        Dt(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        Dt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        Dt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        Dt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        Dt(e, c[2], c[3], a * 12);
        return d;
    }
    const ic = 3;
    function tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        Dt(e, c[1], c[2], a * 6);
        return d;
    }
    function nc() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            for (var c = 0, d = 0; c < a.length; c++) {
                var e = a.charAt(c);
                if (e !== "_" && c !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, d);
                    }
                    d++;
                }
            }
            return b;
        }
        ⲆᐃⲆⲆΔΔΔᐃᐃ();
        Δⵠ[1026] = [ⵠᐃ.ᐃΔⵠΔⲆⵠᐃ, ⵠᐃ.ⵠΔΔⲆⵠⵠⵠ];
        Δⵠ[1025] = [];
        Δⵠ[1025][0] = [];
        Δⵠ[1025][0][b("000_010_000")] = [ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆⵠΔᐃ];
        Δⵠ[1025][0][b("000_010_010")] = Δⵠ[1025][0][b("000_010_000")];
        Δⵠ[1025][0][b("000_011_000")] = Δⵠ[1025][0][b("000_010_000")];
        Δⵠ[1025][0][b("000_011_010")] = [ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ];
        Δⵠ[1025][0][b("000_011_011")] = [ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ];
        Δⵠ[1025][0][b("000_110_000")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆⲆⵠΔᐃ];
        Δⵠ[1025][0][b("000_110_010")] = [ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ᐃΔⵠΔⵠΔᐃ];
        Δⵠ[1025][0][b("000_110_110")] = [ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ΔⵠΔⲆⵠⵠΔⵠΔ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ᐃΔⵠΔⵠΔᐃ];
        Δⵠ[1025][0][b("000_111_000")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ];
        Δⵠ[1025][0][b("000_111_111")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ];
        Δⵠ[1025][0][b("010_010_000")] = [ⵠᐃ.ⲆⲆⵠΔᐃ];
        Δⵠ[1025][0][b("010_010_010")] = [ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ];
        Δⵠ[1025][0][b("010_011_000")] = [ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆΔᐃⲆ];
        Δⵠ[1025][0][b("010_110_000")] = [ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("010_110_110")] = [ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("010_011_010")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_011_011")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("000_111_011")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_110_010")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_111_000")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_111_010")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_111_011")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_111_110")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("010_111_111")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("000_111_110")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("000_111_010")] = Δⵠ[1025][0][b("010_110_110")];
        Δⵠ[1025][0][b("011_011_000")] = [ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆΔᐃⲆ];
        Δⵠ[1025][0][b("011_011_010")] = [ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("011_011_011")] = [ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ];
        Δⵠ[1025][0][b("011_111_000")] = Δⵠ[1025][0][b("011_011_010")];
        Δⵠ[1025][0][b("011_111_010")] = [ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("011_111_011")] = Δⵠ[1025][0][b("011_111_010")];
        Δⵠ[1025][0][b("011_111_110")] = Δⵠ[1025][0][b("011_111_010")];
        Δⵠ[1025][0][b("011_111_111")] = [ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_110_000")] = [ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠⲆᐃᐃΔΔᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_110_010")] = [ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_110_110")] = [ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_111_000")] = [ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠⲆᐃᐃΔΔᐃ, ⵠᐃ.ⲆⵠᐃⲆⲆⲆⲆ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_111_110")] = [ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠᐃⲆⲆⲆⲆ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("110_111_111")] = Δⵠ[1025][0][b("110_111_110")];
        Δⵠ[1025][0][b("110_111_011")] = Δⵠ[1025][0][b("110_111_110")];
        Δⵠ[1025][0][b("110_111_010")] = Δⵠ[1025][0][b("110_111_110")];
        Δⵠ[1025][0][b("111_111_110")] = [ⵠᐃ.ⵠΔⵠΔⲆ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ⲆⵠᐃⲆⲆⲆⲆ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ];
        Δⵠ[1025][0][b("111_111_011")] = Δⵠ[1025][0][b("111_111_110")];
        Δⵠ[1025][0][b("111_111_000")] = [ⵠᐃ.ⵠⲆᐃᐃΔΔᐃ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ⲆⵠᐃⲆⲆⲆⲆ];
        Δⵠ[1025][0][b("111_111_111")] = [ⵠᐃ.ⲆⵠᐃΔᐃᐃⲆ, ⵠᐃ.ᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⵠᐃⵠⲆ, ⵠᐃ.ΔⵠΔᐃᐃᐃⵠ, ⵠᐃ.ᐃⵠΔⲆΔ, ⵠᐃ.ⵠᐃⵠⲆⵠ, ⵠᐃ.ⵠⲆⲆᐃⲆ, ⵠᐃ.ᐃⵠΔⲆⲆⵠΔ, ⵠᐃ.ⵠᐃᐃⲆᐃⵠΔ, ⵠᐃ.ΔΔⲆⵠΔ, ⵠᐃ.ⲆΔⲆⵠΔΔᐃ, ⵠᐃ.ΔΔⵠⵠⲆᐃⵠ, ⵠᐃ.ΔⲆⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⵠᐃΔ, ⵠᐃ.ᐃⲆⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆᐃⲆⲆⲆⲆⵠ, ⵠᐃ.ⲆⲆⵠΔᐃ, ⵠᐃ.ⵠᐃΔΔⲆ, ⵠᐃ.ⵠⵠΔⵠⵠΔⵠ, ⵠᐃ.ᐃᐃΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⵠⲆΔΔⵠⲆ, ⵠᐃ.ⵠΔⲆᐃΔ, ⵠᐃ.ⲆⲆΔᐃⲆ, ⵠᐃ.ⵠΔⵠΔⲆ];
        Δⵠ[1025][0][b("111_111_010")] = Δⵠ[1025][0][b("111_111_110")];
        Δⵠ[1025][1] = [];
        Δⵠ[1025][1][b("000_010_000")] = [ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔᐃⲆ];
        Δⵠ[1025][1][b("000_010_010")] = Δⵠ[1025][1][b("000_010_000")];
        Δⵠ[1025][1][b("000_011_000")] = Δⵠ[1025][1][b("000_010_000")];
        Δⵠ[1025][1][b("000_011_010")] = [ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ];
        Δⵠ[1025][1][b("000_011_011")] = [ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ];
        Δⵠ[1025][1][b("000_110_000")] = [ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ];
        Δⵠ[1025][1][b("000_110_010")] = [ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ᐃΔᐃⲆΔᐃⲆ];
        Δⵠ[1025][1][b("000_110_110")] = [ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⲆⲆΔΔᐃΔᐃⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ᐃΔᐃⲆΔᐃⲆ];
        Δⵠ[1025][1][b("000_111_000")] = [ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ];
        Δⵠ[1025][1][b("000_111_111")] = [ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ];
        Δⵠ[1025][1][b("010_010_000")] = [ⵠᐃ.ΔⵠΔᐃⲆ];
        Δⵠ[1025][1][b("010_010_010")] = [ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ];
        Δⵠ[1025][1][b("010_011_000")] = [ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔΔΔ];
        Δⵠ[1025][1][b("010_110_000")] = [ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("010_110_110")] = [ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("010_011_010")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_011_011")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("000_111_011")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_110_010")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_111_000")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_111_010")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_111_011")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_111_110")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("010_111_111")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("000_111_110")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("000_111_010")] = Δⵠ[1025][1][b("010_110_110")];
        Δⵠ[1025][1][b("011_011_000")] = [ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔΔΔ];
        Δⵠ[1025][1][b("011_011_010")] = [ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("011_011_011")] = [ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ];
        Δⵠ[1025][1][b("011_111_000")] = Δⵠ[1025][1][b("011_011_010")];
        Δⵠ[1025][1][b("011_111_010")] = [ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("011_111_011")] = Δⵠ[1025][1][b("011_111_010")];
        Δⵠ[1025][1][b("011_111_110")] = Δⵠ[1025][1][b("011_111_010")];
        Δⵠ[1025][1][b("011_111_111")] = [ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_110_000")] = [ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⵠⵠⵠΔΔᐃᐃ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_110_010")] = [ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_110_110")] = [ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_111_000")] = [ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⵠⵠⵠΔΔᐃᐃ, ⵠᐃ.ⵠⵠΔⵠⲆⲆⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_111_110")] = [ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ⵠⵠΔⵠⲆⲆⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("110_111_111")] = Δⵠ[1025][1][b("110_111_110")];
        Δⵠ[1025][1][b("110_111_011")] = Δⵠ[1025][1][b("110_111_110")];
        Δⵠ[1025][1][b("110_111_010")] = Δⵠ[1025][1][b("110_111_110")];
        Δⵠ[1025][1][b("111_111_110")] = [ⵠᐃ.ⲆΔⵠⲆⲆ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⵠⵠΔⵠⲆⲆⵠ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ];
        Δⵠ[1025][1][b("111_111_011")] = Δⵠ[1025][1][b("111_111_110")];
        Δⵠ[1025][1][b("111_111_000")] = [ⵠᐃ.ⵠⵠⵠΔΔᐃᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⵠⵠΔⵠⲆⲆⵠ];
        Δⵠ[1025][1][b("111_111_111")] = [ⵠᐃ.ⵠⵠⵠΔⵠᐃᐃ, ⵠᐃ.ⲆΔᐃΔⲆ, ⵠᐃ.ᐃⲆᐃΔⲆ, ⵠᐃ.ΔᐃᐃⲆᐃΔⲆ, ⵠᐃ.ⵠᐃᐃⵠΔ, ⵠᐃ.ᐃᐃⵠᐃΔ, ⵠᐃ.ΔⵠⲆⲆⲆ, ⵠᐃ.ⵠⲆᐃⲆΔΔⲆ, ⵠᐃ.ⵠΔᐃⲆΔⲆᐃ, ⵠᐃ.ⵠⲆΔⵠⲆ, ⵠᐃ.ΔᐃⵠΔᐃⵠⵠ, ⵠᐃ.ΔΔⲆⲆⲆⲆⲆ, ⵠᐃ.ⲆᐃⲆᐃⵠᐃⵠ, ⵠᐃ.ΔᐃⲆΔᐃ, ⵠᐃ.ⲆᐃΔΔⵠΔⲆ, ⵠᐃ.ⲆᐃⲆⲆⲆⵠⲆ, ⵠᐃ.ΔⵠΔᐃⲆ, ⵠᐃ.ⵠΔΔⲆⵠ, ⵠᐃ.ⵠΔᐃΔᐃᐃᐃ, ⵠᐃ.ⲆⵠⲆⵠΔΔᐃ, ⵠᐃ.ⲆⵠΔΔᐃᐃᐃ, ⵠᐃ.ⲆΔᐃⵠⵠ, ⵠᐃ.ΔⵠΔΔΔ, ⵠᐃ.ⲆΔⵠⲆⲆ];
        Δⵠ[1025][1][b("111_111_010")] = Δⵠ[1025][1][b("111_111_110")];
        Δⵠ[1024] = [];
        Δⵠ[1024][0] = [];
        Δⵠ[1024][0][b("000_010_000")] = ⵠᐃ.ΔⵠⲆⲆᐃΔᐃ;
        Δⵠ[1024][0][b("000_010_010")] = ⵠᐃ.ΔᐃⵠⵠⵠᐃΔ;
        Δⵠ[1024][0][b("000_011_000")] = ⵠᐃ.ΔΔⵠᐃΔⲆᐃ;
        Δⵠ[1024][0][b("000_011_010")] = ⵠᐃ.ⵠⲆΔⵠΔⲆᐃ;
        Δⵠ[1024][0][b("000_011_011")] = ⵠᐃ.ⲆⲆΔᐃⵠⵠⲆ;
        Δⵠ[1024][0][b("000_110_000")] = ⵠᐃ.ⵠⵠᐃΔᐃᐃⵠ;
        Δⵠ[1024][0][b("000_110_010")] = ⵠᐃ.ΔⲆⵠⲆΔⲆⲆ;
        Δⵠ[1024][0][b("000_110_110")] = ⵠᐃ.ⵠⲆΔΔⵠΔⵠ;
        Δⵠ[1024][0][b("000_111_000")] = ⵠᐃ.ᐃᐃⵠΔᐃΔⵠ;
        Δⵠ[1024][0][b("000_111_010")] = ⵠᐃ.ⲆᐃⲆⵠⲆΔᐃ;
        Δⵠ[1024][0][b("000_111_011")] = ⵠᐃ.ⵠⵠΔΔⲆᐃΔⵠⲆ;
        Δⵠ[1024][0][b("000_111_110")] = ⵠᐃ.ΔⲆⵠⵠΔᐃΔᐃⵠ;
        Δⵠ[1024][0][b("000_111_111")] = ⵠᐃ.ᐃᐃᐃⲆⵠⵠΔΔΔ;
        Δⵠ[1024][0][b("010_010_000")] = ⵠᐃ.ᐃᐃᐃⵠΔⵠΔΔΔ;
        Δⵠ[1024][0][b("010_010_010")] = ⵠᐃ.ΔⲆⵠΔΔⵠΔⵠⲆ;
        Δⵠ[1024][0][b("010_011_000")] = ⵠᐃ.ⵠⵠⵠⲆΔΔᐃⲆⲆ;
        Δⵠ[1024][0][b("010_011_010")] = ⵠᐃ.ⲆᐃΔⲆⲆⵠΔⵠΔ;
        Δⵠ[1024][0][b("010_011_011")] = ⵠᐃ.ⵠⲆⲆΔᐃᐃᐃΔⲆ;
        Δⵠ[1024][0][b("010_110_000")] = ⵠᐃ.ⵠⲆⲆΔⵠⲆᐃⵠⲆ;
        Δⵠ[1024][0][b("010_110_010")] = ⵠᐃ.ᐃᐃⵠⵠΔⲆΔⵠⲆ;
        Δⵠ[1024][0][b("010_110_110")] = ⵠᐃ.ⲆᐃⲆⲆΔᐃΔᐃⵠ;
        Δⵠ[1024][0][b("010_111_000")] = ⵠᐃ.ᐃⲆⲆΔⲆⵠⲆΔⵠ;
        Δⵠ[1024][0][b("010_111_010")] = ⵠᐃ.ⵠⵠΔᐃⵠⵠΔᐃΔ;
        Δⵠ[1024][0][b("010_111_011")] = ⵠᐃ.ⲆᐃⵠΔⲆΔΔⵠⲆ;
        Δⵠ[1024][0][b("010_111_110")] = ⵠᐃ.ⲆⲆⲆᐃⲆⵠⲆΔΔ;
        Δⵠ[1024][0][b("010_111_111")] = ⵠᐃ.ΔⵠⵠⵠⲆⵠⵠⲆⲆ;
        Δⵠ[1024][0][b("011_011_000")] = ⵠᐃ.ⵠᐃⲆᐃⲆⵠⲆⵠⵠ;
        Δⵠ[1024][0][b("011_011_010")] = ⵠᐃ.ⵠᐃΔΔⵠᐃⵠⵠΔ;
        Δⵠ[1024][0][b("011_011_011")] = ⵠᐃ.ΔⲆᐃᐃⲆΔⲆΔⲆ;
        Δⵠ[1024][0][b("011_111_000")] = ⵠᐃ.ⵠⵠΔⵠⵠᐃⵠᐃΔ;
        Δⵠ[1024][0][b("011_111_010")] = ⵠᐃ.ⵠⵠⵠᐃΔΔᐃⵠᐃ;
        Δⵠ[1024][0][b("011_111_011")] = ⵠᐃ.ᐃⵠⲆⲆⲆⵠΔΔⲆ;
        Δⵠ[1024][0][b("011_111_110")] = ⵠᐃ.ⵠⲆⲆᐃΔⲆΔⲆⵠ;
        Δⵠ[1024][0][b("011_111_111")] = ⵠᐃ.ᐃⵠᐃΔⵠᐃⲆΔᐃ;
        Δⵠ[1024][0][b("110_110_000")] = ⵠᐃ.ⵠⲆΔΔⵠⲆⵠⵠᐃ;
        Δⵠ[1024][0][b("110_110_010")] = ⵠᐃ.ᐃⲆΔΔΔⵠⵠᐃⲆ;
        Δⵠ[1024][0][b("110_110_110")] = ⵠᐃ.ΔⵠⲆⲆΔᐃᐃⲆⲆ;
        Δⵠ[1024][0][b("110_111_000")] = ⵠᐃ.ⲆⵠⲆᐃΔⵠⵠⵠⲆ;
        Δⵠ[1024][0][b("110_111_010")] = ⵠᐃ.ⲆⲆᐃⲆⵠΔᐃΔⵠ;
        Δⵠ[1024][0][b("110_111_011")] = ⵠᐃ.ΔᐃᐃⲆⲆⲆⲆΔΔ;
        Δⵠ[1024][0][b("110_111_110")] = ⵠᐃ.ⲆⵠΔⵠΔⵠΔΔⵠ;
        Δⵠ[1024][0][b("110_111_111")] = ⵠᐃ.ᐃⲆⲆⲆⲆᐃᐃⵠⲆ;
        Δⵠ[1024][0][b("111_111_011")] = ⵠᐃ.ΔⲆΔⵠΔᐃᐃ;
        Δⵠ[1024][0][b("111_111_110")] = ⵠᐃ.ΔΔⲆⲆⵠΔΔⲆⵠ;
        Δⵠ[1024][0][b("111_111_011")] = ⵠᐃ.ΔⲆΔⵠΔᐃᐃ;
        Δⵠ[1024][0][b("111_111_000")] = ⵠᐃ.ΔⵠΔᐃᐃᐃⵠⲆⵠ;
        Δⵠ[1024][0][b("111_111_111")] = ⵠᐃ.ᐃⲆⵠΔⵠⵠⵠⵠΔ;
        Δⵠ[1024][0][b("111_111_010")] = ⵠᐃ.ⲆᐃⵠᐃᐃⵠⲆΔⵠ;
        Δⵠ[1024][1] = [];
        Δⵠ[1024][1][b("000_010_000")] = ⵠᐃ.ᐃⵠⵠⵠΔⲆᐃⵠⲆ;
        Δⵠ[1024][1][b("000_010_010")] = ⵠᐃ.ΔⵠᐃᐃⵠΔΔⵠΔ;
        Δⵠ[1024][1][b("000_011_000")] = ⵠᐃ.ᐃⲆΔᐃⵠᐃΔᐃᐃ;
        Δⵠ[1024][1][b("000_011_010")] = ⵠᐃ.ᐃΔⵠΔⵠⲆⲆⵠⵠ;
        Δⵠ[1024][1][b("000_011_011")] = ⵠᐃ.ΔΔⲆΔⲆⲆΔΔᐃ;
        Δⵠ[1024][1][b("000_110_000")] = ⵠᐃ.ⲆᐃⲆⲆᐃΔⵠᐃⵠ;
        Δⵠ[1024][1][b("000_110_010")] = ⵠᐃ.ⵠΔᐃᐃⵠⲆⲆᐃⲆ;
        Δⵠ[1024][1][b("000_110_110")] = ⵠᐃ.ΔΔᐃⲆᐃⵠⵠⵠΔ;
        Δⵠ[1024][1][b("000_111_000")] = ⵠᐃ.ΔⲆⵠΔⵠⲆⲆᐃⲆ;
        Δⵠ[1024][1][b("000_111_010")] = ⵠᐃ.ΔᐃⵠΔΔⵠⵠᐃⲆ;
        Δⵠ[1024][1][b("000_111_011")] = ⵠᐃ.ΔⵠΔΔⵠⲆᐃΔⵠ;
        Δⵠ[1024][1][b("000_111_110")] = ⵠᐃ.ΔΔⵠᐃⵠᐃⵠᐃΔ;
        Δⵠ[1024][1][b("000_111_111")] = ⵠᐃ.ΔⲆⵠⵠΔⵠⵠΔΔ;
        Δⵠ[1024][1][b("010_010_000")] = ⵠᐃ.ⵠⵠΔᐃᐃⲆⵠᐃⵠ;
        Δⵠ[1024][1][b("010_010_010")] = ⵠᐃ.ⵠΔᐃΔⵠᐃⵠⵠⵠ;
        Δⵠ[1024][1][b("010_011_000")] = ⵠᐃ.ⲆⵠⵠⵠᐃᐃⲆΔⲆ;
        Δⵠ[1024][1][b("010_011_010")] = ⵠᐃ.ΔⲆᐃⵠⲆΔⵠᐃⲆ;
        Δⵠ[1024][1][b("010_011_011")] = ⵠᐃ.ⵠⵠᐃᐃⲆⲆⲆΔⲆ;
        Δⵠ[1024][1][b("010_110_000")] = ⵠᐃ.ΔⵠᐃⵠᐃΔⲆᐃⵠ;
        Δⵠ[1024][1][b("010_110_010")] = ⵠᐃ.ᐃᐃᐃⲆⲆⲆᐃⵠΔ;
        Δⵠ[1024][1][b("010_110_110")] = ⵠᐃ.ⵠⲆⲆᐃᐃΔⵠᐃⲆ;
        Δⵠ[1024][1][b("010_111_000")] = ⵠᐃ.ΔⲆⲆᐃⵠⲆⵠΔⲆ;
        Δⵠ[1024][1][b("010_111_010")] = ⵠᐃ.ⵠⵠⵠΔⲆⵠΔⲆⵠ;
        Δⵠ[1024][1][b("010_111_011")] = ⵠᐃ.ΔⲆΔᐃΔᐃⵠᐃⲆ;
        Δⵠ[1024][1][b("010_111_110")] = ⵠᐃ.ⲆΔΔΔⵠΔᐃΔᐃ;
        Δⵠ[1024][1][b("010_111_111")] = ⵠᐃ.ⲆΔΔᐃⵠⵠⵠⵠⲆ;
        Δⵠ[1024][1][b("011_011_000")] = ⵠᐃ.ⲆᐃⲆᐃᐃᐃΔΔΔ;
        Δⵠ[1024][1][b("011_011_010")] = ⵠᐃ.ΔⲆⲆⲆᐃᐃΔΔⲆ;
        Δⵠ[1024][1][b("011_011_011")] = ⵠᐃ.ⲆΔⲆⵠᐃⵠΔΔⲆ;
        Δⵠ[1024][1][b("011_111_000")] = ⵠᐃ.ᐃΔⲆΔⲆΔⲆⲆᐃ;
        Δⵠ[1024][1][b("011_111_010")] = ⵠᐃ.ΔⲆⵠᐃⵠΔᐃΔΔ;
        Δⵠ[1024][1][b("011_111_011")] = ⵠᐃ.ᐃᐃⵠᐃⵠᐃᐃⵠᐃ;
        Δⵠ[1024][1][b("011_111_110")] = ⵠᐃ.ⵠᐃΔⵠⲆⲆⵠⵠⲆ;
        Δⵠ[1024][1][b("011_111_111")] = ⵠᐃ.ⵠⵠⵠⲆⵠⵠΔΔⲆ;
        Δⵠ[1024][1][b("110_110_000")] = ⵠᐃ.ⲆΔⲆᐃΔⲆⵠΔᐃ;
        Δⵠ[1024][1][b("110_110_010")] = ⵠᐃ.ΔᐃΔΔⲆΔᐃᐃⵠ;
        Δⵠ[1024][1][b("110_110_110")] = ⵠᐃ.ⵠⲆᐃⵠΔᐃⵠᐃᐃ;
        Δⵠ[1024][1][b("110_111_000")] = ⵠᐃ.ΔⵠᐃⲆⲆΔⵠᐃⵠ;
        Δⵠ[1024][1][b("110_111_010")] = ⵠᐃ.ΔⲆᐃΔⲆΔⵠⵠᐃ;
        Δⵠ[1024][1][b("110_111_011")] = ⵠᐃ.ᐃⲆⲆΔΔΔᐃⵠΔ;
        Δⵠ[1024][1][b("110_111_110")] = ⵠᐃ.ⵠⲆΔⵠⲆⲆⲆⵠⵠ;
        Δⵠ[1024][1][b("110_111_111")] = ⵠᐃ.ᐃᐃⵠⲆᐃᐃΔⵠⵠ;
        Δⵠ[1024][1][b("111_111_011")] = ⵠᐃ.ⲆᐃΔⲆⵠⲆΔ;
        Δⵠ[1024][1][b("111_111_110")] = ⵠᐃ.ⵠⵠⲆⵠΔᐃⲆᐃⵠ;
        Δⵠ[1024][1][b("111_111_011")] = ⵠᐃ.ⲆᐃΔⲆⵠⲆΔ;
        Δⵠ[1024][1][b("111_111_000")] = ⵠᐃ.ⵠΔⵠᐃⵠⵠⵠⲆᐃ;
        Δⵠ[1024][1][b("111_111_111")] = ⵠᐃ.ΔΔⵠⵠⲆᐃⵠΔⲆ;
        Δⵠ[1024][1][b("111_111_010")] = ⵠᐃ.ⲆⵠᐃⲆᐃΔᐃⵠⵠ;
        Δⵠ[32] = [];
        Δⵠ[32][0] = ⵠᐃ.ᐃⲆⲆᐃⲆⲆⵠ;
        Δⵠ[32][1] = ⵠᐃ.ⵠⲆⵠᐃᐃⵠⵠ;
        Δⵠ[205] = [];
        Δⵠ[205][0] = ⵠᐃ.ᐃⲆⵠⲆᐃⲆΔ;
        Δⵠ[205][1] = ⵠᐃ.ⵠᐃⵠⲆⵠᐃⲆ;
        Δⵠ[957] = [];
        Δⵠ[957][0] = ⵠᐃ.ⲆᐃⵠΔᐃᐃᐃ;
        Δⵠ[957][1] = ⵠᐃ.ⲆᐃᐃⵠΔⵠΔ;
        Δⵠ[207] = [];
        Δⵠ[207][0] = ⵠᐃ.ⵠΔⲆⵠⲆⵠⵠ;
        Δⵠ[207][1] = ⵠᐃ.ᐃΔⵠⲆⵠᐃᐃ;
        Δⵠ[954] = [];
        Δⵠ[954][0] = ⵠᐃ.ΔᐃΔⲆᐃⵠΔ;
        Δⵠ[954][1] = ⵠᐃ.ΔⲆⵠᐃⲆᐃⲆ;
        Δⵠ[958] = [];
        Δⵠ[958][0] = ⵠᐃ.ⵠⵠᐃⲆᐃⲆᐃ;
        Δⵠ[958][1] = ⵠᐃ.ᐃΔᐃᐃⲆⵠⵠ;
        Δⵠ[209] = [];
        Δⵠ[209][0] = ⵠᐃ.ΔΔⲆᐃΔΔΔ;
        Δⵠ[209][1] = ⵠᐃ.ᐃⵠΔⲆⲆⲆⲆ;
        Δⵠ[971] = [];
        Δⵠ[971][0] = ⵠᐃ.ⲆΔΔΔᐃᐃⵠ;
        Δⵠ[971][1] = ⵠᐃ.ⲆⲆⵠΔⲆᐃⵠ;
        Δⵠ[211] = [];
        Δⵠ[211][0] = ⵠᐃ.ᐃΔᐃⵠᐃⵠᐃ;
        Δⵠ[211][1] = ⵠᐃ.ⵠΔΔΔΔᐃΔ;
        Δⵠ[986] = [];
        Δⵠ[986][0] = ⵠᐃ.ᐃⲆᐃΔΔⲆᐃ;
        Δⵠ[986][1] = ⵠᐃ.ΔΔΔᐃᐃΔΔ;
        Δⵠ[989] = [];
        Δⵠ[989][0] = [ⵠᐃ.ⲆⵠⲆᐃΔⵠⵠ];
        Δⵠ[989][1] = [ⵠᐃ.ΔⲆⲆⵠⲆᐃᐃ];
        Δⵠ[217] = [];
        Δⵠ[217][0] = ⵠᐃ.ⵠⲆΔᐃⲆᐃⲆ;
        Δⵠ[217][1] = ⵠᐃ.ΔᐃⲆⵠⵠⲆΔ;
        Δⵠ[219] = [];
        Δⵠ[219][0] = ⵠᐃ.ᐃᐃΔᐃⲆᐃⵠ;
        Δⵠ[219][1] = ⵠᐃ.ⵠⲆᐃΔⵠᐃΔ;
        Δⵠ[218] = [];
        Δⵠ[218][0] = ⵠᐃ.ΔᐃⵠΔΔⲆᐃ;
        Δⵠ[218][1] = ⵠᐃ.ⵠΔⲆᐃⵠⲆⵠ;
        Δⵠ[212] = [];
        Δⵠ[212][0] = ⵠᐃ.ᐃΔⵠⵠΔΔⲆ;
        Δⵠ[212][1] = ⵠᐃ.ΔΔΔᐃⲆΔⲆ;
        Δⵠ[213] = [];
        Δⵠ[213][0] = ⵠᐃ.ΔⵠΔᐃⵠⲆᐃ;
        Δⵠ[213][1] = ⵠᐃ.ΔⲆᐃΔⲆⵠᐃ;
        Δⵠ[214] = [];
        Δⵠ[214][0] = ⵠᐃ.ΔⲆΔⵠⵠΔⵠ;
        Δⵠ[214][1] = ⵠᐃ.ⲆΔⵠᐃⵠΔᐃ;
        Δⵠ[215] = [];
        Δⵠ[215][0] = ⵠᐃ.ⵠΔᐃⲆᐃᐃⵠ;
        Δⵠ[215][1] = ⵠᐃ.ⲆᐃᐃⵠᐃⲆᐃ;
        Δⵠ[216] = [];
        Δⵠ[216][0] = ⵠᐃ.ΔⵠᐃⲆᐃΔΔ;
        Δⵠ[216][1] = ⵠᐃ.ⲆⵠΔⵠⵠΔΔ;
        Δⵠ[220] = [];
        Δⵠ[220][0] = ⵠᐃ.ΔⲆⲆⵠᐃⲆⲆ;
        Δⵠ[220][1] = ⵠᐃ.ⵠΔⵠᐃⵠⲆᐃ;
        Δⵠ[1020] = [];
        Δⵠ[1020][0] = ⵠᐃ.ⲆⲆⵠⵠⵠΔΔ;
        Δⵠ[1020][1] = ⵠᐃ.ⵠⲆⲆᐃᐃᐃⲆ;
        Δⵠ[1021] = [];
        Δⵠ[1021][0] = ⵠᐃ.ⲆⵠᐃⵠᐃΔⵠ;
        Δⵠ[1021][1] = ⵠᐃ.ΔⲆⲆⵠⲆᐃⵠ;
        Δⵠ[39] = [];
        Δⵠ[39][0] = ⵠᐃ.ΔⲆΔΔⵠⵠⲆ;
        Δⵠ[39][1] = ⵠᐃ.ⵠⵠΔⲆⵠⲆΔ;
        Δⵠ[1022] = ⵠᐃ.ᐃᐃΔᐃⲆΔᐃ;
        Δⵠ[1023] = ⵠᐃ.ᐃΔⵠⵠⵠΔᐃ;
        Δⵠ[1041] = [];
        Δⵠ[1041][0] = [];
        Δⵠ[1041][1] = [];
        Δⵠ[1041][0].push(ⵠᐃ.ⵠⲆⲆΔᐃⵠΔ);
        Δⵠ[1041][0].push(ⵠᐃ.ⵠΔⲆⲆΔᐃⵠ);
        Δⵠ[1041][0].push(ⵠᐃ.ⲆᐃᐃΔᐃⲆⲆ);
        Δⵠ[1041][1].push(ⵠᐃ.ⵠᐃᐃⲆΔΔᐃ);
        Δⵠ[1041][1].push(ⵠᐃ.ΔᐃⵠⲆⵠⵠⲆ);
        Δⵠ[1041][1].push(ⵠᐃ.ⲆⲆᐃⵠᐃᐃⵠ);
        Δⵠ[244] = [];
        Δⵠ[244][0] = [];
        Δⵠ[244][1] = [];
        Δⵠ[244][0].push(ⵠᐃ.ᐃⲆⲆⵠⵠⵠΔ);
        Δⵠ[244][0].push(ⵠᐃ.ⲆⵠΔⵠᐃⲆⲆ);
        Δⵠ[244][0].push(ⵠᐃ.ⲆⵠΔᐃΔᐃΔ);
        Δⵠ[244][1].push(ⵠᐃ.ⲆᐃΔⲆᐃⵠⲆ);
        Δⵠ[244][1].push(ⵠᐃ.ᐃⲆᐃᐃⲆⵠⵠ);
        Δⵠ[244][1].push(ⵠᐃ.ΔⵠΔⲆᐃⲆΔ);
        Δⵠ[1052] = [];
        Δⵠ[1052][0] = [];
        Δⵠ[1052][1] = [];
        Δⵠ[1052][0].push(ⵠᐃ.ΔⲆᐃⵠᐃΔᐃ);
        Δⵠ[1052][0].push(ⵠᐃ.ⲆⲆᐃΔⵠΔⵠ);
        Δⵠ[1052][0].push(ⵠᐃ.ⵠⵠⵠⵠᐃⲆⲆ);
        Δⵠ[1052][0].push(ⵠᐃ.ⲆΔΔⲆⲆΔⵠ);
        Δⵠ[1052][0].push(ⵠᐃ.ⵠΔΔⵠᐃΔⲆ);
        Δⵠ[1052][1].push(ⵠᐃ.ΔⵠⵠⲆᐃΔᐃ);
        Δⵠ[1052][1].push(ⵠᐃ.ᐃⲆⲆⲆⵠⵠΔ);
        Δⵠ[1052][1].push(ⵠᐃ.ΔᐃΔⲆⵠⵠΔ);
        Δⵠ[1052][1].push(ⵠᐃ.ᐃⵠⵠⲆᐃⵠⵠ);
        Δⵠ[1052][1].push(ⵠᐃ.ᐃᐃΔⲆⲆⵠⵠ);
        Δⵠ[450] = [];
        Δⵠ[450][0] = ⵠᐃ.ⵠⵠᐃⵠᐃⵠΔ;
        Δⵠ[450][1] = ⵠᐃ.ⵠⲆⲆΔⵠΔⵠ;
        Δⵠ[453] = [];
        Δⵠ[453][0] = ⵠᐃ.ᐃⲆΔⵠⵠⲆⲆ;
        Δⵠ[453][1] = ⵠᐃ.ᐃΔⲆⵠⲆⲆΔ;
        Δⵠ[454] = [];
        Δⵠ[454][0] = ⵠᐃ.ᐃⲆⲆᐃᐃⵠⵠ;
        Δⵠ[454][1] = ⵠᐃ.ⵠⲆⲆⲆᐃᐃⲆ;
        Δⵠ[464] = ⵠᐃ.ⵠΔΔΔᐃᐃᐃ;
        Δⵠ[468] = ⵠᐃ.ᐃΔⲆᐃᐃᐃⲆ;
        Δⵠ[469] = ⵠᐃ.ⵠⲆⲆⲆⲆᐃⵠ;
        Δⵠ[20] = [];
        Δⵠ[20][0] = ⵠᐃ.ΔΔᐃⵠᐃᐃᐃ;
        Δⵠ[20][1] = ⵠᐃ.ᐃᐃᐃᐃⲆΔⵠ;
        Δⵠ[920] = [];
        Δⵠ[920][0] = ⵠᐃ.ᐃⵠⲆᐃⲆᐃⵠ;
        Δⵠ[920][1] = ⵠᐃ.ᐃΔⲆᐃⲆⵠᐃ;
        Δⵠ[21] = [];
        Δⵠ[21][0] = ⵠᐃ.ᐃᐃΔⲆᐃΔⵠ;
        Δⵠ[21][1] = ⵠᐃ.ⵠΔᐃᐃⵠⲆᐃ;
        Δⵠ[924] = [];
        Δⵠ[924][0] = ⵠᐃ.ᐃⵠⲆᐃⲆᐃⵠ;
        Δⵠ[924][1] = ⵠᐃ.ᐃΔⲆᐃⲆⵠᐃ;
        Δⵠ[44] = [];
        Δⵠ[44][0] = ⵠᐃ.ⲆᐃᐃᐃⲆⵠⵠ;
        Δⵠ[44][1] = ⵠᐃ.ⲆΔᐃⵠᐃⲆΔ;
        Δⵠ[19] = [];
        Δⵠ[19][0] = ⵠᐃ.ᐃᐃⲆⲆⵠΔᐃ;
        Δⵠ[19][1] = ⵠᐃ.ⵠⵠⵠΔΔΔⵠ;
        Δⵠ[34] = [];
        Δⵠ[34][0] = ⵠᐃ.ΔᐃΔⲆⲆⲆⵠ;
        Δⵠ[34][1] = ⵠᐃ.ⵠΔΔΔᐃⲆⲆ;
        Δⵠ[17] = [];
        Δⵠ[17][0] = ⵠᐃ.ⲆᐃⲆⵠⵠᐃᐃ;
        Δⵠ[17][1] = ⵠᐃ.ⵠⲆΔⵠⵠⵠΔ;
        Δⵠ[63] = [];
        Δⵠ[63][0] = ⵠᐃ.ⵠⲆⵠⲆⵠΔΔ;
        Δⵠ[63][1] = ⵠᐃ.ⵠᐃⵠΔⲆⵠⲆ;
        Δⵠ[60] = [];
        Δⵠ[60][0] = ⵠᐃ.ⲆᐃᐃᐃⵠⲆⵠ;
        Δⵠ[60][1] = ⵠᐃ.ΔⲆΔⲆᐃΔΔ;
        Δⵠ[94] = [];
        Δⵠ[94][0] = ⵠᐃ.ⵠᐃⲆⵠⲆΔΔΔⵠ;
        Δⵠ[94][1] = ⵠᐃ.ⵠⲆⵠⲆⲆᐃⵠⲆΔ;
        Δⵠ[95] = [];
        Δⵠ[95][0] = ⵠᐃ.ⲆⲆᐃᐃΔΔⵠⲆΔ;
        Δⵠ[95][1] = ⵠᐃ.ⵠⲆⵠᐃᐃᐃⲆᐃⵠ;
        Δⵠ[96] = [];
        Δⵠ[96][0] = ⵠᐃ.ⲆⲆΔᐃⵠᐃⵠⵠΔ;
        Δⵠ[96][1] = ⵠᐃ.ΔⵠᐃᐃⵠⲆⵠᐃⵠ;
        Δⵠ[97] = [];
        Δⵠ[97][0] = ⵠᐃ.ᐃΔᐃΔΔΔΔΔⲆ;
        Δⵠ[97][1] = ⵠᐃ.ⵠᐃΔⵠⵠΔⲆⵠⲆ;
        Δⵠ[98] = [];
        Δⵠ[98][0] = ⵠᐃ.ΔⲆⲆⵠⵠⲆⵠΔⵠ;
        Δⵠ[98][1] = ⵠᐃ.ⵠᐃⵠⲆᐃⵠᐃΔᐃ;
        Δⵠ[99] = [];
        Δⵠ[99][0] = ⵠᐃ.ⵠᐃⵠΔⵠⲆⵠΔⲆ;
        Δⵠ[99][1] = ⵠᐃ.ⲆᐃⵠᐃⵠⵠᐃᐃⲆ;
        Δⵠ[90] = [];
        Δⵠ[90][0] = ⵠᐃ.ⲆⲆⵠⲆⲆⵠΔ;
        Δⵠ[90][1] = ⵠᐃ.ⲆⵠⵠᐃⵠΔΔ;
        Δⵠ[91] = [];
        Δⵠ[91][0] = ⵠᐃ.ΔⵠΔᐃⵠⵠⵠ;
        Δⵠ[91][1] = ⵠᐃ.ⵠⵠⵠⲆⵠⵠⵠ;
        Δⵠ[71] = [];
        Δⵠ[71][0] = ⵠᐃ.ⲆΔⲆⲆⵠⲆⵠⵠᐃ;
        Δⵠ[71][1] = ⵠᐃ.ⲆⲆᐃΔΔᐃⲆᐃᐃ;
        Δⵠ[72] = [];
        Δⵠ[72][0] = ⵠᐃ.ⲆΔΔⵠⵠΔⲆᐃⵠ;
        Δⵠ[72][1] = ⵠᐃ.ΔⲆᐃᐃⵠⲆⵠᐃΔ;
        Δⵠ[73] = [];
        Δⵠ[73][0] = ⵠᐃ.ⵠΔⲆⲆΔᐃⵠΔΔ;
        Δⵠ[73][1] = ⵠᐃ.ⵠᐃΔΔⵠⲆⵠΔᐃ;
        Δⵠ[74] = [];
        Δⵠ[74][0] = ⵠᐃ.ΔⵠᐃⲆⵠᐃᐃⵠᐃ;
        Δⵠ[74][1] = ⵠᐃ.ⲆΔⲆⵠΔΔⲆᐃᐃ;
        Δⵠ[75] = [];
        Δⵠ[75][0] = ⵠᐃ.ᐃᐃⲆᐃᐃᐃⵠⵠΔ;
        Δⵠ[75][1] = ⵠᐃ.ⲆΔΔⵠᐃᐃᐃⵠⵠ;
        Δⵠ[76] = [];
        Δⵠ[76][0] = ⵠᐃ.ᐃΔΔᐃⵠᐃⲆⵠᐃ;
        Δⵠ[76][1] = ⵠᐃ.ⵠΔⲆΔⲆΔⵠᐃᐃ;
        Δⵠ[101] = [];
        Δⵠ[101][0] = ⵠᐃ.ⵠΔᐃⲆⵠᐃᐃ;
        Δⵠ[101][1] = ⵠᐃ.ⲆⵠᐃΔⵠΔⵠ;
        Δⵠ[64] = [];
        Δⵠ[64][0] = ⵠᐃ.ΔⵠΔΔΔᐃⲆⵠΔ;
        Δⵠ[64][1] = ⵠᐃ.ΔΔⵠΔⲆᐃΔΔᐃ;
        Δⵠ[102] = [];
        Δⵠ[102][0] = ⵠᐃ.ᐃᐃⲆᐃΔⲆᐃ;
        Δⵠ[102][1] = ⵠᐃ.ΔⲆⵠⲆΔⵠⵠ;
        Δⵠ[65] = [];
        Δⵠ[65][0] = ⵠᐃ.ᐃⲆⲆⵠⵠⲆⲆⲆΔ;
        Δⵠ[65][1] = ⵠᐃ.ΔⲆᐃⲆΔⲆⵠⵠⲆ;
        Δⵠ[103] = [];
        Δⵠ[103][0] = ⵠᐃ.ΔⵠΔⲆᐃΔⲆ;
        Δⵠ[103][1] = ⵠᐃ.ⵠΔⵠⲆΔⵠᐃ;
        Δⵠ[66] = [];
        Δⵠ[66][0] = ⵠᐃ.ⲆΔᐃⲆⲆΔᐃᐃⵠ;
        Δⵠ[66][1] = ⵠᐃ.ΔⲆⵠⵠᐃᐃΔΔⵠ;
        Δⵠ[104] = [];
        Δⵠ[104][0] = ⵠᐃ.ⲆᐃΔⵠⵠᐃᐃ;
        Δⵠ[104][1] = ⵠᐃ.ΔⵠΔΔΔⵠᐃ;
        Δⵠ[67] = [];
        Δⵠ[67][0] = ⵠᐃ.ᐃΔⵠⵠⲆᐃⵠᐃΔ;
        Δⵠ[67][1] = ⵠᐃ.ᐃⲆᐃΔᐃᐃⵠⵠⵠ;
        Δⵠ[105] = [];
        Δⵠ[105][0] = ⵠᐃ.ᐃⵠᐃΔᐃⲆⵠ;
        Δⵠ[105][1] = ⵠᐃ.ᐃᐃⵠⵠⲆⲆᐃ;
        Δⵠ[68] = [];
        Δⵠ[68][0] = ⵠᐃ.ΔⵠΔⲆⵠΔᐃⲆⵠ;
        Δⵠ[68][1] = ⵠᐃ.ᐃΔᐃⵠⵠΔᐃⵠΔ;
        Δⵠ[106] = [];
        Δⵠ[106][0] = ⵠᐃ.ᐃᐃⲆⵠⲆⲆᐃ;
        Δⵠ[106][1] = ⵠᐃ.ⵠⵠΔⵠⵠᐃΔⲆⲆ;
        Δⵠ[69] = [];
        Δⵠ[69][0] = ⵠᐃ.ⵠⲆΔⲆΔΔᐃⵠⵠ;
        Δⵠ[69][1] = ⵠᐃ.ⵠΔⵠᐃⵠⲆΔΔᐃ;
        Δⵠ[107] = [];
        Δⵠ[107][0] = ⵠᐃ.ΔΔⵠⲆᐃᐃᐃ;
        Δⵠ[107][1] = ⵠᐃ.ⵠⵠΔⵠⲆⲆΔ;
        Δⵠ[70] = [];
        Δⵠ[70][0] = ⵠᐃ.ΔΔΔⲆᐃⵠΔΔⲆ;
        Δⵠ[70][1] = ⵠᐃ.ΔⵠᐃΔⲆΔᐃΔᐃ;
        Δⵠ[80] = [];
        Δⵠ[80][0] = ⵠᐃ.ⲆᐃⲆⲆᐃⲆΔ;
        Δⵠ[80][1] = ⵠᐃ.ⵠⵠᐃΔⵠⵠᐃ;
        Δⵠ[81] = [];
        Δⵠ[81][0] = ⵠᐃ.ⲆⵠᐃⲆᐃΔᐃ;
        Δⵠ[81][1] = ⵠᐃ.ᐃⵠⵠᐃΔᐃⲆ;
        Δⵠ[22] = [];
        Δⵠ[22][0] = ⵠᐃ.ΔⲆⵠΔⵠⵠᐃ;
        Δⵠ[22][1] = ⵠᐃ.ΔᐃⲆᐃⲆⵠⵠ;
        Δⵠ[928] = [];
        Δⵠ[928][0] = ⵠᐃ.ⵠⲆⵠᐃⲆⵠⵠ;
        Δⵠ[928][1] = ⵠᐃ.ᐃᐃᐃΔⵠΔΔ;
        Δⵠ[935] = [];
        Δⵠ[935][0] = [];
        Δⵠ[935][1] = [];
        Δⵠ[935][0].push(ⵠᐃ.ᐃⵠⲆᐃⵠΔΔⵠⵠ);
        Δⵠ[935][0].push(ⵠᐃ.ΔⲆⲆΔⵠⵠⲆΔᐃ);
        Δⵠ[935][1].push(ⵠᐃ.ΔⲆⲆΔⵠⵠⲆΔᐃ);
        Δⵠ[935][1].push(ⵠᐃ.ΔⵠⲆⵠⵠΔⲆⵠᐃ);
        Δⵠ[941] = [];
        Δⵠ[941][0] = [];
        Δⵠ[941][1] = [];
        Δⵠ[941][0].push(ⵠᐃ.ⵠⵠᐃᐃᐃᐃⵠ);
        Δⵠ[941][0].push(ⵠᐃ.ⵠΔᐃΔᐃⵠⵠ);
        Δⵠ[941][0].push(ⵠᐃ.ΔⲆⵠⲆⵠⵠᐃ);
        Δⵠ[941][1].push(ⵠᐃ.ΔⲆΔᐃⵠΔᐃ);
        Δⵠ[941][1].push(ⵠᐃ.ⵠⲆᐃⲆᐃΔⲆ);
        Δⵠ[941][1].push(ⵠᐃ.ΔⵠⵠᐃⵠᐃⲆ);
        Δⵠ[53] = [];
        Δⵠ[53][0] = ⵠᐃ.ΔᐃᐃᐃⲆⵠᐃ;
        Δⵠ[53][1] = ⵠᐃ.ΔΔⵠⵠⲆΔⵠ;
        Δⵠ[54] = [];
        Δⵠ[54][0] = ⵠᐃ.ΔⲆΔⲆᐃⵠⲆ;
        Δⵠ[54][1] = ⵠᐃ.ΔᐃᐃⵠᐃⵠΔ;
        Δⵠ[241] = [];
        Δⵠ[241][0] = [];
        Δⵠ[241][1] = [];
        Δⵠ[241][0].push(ⵠᐃ.ⲆΔᐃⲆᐃⲆΔ);
        Δⵠ[241][0].push(ⵠᐃ.ⵠᐃΔⲆΔⲆⵠ);
        Δⵠ[241][0].push(ⵠᐃ.ᐃⲆⲆⵠᐃⲆᐃ);
        Δⵠ[241][1].push(ⵠᐃ.ΔᐃⵠᐃΔΔΔ);
        Δⵠ[241][1].push(ⵠᐃ.ᐃⲆΔΔⵠΔⲆ);
        Δⵠ[241][1].push(ⵠᐃ.ⲆⲆⵠⵠΔΔᐃ);
        Δⵠ[202] = [];
        Δⵠ[202][0] = [];
        Δⵠ[202][1] = [];
        Δⵠ[202][0].push(ⵠᐃ.ΔⲆΔⵠⲆⲆΔ);
        Δⵠ[202][0].push(ⵠᐃ.ⲆᐃⵠᐃⲆΔΔ);
        Δⵠ[202][0].push(ⵠᐃ.ⲆᐃᐃΔᐃⲆⵠ);
        Δⵠ[202][1].push(ⵠᐃ.ⲆΔΔΔᐃⵠⲆ);
        Δⵠ[202][1].push(ⵠᐃ.ⲆᐃⵠᐃΔᐃⲆ);
        Δⵠ[202][1].push(ⵠᐃ.ᐃⲆⲆⵠⵠΔΔ);
        Δⵠ[203] = [];
        Δⵠ[203][0] = [];
        Δⵠ[203][1] = [];
        Δⵠ[203][0].push(ⵠᐃ.ᐃΔⵠΔΔⵠⲆ);
        Δⵠ[203][0].push(ⵠᐃ.ⲆⲆⵠⵠⵠᐃᐃ);
        Δⵠ[203][0].push(ⵠᐃ.ⲆⲆΔⲆΔⵠᐃ);
        Δⵠ[203][0].push(ⵠᐃ.ΔⵠΔΔⲆⵠΔ);
        Δⵠ[203][0].push(ⵠᐃ.ⲆΔⵠⲆⲆⲆΔ);
        Δⵠ[203][0].push(ⵠᐃ.ⵠᐃⲆⲆⵠᐃⲆ);
        Δⵠ[203][1].push(ⵠᐃ.ⵠᐃⲆⵠΔⲆⲆ);
        Δⵠ[203][1].push(ⵠᐃ.ΔⵠⵠΔᐃΔⵠ);
        Δⵠ[203][1].push(ⵠᐃ.ΔΔΔᐃΔⲆΔ);
        Δⵠ[203][1].push(ⵠᐃ.ⵠΔⵠᐃⲆⲆⲆ);
        Δⵠ[203][1].push(ⵠᐃ.ⲆⲆΔΔΔⵠΔ);
        Δⵠ[203][1].push(ⵠᐃ.ⵠⵠⲆⲆⵠΔΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ] = [];
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0] = [];
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1] = [];
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ΔⲆⵠⲆⲆᐃΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ⲆⲆᐃᐃᐃⲆⵠ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ΔⲆᐃⵠⲆⲆⵠ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ⵠⲆⵠⲆᐃⵠⲆ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ᐃⵠⵠΔⵠᐃΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][0].push(ⵠᐃ.ⵠⵠᐃᐃΔᐃᐃ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ᐃⵠⵠᐃⲆⵠΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ⵠⵠᐃⲆⲆᐃᐃ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ᐃᐃⲆⵠᐃⵠΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ΔᐃΔΔᐃᐃᐃ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ⲆᐃᐃᐃᐃⵠΔ);
        Δⵠ[Ur.ΔⲆΔⵠⵠ][1].push(ⵠᐃ.ⲆᐃΔⵠᐃⲆᐃ);
        Δⵠ[918] = [];
        Δⵠ[918][0] = ⵠᐃ.ⵠᐃΔⲆⵠⵠⲆ;
        Δⵠ[918][1] = ⵠᐃ.ⲆΔⲆᐃⲆΔⲆ;
        Δⵠ[919] = ⵠᐃ.ΔᐃΔΔⲆⲆΔ;
        Δⵠ[56] = [];
        Δⵠ[56][0] = ⵠᐃ.ⵠΔᐃⲆⲆᐃΔΔᐃ;
        Δⵠ[56][1] = ⵠᐃ.ⲆⲆⲆΔⲆⵠᐃⵠΔ;
        Δⵠ[223] = [];
        Δⵠ[223][0] = ⵠᐃ.ⲆⵠⵠⵠᐃΔⲆ;
        Δⵠ[223][1] = ⵠᐃ.ᐃⲆⵠⵠᐃΔΔ;
        Δⵠ[224] = [];
        Δⵠ[224][0] = ⵠᐃ.ⵠΔⲆᐃⵠᐃΔ;
        Δⵠ[224][1] = ⵠᐃ.ΔΔᐃⵠⵠⲆᐃ;
        Δⵠ[236] = [];
        Δⵠ[236][0] = ⵠᐃ.ⵠᐃⲆΔΔᐃᐃ;
        Δⵠ[236][1] = ⵠᐃ.ⵠΔΔΔⵠⵠⵠ;
        Δⵠ[1033] = [];
        Δⵠ[1033][0] = ⵠᐃ.ᐃⵠⵠᐃΔⵠΔ;
        Δⵠ[1033][1] = ⵠᐃ.ΔⲆᐃⲆᐃΔᐃ;
        Δⵠ[1034] = ⵠᐃ.ᐃⵠᐃΔⵠΔᐃ;
        Δⵠ[1150] = [];
        Δⵠ[1150][0] = ⵠᐃ.ⲆⲆⲆᐃΔᐃⲆ;
        Δⵠ[1150][1] = ⵠᐃ.ΔⵠⵠⵠᐃΔⵠ;
        Δⵠ[1152] = [];
        Δⵠ[1152][0] = ⵠᐃ.ᐃⲆⲆΔΔΔᐃ;
        Δⵠ[1152][1] = ⵠᐃ.ⲆⵠᐃⲆⵠᐃΔ;
        Δⵠ[1149] = ⵠᐃ.ⵠⵠⵠΔⵠΔⵠ;
        Δⵠ[1151] = ⵠᐃ.ᐃᐃᐃⵠⲆⲆⵠ;
        Δⵠ[1153] = ⵠᐃ.ⲆⲆᐃᐃᐃⲆᐃ;
        Δⵠ[1143] = [];
        Δⵠ[1143][0] = ⵠᐃ.ⲆΔⲆᐃⵠⲆⲆ;
        Δⵠ[1143][1] = ⵠᐃ.ⲆⲆΔⲆΔᐃΔ;
        Δⵠ[1145] = [];
        Δⵠ[1145][0] = ⵠᐃ.ⲆⲆⵠΔᐃᐃⲆ;
        Δⵠ[1145][1] = ⵠᐃ.ⵠᐃΔⵠⵠⲆⲆ;
        Δⵠ[1146] = [];
        Δⵠ[1146][0] = ⵠᐃ.ⵠᐃⵠⵠᐃΔⲆ;
        Δⵠ[1146][1] = ⵠᐃ.ᐃᐃΔΔⵠⲆⲆ;
        Δⵠ[1144] = ⵠᐃ.ΔⵠᐃᐃⲆⲆᐃ;
        Δⵠ[1148] = ⵠᐃ.ᐃⲆⲆⲆⵠⲆᐃ;
        Δⵠ[1147] = ⵠᐃ.ⵠᐃⲆΔⵠᐃⵠ;
        Δⵠ[1053] = [];
        Δⵠ[1053][0] = ⵠᐃ.ΔᐃⵠᐃⵠⲆⵠ;
        Δⵠ[1053][1] = ⵠᐃ.ⲆΔᐃⵠΔⵠΔ;
        Δⵠ[1055] = [];
        Δⵠ[1055][0] = ⵠᐃ.ΔⲆᐃᐃΔᐃⲆ;
        Δⵠ[1055][1] = ⵠᐃ.ΔΔᐃᐃΔⵠⲆ;
        Δⵠ[231] = [];
        Δⵠ[231][0] = ⵠᐃ.ⲆΔⵠᐃⲆⲆΔ;
        Δⵠ[231][1] = ⵠᐃ.ⲆΔᐃΔⲆᐃⵠ;
        Δⵠ[1060] = [];
        Δⵠ[1060][0] = ⵠᐃ.ᐃⲆΔᐃᐃⵠΔ;
        Δⵠ[1060][1] = ⵠᐃ.ΔᐃᐃⵠⲆᐃΔ;
        Δⵠ[1063] = [];
        Δⵠ[1063][0] = ⵠᐃ.ᐃⵠᐃᐃΔⵠΔ;
        Δⵠ[1063][1] = ⵠᐃ.ⲆⲆΔᐃΔᐃᐃ;
        Δⵠ[1059] = [];
        Δⵠ[1059][0] = ⵠᐃ.ⲆⲆΔⲆⵠᐃⲆ;
        Δⵠ[1059][1] = ⵠᐃ.ⵠΔⵠᐃⲆᐃΔ;
        Δⵠ[1062] = [];
        Δⵠ[1062][0] = ⵠᐃ.ΔᐃΔΔⲆΔᐃ;
        Δⵠ[1062][1] = ⵠᐃ.ΔⲆⲆⲆᐃΔᐃ;
        Δⵠ[1056] = ⵠᐃ.ⵠⲆⲆΔⲆΔⲆ;
        Δⵠ[1057] = ⵠᐃ.ᐃᐃΔΔΔΔⲆ;
        Δⵠ[1058] = ⵠᐃ.ᐃⵠⲆᐃⵠᐃᐃ;
        Δⵠ[1065] = ⵠᐃ.ΔⲆΔΔᐃⲆᐃ;
        Δⵠ[1066] = ⵠᐃ.ⲆⲆⵠⵠⲆⵠΔ;
        Δⵠ[1067] = ⵠᐃ.ΔΔΔᐃⲆΔⵠ;
        Δⵠ[1222] = [];
        Δⵠ[1222][0] = ⵠᐃ.ⵠᐃⵠΔⲆᐃΔⲆΔ;
        Δⵠ[1222][1] = ⵠᐃ.ᐃⲆⲆᐃⲆᐃⲆΔᐃ;
        Δⵠ[248] = [];
        Δⵠ[248][0] = ⵠᐃ.ⵠᐃᐃᐃⲆⲆⵠⵠᐃ;
        Δⵠ[248][1] = ⵠᐃ.ⲆⲆⵠⵠⲆⵠᐃⵠΔ;
        Δⵠ[1218] = [];
        Δⵠ[1218][0] = ⵠᐃ.ᐃⲆⵠⵠᐃΔⵠΔᐃ;
        Δⵠ[1218][1] = ⵠᐃ.ᐃⵠᐃⲆᐃΔⲆⵠΔ;
        Δⵠ[1221] = [];
        Δⵠ[1221][0] = ⵠᐃ.ΔΔⵠⵠⲆΔᐃᐃΔ;
        Δⵠ[1221][1] = ⵠᐃ.ⵠᐃⲆⲆᐃΔᐃⲆⲆ;
        Δⵠ[1223] = ⵠᐃ.ᐃⵠᐃΔⵠⵠᐃ;
        Δⵠ[1219] = ⵠᐃ.ⲆΔⵠⲆᐃⵠⵠ;
        Δⵠ[1068] = [];
        Δⵠ[1068][0] = ⵠᐃ.ⵠⲆΔᐃᐃⲆΔ;
        Δⵠ[1068][1] = ⵠᐃ.ⵠⵠᐃⲆⵠᐃⲆ;
        Δⵠ[232] = [];
        Δⵠ[232][0] = ⵠᐃ.ⵠⲆΔΔΔⲆⲆ;
        Δⵠ[232][1] = ⵠᐃ.ⲆⵠⵠⵠⵠⲆᐃ;
        Δⵠ[1070] = [];
        Δⵠ[1070][0] = ⵠᐃ.ⵠⲆᐃⲆⵠⲆⲆ;
        Δⵠ[1070][1] = ⵠᐃ.ⵠⲆΔⲆΔⵠΔ;
        Δⵠ[1072] = [];
        Δⵠ[1072][0] = ⵠᐃ.ⲆⲆΔᐃᐃⵠΔ;
        Δⵠ[1072][1] = ⵠᐃ.ⵠⵠᐃᐃⵠⲆⲆ;
        Δⵠ[1075] = [];
        Δⵠ[1075][0] = ⵠᐃ.ⵠⲆᐃΔⲆΔΔ;
        Δⵠ[1075][1] = ⵠᐃ.ⲆⲆⵠⲆΔΔᐃ;
        Δⵠ[1071] = [];
        Δⵠ[1071][0] = ⵠᐃ.ⵠⵠⲆᐃⲆᐃᐃ;
        Δⵠ[1071][1] = ⵠᐃ.ⵠΔᐃⵠΔⲆⲆ;
        Δⵠ[1074] = [];
        Δⵠ[1074][0] = ⵠᐃ.ᐃⵠⲆⵠⵠΔⵠ;
        Δⵠ[1074][1] = ⵠᐃ.ΔⵠⵠΔᐃᐃⲆ;
        Δⵠ[1073] = [];
        Δⵠ[1073][0] = ⵠᐃ.ⲆⲆᐃⵠᐃΔⲆ;
        Δⵠ[1073][1] = ⵠᐃ.ᐃⵠⲆⲆΔᐃΔ;
        Δⵠ[1076] = [];
        Δⵠ[1076][0] = ⵠᐃ.ⲆⵠⲆᐃᐃⲆⲆ;
        Δⵠ[1076][1] = ⵠᐃ.ⲆⵠⵠΔΔΔᐃ;
        Δⵠ[1077] = ⵠᐃ.ΔᐃᐃᐃⵠⲆⲆ;
        Δⵠ[1078] = ⵠᐃ.ᐃⲆΔΔᐃⲆⵠ;
        Δⵠ[1079] = ⵠᐃ.ⵠⵠΔΔΔⵠⲆ;
        Δⵠ[1083] = [];
        Δⵠ[1083][0] = ⵠᐃ.ΔⲆΔⲆⲆΔᐃ;
        Δⵠ[1083][1] = ⵠᐃ.ⲆⲆᐃᐃᐃⵠⵠ;
        Δⵠ[233] = [];
        Δⵠ[233][0] = ⵠᐃ.ΔΔⲆᐃⵠᐃⲆ;
        Δⵠ[233][1] = ⵠᐃ.ΔᐃΔⵠΔΔΔ;
        Δⵠ[1085] = [];
        Δⵠ[1085][0] = ⵠᐃ.ⵠⵠΔⲆΔᐃⵠ;
        Δⵠ[1085][1] = ⵠᐃ.ⵠᐃⵠⵠⲆᐃⵠ;
        Δⵠ[1087] = [];
        Δⵠ[1087][0] = ⵠᐃ.ᐃⲆⲆⵠᐃᐃⲆ;
        Δⵠ[1087][1] = ⵠᐃ.ⵠΔⵠⵠΔⲆΔ;
        Δⵠ[1090] = [];
        Δⵠ[1090][0] = ⵠᐃ.ΔᐃⵠΔⵠⵠⲆ;
        Δⵠ[1090][1] = ⵠᐃ.ⲆΔⵠⲆᐃⵠᐃ;
        Δⵠ[1086] = [];
        Δⵠ[1086][0] = ⵠᐃ.ⵠⵠΔⲆⵠⵠᐃ;
        Δⵠ[1086][1] = ⵠᐃ.ⵠᐃᐃⲆⲆᐃᐃ;
        Δⵠ[1089] = [];
        Δⵠ[1089][0] = ⵠᐃ.ⲆᐃΔⲆᐃᐃΔ;
        Δⵠ[1089][1] = ⵠᐃ.ᐃᐃⲆᐃⲆΔΔ;
        Δⵠ[1088] = [];
        Δⵠ[1088][0] = ⵠᐃ.ΔᐃΔⲆⲆⵠⵠ;
        Δⵠ[1088][1] = ⵠᐃ.ⲆΔᐃⲆΔⲆⲆ;
        Δⵠ[1091] = [];
        Δⵠ[1091][0] = ⵠᐃ.Δᐃᐃⵠⵠⵠᐃ;
        Δⵠ[1091][1] = ⵠᐃ.ⲆΔᐃⲆᐃΔⲆ;
        Δⵠ[1092] = ⵠᐃ.ᐃⵠⵠΔᐃⲆΔ;
        Δⵠ[1093] = ⵠᐃ.ⵠᐃⵠᐃΔⵠΔ;
        Δⵠ[1094] = ⵠᐃ.ᐃΔᐃΔⵠᐃᐃ;
        Δⵠ[1098] = [];
        Δⵠ[1098][0] = ⵠᐃ.ΔⲆⲆⲆᐃᐃΔ;
        Δⵠ[1098][1] = ⵠᐃ.ⵠΔⵠᐃᐃⵠᐃ;
        Δⵠ[235] = [];
        Δⵠ[235][0] = ⵠᐃ.ᐃⲆᐃΔⲆⲆΔ;
        Δⵠ[235][1] = ⵠᐃ.ⲆᐃᐃΔΔⵠⲆ;
        Δⵠ[1115] = ⵠᐃ.ⵠⵠⲆⲆΔⲆΔ;
        Δⵠ[1113] = [];
        Δⵠ[1113][0] = ⵠᐃ.ΔⲆⵠⵠᐃᐃⵠ;
        Δⵠ[1113][1] = ⵠᐃ.ⵠΔΔⵠᐃⲆⲆ;
        Δⵠ[1114] = [];
        Δⵠ[1114][0] = ⵠᐃ.ΔⵠⲆⵠᐃΔᐃ;
        Δⵠ[1114][1] = ⵠᐃ.ⵠⲆΔⲆⲆΔΔ;
        Δⵠ[1100] = [];
        Δⵠ[1100][0] = ⵠᐃ.ⲆΔⵠᐃᐃᐃᐃ;
        Δⵠ[1100][1] = ⵠᐃ.ⵠⵠΔᐃⲆⵠⲆ;
        Δⵠ[1102] = [];
        Δⵠ[1102][0] = ⵠᐃ.ⵠΔΔⵠΔⲆᐃ;
        Δⵠ[1102][1] = ⵠᐃ.ⲆⵠⲆⵠⵠⲆᐃ;
        Δⵠ[1105] = [];
        Δⵠ[1105][0] = ⵠᐃ.ⵠΔᐃⲆⲆᐃⲆ;
        Δⵠ[1105][1] = ⵠᐃ.ⵠΔⲆΔᐃⲆⵠ;
        Δⵠ[1101] = [];
        Δⵠ[1101][0] = ⵠᐃ.ⲆΔⲆⵠⵠⲆΔ;
        Δⵠ[1101][1] = ⵠᐃ.ⵠΔⲆⵠⲆⵠΔ;
        Δⵠ[1104] = [];
        Δⵠ[1104][0] = ⵠᐃ.ᐃⵠⲆⲆᐃⲆⵠ;
        Δⵠ[1104][1] = ⵠᐃ.ⲆⵠΔⲆᐃᐃΔ;
        Δⵠ[1103] = [];
        Δⵠ[1103][0] = ⵠᐃ.ⲆⲆΔⲆΔⵠⲆ;
        Δⵠ[1103][1] = ⵠᐃ.ⵠⲆⵠᐃΔΔᐃ;
        Δⵠ[1106] = [];
        Δⵠ[1106][0] = ⵠᐃ.ⲆΔΔⲆⵠΔᐃ;
        Δⵠ[1106][1] = ⵠᐃ.ΔⲆΔΔᐃⵠᐃ;
        Δⵠ[1107] = ⵠᐃ.ⵠΔᐃᐃᐃΔΔ;
        Δⵠ[1108] = ⵠᐃ.ΔᐃⲆΔⵠΔⲆ;
        Δⵠ[1109] = ⵠᐃ.Ⲇᐃⵠᐃᐃⵠᐃ;
        Δⵠ[1119] = [];
        Δⵠ[1119][0] = ⵠᐃ.ΔᐃⲆⲆΔΔΔ;
        Δⵠ[1119][1] = ⵠᐃ.ᐃΔⲆΔΔΔⵠ;
        Δⵠ[238] = [];
        Δⵠ[238][0] = ⵠᐃ.ⵠᐃᐃⵠᐃΔᐃ;
        Δⵠ[238][1] = ⵠᐃ.ΔᐃᐃⲆⵠΔⲆ;
        Δⵠ[1136] = ⵠᐃ.ᐃⵠΔⲆⵠΔⲆ;
        Δⵠ[1134] = [];
        Δⵠ[1134][0] = ⵠᐃ.ΔⲆⵠⵠⲆⲆᐃ;
        Δⵠ[1134][1] = ⵠᐃ.ᐃΔΔⲆⵠⵠⲆ;
        Δⵠ[1135] = [];
        Δⵠ[1135][0] = ⵠᐃ.ⵠᐃⵠⵠⲆΔᐃ;
        Δⵠ[1135][1] = ⵠᐃ.ⲆⵠΔⵠⲆⲆΔ;
        Δⵠ[1121] = [];
        Δⵠ[1121][0] = ⵠᐃ.ΔΔⵠⵠΔΔΔ;
        Δⵠ[1121][1] = ⵠᐃ.ΔⲆΔⲆⵠⵠΔ;
        Δⵠ[1123] = [];
        Δⵠ[1123][0] = ⵠᐃ.ΔⵠⲆⵠᐃⵠΔ;
        Δⵠ[1123][1] = ⵠᐃ.ⵠᐃΔⲆⵠΔΔ;
        Δⵠ[1126] = [];
        Δⵠ[1126][0] = ⵠᐃ.ΔⵠⲆᐃⵠⵠⵠ;
        Δⵠ[1126][1] = ⵠᐃ.ΔⲆⵠᐃⵠΔⵠ;
        Δⵠ[1122] = [];
        Δⵠ[1122][0] = ⵠᐃ.ᐃᐃΔΔⵠⵠⵠ;
        Δⵠ[1122][1] = ⵠᐃ.ᐃΔⵠⵠⵠᐃⵠ;
        Δⵠ[1125] = [];
        Δⵠ[1125][0] = ⵠᐃ.ᐃᐃⵠⲆΔⵠΔ;
        Δⵠ[1125][1] = ⵠᐃ.ᐃⲆΔⲆᐃΔΔ;
        Δⵠ[1124] = [];
        Δⵠ[1124][0] = ⵠᐃ.ᐃᐃΔⲆⲆΔⵠ;
        Δⵠ[1124][1] = ⵠᐃ.ΔⲆᐃᐃⵠⲆΔ;
        Δⵠ[1127] = [];
        Δⵠ[1127][0] = ⵠᐃ.ⵠΔΔΔΔᐃⵠ;
        Δⵠ[1127][1] = ⵠᐃ.ΔⵠᐃΔΔΔⵠ;
        Δⵠ[1128] = ⵠᐃ.ᐃⲆⵠⲆᐃᐃᐃ;
        Δⵠ[1129] = ⵠᐃ.ⲆᐃⲆΔᐃⵠᐃ;
        Δⵠ[1130] = ⵠᐃ.ⵠᐃᐃⵠⲆΔⲆ;
        Δⵠ[1042] = [];
        Δⵠ[1042][0] = ⵠᐃ.ᐃⲆᐃΔᐃⲆᐃ;
        Δⵠ[1042][1] = ⵠᐃ.ᐃⲆⲆΔΔⵠᐃ;
        Δⵠ[1043] = [];
        Δⵠ[1043][0] = ⵠᐃ.ΔⵠⵠⲆⲆⵠᐃ;
        Δⵠ[1043][1] = ⵠᐃ.ⵠⵠⲆⵠᐃᐃΔ;
        Δⵠ[1044] = [];
        Δⵠ[1044][0] = ⵠᐃ.ᐃⲆᐃⲆᐃⲆΔ;
        Δⵠ[1044][1] = ⵠᐃ.ΔᐃᐃⲆⵠᐃΔ;
        Δⵠ[228] = [];
        Δⵠ[228][0] = ⵠᐃ.ΔΔΔᐃᐃᐃⲆ;
        Δⵠ[228][1] = ⵠᐃ.ΔΔΔᐃᐃᐃⲆ;
        Δⵠ[234] = [];
        Δⵠ[234][0] = ⵠᐃ.ⵠᐃᐃᐃⵠⲆΔ;
        Δⵠ[234][1] = ⵠᐃ.ⵠᐃᐃᐃⵠⲆΔ;
        Δⵠ[249] = [];
        Δⵠ[249][0] = ⵠᐃ.ᐃᐃΔⲆⲆⲆⵠ;
        Δⵠ[249][1] = ⵠᐃ.ᐃᐃΔⲆⲆⲆⵠ;
        Δⵠ[1045] = ⵠᐃ.ᐃⲆΔᐃᐃΔⵠ;
        Δⵠ[89] = [];
        Δⵠ[89][0] = ⵠᐃ.ⵠΔΔᐃⲆⵠΔ;
        Δⵠ[89][1] = ⵠᐃ.ⲆΔᐃⲆⲆΔⵠ;
        Δⵠ[92] = [];
        Δⵠ[92][0] = ⵠᐃ.ᐃΔΔⲆΔⵠⵠ;
        Δⵠ[92][1] = ⵠᐃ.ⵠᐃⵠᐃΔΔΔ;
        Δⵠ[247] = [];
        Δⵠ[247][0] = [ⵠᐃ.ᐃΔΔᐃΔⲆⲆ, ⵠᐃ.ᐃΔⲆⵠⲆᐃΔ, ⵠᐃ.ⵠΔᐃⲆⵠᐃᐃ, ⵠᐃ.ᐃᐃⲆᐃΔⲆᐃ, ⵠᐃ.ΔⵠΔⲆᐃΔⲆ, ⵠᐃ.ⲆᐃΔⵠⵠᐃᐃ, ⵠᐃ.ᐃⵠᐃΔᐃⲆⵠ, ⵠᐃ.ᐃᐃⲆⵠⲆⲆᐃ, ⵠᐃ.ΔΔⵠⲆᐃᐃᐃ];
        Δⵠ[247][1] = [ⵠᐃ.ΔⵠⲆΔⲆⲆⵠ, ⵠᐃ.ΔⵠⵠⵠⵠΔⲆ, ⵠᐃ.ⲆⵠᐃΔⵠΔⵠ, ⵠᐃ.ΔⲆⵠⲆΔⵠⵠ, ⵠᐃ.ⵠΔⵠⲆΔⵠᐃ, ⵠᐃ.ΔⵠΔΔΔⵠᐃ, ⵠᐃ.ᐃᐃⵠⵠⲆⲆᐃ, ⵠᐃ.ᐃᐃⲆⵠⲆⲆᐃ, ⵠᐃ.ⵠⵠΔⵠⲆⲆΔ];
        Δⵠ[93] = [];
        Δⵠ[93][0] = ⵠᐃ.ΔⵠᐃΔΔⲆᐃ;
        Δⵠ[93][1] = ⵠᐃ.ⲆⲆⲆⲆᐃⵠᐃ;
        Δⵠ[225] = [];
        Δⵠ[225][0] = ⵠᐃ.ᐃᐃᐃΔⲆⵠⵠ;
        Δⵠ[225][1] = ⵠᐃ.ⵠⲆᐃᐃⲆΔⵠ;
        Δⵠ[226] = [];
        Δⵠ[226][0] = ⵠᐃ.ⲆΔⵠᐃⵠΔⵠ;
        Δⵠ[226][1] = ⵠᐃ.ΔⵠⲆᐃⵠᐃᐃ;
        Δⵠ[24] = [];
        Δⵠ[24][0] = ⵠᐃ.ⲆⲆⲆⵠᐃⲆᐃ;
        Δⵠ[24][1] = ⵠᐃ.ⲆᐃΔΔᐃⲆΔ;
        Δⵠ[88] = [];
        Δⵠ[88][0] = ⵠᐃ.ᐃΔⲆΔⲆᐃΔⵠΔ;
        Δⵠ[88][1] = ⵠᐃ.ΔᐃΔᐃⲆΔⵠΔᐃ;
        Δⵠ[87] = [];
        Δⵠ[87][0] = ⵠᐃ.ⵠⲆᐃⵠΔⲆⲆⵠᐃ;
        Δⵠ[87][1] = ⵠᐃ.ΔⵠΔⵠᐃᐃⲆⵠⵠ;
        Δⵠ[82] = [];
        Δⵠ[82][0] = ⵠᐃ.ⵠⲆⲆⲆⲆⵠᐃ;
        Δⵠ[82][1] = ⵠᐃ.ᐃⲆⲆΔΔⵠΔ;
        Δⵠ[621] = [];
        Δⵠ[621][0] = [];
        Δⵠ[621][1] = [];
        Δⵠ[621][0].push(ⵠᐃ.ⲆⲆᐃⵠᐃⲆⵠⲆⲆ);
        Δⵠ[621][0].push(ⵠᐃ.ⵠΔⵠⲆⵠⵠΔⲆⵠ);
        Δⵠ[621][0].push(ⵠᐃ.ᐃΔⲆⲆⲆΔΔⵠⲆ);
        Δⵠ[621][1].push(ⵠᐃ.ΔⲆⵠⲆⲆⵠΔᐃⵠ);
        Δⵠ[621][1].push(ⵠᐃ.ⵠΔⵠᐃⵠⲆΔⲆⵠ);
        Δⵠ[621][1].push(ⵠᐃ.ⲆᐃⲆⵠᐃⲆⵠΔⵠ);
        Δⵠ[619] = [];
        Δⵠ[619][0] = [];
        Δⵠ[619][1] = [];
        Δⵠ[619][0].push(ⵠᐃ.ⵠΔⲆⲆⵠⵠᐃⲆⲆ);
        Δⵠ[619][0].push(ⵠᐃ.ΔⲆⲆΔΔΔⵠᐃΔ);
        Δⵠ[619][0].push(ⵠᐃ.ⲆⲆⲆΔᐃΔΔⲆⲆ);
        Δⵠ[619][1].push(ⵠᐃ.ᐃΔⵠⵠΔⲆⵠΔⲆ);
        Δⵠ[619][1].push(ⵠᐃ.ⵠⲆⵠᐃⲆᐃⲆΔⵠ);
        Δⵠ[619][1].push(ⵠᐃ.ⵠⲆⵠᐃⵠΔⲆΔᐃ);
        Δⵠ[620] = [];
        Δⵠ[620][0] = [];
        Δⵠ[620][1] = [];
        Δⵠ[620][0].push(ⵠᐃ.ⲆᐃᐃᐃⵠⲆᐃⲆᐃ);
        Δⵠ[620][0].push(ⵠᐃ.ⵠΔⲆᐃΔᐃᐃⵠⲆ);
        Δⵠ[620][0].push(ⵠᐃ.ⲆⵠᐃⵠⲆⵠΔΔⵠ);
        Δⵠ[620][1].push(ⵠᐃ.ⲆⲆΔⵠⵠⲆᐃᐃⲆ);
        Δⵠ[620][1].push(ⵠᐃ.ᐃΔⲆⵠᐃΔⲆΔⵠ);
        Δⵠ[620][1].push(ⵠᐃ.ΔΔⵠⲆᐃΔⵠᐃΔ);
        ᐃⲆⲆⲆ.g = [];
        ᐃⲆⲆⲆ.g[0] = [ⵠᐃ.ⵠᐃΔΔⵠΔⲆ, ⵠᐃ.ᐃΔΔΔᐃⲆΔ];
        ᐃⲆⲆⲆ.g[1] = ᐃⲆⲆⲆ.g[0];
        ᐃⲆⲆⲆ.g[2] = [ⵠᐃ.ᐃⵠⵠΔⵠⲆⵠ, ⵠᐃ.ΔᐃⵠⲆⲆᐃⲆ];
        ᐃⲆⲆⲆ.m = [];
        ᐃⲆⲆⲆ.m[0] = [ⵠᐃ.ΔⲆᐃⲆΔᐃⲆ, ⵠᐃ.ᐃⲆΔⵠⵠΔⵠ];
        ᐃⲆⲆⲆ.m[1] = ᐃⲆⲆⲆ.m[0];
        ᐃⲆⲆⲆ.m[2] = [ⵠᐃ.ΔΔⵠⵠᐃⲆⵠ, ⵠᐃ.ΔᐃⲆⲆⵠⵠⲆ];
        ᐃⲆⲆⲆ.la = [];
        ᐃⲆⲆⲆ.la[0] = [ⵠᐃ.ᐃᐃⵠⲆΔᐃᐃ, ⵠᐃ.ⲆⵠⲆΔΔⵠᐃ];
        ᐃⲆⲆⲆ.la[1] = ᐃⲆⲆⲆ.la[0];
        ᐃⲆⲆⲆ.la[2] = ᐃⲆⲆⲆ.la[0];
        ᐃⲆⲆⲆ.la[3] = ᐃⲆⲆⲆ.la[0];
        ᐃⲆⲆⲆ.la[4] = ᐃⲆⲆⲆ.la[0];
        ᐃⲆⲆⲆ.la[5] = ᐃⲆⲆⲆ.la[0];
        ᐃⲆⲆⲆ.s = [];
        ᐃⲆⲆⲆ.s[0] = [ⵠᐃ.ΔⵠⵠΔⲆⲆᐃ, ⵠᐃ.ⲆⵠⲆᐃⲆΔⲆ];
        ᐃⲆⲆⲆ.s[1] = ᐃⲆⲆⲆ.s[0];
        ᐃⲆⲆⲆ.s[2] = [ⵠᐃ.ⲆΔⵠᐃΔΔⲆ, ⵠᐃ.ᐃⵠⵠⵠⵠᐃΔ];
        ᐃⲆⲆⲆ.p = [];
        ᐃⲆⲆⲆ.p[0] = [ⵠᐃ.ⵠΔΔⲆᐃⲆⵠ, ⵠᐃ.ⵠΔΔⲆᐃⲆⵠ];
        ᐃⲆⲆⲆ.a = [];
        ᐃⲆⲆⲆ.a[0] = [ⵠᐃ.ⵠΔⲆⵠⵠΔⵠ, ⵠᐃ.ⲆⲆⵠΔΔⲆΔ];
        ᐃⲆⲆⲆ.a[1] = ᐃⲆⲆⲆ.a[0];
        ᐃⲆⲆⲆ.a[2] = ᐃⲆⲆⲆ.a[0];
        ᐃⲆⲆⲆ.d = [];
        ᐃⲆⲆⲆ.d[0] = [ⵠᐃ.ᐃᐃᐃΔΔᐃⲆ, ⵠᐃ.ⵠⲆⵠⲆᐃΔⵠ];
        ᐃⲆⲆⲆ.d[1] = ᐃⲆⲆⲆ.d[0];
        ᐃⲆⲆⲆ.d[2] = ᐃⲆⲆⲆ.d[0];
        ᐃⲆⲆⲆ.re = [];
        ᐃⲆⲆⲆ.re[0] = [ⵠᐃ.ᐃⲆᐃⵠⲆⵠⵠ, ⵠᐃ.ⲆⲆⲆΔⲆᐃⲆ];
        ᐃⲆⲆⲆ.re[1] = ᐃⲆⲆⲆ.re[0];
        ᐃⲆⲆⲆ.re[2] = ᐃⲆⲆⲆ.re[0];
        ᐃⲆⲆⲆ.f = [];
        ᐃⲆⲆⲆ.f[0] = [ⵠᐃ.ⵠᐃⵠⵠᐃᐃᐃ, ⵠᐃ.ⵠⵠⵠⲆⲆᐃⲆ];
        ᐃⲆⲆⲆ.f[1] = ᐃⲆⲆⲆ.f[0];
        ᐃⲆⲆⲆ.f[2] = ᐃⲆⲆⲆ.f[0];
        ᐃⲆⲆⲆ.isl = [];
        ᐃⲆⲆⲆ.isl[0] = [ⵠᐃ.ᐃⲆᐃᐃᐃⲆⵠ, ⵠᐃ.ⲆⲆᐃⲆⵠᐃⲆ];
        ᐃⲆⲆⲆ.isl[1] = ᐃⲆⲆⲆ.isl[0];
        ᐃⲆⲆⲆ.isl[2] = ᐃⲆⲆⲆ.isl[0];
        ᐃⲆⲆⲆ.c = [];
        ᐃⲆⲆⲆ.c[0] = [ⵠᐃ.ⵠᐃⲆᐃⵠᐃᐃ, ⵠᐃ.ΔⵠⲆᐃΔᐃⵠ];
        ᐃⲆⲆⲆ.c[1] = ᐃⲆⲆⲆ.c[0];
        ᐃⲆⲆⲆ.c[2] = ᐃⲆⲆⲆ.c[0];
        ᐃⲆⲆⲆ.wtb = [];
        ᐃⲆⲆⲆ.wtb[0] = [ⵠᐃ.ΔⲆⲆⵠΔᐃᐃ, ⵠᐃ.ⲆⲆᐃⵠᐃⲆⲆ];
        ᐃⲆⲆⲆ.PIRANHA = [ⵠᐃ.ⵠᐃⵠᐃⲆΔⲆ, ⵠᐃ.ΔᐃⲆⲆⲆⵠᐃ];
        ᐃⲆⲆⲆ.KRAKEN = [ⵠᐃ.ⵠᐃᐃⲆᐃΔⵠ, ⵠᐃ.ΔⵠᐃΔⲆΔΔ];
        ᐃⲆⲆⲆ.FOX = [ⵠᐃ.ⵠⵠⵠⲆΔΔᐃ, ⵠᐃ.ⲆΔΔᐃΔⲆⲆ];
        ᐃⲆⲆⲆ.WOLF = [ⵠᐃ.ⵠᐃΔᐃⲆⲆᐃ, ⵠᐃ.ⵠΔⲆᐃⲆᐃⵠ];
        ᐃⲆⲆⲆ.SPIDER = [ⵠᐃ.ⲆΔΔⲆⵠᐃⲆ, ⵠᐃ.ΔΔⲆⲆⲆΔⲆ];
        ᐃⲆⲆⲆ.BEAR = [ⵠᐃ.ⵠⵠᐃᐃᐃᐃⲆ, ⵠᐃ.ΔⵠᐃⵠⲆΔⵠ];
        ᐃⲆⲆⲆ.CAVE = [ⵠᐃ.ⵠΔΔⵠⵠΔⲆ, ⵠᐃ.ⵠᐃΔΔΔᐃⲆ];
        ᐃⲆⲆⲆ.MAP = [ⵠᐃ.ⲆⵠⲆⵠⲆⵠⵠ, ⵠᐃ.ᐃⲆⵠΔΔΔⵠ];
        ᐃⲆⲆⲆ.FOREST = [ⵠᐃ.ᐃⲆⲆⲆⵠⵠⲆ, ⵠᐃ.ⵠⲆⵠᐃΔᐃΔ];
        ᐃⲆⲆⲆ.WINTER = [ⵠᐃ.ΔΔⲆᐃⵠΔᐃ, ⵠᐃ.ᐃΔⵠⲆⵠΔⲆ];
        ᐃⲆⲆⲆ.DESERT = [ⵠᐃ.ⵠⲆⲆⲆᐃⵠΔ, ⵠᐃ.ⵠᐃΔΔᐃⵠᐃ];
        ᐃⲆⲆⲆ.LAVA = [ⵠᐃ.ⲆⵠΔⲆⵠΔⵠ, ⵠᐃ.ⲆⲆᐃⲆⵠⵠⲆ];
        for (var c in ᐃⲆⲆⲆ) {
            for (var d = ᐃⲆⲆⲆ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ᐃⵠΔⲆᐃⵠⲆ !== undefined) {
                    f.ᐃⵠΔⲆᐃⵠⲆ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ᐃⵠΔⲆᐃⵠⲆ !== undefined) {
                            f[g].ᐃⵠΔⲆᐃⵠⲆ();
                        }
                    }
                }
            }
        }
        console.log(ol, ii);
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Kt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        Kt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        Dt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        Kt(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Kt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        Kt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        Dt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        Dt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Kt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Dt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        Kt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        Dt(e, c[3], c[4], a * 6);
        return d;
    }
    function ac(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            Dt(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        Dt(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        Dt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        Dt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        Dt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        Dt(e, b[3], b[3], a * 12);
        return d;
    }
    function rc() {
        Δⵠ[814] = Nb(1, [{
            f: qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[815] = Δⵠ[814];
        Δⵠ[955] = [];
        Δⵠ[955][0] = ⵠᐃ.ⲆⲆⵠΔᐃᐃⵠ;
        Δⵠ[955][1] = ⵠᐃ.ᐃⵠΔⵠΔΔᐃ;
        Δⵠ[955][2] = ⵠᐃ.ⲆⲆⲆⲆⵠⵠⲆ;
        Δⵠ[956] = Δⵠ[955];
        Δⵠ[972] = [];
        Δⵠ[972][0] = ⵠᐃ.ΔⵠΔΔᐃⵠΔ;
        Δⵠ[972][1] = ⵠᐃ.ⲆⲆᐃΔΔⲆᐃ;
        Δⵠ[972][2] = ⵠᐃ.ⵠⲆᐃΔΔΔᐃ;
        Δⵠ[973] = Δⵠ[972];
        Δⵠ[987] = [];
        Δⵠ[987][0] = ⵠᐃ.ᐃΔᐃᐃᐃⵠᐃ;
        Δⵠ[987][1] = ⵠᐃ.ⲆⲆⵠⲆᐃⵠⲆ;
        Δⵠ[987][2] = ⵠᐃ.ⲆΔⵠⲆⲆⵠᐃ;
        Δⵠ[988] = Δⵠ[987];
        Δⵠ[1154] = [];
        Δⵠ[1154][0] = ⵠᐃ.ⲆⵠΔᐃⲆⲆΔ;
        Δⵠ[1154][1] = ⵠᐃ.ΔⵠΔΔᐃⵠⵠ;
        Δⵠ[1154][2] = ⵠᐃ.ⵠΔᐃⲆⵠΔᐃ;
        Δⵠ[1155] = Δⵠ[1154];
        Δⵠ[965] = [];
        Δⵠ[965][0] = ⵠᐃ.ᐃⲆᐃⵠᐃᐃⵠ;
        Δⵠ[965][1] = ⵠᐃ.ⵠⲆⵠΔᐃᐃⵠ;
        Δⵠ[965][2] = ⵠᐃ.ΔⲆⲆΔᐃᐃᐃ;
        Δⵠ[974] = Δⵠ[965];
        Δⵠ[1028] = [];
        Δⵠ[1028][0] = ⵠᐃ.ⲆⵠᐃΔΔⲆⲆ;
        Δⵠ[1028][1] = ⵠᐃ.ⲆⲆᐃⵠΔᐃᐃ;
        Δⵠ[1028][2] = ⵠᐃ.Δⵠᐃᐃᐃᐃⵠ;
        Δⵠ[1029] = Δⵠ[1028];
        Δⵠ[1027] = Δⵠ[1028];
        Δⵠ[712] = [];
        Δⵠ[712][0] = ⵠᐃ.ΔᐃΔΔᐃⵠⲆΔΔ;
        Δⵠ[712][1] = ⵠᐃ.ⵠⵠⲆᐃⵠⲆⵠⵠΔ;
        Δⵠ[712][2] = ⵠᐃ.ⲆᐃᐃΔΔⲆⲆᐃᐃ;
        Δⵠ[713] = Δⵠ[712];
        Δⵠ[714] = Δⵠ[712];
        Δⵠ[1031] = [];
        Δⵠ[1031][0] = ⵠᐃ.ⲆⵠⵠⲆⵠᐃⲆ;
        Δⵠ[1031][1] = ⵠᐃ.ⲆⵠⵠⵠⵠΔᐃ;
        Δⵠ[1031][2] = ⵠᐃ.ⵠⲆⲆⵠⲆΔᐃ;
        Δⵠ[1032] = Δⵠ[1031];
        Δⵠ[1030] = Δⵠ[1031];
        Δⵠ[423] = [];
        Δⵠ[423][0] = ⵠᐃ.ⲆⵠⵠⲆⵠⵠⲆ;
        Δⵠ[423][1] = ⵠᐃ.ⲆⵠΔᐃⲆⲆⵠ;
        Δⵠ[423][2] = ⵠᐃ.ᐃᐃⵠΔΔΔᐃ;
        Δⵠ[425] = Δⵠ[423];
        Δⵠ[424] = Δⵠ[423];
        Δⵠ[1233] = [];
        Δⵠ[1233][0] = ⵠᐃ.ᐃᐃᐃΔⵠΔⲆᐃᐃ;
        Δⵠ[1233][1] = ⵠᐃ.ⵠᐃⲆᐃⲆⲆᐃⲆⵠ;
        Δⵠ[1233][2] = ⵠᐃ.ⲆⵠᐃⵠⲆⲆΔᐃΔ;
        Δⵠ[1234] = Δⵠ[1233];
        Δⵠ[1230] = [];
        Δⵠ[1230][0] = ⵠᐃ.ΔⲆⲆⲆⵠΔⵠⵠⵠ;
        Δⵠ[1230][1] = ⵠᐃ.ΔⲆⲆΔⲆⲆⲆⵠⲆ;
        Δⵠ[1230][2] = ⵠᐃ.ᐃⲆⵠⲆᐃⵠⲆᐃᐃ;
        Δⵠ[1232] = Δⵠ[1230];
        Δⵠ[1231] = Δⵠ[1230];
        Δⵠ[569] = [];
        Δⵠ[569][0] = ⵠᐃ.ⲆΔⵠΔⵠᐃᐃΔⵠ;
        Δⵠ[569][1] = ⵠᐃ.ᐃⵠⵠᐃⵠΔⲆⲆᐃ;
        Δⵠ[569][2] = ⵠᐃ.ⲆⵠⵠⵠⵠΔⵠⵠⲆ;
        Δⵠ[571] = Δⵠ[569];
        Δⵠ[570] = Δⵠ[569];
        Δⵠ[1166] = [];
        Δⵠ[1166][0] = ⵠᐃ.ΔΔᐃΔⲆᐃⲆⵠⲆ;
        Δⵠ[1166][1] = ⵠᐃ.ⲆⲆⵠⲆⲆᐃᐃⲆⵠ;
        Δⵠ[1166][2] = ⵠᐃ.ᐃΔΔⲆΔⵠⵠΔⲆ;
        Δⵠ[1167] = Δⵠ[1166];
        Δⵠ[1168] = Δⵠ[1166];
        Δⵠ[572] = [];
        Δⵠ[572][0] = ⵠᐃ.ᐃΔᐃⵠᐃⵠⵠⵠⲆ;
        Δⵠ[572][1] = ⵠᐃ.ⵠⵠⵠⵠΔⲆⵠΔΔ;
        Δⵠ[572][2] = ⵠᐃ.ⲆⵠΔⲆᐃⲆᐃⲆᐃ;
        Δⵠ[574] = Δⵠ[572];
        Δⵠ[573] = Δⵠ[572];
        Δⵠ[1169] = [];
        Δⵠ[1169][0] = ⵠᐃ.ᐃΔⵠⵠΔⲆⲆⲆⵠ;
        Δⵠ[1169][1] = ⵠᐃ.ⵠΔᐃΔᐃΔΔⲆᐃ;
        Δⵠ[1169][2] = ⵠᐃ.ⲆⲆᐃᐃⲆⵠⲆΔᐃ;
        Δⵠ[1170] = Δⵠ[1169];
        Δⵠ[1171] = Δⵠ[1169];
        Δⵠ[575] = [];
        Δⵠ[575][0] = ⵠᐃ.ᐃᐃⲆⵠᐃⵠᐃᐃΔ;
        Δⵠ[575][1] = ⵠᐃ.ΔⵠᐃⵠⲆⲆᐃᐃⲆ;
        Δⵠ[575][2] = ⵠᐃ.ᐃᐃΔⵠⵠⵠⵠᐃⵠ;
        Δⵠ[577] = Δⵠ[575];
        Δⵠ[576] = Δⵠ[575];
        Δⵠ[1172] = [];
        Δⵠ[1172][0] = ⵠᐃ.ⲆᐃᐃᐃΔᐃⲆΔᐃ;
        Δⵠ[1172][1] = ⵠᐃ.ᐃᐃⵠⲆᐃⵠᐃⵠⵠ;
        Δⵠ[1172][2] = ⵠᐃ.ΔΔⵠⲆᐃⵠⲆⲆΔ;
        Δⵠ[1173] = Δⵠ[1172];
        Δⵠ[1174] = Δⵠ[1172];
        Δⵠ[578] = [];
        Δⵠ[578][0] = ⵠᐃ.ΔⵠᐃⲆᐃᐃΔᐃⲆ;
        Δⵠ[578][1] = ⵠᐃ.ᐃⵠⲆⵠΔΔᐃⵠᐃ;
        Δⵠ[578][2] = ⵠᐃ.ⲆⵠⲆᐃᐃᐃⵠⵠΔ;
        Δⵠ[580] = Δⵠ[578];
        Δⵠ[579] = Δⵠ[578];
        Δⵠ[1175] = [];
        Δⵠ[1175][0] = ⵠᐃ.ⵠⲆⲆⵠⵠΔⵠⲆⲆ;
        Δⵠ[1175][1] = ⵠᐃ.ⲆⲆⲆⲆΔⵠᐃⵠⵠ;
        Δⵠ[1175][2] = ⵠᐃ.ᐃⲆΔᐃΔΔⲆⲆᐃ;
        Δⵠ[1176] = Δⵠ[1175];
        Δⵠ[1177] = Δⵠ[1175];
        Δⵠ[581] = [];
        Δⵠ[581][0] = ⵠᐃ.ⵠᐃᐃᐃⲆᐃⲆᐃⵠ;
        Δⵠ[581][1] = ⵠᐃ.ⵠⵠⲆΔᐃΔⵠⲆΔ;
        Δⵠ[581][2] = ⵠᐃ.ΔⵠᐃΔⵠⲆⲆⵠⲆ;
        Δⵠ[583] = Δⵠ[581];
        Δⵠ[582] = Δⵠ[581];
        Δⵠ[1178] = [];
        Δⵠ[1178][0] = ⵠᐃ.ⵠᐃᐃΔⵠΔΔⲆΔ;
        Δⵠ[1178][1] = ⵠᐃ.ⲆⵠΔⵠᐃΔΔΔᐃ;
        Δⵠ[1178][2] = ⵠᐃ.ΔᐃⵠⲆΔᐃΔⲆⵠ;
        Δⵠ[1179] = Δⵠ[1178];
        Δⵠ[1180] = Δⵠ[1178];
        Δⵠ[584] = [];
        Δⵠ[584][0] = ⵠᐃ.ⲆᐃⲆⲆΔⵠᐃΔᐃ;
        Δⵠ[584][1] = ⵠᐃ.ⵠⲆᐃⲆⲆⲆⵠΔΔ;
        Δⵠ[584][2] = ⵠᐃ.ⵠⵠᐃΔᐃᐃⵠᐃⲆ;
        Δⵠ[586] = Δⵠ[584];
        Δⵠ[585] = Δⵠ[584];
        Δⵠ[1181] = [];
        Δⵠ[1181][0] = ⵠᐃ.ΔⲆᐃⵠᐃΔⲆⵠⵠ;
        Δⵠ[1181][1] = ⵠᐃ.ⲆΔᐃΔΔΔᐃᐃᐃ;
        Δⵠ[1181][2] = ⵠᐃ.ᐃⵠΔΔᐃᐃⲆⵠΔ;
        Δⵠ[1182] = Δⵠ[1181];
        Δⵠ[1183] = Δⵠ[1181];
        Δⵠ[587] = [];
        Δⵠ[587][0] = ⵠᐃ.ⵠΔᐃⵠⲆᐃΔⲆΔ;
        Δⵠ[587][1] = ⵠᐃ.ΔᐃᐃΔⲆⵠⲆⲆⲆ;
        Δⵠ[587][2] = ⵠᐃ.ⵠⵠⵠⵠΔⲆⲆⲆⲆ;
        Δⵠ[589] = Δⵠ[587];
        Δⵠ[588] = Δⵠ[587];
        Δⵠ[1184] = [];
        Δⵠ[1184][0] = ⵠᐃ.ⲆΔⲆⵠⲆΔⲆⵠⵠ;
        Δⵠ[1184][1] = ⵠᐃ.ⲆⲆⲆΔᐃᐃⲆⵠᐃ;
        Δⵠ[1184][2] = ⵠᐃ.ΔᐃⲆⵠⲆⲆⵠⲆⵠ;
        Δⵠ[1185] = Δⵠ[1184];
        Δⵠ[1186] = Δⵠ[1184];
        Δⵠ[1257] = [];
        Δⵠ[1257][0] = ⵠᐃ.ⲆⲆᐃᐃⵠᐃΔⲆⲆ;
        Δⵠ[1257][1] = ⵠᐃ.ᐃⵠⲆⲆᐃᐃΔᐃⵠ;
        Δⵠ[1257][2] = ⵠᐃ.ΔⲆⵠⵠᐃΔΔⲆⵠ;
        Δⵠ[1258] = Δⵠ[1257];
        Δⵠ[1256] = Δⵠ[1257];
        Δⵠ[1260] = [];
        Δⵠ[1260][0] = ⵠᐃ.ᐃⲆⵠⲆᐃΔΔⵠⲆ;
        Δⵠ[1260][1] = ⵠᐃ.ΔⲆᐃΔᐃᐃᐃⵠᐃ;
        Δⵠ[1260][2] = ⵠᐃ.ⵠᐃⵠᐃΔᐃᐃΔⲆ;
        Δⵠ[1261] = Δⵠ[1260];
        Δⵠ[1259] = Δⵠ[1260];
        Δⵠ[1263] = [];
        Δⵠ[1263][0] = ⵠᐃ.ⲆⲆΔΔⲆⵠᐃⲆᐃ;
        Δⵠ[1263][1] = ⵠᐃ.ⵠΔΔᐃᐃⵠⵠⲆᐃ;
        Δⵠ[1263][2] = ⵠᐃ.ΔⲆⲆΔΔⵠⲆⵠᐃ;
        Δⵠ[1264] = Δⵠ[1263];
        Δⵠ[1262] = Δⵠ[1263];
        Δⵠ[1266] = [];
        Δⵠ[1266][0] = ⵠᐃ.ᐃⵠᐃΔᐃⲆᐃⲆⲆ;
        Δⵠ[1266][1] = ⵠᐃ.ᐃⵠⲆΔΔΔᐃⵠᐃ;
        Δⵠ[1266][2] = ⵠᐃ.ᐃΔⵠᐃⲆⵠᐃΔⵠ;
        Δⵠ[1267] = Δⵠ[1266];
        Δⵠ[1265] = Δⵠ[1266];
        Δⵠ[1269] = [];
        Δⵠ[1269][0] = ⵠᐃ.ΔⵠⲆⲆΔⵠΔⵠᐃ;
        Δⵠ[1269][1] = ⵠᐃ.ⵠⲆᐃᐃΔΔⵠⲆᐃ;
        Δⵠ[1269][2] = ⵠᐃ.ᐃΔΔⲆⲆᐃΔⲆⲆ;
        Δⵠ[1270] = Δⵠ[1269];
        Δⵠ[1268] = Δⵠ[1269];
        Δⵠ[1272] = [];
        Δⵠ[1272][0] = ⵠᐃ.ᐃΔⵠᐃⵠⲆᐃᐃⲆ;
        Δⵠ[1272][1] = ⵠᐃ.ᐃΔⵠΔⲆⵠᐃⲆΔ;
        Δⵠ[1272][2] = ⵠᐃ.ᐃⲆᐃⵠⵠⵠⲆⵠᐃ;
        Δⵠ[1273] = Δⵠ[1272];
        Δⵠ[1271] = Δⵠ[1272];
        Δⵠ[1239] = [];
        Δⵠ[1239][0] = ⵠᐃ.ᐃᐃᐃⵠⵠᐃᐃⵠⲆ;
        Δⵠ[1239][1] = ⵠᐃ.ᐃⲆᐃΔⵠΔᐃⲆⵠ;
        Δⵠ[1239][2] = ⵠᐃ.ⵠᐃⵠΔᐃⲆΔᐃⲆ;
        Δⵠ[1240] = Δⵠ[1239];
        Δⵠ[1238] = Δⵠ[1239];
        Δⵠ[1242] = [];
        Δⵠ[1242][0] = ⵠᐃ.ⲆΔⵠΔⵠᐃⵠᐃⲆ;
        Δⵠ[1242][1] = ⵠᐃ.ⲆΔᐃⵠⲆᐃⵠᐃᐃ;
        Δⵠ[1242][2] = ⵠᐃ.ΔⵠΔΔΔᐃⵠⵠΔ;
        Δⵠ[1243] = Δⵠ[1242];
        Δⵠ[1241] = Δⵠ[1242];
        Δⵠ[1245] = [];
        Δⵠ[1245][0] = ⵠᐃ.ⲆⲆΔΔΔΔⲆᐃΔ;
        Δⵠ[1245][1] = ⵠᐃ.ⵠⲆᐃⲆⵠᐃᐃΔᐃ;
        Δⵠ[1245][2] = ⵠᐃ.ⲆΔⲆⵠⵠᐃⵠΔⵠ;
        Δⵠ[1246] = Δⵠ[1245];
        Δⵠ[1244] = Δⵠ[1245];
        Δⵠ[1248] = [];
        Δⵠ[1248][0] = ⵠᐃ.ᐃⵠΔⵠΔⲆΔΔΔ;
        Δⵠ[1248][1] = ⵠᐃ.ⵠᐃΔⲆⲆⵠΔⲆΔ;
        Δⵠ[1248][2] = ⵠᐃ.ᐃΔⲆⵠⲆΔⵠΔᐃ;
        Δⵠ[1249] = Δⵠ[1248];
        Δⵠ[1247] = Δⵠ[1248];
        Δⵠ[1251] = [];
        Δⵠ[1251][0] = ⵠᐃ.ᐃᐃᐃᐃⵠᐃⵠΔᐃ;
        Δⵠ[1251][1] = ⵠᐃ.ΔᐃᐃⵠⲆⵠᐃᐃΔ;
        Δⵠ[1251][2] = ⵠᐃ.ᐃⲆⵠΔΔⲆΔᐃⲆ;
        Δⵠ[1252] = Δⵠ[1251];
        Δⵠ[1250] = Δⵠ[1251];
        Δⵠ[1254] = [];
        Δⵠ[1254][0] = ⵠᐃ.ⵠᐃᐃΔⲆᐃⵠⵠⵠ;
        Δⵠ[1254][1] = ⵠᐃ.ⵠⵠΔᐃⵠΔΔᐃᐃ;
        Δⵠ[1254][2] = ⵠᐃ.ᐃⲆⲆⵠᐃⲆⵠᐃⲆ;
        Δⵠ[1255] = Δⵠ[1254];
        Δⵠ[1253] = Δⵠ[1254];
        Δⵠ[1227] = [];
        Δⵠ[1227][0] = ⵠᐃ.ΔⲆᐃⵠΔᐃⲆⲆᐃ;
        Δⵠ[1227][1] = ⵠᐃ.ⲆᐃΔΔⲆΔΔⲆⵠ;
        Δⵠ[1227][2] = ⵠᐃ.ⵠᐃⵠⵠⵠΔⵠΔⵠ;
        Δⵠ[1229] = Δⵠ[1227];
        Δⵠ[1228] = Δⵠ[1227];
        Δⵠ[1187] = [];
        Δⵠ[1187][0] = ⵠᐃ.ⲆᐃⵠⵠᐃΔⵠ;
        Δⵠ[1187][1] = ⵠᐃ.ΔⲆΔᐃⲆⲆΔ;
        Δⵠ[1187][2] = ⵠᐃ.ΔⵠⲆⵠᐃⲆⲆ;
        Δⵠ[1188] = Δⵠ[1187];
        Δⵠ[Ur.ⲆⵠΔᐃⲆΔᐃⵠᐃ] = Δⵠ[1187];
        Δⵠ[840] = Nb(1, [{
            f: ob,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[841] = Δⵠ[840];
        Δⵠ[850] = Nb(1, [{
            f: Nm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[851] = Δⵠ[850];
        Δⵠ[644] = Nb(1, [{
            f: Sb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Fb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: jb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[643] = Δⵠ[644];
        Δⵠ[639] = Nb(1, [{
            f: Rb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[800] = Nb(1, [{
            f: Fu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[799] = Δⵠ[800];
        Δⵠ[631] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[632] = Δⵠ[631];
        Δⵠ[311] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[284] = Δⵠ[311];
        Δⵠ[808] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[809] = Δⵠ[808];
        Δⵠ[834] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[835] = Δⵠ[834];
        Δⵠ[845] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[846] = Δⵠ[845];
        Δⵠ[949] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[950] = Δⵠ[949];
        Δⵠ[951] = Δⵠ[949];
        Δⵠ[966] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[967] = Δⵠ[966];
        Δⵠ[968] = Δⵠ[966];
        Δⵠ[981] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[982] = Δⵠ[981];
        Δⵠ[983] = Δⵠ[981];
        Δⵠ[959] = Nb(1, [{
            f: Dd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[960] = Δⵠ[959];
        Δⵠ[961] = Δⵠ[959];
        Δⵠ[309] = Nb(1, [{
            f: Yb,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: Vb,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[302] = Δⵠ[309];
        Δⵠ[328] = Nb(1, [{
            f: Ub,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: Vb,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[327] = Δⵠ[328];
        Δⵠ[860] = Nb(1, [{
            f: dd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[865] = Nb(1, [{
            f: Jd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[829] = Nb(1, [{
            f: bd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[261] = Nb(1, [{
            f: cd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[292] = Nb(1, [{
            f: zd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[293] = Nb(1, [{
            f: wd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[455] = Nb(1, [{
            f: yd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[313] = Nb(1, [{
            f: ed,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[312] = Nb(1, [{
            f: ed,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[258] = Nb(1, [{
            f: ed,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[296] = Nb(1, [{
            f: ed,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[458] = Nb(1, [{
            f: ed,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[1017] = [];
        Δⵠ[1017][0] = ⵠᐃ.ⵠΔΔⲆᐃΔⲆ;
        Δⵠ[1017][1] = ⵠᐃ.ᐃᐃΔⲆᐃᐃΔ;
        Δⵠ[1017][2] = ⵠᐃ.ΔΔΔⵠΔⲆⵠ;
        Δⵠ[1019] = Δⵠ[1017];
        Δⵠ[1018] = Δⵠ[1017];
        Δⵠ[315] = Nb(1, [{
            f: Rd,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[297] = Nb(1, [{
            f: Fd,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[298] = Nb(1, [{
            f: _d,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[316] = Nb(1, [{
            f: Yb,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[830] = Δⵠ[829];
        Δⵠ[254] = Δⵠ[261];
        Δⵠ[290] = Δⵠ[292];
        Δⵠ[291] = Δⵠ[293];
        Δⵠ[456] = Δⵠ[455];
        Δⵠ[314] = Δⵠ[313];
        Δⵠ[256] = Δⵠ[312];
        Δⵠ[295] = Δⵠ[258];
        Δⵠ[257] = Δⵠ[296];
        Δⵠ[460] = Δⵠ[458];
        Δⵠ[277] = Nb(1, [{
            f: Tb,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[310] = Nb(1, [{
            f: zb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[262] = Δⵠ[310];
        Δⵠ[329] = Nb(1, [{
            f: qd,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[263] = Δⵠ[329];
        Δⵠ[331] = Nb(1, [{
            f: Nt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[332] = Δⵠ[331];
        Δⵠ[492] = Nb(1, [{
            f: qd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[493] = Δⵠ[492];
        Δⵠ[330] = Nb(1, [{
            f: Tt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[265] = Δⵠ[330];
        Δⵠ[317] = Nb(1, [{
            f: $d,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[318] = Δⵠ[317];
        Δⵠ[319] = Nb(1, [{
            f: ru,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[320] = Δⵠ[319];
        Δⵠ[362] = Nb(1, [{
            f: Ou,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[363] = Δⵠ[362];
        Δⵠ[364] = Nb(1, [{
            f: Ou,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[365] = Δⵠ[364];
        Δⵠ[361] = Nb(1, [{
            f: Lu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[360] = Δⵠ[361];
        Δⵠ[495] = Nb(1, [{
            f: Lu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[496] = Δⵠ[495];
        Δⵠ[335] = Nb(1, [{
            f: Ut,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[268] = Δⵠ[335];
        Δⵠ[372] = Nb(1, [{
            f: Qt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[371] = Δⵠ[372];
        Δⵠ[499] = Nb(1, [{
            f: Qt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[498] = Δⵠ[499];
        Δⵠ[375] = Nb(1, [{
            f: Rt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[374] = Δⵠ[375];
        Δⵠ[378] = Nb(1, [{
            f: Xt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[377] = Δⵠ[378];
        Δⵠ[337] = Nb(1, [{
            f: eu,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[338] = Δⵠ[337];
        Δⵠ[300] = Nb(1, [{
            f: Jb,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[323] = Nb(1, [{
            f: Jb,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[325] = Δⵠ[323];
        Δⵠ[305] = Nb(1, [{
            f: Hb,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[513] = Nb(1, [{
            f: Hb,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[515] = Δⵠ[513];
        Δⵠ[368] = Nb(1, [{
            f: pu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[1162] = Nb(1, [{
            f: pu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[178] = Nb(1, [{
            f: Yd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[179] = Nb(1, [{
            f: Yd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[624] = Nb(1, [{
            f: pu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[393] = Nb(1, [{
            f: pu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[505] = Nb(1, [{
            f: pu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[369] = Nb(1, [{
            f: qu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[370] = Δⵠ[369];
        Δⵠ[381] = Nb(1, [{
            f: Yt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[380] = Δⵠ[381];
        Δⵠ[502] = Nb(1, [{
            f: ou,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[503] = Δⵠ[502];
        Δⵠ[880] = Nb(1, [{
            f: ld,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[881] = Δⵠ[880];
        Δⵠ[882] = Nb(1, [{
            f: hd,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[883] = Δⵠ[882];
        Δⵠ[303] = Nb(1, [{
            f: Ob,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[304] = Δⵠ[303];
        Δⵠ[392] = [];
        Δⵠ[392][0] = ⵠᐃ.ⲆᐃⲆⵠΔⵠΔ;
        Δⵠ[392][1] = ⵠᐃ.ⲆⲆⲆΔⵠⲆᐃ;
        Δⵠ[392][2] = ⵠᐃ.ⲆⲆⵠⵠⲆᐃΔ;
        Δⵠ[367] = Δⵠ[392];
        Δⵠ[975] = [];
        Δⵠ[975][0] = ⵠᐃ.ⲆΔΔⲆΔⲆⲆ;
        Δⵠ[975][1] = ⵠᐃ.ᐃⵠᐃΔᐃⵠⲆ;
        Δⵠ[975][2] = ⵠᐃ.ᐃΔⵠΔⵠⲆⵠ;
        Δⵠ[977] = Δⵠ[975];
        Δⵠ[976] = Δⵠ[975];
        Δⵠ[978] = [];
        Δⵠ[978][0] = ⵠᐃ.ΔΔᐃⲆᐃⲆⵠ;
        Δⵠ[978][1] = ⵠᐃ.ᐃΔⲆΔⵠΔⲆ;
        Δⵠ[978][2] = ⵠᐃ.ⵠᐃⵠⵠⲆᐃᐃ;
        Δⵠ[980] = Δⵠ[978];
        Δⵠ[979] = Δⵠ[978];
        Δⵠ[1158] = [];
        Δⵠ[1158][0] = ⵠᐃ.ⲆⲆⲆⵠΔΔⲆ;
        Δⵠ[1158][1] = ⵠᐃ.ⲆⲆⲆⵠΔΔⲆ;
        Δⵠ[1158][2] = ⵠᐃ.ⲆⲆⲆⵠΔΔⲆ;
        Δⵠ[1159] = Δⵠ[1158];
        Δⵠ[426] = [];
        Δⵠ[426][0] = ⵠᐃ.ⲆⵠⲆⲆΔⵠⲆ;
        Δⵠ[426][1] = ⵠᐃ.ⵠΔⵠⵠⲆⲆΔ;
        Δⵠ[426][2] = ⵠᐃ.ⲆⵠΔΔᐃⲆᐃ;
        Δⵠ[427] = Δⵠ[426];
        Δⵠ[428] = Δⵠ[426];
        Δⵠ[1160] = [];
        Δⵠ[1160][0] = ⵠᐃ.ΔᐃᐃⲆⵠᐃⲆ;
        Δⵠ[1160][1] = ⵠᐃ.ΔᐃᐃⲆⵠᐃⲆ;
        Δⵠ[1160][2] = ⵠᐃ.ΔᐃᐃⲆⵠᐃⲆ;
        Δⵠ[1161] = Δⵠ[1160];
        Δⵠ[1236] = [];
        Δⵠ[1236][0] = ⵠᐃ.ⲆⵠᐃⵠⵠⵠⵠᐃΔ;
        Δⵠ[1236][1] = ⵠᐃ.ⵠΔᐃᐃⲆΔΔᐃΔ;
        Δⵠ[1236][2] = ⵠᐃ.ᐃⲆΔΔΔᐃⵠΔⲆ;
        Δⵠ[1235] = Δⵠ[1236];
        Δⵠ[1237] = Δⵠ[1236];
        Δⵠ[991] = [];
        Δⵠ[991][0] = ⵠᐃ.ΔⵠᐃΔⵠⲆⲆ;
        Δⵠ[991][1] = ⵠᐃ.ⵠᐃⵠΔⲆⲆⵠ;
        Δⵠ[991][2] = ⵠᐃ.ᐃΔᐃᐃᐃᐃΔ;
        Δⵠ[990] = Δⵠ[991];
        Δⵠ[992] = Δⵠ[991];
        Δⵠ[994] = [];
        Δⵠ[994][0] = ⵠᐃ.ⲆᐃⵠⵠⲆᐃⵠ;
        Δⵠ[994][1] = ⵠᐃ.ΔᐃⲆΔⵠⵠΔ;
        Δⵠ[994][2] = ⵠᐃ.ΔᐃⲆⲆⵠΔᐃ;
        Δⵠ[993] = Δⵠ[994];
        Δⵠ[995] = Δⵠ[994];
        Δⵠ[997] = [];
        Δⵠ[997][0] = ⵠᐃ.ⵠⲆᐃⲆᐃΔΔ;
        Δⵠ[997][1] = ⵠᐃ.ⲆⵠⵠᐃⲆⲆᐃ;
        Δⵠ[997][2] = ⵠᐃ.ᐃⲆⵠⵠⵠΔΔ;
        Δⵠ[996] = Δⵠ[997];
        Δⵠ[998] = Δⵠ[997];
        Δⵠ[1000] = [];
        Δⵠ[1000][0] = ⵠᐃ.ⲆᐃᐃᐃⲆΔΔ;
        Δⵠ[1000][1] = ⵠᐃ.ⵠⵠΔΔᐃΔΔ;
        Δⵠ[1000][2] = ⵠᐃ.ᐃⵠⲆⲆⵠᐃⲆ;
        Δⵠ[999] = Δⵠ[1000];
        Δⵠ[1001] = Δⵠ[1000];
        Δⵠ[1003] = [];
        Δⵠ[1003][0] = ⵠᐃ.ΔΔⲆⵠⲆΔⵠ;
        Δⵠ[1003][1] = ⵠᐃ.ΔᐃᐃᐃⲆⵠⵠ;
        Δⵠ[1003][2] = ⵠᐃ.ᐃⵠᐃⲆⲆᐃⵠ;
        Δⵠ[1002] = Δⵠ[1003];
        Δⵠ[1004] = Δⵠ[1003];
        Δⵠ[1006] = [];
        Δⵠ[1006][0] = ⵠᐃ.ΔᐃΔⲆᐃⲆⲆ;
        Δⵠ[1006][1] = ⵠᐃ.ⵠᐃⵠΔᐃⵠΔ;
        Δⵠ[1006][2] = ⵠᐃ.ᐃᐃᐃᐃΔⵠᐃ;
        Δⵠ[1005] = Δⵠ[1006];
        Δⵠ[1007] = Δⵠ[1006];
        Δⵠ[1009] = [];
        Δⵠ[1009][0] = ⵠᐃ.ΔᐃᐃⲆᐃⵠⵠ;
        Δⵠ[1009][1] = ⵠᐃ.ᐃⲆⲆΔΔⲆΔ;
        Δⵠ[1009][2] = ⵠᐃ.ⲆⵠΔⵠⲆⲆᐃ;
        Δⵠ[1008] = Δⵠ[1009];
        Δⵠ[1010] = Δⵠ[1009];
        Δⵠ[1012] = [];
        Δⵠ[1012][0] = ⵠᐃ.ⲆⲆΔᐃⵠᐃⲆ;
        Δⵠ[1012][1] = ⵠᐃ.ⲆΔᐃΔⲆⵠⲆ;
        Δⵠ[1012][2] = ⵠᐃ.ⵠⵠᐃⲆᐃᐃⵠ;
        Δⵠ[1011] = Δⵠ[1012];
        Δⵠ[1013] = Δⵠ[1012];
        Δⵠ[1015] = [];
        Δⵠ[1015][0] = ⵠᐃ.ᐃΔⵠΔⵠᐃⲆ;
        Δⵠ[1015][1] = ⵠᐃ.ᐃⲆΔⵠᐃΔⲆ;
        Δⵠ[1015][2] = ⵠᐃ.ⲆⵠΔⵠΔⵠⲆ;
        Δⵠ[1014] = Δⵠ[1015];
        Δⵠ[1016] = Δⵠ[1015];
        Δⵠ[1035] = [];
        Δⵠ[1035][0] = ⵠᐃ.ⲆᐃⲆⵠᐃ;
        Δⵠ[1035][1] = ⵠᐃ.ⲆᐃⲆⵠᐃ;
        Δⵠ[1035][2] = ⵠᐃ.ⲆᐃⲆⵠᐃ;
        Δⵠ[Ur.ⵠⵠᐃᐃΔⵠⲆⵠⲆ] = Δⵠ[1035];
        Δⵠ[1036] = Δⵠ[1035];
        Δⵠ[1037] = [];
        Δⵠ[1037][0] = ⵠᐃ.ΔᐃⵠᐃⲆ;
        Δⵠ[1037][1] = ⵠᐃ.ΔᐃⵠᐃⲆ;
        Δⵠ[1037][2] = ⵠᐃ.ΔᐃⵠᐃⲆ;
        Δⵠ[Ur.ΔᐃΔⲆΔᐃⲆⵠΔ] = Δⵠ[1037];
        Δⵠ[1038] = Δⵠ[1037];
        Δⵠ[1039] = [];
        Δⵠ[1039][0] = ⵠᐃ.ᐃΔⲆΔΔ;
        Δⵠ[1039][1] = ⵠᐃ.ᐃΔⲆΔΔ;
        Δⵠ[1039][2] = ⵠᐃ.ᐃΔⲆΔΔ;
        Δⵠ[Ur.ΔⲆΔᐃᐃᐃⵠⵠⲆ] = Δⵠ[1039];
        Δⵠ[1040] = Δⵠ[1039];
        Δⵠ[1156] = [];
        Δⵠ[1156][0] = ⵠᐃ.ⲆᐃΔᐃᐃ;
        Δⵠ[1156][1] = ⵠᐃ.ⲆᐃΔᐃᐃ;
        Δⵠ[1156][2] = ⵠᐃ.ⲆᐃΔᐃᐃ;
        Δⵠ[1157] = Δⵠ[1156];
        Δⵠ[1046] = [];
        Δⵠ[1046][0] = ⵠᐃ.ⵠⵠᐃⲆⵠⵠⵠ;
        Δⵠ[1046][1] = ⵠᐃ.ⲆΔᐃⵠⵠᐃⲆ;
        Δⵠ[1046][2] = ⵠᐃ.ΔⲆΔⲆΔᐃⵠ;
        Δⵠ[1048] = Δⵠ[1046];
        Δⵠ[1047] = Δⵠ[1046];
        Δⵠ[744] = [];
        Δⵠ[744][0] = ⵠᐃ.ᐃⲆⵠΔⲆᐃᐃ;
        Δⵠ[744][1] = ⵠᐃ.ΔⲆΔⲆⵠΔᐃ;
        Δⵠ[744][2] = ⵠᐃ.ᐃⵠᐃⵠⵠΔⲆ;
        Δⵠ[746] = Δⵠ[744];
        Δⵠ[745] = Δⵠ[744];
        Δⵠ[747] = [];
        Δⵠ[747][0] = ⵠᐃ.ΔΔΔᐃᐃᐃⵠ;
        Δⵠ[747][1] = ⵠᐃ.ᐃⵠᐃⲆⵠΔᐃ;
        Δⵠ[747][2] = ⵠᐃ.ⲆΔⲆⵠⵠⵠⲆ;
        Δⵠ[749] = Δⵠ[747];
        Δⵠ[748] = Δⵠ[747];
        Δⵠ[1049] = [];
        Δⵠ[1049][0] = ⵠᐃ.ⵠⵠᐃᐃᐃΔΔ;
        Δⵠ[1049][1] = ⵠᐃ.ⲆⲆΔΔΔΔⲆ;
        Δⵠ[1049][2] = ⵠᐃ.ᐃⲆⲆⲆⲆⵠⲆ;
        Δⵠ[1051] = Δⵠ[1049];
        Δⵠ[1050] = Δⵠ[1049];
        Δⵠ[1189] = [];
        Δⵠ[1189][0] = ⵠᐃ.ⲆᐃΔⲆΔⲆΔ;
        Δⵠ[1189][1] = ⵠᐃ.ᐃⵠᐃΔΔΔⲆ;
        Δⵠ[1189][2] = ⵠᐃ.ⵠⲆᐃΔⵠΔⲆ;
        Δⵠ[1191] = Δⵠ[1189];
        Δⵠ[1190] = Δⵠ[1189];
        Δⵠ[1110] = [];
        Δⵠ[1110][0] = ⵠᐃ.ΔⲆᐃᐃΔⵠⵠ;
        Δⵠ[1110][1] = ⵠᐃ.ᐃᐃⵠᐃΔΔΔ;
        Δⵠ[1110][2] = ⵠᐃ.ᐃⵠΔᐃΔΔΔ;
        Δⵠ[1112] = Δⵠ[1110];
        Δⵠ[1111] = Δⵠ[1110];
        Δⵠ[1131] = [];
        Δⵠ[1131][0] = ⵠᐃ.ⵠⲆⲆᐃⵠΔᐃᐃⲆ;
        Δⵠ[1131][1] = ⵠᐃ.ΔᐃᐃᐃⲆᐃᐃⵠⵠ;
        Δⵠ[1131][2] = ⵠᐃ.ⵠⵠⵠⲆΔᐃⲆⵠⵠ;
        Δⵠ[1133] = Δⵠ[1131];
        Δⵠ[1132] = Δⵠ[1131];
        Δⵠ[1137] = [];
        Δⵠ[1137][0] = ⵠᐃ.ᐃⲆΔΔᐃⲆΔ;
        Δⵠ[1137][1] = ⵠᐃ.ᐃⵠΔΔⲆⲆᐃ;
        Δⵠ[1137][2] = ⵠᐃ.ᐃᐃᐃΔΔᐃΔ;
        Δⵠ[1138] = Δⵠ[1137];
        Δⵠ[1139] = Δⵠ[1137];
        Δⵠ[1140] = [];
        Δⵠ[1140][0] = ⵠᐃ.ⵠⲆⲆⲆⲆⲆΔ;
        Δⵠ[1140][1] = ⵠᐃ.ΔΔⲆᐃⲆΔᐃ;
        Δⵠ[1140][2] = ⵠᐃ.ⲆΔᐃⲆⲆⵠⵠ;
        Δⵠ[1141] = Δⵠ[1140];
        Δⵠ[1142] = Δⵠ[1140];
        Δⵠ[1117] = [];
        Δⵠ[1117][0] = ⵠᐃ.ⵠⵠΔᐃᐃΔⵠ;
        Δⵠ[1117][1] = ⵠᐃ.ⵠᐃⵠᐃΔⲆΔ;
        Δⵠ[1117][2] = ⵠᐃ.Δⵠⵠⵠᐃⵠᐃ;
        Δⵠ[1116] = Δⵠ[1117];
        Δⵠ[1118] = Δⵠ[1117];
        Δⵠ[1080] = [];
        Δⵠ[1080][0] = ⵠᐃ.ⵠΔᐃΔⵠᐃⲆ;
        Δⵠ[1080][1] = ⵠᐃ.ⵠᐃⲆⲆΔⲆⲆ;
        Δⵠ[1080][2] = ⵠᐃ.ΔⵠΔΔΔᐃⲆ;
        Δⵠ[1082] = Δⵠ[1080];
        Δⵠ[1081] = Δⵠ[1080];
        Δⵠ[1224] = [];
        Δⵠ[1224][0] = ⵠᐃ.ᐃᐃΔⲆⵠⵠⵠⵠⵠ;
        Δⵠ[1224][1] = ⵠᐃ.ΔⵠᐃⲆⲆΔΔⲆⵠ;
        Δⵠ[1224][2] = ⵠᐃ.ΔⲆⵠⲆᐃΔⵠᐃᐃ;
        Δⵠ[1226] = Δⵠ[1224];
        Δⵠ[1225] = Δⵠ[1224];
        Δⵠ[1095] = [];
        Δⵠ[1095][0] = ⵠᐃ.ᐃⵠΔⲆᐃΔᐃ;
        Δⵠ[1095][1] = ⵠᐃ.ⵠΔⵠᐃⲆΔⵠ;
        Δⵠ[1095][2] = ⵠᐃ.ΔⵠⵠⵠⲆⲆᐃ;
        Δⵠ[1097] = Δⵠ[1095];
        Δⵠ[1096] = Δⵠ[1095];
        Δⵠ[717] = Nb(1, [{
            f: Bm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: Im,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[718] = Δⵠ[717];
        Δⵠ[408] = Nb(1, [{
            f: St,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[409] = Δⵠ[408];
        Δⵠ[907] = Nb(1, [{
            f: fu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[909] = Δⵠ[907];
        Δⵠ[908] = Δⵠ[907];
        Δⵠ[197] = Nb(1, [{
            f: bu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[906] = Δⵠ[197];
        Δⵠ[901] = Nb(1, [{
            f: iu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[900] = Δⵠ[901];
        Δⵠ[899] = Δⵠ[901];
        Δⵠ[401] = Nb(1, [{
            f: hu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[402] = Δⵠ[401];
        Δⵠ[395] = Nb(1, [{
            f: au,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[396] = Δⵠ[395];
        Δⵠ[398] = Nb(1, [{
            f: du,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[399] = Δⵠ[398];
        Δⵠ[404] = Nb(1, [{
            f: lu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[405] = Δⵠ[404];
        Δⵠ[472] = Nb(1, [{
            f: cu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[473] = Δⵠ[472];
        Δⵠ[874] = Nb(1, [{
            f: $t,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[876] = Δⵠ[874];
        Δⵠ[875] = Δⵠ[874];
        Δⵠ[477] = Nb(1, [{
            f: Gu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[478] = Δⵠ[477];
        Δⵠ[709] = Nb(1, [{
            f: tc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[711] = Δⵠ[709];
        Δⵠ[550] = Nb(1, [{
            f: Em,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[551] = Δⵠ[550];
        Δⵠ[480] = Nb(1, [{
            f: Gu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[481] = Δⵠ[480];
        Δⵠ[483] = Nb(1, [{
            f: Gu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[484] = Δⵠ[483];
        Δⵠ[486] = Nb(1, [{
            f: Gu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[487] = Δⵠ[486];
        Δⵠ[489] = [];
        Δⵠ[489][0] = ⵠᐃ.ᐃⲆΔⵠᐃᐃⲆ;
        Δⵠ[489][1] = ⵠᐃ.ᐃΔⵠⵠᐃⲆᐃ;
        Δⵠ[489][2] = ⵠᐃ.ΔⵠΔΔΔⵠΔ;
        Δⵠ[491] = Δⵠ[489];
        Δⵠ[490] = Δⵠ[489];
        Δⵠ[1195] = [];
        Δⵠ[1195][0] = ⵠᐃ.ΔΔⵠᐃⲆΔᐃ;
        Δⵠ[1195][1] = ⵠᐃ.ᐃⲆⲆⵠᐃΔΔ;
        Δⵠ[1195][2] = ⵠᐃ.ⵠⵠⲆⲆⲆⲆᐃ;
        Δⵠ[1197] = Δⵠ[1195];
        Δⵠ[1196] = Δⵠ[1195];
        Δⵠ[1199] = [];
        Δⵠ[1199][0] = ⵠᐃ.ⵠΔⲆⵠⲆᐃᐃ;
        Δⵠ[1199][1] = ⵠᐃ.ΔΔⵠⲆⲆⵠΔ;
        Δⵠ[1199][2] = ⵠᐃ.ΔᐃⲆΔⵠΔᐃ;
        Δⵠ[1201] = Δⵠ[1199];
        Δⵠ[1200] = Δⵠ[1199];
        Δⵠ[1203] = [];
        Δⵠ[1203][0] = ⵠᐃ.ΔⲆᐃⵠᐃᐃᐃ;
        Δⵠ[1203][1] = ⵠᐃ.ᐃⵠⲆⵠᐃⲆᐃ;
        Δⵠ[1203][2] = ⵠᐃ.ⲆΔⵠᐃⲆΔⵠ;
        Δⵠ[1205] = Δⵠ[1203];
        Δⵠ[1204] = Δⵠ[1203];
        Δⵠ[1207] = [];
        Δⵠ[1207][0] = ⵠᐃ.ΔΔᐃⲆᐃΔᐃ;
        Δⵠ[1207][1] = ⵠᐃ.ⵠⲆᐃΔⵠⲆⵠ;
        Δⵠ[1207][2] = ⵠᐃ.ΔΔⲆⲆΔⵠⲆ;
        Δⵠ[1209] = Δⵠ[1207];
        Δⵠ[1208] = Δⵠ[1207];
        Δⵠ[1211] = [];
        Δⵠ[1211][0] = ⵠᐃ.ⲆᐃᐃⵠⵠⲆⵠ;
        Δⵠ[1211][1] = ⵠᐃ.ⵠⲆΔⵠⵠⲆᐃ;
        Δⵠ[1211][2] = ⵠᐃ.ΔⵠᐃⲆᐃᐃⲆ;
        Δⵠ[1213] = Δⵠ[1211];
        Δⵠ[1212] = Δⵠ[1211];
        Δⵠ[1215] = [];
        Δⵠ[1215][0] = ⵠᐃ.ⵠⲆⵠⲆⲆⲆᐃ;
        Δⵠ[1215][1] = ⵠᐃ.ΔⲆᐃᐃⲆᐃⵠ;
        Δⵠ[1215][2] = ⵠᐃ.ⵠᐃᐃᐃⵠΔᐃ;
        Δⵠ[1217] = Δⵠ[1215];
        Δⵠ[1216] = Δⵠ[1215];
        Δⵠ[518] = Nb(1, [{
            f: dm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[519] = Δⵠ[518];
        Δⵠ[532] = Nb(1, [{
            f: Pm,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[533] = Δⵠ[532];
        Δⵠ[521] = Nb(1, [{
            f: km,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        Δⵠ[523] = Nb(1, [{
            f: km,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        Δⵠ[529] = Nb(1, [{
            f: wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: fm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: Tm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[530] = Δⵠ[529];
        Δⵠ[553] = Nb(1, [{
            f: Am,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[555] = Δⵠ[553];
        Δⵠ[541] = Nb(1, [{
            f: bm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[542] = Δⵠ[541];
        Δⵠ[779] = Nb(1, [{
            f: Km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[780] = Δⵠ[779];
        Δⵠ[767] = Nb(1, [{
            f: Om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[768] = Δⵠ[767];
        Δⵠ[776] = Nb(1, [{
            f: Hm,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[777] = Δⵠ[776];
        Δⵠ[771] = Nb(1, [{
            f: Hm,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[772] = Δⵠ[771];
        Δⵠ[756] = Nb(1, [{
            f: uc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[758] = Δⵠ[756];
        Δⵠ[760] = Nb(1, [{
            f: uc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[762] = Δⵠ[760];
        Δⵠ[764] = Nb(1, [{
            f: uc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[770] = Δⵠ[764];
        Δⵠ[910] = Nb(1, [{
            f: ku,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[912] = Δⵠ[910];
        Δⵠ[911] = Δⵠ[910];
        Δⵠ[732] = Nb(1, [{
            f: vu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[734] = Δⵠ[732];
        Δⵠ[563] = Nb(1, [{
            f: Sm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[564] = Δⵠ[563];
        Δⵠ[751] = Nb(1, [{
            f: Rm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[252] = Nb(1, [{
            f: Dm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[753] = Nb(1, [{
            f: Rm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[253] = Nb(1, [{
            f: Dm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[176] = Nb(1, [{
            f: jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[177] = Nb(1, [{
            f: jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[175] = Nb(1, [{
            f: jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[616] = Nb(1, [{
            f: mc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[618] = Δⵠ[616];
        Δⵠ[699] = Nb(1, [{
            f: mc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[700] = Δⵠ[699];
        Δⵠ[702] = Nb(1, [{
            f: mc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[704] = Δⵠ[702];
        Δⵠ[705] = Nb(1, [{
            f: mc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[706] = Δⵠ[705];
        Δⵠ[420] = Nb(1, [{
            f: om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[421] = Δⵠ[420];
        Δⵠ[826] = Nb(1, [{
            f: rm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[827] = Δⵠ[826];
        Δⵠ[429] = Nb(1, [{
            f: lm,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[430] = Δⵠ[429];
        Δⵠ[432] = Nb(1, [{
            f: hm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[433] = Δⵠ[432];
        Δⵠ[435] = Nb(1, [{
            f: cm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[436] = Δⵠ[435];
        Δⵠ[438] = Nb(1, [{
            f: vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[439] = Δⵠ[438];
        Δⵠ[441] = Nb(1, [{
            f: mm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[442] = Δⵠ[441];
        Δⵠ[418] = Nb(1, [{
            f: Eu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[609] = Nb(1, [{
            f: Zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[142] = Nb(1, [{
            f: Um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[140] = Nb(1, [{
            f: Zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[180] = Nb(1, [{
            f: wc,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[181] = Nb(1, [{
            f: dc,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[784] = Δⵠ[180];
        Δⵠ[785] = Δⵠ[181];
        Δⵠ[789] = Nb(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[791] = Δⵠ[789];
        Δⵠ[613] = Nb(1, [{
            f: bc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[612] = Nb(1, [{
            f: Tc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[715] = Δⵠ[613];
        Δⵠ[611] = Δⵠ[612];
        Δⵠ[634] = Nb(1, [{
            f: Ad,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[635] = Δⵠ[634];
        Δⵠ[200] = Nb(1, [{
            f: Bd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[866] = Nb(1, [{
            f: Ed,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[143] = Nb(1, [{
            f: Gm,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[690] = Δⵠ[143];
        Δⵠ[662] = Nb(1, [{
            f: Hd,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[664] = Nb(1, [{
            f: Vd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[666] = Δⵠ[664];
        Δⵠ[649] = Nb(1, [{
            f: Nd,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[650] = Δⵠ[649];
        Δⵠ[674] = Nb(1, [{
            f: _b,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[646] = Nb(1, [{
            f: Kd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Δⵠ[647] = Δⵠ[646];
        Δⵠ[685] = Nb(1, [{
            f: Vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[684] = Δⵠ[685];
        Δⵠ[870] = Nb(1, [{
            f: nb,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[871] = Δⵠ[870];
        Δⵠ[605] = Nb(1, [{
            f: _m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[604] = Δⵠ[605];
        Δⵠ[842] = Nb(1, [{
            f: bb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[843] = Δⵠ[842];
        Δⵠ[652] = Nb(1, [{
            f: Ym,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        Δⵠ[654] = Δⵠ[652];
        Δⵠ[626] = Nb(1, [{
            f: Ym,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[627] = Δⵠ[626];
        Δⵠ[629] = Nb(1, [{
            f: ec,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[196] = Nb(1, [{
            f: kd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[898] = Δⵠ[196];
        Δⵠ[659] = Nb(1, [{
            f: Mt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[660] = Δⵠ[659];
        Δⵠ[145] = Nb(1, [{
            f: Gb,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Δⵠ[730] = Δⵠ[145];
        Δⵠ[566] = [];
        Δⵠ[566][0] = ⵠᐃ.ⵠⵠᐃΔⵠⲆᐃ;
        Δⵠ[566][1] = ⵠᐃ.ᐃᐃⲆΔΔⲆΔ;
        Δⵠ[566][2] = ⵠᐃ.ᐃⲆᐃⵠΔᐃⵠ;
        Δⵠ[567] = Δⵠ[566];
        Δⵠ[568] = Δⵠ[566];
        Δⵠ[877] = [];
        Δⵠ[877][0] = ⵠᐃ.ΔᐃᐃⵠⲆᐃⵠ;
        Δⵠ[877][1] = ⵠᐃ.ᐃᐃᐃⲆⵠⵠΔ;
        Δⵠ[877][2] = ⵠᐃ.ⵠᐃⵠΔⵠⵠⲆ;
        Δⵠ[879] = Δⵠ[877];
        Δⵠ[878] = Δⵠ[877];
        Δⵠ[933] = Δⵠ[932];
        Δⵠ[934] = Δⵠ[932];
        Δⵠ[932] = [];
        Δⵠ[932][0] = ⵠᐃ.ⲆⵠⵠᐃΔᐃᐃ;
        Δⵠ[932][1] = ⵠᐃ.ⵠⲆΔⵠⵠᐃᐃ;
        Δⵠ[932][2] = ⵠᐃ.ᐃᐃᐃᐃⵠΔᐃ;
        Δⵠ[933] = Δⵠ[932];
        Δⵠ[934] = Δⵠ[932];
        Δⵠ[943] = [];
        Δⵠ[943][0] = ⵠᐃ.ΔⵠΔⵠⲆⵠⲆ;
        Δⵠ[943][1] = ⵠᐃ.ⵠⲆⵠᐃᐃΔⲆ;
        Δⵠ[943][2] = ⵠᐃ.ᐃᐃⵠΔᐃᐃⵠ;
        Δⵠ[944] = Δⵠ[943];
        Δⵠ[945] = Δⵠ[943];
        Δⵠ[921] = [];
        Δⵠ[921][0] = ⵠᐃ.ᐃΔⲆᐃⵠΔΔ;
        Δⵠ[921][1] = ⵠᐃ.ΔⵠᐃⵠⵠⵠΔ;
        Δⵠ[921][2] = ⵠᐃ.ⵠⵠⲆΔΔⲆᐃ;
        Δⵠ[922] = Δⵠ[921];
        Δⵠ[923] = Δⵠ[921];
        Δⵠ[925] = [];
        Δⵠ[925][0] = ⵠᐃ.ⵠⲆⲆⲆΔΔΔ;
        Δⵠ[925][1] = ⵠᐃ.ⲆⲆⲆⵠⲆᐃᐃ;
        Δⵠ[925][2] = ⵠᐃ.ⵠⲆⵠᐃⲆΔΔ;
        Δⵠ[926] = Δⵠ[925];
        Δⵠ[927] = Δⵠ[925];
        Δⵠ[929] = [];
        Δⵠ[929][0] = ⵠᐃ.ΔᐃᐃⲆΔᐃᐃ;
        Δⵠ[929][1] = ⵠᐃ.ⲆⵠⲆⲆⵠΔⲆ;
        Δⵠ[929][2] = ⵠᐃ.ΔⵠⵠΔᐃΔᐃ;
        Δⵠ[930] = Δⵠ[929];
        Δⵠ[931] = Δⵠ[929];
        Δⵠ[946] = [];
        Δⵠ[946][0] = ⵠᐃ.ᐃⲆⵠⲆⵠΔⵠ;
        Δⵠ[946][1] = ⵠᐃ.ΔⲆⵠⲆⵠᐃⵠ;
        Δⵠ[946][2] = ⵠᐃ.ⵠⲆΔΔⵠᐃⵠ;
        Δⵠ[947] = Δⵠ[946];
        Δⵠ[948] = Δⵠ[946];
        Δⵠ[735] = [];
        Δⵠ[735][0] = ⵠᐃ.ᐃΔΔⵠΔⲆⵠ;
        Δⵠ[735][1] = ⵠᐃ.ⵠⲆⵠΔⵠΔⲆ;
        Δⵠ[735][2] = ⵠᐃ.ⲆᐃΔⵠⲆᐃᐃ;
        Δⵠ[737] = Δⵠ[735];
        Δⵠ[736] = Δⵠ[735];
        Δⵠ[1164] = [];
        Δⵠ[1164][0] = ⵠᐃ.ᐃΔⵠᐃᐃⲆᐃ;
        Δⵠ[1164][1] = ⵠᐃ.ⲆⵠΔᐃⲆⵠᐃ;
        Δⵠ[1164][2] = ⵠᐃ.ⲆⵠᐃᐃᐃΔⵠ;
        Δⵠ[Ur.ⵠΔⵠᐃΔᐃΔᐃᐃ] = Δⵠ[1164];
        Δⵠ[1165] = Δⵠ[1164];
        Δⵠ[738] = [];
        Δⵠ[738][0] = ⵠᐃ.ΔⵠⵠᐃⲆⵠΔ;
        Δⵠ[738][1] = ⵠᐃ.ᐃⲆΔⵠⲆᐃᐃ;
        Δⵠ[738][2] = ⵠᐃ.ⵠⲆΔΔΔⵠΔ;
        Δⵠ[740] = Δⵠ[738];
        Δⵠ[739] = Δⵠ[738];
        Δⵠ[741] = [];
        Δⵠ[741][0] = ⵠᐃ.ⲆⵠⵠΔΔⵠⲆ;
        Δⵠ[741][1] = ⵠᐃ.ΔⵠᐃⲆᐃⵠⵠ;
        Δⵠ[741][2] = ⵠᐃ.ᐃΔΔⲆⵠᐃⵠ;
        Δⵠ[743] = Δⵠ[741];
        Δⵠ[742] = Δⵠ[741];
        Δⵠ[938] = [];
        Δⵠ[938][0] = ⵠᐃ.ⲆΔΔᐃⲆⵠⲆ;
        Δⵠ[938][1] = ⵠᐃ.ⵠᐃᐃΔᐃΔⲆ;
        Δⵠ[938][2] = ⵠᐃ.ᐃΔⲆⲆⵠΔⵠ;
        Δⵠ[939] = Δⵠ[938];
        Δⵠ[936] = [];
        Δⵠ[936][0] = ⵠᐃ.ΔᐃΔᐃΔⵠⵠ;
        Δⵠ[936][1] = ⵠᐃ.ⵠⲆⵠΔᐃᐃΔ;
        Δⵠ[936][2] = ⵠᐃ.ᐃΔᐃⵠⵠⵠⵠ;
        Δⵠ[937] = Δⵠ[936];
        Δⵠ[617] = Δⵠ[616];
        Δⵠ[701] = Δⵠ[699];
        Δⵠ[703] = Δⵠ[702];
        Δⵠ[707] = Δⵠ[705];
        Δⵠ[348] = Δⵠ[311];
        Δⵠ[633] = Δⵠ[631];
        Δⵠ[645] = Δⵠ[644];
        Δⵠ[640] = Δⵠ[639];
        Δⵠ[273] = Δⵠ[309];
        Δⵠ[590] = Δⵠ[252];
        Δⵠ[752] = Δⵠ[751];
        Δⵠ[591] = Δⵠ[253];
        Δⵠ[754] = Δⵠ[753];
        Δⵠ[276] = Δⵠ[328];
        Δⵠ[863] = Δⵠ[865];
        Δⵠ[862] = Δⵠ[860];
        Δⵠ[831] = Δⵠ[829];
        Δⵠ[340] = Δⵠ[261];
        Δⵠ[596] = Δⵠ[594];
        Δⵠ[345] = Δⵠ[292];
        Δⵠ[346] = Δⵠ[293];
        Δⵠ[457] = Δⵠ[455];
        Δⵠ[274] = Δⵠ[313];
        Δⵠ[341] = Δⵠ[312];
        Δⵠ[272] = Δⵠ[258];
        Δⵠ[344] = Δⵠ[296];
        Δⵠ[459] = Δⵠ[458];
        Δⵠ[342] = Δⵠ[315];
        Δⵠ[270] = Δⵠ[297];
        Δⵠ[271] = Δⵠ[298];
        Δⵠ[343] = Δⵠ[316];
        Δⵠ[269] = Δⵠ[277];
        Δⵠ[358] = Δⵠ[310];
        Δⵠ[354] = Δⵠ[329];
        Δⵠ[356] = Δⵠ[331];
        Δⵠ[355] = Δⵠ[330];
        Δⵠ[494] = Δⵠ[492];
        Δⵠ[349] = Δⵠ[317];
        Δⵠ[350] = Δⵠ[319];
        Δⵠ[275] = Δⵠ[300];
        Δⵠ[351] = Δⵠ[323];
        Δⵠ[353] = Δⵠ[305];
        Δⵠ[514] = Δⵠ[513];
        Δⵠ[352] = Δⵠ[303];
        Δⵠ[520] = Δⵠ[518];
        Δⵠ[534] = Δⵠ[532];
        Δⵠ[531] = Δⵠ[529];
        Δⵠ[522] = Δⵠ[521];
        Δⵠ[524] = Δⵠ[523];
        Δⵠ[565] = Δⵠ[563];
        Δⵠ[554] = Δⵠ[553];
        Δⵠ[357] = Δⵠ[335];
        Δⵠ[359] = Δⵠ[337];
        Δⵠ[339] = Da(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Kt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            Dt(e, c[0], c[1], 4);
            e.save();
            Kt(e, a * 30, a * 115, a * 60, a * 5, a * 15);
            e.restore();
            Dt(e, c[2], c[3], 4);
            e.save();
            Kt(e, a * 50, a * 117, a * 20, a * 10, a * 15);
            e.restore();
            Dt(e, c[2]);
            return d;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        Δⵠ[366] = Nb(0.5, [{
            f: _t,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        Δⵠ[382] = Δⵠ[361];
        Δⵠ[383] = Δⵠ[362];
        Δⵠ[384] = Δⵠ[364];
        Δⵠ[497] = Δⵠ[495];
        Δⵠ[385] = Δⵠ[392];
        Δⵠ[774] = Δⵠ[178];
        Δⵠ[775] = Δⵠ[179];
        Δⵠ[386] = Δⵠ[368];
        Δⵠ[625] = Δⵠ[624];
        Δⵠ[394] = Δⵠ[393];
        Δⵠ[1163] = Δⵠ[1162];
        Δⵠ[506] = Δⵠ[505];
        Δⵠ[387] = Δⵠ[369];
        Δⵠ[504] = Δⵠ[502];
        Δⵠ[388] = Δⵠ[372];
        Δⵠ[389] = Δⵠ[375];
        Δⵠ[390] = Δⵠ[378];
        Δⵠ[501] = Δⵠ[499];
        Δⵠ[391] = Δⵠ[381];
        Δⵠ[403] = Δⵠ[401];
        Δⵠ[397] = Δⵠ[395];
        Δⵠ[400] = Δⵠ[398];
        Δⵠ[406] = Δⵠ[404];
        Δⵠ[474] = Δⵠ[472];
        Δⵠ[875] = Δⵠ[874];
        Δⵠ[552] = Δⵠ[550];
        Δⵠ[710] = Δⵠ[709];
        Δⵠ[479] = Δⵠ[477];
        Δⵠ[482] = Δⵠ[480];
        Δⵠ[485] = Δⵠ[483];
        Δⵠ[488] = Δⵠ[486];
        Δⵠ[410] = Δⵠ[408];
        Δⵠ[719] = Δⵠ[717];
        Δⵠ[422] = Δⵠ[420];
        Δⵠ[431] = Δⵠ[429];
        Δⵠ[434] = Δⵠ[432];
        Δⵠ[437] = Δⵠ[435];
        Δⵠ[543] = Δⵠ[541];
        Δⵠ[733] = Δⵠ[732];
        Δⵠ[440] = Δⵠ[438];
        Δⵠ[443] = Δⵠ[441];
        Δⵠ[446] = Δⵠ[418];
        Δⵠ[606] = Δⵠ[605];
        Δⵠ[844] = Δⵠ[842];
        Δⵠ[683] = Δⵠ[685];
        Δⵠ[610] = Δⵠ[609];
        Δⵠ[689] = Δⵠ[143];
        Δⵠ[686] = Δⵠ[142];
        Δⵠ[682] = Δⵠ[140];
        Δⵠ[615] = Δⵠ[613];
        Δⵠ[614] = Δⵠ[612];
        Δⵠ[628] = Δⵠ[626];
        Δⵠ[630] = Δⵠ[629];
        Δⵠ[636] = Δⵠ[634];
        Δⵠ[868] = Δⵠ[200];
        Δⵠ[867] = Δⵠ[866];
        Δⵠ[648] = Δⵠ[646];
        Δⵠ[651] = Δⵠ[649];
        Δⵠ[653] = Δⵠ[652];
        Δⵠ[661] = Δⵠ[659];
        Δⵠ[898] = Δⵠ[196];
        Δⵠ[663] = Δⵠ[662];
        Δⵠ[665] = Δⵠ[664];
        Δⵠ[675] = Δⵠ[674];
        Δⵠ[731] = Δⵠ[145];
        Δⵠ[757] = Δⵠ[756];
        Δⵠ[759] = Δⵠ[176];
        Δⵠ[761] = Δⵠ[760];
        Δⵠ[763] = Δⵠ[177];
        Δⵠ[765] = Δⵠ[764];
        Δⵠ[766] = Δⵠ[175];
        Δⵠ[769] = Δⵠ[767];
        Δⵠ[773] = Δⵠ[771];
        Δⵠ[778] = Δⵠ[776];
        Δⵠ[781] = Δⵠ[779];
        Δⵠ[787] = Δⵠ[181];
        Δⵠ[786] = Δⵠ[180];
        Δⵠ[790] = Δⵠ[789];
        Δⵠ[801] = Δⵠ[800];
        Δⵠ[810] = Δⵠ[808];
        Δⵠ[836] = Δⵠ[834];
        Δⵠ[847] = Δⵠ[845];
        Δⵠ[828] = Δⵠ[826];
    }
    function sc(b, c, d) {
        const e = ~(b & 58406) & b | ~(b & 58406) & 58406;
        const f = ((62902 + c) * 1103515245 + 12345) % 2147483648;
        const g = (1 + (39121 + d) * 22695477) % 4294967296;
        return ((9089 + (xf(e, f, g, e, f, g) ^ xf(e, f, g, e, f, g))) * 1664525 + 1013904223) % 4294967296;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        Ft(e, a * 54.5, a * 55, a * 48.038209575038294);
        Dt(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            Dt(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            Kt(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            Dt(e, b[2], b[3], a * 4);
            Ft(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            Dt(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            Kt(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            Dt(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            Dt(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            Dt(e, undefined, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            Dt(e, ii, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            Dt(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            Dt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            Dt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            Dt(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            Dt(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            Dt(e, b[3]);
        }
        return d;
    }
    function lc(b, c, d, e) {
        Aj($v, b, c, d, e);
        const f = ww(Zv[0], Zv[1], Zv[2], Zv[3], Zv[0], Zv[1]);
        const g = Qw(Zv[2], Zv[3], Zv[0], Zv[1], Zv[2]);
        return (24 << ((f ^ g) >> 24 & 255)) + (8 << ((f ^ g) >> 16 & 255)) + (0 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) & 255));
    }
    function gc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            Dt(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        Dt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        Dt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        Dt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        Dt(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        Dt(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            Dt(e, Ch, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            Dt(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Dt(e, Yk, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Dt(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        Dt(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        Dt(e, b[2], b[2], a * 10);
        return d;
    }
    function uc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Dt(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        Dt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        Dt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        Dt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        Dt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        Dt(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        Dt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        Dt(e, c[2], c[3], a * 10);
        Ft(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        Dt(e, c[4], c[5], a * 1);
        Ft(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        Dt(e, c[4], c[5], a * 1);
        Ft(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        Dt(e, c[4], c[5], a * 1);
        Ft(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        Dt(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        Dt(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        Dt(e, c[6]);
        return d;
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Kt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Dt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        Dt(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Dt(e, _l, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Dt(e, undefined, c[6], a * 15);
        return d;
    }
    function dc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Dt(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Dt(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Dt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Dt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Dt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Dt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Dt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Dt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Dt(e, undefined, c[2], a * 11);
        return d;
    }
    function vc(b, c, d, e) {
        const f = (8 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (0 << (b & 255));
        const g = c ^ 55887;
        const a = (d | 45354) & ~(d & 45354);
        const h = (2531011 + (15553 + e) * 214013) % 4294967296;
        return ((55627 + (xf(f, g, a, h, f, g) ^ vr(a, h, f, g))) * 2147483629 + 2147483587) % 2147483647;
    }
    function mc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        Kt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Dt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        Kt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        Dt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        Dt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        Dt(e, c[5]);
        e.restore();
        return d;
    }
    function cc(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        Kt(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        Dt(d, null, "#BBE8EF", a);
        return c;
    }
    function pc(b, c, d, e) {
        const f = ~(b & 50144) & 50144 | ~(b & 50144) & b;
        const g = ~(c & 48761) & (c | 48761);
        const a = (0 << (d >> 24 & 255)) + (16 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)) + (8 << (d & 255));
        const i = ((12220 + e) * 214013 + 2531011) % 4294967296;
        const j = vr(f, g, a, i);
        (function (b, c, d, e) {
            const f = (16 << (b >> 16 & 255)) + (24 << (b >> 8 & 255)) + (0 << (b >> 24 & 255)) + (8 << (b & 255));
            const g = (2147483587 + (36051 + c) * 2147483629) % 2147483647;
            const a = e ^ 56966;
            sc(f, g, ~(d & 50604) & (d | 50604));
            er(a, f, g);
        })(f, g, a, i);
        return ~(j & 21958) & 21958 | ~(j & 21958) & j;
    }
    function Cc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            Ft(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            Dt(g, d[1], d[5], b * 20);
            Ft(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            Dt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            Kt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            Dt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            Kt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            Dt(g, d[1], d[5], b * 20);
        }
        Ft(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        Dt(g, d[1], d[2], b * 7);
        Ft(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        Dt(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        Dt(g, d[1], d[2], b * 8);
        Ft(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        Dt(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        Dt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        Dt(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        Dt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        Dt(g, d[3], d[2], b * 4);
        Ft(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        Dt(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        Kt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        Dt(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        Kt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        Dt(g, d[1], d[2], b * 7);
        return f;
    }
    function Tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        Kt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        Dt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        Dt(e, ol, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        Dt(e, undefined, c[6], a * 15);
        return d;
    }
    function fc() {
        var b = Sw.time;
        if (Δⵠ[285]) {
            Wn.drawImage(Δⵠ[285][b][1], gq + 480, hq + 190);
            Wn.drawImage(Δⵠ[285][b][2], gq + 180, hq - 430);
            Wn.drawImage(Δⵠ[285][b][1], gq - 855, hq + 100);
            Wn.drawImage(Δⵠ[285][b][0], gq - 550, hq - 300);
            Wn.drawImage(Δⵠ[285][b][0], gq - 1020, hq - 520);
        }
        if (Δⵠ[108]) {
            Wn.drawImage(Δⵠ[108][b][1], gq - 80, hq - 640);
            Wn.drawImage(Δⵠ[108][b][1], gq + 80, hq + 490);
            Wn.drawImage(Δⵠ[108][b][2], gq - 180, hq - 700);
            Wn.drawImage(Δⵠ[108][b][0], gq + 550, hq + 100);
            Wn.drawImage(Δⵠ[108][b][1], gq + 450, hq + 300);
            Wn.drawImage(Δⵠ[108][b][1], gq + 780, hq + 300);
            Wn.drawImage(Δⵠ[108][b][2], gq + 980, hq + 200);
            Wn.drawImage(Δⵠ[108][b][2], gq + 680, hq + 600);
            Wn.drawImage(Δⵠ[108][b][2], gq - 380, hq + 100);
            Wn.drawImage(Δⵠ[108][b][2], gq + 280, hq + 250);
        }
        if (Δⵠ[110]) {
            Wn.drawImage(Δⵠ[110][b][0], gq - 590, hq);
            Wn.drawImage(Δⵠ[110][b][0], gq + 120, hq - 390);
            Wn.drawImage(Δⵠ[110][b][0], gq - 270, hq + 340);
        }
        if (Δⵠ[109]) {
            Wn.drawImage(Δⵠ[109][b][4], gq - 700, hq - 600);
            Wn.drawImage(Δⵠ[109][b][2], gq - 970, hq - 250);
            Wn.drawImage(Δⵠ[109][b][5], gq - 720, hq - 200);
            Wn.drawImage(Δⵠ[109][b][2], gq - 1020, hq + 340);
            Wn.drawImage(Δⵠ[109][b][0], gq - 1120, hq - 0);
            Wn.drawImage(Δⵠ[109][b][1], gq - 650, hq - 330);
            Wn.drawImage(Δⵠ[109][b][4], gq - 495, hq - 90);
            Wn.drawImage(Δⵠ[109][b][3], gq - 520, hq + 340);
            Wn.drawImage(Δⵠ[109][b][2], gq + 830, hq - 520);
        }
        Δⵠ[413];
        if (Tw && cf) {
            var c = Tw.ⲆⲆⵠ.x;
            var d = Tw.ⲆⲆⵠ.y;
            Tw.ⲆⲆⵠ.x = gq;
            Tw.ⲆⲆⵠ.y = hq;
            var e = cf.time;
            cf.time = Sw.time;
            var f;
            var g = Sw.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].Δᐃᐃⵠ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ΔⲆⲆᐃ[0].x = f.x - 20.5;
            f.ΔⲆⲆᐃ[0].y = f.y - 22.5;
            f.ΔⲆⲆᐃ[1].x = f.x - 35.5;
            f.ΔⲆⲆᐃ[1].y = f.y + 7.5;
            f.ΔⲆⲆᐃ[2].x = f.x + 7.5;
            f.ΔⲆⲆᐃ[2].y = f.y - 30;
            f.ΔⲆⲆᐃ[3].x = f.x + 22.5;
            f.ΔⲆⲆᐃ[3].y = f.y;
            f.ΔⲆⲆᐃ[4].x = f.x - 7.5;
            f.ΔⲆⲆᐃ[4].y = f.y + 14.5;
            for (var a = 0; f.info > a; a++) {
                f.ΔⲆⲆᐃ[a].Δᐃᐃⵠ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ΔⲆⲆᐃ[0].x = f.x - 20.5;
            f.ΔⲆⲆᐃ[0].y = f.y - 22.5;
            f.ΔⲆⲆᐃ[1].x = f.x - 35.5;
            f.ΔⲆⲆᐃ[1].y = f.y + 7.5;
            f.ΔⲆⲆᐃ[2].x = f.x + 7.5;
            f.ΔⲆⲆᐃ[2].y = f.y - 30;
            f.ΔⲆⲆᐃ[3].x = f.x + 22.5;
            f.ΔⲆⲆᐃ[3].y = f.y;
            f.ΔⲆⲆᐃ[4].x = f.x - 7.5;
            f.ΔⲆⲆᐃ[4].y = f.y + 14.5;
            for (a = 0; a < f.info; a++) {
                f.ΔⲆⲆᐃ[a].Δᐃᐃⵠ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⲆⲆᐃΔⲆⲆⲆ(113);
            g[0].ⲆⵠⲆᐃⵠ();
            Tw.ⲆⲆⵠ.x = c;
            Tw.ⲆⲆⵠ.y = d;
            cf.time = e;
        }
    }
    function zc() {
        new Date().getTime();
        nc();
        rc();
        Δⵠ[540] = [];
        Δⵠ[540][0] = [];
        Δⵠ[540][1] = [];
        for (var a = 0; a < 5; a++) {
            Δⵠ[540][0].push(Da(Wd(1, 4 + a, "#59B8CE")));
            Δⵠ[540][1].push(Da(Wd(1, 4 + a, "#90DDD9")));
        }
        Δⵠ[470] = [];
        Δⵠ[470][0] = [];
        Δⵠ[470][1] = [];
        for (a = 0; a < 5; a++) {
            Δⵠ[470][0].push(Da(Wd(1, 4 + a, "#fff")));
            Δⵠ[470][1].push(Da(Wd(1, 4 + a, "#fff")));
        }
        Δⵠ[471] = [];
        Δⵠ[471][0] = [];
        Δⵠ[471][1] = [];
        for (a = 0; a < 5; a++) {
            Δⵠ[471][0].push(Da(Wd(1, 6 + a, "#DDCD8A")));
            Δⵠ[471][1].push(Da(Wd(1, 6 + a, "#155E57")));
        }
        Δⵠ[942] = [];
        Δⵠ[942][0] = [];
        Δⵠ[942][1] = [];
        for (a = 0; a < 5; a++) {
            Δⵠ[942][0].push(Da(Wd(1, 4 + a, "#353326")));
            Δⵠ[942][1].push(Da(Wd(1, 4 + a, "#1D2526")));
        }
        Δⵠ[201] = [];
        Δⵠ[201][0] = Da(ab(1.5, 0, ["#ee71a9"]));
        Δⵠ[201][1] = Da(ab(1.5, 0, ["#ee71a9"]));
        Δⵠ[872] = [Δⵠ[201]];
        Δⵠ[872][1] = [];
        Δⵠ[872][2] = [];
        Δⵠ[872][3] = [];
        Δⵠ[872][4] = [];
        Δⵠ[872][1][0] = Da(ab(1.5, 0, ["#e2d63b"]));
        Δⵠ[872][1][1] = Da(ab(1.5, 0, ["#e2d63b"]));
        Δⵠ[872][2][0] = Da(ab(1.5, 0, ["#309cbd"]));
        Δⵠ[872][2][1] = Da(ab(1.5, 0, ["#309cbd"]));
        Δⵠ[872][3][0] = Da(ab(1.5, 0, ["#cd232d"]));
        Δⵠ[872][3][1] = Da(ab(1.5, 0, ["#cd232d"]));
        Δⵠ[872][4][0] = Da(ab(1.5, 0, ["#42b672"]));
        Δⵠ[872][4][1] = Da(ab(1.5, 0, ["#42b672"]));
        if (ΔⲆⵠᐃ.ΔⵠⵠᐃⲆᐃⲆ("cti", aj.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Da = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        Δⵠ[797] = Da(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        Δⵠ[108] = [];
        Δⵠ[108][0] = [];
        Δⵠ[108][1] = [];
        Δⵠ[108][0].push(Da(Rd(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Δⵠ[108][0].push(Da(Rd(0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Δⵠ[108][0].push(Da(Rd(0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Δⵠ[108][1].push(Da(Rd(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Δⵠ[108][1].push(Da(Rd(0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Δⵠ[108][1].push(Da(Rd(0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Δⵠ[111] = [];
        Δⵠ[111][0] = [];
        Δⵠ[111][1] = [];
        Δⵠ[111][0].push(Da(Fd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[111][0].push(Da(Fd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[111][0].push(Da(Fd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[111][1].push(Da(Fd(1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        Δⵠ[111][1].push(Da(Fd(1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        Δⵠ[111][1].push(Da(Fd(1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        Δⵠ[112] = [];
        Δⵠ[112][0] = [];
        Δⵠ[112][1] = [];
        Δⵠ[112][0].push(Da(_d(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Δⵠ[112][0].push(Da(_d(0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Δⵠ[112][0].push(Da(_d(0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Δⵠ[112][1].push(Da(_d(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Δⵠ[112][1].push(Da(_d(0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Δⵠ[112][1].push(Da(_d(0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Δⵠ[239] = [];
        Δⵠ[239][0] = ⵠᐃ.ⵠⵠⲆΔᐃΔᐃ;
        Δⵠ[239][1] = ⵠᐃ.ᐃᐃᐃⲆⵠΔᐃ;
        Δⵠ[286] = [];
        Δⵠ[286][0] = Da(nd(0.6, ["#0d1b1c"]));
        Δⵠ[286][1] = Da(nd(0.6, ["#030d14"]));
        Δⵠ[793] = [];
        Δⵠ[793][0] = Da(td(0.6, ["#2a2938", "#242330"]));
        Δⵠ[793][1] = Da(td(0.6, ["#1b1e30", "#161921"]));
        Δⵠ[820] = [];
        Δⵠ[820][0] = Da(db(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        Δⵠ[820][1] = Da(db(0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        Δⵠ[821] = [];
        Δⵠ[821][0] = Da(hb(0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        Δⵠ[821][1] = Da(hb(0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        Δⵠ[822] = [];
        Δⵠ[822][0] = Da(id(0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        Δⵠ[822][1] = Da(id(0.4, ["#030d14", "#11635e", "#02373e"]));
        Δⵠ[823] = Da(lb(0.6, ["#BB0000"]));
        Δⵠ[824] = Da(lb(0.6, ["#DBE71C"]));
        Δⵠ[825] = Da(lb(0.6, ["#00BB00"]));
        Δⵠ[109] = [];
        Δⵠ[109][0] = [];
        Δⵠ[109][1] = [];
        Δⵠ[109][0].push(rd(1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], $a, 0));
        Δⵠ[109][0].push(rd(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], true, 0));
        Δⵠ[109][0].push(rd(0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], So, 0));
        Δⵠ[109][0].push(rd(0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], j, 0));
        Δⵠ[109][0].push(rd(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], ah, 0));
        Δⵠ[109][0].push(rd(0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], ra, 0));
        Δⵠ[109][1].push(rd(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], So, 0));
        Δⵠ[109][1].push(rd(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], Ll, 0));
        Δⵠ[109][1].push(rd(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], false, 0));
        Δⵠ[109][1].push(rd(0.9, ["#030d14", "#0b3534", "#144443", "#174240"], true, 0));
        Δⵠ[109][1].push(rd(0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
        Δⵠ[109][1].push(rd(0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
        Δⵠ[307] = [];
        Δⵠ[307][0] = [];
        Δⵠ[307][1] = [];
        Δⵠ[307][0].push(Da(ad(od(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], Xi), Δⵠ[109][0][0])));
        Δⵠ[307][0].push(Da(ad(od(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], $k), Δⵠ[109][0][1])));
        Δⵠ[307][1].push(Da(ad(od(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], false), Δⵠ[109][1][0])));
        Δⵠ[307][1].push(Da(ad(od(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), Δⵠ[109][1][1])));
        Δⵠ[307][0].push(Da(ad(od(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], Qj), Δⵠ[109][0][2])));
        Δⵠ[307][0].push(Da(ad(od(0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], true), Δⵠ[109][0][2])));
        Δⵠ[307][1].push(Da(ad(od(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], false), Δⵠ[109][1][2])));
        Δⵠ[307][1].push(Da(ad(od(0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], xo), Δⵠ[109][1][3])));
        Δⵠ[109][0][5] = Da(Δⵠ[109][0][5]);
        Δⵠ[109][0][4] = Da(Δⵠ[109][0][4]);
        Δⵠ[109][0][3] = Da(Δⵠ[109][0][3]);
        Δⵠ[109][0][2] = Da(Δⵠ[109][0][2]);
        Δⵠ[109][0][1] = Da(Δⵠ[109][0][1]);
        Δⵠ[109][0][0] = Da(Δⵠ[109][0][0]);
        Δⵠ[109][1][5] = Da(Δⵠ[109][1][5]);
        Δⵠ[109][1][4] = Da(Δⵠ[109][1][4]);
        Δⵠ[109][1][3] = Da(Δⵠ[109][1][3]);
        Δⵠ[109][1][2] = Da(Δⵠ[109][1][2]);
        Δⵠ[109][1][1] = Da(Δⵠ[109][1][1]);
        Δⵠ[109][1][0] = Da(Δⵠ[109][1][0]);
        Δⵠ[8] = [];
        Δⵠ[8][0] = Da(Lt(4, ed(0.75, mk, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        Δⵠ[8][1] = Da(Lt(4, ed(0.75, sh, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        Δⵠ[1] = [];
        Δⵠ[1][0] = Da(Lt(4, ed(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        Δⵠ[1][1] = Da(Lt(4, ed(0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        Δⵠ[3] = [];
        Δⵠ[3][0] = Da(Lt(4, ed(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        Δⵠ[3][1] = Da(Lt(4, ed(0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        Δⵠ[4] = [];
        Δⵠ[4][0] = Da(Lt(4, ed(0.75, $l, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        Δⵠ[4][1] = Da(Lt(4, ed(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        Δⵠ[31] = [];
        Δⵠ[31][0] = Da(Lt(4, ed(0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        Δⵠ[31][1] = Da(Lt(4, ed(0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        Δⵠ[9] = [];
        Δⵠ[9][0] = Da(Lt(3, dd(0.17, j, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        Δⵠ[9][1] = Da(Lt(3, dd(0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        Δⵠ[199] = [];
        Δⵠ[199][0] = Da(Lt(3, Jd(0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        Δⵠ[199][1] = Da(Lt(3, Jd(0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        Δⵠ[57] = [];
        Δⵠ[57][0] = Da(Lt(3, bd(0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        Δⵠ[57][1] = Da(Lt(3, bd(0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        Δⵠ[0] = [];
        Δⵠ[0][0] = Da(Lt(3, cd(0.4, $k, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        Δⵠ[0][1] = Da(Lt(3, cd(0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        Δⵠ[5] = [];
        Δⵠ[5][0] = Da(Lt(3, zd(0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        Δⵠ[5][1] = Da(Lt(3, zd(0.4, j, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        Δⵠ[6] = [];
        Δⵠ[6][0] = Da(Lt(3, wd(0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        Δⵠ[6][1] = Da(Lt(3, wd(0.4, lq, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        Δⵠ[30] = [];
        Δⵠ[30][0] = Da(Lt(3, yd(0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        Δⵠ[30][1] = Da(Lt(3, yd(0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        Δⵠ[285] = [];
        Δⵠ[285][0] = [];
        Δⵠ[285][1] = [];
        Δⵠ[285][0].push(Da(Zd(0.9, 0, ["#0d4f35"], 0)));
        Δⵠ[285][0].push(Da(Zd(0.9, 0, ["#0d4f35"], 1)));
        Δⵠ[285][0].push(Da(Zd(0.9, 0, ["#0d4f35"], 2)));
        Δⵠ[285][1].push(Da(Zd(0.9, 0, ["#053339"], 0)));
        Δⵠ[285][1].push(Da(Zd(0.9, 0, ["#053339"], 1)));
        Δⵠ[285][1].push(Da(Zd(0.9, 0, ["#053339"], 2)));
        Δⵠ[285][0].push(Da(Ld(0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        Δⵠ[285][0].push(Da(Ld(0.8, ["#292002", "#ba930e", "#6d5704"])));
        Δⵠ[285][1].push(Da(Ld(0.9, ["#052919", "#0a4738", "#06321f"])));
        Δⵠ[285][1].push(Da(Ld(0.8, ["#052918", "#08491c", "#063417"])));
        Δⵠ[183] = [];
        Δⵠ[183][0] = Da(Lt(Math.PI / 2, Fu(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        Δⵠ[183][1] = Da(Lt(Math.PI / 2, Fu(0.25, $k, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        Δⵠ[803] = [];
        Δⵠ[803].push(Da(yu(0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        Δⵠ[803].push(Da(yu(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        Δⵠ[803].push(Da(yu(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        Δⵠ[802] = [];
        Δⵠ[802][0] = [];
        Δⵠ[802][1] = [];
        Δⵠ[802][0].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        Δⵠ[802][1].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        Δⵠ[802][0].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        Δⵠ[802][1].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        Δⵠ[802][0].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        Δⵠ[802][1].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        Δⵠ[802][0].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        Δⵠ[802][1].push(Da(Lt(Math.PI / 2, Bu(0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        Δⵠ[110] = [];
        Δⵠ[110][0] = [Da(jd(1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
        Δⵠ[110][1] = [Da(jd(1.2, $l, ["#030d14", "#084442", "#0a4049"]))];
        Δⵠ[623] = [];
        Δⵠ[623][0] = Da(jd(0.8, true, ["#0e3022", "#68622D", "#665329"]));
        Δⵠ[623][1] = Da(jd(0.8, cl, ["#030d14", "#0F3A24", "#083326"]));
        Δⵠ[189] = [];
        Δⵠ[189][0] = Da(qm(0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        Δⵠ[189][1] = Da(qm(0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        Δⵠ[192] = [];
        Δⵠ[192][0] = Da(ob(0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        Δⵠ[192][1] = Da(ob(0.5, $k, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        Δⵠ[194] = [];
        Δⵠ[194][0] = Da(Nm(0.5, Uq, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        Δⵠ[194][1] = Da(Nm(0.5, Hg, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        Δⵠ[287] = [];
        Δⵠ[287][0] = Da(jd(0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        Δⵠ[287][1] = Da(jd(0.8, true, ["#030d14", "#084442", "#0a4049"]));
        Δⵠ[813] = [];
        Δⵠ[813][0] = Da(qm(0.5, Jr, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        Δⵠ[813][1] = Da(qm(0.5, oi, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        Δⵠ[839] = [];
        Δⵠ[839][0] = Da(ob(0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        Δⵠ[839][1] = Da(ob(0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        Δⵠ[869] = [];
        Δⵠ[869][0] = Da(Nm(0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        Δⵠ[869][1] = Da(Nm(0.5, lq, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        Δⵠ[854] = [];
        Δⵠ[854][0] = Da(oc(0.45, oi, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        Δⵠ[854][1] = Da(oc(0.45, ra, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        Δⵠ[859] = Da(oc(0.65, xo, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        Δⵠ[294] = [];
        Δⵠ[294][0] = Da(Ud(1.4, 0, ["#ac222a", "#e6636a"]));
        Δⵠ[294][1] = Da(Ud(1.4, 0, ["#46195e", "#744188"]));
        Δⵠ[288] = [];
        Δⵠ[288][0] = Da(Vb(0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        Δⵠ[288][1] = Da(Vb(0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        Δⵠ[118] = [];
        Δⵠ[118][0] = Da(Ub(0.9, 0, ["#4d2d14", "#432516"]));
        Δⵠ[118][1] = Da(Ub(0.9, 0, ["#282404", "#0a0a01"]));
        Δⵠ[113] = [];
        Δⵠ[113][0] = Da(Yb(0.9, 0, ["#4d2d14", "#432516"]));
        Δⵠ[113][1] = Da(Yb(0.9, 0, ["#282404", "#0a0a01"]));
        Δⵠ[289] = [];
        Δⵠ[289][0] = Da(Kb(0.9, 0, ["#efd435"]));
        Δⵠ[289][1] = Da(Kb(0.9, 0, ["#fffabb"]));
        Δⵠ[282] = [];
        Δⵠ[282][0] = Da(Xb(0.9, 0, ["#efd435"]));
        Δⵠ[282][1] = Da(Xb(0.9, 0, ["#fffabb"]));
        Δⵠ[816] = [];
        Δⵠ[816][0] = Da(Kb(0.9, 0, ["#efd435"]));
        Δⵠ[816][1] = Da(Kb(0.9, 0, ["rgba(255, 84, 0, 1)"]));
        Δⵠ[817] = [];
        Δⵠ[817][0] = Da(Xb(0.9, 0, ["#efd435"]));
        Δⵠ[817][1] = Da(Xb(0.9, 0, ["#ff5704"]));
        Δⵠ[324] = Da(wb(1, "#ffffff"));
        Δⵠ[301] = Da(wb(1.5, "#ffffff"));
        Δⵠ[306] = Da(Sd(1, "Your score:", 15, "#FFF"));
        Δⵠ[655] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            Ft(d, a * 119.5, a * 140.125, a * 19);
            Dt(d, undefined, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            Dt(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            Dt(d, undefined, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            Dt(d, undefined, b[3], a * 10);
            Ft(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            Dt(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            Dt(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            Dt(d, undefined, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            Kt(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            Dt(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            Kt(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            Dt(d, b[9]);
            return c;
        }(0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        Δⵠ[656] = ⵠᐃ.ⲆΔⵠᐃΔⲆᐃ;
        Δⵠ[135] = [];
        Δⵠ[135][0] = Da(Sb(1.5, lq, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Δⵠ[135][1] = Da(Sb(1.5, sh, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Δⵠ[641] = [];
        Δⵠ[641][0] = Da(Fb(2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Δⵠ[641][1] = Da(Fb(2, lq, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Δⵠ[642] = [];
        Δⵠ[642][0] = Da(jb(1.5, j, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Δⵠ[642][1] = Da(jb(1.5, sh, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Δⵠ[134] = [];
        Δⵠ[134][0] = Da(Rb(2.2, 0, ["#A89F67", "#9E8456"]));
        Δⵠ[134][1] = Da(Rb(2.2, 0, ["#0B4049", "#08383D"]));
        Δⵠ[638] = [];
        Δⵠ[638][0] = Da(Rb(2.2, 0, ["#68622D", "#665329"]));
        Δⵠ[638][1] = Da(Rb(2.2, 0, ["#0F3A24", "#083326"]));
        Δⵠ[321] = [];
        Δⵠ[321][0] = Da(Dd(0.8, 0, ["#A89F67", "#9E8456"]));
        Δⵠ[321][1] = Da(Dd(0.8, 0, ["#15514F", "#0F3F3D"]));
        Δⵠ[811] = [];
        Δⵠ[811][0] = Da(Dd(0.8, 0, ["#c67933", "#b17238"]));
        Δⵠ[811][1] = Da(Dd(0.8, 0, ["#043c37", "#032b23"]));
        Δⵠ[984] = [];
        Δⵠ[984][0] = Da(Dd(0.8, 0, ["#3a8214", "#4a9c1e"]));
        Δⵠ[984][1] = Da(Dd(0.8, 0, ["#032d29", "#044640"]));
        Δⵠ[837] = [];
        Δⵠ[837][0] = Da(Dd(0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        Δⵠ[837][1] = Da(Dd(0.8, 0, ["#1c6161", "#07413f"]));
        Δⵠ[848] = [];
        Δⵠ[848][0] = Da(Dd(0.8, 0, ["#328a56", "#449573"]));
        Δⵠ[848][1] = Da(Dd(0.8, 0, ["#043c37", "#032b23"]));
        Δⵠ[952] = [];
        Δⵠ[952][0] = Da(Dd(0.8, 0, ["#c98e2f", "#a36b11"]));
        Δⵠ[952][1] = Da(Dd(0.8, 0, ["#043c37", "#032b23"]));
        Δⵠ[962] = [];
        Δⵠ[962][0] = Da(Dd(0.8, 0, ["#b22419", "#99110e"]));
        Δⵠ[962][1] = Da(Dd(0.8, 0, ["#04323c", "#03222b"]));
        Δⵠ[969] = [];
        Δⵠ[969][0] = Da(Dd(0.8, 0, ["#13a56d", "#098a58"]));
        Δⵠ[969][1] = Da(Dd(0.8, 0, ["#043c37", "#032b23"]));
        Δⵠ[657] = Nb(1, [{
            f: Rb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Δⵠ[723] = Nb(1, [{
            f: Yb,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Δⵠ[724] = Nb(1, [{
            f: Gm,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Δⵠ[334] = Nb(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Δⵠ[115] = [];
        Δⵠ[115][0] = Da(ub(0.9, 0, ["#7d613e", "#9e7e5a"]));
        Δⵠ[115][1] = Da(ub(0.9, 0, ["#084442", "#125e5a"]));
        Δⵠ[132] = [];
        Δⵠ[132][0] = Da(ub(0.9, 0, ["#9E8456", "#A89F67"]));
        Δⵠ[132][1] = Da(ub(0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        Δⵠ[668] = [];
        Δⵠ[668][0] = Da(ub(0.9, 0, ["#665329", "#68622D"]));
        Δⵠ[668][1] = Da(ub(0.9, 0, ["#083326", "#0F3A24"]));
        Δⵠ[188] = [];
        Δⵠ[188][0] = Da(ub(0.9, 0, ["#c67933", "#ec952d"]));
        Δⵠ[188][1] = Da(ub(0.9, 0, ["#0e6553", "#094437"]));
        Δⵠ[210] = [];
        Δⵠ[210][0] = Da(ub(0.9, 0, ["#375809", "#4b770e"]));
        Δⵠ[210][1] = Da(ub(0.9, 0, ["#09542d", "#0d5d2f"]));
        Δⵠ[985] = [];
        Δⵠ[985][0] = Da(ub(0.9, 0, ["#585809", "#72770e"]));
        Δⵠ[985][1] = Da(ub(0.9, 0, ["#295209", "#305d0d"]));
        Δⵠ[191] = [];
        Δⵠ[191][0] = Da(ub(0.9, 0, ["#b9b094", "#e2d2c0"]));
        Δⵠ[191][1] = Da(ub(0.9, 0, ["#126366", "#0d484b"]));
        Δⵠ[193] = [];
        Δⵠ[193][0] = Da(ub(0.9, 0, ["#3f8662", "#30915d"]));
        Δⵠ[193][1] = Da(ub(0.9, 0, ["#0e6553", "#094437"]));
        Δⵠ[812] = [];
        Δⵠ[812][0] = Da(ub(0.9, 0, ["#c79153", "#dfa868"]));
        Δⵠ[812][1] = Da(ub(0.9, 0, ["#073927", "#075040"]));
        Δⵠ[838] = [];
        Δⵠ[838][0] = Da(ub(0.9, 0, ["#768b5b", "#819984"]));
        Δⵠ[838][1] = Da(ub(0.9, 0, ["#0c4540", "#0e5153"]));
        Δⵠ[849] = [];
        Δⵠ[849][0] = Da(ub(0.9, 0, ["#567465", "#627c6e"]));
        Δⵠ[849][1] = Da(ub(0.9, 0, ["#073927", "#075040"]));
        Δⵠ[204] = [];
        Δⵠ[204][0] = Da(ub(0.9, 0, ["#996b3a", "#bf956b"]));
        Δⵠ[204][1] = Da(ub(0.9, 0, ["#0e6553", "#094437"]));
        Δⵠ[953] = [];
        Δⵠ[953][0] = Da(ub(0.9, 0, ["#7a634a", "#a68f77"]));
        Δⵠ[953][1] = Da(ub(0.9, 0, ["#1e4d43", "#113c32"]));
        Δⵠ[206] = [];
        Δⵠ[206][0] = Da(ub(0.9, 0, ["#99403c", "#bc796c"]));
        Δⵠ[206][1] = Da(ub(0.9, 0, ["#1e434d", "#11303c"]));
        Δⵠ[963] = [];
        Δⵠ[963][0] = Da(ub(0.9, 0, ["#88504e", "#b3857c"]));
        Δⵠ[963][1] = Da(ub(0.9, 0, ["#253b41", "#162930"]));
        Δⵠ[208] = [];
        Δⵠ[208][0] = Da(ub(0.9, 0, ["#0f8870", "#23af93"]));
        Δⵠ[208][1] = Da(ub(0.9, 0, ["#032829", "#083233"]));
        Δⵠ[970] = [];
        Δⵠ[970][0] = Da(ub(0.9, 0, ["#618a20", "#84a74e"]));
        Δⵠ[970][1] = Da(ub(0.9, 0, ["#1f4632", "#335d47"]));
        Δⵠ[114] = [];
        Δⵠ[114][0] = Da(zb(1.2, lq, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        Δⵠ[114][1] = Da(zb(1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        Δⵠ[162] = [];
        Δⵠ[162][0] = Da($d(1, Hg, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        Δⵠ[162][1] = Da($d(1, cl, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Δⵠ[165] = [];
        Δⵠ[165][0] = Da(Nt(1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Δⵠ[165][1] = Da(Nt(1, j, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Δⵠ[122] = [];
        Δⵠ[122][0] = Da(qd(1, oi, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Δⵠ[122][1] = Da(qd(1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Δⵠ[163] = [];
        Δⵠ[163][0] = Da(qd(1, Hg, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        Δⵠ[163][1] = Da(qd(1, Jr, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        Δⵠ[164] = [];
        Δⵠ[164][0] = Da(Tt(1, ra, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        Δⵠ[164][1] = Da(Tt(1, oi, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        Δⵠ[160] = [];
        Δⵠ[160][0] = Da(ru(0.8, gl, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        Δⵠ[160][1] = Da(ru(0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Δⵠ[169] = [];
        Δⵠ[169][0] = Da(Ou(0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        Δⵠ[169][1] = Da(Ou(0.8, Qg, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        Δⵠ[170] = [];
        Δⵠ[170][0] = Da(em(0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Δⵠ[170][1] = Da(em(0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Δⵠ[168] = [];
        Δⵠ[168][0] = Da(Lu(0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        Δⵠ[168][1] = Da(Lu(0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        Δⵠ[123] = [];
        Δⵠ[123][0] = Da(Lu(0.8, ra, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Δⵠ[123][1] = Da(Lu(0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Δⵠ[166] = [];
        Δⵠ[166][0] = Da(Ut(1.5, sh, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        Δⵠ[166][1] = Da(Ut(1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Δⵠ[336] = [];
        Δⵠ[336][0] = Da(Ut(1, yl, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Δⵠ[336][1] = Da(Ut(1, aq, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        Δⵠ[171] = [];
        Δⵠ[171][0] = Da(Qt(1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        Δⵠ[171][1] = Da(Qt(1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        Δⵠ[373] = [];
        Δⵠ[373][0] = Da(Qt(1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Δⵠ[373][1] = Da(Qt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Δⵠ[124] = [];
        Δⵠ[124][0] = Da(Qt(1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Δⵠ[124][1] = Da(Qt(1.5, lq, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Δⵠ[500] = [];
        Δⵠ[500][0] = Da(Qt(1, aq, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Δⵠ[500][1] = Da(Qt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Δⵠ[172] = [];
        Δⵠ[172][0] = Da(Rt(1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        Δⵠ[172][1] = Da(Rt(1.5, cs, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        Δⵠ[376] = [];
        Δⵠ[376][0] = Da(Rt(1, So, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Δⵠ[376][1] = Da(Rt(1, bn, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Δⵠ[173] = [];
        Δⵠ[173][0] = Da(Xt(1.5, ra, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Δⵠ[173][1] = Da(Xt(1.5, j, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Δⵠ[379] = [];
        Δⵠ[379][0] = Da(Xt(1, po, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Δⵠ[379][1] = Da(Xt(1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Δⵠ[167] = [];
        Δⵠ[167][0] = Da(eu(0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        Δⵠ[167][1] = Da(eu(0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        Δⵠ[691] = [];
        Δⵠ[691][0] = Da(Xm(0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        Δⵠ[691][1] = Da(Xm(0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        Δⵠ[264] = [];
        Δⵠ[264][0] = Da(fb(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        Δⵠ[264][1] = Da(fb(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        Δⵠ[260] = [];
        Δⵠ[260][0] = Da(Lt(Math.PI, Eb(0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        Δⵠ[260][1] = Da(Lt(Math.PI, Eb(0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        Δⵠ[266] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            Dt(d, Lq, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            Dt(d, Ch, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            Dt(d, _l, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            Dt(d, eo, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            Dt(d, undefined, b[0], 4);
            return c;
        }(0.6, ["#FFFFFF"]));
        Δⵠ[299] = [];
        Δⵠ[299][0] = Da(Ab(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        Δⵠ[299][1] = Da(Ab(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        Δⵠ[10] = [];
        Δⵠ[10][0] = Da(qu(0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        Δⵠ[10][1] = Da(qu(0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        Δⵠ[11] = [];
        Δⵠ[11][0] = Da(Yt(0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        Δⵠ[11][1] = Da(Yt(0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        Δⵠ[40] = [];
        Δⵠ[40][0] = Da(ou(0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        Δⵠ[40][1] = Da(ou(0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        Δⵠ[41] = [];
        Δⵠ[41][0] = Da(ld(0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        Δⵠ[41][1] = Da(ld(0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        Δⵠ[42] = [];
        Δⵠ[42][0] = Da(hd(0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        Δⵠ[42][1] = Da(hd(0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        Δⵠ[716] = [];
        Δⵠ[716][0] = Da(Bm(0.42, cl, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        Δⵠ[716][1] = Da(Bm(0.42, $k, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        Δⵠ[720] = [];
        Δⵠ[720][0] = Da(Im(0.9, ["#e4c027"]));
        Δⵠ[720][1] = Da(Im(0.9, ["#D8E57F"]));
        Δⵠ[144] = [];
        Δⵠ[144][0] = Da(Qm(0.42, $k, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        Δⵠ[144][1] = Da(Qm(0.42, mk, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        Δⵠ[722] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Kt(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            Dt(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            Kt(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            Dt(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            Dt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            Dt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            Dt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            Dt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            Kt(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            Dt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            Kt(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            Dt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            Kt(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            Dt(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            Dt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            Dt(d, b[3], b[3], a * 10);
            return c;
        }(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        Δⵠ[407] = [];
        Δⵠ[407][0] = Da(St(0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        Δⵠ[407][1] = Da(St(0.5, Uq, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        Δⵠ[119] = [];
        Δⵠ[119][0] = Da(Wt(0.5, cs, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        Δⵠ[119][1] = Da(Wt(0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        Δⵠ[411] = Da(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            Kt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            Dt(e, c[0], c[1], 4);
            return d;
        }(0.8, 0, ["#5f6061", "#939393"]));
        Δⵠ[412] = Nb(1, [{
            f: Yb,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        Δⵠ[198] = [];
        Δⵠ[198][0] = Da(fu(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        Δⵠ[198][1] = Da(fu(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        Δⵠ[913] = [];
        Δⵠ[913][0] = Da(gu(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        Δⵠ[913][1] = Da(gu(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        Δⵠ[18] = [];
        Δⵠ[18][0] = Da(Lt(3, iu(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        Δⵠ[18][1] = Da(Lt(3, iu(0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        Δⵠ[12] = [];
        Δⵠ[12][0] = Da(Lt(3, hu(0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        Δⵠ[12][1] = Da(Lt(3, hu(0.7, mk, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        Δⵠ[13] = [];
        Δⵠ[13][0] = Da(Lt(3, au(0.65, oi, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        Δⵠ[13][1] = Da(Lt(3, au(0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        Δⵠ[14] = [];
        Δⵠ[14][0] = Da(Lt(3, du(0.67, j, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        Δⵠ[14][1] = Da(Lt(3, du(0.67, j, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        Δⵠ[15] = [];
        Δⵠ[15][0] = Da(Lt(3, lu(0.67, cl, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        Δⵠ[15][1] = Da(Lt(3, lu(0.67, Uq, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        Δⵠ[33] = [];
        Δⵠ[33][0] = Da(Lt(3, cu(0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        Δⵠ[33][1] = Da(Lt(3, cu(0.67, mk, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        Δⵠ[16] = [];
        Δⵠ[16][0] = Da(Lt(3, $t(1, $k, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        Δⵠ[16][1] = Da(Lt(3, $t(1, Jr, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        Δⵠ[35] = [];
        Δⵠ[35][0] = Da(Lt(3, Gu(1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        Δⵠ[35][1] = Da(Lt(3, Gu(1, cs, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        Δⵠ[55] = [];
        Δⵠ[55][0] = Da(Lt(3, tc(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
        Δⵠ[55][1] = Da(Lt(3, tc(0.5, true, ["#030d14", "#485e66", "#1f343f"])));
        Δⵠ[45] = [];
        Δⵠ[45][0] = Da(Lt(3, Em(1, Fh, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        Δⵠ[45][1] = Da(Lt(3, Em(1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        Δⵠ[36] = [];
        Δⵠ[36][0] = Da(Lt(3, Gu(1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        Δⵠ[36][1] = Da(Lt(3, Gu(1, ra, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        Δⵠ[37] = [];
        Δⵠ[37][0] = Da(Lt(3, Gu(1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        Δⵠ[37][1] = Da(Lt(3, Gu(1, cl, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        Δⵠ[38] = [];
        Δⵠ[38][0] = Da(Lt(3, Gu(1, Ll, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        Δⵠ[38][1] = Da(Lt(3, Gu(1, gl, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        Δⵠ[148] = [];
        Δⵠ[148][0] = Da(dm(0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        Δⵠ[148][1] = Da(dm(0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        Δⵠ[536] = [];
        Δⵠ[536].push(Da(dm(0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        Δⵠ[536].push(Da(dm(0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        Δⵠ[536].push(Da(dm(0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        Δⵠ[538] = [];
        Δⵠ[538].push(Δⵠ[536][0]);
        Δⵠ[538].push(Δⵠ[536][0]);
        Δⵠ[538].push(Δⵠ[536][0]);
        Δⵠ[158] = [];
        Δⵠ[158][0] = Da(Pm(0.06, 0, ["#141414", "#c4a23a", "#816511"]));
        Δⵠ[158][1] = Da(Pm(0.06, 0, ["#030d14", "#2b6664", "#133d3c"]));
        Δⵠ[535] = [];
        Δⵠ[535].push(Da(Pm(0.08, 0, ["#141414", "#c4a23a", "#816511"])));
        Δⵠ[535].push(Da(Pm(0.08, 0, ["#141414", "#e2bd4e", "#a38018"])));
        Δⵠ[535].push(Da(Pm(0.08, 0, ["#141414", "#b0902e", "#634d09"])));
        Δⵠ[149] = Nb(1.5, [{
            f: km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        Δⵠ[526] = [];
        Δⵠ[526][0] = Da(wm(0.8, 0, ["#347f93", "#54a4ba"]));
        Δⵠ[526][1] = Da(wm(0.8, 0, ["#98ede3", "#94f2e7"]));
        Δⵠ[527] = [];
        Δⵠ[527][0] = Da(Tm(0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        Δⵠ[527][1] = Da(Tm(0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        Δⵠ[528] = [];
        Δⵠ[528][0] = Da(fm(0.8, 0, ["#a9e4ed", "#86d4e0"]));
        Δⵠ[528][1] = Da(fm(0.8, 0, ["#83ddd4", "#485e66"]));
        Δⵠ[151] = [];
        Δⵠ[151][0] = Da(zm(0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        Δⵠ[151][1] = Da(zm(0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        Δⵠ[1192] = [];
        Δⵠ[1192][0] = ⵠᐃ.ⵠⲆΔⲆΔᐃⵠ;
        Δⵠ[1192][1] = ⵠᐃ.ΔⲆᐃⲆᐃⲆⲆ;
        Δⵠ[1193] = [];
        Δⵠ[1193][0] = ⵠᐃ.ⲆΔᐃᐃΔᐃᐃ;
        Δⵠ[1193][1] = ⵠᐃ.ᐃᐃⵠⲆΔⲆⲆ;
        Δⵠ[1194] = [];
        Δⵠ[1194][0] = ⵠᐃ.ⲆⲆⵠⲆΔᐃΔ;
        Δⵠ[1194][1] = ⵠᐃ.ᐃΔⵠⵠⲆⲆⵠ;
        Δⵠ[152] = [];
        Δⵠ[152][0] = ⵠᐃ.ⲆΔᐃᐃᐃΔᐃ;
        Δⵠ[152][1] = ⵠᐃ.ᐃⲆⵠⲆᐃᐃΔ;
        Δⵠ[1198] = [];
        Δⵠ[1198][0] = ⵠᐃ.ΔᐃⵠⲆΔⲆⲆ;
        Δⵠ[1198][1] = ⵠᐃ.ΔΔΔⵠⵠᐃⵠ;
        Δⵠ[153] = [];
        Δⵠ[153][0] = ⵠᐃ.ᐃΔⵠⲆΔⲆΔ;
        Δⵠ[153][1] = ⵠᐃ.ᐃΔΔⲆⲆⵠⲆ;
        Δⵠ[1202] = [];
        Δⵠ[1202][0] = ⵠᐃ.ΔⲆᐃⵠⵠⲆᐃ;
        Δⵠ[1202][1] = ⵠᐃ.ⵠΔⵠⵠⲆⲆᐃ;
        Δⵠ[154] = [];
        Δⵠ[154][0] = ⵠᐃ.ⵠⲆΔᐃΔΔΔ;
        Δⵠ[154][1] = ⵠᐃ.ⲆⵠⲆΔᐃᐃᐃ;
        Δⵠ[1206] = [];
        Δⵠ[1206][0] = ⵠᐃ.ᐃΔΔⵠⲆⵠⲆ;
        Δⵠ[1206][1] = ⵠᐃ.ⲆⲆⲆⵠⲆΔⵠ;
        Δⵠ[155] = [];
        Δⵠ[155][0] = ⵠᐃ.ᐃᐃΔⵠⲆΔⵠ;
        Δⵠ[155][1] = ⵠᐃ.ΔⵠᐃⵠⲆⵠᐃ;
        Δⵠ[1210] = [];
        Δⵠ[1210][0] = ⵠᐃ.ⲆᐃⵠⲆⲆᐃᐃ;
        Δⵠ[1210][1] = ⵠᐃ.ᐃᐃⵠⲆⵠⲆⲆ;
        Δⵠ[156] = [];
        Δⵠ[156][0] = ⵠᐃ.ΔⵠΔᐃᐃΔΔ;
        Δⵠ[156][1] = ⵠᐃ.ΔⲆᐃᐃΔⲆⵠ;
        Δⵠ[1214] = [];
        Δⵠ[1214][0] = ⵠᐃ.ⵠΔⲆᐃΔⲆᐃ;
        Δⵠ[1214][1] = ⵠᐃ.ⵠᐃⲆⲆⲆⲆΔ;
        Δⵠ[157] = [];
        Δⵠ[157][0] = ⵠᐃ.ⵠⲆᐃᐃⵠΔⲆ;
        Δⵠ[157][1] = ⵠᐃ.ΔᐃⲆΔⵠⲆΔ;
        Δⵠ[245] = [];
        Δⵠ[245][0] = ⵠᐃ.ⵠΔᐃⲆΔΔⵠ;
        Δⵠ[245][1] = ⵠᐃ.ᐃΔΔⵠᐃⲆΔ;
        Δⵠ[246] = ⵠᐃ.ⵠΔᐃⵠⵠΔⵠ;
        Δⵠ[159] = [];
        Δⵠ[159][0] = Da(xm(0.75, Uq, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        Δⵠ[159][1] = Da(xm(0.75, Hg, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        Δⵠ[558] = Da(ym(0.3, ["#092813", "#1f773d"], 0));
        Δⵠ[559] = Da(ym(0.3, ["#092813", "#1f773d"], 1));
        Δⵠ[885] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Dt(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            Dt(d, b[1]);
            return c;
        }(0.6, ["#092813", "#1f773d"]));
        Δⵠ[556] = [];
        Δⵠ[556].push(Da(Cm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        Δⵠ[556].push(Da(Cm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        Δⵠ[556].push(Da(Cm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        Δⵠ[560] = [];
        var b = Da(Cm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        Δⵠ[560].push(b);
        Δⵠ[560].push(b);
        Δⵠ[560].push(b);
        Δⵠ[557] = [];
        Δⵠ[557].push(Da(Cm(0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        Δⵠ[557].push(Da(Cm(0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        Δⵠ[557].push(Da(Cm(0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        Δⵠ[681] = Da(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                It(e, 3, b * 18, b * 4);
                Dt(e, c[0]);
                e.restore();
            }
            e.restore();
            Ft(e, 0, 0, b * 40);
            Dt(e, undefined, c[0], b * 6);
            Ft(e, 0, 0, b * 20);
            Dt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        Δⵠ[794] = Da(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            Ft(e, a, h, b * 40);
            Dt(e, undefined, c[0], b * 7);
            Ft(e, a, h, b * 30);
            Dt(e, undefined, c[0], b * 7);
            Ft(e, a, h, b * 20);
            Dt(e, c[0]);
            return d;
        }(0.3, ["#FFFFFF"]));
        Δⵠ[562] = Da(ym(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        Δⵠ[667] = Da(Lt(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            Kt(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            Dt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            Dt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            Dt(d, b[0], b[0], a * 15);
            return c;
        }(0.2, ["#FFFFFF"])));
        Δⵠ[43] = [];
        Δⵠ[43][0] = Da(bm(0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        Δⵠ[43][1] = Da(bm(0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        Δⵠ[561] = [];
        Δⵠ[561].push(Da(Cm(0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        Δⵠ[561].push(Da(Cm(0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        Δⵠ[561].push(Da(Cm(0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        Δⵠ[83] = [];
        Δⵠ[83][0] = Da(Om(0.37, 0, ["#2a2938", "#242330", "#313041"]));
        Δⵠ[83][1] = Da(Om(0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
        Δⵠ[85] = [];
        Δⵠ[85][0] = Da(Km(0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        Δⵠ[85][1] = Da(Km(0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        Δⵠ[86] = [];
        Δⵠ[86][0] = Da(Hm(0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        Δⵠ[86][1] = Da(Hm(0.55, cl, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        Δⵠ[84] = [];
        Δⵠ[84][0] = Da(Hm(0.55, yg, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        Δⵠ[84][1] = Da(Hm(0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        Δⵠ[77] = [];
        Δⵠ[77][0] = Da(uc(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        Δⵠ[77][1] = Da(uc(0.2, cl, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        Δⵠ[78] = [];
        Δⵠ[78][0] = Da(uc(0.2, Fh, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        Δⵠ[78][1] = Da(uc(0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        Δⵠ[79] = [];
        Δⵠ[79][0] = Da(uc(0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        Δⵠ[79][1] = Da(uc(0.2, j, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        Δⵠ[61] = [];
        Δⵠ[61][0] = Da(ku(0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        Δⵠ[61][1] = Da(ku(0.24, sh, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        Δⵠ[59] = [];
        Δⵠ[59][0] = Da(vu(0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        Δⵠ[59][1] = Da(vu(0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        Δⵠ[62] = [];
        Δⵠ[62][0] = Da(Lt(3, Sm(0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        Δⵠ[62][1] = Da(Lt(3, Sm(0.9, Uq, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        Δⵠ[750] = [];
        Δⵠ[750][0] = Da(Lt(3, Sm(1, xo, [Gn, _l, undefined, "#c8efef", "#c8efef"])));
        Δⵠ[750][1] = Da(Lt(3, Sm(1, Ll, [wj, undefined, Xh, "#87d2e6", "#87d2e6"])));
        Δⵠ[755] = [];
        Δⵠ[755].push(Da(Cc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        Δⵠ[755].push(Da(Cc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        Δⵠ[755].push(Da(Cc(0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        Δⵠ[795] = [];
        Δⵠ[795].push(Da(gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        Δⵠ[795].push(Da(gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        Δⵠ[795].push(Da(gc(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        Δⵠ[782] = [];
        Δⵠ[782].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        Δⵠ[782].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        Δⵠ[782].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        Δⵠ[783] = [];
        Δⵠ[783].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        Δⵠ[783].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        Δⵠ[783].push(Da(sd(0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        Δⵠ[46] = [];
        Δⵠ[46][0] = Da(Lt(3, mc(0.7, cl, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        Δⵠ[46][1] = Da(Lt(3, mc(0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        Δⵠ[50] = [];
        Δⵠ[50][0] = Da(Lt(3, mc(0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        Δⵠ[50][1] = Da(Lt(3, mc(0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        Δⵠ[51] = [];
        Δⵠ[51][0] = Da(Lt(3, mc(0.7, cs, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        Δⵠ[51][1] = Da(Lt(3, mc(0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        Δⵠ[52] = [];
        Δⵠ[52][0] = Da(Lt(3, mc(0.7, ra, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        Δⵠ[52][1] = Da(Lt(3, mc(0.7, Qg, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        Δⵠ[592] = [];
        Δⵠ[592].push(Da(Mm(0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        Δⵠ[592].push(Da(Mm(0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        Δⵠ[592].push(Da(Mm(0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        Δⵠ[326] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            Dt(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            Dt(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            Dt(d, b[0], b[0], a * 2);
            return c;
        }(1.1, ["#BB0000"]));
        Δⵠ[333] = Da(Lt(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            Ft(d, a * 213.5, a * 256.75, a * 75);
            Dt(d, b);
            Ft(d, a * 213.5, a * 175.75, a * 25);
            Dt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(0.9, "#BB0000")));
        Δⵠ[23] = [];
        Δⵠ[23][0] = Da(om(0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        Δⵠ[23][1] = Da(om(0.55, Jr, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        Δⵠ[58] = [];
        Δⵠ[58][0] = Da(rm(0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        Δⵠ[58][1] = Da(rm(0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        Δⵠ[25] = [];
        Δⵠ[25][0] = Da(lm(0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        Δⵠ[25][1] = Da(lm(0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        Δⵠ[26] = [];
        Δⵠ[26][0] = Da(hm(0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        Δⵠ[26][1] = Da(hm(0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        Δⵠ[27] = [];
        Δⵠ[27][0] = Da(cm(0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        Δⵠ[27][1] = Da(cm(0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        Δⵠ[413] = [];
        Δⵠ[413][0] = [];
        Δⵠ[413][1] = [];
        Δⵠ[413][0].push(Da(uu(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        Δⵠ[413][0].push(Da(Cu(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        Δⵠ[413][0].push(Da(im(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        Δⵠ[413][1].push(Da(uu(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        Δⵠ[413][1].push(Da(Cu(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        Δⵠ[413][1].push(Da(im(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        Δⵠ[449] = [];
        Δⵠ[449][0] = Da(gm(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        Δⵠ[449][1] = Da(gm(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        Δⵠ[451] = [];
        Δⵠ[451][0] = Da(am(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        Δⵠ[451][1] = Da(am(1, ["#050505", "#327570", "#021724", "#200333"]));
        Δⵠ[452] = [];
        Δⵠ[452][0] = Da(sm(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        Δⵠ[452][1] = Da(sm(1, ["#050505", "#327570", "#021724", "#200333"]));
        Δⵠ[243] = [];
        Δⵠ[243][0] = [];
        Δⵠ[243][1] = [];
        Δⵠ[243][0] = [ⵠᐃ.ⵠΔⲆⵠΔⲆⵠ, ⵠᐃ.ΔⲆⲆᐃΔΔᐃ, ⵠᐃ.ⵠᐃⵠⲆⲆⲆΔ, ⵠᐃ.ΔᐃᐃΔⲆⵠⲆ, ⵠᐃ.ⵠΔⲆΔΔⲆΔ, ⵠᐃ.ᐃⵠⵠΔΔⵠᐃ, ⵠᐃ.ⵠⲆⵠΔᐃΔᐃ, ⵠᐃ.ⵠⲆⵠᐃᐃⲆΔ, ⵠᐃ.ᐃᐃᐃᐃⲆᐃⵠ, ⵠᐃ.Δⵠⵠⵠⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⵠΔⲆΔ, ⵠᐃ.ⵠⵠᐃⲆⵠⲆⲆ, ⵠᐃ.ᐃⵠⵠⲆΔⲆⵠ, ⵠᐃ.ⲆⲆΔΔⲆᐃΔ, ⵠᐃ.ΔⵠᐃᐃΔⲆⲆ, ⵠᐃ.ⵠⵠⵠΔⲆⵠᐃ, ⵠᐃ.ⵠᐃᐃᐃΔⵠᐃ, ⵠᐃ.ΔΔⲆⲆΔⲆΔ, ⵠᐃ.ⲆⲆΔⲆⲆⲆΔ, ⵠᐃ.ΔᐃⲆᐃΔⲆΔ, ⵠᐃ.ⵠⵠⵠᐃⲆⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆΔⲆ, ⵠᐃ.ⲆⲆΔⵠΔⲆⵠ, ⵠᐃ.ΔΔΔᐃⲆⵠᐃ, ⵠᐃ.ᐃⵠΔⲆΔᐃⵠ, ⵠᐃ.ⲆⵠⵠᐃⵠΔᐃ, ⵠᐃ.ⵠⵠⲆⵠⲆⲆⵠ, ⵠᐃ.ⵠΔⲆᐃᐃⵠⵠ, ⵠᐃ.ⲆΔΔΔⵠⲆⲆ, ⵠᐃ.ⵠⲆᐃΔΔΔⵠ, ⵠᐃ.ᐃⲆⵠⵠΔΔᐃ, ⵠᐃ.ᐃⲆⲆΔⲆΔⲆ, ⵠᐃ.ⵠΔᐃⵠᐃΔΔ, ⵠᐃ.ⵠᐃⲆⲆⲆΔⵠ, ⵠᐃ.ᐃΔΔΔᐃΔᐃ, ⵠᐃ.ⵠⵠᐃⲆⲆᐃⵠ, ⵠᐃ.ⲆⲆⵠᐃⵠΔΔ, ⵠᐃ.ᐃᐃΔⵠⲆⲆᐃ, ⵠᐃ.ⵠⲆΔᐃᐃᐃΔ, ⵠᐃ.ⲆΔᐃᐃᐃᐃⵠ, ⵠᐃ.ⲆⲆⵠⲆⲆⵠⲆ, ⵠᐃ.ᐃⵠᐃᐃⲆⵠⵠ, ⵠᐃ.ⵠⵠⵠᐃⲆᐃⲆ, ⵠᐃ.ⵠΔⲆΔΔΔᐃ, ⵠᐃ.ⵠⵠⲆⵠΔΔⵠ, ⵠᐃ.ΔⵠΔΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃᐃⲆᐃ, ⵠᐃ.ΔᐃΔⲆⲆⵠΔ, ⵠᐃ.ⵠᐃⲆⵠᐃⵠⲆ, ⵠᐃ.ᐃⲆᐃΔⵠⲆⵠ, ⵠᐃ.ⵠⵠᐃΔΔⲆΔ, ⵠᐃ.ΔΔᐃΔᐃΔᐃ, ⵠᐃ.ᐃⲆᐃⲆⲆⵠⲆ, ⵠᐃ.ⵠᐃΔⲆΔⵠΔ, ⵠᐃ.ⵠᐃⲆⲆⲆⵠᐃ, ⵠᐃ.ᐃᐃⲆⲆⵠⵠⵠ];
        Δⵠ[243][1] = [ⵠᐃ.ⵠⲆᐃⵠᐃΔΔ, ⵠᐃ.ΔⵠⲆΔⲆᐃⵠ, ⵠᐃ.ⵠⵠΔΔΔⵠⵠ, ⵠᐃ.ᐃᐃⵠΔᐃⲆⲆ, ⵠᐃ.ⲆᐃⵠⵠⲆⲆΔ, ⵠᐃ.ᐃⵠΔⵠⵠⵠⵠ, ⵠᐃ.ⲆᐃΔᐃᐃᐃⲆ, ⵠᐃ.ⵠⲆΔⲆᐃⲆⵠ, ⵠᐃ.ᐃᐃⲆᐃⲆⲆⵠ, ⵠᐃ.ᐃΔⲆᐃΔⲆⵠ, ⵠᐃ.ΔᐃᐃⲆᐃⲆⲆ, ⵠᐃ.ᐃⵠⵠΔΔᐃⲆ, ⵠᐃ.ⲆⵠⵠΔⲆⲆΔ, ⵠᐃ.ⲆΔⲆⵠᐃΔⵠ, ⵠᐃ.ⵠⵠΔΔᐃᐃᐃ, ⵠᐃ.ⵠᐃΔⵠΔⵠⵠ, ⵠᐃ.ⵠΔⵠⲆⵠⵠΔ, ⵠᐃ.ⲆⲆⲆᐃⲆᐃᐃ, ⵠᐃ.ᐃⲆΔᐃⲆⲆΔ, ⵠᐃ.ⵠΔⵠⲆⲆᐃΔ, ⵠᐃ.ᐃΔⵠΔΔᐃΔ, ⵠᐃ.ⲆⵠᐃⲆⵠΔᐃ, ⵠᐃ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠᐃ.ᐃⲆⵠΔⵠΔⵠ, ⵠᐃ.ΔᐃᐃⵠΔⵠΔ, ⵠᐃ.Δⵠᐃⵠᐃᐃᐃ, ⵠᐃ.ΔⲆΔΔΔΔᐃ, ⵠᐃ.ΔΔᐃⲆᐃᐃⵠ, ⵠᐃ.ⵠⲆᐃΔΔⲆⲆ, ⵠᐃ.ΔᐃᐃᐃⲆᐃⵠ, ⵠᐃ.ⲆΔⲆΔΔⲆᐃ, ⵠᐃ.ⲆΔⲆᐃⵠⲆᐃ, ⵠᐃ.ⲆΔᐃᐃⲆⲆⵠ, ⵠᐃ.ᐃⲆⲆⵠⲆⲆⲆ, ⵠᐃ.ⵠΔΔⲆΔⲆⲆ, ⵠᐃ.ᐃΔⲆᐃΔΔΔ, ⵠᐃ.ΔΔⵠΔΔⲆᐃ, ⵠᐃ.ᐃᐃᐃΔⲆⵠΔ, ⵠᐃ.ΔᐃᐃⵠᐃⲆⵠ, ⵠᐃ.ΔᐃⲆⲆᐃⵠⵠ, ⵠᐃ.ᐃᐃⲆΔⵠΔⵠ, ⵠᐃ.ᐃΔⵠΔⲆⵠⲆ, ⵠᐃ.ᐃⵠⵠⲆΔⵠⵠ, ⵠᐃ.ΔⵠᐃᐃᐃⲆᐃ, ⵠᐃ.ⲆⵠΔΔΔΔᐃ, ⵠᐃ.ⲆⵠⵠⵠⲆⲆᐃ, ⵠᐃ.ⲆΔⲆⵠᐃⵠᐃ, ⵠᐃ.ΔΔⵠⵠⲆΔⲆ, ⵠᐃ.ⵠⵠᐃΔⲆΔⲆ, ⵠᐃ.ΔⵠⲆⵠⵠᐃᐃ, ⵠᐃ.ΔᐃΔΔⵠⵠᐃ, ⵠᐃ.ⲆΔᐃᐃⲆⵠᐃ, ⵠᐃ.ᐃᐃⲆⲆΔⲆΔ, ⵠᐃ.ⲆΔΔⵠⵠⵠᐃ, ⵠᐃ.ⲆΔⵠⵠᐃΔⲆ, ⵠᐃ.ᐃⵠᐃⵠΔⲆᐃ];
        Δⵠ[676] = [];
        Δⵠ[676][0] = [];
        Δⵠ[676][1] = [];
        Δⵠ[676][0].push(Da(Qd(1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        Δⵠ[676][0].push(Da(Qd(0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
        Δⵠ[676][0].push(Da(Qd(1, Xi, ["#252B28", "#747471", "#83827e"], 2)));
        Δⵠ[676][0].push(Da(Qd(0.9, aq, ["#252B28", "#747471", "#83827e"], 2)));
        Δⵠ[676][1].push(Da(Qd(1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        Δⵠ[676][1].push(Da(Qd(0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        Δⵠ[676][1].push(Da(Qd(1, cr, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[676][1].push(Da(Qd(0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[679] = [];
        Δⵠ[679][0] = [];
        Δⵠ[679][1] = [];
        Δⵠ[679][0].push(Da(Qd(1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        Δⵠ[679][0].push(Da(Qd(0.9, cl, ["#252B28", "#58645F", "#75827D"], 2)));
        Δⵠ[679][0].push(Da(Qd(1, true, ["#252B28", "#58645F", "#75827D"], 2)));
        Δⵠ[679][0].push(Da(Qd(0.9, sh, ["#252B28", "#58645F", "#75827D"], 2)));
        Δⵠ[679][1].push(Da(Qd(1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[679][1].push(Da(Qd(0.9, xo, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[679][1].push(Da(Qd(1, Ll, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[679][1].push(Da(Qd(0.9, ra, ["#030d14", "#123335", "#183f3f"], 2)));
        Δⵠ[415] = [];
        Δⵠ[415][0] = [];
        Δⵠ[415][1] = [];
        Δⵠ[415][0].push(Da(Fd(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[415][0].push(Da(Fd(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[415][0].push(Da(Fd(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Δⵠ[415][1].push(Da(Fd(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Δⵠ[415][1].push(Da(Fd(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Δⵠ[415][1].push(Da(Fd(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Δⵠ[416] = [];
        Δⵠ[416][0] = [];
        Δⵠ[416][1] = [];
        Δⵠ[416][0].push(Da(_d(1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Δⵠ[416][0].push(Da(_d(0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Δⵠ[416][0].push(Da(_d(0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Δⵠ[416][1].push(Da(_d(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Δⵠ[416][1].push(Da(_d(0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Δⵠ[416][1].push(Da(_d(0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Δⵠ[121] = [];
        Δⵠ[121][0] = [];
        Δⵠ[121][1] = [];
        Δⵠ[121][0].push(Da(Eu(1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
        Δⵠ[121][0].push(Da(Eu(1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        Δⵠ[121][0].push(Da(Eu(1.3, sh, ["#1d051e", "#c27add", "#cd98e5"])));
        Δⵠ[121][1].push(Da(Eu(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Δⵠ[121][1].push(Da(Eu(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Δⵠ[121][1].push(Da(Eu(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Δⵠ[678] = [];
        Δⵠ[678][0] = [];
        Δⵠ[678][1] = [];
        Δⵠ[678][0].push(Da(Nu(1, ["#2d53c4"])));
        Δⵠ[678][1].push(Da(Nu(1, ["#2d53c4"])));
        Δⵠ[696] = [];
        Δⵠ[696][0] = [];
        Δⵠ[696][1] = [];
        Δⵠ[696][0].push(Da(Nu(1, ["#c4912d"])));
        Δⵠ[696][1].push(Da(Nu(1, ["#c4912d"])));
        Δⵠ[680] = [];
        Δⵠ[680][0] = Da(Ku(1, ["#414040"]));
        Δⵠ[680][1] = Da(Ku(1, ["#153635"]));
        Δⵠ[508] = [];
        Δⵠ[508][0] = Da(Ut(1, xj, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Δⵠ[508][1] = Da(Ut(1, Xi, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Δⵠ[509] = [];
        Δⵠ[509][0] = Da(Qt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Δⵠ[509][1] = Da(Qt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Δⵠ[512] = [];
        Δⵠ[512][0] = Da(Qt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Δⵠ[512][1] = Da(Qt(1, Mr, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Δⵠ[511] = [];
        Δⵠ[511][0] = Da(Xt(1, Mr, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Δⵠ[511][1] = Da(Xt(1, Qk, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Δⵠ[510] = [];
        Δⵠ[510][0] = Da(Rt(1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Δⵠ[510][1] = Da(Rt(1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Δⵠ[419] = [];
        Δⵠ[419][0] = Da(Mu(0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        Δⵠ[419][1] = Da(Mu(0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        Δⵠ[445] = [];
        Δⵠ[445][0] = Da(Iu(0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        Δⵠ[445][1] = Da(Iu(0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        Δⵠ[259] = [];
        Δⵠ[818] = [];
        Δⵠ[516] = [];
        Δⵠ[819] = [];
        for (a = 0; a < 2; a++) {
            Δⵠ[259][a] = document.createElement("canvas");
            Δⵠ[259][a].width = 193;
            Δⵠ[259][a].height = 193;
            Δⵠ[818][a] = Δⵠ[259][a].getContext("2d");
            Δⵠ[516][a] = document.createElement("canvas");
            Δⵠ[516][a].width = 600;
            Δⵠ[516][a].height = 600;
            Δⵠ[819][a] = Δⵠ[516][a].getContext("2d");
        }
        Δⵠ[475] = [];
        Δⵠ[475][0] = Da(Ku(1, ["#c8e0de"]));
        Δⵠ[475][1] = Da(Ku(1, ["#147071"]));
        Δⵠ[476] = [];
        Δⵠ[476][0] = Da(Ku(1, ["#231912"]));
        Δⵠ[476][1] = Da(Ku(1, ["#021719"]));
        Δⵠ[697] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            Kt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            Dt(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            Kt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            Dt(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            Kt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            Dt(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            Kt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            Dt(d, b[0]);
            return c;
        }(0.5, ["#BB0000"]));
        Δⵠ[461] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            Dt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        Δⵠ[462] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            Dt(d, b, b, a * 4);
            return c;
        }(0.9, "#BB0000"));
        Δⵠ[463] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            Dt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            Dt(d, b[0]);
            return c;
        }(1, ["#BB0000"]));
        Δⵠ[466] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            Dt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            Dt(d, b);
            return c;
        }(0.8, "#BB0000"));
        Δⵠ[467] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            Dt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            Dt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            Dt(d, b);
            return c;
        }(0.8, "#BB0000"));
        Δⵠ[322] = Da(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            Dt(e, c, c, a);
            return d;
        }(0.9, "#BB0000"));
        Δⵠ[279] = Da(Gt(0.6, "#BB0000"));
        Δⵠ[280] = Da(Gt(0.6, "#1CE7E0"));
        Δⵠ[281] = Da(Gt(0.6, "#DBE71C"));
        Δⵠ[308] = Da(Gt(0.6, "#00BB00"));
        Δⵠ[602] = [];
        Δⵠ[602][0] = Da(Ku(1, ["#dac291"]));
        Δⵠ[602][1] = Da(Ku(1, ["#0D423D"]));
        Δⵠ[698] = [];
        Δⵠ[698][0] = Da(Ku(1, ["#dac291"]));
        Δⵠ[698][1] = Da(Ku(1, ["#0D423D"]));
        Δⵠ[788] = [];
        Δⵠ[788][0] = Da($m(0.3, $k, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        Δⵠ[788][1] = Da($m(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        Δⵠ[182] = [];
        Δⵠ[182][0] = Da($m(0.3, Uq, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        Δⵠ[182][1] = Da($m(0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        Δⵠ[127] = [Da(bc(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        Δⵠ[128] = [Da(bc(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        Δⵠ[603] = [];
        Δⵠ[603][0] = [];
        Δⵠ[603][1] = [];
        Δⵠ[603][0].push(Da(xu(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(Pu(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(tm(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(Du(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(zu(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(wu(1, ["#0B6A84"])));
        Δⵠ[603][0].push(Da(tu(1, ["#0B6A84"])));
        Δⵠ[603][1].push(Da(xu(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(Pu(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(tm(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(Du(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(zu(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(wu(1, ["#09373F"])));
        Δⵠ[603][1].push(Da(tu(1, ["#09373F"])));
        Δⵠ[692] = [];
        Δⵠ[692][0] = [];
        Δⵠ[692][1] = [];
        Δⵠ[692][0].push(Da(Hu(1.7, ["#FBEFBC"], 0)));
        Δⵠ[692][0].push(Da(Hu(1.9, ["#FBEFBC"], 1)));
        Δⵠ[692][0].push(Da(Hu(1.7, ["#FBEFBC"], 2)));
        Δⵠ[692][1].push(Da(Hu(1.7, ["#0F4C48"], 0)));
        Δⵠ[692][1].push(Da(Hu(1.9, ["#0F4C48"], 1)));
        Δⵠ[692][1].push(Da(Hu(1.7, ["#0F4C48"], 2)));
        Δⵠ[694] = [];
        Δⵠ[694][0] = [];
        Δⵠ[694][1] = [];
        Δⵠ[694][0].push(Da(Hu(1.8, ["#A9D6D3"], 0)));
        Δⵠ[694][0].push(Da(Hu(2, ["#A9D6D3"], 1)));
        Δⵠ[694][0].push(Da(Hu(1.8, ["#A9D6D3"], 2)));
        Δⵠ[694][1].push(Da(Hu(1.8, ["#115E60"], 0)));
        Δⵠ[694][1].push(Da(Hu(2, ["#115E60"], 1)));
        Δⵠ[694][1].push(Da(Hu(1.8, ["#115E60"], 2)));
        Δⵠ[695] = [];
        Δⵠ[695][0] = [];
        Δⵠ[695][1] = [];
        Δⵠ[695][0].push(Da(Hu(1.9, ["#2A8B9B"], 0)));
        Δⵠ[695][0].push(Da(Hu(2.1, ["#2A8B9B"], 1)));
        Δⵠ[695][0].push(Da(Hu(1.9, ["#2A8B9B"], 2)));
        Δⵠ[695][1].push(Da(Hu(1.9, ["#0F464C"], 0)));
        Δⵠ[695][1].push(Da(Hu(2.1, ["#0F464C"], 1)));
        Δⵠ[695][1].push(Da(Hu(1.9, ["#0F464C"], 2)));
        Δⵠ[693] = [];
        Δⵠ[693][0] = [];
        Δⵠ[693][1] = [];
        Δⵠ[693][0].push(Da(Xd(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Δⵠ[693][0].push(Da(Xd(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Δⵠ[693][0].push(Da(Xd(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Δⵠ[693][1].push(Da(Xd(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Δⵠ[693][1].push(Da(Xd(1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Δⵠ[693][1].push(Da(Xd(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Δⵠ[637] = [];
        Δⵠ[637][0] = Da(Fm(0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        Δⵠ[637][1] = Da(Fm(0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        Δⵠ[687] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            Dt(d, b[0], b[0], a * 12);
            return c;
        }(0.8, ["#B6222A"]));
        Δⵠ[673] = [];
        Δⵠ[673][0] = Da(Lm(0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        Δⵠ[673][1] = Da(Lm(0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        Δⵠ[688] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            Dt(d, b[0], b[0], a * 10);
            return c;
        }(0.8, ["#B6222A"]));
        Δⵠ[902] = [];
        Δⵠ[902][0] = Da(yb(0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        Δⵠ[902][1] = Da(yb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        Δⵠ[903] = [];
        Δⵠ[903][0] = Da(yb(0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        Δⵠ[903][1] = Da(yb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        Δⵠ[Ur.ⵠⵠⵠᐃᐃⲆΔ] = [];
        Δⵠ[Ur.ⵠⵠⵠᐃᐃⲆΔ][0] = Da(yb(0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        Δⵠ[Ur.ⵠⵠⵠᐃᐃⲆΔ][1] = Da(yb(0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        Δⵠ[904] = Da(Cb(0.4, ["#B6222A"]));
        Δⵠ[905] = Da(Cb(0.4, ["#B6222A"]));
        Δⵠ[Ur.ᐃⵠΔΔᐃᐃᐃⵠΔ] = Da(Cb(0.4, ["#B6222A"]));
        Δⵠ[230] = Da(bu(0.35, j, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        Δⵠ[229] = Da(kd(0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        Δⵠ[886] = [];
        Δⵠ[886][0] = Da(Cd(0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        Δⵠ[886][1] = Da(Cd(0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        Δⵠ[887] = [];
        Δⵠ[887][0] = Da(Cd(0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        Δⵠ[887][1] = Da(Cd(0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        Δⵠ[894] = [];
        Δⵠ[894][0] = Da(xd(0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        Δⵠ[894][1] = Da(xd(0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        Δⵠ[895] = [];
        Δⵠ[895][0] = Da(Pd(0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        Δⵠ[895][1] = Da(Pd(0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        Δⵠ[896] = [];
        Δⵠ[896][0] = Da(xd(0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        Δⵠ[896][1] = Da(xd(0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        Δⵠ[897] = [];
        Δⵠ[897][0] = Da(Pd(0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        Δⵠ[897][1] = Da(Pd(0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        Δⵠ[888] = Da(pd(0.35, ["#B6222A"]));
        Δⵠ[889] = Da(xd(0.35, 0, [gj, "#B6222A"]));
        Δⵠ[890] = Da(Pd(0.35, 0, [Gn, "#B6222A"]));
        Δⵠ[891] = Da(pd(0.35, ["#22E066"]));
        Δⵠ[892] = Da(xd(0.35, 0, [Kr, "#22E066"]));
        Δⵠ[893] = Da(Pd(0.35, 0, [undefined, "#22E066"]));
        Δⵠ[48] = [];
        Δⵠ[48][0] = Da(Nd(0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        Δⵠ[48][1] = Da(Nd(0.3, cs, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        Δⵠ[47] = [];
        Δⵠ[47][0] = Da(Kd(0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        Δⵠ[47][1] = Da(Kd(0.45, lq, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        Δⵠ[141] = [];
        Δⵠ[141][0] = Da(Vm(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        Δⵠ[141][1] = Da(Vm(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        Δⵠ[125] = [];
        Δⵠ[125][0] = Da(_m(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        Δⵠ[125][1] = Da(_m(1, cl, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        Δⵠ[221] = [];
        Δⵠ[221][0] = ⵠᐃ.ⲆⵠΔⵠⲆⲆᐃᐃⵠ;
        Δⵠ[221][1] = ⵠᐃ.ⵠΔⲆΔᐃⵠΔⲆΔ;
        Δⵠ[190] = [];
        Δⵠ[190][0] = Da(bb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Δⵠ[190][1] = Da(bb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Δⵠ[853] = [Δⵠ[190]];
        Δⵠ[853][1] = [];
        Δⵠ[853][2] = [];
        Δⵠ[853][1][0] = Da(gb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Δⵠ[853][1][1] = Da(gb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Δⵠ[853][2][0] = Da(vb(0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Δⵠ[853][2][1] = Da(vb(0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Δⵠ[49] = [];
        Δⵠ[49][0] = Da(Lt(3 - Math.PI / 2, Ym(0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        Δⵠ[49][1] = Da(Lt(3 - Math.PI / 2, Ym(0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        Δⵠ[728] = [];
        Δⵠ[728][0] = Da(Qb(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        Δⵠ[728][1] = Da(Qb(0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        Δⵠ[798] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Kt(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            Dt(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Kt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Dt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Kt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Dt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Kt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Dt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Kt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Dt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            Kt(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            Dt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            Kt(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            Dt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            Dt(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            Dt(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            Dt(d, ek, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            Dt(d, undefined, b[1], a * 12);
            return c;
        }(0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        Δⵠ[729] = Da(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            Kt(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            Kt(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            Kt(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            Kt(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            Kt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            Kt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            Kt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            Kt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            Dt(d, b[0], b[0], a * 12);
            return c;
        }(0.3, ["#BB0000"]));
        Δⵠ[658] = Nb(1, [{
            f: ec,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Δⵠ[150] = Nb(1.5, [{
            f: km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        Δⵠ[669] = hc(0.35, ["#072428", "#67A242", "#67A242"], 0);
        Δⵠ[670] = hc(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        Δⵠ[671] = hc(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        Δⵠ[672] = hc(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ΔᐃᐃΔᐃΔΔ) {
            Δⵠ[278] = Da(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                Kt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                Dt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Sd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        } else {
            Δⵠ[278] = Da(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                Kt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                Dt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Sd(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(1));
        }
        if (ΔᐃᐃΔᐃΔΔ) {
            Δⵠ[267] = Da(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                Kt(d, k, 0, f, a, h);
                Dt(d, null, "#69A148", l);
                d.translate(0, j);
                Kt(d, k, 0, f, a, h);
                Dt(d, null, "#AF352A", l);
                d.translate(0, j);
                Kt(d, k, 0, f, a, h);
                Dt(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            Δⵠ[267] = Da(function (c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                var f = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                d.width = f;
                d.height = j;
                e.translate(0, c * 15);
                Kt(e, m, h, i, a, l);
                Dt(e, null, "#69A148", g);
                var n = Δⵠ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Kt(e, m, h, i, a, l);
                Dt(e, null, "#AF352A", g);
                n = Δⵠ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                Kt(e, m, h, i, a, l);
                Dt(e, null, "#669BB1", g);
                n = Δⵠ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                Kt(e, m, h, i, a, l);
                Dt(e, null, "#074A87", g);
                n = Δⵠ[672];
                e.drawImage(n, 17, -8);
                return d;
            }(1));
        }
        if (ΔᐃᐃΔᐃΔΔ) {
            Δⵠ[608] = Da(cc(0.75));
        } else {
            Δⵠ[608] = Da(cc(1));
        }
        Δⵠ[792] = Da(lm(0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        Δⵠ[537] = Da(Lt(5.8, ud(0.15, gl, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        Δⵠ[283] = [];
        Δⵠ[465] = [];
        for (a = 0; a < 18; a++) {
            Δⵠ[465][a] = Sd(1, "" + (a + 1), 12, "#FFF");
        }
        Δⵠ[708] = [];
        Δⵠ[708].push(Da(ac(0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        Δⵠ[708].push(Da(ac(0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        Δⵠ[708].push(Da(ac(0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        Δⵠ[725] = [];
        Δⵠ[725].push(Da(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Ft(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Dt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Ft(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Dt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Dt(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Dt(c, "#3A2A0D");
            Ft(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Dt(c, Kr, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Dt(c, Ch, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Dt(c, ts, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Dt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Dt(c, ek, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Dt(c, ma, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Dt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Dt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Dt(c, _q, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Dt(c, Ch, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Dt(c, undefined, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Dt(c, ek, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Dt(c, ma, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Dt(c, Ch, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Dt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Dt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Dt(c, "#ECBE35", "#EDCE4F", a * 8);
            Ft(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Dt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        Δⵠ[725].push(Da(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            Ft(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Dt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            Ft(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            Dt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            Dt(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            Dt(c, "#071A1B");
            Ft(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            Dt(c, Yk, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            Dt(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Dt(c, Ch, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Dt(c, ii, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Dt(c, undefined, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            Dt(c, Ch, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            Dt(c, mh, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            Dt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            Dt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            Dt(c, "#E1DDD5", "#EAE7E4", a * 8);
            Ft(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            Dt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(0.22)));
        Δⵠ[726] = Da(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            Ft(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            Dt(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            Dt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            Kt(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            Dt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            Kt(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            Dt(c, "#C09D6F");
            Ft(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            Dt(c, "#C09D6F");
            return b;
        }(0.22));
        Δⵠ[727] = [];
        Δⵠ[727].push(Da(pb(1.5, ["#795026", "#654320", "#eda80d"], 0)));
        Δⵠ[727].push(Da(pb(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        Δⵠ[727].push(Da(pb(1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        Δⵠ[546] = ⵠᐃ.ᐃᐃⲆⲆⵠⵠᐃ;
        Δⵠ[547] = ⵠᐃ.ⲆᐃⲆΔⲆⵠΔ;
        Δⵠ[548] = ⵠᐃ.ⲆⵠᐃᐃᐃⲆⵠ;
        Δⵠ[549] = ⵠᐃ.ⵠΔⵠⲆᐃᐃᐃ;
        Δⵠ[517] = Sd(1, "Show spectators", 25, "#FFF", ts, Yk, "#000", 5, 220);
        Δⵠ[525] = Sd(1, "Reconnecting...", 30, "#FFF");
        console.log(undefined, fn);
    }
    function yc(b, c, d, e, f, g) {
        Bj($v, b, c, d, e, f, g);
        const a = function (b, c, d, e, f) {
            Ti($v, b, c, d, e, f);
            const g = Qw(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
            bt(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
            return ~(g & 25671) & 25671 | ~(g & 25671) & g;
        }(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
        lc(Zv[5], Zv[0], Zv[1], Zv[2]);
        return a ^ 14940;
    }
    function wc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Dt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Dt(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Dt(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        Dt(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        Dt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        Dt(e, Xh, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        Dt(e, _l, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        Dt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        Dt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        Dt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        Dt(e, undefined, c[2], a * 11);
        return d;
    }
    function Pc() {
        if (!Tw.ⵠⵠΔⲆ.open && !Tw.ᐃΔⵠⲆⵠ.open) {
            Tw.ⲆⲆᐃΔ.open = m;
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 100;
            if (b) {
                for (var d = 0; d < tw.length; d++) {
                    for (var e = tw[d][0], f = tw[d][1], j = 0; cf.Δⵠⵠ[e].length > j; j++) {
                        var k = cf.Δⵠⵠ[e][j];
                        var p = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(k, b);
                        if (c > p) {
                            c = p;
                            Tw.ⲆⲆᐃΔ.ΔⲆᐃᐃᐃⲆΔ = f;
                            Tw.ⲆⲆᐃΔ.type = e;
                            Tw.ⲆⲆᐃΔ.open = Ll;
                            Tw.ⲆⲆᐃΔ.ⵠΔΔᐃⵠΔΔ = k.info & 255;
                            Tw.ⲆⲆᐃΔ.ᐃᐃᐃᐃΔᐃᐃ = (k.info & 65280) >> 8;
                            Tw.ⲆⲆᐃΔ.ⵠᐃⲆⵠ = k.ⵠᐃⲆⵠ;
                            Tw.ⲆⲆᐃΔ.ⲆⵠⵠⲆⵠ = k.id;
                        }
                    }
                }
                if (c < 100) {
                    var q = Δⵠ[656];
                    var h = (l = Vw.ⲆΔᐃⲆΔΔⵠ).info.translate.x - 33;
                    _c(Wn, q, h, 0);
                    if (Tw.ⲆⲆᐃΔ.ⵠΔΔᐃⵠΔΔ > 0) {
                        l.Δᐃᐃⵠ(Wn);
                        if ((v = Tw.ⲆⲆᐃΔ.ⵠΔΔᐃⵠΔΔ) > 1) {
                            Bc(v, l);
                        }
                    }
                    switch (Tw.ⲆⲆᐃΔ.ΔⲆᐃᐃᐃⲆΔ) {
                        case 108:
                            var l = Vw.ΔΔΔΔⵠᐃΔ;
                            break;
                        case 111:
                            l = Vw.ᐃΔⵠᐃΔⲆᐃ;
                            break;
                        case 112:
                            l = Vw.ⲆΔⵠᐃⲆΔΔ;
                            break;
                        case 121:
                            l = Vw.ᐃΔΔᐃⵠᐃⲆ;
                            break;
                        case 202:
                            l = Vw.ⵠⲆᐃᐃⲆᐃΔ;
                    }
                    if (Tw.ⲆⲆᐃΔ.ᐃᐃᐃᐃΔᐃᐃ > 0) {
                        l.Δᐃᐃⵠ(Wn);
                        var v = Tw.ⲆⲆᐃΔ.ᐃᐃᐃᐃΔᐃᐃ;
                        if (v > 1) {
                            Bc(v, l);
                        }
                    }
                }
            }
        }
    }
    function Ac() {
        Tw.ⵠⵠΔⲆ.id = -1;
        Tw.ⵠⵠΔⲆ.lock = yl;
        Tw.ⵠⵠΔⲆ.locked = mn;
        Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ = false;
        Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ = Ga;
        Tw.ⵠⵠΔⲆ.open = false;
        var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
        var c = 100;
        if (b) {
            for (var d = 0; d < cf.Δⵠⵠ[11].length; d++) {
                var e = cf.Δⵠⵠ[11][d];
                var f = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b);
                if (c > f) {
                    c = f;
                    Tw.ⵠⵠΔⲆ.open = cs;
                    Tw.ⵠⵠΔⲆ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Tw.ⵠⵠΔⲆ.ΔⲆᐃᐃ = e.info;
                    Tw.ⵠⵠΔⲆ.ⵠᐃⲆⵠ = e.ⵠᐃⲆⵠ;
                    Tw.ⵠⵠΔⲆ.ⲆⵠⵠⲆⵠ = e.id;
                    Tw.ⵠⵠΔⲆ.locked = e.lock;
                    Tw.ⵠⵠΔⲆ.lock = !!e.lock && e.ⵠᐃⲆⵠ != Tw.id && !Tw.ⵠΔⲆⵠᐃⲆΔ(e.ⵠᐃⲆⵠ) && j;
                    Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ = Tw.id === e.ⵠᐃⲆⵠ && !Tw.ⵠⵠΔⲆ.locked && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(148) != -1;
                    if (Tw.ⵠⵠΔⲆ.locked && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(158) != -1) {
                        Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ = Ll;
                    }
                }
            }
            if (c < 100) {
                var g = Δⵠ[339];
                var a = Vw.ⲆⵠⲆ[0];
                var k = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - g.width) / 2);
                var m = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - g.height) / 2) + 3;
                _c(Wn, g, k, m);
                if ((!Tw.ⵠⵠΔⲆ.lock || Tw.ⵠⵠΔⲆ.ⵠᐃⲆⵠ === Tw.id) && Tw.ⵠⵠΔⲆ.id >= 0) {
                    (a = Vw.ⲆⵠⲆ[Tw.ⵠⵠΔⲆ.id]).Δᐃᐃⵠ(Wn);
                    var h = Tw.ⵠⵠΔⲆ.ΔⲆᐃᐃ;
                    if (h > 1) {
                        Bc(h, a);
                    }
                }
                if (Tw.ⵠⵠΔⲆ.lock) {
                    Vw.ΔⲆᐃⲆⵠⲆⵠ.Δᐃᐃⵠ(Wn);
                } else if (Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ) {
                    Vw.ⵠⵠᐃⲆⲆⲆΔ.Δᐃᐃⵠ(Wn);
                }
                if (Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ) {
                    Vw.ᐃⵠᐃΔΔᐃⲆ.Δᐃᐃⵠ(Wn);
                }
            }
        }
    }
    function kc() {
        Tw.ⵠⲆⵠⲆᐃ.open = Vh;
        var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
        var b = 100;
        if (a) {
            for (var c = 0; c < cf.Δⵠⵠ[22].length; c++) {
                var d = cf.Δⵠⵠ[22][c];
                var e = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(d, a);
                if (e < b) {
                    b = e;
                    Tw.ⵠⲆⵠⲆᐃ.open = true;
                    Tw.ⵠⲆⵠⲆᐃ.ⵠᐃⲆⵠ = d.ⵠᐃⲆⵠ;
                    Tw.ⵠⲆⵠⲆᐃ.ⲆⵠⵠⲆⵠ = d.id;
                }
            }
            if (b < 100) {
                Vw.ⵠⲆⵠⲆᐃ.Δᐃᐃⵠ(Wn);
            }
        }
    }
    function xc() {
        if (!Tw.ⵠⵠΔⲆ.open && !Tw.ᐃΔⵠⲆⵠ.open) {
            Tw.ⵠⲆᐃᐃ.open = false;
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.Δⵠⵠ[32].length > d; d++) {
                    var e = cf.Δⵠⵠ[32][d];
                    var f = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        Tw.ⵠⲆᐃᐃ.open = true;
                        Tw.ⵠⲆᐃᐃ.ᐃᐃⲆⲆⲆⵠⵠ = e.info & 255;
                        Tw.ⵠⲆᐃᐃ.ⵠⵠᐃⵠᐃⵠᐃ = (e.info & 65280) >> 8;
                        Tw.ⵠⲆᐃᐃ.ⵠᐃⲆⵠ = e.ⵠᐃⲆⵠ;
                        Tw.ⵠⲆᐃᐃ.ⲆⵠⵠⲆⵠ = e.id;
                    }
                }
                if (c < 100) {
                    var g = Δⵠ[655];
                    var a = (k = Vw.ΔⵠⵠⵠΔᐃⵠ).info.translate.x - 33;
                    _c(Wn, g, a, 0);
                    if (Tw.ⵠⲆᐃᐃ.ᐃᐃⲆⲆⲆⵠⵠ > 0) {
                        k.Δᐃᐃⵠ(Wn);
                        if ((j = Tw.ⵠⲆᐃᐃ.ᐃᐃⲆⲆⲆⵠⵠ) > 1) {
                            Bc(j, k);
                        }
                    }
                    var j;
                    var k = Vw.ⲆᐃΔΔΔᐃⵠ;
                    if (Tw.ⵠⲆᐃᐃ.ⵠⵠᐃⵠᐃⵠᐃ > 0) {
                        k.Δᐃᐃⵠ(Wn);
                        if ((j = Tw.ⵠⲆᐃᐃ.ⵠⵠᐃⵠᐃⵠᐃ) > 1) {
                            Bc(j, k);
                        }
                    }
                }
            }
        }
    }
    function Jc() {
        if (!Tw.ⵠⵠΔⲆ.open && !Tw.ᐃΔⵠⲆⵠ.open && !Tw.ⵠⲆᐃᐃ.open && !Tw.ᐃᐃᐃⵠ.open && !Tw.ⲆⲆᐃΔ.open) {
            Tw.sign.open = false;
            var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var b = 100;
            if (a) {
                for (var c = 0; c < cf.Δⵠⵠ[36].length; c++) {
                    var d = cf.Δⵠⵠ[36][c];
                    var e = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(d, a);
                    if (b > e && d.info === 0 && d.ⵠᐃⲆⵠ === Tw.id) {
                        Tw.sign.open = cl;
                        b = e;
                        Tw.sign.ⲆⵠⵠⲆⵠ = d.id;
                    }
                }
                if (b < 100) {
                    Vw.sign.button.Δᐃᐃⵠ(Wn);
                }
            }
        }
    }
    function Mc() {
        var a = Vw.ⲆΔⲆᐃᐃ;
        var b = a.id;
        if (a.Ⲇᐃᐃᐃᐃ === 1 && a.display === 1) {
            if (gj === ΔΔⵠᐃⲆ[b]) {
                ΔΔⵠᐃⲆ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = et[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    ht = 2;
                    for (; ht < e.length; ht++) {
                        f = Math.max(f, d.measureText(e[ht]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    Kt(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        ht = 2;
                        for (; e.length > ht; ht++) {
                            d.fillText(e[ht], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ᐃⵠΔᐃ === 1) {
                _c(Wn, ΔΔⵠᐃⲆ[b], a.x, a.y);
            } else if (a.x - 80 + ΔΔⵠᐃⲆ[b].width > On) {
                _c(Wn, ΔΔⵠᐃⲆ[b], On - ΔΔⵠᐃⲆ[b].width - 10, a.y - ΔΔⵠᐃⲆ[b].height - 10);
            } else {
                _c(Wn, ΔΔⵠᐃⲆ[b], a.x - 80, a.y - ΔΔⵠᐃⲆ[b].height - 10);
            }
        }
    }
    function Bc(a, b) {
        if (!Δⵠ[283][a]) {
            Δⵠ[283][a] = Sd(io, "x" + a, 17, "#FFF");
        }
        var c = Δⵠ[283][a];
        var d = b.info.translate.x + b.info.ᐃΔ[0].width - c.width - io * 14;
        var e = b.info.translate.y + b.info.ᐃΔ[0].height - c.height - io * 19;
        if (b.info.state == Sv) {
            e += io * 5;
        }
        _c(Wn, c, d, e);
    }
    function Ec() {
        Tw.ⲆᐃᐃᐃΔ.id = -1;
        Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ = -1;
        if (!Tw.ᐃᐃᐃΔᐃΔⲆ && !Tw.ⲆᐃᐃᐃΔ.wait && !Tw.ᐃΔᐃᐃⲆ) {
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.Δⵠⵠ[29].length > d; d++) {
                    var e = cf.Δⵠⵠ[29][d];
                    var f = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        Tw.ⲆᐃᐃᐃΔ.id = e.id;
                        Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ = e.ⵠᐃⲆⵠ;
                        Tw.ⲆᐃᐃᐃΔ.info = e.info;
                        Tw.ⲆᐃᐃᐃΔ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = Vw.ⲆⵠⵠⲆΔ;
            Vw.ⲆⵠⵠⲆΔ = -1;
            if (Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ == -1 || Tw.ᐃⵠΔΔⵠ.length != 0 && Tw.id != Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ) {
                if (Tw.ᐃⵠΔΔⵠ.length != 0 && Tw.ᐃⵠΔΔⵠ[0] != Tw.id) {
                    Vw.ⲆⵠⵠⲆΔ = 2;
                } else if (Tw.ᐃⵠΔΔⵠ.length != 0 && Tw.id == Tw.ᐃⵠΔΔⵠ[0]) {
                    Vw.ⲆⵠⵠⲆΔ = 1;
                } else if (Tw.ᐃⵠΔΔⵠ.length != 0) {
                    Vw.ⲆⵠⵠⲆΔ = 3;
                }
            } else if (Tw.ᐃⵠΔΔⵠ.length == 0 && Tw.ⲆᐃᐃᐃΔ.info >= 8) {
                Vw.ⲆⵠⵠⲆΔ = 4;
            } else if (Tw.ᐃⵠΔΔⵠ.length == 0) {
                Vw.ⲆⵠⵠⲆΔ = 3;
            } else {
                Vw.ⲆⵠⵠⲆΔ = 0;
            }
            if (Vw.ⲆⵠⵠⲆΔ != -1) {
                Vw.ᐃⲆᐃᐃⵠ[Vw.ⲆⵠⵠⲆΔ].button.Δᐃᐃⵠ(Wn);
            }
            var a = document.getElementById("team_box").style;
            if (Vw.ⲆⵠⵠⲆΔ != -1 && g != Vw.ⲆⵠⵠⲆΔ && a.display == "inline-block") {
                Vw.ᐃⲆᐃᐃⵠ[Vw.ⲆⵠⵠⲆΔ].action();
            }
        }
    }
    function Dc() {
        if (Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length > 0) {
            var b = {
                x: Vw.ΔᐃᐃΔᐃ.translate.x,
                y: Vw.ΔᐃᐃΔᐃ.translate.y - io * 120
            };
        } else {
            b = {
                x: Vw.ΔᐃᐃΔᐃ.translate.x,
                y: Vw.ΔᐃᐃΔᐃ.translate.y - io * 50
            };
        }
        Wn.globalAlpha = 0.8;
        var c = Δⵠ[259][cf.time];
        _c(Wn, c, b.x, b.y);
        Wn.globalAlpha = 1;
        if (Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.x > -1) {
            Wn.fillStyle = "#660000";
            Ft(Wn, b.x + io * Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.x, b.y + io * Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.y, io * 5);
            Wn.fill();
        }
        var d = io;
        for (var f = Vw.ΔᐃᐃΔᐃ.ⲆⵠᐃΔ, g = 0; f.length > g; g++) {
            var h = f[g];
            cf.time;
            Wn.fillStyle = "#ff0000";
            Ft(Wn, b.x + io * (h.x / (cf.ⵠⵠⲆⵠΔ * 100) * 193), b.y + h.y / (cf.ⵠⵠⲆΔΔ * 100) * 193 * io, io * 2);
            Wn.fill();
        }
        var i = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
        if (i) {
            Wn.fillStyle = cf.time ? "#fff" : "#e39716";
            Ft(Wn, b.x + i.x / (cf.ⵠⵠⲆⵠΔ * 100) * 193 * io, b.y + io * (i.y / (cf.ⵠⵠⲆΔΔ * 100) * 193), io * 4);
            Wn.fill();
        }
        io = d;
    }
    function Ic() {
        if (!Tw.ⵠⵠΔⲆ.open && !Tw.ᐃΔⵠⲆⵠ.open && !Tw.ⵠⲆᐃᐃ.open && !Tw.ⲆⲆᐃΔ.open) {
            Tw.ᐃᐃᐃⵠ.open = false;
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 100;
            if (b) {
                for (var d = 0; cf.Δⵠⵠ[34].length > d; d++) {
                    var e = cf.Δⵠⵠ[34][d];
                    var f = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        Tw.ᐃᐃᐃⵠ.open = true;
                        Tw.ᐃᐃᐃⵠ.ⵠΔΔᐃⵠΔΔ = e.info & 31;
                        Tw.ᐃᐃᐃⵠ.ⵠⵠᐃⵠᐃⵠᐃ = (e.info & 992) >> 5;
                        Tw.ᐃᐃᐃⵠ.ⲆᐃⲆΔⲆΔⵠ = (e.info & 31744) >> 10;
                        Tw.ᐃᐃᐃⵠ.ⵠᐃⲆⵠ = e.ⵠᐃⲆⵠ;
                        Tw.ᐃᐃᐃⵠ.ⲆⵠⵠⲆⵠ = e.id;
                    }
                }
                if (c < 100) {
                    var g = Δⵠ[722];
                    var a = (j = Vw.ᐃⵠᐃΔᐃᐃⵠ).info.translate.x - 32;
                    _c(Wn, g, a, 0);
                    if (Tw.ᐃᐃᐃⵠ.ⵠΔΔᐃⵠΔΔ > 0) {
                        j.Δᐃᐃⵠ(Wn);
                        if ((k = Tw.ᐃᐃᐃⵠ.ⵠΔΔᐃⵠΔΔ) > 1) {
                            Bc(k, j);
                        }
                    }
                    var j = Vw.ⲆⵠⵠⵠⲆΔᐃ;
                    if (Tw.ᐃᐃᐃⵠ.ⲆᐃⲆΔⲆΔⵠ > 0) {
                        j.Δᐃᐃⵠ(Wn);
                        if ((k = Tw.ᐃᐃᐃⵠ.ⲆᐃⲆΔⲆΔⵠ) > 1) {
                            Bc(k, j);
                        }
                    }
                    var k;
                    j = Vw.ⲆᐃⲆⵠⵠⲆᐃ;
                    if (Tw.ᐃᐃᐃⵠ.ⵠⵠᐃⵠᐃⵠᐃ > 0) {
                        j.Δᐃᐃⵠ(Wn);
                        if ((k = Tw.ᐃᐃᐃⵠ.ⵠⵠᐃⵠᐃⵠᐃ) > 1) {
                            Bc(k, j);
                        }
                    }
                }
            }
        }
    }
    function Sc() {
        if (Tw.reconnect.enabled) {
            Wn.globalAlpha = 0.9;
            Wn.fillStyle = "#000";
            Kt(Wn, gq - 150, hq - 90, 300, 180, 15);
            Wn.fill();
            Wn.globalAlpha = 1;
            var a = Δⵠ[301];
            Wn.save();
            Tw.reconnect.rotate = (Tw.reconnect.rotate + Xw * 2) % (Math.PI * 2);
            Wn.translate(On / 2, Hn / 2 - 25);
            Wn.rotate(Tw.reconnect.rotate);
            _c(Wn, a, -a.width / 2, -a.height / 2);
            Wn.restore();
            a = Δⵠ[525];
            _c(Wn, a, (On - a.width) / 2, (Hn - a.height) / 2 + 25);
        }
    }
    function Qc(b, c, d) {
        var e = Δⵠ[465][b];
        var f = c.info.translate.x + io * 5;
        var g = c.info.translate.y + io * 5;
        if (Sv == c.info.state || d) {
            g += io * 5;
        }
        _c(Wn, e, f, g);
    }
    function _c(b, c, d, e, f, g, a, i, j, h) {
        if (wj === c.ᐃⵠΔⲆᐃⵠⲆ || c.ᐃⵠΔⲆᐃⵠⲆ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== undefined) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Fc() {
        if (!Tw.ⵠⵠΔⲆ.open) {
            Tw.ᐃΔⵠⲆⵠ.ΔⲆᐃᐃ = 0;
            Tw.ᐃΔⵠⲆⵠ.open = Ga;
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 100;
            if (b) {
                for (var d = 0; d < cf.Δⵠⵠ[18].length; d++) {
                    var e = cf.Δⵠⵠ[18][d];
                    var f = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b);
                    if (f < c) {
                        c = f;
                        Tw.ᐃΔⵠⲆⵠ.open = true;
                        Tw.ᐃΔⵠⲆⵠ.ΔⲆᐃᐃ = e.info;
                        Tw.ᐃΔⵠⲆⵠ.ⵠᐃⲆⵠ = e.ⵠᐃⲆⵠ;
                        Tw.ᐃΔⵠⲆⵠ.ⲆⵠⵠⲆⵠ = e.id;
                    }
                }
                if (c < 100) {
                    var g = Δⵠ[411];
                    var a = Vw.ᐃᐃΔⵠⵠⲆⲆ;
                    var j = Math.floor(a.info.translate.x + (a.info.ᐃΔ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ᐃΔ[0].height - g.height) / 2) + 3;
                    _c(Wn, g, j, k);
                    if (Tw.ᐃΔⵠⲆⵠ.ΔⲆᐃᐃ > 0) {
                        a.Δᐃᐃⵠ(Wn);
                        var h = Tw.ᐃΔⵠⲆⵠ.ΔⲆᐃᐃ;
                        if (h > 1) {
                            Bc(h, a);
                        }
                    }
                }
            }
        }
    }
    function Rc() {
        if (Tw.ᐃⵠⵠΔⲆᐃᐃ) {
            Wn.globalAlpha = 0.5;
            Wn.fillStyle = "#000";
            Wn.fillRect(0, 0, On, Hn);
            Wn.globalAlpha = 0.8;
            var b = Δⵠ[516][cf.time];
            var c = gq - b.width / 2;
            var d = hq - b.height / 2;
            _c(Wn, b, c, d);
            Wn.globalAlpha = 1;
            if (Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.x > -1) {
                Wn.fillStyle = "#660000";
                Ft(Wn, c + io * (Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.x * 3), d + io * (Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.y * 3), io * 14);
                Wn.fill();
            }
            for (var e = Vw.ΔᐃᐃΔᐃ.ⲆⵠᐃΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                cf.time;
                Wn.fillStyle = "#ff0000";
                Ft(Wn, c + g.x / (cf.ⵠⵠⲆⵠΔ * 100) * 600 * io, d + io * (g.y / (cf.ⵠⵠⲆΔΔ * 100) * 600), io * 6);
                Wn.fill();
            }
            var h = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            if (h) {
                Wn.fillStyle = cf.time ? "#fff" : "#e39716";
                Ft(Wn, c + io * (h.x / (cf.ⵠⵠⲆⵠΔ * 100) * 600), d + h.y / (cf.ⵠⵠⲆΔΔ * 100) * 600 * io, io * 12);
                Wn.fill();
            }
        }
    }
    ΔΔⵠᐃⲆ = [];
    ⲆᐃⵠᐃⵠⵠⲆ = [];
    var Gc = [];
    function jc() {
        for (var b = Tw.ⲆⲆⵠⵠ, c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ], d = 0; d < b.ΔⲆⲆᐃᐃ.length; d++) {
            var e = b.ΔⲆⲆᐃᐃ[d];
            var f = false;
            if ((c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ]) && (e.id == c.right || e.id == c.ΔΔⵠΔΔ && c.ΔΔⵠΔΔ > 0)) {
                f = true;
                _c(Wn, e.info.ᐃΔ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.Δᐃᐃⵠ(Wn);
            }
            var g = Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[e.id];
            if (g > 1) {
                Bc(g, e);
            }
            if (g > 0) {
                Qc(d, e, f);
            }
            var h = Tw.ⵠⵠΔⲆ;
            if (h.open && (h.id < 0 || h.id == e.id) && (!h.lock || Tw.id == h.ⵠᐃⲆⵠ)) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
            if (Tw.ᐃΔⵠⲆⵠ.open && e.id == 109) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
            if (Tw.ᐃⵠⲆᐃⵠ.open && e.id == 180) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
            if (Tw.ⵠⲆᐃᐃ.open && e.id == 134) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
            if (Tw.ⲆⲆᐃΔ.open && e.id == 109) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
            if (Tw.ᐃᐃᐃⵠ.open && (e.id == 109 || e.id == 131)) {
                Vw.ΔᐃᐃᐃΔ[e.id].Δᐃᐃⵠ(Wn);
            }
        }
        if (e && b.max > d) {
            var j = Δⵠ[334][2];
            Ⲇⵠ = e.info.translate.x;
            ⲆΔΔ = e.info.translate.y;
            ΔⵠⲆᐃ = 1;
            for (; b.max > d; d++, ΔⵠⲆᐃ++) {
                _c(Wn, j, Ⲇⵠ + ΔⵠⲆᐃ * (j.width + 5), ⲆΔΔ);
            }
        }
    }
    function Wc() {
        var a = Tw.ⲆⲆᐃⵠⲆ;
        if (a.wait) {
            var b = a.timeout.ⵠⵠΔ();
            Wn.save();
            var c = Δⵠ[794];
            Wn.translate(c.width - io * 12, Vw.ⲆΔᐃΔ.translate.y - io * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            _c(Wn, c, d, e);
            Wn.beginPath();
            Wn.lineWidth = io * 5;
            Wn.strokeStyle = Ur.ⵠᐃⲆⲆᐃᐃⲆ[cf.time];
            Wn.lineCap = "round";
            Wn.arc(9, e + c.height / 2, io * 25, 0, Math.PI * 2 * a.timeout.ⵠΔⲆ);
            Wn.stroke();
            Wn.restore();
            if (b) {
                a.wait = Tn;
                a.timeout.ⵠΔⲆ = 0;
                a.timeout.ⵠⲆΔ = false;
            }
        }
    }
    function Lc() {
        var a = Tw.ⵠΔΔᐃᐃ;
        if (a.wait) {
            var b = a.timeout.ⵠⵠΔ();
            Wn.save();
            var c = Δⵠ[792];
            Wn.translate(c.width - io * 2, Vw.ⲆΔᐃΔ.translate.y - io * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            _c(Wn, c, d, e);
            Wn.beginPath();
            Wn.lineWidth = io * 5;
            Wn.strokeStyle = Ur.ⵠᐃⲆⲆᐃᐃⲆ[cf.time];
            Wn.lineCap = "round";
            Wn.arc(9, e + c.height / 2, io * 25, 0, Math.PI * 2 * a.timeout.ⵠΔⲆ);
            Wn.stroke();
            Wn.restore();
            if (b) {
                a.wait = Qj;
                a.timeout.ⵠΔⲆ = 0;
                a.timeout.ⵠⲆΔ = ah;
            }
        }
    }
    function Oc() {
        var a = cf.ⲆᐃⵠΔΔ;
        var b = Δⵠ[725][cf.time];
        _c(Wn, b, a.translate.x, a.translate.y);
        Wn.save();
        Wn.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        cf.ⲆᐃⵠΔΔ.now = (new Date().getTime() - a.Ⲇᐃⵠⵠⵠ + a.ⵠᐃᐃⲆⲆ) % 480000;
        var c = Math.PI * 2 * cf.ⲆᐃⵠΔΔ.now / 480000 - Math.PI / 2;
        Wn.rotate(c);
        _c(Wn, Δⵠ[726], -b.width / 2, -b.height / 2);
        Wn.restore();
    }
    function Nc() {
        var b = Tw.ⲆᐃᐃᐃΔ;
        if (b.wait) {
            var c = b.timeout.ⵠⵠΔ();
            Wn.save();
            var d = Δⵠ[562];
            var e = Δⵠ[537].height + io * 25;
            Wn.translate(d.width, Vw.ⲆΔᐃΔ.translate.y - io * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            _c(Wn, d, f + 2, g);
            Wn.beginPath();
            Wn.lineWidth = io * 5;
            Wn.strokeStyle = Ur.ᐃΔⵠΔΔⲆⲆ[cf.time];
            Wn.lineCap = "round";
            Wn.arc(0, g + d.height / 2, io * 25, 0, b.timeout.ⵠΔⲆ * (Math.PI * 2));
            Wn.stroke();
            Wn.restore();
            if (c) {
                b.wait = false;
                b.timeout.ⵠΔⲆ = 0;
                b.timeout.ⵠⲆΔ = false;
            }
        }
    }
    function Hc() {
        var a = -8;
        if (Tw.ΔᐃⲆⵠΔ.enabled) {
            var b = Δⵠ[546];
            _c(Wn, b, Tw.ΔᐃⲆⵠΔ.translate.x, Tw.ΔᐃⲆⵠΔ.translate.y + a);
            a += 70;
        }
        if (Tw.ⵠⵠⵠᐃⵠᐃⲆ === 1) {
            b = Δⵠ[549];
            _c(Wn, b, Tw.ΔᐃⲆⵠΔ.translate.x, Tw.ΔᐃⲆⵠΔ.translate.y + a);
            a += 70;
        } else if (Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.x < 0.25 || Tw.ⲆΔᐃΔ.ΔᐃⲆΔⵠᐃⵠ.x < 0.25 || Tw.ⲆΔᐃΔ.ΔᐃⲆᐃⵠⵠⵠ.x < 0.25 || Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.x < 0.25 || Tw.ⲆΔᐃΔ.ⲆⵠᐃⵠΔΔⵠ.x < 0.25) {
            b = Δⵠ[548];
            _c(Wn, b, Tw.ΔᐃⲆⵠΔ.translate.x, Tw.ΔᐃⲆⵠΔ.translate.y + a);
            a += 70;
        }
        if (Tw.Ⲇⵠᐃᐃᐃ > 0) {
            b = Δⵠ[547];
            _c(Wn, b, Tw.ΔᐃⲆⵠΔ.translate.x, Tw.ΔᐃⲆⵠΔ.translate.y + a);
            var c = Gc[Tw.Ⲇⵠᐃᐃᐃ];
            if (ii === c) {
                c = Sd(io, Tw.Ⲇⵠᐃᐃᐃ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Gc[Tw.Ⲇⵠᐃᐃᐃ] = c;
            }
            if (Tw.Ⲇⵠᐃᐃᐃ < 9) {
                _c(Wn, c, Tw.ΔᐃⲆⵠΔ.translate.x - 39, Tw.ΔᐃⲆⵠΔ.translate.y + a + 20);
            } else {
                _c(Wn, c, Tw.ΔᐃⲆⵠΔ.translate.x - 46, Tw.ΔᐃⲆⵠΔ.translate.y + a + 20);
            }
        }
    }
    function qc() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var a = io * ((1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600);
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ᐃΔ = Δⵠ[167][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + b, -ⵠⵠⲆ / 2 + c, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.lock) {
            ᐃΔ = Δⵠ[148][cf.time];
            ⲆΔⵠ = -ᐃΔ.width;
            ⵠⵠⲆ = -ᐃΔ.height;
            _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + b - io * 1, -ⵠⵠⲆ / 2 + c, ⲆΔⵠ, ⵠⵠⲆ);
        }
        Wn.restore();
    }
    function Uc() {
        var a = Tw.ᐃⵠΔᐃ;
        if (a.ᐃᐃᐃᐃⲆ) {
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + b.x, Tw.ⲆⲆⵠ.y + b.y);
            var c = Δⵠ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - io * 125;
            _c(Wn, c, d, e);
            Wn.beginPath();
            Wn.lineWidth = io * 5;
            Wn.strokeStyle = Ur.ⵠΔⵠⲆΔΔᐃ[cf.time];
            Wn.lineCap = "round";
            Wn.arc(0, e + c.height / 2, io * 25, 0, Math.PI * 2 * a.timeout.ⵠΔⲆ);
            Wn.stroke();
            Wn.restore();
        }
    }
    function Yc() {
        var a = Tw.Δⵠⵠᐃⵠ;
        if (a.wait) {
            var b = a.timeout.ⵠⵠΔ();
            Wn.save();
            var c = Δⵠ[537];
            Wn.translate(c.width - io * 2, Vw.ⲆΔᐃΔ.translate.y - io * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            _c(Wn, c, d, e);
            Wn.beginPath();
            Wn.lineWidth = io * 5;
            Wn.strokeStyle = Ur.ᐃΔⵠΔΔⲆⲆ[cf.time];
            Wn.lineCap = "round";
            Wn.arc(0, e + c.height / 2, io * 25, 0, Math.PI * 2 * a.timeout.ⵠΔⲆ);
            Wn.stroke();
            Wn.restore();
            if (b) {
                a.wait = false;
                a.timeout.ⵠΔⲆ = 0;
                a.timeout.ⵠⲆΔ = false;
            }
        }
    }
    function Kc() {
        var b = Tw.ⲆⲆᐃΔⵠ;
        var c = Vw.ⵠⲆⵠⵠⲆ;
        if (b.ⵠⵠΔ) {
            b.ⵠⵠΔ = false;
            var d = b.ⵠⵠⵠΔⲆ;
            var e = c.ΔΔ.width;
            var f = c.ΔΔ.height;
            var g = c.Ⲇ;
            var a = cf.ⲆⵠᐃΔ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ᐃΔ, 0, 0);
            for (var j = 0; d.length > j; j++) {
                var k = a[d[j]];
                if ((cf.mode !== 1 || k.ᐃᐃⲆⵠᐃ !== "spectator") && (cf.mode !== 2 || k.ΔΔᐃΔ !== 0)) {
                    if (Tw.id == d[j]) {
                        i = Fh;
                        if (cf.mode === 3 && k.ΔΔᐃΔ === 0) {
                            ᐃⲆ = "#FF0000";
                        } else {
                            ᐃⲆ = "#FFF";
                        }
                    } else if (cf.mode === 3 && k.ΔΔᐃΔ === 0) {
                        ᐃⲆ = "#990000";
                    } else {
                        ᐃⲆ = "#A1BDCD";
                    }
                    g.drawImage(Sd(io, "" + (j + 1), io * 15, ᐃⲆ), io * 20, (40 + j * 22) * io);
                    if (!k.ⲆᐃᐃⵠΔⲆᐃ) {
                        k.ⲆᐃᐃⵠΔⲆᐃ = Sd(io, k.ᐃᐃⲆⵠᐃ, io * 15, ᐃⲆ, ek, Gn, _q, undefined, io * 110);
                    }
                    g.drawImage(k.ⲆᐃᐃⵠΔⲆᐃ, io * 39, (40 + j * 22) * io);
                    g.drawImage(Sd(io, ΔⲆⵠᐃ.ⲆⲆⵠΔⵠΔΔ(k.ⲆΔⲆⲆⵠ), io * 15, ᐃⲆ), io * 156, io * (40 + j * 22));
                }
            }
            if (!i) {
                if (cf.mode === 0 || cf.mode === 3 || cf.mode === 4 || cf.mode === 5 || cf.mode === 7 || cf.mode === 1 && !Tw.ᐃᐃᐃΔᐃΔⲆ || cf.mode === 2 && !Tw.ᐃΔᐃᐃⲆ) {
                    g.drawImage(Δⵠ[306], io * 15, (46 + j * 22) * io);
                    g.drawImage(Sd(io, ΔⲆⵠᐃ.ⲆⲆⵠΔⵠΔΔ(cf.ⲆⵠᐃΔ[Tw.id].ⲆΔⲆⲆⵠ), io * 15, "#FFF"), io * 100, io * (46 + j * 22));
                }
            }
        }
        _c(Wn, c.ΔΔ, c.translate.x, c.translate.y);
    }
    function Vc() {
        Wn.save();
        var a = io;
        if (Tw.ⲆΔᐃΔ.ⵠᐃⵠΔΔ.x < 0.25) {
            Wn.globalAlpha = Tw.ⲆΔᐃΔ.ᐃⵠΔΔΔᐃⵠ.ⵠΔⲆ;
        }
        var b = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length > 0 ? -70 : 0;
        if (Tw.ⵠⵠΔⲆ.open || Tw.ᐃΔⵠⲆⵠ.open && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(109) != -1 || Tw.ⵠⲆᐃᐃ.open && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(134) != -1 || Tw.ⲆⲆᐃΔ.open && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(109) != -1 || Tw.ᐃⵠⲆᐃⵠ.open && Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(180) != -1 || Tw.ᐃᐃᐃⵠ.open && (Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(109) != -1 || Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(131) != -1)) {
            b -= io * 50;
        }
        Wn.translate((On - io * 950) / 2, b);
        Wn.fillStyle = "#69A148";
        Wn.fillRect(this.translate.x + io * 37, this.translate.y + io * 17, Tw.ⲆΔᐃΔ.ⵠᐃⵠΔΔ.x * 178 * io, io * 18);
        Wn.globalAlpha = 1;
        if (Tw.ⲆΔᐃΔ.ΔᐃⲆΔⵠᐃⵠ.x < 0.35) {
            Wn.fillStyle = "#8F050A";
            Wn.globalAlpha = Tw.ⲆΔᐃΔ.ⵠⲆΔⲆᐃⵠⲆ.ⵠΔⲆ;
            Wn.fillRect(this.translate.x + io * 277, this.translate.y + io * 17, io * 178, io * 18);
            Wn.globalAlpha = 1;
        }
        Wn.fillStyle = "#AF352A";
        Wn.fillRect(this.translate.x + io * 277, this.translate.y + io * 17, io * (Tw.ⲆΔᐃΔ.ΔᐃⲆΔⵠᐃⵠ.x * 178), io * 18);
        if (Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.x < 0.35) {
            Wn.fillStyle = "#366B91";
            Wn.globalAlpha = Tw.ⲆΔᐃΔ.ⵠⵠᐃⲆᐃΔΔ.ⵠΔⲆ;
            Wn.fillRect(this.translate.x + io * 517, this.translate.y + io * 17, io * 178, io * 18);
            Wn.globalAlpha = 1;
        }
        Wn.fillStyle = "#669BB1";
        Wn.fillRect(this.translate.x + io * 517, this.translate.y + io * 17, io * (Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.x * 178), io * 18);
        if (Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.x > 0.99) {
            if (Tw.ⲆΔᐃΔ.ⲆⵠᐃⵠΔΔⵠ.x < 0.35) {
                Wn.fillStyle = "#6C4036";
                Wn.globalAlpha = Tw.ⲆΔᐃΔ.ΔⲆⲆⲆΔᐃΔ.ⵠΔⲆ;
                Wn.fillRect(this.translate.x + io * 517, this.translate.y + io * 17, io * 178, io * 18);
                Wn.globalAlpha = 1;
            }
            Wn.fillStyle = "#9C4036";
            Wn.fillRect(this.translate.x + io * 517, this.translate.y + io * 17, io * ((1 - Tw.ⲆΔᐃΔ.ⲆⵠᐃⵠΔΔⵠ.x) * 178), io * 18);
        }
        if (Tw.ⲆΔᐃΔ.ΔᐃⲆᐃⵠⵠⵠ.x < 0.35) {
            Wn.fillStyle = "#001A57";
            Wn.globalAlpha = Tw.ⲆΔᐃΔ.ᐃⲆⵠⲆⵠΔⲆ.ⵠΔⲆ;
            Wn.fillRect(this.translate.x + io * 757, this.translate.y + io * 17, io * 178, io * 18);
            Wn.globalAlpha = 1;
        }
        Wn.fillStyle = "#074A87";
        Wn.fillRect(this.translate.x + io * 757, this.translate.y + io * 17, io * (Tw.ⲆΔᐃΔ.ΔᐃⲆᐃⵠⵠⵠ.x * 178), io * 18);
        io = a;
        _c(Wn, this.ᐃΔ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        Wn.restore();
        if (Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.x < 0.99) {
            var c = Math.floor(gq - Δⵠ[608].width / 2);
            b += this.translate.y - Δⵠ[608].height - io * 5;
            Wn.fillStyle = "#BBE8EF";
            Wn.fillRect(c + 5, b + io * 5, Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.x * (io * 588), io * 10);
            if (Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.x < 0.35) {
                Wn.fillStyle = "#9BA8AF";
                Wn.globalAlpha = Tw.ⲆΔᐃΔ.ⵠΔⵠⲆⵠᐃⵠ.ⵠΔⲆ;
                Wn.fillRect(c + 5, b + 5, io * 588, io * 10);
                Wn.globalAlpha = 1;
            }
            _c(Wn, Δⵠ[608], c, b);
            this.y = b;
        }
    }
    function Xc() {
        var b = Tw.ᐃⵠΔᐃ;
        if (!b.ᐃᐃᐃᐃⲆ && b.ⵠΔⲆⲆ > 0) {
            var c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            if (!c) {
                return;
            }
            Wn.save();
            if (fs[b.ⵠΔⲆⲆ].ᐃᐃΔΔ === 0 && b.mode === 0) {
                Wn.translate(Tw.ⲆⲆⵠ.x + c.x, Tw.ⲆⲆⵠ.y + c.y);
                Wn.rotate(c.angle);
                Wn.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Tw.ⲆⲆⵠ.x + (d - d % 100 + 50);
                e = Tw.ⲆⲆⵠ.y + (e - e % 100 + 50);
                Wn.translate(d, e);
            }
            var f = Δⵠ[b.ⵠΔⲆⲆ][cf.time];
            Wn.globalAlpha = 0.5;
            _c(Wn, f, -f.width / 2, -f.height / 2);
            Wn.globalAlpha = 1;
            Wn.restore();
            if (fs[b.ⵠΔⲆⲆ].ᐃᐃΔΔ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = Sd(io, et[336], 20, "#e2c340");
                    } else {
                        b.label[1] = Sd(io, et[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                _c(Wn, f, gq + -f.width / 2, Vw.ⲆΔᐃΔ.y - 26);
            }
        }
        if (b.ᐃᐃᐃᐃⲆ) {
            var g = b.timeout.ⵠⵠΔ();
            for (var a = 0; b.ᐃⵠⵠⲆⲆ.length > a; a++) {
                var i = b.ᐃⵠⵠⲆⲆ[a];
                if (i.id == b.id) {
                    var j = io * 42;
                    var k = io * 17;
                    Kt(Wn, i.info.translate.x, i.info.translate.y + (1 - b.timeout.ⵠΔⲆ) * j, i.info.width, j * b.timeout.ⵠΔⲆ + k, io * 10);
                    Wn.fillStyle = "#55B973";
                    Wn.fill();
                    Wn.globalAlpha = 0.8;
                    i.Δᐃᐃⵠ(Wn);
                } else {
                    Wn.globalAlpha = 0.5;
                    i.Δᐃᐃⵠ(Wn);
                }
                Wn.globalAlpha = 1;
            }
            if (g) {
                b.ᐃᐃᐃᐃⲆ = ah;
                b.timeout.ⵠΔⲆ = 0;
                b.timeout.ⵠⲆΔ = false;
            }
            return Qg;
        }
        for (a = 0; a < b.ᐃⵠⵠⲆⲆ.length; a++) {
            b.ᐃⵠⵠⲆⲆ[a].Δᐃᐃⵠ(Wn);
        }
        return false;
    }
    function Zc(a) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = Δⵠ[a][cf.time];
        ⲆΔⵠ = -e.width;
        ⵠⵠⲆ = -e.height;
        _c(Wn, e, -ⲆΔⵠ / 2 + c, -ⵠⵠⲆ / 2 + d, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    const $c = 3;
    function ep() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[321][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function ip(a) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && m == this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = io * ((1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600);
            var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        ᐃΔ = Δⵠ[a][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + c, -ⵠⵠⲆ / 2 + d, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function tp(a) {
        if ((a = a / 100) <= 0.8) {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = Tn;
                }
                var b = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
                var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            Wn.globalAlpha = 0.5;
            Jt(Wn, c, d, io * 18, a);
            Dt(Wn, null, "#000000", io * 18);
            Wn.globalAlpha = 1;
            Jt(Wn, c, d, io * 18, a);
            Dt(Wn, null, Ur.ⵠⲆᐃⵠⵠΔⵠ[cf.time], io * 6);
            Wn.restore();
        }
    }
    function np(a) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == Qk) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.ΔⲆΔⵠᐃ.ⵠⵠΔ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ᐃΔ = Δⵠ[872][Math.floor(this.id + this.color) % 5][cf.time];
        ⲆΔⵠ = -ᐃΔ.width * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        ⵠⵠⲆ = this.ΔⲆΔⵠᐃ.ⵠΔⲆ * -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + c, -ⵠⵠⲆ / 2 + d, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function op() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[848][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function ap(a) {
        if ((a = a / 100) <= 0.95) {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == $a) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = Xi;
                }
                var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
                var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            Wn.globalAlpha = 0.5;
            Jt(Wn, c, d, io * 28, a);
            Dt(Wn, null, "#000000", io * 18);
            Wn.globalAlpha = 1;
            Jt(Wn, c, d, io * 28, a);
            Dt(Wn, null, Ur.ⵠΔⵠⲆΔΔᐃ[cf.time], io * 6);
            Wn.restore();
        }
    }
    function rp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[837][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function sp(b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = Ga;
            }
            var c = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var d = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * c;
            var e = c * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        var f = Δⵠ[853].length;
        ᐃΔ = Δⵠ[853][(this.ΔⵠⲆᐃ + this.ᐃᐃ % 2) % f][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        var g = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
        if (g && (this.ⵠᐃⲆⵠ === Tw.id || Tw.ⵠΔⲆⵠᐃⲆΔ(this.ⵠᐃⲆⵠ))) {
            if (ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - Xw, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + Xw, 1);
            }
        } else if (g && ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ]) < 150) {
            this.opacity = Math.max(this.opacity - Xw, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + Xw, 1);
        }
        var a = Wn.globalAlpha;
        Wn.globalAlpha *= this.opacity;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + d, -ⵠⵠⲆ / 2 + e, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.globalAlpha = a;
        Wn.restore();
    }
    function hp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[811][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function lp(b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && Mr == this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = yl;
            }
            var c = io * ((1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600);
            var d = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * c;
            var e = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !cf.transition) {
            var f = 0;
            for (var g = cf.Δⵠⵠ[0], a = 0; a < g.length; a++) {
                var h = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - Xw / 1.5) : Math.min(1, this.opacity + Xw / 1.5);
            Wn.globalAlpha = this.opacity;
        }
        ᐃΔ = Δⵠ[b][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2 + d, -ⵠⵠⲆ / 2 + e, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.globalAlpha = 1;
        Wn.restore();
    }
    function gp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[239][cf.time];
        ⲆΔⵠ = -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    var up = 0;
    function Qu() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; c < b; c++) {
                this.ΔⲆⲆᐃ[c].Δᐃᐃⵠ(207, this.x, this.y);
            }
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
                }
                var d = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
                var e = d * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
                var f = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * d;
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = Δⵠ[958][cf.time];
            } else {
                g = Δⵠ[957][cf.time];
            }
            _c(Wn, g, -g.width / 2 + e, -g.width / 2 + f);
            Wn.restore();
        }
    }
    function dp() {
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        a = this.info === 0 ? Δⵠ[248][cf.time] : Δⵠ[1222][cf.time];
        ⲆΔⵠ = -a.width * this.Δᐃⵠⵠ.ⵠΔⲆ;
        ⵠⵠⲆ = -a.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[1223];
            _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function vp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && Tn == this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = $a;
            }
            var b = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[953][cf.time];
            } else {
                f = Δⵠ[204][cf.time];
            }
            var g = -f.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            var a = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.height;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[954][cf.time];
            } else {
                f = Δⵠ[205][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function mp() {
        if ((this.info & 1) === 1) {
            this.ΔⲆⵠΔⵠ = Math.min(this.ΔⲆⵠΔⵠ + Xw, 2.2);
        } else {
            this.ΔⲆⵠΔⵠ = Math.max(this.ΔⲆⵠΔⵠ - Xw, 0);
            this.ᐃⲆⵠⲆΔⵠᐃ += Xw;
            if (this.ᐃⲆⵠⲆΔⵠᐃ > 0.1) {
                this.ᐃⲆⵠⲆΔⵠᐃ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⲆᐃΔⵠ.push(a);
            }
        }
        for (var b = 0; b < this.ⲆᐃΔⵠ.length; b++) {
            a = this.ⲆᐃΔⵠ[b];
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + a.x, Tw.ⲆⲆⵠ.y + a.y);
            a.a = Math.min(1, 0 + Xw / 2);
            var c = 0;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            Wn.globalAlpha = c * 0.8;
            Ft(Wn, 0, 0, a.r);
            Dt(Wn, Ur.ⵠⵠⵠᐃⵠΔΔ[cf.time]);
            Wn.restore();
            if (1 === 0) {
                this.ⲆᐃΔⵠ.splice(b, 1);
                b--;
            }
        }
    }
    function cp(a, b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        c = Δⵠ[a][cf.time];
        ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -c.width;
        ⵠⵠⲆ = -c.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == yl) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = Δⵠ[b];
            _c(Wn, c, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function pp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == $a) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = Vh;
            }
            var a = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[153][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 3) % (Math.PI * 2);
        }
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[1198][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function Cp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.ΔΔⲆᐃⲆᐃⲆ.ⵠⵠΔ();
        this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠⵠΔ();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        c = this.info === 0 ? Δⵠ[887][cf.time] : Δⵠ[886][cf.time];
        ⲆΔⵠ = -c.width * this.Δᐃⵠⵠ.ⵠΔⲆ;
        ⵠⵠⲆ = -c.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = Δⵠ[888];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃΔⵠᐃⵠ.ⵠⵠΔ() && this.ᐃΔⵠᐃⵠ.ⵠⲆΔ == bn) {
                this.action -= 4;
            }
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[891];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle + b);
        Wn.translate(55, 0);
        Wn.rotate(a);
        c = this.info === 0 ? Δⵠ[894][cf.time] : Δⵠ[896][cf.time];
        ⲆΔⵠ = -c.width * this.ΔΔⲆᐃⲆᐃⲆ.ⵠΔⲆ;
        ⵠⵠⲆ = -c.height * this.ΔΔⲆᐃⲆᐃⲆ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            c = Δⵠ[889];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[892];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle + a + b);
        Wn.translate(55, 0);
        Wn.rotate(a);
        c = this.info === 0 ? Δⵠ[895][cf.time] : Δⵠ[897][cf.time];
        ⲆΔⵠ = -c.width * this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠΔⲆ;
        ⵠⵠⲆ = this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠΔⲆ * -c.height;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            c = Δⵠ[890];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[893];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function Tp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == m) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var a = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[154][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 3) % (Math.PI * 2);
        }
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[1202][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function fp(a, b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ᐃΔ = Δⵠ[a][this.info][cf.time];
        ⲆΔⵠ = -ᐃΔ.width / 2;
        ⵠⵠⲆ = -ᐃΔ.height / 2;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && Wh == this.ⵠⲆⵠᐃ.ⵠⲆΔ) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = dv(this.info, ᐃΔ, ⲆΔⲆⵠⲆⵠΔΔⲆ);
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function zp(a, b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        c = Δⵠ[a][cf.time];
        ⲆΔⵠ = -c.width;
        ⵠⵠⲆ = -c.height;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == bn) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = Δⵠ[b];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function yp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            var a = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var b = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 0.5) % (Math.PI * 2);
        }
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.save();
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[641][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.save();
        Wn.rotate(this.ⲆⵠᐃⵠⲆⵠⵠᐃΔ);
        ᐃΔ = Δⵠ[642][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.restore();
    }
    function wp() {
        if (this.info >= 10) {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
                }
                var b = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
                var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            var e = Δⵠ[115][cf.time];
            var f = -e.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            var g = this.ⲆᐃΔⵠ.ⵠΔⲆ * -e.height;
            _c(Wn, e, -f / 2 + c, -g / 2 + d, f, g);
            Wn.restore();
        }
    }
    function Pp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && bn == this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var a = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[157][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 3) % (Math.PI * 2);
        }
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[1214][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function Ap() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = mn;
            }
            var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[668][cf.time];
            } else {
                f = Δⵠ[132][cf.time];
            }
            var g = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.width;
            var a = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.height;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ⲆΔⲆⵠⲆΔⲆ.ⵠⵠΔ();
            if (this.info & 16) {
                f = Δⵠ[638][cf.time];
            } else {
                f = Δⵠ[134][cf.time];
            }
            Wn.translate(0, f.height / 2);
            Wn.rotate(this.ⲆΔⲆⵠⲆΔⲆ.ⵠΔⲆ);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function kp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = So;
            }
            var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[970][cf.time];
            } else {
                f = Δⵠ[208][cf.time];
            }
            var g = -f.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            var a = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.height;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[971][cf.time];
            } else {
                f = Δⵠ[209][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function xp() {
        if (this.info >= 10) {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
                }
                var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
                var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            var e = Δⵠ[206][cf.time];
            var f = this.ⲆᐃΔⵠ.ⵠΔⲆ * -e.width;
            var g = -e.height * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            _c(Wn, e, -f / 2 + c, -g / 2 + d, f, g);
            Wn.restore();
        }
    }
    function Jp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = Ga;
            }
            var a = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ᐃΔ = Δⵠ[407][cf.time];
        } else {
            ᐃΔ = Δⵠ[119][cf.time];
        }
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
        Wn.restore();
    }
    function Mp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ΔⲆΔⵠᐃ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[289][cf.time];
        ⲆΔⵠ = -ᐃΔ.width * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        ⵠⵠⲆ = -ᐃΔ.height * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function Bp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ⲆⲆᐃⲆⲆ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[288][cf.time];
        ⲆΔⵠ = this.ⲆⲆᐃⲆⲆ.ⵠΔⲆ * -ᐃΔ.width;
        ⵠⵠⲆ = this.ⲆⲆᐃⲆⲆ.ⵠΔⲆ * -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        this.ΔⲆΔⵠᐃ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[289][cf.time];
        ⲆΔⵠ = this.ΔⲆΔⵠᐃ.ⵠΔⲆ * -ᐃΔ.width;
        ⵠⵠⲆ = this.ΔⲆΔⵠᐃ.ⵠΔⲆ * -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function Ep() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.ΔΔⲆᐃⲆᐃⲆ.ⵠⵠΔ();
        this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠⵠΔ();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        c = this.info === 0 ? Δⵠ[231][cf.time] : Δⵠ[1053][cf.time];
        ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -c.width;
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -c.height;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = Δⵠ[1056];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            if (this.ᐃΔⵠᐃⵠ.ⵠⵠΔ() && this.ᐃΔⵠᐃⵠ.ⵠⲆΔ == ah) {
                this.action -= 4;
            }
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[1065];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle + b);
        Wn.translate(100, 0);
        Wn.rotate(a);
        c = this.info === 0 ? Δⵠ[1060][cf.time] : Δⵠ[1059][cf.time];
        ⲆΔⵠ = -c.width * this.ΔΔⲆᐃⲆᐃⲆ.ⵠΔⲆ;
        ⵠⵠⲆ = -c.height * this.ΔΔⲆᐃⲆᐃⲆ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            c = Δⵠ[1057];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[1066];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle + a + b);
        Wn.translate(100, 0);
        Wn.rotate(a);
        c = this.info === 0 ? Δⵠ[1063][cf.time] : Δⵠ[1062][cf.time];
        ⲆΔⵠ = -c.width * this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠΔⲆ;
        ⵠⵠⲆ = -c.height * this.ⵠⲆᐃⵠⲆⵠᐃ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            c = Δⵠ[1058];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        if (this.action & 4) {
            Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
            c = Δⵠ[1067];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function Dp() {
        var a = Kr;
        var b = undefined;
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        if (this.ΔⲆⵠΔⵠ >= 0.1 && this.ΔⲆⵠΔⵠ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.ΔⲆⵠΔⵠ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = Δⵠ[1150][cf.time];
            ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width;
            ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.height;
            Wn.globalAlpha = c;
            _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            b = Δⵠ[1151];
        }
        if (this.ΔⲆⵠΔⵠ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.ΔⲆⵠΔⵠ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = Δⵠ[1152][cf.time];
            ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width;
            ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.height;
            Wn.globalAlpha = c;
            _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            b = Δⵠ[1153];
        }
        if (this.action & 2 && fn !== b) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == So) {
                this.action -= 2;
            }
            Wn.globalAlpha = c * (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ);
            ⲆΔⵠ = -b.width * this.Δᐃⵠⵠ.ⵠΔⲆ;
            ⵠⵠⲆ = -b.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
            _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        }
        Wn.globalAlpha = 1;
        Wn.restore();
    }
    function Ip() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == Wh) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = Qk;
            }
            var a = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var b = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[155][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 3) % (Math.PI * 2);
        }
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[1206][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function Sp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = $a;
            }
            var a = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ΔⵠⵠᐃⵠⲆⲆ = (this.ΔⵠⵠᐃⵠⲆⲆ + Xw * 3) % (Math.PI * 2);
        this.ⵠⲆᐃⲆᐃᐃΔ = (this.ⵠⲆᐃⲆᐃᐃΔ - Xw * 3) % (Math.PI * 2);
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.save();
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[152][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.save();
        Wn.rotate(this.ΔⵠⵠᐃⵠⲆⲆ);
        ᐃΔ = Δⵠ[1194][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.save();
        Wn.rotate(this.ⵠⲆᐃⲆᐃᐃΔ);
        ᐃΔ = Δⵠ[1193][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.restore();
    }
    function Qp(a, b, c) {
        if (a >= 0) {
            ᐃΔ = Δⵠ[a][cf.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (45 + b) * io, -ᐃΔ.height / 2 + (c + 22) * io);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (52 + b), -ᐃΔ.height / 4 + (c + 20) * io);
                    break;
                case 98:
                case 99:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (57 + b), -ᐃΔ.height / 4 + io * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (47 + b), -ᐃΔ.height / 4 + (c + 45) * io);
                    break;
                case 30:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (52 + b), -ᐃΔ.height / 4 + (c + 45) * io);
                    break;
                case 19:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * io, -ᐃΔ.height / 4 + (c + 44) * io);
                    break;
                case 9:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * io, -ᐃΔ.height / 2 + (c + 44) * io);
                    break;
                case 62:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (40 + b) * io, -ᐃΔ.height / 2 + (c + 65) * io);
                    break;
                case 12:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (37 + b), -ᐃΔ.height / 4 + (c + 85) * io);
                    break;
                case 34:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (37 + b), -ᐃΔ.height / 4 + io * (c + 85));
                    break;
                case 54:
                case 53:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (26 + b) * io, -ᐃΔ.height / 4 + (c + 77) * io);
                    break;
                case 17:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * io, -ᐃΔ.height / 4 + (c + 85) * io);
                    break;
                case 63:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * io, -ᐃΔ.height / 4 + (c + 44) * io);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * io, -ᐃΔ.height / 4 + (c + 30) * io);
                    break;
                case 56:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * io, -ᐃΔ.height / 4 + (c + 35) * io);
                    break;
                case 92:
                case 93:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * io, -ᐃΔ.height / 4 + (c + 40) * io);
                    break;
                case 89:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (47 + b) * io, -ᐃΔ.height / 4 + io * (c + 34));
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (37 + b) * io, -ᐃΔ.height / 4 + io * (c + 90));
                    break;
                case 18:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (40 + b) * io, -ᐃΔ.height / 4 + io * (c + 85));
                    break;
                case 16:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (39 + b) * io, -ᐃΔ.height / 2 + (c + 90) * io);
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - io * (46 + b), -ᐃΔ.height / 2 + io * (c + 35));
                    break;
                case 49:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - (47 + b) * io, -ᐃΔ.height / 2 + io * (c + 54));
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - io * (46 + b), -ᐃΔ.height / 2 + (c + 35) * io);
                    break;
                case 55:
                    Cv(a, ᐃΔ, -ᐃΔ.width / 2 - io * (47 + b), -ᐃΔ.height / 2 + (c + 20) * io);
            }
        }
    }
    function _p() {
        if (this.info !== 10) {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.angle);
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
                if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                    this.ⵠⲆⵠᐃ.ⵠⵠΔ = Qk;
                }
                var b = io * ((1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600);
                var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = Δⵠ[623][cf.time];
            } else {
                e = Δⵠ[287][cf.time];
            }
            _c(Wn, e, -e.width / 2 + c, -e.width / 2 + d);
            Wn.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ΔⲆⲆᐃ[g].Δᐃᐃⵠ(294);
            }
        }
    }
    function Fp(a, b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        c = Δⵠ[a][cf.time];
        ⲆΔⵠ = -c.width * this.Δᐃⵠⵠ.ⵠΔⲆ;
        ⵠⵠⲆ = -c.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var c = Δⵠ[b];
            _c(Wn, c, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function Rp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == m) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = po;
            }
            var a = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var b = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ᐃΔ = Δⵠ[183][cf.time];
        } else {
            ᐃΔ = Δⵠ[802][cf.time][this.info - 1];
        }
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2 + b, -ᐃΔ.height / 2 + c);
        Wn.restore();
    }
    function Gp(a, b, c) {
        if (a >= 0) {
            ᐃΔ = Δⵠ[a][cf.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - (0 + b) * io, -ᐃΔ.height / 4 + (c + 35) * io);
                    break;
                case 74:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (1 + b), -ᐃΔ.height / 4 + (c + 45) * io);
                    break;
                case 75:
                case 76:
                    Ev(a, ᐃΔ, -ᐃΔ.width / 4 - io * (1 + b), -ᐃΔ.height / 4 + (c + 40) * io);
            }
        }
    }
    function jp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && bn == this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = Zl;
            }
            var a = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[156][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + Xw * 3) % (Math.PI * 2);
        }
        Wn.rotate(this.rotate);
        ᐃΔ = Δⵠ[1210][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function Wp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = Δⵠ[716][cf.time];
            _c(Wn, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ⵠⵠΔ();
            var e = Δⵠ[720][cf.time];
            var f = this.up.ⵠΔⲆ * -e.width;
            var g = -e.height * this.up.ⵠΔⲆ;
            _c(Wn, e, -f / 2 + io * 1, -g / 2 + io * 3, f, g);
        } else {
            e = Δⵠ[144][cf.time];
            _c(Wn, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        Wn.restore();
    }
    function Lp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[812][cf.time];
            } else {
                f = Δⵠ[188][cf.time];
            }
            var g = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.width;
            var a = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.height;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[813][cf.time];
            } else {
                f = Δⵠ[189][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function Op() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        var a = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Xw / 2, 1.8) : Math.max(this.scale - Xw, 1);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        this.ᐃⵠᐃΔ = a < 350 ? Math.max(0, this.ᐃⵠᐃΔ - Xw * 2.2) : Math.min(1, this.ᐃⵠᐃΔ + Xw * 2.2);
        b = Δⵠ[1135][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.width);
        ⵠⵠⲆ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height);
        Wn.globalAlpha = 1 - this.ᐃⵠᐃΔ;
        _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        b = Δⵠ[1119][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.width);
        ⵠⵠⲆ = -b.height * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * (1 - this.ᐃⵠᐃΔ);
            var b = Δⵠ[1136];
            ⲆΔⵠ = -b.width * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
            ⵠⵠⲆ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height);
            _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * this.ᐃⵠᐃΔ;
            b = Δⵠ[1128];
            ⲆΔⵠ = this.scale * (-b.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
            ⵠⵠⲆ = -b.height * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
            _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        b = Δⵠ[1122][cf.time];
        ⲆΔⵠ = this.scale * (-b.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
        ⵠⵠⲆ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height);
        Wn.save();
        Wn.translate(io * -40, io * 80);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * this.ᐃⵠᐃΔ;
            b = Δⵠ[1129];
            _c(Wn, b, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        b = Δⵠ[1125][cf.time];
        Wn.save();
        Wn.translate(io * 40, io * 80);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = this.ᐃⵠᐃΔ * (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ);
            b = Δⵠ[1130];
            _c(Wn, b, -ⲆΔⵠ * io / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.globalAlpha = 1;
        Wn.restore();
        Wn.restore();
    }
    function Np(a, b, c) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + b, Tw.ⲆⲆⵠ.y + c);
        Wn.rotate(this.angle);
        Wn.translate(this.x - b, this.y - c);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[a][cf.time];
        ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function Hp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ΔⲆΔⵠᐃ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[526][cf.time];
        ⲆΔⵠ = this.ΔⲆΔⵠᐃ.ⵠΔⲆ * -ᐃΔ.width;
        ⵠⵠⲆ = -ᐃΔ.height * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function qp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xw / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xw, 1);
        }
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        a = this.info === 0 ? Δⵠ[232][cf.time] : Δⵠ[1068][cf.time];
        ⲆΔⵠ = -a.width * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        ⵠⵠⲆ = this.scale * (-a.height * this.Δᐃⵠⵠ.ⵠΔⲆ);
        _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == po) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[1077];
            _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        a = this.info === 0 ? Δⵠ[1072][cf.time] : Δⵠ[1071][cf.time];
        ⲆΔⵠ = this.scale * (-a.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.height * this.scale;
        Wn.save();
        Wn.translate(io * -40, io * 10);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[1078];
            _c(Wn, a, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        a = this.info === 0 ? Δⵠ[1075][cf.time] : Δⵠ[1074][cf.time];
        Wn.save();
        Wn.translate(io * 40, io * 10);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[1079];
            _c(Wn, a, -ⲆΔⵠ * io / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.restore();
    }
    function Up() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var c = Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
            var d = b * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[838][cf.time];
            } else {
                f = Δⵠ[191][cf.time];
            }
            var g = -f.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            var a = -f.height * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[839][cf.time];
            } else {
                f = Δⵠ[192][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function Yp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ⲆᐃΔⵠ.ⵠⵠΔ();
        Wn.globalAlpha = 0.3;
        var a = Δⵠ[282][cf.time];
        var b = -a.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
        var c = this.ⲆᐃΔⵠ.ⵠΔⲆ * -a.height;
        _c(Wn, a, -b / 2, -c / 2, b, c);
        Wn.globalAlpha = 1;
        Wn.restore();
    }
    function Kp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        var a = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + Xw / 2, 1.8) : Math.max(this.scale - Xw, 1);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        this.ᐃⵠᐃΔ = a < 350 ? Math.max(0, this.ᐃⵠᐃΔ - Xw * 2.2) : Math.min(1, this.ᐃⵠᐃΔ + Xw * 2.2);
        b = (this.info & 1) === 0 ? Δⵠ[1113][cf.time] : Δⵠ[1114][cf.time];
        ⲆΔⵠ = this.scale * (-b.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height * this.scale;
        Wn.globalAlpha = 1 - this.ᐃⵠᐃΔ;
        _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        b = this.info & 1 ? Δⵠ[1098][cf.time] : Δⵠ[235][cf.time];
        ⲆΔⵠ = this.scale * (-b.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
        ⵠⵠⲆ = -b.height * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * (1 - this.ᐃⵠᐃΔ);
            var b = Δⵠ[1115];
            ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.width);
            ⵠⵠⲆ = this.scale * (-b.height * this.Δᐃⵠⵠ.ⵠΔⲆ);
            _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * this.ᐃⵠᐃΔ;
            b = Δⵠ[1107];
            ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -b.width * this.scale;
            ⵠⵠⲆ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height);
            _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        b = this.info & 1 ? Δⵠ[1101][cf.time] : Δⵠ[1102][cf.time];
        ⲆΔⵠ = -b.width * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -b.height * this.scale;
        Wn.save();
        Wn.translate(io * -20, io * 0);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = this.ᐃⵠᐃΔ * (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ);
            b = Δⵠ[1108];
            _c(Wn, b, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        b = (this.info & 1) === 0 ? Δⵠ[1105][cf.time] : Δⵠ[1104][cf.time];
        Wn.save();
        Wn.translate(io * 20, io * 0);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        Wn.globalAlpha = this.ᐃⵠᐃΔ;
        _c(Wn, b, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = (0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ) * this.ᐃⵠᐃΔ;
            b = Δⵠ[1109];
            _c(Wn, b, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.globalAlpha = 1;
        Wn.restore();
        Wn.restore();
    }
    function Vp(a) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[a][cf.time];
        ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -ᐃΔ.width;
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -ᐃΔ.height;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function Xp() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == Mr) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = ah;
            }
            var a = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ΔⵠⵠᐃⵠⲆⲆ = (this.ΔⵠⵠᐃⵠⲆⲆ + Xw * 3) % (Math.PI * 2);
        this.ⵠⲆᐃⲆᐃᐃΔ = (this.ⵠⲆᐃⲆᐃᐃΔ - Xw * 3) % (Math.PI * 2);
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.save();
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[151][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.save();
        Wn.rotate(this.ΔⵠⵠᐃⵠⲆⲆ);
        ᐃΔ = Δⵠ[528][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.save();
        Wn.rotate(this.ⵠⲆᐃⲆᐃᐃΔ);
        ᐃΔ = Δⵠ[527][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
        Wn.restore();
    }
    function Zp() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[849][cf.time];
            } else {
                f = Δⵠ[193][cf.time];
            }
            var g = -f.width * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            var a = -f.height * this.ⲆᐃΔⵠ.ⵠΔⲆ;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[869][cf.time];
            } else {
                f = Δⵠ[194][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function $p() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xw / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xw, 1);
        }
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        a = Δⵠ[450][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width);
        ⵠⵠⲆ = this.scale * (-a.height * this.Δᐃⵠⵠ.ⵠΔⲆ);
        _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && Xi == this.ⵠⲆⵠᐃ.ⵠⲆΔ) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[464];
            _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        a = Δⵠ[453][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width);
        ⵠⵠⲆ = -a.height * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        Wn.save();
        Wn.translate(io * -60, io * 20);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[468];
            _c(Wn, a, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        a = Δⵠ[454][cf.time];
        Wn.save();
        Wn.translate(io * 60, io * 20);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        _c(Wn, a, -ⲆΔⵠ * io / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[469];
            _c(Wn, a, -ⲆΔⵠ * io / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.restore();
    }
    function Ru() {
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = m;
            }
            var a = io * (Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600);
            var b = a * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var c = a * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x + b, Tw.ⲆⲆⵠ.y + this.y + c);
        Wn.rotate(this.angle);
        ᐃΔ = Δⵠ[135][cf.time];
        _c(Wn, ᐃΔ, -ᐃΔ.width / 2, -ᐃΔ.height / 2);
        Wn.restore();
    }
    function Su() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ΔΔΔⵠⵠ.length == 0 || this.ΔΔΔⵠⵠ[this.ΔΔΔⵠⵠ.length - 1] <= 0.6)) {
            this.ΔΔΔⵠⵠ.push(1);
        }
        for (var a = 0; this.ΔΔΔⵠⵠ.length > a; a++) {
            this.ΔΔΔⵠⵠ[a] = Math.max(0, this.ΔΔΔⵠⵠ[a] - Xw * 0.25);
            Wn.globalAlpha = this.ΔΔΔⵠⵠ[a] / 1.3;
            var b = (1 - this.ΔΔΔⵠⵠ[a]) * 40;
            var c = (1 - this.ΔΔΔⵠⵠ[a]) * 35 + 10;
            Ft(Wn, io * -68 + Math.sin(-this.angle - Math.PI / 2) * b, io * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
            Dt(Wn, "#333333");
        }
        Wn.globalAlpha = 1;
        if (this.ΔΔΔⵠⵠ.length > 0 && this.ΔΔΔⵠⵠ[0] === 0) {
            this.ΔΔΔⵠⵠ.shift();
        }
        Wn.restore();
    }
    function Tu() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xw / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xw, 1);
        }
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        a = this.info === 0 ? Δⵠ[233][cf.time] : Δⵠ[1083][cf.time];
        ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width * this.scale;
        ⵠⵠⲆ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -a.height);
        _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[1092];
            _c(Wn, a, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        a = this.info === 0 ? Δⵠ[1087][cf.time] : Δⵠ[1086][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width);
        ⵠⵠⲆ = -a.height * this.Δᐃⵠⵠ.ⵠΔⲆ * this.scale;
        Wn.save();
        Wn.translate(io * -40, io * 10);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        _c(Wn, a, -ⲆΔⵠ * io / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[1093];
            _c(Wn, a, -ⲆΔⵠ * io / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        a = this.info === 0 ? Δⵠ[1090][cf.time] : Δⵠ[1089][cf.time];
        Wn.save();
        Wn.translate(io * 40, io * 10);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * -ⲆΔⵠ / 4, -ⵠⵠⲆ * io / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[1094];
            _c(Wn, a, io * -ⲆΔⵠ / 4, io * -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.restore();
    }
    function Uu() {
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        a = this.info === 0 ? Δⵠ[1042][cf.time] : Δⵠ[1044][cf.time];
        ⲆΔⵠ = -a.width * this.Δᐃⵠⵠ.ⵠΔⲆ;
        ⵠⵠⲆ = -a.height * this.Δᐃⵠⵠ.ⵠΔⲆ;
        _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[1045];
            _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
    }
    function Vu() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var b = (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * Xw * 600 * io;
            var c = b * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var d = Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            Wn.rotate(this.angle);
            this.ⲆᐃΔⵠ.ⵠⵠΔ();
            if (this.info & 16) {
                var f = Δⵠ[985][cf.time];
            } else {
                f = Δⵠ[210][cf.time];
            }
            var g = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.width;
            var a = this.ⲆᐃΔⵠ.ⵠΔⲆ * -f.height;
            _c(Wn, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Δⵠ[986][cf.time];
            } else {
                f = Δⵠ[211][cf.time];
            }
            Wn.translate(0, f.height / 2);
            _c(Wn, f, c - f.width / 2, -f.height + d);
        }
        Wn.restore();
    }
    function Wu() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ΔⲆΔⵠᐃ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[1192][cf.time];
        ⲆΔⵠ = -ᐃΔ.width * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        ⵠⵠⲆ = -ᐃΔ.height * this.ΔⲆΔⵠᐃ.ⵠΔⲆ;
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.restore();
    }
    function Xu(b) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ⲆᐃΔⵠ.ⵠⵠΔ();
        Wn.globalAlpha = 0.3;
        var c = Δⵠ[282][cf.time];
        var d = this.ⲆᐃΔⵠ.ⵠΔⲆ * -c.width;
        var e = -c.height * this.ⲆᐃΔⵠ.ⵠΔⲆ;
        _c(Wn, c, -d / 2, -e / 2, d, e);
        Wn.globalAlpha = 1;
        if (this.ⵠⲆⵠᐃ.ⵠⵠΔ) {
            if (this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠⲆΔ == 0) {
                this.ⵠⲆⵠᐃ.ⵠⵠΔ = false;
            }
            var f = Xw * (1 - this.ⵠⲆⵠᐃ.ΔᐃΔⲆ.ⵠΔⲆ) * 600 * io;
            var g = f * Math.sin(this.ⵠⲆⵠᐃ.angle - this.angle);
            var h = f * Math.cos(this.ⵠⲆⵠᐃ.angle - this.angle);
        } else {
            g = 0;
            h = 0;
        }
        c = Δⵠ[b][cf.time];
        _c(Wn, c, -c.width / 2 + g, -c.height / 2 + h);
        Wn.restore();
    }
    function Yu() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        if (ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + Xw / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - Xw, 1);
        }
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        this.rotate.ⵠⵠΔ();
        a = Δⵠ[449][cf.time];
        ⲆΔⵠ = this.scale * (this.Δᐃⵠⵠ.ⵠΔⲆ * -a.width);
        ⵠⵠⲆ = this.scale * (-a.height * this.Δᐃⵠⵠ.ⵠΔⲆ);
        _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                this.action -= 2;
            }
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            var a = Δⵠ[463];
            _c(Wn, a, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        a = Δⵠ[451][cf.time];
        ⲆΔⵠ = this.scale * (-a.width * this.Δᐃⵠⵠ.ⵠΔⲆ);
        ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -a.height * this.scale;
        Wn.save();
        Wn.translate(io * -30, io * 70);
        Wn.rotate(this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * -10, io * -40, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[466];
            _c(Wn, a, io * -10, io * -40, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        a = Δⵠ[452][cf.time];
        Wn.save();
        Wn.translate(io * 30, io * 70);
        Wn.rotate(-this.rotate.ⵠΔⲆ);
        _c(Wn, a, io * 10 - ⲆΔⵠ, io * -40, ⲆΔⵠ, ⵠⵠⲆ);
        if (this.action & 2) {
            Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
            a = Δⵠ[467];
            _c(Wn, a, io * 10 - ⲆΔⵠ, io * -40, ⲆΔⵠ, ⵠⵠⲆ);
            Wn.globalAlpha = 1;
        }
        Wn.restore();
        Wn.restore();
    }
    function Zu() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        Wn.rotate(this.angle);
        this.ⵠΔⲆᐃᐃⲆΔ = Math.min(1, this.ⵠΔⲆᐃᐃⲆΔ + Xw * 2);
        Wn.globalAlpha = this.ⵠΔⲆᐃᐃⲆΔ * Math.min(1, Math.max(0, ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(this, this.r) / 80));
        this.Δᐃⵠⵠ.ⵠⵠΔ();
        ᐃΔ = Δⵠ[247][cf.time][this.ᐃⵠᐃᐃᐃᐃΔ];
        if (this.ᐃⵠᐃᐃᐃᐃΔ < 2) {
            ⲆΔⵠ = this.Δᐃⵠⵠ.ⵠΔⲆ * -ᐃΔ.width;
            ⵠⵠⲆ = this.Δᐃⵠⵠ.ⵠΔⲆ * -ᐃΔ.height;
        } else if (this.ⲆᐃⵠΔⵠᐃΔ === 0) {
            ⲆΔⵠ = -ᐃΔ.width;
            ⵠⵠⲆ = -ᐃΔ.height;
        } else {
            ⲆΔⵠ = -ᐃΔ.width * 1.35;
            ⵠⵠⲆ = -ᐃΔ.height * 1.35;
        }
        _c(Wn, ᐃΔ, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
        Wn.globalAlpha = 1;
        Wn.restore();
    }
    function $u(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; h <= e; h++) {
            for (var q = i; j >= q; q++) {
                var r = Rw.Δⵠⵠᐃ[h][q];
                if (r !== ma && Lq !== r[n]) {
                    var s = r[n];
                    var t = Δⵠ[k][cf.time][s.ⵠᐃⵠᐃᐃᐃⵠ];
                    _c(Wn, t, Tw.ⲆⲆⵠ.x + s.x - t.width / (ᐃᐃᐃⵠᐃ * 4), Tw.ⲆⲆⵠ.y + s.y - t.height / (ᐃᐃᐃⵠᐃ * 4), t.width / (ᐃᐃᐃⵠᐃ * 2), t.height / (ᐃᐃᐃⵠᐃ * 2));
                    if (df.ⵠᐃΔΔⵠ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(Δⵠ[1025][cf.time][s.ⵠᐃⵠᐃᐃᐃⵠ].length * (x * 5));
                            t = Δⵠ[1025][cf.time][s.ⵠᐃⵠᐃᐃᐃⵠ][x];
                            _c(Wn, t, Tw.ⲆⲆⵠ.x + s.x - t.width / (ᐃᐃᐃⵠᐃ * 4), Tw.ⲆⲆⵠ.y + s.y - t.height / (ᐃᐃᐃⵠᐃ * 4), t.width / (ᐃᐃᐃⵠᐃ * 2), t.height / (ᐃᐃᐃⵠᐃ * 2));
                        } else if (s.ΔΔᐃⲆⵠⵠⵠ !== 0) {
                            t = Δⵠ[1026][cf.time];
                            var y = (up + h % 2 * 30) % 60;
                            Wn.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            _c(Wn, t, Tw.ⲆⲆⵠ.x + s.x - t.width / (ᐃᐃᐃⵠᐃ * 4), Tw.ⲆⲆⵠ.y + s.y - t.height / (ᐃᐃᐃⵠᐃ * 4) - 30 + y, t.width / (ᐃᐃᐃⵠᐃ * 2), t.height / (ᐃᐃᐃⵠᐃ * 2));
                            Wn.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function _u(a) {
        if (a > 0) {
            var b = Δⵠ[a][cf.time];
            switch (a) {
                case 58:
                    Cv(a, b, -b.width / 2 + io * 2, -b.height / 2 - io * 5);
                    break;
                case 10:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 18);
                    break;
                case 11:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 10);
                    break;
                case 23:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 19);
                    break;
                case 24:
                    Ev(a, b, -b.width / 4, -b.height / 4 - io * 20);
                    break;
                case 25:
                    Cv(a, b, -b.width / 2 - io * 1, -b.height / 2 - io * 23);
                    break;
                case 26:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 5);
                    break;
                case 27:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 2);
                    break;
                case 43:
                    Cv(a, b, -b.width / 2 + io * 1.5, -b.height / 2 - io * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    Ev(a, b, -b.width / 4, -b.height / 4 + io * 2);
                    break;
                case 41:
                case 42:
                    Cv(a, b, -b.width / 2 - io * 5, -b.height / 2 - io * 2);
                    break;
                case 40:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 2);
                    break;
                case 85:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 2);
                    break;
                case 48:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 2);
                    break;
                case 47:
                    Cv(a, b, -b.width / 2 + io * 2, -b.height / 2);
                    break;
                case 59:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    Cv(a, b, -b.width / 2 - io * 1, -b.height / 2);
                    break;
                case 83:
                    Cv(a, b, -b.width / 2, -b.height / 2 + io * 2);
                    break;
                case 84:
                case 86:
                    Cv(a, b, -b.width / 2, -b.height / 2 + io * 8);
                    break;
                case 61:
                    Cv(a, b, -b.width / 2, -b.height / 2 - io * 4);
            }
        }
    }
    function av() {
        if (!this.ⵠΔᐃᐃᐃ && this.ⲆⲆΔΔᐃ !== 0) {
            if (this.r.x != this.x || this.r.y != this.y) {
                var a = (ΔⲆⵠᐃ.ΔΔⵠᐃⲆᐃΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ΔⵠΔⵠᐃ = ΔⲆⵠᐃ.ⵠⲆΔⲆΔᐃⲆ(a, this.ΔⵠΔⵠᐃ);
                this.ΔⵠΔⵠᐃ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠᐃ, a, 0.018);
            }
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            Wn.rotate(this.ΔⵠΔⵠᐃ);
            if (this.ⲆⲆΔΔᐃ === 223) {
                if (this.ⵠⲆΔⵠΔ > 50 || this.ⲆⲆᐃⲆᐃ > 0) {
                    if (this.ⵠⲆΔⵠΔ > 50) {
                        this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw);
                    } else {
                        this.ⲆⲆᐃⲆᐃ = Math.max(0, this.ⲆⲆᐃⲆᐃ - Xw);
                    }
                    Wn.globalAlpha = this.ⲆⲆᐃⲆᐃ;
                    var b = Δⵠ[225][cf.time];
                    Ev(225, b, -b.width / 4, -b.height / 4);
                    Wn.globalAlpha = 1;
                }
                b = Δⵠ[223][cf.time];
                Ev(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⲆΔΔᐃ === 229) {
                this.ΔⵠΔⵠⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠⵠ, this.ⵠⲆΔⵠΔ, 0.018);
                this.Δⵠⵠⵠᐃⵠⵠ.ⵠⵠΔ();
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0.1, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                b = Δⵠ[1100][cf.time];
                Ev(1100, b, -b.width / 4, -b.height / 4);
                b = Δⵠ[1103][cf.time];
                ⲆΔⵠ = -b.width;
                ⵠⵠⲆ = -b.height;
                Wn.save();
                Wn.translate(io * -20, io * -20);
                Wn.rotate(this.ⲆⲆᐃⲆᐃ * this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
                b = Δⵠ[1106][cf.time];
                Wn.save();
                Wn.translate(io * 20, io * -20);
                Wn.rotate(this.ⲆⲆᐃⲆᐃ * -this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
            } else if (this.ⲆⲆΔΔᐃ === 228) {
                this.ΔⵠΔⵠⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠⵠ, this.ⵠⲆΔⵠΔ, 0.018);
                this.Δⵠⵠⵠᐃⵠⵠ.ⵠⵠΔ();
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0.1, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                b = Δⵠ[1085][cf.time];
                Ev(1085, b, -b.width / 4, -b.height / 4);
                b = Δⵠ[1088][cf.time];
                ⲆΔⵠ = -b.width;
                ⵠⵠⲆ = -b.height;
                Wn.save();
                Wn.translate(io * -40, io * -45);
                Wn.rotate(this.ⲆⲆᐃⲆᐃ * this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
                b = Δⵠ[1091][cf.time];
                Wn.save();
                Wn.translate(io * 40, io * -45);
                Wn.rotate(-this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ * this.ⲆⲆᐃⲆᐃ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
            } else if (this.ⲆⲆΔΔᐃ === 227) {
                this.ΔⵠΔⵠⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠⵠ, this.ⵠⲆΔⵠΔ, 0.018);
                this.Δⵠⵠⵠᐃⵠⵠ.ⵠⵠΔ();
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0.1, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                b = Δⵠ[1070][cf.time];
                Ev(1070, b, -b.width / 4, -b.height / 4);
                b = Δⵠ[1073][cf.time];
                ⲆΔⵠ = -b.width;
                ⵠⵠⲆ = -b.height;
                Wn.save();
                Wn.translate(io * -40, io * -45);
                Wn.rotate(this.ⲆⲆᐃⲆᐃ * this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
                b = Δⵠ[1076][cf.time];
                Wn.save();
                Wn.translate(io * 40, io * -45);
                Wn.rotate(this.ⲆⲆᐃⲆᐃ * -this.Δⵠⵠⵠᐃⵠⵠ.ⵠΔⲆ);
                _c(Wn, b, -ⲆΔⵠ / 4, -ⵠⵠⲆ / 4, ⲆΔⵠ / 2, ⵠⵠⲆ / 2);
                Wn.restore();
            } else if (this.ⲆⲆΔΔᐃ === 91) {
                this.ΔⵠΔⵠⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠⵠ, this.ⵠⲆΔⵠΔ, 0.018);
                b = Δⵠ[91][cf.time];
                Ev(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⲆΔΔᐃ === 230) {
                this.ΔⵠΔⵠⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(this.ΔⵠΔⵠⵠ, this.ⵠⲆΔⵠΔ, 0.018);
                b = Δⵠ[236][cf.time];
                Ev(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⲆΔΔᐃ === 224) {
                b = Δⵠ[224][cf.time];
                Ev(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ⲆⲆΔΔᐃ === 239) {
                b = Δⵠ[1221][cf.time];
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                this.ΔⵠⲆᐃⵠ += Xw * 60;
                if (this.ΔⵠⲆᐃⵠ > 60) {
                    this.ΔⵠⲆᐃⵠ -= 60;
                }
                var c = this.ⲆⲆᐃⲆᐃ * (-6 + (this.ΔⵠⲆᐃⵠ < 30 ? this.ΔⵠⲆᐃⵠ / 30 : 1 - (this.ΔⵠⲆᐃⵠ - 30) / 30) * 12);
                Ev(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⲆΔΔᐃ === 225) {
                b = Δⵠ[1043][cf.time];
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                this.ΔⵠⲆᐃⵠ += Xw * 60;
                if (this.ΔⵠⲆᐃⵠ > 60) {
                    this.ΔⵠⲆᐃⵠ -= 60;
                }
                c = ((this.ΔⵠⲆᐃⵠ < 30 ? this.ΔⵠⲆᐃⵠ / 30 : 1 - (this.ΔⵠⲆᐃⵠ - 30) / 30) * 12 - 6) * this.ⲆⲆᐃⲆᐃ;
                Ev(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ⲆⲆΔΔᐃ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = Δⵠ[1055][cf.time];
                if (this.ⵠⲆΔⵠΔ > 85) {
                    this.ⲆⲆᐃⲆᐃ = Math.min(1, this.ⲆⲆᐃⲆᐃ + Xw / 4);
                } else {
                    this.ⲆⲆᐃⲆᐃ = Math.max(0, this.ⲆⲆᐃⲆᐃ - Xw);
                }
                this.ΔⵠⲆᐃⵠ += Xw * 60;
                if (this.ΔⵠⲆᐃⵠ > 60) {
                    this.ΔⵠⲆᐃⵠ -= 60;
                }
                c = this.ⲆⲆᐃⲆᐃ * ((this.ΔⵠⲆᐃⵠ < 30 ? this.ΔⵠⲆᐃⵠ / 30 : 1 - (this.ΔⵠⲆᐃⵠ - 30) / 30) * 12 - 6);
                Ev(1055, b, -b.width / 4 + c, -b.height / 4);
                Wn.restore();
                Wn.save();
                Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
                Wn.rotate(Math.PI + this.ΔⵠΔⵠᐃ + e);
                Wn.translate(120, c);
                Wn.rotate(d);
                b = Δⵠ[1060][cf.time];
                ⲆΔⵠ = -b.width;
                ⵠⵠⲆ = -b.height;
                _c(Wn, b, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
                Wn.restore();
                Wn.save();
                Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
                Wn.rotate(Math.PI + this.ΔⵠΔⵠᐃ + d + e);
                Wn.translate(120, c);
                Wn.rotate(d);
                b = Δⵠ[1063][cf.time];
                ⲆΔⵠ = -b.width;
                ⵠⵠⲆ = -b.height;
                _c(Wn, b, -ⲆΔⵠ / 2, -ⵠⵠⲆ / 2, ⲆΔⵠ, ⵠⵠⲆ);
            }
            Wn.restore();
        }
    }
    function bv(a, b) {
        if (this.text) {
            if (this.timeout.ⵠⲆΔ) {
                Wn.globalAlpha = 1 - this.timeout.ⵠΔⲆ;
            } else {
                Wn.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = Sd(io, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            _c(Wn, this.label, (On - this.label.width) / 2, io * 50);
            Wn.globalAlpha = 1;
            if (this.timeout.ⵠⵠΔ() && this.timeout.ⵠⲆΔ == 0) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    function cv() {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; this.text.length > a && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = Ht(io, this.text[a]);
                    this.ⲆᐃᐃᐃΔᐃᐃ[a] = 0;
                    this.ΔΔΔⵠⵠΔⵠ[a] = 0;
                }
                if (a === 1) {
                    this.ΔΔΔⵠⵠΔⵠ[0] = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(this.ⲆⲆⵠᐃⲆΔⵠ) * 30;
                }
            }
            this.ⲆᐃᐃᐃΔᐃᐃ[0] += Xw;
            if (this.text.length > 1) {
                this.ⲆⲆⵠᐃⲆΔⵠ = Math.min(this.ⲆⲆⵠᐃⲆΔⵠ + Xw, 1);
                if (this.ⲆᐃᐃᐃΔᐃᐃ[0] > 1 && this.ⲆⲆⵠᐃⲆΔⵠ > 0.5) {
                    this.ⲆᐃᐃᐃΔᐃᐃ[1] += Xw;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ⲆᐃᐃᐃΔᐃᐃ[a];
                if (b > 0) {
                    Wn.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    _c(Wn, this.label[a], -this.label[a].width / 2, -this.ΔΔΔⵠⵠΔⵠ[a] + -this.label[a].height / 2 - io * 110);
                }
            }
            if (this.ⲆᐃᐃᐃΔᐃᐃ[0] > 4) {
                this.ⲆᐃᐃᐃΔᐃᐃ.shift();
                this.text.shift();
                this.ΔΔΔⵠⵠΔⵠ.shift();
                this.label.shift();
                this.ⲆⲆⵠᐃⲆΔⵠ = 0;
            }
        }
        Wn.restore();
    }
    function dv(b, c, d) {
        if (c.ᐃⵠΔⲆᐃⵠⲆ() !== 1) {
            return c;
        }
        var e = ᐃⵠⵠᐃᐃᐃΔ[d][b];
        if (eo === e) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ᐃΔΔⵠΔⵠΔΔⵠ[d];
            f.fillRect(0, 0, g, a);
            ᐃⵠⵠᐃᐃᐃΔ[d][b] = e;
        }
        return e;
    }
    function ev() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ⵠΔᐃᐃᐃ) {
            for (var f = 0; f < this.bubbles.length; f++) {
                var j = this.bubbles[f];
                if (j.ⵠᐃⵠΔΔ > 0.5) {
                    var k = 1 - (j.ⵠᐃⵠΔΔ - 0.5) * 2;
                } else {
                    k = j.ⵠᐃⵠΔΔ * 2;
                }
                Wn.globalAlpha = k;
                var m = Δⵠ[540][cf.time][j.id];
                _c(Wn, m, Tw.ⲆⲆⵠ.x + j.x - m.width / 2, Tw.ⲆⲆⵠ.y + j.y - m.height / 2);
                Wn.globalAlpha = 1;
            }
        } else {
            Wn.save();
            Wn.translate(Tw.ⲆⲆⵠ.x + this.x, Tw.ⲆⲆⵠ.y + this.y);
            cf.ᐃᐃΔⵠᐃᐃᐃⵠᐃ(this);
            if (this.action & 16) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                Wn.save();
                                var b = a.attack.ⵠΔⲆ * -3 / Math.PI;
                                if (a.attack.ⵠⲆΔ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ⵠΔⲆ) / 3;
                                } else {
                                    c = a.attack.ⵠΔⲆ;
                                }
                                Wn.rotate(a.angle - Math.PI / 2 + c);
                                Wn.globalAlpha = b / 1.2;
                                Ft(Wn, io * -40, io * 90, io * 5);
                                Dt(Wn, "#0B6A84");
                                Wn.globalAlpha = b / 1.2;
                                Ft(Wn, io * -52, io * 100, io * 8);
                                Dt(Wn, "#0B6A84");
                                Wn.globalAlpha = b / 1.2;
                                Ft(Wn, io * -30, io * 95, io * 4);
                                Dt(Wn, "#0B6A84");
                                Wn.globalAlpha = 1;
                                Wn.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ⲆᐃⵠΔⵠᐃΔ === 1) {
                                    break;
                                }
                                if (a.ΔⵠᐃⲆᐃ > 0) {
                                    var d = Ur.ⲆᐃΔⵠΔⲆⵠ[cf.time];
                                } else {
                                    d = a.ᐃⵠⵠⲆⵠⲆᐃ > 0 || a.ⵠΔΔⲆⲆ > 0 ? Ur.ⲆΔⵠⲆΔᐃᐃ[cf.time] : Ur.ⵠⵠⲆⵠⲆᐃΔ[cf.time];
                                }
                                b = a.attack.ⵠΔⲆ * -3 / Math.PI;
                                if ((c = a.attack.ⵠⲆΔ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0)) === 0) {
                                    a.ⵠⵠΔⵠΔⲆᐃ = a.angle;
                                }
                                Wn.save();
                                Wn.rotate(a.ⵠⵠΔⵠΔⲆᐃ - Math.PI / 2);
                                Wn.globalAlpha = b;
                                var e = io * 25 + c * 25;
                                Ft(Wn, e, io * 80, io * 15);
                                Dt(Wn, d);
                                Ft(Wn, -e, io * 80, io * 15);
                                Dt(Wn, d);
                                Wn.globalAlpha = 1;
                                Wn.restore();
                        }
                    }
                })(this);
            }
            Wn.save();
            Wn.rotate(this.angle - Math.PI / 2);
            if (!(this.action & 16)) {
                if (this.action & 64 || this.ⲆⲆΔΔᐃ !== 0) {
                    this.ⵠΔΔΔⵠⲆΔ.ⵠⵠΔ();
                } else if (this.action & 32) {
                    this.ⲆⵠⵠᐃᐃΔΔ.ⵠⵠΔ();
                }
            }
            var p;
            var q = this.ⵠΔΔΔⵠⲆΔ.ⵠΔⲆ;
            var v = this.ⲆⵠⵠᐃᐃΔΔ.ⵠΔⲆ;
            if (this.ΔΔⵠΔΔ === 85) {
                m = Δⵠ[793][cf.time];
                p = 793;
            } else if (this.ΔΔⵠΔΔ === 20) {
                m = Δⵠ[920][cf.time];
                p = 920;
            } else if (this.ΔΔⵠΔΔ === 21) {
                m = Δⵠ[924][cf.time];
                p = 924;
            } else if (this.ΔΔⵠΔΔ === 22) {
                m = Δⵠ[928][cf.time];
                p = 928;
            } else if (this.ΔⲆΔⵠᐃⲆⵠ) {
                m = Δⵠ[822][cf.time];
                p = 822;
            } else {
                m = Δⵠ[7][this.ΔΔᐃΔ][cf.time];
                p = 7;
            }
            ⵠⵠⲆᐃ = Δⵠ[286][cf.time];
            var w = m;
            var h = p;
            if (this.action & 16) {
                if (this.attack.ⵠⵠΔ() && this.attack.ⵠⲆΔ == 0) {
                    this.ⵠⵠⵠⲆᐃ = !this.ⵠⵠⵠⲆᐃ;
                    this.action -= 16;
                    if (this.ᐃⲆⲆⵠ == Tw.ᐃⲆⲆⵠ) {
                        Tw.control.ᐃⵠⵠⲆ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ⵠⵠⵠⲆᐃ = true;
                }
                var l = this.ⵠⵠⵠⲆᐃ ? this.attack.ⵠΔⲆ : -this.attack.ⵠΔⲆ / 3;
                var x = this.ⵠⵠⵠⲆᐃ ? this.attack.ⵠΔⲆ / 3 : -this.attack.ⵠΔⲆ;
                if (this.ΔⲆΔⵠᐃⲆⵠ) {
                    Wn.save();
                    Wn.rotate(l);
                    Cv(p, m, -m.width / 2 - io * (66 + q), -m.height / 2 + io * (5 + v));
                    Wn.restore();
                    Wn.save();
                    Wn.rotate(x);
                    Cv(p, m, -m.width / 2 + io * (66 + q), -m.height / 2 + (5 + v) * io);
                    Wn.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ(-l);
                    }
                    Wn.save();
                    Wn.rotate(l);
                    Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 - (49 + q) * io, -ⵠⵠⲆᐃ.height / 2 + (15 + v) * io);
                    if (this.right === 28) {
                        var u = Δⵠ[this.right][this.ᐃⵠᐃⲆⵠ][cf.time];
                        wv(this.right, this.ᐃⵠᐃⲆⵠ, u, -u.width / 4 - (62 + q) * io, -u.height / 4 + io * (v + 18));
                    } else {
                        Qp(this.right, q, v);
                    }
                    if (p >= 920) {
                        Ev(p, m, -m.width / 4 - io * (49 + q), -m.height / 4 + (11 + v) * io);
                    } else if (p !== 793) {
                        wv(p, this.ΔΔᐃΔ, m, -m.width / 4 - io * (49 + q), -m.height / 4 + io * (11 + v));
                    } else {
                        Cv(p, m, -m.width / 2 - io * (49 + q), -m.height / 2 + (11 + v) * io);
                    }
                    Wn.restore();
                    Wn.save();
                    Wn.rotate(x);
                    Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 + (49 + q) * io, -ⵠⵠⲆᐃ.height / 2 + (15 + v) * io);
                    if (p >= 920) {
                        Ev(p, m, -m.width / 4 + (49 + q) * io, -m.height / 4 + (11 + v) * io);
                    } else if (p !== 793) {
                        wv(p, this.ΔΔᐃΔ, m, -m.width / 4 + io * (49 + q), -m.height / 4 + (11 + v) * io);
                    } else {
                        Cv(p, m, -m.width / 2 + io * (49 + q), -m.height / 2 + (11 + v) * io);
                    }
                    Wn.restore();
                }
            } else if (this.ΔⲆΔⵠᐃⲆⵠ) {
                Cv(p, m, -m.width / 2 - io * (66 + q), -m.height / 2 + (5 + v) * io);
                Cv(p, m, -m.width / 2 + (66 + q) * io, -m.height / 2 + io * (5 + v));
            } else if (c === 0) {
                Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 - (49 + q) * io, -ⵠⵠⲆᐃ.height / 2 + io * (15 + v));
                if (this.right === 28) {
                    u = Δⵠ[this.right][this.ᐃⵠᐃⲆⵠ][cf.time];
                    wv(this.right, this.ᐃⵠᐃⲆⵠ, u, -u.width / 4 - (62 + q) * io, -u.height / 4 + (v + 18) * io);
                } else {
                    Qp(this.right, q, v);
                }
                if (p >= 920) {
                    Ev(p, m, -m.width / 4 - io * (49 + q), -m.height / 4 + (11 + v) * io);
                } else if (p !== 793) {
                    wv(p, this.ΔΔᐃΔ, m, -m.width / 4 - io * (49 + q), -m.height / 4 + io * (11 + v));
                } else {
                    Cv(p, m, -m.width / 2 - io * (49 + q), -m.height / 2 + (11 + v) * io);
                }
                Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 + io * (49 + q), -ⵠⵠⲆᐃ.height / 2 + (15 + v) * io);
                if (p >= 920) {
                    Ev(p, m, -m.width / 4 + (49 + q) * io, -m.height / 4 + (11 + v) * io);
                } else if (p !== 793) {
                    wv(p, this.ΔΔᐃΔ, m, -m.width / 4 + io * (49 + q), -m.height / 4 + io * (11 + v));
                } else {
                    Cv(p, m, -m.width / 2 + (49 + q) * io, -m.height / 2 + (11 + v) * io);
                }
            }
            if (this.ⲆΔΔⵠⵠ && this.ΔΔⵠΔΔ < 1) {
                m = Δⵠ[29][this.ⵠᐃΔⵠⵠΔⵠ][cf.time];
                wv(29, this.ⵠᐃΔⵠⵠΔⵠ, m, -m.width / 4, -m.height / 4 - io * 39);
            }
            if (this.ΔⲆΔⵠᐃⲆⵠ) {
                m = Δⵠ[820][cf.time];
                Cv(820, m, -m.width / 2, -m.height / 2);
                this.ΔⵠΔΔⵠⲆⲆ.ⵠⵠΔ();
                m = Δⵠ[821][cf.time];
                Cv(821, m, -m.width / 2, -m.height / 2 + this.ΔⵠΔΔⵠⲆⲆ.ⵠΔⲆ);
            } else {
                m = Δⵠ[255][this.ΔΔᐃΔ][cf.time];
                if (this.ΔΔⵠΔΔ !== 85 && (wv(255, this.ΔΔᐃΔ, m, -m.width / 4, -m.height / 4), this.ΔᐃΔⲆᐃ > 0)) {
                    m = Δⵠ[796][this.ΔᐃΔⲆᐃ][cf.time];
                    wv(796, this.ΔᐃΔⲆᐃ, m, -m.width / 4, -m.height / 4);
                }
            }
            if (this.action & 128) {
                if (this.ᐃΔⵠᐃⵠ.ⵠⵠΔ() && yl == this.ᐃΔⵠᐃⵠ.ⵠⲆΔ) {
                    this.action -= 128;
                }
                Wn.globalAlpha = 0.6 - this.ᐃΔⵠᐃⵠ.ⵠΔⲆ;
                if (this.ΔⲆΔⵠᐃⲆⵠ) {
                    m = Δⵠ[825];
                    _c(Wn, m, -m.width / 2, -m.height / 2);
                } else {
                    m = dv(this.ΔΔᐃΔ, Δⵠ[255][this.ΔΔᐃΔ][0], ᐃΔⵠⵠⲆᐃⵠⲆⲆ);
                    _c(Wn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                Wn.globalAlpha = 1;
            }
            if (this.action & 256) {
                if (this.ⲆⲆⵠⵠΔⵠⲆ.ⵠⵠΔ() && this.ⲆⲆⵠⵠΔⵠⲆ.ⵠⲆΔ == 0) {
                    this.action -= 256;
                }
                Wn.globalAlpha = 0.6 - this.ⲆⲆⵠⵠΔⵠⲆ.ⵠΔⲆ;
                m = Δⵠ[266];
                _c(Wn, m, -m.width / 2, -m.height / 2);
                Wn.globalAlpha = 1;
            }
            if (this.action & 2) {
                if (this.ⵠⲆⵠᐃ.ⵠⵠΔ() && this.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                    this.action -= 2;
                }
                Wn.globalAlpha = 0.6 - this.ⵠⲆⵠᐃ.ⵠΔⲆ;
                if (this.ΔⲆΔⵠᐃⲆⵠ) {
                    m = Δⵠ[823];
                    _c(Wn, m, -m.width / 2, -m.height / 2);
                } else {
                    m = dv(this.ΔΔᐃΔ, Δⵠ[255][this.ΔΔᐃΔ][0], ΔΔⲆⵠⵠⵠΔΔⲆ);
                    _c(Wn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                Wn.globalAlpha = 1;
            }
            if (this.action & 4) {
                if (this.freeze.ⵠⵠΔ() && this.freeze.ⵠⲆΔ == 0) {
                    this.action -= 4;
                }
                Wn.globalAlpha = 0.6 - this.freeze.ⵠΔⲆ;
                m = dv(this.ΔΔᐃΔ, Δⵠ[255][this.ΔΔᐃΔ][0], ᐃⲆⵠⵠΔᐃᐃᐃⲆ);
                _c(Wn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                Wn.globalAlpha = 1;
            }
            if (this.action & 8) {
                if (this.ⵠⵠᐃΔⲆᐃᐃ.ⵠⵠΔ() && Tn == this.ⵠⵠᐃΔⲆᐃᐃ.ⵠⲆΔ) {
                    this.action -= 8;
                }
                Wn.globalAlpha = 0.6 - this.ⵠⵠᐃΔⲆᐃᐃ.ⵠΔⲆ;
                if (this.ΔⲆΔⵠᐃⲆⵠ) {
                    m = Δⵠ[824];
                    _c(Wn, m, -m.width / 2, -m.height / 2);
                } else {
                    m = dv(this.ΔΔᐃΔ, Δⵠ[255][this.ΔΔᐃΔ][0], ΔΔΔΔΔΔΔᐃⲆ);
                    _c(Wn, m, m.width / 4, m.height / 4, -m.width / 2, -m.height / 2);
                }
                Wn.globalAlpha = 1;
            }
            _u(this.ΔΔⵠΔΔ);
            if (c === 1) {
                if (this.action & 16) {
                    q += this.attack.ⵠΔⲆ * 15;
                }
                Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 - io * 26, -ⵠⵠⲆᐃ.height / 2 + (31 + v + q) * io);
                if (h >= 920) {
                    Ev(h, w, -w.width / 4 - io * 26, -w.height / 4 + io * (27 + v + q));
                } else if (h !== 793) {
                    wv(h, this.ΔΔᐃΔ, w, -w.width / 4 - io * 26, -w.height / 4 + (27 + v + q) * io);
                } else {
                    Cv(h, w, -w.width / 2 - io * 26, -w.height / 2 + (27 + v + q) * io);
                }
                Cv(286, ⵠⵠⲆᐃ, -ⵠⵠⲆᐃ.width / 2 + io * 26, -ⵠⵠⲆᐃ.height / 2 + io * (31 + v + q));
                if (h >= 920) {
                    Ev(h, w, -w.width / 4 + io * 26, -w.height / 4 + (27 + v + q) * io);
                } else if (h !== 793) {
                    wv(h, this.ΔΔᐃΔ, w, -w.width / 4 + io * 26, -w.height / 4 + io * (27 + v + q));
                } else {
                    Cv(h, w, -w.width / 2 + io * 26, -w.height / 2 + (27 + v + q) * io);
                }
                Gp(this.right, 0, v + q);
            }
            Wn.restore();
            if (this.ΔΔⵠΔΔ !== 83 && this.ΔΔⵠΔΔ !== 85) {
                if (this.ΔⵠᐃⲆᐃ > 0) {
                    if (!this.ΔⵠᐃⲆ.ΔᐃⵠⲆΔΔⲆ) {
                        this.ΔⵠᐃⲆ.ΔᐃⵠⲆΔΔⲆ = Sd(io, this.ΔⵠᐃⲆ.ᐃᐃⲆⵠᐃ, 20, "#187484", "#000", 2, null, null, io * 300);
                    }
                    m = this.ΔⵠᐃⲆ.ΔᐃⵠⲆΔΔⲆ;
                } else {
                    if (!this.ΔⵠᐃⲆ.label) {
                        this.ΔⵠᐃⲆ.label = Sd(io, this.ΔⵠᐃⲆ.ᐃᐃⲆⵠᐃ, 20, "#FFF", "#000", 2, null, null, io * 300);
                    }
                    m = this.ΔⵠᐃⲆ.label;
                }
                if (cf.ⵠᐃⲆ == 1) {
                    Wn.globalAlpha = 0.5;
                }
                q = Math.floor(-m.width / 2);
                v = Math.floor(-m.height / 2 - io * 70);
                _c(Wn, m, q, v);
                if (this.ΔⵠᐃⲆ.level > 0) {
                    var y = q + m.width + 5;
                    m = Δⵠ[885];
                    if (ⲆᐃⵠᐃⵠⵠⲆ[this.ΔⵠᐃⲆ.level] === undefined) {
                        ⲆᐃⵠᐃⵠⵠⲆ[this.ΔⵠᐃⲆ.level] = Sd(io, "[" + this.ΔⵠᐃⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, io * 50);
                    }
                    _c(Wn, ⲆᐃⵠᐃⵠⵠⲆ[this.ΔⵠᐃⲆ.level], y, v);
                }
                Wn.globalAlpha = 1;
            } else {
                v = Math.floor(io * -70);
                q = Math.floor(Δⵠ[558].width / 1.5);
            }
            if (Tw.ⵠΔⲆⵠᐃⲆΔ(this.ⵠᐃⲆⵠ)) {
                if (this.ⵠᐃⲆⵠ == Tw.ᐃⵠΔΔⵠ[0]) {
                    m = Δⵠ[559];
                } else {
                    m = Δⵠ[558];
                }
                _c(Wn, m, q - m.width - 5, v - 6);
            }
            Wn.restore();
        }
    }
    function fv() {
        if (this.message !== undefined) {
            var a = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length > 0 ? -95 : 0;
            _c(Wn, this.message, 0, Hn - this.message.height + a);
        }
    }
    function gv() {
        if (this.enabled && this.Ⲇᐃⵠᐃⵠ >= 0) {
            var a = new Date().getTime() - this.Ⲇᐃⵠᐃⵠ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            if ((a = Math.floor(a / 1000)) < 60) {
                a = 60 - a;
                this.label ||= Sd(io, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                if (a != this.now || !this.ΔᐃⵠⵠⵠⵠΔ) {
                    this.now = a;
                    this.ΔᐃⵠⵠⵠⵠΔ = Sd(io, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                _c(Wn, this.label, (On - this.label.width) / 2, io * 100);
                Wn.globalAlpha = b;
                _c(Wn, this.ΔᐃⵠⵠⵠⵠΔ, (On - this.label.width) / 2 - this.ΔᐃⵠⵠⵠⵠΔ.width + io * 15, io * 100);
                Wn.globalAlpha = 1;
            }
        }
    }
    ΔΔⲆⵠⵠⵠΔΔⲆ = 0;
    ᐃΔⵠⵠⲆᐃⵠⲆⲆ = 1;
    ᐃⲆⵠⵠΔᐃᐃᐃⲆ = 2;
    ΔΔΔΔΔΔΔᐃⲆ = 3;
    ⲆΔⲆⵠⲆⵠΔΔⲆ = 4;
    ᐃⵠⵠᐃᐃᐃΔ = [[], [], [], [], []];
    ᐃΔΔⵠΔⵠΔΔⵠ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var hv = 0;
    function iv(j, e, i, k, n, o, a, q) {
        if (q === Kr) {
            q = 0;
        }
        cf.Δᐃⵠⵠ[n].ⵠⵠΔ();
        for (var r = a; q <= r; r--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Rw.Δⵠⵠᐃ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== undefined) {
                            for (var z = 0; z < y.length; z++) {
                                var A = y[z];
                                if (A.ⵠⵠΔ) {
                                    if (A.ⵠⲆⵠᐃ.ⵠⵠΔ() && A.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                                        A.ⵠⵠΔ = false;
                                    }
                                    var B = io * ((1 - A.ⵠⲆⵠᐃ.ⵠΔⲆ) * Xw * 600);
                                    var D = B * Math.sin(A.angle);
                                    var E = B * Math.cos(A.angle);
                                } else {
                                    D = 0;
                                    E = 0;
                                }
                                var F = Δⵠ[n][cf.time][r];
                                var G = cf.Δᐃⵠⵠ[n].ⵠΔⲆ * -F.width;
                                var H = cf.Δᐃⵠⵠ[n].ⵠΔⲆ * -F.height;
                                _c(Wn, F, Tw.ⲆⲆⵠ.x + A.x - G / 2 + D, Tw.ⲆⲆⵠ.y + A.y - H / 2 + E, G, H);
                            }
                        }
                    }
                }
            }
        }
    }
    function jv(j, e, i, k, n, o, a, q = 0) {
        for (var r = a; r >= q; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; t <= k; t++) {
                    var w = Rw.Δⵠⵠᐃ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== eo) {
                            for (var y = 0; x.length > y; y++) {
                                var z = x[y];
                                var A = Δⵠ[n][cf.time][r];
                                var B = (hv + (s + t) * 3) % 60;
                                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var E = -A.width * (1 + D * 0.9 / 30);
                                var F = (1 + D * 0.9 / 30) * -A.height;
                                D = (B = (hv + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var G = Wn.globalAlpha;
                                Wn.globalAlpha = (0.9 + D * 0.1) * G;
                                _c(Wn, A, Tw.ⲆⲆⵠ.x + z.x - E / 2, Tw.ⲆⲆⵠ.y + z.y - F / 2, E, F);
                                Wn.globalAlpha = G;
                            }
                        }
                    }
                }
            }
        }
    }
    var kv = [];
    for (ht = 0; ht < 100; ht++) {
        var lv = 1;
        if (Math.random() < 0.25) {
            lv = 0;
        }
        kv.push(lv);
    }
    function mv(j, e, i, k, n, o, a, q, r) {
        if (ek === q) {
            q = 0;
        }
        for (var h = a; h >= q; h--) {
            for (var t = j; t <= e; t++) {
                for (var w = i; k >= w; w++) {
                    var x = Rw.Δⵠⵠᐃ[t][w];
                    if (x !== ts && x[o] !== undefined) {
                        var A = x[o][h];
                        if (Xh !== A) {
                            for (var B = 0; A.length > B; B++) {
                                var D = A[B];
                                if (D.ⵠⵠΔ) {
                                    if (D.ⵠⲆⵠᐃ.ⵠⵠΔ() && D.ⵠⲆⵠᐃ.ⵠⲆΔ == 0) {
                                        D.ⵠⵠΔ = false;
                                    }
                                    var E = (1 - D.ⵠⲆⵠᐃ.ⵠΔⲆ) * Xw * 600 * io;
                                    var F = E * Math.sin(D.angle);
                                    var G = E * Math.cos(D.angle);
                                } else {
                                    F = 0;
                                    G = 0;
                                }
                                for (var H = 0; H < ᐃᐃⵠᐃᐃΔΔ[h].ΔⲆᐃᐃ; H++) {
                                    if (wf !== cf.ΔᐃᐃΔⵠ[H].ⲆᐃⵠⲆⵠᐃᐃ) {
                                        cf.ΔᐃᐃΔⵠ[H].ⵠⵠΔ();
                                        cf.ΔᐃᐃΔⵠ[H].ⲆᐃⵠⲆⵠᐃᐃ = wf;
                                    }
                                    var I = Δⵠ[941][cf.time][ᐃᐃⵠᐃᐃΔΔ[h].ⲆΔᐃⲆ[H].ΔⵠΔ];
                                    var J = cf.ΔᐃᐃΔⵠ[H].ⵠΔⲆ * -I.width;
                                    var K = cf.ΔᐃᐃΔⵠ[H].ⵠΔⲆ * -I.height;
                                    _c(Wn, I, Tw.ⲆⲆⵠ.x + D.x - J / 4 + F + ᐃᐃⵠᐃᐃΔΔ[h].ⲆΔᐃⲆ[H].x, Tw.ⲆⲆⵠ.y + D.y - K / 4 + G + ᐃᐃⵠᐃᐃΔΔ[h].ⲆΔᐃⲆ[H].y, J / 2, K / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function nv(c, e, f, i, j, k, a, m = 0, n) {
        for (var h = c; e >= h; h++) {
            for (var o = f; o <= i; o++) {
                var p = Rw.Δⵠⵠᐃ[h][o];
                if (p !== ts && pr !== p[k]) {
                    var q = p[k];
                    if (q !== wj) {
                        if (q.scale === 1) {
                            var r = Δⵠ[j][cf.time][q.ⲆᐃΔⲆ];
                            Wn.save();
                            Wn.translate(Tw.ⲆⲆⵠ.x + q.x, Tw.ⲆⲆⵠ.y + q.y);
                            Wn.rotate(q.angle);
                            _c(Wn, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            Wn.restore();
                        } else if (q.scale === 3) {
                            for (var s = 0; q.Δⵠᐃ.length > s; s++) {
                                Wn.save();
                                Wn.translate(Tw.ⲆⲆⵠ.x + q.x, Tw.ⲆⲆⵠ.y + q.y);
                                Wn.rotate(q.Δⵠᐃ[s].angle);
                                r = Δⵠ[j][cf.time][q.Δⵠᐃ[s].ⲆᐃΔⲆ];
                                _c(Wn, r, -r.width / 3 + q.Δⵠᐃ[s].x, -r.height / 3 + q.Δⵠᐃ[s].y, r.width / 1.5, r.height / 1.5);
                                Wn.restore();
                            }
                        } else {
                            r = Δⵠ[j][cf.time][q.ⲆᐃΔⲆ];
                            Wn.save();
                            Wn.translate(Tw.ⲆⲆⵠ.x + q.x, Tw.ⲆⲆⵠ.y + q.y);
                            Wn.rotate(q.angle);
                            _c(Wn, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            Wn.restore();
                        }
                    }
                }
            }
        }
    }
    function ov(f, e, i, j, k, n, a, o, q) {
        if (_l === o) {
            o = 0;
        }
        for (var h = a; h >= o; h--) {
            for (var r = f; e >= r; r++) {
                for (var t = i; t <= j; t++) {
                    if (q <= 0 || kv[(r + t * q) % kv.length] !== 1) {
                        var w = Rw.Δⵠⵠᐃ[r][t];
                        if (w !== undefined && Kr !== w[n]) {
                            var x = w[n][h];
                            if (x !== undefined) {
                                for (var y = 0; x.length > y; y++) {
                                    var z = x[y];
                                    if (z.ⵠⵠΔ) {
                                        if (z.ⵠⲆⵠᐃ.ⵠⵠΔ() && cr == z.ⵠⲆⵠᐃ.ⵠⲆΔ) {
                                            z.ⵠⵠΔ = Zl;
                                        }
                                        var A = (1 - z.ⵠⲆⵠᐃ.ⵠΔⲆ) * Xw * 600 * io;
                                        var B = Math.sin(z.angle) * A;
                                        var D = A * Math.cos(z.angle);
                                    } else {
                                        B = 0;
                                        D = 0;
                                    }
                                    var E = Δⵠ[k][cf.time][h];
                                    _c(Wn, E, Tw.ⲆⲆⵠ.x + z.x - E.width / (ᐃᐃᐃⵠᐃ * 2) + B, Tw.ⲆⲆⵠ.y + z.y - E.height / (ᐃᐃᐃⵠᐃ * 2) + D, E.width / ᐃᐃᐃⵠᐃ, E.height / ᐃᐃᐃⵠᐃ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ᐃᐃᐃⵠᐃ = 1;
    ᐃᐃⵠᐃᐃΔΔ = [{
        ΔⲆᐃᐃ: 10,
        ⲆΔᐃⲆ: [{
            y: -20,
            x: -128,
            ΔⵠΔ: 0
        }, {
            x: -86,
            y: -4,
            ΔⵠΔ: 1
        }, {
            ΔⵠΔ: 2,
            x: -60,
            y: -74
        }, {
            x: -22,
            y: -144,
            ΔⵠΔ: 0
        }, {
            x: -58,
            ΔⵠΔ: 0,
            y: 86
        }, {
            y: -30,
            x: 3,
            ΔⵠΔ: 0
        }, {
            x: 65,
            y: -115,
            ΔⵠΔ: 1
        }, {
            ΔⵠΔ: 0,
            y: -50,
            x: 118
        }, {
            y: 15,
            ΔⵠΔ: 1,
            x: 73
        }, {
            x: 67,
            y: 79,
            ΔⵠΔ: 0
        }]
    }, {
        ΔⲆᐃᐃ: 5,
        ⲆΔᐃⲆ: [{
            ΔⵠΔ: 0,
            y: -26,
            x: -45
        }, {
            y: 20,
            ΔⵠΔ: 2,
            x: -45
        }, {
            ΔⵠΔ: 1,
            y: -60,
            x: 10
        }, {
            x: 52,
            y: -17,
            ΔⵠΔ: 1
        }, {
            ΔⵠΔ: 0,
            x: 14,
            y: 45
        }]
    }, {
        ΔⲆᐃᐃ: 3,
        ⲆΔᐃⲆ: [{
            ΔⵠΔ: 2,
            x: -30,
            y: 3
        }, {
            x: 7,
            y: -38,
            ΔⵠΔ: 2
        }, {
            x: 37,
            ΔⵠΔ: 2,
            y: 5
        }]
    }, {
        ΔⲆᐃᐃ: 11,
        ⲆΔᐃⲆ: [{
            ΔⵠΔ: 2,
            x: -74,
            y: -87
        }, {
            x: -11,
            y: -10,
            ΔⵠΔ: 1
        }, {
            y: 17,
            x: -99,
            ΔⵠΔ: 1
        }, {
            y: 84,
            x: -66,
            ΔⵠΔ: 0
        }, {
            y: 123,
            ΔⵠΔ: 1,
            x: -55
        }, {
            x: 10,
            y: 81,
            ΔⵠΔ: 2
        }, {
            x: 52,
            ΔⵠΔ: 0,
            y: 50
        }, {
            x: 138,
            ΔⵠΔ: 1,
            y: 9
        }, {
            ΔⵠΔ: 0,
            x: 104,
            y: -28
        }, {
            y: -56,
            x: 67,
            ΔⵠΔ: 2
        }, {
            y: -112,
            ΔⵠΔ: 0,
            x: 5
        }]
    }, {
        ΔⲆᐃᐃ: 6,
        ⲆΔᐃⲆ: [{
            y: -66,
            x: -33,
            ΔⵠΔ: 2
        }, {
            y: 10,
            x: -58,
            ΔⵠΔ: 0
        }, {
            ΔⵠΔ: 1,
            y: 44,
            x: -19
        }, {
            x: 44,
            ΔⵠΔ: 0,
            y: 20
        }, {
            x: 53,
            ΔⵠΔ: 2,
            y: -36
        }, {
            ΔⵠΔ: 0,
            y: -62,
            x: 7
        }]
    }, {
        ΔⲆᐃᐃ: 3,
        ⲆΔᐃⲆ: [{
            x: -19,
            y: -25,
            ΔⵠΔ: 1
        }, {
            y: 13,
            ΔⵠΔ: 2,
            x: -29
        }, {
            ΔⵠΔ: 0,
            x: 12,
            y: 12
        }]
    }];
    var pv = 0;
    var qv = 0;
    var rv = 0;
    var sv = 0;
    function tv(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(e * a + (1 - a) * b)) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + (1 - a) * c)) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(a * g + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function uv(a, b) {
        if (cf.transition) {
            Wn.globalAlpha = 1;
            a.ⲆⲆᐃΔⲆⲆⲆ(b);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            a.ⲆⲆᐃΔⲆⲆⲆ(b);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            a.ⲆⲆᐃΔⲆⲆⲆ(b);
        }
    }
    function vv(a, b, c) {
        if (cf.transition) {
            Wn.globalAlpha = 1;
            a.Δᐃᐃⵠ(b, c);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            a.Δᐃᐃⵠ(b, c);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            a.Δᐃᐃⵠ(b, c);
        }
    }
    function wv(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (cf.transition) {
            Wn.globalAlpha = 1;
            _c(Wn, Δⵠ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            _c(Wn, Δⵠ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            _c(Wn, Δⵠ[b][c][cf.time], 0, 0, g, a, e, f, i, j);
        }
    }
    function xv(a, b, c, d, e) {
        if (cf.transition && e == 1) {
            Wn.globalAlpha = 1;
            _c(Wn, Δⵠ[a][cf.time][b], c, d);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            _c(Wn, Δⵠ[a][cf.time][b], c, d);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            Wn.globalAlpha = e;
            _c(Wn, Δⵠ[a][cf.time][b], c, d);
            Wn.globalAlpha = 1;
        }
    }
    function yv() {
        Wn.globalAlpha = 1;
        if (cf.transition) {
            var a = cf.ⵠⵠΔᐃ.ⵠⵠΔ();
        }
        cf.ᐃΔᐃⵠΔⲆᐃᐃⵠ(-Tw.ⲆⲆⵠ.x, -Tw.ⲆⲆⵠ.y);
        pv = Math.max(Math.floor(-Tw.ⲆⲆⵠ.x / cf.ΔΔⲆⵠΔΔᐃ) - 5, 0);
        qv = Math.min(Math.floor((-Tw.ⲆⲆⵠ.x + Tw.ⲆⲆⵠ.w) / cf.ΔΔⲆⵠΔΔᐃ) + 4, cf.ⵠⵠⲆⵠΔ - 1);
        rv = Math.max(Math.floor(-Tw.ⲆⲆⵠ.y / cf.ⵠⵠⵠⵠΔΔᐃ) - 3, 0);
        sv = Math.min(Math.floor((-Tw.ⲆⲆⵠ.y + Tw.ⲆⲆⵠ.ⵠⵠⲆ) / cf.ⵠⵠⵠⵠΔΔᐃ) + 3, cf.ⵠⵠⲆΔΔ - 1);
        (function () {
            for (var c = cf.ⵠⵠⵠⵠⲆ.length - 1; c >= 0; c--) {
                if ((A = cf.ⵠⵠⵠⵠⲆ[c]).ΔⵠΔ === cf.ᐃΔⲆⵠⵠ) {
                    var f = cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ];
                    if (-Tw.ⲆⲆⵠ.x >= A.x1 - 230 - On && -Tw.ⲆⲆⵠ.x <= A.x2 + 330 && A.y1 - Hn <= -Tw.ⲆⲆⵠ.y && -Tw.ⲆⲆⵠ.y <= A.y2 + 100) {
                        var j = A.x2;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            j -= 610;
                        }
                        var k = A.x1;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            k += 610;
                        }
                        var m = A.y2;
                        if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                            m -= 610;
                        }
                        var p = A.y1;
                        if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                            p += 610;
                        }
                        if (cf.transition) {
                            var q = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                            Wn.fillStyle = tv(f.ⵠⲆⲆ[0], f.ⵠⲆⲆ[1], f.ⵠⲆⲆ[2], f.ⵠᐃⲆ[0], f.ⵠᐃⲆ[1], f.ⵠᐃⲆ[1], q);
                        } else {
                            Wn.fillStyle = f.ᐃⵠᐃⵠⲆ[cf.time];
                        }
                        var w = Math.max(Tw.ⲆⲆⵠ.x + k - 2 - 230, 0);
                        var x = Math.max(-Tw.ⲆⲆⵠ.x + On - j - 330 - 2, 0);
                        var y = Math.max(Tw.ⲆⲆⵠ.y + p - 2, 0);
                        var z = Math.max(-Tw.ⲆⲆⵠ.y + Hn - m - 100 - 2, 0);
                        Wn.beginPath();
                        Wn.fillRect(w, y, On - x - w, Hn - y - z);
                    }
                }
            }
            for (c = cf.ⵠⵠⵠⵠⲆ.length - 1; c >= 0; c--) {
                if ((A = cf.ⵠⵠⵠⵠⲆ[c]).ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                    j = A.x2;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        p += 300;
                    }
                    if (!(A.ⵠΔⲆ & 8) && j - On + 120 <= -Tw.ⲆⲆⵠ.x && j + 820 >= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.y >= p + 88 - Hn && m + 50 >= -Tw.ⲆⲆⵠ.y) {
                        Fv(j, p + 88, m - 88, Tw.Δⵠᐃⵠ[0], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 8);
                        Dv(j, p + 88, m - 88, Tw.Δⵠᐃⵠ[0], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 8);
                    }
                    if ((A.ⵠΔⲆ & 4) === 0 && -Tw.ⲆⲆⵠ.x >= k - On - 700 && -Tw.ⲆⲆⵠ.x <= k - 20 && -Tw.ⲆⲆⵠ.y >= p + 88 - Hn && -Tw.ⲆⲆⵠ.y <= m + 50) {
                        Lv(k, p + 88, m - 88, Tw.Δⵠᐃⵠ[1], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 4);
                        Av(k, p + 88, m - 88, Tw.Δⵠᐃⵠ[1], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 4);
                    }
                    if (!(A.ⵠΔⲆ & 2) && k - 235 - On <= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.x <= j + 350 && m - Hn - 275 <= -Tw.ⲆⲆⵠ.y && -Tw.ⲆⲆⵠ.y <= m + 490) {
                        Gv(m - 230, k - 230, j + 230, Tw.Δⵠᐃⵠ[2], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 2);
                        Bv(m - 230, k - 230, j + 230, Tw.Δⵠᐃⵠ[2], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 2);
                    }
                    if (!(A.ⵠΔⲆ & 1) && -Tw.ⲆⲆⵠ.x >= k - 235 - On && j + 350 >= -Tw.ⲆⲆⵠ.x && p - Hn - 390 <= -Tw.ⲆⲆⵠ.y && p + 315 >= -Tw.ⲆⲆⵠ.y) {
                        Hv(p + 310, k - 230, j + 230, Tw.Δⵠᐃⵠ[3], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 1);
                        zv(p + 310, k - 230, j + 230, Tw.Δⵠᐃⵠ[3], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 1);
                    }
                }
            }
            for (c = cf.ⵠⵠⵠⵠⲆ.length - 1; c >= 0; c--) {
                var A = cf.ⵠⵠⵠⵠⲆ[c];
                if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                    j = A.x2;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        p += 300;
                    }
                    if ((A.ⵠΔⲆ & 8) !== 0 && j - On + 120 <= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.x <= j + 820 && p + 88 - Hn <= -Tw.ⲆⲆⵠ.y && m + 50 >= -Tw.ⲆⲆⵠ.y) {
                        Fv(j, p + 88, m - 88, Tw.Δⵠᐃⵠ[0], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 8);
                    }
                    if ((A.ⵠΔⲆ & 4) !== 0 && -Tw.ⲆⲆⵠ.x >= k - On - 700 && -Tw.ⲆⲆⵠ.x <= k - 20 && p + 88 - Hn <= -Tw.ⲆⲆⵠ.y && m + 50 >= -Tw.ⲆⲆⵠ.y) {
                        Lv(k, p + 88, m - 88, Tw.Δⵠᐃⵠ[1], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 4);
                    }
                    if ((A.ⵠΔⲆ & 2) !== 0 && -Tw.ⲆⲆⵠ.x >= k - 235 - On && -Tw.ⲆⲆⵠ.x <= j + 350 && -Tw.ⲆⲆⵠ.y >= m - Hn - 275 && -Tw.ⲆⲆⵠ.y <= m + 490) {
                        Gv(m - 230, k - 230, j + 230, Tw.Δⵠᐃⵠ[2], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 2);
                    }
                    if (A.ⵠΔⲆ & 1 && k - 235 - On <= -Tw.ⲆⲆⵠ.x && j + 350 >= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.y >= p - Hn - 390 && p + 315 >= -Tw.ⲆⲆⵠ.y) {
                        Hv(p + 310, k - 230, j + 230, Tw.Δⵠᐃⵠ[3], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 1);
                    }
                }
            }
            for (c = cf.ⵠⵠⵠⵠⲆ.length - 1; c >= 0; c--) {
                if ((A = cf.ⵠⵠⵠⵠⲆ[c]).ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                    f = cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ];
                    if (-Tw.ⲆⲆⵠ.x >= A.x1 - 230 - On && -Tw.ⲆⲆⵠ.x <= A.x2 + 330 && A.y1 - Hn <= -Tw.ⲆⲆⵠ.y && -Tw.ⲆⲆⵠ.y <= A.y2 + 100) {
                        j = A.x2;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            if ((A.ⵠΔⲆ & 8) === 0) {
                                j -= 414;
                            } else {
                                j -= 610;
                            }
                        }
                        k = A.x1;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            if ((A.ⵠΔⲆ & 4) === 0) {
                                k += 414;
                            } else {
                                k += 610;
                            }
                        }
                        m = A.y2;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            if (A.ⵠΔⲆ & 2) {
                                m -= 610;
                            } else {
                                m -= 414;
                            }
                        }
                        p = A.y1;
                        if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                            if (A.ⵠΔⲆ & 1) {
                                p += 610;
                            } else {
                                p += 414;
                            }
                        }
                        if (cf.transition) {
                            q = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                            Wn.fillStyle = tv(f.ⵠⲆⲆ[0], f.ⵠⲆⲆ[1], f.ⵠⲆⲆ[2], f.ⵠᐃⲆ[0], f.ⵠᐃⲆ[1], f.ⵠᐃⲆ[2], q);
                        } else {
                            Wn.fillStyle = f.ᐃⵠᐃⵠⲆ[cf.time];
                        }
                        w = Math.max(Tw.ⲆⲆⵠ.x + k - 2 - 230, 0);
                        x = Math.max(-Tw.ⲆⲆⵠ.x + On - j - 330 - 2, 0);
                        y = Math.max(Tw.ⲆⲆⵠ.y + p - 2, 0);
                        z = Math.max(-Tw.ⲆⲆⵠ.y + Hn - m - 100 - 2, 0);
                        Wn.beginPath();
                        Wn.fillRect(w, y, On - x - w, Hn - y - z);
                    }
                }
            }
            if (df.ⵠᐃΔΔⵠ) {
                Jv(iv, rv, sv, pv, qv, 695, "isl", 2);
                Jv(iv, rv, sv, pv, qv, 694, "isl", 2);
            }
            Jv(ov, rv, sv, pv, qv, 692, "isl", 2);
            if (df.ⵠᐃΔΔⵠ) {
                Jv(nv, rv, sv, pv, qv, 243, "de");
            }
            var B = cf.Δⵠⵠ[0];
            for (c = 0; c < B.length; c++) {
                for (var b = B[c], C = 0; C < b.ⲆⵠΔΔⲆ.length; C++) {
                    Iv(b.ⲆⵠΔΔⲆ[C]);
                }
            }
            if ((up += Xw * 40) > 60) {
                up -= 60;
            }
            Jv($u, rv, sv, pv, qv, 1024, "r", 0);
            c = 0;
            for (; cf.ⵠⵠⵠⵠⲆ.length > c; c++) {
                if ((A = cf.ⵠⵠⵠⵠⲆ[c]).ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                    j = A.x2;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        j -= 400;
                    }
                    k = A.x1;
                    if (A.ΔⵠΔ !== cf.ᐃΔⲆⵠⵠ) {
                        k += 400;
                    }
                    m = A.y2;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        m -= 300;
                    }
                    p = A.y1;
                    if (cf.ᐃΔⲆⵠⵠ !== A.ΔⵠΔ) {
                        p += 300;
                    }
                    if ((A.ⵠΔⲆ & 8) > 0 && -Tw.ⲆⲆⵠ.x >= j - On + 120 && j + 820 >= -Tw.ⲆⲆⵠ.x && p + 88 - Hn <= -Tw.ⲆⲆⵠ.y && -Tw.ⲆⲆⵠ.y <= m + 50) {
                        Dv(j, p + 88, m - 88, Tw.Δⵠᐃⵠ[0], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 8);
                    }
                    if ((A.ⵠΔⲆ & 4) > 0 && -Tw.ⲆⲆⵠ.x >= k - On - 700 && -Tw.ⲆⲆⵠ.x <= k - 20 && -Tw.ⲆⲆⵠ.y >= p + 88 - Hn && -Tw.ⲆⲆⵠ.y <= m + 50) {
                        Av(k, p + 88, m - 88, Tw.Δⵠᐃⵠ[1], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 4);
                    }
                    if ((A.ⵠΔⲆ & 2) > 0 && k - 235 - On <= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.x <= j + 350 && m - Hn - 275 <= -Tw.ⲆⲆⵠ.y && m + 490 >= -Tw.ⲆⲆⵠ.y) {
                        Bv(m - 230, k - 230, j + 230, Tw.Δⵠᐃⵠ[2], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 2);
                    }
                    if ((A.ⵠΔⲆ & 1) > 0 && k - 235 - On <= -Tw.ⲆⲆⵠ.x && -Tw.ⲆⲆⵠ.x <= j + 350 && p - Hn - 390 <= -Tw.ⲆⲆⵠ.y && -Tw.ⲆⲆⵠ.y <= p + 315) {
                        zv(p + 310, k - 230, j + 230, Tw.Δⵠᐃⵠ[3], cf.ᐃᐃⲆⲆᐃ[A.ΔⵠΔ], A.ⵠΔⲆ & 1);
                    }
                }
            }
        })();
        (function () {
            var R = pv;
            var e = qv;
            var i = rv;
            var t = sv;
            if (df.ⵠᐃΔΔⵠ) {
                Jv(ov, i, t, R, e, 621, "l", 2);
            }
            if (df.ⵠᐃΔΔⵠ) {
                Jv(ov, i, t, R, e, Ur.ΔⲆΔⵠⵠ, "la", 5);
            }
            Jv(ov, i, t, R, e, 203, "la", 5);
            Jv(iv, i, t, R, e, 620, "l", 2);
            if (df.ⵠᐃΔΔⵠ) {
                Jv(mv, i, t, R, e, 203, "la", 5);
                Jv(iv, i, t, R, e, 619, "l", 2);
            }
            Jv(ov, i, t, R, e, 1052, "ma", 4);
            for (var n = cf.Δⵠⵠ[76], X = 0; X < n.length; X++) {
                n[X].ᐃΔⲆⲆⵠᐃⲆ();
            }
            var Y = cf.Δⵠⵠ[0];
            for (X = 0; Y.length > X; X++) {
                for (var aa = Y[X], ba = 0; aa.ⲆⲆⲆⲆⲆ.length > ba; ba++) {
                    Mv(aa.ⲆⲆⲆⲆⲆ[ba]);
                }
            }
            var ca = cf.Δⵠⵠ[30];
            for (X = 0; X < ca.length; X++) {
                vv(ca[X], 125);
                ca[X].ⲆᐃⵠΔⵠ(ca[X].info);
            }
            var l = cf.Δⵠⵠ[18];
            for (X = 0; l.length > X; X++) {
                if (l[X].action == 2) {
                    uv(l[X]);
                }
            }
            var da = cf.Δⵠⵠ[1];
            for (X = 0; da.length > X; X++) {
                uv(da[X], 113);
            }
            var ea = cf.Δⵠⵠ[22];
            for (X = 0; X < ea.length; X++) {
                uv(ea[X]);
            }
            var fa = cf.Δⵠⵠ[23];
            for (X = 0; X < fa.length; X++) {
                uv(fa[X]);
            }
            var ha = cf.Δⵠⵠ[6];
            for (X = 0; X < ha.length; X++) {
                uv(ha[X], 118);
            }
            var v = cf.Δⵠⵠ[36];
            for (X = 0; X < v.length; X++) {
                vv(v[X]);
            }
            var m = cf.Δⵠⵠ[33];
            for (X = 0; m.length > X; X++) {
                vv(m[X], 141);
            }
            var c = cf.Δⵠⵠ[3];
            for (X = 0; X < c.length; X++) {
                uv(c[X]);
            }
            c = cf.Δⵠⵠ[43];
            X = 0;
            for (; c.length > X; X++) {
                uv(c[X]);
            }
            c = cf.Δⵠⵠ[3];
            X = 0;
            for (; c.length > X; X++) {
                Kv(c[X]);
            }
            var ia = cf.Δⵠⵠ[44];
            for (X = 0; X < ia.length; X++) {
                if (!(ia[X].info & 15) || ia[X].info === 10) {
                    vv(ia[X]);
                }
            }
            var ja = cf.Δⵠⵠ[54];
            for (X = 0; ja.length > X; X++) {
                if ((ja[X].info & 15) === 0 || ja[X].info === 10) {
                    vv(ja[X]);
                }
            }
            var ka = cf.Δⵠⵠ[55];
            for (X = 0; ka.length > X; X++) {
                if (!(ka[X].info & 15) || ka[X].info === 10) {
                    vv(ka[X]);
                }
            }
            var la = cf.Δⵠⵠ[79];
            for (X = 0; X < la.length; X++) {
                vv(la[X], 132);
            }
            var ma = cf.Δⵠⵠ[39];
            for (X = 0; X < ma.length; X++) {
                if ((ma[X].info & 15) === 0 || ma[X].info === 10) {
                    vv(ma[X]);
                }
            }
            var na = cf.Δⵠⵠ[40];
            for (X = 0; X < na.length; X++) {
                if ((na[X].info & 15) === 0 || na[X].info === 10) {
                    vv(na[X]);
                }
            }
            var oa = cf.Δⵠⵠ[37];
            for (X = 0; oa.length > X; X++) {
                if (!(oa[X].info & 15) || oa[X].info === 10) {
                    vv(oa[X]);
                }
            }
            la = cf.Δⵠⵠ[31];
            X = 0;
            for (; la.length > X; X++) {
                vv(la[X]);
            }
            var pa = cf.Δⵠⵠ[86];
            for (X = 0; pa.length > X; X++) {
                vv(pa[X], 250, 729);
            }
            var A = cf.Δⵠⵠ[82];
            for (X = 0; A.length > X; X++) {
                vv(A[X], 250, 729);
            }
            var k = cf.Δⵠⵠ[87];
            for (X = 0; X < k.length; X++) {
                vv(k[X], 854, 859);
            }
            var x = cf.Δⵠⵠ[45];
            for (X = 0; X < x.length; X++) {
                if (x[X].info & 1) {
                    vv(x[X], 336);
                }
            }
            x = cf.Δⵠⵠ[46];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info & 1) {
                    vv(x[X], 373);
                }
            }
            x = cf.Δⵠⵠ[47];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info) {
                    vv(x[X], 376);
                }
            }
            x = cf.Δⵠⵠ[48];
            X = 0;
            for (; X < x.length; X++) {
                if (x[X].info) {
                    vv(x[X], 379);
                }
            }
            x = cf.Δⵠⵠ[49];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info) {
                    vv(x[X], 500);
                }
            }
            x = cf.Δⵠⵠ[53];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info) {
                    vv(x[X], 376);
                }
            }
            x = cf.Δⵠⵠ[10];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info & 1) {
                    vv(x[X], 336);
                }
            }
            x = cf.Δⵠⵠ[15];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info & 1) {
                    vv(x[X], 373);
                }
            }
            x = cf.Δⵠⵠ[16];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info) {
                    vv(x[X], 376);
                }
            }
            x = cf.Δⵠⵠ[17];
            X = 0;
            for (; x.length > X; X++) {
                if (x[X].info) {
                    vv(x[X], 379);
                }
            }
            x = cf.Δⵠⵠ[21];
            X = 0;
            for (; X < x.length; X++) {
                if (x[X].info) {
                    vv(x[X], 500);
                }
            }
            x = cf.Δⵠⵠ[51];
            X = 0;
            for (; X < x.length; X++) {
                if (x[X].info) {
                    vv(x[X], 376);
                }
            }
            var qa = cf.Δⵠⵠ[80];
            for (X = 0; X < qa.length; X++) {
                vv(qa[X], 264, 322);
            }
            var M = cf.Δⵠⵠ[41];
            for (X = 0; M.length > X; X++) {
                vv(M[X], 198);
            }
            n = cf.Δⵠⵠ[76];
            X = 0;
            for (; X < n.length; X++) {
                vv(n[X], Ur.ΔᐃᐃᐃⲆⲆᐃ, Ur.ⵠⲆᐃⲆⲆⵠᐃΔⲆ);
            }
            var ra = cf.Δⵠⵠ[91];
            for (X = 0; ra.length > X; X++) {
                if (ra[X].ⲆᐃⵠΔⵠᐃΔ === 0) {
                    vv(ra[X]);
                }
            }
            Y = cf.Δⵠⵠ[0];
            X = 0;
            for (; Y.length > X; X++) {
                aa = Y[X];
                if (Y[X].ⲆⲆΔΔᐃ !== 227 && Y[X].ⲆⲆΔΔᐃ !== 228 && Y[X].ⲆⲆΔΔᐃ !== 229 && Y[X].ⲆⲆΔΔᐃ !== 230 && Y[X].ⲆⲆΔΔᐃ !== 91) {
                    if (aa.ⵠⵠΔΔⵠΔⲆ === 0) {
                        if (aa.ⲆⵠΔⲆⲆᐃⲆ > 0.001) {
                            aa.ⲆⵠΔⲆⲆᐃⲆ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(aa.ⲆⵠΔⲆⲆᐃⲆ, 0, 0.018);
                            var sa = 1 + Math.min(1, Math.max(aa.ⲆⵠΔⲆⲆᐃⲆ, 0) / 100) * 0.18;
                            Wn.save();
                            Wn.scale(sa, sa);
                            Tw.ⲆⲆⵠ.x /= sa;
                            Tw.ⲆⲆⵠ.y /= sa;
                            aa.x /= sa;
                            aa.y /= sa;
                            aa.r.x /= sa;
                            aa.r.y /= sa;
                            aa.ⲆᐃⵠⵠᐃⵠΔ();
                            aa.Δᐃᐃⵠ();
                            Tw.ⲆⲆⵠ.x *= sa;
                            Tw.ⲆⲆⵠ.y *= sa;
                            aa.x *= sa;
                            aa.y *= sa;
                            aa.r.x *= sa;
                            aa.r.y *= sa;
                            Wn.restore();
                        } else {
                            aa.ⲆᐃⵠΔⵠᐃΔ = 0;
                            aa.ⲆᐃⵠⵠᐃⵠΔ();
                            aa.Δᐃᐃⵠ();
                        }
                    }
                } else if (aa.ⵠⲆΔⵠΔ <= 180) {
                    Wn.save();
                    sa = 1 + Math.min(1, Math.max(aa.ΔⵠΔⵠⵠ - 30, 0) / 180) * 0.35;
                    Wn.scale(sa, sa);
                    Tw.ⲆⲆⵠ.x /= sa;
                    Tw.ⲆⲆⵠ.y /= sa;
                    aa.x /= sa;
                    aa.y /= sa;
                    aa.r.x /= sa;
                    aa.r.y /= sa;
                    aa.ⲆᐃⵠΔⵠᐃΔ = 0;
                    aa.ⲆᐃⵠⵠᐃⵠΔ();
                    aa.Δᐃᐃⵠ();
                    Tw.ⲆⲆⵠ.x *= sa;
                    Tw.ⲆⲆⵠ.y *= sa;
                    aa.x *= sa;
                    aa.y *= sa;
                    aa.r.x *= sa;
                    aa.r.y *= sa;
                    Wn.restore();
                }
            }
            M = cf.Δⵠⵠ[41];
            X = 0;
            for (; X < M.length; X++) {
                vv(M[X], 913);
            }
            var ta = cf.Δⵠⵠ[67];
            for (X = 0; X < ta.length; X++) {
                vv(ta[X]);
            }
            var I = cf.Δⵠⵠ[62];
            for (X = 0; I.length > X; X++) {
                vv(I[X], 419, 461);
            }
            var S = cf.Δⵠⵠ[70];
            for (X = 0; S.length > X; X++) {
                vv(S[X]);
            }
            var Q = cf.Δⵠⵠ[60];
            for (X = 0; Q.length > X; X++) {
                vv(Q[X], 299, 326);
            }
            var _ = cf.Δⵠⵠ[72];
            for (X = 0; X < _.length; X++) {
                vv(_[X], 232, 1077);
            }
            var F = cf.Δⵠⵠ[73];
            for (X = 0; F.length > X; X++) {
                vv(F[X], 233, 1092);
            }
            ia = cf.Δⵠⵠ[44];
            X = 0;
            for (; ia.length > X; X++) {
                if (ia[X].info & 15 && ia[X].info !== 10) {
                    vv(ia[X]);
                }
            }
            ja = cf.Δⵠⵠ[54];
            X = 0;
            for (; X < ja.length; X++) {
                if (ja[X].info & 15 && ja[X].info !== 10) {
                    vv(ja[X]);
                }
            }
            ka = cf.Δⵠⵠ[89];
            X = 0;
            for (; ka.length > X; X++) {
                vv(ka[X], 239);
            }
            ka = cf.Δⵠⵠ[55];
            X = 0;
            for (; X < ka.length; X++) {
                if (ka[X].info & 15 && ka[X].info !== 10) {
                    vv(ka[X]);
                }
            }
            c = cf.Δⵠⵠ[43];
            X = 0;
            for (; c.length > X; X++) {
                Kv(c[X]);
            }
            ma = cf.Δⵠⵠ[39];
            X = 0;
            for (; X < ma.length; X++) {
                if ((ma[X].info & 15) !== 0 && ma[X].info !== 10) {
                    vv(ma[X]);
                }
            }
            na = cf.Δⵠⵠ[40];
            X = 0;
            for (; na.length > X; X++) {
                if ((na[X].info & 15) !== 0 && na[X].info !== 10) {
                    vv(na[X]);
                }
            }
            oa = cf.Δⵠⵠ[37];
            X = 0;
            for (; oa.length > X; X++) {
                if (oa[X].info & 15 && oa[X].info !== 10) {
                    vv(oa[X]);
                }
            }
            var G = cf.Δⵠⵠ[81];
            for (X = 0; G.length > X; X++) {
                vv(G[X], 691, 697);
            }
            var j = cf.Δⵠⵠ[66];
            for (X = 0; j.length > X; X++) {
                vv(j[X], 637, 687);
            }
            var W = cf.Δⵠⵠ[65];
            for (X = 0; W.length > X; X++) {
                vv(W[X], 673, 688);
            }
            var L = cf.Δⵠⵠ[61];
            for (X = 0; L.length > X; X++) {
                vv(L[X], 260, 333);
            }
            var O = cf.Δⵠⵠ[88];
            for (X = 0; X < O.length; X++) {
                vv(O[X], 1033, 1034);
            }
            var N = cf.Δⵠⵠ[63];
            for (X = 0; X < N.length; X++) {
                vv(N[X], 445, 462);
            }
            var H = cf.Δⵠⵠ[77];
            for (X = 0; X < H.length; X++) {
                vv(H[X]);
            }
            var q = cf.Δⵠⵠ[68];
            for (X = 0; X < q.length; X++) {
                vv(q[X], 918, 919);
            }
            var U = cf.Δⵠⵠ[71];
            for (X = 0; X < U.length; X++) {
                vv(U[X]);
            }
            var K = cf.Δⵠⵠ[78];
            for (X = 0; X < K.length; X++) {
                vv(K[X], 1218, 1219);
            }
            var V = cf.Δⵠⵠ[64];
            for (X = 0; V.length > X; X++) {
                if (V[X].scale === 1) {
                    vv(V[X], 449, 463);
                }
            }
            V = cf.Δⵠⵠ[69];
            X = 0;
            for (; V.length > X; X++) {
                if (V[X].scale === 1) {
                    vv(V[X], 450, 464);
                }
            }
            var ua = cf.Δⵠⵠ[11];
            for (X = 0; ua.length > X; X++) {
                vv(ua[X]);
            }
            var va = cf.Δⵠⵠ[2];
            for (X = 0; X < va.length; X++) {
                vv(va[X], 114);
            }
            l = cf.Δⵠⵠ[18];
            X = 0;
            for (; l.length > X; X++) {
                vv(l[X]);
            }
            var wa = cf.Δⵠⵠ[34];
            for (X = 0; X < wa.length; X++) {
                vv(wa[X]);
            }
            x = cf.Δⵠⵠ[10];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 166);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[15];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 171);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[16];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 172);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[17];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 173);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[21];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 124);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[51];
            X = 0;
            for (; x.length > X; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 218);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[45];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 212);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[46];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 213);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[47];
            X = 0;
            for (; x.length > X; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 214);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[48];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 215);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[49];
            X = 0;
            for (; x.length > X; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 216);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            x = cf.Δⵠⵠ[53];
            X = 0;
            for (; X < x.length; X++) {
                if (!(x[X].info & 1)) {
                    vv(x[X], 220);
                }
                x[X].ⲆᐃⵠΔⵠ(x[X].info >> 1);
            }
            var xa = cf.Δⵠⵠ[4];
            for (X = 0; xa.length > X; X++) {
                vv(xa[X], 162);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            xa = cf.Δⵠⵠ[7];
            X = 0;
            for (; X < xa.length; X++) {
                vv(xa[X], 163);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            xa = cf.Δⵠⵠ[8];
            X = 0;
            for (; xa.length > X; X++) {
                vv(xa[X], 164);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            xa = cf.Δⵠⵠ[9];
            X = 0;
            for (; xa.length > X; X++) {
                vv(xa[X], 165);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            xa = cf.Δⵠⵠ[19];
            X = 0;
            for (; xa.length > X; X++) {
                vv(xa[X], 122);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            xa = cf.Δⵠⵠ[50];
            X = 0;
            for (; X < xa.length; X++) {
                vv(xa[X], 217);
                xa[X].ⲆᐃⵠΔⵠ(xa[X].info);
            }
            var ya = cf.Δⵠⵠ[5];
            for (X = 0; ya.length > X; X++) {
                vv(ya[X], 160);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            ya = cf.Δⵠⵠ[12];
            X = 0;
            for (; ya.length > X; X++) {
                vv(ya[X], 168);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            ya = cf.Δⵠⵠ[13];
            X = 0;
            for (; ya.length > X; X++) {
                vv(ya[X], 169);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            ya = cf.Δⵠⵠ[14];
            X = 0;
            for (; ya.length > X; X++) {
                vv(ya[X], 170);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            ya = cf.Δⵠⵠ[20];
            X = 0;
            for (; X < ya.length; X++) {
                vv(ya[X], 123);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            ya = cf.Δⵠⵠ[52];
            X = 0;
            for (; X < ya.length; X++) {
                vv(ya[X], 219);
                ya[X].ⲆᐃⵠΔⵠ(ya[X].info);
            }
            var za = cf.Δⵠⵠ[35];
            for (X = 0; za.length > X; X++) {
                var Aa = za[X];
                if (Aa.info > 0) {
                    vv(Aa, 788);
                } else {
                    vv(Aa, 182);
                }
            }
            var Ba = cf.Δⵠⵠ[29];
            for (X = 0; Ba.length > X; X++) {
                vv(Ba[X], 159);
            }
            Jv(ov, i, t, R, e, 111, "g", 2);
            Jv(ov, i, t, R, e, 415, "gw", 2);
            Jv(ov, i, t, R, e, 112, "d", 2);
            Jv(ov, i, t, R, e, 416, "dw", 2);
            Jv(ov, i, t, R, e, 110, "p", 0);
            Jv(ov, i, t, R, e, 241, "m", 2);
            Jv(ov, i, t, R, e, 121, "a", 2);
            Jv(ov, i, t, R, e, 202, "re", 2);
            Jv(ov, i, t, R, e, 679, "cs", 3, 3);
            Jv(ov, i, t, R, e, 679, "cs", 2, 2);
            Jv(ov, i, t, R, e, 679, "cs", 1, 1);
            Jv(ov, i, t, R, e, 679, "cs", 0, 0);
            Jv(ov, i, t, R, e, 676, "cs", 3, 3);
            Jv(ov, i, t, R, e, 676, "cs", 2, 2);
            Jv(ov, i, t, R, e, 676, "cs", 1, 1);
            Jv(ov, i, t, R, e, 676, "cs", 0, 0);
            var Ca = cf.Δⵠⵠ[100];
            for (X = 0; Ca.length > X; X++) {
                for (ba = 0; ba < Ca[X].info; ba++) {
                    vv(Ca[X].ΔⲆⲆᐃ[ba], 294);
                }
            }
            Jv(ov, i, t, R, e, 108, "s", 2);
            var Da = cf.Δⵠⵠ[24];
            for (X = 0; Da.length > X; X++) {
                vv(Da[X]);
            }
            Da = cf.Δⵠⵠ[25];
            X = 0;
            for (; Da.length > X; X++) {
                vv(Da[X]);
            }
            Da = cf.Δⵠⵠ[26];
            X = 0;
            for (; Da.length > X; X++) {
                vv(Da[X]);
            }
            Da = cf.Δⵠⵠ[27];
            X = 0;
            for (; Da.length > X; X++) {
                vv(Da[X]);
            }
            Da = cf.Δⵠⵠ[28];
            X = 0;
            for (; Da.length > X; X++) {
                vv(Da[X]);
            }
            var Ea = cf.Δⵠⵠ[32];
            for (X = 0; X < Ea.length; X++) {
                uv(Ea[X]);
            }
            da = cf.Δⵠⵠ[1];
            X = 0;
            for (; da.length > X; X++) {
                Kv(da[X]);
            }
            da = cf.Δⵠⵠ[6];
            X = 0;
            for (; X < da.length; X++) {
                Kv(da[X]);
            }
            l = cf.Δⵠⵠ[18];
            X = 0;
            for (; l.length > X; X++) {
                if (l[X].action == 2) {
                    Kv(l[X]);
                }
            }
            wa = cf.Δⵠⵠ[34];
            X = 0;
            for (; X < wa.length; X++) {
                Kv(wa[X]);
            }
            ea = cf.Δⵠⵠ[22];
            X = 0;
            for (; ea.length > X; X++) {
                Kv(ea[X]);
            }
            fa = cf.Δⵠⵠ[23];
            X = 0;
            for (; X < fa.length; X++) {
                Kv(fa[X]);
                fa[X].ⲆᐃⵠΔⵠ(fa[X].info);
            }
            Jv(ov, i, t, R, e, 989, "c", 0);
            Jv(ov, i, t, R, e, 109, "t", 5, 4);
            Jv(ov, i, t, R, e, 413, "f", 2, 2);
            Jv(ov, i, t, R, e, 693, "plm", 0, 0);
            Jv(ov, i, t, R, e, 307, "b", 3, 2);
            Jv(ov, i, t, R, e, 109, "t", 3, 2);
            Jv(ov, i, t, R, e, 307, "b", 1, 0);
            Jv(ov, i, t, R, e, 413, "f", 1, 1);
            Jv(ov, i, t, R, e, 693, "plm", 1, 1);
            Jv(ov, i, t, R, e, 109, "t", 1, 0);
            Jv(ov, i, t, R, e, 413, "f", 0, 0);
            Jv(ov, i, t, R, e, 693, "plm", 2, 2);
            Ea = cf.Δⵠⵠ[32];
            X = 0;
            for (; Ea.length > X; X++) {
                Kv(Ea[X]);
            }
            var Fa = cf.Δⵠⵠ[56];
            for (X = 0; X < Fa.length; X++) {
                vv(Fa[X], 221);
            }
            Y = cf.Δⵠⵠ[0];
            X = 0;
            for (; X < Y.length; X++) {
                if ((aa = Y[X]).ⵠⵠΔΔⵠΔⲆ === 1 && (aa.ⵠⲆΔⵠΔ < 180 || aa.ⲆⲆΔΔᐃ !== 227 && aa.ⲆⲆΔΔᐃ !== 228 && aa.ⲆⲆΔΔᐃ !== 91 && aa.ⲆⲆΔΔᐃ !== 229 && aa.ⲆⲆΔΔᐃ !== 230)) {
                    aa.ⲆⵠΔⲆⲆᐃⲆ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(aa.ⲆⵠΔⲆⲆᐃⲆ, 100, 0.018);
                    sa = 1 + Math.min(1, Math.max(aa.ⲆⵠΔⲆⲆᐃⲆ, 0) / 100) * 0.18;
                    Wn.save();
                    Wn.scale(sa, sa);
                    Tw.ⲆⲆⵠ.x /= sa;
                    Tw.ⲆⲆⵠ.y /= sa;
                    aa.x /= sa;
                    aa.y /= sa;
                    aa.r.x /= sa;
                    aa.r.y /= sa;
                    aa.ⲆᐃⵠⵠᐃⵠΔ();
                    aa.Δᐃᐃⵠ();
                    Tw.ⲆⲆⵠ.x *= sa;
                    Tw.ⲆⲆⵠ.y *= sa;
                    aa.x *= sa;
                    aa.y *= sa;
                    aa.r.x *= sa;
                    aa.r.y *= sa;
                    Wn.restore();
                }
            }
            var Ga = cf.Δⵠⵠ[38];
            for (X = 0; Ga.length > X; X++) {
                vv(Ga[X], 190);
                Ga[X].ⲆᐃⵠΔⵠ(Ga[X].info);
            }
            var Ha = cf.Δⵠⵠ[90];
            for (X = 0; Ha.length > X; X++) {
                vv(Ha[X], 245, 246);
            }
            var Ia = cf.Δⵠⵠ[42];
            for (X = 0; X < Ia.length; X++) {
                vv(Ia[X], 201);
            }
            Y = cf.Δⵠⵠ[0];
            X = 0;
            for (; Y.length > X; X++) {
                if (((aa = Y[X]).ⲆⲆΔΔᐃ === 227 || aa.ⲆⲆΔΔᐃ === 228 || aa.ⲆⲆΔΔᐃ === 91 || aa.ⲆⲆΔΔᐃ === 229 || aa.ⲆⲆΔΔᐃ === 230) && aa.ⵠⲆΔⵠΔ > 180) {
                    aa.ⲆᐃⵠΔⵠᐃΔ = 1;
                    Wn.save();
                    sa = 1 + Math.min(1, Math.max(aa.ΔⵠΔⵠⵠ - 30, 0) / 180) * 0.35;
                    Wn.scale(sa, sa);
                    Tw.ⲆⲆⵠ.x /= sa;
                    Tw.ⲆⲆⵠ.y /= sa;
                    aa.x /= sa;
                    aa.y /= sa;
                    aa.r.x /= sa;
                    aa.r.y /= sa;
                    aa.ⲆᐃⵠⵠᐃⵠΔ();
                    aa.Δᐃᐃⵠ();
                    Tw.ⲆⲆⵠ.x *= sa;
                    Tw.ⲆⲆⵠ.y *= sa;
                    aa.x *= sa;
                    aa.y *= sa;
                    aa.r.x *= sa;
                    aa.r.y *= sa;
                    Wn.restore();
                }
            }
            ra = cf.Δⵠⵠ[91];
            X = 0;
            for (; X < ra.length; X++) {
                if (ra[X].ⲆᐃⵠΔⵠᐃΔ === 1) {
                    vv(ra[X]);
                }
            }
            V = cf.Δⵠⵠ[64];
            X = 0;
            for (; V.length > X; X++) {
                if (V[X].scale > 1) {
                    vv(V[X], 449, 463);
                }
            }
            V = cf.Δⵠⵠ[69];
            X = 0;
            for (; V.length > X; X++) {
                if (V[X].scale > 1) {
                    vv(V[X], 450, 464);
                }
            }
            var Ja = cf.Δⵠⵠ[74];
            for (X = 0; X < Ja.length; X++) {
                vv(Ja[X], 235, 1107);
            }
            var Ka = cf.Δⵠⵠ[75];
            for (X = 0; Ka.length > X; X++) {
                vv(Ka[X], 238, 1128);
            }
            if ((hv += Xw * 15) > 60) {
                hv -= 60;
            }
            Jv(jv, i, t, R, e, 1041, "fo", 2);
            Jv(jv, i, t, R, e, 244, "fod", 2);
        })();
        if (df.ⵠᐃΔΔⵠ && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
            (function () {
                var a = Tw.ᐃΔⵠᐃΔ;
                if (a.ᐃⵠⲆΔΔ === 0) {
                    a.ⵠᐃΔⵠΔ = Math.max(0, a.ⵠᐃΔⵠΔ - Xw / 10);
                } else {
                    a.ⵠᐃΔⵠΔ = Math.min(1, a.ⵠᐃΔⵠΔ + Xw / 10);
                }
                for (var b = a.ⵠⵠΔⵠᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⵠⵠΔ(d);
                    xv(471, d.id, Tw.ⲆⲆⵠ.x + d.x, Tw.ⲆⲆⵠ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    d = b[c];
                    if (d.ⵠᐃⵠΔΔ <= 0 || -Tw.ⲆⲆⵠ.x + On < d.x || d.x < -Tw.ⲆⲆⵠ.x - Tw.ⲆⲆⵠ.w / 2 || d.y > -Tw.ⲆⲆⵠ.y + Hn) {
                        b.splice(c, 1);
                    }
                }
                var e = -Tw.ⲆⲆⵠ.y;
                if (cf.ⵠΔΔⲆⲆ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Tw.ᐃⲆΔⵠⵠ;
                if (a.ᐃⵠⲆΔΔ === 0) {
                    a.ⵠᐃΔⵠΔ = Math.max(0, a.ⵠᐃΔⵠΔ - Xw / 10);
                } else {
                    a.ⵠᐃΔⵠΔ = Math.min(1, a.ⵠᐃΔⵠΔ + Xw / 10);
                }
                for (var b = a.ⵠⵠΔⵠᐃ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⵠⵠΔ(d);
                    xv(470, d.id, Tw.ⲆⲆⵠ.x + d.x, Tw.ⲆⲆⵠ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ⵠᐃⵠΔΔ <= 0 || -Tw.ⲆⲆⵠ.x + On < d.x || d.x < -Tw.ⲆⲆⵠ.x || d.y > -Tw.ⲆⲆⵠ.y + Hn) {
                        b.splice(c, 1);
                    }
                }
                var e = -Tw.ⲆⲆⵠ.y;
                if (cf.ΔⵠᐃⲆᐃ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Tw.ΔᐃⵠⵠⲆⵠⲆ;
                for (var b = a.ⵠⵠΔⵠᐃ, c = 0; b.length > c; c++) {
                    var d = b[c];
                    a.ⵠⵠΔ(d);
                    xv(942, d.id, Tw.ⲆⲆⵠ.x + d.x, Tw.ⲆⲆⵠ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ⵠᐃⵠΔΔ <= 0 || -Tw.ⲆⲆⵠ.x + On < d.x || d.x < -Tw.ⲆⲆⵠ.x || d.y > -Tw.ⲆⲆⵠ.y + Hn) {
                        b.splice(c, 1);
                    }
                }
                var e = -Tw.ⲆⲆⵠ.y;
                if (cf.ⲆⵠⲆⲆᐃ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (cf.transition && a) {
            cf.transition = false;
            cf.ⵠⵠΔᐃ.ⵠΔⲆ = 0;
            cf.ⵠⵠΔᐃ.ⵠⲆΔ = Zl;
        }
    }
    function zv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Tw.ⲆⲆⵠ.y + j - 700;
        var l = Math.max(Tw.ⲆⲆⵠ.x + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.x + On - i - 100, 0);
        var t = l;
        var b = On - l - g;
        if (o) {
            var d = q.ΔⵠΔ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = t;
        var c = u;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ΔⵠΔ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ΔⵠΔ(s);
        } else {
            d = s.r;
        }
        if (A < u + (f = h + 350 - u + d.x) - 3) {
            var k = xo;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f - 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h + 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(F, c, C, p);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 70, 76, 42, 139, 155, N);
            } else {
                Wn.fillStyle = Ur.ⵠⲆⲆⲆᐃⵠⲆ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                    Wn.fillStyle = tv(17, 94, 96, 169, 214, 211, N);
                } else {
                    Wn.fillStyle = Ur.ΔⲆⵠᐃΔΔⲆ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
            } else {
                Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
            }
            Wn.fillRect(J, L, B, M);
        }
        if (df.ⵠᐃΔΔⵠ && o) {
            q.ΔⵠᐃᐃⲆⵠⲆⵠΔ(A, E, G, h, -Tw.ⲆⲆⵠ.x + F, -Tw.ⲆⲆⵠ.x + F + C);
        }
    }
    function Av(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Tw.ⲆⲆⵠ.x + j - 700;
        var l = Math.max(Tw.ⲆⲆⵠ.y + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.y + Hn - i - 100, 0);
        var t = l;
        var b = Hn - l - g;
        if (o) {
            var d = q.ΔⵠΔ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var c = t;
        var p = d.x + 0;
        var C = b;
        var G = u += d.x + 0 - 2;
        if (o) {
            d = q.ΔⵠΔ(r);
        } else {
            d = r.r;
        }
        var f = h + 250 - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ΔⵠΔ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + 350 - u + d.x) - 3 > A) {
            var k = sh;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f - 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h + 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(F, c, p, C);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 70, 76, 42, 139, 155, N);
            } else {
                Wn.fillStyle = Ur.ⵠⲆⲆⲆᐃⵠⲆ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                    Wn.fillStyle = tv(17, 94, 96, 169, 214, 211, N);
                } else {
                    Wn.fillStyle = Ur.ΔⲆⵠᐃΔΔⲆ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
            } else {
                Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
            }
            Wn.fillRect(L, J, M, B);
        }
        if (df.ⵠᐃΔΔⵠ && o) {
            q.ⲆⵠᐃⲆⲆⲆⲆⲆⵠ(A, E, G, h, -Tw.ⲆⲆⵠ.y + c, -Tw.ⲆⲆⵠ.y + c + C);
        }
    }
    function Bv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Tw.ⲆⲆⵠ.y + j + 710;
        var l = Math.max(Tw.ⲆⲆⵠ.x + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.x + On - i - 100, 0);
        var t = l;
        var b = On - l - g;
        if (o) {
            var d = q.ΔⵠΔ(a);
        } else {
            d = a.r;
        }
        var u = h + 0;
        var F = u;
        var c = t;
        var p = -d.x + 0;
        var C = b;
        var G = u += -d.x + 0 + 2;
        if (o) {
            d = q.ΔⵠΔ(r);
        } else {
            d = r.r;
        }
        var f = h - 250 - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ΔⵠΔ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - 350 - u - d.x) < A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var E = u += f + 2;
        } else {
            k = false;
            u = A;
            E = -1;
        }
        f = h - 700 - u;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(c, F, C, p);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 70, 76, 42, 139, 155, N);
            } else {
                Wn.fillStyle = Ur.ⵠⲆⲆⲆᐃⵠⲆ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                    Wn.fillStyle = tv(17, 94, 96, 169, 214, 211, N);
                } else {
                    Wn.fillStyle = Ur.ΔⲆⵠᐃΔΔⲆ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
            } else {
                Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
            }
            Wn.fillRect(J, L, B, M);
        }
        if (df.ⵠᐃΔΔⵠ && o) {
            q.ΔᐃΔⲆⲆᐃΔⵠⵠ(A, E, G, h, -Tw.ⲆⲆⵠ.x + c, -Tw.ⲆⲆⵠ.x + c + C);
        }
    }
    function Cv(a, b, c, d) {
        if (cf.transition) {
            Wn.globalAlpha = 1;
            _c(Wn, Δⵠ[a][cf.time], c, d);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            _c(Wn, Δⵠ[a][cf.time], c, d);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            _c(Wn, b, c, d);
        }
    }
    function Dv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Tw.ⲆⲆⵠ.x + j + 820;
        var l = Math.max(Tw.ⲆⲆⵠ.y + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.y + Hn - i - 100, 0);
        var t = l;
        var b = Hn - l - g;
        if (o) {
            var d = q.ΔⵠΔ(a);
        } else {
            d = a.r;
        }
        var v = h + 0;
        var F = v;
        var p = t;
        var C = -d.x + 0;
        var G = b;
        var f = v += -d.x + 0 + 2;
        if (o) {
            d = q.ΔⵠΔ(r);
        } else {
            d = r.r;
        }
        var z = h - 250 - v - d.x;
        var H = v;
        var w = t;
        var K = z;
        var A = b;
        var k = (v += z + 2) - 2;
        if (o) {
            d = q.ΔⵠΔ(s);
        } else {
            d = s.r;
        }
        if (v + (z = h - 350 - v - d.x) < k) {
            var x = u;
            var L = v;
            var M = t;
            var B = z;
            var E = b;
            var D = v += z + 2;
        } else {
            x = false;
            v = k;
            D = -1;
        }
        z = h - 700 - v;
        if (cf.transition) {
            var N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(F, p, C, G);
        if (o) {
            if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 70, 76, 42, 139, 155, N);
            } else {
                Wn.fillStyle = Ur.ⵠⲆⲆⲆᐃⵠⲆ[cf.time];
            }
        } else if (cf.transition) {
            N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
        } else {
            Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
        }
        Wn.fillRect(H, w, K, A);
        if (x) {
            if (o) {
                if (cf.transition) {
                    N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                    Wn.fillStyle = tv(17, 94, 96, 169, 214, 211, N);
                } else {
                    Wn.fillStyle = Ur.ΔⲆⵠᐃΔΔⲆ[cf.time];
                }
            } else if (cf.transition) {
                N = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(9, 55, 63, 11, 106, 132, N);
            } else {
                Wn.fillStyle = Ur.ΔⵠⲆΔⵠ[cf.time];
            }
            Wn.fillRect(L, M, B, E);
        }
        if (df.ⵠᐃΔΔⵠ && o) {
            q.ⲆⲆΔⵠⲆᐃᐃΔΔ(k, D, f, h, -Tw.ⲆⲆⵠ.y + p, -Tw.ⲆⲆⵠ.y + p + G);
        }
    }
    function Ev(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (cf.transition) {
            Wn.globalAlpha = 1;
            _c(Wn, Δⵠ[b][cf.time], 0, 0, f, g, d, e, a, h);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            _c(Wn, Δⵠ[b][cf.time], 0, 0, f, g, d, e, a, h);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            _c(Wn, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function Fv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Tw.ⲆⲆⵠ.x + f + 820;
        var l = Math.max(Tw.ⲆⲆⵠ.y + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.y + Hn - i - 100, 0);
        var r = l;
        var b = Hn - l - g;
        if (n) {
            var d = j.ΔⵠΔ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ΔⵠΔ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ΔⵠΔ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠΔⵠⵠᐃⵠΔ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 77, 72, 252, 239, 187, p);
            } else {
                Wn.fillStyle = Ur.ᐃⲆⲆⲆΔΔΔ[cf.time];
            }
            Wn.fillRect(s, r, t, b);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(k.ⵠⲆⲆ[0], k.ⵠⲆⲆ[1], k.ⵠⲆⲆ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
            } else {
                Wn.fillStyle = k.ᐃⵠᐃⵠⲆ[cf.time];
            }
            Wn.fillRect(s, r, t, b);
        }
    }
    function Gv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Tw.ⲆⲆⵠ.y + f + 710;
        var l = Math.max(Tw.ⲆⲆⵠ.x + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.x + On - i - 100, 0);
        var r = l;
        var b = On - l - g;
        if (n) {
            var d = j.ΔⵠΔ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += -d + 0 + 2;
        if (n) {
            d = j.ΔⵠΔ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - 250 - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ΔⵠΔ(q).x;
        } else {
            d = q.r.x;
        }
        if (u > s + (t = h - 350 - s - d)) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - 700 - s;
        if (n > 0 && k.ⵠΔⵠⵠᐃⵠΔ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 77, 72, 252, 239, 187, p);
            } else {
                Wn.fillStyle = Ur.ᐃⲆⲆⲆΔΔΔ[cf.time];
            }
            Wn.fillRect(r, s, b, t);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(k.ⵠⲆⲆ[0], k.ⵠⲆⲆ[1], k.ⵠⲆⲆ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
            } else {
                Wn.fillStyle = k.ᐃⵠᐃⵠⲆ[cf.time];
            }
            Wn.fillRect(r, s, b, t);
        }
    }
    function Hv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Tw.ⲆⲆⵠ.y + f - 700;
        var l = Math.max(Tw.ⲆⲆⵠ.x + e, 0);
        var g = Math.max(-Tw.ⲆⲆⵠ.x + On - i - 100, 0);
        var r = l;
        var b = On - l - g;
        if (n) {
            var d = j.ΔⵠΔ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + 0;
        0;
        s += d + 0 - 2;
        if (n) {
            d = j.ΔⵠΔ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + 250 - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ΔⵠΔ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + 350 - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (n > 0 && k.ⵠΔⵠⵠᐃⵠΔ === 1) {
            if (cf.transition) {
                var p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 77, 72, 252, 239, 187, p);
            } else {
                Wn.fillStyle = Ur.ᐃⲆⲆⲆΔΔΔ[cf.time];
            }
            Wn.fillRect(r, s, b, t);
        } else {
            if (cf.transition) {
                p = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(k.ⵠⲆⲆ[0], k.ⵠⲆⲆ[1], k.ⵠⲆⲆ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], p);
            } else {
                Wn.fillStyle = k.ᐃⵠᐃⵠⲆ[cf.time];
            }
            Wn.fillRect(r, s, b, t);
        }
    }
    function Iv(a) {
        Wn.save();
        Wn.translate(Tw.ⲆⲆⵠ.x + a.x, Tw.ⲆⲆⵠ.y + a.y);
        Wn.rotate(a.angle);
        Wn.globalAlpha = a.alpha;
        var b = Δⵠ[a.id][cf.time];
        _c(Wn, b, -b.width / 2, -b.height / 2);
        Wn.globalAlpha = 1;
        Wn.restore();
    }
    function Jv(b, c, d, e, f, g, a, i, j, h) {
        if (cf.transition) {
            Wn.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            b(c, d, e, f, g, a, i, j, h);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Kv(a, b) {
        if (cf.transition) {
            Wn.globalAlpha = 1;
            a.ⲆⵠⲆᐃⵠ(b);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ;
            a.ⲆⵠⲆᐃⵠ(b);
            cf.time = cf.time ? 0 : 1;
            Wn.globalAlpha = 1;
        } else {
            a.ⲆⵠⲆᐃⵠ(b);
        }
    }
    function Lv(f, e, i, j, k, l) {
        var a = j.w1;
        var n = j.w2;
        var o = j.w3;
        var h = Tw.ⲆⲆⵠ.x + f - 700;
        var g = Math.max(Tw.ⲆⲆⵠ.y + e, 0);
        var q = Math.max(-Tw.ⲆⲆⵠ.y + Hn - i - 100, 0);
        var b = g;
        var d = Hn - g - q;
        if (l) {
            var r = j.ΔⵠΔ(a).x;
        } else {
            r = a.r.x;
        }
        var s = h + 0;
        0;
        s += r + 0 - 2;
        if (l) {
            r = j.ΔⵠΔ(n).x;
        } else {
            r = n.r.x;
        }
        var t = h + 250 - s + r;
        var u = (s += t - 2) - 2;
        if (l) {
            r = j.ΔⵠΔ(o).x;
        } else {
            r = o.r.x;
        }
        if (u < s + (t = h + 350 - s + r) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + 700 - s;
        if (l > 0 && k.ⵠΔⵠⵠᐃⵠΔ === 1) {
            if (cf.transition) {
                var v = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(15, 77, 72, 252, 239, 187, v);
            } else {
                Wn.fillStyle = Ur.ᐃⲆⲆⲆΔΔΔ[cf.time];
            }
            Wn.fillRect(s, b, t, d);
        } else {
            if (cf.transition) {
                v = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                Wn.fillStyle = tv(k.ⵠⲆⲆ[0], k.ⵠⲆⲆ[1], k.ⵠⲆⲆ[2], k.ⵠᐃⲆ[0], k.ⵠᐃⲆ[1], k.ⵠᐃⲆ[2], v);
            } else {
                Wn.fillStyle = k.ᐃⵠᐃⵠⲆ[cf.time];
            }
            Wn.fillRect(s, b, t, d);
        }
    }
    function Mv(a) {
        Wn.globalAlpha = a.alpha;
        Ft(Wn, a.x + Tw.ⲆⲆⵠ.x, a.y + Tw.ⲆⲆⵠ.y, a.r);
        Dt(Wn, Ur.ᐃⵠΔᐃⲆΔᐃ[cf.time]);
        Wn.globalAlpha = 1;
    }
    var Nv = 0;
    var Ov = 1;
    var Pv = 2;
    var Qv = 0;
    var Rv = 1;
    var Sv = 2;
    function Tv(c, e, f, i, j, k, n, p = 0, q = 0, h, r) {
        if (ii === h) {
            h = 0;
        }
        if (r === undefined) {
            r = 1;
        }
        if (k !== 1) {
            k = 0;
        }
        if (i) {
            var s = i;
        }
        var t;
        var u = {
            width: c,
            height: e,
            ᐃΔ: s,
            state: Qv,
            translate: {
                x: p,
                y: q,
                ⲆⲆⲆⵠΔ: p,
                ΔΔᐃⵠᐃ: q
            },
            ΔᐃⵠΔⲆΔⵠΔⵠ: k,
            Δᐃⵠⵠ: 0,
            callback: n,
            position: h,
            active: r
        };
        function d() {
            return u.ᐃΔ[u.state];
        }
        function v(a) {
            var b = u.translate;
            if (u.width === 0 || u.height === 0) {
                u.width = u.ᐃΔ[0].width;
                u.height = u.ᐃΔ[0].height;
            }
            return a.x > b.x && a.x < b.x + u.width / j && a.y > b.y && a.y < b.y + u.height / j;
        }
        k = function () {
            var a = 0;
            if (u.ΔᐃⵠΔⲆΔⵠΔⵠ === 1) {
                if (Rv === u.state || Sv === u.state) {
                    u.Δᐃⵠⵠ = (0 + Xw * 1000) % 1000;
                } else if (0 < 0) {
                    u.Δᐃⵠⵠ = 500 < 0 ? 0 + Xw * 1000 : 0 - Xw * 1000;
                    if (0 > 0 || 0 > 1000) {
                        u.Δᐃⵠⵠ = 0;
                    }
                }
                a = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(0 > 500 ? 2 : 0) * 0.2;
            }
            return a;
        };
        if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
            t = function (a) {
                var b = 1 + k();
                var c = d();
                var e = b * u.width / 2;
                var f = u.height * b / 2;
                var g = (e - u.width / 2) / 2;
                var h = (f - u.height / 2) / 2;
                _c(a, c, u.translate.x - g, u.translate.y - h, e, f);
            };
        } else if (j === 3) {
            t = function (b) {
                var c = d();
                var e = u.width;
                var f = u.height;
                var g = (e - u.width) / 2;
                var h = (f - u.height) / 2;
                _c(b, c, u.translate.x - g, u.translate.y - h, e, f);
            };
            j = 1;
        } else {
            t = function (a) {
                _c(a, d(), u.translate.x, u.translate.y);
            };
        }
        return {
            info: u,
            ΔᐃⲆⲆ: function (a, b, c) {
                if (v(b)) {
                    if (c == Ov) {
                        u.state = Sv;
                    } else if (c == Pv || Nv == c && u.state != Sv) {
                        u.state = Rv;
                    }
                    return ra;
                } else {
                    u.state = Qv;
                    return false;
                }
            },
            Δᐃᐃⵠ: t,
            ᐃⵠⵠᐃⵠⲆⲆ: v
        };
    }
    function Uv(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function Vv(f, j, i, k, n, p, a, q, t, w, l, g, u, b, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (a === undefined) {
            a = 0;
        }
        if (q === undefined) {
            q = 0;
        }
        if (ek === t) {
            t = 0;
        }
        if (b === ma) {
            b = 0;
        }
        var v = document.createElement("canvas");
        var m = v.getContext("2d");
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        n = n !== undefined ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
        v.width = n + a;
        v.height = k + q;
        if (p !== undefined) {
            if (l !== ma) {
                m.globalAlpha = l;
            }
            m.fillStyle = p;
            if (g !== undefined) {
                ⲆⲆΔⵠΔⲆΔⵠᐃ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, g);
                m.fill();
            } else {
                m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
            }
            m.globalAlpha = 1;
            if (t !== 0) {
                m.lineWidth = t;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (x !== undefined ? x + " " : "") + k + "px " + j;
        if (u !== ma) {
            m.strokeStyle = u;
            m.lineWidth = b;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        }
        m.fillStyle = i;
        m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        v.w2 = v.width / 2;
        v.ⵠⲆᐃⵠΔ = v.height / 2;
        return v;
    }
    function Wv(b, c, d, e, f, i) {
        const a = ((b + 45113) * 1664525 + 1013904223) % 4294967296;
        const j = (c | 18860) & ~(c & 18860);
        const k = ~(f & 10879) & (f | 10879);
        const h = (i | 40558) & ~(i & 40558);
        const l = Ef(a, j, ~(d & 56684) & 56684 | ~(d & 56684) & d, ((6470 + e) * 214013 + 2531011) % 4294967296);
        Ef(k, h, a, j);
        return ~(l & 29996) & l | ~(l & 29996) & 29996;
    }
    function Xv(b, c, d, e, f, g) {
        Ei($v, b, c, d, e, f, g);
        const a = lc(Zv[0], Zv[1], Zv[2], Zv[3]);
        const h = function (b, c, d, e, f, g) {
            _j($v, b, c, d, e, f, g);
            const a = st(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
            const h = function (a, b, c) {
                ti($v, a, b, c);
                const d = function (a, b) {
                    xi($v, a, b);
                    const c = Ms(Zv[0], Zv[1], Zv[0], Zv[1], Zv[0], Zv[1]);
                    const d = yc(Zv[0], Zv[1], Zv[0], Zv[1], Zv[0], Zv[1]);
                    return ((2 + (c ^ d)) * 16807 + 0) % 2147483647;
                }(Zv[0], Zv[1]);
                const e = lc(Zv[2], Zv[0], Zv[1], Zv[2]);
                return (0 << ((d ^ e) >> 8 & 255)) + (16 << ((d ^ e) >> 16 & 255)) + (24 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) & 255));
            }(Zv[5], Zv[0], Zv[1]);
            return (0 << ((a ^ h) & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255));
        }(Zv[4], Zv[5], Zv[0], Zv[1], Zv[2], Zv[3]);
        return (24 << ((a ^ h) >> 8 & 255)) + (8 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 16 & 255)) + (0 << ((a ^ h) >> 0 & 255));
    }
    function Yv(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ⲆⲆⲆⵠΔ: d,
            ΔΔᐃⵠᐃ: e
        };
        return {
            translate: g,
            Δᐃᐃⵠ: function (a) {
                _c(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    let Zv;
    let $v = wj;
    const _v = Wi;


    /*
          *****************
          *SCRIPT VARIABLE*
          *****************
          */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let lastrecycled = -1;
    let lastcrafted = -1;
    let Spectator;
    let LastMove = 0;

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
        AutoCraft: {
            e: false,
            k: "KeyK"
        },
        AutoRecycle: {
            e: false,
            k: "KeyL"
        },
        AutoBook: true,
        Spectator: {
            k: "KeyP"
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "Misc",
                open: false
            });
            gui.Register({
                type: "folder",
                label: "Binds",
                open: false
            });
            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });
            gui.Register({
                type: "folder",
                label: "AutoCraft&Recycle",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
            gui.Register([{
                type: "button",
                label: "Set Spectator Key",
                action: data => {
                    Utils.controls.setKeyBind("Spectator")
                }
            }, {
                type: "display",
                label: "Spectator Key:",
                object: Settings.Spectator,
                property: "k"
            }], {
                folder: "Binds"
            });
            gui.Register([{
                type: "checkbox",
                label: "AutoCraft",
                object: Settings.AutoCraft,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "checkbox",
                label: "AutoRecycle",
                object: Settings.AutoRecycle,
                property: "e",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "button",
                label: "Set AutoCraft Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoCraft")
                }
            }, {
                type: "display",
                label: "AutoCraft Key:",
                object: Settings.AutoCraft,
                property: "k"
            }, {
                type: "button",
                label: "Set AutoRecycle Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoRecycle")
                }
            }, {
                type: "display",
                label: "AutoRecycle Key:",
                object: Settings.AutoRecycle,
                property: "k"
            }], {
                folder: "AutoCraft&Recycle"
            });
            gui.Register([{
                type: "checkbox",
                label: "Auto-Book",
                object: Settings,
                property: "AutoBook",
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "Misc"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function AutoFeed() {
        if (ᐃⲆΔΔ.ᐃᐃⲆⵠ) {
            if (ᐃⲆΔΔ.ᐃᐃⲆⵠ.readyState === 1) {
                ᐃⲆΔΔ.ping();
            }
        }
    }

    function LouxInterval() {
        if (ᐃⲆΔΔ.ᐃᐃⲆⵠ && ᐃⲆΔΔ.ᐃᐃⲆⵠ.readyState === 1 && Tw && Tw.ᐃΔΔΔᐃ) {
            let myPlayer = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang <= 15; ang++) {
                                ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([28, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([28, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]));
                            }
                        }
                        ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([28, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
            if (Settings.AutoRecycle.e && !Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ) {
                ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([31, lastrecycled]))
            }
            if (Settings.AutoCraft.e && !Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ) {
                ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([36, lastcrafted]))
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    Wi = function () {
        $v = ij(_i(11));
        Zv = fk($v);
        if (_v) {
            _v();
        }

        let AutoFeedInterval;
        let MainHackInterval;
        setTimeout(() => {
            AutoFeedInterval = workerTimers.setInterval(AutoFeed, 8e3);
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80);
        }, 7000);

        workerTimers.setInterval(() => {
            if (ᐃⲆΔΔ.ᐃᐃⲆⵠ && ᐃⲆΔΔ.ᐃᐃⲆⵠ.readyState === 1 && Tw && Tw.ᐃΔΔΔᐃ) {
                try {
                    const a = decode(encode("Smoking on dead opps"))
                    var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                    if (Tw.ᐃΔᐃᐃⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a.substring(0, 25) + " ..." + "Uuunnnggg");
                        } else {
                            b.text.push("Uuunnnggg" + "... " + a.substring(0, 25));
                        }
                    } else {
                        b.text.push(a);
                    }
                    ᐃⲆΔΔ.ᐃᐃⲆⵠ.send(JSON.stringify([14, a]));
                } catch { }
            }
        }, 4000);

        function getRandNum(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min
        }

        const hA = "abcdefghijklmnopqrstuvwxyz";

        function encode(A) {
            let inputArr = Array.from({ length: 13 }, function () {
                return String.fromCharCode(getRandNum(65, 90))
            }).join('')

            let rand_a = getRandNum(1, 26)

            let encoded = A.split(' ').reverse().join(' ').split('').reverse().map(function (A) {
                if (!A.match('/[a-z]/i')) {
                    return A
                }

                let I = hA.indexOf(A.toLowerCase())
                let B = hA[(I + rand_a) % 26]

                if (A === A.toUpperCase()) {
                    return B.toUpperCase();
                } else {
                    return B;
                }
            }).join('')

            let b64out = window.btoa(encodeURIComponent(encoded)).split('').reverse().join('')
            let b64randLen = getRandNum(1, b64out.length - 1)

            return [
                (b64out.slice(b64randLen, b64out.length) + b64out.slice(0, b64randLen)).replace(
                    new RegExp('['.concat(inputArr).concat(inputArr.toLowerCase(), ']'), 'g'),
                    (A) => {
                        if (A === A.toUpperCase()) {
                            return A.toLowerCase();
                        } else {
                            return A.toUpperCase();
                        }
                    }
                ),
                rand_a.toString(16),
                b64randLen.toString(16),
                inputArr,
            ]
        }

        function decode(encodedData) {
            let [encoded, rand_a_hex, b64randLen_hex, inputArr] = encodedData;

            let rand_a = parseInt(rand_a_hex, 16);
            let b64randLen = parseInt(b64randLen_hex, 16);

            let swapCase = function (str, inputArr) {
                return str.replace(
                    new RegExp('[' + inputArr + inputArr.toLowerCase() + ']', 'g'),
                    (A) => {
                        if (A === A.toUpperCase()) {
                            return A.toLowerCase();
                        } else {
                            return A.toUpperCase();
                        }
                    }
                );
            };

            let swappedCaseStr = swapCase(encoded, inputArr);
            let b64out = swappedCaseStr.slice(-b64randLen) + swappedCaseStr.slice(0, -b64randLen);
            let encodedStr = decodeURIComponent(window.atob(b64out.split('').reverse().join('')));
            let decoded = encodedStr.split('').reverse().map(function (A) {
                if (!A.match(/[a-z]/i)) {
                    return A;
                }

                let I = hA.indexOf(A.toLowerCase());
                let B = hA[(I - rand_a + 26) % 26];

                if (A === A.toUpperCase()) {
                    return B.toUpperCase();
                } else {
                    return B;
                }
            }).join('').split(' ').reverse().join(' ');

            return decoded;
        }

        window.Utils.LoadHack();
    };
    var aw = "send";
    var bw = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("id") === "1" ? 1 : 0;
    var cw = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("password");
    var dw = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("debug") || Ch;
    if (dw !== mh) {
        dw = JSON.parse(aj.decodeURIComponent(dw));
    }
    var ew = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("server") || Tk;
    var fw = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("region") || Ch;
    var gw = "starve.io";
    var hw = "https://" + gw;
    var iw = {
        ⲆΔΔΔΔᐃΔ: 128,
        ⵠⲆᐃⵠΔⵠᐃ: 256,
        ⲆⵠᐃⲆΔⲆⵠΔᐃ: 1,
        ⵠΔᐃᐃⲆ: 4,
        ΔΔⲆΔΔΔΔ: 8,
        ᐃᐃⵠⲆ: 2,
        ΔⵠᐃⵠᐃⲆΔ: 32,
        ⵠⲆΔⲆⲆᐃΔ: 16,
        IDLE: 64
    };
    if (aj.ⲆᐃⵠⵠⲆᐃΔ) {
        var jw = aj.Math.acos;
        aj.Math.acos = aj.Math.asin;
        aj.Math.asin = jw;
        var kw = aj.Math.acos;
        aj.Math.acos = aj.Math.asin;
        aj.Math.asin = kw;
    }
    var lw = [{
        ᐃΔⲆⵠᐃ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ᐃΔⲆⵠᐃ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ᐃΔⲆⵠᐃ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ᐃΔⲆⵠᐃ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ᐃΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ᐃΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ᐃΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ᐃΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ᐃΔⲆⵠᐃ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ᐃΔⲆⵠᐃ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    let mw = 0;
    const nw = [];
    var ow = {
        ⵠⵠⲆⲆΔⵠⲆⵠᐃ: "[21]",
        ΔⵠᐃⵠᐃᐃΔ: 4,
        ⵠⲆᐃⵠΔᐃᐃ: 3,
        ⲆⲆⵠⲆⲆⵠΔΔΔ: 0.58,
        ᐃΔᐃⵠⲆⵠⵠⵠⵠ: 5,
        ᐃᐃᐃⵠⲆᐃᐃΔⵠ: 200,
        ᐃⵠᐃⲆⲆⲆⵠⲆΔ: 3,
        ⲆⲆΔᐃΔⲆⲆ: 0.2,
        ᐃⵠⵠΔΔⵠΔ: 52,
        ᐃΔⵠΔΔⵠⵠ: 4,
        ΔⵠⵠⵠΔΔᐃⵠᐃ: 14,
        ⲆΔⲆⲆΔⲆⲆ: 600000,
        ⵠⲆΔⲆⲆᐃΔ: 0.2,
        ⲆᐃΔⲆⵠⵠΔᐃΔ: 125000,
        ⵠΔᐃⵠⵠᐃⲆᐃⵠ: 20,
        ᐃΔⵠⵠⵠⲆΔ: 0,
        ⲆⵠⲆΔⲆⲆⵠⲆᐃ: 14,
        ⵠⵠⵠΔⲆΔᐃ: 2,
        ᐃᐃᐃᐃⲆΔⵠᐃⵠ: 8000,
        ᐃΔⲆΔΔᐃΔΔΔ: 5,
        ⵠⵠⲆᐃΔⲆⵠΔⲆ: 50,
        ⲆⲆⵠΔⵠᐃⲆΔΔ: 20,
        ⵠⲆΔⵠⲆΔΔ: 1,
        ΔⵠⲆΔⵠΔⲆⲆᐃ: 2000,
        ⲆⲆⵠⵠⲆⵠᐃⵠⲆ: 60000
    };
    var pw = {
        ⲆⲆΔ: 480000,
        ⲆᐃΔΔⵠΔΔ: 10,
        ΔΔΔⲆⵠⲆᐃ: 16,
        ⵠⲆⲆⲆΔᐃΔᐃΔ: 6,
        ΔⵠⵠᐃⲆᐃⵠ: 60,
        ᐃⵠⲆⲆⲆ: 1,
        ⵠᐃΔᐃⵠ: 2,
        ⵠΔⲆⵠΔ: 4,
        ⵠΔΔΔΔ: 8,
        ⲆⲆΔᐃΔⲆⲆ: 10,
        ΔⵠⵠᐃᐃΔⲆ: 100,
        ⵠⲆⵠⵠΔΔⲆ: 100,
        ⲆⵠⲆᐃΔⲆⵠ: 100,
        ⲆⵠⲆᐃⲆᐃᐃᐃΔ: 100,
        ᐃⲆⵠΔΔΔᐃ: 100,
        ᐃΔⲆⲆⵠⵠΔ: 100,
        ⵠΔⵠΔΔⵠⵠΔΔ: 100,
        ᐃΔⲆⲆⵠⵠΔ: 100,
        ᐃΔΔⲆᐃⵠⵠ: 100,
        ΔΔⲆΔⲆΔⲆ: 100,
        ⲆᐃᐃΔᐃ: 0,
        ΔᐃⵠᐃⵠΔⲆ: 1,
        ⵠⵠⲆⲆⲆ: 2,
        ⵠⵠⵠᐃᐃ: 3,
        ΔᐃⲆⵠⵠ: 4,
        ⲆΔΔⵠⲆᐃᐃ: 5,
        ⵠⵠΔⲆΔ: 6,
        ⵠᐃⲆΔⵠ: 7,
        ΔΔⵠⵠΔⲆΔⲆΔ: {
            osaka: "Osaka",
            frankfurt: "Frankfurt",
            losangeles: "Los Angeles",
            sydney: "Sydney",
            atlanta: "Atlanta"
        },
        ΔΔᐃⵠⲆⵠᐃ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⵠΔΔΔΔⵠⲆ: 0,
        ⲆΔᐃⵠⲆⵠⵠ: 0,
        ⵠⵠⵠⵠⵠⵠⲆ: 30,
        ΔⵠⵠᐃⵠΔⵠⵠᐃ: 2,
        ΔⵠⵠᐃⲆᐃⵠ: 60000,
        ᐃᐃΔⲆΔⲆᐃΔⵠ: 0,
        ΔⲆⵠΔⵠᐃⵠⵠᐃ: 0,
        ⲆΔᐃΔΔΔⲆΔⵠ: 50,
        ⵠΔᐃⵠⲆᐃΔⵠΔ: 0,
        ᐃⲆⵠⲆΔⵠⵠⵠⵠ: 40,
        ⲆⲆⵠⵠΔᐃΔⵠΔ: 39,
        ᐃΔᐃᐃⵠⵠᐃⵠⵠ: 830,
        ⲆᐃΔᐃΔᐃΔ: 25,
        ΔᐃⲆⲆᐃΔΔ: 8,
        ΔⲆⵠΔᐃ: 0,
        ᐃⲆΔⲆⲆ: 0,
        ⵠΔⵠΔⵠⲆᐃ: 200,
        ΔᐃⵠⵠᐃΔⲆ: 0,
        ΔⲆⵠⲆΔ: 250,
        ⵠⵠⲆⲆᐃⲆⵠ: 150,
        ⲆⵠⵠᐃΔⵠⲆ: 0,
        ᐃᐃⲆⵠⵠ: 350,
        ⲆᐃΔⵠᐃⲆⵠ: 100,
        ⲆⵠⲆᐃᐃᐃΔ: 700,
        ᐃⲆⲆΔⲆ: 39879
    };
    var qw = [];
    for (ht = 0; ht < 500; ht++) {
        qw[ht] = 0;
    }
    qw[47] = 1;
    qw[57] = 1;
    qw[0] = 1;
    qw[5] = 1;
    qw[6] = 1;
    qw[30] = 1;
    qw[19] = 1;
    qw[9] = 1;
    qw[62] = 1;
    qw[63] = 1;
    qw[13] = 1;
    qw[14] = 1;
    qw[15] = 1;
    qw[33] = 1;
    qw[34] = 1;
    qw[16] = 1;
    qw[17] = 1;
    qw[12] = 1;
    qw[18] = 1;
    var rw = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var sw = {
        ⵠⲆⵠᐃⵠ: 7,
        ᐃⲆⲆΔⲆ: 3,
        ΔⲆᐃⵠΔ: 80,
        ᐃΔⵠⲆᐃ: 37,
        ⵠⲆⵠⵠΔ: 21,
        Ⲇᐃⵠᐃᐃ: 36,
        ⲆᐃᐃⲆⲆ: 77,
        ᐃⵠᐃᐃΔ: 63,
        ⲆⲆΔΔⲆ: 87,
        ⲆⲆⵠⲆᐃ: 5,
        ΔᐃᐃᐃⲆⲆᐃ: 76,
        ᐃⲆⲆᐃⲆ: 29,
        ⵠᐃΔⵠᐃ: 71,
        ΔⵠⵠⵠΔ: 0,
        ΔⵠⲆⲆⵠ: 31,
        ᐃⲆⵠⵠⵠ: 50,
        ⵠΔΔᐃⲆ: 35,
        ⵠΔᐃΔⵠ: 10,
        ΔΔΔⲆⵠ: 73,
        ⲆΔᐃᐃᐃ: 39,
        ᐃΔⲆᐃΔ: 60,
        ⵠΔᐃᐃⵠ: 1,
        ᐃⵠⵠᐃΔ: 20,
        ⵠΔⲆⲆⲆ: 75,
        ⲆⲆⲆΔⲆ: 30,
        ΔⵠⵠⲆⲆ: 86,
        ⵠⲆᐃⵠⲆ: 14,
        ⲆΔⵠⲆⵠΔⵠ: 82,
        ᐃⵠᐃᐃᐃ: 44,
        ΔΔΔΔⵠ: 28,
        ᐃⲆΔᐃΔ: 81,
        ΔⲆⲆⲆⲆ: 55,
        ΔⵠⲆⵠᐃⵠᐃ: 83,
        ⲆΔⵠᐃΔ: 42,
        ⵠᐃⵠΔⲆ: 27,
        ΔᐃΔᐃΔ: 11,
        ⲆⵠΔᐃⵠ: 38,
        ΔⵠΔᐃⵠ: 25,
        ⲆⲆⲆΔΔ: 9,
        ᐃΔⲆᐃⲆ: 88,
        ᐃⲆⲆⵠΔ: 46,
        ⲆᐃᐃⲆᐃ: 26,
        ΔᐃⲆⵠⲆ: 91,
        ⵠᐃⵠⵠⵠ: 70,
        ᐃⵠⵠⲆⵠ: 18,
        ⲆⲆΔΔⵠ: 2,
        ⵠᐃⵠΔⵠ: 23,
        ΔⵠⵠΔᐃ: 72,
        ⵠΔᐃΔⲆ: 53,
        ⵠᐃᐃΔᐃ: 48,
        ⲆⵠⵠⲆⲆ: 8,
        ⲆΔⲆⵠⲆᐃΔ: 85,
        ⵠⲆΔⲆᐃ: 61,
        ᐃᐃᐃΔⲆ: 4,
        ⲆⲆⵠᐃⲆ: 24,
        ⲆᐃⲆⵠⵠ: 62,
        ⵠⲆΔⲆΔ: 12,
        ⵠⵠⲆⵠⵠ: 68,
        ᐃΔᐃⲆΔ: 49,
        ᐃⲆⲆᐃᐃ: 78,
        ᐃΔⲆⵠⲆⵠⵠ: 89,
        ⵠⲆΔΔⵠ: 41,
        ᐃⲆⵠⵠΔ: 52,
        ⲆΔΔΔⵠ: 34,
        ΔΔΔᐃΔ: 17,
        ΔⲆⲆⵠⲆ: 22,
        ⵠΔΔⲆΔ: 45,
        ᐃᐃⵠΔⵠ: 6,
        ⲆⵠⲆΔⵠ: 33,
        ⲆⵠᐃΔⵠ: 56,
        Δⵠᐃⵠⵠ: 13,
        ᐃⵠΔᐃⲆ: 54,
        ⵠⵠΔΔⵠ: 32,
        ⲆⲆⲆⲆⵠ: 51,
        ⵠⲆᐃⲆⵠ: 90,
        ΔΔΔᐃⲆ: 40,
        ⲆΔᐃᐃΔ: 66,
        ΔᐃⲆΔΔ: 43,
        ᐃᐃᐃΔⲆᐃΔ: 84,
        ⵠⵠⵠⲆⵠ: 69,
        ⵠⵠᐃⲆΔ: 67,
        ⵠΔⵠΔΔ: 47,
        ΔⵠᐃⲆΔ: 100,
        ΔᐃⵠᐃΔ: 79,
        ⲆⵠᐃⲆⲆ: 64,
        ⲆΔⲆⵠᐃ: 74,
        ΔᐃⵠⲆΔ: 19,
        ⵠⵠⲆΔⵠ: 15,
        ⵠⲆΔΔⲆ: 65,
        ᐃΔΔᐃΔ: 16
    };
    var tw = [[24, 108], [25, 111], [26, 112], [27, 121], [28, 202]];
    function uw(a, b, c, d) {
        this.id = a;
        this.ⵠⲆΔⵠΔ = (a + 5) * 8;
        this.ⵠᐃⵠΔΔ = On / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ΔΔΔᐃ = Math.cos(d);
        this.alpha = 0;
    }
    function vw(b, c, d, e, f, i, a, j, k, h) {
        this.type = b;
        this.ⵠᐃⲆⵠ = c;
        this.id = d;
        this.x = e;
        this.y = f;
        this.angle = i;
        this.ⲆᐃⲆΔΔⲆⵠ = i;
        this.action = a;
        this.info = j;
        this.ΔᐃᐃⵠⲆ = h;
        this.r = {
            x: e,
            y: f
        };
        this.ⵠⲆΔⵠΔ = k;
        if (cf) {
            this.ᐃⲆⲆⵠ = cf.ΔⵠᐃⲆᐃⲆⲆ * c + d;
        }
        switch (b) {
            case 0:
                this.ΔⵠᐃⲆ = cf.ⲆⵠᐃΔ[this.ⵠᐃⲆⵠ];
                this.ΔΔᐃΔ = this.ΔⵠᐃⲆ.ΔΔᐃΔ;
                this.ⵠᐃΔⵠⵠΔⵠ = this.ΔⵠᐃⲆ.ⵠᐃΔⵠⵠΔⵠ;
                this.ᐃⵠᐃⲆⵠ = this.ΔⵠᐃⲆ.ᐃⵠᐃⲆⵠ;
                this.ΔᐃΔⲆᐃ = this.ΔⵠᐃⲆ.ΔᐃΔⲆᐃ;
                this.ΔⵠᐃΔⵠⲆⵠ = -1000000;
                this.ⲆⵠⲆⲆᐃ = -1000000;
                this.ΔⵠᐃⲆᐃ = -1000000;
                this.ⵠΔΔⲆⲆ = -1000000;
                this.ⲆᐃΔΔΔⵠΔ = -1000000;
                this.ᐃⵠⵠⲆⵠⲆᐃ = -1000000;
                this.ⵠⲆⲆΔᐃ = -1000000;
                this.ᐃΔᐃᐃⲆ = cf.mode === 2 && this.ΔΔᐃΔ === 0 || Xi;
                this.ΔⵠⲆᐃⵠᐃΔ = cf.mode === 3 && this.ΔΔᐃΔ === 0 ? $l : mn;
                this.ΔⲆΔⵠᐃⲆⵠ = !!this.ᐃΔᐃᐃⲆ && this.ΔⵠᐃⲆ.ᐃᐃⲆⵠᐃ === "  ";
                this.ⲆⵠΔΔⲆ = [];
                this.ⵠⵠΔΔⵠΔⲆ = 0;
                this.ᐃᐃᐃⲆ = mk;
                this.ΔᐃⲆⵠⲆᐃᐃ = 0;
                this.ⲆᐃⵠΔⵠᐃΔ = 0;
                this.ⲆⲆⲆⲆⲆ = [];
                this.r = {
                    x: e,
                    y: f
                };
                this.Δᐃᐃⵠ = ev;
                this.ⲆᐃⵠⵠᐃⵠΔ = av;
                this.ⲆⲆᐃⲆᐃ = 0;
                this.ΔⵠΔⵠᐃ = 0;
                this.ΔⵠⲆᐃⵠ = 0;
                this.Δⵠⵠⵠᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ΔⵠΔⵠⵠ = 0;
                this.ⲆⵠΔⲆⲆᐃⲆ = 0;
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ᐃΔⵠᐃⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Wh, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Mr, 0.6, 0.6, 0, 5, 3);
                this.ⵠⵠᐃΔⲆᐃᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⵠΔΔΔⵠⲆΔ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 2.25, -1.5, 3.75, 7.5);
                this.ⲆⵠⵠᐃᐃΔΔ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qg, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(ah, 0, 0, -Math.PI / 3, 6, 9);
                this.ⵠᐃΔⵠⵠⵠᐃⲆⲆ = 0;
                this.ⲆⲆⵠⵠΔⵠⲆ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(aq, 0.6, 0.6, 0, 1, 3);
                this.ΔⵠΔΔⵠⲆⲆ = this.ΔⲆΔⵠᐃⲆⵠ ? new ΔⲆⵠᐃ.ⲆΔᐃᐃ(xo, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ⵠⵠΔⵠΔⲆᐃ = 0;
                this.ⲆⲆⵠᐃⲆΔⵠ = 0;
                this.ⲆᐃᐃᐃΔᐃᐃ = [];
                this.ΔΔΔⵠⵠΔⵠ = [];
                this.text = [];
                this.label = [];
                this.ⲆⵠⵠⲆΔⵠΔ = cv;
                this.ⵠⵠⵠⲆᐃ = Fh;
                this.right = -1;
                this.ⲆⲆΔΔᐃ = -1;
                this.action = 64;
                this.ᐃⲆᐃᐃⵠⵠⵠ = Qj;
                this.ΔΔⵠΔΔ = 0;
                this.ⵠΔᐃᐃᐃ = false;
                this.bubbles = [];
                this.ⲆΔΔⵠⵠ = 0;
                this.ᐃⲆⵠᐃΔ = -1;
                this.ⵠⵠΔ = function (a) {
                    if (this.info & 32768) {
                        this.ᐃⲆᐃᐃⵠⵠⵠ = true;
                        this.info = this.info & -32769;
                    } else {
                        this.ᐃⲆᐃᐃⵠⵠⵠ = false;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ⲆΔΔⵠⵠ = 1;
                    } else {
                        this.ⲆΔΔⵠⵠ = 0;
                    }
                    this.ΔΔⵠΔΔ = Math.floor(this.info / 128);
                    this.info -= this.ΔΔⵠΔΔ * 128;
                    if (this.info === 7 || this.ΔⲆΔⵠᐃⲆⵠ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ⵠⵠΔΔⵠΔⲆ = cf.ΔⵠⵠⲆΔᐃⵠΔⵠ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ⲆⲆΔΔᐃ = this.ΔᐃᐃⵠⲆ & 255;
                    if (this.right === 2) {
                        this.ⵠΔᐃᐃᐃ = Hg;
                    } else {
                        this.ⵠΔᐃᐃᐃ = xj;
                    }
                    if (qw[this.right]) {
                        this.Δⵠⵠᐃⵠ = true;
                    } else {
                        this.Δⵠⵠᐃⵠ = xj;
                    }
                    if (a & 256) {
                        this.ⲆⲆⵠⵠΔⵠⲆ.ⵠⲆΔ = mn;
                        this.ⲆⲆⵠⵠΔⵠⲆ.ⵠΔⲆ = 0.6;
                    } else if (a & 4) {
                        this.freeze.ⵠⲆΔ = false;
                        this.freeze.ⵠΔⲆ = 0.6;
                    } else if (a & 128) {
                        this.ᐃΔⵠᐃⵠ.ⵠⲆΔ = false;
                        this.ᐃΔⵠᐃⵠ.ⵠΔⲆ = 0.6;
                    }
                    if (a & 8) {
                        this.ⵠⵠᐃΔⲆᐃᐃ.ⵠⲆΔ = aq;
                        this.ⵠⵠᐃΔⲆᐃᐃ.ⵠΔⲆ = 0.6;
                    }
                    if (a & 2) {
                        this.ⵠⲆⵠᐃ.ⵠⲆΔ = false;
                        this.ⵠⲆⵠᐃ.ⵠΔⲆ = 0.6;
                    }
                    if (a & 16) {
                        this.ⵠᐃΔⵠⵠⵠᐃⲆⲆ = 0.58;
                        if (Ww.ⲆΔΔᐃⵠ && this.ᐃⲆⵠᐃΔ !== -1) {
                            Ww.ⲆⵠᐃΔ[this.ᐃⲆⵠᐃΔ].ⲆⲆⵠΔⵠΔᐃᐃᐃ(rf[this.right]);
                        }
                    }
                };
                this.ⵠⵠΔ();
                break;
            case 23:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: cr,
                    angle: 0
                };
                this.ⲆⲆᐃΔⲆⲆⲆ = Wu;
                this.ⲆⵠⲆᐃⵠ = Sp;
                this.ΔⲆΔⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(m, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⵠⵠᐃⵠⲆⲆ = 0;
                this.ⵠⲆᐃⲆᐃᐃΔ = 0;
                this.ⲆᐃⵠΔⵠ = ap;
                break;
            case 22:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Xi, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Mr,
                    angle: 0
                };
                this.ⲆⲆᐃΔⲆⲆⲆ = Hp;
                this.ⲆⵠⲆᐃⵠ = Xp;
                this.ΔⲆΔⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(So, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⵠⵠᐃⵠⲆⲆ = 0;
                this.ⵠⲆᐃⲆᐃᐃΔ = 0;
                break;
            case 1:
            case 6:
                this.ⲆⲆᐃΔⲆⲆⲆ = Xu;
                this.ⲆⵠⲆᐃⵠ = Bp;
                this.ⲆⲆᐃⲆⲆ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cr, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 1, 1.23, 1.18, 0.01, 0.01);
                this.ΔⲆΔⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Ga, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Qk,
                    angle: 0
                };
                break;
            case 43:
                this.ⲆⲆᐃΔⲆⲆⲆ = xp;
                this.ⲆⵠⲆᐃⵠ = Qu;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(po, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.ΔⲆⲆᐃ = [];
                for (var l = 0; l < 3; l++) {
                    this.ΔⲆⲆᐃ.push({
                        Δᐃᐃⵠ: Np,
                        Δᐃⵠⵠ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ΔⲆⲆᐃ[0].x = this.x - 16.5;
                this.ΔⲆⲆᐃ[0].y = this.y - 15.5;
                this.ΔⲆⲆᐃ[0].angle = this.angle;
                this.ΔⲆⲆᐃ[1].x = this.x + 36;
                this.ΔⲆⲆᐃ[1].y = this.y + 17;
                this.ΔⲆⲆᐃ[1].angle = this.angle;
                this.ΔⲆⲆᐃ[2].x = this.x - 18.5;
                this.ΔⲆⲆᐃ[2].y = this.y + 39;
                this.ΔⲆⲆᐃ[2].angle = this.angle;
                break;
            case 3:
                this.ⲆⲆᐃΔⲆⲆⲆ = wp;
                this.ⲆⵠⲆᐃⵠ = _p;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.ΔⲆⲆᐃ = [];
                for (l = 0; l < 3; l++) {
                    this.ΔⲆⲆᐃ.push({
                        Δᐃᐃⵠ: Vp,
                        Δᐃⵠⵠ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ΔⲆⲆᐃ[0].x = this.x - 16.5;
                this.ΔⲆⲆᐃ[0].y = this.y - 15.5;
                this.ΔⲆⲆᐃ[1].x = this.x - 5.5;
                this.ΔⲆⲆᐃ[1].y = this.y + 7.5;
                this.ΔⲆⲆᐃ[2].x = this.x + 18;
                this.ΔⲆⲆᐃ[2].y = this.y - 5;
                break;
            case 77:
                this.Δᐃᐃⵠ = dp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(ah, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 70:
                this.Δᐃᐃⵠ = Uu;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 71:
                this.Δᐃᐃⵠ = Ep;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(So, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔΔⲆᐃⲆᐃⲆ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆᐃⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ᐃΔⵠᐃⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 67:
                this.Δᐃᐃⵠ = Cp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(bn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔΔⲆᐃⲆᐃⲆ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆᐃⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ᐃΔⵠᐃⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 68:
                this.Δᐃᐃⵠ = cp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(xj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qk, 0.6, 0.6, 0, 5, 3);
                break;
            case 90:
                this.Δᐃᐃⵠ = Fp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cr, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(po, 0.6, 0.6, 0, 5, 3);
                break;
            case 91:
                this.ᐃⵠᐃᐃᐃᐃΔ = this.info & 15;
                this.ⲆᐃⵠΔⵠᐃΔ = this.ΔᐃᐃⵠⲆ & 1;
                this.ⵠΔⲆᐃᐃⲆΔ = 0;
                this.x = this.info;
                this.y = this.ΔᐃᐃⵠⲆ;
                this.Δᐃᐃⵠ = Zu;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Vh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case 80:
            case 60:
            case 61:
            case 62:
            case 63:
            case 78:
            case 65:
            case 66:
            case 88:
                this.Δᐃᐃⵠ = Fp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qj, 0.6, 0.6, 0, 5, 3);
                break;
            case 36:
                this.Δᐃᐃⵠ = Rp;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Vh, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: So,
                    angle: 0
                };
                break;
            case 34:
                this.ⲆⵠⲆᐃⵠ = Su;
                this.Δᐃᐃⵠ = Wp;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.up = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1.03, 0.98, 0.1, 0.1);
                this.ΔΔΔⵠⵠ = [];
                break;
            case 87:
                this.angle = Math.random() * Math.PI / 2;
            case 86:
            case 82:
                this.Δᐃᐃⵠ = fp;
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(mn, 0.6, 0.6, 0, 5, 3);
                break;
            case 81:
                this.Δᐃᐃⵠ = zp;
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 69:
                this.scale = 1;
                this.Δᐃᐃⵠ = $p;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 0.6, 0.6, 0, 5, 3);
                break;
            case 76:
                this.ΔⲆⵠΔⵠ = 0;
                this.ⲆᐃΔⵠ = [];
                this.ᐃⲆⵠⲆΔⵠᐃ = 0;
                this.ᐃΔⲆⲆⵠᐃⲆ = mp;
                this.Δᐃᐃⵠ = Dp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Vh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Mr, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 75:
                this.x = this.info;
                this.y = this.ΔᐃᐃⵠⲆ;
                this.scale = 1;
                this.ᐃⵠᐃΔ = 0;
                this.Δᐃᐃⵠ = Op;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 74:
                this.x = this.info;
                this.y = this.ΔᐃᐃⵠⲆ;
                this.scale = 1;
                this.ᐃⵠᐃΔ = 0;
                this.Δᐃᐃⵠ = Kp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(xj, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(bn, 0.6, 0.6, 0, 5, 3);
                break;
            case 73:
                this.scale = 1;
                this.Δᐃᐃⵠ = Tu;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qk, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 72:
                this.scale = 1;
                this.Δᐃᐃⵠ = qp;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Zl, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 64:
                this.scale = 1;
                this.Δᐃᐃⵠ = Yu;
                this.Δᐃⵠⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠⲆⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case 100:
                this.ΔⲆⲆᐃ = [];
                for (l = 0; l < 5; l++) {
                    this.ΔⲆⲆᐃ.push({
                        Δᐃᐃⵠ: Vp,
                        Δᐃⵠⵠ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ΔⲆⲆᐃ[0].x = this.x - 20.5;
                        this.ΔⲆⲆᐃ[0].y = this.y - 22.5;
                        this.ΔⲆⲆᐃ[1].x = this.x - 35.5;
                        this.ΔⲆⲆᐃ[1].y = this.y + 7.5;
                        this.ΔⲆⲆᐃ[2].x = this.x + 7.5;
                        this.ΔⲆⲆᐃ[2].y = this.y - 30;
                        this.ΔⲆⲆᐃ[3].x = this.x + 22.5;
                        this.ΔⲆⲆᐃ[3].y = this.y;
                        this.ΔⲆⲆᐃ[4].x = this.x - 7.5;
                        this.ΔⲆⲆᐃ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ΔⲆⲆᐃ[0].x = this.x - 30.5;
                        this.ΔⲆⲆᐃ[0].y = this.y - 22.5;
                        this.ΔⲆⲆᐃ[1].x = this.x - 15.5;
                        this.ΔⲆⲆᐃ[1].y = this.y + 7.5;
                        this.ΔⲆⲆᐃ[2].x = this.x + 15.5;
                        this.ΔⲆⲆᐃ[2].y = this.y - 30;
                        this.ΔⲆⲆᐃ[3].x = this.x + 12.5;
                        this.ΔⲆⲆᐃ[3].y = this.y + 5;
                        this.ΔⲆⲆᐃ[4].x = this.x - 40.5;
                        this.ΔⲆⲆᐃ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ΔⲆⲆᐃ[0].x = this.x - 20.5;
                        this.ΔⲆⲆᐃ[0].y = this.y - 20.5;
                        this.ΔⲆⲆᐃ[1].x = this.x - 35.5;
                        this.ΔⲆⲆᐃ[1].y = this.y + 15.5;
                        this.ΔⲆⲆᐃ[2].x = this.x + 7.5;
                        this.ΔⲆⲆᐃ[2].y = this.y - 17;
                        this.ΔⲆⲆᐃ[3].x = this.x + 22.5;
                        this.ΔⲆⲆᐃ[3].y = this.y + 5;
                        this.ΔⲆⲆᐃ[4].x = this.x - 7.5;
                        this.ΔⲆⲆᐃ[4].y = this.y + 1.5;
                }
                break;
            case 31:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Xi,
                    angle: 0
                };
                this.Δᐃᐃⵠ = Ap;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔⲆⵠⲆΔⲆ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cr, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case 40:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: mn,
                    angle: 0
                };
                this.Δᐃᐃⵠ = Zp;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(mn, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 39:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qj, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.Δᐃᐃⵠ = Up;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 44:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(mn, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.Δᐃᐃⵠ = vp;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 55:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Zl, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.Δᐃᐃⵠ = Vu;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(m, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 54:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(aq, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: po,
                    angle: 0
                };
                this.Δᐃᐃⵠ = kp;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cr, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 37:
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: bn,
                    angle: 0
                };
                this.Δᐃᐃⵠ = Lp;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case 24:
                this.Δᐃᐃⵠ = pp;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(aq, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                break;
            case 25:
                this.Δᐃᐃⵠ = Tp;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Ga,
                    angle: 0
                };
                break;
            case 26:
                this.Δᐃᐃⵠ = Ip;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(So, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: po,
                    angle: 0
                };
                break;
            case 27:
                this.Δᐃᐃⵠ = jp;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(po, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: yl,
                    angle: 0
                };
                break;
            case 28:
                this.Δᐃᐃⵠ = Pp;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                break;
            case 32:
                this.ⲆⲆᐃΔⲆⲆⲆ = Ru;
                this.ⲆⵠⲆᐃⵠ = yp;
                this.rotate = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                break;
            case 38:
                this.Δᐃᐃⵠ = sp;
                this.ΔⵠⲆᐃ = Math.floor(this.x / 100);
                this.ᐃᐃ = Math.floor(this.y / 100);
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Vh, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: mn,
                    angle: 0
                };
                this.opacity = 1;
                this.ⲆᐃⵠΔⵠ = tp;
                break;
            case 42:
                this.Δᐃᐃⵠ = np;
                this.ΔⲆΔⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                break;
            case 33:
            case 2:
            case 56:
            case 35:
            case 29:
                this.Δᐃᐃⵠ = ip;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Tn, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: xj,
                    angle: 0
                };
                break;
            case 30:
                this.Δᐃᐃⵠ = ip;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.ⲆᐃⵠΔⵠ = tp;
                break;
            case 4:
            case 7:
            case 8:
            case 9:
            case 19:
            case 50:
            case 5:
            case 12:
            case 13:
            case 14:
            case 20:
            case 52:
                this.Δᐃᐃⵠ = ip;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(aq, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.ⲆᐃⵠΔⵠ = ap;
                break;
            case 41:
                this.Δᐃᐃⵠ = lp;
                this.opacity = 1;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Xi,
                    angle: 0
                };
                var n = this.angle % (Math.PI / 2);
                if (n < Math.PI / 4) {
                    this.angle -= n;
                } else {
                    this.angle += Math.PI / 2 - n;
                }
                break;
            case 79:
                this.Δᐃᐃⵠ = ep;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 89:
                this.Δᐃᐃⵠ = gp;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 83:
                this.Δᐃᐃⵠ = hp;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 84:
                this.Δᐃᐃⵠ = rp;
                this.angle = Math.random() * Math.PI * 2;
                break;
            case 85:
                this.Δᐃᐃⵠ = op;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case 11:
                this.ⵠⵠΔ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.Δᐃᐃⵠ = qc;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: mn,
                    angle: 0
                };
                this.lock = 0;
                this.ⵠⵠΔ(this.action);
                break;
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 53:
            case 10:
            case 15:
            case 16:
            case 17:
            case 21:
            case 51:
                this.Δᐃᐃⵠ = Zc;
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: Qj,
                    angle: 0
                };
                this.ⲆᐃⵠΔⵠ = ap;
                break;
            case 18:
                this.ⲆⲆᐃΔⲆⲆⲆ = Yp;
                this.Δᐃᐃⵠ = Jp;
                this.ⲆⵠⲆᐃⵠ = Mp;
                this.ⲆᐃΔⵠ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Zl, 1, 1.23, 1.18, 0.02, 0.02);
                this.ΔⲆΔⵠᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Zl, 1, 1.23, 1.18, 0.04, 0.04);
                this.ⵠⲆⵠᐃ = {
                    ΔᐃΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 1, 1, 0, 10, 10),
                    ⵠⵠΔ: false,
                    angle: 0
                };
                this.ⵠⵠΔ = function (a) {
                    this.action = a;
                };
        }
    }
    function ww(b, c, d, e, f, g) {
        Ne($v, b, c, d, e, f, g);
        const a = Nw(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4], Zv[5]);
        Dr(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4]);
        return a ^ 49495;
    }
    function xw() {
        this.ᐃᐃⲆⵠᐃ = "";
        this.ΔΔᐃΔ = 0;
        this.ΔᐃΔⲆᐃ = 0;
        this.ⲆΔΔⵠⵠ = 0;
        this.ⵠᐃΔⵠⵠΔⵠ = 0;
        this.ᐃⵠᐃⲆⵠ = 0;
        this.ᐃⲆⵠᐃᐃ = 0;
        this.ΔⲆⲆᐃΔ = 0;
        this.level = 0;
        this.label = null;
        this.ΔᐃⵠⲆΔΔⲆ = null;
        this.ⲆᐃᐃⵠΔⲆᐃ = null;
        this.ᐃΔΔΔᐃ = false;
        this.ⲆΔⲆⲆⵠ = 0;
    }
    function yw(j) {
        function e(b, c, d) {
            var e = c;
            for (var f = d; cf.ⵠⵠⲆΔΔ > f; f++) {
                for (var g = c; g < cf.ⵠⵠⲆⵠΔ && (f === d && (e = Math.max(g, e)), e >= g) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (e > g) {
                    break;
                }
            }
            cf.ⵠⵠⵠⵠⲆ.push(new cf.ⲆᐃⵠⲆⲆᐃⲆ(cf.ᐃΔⲆⵠⵠ, c, d, e - c + 1, f - d, 15));
        }
        function i(b, c, d, e, f) {
            for (var a = 0; a < f && k(b, c, d, e, 8) !== 1; a++);
            if (f === a) {
                return 0;
            } else {
                return 1;
            }
        }
        function k(c, d, e, f, i) {
            var j = d + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * f);
            var a = e + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * f);
            var k = 10 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * (cf.ⵠⵠⲆⵠΔ - j - 20));
            var m = 10 + Math.floor((cf.ⵠⵠⲆΔΔ - a - 20) * cf.ᐃᐃᐃΔᐃ.get());
            var h = k + j;
            var l = m + a;
            for (var g = 0; cf.ⵠⵠⵠⵠⲆ.length > g; g++) {
                var n = cf.ⵠⵠⵠⵠⲆ[g];
                if (ΔⲆⵠᐃ.ⵠⲆⲆᐃᐃΔᐃ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            cf.ⵠⵠⵠⵠⲆ.push(new cf.ⲆᐃⵠⲆⲆᐃⲆ(c, k, m, j, a, 15));
            return 1;
        }
        function l(a, c) {
            for (var d = 0; d < c.length; d++) {
                b(c[d][0], c[d][1], a, c[d][2]);
            }
        }
        function o(f, e) {
            var i = cf.ⵠⵠⵠⵠⲆ[f];
            var j = Math.floor(i.y1 / 100);
            var k = Math.floor(i.x1 / 100);
            var n = Math.floor(i.ⵠⵠⲆ / 100);
            var o = k + (A = Math.floor(i.w / 100));
            var q = 2;
            var r = n;
            var s = j;
            for (var t = k + 10 + Math.floor((A - 20) * cf.ᐃᐃᐃΔᐃ.get()), w = t - 4; t + 4 > w; w++) {
                c(j - 1, w, "wtb", 0, 1);
            }
            while (r > 0) {
                if (q !== 2) {
                    if (r < 10) {
                        for (B = 1; r > 0; B++) {
                            a(s, t, 1, 1, 0, e, B, 1);
                            r -= 1;
                            s += 1;
                        }
                    } else if (q !== 1) {
                        q = 1;
                        var x = Math.floor(1 + cf.ᐃᐃᐃΔᐃ.get() * 2);
                        var y = 1 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 4);
                        if (k + 16 > t) {
                            a(s, t, x, 0, 1, e, y, y);
                            t += x;
                        } else if (t > o - 16) {
                            a(s, t, x, 0, -1, e, y, y);
                            t -= x;
                        } else if (cf.ᐃᐃᐃΔᐃ.get() > 0.5) {
                            a(s, t, x, 0, 1, e, y, y);
                            t += x;
                        } else {
                            a(s, t, x, 0, -1, e, y, y);
                            t -= x;
                        }
                    } else {
                        var z = Math.min(r, Math.floor(1 + cf.ᐃᐃᐃΔᐃ.get() * 4));
                        var A = 1 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 4);
                        a(s, t, z, 1, 0, e, A, A);
                        q = 0;
                        r -= z;
                        s += z;
                    }
                } else {
                    for (var B = 10; B > 1; B--) {
                        a(s, t, 1, 1, 0, e, B, 1);
                        r -= 1;
                        s += 1;
                    }
                    q = 0;
                }
            }
            for (w = t - 1; w < t + 2; w++) {
                c(s, w, "wtb", 0, 1);
            }
        }
        function a(f, j, k, m, n, o, a, p) {
            var q = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(p / 2);
            var g = Math.max(1, Math.floor(p / 2));
            for (var r = 0; r < k; r++) {
                for (var s = f - l; f + g > s; s++) {
                    for (var t = j - q; j + h > t; t++) {
                        if (c(s, t, "wtb", 0, 1) === 1) {
                            o.push([s, t, 1]);
                        }
                    }
                }
                f += m;
                j += n;
            }
        }
        function p(a) {
            var b = cf.ⵠⵠⵠⵠⲆ[a];
            c(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            c(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            c(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            c(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function q(a, b) {
            return a >= 0 && b >= 0 && a < cf.ⵠⵠⲆΔΔ && b < cf.ⵠⵠⲆⵠΔ;
        }
        function h(a) {
            for (var b = 0; b < 3; b++) {
                r(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                r(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                r(a, "d", b, 1);
            }
            p(a);
        }
        function g(a, b) {
            for (var c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                r(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                r(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 6));
            }
            p(a);
        }
        function r(f, e, i, j, k) {
            var n = cf.ⵠⵠⵠⵠⲆ[f];
            var a = Math.floor(n.x1 / 100);
            var p = Math.floor(n.y1 / 100);
            var q = Math.floor(n.w / 100);
            var t = Math.floor(n.ⵠⵠⲆ / 100);
            if (k !== undefined) {
                k = 1 - k;
                a += Math.floor(k * q / 2);
                p += Math.floor(k * t / 2);
                q -= Math.floor(k * q);
                t -= Math.floor(k * t);
            }
            var w = Rw.Δⵠⵠᐃ;
            for (var g = 0, x = 0; j > x && g <= 50000; g++) {
                var y = p + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * t);
                var z = a + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * q);
                if (cf.ΔⲆⲆⲆΔ(f, z * 100 + 50, y * 100 + 50) >= 400 && ((A = w[y][z + 1]) === undefined || ii === A[e] || Ch === A[e][i]) && ((A = w[y][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = w[y + 1][z]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = w[y - 1][z]) === ii || ii === A[e] || A[e][i] === Kr) && ((A = w[y + 1][z - 1]) === undefined || A[e] === undefined || A[e][i] === undefined) && ((A = w[y - 1][z + 1]) === Gn || A[e] === undefined || ol === A[e][i]) && ((A = w[y + 1][z + 1]) === undefined || A[e] === Kr || A[e][i] === undefined)) {
                    var A = w[y - 1][z - 1];
                    if (ma === A || fn === A[e] || A[e][i] === undefined) {
                        if (w[y][z] === undefined) {
                            c(y, z, e, i, 1);
                            x++;
                        }
                    }
                }
            }
        }
        function n(a, b) {
            (function (b, d) {
                var e = cf.ⵠⵠⵠⵠⲆ[d];
                for (var f = 0, i = 0; b > i && f < 10000; f++) {
                    var j = e.y1 + cf.ᐃᐃᐃΔᐃ.get() * e.ⵠⵠⲆ;
                    var k = e.x1 + cf.ᐃᐃᐃΔᐃ.get() * e.w;
                    var m = Math.floor(j / 100);
                    var p = Math.floor(k / 100);
                    if (cf.ΔⲆⲆⲆΔ(d, p * 100 + 50, m * 100 + 50) >= 600) {
                        for (var q = 1, t = m - 4; q === 1 && m + 4 >= t; t++) {
                            for (var v = p - 4; q === 1 && p + 4 >= v; v++) {
                                if (Gn !== Rw.Δⵠⵠᐃ[t][v]) {
                                    q = 0;
                                }
                            }
                        }
                        if (q !== 0) {
                            c(m, p, "la", i % 6, 0);
                            i++;
                        }
                    }
                }
            })(b * 80, a);
            for (var d = 0; d < 3; d++) {
                r(a, "s", d, Math.floor(b * 12));
            }
            for (d = 0; d < 3; d++) {
                r(a, "g", d, Math.floor(b * 6));
            }
            for (d = 0; d < 3; d++) {
                r(a, "re", d, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (d = 0; d < 3; d++) {
                r(a, "a", d, Math.max(1, Math.floor(b * 2)));
            }
            p(a);
        }
        function d(a, b) {
            for (var c = 0; c < 6; c++) {
                r(a, "t", c, Math.floor(b * 80));
            }
            for (c = 0; c < 4; c++) {
                r(a, "b", c, Math.floor(b * 80));
            }
            for (c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 50));
            }
            var d = [];
            for (c = 0; c < 6; c++) {
                o(a, d);
            }
            l(a, d);
            d = [];
            r(a, "p", 0, Math.floor(b * 28));
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 7));
            }
            for (c = 0; c < 3; c++) {
                r(a, "d", c, Math.floor(b * 2));
            }
            for (c = 0; c < 3; c++) {
                r(a, "a", c, Math.floor(b * 1));
            }
            for (c = 0; c < 3; c++) {
                r(a, "m", c, Math.floor(b * 1));
            }
            r(a, "a", 0, Math.floor(b * 1));
            p(a);
        }
        function s(a, b) {
            for (var d = 0; d < 3; d++) {
                r(a, "s", d, Math.floor(b * 12));
            }
            for (d = 0; d < 3; d++) {
                r(a, "m", d, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            r(a, "c", 0, Math.floor(b * 36));
            var e = [];
            (function (b, d) {
                var e = cf.ⵠⵠⵠⵠⲆ[b];
                var f = Math.floor(e.y1 / 100);
                var i = Math.floor(e.x1 / 100);
                var j = Math.floor(e.ⵠⵠⲆ / 100);
                var a = Math.floor(e.w / 100);
                var k = f + Math.floor(j / 2);
                var m = i + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    c(n = Math.floor(k - 3 + cf.ᐃᐃᐃΔᐃ.get() * 6), o = Math.floor(m - 3 + cf.ᐃᐃᐃΔᐃ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var n;
                    var o;
                    if (c(n = Math.floor(k - 3 + cf.ᐃᐃᐃΔᐃ.get() * 6), o = Math.floor(m - 3 + cf.ᐃᐃᐃΔᐃ.get() * 6), "wtb", 0, 1) === 1) {
                        d.push([n, o, 0]);
                    }
                }
            })(a, e);
            l(a, e);
            e = [];
        }
        function m(a, b) {
            for (var c = 0; c < 6; c++) {
                r(a, "t", c, Math.floor(b * 20));
            }
            for (c = 0; c < 4; c++) {
                r(a, "b", c, Math.floor(b * 20));
            }
            for (c = 0; c < 3; c++) {
                r(a, "s", c, Math.floor(b * 20));
            }
            var d = [];
            o(a, d);
            l(a, d);
            d = [];
            r(a, "p", 0, Math.floor(b * 24));
            for (c = 0; c < 3; c++) {
                r(a, "g", c, Math.floor(b * 5));
            }
            if (cf.mode === 2) {
                for (c = 0; c < 3; c++) {
                    r(a, "d", c, Math.floor(b * 3));
                }
                for (c = 0; c < 3; c++) {
                    r(a, "a", c, Math.floor(b * 2));
                }
            }
            p(a);
        }
        function b(a, b, c, d) {
            if (q(a, b) && (Δⵠⵠᐃ = Rw.Δⵠⵠᐃ, Xh === Δⵠⵠᐃ[a][b] && (Δⵠⵠᐃ[a][b] = {}), Δⵠⵠᐃ[a][b].r === Lq)) {
                var e = 0;
                if (q(a - 1, b) && Δⵠⵠᐃ[a - 1][b] !== undefined && Δⵠⵠᐃ[a - 1][b].wtb !== Kr) {
                    e += 2;
                }
                if (q(a, b - 1) && Δⵠⵠᐃ[a][b - 1] !== undefined && Δⵠⵠᐃ[a][b - 1].wtb !== undefined) {
                    e += 8;
                }
                if (q(a, b + 1) && Δⵠⵠᐃ[a][b + 1] !== undefined && Δⵠⵠᐃ[a][b + 1].wtb !== undefined) {
                    e += 16;
                }
                if (q(a + 1, b) && Δⵠⵠᐃ[a + 1][b] !== undefined && mh !== Δⵠⵠᐃ[a + 1][b].wtb) {
                    e += 64;
                }
                if (!!q(a - 1, b - 1) && !(~e & 10) && Yk !== Δⵠⵠᐃ[a - 1][b - 1] && Δⵠⵠᐃ[a - 1][b - 1].wtb !== undefined) {
                    e += 1;
                }
                if (q(a - 1, b + 1) && (e & 18) === 18 && Δⵠⵠᐃ[a - 1][b + 1] !== ii && ma !== Δⵠⵠᐃ[a - 1][b + 1].wtb) {
                    e += 4;
                }
                if (q(a + 1, b - 1) && (e & 72) === 72 && Δⵠⵠᐃ[a + 1][b - 1] !== undefined && Δⵠⵠᐃ[a + 1][b - 1].wtb !== undefined) {
                    e += 32;
                }
                if (q(a + 1, b + 1) && (e & 80) === 80 && Δⵠⵠᐃ[a + 1][b + 1] !== undefined && Δⵠⵠᐃ[a + 1][b + 1].wtb !== undefined) {
                    e += 128;
                }
                Δⵠⵠᐃ[a][b].r = {};
                Δⵠⵠᐃ[a][b].r.ⵠᐃⵠᐃᐃᐃⵠ = e;
                Δⵠⵠᐃ[a][b].r.ΔΔᐃⲆⵠⵠⵠ = d;
                Δⵠⵠᐃ[a][b].r.Ⲇᐃⵠᐃ = cf.ΔⲆⲆⲆΔ(c, b * 100 + 50, a * 100 + 50) - 400;
                Δⵠⵠᐃ[a][b].r.x = b * 100 + 50;
                Δⵠⵠᐃ[a][b].r.y = a * 100 + 50;
            }
        }
        function c(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && a < cf.ⵠⵠⲆΔΔ && cf.ⵠⵠⲆⵠΔ > b) {
                Δⵠⵠᐃ = Rw.Δⵠⵠᐃ;
                if (Δⵠⵠᐃ[a][b] === undefined) {
                    Δⵠⵠᐃ[a][b] = {};
                }
                if (Δⵠⵠᐃ[a][b][c] !== undefined) {
                    return 0;
                } else {
                    Δⵠⵠᐃ[a][b][c] = [];
                    Δⵠⵠᐃ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            xt.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function u(a, b, c) {
            if (a[b]) {
                for (yk = 0; yk < a[b].length; yk++) {
                    if (a[b][yk]) {
                        for (ⵠⵠⲆⵠ = 0; a[b][yk].length > ⵠⵠⲆⵠ; ⵠⵠⲆⵠ++) {
                            a[b][yk][ⵠⵠⲆⵠ].ⵠⲆⵠᐃ = c;
                            a[b][yk][ⵠⵠⲆⵠ].ⵠⵠΔ = Vh;
                            a[b][yk][ⵠⵠⲆⵠ].time = 0;
                            a[b][yk][ⵠⵠⲆⵠ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = 0;
        this.ΔⵠᐃⲆᐃⲆⲆ = j;
        this.ᐃΔⲆⲆΔ = 0;
        this.ᐃᐃΔⵠᐃΔᐃ = 6;
        this.ⲆⵠᐃΔ = [];
        this.Δⵠⵠ = [];
        this.Δⵠⵠ[0] = [];
        this.Δⵠⵠ[100] = [];
        this.Δⵠⵠ[80] = [];
        this.Δⵠⵠ[60] = [];
        this.Δⵠⵠ[67] = [];
        this.Δⵠⵠ[70] = [];
        this.Δⵠⵠ[77] = [];
        this.Δⵠⵠ[71] = [];
        this.Δⵠⵠ[72] = [];
        this.Δⵠⵠ[73] = [];
        this.Δⵠⵠ[74] = [];
        this.Δⵠⵠ[65] = [];
        this.Δⵠⵠ[66] = [];
        this.Δⵠⵠ[62] = [];
        this.Δⵠⵠ[88] = [];
        this.Δⵠⵠ[91] = [];
        this.Δⵠⵠ[90] = [];
        this.Δⵠⵠ[63] = [];
        this.Δⵠⵠ[78] = [];
        this.Δⵠⵠ[64] = [];
        this.Δⵠⵠ[69] = [];
        this.Δⵠⵠ[68] = [];
        this.Δⵠⵠ[79] = [];
        this.Δⵠⵠ[89] = [];
        this.Δⵠⵠ[83] = [];
        this.Δⵠⵠ[84] = [];
        this.Δⵠⵠ[85] = [];
        this.Δⵠⵠ[81] = [];
        this.Δⵠⵠ[82] = [];
        this.Δⵠⵠ[86] = [];
        this.Δⵠⵠ[34] = [];
        this.Δⵠⵠ[36] = [];
        this.Δⵠⵠ[61] = [];
        this.Δⵠⵠ[2] = [];
        this.Δⵠⵠ[1] = [];
        this.Δⵠⵠ[6] = [];
        this.Δⵠⵠ[3] = [];
        this.Δⵠⵠ[5] = [];
        this.Δⵠⵠ[12] = [];
        this.Δⵠⵠ[13] = [];
        this.Δⵠⵠ[14] = [];
        this.Δⵠⵠ[20] = [];
        this.Δⵠⵠ[52] = [];
        this.Δⵠⵠ[4] = [];
        this.Δⵠⵠ[7] = [];
        this.Δⵠⵠ[8] = [];
        this.Δⵠⵠ[9] = [];
        this.Δⵠⵠ[19] = [];
        this.Δⵠⵠ[50] = [];
        this.Δⵠⵠ[41] = [];
        this.Δⵠⵠ[10] = [];
        this.Δⵠⵠ[15] = [];
        this.Δⵠⵠ[16] = [];
        this.Δⵠⵠ[17] = [];
        this.Δⵠⵠ[21] = [];
        this.Δⵠⵠ[51] = [];
        this.Δⵠⵠ[45] = [];
        this.Δⵠⵠ[46] = [];
        this.Δⵠⵠ[47] = [];
        this.Δⵠⵠ[48] = [];
        this.Δⵠⵠ[49] = [];
        this.Δⵠⵠ[53] = [];
        this.Δⵠⵠ[18] = [];
        this.Δⵠⵠ[29] = [];
        this.Δⵠⵠ[56] = [];
        this.Δⵠⵠ[11] = [];
        this.Δⵠⵠ[22] = [];
        this.Δⵠⵠ[23] = [];
        this.Δⵠⵠ[30] = [];
        this.Δⵠⵠ[38] = [];
        this.Δⵠⵠ[33] = [];
        this.Δⵠⵠ[31] = [];
        this.Δⵠⵠ[55] = [];
        this.Δⵠⵠ[37] = [];
        this.Δⵠⵠ[43] = [];
        this.Δⵠⵠ[44] = [];
        this.Δⵠⵠ[54] = [];
        this.Δⵠⵠ[39] = [];
        this.Δⵠⵠ[40] = [];
        this.Δⵠⵠ[32] = [];
        this.Δⵠⵠ[24] = [];
        this.Δⵠⵠ[25] = [];
        this.Δⵠⵠ[26] = [];
        this.Δⵠⵠ[27] = [];
        this.Δⵠⵠ[28] = [];
        this.Δⵠⵠ[35] = [];
        this.Δⵠⵠ[87] = [];
        this.Δⵠⵠ[42] = [];
        this.ⵠⲆᐃⲆⲆ = [];
        this.ⵠⵠⲆⵠΔ = 260;
        this.ⵠⵠⲆΔΔ = 260;
        this.ΔΔⲆⵠΔΔᐃ = 100;
        this.ⵠⵠⵠⵠΔΔᐃ = 100;
        this.w = this.ⵠⵠⲆⵠΔ * this.ΔΔⲆⵠΔΔᐃ;
        this.ⵠⵠⲆ = this.ⵠⵠⵠⵠΔΔᐃ * this.ⵠⵠⲆΔΔ;
        this.ᐃᐃᐃΔᐃ = new pk.ΔⵠᐃⵠΔⲆⵠ();
        this.ⵠⵠⵠⵠⲆ = [];
        this.ⵠⵠΔᐃ = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qk, 0, 1, 0, 1, 1);
        this.transition = false;
        this.ᐃᐃⲆⲆᐃ = [];
        this.ΔⵠⲆⲆΔ = 0;
        this.ⵠΔⵠⵠΔᐃΔ = 1;
        this.ΔⵠΔⲆⲆΔᐃ = 2;
        this.ᐃΔⵠⵠⵠΔΔ = 3;
        this.ᐃΔⲆⵠⵠ = 4;
        this.ΔⵠⲆⲆⲆᐃᐃ = 10;
        this.ᐃᐃⲆⲆᐃ[this.ΔⵠⲆⲆΔ] = {
            ⵠΔⵠⵠᐃⵠΔ: 1,
            ⵠᐃⲆ: [19, 58, 43],
            ⵠⲆⲆ: [4, 43, 48],
            ᐃⵠᐃⵠⲆ: ["#133a2b", "#042b30"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ᐃΔⲆⵠⵠ] = {
            ⵠΔⵠⵠᐃⵠΔ: 0,
            ⵠᐃⲆ: [11, 106, 132],
            ⵠⲆⲆ: [9, 55, 63],
            ᐃⵠᐃⵠⲆ: ["#0B6A84", "#09373F"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ⵠΔⵠⵠΔᐃΔ] = {
            ⵠΔⵠⵠᐃⵠΔ: 0,
            ⵠᐃⲆ: [235, 242, 240],
            ⵠⲆⲆ: [19, 97, 103],
            ᐃⵠᐃⵠⲆ: ["#EBF2F0", "#136167"]
        };
        this.ᐃᐃⲆⲆᐃ[this.ΔⵠΔⲆⲆΔᐃ] = {
            ⵠΔⵠⵠᐃⵠΔ: 0,
            ᐃⵠᐃⵠⲆ: ["#2D2017", "#031C1E"],
            ⵠᐃⲆ: [45, 32, 23],
            ⵠⲆⲆ: [3, 28, 30]
        };
        this.ᐃᐃⲆⲆᐃ[this.ᐃΔⵠⵠⵠΔΔ] = {
            ᐃⵠᐃⵠⲆ: ["#4A4A4A", "#183D3C"],
            ⵠⲆⲆ: [24, 61, 60],
            ⵠΔⵠⵠᐃⵠΔ: 0,
            ⵠᐃⲆ: [74, 74, 74]
        };
        this.ᐃᐃⲆⲆᐃ[this.ΔⵠⲆⲆⲆᐃᐃ] = {
            ⵠΔⵠⵠᐃⵠΔ: 0,
            ᐃⵠᐃⵠⲆ: ["#EBD8A6", "#093D38"],
            ⵠⲆⲆ: [9, 61, 56],
            ⵠᐃⲆ: [235, 216, 166]
        };
        this.ⲆᐃⵠⲆⲆᐃⲆ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ⵠⵠⲆ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ΔⵠΔ = b;
            this.ⵠΔⲆ = g === undefined ? 15 : g;
        };
        this.ⲆⵠᐃᐃⲆ = -1000000;
        this.ΔⵠᐃⲆᐃ = this.ⲆⵠᐃᐃⲆ;
        this.ⵠΔΔⲆⲆ = this.ⲆⵠᐃᐃⲆ;
        this.ⲆⵠⲆⲆᐃ = this.ⲆⵠᐃᐃⲆ;
        this.ΔⵠᐃΔⵠⲆⵠ = this.ⲆⵠᐃᐃⲆ;
        this.ⲆᐃΔΔΔⵠΔ = this.ⲆⵠᐃᐃⲆ;
        this.ⵠⲆⲆΔᐃ = this.ⲆⵠᐃᐃⲆ;
        this.ᐃᐃΔⵠᐃᐃᐃⵠᐃ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ΔⵠᐃⲆᐃ = cf.ⲆⵠᐃᐃⲆ;
            b.ⵠΔΔⲆⲆ = cf.ⲆⵠᐃᐃⲆ;
            b.ⲆⵠⲆⲆᐃ = cf.ⲆⵠᐃᐃⲆ;
            b.ΔⵠᐃΔⵠⲆⵠ = cf.ⲆⵠᐃᐃⲆ;
            b.ⵠⲆⲆΔᐃ = cf.ⲆⵠᐃᐃⲆ;
            b.ᐃⵠⵠⲆⵠⲆᐃ = cf.ⲆⵠᐃᐃⲆ;
            for (var g = 0; cf.ᐃΔⲆⵠⵠ !== cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ; g++) {
                if (cf.ΔⵠⲆⲆΔ === cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ) {
                    var h = cf.ΔⲆⲆⲆΔ(g, c, d);
                    b.ΔⵠᐃΔⵠⲆⵠ = Math.max(b.ΔⵠᐃΔⵠⲆⵠ, h);
                    if (h > 0 && cf.ΔᐃᐃⲆⲆᐃⵠΔⲆ(g, c, d) === 1) {
                        b.ᐃⵠⵠⲆⵠⲆᐃ = 1;
                    }
                } else if (cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ === cf.ⵠΔⵠⵠΔᐃΔ) {
                    b.ΔⵠᐃⲆᐃ = Math.max(b.ΔⵠᐃⲆᐃ, cf.ΔⲆⲆⲆΔ(g, c, d));
                } else if (cf.ΔⵠⲆⲆⲆᐃᐃ === cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ) {
                    b.ⵠΔΔⲆⲆ = Math.max(b.ⵠΔΔⲆⲆ, cf.ΔⲆⲆⲆΔ(g, c, d));
                } else if (cf.ΔⵠΔⲆⲆΔᐃ === cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ) {
                    b.ⲆⵠⲆⲆᐃ = Math.max(b.ⲆⵠⲆⲆᐃ, cf.ΔⲆⲆⲆΔ(g, c, d));
                } else if (cf.ᐃΔⵠⵠⵠΔΔ === cf.ⵠⵠⵠⵠⲆ[g].ΔⵠΔ) {
                    b.ⵠⲆⲆΔᐃ = Math.max(b.ⵠⲆⲆΔᐃ, cf.ΔⲆⲆⲆΔ(g, c, d));
                }
            }
            if (Rw.Δⵠⵠᐃ[e][f].iblk) {
                b.ᐃⵠⵠⲆⵠⲆᐃ = 1;
            }
            if (cf.ⵠⵠⵠΔⲆΔⵠΔⲆ(f, e)) {
                b.ⲆᐃΔΔΔⵠΔ = b.ⲆⵠᐃᐃⲆ;
            } else if (Rw.Δⵠⵠᐃ[e][f].wtb || b.ΔⵠᐃⲆᐃ < 0 && b.ⲆⵠⲆⲆᐃ < 0 && b.ΔⵠᐃΔⵠⲆⵠ < 0 && b.ᐃⵠⵠⲆⵠⲆᐃ < 0 && b.ⵠⲆⲆΔᐃ < 0 && b.ⵠΔΔⲆⲆ < 0) {
                b.ⲆᐃΔΔΔⵠΔ = 1;
            } else {
                b.ⲆᐃΔΔΔⵠΔ = b.ⲆⵠᐃᐃⲆ;
            }
        };
        this.ᐃΔᐃⵠΔⲆᐃᐃⵠ = function (a, b) {
            cf.ΔⵠᐃⲆᐃ = cf.ⲆⵠᐃᐃⲆ;
            cf.ⵠΔΔⲆⲆ = cf.ⲆⵠᐃᐃⲆ;
            cf.ⲆⵠⲆⲆᐃ = cf.ⲆⵠᐃᐃⲆ;
            cf.ⵠⲆⲆΔᐃ = cf.ⲆⵠᐃᐃⲆ;
            cf.ΔⵠᐃΔⵠⲆⵠ = cf.ⲆⵠᐃᐃⲆ;
            for (var c = 0; cf.ᐃΔⲆⵠⵠ !== cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ; c++) {
                if (cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ === cf.ΔⵠⲆⲆΔ) {
                    cf.ΔⵠᐃΔⵠⲆⵠ = Math.max(cf.ΔⵠᐃΔⵠⲆⵠ, cf.ΔⲆⲆⲆΔ(c, a, b));
                } else if (cf.ⵠΔⵠⵠΔᐃΔ === cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ) {
                    cf.ΔⵠᐃⲆᐃ = Math.max(cf.ΔⵠᐃⲆᐃ, cf.ΔⲆⲆⲆΔ(c, a, b));
                } else if (cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ === cf.ΔⵠⲆⲆⲆᐃᐃ) {
                    cf.ⵠΔΔⲆⲆ = Math.max(cf.ⵠΔΔⲆⲆ, cf.ΔⲆⲆⲆΔ(c, a, b));
                } else if (cf.ΔⵠΔⲆⲆΔᐃ === cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ) {
                    cf.ⲆⵠⲆⲆᐃ = Math.max(cf.ⲆⵠⲆⲆᐃ, cf.ΔⲆⲆⲆΔ(c, a, b));
                } else if (cf.ⵠⵠⵠⵠⲆ[c].ΔⵠΔ === cf.ᐃΔⵠⵠⵠΔΔ) {
                    cf.ⵠⲆⲆΔᐃ = Math.max(cf.ⵠⲆⲆΔᐃ, cf.ΔⲆⲆⲆΔ(c, a, b));
                }
            }
            if (cf.ΔⵠᐃⲆᐃ < 0 && cf.ⵠⲆⲆΔᐃ < 0 && cf.ΔⵠᐃΔⵠⲆⵠ < 0 && cf.ⵠⲆⲆΔᐃ < 0 && cf.ⵠΔΔⲆⲆ < 0) {
                cf.ⲆᐃΔΔΔⵠΔ = 1;
            } else {
                cf.ⲆᐃΔΔΔⵠΔ = cf.ⲆⵠᐃᐃⲆ;
            }
        };
        this.ΔᐃᐃⲆⲆᐃⵠΔⲆ = function (b, c, d) {
            var e = cf.ⵠⵠⵠⵠⲆ[b];
            var f = 0;
            ⵠⵠⵠᐃ = e.x1 + 30 + (e.ⵠΔⲆ & 4 ? 0 : 150);
            var g = c - ⵠⵠⵠᐃ;
            if ((e.ⵠΔⲆ & 4) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⲆⵠᐃⲆ = e.y1 + 250 + (e.ⵠΔⲆ & 1 ? 0 : 150);
            g = d - ⲆⵠᐃⲆ;
            if ((e.ⵠΔⲆ & 1) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔᐃⵠⲆ = e.x2 + 80 + (e.ⵠΔⲆ & 8 ? 0 : -200);
            g = ΔᐃⵠⲆ - c;
            if ((e.ⵠΔⲆ & 8) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ᐃᐃΔᐃ = e.y2 - 200 + (e.ⵠΔⲆ & 2 ? 0 : -200);
            g = ᐃᐃΔᐃ - d;
            if ((e.ⵠΔⲆ & 2) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (ⵠⵠⵠᐃ <= c && c <= ΔᐃⵠⲆ && ⲆⵠᐃⲆ <= d && ᐃᐃΔᐃ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ΔⲆⲆⲆΔ = function (a, b, c) {
            var d = cf.ⵠⵠⵠⵠⲆ[a];
            ⵠⵠⵠᐃ = d.x1 + 30;
            ⲆⵠᐃⲆ = d.y1 + 250;
            ΔᐃⵠⲆ = d.x2 + 80;
            ᐃᐃΔᐃ = d.y2 - 200;
            if (b >= ⵠⵠⵠᐃ && b <= ΔᐃⵠⲆ && c >= ⲆⵠᐃⲆ && ᐃᐃΔᐃ >= c) {
                return Math.min(b - ⵠⵠⵠᐃ, ΔᐃⵠⲆ - b, c - ⲆⵠᐃⲆ, ᐃᐃΔᐃ - c);
            }
            var e = -1000000;
            if (b - ⵠⵠⵠᐃ < 0) {
                e = Math.max(e, b - ⵠⵠⵠᐃ);
            } else if (ΔᐃⵠⲆ - b < 0) {
                e = Math.max(e, ΔᐃⵠⲆ - b);
            }
            ΔΔⲆⲆⵠΔΔ = -1000000;
            if (ⲆⵠᐃⲆ > c || c > ᐃᐃΔᐃ) {
                if (c - ⲆⵠᐃⲆ < 0) {
                    ΔΔⲆⲆⵠΔΔ = Math.max(ΔΔⲆⲆⵠΔΔ, c - ⲆⵠᐃⲆ);
                } else {
                    ΔΔⲆⲆⵠΔΔ = Math.max(ΔΔⲆⲆⵠΔΔ, ᐃᐃΔᐃ - c);
                }
                e = e !== -1000000 && ΔΔⲆⲆⵠΔΔ !== -1000000 ? Math.min(e, ΔΔⲆⲆⵠΔΔ) : ΔΔⲆⲆⵠΔΔ;
            }
            return e;
        };
        this.ᐃⲆⵠⵠⵠⲆᐃ = function (b, d, e) {
            var f = e;
            var g = d;
            c(f, g, "isl", b, 1);
            for (var h = 0; h < 4; h++) {
                for (var i = 0; i < 3; i++) {
                    c(f - i, g - h, "iblk", 0);
                    c(f + i, g - h, "iblk", 0);
                    c(f + i, g + h, "iblk", 0);
                    c(f - i, g + h, "iblk", 0);
                }
            }
            if (b === 0) {
                for (h = 0; h < 2; h++) {
                    c(f - h, g - 4, "iblk", 0);
                    c(f + h, g - 4, "iblk", 0);
                    c(f - h, g + 4, "iblk", 0);
                    c(f + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 3; h++) {
                    c(f - 3, g + h, "iblk", 0);
                    c(f + 3, g + h, "iblk", 0);
                    c(f - 3, g - h, "iblk", 0);
                    c(f + 3, g - h, "iblk", 0);
                }
                c(f - 2, g - 4, "iblk", 0);
                c(f - 3, g - 3, "iblk", 0);
                c(f + 2, g + 4, "iblk", 0);
                c(f + 3, g + 3, "iblk", 0);
            } else if (b === 1) {
                for (h = 0; h < 3; h++) {
                    c(f - h, g - 4, "iblk", 0);
                    c(f + h, g - 4, "iblk", 0);
                    c(f - h, g + 4, "iblk", 0);
                    c(f + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 4; h++) {
                    c(f - 3, g + h, "iblk", 0);
                    c(f + 3, g + h, "iblk", 0);
                    c(f - 3, g - h, "iblk", 0);
                    c(f + 3, g - h, "iblk", 0);
                }
            } else if (b === 2) {
                for (h = 0; h < 2; h++) {
                    c(f - h, g - 4, "iblk", 0);
                    c(f + h, g - 4, "iblk", 0);
                    c(f - h, g + 4, "iblk", 0);
                    c(f + h, g + 4, "iblk", 0);
                }
                for (h = 0; h < 3; h++) {
                    c(f - 3, g + h, "iblk", 0);
                    c(f + 3, g + h, "iblk", 0);
                    c(f - 3, g - h, "iblk", 0);
                    c(f + 3, g - h, "iblk", 0);
                }
            }
        };
        this.ΔᐃΔⵠΔᐃΔᐃⵠ = function (b) {
            for (var d = 0; cf.ⵠⵠⵠⵠⲆ.length > d && b > 0; d++) {
                var f = cf.ⵠⵠⵠⵠⲆ[d];
                if (f.ΔⵠΔ === cf.ᐃΔⲆⵠⵠ && f.w > 1800 && f.ⵠⵠⲆ > 1000) {
                    var g = Math.floor((f.x1 + f.w / 2) / 100);
                    var h = Math.floor((f.y1 + f.ⵠⵠⲆ / 2) / 100);
                    cf.ᐃⲆⵠⵠⵠⲆᐃ(b % 3, g, h);
                    for (var j = 0; j < 3; j++) {
                        var k = h - 2 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 4);
                        var l = g - 3 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 6);
                        if (Xh === Rw.Δⵠⵠᐃ[k][l].s) {
                            c(k, l, "plm", j);
                        }
                        k = h - 2 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 4);
                        l = g - 3 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 6);
                        if (Rw.Δⵠⵠᐃ[k][l].plm === Xh) {
                            c(k, l, "s", j);
                        }
                    }
                    k = h - 2 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 4);
                    l = g - 3 + Math.floor(cf.ᐃᐃᐃΔᐃ.get() * 6);
                    if (Rw.Δⵠⵠᐃ[k][l].plm === undefined && Rw.Δⵠⵠᐃ[k][l].s === _q) {
                        c(k, l, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ⵠΔΔᐃⲆⵠⵠⵠⵠ = function (j) {
            cf.ᐃᐃᐃΔᐃ.Ⲇᐃⵠⵠⵠ(j);
            var k = 0;
            while (true) {
                if (++k > 10000) {
                    return;
                }
                cf.ⵠⵠⵠⵠⲆ = [];
                if (cf.ᐃΔⲆⲆΔ === 0 && (cf.mode === 3 || cf.mode === 7 || cf.mode === 0)) {
                    cf.ᐃΔⲆⲆΔ = Ir;
                }
                if (cf.mode === 2) {
                    cf.ⵠⵠⵠⵠⲆ.push(new cf.ⲆᐃⵠⲆⲆᐃⲆ(cf.ΔⵠⲆⲆΔ, 2, 2, 80, 80, 15));
                } else if (cf.mode === 4) {
                    cf.ⵠⵠⵠⵠⲆ.push(new cf.ⲆᐃⵠⲆⲆᐃⲆ(cf.ΔⵠⲆⲆΔ, 2, 2, 150, 150, 15));
                } else if (cf.ᐃΔⲆⲆΔ !== 0 && cf.ᐃΔⲆⲆΔ.length > 0 && cf.ᐃΔⲆⲆΔ[0].length > 3) {
                    for (var o = 0; o < cf.ᐃΔⲆⲆΔ.length; o++) {
                        var q = cf.ᐃΔⲆⲆΔ[o];
                        if (q[0] !== 0) {
                            break;
                        }
                        var t = pw.ΔⵠⲆⲆΔ;
                        switch (q[1]) {
                            case "FOREST":
                                t = cf.ΔⵠⲆⲆΔ;
                                break;
                            case "WINTER":
                                t = cf.ⵠΔⵠⵠΔᐃΔ;
                                break;
                            case "DESERT":
                                t = cf.ΔⵠⲆⲆⲆᐃᐃ;
                                break;
                            case "LAVA":
                                t = cf.ΔⵠΔⲆⲆΔᐃ;
                                break;
                            case "DRAGON":
                                t = cf.ᐃΔⵠⵠⵠΔΔ;
                        }
                        cf.ⵠⵠⵠⵠⲆ.push(new cf.ⲆᐃⵠⲆⲆᐃⲆ(t, q[2], q[3], q[4], q[5], q[6], q[7]));
                    }
                } else if (cf.ᐃΔⲆⲆΔ !== 0) {
                    for (o = 0; cf.ᐃΔⲆⲆΔ.length > o; o++) {
                        var u = cf.ᐃΔⲆⲆΔ[o];
                        t = pw.ΔⵠⲆⲆΔ;
                        switch (u[0]) {
                            case "FOREST":
                                t = cf.ΔⵠⲆⲆΔ;
                                break;
                            case "WINTER":
                                t = cf.ⵠΔⵠⵠΔᐃΔ;
                                break;
                            case "DESERT":
                                t = cf.ΔⵠⲆⲆⲆᐃᐃ;
                                break;
                            case "LAVA":
                                t = cf.ΔⵠΔⲆⲆΔᐃ;
                                break;
                            case "DRAGON":
                                t = cf.ᐃΔⵠⵠⵠΔΔ;
                        }
                        if (i(t, u[1], u[2], 0, (o + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (cf.ᐃΔⲆⲆΔ.length !== o) {
                        continue;
                    }
                }
                break;
            }
            ΔⵠⵠⲆⵠⲆⵠⵠⲆ();
            var v = [];
            for (var x = 0; cf.ⵠⵠⲆΔΔ > x; x++) {
                v[x] = new Array(cf.ⵠⵠⲆⵠΔ);
                for (var A = 0; cf.ⵠⵠⲆⵠΔ > A; A++) {
                    v[x][A] = 0;
                }
            }
            for (x = 0; cf.ⵠⵠⵠⵠⲆ.length > x; x++) {
                for (var B = (u = cf.ⵠⵠⵠⵠⲆ[x]).x2 / 100, D = u.y2 / 100, E = u.x1 / 100; B >= E; E++) {
                    for (var F = u.y1 / 100; F <= D; F++) {
                        v[F][E] = 1;
                    }
                }
            }
            for (F = 0; F < cf.ⵠⵠⲆΔΔ; F++) {
                for (E = 0; E < cf.ⵠⵠⲆⵠΔ; E++) {
                    if (v[F][E] === 0) {
                        e(v, E, F);
                    }
                }
            }
            Rw = {
                w: cf.ⵠⵠⲆⵠΔ,
                ⵠⵠⲆ: cf.ⵠⵠⲆΔΔ,
                Δⵠⵠᐃ: []
            };
            for (x = 0; cf.ⵠⵠⲆΔΔ > x; x++) {
                Rw.Δⵠⵠᐃ[x] = [];
            }
            if (cf.ᐃΔⲆⲆΔ !== 0 && cf.ᐃΔⲆⲆΔ.length > 0 && cf.ᐃΔⲆⲆΔ[0].length > 3) {
                for (o = 0; cf.ᐃΔⲆⲆΔ.length > o; o++) {
                    if ((q = cf.ᐃΔⲆⲆΔ[o])[1] === "isl") {
                        cf.ᐃⲆⵠⵠⵠⲆᐃ(q[2], q[3], q[4]);
                    }
                }
            } else {
                cf.ΔᐃΔⵠΔᐃΔᐃⵠ(cf.ᐃᐃΔⵠᐃΔᐃ);
            }
            if (cf.ᐃΔⲆⲆΔ !== 0 && cf.ᐃΔⲆⲆΔ.length > 0 && cf.ᐃΔⲆⲆΔ[0].length > 3) {
                var G = [];
                for (o = 0; o < cf.ᐃΔⲆⲆΔ.length; o++) {
                    if ((q = cf.ᐃΔⲆⲆΔ[o])[0] === 1) {
                        if (q[1] === "r") {
                            c(q[3], q[2], "wtb", 0, 1);
                            G.push([q[3], q[2], q[4]]);
                        } else {
                            c(q[4], q[3], q[1], q[2], q[5]);
                        }
                    }
                }
                l(0, G);
                G = [];
            } else {
                for (x = 0; cf.ⵠⵠⵠⵠⲆ.length > x; x++) {
                    u = cf.ⵠⵠⵠⵠⲆ[x];
                    if (cf.mode === 4) {
                        if (u.ΔⵠΔ === cf.ΔⵠⲆⲆΔ) {
                            d(x, u.w / 10000);
                        }
                    } else {
                        if (u.ΔⵠΔ === cf.ΔⵠⲆⲆΔ) {
                            m(x, u.w / 10000);
                        }
                        if (u.ΔⵠΔ === cf.ΔⵠΔⲆⲆΔᐃ) {
                            n(x, u.w / 10000);
                        }
                        if (cf.ⵠΔⵠⵠΔᐃΔ === u.ΔⵠΔ) {
                            g(x, u.w / 10000);
                        }
                        if (cf.ΔⵠⲆⲆⲆᐃᐃ === u.ΔⵠΔ) {
                            s(x, u.w / 10000);
                        }
                        if (u.ΔⵠΔ === cf.ᐃΔⵠⵠⵠΔΔ) {
                            h(x);
                        }
                    }
                }
            }
            yt("isl", 1);
            yt("wtb", 20);
            yt("la", 1);
            yt("c", 1);
            yt("s", 1);
            yt("f", 1);
            yt("p", 1);
            yt("g", 1);
            yt("d", 1);
            yt("a", 1);
            yt("re", 1);
            yt("m", 1);
            xt = [];
            cf.ⲆᐃⵠΔⲆⵠΔⵠⲆ(Rw);
        };
        this.ⲆⵠΔΔ = c;
        this.ⲆᐃⵠΔⲆⵠΔⵠⲆ = function (b) {
            for (var c = 0; c < this.ⵠⵠⲆΔΔ; c++) {
                for (var d = 0; this.ⵠⵠⲆⵠΔ > d; d++) {
                    if (!b.Δⵠⵠᐃ[c]) {
                        b.Δⵠⵠᐃ[c] = [];
                    }
                    if (b.Δⵠⵠᐃ[c][d]) {
                        var e = b.Δⵠⵠᐃ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var f = 0; e.de.length > f; f++) {
                                if (e.de[f] && e.de[f].length > 0) {
                                    e.de = e.de[f][0];
                                    if (f >= 41 && f <= 49) {
                                        e.de.scale = 3;
                                        var g = Math.floor(Math.random() * 3 + 1);
                                        e.de.Δⵠᐃ = [];
                                        for (var h = 0; g > h; h++) {
                                            e.de.Δⵠᐃ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆᐃΔⲆ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (f >= 19 && f <= 26) {
                                        e.de.scale = 3;
                                        g = Math.floor(Math.random() * 3 + 1);
                                        e.de.Δⵠᐃ = [];
                                        for (h = 0; h < g; h++) {
                                            e.de.Δⵠᐃ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ⲆᐃΔⲆ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (f <= 15 || f >= 27 && f <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ⲆᐃΔⲆ = f;
                                    } else {
                                        e.de.angle = Math.random() * Math.PI * 2;
                                        e.de.scale = 1;
                                        e.de.ⲆᐃΔⲆ = f;
                                    }
                                }
                            }
                        }
                        u(e, "p", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "t", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Ga, 1, 1, 0, 10, 10));
                        u(e, "s", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 1, 1, 0, 10, 10));
                        u(e, "g", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Wh, 1, 1, 0, 10, 10));
                        u(e, "d", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Ga, 1, 1, 0, 10, 10));
                        u(e, "b", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 1, 1, 0, 10, 10));
                        u(e, "f", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(xj, 1, 1, 0, 10, 10));
                        u(e, "sw", new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 1, 1, 0, 10, 10));
                        u(e, "gw", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "dw", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "a", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cr, 1, 1, 0, 10, 10));
                        u(e, "cs", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "plm", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "re", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                        u(e, "c", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(aq, 1, 1, 0, 10, 10));
                        u(e, "m", new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 10, 10));
                    } else {
                        b.Δⵠⵠᐃ[c][d] = [];
                    }
                }
            }
        };
        this.time = 0;
        this.ⲆᐃⵠΔΔ = {
            now: 0,
            translate: {
                x: 0,
                y: 0
            },
            ⵠᐃᐃⲆⲆ: 0,
            Ⲇᐃⵠⵠⵠ: 0
        };
        this.ΔΔᐃⵠⵠⲆⲆⵠⵠ = function () {
            this.ⵠⲆᐃⲆⲆ = [];
            this.Δⵠⵠ[0] = [];
            this.Δⵠⵠ[2] = [];
            this.Δⵠⵠ[1] = [];
            this.Δⵠⵠ[6] = [];
            this.Δⵠⵠ[3] = [];
            this.Δⵠⵠ[5] = [];
            this.Δⵠⵠ[12] = [];
            this.Δⵠⵠ[13] = [];
            this.Δⵠⵠ[14] = [];
            this.Δⵠⵠ[20] = [];
            this.Δⵠⵠ[52] = [];
            this.Δⵠⵠ[30] = [];
            this.Δⵠⵠ[56] = [];
            this.Δⵠⵠ[38] = [];
            this.Δⵠⵠ[33] = [];
            this.Δⵠⵠ[31] = [];
            this.Δⵠⵠ[55] = [];
            this.Δⵠⵠ[37] = [];
            this.Δⵠⵠ[43] = [];
            this.Δⵠⵠ[44] = [];
            this.Δⵠⵠ[54] = [];
            this.Δⵠⵠ[39] = [];
            this.Δⵠⵠ[40] = [];
            this.Δⵠⵠ[32] = [];
            this.Δⵠⵠ[24] = [];
            this.Δⵠⵠ[25] = [];
            this.Δⵠⵠ[26] = [];
            this.Δⵠⵠ[27] = [];
            this.Δⵠⵠ[28] = [];
            this.Δⵠⵠ[35] = [];
            this.Δⵠⵠ[4] = [];
            this.Δⵠⵠ[7] = [];
            this.Δⵠⵠ[8] = [];
            this.Δⵠⵠ[9] = [];
            this.Δⵠⵠ[19] = [];
            this.Δⵠⵠ[50] = [];
            this.Δⵠⵠ[41] = [];
            this.Δⵠⵠ[10] = [];
            this.Δⵠⵠ[15] = [];
            this.Δⵠⵠ[16] = [];
            this.Δⵠⵠ[17] = [];
            this.Δⵠⵠ[21] = [];
            this.Δⵠⵠ[51] = [];
            this.Δⵠⵠ[45] = [];
            this.Δⵠⵠ[46] = [];
            this.Δⵠⵠ[47] = [];
            this.Δⵠⵠ[48] = [];
            this.Δⵠⵠ[49] = [];
            this.Δⵠⵠ[53] = [];
            this.Δⵠⵠ[18] = [];
            this.Δⵠⵠ[29] = [];
            this.Δⵠⵠ[56] = [];
            this.Δⵠⵠ[11] = [];
            this.Δⵠⵠ[22] = [];
            this.Δⵠⵠ[23] = [];
            this.Δⵠⵠ[100] = [];
            this.Δⵠⵠ[80] = [];
            this.Δⵠⵠ[60] = [];
            this.Δⵠⵠ[67] = [];
            this.Δⵠⵠ[70] = [];
            this.Δⵠⵠ[77] = [];
            this.Δⵠⵠ[71] = [];
            this.Δⵠⵠ[72] = [];
            this.Δⵠⵠ[73] = [];
            this.Δⵠⵠ[74] = [];
            this.Δⵠⵠ[65] = [];
            this.Δⵠⵠ[66] = [];
            this.Δⵠⵠ[62] = [];
            this.Δⵠⵠ[88] = [];
            this.Δⵠⵠ[91] = [];
            this.Δⵠⵠ[90] = [];
            this.Δⵠⵠ[63] = [];
            this.Δⵠⵠ[78] = [];
            this.Δⵠⵠ[75] = [];
            this.Δⵠⵠ[76] = [];
            this.Δⵠⵠ[64] = [];
            this.Δⵠⵠ[69] = [];
            this.Δⵠⵠ[68] = [];
            this.Δⵠⵠ[79] = [];
            this.Δⵠⵠ[89] = [];
            this.Δⵠⵠ[83] = [];
            this.Δⵠⵠ[84] = [];
            this.Δⵠⵠ[85] = [];
            this.Δⵠⵠ[81] = [];
            this.Δⵠⵠ[82] = [];
            this.Δⵠⵠ[86] = [];
            this.Δⵠⵠ[34] = [];
            this.Δⵠⵠ[36] = [];
            this.Δⵠⵠ[61] = [];
            this.Δⵠⵠ[87] = [];
            this.Δⵠⵠ[42] = [];
        };
        this.ΔⵠᐃⲆⲆᐃᐃᐃⵠ = function (a) {
            if (this.ⵠⲆᐃⲆⲆ[a]) {
                ΔΔⵠᐃ = this.ⵠⲆᐃⲆⲆ[a].type;
                this.ⵠⲆᐃⲆⲆ[a] = null;
                for (var b = this.Δⵠⵠ[ΔΔⵠᐃ], c = 0; b.length > c; c++) {
                    if (b[c].ᐃⲆⲆⵠ == a) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ΔⵠⵠⲆΔᐃⵠΔⵠ = function (a, b) {
            for (var c = 0; c < this.Δⵠⵠ[56].length; c++) {
                var d = this.Δⵠⵠ[56][c];
                if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ⵠⵠⵠΔⲆΔⵠΔⲆ = function (a, b) {
            for (var c = 0; c < this.Δⵠⵠ[30].length; c++) {
                var d = this.Δⵠⵠ[30][c];
                if (a == Math.floor(d.x / 100) && b == Math.floor(d.y / 100)) {
                    return ra;
                }
            }
            return yl;
        };
        this.ⵠⵠᐃⵠᐃ = function (j) {
            for (var e = 0; j.length > e; e++) {
                ⲆΔⵠΔ = j[e];
                if (ⲆΔⵠΔ.angle != ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ) {
                    var l = Math.PI * 2;
                    ⲆΔⵠΔ.angle = (ⲆΔⵠΔ.angle + l) % l;
                    ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ = (ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ + l) % l;
                    if (ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ != ⲆΔⵠΔ.angle) {
                        var q = ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ - ⲆΔⵠΔ.angle;
                        var B = Math.abs(q);
                        if (B > Math.PI) {
                            B = Math.PI * 2 - B;
                        }
                        var D = B / Math.PI * 3 * 10 * Xw;
                        if (Math.PI < q) {
                            ⲆΔⵠΔ.angle -= D;
                        } else if (q < -Math.PI) {
                            ⲆΔⵠΔ.angle += D;
                        } else if (q < 0) {
                            ⲆΔⵠΔ.angle -= D;
                        } else {
                            ⲆΔⵠΔ.angle += D;
                        }
                        ⲆΔⵠΔ.angle = (ⲆΔⵠΔ.angle + l) % l;
                        if (Math.abs(ⲆΔⵠΔ.angle - ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ) < D) {
                            ⲆΔⵠΔ.angle = ⲆΔⵠΔ.ⲆᐃⲆΔΔⲆⵠ;
                        }
                    }
                }
                Math.floor(ⲆΔⵠΔ.r.y / 100);
                Math.floor(ⲆΔⵠΔ.r.x / 100);
                if (ⲆΔⵠΔ.r.x != ⲆΔⵠΔ.x || ⲆΔⵠΔ.r.y != ⲆΔⵠΔ.y) {
                    if (ⲆΔⵠΔ.action & 64) {
                        ⲆΔⵠΔ.action -= 64;
                    }
                    ⲆΔⵠΔ.action |= 32;
                    var E = ΔⲆⵠᐃ.ΔⵠᐃᐃⵠⵠⲆ(ⲆΔⵠΔ, ⲆΔⵠΔ.r) + Math.PI;
                    var F = Xw * ⲆΔⵠΔ.ⵠⲆΔⵠΔ;
                    var G = ΔⲆⵠᐃ.Ⲇⵠᐃᐃᐃᐃⵠ(F, E);
                    if (ΔⲆⵠᐃ.ⲆⲆΔΔⵠⵠⵠ(G) < ΔⲆⵠᐃ.ⲆⲆΔΔⵠⵠⵠ(ΔⲆⵠᐃ.ΔⵠⵠⲆⵠⵠⵠ(ⲆΔⵠΔ, ⲆΔⵠΔ.r))) {
                        ΔⲆⵠᐃ.ΔⲆⵠⵠⲆᐃΔ(ⲆΔⵠΔ, G);
                    } else {
                        if (ⲆΔⵠΔ.action & 32) {
                            ⲆΔⵠΔ.action -= 32;
                        }
                        ⲆΔⵠΔ.action |= 64;
                        ΔⲆⵠᐃ.ΔᐃᐃᐃᐃᐃⲆ(ⲆΔⵠΔ.r, ⲆΔⵠΔ);
                    }
                }
                if (ⲆΔⵠΔ.ⵠΔᐃᐃᐃ) {
                    var H = ⲆΔⵠΔ.bubbles;
                    if ((M = H.length) === 0 || M < 20 && H[M - 1].ⵠᐃⵠΔΔ < 0.95) {
                        H.push({
                            id: Math.floor(Math.random() * Δⵠ[540][0].length),
                            x: Math.floor(ⲆΔⵠΔ.x + Math.random() * 80 - 40),
                            y: Math.floor(ⲆΔⵠΔ.y + Math.random() * 80 - 40),
                            ⵠᐃⵠΔΔ: 1
                        });
                    }
                    for (var I = 0; M > I; I++) {
                        H[I].ⵠᐃⵠΔΔ = Math.max(0, H[I].ⵠᐃⵠΔΔ - Xw);
                    }
                    for (I = 0; M > I; I++) {
                        if (H[I].ⵠᐃⵠΔΔ === 0) {
                            H.splice(I, 1);
                            break;
                        }
                    }
                }
                var K = 0;
                if (ⲆΔⵠΔ.ᐃᐃᐃⲆ && df.ⵠᐃΔΔⵠ) {
                    var L = ⲆΔⵠΔ.ⲆⲆⲆⲆⲆ;
                    var M = L.length;
                    if (ⲆΔⵠΔ.ⲆᐃΔΔΔⵠΔ > 0 && ⲆΔⵠΔ.ⲆⲆΔΔᐃ !== 227 && ⲆΔⵠΔ.ⲆⲆΔΔᐃ !== 228 && ⲆΔⵠΔ.ⲆⲆΔΔᐃ !== 230 && ⲆΔⵠΔ.ⲆⲆΔΔᐃ !== 229 && ⲆΔⵠΔ.ⲆⲆΔΔᐃ !== 91 && !ⲆΔⵠΔ.ⵠΔᐃᐃᐃ && (K = 1, M === 0 || ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(L[M - 1], ⲆΔⵠΔ) > 75)) {
                        var N = -ⲆΔⵠΔ.angle;
                        var O = Math.cos(N) * 45 * io;
                        var Q = io * (Math.sin(N) * 45);
                        L.push({
                            x: ⲆΔⵠΔ.x + O,
                            y: ⲆΔⵠΔ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆΔⵠΔ.x - O,
                            y: ⲆΔⵠΔ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        L.push({
                            x: ⲆΔⵠΔ.x,
                            y: ⲆΔⵠΔ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (I = 0; I < M; I++) {
                        L[I].alpha = Math.max(0, L[I].alpha - Xw / 2.2);
                        L[I].r += Xw * 20;
                    }
                    if (L.length > 0 && L[0].alpha === 0) {
                        L.splice(0, 1);
                    }
                    var R = ⲆΔⵠΔ.ⲆⵠΔΔⲆ;
                    M = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ⲆΔⵠΔ.ᐃⵠⵠⲆⵠⲆᐃ));
                    var V = Math.max(0, Math.sign(ⲆΔⵠΔ.ΔⵠᐃⲆᐃ));
                    Math.max(0, Math.sign(ⲆΔⵠΔ.ⵠΔΔⲆⲆ));
                    var W = Math.max(0, Math.sign(ⲆΔⵠΔ.ⲆⵠⲆⲆᐃ));
                    var X = Math.max(0, Math.sign(ⲆΔⵠΔ.ⵠⲆⲆΔᐃ));
                    if (ⲆΔⵠΔ.ᐃⵠⵠⲆⵠⲆᐃ > 0 || ⲆΔⵠΔ.ⵠΔΔⲆⲆ > 0) {
                        S = 602;
                    } else if (ⲆΔⵠΔ.ⵠⲆⲆΔᐃ > 0) {
                        S = 680;
                    } else if (ⲆΔⵠΔ.ΔⵠᐃⲆᐃ > 0) {
                        S = 475;
                    } else if (ⲆΔⵠΔ.ⲆⵠⲆⲆᐃ > 0) {
                        S = 476;
                    }
                    if (ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 225 && (U | V | W | X) === 1) {
                        S = 228;
                        var Y = ⲆΔⵠΔ.ΔⵠΔⵠᐃ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = 50;
                    } else if (ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 239 && (U | V | W | X) === 1) {
                        S = 249;
                        Y = ⲆΔⵠΔ.ΔⵠΔⵠᐃ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = 50;
                    } else if (ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 226 && (U | V | W | X) == 1) {
                        S = 234;
                        Y = ⲆΔⵠΔ.ΔⵠΔⵠᐃ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = 45;
                    } else {
                        Y = ⲆΔⵠΔ.angle;
                        Z = 15;
                        _ = 11;
                        aa = 50;
                    }
                    if (ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 227 || ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 228 || ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 91 || ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 229 || ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 230 || ⲆΔⵠΔ.ⵠΔᐃᐃᐃ); else if (ⲆΔⵠΔ.ⲆⲆΔΔᐃ === 224) {
                        if (M === 0 || ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(R[M - 1], ⲆΔⵠΔ) > 10) {
                            R.push({
                                x: ⲆΔⵠΔ.x,
                                y: ⲆΔⵠΔ.y,
                                angle: ⲆΔⵠΔ.ΔⵠΔⵠᐃ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && K === 0 && (M === 0 || ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(R[M - 1], ⲆΔⵠΔ) > aa)) {
                        ⲆΔⵠΔ.ΔᐃⲆⵠⲆᐃᐃ++;
                        if (Math.abs(ⲆΔⵠΔ.x - ⲆΔⵠΔ.r.x) > 1 && Math.abs(ⲆΔⵠΔ.y - ⲆΔⵠΔ.r.y) > 1) {
                            if (ⲆΔⵠΔ.x < ⲆΔⵠΔ.r.x && ⲆΔⵠΔ.y > ⲆΔⵠΔ.r.y || ⲆΔⵠΔ.x > ⲆΔⵠΔ.r.x && ⲆΔⵠΔ.r.y > ⲆΔⵠΔ.y) {
                                if (ⲆΔⵠΔ.ΔᐃⲆⵠⲆᐃᐃ % 2) {
                                    O = io * -_;
                                    Q = -_ * io;
                                } else {
                                    Q = io * _;
                                    O = _ * io;
                                }
                            } else if (ⲆΔⵠΔ.ΔᐃⲆⵠⲆᐃᐃ % 2) {
                                O = _ * io;
                                Q = -_ * io;
                            } else {
                                Q = io * _;
                                O = -_ * io;
                            }
                        } else if (ⲆΔⵠΔ.ΔᐃⲆⵠⲆᐃᐃ % 2) {
                            O = Math.cos(Y) * Z * io;
                            Q = Math.sin(Y) * Z * io;
                        } else {
                            O = -Math.cos(Y) * Z * io;
                            Q = io * (-Math.sin(Y) * Z);
                        }
                        R.push({
                            x: ⲆΔⵠΔ.x + O,
                            y: ⲆΔⵠΔ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (I = 0; M > I; I++) {
                        if (R[I].id === 226) {
                            R[I].alpha = Math.max(0, R[I].alpha - Xw * 1.5);
                        } else {
                            R[I].alpha = Math.max(0, R[I].alpha - Xw / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ⵠⵠΔ = function () {
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[0]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[80]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[60]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[67]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[70]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[77]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[71]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[72]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[73]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[74]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[61]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[62]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[88]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[91]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[90]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[63]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[78]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[75]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[76]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[64]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[68]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[65]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[66]);
            this.ⵠⵠᐃⵠᐃ(this.Δⵠⵠ[69]);
        };
        this.Δᐃⵠⵠ = [];
        this.Δᐃⵠⵠ[620] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1.05, 1, 0.008, 0.008);
        this.Δᐃⵠⵠ[619] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1.08, 1, 0.006, 0.006);
        this.Δᐃⵠⵠ[694] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qj, 1, 1.02, 1, 0.008, 0.008);
        this.Δᐃⵠⵠ[695] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(bn, 1, 1.08, 1, 0.006, 0.006);
        this.ΔᐃᐃΔⵠ = [];
        this.ΔᐃᐃΔⵠ[0] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Xi, 0.1, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[1] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[2] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[3] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[4] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[5] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[6] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Xi, 0.5, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[7] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.9, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[8] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 0.6, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[9] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Mr, 0.2, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[10] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Vh, 0.6, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[11] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[12] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Zl, 0.8, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[13] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(ah, 0.2, 1, 0, 0.6, 0.6);
        this.ΔᐃᐃΔⵠ[14] = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0.7, 1, 0, 0.6, 0.6);
    }
    function zw() {
        this.Ⲇᐃⵠⵠⵠ = function () { };
        this.ⵠⲆⵠⲆᐃ = {
            open: false,
            ⲆⵠⵠⲆⵠ: 1,
            ⵠᐃⲆⵠ: 1
        };
        this.ᐃⵠⲆᐃⵠ = {
            ⵠᐃⲆⵠ: 1,
            ⲆⵠⵠⲆⵠ: -1,
            open: false
        };
        this.ⵠⲆᐃᐃ = {
            ᐃᐃⲆⲆⲆⵠⵠ: 0,
            ⵠⵠᐃⵠᐃⵠᐃ: 0,
            ⵠᐃⲆⵠ: 1,
            ⲆⵠⵠⲆⵠ: -1,
            open: Tn
        };
        this.ⲆⲆᐃΔ = {
            ⵠΔΔᐃⵠΔΔ: 0,
            ᐃᐃᐃᐃΔᐃᐃ: 0,
            type: 0,
            ΔⲆᐃᐃᐃⲆΔ: 0,
            ⵠᐃⲆⵠ: 1,
            ⲆⵠⵠⲆⵠ: -1,
            open: yl
        };
        this.ᐃᐃᐃⵠ = {
            open: false,
            ⵠΔΔᐃⵠΔΔ: 0,
            ⲆⵠⵠⲆⵠ: -1,
            ⲆᐃⲆΔⲆΔⵠ: 0,
            ⵠⵠᐃⵠᐃⵠᐃ: 0,
            ⵠᐃⲆⵠ: 1
        };
        this.sign = {
            open: false,
            ⲆⵠⵠⲆⵠ: -1
        };
        this.ᐃΔⵠⲆⵠ = {
            ΔⲆᐃᐃ: 0,
            ⵠᐃⲆⵠ: 1,
            open: Ga,
            ⲆⵠⵠⲆⵠ: -1
        };
        this.ⵠΔᐃᐃᐃ = {
            enabled: false,
            Ⲇᐃⵠᐃⵠ: -1,
            label: bn,
            now: -1,
            Δᐃᐃⵠ: gv
        };
        this.ⵠⵠΔⲆ = {
            id: -1,
            ΔⲆᐃᐃ: 0,
            ⵠᐃⲆⵠ: 1,
            ⲆⵠⵠⲆⵠ: -1,
            open: false,
            lock: false,
            locked: cr,
            ᐃⲆⲆᐃⵠⵠᐃ: Zl,
            ⵠⲆΔⲆᐃΔᐃ: false
        };
        this.ᐃΔΔΔᐃ = $k;
        this.reconnect = {
            rotate: 0,
            enabled: bn
        };
        this.key = ΔⲆⵠᐃ.ΔⵠⵠᐃⲆᐃⲆ("key", aj.location.href);
        var a = ΔⲆⵠᐃ.ΔⵠⵠᐃⲆᐃⲆ("egg", aj.location.href);
        if (a) {
            df.ΔΔᐃΔ = parseInt(a);
        }
        this.beta = aj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ⵠΔᐃⲆ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ⵠΔᐃⲆ.get("starve_beta");
        }
        this.ⵠΔⲆⵠⲆ = ⵠΔᐃⲆ.get("starve_token") ? ⵠΔᐃⲆ.get("starve_token") : ΔⲆⵠᐃ.ⵠᐃⵠⲆΔᐃⵠ(14);
        aj.baguette();
        var b = aj.kot2;
        function c() {
            this.seed = 1;
            this.ⵠᐃⲆᐃᐃΔⲆ = 2;
            this.ᐃⵠⵠⲆΔᐃᐃ = 3;
            this.ⲆΔΔᐃⲆΔΔΔΔ = 1;
            this.ⲆᐃΔⵠᐃⲆᐃᐃᐃ = 2;
            this.ⵠᐃⵠᐃᐃΔⵠⵠᐃ = 3;
            this.ⵠⲆΔᐃⲆⵠᐃ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⲆᐃⵠᐃᐃⲆⲆ = function (a) {
                this.ⵠᐃⲆᐃᐃΔⲆ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ⵠΔᐃⲆⵠⲆⵠ = function (a) {
                this.ᐃⵠⵠⲆΔᐃᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃⲆⵠΔⵠΔᐃΔΔ = function (a) {
                this.ⲆΔΔᐃⲆΔΔΔΔ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃᐃΔⲆΔⵠΔⲆΔ = function (a) {
                this.ⲆᐃΔⵠᐃⲆᐃᐃᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ΔΔⵠΔⵠΔΔⵠⵠ = function (a) {
                this.ⵠᐃⵠᐃᐃΔⵠⵠᐃ = 2 + Math.floor(Math.random() * 39879);
            };
            this.ᐃⵠΔⵠⵠⲆⲆ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ⲆΔⵠΔΔΔⲆ;
                    var o = ΔᐃⲆⵠᐃΔᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (k < m && m < a) {
                            var q = Math.random() > 0.5 ? Xw * -10 : Xw * 10;
                            var r = e * p;
                            this.ᐃⵠⲆᐃⲆⲆΔ[n] = Math.max(-25, Math.min(25, this.ᐃⵠⲆᐃⲆⲆΔ[n] + q));
                            this.ᐃⲆⲆΔΔⲆᐃ[n] = Math.max(-8, Math.min(8, this.ᐃⲆⲆΔΔⲆᐃ[n] + q));
                            if (r > 0) {
                                Wn.beginPath();
                                Wn.arc(m + Tw.ⲆⲆⵠ.x + this.ᐃⲆⲆΔΔⲆᐃ[n], c + this.ᐃⵠⲆᐃⲆⲆΔ[n] - 20, r, 0, Math.PI * 2);
                                if (cf.transition) {
                                    var t = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                                    Wn.fillStyle = tv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    Wn.fillStyle = Ur.ⲆᐃΔΔⵠⵠΔ[cf.time];
                                }
                                Wn.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔᐃⵠΔΔΔᐃ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = f * m % ⲆΔⵠΔΔΔⲆ;
                    var o = ΔᐃⲆⵠᐃΔᐃ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && m < a) {
                            var q = Math.random() > 0.5 ? Xw * -10 : Xw * 10;
                            var r = p * e;
                            this.ⵠΔⵠⵠΔ[n] = Math.max(-25, Math.min(25, this.ⵠΔⵠⵠΔ[n] + q));
                            this.ⲆᐃΔⲆⵠ[n] = Math.max(-8, Math.min(8, this.ⲆᐃΔⲆⵠ[n] + q));
                            if (r > 0) {
                                Wn.beginPath();
                                Wn.arc(c + this.ⵠΔⵠⵠΔ[n] - 20, m + Tw.ⲆⲆⵠ.y + this.ⲆᐃΔⲆⵠ[n], r, 0, Math.PI * 2);
                                if (cf.transition) {
                                    var t = cf.time ? 1 - cf.ⵠⵠΔᐃ.ⵠΔⲆ : cf.ⵠⵠΔᐃ.ⵠΔⲆ;
                                    Wn.fillStyle = tv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    Wn.fillStyle = Ur.ⲆᐃΔΔⵠⵠΔ[cf.time];
                                }
                                Wn.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔᐃΔⲆⲆᐃΔⵠⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ⵠΔᐃⲆⵠⲆⵠ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ᐃⵠΔⵠⵠⲆⲆ(d, h, this.ᐃⵠⵠⲆΔᐃᐃ, 18, 16, f, g);
                Wn.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⲆΔᐃⲆⵠᐃ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ᐃⵠΔⵠⵠⲆⲆ(b, h, this.seed, 12, 10, f, g);
                Wn.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆᐃⵠᐃᐃⲆⲆ();
                    }
                    Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                    this.ᐃⵠΔⵠⵠⲆⲆ(c, h, this.ⵠᐃⲆᐃᐃΔⲆ, 6, 6, f, g);
                    Wn.globalAlpha = 1;
                }
            };
            this.ΔⵠᐃᐃⲆⵠⲆⵠΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ⵠΔᐃⲆⵠⲆⵠ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ᐃⵠΔⵠⵠⲆⲆ(d, h, this.ᐃⵠⵠⲆΔᐃᐃ, 18, 16, f, g);
                Wn.globalAlpha = 1;
                var h = -(-b + 250 + e) / 150;
                if (h === 0) {
                    this.ⵠⲆΔᐃⲆⵠᐃ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ᐃⵠΔⵠⵠⲆⲆ(b, h, this.seed, 12, 10, f, g);
                Wn.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆᐃⵠᐃᐃⲆⲆ();
                    }
                    Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                    this.ᐃⵠΔⵠⵠⲆⲆ(c, h, this.ⵠᐃⲆᐃᐃΔⲆ, 6, 6, f, g);
                    Wn.globalAlpha = 1;
                }
            };
            this.ⲆⵠᐃⲆⲆⲆⲆⲆⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + 0 + e + 2) / 200) === 0) {
                    this.ⵠΔᐃⲆⵠⲆⵠ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ΔᐃⵠΔΔΔᐃ(d, h, this.ᐃⵠⵠⲆΔᐃᐃ, 18, 16, f, g);
                Wn.globalAlpha = 1;
                if ((h = -(-b + 250 + e) / 150) === 0) {
                    this.ⵠⲆΔᐃⲆⵠᐃ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ΔᐃⵠΔΔΔᐃ(b, h, this.seed, 12, 10, f, g);
                Wn.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + 350 + e) / 100) <= 0.01) {
                        this.ⲆᐃⵠᐃᐃⲆⲆ();
                    }
                    Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                    this.ΔᐃⵠΔΔΔᐃ(c, h, this.ⵠᐃⲆᐃᐃΔⲆ, 6, 6, f, g);
                    Wn.globalAlpha = 1;
                }
            };
            this.ⲆⲆΔⵠⲆᐃᐃΔΔ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - 0 - e - 2) / 200) === 0) {
                    this.ⵠΔᐃⲆⵠⲆⵠ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ΔᐃⵠΔΔΔᐃ(d, h, this.ᐃⵠⵠⲆΔᐃᐃ, 18, 16, f, g);
                Wn.globalAlpha = 1;
                if ((h = -(b - 250 - e + 500) / 150) === 0) {
                    this.ⵠⲆΔᐃⲆⵠᐃ();
                }
                Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                this.ΔᐃⵠΔΔΔᐃ(b, h, this.seed, 12, 10, f, g);
                Wn.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - 350 - e + 698) / 100) <= 0.01) {
                        this.ⲆᐃⵠᐃᐃⲆⲆ();
                    }
                    Wn.globalAlpha = ΔⲆⵠᐃ.ΔⲆΔⵠΔ(h);
                    this.ΔᐃⵠΔΔΔᐃ(c, h, this.ⵠᐃⲆᐃᐃΔⲆ, 6, 6, f, g);
                    Wn.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ⲆᐃⲆᐃᐃⵠⵠ, 0, 10, 0, 0, 200),
                ⵠⵠⲆⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ⲆⵠᐃΔᐃⵠᐃ, 0, 10, 200, 200, 0)
            };
            this.w2 = {
                r: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ⲆΔᐃⵠⵠⵠⲆ, 0, 10, 0, 0, 150),
                ⵠⵠⲆⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ΔⲆΔⵠΔ, 0, 10, 150, 150, 0)
            };
            this.w3 = {
                r: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ΔⵠⲆⲆⵠⲆᐃ, 0, 10, 0, 0, 100),
                ⵠⵠⲆⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ΔⲆΔⵠΔ, 0, 10, 100, 100, 0)
            };
            this.ⲆΔΔⵠΔⲆᐃⵠΔ = function (a) {
                if (a.r.ⲆᐃΔⵠᐃ === a.r.x) {
                    if (a.ⵠⵠⲆⵠ.ⲆᐃΔⵠᐃ === a.ⵠⵠⲆⵠ.x) {
                        return a.r;
                    } else {
                        return a.ⵠⵠⲆⵠ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ΔⵠΔ = function (a) {
                var b;
                if (a.r.ⲆᐃΔⵠᐃ === a.r.x) {
                    if (a.ⵠⵠⲆⵠ.x === a.ⵠⵠⲆⵠ.ⲆᐃΔⵠᐃ) {
                        a.r.ⵠΔⲆΔΔΔⵠ();
                        a.ⵠⵠⲆⵠ.ⵠΔⲆΔΔΔⵠ();
                        b = a.r;
                    } else {
                        b = a.ⵠⵠⲆⵠ;
                    }
                } else {
                    b = a.r;
                }
                b.ⵠⲆⲆΔᐃⵠᐃ(b.ⲆᐃΔⵠᐃ);
                return b;
            };
            this.ⵠΔⵠⵠΔ = [];
            this.ⲆᐃΔⲆⵠ = [];
            this.ᐃⵠⲆᐃⲆⲆΔ = [];
            this.ᐃⲆⲆΔΔⲆᐃ = [];
            this.Ⲇᐃⵠⵠⵠ = function () {
                for (var a = 0; a < ⲆΔⵠΔΔΔⲆ; a++) {
                    this.ⵠΔⵠⵠΔ[a] = Math.floor(ΔᐃⲆⵠᐃΔᐃ[a] * 25);
                    this.ⲆᐃΔⲆⵠ[a] = Math.floor(ΔᐃⲆⵠᐃΔᐃ[a] * 8);
                    this.ᐃⵠⲆᐃⲆⲆΔ[a] = Math.floor(ΔᐃⲆⵠᐃΔᐃ[a] * 25);
                    this.ᐃⲆⲆΔΔⲆᐃ[a] = Math.floor(ΔᐃⲆⵠᐃΔᐃ[a] * 8);
                }
                this.w1.r.x = this.w1.r.ⲆᐃΔⵠᐃ;
                this.w2.r.ⲆⵠⲆΔΔ = 3.5;
                this.w3.r.ⲆⵠⲆΔΔ = 2;
            };
            this.Ⲇᐃⵠⵠⵠ();
        }
        this.ⵠΔⲆⵠⲆ = b.substring(0, 6) + this.ⵠΔⲆⵠⲆ.substring(6);
        this.ᐃΔᐃⵠⲆΔᐃ = ⵠΔᐃⲆ.get("starve_token_id") ? ⵠΔᐃⲆ.get("starve_token_id") : "";
        this.id = 0;
        this.ᐃⲆⲆⵠ = 0;
        this.ⵠᐃⲆ = 0;
        this.ΔⲆΔᐃΔᐃΔ = {
            ΔⵠᐃΔΔᐃⵠ: 0,
            ΔⲆⵠΔΔⲆⵠ: 0,
            ⵠⵠⵠⲆⲆⲆⲆ: "",
            ⲆΔⲆⲆⵠ: 0
        };
        this.ᐃΔᐃⲆⲆⵠᐃⲆⲆ = {
            connected: 0,
            ⲆᐃⵠⲆⵠᐃᐃ: new Date().getTime()
        };
        this.ᐃⵠΔΔⵠ = [];
        this.ⵠΔⲆⵠᐃⲆΔ = function (a) {
            for (var b = 0; b < this.ᐃⵠΔΔⵠ.length; b++) {
                if (a == this.ᐃⵠΔΔⵠ[b]) {
                    return true;
                }
            }
            return false;
        };
        this.ⵠᐃⵠⵠΔ = {
            Ⲇᐃⵠᐃⵠ: 0,
            time: 0,
            value: 0,
            open: Xi,
            Δᐃᐃⵠ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.Ⲇᐃⵠᐃⵠ) / 1000);
                    if (this.time < 60) {
                        Vw.ⵠᐃⵠⵠΔ.button.Δᐃᐃⵠ(Wn);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = bn;
                    }
                }
            }
        };
        this.ⲆᐃᐃᐃΔ = {
            id: -1,
            ⵠᐃⲆⵠ: -1,
            lock: 0,
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 1, 0, 1 / 30, 1),
            wait: Qj
        };
        this.ⵠΔΔᐃᐃ = {
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 1, 0, 0.2, 1),
            wait: $a
        };
        this.ⲆⲆᐃⵠⲆ = {
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Xi, 0, 1, 0, 1, 1),
            wait: Qj
        };
        this.Δⵠⵠᐃⵠ = {
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Xi, 0, 1, 0, 1 / 10, 1),
            wait: false
        };
        this.ⲆⲆⵠ = new ΔⲆⵠᐃ.ⵠΔⲆΔᐃⲆⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 0.4, 0, 0, gq, hq, gq, hq);
        this.ⲆⲆⵠ.Ⲇᐃⵠᐃⵠ = 0;
        this.ⲆⲆⵠ.ⲆΔⵠᐃⲆⵠΔ = 0;
        this.ⲆⲆⵠ.ⵠⵠΔ = function () {
            if (this.ⲆΔⵠᐃⲆⵠΔ > 0) {
                this.ⲆΔⵠᐃⲆⵠΔ -= Xw;
            } else {
                var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                if (a && !Spectator) {
                    this.Ⲇᐃⵠᐃⵠ = 0;
                    var b = Math.max(Math.min(gq - a.x, -2), 2 - cf.w + On);
                    var c = Math.max(Math.min(hq - a.y, -2), -cf.ⵠⵠⲆ + 2 + Hn);
                    this.ⵠⲆⲆΔᐃⵠᐃ({
                        x: b,
                        y: c
                    });
                } else {
                    this.Ⲇᐃⵠᐃⵠ += Xw;
                    if (this.Ⲇᐃⵠᐃⵠ > 3) {
                        this.Ⲇᐃⵠᐃⵠ = 0;
                        if (!Tw.reconnect.enabled) {
                            ᐃⲆΔΔ.ⲆᐃΔΔⲆΔⲆⲆⵠ();
                        }
                    }
                }
            }
        };
        this.ⲆⲆⵠ.w = screen.width;
        this.ⲆⲆⵠ.ⵠⵠⲆ = screen.height;
        this.ⲆⲆⵠ.ⲆⵠⲆΔᐃⵠⲆ = this.ⲆⲆⵠ.w;
        this.ⲆⲆⵠ.ⲆⵠⵠᐃⲆⲆⵠ = this.ⲆⲆⵠ.ⵠⵠⲆ;
        this.ⲆⲆⵠ.rx = 0;
        this.ⲆⲆⵠ.ry = 0;
        this.ⲆⲆⵠ.ΔⲆⲆⵠᐃⵠⲆⵠⲆ = 0;
        this.ⲆⲆⵠ.ⲆⵠⲆΔΔⲆⵠΔⲆ = 0;
        this.ⲆⲆⵠ.ΔᐃⲆΔⵠ = function (a, b) {
            this.x = -Math.min(Math.max(-cf.ΔΔⲆⵠΔΔᐃ * 2, a - cf.ΔΔⲆⵠΔΔᐃ - this.ⲆⵠⲆΔᐃⵠⲆ / 2), cf.w - this.ⲆⵠⲆΔᐃⵠⲆ);
            this.y = -Math.min(Math.max(-cf.ⵠⵠⵠⵠΔΔᐃ * 2, b - (cf.ⵠⵠⵠⵠΔΔᐃ + this.ⲆⵠⵠᐃⲆⲆⵠ) / 2), cf.ⵠⵠⲆ - this.ⲆⵠⵠᐃⲆⲆⵠ + cf.ⵠⵠⵠⵠΔΔᐃ);
            this.ⲆᐃΔⵠᐃ = this.x;
            this.ⵠⲆΔΔⵠⲆⵠ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ⵠᐃΔᐃᐃᐃΔ: 0,
            ᐃⵠⵠⲆ: 0,
            attack: 0,
            ⵠⵠΔ: function () {
                var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                if (a) {
                    var b = {
                        x: Tw.ⲆⲆⵠ.x + a.x,
                        y: Tw.ⲆⲆⵠ.y + a.y
                    };
                } else {
                    b = iq;
                }
                var c = ΔⲆⵠᐃ.ΔⵠᐃᐃⵠⵠⲆ(yf.ⲆΔᐃⲆ, b);
                var d = Zl;
                this.ᐃⵠⵠⲆ += Xw;
                if (!yf.state) {
                    if (a && !(a.action & 16) && this.ᐃⵠⵠⲆ > 0.2) {
                        this.attack = 1;
                        d = Ll;
                        this.ᐃⵠⵠⲆ = 0;
                        ᐃⲆΔΔ.ⵠᐃⵠⲆⵠⵠΔΔΔ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⲆᐃⲆΔΔⲆⵠ = c;
                }
                if (!d) {
                    this.timeout += Xw;
                    if (this.timeout > 0.2) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ᐃⲆΔΔ.ⵠⲆⵠᐃᐃᐃⵠΔΔ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Tw.ΔⲆΔⲆΔ.open && !Tw.ΔⲆΔΔΔ.open) {
                    var e = 0;
                    if (zf.ⵠΔⵠⲆⵠⲆⲆ()) {
                        e |= 1;
                    }
                    if (zf.ΔⲆⵠΔⲆΔᐃ()) {
                        e |= 2;
                    }
                    if (zf.ⵠⵠⲆⵠΔᐃΔ()) {
                        e |= 4;
                    }
                    if (zf.ΔⲆⲆⵠⲆΔⵠ()) {
                        e |= 8;
                    }
                    if (this.ⵠᐃΔᐃᐃᐃΔ != e) {
                        ᐃⲆΔΔ.ΔⵠⵠᐃⲆⵠᐃⵠᐃ(e);
                    }
                    this.ⵠᐃΔᐃᐃᐃΔ = e;
                }
            }
        };
        this.ⲆΔᐃΔ = {
            c: 1,
            ⵠⵠⲆⵠ: 1,
            ⵠⵠⲆ: 1,
            ΔⵠΔ: 1,
            ⵠⲆΔ: 1,
            ᐃⲆᐃⲆΔΔⲆ: 1,
            ⵠⵠᐃⲆᐃΔΔ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 1, 0, 3, 3),
            ᐃⵠΔΔΔᐃⵠ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 1, 0, 2, 2),
            ⵠⲆΔⲆᐃⵠⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 1, 0, 3, 3),
            ᐃⲆⵠⲆⵠΔⲆ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 1, 0, 3, 3),
            ⵠΔⵠⲆⵠᐃⵠ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(true, 0, 1, 0, 3, 3),
            ΔⲆⲆⲆΔᐃΔ: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(cs, 0, 1, 0, 3, 3),
            ⵠᐃΔⲆᐃ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ⵠᐃⵠΔΔ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ΔᐃⲆΔⵠᐃⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ΔᐃⲆᐃⵠⵠⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ⵠΔⲆᐃⵠᐃⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ⲆⵠᐃⵠΔΔⵠ: new ΔⲆⵠᐃ.ⵠⵠⲆⵠⲆ(ΔⲆⵠᐃ.ᐃⲆⵠⲆⵠⲆᐃ, 0, 1, 0, 0, 1),
            ⵠⵠΔ: function () {
                this.ⵠⵠᐃⲆᐃΔΔ.ⵠⵠΔ();
                this.ᐃⵠΔΔΔᐃⵠ.ⵠⵠΔ();
                this.ⵠⲆΔⲆᐃⵠⲆ.ⵠⵠΔ();
                this.ᐃⲆⵠⲆⵠΔⲆ.ⵠⵠΔ();
                this.ⵠΔⵠⲆⵠᐃⵠ.ⵠⵠΔ();
                this.ΔⲆⲆⲆΔᐃΔ.ⵠⵠΔ();
                this.ⵠᐃΔⲆᐃ.ⵠⲆⲆΔᐃⵠᐃ(this.c);
                this.ⵠᐃⵠΔΔ.ⵠⲆⲆΔᐃⵠᐃ(this.ⵠⵠⲆⵠ);
                this.ΔᐃⲆΔⵠᐃⵠ.ⵠⲆⲆΔᐃⵠᐃ(this.ⵠⵠⲆ);
                this.ΔᐃⲆᐃⵠⵠⵠ.ⵠⲆⲆΔᐃⵠᐃ(this.ΔⵠΔ);
                this.ⵠΔⲆᐃⵠᐃⵠ.ⵠⲆⲆΔᐃⵠᐃ(this.ⵠⲆΔ);
                this.ⲆⵠᐃⵠΔΔⵠ.ⵠⲆⲆΔᐃⵠᐃ(this.ᐃⲆᐃⲆΔΔⲆ);
            }
        };
        this.ᐃⵠⵠΔⲆᐃᐃ = Zl;
        this.ᐃᐃᐃΔᐃΔⲆ = false;
        this.ᐃΔᐃᐃⲆ = false;
        this.ΔⵠⲆᐃⵠᐃΔ = false;
        this.ⲆⲆⵠⵠ = {
            max: 10,
            ⲆΔⲆⵠΔⵠΔ: 0,
            ⲆΔΔⵠⵠ: 0,
            ⲆⲆⲆΔ: [],
            ΔⲆⲆᐃᐃ: [],
            ᐃⵠᐃⲆᐃⵠᐃ: function (a, b) {
                if (a === 1) {
                    this.ⲆΔΔⵠⵠ = pw.ⵠⲆⲆⲆΔᐃΔᐃΔ;
                }
                this.ⲆΔⲆⵠΔⵠΔ += b;
                this.max = 10 + this.ⲆΔⲆⵠΔⵠΔ + this.ⲆΔΔⵠⵠ;
            },
            ⵠⲆⲆᐃⵠᐃᐃ: {
                item: -1,
                ᐃΔ: null,
                ᐃΔΔᐃᐃ: 0,
                ΔⵠⵠⵠⲆⵠⵠ: 0,
                ⲆⲆⲆⵠΔ: -1,
                ΔΔᐃⵠᐃ: -1,
                ΔᐃΔΔⲆ: function (a) {
                    if (!!this.ᐃΔΔᐃᐃ && (a.x !== this.ⲆⲆⲆⵠΔ || a.y !== this.ΔΔᐃⵠᐃ)) {
                        this.ΔⵠⵠⵠⲆⵠⵠ = 1;
                    }
                },
                start: function (a, b) {
                    this.ⲆⲆⲆⵠΔ = b.x;
                    this.ΔΔᐃⵠᐃ = b.y;
                    this.item = a;
                    this.ᐃΔ = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ[a].info.ᐃΔ[2];
                    this.ᐃΔΔᐃᐃ = 1;
                },
                stop: function () {
                    this.ᐃΔΔᐃᐃ = 0;
                    this.ΔⵠⵠⵠⲆⵠⵠ = 0;
                    this.ⲆⲆⲆⵠΔ = -1;
                    this.ΔΔᐃⵠᐃ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ;
                    var c = 0;
                    if (this.ᐃΔΔᐃᐃ && this.ΔⵠⵠⵠⲆⵠⵠ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Rv) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            Vw.ⲆΔᐃΔΔᐃᐃ();
                        }
                    }
                    this.stop();
                    return c;
                },
                Δᐃᐃⵠ: function (a, b) {
                    if (this.ᐃΔΔᐃᐃ && this.ΔⵠⵠⵠⲆⵠⵠ) {
                        _c(Wn, this.ᐃΔ, Math.floor(a - this.ᐃΔ.width / 2), Math.floor(b - this.ᐃΔ.height / 2));
                    }
                }
            },
            ⵠⲆΔΔΔⵠⵠᐃⲆ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ⲆⲆⲆΔ[a[d][0]] == a[d][1]) {
                        return true;
                    }
                }
                return false;
            },
            ᐃΔᐃⵠⲆ: function (a) {
                for (var b = 0; b < this.ΔⲆⲆᐃᐃ.length; b++) {
                    if (this.ΔⲆⲆᐃᐃ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ᐃΔⵠᐃⲆⵠΔ: function (a, b) {
                this.ⲆⲆⲆΔ[a] = 0;
                this.ΔⲆⲆᐃᐃ.splice(b, 1);
                Vw.ⲆΔᐃΔΔᐃᐃ();
            },
            ΔⲆⲆΔᐃΔΔ: function (a, b, c) {
                ⵠⵠΔ = true;
                this.ⲆⲆⲆΔ[a] = Math.max(0, this.ⲆⲆⲆΔ[a] - b);
                if (!this.ⲆⲆⲆΔ[a] && c >= 0) {
                    this.ᐃΔⵠᐃⲆⵠΔ(a, c);
                }
            }
        };
        this.ⵠⲆᐃⲆΔᐃⵠ = {
            enabled: false,
            translate: {
                y: 0,
                x: 0
            },
            ⲆⲆⲆᐃᐃⵠᐃ: function () {
                if (cf.mode == 1 && !Tw.ᐃᐃᐃΔᐃΔⲆ) {
                    Tw.ⵠⲆᐃⲆΔᐃⵠ.enabled = !Tw.ⵠⲆᐃⲆΔᐃⵠ.enabled;
                    if (Tw.ⵠⲆᐃⲆΔᐃⵠ.enabled) {
                        Vw.options.ᐃΔᐃⵠΔⲆᐃ.display = "inline-block";
                    } else {
                        Vw.options.ᐃΔᐃⵠΔⲆᐃ.display = "none";
                    }
                }
            }
        };
        Vw.options.ᐃΔᐃⵠΔⲆᐃ.display = "none";
        this.ΔᐃⲆⵠΔ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            Ⲇᐃⵠᐃⵠ: 0,
            ⲆⲆⲆᐃᐃⵠᐃ: function () {
                Tw.ΔᐃⲆⵠΔ.enabled = !Tw.ΔᐃⲆⵠΔ.enabled;
                if (Tw.ΔᐃⲆⵠΔ.enabled) {
                    Vw.options.ᐃⲆᐃⵠⵠᐃⲆ.display = "inline-block";
                } else {
                    Vw.options.ᐃⲆᐃⵠⵠᐃⲆ.display = "none";
                }
            },
            ⵠⵠΔ: function () {
                if (!!this.enabled && Tw.ᐃⵠΔᐃ.id < 0 && !Vw.ⲆΔΔⲆ.open) {
                    this.Ⲇᐃⵠᐃⵠ += Xw;
                    if (this.Ⲇᐃⵠᐃⵠ > 2) {
                        this.Ⲇᐃⵠᐃⵠ = 0;
                        if (Tw.ⲆΔᐃΔ.ⵠⵠⲆ < 0.35) {
                            if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[110]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(110, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(110));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[192]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(192, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(192));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[196]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(196, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(196));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[189]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(189, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(189));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[207]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(207, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(207));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[205]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(205, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(205));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[209]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(209, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(209));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[143]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(143, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(143));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[117]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(117, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(117));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[138]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(138, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(138));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[133]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(133, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(133));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[145]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(145, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(145));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[136]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(136, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(136));
                            } else if (Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[197]) {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(197, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(197));
                            }
                        } else if (Tw.ⲆΔᐃΔ.ΔⵠΔ < 0.35 && Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[127]) {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(127, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(127));
                        }
                    }
                }
            }
        };
        Vw.options.ᐃⲆᐃⵠⵠᐃⲆ.display = "none";
        this.ᐃⵠΔᐃ = {
            id: -1,
            ΔⵠⲆⵠ: -1,
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 1, 0, 1, 1),
            ᐃᐃᐃᐃⲆ: false,
            ⵠΔⲆⲆ: -1,
            mode: 0,
            label: [],
            ᐃⵠⵠⲆⲆ: [],
            ⵠⲆⵠᐃⲆ: false,
            ⲆⲆᐃⲆⲆ: false,
            ⲆⲆⲆⲆⲆⵠⵠ: false,
            ᐃⵠⲆᐃⵠ: false,
            ᐃⵠⲆⵠⵠΔⵠⲆⲆ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ΔᐃΔⵠΔΔΔⲆⲆ: function (a) {
                this.ⵠⲆⵠᐃⲆ = a;
                var b = Vw.ⲆΔΔⲆ;
                if (b.open) {
                    b.ⵠⲆⲆⵠⲆⲆⲆ(b.button);
                }
                this.ⵠⵠΔ();
            },
            ⵠΔⲆⲆⲆⲆᐃⲆⵠ: function (a) {
                var b = Zg[a];
                this.id = a;
                this.ᐃᐃᐃᐃⲆ = true;
                cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                this.timeout.ⵠⲆⵠⲆᐃᐃⵠ = b.time * 8;
                this.ΔⵠⲆⵠ = b.ΔⵠⲆⵠ;
            },
            ΔⲆᐃⲆᐃΔΔᐃⵠ: function (a) {
                var b = Zg[a];
                this.id = a;
                this.ᐃᐃᐃᐃⲆ = yg;
                var c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                if (c && c.right == 28) {
                    this.timeout.ⵠⲆⵠⲆᐃᐃⵠ = b.time * 3;
                } else {
                    this.timeout.ⵠⲆⵠⲆᐃᐃⵠ = b.time;
                }
                this.ΔⵠⲆⵠ = b.ΔⵠⲆⵠ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Tw.ⲆⲆⵠⵠ.ΔⲆⲆΔᐃΔΔ(e[0], e[1], Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(e[0]));
                }
                Vw.ⲆΔᐃΔΔᐃᐃ();
            },
            ⵠⵠΔ: function () {
                this.ᐃⵠⵠⲆⲆ = [];
                if (Vw.ⲆΔⲆᐃᐃ.ᐃⵠΔᐃ === 1) {
                    Vw.ⲆΔⲆᐃᐃ.display = 0;
                }
                for (var a in Zg) {
                    var b = Zg[a];
                    var c = Qg;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Tw.ⲆⲆⵠⵠ.max >= 16 && b.id === 100) {
                                c = Qk;
                                break;
                            }
                            if (b.w > this.ⵠⲆⵠᐃⲆ || b.f > this.ⲆⲆᐃⲆⲆ || b.ⵠⲆΔ > this.ⲆⲆⲆⲆⲆⵠⵠ || b.e > this.ᐃⵠⲆᐃⵠ) {
                                c = Ga;
                                break;
                            }
                            var f = b.r[d];
                            if (!Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[f[0]] || Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[f[0]] < f[1]) {
                                c = false;
                                break;
                            }
                        }
                        if (c) {
                            this.ᐃⵠⵠⲆⲆ.push(Vw.ⲆΔⲆ[b.id]);
                        }
                    }
                }
                Vw.ⵠΔΔⲆⲆⵠⲆ();
                Vw.ΔⲆⵠⲆᐃΔᐃ();
                Vw.ⵠᐃΔⵠⲆⲆΔ();
                Vw.ⲆᐃⲆⲆᐃⵠΔ();
                Vw.ΔΔΔⲆΔⵠⵠ();
                Vw.ΔⲆᐃⵠⵠⲆΔ();
                Vw.sign.ⵠᐃΔΔᐃⵠⵠ();
            },
            ⵠΔⲆΔΔΔⵠ: function () {
                this.id = -1;
                this.ᐃᐃᐃᐃⲆ = false;
                this.timeout.ⵠΔⲆ = 0;
                this.timeout.ⵠⲆΔ = xj;
                this.ⵠⵠΔ();
            }
        };
        this.ⵠᐃⵠⲆⵠⲆᐃ = {
            message: ol,
            Δᐃᐃⵠ: fv
        };
        this.alert = {
            timeout: new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            Δᐃᐃⵠ: bv,
            list: []
        };
        this.ⲆⲆᐃΔⵠ = {
            ΔΔ: document.createElement("canvas"),
            ⵠⵠⵠΔⲆ: [],
            ⵠⵠΔ: j,
            translate: {
                y: 0,
                x: 0
            },
            sort: function () {
                var a = [];
                for (var b = cf.ⲆⵠᐃΔ, c = 0; c < b.length; c++) {
                    if (b[c].ᐃΔΔΔᐃ) {
                        a.push({
                            id: c,
                            ΔΔΔᐃ: b[c].ⲆΔⲆⲆⵠ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ΔΔΔᐃ - a.ΔΔΔᐃ;
                });
                this.ⵠⵠⵠΔⲆ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ⵠⵠⵠΔⲆ.push(a[c].id);
                }
                this.ⵠⵠΔ = true;
            },
            Ⲇᐃⵠⵠⵠ: function (a) {
                for (var b = cf.ⲆⵠᐃΔ, c = 0; c < b.length; c++) {
                    b[c].ⲆΔⲆⲆⵠ = 0;
                }
                b[Tw.id].ⲆΔⲆⲆⵠ = ΔⲆⵠᐃ.ΔⵠⵠⵠΔⵠΔ(a[1]);
                this.ⵠⵠⵠΔⲆ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ⵠⵠⵠΔⲆ.push(a[c]);
                    b[a[c]].ⲆΔⲆⲆⵠ = ΔⲆⵠᐃ.ΔⵠⵠⵠΔⵠΔ(a[c + 1]);
                }
                this.ⵠⵠΔ = true;
            }
        };
        this.ⲆⲆᐃΔⵠ.ΔΔ.width = io * 180;
        this.ⲆⲆᐃΔⵠ.ΔΔ.height = io * 300;
        this.ⲆⲆᐃΔⵠ.Ⲇ = this.ⲆⲆᐃΔⵠ.ΔΔ.getContext("2d");
        this.ΔⲆΔΔΔ = {
            open: false,
            input: document.getElementById("commandInput"),
            ᐃΔᐃⲆᐃΔΔ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ⲆᐃΔΔⲆⵠⲆᐃⲆ: function (a) {
                this.ᐃΔᐃⲆᐃΔΔ.innerHTML += a;
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(On / 2 - 300) + "px";
                this.style.top = Math.floor(Hn / 2 - 250) + "px";
            },
            ΔⵠⵠᐃΔⲆᐃⲆⵠ: function () {
                this.ᐃΔᐃⲆᐃΔΔ.innerHTML = "";
            },
            ⲆⲆᐃⲆⵠ: function () {
                this.open = false;
                this.style.display = "none";
            },
            ⵠⲆᐃⲆⵠΔΔ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 == 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 === 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ᐃⲆΔⵠᐃ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ⲆᐃΔΔⲆⵠⲆᐃⲆ(f);
                this.ΔᐃΔⲆⲆⵠⵠⵠⲆ();
            },
            ΔᐃΔⲆⲆⵠⵠⵠⲆ: function () {
                this.ᐃΔᐃⲆᐃΔΔ.scrollTop = this.ᐃΔᐃⲆᐃΔΔ.scrollHeight;
            },
            ⵠⵠᐃⲆΔΔⵠ: function (b) {
                switch (b) {
                    case "clean":
                        this.ΔⵠⵠᐃΔⲆᐃⲆⵠ();
                        return j;
                    case "list":
                        var c = "";
                        const a = aj.document.createElement("div");
                        for (var d = cf.ⲆⵠᐃΔ, e = 0; e < d.length; e++) {
                            var f = d[e];
                            if (f.ᐃΔΔΔᐃ) {
                                a.innerText = f.ᐃᐃⲆⵠᐃ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + e + "</span><br />";
                            }
                        }
                        this.ᐃⲆΔⵠᐃ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.ᐃⲆΔⵠᐃ("Weapons", 1, "List all weapons in the game", this.ⵠⲆᐃⲆⵠΔΔ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return true;
                    case "tool-list":
                        this.ᐃⲆΔⵠᐃ("Tools", 1, "List all tools in the game", this.ⵠⲆᐃⲆⵠΔΔ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.ᐃⲆΔⵠᐃ("Survival Items", 1, "List all survival items in the game", this.ⵠⲆᐃⲆⵠΔΔ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return true;
                    case "resource-list":
                        this.ᐃⲆΔⵠᐃ("Resources", 1, "List all resources in the game", this.ⵠⲆᐃⲆⵠΔΔ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return true;
                    case "food-list":
                        this.ᐃⲆΔⵠᐃ("Food", 1, "List all food in the game", this.ⵠⲆᐃⲆⵠΔΔ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.ᐃⲆΔⵠᐃ("Hats", 1, "List all hats in the game", this.ⵠⲆᐃⲆⵠΔΔ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return u;
                    case "building-list":
                        this.ᐃⲆΔⵠᐃ("Buildings", 1, "List all buildings in the game", this.ⵠⲆᐃⲆⵠΔΔ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return true;
                    case "biome-list":
                        this.ᐃⲆΔⵠᐃ("Biomes list", 1, "List all available biomes in the game", this.ⵠⲆᐃⲆⵠΔΔ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return Hg;
                    case "help-config":
                        this.ᐃⲆΔⵠᐃ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return true;
                    case "pos":
                        d = cf.Δⵠⵠ[0];
                        e = 0;
                        for (; e < d.length; e++) {
                            var g = d[e];
                            if (g.ⵠᐃⲆⵠ === Tw.id) {
                                this.ᐃⲆΔⵠᐃ("pos", 1, "Your position is " + Math.floor(g.x / 100) + ":" + Math.floor(g.y / 100));
                                return true;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ᐃⲆΔⵠᐃ("help-admin", 1, "List all available commands for admin only", this.ⵠⲆᐃⲆⵠΔΔ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return Ll;
                    case "help":
                        this.ᐃⲆΔⵠᐃ("help", 1, "List all available commands", this.ⵠⲆᐃⲆⵠΔΔ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return true;
                }
                return false;
            },
            ⵠΔⲆⵠⵠᐃᐃⲆⲆ: function () {
                if (!this.open) {
                    this.open = $l;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ΔΔΔⲆΔᐃᐃ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ⵠⵠᐃⲆΔΔⵠ(a)) {
                        ᐃⲆΔΔ.ᐃᐃⵠⲆᐃᐃᐃⲆΔ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ΔⲆΔⲆΔ = {
            open: Zl,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(On / 2 - 150) + "px";
                this.style.top = Math.floor(Hn / 2 + 80) + "px";
            },
            ⲆⲆᐃⲆⵠ: function () {
                this.open = false;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Tw.alert.text) {
                            Tw.alert.list.push(b);
                        } else {
                            Tw.alert.text = b;
                        }
                        Vw.ⲆΔΔΔᐃΔⵠ = 0;
                    } else {
                        Vw.ⲆΔΔΔᐃΔⵠ = 1;
                    }
                }
            },
            ⵠⵠᐃⲆΔΔⵠ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return true;
                }
                return Mr;
            },
            ⲆΔΔᐃⵠ: function () {
                if (this.open) {
                    this.open = false;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ⵠⵠᐃⲆΔΔⵠ(a)) {
                            ᐃⲆΔΔ.ᐃⵠΔⲆΔΔⵠᐃΔ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ΔᐃⵠⵠⲆⵠⲆ = {
            ⵠⵠΔⵠᐃ: [],
            ⵠⵠΔ: function (a) {
                a.y += Xw * 80 * a.ΔΔΔᐃ;
                a.x += Xw * 80 * a.c;
                a.ⵠᐃⵠΔΔ -= Xw / 6;
                if (a.ⵠᐃⵠΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xw * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xw * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(On / 1366 * 34, 44) * Math.max(Math.min(cf.ⲆⵠⲆⲆᐃ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠΔⵠᐃ.length < c) {
                    var d = Math.floor(Math.random() * 5);
                    var e = -Tw.ⲆⲆⵠ.x + Math.floor(Math.random() * Tw.ⲆⲆⵠ.w);
                    var f = -Tw.ⲆⲆⵠ.y + Math.floor(Math.random() * Tw.ⲆⲆⵠ.ⵠⵠⲆ);
                    var g = Math.random(Math.PI);
                    this.ⵠⵠΔⵠᐃ.push(new uw(d, e, f, g));
                }
            }
        };
        this.ⵠⵠⵠᐃⵠᐃⲆ = 0;
        this.Ⲇⵠᐃᐃᐃ = 0;
        this.ᐃΔⵠᐃΔ = {
            ⵠⵠΔⵠᐃ: [],
            ᐃⵠⲆΔΔ: 0,
            ⵠᐃΔⵠΔ: 0,
            ⵠⵠΔ: function (a) {
                a.y += Xw * (200 + this.ⵠᐃΔⵠΔ * 800) * a.ΔΔΔᐃ;
                a.x += Xw * (200 + this.ⵠᐃΔⵠΔ * 800) * a.c;
                a.ⵠᐃⵠΔΔ -= Xw / 6;
                if (a.ⵠᐃⵠΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xw * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xw * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ⵠᐃΔⵠΔ + 0.1) * 68 * (On / 1366), (this.ⵠᐃΔⵠΔ + 0.1) * 68 + 10) * Math.max(Math.min(cf.ⵠΔΔⲆⲆ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠΔⵠᐃ.length < c) {
                    var d = Math.floor(Math.random() * 5);
                    var e = -Tw.ⲆⲆⵠ.x + Math.floor(Math.random() * Tw.ⲆⲆⵠ.w);
                    var f = -Tw.ⲆⲆⵠ.y + Math.floor(Math.random() * Tw.ⲆⲆⵠ.ⵠⵠⲆ);
                    var g = Math.random(Math.PI);
                    if (Tw.ᐃΔⵠᐃΔ.ᐃⵠⲆΔΔ !== 0) {
                        e -= Tw.ⲆⲆⵠ.w / 2;
                    }
                    this.ⵠⵠΔⵠᐃ.push(new uw(d, e, f, g));
                }
            }
        };
        this.ᐃⲆΔⵠⵠ = {
            ⵠⵠΔⵠᐃ: [],
            ᐃⵠⲆΔΔ: 0,
            ⵠᐃΔⵠΔ: 0,
            ⵠⵠΔ: function (a) {
                if (zf.ⵠⵠⲆⵠΔᐃΔ()) {
                    a.y += Xw * a.ⵠⲆΔⵠΔ * (5.5 + this.ⵠᐃΔⵠΔ * 10);
                } else {
                    a.y += Xw * a.ⵠⲆΔⵠΔ * (5 + this.ⵠᐃΔⵠΔ * 10);
                }
                a.ⵠᐃⵠΔΔ -= Xw / 2;
                if (zf.ⵠΔⵠⲆⵠⲆⲆ()) {
                    a.x += Xw * (100 + this.ⵠᐃΔⵠΔ * 400);
                } else if (zf.ΔⲆⵠΔⲆΔᐃ()) {
                    a.x -= Xw * (130 - this.ⵠᐃΔⵠΔ * 400);
                } else {
                    a.x -= Xw * (30 - this.ⵠᐃΔⵠΔ * 400);
                }
                if (a.ⵠᐃⵠΔΔ > 0.2) {
                    a.alpha = Math.min(a.alpha + Xw * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - Xw * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ⵠᐃΔⵠΔ * 1.5 + 0.5) * 34 * (On / 1366), (this.ⵠᐃΔⵠΔ * 1.5 + 0.5) * 34 + 10) * Math.max(Math.min(cf.ΔⵠᐃⲆᐃ + 1000, 3000) / 3000, 0));
                if (this.ⵠⵠΔⵠᐃ.length < b) {
                    var c = Math.floor(Math.random() * 5);
                    var d = -Tw.ⲆⲆⵠ.x + Math.floor(Math.random() * Tw.ⲆⲆⵠ.w);
                    var e = -Tw.ⲆⲆⵠ.y + Math.floor(Math.random() * 400 * io - io * 200);
                    this.ⵠⵠΔⵠᐃ.push(new uw(c, d, e, 0));
                }
            }
        };
        this.Δⵠᐃⵠ = [];
        for (var d = 0; d < 4; d++) {
            this.Δⵠᐃⵠ.push(new c());
        }
    }
    function Aw() {
        Math.random();
        return "t";
    }
    function Bw() {
        Math.random();
        return "r";
    }
    function Cw() {
        Math.random();
        return "o";
    }
    function Dw() {
        Math.random();
        return "n";
    }
    function Ew() {
        Math.random();
        return "d";
    }
    function Fw() {
        Math.random();
        return "i";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Hw() {
        Math.random();
        return "s";
    }
    function Aw() {
        Math.random();
        return "t";
    }
    function Iw() {
        Math.random();
        return "C";
    }
    function Jw() {
        Math.random();
        return "e";
    }
    function Gw() {
        Math.random();
        return "p";
    }
    function Kw() {
        Math.random();
        return "a";
    }
    function Lw() {
        Math.random();
        return "g";
    }
    function Cw() {
        Math.random();
        return "o";
    }
    function Kw() {
        Math.random();
        return "a";
    }
    ᐃᐃⲆΔⵠⲆᐃⲆᐃ = 1;
    setTimeout(function b() {
        var c = Dw() + Kw() + Aw() + Fw();
        var d = function () {
            Math.random();
            return "W";
        }() + Jw() + function () {
            Math.random();
            return "b";
        }() + (Math.random(), "S") + Cw() + function () {
            Math.random();
            return "c";
        }() + function () {
            Math.random();
            return "k";
        }() + Jw() + Aw();
        if (aj[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = Hw() + Jw() + Dw() + Ew();
        var f = Gw() + Bw() + Cw() + Aw() + Cw() + Aw() + function () {
            Math.random();
            return "y";
        }() + Gw() + Jw();
        if (aj[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = Ew() + Bw() + Kw() + function () {
            Math.random();
            return "w";
        }() + function () {
            Math.random();
            return "I";
        }() + function () {
            Math.random();
            return "m";
        }() + Kw() + Lw() + Jw();
        e = Iw() + Kw() + Dw() + function () {
            Math.random();
            return "v";
        }() + Kw() + Hw() + function () {
            Math.random();
            return "R";
        }() + Jw() + Dw() + Ew() + Jw() + Bw() + Fw() + Dw() + Lw() + Iw() + Cw() + Dw() + Aw() + Jw() + function () {
            Math.random();
            return "x";
        }() + Aw() + function () {
            Math.random();
            return "2";
        }() + function () {
            Math.random();
            return "D";
        }();
        if (aj[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Mw(b, c) {
        this.ΔΔ = b;
        this.Ⲇ = c;
        var d = this;
        this.ⵠⵠⵠΔⲆᐃᐃ = false;
        this.ΔΔᐃⲆⲆᐃΔ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⵠΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            Ⲇᐃⵠⵠⵠ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Tw.ΔⲆΔᐃΔᐃΔ.ⵠⵠⵠⲆⲆⲆⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + et[335] + " : " + Tw.ⵠᐃⲆ + "</div><div class=\"stats\"> " + et[334] + " : " + Tw.ΔⲆΔᐃΔᐃΔ.ΔⲆⵠΔΔⲆⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + et[333] + " : " + Tw.ΔⲆΔᐃΔᐃΔ.ⲆΔⲆⲆⵠ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Tw.ΔⲆΔᐃΔᐃΔ.ΔⵠᐃΔΔᐃⵠ + " " + et[332] + "</div></div><div id=\"shop_points\">" + et[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + et[329] + "</div><div class=\"social\" id=\"fffacebook\">" + et[330] + "</div></div><div id=\"bbback\">" + et[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Pw, false);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Uw.ⲆⲆᐃⲆⵠ(df.ⲆΔΔᐃⵠ);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", ef, false);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", Df + "getBreadAndScore?userid=" + _w);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - df.ⵠⲆⲆⵠΔ;
                            df.ⵠⲆⲆⵠΔ = b.b;
                            df.ⲆΔⲆⲆⵠ = b.s;
                            df.ⵠᐃⵠⵠᐃ = df.ᐃⲆᐃΔᐃⲆⵠ(df.ⲆΔⲆⲆⵠ);
                            df.ⵠⲆⵠⲆᐃΔΔ = df.ᐃⲆΔⲆΔᐃⲆ(df.ⲆΔⲆⲆⵠ);
                            df.ⵠᐃⲆⲆᐃΔⵠ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ⵠⵠΔ();
            if (++g != 30) {
                aj.setTimeout(e, 33);
            } else {
                d.ⵠⵠΔ();
            }
        }
        this.ⲆⲆᐃⲆⵠ = function (a) {
            if (d.ⵠⵠⵠΔⲆᐃᐃ === true) {
                d.ⵠⵠⵠΔⲆᐃᐃ = false;
                f = a;
                i = -1;
                j();
                kf();
            }
        };
        var i = -1;
        function j() {
            d.ⵠⵠΔ();
            if (++i == 30) {
                d.stop();
                d.ΔΔᐃⲆⲆᐃΔ.style.display = "none";
                f();
                return;
            }
            aj.setTimeout(j, 33);
        }
        this.ᐃⲆⲆⲆⵠ = false;
        this.stop = function () {
            this.ᐃⲆⲆⲆⵠ = So;
        };
        this.ⲆΔΔᐃⵠ = function () {
            Zw();
            document.getElementById("game_body").style.backgroundColor = Ur.ΔⵠⲆⲆᐃ[Sw.time];
            d.ΔΔᐃⲆⲆᐃΔ.Ⲇᐃⵠⵠⵠ();
            df.ΔᐃΔⵠⲆ.style.display = "inline-block";
            d.ᐃⲆⲆⲆⵠ = true;
            d.ⵠⵠⵠΔⲆᐃᐃ = ra;
            i = -1;
            g = 0;
            e();
        };
        this.ⵠⵠΔ = function () {
            this.ΔΔᐃⲆⲆᐃΔ.translate.x = Math.floor(gq - 275);
            this.ΔΔᐃⲆⲆᐃΔ.translate.y = Math.floor(hq - this.ΔΔᐃⲆⲆᐃΔ.height - 28);
            df.ΔᐃΔⵠⲆ.translate.x = this.ΔΔᐃⲆⲆᐃΔ.translate.x - 350;
            df.ΔᐃΔⵠⲆ.translate.y = this.ΔΔᐃⲆⲆᐃΔ.translate.y + 0;
            df.ΔᐃΔⵠⲆ.ⵠⵠΔ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ΔΔᐃⲆⲆᐃΔ.translate.y -= a;
            }
            this.ΔΔᐃⲆⲆᐃΔ.ⵠⵠΔ();
        };
        this.Δᐃᐃⵠ = function () {
            fc();
            Tw.alert.Δᐃᐃⵠ("#FFF", "#000");
        };
    }
    function Nw(b, c, d, e, f, g) {
        Mj($v, b, c, d, e, f, g);
        const a = ((249 + (Zv[0] ^ Zv[1])) * 8121 + 28411) % 134456;
        const h = ~(a & 45322) & 45322 | ~(a & 45322) & a;
        return ((39 + ((16 << ((h ^ Zv[3]) >> 16 & 255)) + (24 << ((h ^ Zv[3]) >> 24 & 255)) + (0 << ((h ^ Zv[3]) >> 8 & 255)) + (8 << ((h ^ Zv[3]) & 255)) ^ Zv[4])) * 8121 + 28411) % 134456 ^ 52287;
    }
    function Ow(c, d) {
        var f = this;
        this.ΔΔ = c;
        this.Ⲇ = d;
        if (aj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃᐃΔΔΔᐃΔ = "default";
            this.ⵠᐃⲆⵠⵠⲆᐃ = "pointer";
        } else {
            this.ᐃᐃΔΔΔᐃΔ = "url('img/cursor0.png'), default";
            this.ⵠᐃⲆⵠⵠⲆᐃ = "url('img/cursor1.png'), pointer";
        }
        this.ⲆΔΔΔᐃΔⵠ = 1;
        this.ᐃᐃⵠΔⵠΔⵠ = 1;
        this.ⲆⲆᐃⲆᐃⲆΔ = 1;
        this.ⵠⵠΔᐃⵠᐃΔ = 1;
        this.ⲆᐃΔᐃΔⲆⲆⲆⵠ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ⵠᐃⵠⲆ = {
            ⵠΔᐃΔᐃⲆᐃ: Tv(60, 60, 0, Δⵠ[782]),
            ⲆⵠᐃΔΔⵠᐃ: Tv(60, 60, 0, Δⵠ[783])
        };
        this.sign = {
            open: false,
            ⲆⵠΔⲆⵠᐃⵠΔⲆ: 0,
            ΔᐃΔⵠΔᐃⲆ: document.getElementById("sign_object"),
            ᐃΔΔⵠⵠⲆⲆ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: Tv(60, 60, 0, Δⵠ[803]),
            ⵠᐃΔΔᐃⵠⵠ: function () {
                var a = Math.floor(Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) * (10 + Δⵠ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 150) + "px";
                this.style.top = Math.floor(hq - 115) + "px";
            },
            ⲆⲆᐃⲆⵠ: function () {
                Vw.sign.style.display = "none";
                Vw.sign.open = false;
            },
            select: function () {
                Vw.sign.open = !Vw.sign.open;
                if (Vw.sign.open) {
                    Vw.sign.style.display = "inline-block";
                } else {
                    Vw.sign.style.display = "none";
                }
            },
            ok: function () {
                ᐃⲆΔΔ.ΔᐃΔⵠⵠᐃᐃⵠΔ(Tw.sign.ⲆⵠⵠⲆⵠ, Vw.sign.ᐃΔΔⵠⵠⲆⲆ);
                Vw.sign.select();
            },
            up: function () {
                Vw.sign.ᐃΔΔⵠⵠⲆⲆ = Vw.sign.ᐃΔΔⵠⵠⲆⲆ === 0 ? 3 : Vw.sign.ᐃΔΔⵠⵠⲆⲆ - 1;
                Vw.sign.ΔᐃΔⵠΔᐃⲆ.src = "./img/sign" + Vw.sign.ᐃΔΔⵠⵠⲆⲆ + ".png";
            },
            down: function () {
                Vw.sign.ᐃΔΔⵠⵠⲆⲆ = (Vw.sign.ᐃΔΔⵠⵠⲆⲆ + 1) % 4;
                Vw.sign.ΔᐃΔⵠΔᐃⲆ.src = "./img/sign" + Vw.sign.ᐃΔΔⵠⵠⲆⲆ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, Vh);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, So);
        this.ⵠⵠⵠᐃΔ = {
            open: false,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ⵠΔⵠⵠⵠ: 1,
                b: 1,
                a: 3,
                ⵠⵠΔᐃᐃ: 316
            }, {
                id: 1,
                name: "stone",
                ⵠΔⵠⵠⵠ: 1,
                b: 1,
                a: 4,
                ⵠⵠΔᐃᐃ: 315
            }, {
                id: 2,
                name: "gold",
                ⵠΔⵠⵠⵠ: 1,
                b: 1,
                a: 6,
                ⵠⵠΔᐃᐃ: 297
            }, {
                id: 3,
                name: "diamond",
                ⵠΔⵠⵠⵠ: 4,
                b: 4,
                a: 1,
                ⵠⵠΔᐃᐃ: 298
            }, {
                id: 4,
                name: "amethyst",
                ⵠΔⵠⵠⵠ: 8,
                b: 8,
                a: 1,
                ⵠⵠΔᐃᐃ: 418
            }, {
                id: 5,
                name: "reidite",
                ⵠΔⵠⵠⵠ: 16,
                b: 16,
                a: 1,
                ⵠⵠΔᐃᐃ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ⵠΔⵠⵠⵠ: 10,
                b: 10,
                a: 1,
                ⵠⵠΔᐃᐃ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ⵠΔⵠⵠⵠ: 16,
                b: 16,
                a: 1,
                ⵠⵠΔᐃᐃ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ⵠΔⵠⵠⵠ: 20,
                b: 20,
                a: 1,
                ⵠⵠΔᐃᐃ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ⵠΔⵠⵠⵠ: 30,
                b: 30,
                a: 1,
                ⵠⵠΔᐃᐃ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ⵠΔⵠⵠⵠ: 40,
                b: 40,
                a: 1,
                ⵠⵠΔᐃᐃ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ⵠΔⵠⵠⵠ: 60,
                b: 60,
                a: 1,
                ⵠⵠΔᐃᐃ: 966
            }],
            button: Tv(60, 60, 0, Δⵠ[795]),
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 450) + "px";
                this.style.top = Math.floor(hq - 270) + "px";
            },
            select: function () {
                Vw.ⵠⵠⵠᐃΔ.open = !Vw.ⵠⵠⵠᐃΔ.open;
                if (Vw.ⵠⵠⵠᐃΔ.open) {
                    Vw.ⵠⵠⵠᐃΔ.style.display = "inline-block";
                } else {
                    Vw.ⵠⵠⵠᐃΔ.style.display = "none";
                }
            },
            ⲆⲆᐃⲆⵠ: function () {
                Vw.ⵠⵠⵠᐃΔ.style.display = "none";
                Vw.ⵠⵠⵠᐃΔ.open = Qk;
            },
            ΔΔⵠⵠᐃⲆⲆ: function () {
                ᐃⲆΔΔ.ⵠΔᐃⲆᐃⵠΔΔᐃ(this.ΔᐃⲆΔᐃᐃⲆ);
            },
            ΔᐃⲆΔⵠ: function () {
                this.id;
                if (this.ΔᐃⲆΔᐃᐃⲆ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ΔᐃⲆΔᐃᐃⲆ.b);
                    this.ΔᐃⲆΔᐃᐃⲆ.ⵠΔⵠⵠⵠ = a;
                    document.getElementById(this.ΔᐃⲆΔᐃᐃⲆ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ΔᐃⲆΔᐃᐃⲆ.a);
                    this.ΔᐃⲆΔᐃᐃⲆ.ⵠΔⵠⵠⵠ = a;
                    document.getElementById(this.ΔᐃⲆΔᐃᐃⲆ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ⵠⵠⵠᐃΔ.ⲆⲆᐃⲆⵠ, So);
        var e = [["mouseup", this.ⵠⵠⵠᐃΔ.ΔΔⵠⵠᐃⲆⲆ, "buy_"], ["click", this.ⵠⵠⵠᐃΔ.ΔᐃⲆΔⵠ, ""], ["change", this.ⵠⵠⵠᐃΔ.ΔᐃⲆΔⵠ, ""], ["keypress", this.ⵠⵠⵠᐃΔ.keypress, ""]];
        for (var i = 0; this.ⵠⵠⵠᐃΔ.items.length > i; i++) {
            var j = this.ⵠⵠⵠᐃΔ.items[i];
            document.getElementById(j.name + "_market").src = Δⵠ[j.ⵠⵠΔᐃᐃ][0].ᐃⵠΔΔᐃ === ts ? Δⵠ[j.ⵠⵠΔᐃᐃ][0].src : Δⵠ[j.ⵠⵠΔᐃᐃ][0].ᐃⵠΔΔᐃ;
            if (j.a === 1) {
                document.getElementById(j.name + "_trad_number").innerHTML = j.b;
                document.getElementById(j.name + "_number").value = 1;
                document.getElementById(j.name + "_number").step = 1;
                document.getElementById(j.name + "_number").min = 1;
                document.getElementById(j.name + "_number").max = Math.floor(255 / j.b);
            } else {
                document.getElementById(j.name + "_trad_number").innerHTML = 1;
                document.getElementById(j.name + "_number").value = j.a;
                document.getElementById(j.name + "_number").step = j.a;
                document.getElementById(j.name + "_number").min = j.a;
            }
            document.getElementById("buy_" + j.name + "_number").ΔᐃⲆΔᐃᐃⲆ = j;
            document.getElementById(j.name + "_number").ΔᐃⲆΔᐃᐃⲆ = j;
            for (var k = 0; e.length > k; k++) {
                document.getElementById(e[k][2] + j.name + "_number").addEventListener(e[k][0], e[k][1], Wh);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: Mr,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ᐃΔᐃⵠᐃ: document.getElementById("agree_ing").style,
            ΔΔΔᐃΔⲆᐃ: document.getElementById("cancel_agree_ing").style,
            ΔⵠⲆΔᐃᐃⵠ: document.getElementById("quest_agree_ing").style,
            ᐃΔᐃⵠΔⲆᐃ: document.getElementById("spectator_agree_ing").style,
            ᐃⲆᐃⵠⵠᐃⲆ: document.getElementById("auto_feed_agree_ing").style,
            ⵠⲆⲆⲆⵠΔⵠ: document.getElementById("info_agree_ing").style,
            ⲆⲆᐃΔⵠΔⲆ: document.getElementById("pixelated_agree_ing").style,
            button: Tv(60, 60, 0, Δⵠ[727]),
            ⲆⵠᐃⵠⵠᐃᐃᐃⲆ: function () {
                Vw.options.open = !Vw.options.open;
                if (Vw.options.open) {
                    Vw.options.style.display = "inline-block";
                } else {
                    Vw.options.style.display = "none";
                }
            },
            ⵠⵠΔⲆΔᐃⵠⲆΔ: function () {
                df.ΔΔᐃⲆⲆⲆᐃ();
            },
            ΔΔᐃⲆᐃⲆΔᐃⵠ: function () {
                df.ᐃⲆᐃΔⵠⲆⲆ();
            },
            high: function () {
                df.ᐃⲆⲆⵠΔⲆΔⵠⵠ();
            },
            low: function () {
                df.ᐃⲆΔᐃΔⲆⵠᐃⲆ();
            },
            ⲆⵠⲆᐃᐃ: function () {
                Vw.ⲆΔΔⲆ.ⲆⵠⲆᐃᐃ();
            },
            ᐃⵠΔΔΔΔⲆⵠᐃ: function () {
                Vw.ⲆⲆⲆⵠⵠ.ⲆⵠⲆᐃᐃ();
            },
            ⵠⲆⲆⲆᐃΔᐃΔⵠ: function () {
                Vw.ᐃᐃⵠⵠ.ⲆⵠⲆᐃᐃ();
            },
            ⵠⲆⲆᐃⵠⵠᐃᐃᐃ: function () {
                Tw.ⵠⲆᐃⲆΔᐃⵠ.ⲆⲆⲆᐃᐃⵠᐃ();
            },
            ᐃⵠⲆΔⲆⲆᐃΔⵠ: function () {
                Tw.ΔᐃⲆⵠΔ.ⲆⲆⲆᐃᐃⵠᐃ();
            },
            ⲆⲆᐃⲆⵠ: function () {
                Vw.options.style.display = "none";
                Vw.options.open = false;
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 235) + "px";
                this.style.top = Math.floor(hq - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ⵠⵠΔⲆΔᐃⵠⲆΔ, false);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔΔᐃⲆᐃⲆΔᐃⵠ, false);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ⲆⲆᐃⲆⵠ, $a);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ⲆⵠⲆᐃᐃ, false);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⲆⲆᐃΔᐃΔⵠ, cr);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠΔΔΔΔⲆⵠᐃ, Ga);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ⵠⲆⲆᐃⵠⵠᐃᐃᐃ, po);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ᐃⵠⲆΔⲆⲆᐃΔⵠ, false);
        this.ⲆⲆⲆⵠⵠ = {
            open: po,
            Ⲇᐃᐃᐃᐃ: ⵠΔᐃⲆ.get("starve_cancel") ? ⵠΔᐃⲆ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ᐃΔᐃⵠᐃ: document.getElementById("cancel_agree").style,
            button: 0,
            ᐃᐃ: 0,
            ⲆⲆᐃⲆⵠ: function () {
                Vw.ⲆⲆⲆⵠⵠ.style.display = "none";
                Vw.ⲆⲆⲆⵠⵠ.open = false;
            },
            ⲆᐃⲆⵠⲆⵠᐃ: function () {
                if (Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ) {
                    ᐃⲆΔΔ.ᐃⵠⵠⲆᐃΔⵠⵠⲆ();
                }
                Vw.ⲆⲆⲆⵠⵠ.ⲆⲆᐃⲆⵠ();
            },
            ⲆⵠⲆᐃᐃ: function () {
                if (Vw.ⲆⲆⲆⵠⵠ.Ⲇᐃᐃᐃᐃ) {
                    ⵠΔᐃⲆ.set("starve_cancel", "0");
                    Vw.ⲆⲆⲆⵠⵠ.ᐃΔᐃⵠᐃ.display = "inline-block";
                    Vw.options.ΔΔΔᐃΔⲆᐃ.display = "none";
                } else {
                    ⵠΔᐃⲆ.set("starve_cancel", "1");
                    Vw.ⲆⲆⲆⵠⵠ.ᐃΔᐃⵠᐃ.display = "none";
                    Vw.options.ΔΔΔᐃΔⲆᐃ.display = "inline-block";
                }
                Vw.ⲆⲆⲆⵠⵠ.Ⲇᐃᐃᐃᐃ = !Vw.ⲆⲆⲆⵠⵠ.Ⲇᐃᐃᐃᐃ;
            },
            ⵠⲆⲆⵠⲆⲆⲆ: function () {
                if (this.Ⲇᐃᐃᐃᐃ) {
                    this.style.display = "inline-block";
                    this.open = oi;
                } else {
                    this.ⲆᐃⲆⵠⲆⵠᐃ();
                }
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 235) + "px";
                this.style.top = Math.floor(hq - 130) + "px";
            }
        };
        this.ⲆⲆⲆⵠⵠ.id.oncontextmenu = function () {
            return yl;
        };
        this.ⲆⲆⲆⵠⵠ.ᐃΔᐃⵠᐃ.display = "none";
        if (this.ⲆⲆⲆⵠⵠ.Ⲇᐃᐃᐃᐃ) {
            this.options.ΔΔΔᐃΔⲆᐃ.display = "inline-block";
        } else {
            this.options.ΔΔΔᐃΔⲆᐃ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ⲆⲆⲆⵠⵠ.ⲆᐃⲆⵠⲆⵠᐃ, m);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ⲆⲆⲆⵠⵠ.ⲆⲆᐃⲆⵠ, Ga);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ⲆⲆⲆⵠⵠ.ⲆⵠⲆᐃᐃ, false);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, Tn);
        this.ᐃΔᐃⲆⵠⲆᐃ = {
            Ⲇᐃᐃᐃᐃ: ⵠΔᐃⲆ.get("starve_aliasing") ? ⵠΔᐃⲆ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ⵠⲆⲆΔⵠΔᐃ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ⲆⵠⲆᐃᐃ: function () {
                if (Vw.ᐃΔᐃⲆⵠⲆᐃ.Ⲇᐃᐃᐃᐃ === 0) {
                    ⵠΔᐃⲆ.set("starve_aliasing", "1");
                    Vw.ᐃΔᐃⲆⵠⲆᐃ.ⵠⲆⲆΔⵠΔᐃ(1);
                    Vw.options.ⲆⲆᐃΔⵠΔⲆ.display = "inline-block";
                } else {
                    ⵠΔᐃⲆ.set("starve_aliasing", "0");
                    Vw.ᐃΔᐃⲆⵠⲆᐃ.ⵠⲆⲆΔⵠΔᐃ(0);
                    Vw.options.ⲆⲆᐃΔⵠΔⲆ.display = "none";
                }
                Vw.ᐃΔᐃⲆⵠⲆᐃ.Ⲇᐃᐃᐃᐃ = (Vw.ᐃΔᐃⲆⵠⲆᐃ.Ⲇᐃᐃᐃᐃ + 1) % 2;
            }
        };
        if (this.ᐃΔᐃⲆⵠⲆᐃ.Ⲇᐃᐃᐃᐃ === 1) {
            this.options.ⲆⲆᐃΔⵠΔⲆ.display = "inline-block";
        } else {
            this.ᐃΔᐃⲆⵠⲆᐃ.ⵠⲆⲆΔⵠΔᐃ(0);
            this.options.ⲆⲆᐃΔⵠΔⲆ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ᐃΔᐃⲆⵠⲆᐃ.ⲆⵠⲆᐃᐃ, ah);
        this.ⲆΔⲆᐃᐃ = {
            Ⲇᐃᐃᐃᐃ: ⵠΔᐃⲆ.get("starve_info_box") && ⵠΔᐃⲆ.get("starve_info_box") === "0" ? 0 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ᐃⵠΔᐃ: 0,
            ⲆⵠⲆᐃᐃ: function () {
                if (Vw.ⲆΔⲆᐃᐃ.Ⲇᐃᐃᐃᐃ === 0) {
                    ⵠΔᐃⲆ.set("starve_info_box", "1");
                    Vw.options.ⵠⲆⲆⲆⵠΔⵠ.display = "inline-block";
                } else {
                    ⵠΔᐃⲆ.set("starve_info_box", "0");
                    Vw.options.ⵠⲆⲆⲆⵠΔⵠ.display = "none";
                }
                Vw.ⲆΔⲆᐃᐃ.Ⲇᐃᐃᐃᐃ = (Vw.ⲆΔⲆᐃᐃ.Ⲇᐃᐃᐃᐃ + 1) % 2;
            },
            ΔᐃⲆⲆ: function (a, b, c) {
                if (a && this.Ⲇᐃᐃᐃᐃ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : Zg[b.id].ΔⵠⲆⵠ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ᐃⵠΔᐃ = c;
                }
                return a;
            }
        };
        if (this.ⲆΔⲆᐃᐃ.Ⲇᐃᐃᐃᐃ === 1) {
            this.options.ⵠⲆⲆⲆⵠΔⵠ.display = "inline-block";
        } else {
            this.options.ⵠⲆⲆⲆⵠΔⵠ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆΔⲆᐃᐃ.ⲆⵠⲆᐃᐃ, Mr);
        if (ⵠΔᐃⲆ.get("starve_scale")) {
            ao = Number(ⵠΔᐃⲆ.get("starve_scale"));
            document.getElementById("input_ratio").value = ao;
            ao *= Qq / Sq;
            Wq();
        }
        this.ΔᐃᐃᐃⲆΔⵠ = function () {
            ⵠΔᐃⲆ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            ao = document.getElementById("input_ratio").value * (Qq / Sq);
            Wq();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ΔᐃᐃᐃⲆΔⵠ, false);
        this.ⲆΔΔⲆ = {
            open: $a,
            Ⲇᐃᐃᐃᐃ: ⵠΔᐃⲆ.get("starve_safe") ? ⵠΔᐃⲆ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ᐃΔᐃⵠᐃ: document.getElementById("agree").style,
            button: 0,
            ᐃᐃ: 0,
            ⲆⲆᐃⲆⵠ: function () {
                Vw.ⲆΔΔⲆ.style.display = "none";
                Vw.ⲆΔΔⲆ.open = false;
            },
            all: function () {
                if (!Tw.ⲆⲆᐃⵠⲆ.wait) {
                    if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ᐃⵠΔᐃ.id < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                        ᐃⲆΔΔ.ΔⲆⵠⵠⵠᐃⲆᐃⲆ(Vw.ⲆΔΔⲆ.button);
                    }
                    Vw.ⲆΔΔⲆ.ⲆⲆᐃⲆⵠ();
                }
            },
            ᐃⲆⵠΔ: function () {
                if (Tw.ᐃⵠΔᐃ.ⵠⲆⵠᐃⲆ && !Tw.ⲆⲆᐃⵠⲆ.wait) {
                    if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ᐃⵠΔᐃ.id < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                        ᐃⲆΔΔ.ⲆⲆᐃⵠΔⵠⵠΔⵠ(Vw.ⲆΔΔⲆ.button);
                    }
                    Vw.ⲆΔΔⲆ.ⲆⲆᐃⲆⵠ();
                }
            },
            ΔᐃⲆⵠΔΔΔⲆΔ: function () {
                if (!Tw.ⲆⲆᐃⵠⲆ.wait) {
                    if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ᐃⵠΔᐃ.id < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                        ᐃⲆΔΔ.ᐃΔⲆⲆⵠΔΔᐃⲆ(Vw.ⲆΔΔⲆ.button);
                    }
                    Vw.ⲆΔΔⲆ.ⲆⲆᐃⲆⵠ();
                }
            },
            ⲆⵠⲆᐃᐃ: function () {
                if (Vw.ⲆΔΔⲆ.Ⲇᐃᐃᐃᐃ) {
                    ⵠΔᐃⲆ.set("starve_safe", "0");
                    Vw.ⲆΔΔⲆ.ᐃΔᐃⵠᐃ.display = "inline-block";
                    Vw.options.ᐃΔᐃⵠᐃ.display = "none";
                } else {
                    ⵠΔᐃⲆ.set("starve_safe", "1");
                    Vw.ⲆΔΔⲆ.ᐃΔᐃⵠᐃ.display = "none";
                    Vw.options.ᐃΔᐃⵠᐃ.display = "inline-block";
                }
                Vw.ⲆΔΔⲆ.Ⲇᐃᐃᐃᐃ = !Vw.ⲆΔΔⲆ.Ⲇᐃᐃᐃᐃ;
            },
            ⵠⲆⲆⵠⲆⲆⲆ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = Δⵠ[fs[a].ᐃΔ][0].ᐃⵠΔΔᐃ === _l ? Δⵠ[fs[a].ᐃΔ][0].src : Δⵠ[fs[a].ᐃΔ][0].ᐃⵠΔΔᐃ;
                if (fs[a].ᐃⲆⵠΔ && !Tw.ᐃΔᐃᐃⲆ && Tw.ᐃⵠΔᐃ.ⵠⲆⵠᐃⲆ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.Ⲇᐃᐃᐃᐃ) {
                    this.style.display = "inline-block";
                    this.open = cl;
                } else {
                    this.all();
                }
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 235) + "px";
                this.style.top = Math.floor(hq - 175) + "px";
            }
        };
        this.ⲆΔΔⲆ.ᐃΔᐃⵠᐃ.display = "none";
        if (this.ⲆΔΔⲆ.Ⲇᐃᐃᐃᐃ) {
            this.options.ᐃΔᐃⵠᐃ.display = "inline-block";
        } else {
            this.options.ᐃΔᐃⵠᐃ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ⲆΔΔⲆ.ΔᐃⲆⵠΔΔΔⲆΔ, So);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ⲆΔΔⲆ.all, false);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ⲆΔΔⲆ.ᐃⲆⵠΔ, false);
        document.getElementById("no_delete").addEventListener("mouseup", this.ⲆΔΔⲆ.ⲆⲆᐃⲆⵠ, Qj);
        document.getElementById("case_agree").addEventListener("mouseup", this.ⲆΔΔⲆ.ⲆⵠⲆᐃᐃ, false);
        this.ⵠᐃⵠⵠΔ = {
            open: false,
            ᐃΔᐃⲆᐃ: -1,
            button: Tv(60, 60, 0, Δⵠ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 300) + "px";
                this.style.top = Math.floor(hq - 215) + "px";
            },
            ⲆⲆᐃⲆⵠ: function () {
                Vw.ⵠᐃⵠⵠΔ.open = false;
                Vw.ⵠᐃⵠⵠΔ.style.display = "none";
            },
            select: function () {
                Vw.ⵠᐃⵠⵠΔ.open = !Vw.ⵠᐃⵠⵠΔ.open;
                if (Vw.ⵠᐃⵠⵠΔ.open) {
                    Vw.ⵠᐃⵠⵠΔ.style.display = "inline-block";
                } else {
                    Vw.ⵠᐃⵠⵠΔ.style.display = "none";
                }
            },
            ΔΔⵠⵠᐃⲆⲆ: function () {
                if (Vw.ⵠᐃⵠⵠΔ.ᐃΔᐃⲆᐃ >= 0) {
                    ᐃⲆΔΔ.ⲆᐃΔᐃⲆⲆⲆᐃⵠ(Vw.ⵠᐃⵠⵠΔ.ᐃΔᐃⲆᐃ);
                    Vw.ⵠᐃⵠⵠΔ.ⲆⲆᐃⲆⵠ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + Vw.ⵠᐃⵠⵠΔ.ᐃΔᐃⲆᐃ);
                    }
                }
            },
            Ⲇᐃⵠⵠⵠ: function () {
                var a = Tw.ⵠᐃⵠⵠΔ.value;
                document.getElementById("points_bank").innerHTML = ΔⲆⵠᐃ.ⲆⲆⵠΔⵠΔΔ(a) + " points";
                for (var b = 0; b < lw.length; b++) {
                    if (lw[b].ᐃΔⲆⵠᐃ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ΔΔⵠⲆΔⵠΔⵠⲆ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = lw[a - 1];
                if (Tw.ⵠᐃⵠⵠΔ.value >= b.ᐃΔⲆⵠᐃ) {
                    Vw.ⵠᐃⵠⵠΔ.ᐃΔᐃⲆᐃ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Vw.ⵠᐃⵠⵠΔ.ᐃΔᐃⲆᐃ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = Δⵠ[fs[b[c - 1][1]].ᐃΔ][0].ᐃⵠΔΔᐃ === undefined ? Δⵠ[fs[b[c - 1][1]].ᐃΔ][0].src : Δⵠ[fs[b[c - 1][1]].ᐃΔ][0].ᐃⵠΔΔᐃ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ⵠᐃⵠⵠΔ.ⲆⲆᐃⲆⵠ, false);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ⵠᐃⵠⵠΔ.ΔΔⵠⵠᐃⲆⲆ, Ga);
        for (k = 1; k < 11; k++) {
            document.getElementById("starter" + k).addEventListener("mouseup", this.ⵠᐃⵠⵠΔ.ΔΔⵠⲆΔⵠΔⵠⲆ, Wh);
        }
        this.ᐃᐃⵠⵠ = {
            open: false,
            Ⲇᐃᐃᐃᐃ: ⵠΔᐃⲆ.get("starve_quests") ? ⵠΔᐃⲆ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: Tv(60, 60, 0, Δⵠ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(gq - 420) + "px";
                this.style.top = Math.floor(hq - 270) + "px";
            },
            ⲆⲆᐃⲆⵠ: function () {
                Vw.ᐃᐃⵠⵠ.style.display = "none";
                Vw.ᐃᐃⵠⵠ.open = $a;
            },
            select: function () {
                Vw.ᐃᐃⵠⵠ.open = !Vw.ᐃᐃⵠⵠ.open;
                if (Vw.ᐃᐃⵠⵠ.open) {
                    Vw.ᐃᐃⵠⵠ.style.display = "inline-block";
                } else {
                    Vw.ᐃᐃⵠⵠ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < rw.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ⵠⲆⲆⵠⵠⵠⲆ: 0,
            ⵠΔⲆᐃᐃⲆΔ: 0,
            ⵠⵠᐃⲆΔΔᐃᐃΔ: function () {
                if (Vw.ᐃᐃⵠⵠ.open) {
                    var a = new Date().getTime();
                    if (a - this.ⵠⲆⲆⵠⵠⵠⲆ >= 1000) {
                        this.ⵠⲆⲆⵠⵠⵠⲆ = a;
                        for (var b = 0; b < rw.length; b++) {
                            if (Vw.ᐃᐃⵠⵠ.list[b]) {
                                var c = rw[b].time - (a - cf.ⲆᐃⵠΔΔ.Ⲇᐃⵠⵠⵠ + Vw.ᐃᐃⵠⵠ.ⵠΔⲆᐃᐃⲆΔ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        Vw.ᐃᐃⵠⵠ.ⵠΔᐃᐃᐃⲆⵠ(b, a[b]);
                    }
                }
            },
            ⵠΔᐃᐃᐃⲆⵠ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Tw.ⲆⲆⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ(0, 1);
                    Vw.ⲆΔᐃΔΔᐃᐃ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                Vw.ᐃᐃⵠⵠ.list[a] = 0;
            },
            modify: function (a, b) {
                Vw.ᐃᐃⵠⵠ.ⵠΔᐃᐃᐃⲆⵠ(a, b);
                if (Vw.ᐃᐃⵠⵠ.Ⲇᐃᐃᐃᐃ) {
                    Vw.ᐃᐃⵠⵠ.open = u;
                    Vw.ᐃᐃⵠⵠ.style.display = "inline-block";
                }
            },
            ⲆⵠⲆᐃᐃ: function () {
                if (Vw.ᐃᐃⵠⵠ.Ⲇᐃᐃᐃᐃ) {
                    ⵠΔᐃⲆ.set("starve_quests", "0");
                    Vw.options.ΔⵠⲆΔᐃᐃⵠ.display = "none";
                } else {
                    ⵠΔᐃⲆ.set("starve_quests", "1");
                    Vw.options.ΔⵠⲆΔᐃᐃⵠ.display = "inline-block";
                }
                Vw.ᐃᐃⵠⵠ.Ⲇᐃᐃᐃᐃ = !Vw.ᐃᐃⵠⵠ.Ⲇᐃᐃᐃᐃ;
            },
            ⵠΔⲆᐃΔⲆⵠⵠᐃ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ᐃⲆΔΔ.ⲆΔΔΔⵠᐃⵠΔΔ(a);
            }
        };
        if (this.ᐃᐃⵠⵠ.Ⲇᐃᐃᐃᐃ) {
            this.options.ΔⵠⲆΔᐃᐃⵠ.display = "inline-block";
        } else {
            this.options.ΔⵠⲆΔᐃᐃⵠ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ᐃᐃⵠⵠ.ⲆⲆᐃⲆⵠ, po);
        for (k = 0; rw.length > k; k++) {
            document.getElementById("claim_reward_" + k).addEventListener("mouseup", this.ᐃᐃⵠⵠ.ⵠΔⲆᐃΔⲆⵠⵠᐃ, $a);
        }
        this.ΔⲆᐃΔ = {
            open: false,
            button: Tv(60, 60, 0, Δⵠ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ⵠⲆᐃⵠⲆᐃⲆ: [],
                ΔⲆⵠⲆᐃⵠᐃ: 0,
                ⵠⵠΔ: function () {
                    this.style.left = Math.floor(gq - 335) + "px";
                    this.style.top = Math.floor(hq - 215) + "px";
                },
                ⲆⲆᐃⲆⵠ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    Vw.ΔⲆᐃΔ.open = Ga;
                },
                ⵠᐃΔᐃᐃᐃΔ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ⵠⵠᐃᐃ: function (a) {
                    if ((b = this.ⵠⲆᐃⵠⲆᐃⲆ[a]).ⵠⲆΔ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = Δⵠ[fs[b[a][0]].ᐃΔ][0].ᐃⵠΔΔᐃ === Lq ? Δⵠ[fs[b[a][0]].ᐃΔ][0].src : Δⵠ[fs[b[a][0]].ᐃΔ][0].ᐃⵠΔΔᐃ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ΔⲆⵠⲆᐃⵠᐃ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < Zg.length; b++) {
                        var d = Zg[b];
                        if (a === d.ΔⵠΔ) {
                            this.ⵠⲆᐃⵠⲆᐃⲆ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = Δⵠ[fs[d.ΔⵠⲆⵠ].ᐃΔ][0].ᐃⵠΔΔᐃ === Xh ? Δⵠ[fs[d.ΔⵠⲆⵠ].ᐃΔ][0].src : Δⵠ[fs[d.ΔⵠⲆⵠ].ᐃΔ][0].ᐃⵠΔΔᐃ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃⵠᐃᐃⵠᐃⵠ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ⵠⵠΔ: function () {
                    this.style.left = Math.floor(gq - 285) + "px";
                    this.style.top = Math.floor(hq - 170) + "px";
                },
                ⲆⲆᐃⲆⵠ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    Vw.ΔⲆᐃΔ.open = false;
                }
            },
            ΔΔⲆⲆΔⵠⵠᐃΔ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ΔⲆᐃΔ.ᐃⵠᐃᐃⵠᐃⵠ.ⲆⲆᐃⲆⵠ, false);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ΔⲆᐃΔ.list.ⲆⲆᐃⲆⵠ, false);
        document.getElementById("backhome").addEventListener("mouseup", this.ΔⲆᐃΔ.list.ⵠᐃΔᐃᐃᐃΔ, Tn);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(2);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(1);
        }, ah);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(0);
        }, mn);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(3);
        }, false);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(4);
        }, Zl);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            Vw.ΔⲆᐃΔ.list.select(5);
        }, Xi);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(0);
        }, Mr);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(1);
        }, bn);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(2);
        }, Zl);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(3);
        }, Vh);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(4);
        }, Zl);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(5);
        }, false);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(7);
        }, false);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(8);
        }, false);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(9);
        }, Qk);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(10);
        }, bn);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(11);
        }, false);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(12);
        }, false);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(13);
        }, Vh);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(14);
        }, Tn);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(15);
        }, false);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(16);
        }, aq);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(17);
        }, m);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(19);
        }, false);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(21);
        }, cr);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(22);
        }, false);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(24);
        }, false);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(25);
        }, mn);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(26);
        }, false);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(28);
        }, po);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(30);
        }, po);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(31);
        }, m);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(32);
        }, Tn);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(33);
        }, Xi);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(34);
        }, false);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(35);
        }, po);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(36);
        }, false);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(37);
        }, false);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(39);
        }, Xi);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(40);
        }, false);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(41);
        }, cr);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(42);
        }, $a);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(43);
        }, $a);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(44);
        }, false);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(45);
        }, false);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(46);
        }, $a);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            Vw.ΔⲆᐃΔ.list.ⵠⵠᐃᐃ(47);
        }, false);
        this.ΔᐃᐃΔᐃ = {
            translate: {
                y: 0,
                x: 0
            },
            ⲆᐃΔⵠΔᐃⵠ: {
                x: -1,
                y: -1
            },
            ⲆⵠᐃΔ: [],
            focus: function (a) {
                var b = this.translate.y + (Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ⲆᐃΔⵠΔᐃⵠ.x = a.x - this.translate.x;
                    this.ⲆᐃΔⵠΔᐃⵠ.y = a.y - b;
                }
            }
        };
        this.ⵠⲆⵠⵠⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃΔ: Δⵠ[278],
            ΔΔ: document.createElement("canvas")
        };
        this.ⵠⲆⵠⵠⲆ.ΔΔ.width = this.ⵠⲆⵠⵠⲆ.ᐃΔ.width;
        this.ⵠⲆⵠⵠⲆ.ΔΔ.height = this.ⵠⲆⵠⵠⲆ.ᐃΔ.height;
        this.ⵠⲆⵠⵠⲆ.Ⲇ = this.ⵠⲆⵠⵠⲆ.ΔΔ.getContext("2d");
        this.ⲆΔᐃΔ = {
            translate: {
                x: 0,
                y: 0
            },
            ᐃΔ: Δⵠ[267],
            Δᐃᐃⵠ: Vc,
            y: 0
        };
        this.ⵠΔᐃᐃΔⲆⲆ = function () {
            ᐃⵠⵠΔⲆ = document.getElementById("team_box");
            ᐃⵠⵠΔⲆ.innerHTML = "";
            ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[0]].ᐃᐃⲆⵠᐃ + "</div";
            for (var a = 1; Tw.ᐃⵠΔΔⵠ.length > a; a++) {
                ᐃⵠⵠΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[a]].ᐃᐃⲆⵠᐃ + "</div></div>";
            }
            ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ᐃⵠⵠΔⲆ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ᐃⲆΔΔ.ⵠΔᐃᐃΔⲆⲆ, false);
        };
        this.ᐃⵠⵠⵠᐃⵠⵠᐃΔ = function () {
            ᐃⵠⵠΔⲆ = document.getElementById("team_box");
            ᐃⵠⵠΔⲆ.innerHTML = "";
            ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[0]].ᐃᐃⲆⵠᐃ + "</div";
            for (var a = 1; Tw.ᐃⵠΔΔⵠ.length > a; a++) {
                ᐃⵠⵠΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[a]].ᐃᐃⲆⵠᐃ + "</div></div>";
            }
            ᐃⵠⵠΔⲆ.innerHTML += "</div>";
            ᐃⵠⵠΔⲆ.style.display = "inline-block";
        };
        this.ΔⵠⵠⵠⲆⲆⵠⵠⵠ = function () {
            ᐃⵠⵠΔⲆ = document.getElementById("team_box");
            ᐃⵠⵠΔⲆ.innerHTML = "";
            ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[0]].ᐃᐃⲆⵠᐃ + "</div";
            for (var a = 1; a < Tw.ᐃⵠΔΔⵠ.length; a++) {
                ᐃⵠⵠΔⲆ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + cf.ⲆⵠᐃΔ[Tw.ᐃⵠΔΔⵠ[a]].ᐃᐃⲆⵠᐃ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Tw.ⲆᐃᐃᐃΔ.lock === 0) {
                ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ᐃⵠⵠΔⲆ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ᐃⲆΔΔ.ᐃΔⵠⲆⵠᐃⲆⲆᐃ, false);
            ᐃⵠⵠΔⲆ.style.display = "inline-block";
            for (a = 1; Tw.ᐃⵠΔΔⵠ.length > a; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(2);
                        }, false);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(3);
                        }, false);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(4);
                        }, cr);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(5);
                        }, So);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(6);
                        }, Wh);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(7);
                        }, false);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ᐃⲆΔΔ.ⲆⲆⵠΔⲆᐃᐃ(8);
                        }, false);
                }
            }
        };
        this.ᐃⲆᐃᐃⵠ = [];
        this.ᐃⲆᐃᐃⵠ[2] = {
            button: Tv(60, 60, 0, Δⵠ[556]),
            action: this.ⵠΔᐃᐃΔⲆⲆ
        };
        this.ᐃⲆᐃᐃⵠ[3] = {
            button: Tv(60, 60, 0, Δⵠ[556]),
            action: ᐃⲆΔΔ.ⵠⵠᐃⵠΔᐃⲆⵠΔ
        };
        this.ᐃⲆᐃᐃⵠ[0] = {
            button: Tv(60, 60, 0, Δⵠ[557]),
            action: this.ΔⵠⵠⵠⲆⲆⵠⵠⵠ
        };
        this.ᐃⲆᐃᐃⵠ[1] = {
            button: Tv(60, 60, 0, Δⵠ[561]),
            action: this.ᐃⵠⵠⵠᐃⵠⵠᐃΔ
        };
        this.ᐃⲆᐃᐃⵠ[4] = {
            button: Tv(60, 60, 0, Δⵠ[560]),
            action: function () { }
        };
        this.ⲆⵠⵠⲆΔ = -1;
        this.ᐃⵠᐃΔᐃᐃⵠ = Tv(60, 60, 0, Δⵠ[723]);
        this.ⲆⵠⵠⵠⲆΔᐃ = Tv(60, 60, 0, Δⵠ[724]);
        this.ⲆᐃⲆⵠⵠⲆᐃ = Tv(60, 60, 0, Δⵠ[658]);
        this.ΔⵠⵠⵠΔᐃⵠ = Tv(60, 60, 0, Δⵠ[657]);
        this.ⲆᐃΔΔΔᐃⵠ = Tv(60, 60, 0, Δⵠ[658]);
        this.ⲆΔᐃⲆΔΔⵠ = Tv(60, 60, 0, Δⵠ[316]);
        this.ΔΔΔΔⵠᐃΔ = Tv(60, 60, 0, Δⵠ[315]);
        this.ᐃΔⵠᐃΔⲆᐃ = Tv(60, 60, 0, Δⵠ[297]);
        this.ⲆΔⵠᐃⲆΔΔ = Tv(60, 60, 0, Δⵠ[298]);
        this.ᐃΔΔᐃⵠᐃⲆ = Tv(60, 60, 0, Δⵠ[418]);
        this.ⵠⲆᐃᐃⲆᐃΔ = Tv(60, 60, 0, Δⵠ[938]);
        this.ᐃᐃΔⵠⵠⲆⲆ = Tv(60, 60, 0, Δⵠ[412]);
        this.ⵠⵠᐃⲆⲆⲆΔ = Tv(60, 60, 0, Δⵠ[536]);
        this.ᐃⵠᐃΔΔᐃⲆ = Tv(60, 60, 0, Δⵠ[535]);
        this.ΔⲆᐃⲆⵠⲆⵠ = Tv(60, 60, 0, Δⵠ[538]);
        this.ⵠⲆⵠⲆᐃ = Tv(120, 120, 0, Δⵠ[149]);
        this.ⵠⲆⵠⲆᐃ.info.translate.x = 10;
        this.ⵠⲆⵠⲆᐃ.info.translate.y = 10;
        this.ⲆⵠⲆ = [];
        this.ⲆⵠⲆ[0] = Tv(68, 68, 0, Δⵠ[340], 3);
        this.ⲆⵠⲆ[0].id = 0;
        this.ⲆⵠⲆ[1] = Tv(68, 68, 0, Δⵠ[341], 3);
        this.ⲆⵠⲆ[1].id = 1;
        this.ⲆⵠⲆ[108] = Tv(68, 68, 0, Δⵠ[342], 3);
        this.ⲆⵠⲆ[108].id = 108;
        this.ⲆⵠⲆ[109] = Tv(68, 68, 0, Δⵠ[343], 3);
        this.ⲆⵠⲆ[109].id = 109;
        this.ⲆⵠⲆ[110] = Tv(68, 68, 0, Δⵠ[269], 3);
        this.ⲆⵠⲆ[110].id = 110;
        this.ⲆⵠⲆ[233] = Tv(68, 68, 0, Δⵠ[1155], 3);
        this.ⲆⵠⲆ[233].id = 233;
        this.ⲆⵠⲆ[111] = Tv(68, 68, 0, Δⵠ[270], 3);
        this.ⲆⵠⲆ[111].id = 111;
        this.ⲆⵠⲆ[112] = Tv(68, 68, 0, Δⵠ[271], 3);
        this.ⲆⵠⲆ[112].id = 112;
        this.ⲆⵠⲆ[3] = Tv(68, 68, 0, Δⵠ[272], 3);
        this.ⲆⵠⲆ[3].id = 3;
        this.ⲆⵠⲆ[4] = Tv(68, 68, 0, Δⵠ[344], 3);
        this.ⲆⵠⲆ[4].id = 4;
        this.ⲆⵠⲆ[5] = Tv(68, 68, 0, Δⵠ[345], 3);
        this.ⲆⵠⲆ[5].id = 5;
        this.ⲆⵠⲆ[57] = Tv(68, 68, 0, Δⵠ[831], 3);
        this.ⲆⵠⲆ[57].id = 57;
        this.ⲆⵠⲆ[6] = Tv(68, 68, 0, Δⵠ[346], 3);
        this.ⲆⵠⲆ[6].id = 6;
        this.ⲆⵠⲆ[113] = Tv(68, 68, 0, Δⵠ[273], 3);
        this.ⲆⵠⲆ[113].id = 113;
        this.ⲆⵠⲆ[114] = Tv(68, 68, 0, Δⵠ[358], 3);
        this.ⲆⵠⲆ[114].id = 114;
        this.ⲆⵠⲆ[115] = Tv(68, 68, 0, Δⵠ[348], 3);
        this.ⲆⵠⲆ[115].id = 115;
        this.ⲆⵠⲆ[162] = Tv(68, 68, 0, Δⵠ[349], 3);
        this.ⲆⵠⲆ[162].id = 162;
        this.ⲆⵠⲆ[160] = Tv(68, 68, 0, Δⵠ[350], 3);
        this.ⲆⵠⲆ[160].id = 160;
        this.ⲆⵠⲆ[8] = Tv(68, 68, 0, Δⵠ[274], 3);
        this.ⲆⵠⲆ[8].id = 8;
        this.ⲆⵠⲆ[117] = Tv(68, 68, 0, Δⵠ[351], 3);
        this.ⲆⵠⲆ[117].id = 117;
        this.ⲆⵠⲆ[116] = Tv(68, 68, 0, Δⵠ[275], 3);
        this.ⲆⵠⲆ[116].id = 116;
        this.ⲆⵠⲆ[118] = Tv(68, 68, 0, Δⵠ[276], 3);
        this.ⲆⵠⲆ[118].id = 118;
        this.ⲆⵠⲆ[195] = Tv(68, 68, 0, Δⵠ[352], 3);
        this.ⲆⵠⲆ[195].id = 195;
        this.ⲆⵠⲆ[161] = Tv(68, 68, 0, Δⵠ[353], 3);
        this.ⲆⵠⲆ[161].id = 161;
        this.ⲆⵠⲆ[163] = Tv(68, 68, 0, Δⵠ[354], 3);
        this.ⲆⵠⲆ[163].id = 163;
        this.ⲆⵠⲆ[164] = Tv(68, 68, 0, Δⵠ[355], 3);
        this.ⲆⵠⲆ[164].id = 164;
        this.ⲆⵠⲆ[165] = Tv(68, 68, 0, Δⵠ[356], 3);
        this.ⲆⵠⲆ[165].id = 165;
        this.ⲆⵠⲆ[166] = Tv(68, 68, 0, Δⵠ[357], 3);
        this.ⲆⵠⲆ[166].id = 166;
        this.ⲆⵠⲆ[167] = Tv(68, 68, 0, Δⵠ[359], 3);
        this.ⲆⵠⲆ[167].id = 167;
        this.ⲆⵠⲆ[168] = Tv(68, 68, 0, Δⵠ[382], 3);
        this.ⲆⵠⲆ[168].id = 168;
        this.ⲆⵠⲆ[169] = Tv(68, 68, 0, Δⵠ[383], 3);
        this.ⲆⵠⲆ[169].id = 169;
        this.ⲆⵠⲆ[170] = Tv(68, 68, 0, Δⵠ[384], 3);
        this.ⲆⵠⲆ[170].id = 170;
        this.ⲆⵠⲆ[2] = Tv(68, 68, 0, Δⵠ[386], 3);
        this.ⲆⵠⲆ[2].id = 2;
        this.ⲆⵠⲆ[237] = Tv(68, 68, 0, Δⵠ[1163], 3);
        this.ⲆⵠⲆ[237].id = 237;
        this.ⲆⵠⲆ[174] = Tv(68, 68, 0, Δⵠ[394], 3);
        this.ⲆⵠⲆ[174].id = 174;
        this.ⲆⵠⲆ[222] = Tv(68, 68, 0, Δⵠ[1036], 3);
        this.ⲆⵠⲆ[222].id = 222;
        this.ⲆⵠⲆ[231] = Tv(68, 68, 0, Δⵠ[1038], 3);
        this.ⲆⵠⲆ[231].id = 231;
        this.ⲆⵠⲆ[232] = Tv(68, 68, 0, Δⵠ[1040], 3);
        this.ⲆⵠⲆ[232].id = 232;
        this.ⲆⵠⲆ[234] = Tv(68, 68, 0, Δⵠ[1157], 3);
        this.ⲆⵠⲆ[234].id = 234;
        this.ⲆⵠⲆ[10] = Tv(68, 68, 0, Δⵠ[387], 3);
        this.ⲆⵠⲆ[10].id = 10;
        this.ⲆⵠⲆ[171] = Tv(68, 68, 0, Δⵠ[388], 3);
        this.ⲆⵠⲆ[171].id = 171;
        this.ⲆⵠⲆ[172] = Tv(68, 68, 0, Δⵠ[389], 3);
        this.ⲆⵠⲆ[172].id = 172;
        this.ⲆⵠⲆ[173] = Tv(68, 68, 0, Δⵠ[390], 3);
        this.ⲆⵠⲆ[173].id = 173;
        this.ⲆⵠⲆ[11] = Tv(68, 68, 0, Δⵠ[391], 3);
        this.ⲆⵠⲆ[11].id = 11;
        this.ⲆⵠⲆ[12] = Tv(68, 68, 0, Δⵠ[403], 3);
        this.ⲆⵠⲆ[12].id = 12;
        this.ⲆⵠⲆ[13] = Tv(68, 68, 0, Δⵠ[397], 3);
        this.ⲆⵠⲆ[13].id = 13;
        this.ⲆⵠⲆ[14] = Tv(68, 68, 0, Δⵠ[400], 3);
        this.ⲆⵠⲆ[14].id = 14;
        this.ⲆⵠⲆ[15] = Tv(68, 68, 0, Δⵠ[406], 3);
        this.ⲆⵠⲆ[15].id = 15;
        this.ⲆⵠⲆ[16] = Tv(68, 68, 0, Δⵠ[875], 3);
        this.ⲆⵠⲆ[16].id = 16;
        this.ⲆⵠⲆ[119] = Tv(68, 68, 0, Δⵠ[410], 3);
        this.ⲆⵠⲆ[119].id = 119;
        this.ⲆⵠⲆ[23] = Tv(68, 68, 0, Δⵠ[422], 3);
        this.ⲆⵠⲆ[23].id = 23;
        this.ⲆⵠⲆ[24] = Tv(68, 68, 0, Δⵠ[425], 3);
        this.ⲆⵠⲆ[24].id = 24;
        this.ⲆⵠⲆ[87] = Tv(68, 68, 0, Δⵠ[1229], 3);
        this.ⲆⵠⲆ[87].id = 87;
        this.ⲆⵠⲆ[88] = Tv(68, 68, 0, Δⵠ[1232], 3);
        this.ⲆⵠⲆ[88].id = 88;
        this.ⲆⵠⲆ[80] = Tv(68, 68, 0, Δⵠ[1139], 3);
        this.ⲆⵠⲆ[80].id = 80;
        this.ⲆⵠⲆ[81] = Tv(68, 68, 0, Δⵠ[1142], 3);
        this.ⲆⵠⲆ[81].id = 81;
        this.ⲆⵠⲆ[101] = Tv(68, 68, 0, Δⵠ[1167], 3);
        this.ⲆⵠⲆ[101].id = 101;
        this.ⲆⵠⲆ[64] = Tv(68, 68, 0, Δⵠ[571], 3);
        this.ⲆⵠⲆ[64].id = 64;
        this.ⲆⵠⲆ[71] = Tv(68, 68, 0, Δⵠ[1240], 3);
        this.ⲆⵠⲆ[71].id = 71;
        this.ⲆⵠⲆ[102] = Tv(68, 68, 0, Δⵠ[1170], 3);
        this.ⲆⵠⲆ[102].id = 102;
        this.ⲆⵠⲆ[65] = Tv(68, 68, 0, Δⵠ[574], 3);
        this.ⲆⵠⲆ[65].id = 65;
        this.ⲆⵠⲆ[72] = Tv(68, 68, 0, Δⵠ[1243], 3);
        this.ⲆⵠⲆ[72].id = 72;
        this.ⲆⵠⲆ[103] = Tv(68, 68, 0, Δⵠ[1173], 3);
        this.ⲆⵠⲆ[103].id = 103;
        this.ⲆⵠⲆ[66] = Tv(68, 68, 0, Δⵠ[577], 3);
        this.ⲆⵠⲆ[66].id = 66;
        this.ⲆⵠⲆ[73] = Tv(68, 68, 0, Δⵠ[1246], 3);
        this.ⲆⵠⲆ[73].id = 73;
        this.ⲆⵠⲆ[104] = Tv(68, 68, 0, Δⵠ[1176], 3);
        this.ⲆⵠⲆ[104].id = 104;
        this.ⲆⵠⲆ[67] = Tv(68, 68, 0, Δⵠ[580], 3);
        this.ⲆⵠⲆ[67].id = 67;
        this.ⲆⵠⲆ[74] = Tv(68, 68, 0, Δⵠ[1249], 3);
        this.ⲆⵠⲆ[74].id = 74;
        this.ⲆⵠⲆ[105] = Tv(68, 68, 0, Δⵠ[1179], 3);
        this.ⲆⵠⲆ[105].id = 105;
        this.ⲆⵠⲆ[68] = Tv(68, 68, 0, Δⵠ[583], 3);
        this.ⲆⵠⲆ[68].id = 68;
        this.ⲆⵠⲆ[75] = Tv(68, 68, 0, Δⵠ[1252], 3);
        this.ⲆⵠⲆ[75].id = 75;
        this.ⲆⵠⲆ[106] = Tv(68, 68, 0, Δⵠ[1182], 3);
        this.ⲆⵠⲆ[106].id = 106;
        this.ⲆⵠⲆ[69] = Tv(68, 68, 0, Δⵠ[586], 3);
        this.ⲆⵠⲆ[69].id = 69;
        this.ⲆⵠⲆ[76] = Tv(68, 68, 0, Δⵠ[1255], 3);
        this.ⲆⵠⲆ[76].id = 76;
        this.ⲆⵠⲆ[107] = Tv(68, 68, 0, Δⵠ[1185], 3);
        this.ⲆⵠⲆ[107].id = 107;
        this.ⲆⵠⲆ[70] = Tv(68, 68, 0, Δⵠ[589], 3);
        this.ⲆⵠⲆ[70].id = 70;
        this.ⲆⵠⲆ[94] = Tv(68, 68, 0, Δⵠ[1258], 3);
        this.ⲆⵠⲆ[94].id = 94;
        this.ⲆⵠⲆ[95] = Tv(68, 68, 0, Δⵠ[1261], 3);
        this.ⲆⵠⲆ[95].id = 95;
        this.ⲆⵠⲆ[96] = Tv(68, 68, 0, Δⵠ[1264], 3);
        this.ⲆⵠⲆ[96].id = 96;
        this.ⲆⵠⲆ[97] = Tv(68, 68, 0, Δⵠ[1267], 3);
        this.ⲆⵠⲆ[97].id = 97;
        this.ⲆⵠⲆ[98] = Tv(68, 68, 0, Δⵠ[1270], 3);
        this.ⲆⵠⲆ[98].id = 98;
        this.ⲆⵠⲆ[99] = Tv(68, 68, 0, Δⵠ[1273], 3);
        this.ⲆⵠⲆ[99].id = 99;
        this.ⲆⵠⲆ[58] = Tv(68, 68, 0, Δⵠ[828], 3);
        this.ⲆⵠⲆ[58].id = 58;
        this.ⲆⵠⲆ[25] = Tv(68, 68, 0, Δⵠ[431], 3);
        this.ⲆⵠⲆ[25].id = 25;
        this.ⲆⵠⲆ[26] = Tv(68, 68, 0, Δⵠ[434], 3);
        this.ⲆⵠⲆ[26].id = 26;
        this.ⲆⵠⲆ[27] = Tv(68, 68, 0, Δⵠ[437], 3);
        this.ⲆⵠⲆ[27].id = 27;
        this.ⲆⵠⲆ[28] = Tv(68, 68, 0, Δⵠ[440], 3);
        this.ⲆⵠⲆ[28].id = 28;
        this.ⲆⵠⲆ[120] = Tv(68, 68, 0, Δⵠ[443], 3);
        this.ⲆⵠⲆ[120].id = 120;
        this.ⲆⵠⲆ[29] = Tv(68, 68, 0, Δⵠ[385], 3);
        this.ⲆⵠⲆ[29].id = 29;
        this.ⲆⵠⲆ[121] = Tv(68, 68, 0, Δⵠ[446], 3);
        this.ⲆⵠⲆ[121].id = 121;
        this.ⲆⵠⲆ[30] = Tv(68, 68, 0, Δⵠ[457], 3);
        this.ⲆⵠⲆ[30].id = 30;
        this.ⲆⵠⲆ[9] = Tv(68, 68, 0, Δⵠ[862], 3);
        this.ⲆⵠⲆ[9].id = 9;
        this.ⲆⵠⲆ[31] = Tv(68, 68, 0, Δⵠ[459], 3);
        this.ⲆⵠⲆ[31].id = 31;
        this.ⲆⵠⲆ[32] = Tv(68, 68, 0, Δⵠ[1018], 3);
        this.ⲆⵠⲆ[32].id = 32;
        this.ⲆⵠⲆ[33] = Tv(68, 68, 0, Δⵠ[474], 3);
        this.ⲆⵠⲆ[33].id = 33;
        this.ⲆⵠⲆ[35] = Tv(68, 68, 0, Δⵠ[479], 3);
        this.ⲆⵠⲆ[35].id = 35;
        this.ⲆⵠⲆ[36] = Tv(68, 68, 0, Δⵠ[482], 3);
        this.ⲆⵠⲆ[36].id = 36;
        this.ⲆⵠⲆ[37] = Tv(68, 68, 0, Δⵠ[485], 3);
        this.ⲆⵠⲆ[37].id = 37;
        this.ⲆⵠⲆ[38] = Tv(68, 68, 0, Δⵠ[488], 3);
        this.ⲆⵠⲆ[38].id = 38;
        this.ⲆⵠⲆ[39] = Tv(68, 68, 0, Δⵠ[491], 3);
        this.ⲆⵠⲆ[39].id = 39;
        this.ⲆⵠⲆ[122] = Tv(68, 68, 0, Δⵠ[494], 3);
        this.ⲆⵠⲆ[122].id = 122;
        this.ⲆⵠⲆ[123] = Tv(68, 68, 0, Δⵠ[497], 3);
        this.ⲆⵠⲆ[123].id = 123;
        this.ⲆⵠⲆ[124] = Tv(68, 68, 0, Δⵠ[501], 3);
        this.ⲆⵠⲆ[124].id = 124;
        this.ⲆⵠⲆ[40] = Tv(68, 68, 0, Δⵠ[504], 3);
        this.ⲆⵠⲆ[40].id = 40;
        this.ⲆⵠⲆ[146] = Tv(68, 68, 0, Δⵠ[506], 3);
        this.ⲆⵠⲆ[146].id = 146;
        this.ⲆⵠⲆ[240] = Tv(68, 68, 0, Δⵠ[1234], 3);
        this.ⲆⵠⲆ[240].id = 240;
        this.ⲆⵠⲆ[147] = Tv(68, 68, 0, Δⵠ[514], 3);
        this.ⲆⵠⲆ[147].id = 147;
        this.ⲆⵠⲆ[148] = Tv(68, 68, 0, Δⵠ[520], 3);
        this.ⲆⵠⲆ[148].id = 148;
        this.ⲆⵠⲆ[149] = Tv(68, 68, 0, Δⵠ[522], 3);
        this.ⲆⵠⲆ[149].id = 149;
        this.ⲆⵠⲆ[150] = Tv(68, 68, 0, Δⵠ[524], 3);
        this.ⲆⵠⲆ[150].id = 150;
        this.ⲆⵠⲆ[151] = Tv(68, 68, 0, Δⵠ[531], 3);
        this.ⲆⵠⲆ[151].id = 151;
        this.ⲆⵠⲆ[158] = Tv(68, 68, 0, Δⵠ[534], 3);
        this.ⲆⵠⲆ[158].id = 158;
        this.ⲆⵠⲆ[159] = Tv(68, 68, 0, Δⵠ[554], 3);
        this.ⲆⵠⲆ[159].id = 159;
        this.ⲆⵠⲆ[43] = Tv(68, 68, 0, Δⵠ[543], 3);
        this.ⲆⵠⲆ[43].id = 43;
        this.ⲆⵠⲆ[45] = Tv(68, 68, 0, Δⵠ[552], 3);
        this.ⲆⵠⲆ[45].id = 45;
        this.ⲆⵠⲆ[125] = Tv(68, 68, 0, Δⵠ[606], 3);
        this.ⲆⵠⲆ[125].id = 125;
        this.ⲆⵠⲆ[221] = Tv(68, 68, 0, Δⵠ[1237], 3);
        this.ⲆⵠⲆ[221].id = 221;
        this.ⲆⵠⲆ[223] = Tv(68, 68, 0, Δⵠ[1029], 3);
        this.ⲆⵠⲆ[223].id = 223;
        this.ⲆⵠⲆ[224] = Tv(68, 68, 0, Δⵠ[1032], 3);
        this.ⲆⵠⲆ[224].id = 224;
        this.ⲆⵠⲆ[230] = Tv(68, 68, 0, Δⵠ[1118], 3);
        this.ⲆⵠⲆ[230].id = 230;
        this.ⲆⵠⲆ[89] = Tv(68, 68, 0, Δⵠ[1047], 3);
        this.ⲆⵠⲆ[89].id = 89;
        this.ⲆⵠⲆ[225] = Tv(68, 68, 0, Δⵠ[1050], 3);
        this.ⲆⵠⲆ[225].id = 225;
        this.ⲆⵠⲆ[227] = Tv(68, 68, 0, Δⵠ[1081], 3);
        this.ⲆⵠⲆ[227].id = 227;
        this.ⲆⵠⲆ[239] = Tv(68, 68, 0, Δⵠ[1225], 3);
        this.ⲆⵠⲆ[239].id = 239;
        this.ⲆⵠⲆ[228] = Tv(68, 68, 0, Δⵠ[1096], 3);
        this.ⲆⵠⲆ[228].id = 228;
        this.ⲆⵠⲆ[229] = Tv(68, 68, 0, Δⵠ[1111], 3);
        this.ⲆⵠⲆ[229].id = 229;
        this.ⲆⵠⲆ[226] = Tv(68, 68, 0, Δⵠ[1190], 3);
        this.ⲆⵠⲆ[226].id = 226;
        this.ⲆⵠⲆ[126] = Tv(68, 68, 0, Δⵠ[610], 3);
        this.ⲆⵠⲆ[126].id = 126;
        this.ⲆⵠⲆ[127] = Tv(68, 68, 0, Δⵠ[615], 3);
        this.ⲆⵠⲆ[127].id = 127;
        this.ⲆⵠⲆ[128] = Tv(68, 68, 0, Δⵠ[614], 3);
        this.ⲆⵠⲆ[128].id = 128;
        this.ⲆⵠⲆ[46] = Tv(68, 68, 0, Δⵠ[617], 3);
        this.ⲆⵠⲆ[46].id = 46;
        this.ⲆⵠⲆ[50] = Tv(68, 68, 0, Δⵠ[701], 3);
        this.ⲆⵠⲆ[50].id = 50;
        this.ⲆⵠⲆ[51] = Tv(68, 68, 0, Δⵠ[703], 3);
        this.ⲆⵠⲆ[51].id = 51;
        this.ⲆⵠⲆ[52] = Tv(68, 68, 0, Δⵠ[707], 3);
        this.ⲆⵠⲆ[52].id = 52;
        this.ⲆⵠⲆ[55] = Tv(68, 68, 0, Δⵠ[710], 3);
        this.ⲆⵠⲆ[55].id = 55;
        this.ⲆⵠⲆ[129] = Tv(68, 68, 0, Δⵠ[625], 3);
        this.ⲆⵠⲆ[129].id = 129;
        this.ⲆⵠⲆ[130] = Tv(68, 68, 0, Δⵠ[628], 3);
        this.ⲆⵠⲆ[130].id = 130;
        this.ⲆⵠⲆ[131] = Tv(68, 68, 0, Δⵠ[630], 3);
        this.ⲆⵠⲆ[131].id = 131;
        this.ⲆⵠⲆ[132] = Tv(68, 68, 0, Δⵠ[633], 3);
        this.ⲆⵠⲆ[132].id = 132;
        this.ⲆⵠⲆ[133] = Tv(68, 68, 0, Δⵠ[636], 3);
        this.ⲆⵠⲆ[133].id = 133;
        this.ⲆⵠⲆ[134] = Tv(68, 68, 0, Δⵠ[640], 3);
        this.ⲆⵠⲆ[134].id = 134;
        this.ⲆⵠⲆ[135] = Tv(68, 68, 0, Δⵠ[645], 3);
        this.ⲆⵠⲆ[135].id = 135;
        this.ⲆⵠⲆ[47] = Tv(68, 68, 0, Δⵠ[648], 3);
        this.ⲆⵠⲆ[47].id = 47;
        this.ⲆⵠⲆ[48] = Tv(68, 68, 0, Δⵠ[651], 3);
        this.ⲆⵠⲆ[48].id = 48;
        this.ⲆⵠⲆ[49] = Tv(68, 68, 0, Δⵠ[653], 3);
        this.ⲆⵠⲆ[49].id = 49;
        this.ⲆⵠⲆ[136] = Tv(68, 68, 0, Δⵠ[661], 3);
        this.ⲆⵠⲆ[136].id = 136;
        this.ⲆⵠⲆ[143] = Tv(68, 68, 0, Δⵠ[689], 3);
        this.ⲆⵠⲆ[143].id = 143;
        this.ⲆⵠⲆ[137] = Tv(68, 68, 0, Δⵠ[663], 3);
        this.ⲆⵠⲆ[137].id = 137;
        this.ⲆⵠⲆ[138] = Tv(68, 68, 0, Δⵠ[665], 3);
        this.ⲆⵠⲆ[138].id = 138;
        this.ⲆⵠⲆ[139] = Tv(68, 68, 0, Δⵠ[675], 3);
        this.ⲆⵠⲆ[139].id = 139;
        this.ⲆⵠⲆ[140] = Tv(68, 68, 0, Δⵠ[682], 3);
        this.ⲆⵠⲆ[140].id = 140;
        this.ⲆⵠⲆ[141] = Tv(68, 68, 0, Δⵠ[683], 3);
        this.ⲆⵠⲆ[141].id = 141;
        this.ⲆⵠⲆ[142] = Tv(68, 68, 0, Δⵠ[686], 3);
        this.ⲆⵠⲆ[142].id = 142;
        this.ⲆⵠⲆ[144] = Tv(68, 68, 0, Δⵠ[719], 3);
        this.ⲆⵠⲆ[144].id = 144;
        this.ⲆⵠⲆ[145] = Tv(68, 68, 0, Δⵠ[731], 3);
        this.ⲆⵠⲆ[145].id = 145;
        this.ⲆⵠⲆ[59] = Tv(68, 68, 0, Δⵠ[733], 3);
        this.ⲆⵠⲆ[59].id = 59;
        this.ⲆⵠⲆ[62] = Tv(68, 68, 0, Δⵠ[565], 3);
        this.ⲆⵠⲆ[62].id = 62;
        this.ⲆⵠⲆ[185] = Tv(68, 68, 0, Δⵠ[590], 3);
        this.ⲆⵠⲆ[185].id = 185;
        this.ⲆⵠⲆ[184] = Tv(68, 68, 0, Δⵠ[752], 3);
        this.ⲆⵠⲆ[184].id = 184;
        this.ⲆⵠⲆ[187] = Tv(68, 68, 0, Δⵠ[591], 3);
        this.ⲆⵠⲆ[187].id = 187;
        this.ⲆⵠⲆ[186] = Tv(68, 68, 0, Δⵠ[754], 3);
        this.ⲆⵠⲆ[186].id = 186;
        this.ⲆⵠⲆ[77] = Tv(68, 68, 0, Δⵠ[757], 3);
        this.ⲆⵠⲆ[77].id = 77;
        this.ⲆⵠⲆ[175] = Tv(68, 68, 0, Δⵠ[759], 3);
        this.ⲆⵠⲆ[175].id = 175;
        this.ⲆⵠⲆ[176] = Tv(68, 68, 0, Δⵠ[763], 3);
        this.ⲆⵠⲆ[176].id = 176;
        this.ⲆⵠⲆ[78] = Tv(68, 68, 0, Δⵠ[761], 3);
        this.ⲆⵠⲆ[78].id = 78;
        this.ⲆⵠⲆ[177] = Tv(68, 68, 0, Δⵠ[766], 3);
        this.ⲆⵠⲆ[177].id = 177;
        this.ⲆⵠⲆ[79] = Tv(68, 68, 0, Δⵠ[765], 3);
        this.ⲆⵠⲆ[79].id = 79;
        this.ⲆⵠⲆ[83] = Tv(68, 68, 0, Δⵠ[769], 3);
        this.ⲆⵠⲆ[83].id = 83;
        this.ⲆⵠⲆ[84] = Tv(68, 68, 0, Δⵠ[773], 3);
        this.ⲆⵠⲆ[84].id = 84;
        this.ⲆⵠⲆ[178] = Tv(68, 68, 0, Δⵠ[774], 3);
        this.ⲆⵠⲆ[178].id = 178;
        this.ⲆⵠⲆ[179] = Tv(68, 68, 0, Δⵠ[775], 3);
        this.ⲆⵠⲆ[179].id = 179;
        this.ⲆⵠⲆ[86] = Tv(68, 68, 0, Δⵠ[778], 3);
        this.ⲆⵠⲆ[86].id = 86;
        this.ⲆⵠⲆ[85] = Tv(68, 68, 0, Δⵠ[781], 3);
        this.ⲆⵠⲆ[85].id = 85;
        this.ⲆⵠⲆ[180] = Tv(68, 68, 0, Δⵠ[786], 3);
        this.ⲆⵠⲆ[180].id = 180;
        this.ⲆⵠⲆ[181] = Tv(68, 68, 0, Δⵠ[787], 3);
        this.ⲆⵠⲆ[181].id = 181;
        this.ⲆⵠⲆ[182] = Tv(68, 68, 0, Δⵠ[790], 3);
        this.ⲆⵠⲆ[182].id = 182;
        this.ⲆⵠⲆ[183] = Tv(68, 68, 0, Δⵠ[801], 3);
        this.ⲆⵠⲆ[183].id = 183;
        this.ⲆⵠⲆ[188] = Tv(68, 68, 0, Δⵠ[810], 3);
        this.ⲆⵠⲆ[188].id = 188;
        this.ⲆⵠⲆ[189] = Tv(68, 68, 0, Δⵠ[815], 3);
        this.ⲆⵠⲆ[189].id = 189;
        this.ⲆⵠⲆ[190] = Tv(68, 68, 0, Δⵠ[844], 3);
        this.ⲆⵠⲆ[190].id = 190;
        this.ⲆⵠⲆ[191] = Tv(68, 68, 0, Δⵠ[836], 3);
        this.ⲆⵠⲆ[191].id = 191;
        this.ⲆⵠⲆ[192] = Tv(68, 68, 0, Δⵠ[841], 3);
        this.ⲆⵠⲆ[192].id = 192;
        this.ⲆⵠⲆ[193] = Tv(68, 68, 0, Δⵠ[847], 3);
        this.ⲆⵠⲆ[193].id = 193;
        this.ⲆⵠⲆ[194] = Tv(68, 68, 0, Δⵠ[851], 3);
        this.ⲆⵠⲆ[194].id = 194;
        this.ⲆⵠⲆ[206] = Tv(68, 68, 0, Δⵠ[961], 3);
        this.ⲆⵠⲆ[206].id = 206;
        this.ⲆⵠⲆ[207] = Tv(68, 68, 0, Δⵠ[974], 3);
        this.ⲆⵠⲆ[207].id = 207;
        this.ⲆⵠⲆ[204] = Tv(68, 68, 0, Δⵠ[951], 3);
        this.ⲆⵠⲆ[204].id = 204;
        this.ⲆⵠⲆ[205] = Tv(68, 68, 0, Δⵠ[956], 3);
        this.ⲆⵠⲆ[205].id = 205;
        this.ⲆⵠⲆ[208] = Tv(68, 68, 0, Δⵠ[968], 3);
        this.ⲆⵠⲆ[208].id = 208;
        this.ⲆⵠⲆ[209] = Tv(68, 68, 0, Δⵠ[973], 3);
        this.ⲆⵠⲆ[209].id = 209;
        this.ⲆⵠⲆ[210] = Tv(68, 68, 0, Δⵠ[983], 3);
        this.ⲆⵠⲆ[210].id = 210;
        this.ⲆⵠⲆ[211] = Tv(68, 68, 0, Δⵠ[988], 3);
        this.ⲆⵠⲆ[211].id = 211;
        this.ⲆⵠⲆ[41] = Tv(68, 68, 0, Δⵠ[881], 3);
        this.ⲆⵠⲆ[41].id = 41;
        this.ⲆⵠⲆ[42] = Tv(68, 68, 0, Δⵠ[883], 3);
        this.ⲆⵠⲆ[42].id = 42;
        this.ⲆⵠⲆ[12] = Tv(68, 68, 0, Δⵠ[403], 3);
        this.ⲆⵠⲆ[12].id = 12;
        this.ⲆⵠⲆ[16] = Tv(68, 68, 0, Δⵠ[875], 3);
        this.ⲆⵠⲆ[16].id = 16;
        this.ⲆⵠⲆ[196] = Tv(68, 68, 0, Δⵠ[898], 3);
        this.ⲆⵠⲆ[196].id = 196;
        this.ⲆⵠⲆ[18] = Tv(68, 68, 0, Δⵠ[899], 3);
        this.ⲆⵠⲆ[18].id = 18;
        this.ⲆⵠⲆ[197] = Tv(68, 68, 0, Δⵠ[906], 3);
        this.ⲆⵠⲆ[197].id = 197;
        this.ⲆⵠⲆ[198] = Tv(68, 68, 0, Δⵠ[908], 3);
        this.ⲆⵠⲆ[198].id = 198;
        this.ⲆⵠⲆ[61] = Tv(68, 68, 0, Δⵠ[911], 3);
        this.ⲆⵠⲆ[61].id = 61;
        this.ⲆⵠⲆ[201] = Tv(68, 68, 0, Δⵠ[871], 3);
        this.ⲆⵠⲆ[201].id = 201;
        this.ⲆⵠⲆ[199] = Tv(68, 68, 0, Δⵠ[863], 3);
        this.ⲆⵠⲆ[199].id = 199;
        this.ⲆⵠⲆ[200] = Tv(68, 68, 0, Δⵠ[868], 3);
        this.ⲆⵠⲆ[200].id = 200;
        this.ΔᐃᐃᐃΔ = [];
        for (k = 0; k < 250; k++) {
            this.ΔᐃᐃᐃΔ[k] = Tv(0, 0, 0, Δⵠ[366]);
        }
        this.ᐃᐃⵠ = [];
        this.ᐃᐃⵠ[0] = Tv(60, 60, 0, Δⵠ[261], 3);
        this.ᐃᐃⵠ[0].id = 0;
        this.ᐃᐃⵠ[1] = Tv(60, 60, 0, Δⵠ[312], 3);
        this.ᐃᐃⵠ[1].id = 1;
        this.ᐃᐃⵠ[108] = Tv(60, 60, 0, Δⵠ[315], 3);
        this.ᐃᐃⵠ[108].id = 108;
        this.ᐃᐃⵠ[108].info.ᐃΔ[2] = this.ᐃᐃⵠ[108].info.ᐃΔ[0];
        this.ᐃᐃⵠ[109] = Tv(60, 60, 0, Δⵠ[316], 3);
        this.ᐃᐃⵠ[109].id = 109;
        this.ᐃᐃⵠ[109].info.ᐃΔ[2] = this.ᐃᐃⵠ[109].info.ᐃΔ[0];
        this.ᐃᐃⵠ[110] = Tv(60, 60, 0, Δⵠ[277], 3);
        this.ᐃᐃⵠ[110].id = 110;
        this.ᐃᐃⵠ[233] = Tv(60, 60, 0, Δⵠ[1154], 3);
        this.ᐃᐃⵠ[233].id = 233;
        this.ᐃᐃⵠ[111] = Tv(60, 60, 0, Δⵠ[297], 3);
        this.ᐃᐃⵠ[111].id = 111;
        this.ᐃᐃⵠ[111].info.ᐃΔ[2] = this.ᐃᐃⵠ[111].info.ᐃΔ[0];
        this.ᐃᐃⵠ[112] = Tv(60, 60, 0, Δⵠ[298], 3);
        this.ᐃᐃⵠ[112].id = 112;
        this.ᐃᐃⵠ[112].info.ᐃΔ[2] = this.ᐃᐃⵠ[112].info.ᐃΔ[0];
        this.ᐃᐃⵠ[3] = Tv(60, 60, 0, Δⵠ[258], 3);
        this.ᐃᐃⵠ[3].id = 3;
        this.ᐃᐃⵠ[4] = Tv(60, 60, 0, Δⵠ[296], 3);
        this.ᐃᐃⵠ[4].id = 4;
        this.ᐃᐃⵠ[5] = Tv(60, 60, 0, Δⵠ[292], 3);
        this.ᐃᐃⵠ[5].id = 5;
        this.ᐃᐃⵠ[57] = Tv(60, 60, 0, Δⵠ[829], 3);
        this.ᐃᐃⵠ[57].id = 57;
        this.ᐃᐃⵠ[6] = Tv(60, 60, 0, Δⵠ[293], 3);
        this.ᐃᐃⵠ[6].id = 6;
        this.ᐃᐃⵠ[113] = Tv(60, 60, 0, Δⵠ[309], 3);
        this.ᐃᐃⵠ[113].id = 113;
        this.ᐃᐃⵠ[114] = Tv(60, 60, 0, Δⵠ[310], 3);
        this.ᐃᐃⵠ[114].id = 114;
        this.ᐃᐃⵠ[115] = Tv(60, 60, 0, Δⵠ[311], 3);
        this.ᐃᐃⵠ[115].id = 115;
        this.ᐃᐃⵠ[162] = Tv(60, 60, 0, Δⵠ[317], 3);
        this.ᐃᐃⵠ[162].id = 162;
        this.ᐃᐃⵠ[160] = Tv(60, 60, 0, Δⵠ[319], 3);
        this.ᐃᐃⵠ[160].id = 160;
        this.ᐃᐃⵠ[8] = Tv(60, 60, 0, Δⵠ[313], 3);
        this.ᐃᐃⵠ[8].id = 8;
        this.ᐃᐃⵠ[117] = Tv(60, 60, 0, Δⵠ[323], 3);
        this.ᐃᐃⵠ[117].id = 117;
        this.ᐃᐃⵠ[116] = Tv(60, 60, 0, Δⵠ[300], 3);
        this.ᐃᐃⵠ[116].id = 116;
        this.ᐃᐃⵠ[118] = Tv(60, 60, 0, Δⵠ[328], 3);
        this.ᐃᐃⵠ[118].id = 118;
        this.ᐃᐃⵠ[195] = Tv(60, 60, 0, Δⵠ[303], 3);
        this.ᐃᐃⵠ[195].id = 195;
        this.ᐃᐃⵠ[161] = Tv(60, 60, 0, Δⵠ[305], 3);
        this.ᐃᐃⵠ[161].id = 161;
        this.ᐃᐃⵠ[161].info.ᐃΔ[2] = this.ᐃᐃⵠ[161].info.ᐃΔ[0];
        this.ᐃᐃⵠ[163] = Tv(60, 60, 0, Δⵠ[329], 3);
        this.ᐃᐃⵠ[163].id = 163;
        this.ᐃᐃⵠ[164] = Tv(60, 60, 0, Δⵠ[330], 3);
        this.ᐃᐃⵠ[164].id = 164;
        this.ᐃᐃⵠ[165] = Tv(60, 60, 0, Δⵠ[331], 3);
        this.ᐃᐃⵠ[165].id = 165;
        this.ᐃᐃⵠ[166] = Tv(60, 60, 0, Δⵠ[335], 3);
        this.ᐃᐃⵠ[166].id = 166;
        this.ᐃᐃⵠ[167] = Tv(60, 60, 0, Δⵠ[337], 3);
        this.ᐃᐃⵠ[167].id = 167;
        this.ᐃᐃⵠ[168] = Tv(60, 60, 0, Δⵠ[361], 3);
        this.ᐃᐃⵠ[168].id = 168;
        this.ᐃᐃⵠ[169] = Tv(60, 60, 0, Δⵠ[362], 3);
        this.ᐃᐃⵠ[169].id = 169;
        this.ᐃᐃⵠ[170] = Tv(60, 60, 0, Δⵠ[364], 3);
        this.ᐃᐃⵠ[170].id = 170;
        this.ᐃᐃⵠ[29] = Tv(60, 60, 0, Δⵠ[392], 3);
        this.ᐃᐃⵠ[29].id = 29;
        this.ᐃᐃⵠ[10] = Tv(60, 60, 0, Δⵠ[369], 3);
        this.ᐃᐃⵠ[10].id = 10;
        this.ᐃᐃⵠ[171] = Tv(60, 60, 0, Δⵠ[372], 3);
        this.ᐃᐃⵠ[171].id = 171;
        this.ᐃᐃⵠ[172] = Tv(60, 60, 0, Δⵠ[375], 3);
        this.ᐃᐃⵠ[172].id = 172;
        this.ᐃᐃⵠ[173] = Tv(60, 60, 0, Δⵠ[378], 3);
        this.ᐃᐃⵠ[173].id = 173;
        this.ᐃᐃⵠ[2] = Tv(60, 60, 0, Δⵠ[368], 3);
        this.ᐃᐃⵠ[2].id = 2;
        this.ᐃᐃⵠ[2].info.ᐃΔ[2] = this.ᐃᐃⵠ[2].info.ᐃΔ[0];
        this.ᐃᐃⵠ[237] = Tv(60, 60, 0, Δⵠ[1162], 3);
        this.ᐃᐃⵠ[237].id = 237;
        this.ᐃᐃⵠ[237].info.ᐃΔ[2] = this.ᐃᐃⵠ[237].info.ᐃΔ[0];
        this.ᐃᐃⵠ[174] = Tv(60, 60, 0, Δⵠ[393], 3);
        this.ᐃᐃⵠ[174].id = 174;
        this.ᐃᐃⵠ[174].info.ᐃΔ[2] = this.ᐃᐃⵠ[174].info.ᐃΔ[0];
        this.ᐃᐃⵠ[222] = Tv(60, 60, 0, Δⵠ[1035], 3);
        this.ᐃᐃⵠ[222].id = 222;
        this.ᐃᐃⵠ[231] = Tv(60, 60, 0, Δⵠ[1037], 3);
        this.ᐃᐃⵠ[231].id = 231;
        this.ᐃᐃⵠ[232] = Tv(60, 60, 0, Δⵠ[1039], 3);
        this.ᐃᐃⵠ[232].id = 232;
        this.ᐃᐃⵠ[234] = Tv(60, 60, 0, Δⵠ[1156], 3);
        this.ᐃᐃⵠ[234].id = 234;
        this.ᐃᐃⵠ[10] = Tv(60, 60, 0, Δⵠ[369], 3);
        this.ᐃᐃⵠ[10].id = 10;
        this.ᐃᐃⵠ[11] = Tv(60, 60, 0, Δⵠ[381], 3);
        this.ᐃᐃⵠ[11].id = 11;
        this.ᐃᐃⵠ[12] = Tv(60, 60, 0, Δⵠ[401], 3);
        this.ᐃᐃⵠ[12].id = 12;
        this.ᐃᐃⵠ[13] = Tv(60, 60, 0, Δⵠ[395], 3);
        this.ᐃᐃⵠ[13].id = 13;
        this.ᐃᐃⵠ[14] = Tv(60, 60, 0, Δⵠ[398], 3);
        this.ᐃᐃⵠ[14].id = 14;
        this.ᐃᐃⵠ[15] = Tv(60, 60, 0, Δⵠ[404], 3);
        this.ᐃᐃⵠ[15].id = 15;
        this.ᐃᐃⵠ[16] = Tv(60, 60, 0, Δⵠ[874], 3);
        this.ᐃᐃⵠ[16].id = 16;
        this.ᐃᐃⵠ[119] = Tv(60, 60, 0, Δⵠ[408], 3);
        this.ᐃᐃⵠ[119].id = 119;
        this.ᐃᐃⵠ[23] = Tv(60, 60, 0, Δⵠ[420], 3);
        this.ᐃᐃⵠ[23].id = 23;
        this.ᐃᐃⵠ[24] = Tv(60, 60, 0, Δⵠ[423], 3);
        this.ᐃᐃⵠ[24].id = 24;
        this.ᐃᐃⵠ[87] = Tv(60, 60, 0, Δⵠ[1227], 3);
        this.ᐃᐃⵠ[87].id = 87;
        this.ᐃᐃⵠ[88] = Tv(60, 60, 0, Δⵠ[1230], 3);
        this.ᐃᐃⵠ[88].id = 88;
        this.ᐃᐃⵠ[80] = Tv(60, 60, 0, Δⵠ[1137], 3);
        this.ᐃᐃⵠ[80].id = 80;
        this.ᐃᐃⵠ[81] = Tv(60, 60, 0, Δⵠ[1140], 3);
        this.ᐃᐃⵠ[81].id = 81;
        this.ᐃᐃⵠ[64] = Tv(60, 60, 0, Δⵠ[569], 3);
        this.ᐃᐃⵠ[64].id = 64;
        this.ᐃᐃⵠ[101] = Tv(60, 60, 0, Δⵠ[1166], 3);
        this.ᐃᐃⵠ[101].id = 101;
        this.ᐃᐃⵠ[71] = Tv(60, 60, 0, Δⵠ[1239], 3);
        this.ᐃᐃⵠ[71].id = 71;
        this.ᐃᐃⵠ[65] = Tv(60, 60, 0, Δⵠ[572], 3);
        this.ᐃᐃⵠ[65].id = 65;
        this.ᐃᐃⵠ[102] = Tv(60, 60, 0, Δⵠ[1169], 3);
        this.ᐃᐃⵠ[102].id = 102;
        this.ᐃᐃⵠ[72] = Tv(60, 60, 0, Δⵠ[1242], 3);
        this.ᐃᐃⵠ[72].id = 72;
        this.ᐃᐃⵠ[66] = Tv(60, 60, 0, Δⵠ[575], 3);
        this.ᐃᐃⵠ[66].id = 66;
        this.ᐃᐃⵠ[103] = Tv(60, 60, 0, Δⵠ[1172], 3);
        this.ᐃᐃⵠ[103].id = 103;
        this.ᐃᐃⵠ[73] = Tv(60, 60, 0, Δⵠ[1245], 3);
        this.ᐃᐃⵠ[73].id = 73;
        this.ᐃᐃⵠ[67] = Tv(60, 60, 0, Δⵠ[578], 3);
        this.ᐃᐃⵠ[67].id = 67;
        this.ᐃᐃⵠ[104] = Tv(60, 60, 0, Δⵠ[1175], 3);
        this.ᐃᐃⵠ[104].id = 104;
        this.ᐃᐃⵠ[74] = Tv(60, 60, 0, Δⵠ[1248], 3);
        this.ᐃᐃⵠ[74].id = 74;
        this.ᐃᐃⵠ[68] = Tv(60, 60, 0, Δⵠ[581], 3);
        this.ᐃᐃⵠ[68].id = 68;
        this.ᐃᐃⵠ[105] = Tv(60, 60, 0, Δⵠ[1178], 3);
        this.ᐃᐃⵠ[105].id = 105;
        this.ᐃᐃⵠ[75] = Tv(60, 60, 0, Δⵠ[1251], 3);
        this.ᐃᐃⵠ[75].id = 75;
        this.ᐃᐃⵠ[69] = Tv(60, 60, 0, Δⵠ[584], 3);
        this.ᐃᐃⵠ[69].id = 69;
        this.ᐃᐃⵠ[106] = Tv(60, 60, 0, Δⵠ[1181], 3);
        this.ᐃᐃⵠ[106].id = 106;
        this.ᐃᐃⵠ[76] = Tv(60, 60, 0, Δⵠ[1254], 3);
        this.ᐃᐃⵠ[76].id = 76;
        this.ᐃᐃⵠ[70] = Tv(60, 60, 0, Δⵠ[587], 3);
        this.ᐃᐃⵠ[70].id = 70;
        this.ᐃᐃⵠ[107] = Tv(60, 60, 0, Δⵠ[1184], 3);
        this.ᐃᐃⵠ[107].id = 107;
        this.ᐃᐃⵠ[94] = Tv(60, 60, 0, Δⵠ[1257], 3);
        this.ᐃᐃⵠ[94].id = 94;
        this.ᐃᐃⵠ[95] = Tv(60, 60, 0, Δⵠ[1260], 3);
        this.ᐃᐃⵠ[95].id = 95;
        this.ᐃᐃⵠ[96] = Tv(60, 60, 0, Δⵠ[1263], 3);
        this.ᐃᐃⵠ[96].id = 96;
        this.ᐃᐃⵠ[97] = Tv(60, 60, 0, Δⵠ[1266], 3);
        this.ᐃᐃⵠ[97].id = 97;
        this.ᐃᐃⵠ[98] = Tv(60, 60, 0, Δⵠ[1269], 3);
        this.ᐃᐃⵠ[98].id = 98;
        this.ᐃᐃⵠ[99] = Tv(60, 60, 0, Δⵠ[1272], 3);
        this.ᐃᐃⵠ[99].id = 99;
        this.ᐃᐃⵠ[58] = Tv(60, 60, 0, Δⵠ[826], 3);
        this.ᐃᐃⵠ[58].id = 58;
        this.ᐃᐃⵠ[25] = Tv(60, 60, 0, Δⵠ[429], 3);
        this.ᐃᐃⵠ[25].id = 25;
        this.ᐃᐃⵠ[26] = Tv(60, 60, 0, Δⵠ[432], 3);
        this.ᐃᐃⵠ[26].id = 26;
        this.ᐃᐃⵠ[27] = Tv(60, 60, 0, Δⵠ[435], 3);
        this.ᐃᐃⵠ[27].id = 27;
        this.ᐃᐃⵠ[28] = Tv(60, 60, 0, Δⵠ[438], 3);
        this.ᐃᐃⵠ[28].id = 28;
        this.ᐃᐃⵠ[120] = Tv(60, 60, 0, Δⵠ[441], 3);
        this.ᐃᐃⵠ[120].id = 120;
        this.ᐃᐃⵠ[120].info.ᐃΔ[2] = this.ᐃᐃⵠ[120].info.ᐃΔ[0];
        this.ᐃᐃⵠ[29] = Tv(60, 60, 0, Δⵠ[392], 3);
        this.ᐃᐃⵠ[29].id = 29;
        this.ᐃᐃⵠ[121] = Tv(60, 60, 0, Δⵠ[418], 3);
        this.ᐃᐃⵠ[121].id = 121;
        this.ᐃᐃⵠ[121].info.ᐃΔ[2] = this.ᐃᐃⵠ[121].info.ᐃΔ[0];
        this.ᐃᐃⵠ[30] = Tv(60, 60, 0, Δⵠ[455], 3);
        this.ᐃᐃⵠ[30].id = 30;
        this.ᐃᐃⵠ[9] = Tv(60, 60, 0, Δⵠ[860], 3);
        this.ᐃᐃⵠ[9].id = 9;
        this.ᐃᐃⵠ[31] = Tv(60, 60, 0, Δⵠ[458], 3);
        this.ᐃᐃⵠ[31].id = 31;
        this.ᐃᐃⵠ[32] = Tv(60, 60, 0, Δⵠ[1017], 3);
        this.ᐃᐃⵠ[32].id = 32;
        this.ᐃᐃⵠ[33] = Tv(60, 60, 0, Δⵠ[472], 3);
        this.ᐃᐃⵠ[33].id = 33;
        this.ᐃᐃⵠ[35] = Tv(60, 60, 0, Δⵠ[477], 3);
        this.ᐃᐃⵠ[35].id = 35;
        this.ᐃᐃⵠ[36] = Tv(60, 60, 0, Δⵠ[480], 3);
        this.ᐃᐃⵠ[36].id = 36;
        this.ᐃᐃⵠ[37] = Tv(60, 60, 0, Δⵠ[483], 3);
        this.ᐃᐃⵠ[37].id = 37;
        this.ᐃᐃⵠ[38] = Tv(60, 60, 0, Δⵠ[486], 3);
        this.ᐃᐃⵠ[38].id = 38;
        this.ᐃᐃⵠ[39] = Tv(60, 60, 0, Δⵠ[489], 3);
        this.ᐃᐃⵠ[39].id = 39;
        this.ᐃᐃⵠ[122] = Tv(60, 60, 0, Δⵠ[492], 3);
        this.ᐃᐃⵠ[122].id = 122;
        this.ᐃᐃⵠ[123] = Tv(60, 60, 0, Δⵠ[495], 3);
        this.ᐃᐃⵠ[123].id = 123;
        this.ᐃᐃⵠ[124] = Tv(60, 60, 0, Δⵠ[499], 3);
        this.ᐃᐃⵠ[124].id = 124;
        this.ᐃᐃⵠ[40] = Tv(60, 60, 0, Δⵠ[502], 3);
        this.ᐃᐃⵠ[40].id = 40;
        this.ᐃᐃⵠ[146] = Tv(60, 60, 0, Δⵠ[505], 3);
        this.ᐃᐃⵠ[146].id = 146;
        this.ᐃᐃⵠ[146].info.ᐃΔ[2] = this.ᐃᐃⵠ[146].info.ᐃΔ[0];
        this.ᐃᐃⵠ[240] = Tv(60, 60, 0, Δⵠ[1233], 3);
        this.ᐃᐃⵠ[240].id = 240;
        this.ᐃᐃⵠ[240].info.ᐃΔ[2] = this.ᐃᐃⵠ[240].info.ᐃΔ[0];
        this.ᐃᐃⵠ[147] = Tv(60, 60, 0, Δⵠ[513], 3);
        this.ᐃᐃⵠ[147].id = 147;
        this.ᐃᐃⵠ[147].info.ᐃΔ[2] = this.ᐃᐃⵠ[147].info.ᐃΔ[0];
        this.ᐃᐃⵠ[148] = Tv(60, 60, 0, Δⵠ[518], 3);
        this.ᐃᐃⵠ[148].id = 148;
        this.ᐃᐃⵠ[148].info.ᐃΔ[2] = this.ᐃᐃⵠ[148].info.ᐃΔ[0];
        this.ᐃᐃⵠ[149] = Tv(60, 60, 0, Δⵠ[521], 3);
        this.ᐃᐃⵠ[149].id = 149;
        this.ᐃᐃⵠ[150] = Tv(60, 60, 0, Δⵠ[523], 3);
        this.ᐃᐃⵠ[150].id = 150;
        this.ᐃᐃⵠ[151] = Tv(60, 60, 0, Δⵠ[529], 3);
        this.ᐃᐃⵠ[151].id = 151;
        this.ᐃᐃⵠ[158] = Tv(60, 60, 0, Δⵠ[532], 3);
        this.ᐃᐃⵠ[158].id = 158;
        this.ᐃᐃⵠ[159] = Tv(60, 60, 0, Δⵠ[553], 3);
        this.ᐃᐃⵠ[159].id = 159;
        this.ᐃᐃⵠ[43] = Tv(60, 60, 0, Δⵠ[541], 3);
        this.ᐃᐃⵠ[43].id = 43;
        this.ᐃᐃⵠ[45] = Tv(60, 60, 0, Δⵠ[550], 3);
        this.ᐃᐃⵠ[45].id = 45;
        this.ᐃᐃⵠ[125] = Tv(60, 60, 0, Δⵠ[605], 3);
        this.ᐃᐃⵠ[125].id = 125;
        this.ᐃᐃⵠ[221] = Tv(60, 60, 0, Δⵠ[1236], 3);
        this.ᐃᐃⵠ[221].id = 221;
        this.ᐃᐃⵠ[223] = Tv(60, 60, 0, Δⵠ[1028], 3);
        this.ᐃᐃⵠ[223].id = 223;
        this.ᐃᐃⵠ[224] = Tv(60, 60, 0, Δⵠ[1031], 3);
        this.ᐃᐃⵠ[224].id = 224;
        this.ᐃᐃⵠ[230] = Tv(60, 60, 0, Δⵠ[1117], 3);
        this.ᐃᐃⵠ[230].id = 230;
        this.ᐃᐃⵠ[89] = Tv(60, 60, 0, Δⵠ[1046], 3);
        this.ᐃᐃⵠ[89].id = 89;
        this.ᐃᐃⵠ[225] = Tv(60, 60, 0, Δⵠ[1049], 3);
        this.ᐃᐃⵠ[225].id = 225;
        this.ᐃᐃⵠ[226] = Tv(60, 60, 0, Δⵠ[1189], 3);
        this.ᐃᐃⵠ[226].id = 226;
        this.ᐃᐃⵠ[227] = Tv(60, 60, 0, Δⵠ[1080], 3);
        this.ᐃᐃⵠ[227].id = 227;
        this.ᐃᐃⵠ[239] = Tv(60, 60, 0, Δⵠ[1224], 3);
        this.ᐃᐃⵠ[239].id = 239;
        this.ᐃᐃⵠ[228] = Tv(60, 60, 0, Δⵠ[1095], 3);
        this.ᐃᐃⵠ[228].id = 228;
        this.ᐃᐃⵠ[229] = Tv(60, 60, 0, Δⵠ[1110], 3);
        this.ᐃᐃⵠ[229].id = 229;
        this.ᐃᐃⵠ[126] = Tv(60, 60, 0, Δⵠ[609], 3);
        this.ᐃᐃⵠ[126].id = 126;
        this.ᐃᐃⵠ[126].info.ᐃΔ[2] = this.ᐃᐃⵠ[126].info.ᐃΔ[0];
        this.ᐃᐃⵠ[127] = Tv(60, 60, 0, Δⵠ[613], 3);
        this.ᐃᐃⵠ[127].id = 127;
        this.ᐃᐃⵠ[128] = Tv(60, 60, 0, Δⵠ[612], 3);
        this.ᐃᐃⵠ[128].id = 128;
        this.ᐃᐃⵠ[46] = Tv(60, 60, 0, Δⵠ[616], 3);
        this.ᐃᐃⵠ[46].id = 46;
        this.ᐃᐃⵠ[50] = Tv(60, 60, 0, Δⵠ[699], 3);
        this.ᐃᐃⵠ[50].id = 50;
        this.ᐃᐃⵠ[51] = Tv(60, 60, 0, Δⵠ[702], 3);
        this.ᐃᐃⵠ[51].id = 51;
        this.ᐃᐃⵠ[52] = Tv(60, 60, 0, Δⵠ[705], 3);
        this.ᐃᐃⵠ[52].id = 52;
        this.ᐃᐃⵠ[55] = Tv(60, 60, 0, Δⵠ[709], 3);
        this.ᐃᐃⵠ[55].id = 55;
        this.ᐃᐃⵠ[129] = Tv(60, 60, 0, Δⵠ[624], 3);
        this.ᐃᐃⵠ[129].id = 129;
        this.ᐃᐃⵠ[129].info.ᐃΔ[2] = this.ᐃᐃⵠ[129].info.ᐃΔ[0];
        this.ᐃᐃⵠ[130] = Tv(60, 60, 0, Δⵠ[626], 3);
        this.ᐃᐃⵠ[130].id = 130;
        this.ᐃᐃⵠ[131] = Tv(60, 60, 0, Δⵠ[629], 3);
        this.ᐃᐃⵠ[131].id = 131;
        this.ᐃᐃⵠ[131].info.ᐃΔ[2] = this.ᐃᐃⵠ[131].info.ᐃΔ[0];
        this.ᐃᐃⵠ[132] = Tv(60, 60, 0, Δⵠ[631], 3);
        this.ᐃᐃⵠ[132].id = 132;
        this.ᐃᐃⵠ[133] = Tv(60, 60, 0, Δⵠ[634], 3);
        this.ᐃᐃⵠ[133].id = 133;
        this.ᐃᐃⵠ[134] = Tv(60, 60, 0, Δⵠ[639], 3);
        this.ᐃᐃⵠ[134].id = 134;
        this.ᐃᐃⵠ[134].info.ᐃΔ[2] = this.ᐃᐃⵠ[134].info.ᐃΔ[0];
        this.ᐃᐃⵠ[135] = Tv(60, 60, 0, Δⵠ[644], 3);
        this.ᐃᐃⵠ[135].id = 135;
        this.ᐃᐃⵠ[47] = Tv(60, 60, 0, Δⵠ[646], 3);
        this.ᐃᐃⵠ[47].id = 47;
        this.ᐃᐃⵠ[48] = Tv(60, 60, 0, Δⵠ[649], 3);
        this.ᐃᐃⵠ[48].id = 48;
        this.ᐃᐃⵠ[49] = Tv(60, 60, 0, Δⵠ[652], 3);
        this.ᐃᐃⵠ[49].id = 49;
        this.ᐃᐃⵠ[136] = Tv(60, 60, 0, Δⵠ[659], 3);
        this.ᐃᐃⵠ[136].id = 136;
        this.ᐃᐃⵠ[143] = Tv(60, 60, 0, Δⵠ[143], 3);
        this.ᐃᐃⵠ[143].id = 143;
        this.ᐃᐃⵠ[137] = Tv(60, 60, 0, Δⵠ[662], 3);
        this.ᐃᐃⵠ[137].id = 137;
        this.ᐃᐃⵠ[138] = Tv(60, 60, 0, Δⵠ[664], 3);
        this.ᐃᐃⵠ[138].id = 138;
        this.ᐃᐃⵠ[139] = Tv(60, 60, 0, Δⵠ[674], 3);
        this.ᐃᐃⵠ[139].id = 139;
        this.ᐃᐃⵠ[139].info.ᐃΔ[2] = this.ᐃᐃⵠ[139].info.ᐃΔ[0];
        this.ᐃᐃⵠ[140] = Tv(60, 60, 0, Δⵠ[140], 3);
        this.ᐃᐃⵠ[140].id = 140;
        this.ᐃᐃⵠ[140].info.ᐃΔ[2] = this.ᐃᐃⵠ[140].info.ᐃΔ[0];
        this.ᐃᐃⵠ[141] = Tv(60, 60, 0, Δⵠ[685], 3);
        this.ᐃᐃⵠ[141].id = 141;
        this.ᐃᐃⵠ[142] = Tv(60, 60, 0, Δⵠ[142], 3);
        this.ᐃᐃⵠ[142].id = 142;
        this.ᐃᐃⵠ[142].info.ᐃΔ[2] = this.ᐃᐃⵠ[142].info.ᐃΔ[0];
        this.ᐃᐃⵠ[144] = Tv(60, 60, 0, Δⵠ[717], 3);
        this.ᐃᐃⵠ[144].id = 144;
        this.ᐃᐃⵠ[145] = Tv(60, 60, 0, Δⵠ[145], 3);
        this.ᐃᐃⵠ[145].id = 145;
        this.ᐃᐃⵠ[59] = Tv(60, 60, 0, Δⵠ[732], 3);
        this.ᐃᐃⵠ[59].id = 59;
        this.ᐃᐃⵠ[62] = Tv(60, 60, 0, Δⵠ[563], 3);
        this.ᐃᐃⵠ[62].id = 62;
        this.ᐃᐃⵠ[185] = Tv(60, 60, 0, Δⵠ[252], 3);
        this.ᐃᐃⵠ[185].id = 185;
        this.ᐃᐃⵠ[185].info.ᐃΔ[2] = this.ᐃᐃⵠ[185].info.ᐃΔ[0];
        this.ᐃᐃⵠ[184] = Tv(60, 60, 0, Δⵠ[751], 3);
        this.ᐃᐃⵠ[184].id = 184;
        this.ᐃᐃⵠ[184].info.ᐃΔ[2] = this.ᐃᐃⵠ[184].info.ᐃΔ[0];
        this.ᐃᐃⵠ[17] = Tv(60, 60, 0, Δⵠ[877], 3);
        this.ᐃᐃⵠ[17].id = 17;
        this.ᐃᐃⵠ[63] = Tv(60, 60, 0, Δⵠ[566], 3);
        this.ᐃᐃⵠ[63].id = 63;
        this.ᐃᐃⵠ[187] = Tv(60, 60, 0, Δⵠ[253], 3);
        this.ᐃᐃⵠ[187].id = 187;
        this.ᐃᐃⵠ[187].info.ᐃΔ[2] = this.ᐃᐃⵠ[187].info.ᐃΔ[0];
        this.ᐃᐃⵠ[186] = Tv(60, 60, 0, Δⵠ[753], 3);
        this.ᐃᐃⵠ[186].id = 186;
        this.ᐃᐃⵠ[186].info.ᐃΔ[2] = this.ᐃᐃⵠ[186].info.ᐃΔ[0];
        this.ᐃᐃⵠ[77] = Tv(60, 60, 0, Δⵠ[756], 3);
        this.ᐃᐃⵠ[77].id = 77;
        this.ᐃᐃⵠ[175] = Tv(60, 60, 0, Δⵠ[176], 3);
        this.ᐃᐃⵠ[175].id = 175;
        this.ᐃᐃⵠ[175].info.ᐃΔ[2] = this.ᐃᐃⵠ[175].info.ᐃΔ[0];
        this.ᐃᐃⵠ[176] = Tv(60, 60, 0, Δⵠ[177], 3);
        this.ᐃᐃⵠ[176].id = 176;
        this.ᐃᐃⵠ[176].info.ᐃΔ[2] = this.ᐃᐃⵠ[176].info.ᐃΔ[0];
        this.ᐃᐃⵠ[78] = Tv(60, 60, 0, Δⵠ[760], 3);
        this.ᐃᐃⵠ[78].id = 78;
        this.ᐃᐃⵠ[177] = Tv(60, 60, 0, Δⵠ[175], 3);
        this.ᐃᐃⵠ[177].id = 177;
        this.ᐃᐃⵠ[177].info.ᐃΔ[2] = this.ᐃᐃⵠ[177].info.ᐃΔ[0];
        this.ᐃᐃⵠ[79] = Tv(60, 60, 0, Δⵠ[764], 3);
        this.ᐃᐃⵠ[79].id = 79;
        this.ᐃᐃⵠ[83] = Tv(60, 60, 0, Δⵠ[767], 3);
        this.ᐃᐃⵠ[83].id = 83;
        this.ᐃᐃⵠ[84] = Tv(60, 60, 0, Δⵠ[771], 3);
        this.ᐃᐃⵠ[84].id = 84;
        this.ᐃᐃⵠ[178] = Tv(60, 60, 0, Δⵠ[178], 3);
        this.ᐃᐃⵠ[178].id = 178;
        this.ᐃᐃⵠ[179] = Tv(60, 60, 0, Δⵠ[179], 3);
        this.ᐃᐃⵠ[179].id = 179;
        this.ᐃᐃⵠ[86] = Tv(60, 60, 0, Δⵠ[776], 3);
        this.ᐃᐃⵠ[86].id = 86;
        this.ᐃᐃⵠ[85] = Tv(60, 60, 0, Δⵠ[779], 3);
        this.ᐃᐃⵠ[85].id = 85;
        this.ᐃᐃⵠ[180] = Tv(60, 60, 0, Δⵠ[180], 3);
        this.ᐃᐃⵠ[180].id = 180;
        this.ᐃᐃⵠ[181] = Tv(60, 60, 0, Δⵠ[181], 3);
        this.ᐃᐃⵠ[181].id = 181;
        this.ᐃᐃⵠ[182] = Tv(60, 60, 0, Δⵠ[789], 3);
        this.ᐃᐃⵠ[182].id = 182;
        this.ᐃᐃⵠ[183] = Tv(60, 60, 0, Δⵠ[800], 3);
        this.ᐃᐃⵠ[183].id = 183;
        this.ᐃᐃⵠ[188] = Tv(60, 60, 0, Δⵠ[808], 3);
        this.ᐃᐃⵠ[188].id = 188;
        this.ᐃᐃⵠ[189] = Tv(60, 60, 0, Δⵠ[814], 3);
        this.ᐃᐃⵠ[189].id = 189;
        this.ᐃᐃⵠ[191] = Tv(60, 60, 0, Δⵠ[834], 3);
        this.ᐃᐃⵠ[191].id = 191;
        this.ᐃᐃⵠ[192] = Tv(60, 60, 0, Δⵠ[840], 3);
        this.ᐃᐃⵠ[192].id = 192;
        this.ᐃᐃⵠ[190] = Tv(60, 60, 0, Δⵠ[842], 3);
        this.ᐃᐃⵠ[190].id = 190;
        this.ᐃᐃⵠ[193] = Tv(60, 60, 0, Δⵠ[845], 3);
        this.ᐃᐃⵠ[193].id = 193;
        this.ᐃᐃⵠ[194] = Tv(60, 60, 0, Δⵠ[850], 3);
        this.ᐃᐃⵠ[194].id = 194;
        this.ᐃᐃⵠ[204] = Tv(60, 60, 0, Δⵠ[949], 3);
        this.ᐃᐃⵠ[204].id = 204;
        this.ᐃᐃⵠ[205] = Tv(60, 60, 0, Δⵠ[955], 3);
        this.ᐃᐃⵠ[205].id = 205;
        this.ᐃᐃⵠ[206] = Tv(60, 60, 0, Δⵠ[959], 3);
        this.ᐃᐃⵠ[206].id = 206;
        this.ᐃᐃⵠ[207] = Tv(60, 60, 0, Δⵠ[965], 3);
        this.ᐃᐃⵠ[207].id = 207;
        this.ᐃᐃⵠ[208] = Tv(60, 60, 0, Δⵠ[966], 3);
        this.ᐃᐃⵠ[208].id = 208;
        this.ᐃᐃⵠ[209] = Tv(60, 60, 0, Δⵠ[972], 3);
        this.ᐃᐃⵠ[209].id = 209;
        this.ᐃᐃⵠ[210] = Tv(60, 60, 0, Δⵠ[981], 3);
        this.ᐃᐃⵠ[210].id = 210;
        this.ᐃᐃⵠ[211] = Tv(60, 60, 0, Δⵠ[987], 3);
        this.ᐃᐃⵠ[211].id = 211;
        this.ᐃᐃⵠ[41] = Tv(60, 60, 0, Δⵠ[880], 3);
        this.ᐃᐃⵠ[41].id = 41;
        this.ᐃᐃⵠ[42] = Tv(60, 60, 0, Δⵠ[882], 3);
        this.ᐃᐃⵠ[42].id = 42;
        this.ᐃᐃⵠ[12] = Tv(60, 60, 0, Δⵠ[401], 3);
        this.ᐃᐃⵠ[12].id = 12;
        this.ᐃᐃⵠ[16] = Tv(60, 60, 0, Δⵠ[874], 3);
        this.ᐃᐃⵠ[16].id = 16;
        this.ᐃᐃⵠ[196] = Tv(60, 60, 0, Δⵠ[196], 3);
        this.ᐃᐃⵠ[196].id = 196;
        this.ᐃᐃⵠ[18] = Tv(60, 60, 0, Δⵠ[901], 3);
        this.ᐃᐃⵠ[18].id = 18;
        this.ᐃᐃⵠ[197] = Tv(60, 60, 0, Δⵠ[197], 3);
        this.ᐃᐃⵠ[197].id = 197;
        this.ᐃᐃⵠ[198] = Tv(60, 60, 0, Δⵠ[907], 3);
        this.ᐃᐃⵠ[198].id = 198;
        this.ᐃᐃⵠ[61] = Tv(60, 60, 0, Δⵠ[910], 3);
        this.ᐃᐃⵠ[61].id = 61;
        this.ᐃᐃⵠ[201] = Tv(60, 60, 0, Δⵠ[870], 3);
        this.ᐃᐃⵠ[201].id = 201;
        this.ᐃᐃⵠ[200] = Tv(60, 60, 0, Δⵠ[200], 3);
        this.ᐃᐃⵠ[200].id = 200;
        this.ᐃᐃⵠ[199] = Tv(60, 60, 0, Δⵠ[865], 3);
        this.ᐃᐃⵠ[199].id = 199;
        this.ⲆΔⲆ = [];
        this.ⲆΔⲆ[35] = Tv(60, 60, 0, Δⵠ[254], 3);
        this.ⲆΔⲆ[35].id = 35;
        this.ⲆΔⲆ[5] = Tv(60, 60, 0, Δⵠ[256], 3);
        this.ⲆΔⲆ[5].id = 5;
        this.ⲆΔⲆ[0] = Tv(60, 60, 0, Δⵠ[302], 3);
        this.ⲆΔⲆ[0].id = 0;
        this.ⲆΔⲆ[3] = Tv(60, 60, 0, Δⵠ[262], 3);
        this.ⲆΔⲆ[3].id = 3;
        this.ⲆΔⲆ[55] = Tv(60, 60, 0, Δⵠ[318], 3);
        this.ⲆΔⲆ[55].id = 55;
        this.ⲆΔⲆ[67] = Tv(60, 60, 0, Δⵠ[320], 3);
        this.ⲆΔⲆ[67].id = 67;
        this.ⲆΔⲆ[40] = Tv(60, 60, 0, Δⵠ[284], 3);
        this.ⲆΔⲆ[40].id = 40;
        this.ⲆΔⲆ[6] = Tv(60, 60, 0, Δⵠ[295], 3);
        this.ⲆΔⲆ[6].id = 6;
        this.ⲆΔⲆ[7] = Tv(60, 60, 0, Δⵠ[257], 3);
        this.ⲆΔⲆ[7].id = 7;
        this.ⲆΔⲆ[36] = Tv(60, 60, 0, Δⵠ[290], 3);
        this.ⲆΔⲆ[36].id = 36;
        this.ⲆΔⲆ[34] = Tv(60, 60, 0, Δⵠ[830], 3);
        this.ⲆΔⲆ[34].id = 34;
        this.ⲆΔⲆ[37] = Tv(60, 60, 0, Δⵠ[291], 3);
        this.ⲆΔⲆ[37].id = 37;
        this.ⲆΔⲆ[4] = Tv(60, 60, 0, Δⵠ[314], 3);
        this.ⲆΔⲆ[4].id = 4;
        this.ⲆΔⲆ[49] = Tv(60, 60, 0, Δⵠ[325], 3);
        this.ⲆΔⲆ[49].id = 49;
        this.ⲆΔⲆ[1] = Tv(60, 60, 0, Δⵠ[327], 3);
        this.ⲆΔⲆ[1].id = 1;
        this.ⲆΔⲆ[54] = Tv(60, 60, 0, Δⵠ[304], 3);
        this.ⲆΔⲆ[54].id = 54;
        this.ⲆΔⲆ[56] = Tv(60, 60, 0, Δⵠ[263], 3);
        this.ⲆΔⲆ[56].id = 56;
        this.ⲆΔⲆ[57] = Tv(60, 60, 0, Δⵠ[265], 3);
        this.ⲆΔⲆ[57].id = 57;
        this.ⲆΔⲆ[58] = Tv(60, 60, 0, Δⵠ[332], 3);
        this.ⲆΔⲆ[58].id = 58;
        this.ⲆΔⲆ[61] = Tv(60, 60, 0, Δⵠ[268], 3);
        this.ⲆΔⲆ[61].id = 61;
        this.ⲆΔⲆ[79] = Tv(60, 60, 0, Δⵠ[338], 3);
        this.ⲆΔⲆ[79].id = 79;
        this.ⲆΔⲆ[68] = Tv(60, 60, 0, Δⵠ[360], 3);
        this.ⲆΔⲆ[68].id = 68;
        this.ⲆΔⲆ[69] = Tv(60, 60, 0, Δⵠ[363], 3);
        this.ⲆΔⲆ[69].id = 69;
        this.ⲆΔⲆ[70] = Tv(60, 60, 0, Δⵠ[365], 3);
        this.ⲆΔⲆ[70].id = 70;
        this.ⲆΔⲆ[100] = Tv(60, 60, 0, Δⵠ[367], 3);
        this.ⲆΔⲆ[100].id = 100;
        this.ⲆΔⲆ[83] = Tv(60, 60, 0, Δⵠ[370], 3);
        this.ⲆΔⲆ[83].id = 83;
        this.ⲆΔⲆ[62] = Tv(60, 60, 0, Δⵠ[371], 3);
        this.ⲆΔⲆ[62].id = 62;
        this.ⲆΔⲆ[63] = Tv(60, 60, 0, Δⵠ[374], 3);
        this.ⲆΔⲆ[63].id = 63;
        this.ⲆΔⲆ[64] = Tv(60, 60, 0, Δⵠ[377], 3);
        this.ⲆΔⲆ[64].id = 64;
        this.ⲆΔⲆ[83] = Tv(60, 60, 0, Δⵠ[370], 3);
        this.ⲆΔⲆ[83].id = 83;
        this.ⲆΔⲆ[84] = Tv(60, 60, 0, Δⵠ[380], 3);
        this.ⲆΔⲆ[84].id = 84;
        this.ⲆΔⲆ[25] = Tv(60, 60, 0, Δⵠ[402], 3);
        this.ⲆΔⲆ[25].id = 25;
        this.ⲆΔⲆ[26] = Tv(60, 60, 0, Δⵠ[396], 3);
        this.ⲆΔⲆ[26].id = 26;
        this.ⲆΔⲆ[27] = Tv(60, 60, 0, Δⵠ[399], 3);
        this.ⲆΔⲆ[27].id = 27;
        this.ⲆΔⲆ[28] = Tv(60, 60, 0, Δⵠ[405], 3);
        this.ⲆΔⲆ[28].id = 28;
        this.ⲆΔⲆ[31] = Tv(60, 60, 0, Δⵠ[876], 3);
        this.ⲆΔⲆ[31].id = 31;
        this.ⲆΔⲆ[2] = Tv(60, 60, 0, Δⵠ[409], 3);
        this.ⲆΔⲆ[2].id = 2;
        this.ⲆΔⲆ[80] = Tv(60, 60, 0, Δⵠ[421], 3);
        this.ⲆΔⲆ[80].id = 80;
        this.ⲆΔⲆ[81] = Tv(60, 60, 0, Δⵠ[424], 3);
        this.ⲆΔⲆ[81].id = 81;
        this.ⲆΔⲆ[Wr.ⵠᐃⲆⲆⵠ] = Tv(60, 60, 0, Δⵠ[1228], 3);
        this.ⲆΔⲆ[Wr.ⵠᐃⲆⲆⵠ].id = Wr.ⵠᐃⲆⲆⵠ;
        this.ⲆΔⲆ[86] = Tv(60, 60, 0, Δⵠ[1231], 3);
        this.ⲆΔⲆ[86].id = 86;
        this.ⲆΔⲆ[98] = Tv(60, 60, 0, Δⵠ[1138], 3);
        this.ⲆΔⲆ[98].id = 98;
        this.ⲆΔⲆ[99] = Tv(60, 60, 0, Δⵠ[1141], 3);
        this.ⲆΔⲆ[99].id = 99;
        this.ⲆΔⲆ[131] = Tv(60, 60, 0, Δⵠ[570], 3);
        this.ⲆΔⲆ[131].id = 131;
        this.ⲆΔⲆ[132] = Tv(60, 60, 0, Δⵠ[1168], 3);
        this.ⲆΔⲆ[132].id = 132;
        this.ⲆΔⲆ[145] = Tv(60, 60, 0, Δⵠ[1238], 3);
        this.ⲆΔⲆ[145].id = 145;
        this.ⲆΔⲆ[133] = Tv(60, 60, 0, Δⵠ[573], 3);
        this.ⲆΔⲆ[133].id = 133;
        this.ⲆΔⲆ[134] = Tv(60, 60, 0, Δⵠ[1171], 3);
        this.ⲆΔⲆ[134].id = 134;
        this.ⲆΔⲆ[146] = Tv(60, 60, 0, Δⵠ[1241], 3);
        this.ⲆΔⲆ[146].id = 146;
        this.ⲆΔⲆ[135] = Tv(60, 60, 0, Δⵠ[576], 3);
        this.ⲆΔⲆ[135].id = 135;
        this.ⲆΔⲆ[136] = Tv(60, 60, 0, Δⵠ[1174], 3);
        this.ⲆΔⲆ[136].id = 136;
        this.ⲆΔⲆ[147] = Tv(60, 60, 0, Δⵠ[1244], 3);
        this.ⲆΔⲆ[147].id = 147;
        this.ⲆΔⲆ[137] = Tv(60, 60, 0, Δⵠ[579], 3);
        this.ⲆΔⲆ[137].id = 137;
        this.ⲆΔⲆ[138] = Tv(60, 60, 0, Δⵠ[1177], 3);
        this.ⲆΔⲆ[138].id = 138;
        this.ⲆΔⲆ[167] = Tv(60, 60, 0, Δⵠ[1256], 3);
        this.ⲆΔⲆ[167].id = 167;
        this.ⲆΔⲆ[168] = Tv(60, 60, 0, Δⵠ[1259], 3);
        this.ⲆΔⲆ[168].id = 168;
        this.ⲆΔⲆ[169] = Tv(60, 60, 0, Δⵠ[1262], 3);
        this.ⲆΔⲆ[169].id = 169;
        this.ⲆΔⲆ[170] = Tv(60, 60, 0, Δⵠ[1265], 3);
        this.ⲆΔⲆ[170].id = 170;
        this.ⲆΔⲆ[171] = Tv(60, 60, 0, Δⵠ[1268], 3);
        this.ⲆΔⲆ[171].id = 171;
        this.ⲆΔⲆ[172] = Tv(60, 60, 0, Δⵠ[1271], 3);
        this.ⲆΔⲆ[172].id = 172;
        this.ⲆΔⲆ[148] = Tv(60, 60, 0, Δⵠ[1247], 3);
        this.ⲆΔⲆ[148].id = 148;
        this.ⲆΔⲆ[139] = Tv(60, 60, 0, Δⵠ[582], 3);
        this.ⲆΔⲆ[139].id = 139;
        this.ⲆΔⲆ[140] = Tv(60, 60, 0, Δⵠ[1180], 3);
        this.ⲆΔⲆ[140].id = 140;
        this.ⲆΔⲆ[149] = Tv(60, 60, 0, Δⵠ[1250], 3);
        this.ⲆΔⲆ[149].id = 149;
        this.ⲆΔⲆ[141] = Tv(60, 60, 0, Δⵠ[585], 3);
        this.ⲆΔⲆ[141].id = 141;
        this.ⲆΔⲆ[142] = Tv(60, 60, 0, Δⵠ[1183], 3);
        this.ⲆΔⲆ[142].id = 142;
        this.ⲆΔⲆ[150] = Tv(60, 60, 0, Δⵠ[1253], 3);
        this.ⲆΔⲆ[150].id = 150;
        this.ⲆΔⲆ[143] = Tv(60, 60, 0, Δⵠ[588], 3);
        this.ⲆΔⲆ[143].id = 143;
        this.ⲆΔⲆ[144] = Tv(60, 60, 0, Δⵠ[1186], 3);
        this.ⲆΔⲆ[144].id = 144;
        this.ⲆΔⲆ[87] = Tv(60, 60, 0, Δⵠ[827], 3);
        this.ⲆΔⲆ[87].id = 87;
        this.ⲆΔⲆ[88] = Tv(60, 60, 0, Δⵠ[430], 3);
        this.ⲆΔⲆ[88].id = 88;
        this.ⲆΔⲆ[89] = Tv(60, 60, 0, Δⵠ[433], 3);
        this.ⲆΔⲆ[89].id = 89;
        this.ⲆΔⲆ[90] = Tv(60, 60, 0, Δⵠ[436], 3);
        this.ⲆΔⲆ[90].id = 90;
        this.ⲆΔⲆ[24] = Tv(60, 60, 0, Δⵠ[439], 3);
        this.ⲆΔⲆ[24].id = 24;
        this.ⲆΔⲆ[101] = Tv(60, 60, 0, Δⵠ[442], 3);
        this.ⲆΔⲆ[101].id = 101;
        this.ⲆΔⲆ[100] = Tv(60, 60, 0, Δⵠ[367], 3);
        this.ⲆΔⲆ[100].id = 100;
        this.ⲆΔⲆ[38] = Tv(60, 60, 0, Δⵠ[456], 3);
        this.ⲆΔⲆ[38].id = 38;
        this.ⲆΔⲆ[Wr.ⲆⲆΔᐃⵠ] = Tv(60, 60, 0, Δⵠ[861], 3);
        this.ⲆΔⲆ[Wr.ⲆⲆΔᐃⵠ].id = Wr.ⲆⲆΔᐃⵠ;
        this.ⲆΔⲆ[8] = Tv(60, 60, 0, Δⵠ[460], 3);
        this.ⲆΔⲆ[8].id = 8;
        this.ⲆΔⲆ[9] = Tv(60, 60, 0, Δⵠ[1019], 3);
        this.ⲆΔⲆ[9].id = 9;
        this.ⲆΔⲆ[29] = Tv(60, 60, 0, Δⵠ[473], 3);
        this.ⲆΔⲆ[29].id = 29;
        this.ⲆΔⲆ[10] = Tv(60, 60, 0, Δⵠ[478], 3);
        this.ⲆΔⲆ[10].id = 10;
        this.ⲆΔⲆ[11] = Tv(60, 60, 0, Δⵠ[481], 3);
        this.ⲆΔⲆ[11].id = 11;
        this.ⲆΔⲆ[12] = Tv(60, 60, 0, Δⵠ[484], 3);
        this.ⲆΔⲆ[12].id = 12;
        this.ⲆΔⲆ[13] = Tv(60, 60, 0, Δⵠ[487], 3);
        this.ⲆΔⲆ[13].id = 13;
        this.ⲆΔⲆ[14] = Tv(60, 60, 0, Δⵠ[490], 3);
        this.ⲆΔⲆ[14].id = 14;
        this.ⲆΔⲆ[59] = Tv(60, 60, 0, Δⵠ[493], 3);
        this.ⲆΔⲆ[59].id = 59;
        this.ⲆΔⲆ[71] = Tv(60, 60, 0, Δⵠ[496], 3);
        this.ⲆΔⲆ[71].id = 71;
        this.ⲆΔⲆ[65] = Tv(60, 60, 0, Δⵠ[498], 3);
        this.ⲆΔⲆ[65].id = 65;
        this.ⲆΔⲆ[85] = Tv(60, 60, 0, Δⵠ[503], 3);
        this.ⲆΔⲆ[85].id = 85;
        this.ⲆΔⲆ[102] = Tv(60, 60, 0, Δⵠ[515], 3);
        this.ⲆΔⲆ[102].id = 102;
        this.ⲆΔⲆ[103] = Tv(60, 60, 0, Δⵠ[519], 3);
        this.ⲆΔⲆ[103].id = 103;
        this.ⲆΔⲆ[115] = Tv(60, 60, 0, Δⵠ[530], 3);
        this.ⲆΔⲆ[115].id = 115;
        this.ⲆΔⲆ[104] = Tv(60, 60, 0, Δⵠ[533], 3);
        this.ⲆΔⲆ[104].id = 104;
        this.ⲆΔⲆ[105] = Tv(60, 60, 0, Δⵠ[555], 3);
        this.ⲆΔⲆ[105].id = 105;
        this.ⲆΔⲆ[91] = Tv(60, 60, 0, Δⵠ[542], 3);
        this.ⲆΔⲆ[91].id = 91;
        this.ⲆΔⲆ[15] = Tv(60, 60, 0, Δⵠ[551], 3);
        this.ⲆΔⲆ[15].id = 15;
        this.ⲆΔⲆ[106] = Tv(60, 60, 0, Δⵠ[604], 3);
        this.ⲆΔⲆ[106].id = 106;
        this.ⲆΔⲆ[108] = Tv(60, 60, 0, Δⵠ[1235], 3);
        this.ⲆΔⲆ[108].id = 108;
        this.ⲆΔⲆ[163] = Tv(60, 60, 0, Δⵠ[1027], 3);
        this.ⲆΔⲆ[163].id = 163;
        this.ⲆΔⲆ[164] = Tv(60, 60, 0, Δⵠ[1030], 3);
        this.ⲆΔⲆ[164].id = 164;
        this.ⲆΔⲆ[166] = Tv(60, 60, 0, Δⵠ[1116], 3);
        this.ⲆΔⲆ[166].id = 166;
        this.ⲆΔⲆ[165] = Tv(60, 60, 0, Δⵠ[1048], 3);
        this.ⲆΔⲆ[165].id = 165;
        this.ⲆΔⲆ[Wr.ᐃΔΔⵠΔ] = Tv(60, 60, 0, Δⵠ[1051], 3);
        this.ⲆΔⲆ[Wr.ᐃΔΔⵠΔ].id = Wr.ᐃΔΔⵠΔ;
        this.ⲆΔⲆ[Wr.ΔⵠⵠΔᐃ] = Tv(60, 60, 0, Δⵠ[1082], 3);
        this.ⲆΔⲆ[Wr.ΔⵠⵠΔᐃ].id = Wr.ΔⵠⵠΔᐃ;
        this.ⲆΔⲆ[Wr.ⲆᐃᐃⲆⲆ] = Tv(60, 60, 0, Δⵠ[1226], 3);
        this.ⲆΔⲆ[Wr.ⲆᐃᐃⲆⲆ].id = Wr.ⲆᐃᐃⲆⲆ;
        this.ⲆΔⲆ[Wr.ⵠᐃΔⵠᐃ] = Tv(60, 60, 0, Δⵠ[1191], 3);
        this.ⲆΔⲆ[Wr.ⵠᐃΔⵠᐃ].id = Wr.ⵠᐃΔⵠᐃ;
        this.ⲆΔⲆ[110] = Tv(60, 60, 0, Δⵠ[611], 3);
        this.ⲆΔⲆ[110].id = 110;
        this.ⲆΔⲆ[111] = Tv(60, 60, 0, Δⵠ[715], 3);
        this.ⲆΔⲆ[111].id = 111;
        this.ⲆΔⲆ[112] = Tv(60, 60, 0, Δⵠ[715], 3);
        this.ⲆΔⲆ[112].id = 112;
        this.ⲆΔⲆ[113] = Tv(60, 60, 0, Δⵠ[715], 3);
        this.ⲆΔⲆ[113].id = 113;
        this.ⲆΔⲆ[16] = Tv(60, 60, 0, Δⵠ[618], 3);
        this.ⲆΔⲆ[16].id = 16;
        this.ⲆΔⲆ[17] = Tv(60, 60, 0, Δⵠ[700], 3);
        this.ⲆΔⲆ[17].id = 17;
        this.ⲆΔⲆ[18] = Tv(60, 60, 0, Δⵠ[704], 3);
        this.ⲆΔⲆ[18].id = 18;
        this.ⲆΔⲆ[19] = Tv(60, 60, 0, Δⵠ[706], 3);
        this.ⲆΔⲆ[19].id = 19;
        this.ⲆΔⲆ[122] = Tv(60, 60, 0, Δⵠ[711], 3);
        this.ⲆΔⲆ[122].id = 122;
        this.ⲆΔⲆ[20] = Tv(60, 60, 0, Δⵠ[627], 3);
        this.ⲆΔⲆ[20].id = 20;
        this.ⲆΔⲆ[41] = Tv(60, 60, 0, Δⵠ[632], 3);
        this.ⲆΔⲆ[41].id = 41;
        this.ⲆΔⲆ[52] = Tv(60, 60, 0, Δⵠ[635], 3);
        this.ⲆΔⲆ[52].id = 52;
        this.ⲆΔⲆ[114] = Tv(60, 60, 0, Δⵠ[643], 3);
        this.ⲆΔⲆ[114].id = 114;
        this.ⲆΔⲆ[94] = Tv(60, 60, 0, Δⵠ[647], 3);
        this.ⲆΔⲆ[94].id = 94;
        this.ⲆΔⲆ[93] = Tv(60, 60, 0, Δⵠ[650], 3);
        this.ⲆΔⲆ[93].id = 93;
        this.ⲆΔⲆ[21] = Tv(60, 60, 0, Δⵠ[654], 3);
        this.ⲆΔⲆ[21].id = 21;
        this.ⲆΔⲆ[53] = Tv(60, 60, 0, Δⵠ[660], 3);
        this.ⲆΔⲆ[53].id = 53;
        this.ⲆΔⲆ[51] = Tv(60, 60, 0, Δⵠ[690], 3);
        this.ⲆΔⲆ[51].id = 51;
        this.ⲆΔⲆ[50] = Tv(60, 60, 0, Δⵠ[666], 3);
        this.ⲆΔⲆ[50].id = 50;
        this.ⲆΔⲆ[109] = Tv(60, 60, 0, Δⵠ[684], 3);
        this.ⲆΔⲆ[109].id = 109;
        this.ⲆΔⲆ[124] = Tv(60, 60, 0, Δⵠ[718], 3);
        this.ⲆΔⲆ[124].id = 124;
        this.ⲆΔⲆ[125] = Tv(60, 60, 0, Δⵠ[730], 3);
        this.ⲆΔⲆ[125].id = 125;
        this.ⲆΔⲆ[126] = Tv(60, 60, 0, Δⵠ[734], 3);
        this.ⲆΔⲆ[126].id = 126;
        this.ⲆΔⲆ[129] = Tv(60, 60, 0, Δⵠ[563], 3);
        this.ⲆΔⲆ[129].id = 129;
        this.ⲆΔⲆ[151] = Tv(60, 60, 0, Δⵠ[758], 3);
        this.ⲆΔⲆ[151].id = 151;
        this.ⲆΔⲆ[152] = Tv(60, 60, 0, Δⵠ[762], 3);
        this.ⲆΔⲆ[152].id = 152;
        this.ⲆΔⲆ[153] = Tv(60, 60, 0, Δⵠ[770], 3);
        this.ⲆΔⲆ[153].id = 153;
        this.ⲆΔⲆ[154] = Tv(60, 60, 0, Δⵠ[768], 3);
        this.ⲆΔⲆ[154].id = 154;
        this.ⲆΔⲆ[155] = Tv(60, 60, 0, Δⵠ[772], 3);
        this.ⲆΔⲆ[155].id = 155;
        this.ⲆΔⲆ[157] = Tv(60, 60, 0, Δⵠ[777], 3);
        this.ⲆΔⲆ[157].id = 157;
        this.ⲆΔⲆ[156] = Tv(60, 60, 0, Δⵠ[780], 3);
        this.ⲆΔⲆ[156].id = 156;
        this.ⲆΔⲆ[158] = Tv(60, 60, 0, Δⵠ[784], 3);
        this.ⲆΔⲆ[158].id = 158;
        this.ⲆΔⲆ[159] = Tv(60, 60, 0, Δⵠ[785], 3);
        this.ⲆΔⲆ[159].id = 159;
        this.ⲆΔⲆ[160] = Tv(60, 60, 0, Δⵠ[791], 3);
        this.ⲆΔⲆ[160].id = 160;
        this.ⲆΔⲆ[161] = Tv(60, 60, 0, Δⵠ[799], 3);
        this.ⲆΔⲆ[161].id = 161;
        this.ⲆΔⲆ[42] = Tv(60, 60, 0, Δⵠ[809], 3);
        this.ⲆΔⲆ[42].id = 42;
        this.ⲆΔⲆ[43] = Tv(60, 60, 0, Δⵠ[835], 3);
        this.ⲆΔⲆ[43].id = 43;
        this.ⲆΔⲆ[107] = Tv(60, 60, 0, Δⵠ[843], 3);
        this.ⲆΔⲆ[107].id = 107;
        this.ⲆΔⲆ[44] = Tv(60, 60, 0, Δⵠ[846], 3);
        this.ⲆΔⲆ[44].id = 44;
        this.ⲆΔⲆ[46] = Tv(60, 60, 0, Δⵠ[960], 3);
        this.ⲆΔⲆ[46].id = 46;
        this.ⲆΔⲆ[45] = Tv(60, 60, 0, Δⵠ[950], 3);
        this.ⲆΔⲆ[45].id = 45;
        this.ⲆΔⲆ[47] = Tv(60, 60, 0, Δⵠ[967], 3);
        this.ⲆΔⲆ[47].id = 47;
        this.ⲆΔⲆ[48] = Tv(60, 60, 0, Δⵠ[982], 3);
        this.ⲆΔⲆ[48].id = 48;
        this.ⲆΔⲆ[25] = Tv(60, 60, 0, Δⵠ[402], 3);
        this.ⲆΔⲆ[25].id = 25;
        this.ⲆΔⲆ[31] = Tv(60, 60, 0, Δⵠ[876], 3);
        this.ⲆΔⲆ[31].id = 31;
        this.ⲆΔⲆ[33] = Tv(60, 60, 0, Δⵠ[900], 3);
        this.ⲆΔⲆ[33].id = 33;
        this.ⲆΔⲆ[162] = Tv(60, 60, 0, Δⵠ[909], 3);
        this.ⲆΔⲆ[162].id = 162;
        this.ⲆΔⲆ[128] = Tv(60, 60, 0, Δⵠ[912], 3);
        this.ⲆΔⲆ[128].id = 128;
        this.ⲆⵠⲆ[53] = Tv(68, 68, 0, Δⵠ[976], 3);
        this.ⲆⵠⲆ[53].id = 53;
        this.ᐃᐃⵠ[53] = Tv(60, 60, 0, Δⵠ[975], 3);
        this.ᐃᐃⵠ[53].id = 53;
        this.ⲆΔⲆ[22] = Tv(60, 60, 0, Δⵠ[977], 3);
        this.ⲆΔⲆ[22].id = 22;
        this.ⲆⵠⲆ[54] = Tv(68, 68, 0, Δⵠ[979], 3);
        this.ⲆⵠⲆ[54].id = 54;
        this.ᐃᐃⵠ[54] = Tv(60, 60, 0, Δⵠ[978], 3);
        this.ᐃᐃⵠ[54].id = 54;
        this.ⲆΔⲆ[23] = Tv(60, 60, 0, Δⵠ[980], 3);
        this.ⲆΔⲆ[23].id = 23;
        this.ⲆⵠⲆ[56] = Tv(68, 68, 0, Δⵠ[713], 3);
        this.ⲆⵠⲆ[56].id = 56;
        this.ᐃᐃⵠ[56] = Tv(60, 60, 0, Δⵠ[712], 3);
        this.ᐃᐃⵠ[56].id = 56;
        this.ⲆΔⲆ[123] = Tv(60, 60, 0, Δⵠ[714], 3);
        this.ⲆΔⲆ[123].id = 123;
        this.ⲆⵠⲆ[82] = Tv(68, 68, 0, Δⵠ[428], 3);
        this.ⲆⵠⲆ[82].id = 82;
        this.ᐃᐃⵠ[82] = Tv(60, 60, 0, Δⵠ[426], 3);
        this.ᐃᐃⵠ[82].id = 82;
        this.ⲆΔⲆ[82] = Tv(60, 60, 0, Δⵠ[427], 3);
        this.ⲆΔⲆ[82].id = 82;
        this.ⲆⵠⲆ[235] = Tv(68, 68, 0, Δⵠ[1159], 3);
        this.ⲆⵠⲆ[235].id = 235;
        this.ᐃᐃⵠ[235] = Tv(60, 60, 0, Δⵠ[1158], 3);
        this.ᐃᐃⵠ[235].id = 235;
        this.ⲆⵠⲆ[238] = Tv(68, 68, 0, Δⵠ[1188], 3);
        this.ⲆⵠⲆ[238].id = 238;
        this.ᐃᐃⵠ[238] = Tv(60, 60, 0, Δⵠ[1187], 3);
        this.ᐃᐃⵠ[238].id = 238;
        this.ⲆⵠⲆ[236] = Tv(68, 68, 0, Δⵠ[1161], 3);
        this.ⲆⵠⲆ[236].id = 236;
        this.ᐃᐃⵠ[236] = Tv(60, 60, 0, Δⵠ[1160], 3);
        this.ᐃᐃⵠ[236].id = 236;
        this.ⲆⵠⲆ[152] = Tv(68, 68, 0, Δⵠ[1197], 3);
        this.ⲆⵠⲆ[152].id = 152;
        this.ᐃᐃⵠ[152] = Tv(60, 60, 0, Δⵠ[1195], 3);
        this.ᐃᐃⵠ[152].id = 152;
        this.ⲆΔⲆ[116] = Tv(60, 60, 0, Δⵠ[1196], 3);
        this.ⲆΔⲆ[116].id = 116;
        this.ⲆⵠⲆ[212] = Tv(68, 68, 0, Δⵠ[992], 3);
        this.ⲆⵠⲆ[212].id = 212;
        this.ᐃᐃⵠ[212] = Tv(60, 60, 0, Δⵠ[991], 3);
        this.ᐃᐃⵠ[212].id = 212;
        this.ⲆΔⲆ[73] = Tv(60, 60, 0, Δⵠ[990], 3);
        this.ⲆΔⲆ[73].id = 73;
        this.ⲆⵠⲆ[213] = Tv(68, 68, 0, Δⵠ[995], 3);
        this.ⲆⵠⲆ[213].id = 213;
        this.ᐃᐃⵠ[213] = Tv(60, 60, 0, Δⵠ[994], 3);
        this.ᐃᐃⵠ[213].id = 213;
        this.ⲆΔⲆ[74] = Tv(60, 60, 0, Δⵠ[993], 3);
        this.ⲆΔⲆ[74].id = 74;
        this.ⲆⵠⲆ[214] = Tv(68, 68, 0, Δⵠ[998], 3);
        this.ⲆⵠⲆ[214].id = 214;
        this.ᐃᐃⵠ[214] = Tv(60, 60, 0, Δⵠ[997], 3);
        this.ᐃᐃⵠ[214].id = 214;
        this.ⲆΔⲆ[75] = Tv(60, 60, 0, Δⵠ[996], 3);
        this.ⲆΔⲆ[75].id = 75;
        this.ⲆⵠⲆ[215] = Tv(68, 68, 0, Δⵠ[1001], 3);
        this.ⲆⵠⲆ[215].id = 215;
        this.ᐃᐃⵠ[215] = Tv(60, 60, 0, Δⵠ[1000], 3);
        this.ᐃᐃⵠ[215].id = 215;
        this.ⲆΔⲆ[76] = Tv(60, 60, 0, Δⵠ[999], 3);
        this.ⲆΔⲆ[76].id = 76;
        this.ⲆⵠⲆ[216] = Tv(68, 68, 0, Δⵠ[1004], 3);
        this.ⲆⵠⲆ[216].id = 216;
        this.ᐃᐃⵠ[216] = Tv(60, 60, 0, Δⵠ[1003], 3);
        this.ᐃᐃⵠ[216].id = 216;
        this.ⲆΔⲆ[77] = Tv(60, 60, 0, Δⵠ[1002], 3);
        this.ⲆΔⲆ[77].id = 77;
        this.ⲆⵠⲆ[220] = Tv(68, 68, 0, Δⵠ[1007], 3);
        this.ⲆⵠⲆ[220].id = 220;
        this.ᐃᐃⵠ[220] = Tv(60, 60, 0, Δⵠ[1006], 3);
        this.ᐃᐃⵠ[220].id = 220;
        this.ⲆΔⲆ[78] = Tv(60, 60, 0, Δⵠ[1005], 3);
        this.ⲆΔⲆ[78].id = 78;
        this.ⲆⵠⲆ[217] = Tv(68, 68, 0, Δⵠ[1016], 3);
        this.ⲆⵠⲆ[217].id = 217;
        this.ᐃᐃⵠ[217] = Tv(60, 60, 0, Δⵠ[1015], 3);
        this.ᐃᐃⵠ[217].id = 217;
        this.ⲆΔⲆ[60] = Tv(60, 60, 0, Δⵠ[1014], 3);
        this.ⲆΔⲆ[60].id = 60;
        this.ⲆⵠⲆ[219] = Tv(68, 68, 0, Δⵠ[1013], 3);
        this.ⲆⵠⲆ[219].id = 219;
        this.ᐃᐃⵠ[219] = Tv(60, 60, 0, Δⵠ[1012], 3);
        this.ᐃᐃⵠ[219].id = 219;
        this.ⲆΔⲆ[72] = Tv(60, 60, 0, Δⵠ[1011], 3);
        this.ⲆΔⲆ[72].id = 72;
        this.ⲆⵠⲆ[218] = Tv(68, 68, 0, Δⵠ[1010], 3);
        this.ⲆⵠⲆ[218].id = 218;
        this.ᐃᐃⵠ[218] = Tv(60, 60, 0, Δⵠ[1009], 3);
        this.ᐃᐃⵠ[218].id = 218;
        this.ⲆΔⲆ[66] = Tv(60, 60, 0, Δⵠ[1008], 3);
        this.ⲆΔⲆ[66].id = 66;
        this.ⲆⵠⲆ[153] = Tv(68, 68, 0, Δⵠ[1201], 3);
        this.ⲆⵠⲆ[153].id = 153;
        this.ᐃᐃⵠ[153] = Tv(60, 60, 0, Δⵠ[1199], 3);
        this.ᐃᐃⵠ[153].id = 153;
        this.ⲆΔⲆ[117] = Tv(60, 60, 0, Δⵠ[1200], 3);
        this.ⲆΔⲆ[117].id = 117;
        this.ⲆⵠⲆ[154] = Tv(68, 68, 0, Δⵠ[1205], 3);
        this.ⲆⵠⲆ[154].id = 154;
        this.ᐃᐃⵠ[154] = Tv(60, 60, 0, Δⵠ[1203], 3);
        this.ᐃᐃⵠ[154].id = 154;
        this.ⲆΔⲆ[118] = Tv(60, 60, 0, Δⵠ[1204], 3);
        this.ⲆΔⲆ[118].id = 118;
        this.ⲆⵠⲆ[155] = Tv(68, 68, 0, Δⵠ[1209], 3);
        this.ⲆⵠⲆ[155].id = 155;
        this.ᐃᐃⵠ[155] = Tv(60, 60, 0, Δⵠ[1207], 3);
        this.ᐃᐃⵠ[155].id = 155;
        this.ⲆΔⲆ[119] = Tv(60, 60, 0, Δⵠ[1208], 3);
        this.ⲆΔⲆ[119].id = 119;
        this.ⲆⵠⲆ[156] = Tv(68, 68, 0, Δⵠ[1213], 3);
        this.ⲆⵠⲆ[156].id = 156;
        this.ᐃᐃⵠ[156] = Tv(60, 60, 0, Δⵠ[1211], 3);
        this.ᐃᐃⵠ[156].id = 156;
        this.ⲆΔⲆ[120] = Tv(60, 60, 0, Δⵠ[1212], 3);
        this.ⲆΔⲆ[120].id = 120;
        this.ⲆⵠⲆ[157] = Tv(68, 68, 0, Δⵠ[1217], 3);
        this.ⲆⵠⲆ[157].id = 157;
        this.ᐃᐃⵠ[157] = Tv(60, 60, 0, Δⵠ[1215], 3);
        this.ᐃᐃⵠ[157].id = 157;
        this.ⲆΔⲆ[121] = Tv(60, 60, 0, Δⵠ[1216], 3);
        this.ⲆΔⲆ[121].id = 121;
        this.ⲆⵠⲆ[203] = Tv(68, 68, 0, Δⵠ[937], 3);
        this.ⲆⵠⲆ[203].id = 203;
        this.ᐃᐃⵠ[203] = Tv(60, 60, 0, Δⵠ[936], 3);
        this.ᐃᐃⵠ[203].id = 203;
        this.ᐃᐃⵠ[203].info.ᐃΔ[2] = this.ᐃᐃⵠ[203].info.ᐃΔ[0];
        this.ⲆⵠⲆ[150] = Tv(68, 68, 0, Δⵠ[524], 3);
        this.ⲆⵠⲆ[150].id = 150;
        this.ᐃᐃⵠ[150] = Tv(60, 60, 0, Δⵠ[523], 3);
        this.ᐃᐃⵠ[150].id = 150;
        this.ᐃᐃⵠ[150].info.ᐃΔ[2] = this.ᐃᐃⵠ[150].info.ᐃΔ[0];
        this.ⲆⵠⲆ[202] = Tv(68, 68, 0, Δⵠ[939], 3);
        this.ⲆⵠⲆ[202].id = 202;
        this.ᐃᐃⵠ[202] = Tv(60, 60, 0, Δⵠ[938], 3);
        this.ᐃᐃⵠ[202].id = 202;
        this.ᐃᐃⵠ[202].info.ᐃΔ[2] = this.ᐃᐃⵠ[202].info.ᐃΔ[0];
        this.ⲆⵠⲆ[19] = Tv(68, 68, 0, Δⵠ[934], 3);
        this.ⲆⵠⲆ[19].id = 19;
        this.ᐃᐃⵠ[19] = Tv(60, 60, 0, Δⵠ[932], 3);
        this.ᐃᐃⵠ[19].id = 19;
        this.ⲆΔⲆ[39] = Tv(60, 60, 0, Δⵠ[933], 3);
        this.ⲆΔⲆ[39].id = 39;
        this.ⲆⵠⲆ[20] = Tv(68, 68, 0, Δⵠ[923], 3);
        this.ⲆⵠⲆ[20].id = 20;
        this.ᐃᐃⵠ[20] = Tv(60, 60, 0, Δⵠ[921], 3);
        this.ᐃᐃⵠ[20].id = 20;
        this.ⲆΔⲆ[95] = Tv(60, 60, 0, Δⵠ[922], 3);
        this.ⲆΔⲆ[95].id = 95;
        this.ⲆⵠⲆ[21] = Tv(68, 68, 0, Δⵠ[927], 3);
        this.ⲆⵠⲆ[21].id = 21;
        this.ᐃᐃⵠ[21] = Tv(60, 60, 0, Δⵠ[925], 3);
        this.ᐃᐃⵠ[21].id = 21;
        this.ⲆΔⲆ[96] = Tv(60, 60, 0, Δⵠ[926], 3);
        this.ⲆΔⲆ[96].id = 96;
        this.ⲆⵠⲆ[22] = Tv(68, 68, 0, Δⵠ[931], 3);
        this.ⲆⵠⲆ[22].id = 22;
        this.ᐃᐃⵠ[22] = Tv(60, 60, 0, Δⵠ[929], 3);
        this.ᐃᐃⵠ[22].id = 22;
        this.ⲆΔⲆ[97] = Tv(60, 60, 0, Δⵠ[930], 3);
        this.ⲆΔⲆ[97].id = 97;
        this.ⲆⵠⲆ[60] = Tv(68, 68, 0, Δⵠ[736], 3);
        this.ⲆⵠⲆ[60].id = 60;
        this.ᐃᐃⵠ[60] = Tv(60, 60, 0, Δⵠ[735], 3);
        this.ᐃᐃⵠ[60].id = 60;
        this.ⲆΔⲆ[127] = Tv(60, 60, 0, Δⵠ[737], 3);
        this.ⲆΔⲆ[127].id = 127;
        this.ⲆⵠⲆ[90] = Tv(68, 68, 0, Δⵠ[739], 3);
        this.ⲆⵠⲆ[90].id = 90;
        this.ᐃᐃⵠ[90] = Tv(60, 60, 0, Δⵠ[738], 3);
        this.ᐃᐃⵠ[90].id = 90;
        this.ⲆΔⲆ[173] = Tv(60, 60, 0, Δⵠ[740], 3);
        this.ⲆΔⲆ[173].id = 173;
        this.ⲆⵠⲆ[92] = Tv(68, 68, 0, Δⵠ[745], 3);
        this.ⲆⵠⲆ[92].id = 92;
        this.ᐃᐃⵠ[92] = Tv(60, 60, 0, Δⵠ[744], 3);
        this.ᐃᐃⵠ[92].id = 92;
        this.ⲆΔⲆ[174] = Tv(60, 60, 0, Δⵠ[746], 3);
        this.ⲆΔⲆ[174].id = 174;
        this.ⲆⵠⲆ[93] = Tv(68, 68, 0, Δⵠ[748], 3);
        this.ⲆⵠⲆ[93].id = 93;
        this.ᐃᐃⵠ[93] = Tv(60, 60, 0, Δⵠ[747], 3);
        this.ᐃᐃⵠ[93].id = 93;
        this.ⲆΔⲆ[175] = Tv(60, 60, 0, Δⵠ[749], 3);
        this.ⲆΔⲆ[175].id = 175;
        this.ⲆⵠⲆ[91] = Tv(68, 68, 0, Δⵠ[742], 3);
        this.ⲆⵠⲆ[91].id = 91;
        this.ᐃᐃⵠ[91] = Tv(60, 60, 0, Δⵠ[741], 3);
        this.ᐃᐃⵠ[91].id = 91;
        this.ⲆΔⲆ[176] = Tv(60, 60, 0, Δⵠ[743], 3);
        this.ⲆΔⲆ[176].id = 176;
        this.ⲆⵠⲆ[100] = Tv(68, 68, 0, Δⵠ[1165], 3);
        this.ⲆⵠⲆ[100].id = 100;
        this.ᐃᐃⵠ[100] = Tv(60, 60, 0, Δⵠ[1164], 3);
        this.ᐃᐃⵠ[100].id = 100;
        this.ⲆΔⲆ[Wr.ⵠⲆᐃⲆⵠ] = Tv(60, 60, 0, Δⵠ[Ur.ⵠΔⵠᐃΔᐃΔᐃᐃ], 3);
        this.ⲆΔⲆ[Wr.ⵠⲆᐃⲆⵠ].id = Wr.ⵠⲆᐃⲆⵠ;
        this.ⲆⵠⲆ[34] = Tv(68, 68, 0, Δⵠ[945], 3);
        this.ⲆⵠⲆ[34].id = 34;
        this.ᐃᐃⵠ[34] = Tv(60, 60, 0, Δⵠ[943], 3);
        this.ᐃᐃⵠ[34].id = 34;
        this.ⲆΔⲆ[30] = Tv(60, 60, 0, Δⵠ[944], 3);
        this.ⲆΔⲆ[30].id = 30;
        this.ⲆⵠⲆ[44] = Tv(68, 68, 0, Δⵠ[948], 3);
        this.ⲆⵠⲆ[44].id = 44;
        this.ᐃᐃⵠ[44] = Tv(60, 60, 0, Δⵠ[946], 3);
        this.ᐃᐃⵠ[44].id = 44;
        this.ⲆΔⲆ[92] = Tv(60, 60, 0, Δⵠ[947], 3);
        this.ⲆΔⲆ[92].id = 92;
        this.ⲆⵠⲆ[17] = Tv(68, 68, 0, Δⵠ[878], 3);
        this.ⲆⵠⲆ[17].id = 17;
        this.ᐃᐃⵠ[17] = Tv(60, 60, 0, Δⵠ[877], 3);
        this.ᐃᐃⵠ[17].id = 17;
        this.ⲆΔⲆ[32] = Tv(60, 60, 0, Δⵠ[879], 3);
        this.ⲆΔⲆ[32].id = 32;
        this.ⲆⵠⲆ[63] = Tv(68, 68, 0, Δⵠ[568], 3);
        this.ⲆⵠⲆ[63].id = 63;
        this.ᐃᐃⵠ[63] = Tv(60, 60, 0, Δⵠ[566], 3);
        this.ᐃᐃⵠ[63].id = 63;
        this.ⲆΔⲆ[130] = Tv(60, 60, 0, Δⵠ[567], 3);
        this.ⲆΔⲆ[130].id = 130;
        this.ⲆⵠⲆ[187] = Tv(68, 68, 0, Δⵠ[591], 3);
        this.ⲆⵠⲆ[187].id = 187;
        this.ᐃᐃⵠ[187] = Tv(60, 60, 0, Δⵠ[253], 3);
        this.ᐃᐃⵠ[187].id = 187;
        this.ⲆⵠⲆ[as.ᐃᐃⵠⵠᐃΔᐃ] = Tv(68, 68, 0, Δⵠ[Ur.ⵠΔⵠⲆᐃᐃᐃⵠΔ], 3);
        this.ⲆⵠⲆ[as.ᐃᐃⵠⵠᐃΔᐃ].id = as.ᐃᐃⵠⵠᐃΔᐃ;
        this.ᐃᐃⵠ[as.ᐃᐃⵠⵠᐃΔᐃ] = Tv(60, 60, 0, Δⵠ[Ur.ΔⵠᐃᐃΔⵠᐃⵠΔ], 3);
        this.ᐃᐃⵠ[as.ᐃᐃⵠⵠᐃΔᐃ].id = as.ᐃᐃⵠⵠᐃΔᐃ;
        this.ⲆⵠⲆ[as.ᐃⵠⲆΔⲆⲆΔ] = Tv(68, 68, 0, Δⵠ[Ur.ⲆΔⵠΔⵠⲆᐃⵠΔ], 3);
        this.ⲆⵠⲆ[as.ᐃⵠⲆΔⲆⲆΔ].id = as.ᐃⵠⲆΔⲆⲆΔ;
        this.ᐃᐃⵠ[as.ᐃⵠⲆΔⲆⲆΔ] = Tv(60, 60, 0, Δⵠ[Ur.ΔⵠᐃⵠⲆⵠⵠᐃΔ], 3);
        this.ᐃᐃⵠ[as.ᐃⵠⲆΔⲆⲆΔ].id = as.ᐃⵠⲆΔⲆⲆΔ;
        this.ⲆⵠⲆ[as.ΔⵠᐃᐃᐃΔᐃ] = Tv(68, 68, 0, Δⵠ[Ur.ΔⲆΔΔΔⲆⵠᐃⵠ], 3);
        this.ⲆⵠⲆ[as.ΔⵠᐃᐃᐃΔᐃ].id = as.ΔⵠᐃᐃᐃΔᐃ;
        this.ᐃᐃⵠ[as.ΔⵠᐃᐃᐃΔᐃ] = Tv(60, 60, 0, Δⵠ[Ur.ⵠΔΔᐃΔⲆᐃⵠᐃ], 3);
        this.ᐃᐃⵠ[as.ΔⵠᐃᐃᐃΔᐃ].id = as.ΔⵠᐃᐃᐃΔᐃ;
        this.ⲆⵠⲆ[as.ΔᐃΔᐃⵠᐃΔ] = Tv(68, 68, 0, Δⵠ[Ur.ΔΔⵠᐃΔⵠᐃΔⲆ], 3);
        this.ⲆⵠⲆ[as.ΔᐃΔᐃⵠᐃΔ].id = as.ΔᐃΔᐃⵠᐃΔ;
        this.ᐃᐃⵠ[as.ΔᐃΔᐃⵠᐃΔ] = Tv(60, 60, 0, Δⵠ[Ur.ᐃΔⲆⲆᐃΔⵠᐃⲆ], 3);
        this.ᐃᐃⵠ[as.ΔᐃΔᐃⵠᐃΔ].id = as.ΔᐃΔᐃⵠᐃΔ;
        this.ⲆⵠⲆ[as.ⲆᐃⵠᐃⲆᐃⵠ] = Tv(68, 68, 0, Δⵠ[Ur.ᐃΔⵠⲆΔᐃⵠⲆᐃ], 3);
        this.ⲆⵠⲆ[as.ⲆᐃⵠᐃⲆᐃⵠ].id = as.ⲆᐃⵠᐃⲆᐃⵠ;
        this.ᐃᐃⵠ[as.ⲆᐃⵠᐃⲆᐃⵠ] = Tv(60, 60, 0, Δⵠ[Ur.ⵠⵠⵠᐃⵠΔᐃᐃⲆ], 3);
        this.ᐃᐃⵠ[as.ⲆᐃⵠᐃⲆᐃⵠ].id = as.ⲆᐃⵠᐃⲆᐃⵠ;
        this.ⵠΔΔⲆⲆⵠⲆ = function () {
            for (var a = Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ, b = 10, c = 10, d = 0; d < a.length; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ΔⲆⵠⲆᐃΔᐃ = function () {
            var a = Math.floor(Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) * (10 + this.ⲆⵠⲆ[0].info.ᐃΔ[0].width) + 35);
            for (var b = 0; b < this.ⲆⵠⲆ.length; b++) {
                if (this.ⲆⵠⲆ[b]) {
                    this.ⲆⵠⲆ[b].info.translate.x = a;
                    this.ⲆⵠⲆ[b].info.translate.y = 22;
                }
            }
            this.ᐃⵠᐃΔΔᐃⲆ.info.translate.x = a + 17;
            this.ᐃⵠᐃΔΔᐃⲆ.info.translate.y = 22 + Δⵠ[339].height;
            this.ΔⲆᐃⲆⵠⲆⵠ.info.translate.x = a + 17;
            this.ΔⲆᐃⲆⵠⲆⵠ.info.translate.y = 30;
            this.ⵠⵠᐃⲆⲆⲆΔ.info.translate.x = a + 17;
            this.ⵠⵠᐃⲆⲆⲆΔ.info.translate.y = 22 + Δⵠ[339].height;
        };
        this.ΔⵠⲆⲆᐃᐃᐃⲆΔ = function () {
            var a = Math.floor((On - Δⵠ[556][0].width) / 2);
            for (var b = 0; b < this.ᐃⲆᐃᐃⵠ.length; b++) {
                this.ᐃⲆᐃᐃⵠ[b].button.info.translate.x = a;
                this.ᐃⲆᐃᐃⵠ[b].button.info.translate.y = -13;
            }
        };
        this.ΔⲆᐃⵠⵠⲆΔ = function () {
            var a = 12 + Math.floor((10 + this.ᐃⵠᐃΔᐃᐃⵠ.info.ᐃΔ[0].width) * Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) + 35);
            this.ᐃⵠᐃΔᐃᐃⵠ.info.translate.x = a;
            this.ᐃⵠᐃΔᐃᐃⵠ.info.translate.y = 33;
            this.ⲆᐃⲆⵠⵠⲆᐃ.info.translate.x = this.ᐃⵠᐃΔᐃᐃⵠ.info.translate.x;
            this.ⲆᐃⲆⵠⵠⲆᐃ.info.translate.y = 137;
            this.ⲆⵠⵠⵠⲆΔᐃ.info.translate.x = this.ᐃⵠᐃΔᐃᐃⵠ.info.translate.x;
            this.ⲆⵠⵠⵠⲆΔᐃ.info.translate.y = 240;
        };
        this.ΔΔΔⲆΔⵠⵠ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) * (10 + this.ⲆΔᐃⲆΔΔⵠ.info.ᐃΔ[0].width) + 35);
            this.ⲆΔᐃⲆΔΔⵠ.info.translate.x = a;
            this.ⲆΔᐃⲆΔΔⵠ.info.translate.y = 36;
            a += 83;
            this.ΔΔΔΔⵠᐃΔ.info.translate.x = a;
            this.ΔΔΔΔⵠᐃΔ.info.translate.y = 36;
            this.ᐃΔⵠᐃΔⲆᐃ.info.translate.x = a;
            this.ᐃΔⵠᐃΔⲆᐃ.info.translate.y = 36;
            this.ⲆΔⵠᐃⲆΔΔ.info.translate.x = a;
            this.ⲆΔⵠᐃⲆΔΔ.info.translate.y = 36;
            this.ᐃΔΔᐃⵠᐃⲆ.info.translate.x = a;
            this.ᐃΔΔᐃⵠᐃⲆ.info.translate.y = 36;
            this.ⵠⲆᐃᐃⲆᐃΔ.info.translate.x = a;
            this.ⵠⲆᐃᐃⲆᐃΔ.info.translate.y = 36;
        };
        this.ⲆᐃⲆⲆᐃⵠΔ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) * (10 + this.ΔⵠⵠⵠΔᐃⵠ.info.ᐃΔ[0].width) + 35);
            this.ΔⵠⵠⵠΔᐃⵠ.info.translate.x = a;
            this.ΔⵠⵠⵠΔᐃⵠ.info.translate.y = 36;
            a += 83;
            this.ⲆᐃΔΔΔᐃⵠ.info.translate.x = a;
            this.ⲆᐃΔΔΔᐃⵠ.info.translate.y = 36;
        };
        this.ⵠᐃΔⵠⲆⲆΔ = function () {
            var a = Math.floor(Math.floor((3 + Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ.length) / 4) * (10 + this.ᐃᐃΔⵠⵠⲆⲆ.info.ᐃΔ[0].width) + 35);
            this.ᐃᐃΔⵠⵠⲆⲆ.info.translate.x = a;
            this.ᐃᐃΔⵠⵠⲆⲆ.info.translate.y = 22;
        };
        this.ⲆΔᐃΔΔᐃᐃ = function () {
            var a = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ;
            if (a.length > 0) {
                var b = Math.floor((On - Tw.ⲆⲆⵠⵠ.max * (a[0].info.width + 5)) / 2);
            }
            for (var c = 0; a.length > c; c++) {
                a[c].info.translate.x = b + c * (a[c].info.width + 5);
                a[c].info.translate.y = Hn - a[c].info.width - 10;
                this.ΔᐃᐃᐃΔ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ΔᐃᐃᐃΔ[a[c].id].info.translate.y = a[c].info.translate.y - this.ΔᐃᐃᐃΔ[a[c].id].info.ᐃΔ[0].height - 6;
            }
        };
        var n;
        var o = 0;
        function p() {
            f.ⵠⵠΔ();
            if (++o == 30) {
                f.ᐃⵠᐃⲆΔⲆⲆ();
                f.ⵠⵠΔ();
                return;
            }
            aj.setTimeout(p, 33);
        }
        this.ⲆⲆᐃⲆⵠ = function (a) {
            if (Tw.ΔⲆΔⲆΔ.open) {
                Tw.ΔⲆΔⲆΔ.ⲆⲆᐃⲆⵠ();
            }
            if (Tw.ΔⲆΔΔΔ.open) {
                Tw.ΔⲆΔΔΔ.ⲆⲆᐃⲆⵠ();
            }
            document.getElementById("team_box").style.display = "none";
            f.ⵠⵠⵠᐃΔ.style.display = "none";
            f.ⵠⵠⵠᐃΔ.open = false;
            f.sign.style.display = "none";
            f.sign.open = yl;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            f.ΔⲆᐃΔ.open = cr;
            document.getElementById("option_in_game").style.display = "none";
            f.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            f.ⲆΔΔⲆ.open = false;
            document.getElementById("cancel_sure_delete").style.display = "none";
            f.ⲆⲆⲆⵠⵠ.open = Qk;
            document.getElementById("chronoquest").style.display = "none";
            f.ᐃᐃⵠⵠ.open = false;
            n = a;
            f.ⵠⲆΔⵠᐃⵠᐃ();
            f.ΔΔ.style.cursor = f.ᐃᐃΔΔΔᐃΔ;
            Ww.ⲆⲆᐃⲆⵠ();
            g = -1;
            q();
            kf();
        };
        var g = -1;
        function q() {
            f.ⵠⵠΔ();
            if (++g == 30) {
                f.stop();
                n();
                return;
            }
            aj.setTimeout(q, 33);
        }
        this.ᐃⲆⲆⲆⵠ = po;
        this.stop = function () {
            this.ᐃⲆⲆⲆⵠ = false;
        };
        this.ⲆΔΔᐃⵠ = function () {
            ᐃⲆΔΔ.ᐃⲆⲆΔᐃⲆᐃⲆⵠ();
            f.ᐃⲆⲆⲆⵠ = true;
            g = -1;
            o = 0;
            p();
        };
        this.ⵠⵠΔ = function () {
            this.ⵠⲆⵠⵠⲆ.translate.x = On - this.ⵠⲆⵠⵠⲆ.ᐃΔ.width - 10;
            this.ⵠⲆⵠⵠⲆ.translate.y = 5;
            cf.ⲆᐃⵠΔΔ.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[725][0].width - 85;
            cf.ⲆᐃⵠΔΔ.translate.y = 10;
            this.ΔⲆᐃΔ.button.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[708][0].width - 10;
            this.ΔⲆᐃΔ.button.info.translate.y = 10;
            this.ᐃᐃⵠⵠ.button.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[755][0].width - 20;
            this.ᐃᐃⵠⵠ.button.info.translate.y = this.ΔⲆᐃΔ.button.info.translate.y + Δⵠ[708][0].height + 5;
            this.options.button.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[727][0].width - 20;
            this.options.button.info.translate.y = this.ᐃᐃⵠⵠ.button.info.translate.y + Δⵠ[727][0].height + 18;
            this.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[727][0].width - 20;
            this.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.info.translate.y = this.options.button.info.translate.y + Δⵠ[783][0].height;
            this.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[727][0].width - 20;
            this.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.info.translate.y = this.options.button.info.translate.y + Δⵠ[783][0].height;
            this.ⵠⵠⵠᐃΔ.button.info.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[795][0].width - 20;
            this.ⵠⵠⵠᐃΔ.button.info.translate.y = this.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.info.translate.y + Δⵠ[795][0].height;
            Tw.ΔᐃⲆⵠΔ.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - 63 - 85;
            Tw.ΔᐃⲆⵠΔ.translate.y = 100;
            Tw.ⵠⲆᐃⲆΔᐃⵠ.translate.x = this.ⵠⲆⵠⵠⲆ.translate.x - Δⵠ[517].width - 85;
            Tw.ⵠⲆᐃⲆΔᐃⵠ.translate.y = Tw.ΔᐃⲆⵠΔ.translate.y + 10 + Δⵠ[546].height;
            this.ΔᐃᐃΔᐃ.translate.y = Hn - 3 - 193;
            this.ΔᐃᐃΔᐃ.translate.x = On - 3 - 193;
            this.ⲆΔᐃΔ.translate.x = 5;
            this.ⲆΔᐃΔ.translate.y = Hn - this.ⲆΔᐃΔ.ᐃΔ.height - 5;
            this.ⵠᐃⵠⵠΔ.button.info.translate.x = gq - 45.5;
            this.ⵠᐃⵠⵠΔ.button.info.translate.y = 50;
            this.ⵠΔΔⲆⲆⵠⲆ();
            this.ⲆΔᐃΔΔᐃᐃ();
            this.ΔⲆⵠⲆᐃΔᐃ();
            this.ⵠᐃΔⵠⲆⲆΔ();
            this.ⲆᐃⲆⲆᐃⵠΔ();
            this.ΔΔΔⲆΔⵠⵠ();
            this.ΔⲆᐃⵠⵠⲆΔ();
            this.ΔⵠⲆⲆᐃᐃᐃⲆΔ();
            this.sign.ⵠᐃΔΔᐃⵠⵠ();
            Ec();
            Tw.ΔⲆΔⲆΔ.ⵠⵠΔ();
            Tw.ΔⲆΔΔΔ.ⵠⵠΔ();
            this.ⲆᐃΔᐃΔⲆⲆⲆⵠ.ⵠⵠΔ();
            this.ΔⲆᐃΔ.ᐃⵠᐃᐃⵠᐃⵠ.ⵠⵠΔ();
            this.ΔⲆᐃΔ.list.ⵠⵠΔ();
            this.ⲆΔΔⲆ.ⵠⵠΔ();
            this.ⲆⲆⲆⵠⵠ.ⵠⵠΔ();
            this.ᐃᐃⵠⵠ.ⵠⵠΔ();
            this.ⵠᐃⵠⵠΔ.ⵠⵠΔ();
            this.options.ⵠⵠΔ();
            this.ⵠⵠⵠᐃΔ.ⵠⵠΔ();
            this.sign.ⵠⵠΔ();
            var a = 0;
            if (o != 30) {
                a = 1500 / (o + 1) - 50;
            }
            if (g != -1) {
                a = -(1500 / (30 - g + 1) - 48);
            }
            this.ⵠᐃⵠⵠΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠⲆⵠⵠⲆ.translate.y -= a > 0 ? a : -a;
            Tw.ΔᐃⲆⵠΔ.translate.y -= a > 0 ? a : -a;
            Tw.ⵠⲆᐃⲆΔᐃⵠ.translate.y -= a > 0 ? a : -a;
            this.ΔⲆᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃᐃⵠⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠⵠⵠᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.info.translate.y -= a > 0 ? a : -a;
            this.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.info.translate.y -= a > 0 ? a : -a;
            cf.ⲆᐃⵠΔΔ.translate.y -= a > 0 ? a : -a;
            this.ⲆΔᐃΔ.translate.y -= a < 0 ? a : -a;
            this.ΔᐃᐃΔᐃ.translate.y -= a < 0 ? a : -a;
        };
        this.ΔΔⲆΔⲆⲆⵠⲆⲆ = function () {
            if (!Tw.ⵠΔᐃᐃᐃ.enabled && this.ⲆΔΔΔᐃΔⵠ && !Tw.ᐃΔᐃᐃⲆ) {
                Xc();
            }
            Uc();
            (function () {
                var a = cf.Δⵠⵠ[0];
                if (cf.mode === 0 || cf.mode === 7 || cf.mode === 2 || cf.mode === 4 || cf.mode === 5 || cf.mode === 6 || cf.mode === 3) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].ⲆⵠⵠⲆΔⵠΔ();
                    }
                } else if (cf.mode === 1) {
                    for (b = 0; b < a.length; b++) {
                        if (Tw.ᐃᐃᐃΔᐃΔⲆ || Tw.ⵠⲆᐃⲆΔᐃⵠ.enabled || a[b].ΔⵠᐃⲆ.ᐃᐃⲆⵠᐃ !== "spectator") {
                            a[b].ⲆⵠⵠⲆΔⵠΔ();
                        }
                    }
                }
            })();
            if (this.ⲆΔΔΔᐃΔⵠ) {
                Dc();
                if (this.ⲆⲆᐃⲆᐃⲆΔ === 1) {
                    this.ΔⲆᐃΔ.button.Δᐃᐃⵠ(d);
                }
                if (cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5 && this.ⵠⵠΔᐃⵠᐃΔ === 1) {
                    this.ᐃᐃⵠⵠ.button.Δᐃᐃⵠ(d);
                }
                this.options.button.Δᐃᐃⵠ(d);
                if (this.ⵠᐃⵠⲆⵠᐃᐃ === 1) {
                    this.ⵠⵠⵠᐃΔ.button.Δᐃᐃⵠ(d);
                }
                if (Ww.ⲆΔΔᐃⵠ) {
                    this.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.Δᐃᐃⵠ(d);
                } else {
                    this.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.Δᐃᐃⵠ(d);
                }
                Kc();
                Hc();
                this.ⲆΔᐃΔ.Δᐃᐃⵠ();
                Yc();
                Lc();
                Wc();
                Nc();
                jc();
                Ac();
                Fc();
                (function () {
                    if (!Tw.ⵠⵠΔⲆ.open && !Tw.ᐃΔⵠⲆⵠ.open && !Tw.ⵠⲆᐃᐃ.open && !Tw.ᐃᐃᐃⵠ.open && !Tw.ⲆⲆᐃΔ.open) {
                        Tw.ᐃⵠⲆᐃⵠ.open = false;
                        var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                        var b = 100;
                        if (a) {
                            for (var c = 0; cf.Δⵠⵠ[35].length > c; c++) {
                                var d = cf.Δⵠⵠ[35][c];
                                var e = ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(d, a);
                                if (e < b) {
                                    b = e;
                                    Tw.ᐃⵠⲆᐃⵠ.open = Fh;
                                    Tw.ᐃⵠⲆᐃⵠ.ⵠᐃⲆⵠ = d.ⵠᐃⲆⵠ;
                                    Tw.ᐃⵠⲆᐃⵠ.ⲆⵠⵠⲆⵠ = d.id;
                                }
                            }
                        }
                    }
                })();
                xc();
                Pc();
                Ic();
                Jc();
                Ec();
                Mc();
            }
            if (Tw.ⵠΔᐃᐃᐃ.enabled) {
                kc();
            }
            Rc();
            if (this.ⲆΔΔΔᐃΔⵠ && this.ᐃᐃⵠΔⵠΔⵠ === 1) {
                Oc();
            }
            Tw.ⵠᐃⵠⲆⵠⲆᐃ.Δᐃᐃⵠ();
            Tw.alert.Δᐃᐃⵠ("#FFF", "#000");
            if (this.ⲆΔΔΔᐃΔⵠ) {
                Tw.ⵠΔᐃᐃᐃ.Δᐃᐃⵠ();
                Tw.ⵠᐃⵠⵠΔ.Δᐃᐃⵠ();
                Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.Δᐃᐃⵠ(yf.ⲆΔᐃⲆ.x, yf.ⲆΔᐃⲆ.y);
            }
            Sc();
        };
        this.ⵠⵠⲆΔⲆᐃᐃᐃⲆ = function () {
            Tw.ⲆⲆⵠ.ⵠⵠΔ();
            Tw.ⲆΔᐃΔ.ⵠⵠΔ();
            if (!Tw.reconnect.enabled && Tw.ᐃΔΔΔᐃ) {
                Tw.control.ⵠⵠΔ();
                Tw.ΔᐃⲆⵠΔ.ⵠⵠΔ();
            }
            cf.ⵠⵠΔ();
            this.ᐃᐃⵠⵠ.ⵠⵠᐃⲆΔΔᐃᐃΔ();
        };
        this.ᐃΔⵠⲆⵠⲆⲆⵠⵠ = function () {
            yv();
        };
        this.ⵠΔⲆΔⵠᐃⵠΔᐃ = function () {
            ᐃⲆΔΔ.ᐃΔⵠᐃΔⵠᐃΔᐃ();
            ᐃⲆΔΔ.ⵠⲆᐃⲆᐃⲆΔⲆⲆ();
            ᐃⲆΔΔ.ΔΔⵠᐃⵠⲆΔⵠΔ();
            ᐃⲆΔΔ.ΔᐃⵠⵠⵠΔⵠⵠⲆ();
        };
        this.Δᐃᐃⵠ = function () {
            if (!Tw.reconnect.enabled && Tw.ᐃΔΔΔᐃ) {
                this.ⵠΔⲆΔⵠᐃⵠΔᐃ();
            }
            Ww.ΔΔΔⵠⵠⲆΔⲆᐃ();
            this.ⵠⵠⲆΔⲆᐃᐃᐃⲆ();
            if (df.ⲆΔᐃᐃᐃⲆⲆ !== 1) {
                this.ᐃΔⵠⲆⵠⲆⲆⵠⵠ();
                this.ΔΔⲆΔⲆⲆⵠⲆⲆ();
            } else {
                var a = ⵠᐃ.ⲆⵠⲆΔΔΔⵠ;
                _c(d, a, gq - a.width / 4, hq - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ⵠⵠⵠⲆΔⵠᐃ = function (a) {
            if (!Tw.ΔⲆΔⲆΔ.open && !Tw.ΔⲆΔΔΔ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (Tw.ΔⲆΔⲆΔ.open && a.keyCode === 27) {
                Tw.ΔⲆΔⲆΔ.ⲆⲆᐃⲆⵠ();
            } else if (Tw.ΔⲆΔΔΔ.open && a.keyCode === 27) {
                Tw.ΔⲆΔΔΔ.ⲆⲆᐃⲆⵠ();
            } else if (Tw.ΔⲆΔⲆΔ.open || Tw.ΔⲆΔΔΔ.open || a.keyCode != 79 || g != -1) {
                if (a.keyCode == 13 && g == -1) {
                    if (Tw.ΔⲆΔΔΔ.open) {
                        Tw.ΔⲆΔΔΔ.ΔΔΔⲆΔᐃᐃ();
                    } else {
                        Tw.ΔⲆΔⲆΔ.ⲆΔΔᐃⵠ();
                    }
                } else if (!Tw.ΔⲆΔⲆΔ.open && !Tw.ΔⲆΔΔΔ.open) {
                    if (a.keyCode === 82) {
                        Tw.ΔᐃⲆⵠΔ.ⲆⲆⲆᐃᐃⵠᐃ();
                    } else if (a.keyCode !== 80 || cf.mode !== 1 || Tw.ᐃᐃᐃΔᐃΔⲆ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Tw.ᐃⵠΔᐃ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ[b];
                                if (c) {
                                    ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Tw.ᐃⵠⵠΔⲆᐃᐃ = !Tw.ᐃⵠⵠΔⲆᐃᐃ;
                        } else if (a.keyCode == 71) {
                            Tw.ᐃⵠΔᐃ.ᐃⵠⲆⵠⵠΔⵠⲆⲆ();
                        }
                    } else {
                        Tw.ⵠⲆᐃⲆΔᐃⵠ.ⲆⲆⲆᐃᐃⵠᐃ();
                    }
                }
            } else {
                Tw.ΔⲆΔΔΔ.ⵠΔⲆⵠⵠᐃᐃⲆⲆ();
            }
            zf.up(a);
        };
        this.ΔⵠΔⲆⵠᐃⵠ = function (a) {
            zf.down(a);
            if (!Tw.ΔⲆΔⲆΔ.open && !Tw.ΔⲆΔΔΔ.open) {
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
                if (a.code === Settings.AutoRecycle.k) Settings.AutoRecycle.e = !Settings.AutoRecycle.e;
                if (a.code === Settings.AutoCraft.k) Settings.AutoCraft.e = !Settings.AutoCraft.e;
                if (a.code === Settings.Spectator.k) {
                    Spectator = !Spectator;
                }
            }
        };
        this.ⲆⵠΔᐃᐃⲆⵠ = function (b) {
            yf.ⲆΔᐃⲆ = Uv(f.ΔΔ, b);
            var c = false;
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                f.ΔᐃᐃΔᐃ.focus(yf.ⲆΔᐃⲆ);
            }
            var d = Tw.ⵠⵠΔⲆ;
            if (Tw.ᐃⵠΔᐃ.id < 0 && d.id >= 0) {
                if (!Tw.ⵠⵠΔⲆ.lock || Tw.id === Tw.ⵠⵠΔⲆ.ⵠᐃⲆⵠ) {
                    c |= f.ⲆⵠⲆ[Tw.ⵠⵠΔⲆ.id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                }
            }
            var e = Tw.ⵠⲆᐃᐃ;
            if (e.open && e.ⵠⵠᐃⵠᐃⵠᐃ > 0) {
                c |= f.ⲆᐃΔΔΔᐃⵠ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            var j = Tw.ⲆⲆᐃΔ;
            if (j.open && j.ᐃᐃᐃᐃΔᐃᐃ > 0) {
                c |= f.ΔΔΔΔⵠᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                c |= f.ᐃΔⵠᐃΔⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                c |= f.ⲆΔⵠᐃⲆΔΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                c |= f.ᐃΔΔᐃⵠᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                c |= f.ⵠⲆᐃᐃⲆᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            var a = Tw.ᐃᐃᐃⵠ;
            if (a.open && a.ⲆᐃⲆΔⲆΔⵠ > 0) {
                c |= f.ⲆⵠⵠⵠⲆΔᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.sign.open) {
                c |= f.sign.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (!Tw.ⵠⵠΔⲆ.lock) {
                if (Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ) {
                    c |= f.ⵠⵠᐃⲆⲆⲆΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                }
            }
            if (Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ) {
                c |= f.ᐃⵠᐃΔΔᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open && !f.ⵠⵠⵠᐃΔ.open) {
                for (var k = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ, m = 0; m < k.length; m++) {
                    var n = k[m].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                    c |= n;
                    if (n) {
                        Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.start(m, yf.ⲆΔᐃⲆ);
                    }
                    if (d.open && (d.id < 0 || d.id == k[m].id) || Tw.ᐃΔⵠⲆⵠ.open && k[m].id === 109 || Tw.ᐃⵠⲆᐃⵠ.open && k[m].id === 180 || Tw.ᐃᐃᐃⵠ.open && (k[m].id === 109 || k[m].id === 131) || Tw.ⵠⲆᐃᐃ.open && k[m].id === 134 || Tw.ⲆⲆᐃΔ.open && k[m].id === 109) {
                        c |= f.ΔᐃᐃᐃΔ[k[m].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                    }
                }
            }
            if (Tw.ⵠⲆⵠⲆᐃ.open) {
                c |= f.ⵠⲆⵠⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (f.ⲆⵠⵠⲆΔ != -1) {
                if (c |= f.ᐃⲆᐃᐃⵠ[f.ⲆⵠⵠⲆΔ].button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov)) {
                    var o = true;
                }
            } else {
                o = Wh;
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !o && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open && !Tw.ᐃΔᐃᐃⲆ) {
                k = Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                }
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ⵠᐃⵠⵠΔ.open && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                c |= f.ⵠᐃⵠⵠΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                c |= f.ΔⲆᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                c |= f.options.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open) {
                c |= f.ⵠⵠⵠᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open && !f.ⵠⵠⵠᐃΔ.open) {
                if (Ww.ⲆΔΔᐃⵠ) {
                    c |= f.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                } else {
                    c |= f.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                }
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⵠⵠⵠᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
                c |= f.ᐃᐃⵠⵠ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
            }
            if (!c && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open && !f.sign.open) {
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ >= 0) {
                    ᐃⲆΔΔ.ⲆⲆΔᐃⵠⲆⵠᐃⵠ();
                } else if (!o) {
                    yf.down();
                }
            }
        };
        this.ⲆⵠᐃᐃᐃᐃΔ = function (b) {
            yf.ⲆΔᐃⲆ = Uv(f.ΔΔ, b);
            yf.up();
            if (!Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.release()) {
                var c = Tw.ⵠⵠΔⲆ;
                var d = Tw.ᐃΔⵠⲆⵠ;
                var e = Tw.ᐃⵠⲆᐃⵠ;
                var i = Tw.ⵠⲆᐃᐃ;
                var j = Tw.ⲆⲆᐃΔ;
                var k = Tw.ᐃᐃᐃⵠ;
                if (Tw.control.attack) {
                    Tw.control.attack = 0;
                    ᐃⲆΔΔ.ⲆⵠΔⵠΔⵠⲆⵠᐃ();
                }
                if (f.ⲆⵠⵠⲆΔ != -1) {
                    var m = f.ᐃⲆᐃᐃⵠ[f.ⲆⵠⵠⲆΔ].button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        f.ᐃⲆᐃᐃⵠ[f.ⲆⵠⵠⲆΔ].action();
                    }
                }
                if (Tw.ᐃⵠΔᐃ.id < 0 && c.id >= 0 && !f.ⲆΔΔⲆ.open) {
                    if (!Tw.ⵠⵠΔⲆ.lock || Tw.ⵠⵠΔⲆ.ⵠᐃⲆⵠ === Tw.id) {
                        if (m = f.ⲆⵠⲆ[Tw.ⵠⵠΔⲆ.id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                            ᐃⲆΔΔ.ⲆᐃΔⵠΔᐃⲆⲆΔ(c);
                        }
                    }
                }
                if ((i = Tw.ⵠⲆᐃᐃ).open && i.ⵠⵠᐃⵠᐃⵠᐃ > 0 && !f.ⲆΔΔⲆ.open) {
                    if (m = f.ⲆᐃΔΔΔᐃⵠ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        ᐃⲆΔΔ.ⲆⵠᐃⵠΔΔΔᐃⵠ(i);
                    }
                }
                if ((j = Tw.ⲆⲆᐃΔ).open && j.ᐃᐃᐃᐃΔᐃᐃ > 0 && !f.ⲆΔΔⲆ.open) {
                    switch (j.type) {
                        case 24:
                            if (m = f.ΔΔΔΔⵠᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                                ᐃⲆΔΔ.ᐃΔⲆⵠⲆΔΔ(j);
                            }
                            break;
                        case 25:
                            if (m = f.ᐃΔⵠᐃΔⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                                ᐃⲆΔΔ.ᐃΔⲆⵠⲆΔΔ(j);
                            }
                            break;
                        case 26:
                            if (m = f.ⲆΔⵠᐃⲆΔΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                                ᐃⲆΔΔ.ᐃΔⲆⵠⲆΔΔ(j);
                            }
                            break;
                        case 27:
                            if (m = f.ᐃΔΔᐃⵠᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                                ᐃⲆΔΔ.ᐃΔⲆⵠⲆΔΔ(j);
                            }
                            break;
                        case 28:
                            if (m = f.ⵠⲆᐃᐃⲆᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                                ᐃⲆΔΔ.ᐃΔⲆⵠⲆΔΔ(j);
                            }
                    }
                }
                if ((k = Tw.ᐃᐃᐃⵠ).open && k.ⲆᐃⲆΔⲆΔⵠ > 0 && !f.ⲆΔΔⲆ.open) {
                    if (m = f.ⲆⵠⵠⵠⲆΔᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        ᐃⲆΔΔ.ΔⵠᐃⵠⲆΔⲆⲆⲆ(k);
                    }
                }
                if (Tw.sign.open && !f.ⲆΔΔⲆ.open) {
                    if (m = f.sign.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        f.sign.select();
                    }
                }
                if (!Tw.ⵠⵠΔⲆ.lock && !f.ⲆΔΔⲆ.open) {
                    if (Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ && (m = f.ⵠⵠᐃⲆⲆⲆΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv))) {
                        ᐃⲆΔΔ.ᐃⵠΔΔⲆΔᐃⲆᐃ(c);
                    }
                }
                if (Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ && !f.ⲆΔΔⲆ.open && (m = f.ᐃⵠᐃΔΔᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv))) {
                    ᐃⲆΔΔ.ΔᐃⲆⵠⲆΔᐃᐃⲆ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Tw.ⵠⲆⵠⲆᐃ.open) {
                    if (m = f.ⵠⲆⵠⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        ᐃⲆΔΔ.ⵠⲆⵠⲆᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.id < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled && !f.ⲆΔΔⲆ.open) {
                    for (var l = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ, o = 0; o < l.length; o++) {
                        if (m = l[o].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                    f.ⲆΔΔⲆ.ⵠⲆⲆⵠⲆⲆⲆ(l[o].id);
                                }
                            } else {
                                ᐃⲆΔΔ.ⲆⲆⵠΔⲆ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || l[o].id === c.id)) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                ᐃⲆΔΔ.ⲆΔᐃⲆᐃΔᐃⵠΔ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                ᐃⲆΔΔ.ⲆᐃⲆᐃⲆⵠⵠΔΔ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                ᐃⲆΔΔ.ⲆΔⵠΔΔΔᐃⵠᐃ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 134) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                ᐃⲆΔΔ.ᐃⵠⲆⵠᐃⲆⵠⵠⵠ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (j.open && l[o].id === 109) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                ᐃⲆΔΔ.ⲆⵠⲆᐃΔⵠᐃΔΔ(j, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = f.ΔᐃᐃᐃΔ[l[o].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0) {
                                if (l[o].id === 109) {
                                    ᐃⲆΔΔ.ΔᐃᐃᐃⲆⵠΔ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    ᐃⲆΔΔ.ΔᐃᐃᐃⲆⵠΔ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled && !f.ⲆΔΔⲆ.open && !Tw.ᐃΔᐃᐃⲆ) {
                    l = Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ;
                    o = 0;
                    for (; l.length > o; o++) {
                        if (m = l[o].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                            ᐃᐃᐃⵠΔ = ᐃⲆΔΔ.ᐃⵠᐃⵠΔⲆΔΔⲆ(l[o].id);
                            if (ᐃᐃᐃⵠΔ && ga) {
                                ga("send", "event", "Game", "craft", fs[Zg[l[o].id].ΔⵠⲆⵠ].name);
                            }
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ⵠᐃⵠⵠΔ.open && !f.ⵠⵠⵠᐃΔ.open && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open) {
                    if (m = f.ⵠᐃⵠⵠΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv)) {
                        Vw.ⵠᐃⵠⵠΔ.select();
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⵠⵠⵠᐃΔ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open) {
                    if (Ww.ⲆΔΔᐃⵠ) {
                        if (m = f.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                            Ww.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = f.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        Ww.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                    if (m = f.options.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        f.options.ⲆⵠᐃⵠⵠᐃᐃᐃⲆ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open && f.ⵠᐃⵠⲆⵠᐃᐃ === 1) {
                    if (m = f.ⵠⵠⵠᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        f.ⵠⵠⵠᐃΔ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ⲆΔΔⲆ.open && !f.ⵠⵠⵠᐃΔ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && f.ⲆⲆᐃⲆᐃⲆΔ === 1) {
                    if (m = f.ΔⲆᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        f.ΔⲆᐃΔ.ΔΔⲆⲆΔⵠⵠᐃΔ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5 && f.ⵠⵠΔᐃⵠᐃΔ === 1) {
                    if (m = f.ᐃᐃⵠⵠ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                        f.ᐃᐃⵠⵠ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ && b.which == 3) {
                    f.ⲆⲆⲆⵠⵠ.ⵠⲆⲆⵠⲆⲆⲆ();
                }
            }
        };
        this.ⲆᐃᐃⲆΔⲆⲆ = Tn;
        this.ⲆⵠⲆᐃⲆⵠᐃ = function (b) {
            yf.ⲆΔᐃⲆ = Uv(f.ΔΔ, b);
            var d = Ga;
            Vw.ⲆΔⲆᐃᐃ.display = 0;
            Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.ΔᐃΔΔⲆ(yf.ⲆΔᐃⲆ);
            if (f.ⲆⵠⵠⲆΔ != -1) {
                d |= f.ᐃⲆᐃᐃⵠ[f.ⲆⵠⵠⲆΔ].button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            var e = Tw.ⵠⲆᐃᐃ;
            if (e.open && e.ⵠⵠᐃⵠᐃⵠᐃ > 0) {
                d |= f.ⲆᐃΔΔΔᐃⵠ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            var i = Tw.ⲆⲆᐃΔ;
            if (i.open && i.ᐃᐃᐃᐃΔᐃᐃ > 0) {
                d |= f.ΔΔΔΔⵠᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                d |= f.ᐃΔⵠᐃΔⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                d |= f.ⲆΔⵠᐃⲆΔΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                d |= f.ᐃΔΔᐃⵠᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                d |= f.ⵠⲆᐃᐃⲆᐃΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            var a = Tw.ᐃᐃᐃⵠ;
            if (a.open && a.ⲆᐃⲆΔⲆΔⵠ > 0) {
                d |= f.ⲆⵠⵠⵠⲆΔᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.sign.open) {
                d |= f.sign.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            var j = Tw.ⵠⵠΔⲆ;
            if (Tw.ᐃⵠΔᐃ.id < 0 && j.id >= 0 && !Tw.ⵠΔᐃᐃᐃ.enabled && (!Tw.ⵠⵠΔⲆ.lock || Tw.ⵠⵠΔⲆ.ⵠᐃⲆⵠ === Tw.id)) {
                d |= f.ⲆⵠⲆ[j.id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ⵠⲆⵠⲆᐃ.open) {
                d |= f.ⵠⲆⵠⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (!Tw.ⵠⵠΔⲆ.lock && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                if (Tw.ⵠⵠΔⲆ.ⵠⲆΔⲆᐃΔᐃ) {
                    d |= f.ⵠⵠᐃⲆⲆⲆΔ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                }
            }
            if (Tw.ⵠⵠΔⲆ.ᐃⲆⲆᐃⵠⵠᐃ && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                d |= f.ᐃⵠᐃΔΔᐃⲆ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled) {
                for (var k = Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ, m = 0; m < k.length; m++) {
                    var n = k[m].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                    d |= Vw.ⲆΔⲆᐃᐃ.ΔᐃⲆⲆ(n, k[m], 0);
                    if (j.open && (j.id < 0 || j.id == k[m].id) || Tw.ᐃΔⵠⲆⵠ.open && k[m].id == 109 || Tw.ᐃⵠⲆᐃⵠ.open && k[m].id === 180 || Tw.ᐃᐃᐃⵠ.open && (k[m].id == 109 || k[m].id == 131) || Tw.ⵠⲆᐃᐃ.open && k[m].id == 134 || Tw.ⲆⲆᐃΔ.open && k[m].id == 109) {
                        d |= f.ΔᐃᐃᐃΔ[k[m].id].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                    }
                }
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !Tw.ⵠΔᐃᐃᐃ.enabled && !Tw.ᐃΔᐃᐃⲆ) {
                k = Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ;
                m = 0;
                for (; k.length > m; m++) {
                    n = Wh;
                    n = k[m].ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                    d |= Vw.ⲆΔⲆᐃᐃ.ΔᐃⲆⲆ(n, k[m], 1);
                }
            }
            if (Tw.ᐃⵠΔᐃ.id < 0 && Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && Tw.ⵠᐃⵠⵠΔ.open && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                d |= f.ⵠᐃⵠⵠΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open && f.ⲆⲆᐃⲆᐃⲆΔ === 1) {
                d |= f.ΔⲆᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open) {
                d |= f.options.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open && f.ⵠᐃⵠⲆⵠᐃᐃ === 1) {
                d |= f.ⵠⵠⵠᐃΔ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ᐃᐃⵠⵠ.open && !f.options.open && !f.ⵠⵠⵠᐃΔ.open) {
                if (Ww.ⲆΔΔᐃⵠ) {
                    d |= f.ⵠᐃⵠⲆ.ⵠΔᐃΔᐃⲆᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                } else {
                    d |= f.ⵠᐃⵠⲆ.ⲆⵠᐃΔΔⵠᐃ.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                }
            }
            if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ < 0 && !f.ΔⲆᐃΔ.open && !f.ⲆΔΔⲆ.open && !f.options.open && !f.ⲆⲆⲆⵠⵠ.open && !f.ⵠⵠⵠᐃΔ.open && cf.mode !== 2 && cf.mode !== 4 && cf.mode !== pw.ᐃΔⵠΔⲆΔⲆᐃᐃ && f.ⵠⵠΔᐃⵠᐃΔ === 1) {
                d |= f.ᐃᐃⵠⵠ.button.ΔᐃⲆⲆ(f.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
            }
            if (d !== f.ⲆᐃᐃⲆΔⲆⲆ) {
                f.ⲆᐃᐃⲆΔⲆⲆ = d;
                c.style.cursor = d ? f.ⵠᐃⲆⵠⵠⲆᐃ : f.ᐃᐃΔΔΔᐃΔ;
            }
        };
        this.ᐃⵠᐃⲆΔⲆⲆ = function () {
            aj.addEventListener("mousedown", this.ⲆⵠΔᐃᐃⲆⵠ, Qj);
            aj.addEventListener("mouseup", this.ⲆⵠᐃᐃᐃᐃΔ, false);
            aj.addEventListener("mousemove", this.ⲆⵠⲆᐃⲆⵠᐃ, xj);
            aj.addEventListener("keyup", this.ⵠⵠⵠⲆΔⵠᐃ, So);
            aj.addEventListener("keydown", this.ΔⵠΔⲆⵠᐃⵠ, false);
        };
        this.ⵠⲆΔⵠᐃⵠᐃ = function () {
            aj.removeEventListener("mousedown", this.ⲆⵠΔᐃᐃⲆⵠ, false);
            aj.removeEventListener("mouseup", this.ⲆⵠᐃᐃᐃᐃΔ, Vh);
            aj.removeEventListener("mousemove", this.ⲆⵠⲆᐃⲆⵠᐃ, false);
            aj.removeEventListener("keyup", this.ⵠⵠⵠⲆΔⵠᐃ, false);
            aj.removeEventListener("keydown", this.ΔⵠΔⲆⵠᐃⵠ, Qj);
        };
    }
    function Pw() {
        ΔⲆⵠᐃ.ⲆᐃΔⲆΔΔΔ("https://twitter.com/intent/tweet?text=I%20survived%20" + Tw.ⵠᐃⲆ + "%20days%20with%20" + Tw.ΔⲆΔᐃΔᐃΔ.ⲆΔⲆⲆⵠ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function Qw(b, c, d, e, f) {
        Re($v, b, c, d, e, f);
        const g = Nw(Zv[0], Zv[1], Zv[2], Zv[3], Zv[4], Zv[0]);
        $q(Zv[1], Zv[2], Zv[3], Zv[4]);
        return ~(g & 50987) & g | ~(g & 50987) & 50987;
    }
    function ef() {
        ΔⲆⵠᐃ.ⲆᐃΔⲆΔΔΔ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function tf(e, h) {
        this.ΔΔ = e;
        this.Ⲇ = h;
        if (aj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ᐃᐃΔΔΔᐃΔ = "default";
            this.ⵠᐃⲆⵠⵠⲆᐃ = "pointer";
        } else {
            this.ᐃᐃΔΔΔᐃΔ = "url('img/cursor0.png'), default";
            this.ⵠᐃⲆⵠⵠⲆᐃ = "url('img/cursor1.png'), pointer";
        }
        var R = this;
        function i(c, d, e, i, j) {
            var a = this;
            for (var k = d + 9, m = 0, n = i, o = d; o < k; o++) {
                R.buttons[o].info.callback = q;
                R.buttons[o].info.ᐃᐃᐃⵠᐃᐃⵠᐃᐃ = c;
            }
            function p() {
                var a = c[n];
                df.ⲆΔⲆⲆᐃᐃᐃ = Vv(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, _q, 10, 8);
                if (Tk !== a.level) {
                    df.ᐃⵠᐃᐃΔᐃⲆ = Vv("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                } else {
                    df.ᐃⵠᐃᐃΔᐃⲆ = Vv("by " + a.ⵠⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, _q, 10, 8);
                }
            }
            function q() {
                if (this.ⲆΔⵠᐃⵠⲆΔ !== n && this.ⲆΔⵠᐃⵠⲆΔ !== -1) {
                    if (this.ᐃⵠⵠⲆΔΔᐃ > 0) {
                        if (d === ΔᐃᐃΔⲆᐃⲆ) {
                            y(f, ea, "none");
                        } else {
                            y(z, ea, "none");
                        }
                    } else if (ΔᐃᐃΔⲆᐃⲆ === d) {
                        y(f, fa, "inline-block");
                    } else {
                        y(z, fa, "inline-block");
                    }
                    n = this.ⲆΔⵠᐃⵠⲆΔ;
                    e(this.ⲆΔⵠᐃⵠⲆΔ);
                    p();
                }
            }
            this.ⵠᐃⵠⵠⵠΔᐃ = function () {
                for (var a = d, b = m * 3; k > a && b < c.length; a++, b++) {
                    if (c[b].ᐃⵠᐃ !== ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ || j[b] !== 0) {
                        R.buttons[a].info.ⲆΔⵠᐃⵠⲆΔ = b;
                        for (var e = 0; e < 3; e++) {
                            R.buttons[a].info.ᐃΔ[e] = ΔⵠⵠⲆⲆⵠΔ[c[b].ᐃⵠᐃ][e];
                            R.buttons[a].info.active = fa;
                            R.buttons[a].info.ᐃⵠⵠⲆΔΔᐃ = j[b];
                        }
                    } else {
                        R.buttons[a].info.ⲆΔⵠᐃⵠⲆΔ = -1;
                        R.buttons[a].info.active = ea;
                    }
                }
                for (; a < k; a++) {
                    R.buttons[a].info.ⲆΔⵠᐃⵠⲆΔ = -1;
                    R.buttons[a].info.active = ea;
                }
                p();
            };
            R.buttons[k].info.callback = function () {
                if (m > 0) {
                    m--;
                }
                a.ⵠᐃⵠⵠⵠΔᐃ();
            };
            R.buttons[k + 1].info.callback = function () {
                if (c.length > m * 3 + 9) {
                    m++;
                }
                a.ⵠᐃⵠⵠⵠΔᐃ();
            };
        }
        function n() {
            var b = Number(ⵠΔᐃⲆ.get("starve_crate"));
            var c = Number(ⵠΔᐃⲆ.get("starve_dead"));
            var d = Number(ⵠΔᐃⲆ.get("starve_book"));
            var e = Number(ⵠΔᐃⲆ.get("starve_bag"));
            var f = Number(ⵠΔᐃⲆ.get("starve_skin"));
            var a = Number(ⵠΔᐃⲆ.get("starve_accessory"));
            R.ΔΔᐃΔ = f || 0;
            R.ᐃⵠᐃⲆⵠ = d || 0;
            R.ᐃⲆⵠᐃᐃ = b || 1;
            R.ΔᐃΔⲆᐃ = a || 0;
            R.ⲆΔΔⵠⵠ = e || 0;
            R.ΔⲆⲆᐃΔ = c || 0;
        }
        function a() {
            for (var a = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ, b = 0; a.length > b; b++) {
                if (ⵠᐃΔ.ⲆᐃΔᐃⵠ === a[b].ᐃⵠᐃ) {
                    R.unlock.ΔΔᐃΔ[b] = 1;
                } else {
                    R.unlock.ΔΔᐃΔ[b] = 0;
                }
            }
            a = ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ᐃⵠᐃ === ⵠᐃΔ.ⲆᐃΔᐃⵠ) {
                    R.unlock.ΔᐃΔⲆᐃ[b] = 1;
                } else {
                    R.unlock.ΔᐃΔⲆᐃ[b] = 0;
                }
            }
            a = ⵠⲆⲆⲆ.ΔⲆⲆⲆ;
            b = 0;
            for (; a.length > b; b++) {
                if (ⵠᐃΔ.ⲆᐃΔᐃⵠ === a[b].ᐃⵠᐃ) {
                    R.unlock.ⲆΔΔⵠⵠ[b] = 1;
                } else {
                    R.unlock.ⲆΔΔⵠⵠ[b] = 0;
                }
            }
            a = ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⵠᐃΔ.ⲆᐃΔᐃⵠ === a[b].ᐃⵠᐃ) {
                    R.unlock.ᐃⵠᐃⲆⵠ[b] = 1;
                } else {
                    R.unlock.ᐃⵠᐃⲆⵠ[b] = 0;
                }
            }
            a = ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ;
            b = 0;
            for (; a.length > b; b++) {
                if (a[b].ᐃⵠᐃ === ⵠᐃΔ.ⲆᐃΔᐃⵠ) {
                    R.unlock.ᐃⲆⵠᐃᐃ[b] = 1;
                    R.unlock.ΔⲆⲆᐃΔ[b] = 1;
                } else {
                    R.unlock.ᐃⲆⵠᐃᐃ[b] = 0;
                    R.unlock.ΔⲆⲆᐃΔ[b] = 0;
                }
            }
        }
        this.waiting = false;
        this.ΔⵠΔⵠΔᐃᐃ = 0;
        this.ⵠᐃᐃⵠΔⲆⲆ = -1;
        this.ⵠⵠᐃᐃΔⵠⲆ = {
            translate: {
                y: 0,
                x: 0
            },
            angle: 0,
            ᐃΔ: Δⵠ[301],
            Δᐃᐃⵠ: function () {
                this.angle += Xw * 2;
                h.save();
                h.translate(this.translate.x + this.ᐃΔ.width / 2, this.translate.y + this.ᐃΔ.height / 2);
                h.rotate(this.angle);
                _c(h, this.ᐃΔ, -this.ᐃΔ.width / 2, -this.ᐃΔ.height / 2);
                h.restore();
            }
        };
        this.ΔᐃⲆᐃΔᐃᐃ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⵠΔ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠⲆⲆⵠΔ = 0;
        this.ΔΔⵠⵠᐃⵠⲆ = -1;
        this.ᐃⵠᐃΔΔⲆⵠ = fn;
        this.ΔᐃᐃⵠⲆᐃᐃ = "";
        this.ᐃⲆᐃⲆⲆᐃΔ = "";
        this.ΔⲆⲆⲆᐃΔⵠ = undefined;
        this.ⵠᐃⵠⵠᐃ = 0;
        this.ⵠⲆⵠⲆΔΔΔ = -1;
        this.ΔΔⵠⵠΔⵠᐃ = undefined;
        this.ⵠᐃⲆⲆᐃΔⵠ = 0;
        this.ⵠⲆⵠⲆᐃΔΔ = 0;
        this.ᐃⵠΔΔⲆΔⲆ = 0;
        this.ΔⲆⵠΔΔⲆⵠ = 0;
        this.ⲆⵠⲆΔⵠᐃⵠ = 0;
        this.time = 0;
        this.ⲆΔⲆⲆⵠ = 0;
        this.ΔΔᐃⲆⲆⵠⲆ = 0;
        this.ⲆᐃΔᐃᐃⵠⵠ = 0;
        this.ⲆᐃᐃⵠⵠⲆⲆ = 0;
        this.ΔⲆΔⲆⲆⵠᐃ = 0;
        this.ΔΔⵠⵠΔⲆΔ = [];
        this.ᐃΔᐃⲆᐃ = -1;
        this.ᐃⲆΔⵠⲆⲆⵠ = -1;
        this.ⲆᐃΔⵠⵠᐃⵠ = -1;
        this.ᐃⲆᐃᐃⲆΔΔ = Tk;
        this.ΔⲆⲆᐃⵠΔΔ = undefined;
        this.ᐃΔΔⵠᐃᐃⵠ = -1;
        this.ᐃⵠᐃΔⵠⲆΔ = -1;
        this.ⲆⵠΔⲆᐃΔΔ = -1;
        this.ΔᐃΔΔᐃΔᐃ = -1;
        this.ⲆⵠΔᐃΔᐃⵠ = Xh;
        this.ⲆⵠᐃᐃΔⵠᐃ = Ch;
        this.ᐃᐃᐃᐃⵠᐃⲆ = _l;
        this.ⲆΔⲆⲆᐃᐃᐃ = undefined;
        this.ᐃⵠᐃᐃΔᐃⲆ = undefined;
        this.ᐃⵠᐃΔΔⵠⵠ = undefined;
        this.ᐃⲆⵠⲆΔⲆΔ = Tk;
        this.ᐃⲆΔⲆᐃⲆⵠ = undefined;
        this.ⲆⲆΔⲆⵠⵠᐃ = undefined;
        this.ⵠⲆⵠⵠᐃᐃⵠ = 3;
        this.Δᐃⵠⵠ = 0;
        this.ΔⲆΔⲆⲆⵠⲆⵠΔ = false;
        this.ⵠᐃΔΔⵠ = ⵠΔᐃⲆ.get("starve_quality") ? ⵠΔᐃⲆ.get("starve_quality") : "high";
        if (this.ⵠᐃΔΔⵠ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃΔΔⵠ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ⵠᐃΔΔⵠ = 0;
        }
        this.ᐃⲆⲆⵠΔⲆΔⵠⵠ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ⵠΔᐃⲆ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            Vw.ΔᐃᐃᐃⲆΔⵠ();
            df.ⵠᐃΔΔⵠ = 1;
        };
        this.ᐃⲆΔᐃΔⲆⵠᐃⲆ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ⵠΔᐃⲆ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Qq / Sq);
            Vw.ΔᐃᐃᐃⲆΔⵠ();
            df.ⵠᐃΔΔⵠ = 0;
        };
        if (Tk === ⵠΔᐃⲆ.get("starve_mapping") && gr === "FR") {
            zf.ΔΔᐃⲆⲆⲆᐃ();
            this.mapping = "azerty";
        } else {
            this.mapping = ⵠΔᐃⲆ.get("starve_mapping") ? ⵠΔᐃⲆ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            zf.ΔΔᐃⲆⲆⲆᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ΔΔᐃⲆⲆⲆᐃ = function () {
            zf.ΔΔᐃⲆⲆⲆᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ⵠΔᐃⲆ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ᐃⲆᐃΔⵠⲆⲆ = function () {
            zf.ᐃⲆᐃΔⵠⲆⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ⵠΔᐃⲆ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ⵠᐃΔⲆⲆΔᐃ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            ⵠⵠΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        n();
        this.unlock = {};
        this.unlock.ΔΔᐃΔ = [];
        this.unlock.ⲆΔΔⵠⵠ = [];
        this.unlock.ᐃⵠᐃⲆⵠ = [];
        this.unlock.ᐃⲆⵠᐃᐃ = [];
        this.unlock.ΔⲆⲆᐃΔ = [];
        this.unlock.ΔᐃΔⲆᐃ = [];
        this.ΔⲆⲆΔΔⵠᐃ = 0;
        this.ⵠΔⵠᐃⵠΔΔ = a;
        a();
        this.ΔᐃΔⵠⲆ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                y: 0,
                x: 0
            },
            ⵠⵠΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var o;
        var r = 0;
        function t() {
            R.ⵠⵠΔ();
            if (++r == 30) {
                R.ᐃⵠᐃⲆΔⲆⲆ();
                R.ΔⵠΔⵠΔᐃᐃ = j;
                R.ⵠⵠΔ();
                return;
            }
            aj.setTimeout(t, 33);
        }
        this.ⲆⲆᐃⲆⵠ = function (a) {
            o = a;
            R.ⵠⲆΔⵠᐃⵠᐃ();
            R.ΔⵠΔⵠΔᐃᐃ = 0;
            g = -1;
            A();
        };
        var g = -1;
        function A() {
            R.ⵠⵠΔ();
            if (++g == 30) {
                ⵠΔᐃⲆ.set("starve_nickname", R.ᐃᐃⲆⵠᐃ.input.value, {
                    expires: 30
                });
                R.ᐃᐃⲆⵠᐃ.style.display = "none";
                R.ⲆⲆᐃⵠΔ.style.display = "none";
                R.ΔᐃⲆᐃΔᐃᐃ.style.display = "none";
                R.ⵠᐃΔⲆⲆΔᐃ.style.display = "none";
                R.ΔᐃΔⵠⲆ.style.display = "none";
                R.stop();
                o();
                return;
            }
            aj.setTimeout(A, 33);
        }
        this.ᐃⲆⲆⲆⵠ = cr;
        this.stop = function () {
            this.ᐃⲆⲆⲆⵠ = mn;
        };
        this.ⲆΔΔᐃⵠ = function () {
            Zw();
            document.getElementById("game_body").style.backgroundColor = Ur.ΔⵠⲆⲆᐃ[Sw.time];
            R.ᐃᐃⲆⵠᐃ.style.display = "inline-block";
            R.ⲆⲆᐃⵠΔ.style.display = "inline-block";
            R.ΔᐃⲆᐃΔᐃᐃ.style.display = "inline-block";
            R.ⵠᐃΔⲆⲆΔᐃ.style.display = "inline-block";
            R.ΔᐃΔⵠⲆ.style.display = "inline-block";
            R.waiting = yl;
            R.ᐃⲆⲆⲆⵠ = true;
            g = -1;
            r = 0;
            t();
        };
        this.ΔⵠⲆⵠⵠΔⲆ = function (a, b) {
            b = b < 0 ? -b : b;
            if (ba === (a.position & ba)) {
                if (V === (a.position & V)) {
                    a.translate.x = gq + a.translate.ⲆⲆⲆⵠΔ - b;
                } else if (Z === (a.position & Z)) {
                    a.translate.x = gq + a.translate.ⲆⲆⲆⵠΔ + b;
                } else {
                    a.translate.x = gq + a.translate.ⲆⲆⲆⵠΔ;
                }
            } else if ((a.position & V) === V) {
                a.translate.x = a.translate.ⲆⲆⲆⵠΔ - b;
            } else if (Z === (a.position & Z)) {
                a.translate.x = On - a.translate.ⲆⲆⲆⵠΔ + b;
            } else {
                a.translate.x = a.translate.ⲆⲆⲆⵠΔ;
            }
            if (ca === (a.position & ca)) {
                if (_ === (a.position & _)) {
                    a.translate.y = hq + a.translate.ΔΔᐃⵠᐃ - b;
                } else if (aa === (a.position & aa)) {
                    a.translate.y = hq + a.translate.ΔΔᐃⵠᐃ + b;
                } else {
                    a.translate.y = hq + a.translate.ΔΔᐃⵠᐃ;
                }
            } else if ((a.position & _) === _) {
                a.translate.y = a.translate.ΔΔᐃⵠᐃ - b;
            } else if ((a.position & aa) === aa) {
                a.translate.y = Hn + a.translate.ΔΔᐃⵠᐃ + b;
            } else {
                a.translate.y = a.translate.ΔΔᐃⵠᐃ;
            }
            if (Gn !== a.style) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ⵠⵠΔ = function () {
            var a = 0;
            if (r != 30 || g != -1) {
                if (r != 30) {
                    a = 1500 / (r + 1) - 50;
                }
                if (g != -1) {
                    a = -(1750 / (30 - g + 1) - 48);
                }
            }
            for (var b = 0; b < this.ΔⵠΔᐃ.length; b++) {
                this.ΔⵠⲆⵠⵠΔⲆ(this.ΔⵠΔᐃ[b], a);
            }
            for (b = 0; this.buttons.length > b; b++) {
                this.ΔⵠⲆⵠⵠΔⲆ(this.buttons[b].info, a);
            }
            for (b = 0; b < this.ᐃᐃᐃⲆᐃ.length; b++) {
                this.ΔⵠⲆⵠⵠΔⲆ(this.ᐃᐃᐃⲆᐃ[b], a);
            }
            this.ⵠⵠᐃᐃΔⵠⲆ.translate.x = (On - this.ⵠⵠᐃᐃΔⵠⲆ.ᐃΔ.width) / 2;
            this.ⵠⵠᐃᐃΔⵠⲆ.translate.y = 0;
            this.ΔᐃⲆᐃΔᐃᐃ.translate.x = On - 450;
            this.ΔᐃⲆᐃΔᐃᐃ.translate.y = Hn - 40;
            this.ⵠᐃΔⲆⲆΔᐃ.translate.x = On - 340;
            this.ⵠᐃΔⲆⲆΔᐃ.translate.y = Hn - 25;
            this.ΔᐃΔⵠⲆ.translate.x = On - 320;
            this.ΔᐃΔⵠⲆ.translate.y = 80;
            if (r != 30 || g != -1) {
                var c = 0;
                if (r != 30) {
                    c = 1500 / (r + 1) - 50;
                }
                if (g != -1) {
                    c = -(1750 / (30 - g + 1) - 48);
                }
                this.ⵠⵠᐃᐃΔⵠⲆ.translate.y -= c > 0 ? c : -c;
                this.ΔᐃⲆᐃΔᐃᐃ.translate.y -= c < 0 ? c : -c;
                this.ⵠᐃΔⲆⲆΔᐃ.translate.y -= c < 0 ? c : -c;
            }
            this.ΔᐃⲆᐃΔᐃᐃ.ⵠⵠΔ();
            this.ⵠᐃΔⲆⲆΔᐃ.ⵠⵠΔ();
            this.ΔᐃΔⵠⲆ.ⵠⵠΔ();
        };
        this.ᐃⵠⵠᐃⲆⵠⲆ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; f < b.length; f++) {
                var g = b[f][0];
                var h = Math.PI * b[f][1] / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, aq);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ᐃᐃⲆΔᐃⲆΔⲆΔ = function () {
            this.ΔᐃᐃⵠⲆᐃᐃ = document.getElementById("account_nickname_input").value;
            if (this.ᐃⲆᐃⲆⲆᐃΔ !== this.ΔᐃᐃⵠⲆᐃᐃ) {
                this.ᐃⲆᐃⲆⲆᐃΔ = this.ΔᐃᐃⵠⲆᐃᐃ;
                this.ΔⲆⲆⲆᐃΔⵠ = Vv(this.ΔᐃᐃⵠⲆᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.Δᐃᐃⵠ = function () {
            fc();
            df.ⵠᐃⲆⲆᐃΔⵠ = ΔⲆⵠᐃ.ⲆⵠᐃⲆⲆᐃⵠ(df.ⵠᐃⲆⲆᐃΔⵠ, df.ⵠⲆⵠⲆᐃΔΔ, 0.03);
            this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.x = this.ΔⵠΔᐃ[0].translate.x + -72 + df.ⵠᐃⲆⲆᐃΔⵠ * 165;
            this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.ⲆⲆⲆⵠΔ = this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.x;
            this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.y = this.ΔⵠΔᐃ[0].translate.y + 30;
            this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.ΔΔᐃⵠᐃ = this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ].translate.y;
            for (var j = 2; j < this.ΔⵠΔᐃ.length; j++) {
                if (this.ΔⵠΔᐃ[j].active === fa) {
                    this.ΔⵠΔᐃ[j].Δᐃᐃⵠ(h);
                }
            }
            var n;
            if ((n = this.ᐃΔᐃⲆᐃ - Date.now()) > 0) {
                var q = Math.floor(n / 60000);
                var t = Math.floor(q / 60);
                q %= 60;
                if (this.ⲆᐃΔⵠⵠᐃⵠ !== q) {
                    this.ⲆᐃΔⵠⵠᐃⵠ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    R.ᐃⲆᐃᐃⲆΔΔ = Vv(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ᐃⲆΔⵠⲆⲆⵠ !== t) {
                    this.ᐃⲆΔⵠⲆⲆⵠ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    R.ΔⲆⲆᐃⵠΔΔ = Vv(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (N = this.ΔⵠΔᐃ[ⵠΔⲆᐃⲆΔⲆ]).Δᐃᐃⵠ(h);
                var K = this.ΔⲆⲆᐃⵠΔΔ;
                _c(h, K, N.translate.x - K.width / 4 + 182, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ᐃⲆᐃᐃⲆΔΔ;
                _c(h, K, N.translate.x - K.width / 4 + 251, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
            }
            if ((n = this.ᐃΔΔⵠᐃᐃⵠ - Date.now()) > 0) {
                q = Math.floor(n / 60000);
                t = Math.floor(q / 60);
                var N;
                var U = Math.floor(t / 24);
                q %= 60;
                t %= 24;
                if (this.ΔᐃΔΔᐃΔᐃ !== q) {
                    this.ΔᐃΔΔᐃΔᐃ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    R.ⲆⵠΔᐃΔᐃⵠ = Vv(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ⲆⵠΔⲆᐃΔΔ !== t) {
                    this.ⲆⵠΔⲆᐃΔΔ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    R.ⲆⵠᐃᐃΔⵠᐃ = Vv(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ᐃⵠᐃΔⵠⲆΔ !== U) {
                    this.ᐃⵠᐃΔⵠⲆΔ = U;
                    U = U < 10 ? "0" + U : "" + U;
                    R.ᐃᐃᐃᐃⵠᐃⲆ = Vv(U, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (N = this.ΔⵠΔᐃ[ⲆΔΔⲆΔᐃⲆ]).Δᐃᐃⵠ(h);
                K = this.ᐃᐃᐃᐃⵠᐃⲆ;
                _c(h, K, N.translate.x - K.width / 4 + 113, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ⲆⵠᐃᐃΔⵠᐃ;
                _c(h, K, N.translate.x - K.width / 4 + 182, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
                K = this.ⲆⵠΔᐃΔᐃⵠ;
                _c(h, K, N.translate.x - K.width / 4 + 251, N.translate.y - K.height / 4 + 40, K.width / 2, K.height / 2);
            }
            if ((this.ᐃᐃⲆᐃⵠ & W) === W) {
                this.buttons[ⵠⲆΔΔΔⵠⲆ].info.state = Sv;
            } else if (C === (this.ᐃᐃⲆᐃⵠ & C)) {
                this.buttons[ⵠΔᐃⲆⲆⲆΔ].info.state = Sv;
            } else if ((this.ᐃᐃⲆᐃⵠ & m) === m) {
                this.buttons[ⲆⵠᐃⲆⲆⲆⵠ].info.state = Sv;
            } else if ((this.ᐃᐃⲆᐃⵠ & d) === d) {
                this.buttons[ᐃⲆⲆⵠΔᐃⵠ].info.state = Sv;
            } else if (p === (this.ᐃᐃⲆᐃⵠ & p)) {
                this.buttons[ΔⵠΔᐃΔΔᐃ].info.state = Sv;
            } else if ((this.ᐃᐃⲆᐃⵠ & v) === v) {
                this.buttons[ᐃⵠᐃᐃΔᐃⵠ].info.state = Sv;
            } else if (c === (this.ᐃᐃⲆᐃⵠ & c) || T === (this.ᐃᐃⲆᐃⵠ & T) || w === (this.ᐃᐃⲆᐃⵠ & w) || P === (this.ᐃᐃⲆᐃⵠ & P) || k === (this.ᐃᐃⲆᐃⵠ & k) || x === (this.ᐃᐃⲆᐃⵠ & x) || J === (this.ᐃᐃⲆᐃⵠ & J)) {
                this.buttons[ⵠΔᐃⲆⵠⲆⲆ].info.state = Sv;
            } else if (B === (this.ᐃᐃⲆᐃⵠ & B) || D === (this.ᐃᐃⲆᐃⵠ & D) || (this.ᐃᐃⲆᐃⵠ & E) === E || (this.ᐃᐃⲆᐃⵠ & I) === I || S === (this.ᐃᐃⲆᐃⵠ & S) || (this.ᐃᐃⲆᐃⵠ & Q) === Q) {
                this.buttons[ⲆⵠᐃⲆⲆⲆⵠ].info.state = Sv;
            } else if (G === (this.ᐃᐃⲆᐃⵠ & G) || Y === (this.ᐃᐃⲆᐃⵠ & Y) || (this.ᐃᐃⲆᐃⵠ & L) === L) {
                this.buttons[ΔⲆᐃΔΔΔᐃ].info.state = Sv;
            } else if ((this.ᐃᐃⲆᐃⵠ & O) === O) {
                this.buttons[ᐃⲆⲆⵠΔᐃⵠ].info.state = Sv;
            }
            if ((this.ᐃᐃⲆᐃⵠ & C) === C) {
                if (this.ᐃⲆⵠⲆΔⲆΔ === this.ᐃΔᐃΔⲆⲆⲆ) {
                    this.ᐃⵠᐃΔΔⵠⵠ = this.ᐃᐃⲆⲆΔᐃΔ;
                    this.buttons[this.ᐃᐃⲆⲆΔᐃΔ].info.active = ea;
                    this.buttons[this.ᐃⵠⵠⲆᐃᐃΔ].info.active = ea;
                    this.buttons[this.ⲆⵠⵠⵠΔⲆⲆ].info.active = ea;
                } else {
                    this.buttons[this.ᐃᐃⲆⲆΔᐃΔ].info.active = fa;
                    this.buttons[this.ᐃⵠⵠⲆᐃᐃΔ].info.active = fa;
                    this.buttons[this.ⲆⵠⵠⵠΔⲆⲆ].info.active = fa;
                }
                if (this.ⵠⲆᐃᐃⵠΔⵠ === this.ᐃⲆⵠⲆΔⲆΔ) {
                    this.buttons[this.ⵠⲆᐃᐃⵠΔⵠ].info.state = Sv;
                } else if (this.ΔⲆᐃᐃⲆⵠⵠ === this.ᐃⲆⵠⲆΔⲆΔ) {
                    this.buttons[this.ΔⲆᐃᐃⲆⵠⵠ].info.state = Sv;
                } else if (this.ᐃΔᐃΔⲆⲆⲆ === this.ᐃⲆⵠⲆΔⲆΔ) {
                    this.buttons[this.ᐃΔᐃΔⲆⲆⲆ].info.state = Sv;
                } else if (this.ᐃⲆⵠⲆΔⲆΔ === this.ⲆⲆⵠᐃᐃΔᐃ) {
                    this.buttons[this.ⲆⲆⵠᐃᐃΔᐃ].info.state = Sv;
                } else if (this.ⲆᐃΔΔᐃⲆⲆ === this.ᐃⲆⵠⲆΔⲆΔ) {
                    this.buttons[this.ⲆᐃΔΔᐃⲆⲆ].info.state = Sv;
                }
                if (this.ᐃⵠᐃΔΔⵠⵠ === this.ᐃᐃⲆⲆΔᐃΔ) {
                    this.buttons[this.ᐃᐃⲆⲆΔᐃΔ].info.state = Sv;
                } else if (this.ᐃⵠᐃΔΔⵠⵠ === this.ᐃⵠⵠⲆᐃᐃΔ) {
                    this.buttons[this.ᐃⵠⵠⲆᐃᐃΔ].info.state = Sv;
                } else if (this.ᐃⵠᐃΔΔⵠⵠ === this.ⲆⵠⵠⵠΔⲆⲆ) {
                    this.buttons[this.ⲆⵠⵠⵠΔⲆⲆ].info.state = Sv;
                }
                if (this.ⲆⲆᐃⲆⵠⲆⵠ === this.ᐃⲆΔⲆᐃⲆⵠ) {
                    this.buttons[this.ⲆⲆᐃⲆⵠⲆⵠ].info.state = Sv;
                } else if (this.ᐃⲆΔΔⵠᐃΔ === this.ᐃⲆΔⲆᐃⲆⵠ) {
                    this.buttons[this.ᐃⲆΔΔⵠᐃΔ].info.state = Sv;
                } else if (this.ⲆᐃΔᐃⵠⲆⵠ === this.ᐃⲆΔⲆᐃⲆⵠ) {
                    this.buttons[this.ⲆᐃΔᐃⵠⲆⵠ].info.state = Sv;
                }
                if (this.ΔⵠⵠᐃΔⵠⲆ === this.ⲆⲆΔⲆⵠⵠᐃ) {
                    this.buttons[this.ΔⵠⵠᐃΔⵠⲆ].info.state = Sv;
                } else if (this.ⲆⲆΔⲆⵠⵠᐃ === this.ⲆᐃⲆⲆⵠΔⲆ) {
                    this.buttons[this.ⲆᐃⲆⲆⵠΔⲆ].info.state = Sv;
                } else if (this.ⲆⲆΔⲆⵠⵠᐃ === this.ⲆⵠⲆᐃⲆⵠⵠ) {
                    this.buttons[this.ⲆⵠⲆᐃⲆⵠⵠ].info.state = Sv;
                } else if (this.ⲆⲆΔⲆⵠⵠᐃ === this.ΔⵠᐃⵠⵠΔⲆ) {
                    this.buttons[this.ΔⵠᐃⵠⵠΔⲆ].info.state = Sv;
                } else if (this.ᐃⵠⲆΔΔᐃᐃ === this.ⲆⲆΔⲆⵠⵠᐃ) {
                    this.buttons[this.ᐃⵠⲆΔΔᐃᐃ].info.state = Sv;
                } else if (this.ⵠᐃΔᐃΔΔᐃ === this.ⲆⲆΔⲆⵠⵠᐃ) {
                    this.buttons[this.ⵠᐃΔᐃΔΔᐃ].info.state = Sv;
                }
            }
            if (d === (this.ᐃᐃⲆᐃⵠ & d)) {
                if (this.ⵠᐃᐃⵠΔⲆⲆ === -1) {
                    this.buttons[za].info.state = Sv;
                } else if (this.ⵠᐃᐃⵠΔⲆⲆ === 0) {
                    this.buttons[Aa].info.state = Sv;
                } else if (this.ⵠᐃᐃⵠΔⲆⲆ === 2) {
                    this.buttons[Ca].info.state = Sv;
                } else if (this.ⵠᐃᐃⵠΔⲆⲆ === 3) {
                    this.buttons[Da].info.state = Sv;
                } else if (this.ⵠᐃᐃⵠΔⲆⲆ === 4) {
                    this.buttons[Ba].info.state = Sv;
                }
                if (this.ⵠⲆⵠⵠᐃᐃⵠ === 0) {
                    this.buttons[ta].info.state = Sv;
                } else if (this.ⵠⲆⵠⵠᐃᐃⵠ === 1) {
                    this.buttons[ua].info.state = Sv;
                } else if (this.ⵠⲆⵠⵠᐃᐃⵠ === 2) {
                    this.buttons[va].info.state = Sv;
                } else if (this.ⵠⲆⵠⵠᐃᐃⵠ === 3) {
                    this.buttons[wa].info.state = Sv;
                } else if (this.ⵠⲆⵠⵠᐃᐃⵠ === 4) {
                    this.buttons[xa].info.state = Sv;
                } else if (this.ⵠⲆⵠⵠᐃᐃⵠ === 5) {
                    this.buttons[ya].info.state = Sv;
                }
            }
            if ((this.ᐃᐃⲆᐃⵠ & W) === W && ᐃⲆΔΔ.ᐃᐃⵠΔⲆΔᐃ === 0) {
                if (this.buttons[ka].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[ka].hint = Math.min(1, this.buttons[ka].hint + Xw * 1.5);
                } else {
                    this.buttons[ka].hint = Math.max(0, this.buttons[ka].hint - Xw * 1.5);
                }
                if (this.buttons[la].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[la].hint = Math.min(1, this.buttons[la].hint + Xw * 1.5);
                } else {
                    this.buttons[la].hint = Math.max(0, this.buttons[la].hint - Xw * 1.5);
                }
                if (this.buttons[na].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + Xw * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - Xw * 1.5);
                }
                if (this.buttons[qa].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[qa].hint = Math.min(1, this.buttons[qa].hint + Xw * 1.5);
                } else {
                    this.buttons[qa].hint = Math.max(0, this.buttons[qa].hint - Xw * 1.5);
                }
                if (this.buttons[oa].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + Xw * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - Xw * 1.5);
                }
                if (this.buttons[pa].ᐃⵠⵠᐃⵠⲆⲆ(yf.ⲆΔᐃⲆ)) {
                    this.buttons[pa].hint = Math.min(1, this.buttons[pa].hint + Xw * 1.5);
                } else {
                    this.buttons[pa].hint = Math.max(0, this.buttons[pa].hint - Xw * 1.5);
                }
            }
            var V = 1;
            if ((this.ᐃᐃⲆᐃⵠ & (T | w | P | k | x | J)) > 1) {
                K = ⵠᐃ.ⵠΔⲆᐃΔⲆⵠ;
                h.save();
                h.translate(gq, ja + K.height / 4);
                if (this.ΔΔⵠⲆⵠ === 1) {
                    this.ΔⵠΔΔⲆⲆᐃ += Xw / 3;
                    V = this.ΔΔⲆⵠⵠᐃⲆ - 100 / Math.pow(1 + this.ΔⵠΔΔⲆⲆᐃ, 1 + this.ΔⵠΔΔⲆⲆᐃ);
                    h.rotate(V);
                }
                _c(h, K, -K.width / 4, -K.height / 4, K.width / 2, K.height / 2);
                h.restore();
            }
            if (ᐃⲆΔΔ.ᐃᐃⵠΔⲆΔᐃ === 0) {
                if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 0) {
                    this.buttons[ka].info.state = Sv;
                } else if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 4) {
                    this.buttons[la].info.state = Sv;
                } else if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 2) {
                    this.buttons[oa].info.state = Sv;
                } else if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 3) {
                    this.buttons[pa].info.state = Sv;
                } else if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 6) {
                    this.buttons[na].info.state = Sv;
                } else if (ᐃⲆΔΔ.ⲆΔⵠΔᐃ === 7) {
                    this.buttons[qa].info.state = Sv;
                }
            }
            for (j = 1; j < this.buttons.length; j++) {
                if (fa === this.buttons[j].info.active) {
                    this.buttons[j].Δᐃᐃⵠ(h);
                }
            }
            this.ΔⵠΔᐃ[0].Δᐃᐃⵠ(h);
            if ((this.ᐃᐃⲆᐃⵠ & (F | X)) > 0) {
                K = this.ΔⲆⲆⲆᐃΔⵠ;
                _c(h, K, gq - K.width / 4, 138, K.width / 2, K.height / 2);
            }
            var Z = Math.max(1, Math.min(18, Math.floor((df.ⵠᐃⵠⵠᐃ + 3) / 2)));
            this.ΔⵠΔᐃ[Z].active = fa;
            this.ΔⵠΔᐃ[Z].Δᐃᐃⵠ(h);
            this.ΔⵠΔᐃ[Z].active = ea;
            this.buttons[0].Δᐃᐃⵠ(h);
            if ((this.ᐃᐃⲆᐃⵠ & (m | D | I | B | S)) > 1) {
                var u = (this.ᐃᐃⲆᐃⵠ & (D | I | B | S)) > 1 ? -190 : 0;
                K = Δⵠ[29][this.ⲆΔΔⵠⵠ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 + u, 183, K.width / 2, K.height / 2);
                this.Δᐃⵠⵠ = (this.Δᐃⵠⵠ + Xw * 1000) % 2000;
                var b = (this.Δᐃⵠⵠ < 1000) * 4.5 ? this.Δᐃⵠⵠ / 1000 : (2000 - this.Δᐃⵠⵠ) / 1000;
                K = Δⵠ[28][this.ᐃⵠᐃⲆⵠ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 - 62 + b + u, 240, K.width / 2, K.height / 2);
                K = Δⵠ[7][this.ΔΔᐃΔ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 - 54 + b + u, 272, K.width / 2, K.height / 2);
                _c(h, K, gq - K.width / 4 + 54 - b + u, 272, K.width / 2, K.height / 2);
                K = Δⵠ[255][this.ΔΔᐃΔ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 + u, 222, K.width / 2, K.height / 2);
                K = Δⵠ[796][this.ΔᐃΔⲆᐃ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 + u, 222, K.width / 2, K.height / 2);
            }
            if ((this.ᐃᐃⲆᐃⵠ & m) === m) {
                K = Δⵠ[250][this.ᐃⲆⵠᐃᐃ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 - 61, 406 - K.height / 4, K.width / 2, K.height / 2);
                K = Δⵠ[250][this.ΔⲆⲆᐃΔ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 + 53, 406 - K.height / 4, K.width / 2, K.height / 2);
            }
            if ((this.ᐃᐃⲆᐃⵠ & E) === E) {
                K = Δⵠ[250][this.ΔⲆⲆᐃΔ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
            }
            if ((this.ᐃᐃⲆᐃⵠ & Q) === Q) {
                K = Δⵠ[250][this.ᐃⲆⵠᐃᐃ][this.ΔⲆⲆΔΔⵠᐃ];
                _c(h, K, gq - K.width / 4 - 200, 268 - K.height / 4, K.width / 2, K.height / 2);
            }
            if ((this.ᐃᐃⲆᐃⵠ & (D | I | B | S | E | Q)) > 1) {
                for (j = 1; this.buttons.length > j; j++) {
                    if ((this.buttons[j].view & this.ᐃᐃⲆᐃⵠ) !== 0) {
                        var _ = this.buttons[j].info;
                        if (_.ⲆΔⵠᐃⵠⲆΔ >= 0) {
                            K = _.ᐃᐃᐃⵠᐃᐃⵠᐃᐃ[_.ⲆΔⵠᐃⵠⲆΔ].ⵠᐃⲆ;
                            _c(h, K, _.translate.x - K.width / 8 + 44.5, _.translate.y - K.height / 8 + 45.5, K.width / 4, K.height / 4);
                            if (_.ᐃⵠⵠⲆΔΔᐃ !== 1) {
                                K = ⵠᐃ.ᐃΔⵠⲆΔΔⲆ;
                                _c(h, K, _.translate.x - K.width / 4 + 44.5, _.translate.y - K.height / 4 + 44.5, K.width / 2, K.height / 2);
                            }
                        }
                    }
                }
                K = this.ⲆΔⲆⲆᐃᐃᐃ;
                _c(h, K, gq - 312, 375, K.width / 2, K.height / 2);
                K = this.ᐃⵠᐃᐃΔᐃⲆ;
                _c(h, K, gq - 312, 395, K.width / 2, K.height / 2);
            }
            if (this.ΔΔⵠⵠᐃⵠⲆ !== this.ⵠⲆⲆⵠΔ) {
                this.ΔΔⵠⵠᐃⵠⲆ = this.ⵠⲆⲆⵠΔ;
                this.ᐃⵠᐃΔΔⲆⵠ = Vv("" + this.ⵠⲆⲆⵠΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            _c(h, this.ᐃⵠᐃΔΔⲆⵠ, this.ΔⵠΔᐃ[0].translate.x + 350, 15, this.ᐃⵠᐃΔΔⲆⵠ.w2, this.ᐃⵠᐃΔΔⲆⵠ.ⵠⲆᐃⵠΔ);
            if (this.ⵠᐃⵠⵠᐃ !== this.ⵠⲆⵠⲆΔΔΔ) {
                this.ⵠⲆⵠⲆΔΔΔ = this.ⵠᐃⵠⵠᐃ;
                this.ΔΔⵠⵠΔⵠᐃ = Vv("LVL " + (this.ⵠᐃⵠⵠᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, eo, 30, 24, eo, gj, ma, undefined, "#3F3019", 20);
            }
            _c(h, this.ΔΔⵠⵠΔⵠᐃ, this.ΔⵠΔᐃ[0].translate.x + 94, 0, this.ΔΔⵠⵠΔⵠᐃ.w2, this.ΔΔⵠⵠΔⵠᐃ.ⵠⲆᐃⵠΔ);
            if (ᐃⲆΔΔ.ᐃᐃⵠΔⲆΔᐃ === 0) {
                if ((aa = this.buttons[ka].hint) > 0) {
                    K = ⵠᐃ.ⲆⲆⲆᐃⵠⲆⵠ;
                    _c(h, K, gq - K.width / 4, -36 - K.height * ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) / 2, K.width / 2, K.height / 2);
                }
                if ((aa = this.buttons[la].hint) > 0) {
                    K = ⵠᐃ.ᐃΔⵠᐃⵠⲆᐃ;
                    _c(h, K, gq - K.width / 4, -36 - ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
                }
                if ((aa = this.buttons[na].hint) > 0) {
                    K = ⵠᐃ.ΔⲆᐃΔⲆⲆᐃ;
                    _c(h, K, gq - K.width / 4, -36 - ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
                }
                var aa = this.buttons[qa].hint;
                if (aa > 0) {
                    K = ⵠᐃ.ᐃᐃⲆⲆΔⲆᐃ;
                    _c(h, K, gq - K.width / 4, -36 - ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) * K.height / 2, K.width / 2, K.height / 2);
                }
                aa = this.buttons[pa].hint;
                if (aa > 0) {
                    K = ⵠᐃ.ᐃᐃⵠᐃⲆᐃⵠ;
                    _c(h, K, gq - K.width / 4, -36 - K.height * ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) / 2, K.width / 2, K.height / 2);
                }
                aa = this.buttons[oa].hint;
                if (aa > 0) {
                    K = ⵠᐃ.ᐃⵠⲆᐃⲆⲆⲆ;
                    _c(h, K, gq - K.width / 4, -36 - K.height * ΔⲆⵠᐃ.ΔⲆΔⵠΔ(1 - aa) / 2, K.width / 2, K.height / 2);
                }
            }
            if (this.ΔΔⵠⲆⵠ === 1 && Math.abs(V - this.ΔΔⲆⵠⵠᐃⲆ) < 0.006) {
                h.globalAlpha = Math.min(1, this.ᐃⲆⲆⲆᐃⵠᐃ * 3);
                K = ⵠᐃ.ᐃΔⵠᐃΔⵠⲆ;
                h.save();
                h.translate(gq, 260);
                this.ᐃⲆⲆⲆᐃⵠᐃ += Xw;
                h.rotate(this.ᐃⲆⲆⲆᐃⵠᐃ);
                _c(h, K, -K.width / 2, -K.height / 2, K.width, K.height);
                h.restore();
                b = 1.05 + Math.cos(this.ᐃⲆⲆⲆᐃⵠᐃ * 5) * 0.05;
                if (this.ⵠΔⵠⵠᐃⵠⲆ === 0) {
                    var ba = (K = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[this.ΔᐃⵠΔⵠᐃⲆ].ⵠᐃⲆ).width * b;
                    var ca = K.height * b;
                    _c(h, K, gq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠΔⵠⵠᐃⵠⲆ === 1) {
                    ba = (K = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[0].ⵠᐃⲆ).width * b;
                    ca = K.height * b;
                    _c(h, K, gq - ba / 2, 260 - ca / 2, ba, ca);
                    ba = b * (K = ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ[this.ΔᐃⵠΔⵠᐃⲆ].ⵠᐃⲆ).width;
                    ca = b * K.height;
                    _c(h, K, gq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠΔⵠⵠᐃⵠⲆ === 2) {
                    ba = (K = ⵠⲆⲆⲆ.ΔⲆⲆⲆ[this.ΔᐃⵠΔⵠᐃⲆ].ⵠᐃⲆ).width * b;
                    ca = b * K.height;
                    _c(h, K, gq - ba / 2, 180 - ca / 2, ba, ca);
                    ba = b * (K = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[0].ⵠᐃⲆ).width;
                    ca = b * K.height;
                    _c(h, K, gq - ba / 2, 260 - ca / 2, ba, ca);
                } else if (this.ⵠΔⵠⵠᐃⵠⲆ === 3) {
                    ba = (K = ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ[this.ΔᐃⵠΔⵠᐃⲆ].ⵠᐃⲆ).width * b;
                    ca = K.height * b;
                    h.save();
                    h.translate(gq, 260);
                    h.rotate(Math.PI);
                    _c(h, K, -ba / 2, -ca / 2, ba, ca);
                    h.restore();
                } else if (this.ⵠΔⵠⵠᐃⵠⲆ === 4) {
                    ba = b * (K = ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ[this.ΔᐃⵠΔⵠᐃⲆ].ⵠᐃⲆ).width;
                    ca = K.height * b;
                    _c(h, K, gq - ba / 2, 260 - ca / 2, ba, ca);
                }
                K = this.ΔᐃΔⲆᐃΔΔ;
                _c(h, K, gq - K.width / 4, 340, K.width / 2, K.height / 2);
                K = this.ⵠⲆⵠⵠᐃΔⲆ;
                _c(h, K, gq - K.width / 4, 365, K.width / 2, K.height / 2);
                if (this.ᐃⲆⲆⲆᐃⵠᐃ > 6) {
                    this.ΔΔⵠⲆⵠ = 0;
                    H(c);
                }
                h.globalAlpha = 1;
            }
            Tw.alert.Δᐃᐃⵠ("#FFF", "#000");
            if (R.waiting) {
                this.ⵠⵠᐃᐃΔⵠⲆ.Δᐃᐃⵠ();
            }
        };
        var b = 0;
        var W = Math.pow(2, b++);
        var d = Math.pow(2, b++);
        this.ⵠⵠⲆᐃⲆ = d;
        var v = Math.pow(2, b++);
        var m = Math.pow(2, b++);
        var c = Math.pow(2, b++);
        var p = Math.pow(2, b++);
        var C = Math.pow(2, b++);
        var M = Math.pow(2, b++);
        this.ΔΔⵠⵠᐃ = M;
        var f = Math.pow(2, b++);
        var z = Math.pow(2, b++);
        var T = Math.pow(2, b++);
        var w = Math.pow(2, b++);
        var P = Math.pow(2, b++);
        var k = Math.pow(2, b++);
        var x = Math.pow(2, b++);
        var J = Math.pow(2, b++);
        var B = Math.pow(2, b++);
        var E = Math.pow(2, b++);
        var D = Math.pow(2, b++);
        var I = Math.pow(2, b++);
        var S = Math.pow(2, b++);
        var Q = Math.pow(2, b++);
        var X = Math.pow(2, b++);
        var F = Math.pow(2, b++);
        var G = Math.pow(2, b++);
        this.ΔΔⵠᐃΔ = G;
        var Y = Math.pow(2, b++);
        this.ᐃᐃⲆⲆⲆ = Y;
        var L = Math.pow(2, b++);
        this.ΔⲆⵠⲆⵠ = L;
        var O = Math.pow(2, b++);
        function y(a, b, c) {
            for (var d = 0; R.ΔⵠΔᐃ.length > d; d++) {
                if (R.ΔⵠΔᐃ[d].view & a) {
                    R.ΔⵠΔᐃ[d].active = b;
                }
            }
            for (d = 0; d < R.buttons.length; d++) {
                if (R.buttons[d].view & a) {
                    R.buttons[d].info.active = b;
                }
            }
            for (d = 0; R.ᐃᐃᐃⲆᐃ.length > d; d++) {
                if (R.ᐃᐃᐃⲆᐃ[d].view & a) {
                    R.ᐃᐃᐃⲆᐃ[d].style.display = c;
                }
            }
        }
        this.ᐃᐃⲆᐃⵠ = W;
        function H(a) {
            if (R.ΔⵠΔⵠΔᐃᐃ !== $a) {
                y(f, ea, "none");
                y(z, ea, "none");
                q();
                if (R.ᐃᐃⲆᐃⵠ !== a && R.ΔΔⵠⲆⵠ < 1) {
                    R.ΔᐃΔⵠⲆ.style.display = W === a || c === a || d === a || C === a || m === a || a === p ? "inline-block" : "none";
                    y(R.ᐃᐃⲆᐃⵠ, ea, "none");
                    R.ᐃᐃⲆᐃⵠ = a;
                    y(R.ᐃᐃⲆᐃⵠ, fa, "inline-block");
                }
            }
        }
        function q() {
            var b = Number(ⵠΔᐃⲆ.get("starve_crate"));
            var c = Number(ⵠΔᐃⲆ.get("starve_dead"));
            var d = Number(ⵠΔᐃⲆ.get("starve_book"));
            var e = Number(ⵠΔᐃⲆ.get("starve_bag"));
            var f = Number(ⵠΔᐃⲆ.get("starve_skin"));
            var g = Number(ⵠΔᐃⲆ.get("starve_accessory"));
            if (df.unlock.ΔΔᐃΔ[df.ΔΔᐃΔ] <= 0) {
                df.ΔΔᐃΔ = df.unlock.ΔΔᐃΔ[f] > 0 ? f : 0;
            }
            if (df.unlock.ᐃⵠᐃⲆⵠ[df.ᐃⵠᐃⲆⵠ] <= 0) {
                df.ᐃⵠᐃⲆⵠ = df.unlock.ᐃⵠᐃⲆⵠ[d] > 0 ? d : 0;
            }
            if (df.unlock.ΔⲆⲆᐃΔ[df.ΔⲆⲆᐃΔ] <= 0) {
                df.ΔⲆⲆᐃΔ = df.unlock.ΔⲆⲆᐃΔ[c] > 0 ? c : 0;
            }
            if (df.unlock.ᐃⲆⵠᐃᐃ[df.ᐃⲆⵠᐃᐃ] <= 0) {
                df.ᐃⲆⵠᐃᐃ = df.unlock.ᐃⲆⵠᐃᐃ[b] > 0 ? b : 0;
            }
            if (df.unlock.ΔᐃΔⲆᐃ[df.ΔᐃΔⲆᐃ] <= 0) {
                df.ΔᐃΔⲆᐃ = df.unlock.ΔᐃΔⲆᐃ[g] > 0 ? g : 0;
            }
            if (df.unlock.ⲆΔΔⵠⵠ[df.ⲆΔΔⵠⵠ] <= 0) {
                df.ⲆΔΔⵠⵠ = df.unlock.ⲆΔΔⵠⵠ[e] > 0 ? e : 0;
            }
        }
        function N(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== undefined) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== undefined) {
                    c();
                }
            };
            d.send();
        }
        function K() {
            q();
            if (Jf % 2) {
                console.log(Tk);
                ᐃⲆΔΔ.connect();
            } else {
                console.log(undefined);
                if (aj.Widget.isBlocked === 1) {
                    aj.Widget.createAdPlayer(ᐃⲆΔΔ.connect.bind(ᐃⲆΔΔ), ᐃⲆΔΔ.connect.bind(ᐃⲆΔΔ));
                } else {
                    aj.Widget.preroll();
                    aj.Widget.play = ᐃⲆΔΔ.connect.bind(ᐃⲆΔΔ);
                }
            }
        }
        function U(a) {
            if (Tw.ⲆΔᐃΔⵠⵠᐃ !== Yk && Tw.ᐃⵠⵠΔⲆⲆᐃ !== undefined && Tw.ᐃⵠᐃᐃᐃΔΔ !== ek) {
                a();
            }
        }
        this.ⲆΔᐃᐃᐃⲆⲆ = 0;
        this.ⵠᐃᐃⵠ = H;
        this.ⵠᐃⵠⲆΔⲆⵠ = function (b, a) {
            let c = 0;
            let d = "0";
            if (_w) {
                d = _w + "0";
            }
            if (Tw.ⲆΔᐃΔⵠⵠᐃ) {
                U(b);
            } else {
                N(`${Df}token?id=${d}`, function (d) {
                    if (c === 1) {
                        return;
                    }
                    const e = d.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return Pk(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Tw.ⲆΔᐃΔⵠⵠᐃ = f + a;
                    U(b);
                }, function () {
                    if (c !== 1) {
                        if (a === 1) {
                            c = 1;
                            b();
                            return;
                        } else {
                            R.waiting = false;
                            return;
                        }
                    }
                });
            }
            N(`${If}get`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return Qs(a, 19008, 7458, 23395, 10039, 21515);
                }(g));
                Tw.ᐃⵠⵠΔⲆⲆᐃ = f + a;
                Tw.ⲆⲆᐃᐃᐃΔⵠ = a;
                U(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        R.waiting = cr;
                        return;
                    }
                }
            });
            N(`${If}set`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(function (a) {
                    return Pr(a, 54544, 63177, 54851, 39013, 5530);
                }(g));
                Tw.ᐃⵠᐃᐃᐃΔΔ = f + a;
                Tw.ⲆⲆⲆΔⲆΔᐃⵠᐃ = a;
                U(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        R.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ⲆΔᐃᐃⲆΔᐃ = function () {
            if (R.waiting === false) {
                Tw.reconnect.enabled = false;
                R.waiting = ra;
                R.ⵠᐃⵠⲆΔⲆⵠ(K);
            }
        };
        var V = 1;
        var Z = 2;
        var _ = 4;
        var aa = 8;
        var ba = 16;
        var ca = 32;
        var da = 1;
        var ea = 0;
        var fa = 1;
        if (aj.innerWidth < 1300) {
            this.ᐃᐃⲆⵠᐃ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: fa,
                position: _ | V,
                view: W,
                translate: {
                    ⲆⲆⲆⵠΔ: 200,
                    y: 0,
                    x: 0,
                    ΔΔᐃⵠᐃ: 184
                }
            };
        } else {
            this.ᐃᐃⲆⵠᐃ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: fa,
                position: _ | ba,
                view: W,
                translate: {
                    x: 0,
                    y: 0,
                    ⲆⲆⲆⵠΔ: -180,
                    ΔΔᐃⵠᐃ: 184
                }
            };
        }
        this.ᐃᐃⲆⵠᐃ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !R.waiting && !R.ΔⲆΔⲆⲆⵠⲆⵠΔ) {
                R.ⲆΔᐃᐃⲆΔᐃ();
            }
        });
        this.ᐃᐃⲆⵠᐃ.input.value = ⵠΔᐃⲆ.get("starve_nickname") ? ⵠΔᐃⲆ.get("starve_nickname") : "";
        this.ⲆΔⵠᐃⲆⲆΔᐃᐃ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: ea,
            position: _ | ba,
            view: d,
            translate: {
                ⲆⲆⲆⵠΔ: -122,
                y: 0,
                ΔΔᐃⵠᐃ: 110,
                x: 0
            }
        };
        if (aj.innerWidth < 1300) {
            this.ⲆⲆᐃⵠΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: fa,
                position: _ | V,
                view: W,
                translate: {
                    ⲆⲆⲆⵠΔ: 208,
                    x: 0,
                    ΔΔᐃⵠᐃ: 225,
                    y: 0
                }
            };
        } else {
            this.ⲆⲆᐃⵠΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: fa,
                position: _ | ba,
                view: W,
                translate: {
                    ΔΔᐃⵠᐃ: 225,
                    y: 0,
                    x: 0,
                    ⲆⲆⲆⵠΔ: -180
                }
            };
        }
        this.ⵠⲆⵠⵠⲆ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: ea,
            position: _ | ba,
            view: C,
            translate: {
                x: 0,
                ⲆⲆⲆⵠΔ: -294.5,
                y: 0,
                ΔΔᐃⵠᐃ: 190
            }
        };
        this.ᐃΔⵠΔᐃΔᐃᐃⵠ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: ea,
            position: _ | ba,
            view: d,
            translate: {
                ⲆⲆⲆⵠΔ: 125,
                y: 0,
                x: 0,
                ΔΔᐃⵠᐃ: 187
            }
        };
        this.ᐃᐃⲆΔⵠⲆⵠᐃᐃ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: ea,
            position: _ | ba,
            view: L,
            translate: {
                y: 0,
                ⲆⲆⲆⵠΔ: -220,
                ΔΔᐃⵠᐃ: 350,
                x: 0
            }
        };
        b = 0;
        this.ᐃᐃᐃⲆᐃ = [];
        this.ᐃᐃᐃⲆᐃ[b++] = this.ᐃᐃⲆⵠᐃ;
        this.ᐃᐃᐃⲆᐃ[b++] = this.ⲆⲆᐃⵠΔ;
        this.ᐃᐃᐃⲆᐃ[b++] = this.ⵠⲆⵠⵠⲆ;
        this.ᐃᐃᐃⲆᐃ[b++] = this.ⲆΔⵠᐃⲆⲆΔᐃᐃ;
        this.ᐃᐃᐃⲆᐃ[b++] = this.ᐃΔⵠΔᐃΔᐃᐃⵠ;
        this.ᐃᐃᐃⲆᐃ[b++] = this.ᐃᐃⲆΔⵠⲆⵠᐃᐃ;
        b = 0;
        this.ΔⵠΔᐃ = [];
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⲆⵠⲆΔΔⵠⵠ, fa, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⲆᐃⲆⲆⵠᐃⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠⲆⵠⵠΔΔⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔⲆⲆΔᐃΔⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠᐃᐃΔᐃᐃᐃ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⲆⵠⲆⲆΔᐃⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔΔⵠⲆⵠⵠⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠΔᐃⵠⵠⵠᐃ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ᐃⵠΔΔᐃⵠᐃ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔⲆᐃΔⲆⵠΔ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ᐃⲆΔᐃⲆⲆⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔΔⲆⵠᐃⲆⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⲆΔⲆⲆⲆᐃⵠ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠΔⲆᐃⵠⲆⲆ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔⲆᐃΔΔⵠΔ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ΔᐃⲆⲆᐃⲆΔ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⲆᐃⲆⵠᐃⵠᐃ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠⵠᐃⲆᐃⲆΔ, ea, 0, 0, V);
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ⵠΔᐃⵠⵠᐃⵠ, ea, 0, 0, V);
        if (aj.innerWidth < 1300) {
            this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔᐃⲆⵠᐃᐃΔ, fa, 200, 100, _ | V);
        } else {
            this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔᐃⲆⵠᐃᐃΔ, fa, -753 / 4, 100, _ | ba);
        }
        this.ΔⵠΔᐃ[b++].view = W;
        this.ΔⵠΔᐃ[b++] = Yv(ⵠᐃ.ᐃᐃⵠΔᐃⵠΔ, fa, 403, -10, Z);
        if (aj.innerWidth > 1300) {
            this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃⵠⵠᐃᐃⲆⲆ, fa, -885 / 4, -159.5, aa | ba);
            this.ΔⵠΔᐃ[b++].view = W;
        }
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⵠΔⲆⵠᐃⲆ, ea, -1293 / 4, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = d;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠΔⲆⲆΔᐃΔ, ea, -1425 / 4, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = m;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃᐃⲆΔΔⵠᐃ, ea, -905 / 4, 50, _ | ba);
        this.ΔⵠΔᐃ[b++].view = v;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⵠⵠᐃΔᐃΔ, ea, -402, 130, _ | ba);
        this.ΔⵠΔᐃ[b++].view = c;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⲆΔᐃΔΔⵠ, ea, -1117 / 4, 130, _ | ba);
        this.ΔⵠΔᐃ[b++].view = G;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃΔᐃⵠⵠⵠᐃ, ea, -1222 / 4, 130, _ | ba);
        this.ΔⵠΔᐃ[b++].view = Y;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔⲆᐃⵠΔⲆᐃ, ea, -305.5, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = L;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔΔᐃⵠᐃᐃⲆ, ea, -ⵠᐃ.ΔΔᐃⵠᐃᐃⲆ.width / 4 - 350, -15, _ | ba);
        this.ΔⵠΔᐃ[b++].view = O;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⲆⵠΔᐃⵠⵠⲆ, ea, -374.25, 110, _ | ba);
        this.ΔⵠΔᐃ[b++].view = p;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠᐃΔΔΔΔⲆ, ea, -1226 / 4, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = C;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃⵠⵠᐃᐃᐃⲆ, ea, -345.25, 80, _ | ba);
        this.ΔⵠΔᐃ[b++].view = M;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃΔⵠⲆⵠᐃⲆ, ea, -1542 / 4, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = T;
        var ha = 360 / 100;
        var ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#25c5d6", ha * 3], ["#e2cf27", ha * 10], ["#afac98", ha * 30], ["#d88e23", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = T;
        this.ⲆΔⵠΔᐃΔⵠᐃⵠ = function (b, c, d) {
            var e;
            R.ΔΔⵠⲆⵠ = 1;
            R.ΔⵠΔΔⲆⲆᐃ = 0;
            R.ᐃⲆⲆⲆᐃⵠᐃ = 0;
            R.ΔΔⲆⵠⵠᐃⲆ = b;
            R.ⵠΔⵠⵠᐃⵠⲆ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; f < ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ.length && d !== ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[f].id; f++);
                e = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ[f];
                R.unlock.ΔΔᐃΔ[f] = 1;
            } else if (c === 1) {
                for (f = 0; f < ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ.length && ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ[f].id !== d; f++);
                e = ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ[f];
                R.unlock.ΔᐃΔⲆᐃ[f] = 1;
            } else if (c === 2) {
                for (f = 0; ⵠⲆⲆⲆ.ΔⲆⲆⲆ.length > f && ⵠⲆⲆⲆ.ΔⲆⲆⲆ[f].id !== d; f++);
                e = ⵠⲆⲆⲆ.ΔⲆⲆⲆ[f];
                R.unlock.ⲆΔΔⵠⵠ[f] = 1;
            } else if (c === 3) {
                for (f = 0; ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ.length > f && d !== ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ[f].id; f++);
                e = ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ[f];
                R.unlock.ᐃⵠᐃⲆⵠ[f] = 1;
            } else if (c === 4) {
                for (f = 0; f < ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ.length && d !== ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ[f].id; f++);
                e = ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ[f];
                R.unlock.ᐃⲆⵠᐃᐃ[f] = 1;
                R.unlock.ΔⲆⲆᐃΔ[f] = 1;
            }
            R.ΔᐃⵠΔⵠᐃⲆ = f;
            R.ⵠⲆⵠⵠᐃΔⲆ = Vv("by " + e.ⵠⵠᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, eo, 30, 24, ts, undefined, undefined, gj, "#000000", 24);
            R.ΔᐃΔⲆᐃΔΔ = Vv(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, ii, 30, 24, ii, undefined, undefined, undefined, "#000000", 20);
        };
        this.ΔΔⵠⲆⵠ = 0;
        this.ΔⵠΔΔⲆⲆᐃ = 0;
        this.ΔΔⲆⵠⵠᐃⲆ = 0;
        this.ⵠΔⵠⵠᐃⵠⲆ = 0;
        this.ᐃⲆⲆⲆᐃⵠᐃ = 0;
        this.ⵠⲆⵠⵠᐃΔⲆ = _q;
        this.ΔᐃΔⲆᐃΔΔ = undefined;
        var ja = 197;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔⵠΔⲆⲆΔⵠ, ea, -385.5, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = x;
        ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#d45ce5", ha * 3], ["#25c5d6", ha * 10], ["#e2cf27", ha * 30], ["#afac98", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = x;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃᐃᐃⲆⲆΔⲆ, ea, -1542 / 4, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = P;
        ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#d33a2a", ha * 3], ["#d45ce5", ha * 10], ["#25c5d6", ha * 30], ["#e2cf27", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = P;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔⵠⲆΔΔᐃⵠ, ea, -385.5, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = k;
        ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#25c5d6", ha * 3], ["#e2cf27", ha * 10], ["#afac98", ha * 30], ["#d88e23", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = k;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃᐃⲆⵠⲆⵠⲆ, ea, -385.5, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = w;
        ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#d45ce5", ha * 3], ["#25c5d6", ha * 10], ["#e2cf27", ha * 30], ["#afac98", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = w;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⲆⲆΔᐃΔⲆⵠ, ea, -385.5, 150, _ | ba);
        this.ΔⵠΔᐃ[b++].view = J;
        ia = this.ᐃⵠⵠᐃⲆⵠⲆ([["#d33a2a", ha * 3], ["#d45ce5", ha * 10], ["#25c5d6", ha * 30], ["#e2cf27", ha * 57]]);
        this.ΔⵠΔᐃ[b] = Yv(ia, ea, -ia.width / 4, 178, _ | ba);
        this.ΔⵠΔᐃ[b++].view = J;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⲆΔⲆⲆᐃⲆ, ea, -1366 / 4, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = B;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔΔⵠΔΔᐃⲆ, ea, -341.5, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = S;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⲆⵠΔⵠⵠⵠ, ea, -341.5, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = D;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠᐃᐃⲆᐃⲆⵠ, ea, -341.5, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = I;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔᐃⲆᐃΔⵠᐃ, ea, -341.5, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = E;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ΔⵠᐃΔᐃᐃⲆ, ea, -1366 / 4, 100, _ | ba);
        this.ΔⵠΔᐃ[b++].view = Q;
        ⵠΔⲆᐃⲆΔⲆ = b++;
        this.ΔⵠΔᐃ[ⵠΔⲆᐃⲆΔⲆ] = Yv(ⵠᐃ.ⵠΔⲆᐃⲆΔⲆ, ea, 484, 0, _);
        ⲆΔΔⲆΔᐃⲆ = b++;
        this.ΔⵠΔᐃ[ⲆΔΔⲆΔᐃⲆ] = Yv(ⵠᐃ.ⲆΔΔⲆΔᐃⲆ, ea, 812.5, 0, _);
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⵠΔᐃⵠⵠⵠ, ea, -758 / 4, -5, _ | ba);
        this.ΔⵠΔᐃ[b++].view = z;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠⲆⵠᐃⵠⲆΔ, ea, -758 / 4, -5, _ | ba);
        this.ΔⵠΔᐃ[b++].view = f;
        ΔᐃᐃⲆⵠⵠᐃ = b++;
        this.ΔⵠΔᐃ[ΔᐃᐃⲆⵠⵠᐃ] = Yv(ⵠᐃ.ᐃᐃᐃΔⵠⲆⲆ, fa, 93, 30, _);
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ⵠᐃⵠⵠΔᐃᐃ, ea, -173, 110, _ | ba);
        this.ΔⵠΔᐃ[b++].view = X;
        this.ΔⵠΔᐃ[b] = Yv(ⵠᐃ.ᐃΔΔᐃΔΔᐃ, ea, -173, 110, _ | ba);
        this.ΔⵠΔᐃ[b++].view = F;
        b = 0;
        this.buttons = [];
        this.buttons[b] = Tv(50, 57, 0, [ⵠᐃ.ΔᐃⵠᐃⲆⵠⲆ, ⵠᐃ.ⵠΔΔⲆᐃⲆΔ, ⵠᐃ.ⵠΔᐃⲆΔΔΔ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                H(M);
            } else {
                H(v);
            }
        }, 320, 0, V, fa);
        b++;
        if (aj.innerWidth < 1300) {
            this.buttons[b] = Tv(202, 97, 0, [ⵠᐃ.ΔⲆⵠⲆᐃⲆᐃ, ⵠᐃ.ⵠΔⲆᐃᐃⲆⲆ, ⵠᐃ.ⲆⲆᐃⵠⵠⲆᐃ], da, 0, this.ⲆΔᐃᐃⲆΔᐃ, 462, 235, _ | V, fa);
        } else {
            this.buttons[b] = Tv(202, 97, 0, [ⵠᐃ.ΔⲆⵠⲆᐃⲆᐃ, ⵠᐃ.ⵠΔⲆᐃᐃⲆⲆ, ⵠᐃ.ⲆⲆᐃⵠⵠⲆᐃ], da, 0, this.ⲆΔᐃᐃⲆΔᐃ, 74, 235, _ | ba, fa);
        }
        this.buttons[b].view = W;
        b++;
        if (aj.innerWidth > 1300) {
            this.buttons[b] = Tv(355, 168, 0, [ⵠᐃ.ᐃⲆΔᐃⵠⲆⵠ, ⵠᐃ.ᐃⲆΔᐃⵠⲆⵠ, ⵠᐃ.ᐃⲆΔᐃⵠⲆⵠ], da, 0, function () {
                aj.open("./changelog.html", "_blank");
            }, -195, -115, aa | ba, fa);
            this.buttons[b++].view = W;
            this.buttons[b] = Tv(355, 168, 0, [ⵠᐃ.ⲆⲆᐃⵠⵠΔⵠ, ⵠᐃ.ⲆⲆᐃⵠⵠΔⵠ, ⵠᐃ.ⲆⲆᐃⵠⵠΔⵠ], da, 0, function () {
                aj.open("https://taming.io", "_blank");
            }, 20, -115, aa | ba, fa);
            this.buttons[b++].view = W;
        }
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ⵠⲆⲆᐃⵠΔⲆ, ⵠᐃ.ⵠᐃᐃΔΔᐃⵠ, ⵠᐃ.ΔⲆΔⵠⵠⵠᐃ], da, 0, function () {
            aj.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ᐃⲆΔΔⲆΔⵠ, ⵠᐃ.ΔⲆᐃⵠⲆⲆΔ, ⵠᐃ.ΔⵠᐃⲆⲆΔⵠ], da, 0, function () {
            aj.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ⲆⲆΔⲆⲆᐃᐃ, ⵠᐃ.ⲆᐃᐃΔΔΔⲆ, ⵠᐃ.ⵠⵠⵠΔⵠᐃⲆ], da, 0, function () {
            aj.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ᐃⲆᐃΔⵠᐃᐃ, ⵠᐃ.ⵠᐃΔⲆᐃⵠΔ, ⵠᐃ.ⵠΔΔᐃⵠⲆⲆ], da, 0, function () {
            aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ΔⵠⵠⲆΔⵠⲆ, ⵠᐃ.ⲆⲆⲆᐃᐃⲆᐃ, ⵠᐃ.ⲆᐃΔⵠᐃΔⵠ], da, 0, function () {
            aj.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ᐃⲆⲆⲆⲆΔⵠ, ⵠᐃ.ᐃⲆΔⵠⵠΔᐃ, ⵠᐃ.ⲆΔᐃⵠΔᐃᐃ], da, 0, function () {
            aj.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, Z, fa);
        this.buttons[b++] = Tv(80, 80, 0, [ⵠᐃ.ⵠⵠⵠᐃΔⵠⲆ, ⵠᐃ.ΔⵠΔᐃᐃⲆᐃ, ⵠᐃ.ⲆΔⲆⵠᐃᐃⲆ], da, 0, function () {
            aj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, Z, fa);
        ⵠΔᐃⲆⲆⲆΔ = b++;
        this.buttons[ⵠΔᐃⲆⲆⲆΔ] = Tv(232, 142, 0, [ⵠᐃ.ᐃⵠⵠᐃⲆⵠⵠ, ⵠᐃ.ⵠᐃᐃⲆⵠΔⵠ, ⵠᐃ.ᐃΔⲆⵠᐃⲆΔ], da, 0, function () {
            H(C);
            Xf(df.ᐃᐃⲆⲆΔᐃΔ, df.ᐃΔᐃΔⲆⲆⲆ, df.ᐃⲆΔΔⵠᐃΔ, df.ⵠᐃΔᐃΔΔᐃ);
        }, -5, 573, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃ, ⵠᐃ.ⵠᐃⲆⲆⲆⲆᐃ], da, 1, function () {
            H(C);
        }, -5, 566, V, fa);
        ΔⵠΔᐃΔΔᐃ = b++;
        this.buttons[ΔⵠΔᐃΔΔᐃ] = Tv(236, 165, 0, [ⵠᐃ.ΔⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⲆΔΔⵠ, ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ], da, 0, function () {
            H(p);
        }, -5, 494, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.ᐃⲆⵠΔᐃΔΔ, ⵠᐃ.ᐃⲆⵠΔᐃΔΔ, ⵠᐃ.ᐃⲆⵠΔᐃΔΔ], da, 1, function () {
            H(p);
        }, -5, 494, V, fa);
        ΔⲆᐃΔΔΔᐃ = b++;
        this.buttons[ΔⲆᐃΔΔΔᐃ] = Tv(236, 165, 0, [ⵠᐃ.ΔⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⲆΔΔⵠ, ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                if (df.ᐃΔΔⵠᐃᐃⵠ - Date.now() > 0) {
                    H(L);
                } else {
                    H(G);
                }
            } else {
                H(v);
            }
        }, -5, 415, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.ⵠᐃⵠᐃⵠⲆⲆ, ⵠᐃ.ⵠᐃⵠᐃⵠⲆⲆ, ⵠᐃ.ⵠᐃⵠᐃⵠⲆⲆ], da, 1, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                if (df.ᐃΔΔⵠᐃᐃⵠ - Date.now() > 0) {
                    H(L);
                } else {
                    H(G);
                }
            } else {
                H(v);
            }
        }, -5, 415, V, fa);
        ⵠΔᐃⲆⵠⲆⲆ = b++;
        this.buttons[ⵠΔᐃⲆⵠⲆⲆ] = Tv(236, 165, 0, [ⵠᐃ.ΔⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⲆΔΔⵠ, ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ], da, 0, function () {
            H(c);
        }, -5, 336, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.ᐃᐃⲆᐃΔᐃΔ, ⵠᐃ.ᐃᐃⲆᐃΔᐃΔ, ⵠᐃ.ᐃᐃⲆᐃΔᐃΔ], da, 1, function () {
            H(c);
        }, -5, 336, V, fa);
        ⲆⵠᐃⲆⲆⲆⵠ = b++;
        this.buttons[ⲆⵠᐃⲆⲆⲆⵠ] = Tv(236, 165, 0, [ⵠᐃ.ΔⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⲆΔΔⵠ, ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ], da, 0, function () {
            H(m);
        }, -5, 257, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.Ⲇⵠᐃⵠᐃⵠᐃ, ⵠᐃ.Ⲇⵠᐃⵠᐃⵠᐃ, ⵠᐃ.Ⲇⵠᐃⵠᐃⵠᐃ], da, 1, function () {
            H(m);
        }, -5, 257, V, fa);
        ⵠⲆΔΔΔⵠⲆ = b++;
        this.buttons[ⵠⲆΔΔΔⵠⲆ] = Tv(236, 165, 0, [ⵠᐃ.ΔⵠⲆᐃⵠᐃⵠ, ⵠᐃ.ⲆᐃᐃⲆΔΔⵠ, ⵠᐃ.ΔᐃⵠᐃⲆⲆⲆ], da, 0, function () {
            H(W);
        }, -5, 178, V, fa);
        this.buttons[b++] = Tv(236, 165, 0, [ⵠᐃ.ΔⲆⲆΔⲆΔᐃ, ⵠᐃ.ΔⲆⲆΔⲆΔᐃ, ⵠᐃ.ΔⲆⲆΔⲆΔᐃ], da, 1, function () {
            H(W);
        }, -5, 178, V, fa);
        ᐃⵠᐃᐃΔᐃⵠ = b++;
        this.ᐃⵠᐃᐃΔᐃⵠ = ᐃⵠᐃᐃΔᐃⵠ;
        this.buttons[ᐃⵠᐃᐃΔᐃⵠ] = Tv(324, 222, 0, [ⵠᐃ.ΔᐃⲆΔⵠᐃᐃ, ⵠᐃ.ᐃᐃΔⵠΔⲆⵠ, ⵠᐃ.ⲆⵠⲆⵠΔᐃᐃ], da, 0, function () {
            H(v);
        }, 0, 70, V, fa);
        ᐃⲆⲆⵠΔᐃⵠ = b++;
        ⵠΔⲆᐃⵠΔⵠ = b++;
        this.ᐃⲆⲆⵠΔᐃⵠ = ᐃⲆⲆⵠΔᐃⵠ;
        this.ⵠΔⲆᐃⵠΔⵠ = ⵠΔⲆᐃⵠΔⵠ;
        this.buttons[ᐃⲆⲆⵠΔᐃⵠ] = Tv(324, 222, 0, [ⵠᐃ.ᐃΔΔⵠⵠⵠⲆ, ⵠᐃ.ΔⵠΔⲆᐃᐃᐃ, ⵠᐃ.ⵠⵠΔᐃᐃⲆᐃ], da, 0, function () {
            H(d);
            sa(-1);
        }, 0, 70, V, ea);
        this.buttons[ⵠΔⲆᐃⵠΔⵠ] = Tv(324, 222, 0, [ⵠᐃ.ⵠΔΔΔⲆⲆᐃ, ⵠᐃ.ⵠΔΔΔⲆⲆᐃ, ⵠᐃ.ⵠΔΔΔⲆⲆᐃ], da, 1, function () {
            H(d);
            sa(-1);
        }, 0, 70, V, ea);
        if (ᐃⲆΔΔ.ᐃᐃⵠΔⲆΔᐃ === 0) {
            var ka = b++;
            if (aj.innerWidth < 1300) {
                this.buttons[ka] = Tv(266, 176, 0, [ⵠᐃ.ΔⵠΔᐃⲆⵠⲆ, ⵠᐃ.ⵠⵠⵠΔⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆⵠⲆᐃ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(0);
                }, 150, 300, V | _, fa);
            } else {
                this.buttons[ka] = Tv(266, 176, 0, [ⵠᐃ.ΔⵠΔᐃⲆⵠⲆ, ⵠᐃ.ⵠⵠⵠΔⲆⵠΔ, ⵠᐃ.ⵠⵠᐃⲆⵠⲆᐃ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(0);
                }, -340, 100, ba | _, fa);
            }
            this.buttons[ka].view = W;
            this.buttons[ka].hint = 0;
            var la = b++;
            if (aj.innerWidth < 1300) {
                this.buttons[la] = Tv(266, 176, 0, [ⵠᐃ.ᐃⲆⲆⲆⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃⲆⲆⲆⲆ, ⵠᐃ.ΔᐃᐃⲆⲆⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(4);
                }, 150, 400, V | _, fa);
            } else {
                this.buttons[la] = Tv(266, 176, 0, [ⵠᐃ.ᐃⲆⲆⲆⵠᐃᐃ, ⵠᐃ.ⲆⲆᐃⲆⲆⲆⲆ, ⵠᐃ.ΔᐃᐃⲆⲆⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(4);
                }, -340, 200, ba | _, fa);
            }
            this.buttons[la].view = W;
            this.buttons[la].hint = 0;
            var na = b++;
            if (aj.innerWidth < 1300) {
                this.buttons[na] = Tv(266, 176, 0, [ⵠᐃ.ⲆⲆΔⵠᐃΔΔ, ⵠᐃ.ᐃⲆᐃΔᐃᐃᐃ, ⵠᐃ.ᐃⵠΔⵠⲆⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(6);
                }, 450, 300, V | _, fa);
            } else {
                this.buttons[na] = Tv(266, 176, 0, [ⵠᐃ.ⲆⲆΔⵠᐃΔΔ, ⵠᐃ.ᐃⲆᐃΔᐃᐃᐃ, ⵠᐃ.ᐃⵠΔⵠⲆⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(6);
                }, -340, 300, ba | _, fa);
            }
            this.buttons[na].view = W;
            this.buttons[na].hint = 0;
            var oa = b++;
            if (aj.innerWidth < 1300) {
                this.buttons[oa] = Tv(266, 176, 0, [ⵠᐃ.ⵠΔᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⲆᐃⲆⵠᐃᐃ, ⵠᐃ.ⲆⵠΔᐃΔⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(2);
                }, 300, 300, V | _, fa);
            } else {
                this.buttons[oa] = Tv(266, 176, 0, [ⵠᐃ.ⵠΔᐃⲆᐃᐃᐃ, ⵠᐃ.ⲆⲆᐃⲆⵠᐃᐃ, ⵠᐃ.ⲆⵠΔᐃΔⵠΔ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(2);
                }, 204, 100, ba | _, fa);
            }
            this.buttons[oa].view = W;
            this.buttons[oa].hint = 0;
            var pa = b++;
            if (aj.innerWidth < 1300) {
                this.buttons[pa] = Tv(266, 176, 0, [ⵠᐃ.ᐃΔΔⵠⵠᐃⲆ, ⵠᐃ.ΔⲆᐃᐃΔⵠⲆ, ⵠᐃ.ⵠⲆⵠⲆⵠⲆⵠ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(3);
                }, 300, 400, V | _, fa);
            } else {
                this.buttons[pa] = Tv(266, 176, 0, [ⵠᐃ.ᐃΔΔⵠⵠᐃⲆ, ⵠᐃ.ΔⲆᐃᐃΔⵠⲆ, ⵠᐃ.ⵠⲆⵠⲆⵠⲆⵠ], da, 0, function () {
                    ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(3);
                }, 204, 200, ba | _, fa);
            }
            this.buttons[pa].view = W;
            this.buttons[pa].hint = 0;
            var qa = b++;
            this.buttons[qa] = Tv(266, 176, 0, [ⵠᐃ.ⲆⲆΔΔΔΔΔ, ⵠᐃ.ΔᐃᐃⲆΔⵠⵠ, ⵠᐃ.ⲆⵠᐃⲆΔⵠⵠ], da, 0, function () {
                ᐃⲆΔΔ.ⲆⲆᐃⲆΔ(7);
            }, aj.innerWidth < 1300 ? 450 : 204, aj.innerWidth < 1300 ? 400 : 300, (aj.innerWidth < 1300 ? V : ba) | _, fa);
            this.buttons[qa].view = W;
            this.buttons[qa].hint = 0;
        }
        function sa(b, c) {
            if (c !== Ch) {
                df.ⵠⲆⵠⵠᐃᐃⵠ = c;
                var d = df.ΔΔⵠⵠΔⲆΔ[c];
                df.ⲆΔⲆⲆⵠ = d.score;
                df.ΔⲆⵠΔΔⲆⵠ = d.kill;
                df.ⲆⵠⲆΔⵠᐃⵠ = d.death;
                df.time = d.time;
                df.ΔⲆΔⲆⲆⵠᐃ = d.bestScore;
                df.ⲆᐃΔᐃᐃⵠⵠ = d.bestKill;
                df.ⲆᐃᐃⵠⵠⲆⲆ = d.bestTime;
                df.ΔΔᐃⲆⲆⵠⲆ = d.scoreTotal;
            }
            if (b === undefined) {
                b = df.ⵠᐃᐃⵠΔⲆⲆ;
            }
            df.ⵠᐃᐃⵠΔⲆⲆ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = df.ⲆᐃᐃⵠⵠⲆⲆ[b];
                document.getElementById("stats_box_kill").innerHTML = df.ⲆᐃΔᐃᐃⵠⵠ[b];
                document.getElementById("stats_box_score").innerHTML = df.ΔⲆΔⲆⲆⵠᐃ[b];
            } else {
                var f = 0;
                for (var g = 0; g < df.ΔⲆⵠΔΔⲆⵠ.length; g++) {
                    f += df.ΔⲆⵠΔΔⲆⵠ[g];
                }
                var h = 0;
                for (g = 0; df.time.length > g; g++) {
                    h += df.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = df.ⲆΔⲆⲆⵠ;
            }
        }
        this.buttons[b] = Tv(87, 78, 0, [ⵠᐃ.ᐃΔⵠⲆᐃΔΔ, ⵠᐃ.ᐃᐃΔᐃᐃΔⵠ, ⵠᐃ.ⵠᐃᐃⲆᐃΔΔ], da, 0, function () {
            df.ᐃᐃⲆΔᐃⲆΔⲆΔ();
            if (df.ᐃⵠΔΔⲆΔⲆ === 0) {
                H(F);
            } else {
                H(X);
            }
        }, 127, 110, ba | _, ea);
        this.buttons[b++].view = d;
        this.buttons[b] = Tv(87, 78, 0, [ⵠᐃ.ⲆⲆΔⵠΔΔΔ, ⵠᐃ.ⵠⲆΔΔᐃⵠᐃ, ⵠᐃ.ⵠΔⲆⵠⲆΔᐃ], da, 0, function () {
            const a = aj.document.createElement("textarea");
            a.value = _w;
            aj.document.body.appendChild(a);
            a.select();
            aj.document.execCommand("copy");
            aj.document.body.removeChild(a);
        }, 182, 110, ba | _, ea);
        this.buttons[b++].view = d;
        this.buttons[b] = Tv(87, 78, 0, [ⵠᐃ.ΔΔⵠⵠⲆⵠᐃ, ⵠᐃ.ΔΔⲆⲆⲆⲆΔ, ⵠᐃ.ⲆᐃⵠⵠⲆΔᐃ], da, 0, function () {
            (function () {
                if (Qf === Ff && aj.FB && aj.FB.getUserID()) {
                    aj.FB.logout();
                }
                if (Ff === Sf && cx !== ol) {
                    aj.gapi.auth2.getAuthInstance().signOut();
                    cx = undefined;
                }
                _w = undefined;
                $w = eo;
                Ff = undefined;
                df.ᐃΔᐃⲆᐃ = 0;
                df.ⵠⲆⲆⵠΔ = 0;
                df.ⲆΔⲆⲆⵠ = 0;
                df.ⵠΔⵠᐃⵠΔΔ();
                ᐃΔΔΔⵠⵠⵠⵠΔ();
            })();
        }, 255, 110, ba | _, ea);
        this.buttons[b++].view = d;
        this.buttons[b] = Tv(58, 64, 0, [ⵠᐃ.ΔⲆΔᐃᐃⵠⲆ, ⵠᐃ.ΔⵠⵠᐃⲆⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆⲆⲆ], da, 0, function () {
            H(W);
        }, 189, 118, ba | _, ea);
        this.buttons[b++].view = v;
        this.buttons[b] = Tv(497, 72, 0, [ⵠᐃ.ⵠⲆᐃᐃᐃᐃⵠ, ⵠᐃ.ⲆᐃᐃⵠⲆⲆᐃ, ⵠᐃ.ΔⵠⵠⲆᐃΔⵠ], da, 0, function () {
            (function () {
                if (dw) {
                    $w = ΔⲆⵠᐃ.ⵠᐃⵠⲆΔᐃⵠ(40);
                    Ff = _f;
                    _w = dw.userId;
                    aj.ΔⵠⵠⲆⵠⲆⵠ();
                    return;
                }
                aj.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, ba | _, ea);
        this.buttons[b++].view = v;
        this.buttons[b] = Tv(497, 72, 0, [ⵠᐃ.ⵠⵠᐃⵠⲆΔᐃ, ⵠᐃ.ⲆⵠᐃⵠΔⲆⲆ, ⵠᐃ.ⵠᐃΔᐃᐃᐃⲆ], da, 0, function () {
            aj.FB.login(function (a) {
                if (a.authResponse) {
                    aj.FB.api("/me", function (a) {
                        Ff = Qf;
                        $w = aj.FB.getAuthResponse().accessToken;
                        fx();
                        aj.ΔⵠⵠⲆⵠⲆⵠ();
                    });
                }
            });
        }, -130, 430, ba | _, ea);
        this.buttons[b++].view = v;
        ⲆⲆⲆⵠⲆΔᐃ = 20000;
        this.ᐃⲆΔⲆΔᐃⲆ = function (a) {
            var b = df.ᐃⲆᐃΔᐃⲆⵠ(a);
            var c = ⲆⲆⲆⵠⲆΔᐃ * (b * b);
            return (a -= c) / (ⲆⲆⲆⵠⲆΔᐃ * ((b + 1) * (b + 1)) - c);
        };
        this.ᐃⲆᐃΔᐃⲆⵠ = function (a) {
            return Math.floor(Math.sqrt(a / ⲆⲆⲆⵠⲆΔᐃ));
        };
        this.ᐃΔΔΔⵠⵠΔⵠΔ = function (a) {
            df.ⵠᐃⵠⵠᐃ = df.ᐃⲆᐃΔᐃⲆⵠ(a);
            df.ⵠⲆⵠⲆᐃΔΔ = df.ᐃⲆΔⲆΔᐃⲆ(a);
            df.ⵠᐃⲆⲆᐃΔⵠ = 0;
            df.ⲆΔⲆⲆⵠ = a;
        };
        this.ⵠΔΔΔΔⲆⲆᐃⲆ = function (a) {
            df.buttons[df.ᐃⵠᐃᐃΔᐃⵠ].info.active = 0;
            df.buttons[df.ᐃⲆⲆⵠΔᐃⵠ].info.active = 1;
            df.buttons[df.ⵠΔⲆᐃⵠΔⵠ].info.active = 1;
            n();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = aj.decodeURIComponent(aj.escape(aj.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            df.ⵠⲆⲆⵠΔ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            df.ΔΔⵠⵠΔⲆΔ = b;
            R.ᐃΔΔΔⵠⵠΔⵠΔ(c.score);
            df.ⲆΔⲆⲆⵠ = c.score;
            df.ΔⲆⵠΔΔⲆⵠ = c.kill;
            df.ⲆⵠⲆΔⵠᐃⵠ = c.death;
            df.time = c.time;
            df.ΔⲆΔⲆⲆⵠᐃ = c.bestScore;
            df.ⲆᐃΔᐃᐃⵠⵠ = c.bestKill;
            df.ⲆᐃᐃⵠⵠⲆⲆ = c.bestTime;
            df.ΔΔᐃⲆⲆⵠⲆ = c.scoreTotal;
            df.ᐃⵠΔΔⲆΔⲆ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (df.ᐃⵠΔΔⲆΔⲆ === undefined) {
                df.ᐃⵠΔΔⲆΔⲆ = 0;
            }
            df.ᐃΔΔⵠᐃᐃⵠ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                df.ᐃΔΔⵠᐃᐃⵠ = Date.now() + Number(a.privateServerTime);
            }
            df.ᐃΔᐃⲆᐃ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                df.ᐃΔᐃⲆᐃ = Date.now() + Number(a.kit);
            }
            var d = ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ;
            for (var e = 0; a.skins.length > e; e++) {
                if ((g = a.skins[e]) > 0) {
                    for (var f = 0; d.length > f; f++) {
                        if (d[f].id === e) {
                            R.unlock.ΔΔᐃΔ[f] = 1;
                        }
                    }
                }
            }
            d = ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ;
            e = 0;
            for (; a.accessories.length > e; e++) {
                var g = a.accessories[e];
                if (g > 0) {
                    for (f = 0; f < d.length; f++) {
                        if (e === d[f].id) {
                            R.unlock.ΔᐃΔⲆᐃ[f] = 1;
                        }
                    }
                }
            }
            d = ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ;
            e = 0;
            for (; a.books.length > e; e++) {
                if ((g = a.books[e]) > 0) {
                    for (f = 0; d.length > f; f++) {
                        if (d[f].id === e) {
                            R.unlock.ᐃⵠᐃⲆⵠ[f] = 1;
                        }
                    }
                }
            }
            d = ⵠⲆⲆⲆ.ΔⲆⲆⲆ;
            e = 0;
            for (; a.bags.length > e; e++) {
                if ((g = a.bags[e]) > 0) {
                    for (f = 0; d.length > f; f++) {
                        if (e === d[f].id) {
                            R.unlock.ⲆΔΔⵠⵠ[f] = 1;
                        }
                    }
                }
            }
            d = ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ;
            e = 0;
            for (; e < a.crates.length; e++) {
                if ((g = a.crates[e]) > 0) {
                    for (f = 0; f < d.length; f++) {
                        if (e === d[f].id) {
                            R.unlock.ᐃⲆⵠᐃᐃ[f] = 1;
                            R.unlock.ΔⲆⲆᐃΔ[f] = 1;
                        }
                    }
                }
            }
        };
        this.ⲆΔⵠⵠΔⵠᐃΔᐃ = function () {
            aj.ΔⵠⵠⲆⵠⲆⵠ = function () {
                H(W);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", Df + "login?token=" + $w + "&type=" + Ff + (dw ? "&userId=" + dw.userId + "&userInfo=" + dw.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(R.ⵠΔΔΔΔⲆⲆᐃⲆ);
            };
            if (ax === 1) {
                aj.ΔⵠⵠⲆⵠⲆⵠ();
            }
        };
        aj.ᐃΔΔΔⵠⵠⵠⵠΔ = function () {
            df.buttons[df.ᐃⵠᐃᐃΔᐃⵠ].info.active = 1;
            df.buttons[df.ᐃⲆⲆⵠΔᐃⵠ].info.active = 0;
            df.buttons[df.ⵠΔⲆᐃⵠΔⵠ].info.active = 0;
            H(W);
        };
        this.ⲆⵠᐃΔᐃ = function () {
            return df.buttons[df.ᐃⲆⲆⵠΔᐃⵠ].info.active;
        };
        this.buttons[b] = Tv(461, 105, 0, [ⵠᐃ.ⵠᐃⲆⲆᐃΔΔ, ⵠᐃ.ΔⵠᐃᐃⵠΔΔ, ⵠᐃ.ⵠΔⲆⲆΔⵠⲆ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                H(M);
            } else {
                H(v);
            }
        }, -100, 80, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(157, 158, 0, [ⵠᐃ.ᐃⵠⵠⲆⵠⵠᐃ, ⵠᐃ.ⵠⵠⲆᐃΔⵠⵠ, ⵠᐃ.ΔⲆⲆΔᐃⵠᐃ], da, 0, function () {
            aj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, ba | _, ea);
        this.buttons[b++].view = p;
        this.buttons[b] = Tv(66, 73, 0, [ⵠᐃ.ΔⵠᐃᐃⵠⲆᐃ, ⵠᐃ.Ⲇⵠⵠⵠᐃᐃᐃ, ⵠᐃ.ΔⲆΔΔΔΔⵠ], da, 0, undefined, -68, 340, ba | _, ea);
        this.buttons[b++].view = p;
        this.buttons[b] = Tv(66, 73, 0, [ⵠᐃ.ⵠⲆΔⵠΔⵠᐃ, ⵠᐃ.ⵠⲆⵠΔⵠⲆᐃ, ⵠᐃ.ΔᐃᐃⲆⵠᐃᐃ], da, 0, fn, -30, 340, ba | _, ea);
        this.buttons[b++].view = p;
        this.ⵠΔⲆᐃᐃⲆΔᐃᐃ = b;
        this.buttons[b] = Tv(97, 66, 0, [ⵠᐃ.ⵠᐃᐃΔⵠⲆΔ, ⵠᐃ.ⵠⲆⵠᐃΔᐃⲆ, ⵠᐃ.ᐃᐃⲆⲆΔᐃᐃ], da, 0, function () {
            Xf(undefined, undefined, df.ᐃⲆΔΔⵠᐃΔ);
        }, -14, 151, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆⲆᐃⲆⵠⲆⵠ = b;
        this.buttons[b] = Tv(135, 66, 0, [ⵠᐃ.ⲆⵠⵠΔᐃⲆⲆ, ⵠᐃ.ⲆⲆⲆᐃΔᐃᐃ, ⵠᐃ.ΔΔⲆᐃΔᐃⵠ], da, 0, function () {
            Xf(undefined, undefined, df.ⲆⲆᐃⲆⵠⲆⵠ);
        }, 37.5, 151, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆᐃΔᐃⵠⲆⵠ = b;
        this.buttons[b] = Tv(160, 66, 0, [ⵠᐃ.ᐃⲆⵠⵠᐃⵠⵠ, ⵠᐃ.ⵠⲆᐃΔᐃⲆⵠ, ⵠᐃ.ⵠΔᐃᐃⵠᐃΔ], da, 0, function () {
            Xf(Lq, Ch, df.ⲆᐃΔᐃⵠⲆⵠ);
        }, 107.5, 151, ba | _, ea);
        this.buttons[b++].view = C;
        this.ᐃⲆΔΔⵠᐃΔ = b;
        this.buttons[b] = Tv(207, 66, 0, [ⵠᐃ.ⲆⲆΔⵠⲆΔΔ, ⵠᐃ.ⲆΔᐃᐃⵠΔⵠ, ⵠᐃ.ΔⵠΔⲆΔⲆⲆ], da, 0, function () {
            Xf(ek, undefined, df.ᐃⲆΔΔⵠᐃΔ);
        }, 190.5, 151, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆⵠⵠⵠΔⲆⲆ = b;
        this.buttons[b] = Tv(144, 66, 0, [ⵠᐃ.ΔⵠⵠᐃⵠᐃΔ, ⵠᐃ.ΔΔⲆᐃⲆⲆⵠ, ⵠᐃ.ᐃⲆΔⲆⲆᐃⵠ], da, 0, function () {
            Xf(df.ⲆⵠⵠⵠΔⲆⲆ);
        }, 103.5, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ᐃⵠⵠⲆᐃᐃΔ = b;
        this.buttons[b] = Tv(124, 66, 0, [ⵠᐃ.ⵠⲆⲆᐃᐃΔⵠ, ⵠᐃ.ⵠᐃᐃⵠΔⵠᐃ, ⵠᐃ.ⲆΔΔᐃⲆᐃᐃ], da, 0, function () {
            Xf(df.ᐃⵠⵠⲆᐃᐃΔ);
        }, 177.5, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ᐃᐃⲆⲆΔᐃΔ = b;
        this.buttons[b] = Tv(104, 66, 0, [ⵠᐃ.ⲆΔΔΔΔΔᐃ, ⵠᐃ.ⲆᐃᐃⲆᐃᐃΔ, ⵠᐃ.ᐃΔᐃᐃᐃΔᐃ], da, 0, function () {
            Xf(df.ᐃᐃⲆⲆΔᐃΔ);
        }, 242, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ΔⵠⵠᐃΔⵠⲆ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ΔⵠⲆⲆΔⵠᐃ, ⵠᐃ.ᐃⲆⲆᐃΔΔⲆ, ⵠᐃ.ᐃᐃⲆΔⵠΔΔ], da, 0, function () {
            Xf(ma, ts, Gn, df.ΔⵠⵠᐃΔⵠⲆ);
        }, -185, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆᐃⲆⲆⵠΔⲆ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⲆΔᐃⲆᐃΔΔ, ⵠᐃ.ⲆΔᐃᐃⲆⵠΔ, ⵠᐃ.ᐃⵠⵠⵠΔⲆⵠ], da, 0, function () {
            Xf(Ch, gj, undefined, df.ⲆᐃⲆⲆⵠΔⲆ);
        }, -149, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆⵠⲆᐃⲆⵠⵠ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⲆΔᐃⲆⲆᐃᐃ, ⵠᐃ.ᐃⲆⲆᐃᐃⵠⲆ, ⵠᐃ.ⲆᐃᐃⲆΔΔᐃ], da, 0, function () {
            Xf(Kr, Ch, Kr, df.ⲆⵠⲆᐃⲆⵠⵠ);
        }, -113, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.ΔⵠᐃⵠⵠΔⲆ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ᐃΔⵠⵠᐃΔᐃ, ⵠᐃ.ΔΔΔⲆⲆΔᐃ, ⵠᐃ.ⵠⲆΔⵠᐃΔⵠ], da, 0, function () {
            Xf(fn, eo, undefined, df.ΔⵠᐃⵠⵠΔⲆ);
        }, -77, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.ᐃⵠⲆΔΔᐃᐃ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⲆⲆᐃⲆᐃⲆⲆ, ⵠᐃ.ⲆᐃⵠΔᐃΔΔ, ⵠᐃ.ⲆΔᐃⲆⲆΔᐃ], da, 0, function () {
            Xf(undefined, undefined, Yk, df.ᐃⵠⲆΔΔᐃᐃ);
        }, -41, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⵠᐃΔᐃΔΔᐃ = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ᐃᐃΔᐃⲆⲆΔ, ⵠᐃ.ΔΔΔᐃᐃⲆᐃ, ⵠᐃ.ᐃᐃΔΔⲆᐃΔ], da, 0, function () {
            Xf(undefined, ek, pr, df.ⵠᐃΔᐃΔΔᐃ);
        }, -5, 528, ba | _, ea);
        this.buttons[b++].view = C;
        this.buttons[b] = Tv(232, 352, 0, [ⵠᐃ.ⵠΔⵠⵠΔᐃⲆ, ⵠᐃ.ᐃΔΔᐃᐃΔᐃ, ⵠᐃ.ⵠᐃᐃΔΔⲆⵠ], da, 0, function () {
            Vf(300);
        }, -330, 135, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(232, 352, 0, [ⵠᐃ.ᐃΔⵠⲆⵠΔᐃ, ⵠᐃ.ⲆⵠΔⵠΔⲆⵠ, ⵠᐃ.ⲆⵠⵠⲆᐃⲆΔ], da, 0, function () {
            Vf(600);
        }, -195, 135, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(243, 374, 0, [ⵠᐃ.ᐃᐃⲆᐃᐃⲆⲆ, ⵠᐃ.ᐃⵠⵠᐃΔᐃⵠ, ⵠᐃ.ᐃΔᐃⵠⵠΔⲆ], da, 0, function () {
            Vf(2600);
        }, -60, 130, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(232, 352, 0, [ⵠᐃ.ⲆⲆⵠⲆⵠᐃⵠ, ⵠᐃ.ⲆΔⵠΔⵠᐃⲆ, ⵠᐃ.ⲆⵠΔΔⵠⲆΔ], da, 0, function () {
            Vf(7000);
        }, 78, 135, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(243, 374, 0, [ⵠᐃ.ᐃⲆΔⵠΔⲆᐃ, ⵠᐃ.ᐃⲆⵠⵠⲆΔΔ, ⵠᐃ.ⲆᐃᐃΔΔᐃⲆ], da, 0, function () {
            Vf(20000);
        }, 213, 130, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(58, 64, 0, [ⵠᐃ.ΔⲆΔᐃᐃⵠⲆ, ⵠᐃ.ΔⵠⵠᐃⲆⲆᐃ, ⵠᐃ.ⵠⲆⵠⲆⲆⲆⲆ], da, 0, function () {
            H(c);
        }, 300, 88, ba | _, ea);
        this.buttons[b++].view = M;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ΔΔΔⵠᐃΔⲆ, ⵠᐃ.ⲆⵠᐃⵠΔⲆⵠ, ⵠᐃ.ΔΔΔᐃⲆⵠⲆ], da, 0, function () {
            H(B);
            Ea.ⵠᐃⵠⵠⵠΔᐃ();
        }, -315, 185, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ⲆᐃᐃᐃΔⵠᐃ, ⵠᐃ.ⵠᐃⲆⲆⵠⵠⲆ, ⵠᐃ.ᐃⲆⵠᐃΔᐃⲆ], da, 0, function () {
            H(S);
            Ja.ⵠᐃⵠⵠⵠΔᐃ();
        }, -315, 321, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ⵠᐃⲆΔⵠⵠΔ, ⵠᐃ.ⲆΔᐃΔⵠΔⵠ, ⵠᐃ.ⲆⲆΔᐃᐃΔᐃ], da, 0, function () {
            H(D);
            Fa.ⵠᐃⵠⵠⵠΔᐃ();
        }, 153, 185, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ⲆⵠⲆⵠΔⵠΔ, ⵠᐃ.ᐃⵠᐃⲆΔⵠⵠ, ⵠᐃ.ⵠⵠⵠⲆᐃΔΔ], da, 0, function () {
            H(I);
            Ga.ⵠᐃⵠⵠⵠΔᐃ();
        }, 153, 321, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ⲆᐃⵠⵠⵠΔⲆ, ⵠᐃ.ⲆⲆᐃΔⲆΔⲆ, ⵠᐃ.ⲆΔᐃᐃⲆᐃⵠ], da, 0, function () {
            H(E);
            Ha.ⵠᐃⵠⵠⵠΔᐃ();
        }, 153, 463, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(323, 112, 0, [ⵠᐃ.ⵠΔᐃᐃⵠᐃⲆ, ⵠᐃ.ⵠᐃᐃⵠΔΔΔ, ⵠᐃ.ⲆⵠⲆⲆⲆᐃΔ], da, 0, function () {
            H(Q);
            Ia.ⵠᐃⵠⵠⵠΔᐃ();
        }, -315, 463, ba | _, ea);
        this.buttons[b++].view = m;
        this.buttons[b] = Tv(327, 117, 0, [ⵠᐃ.ⵠΔⵠᐃⲆΔΔ, ⵠᐃ.ᐃⲆΔⵠᐃΔΔ, ⵠᐃ.ΔⵠⵠᐃⲆⲆⲆ], da, 0, function () {
            H(O);
        }, 155, 70, V, fa);
        this.buttons[b++].view = W;
        this.buttons[b] = Tv(130, 129, 0, [ⵠᐃ.ᐃᐃⲆⲆΔΔᐃ, ⵠᐃ.ⲆⵠᐃⲆᐃᐃⲆ, ⵠᐃ.ⵠⵠᐃⲆⵠⵠΔ], da, 0, function () {
            y(f, ea, "none");
            H(c);
        }, 10, 40, ba | _, ea);
        this.buttons[b++].view = f;
        this.buttons[b] = Tv(130, 129, 0, [ⵠᐃ.ᐃᐃⲆⲆΔΔᐃ, ⵠᐃ.ⲆⵠᐃⲆᐃᐃⲆ, ⵠᐃ.ⵠⵠᐃⲆⵠⵠΔ], da, 0, function () {
            y(z, ea, "none");
            H(c);
        }, 10, 40, ba | _, ea);
        this.buttons[b++].view = z;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 200, 140, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(524, 110, 0, [ⵠᐃ.ΔⵠᐃⵠⵠᐃΔ, ⵠᐃ.ⲆⲆⲆᐃⲆΔⵠ, ⵠᐃ.ⵠⵠⵠⵠΔⲆⵠ], da, 0, function () {
            $f("Atlanta");
        }, -265, 300, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(523, 110, 0, [ⵠᐃ.ΔΔⲆᐃⵠᐃᐃ, ⵠᐃ.ⵠⲆΔᐃΔᐃⲆ, ⵠᐃ.ᐃⵠⵠⲆΔⲆⲆ], da, 0, function () {
            $f("LosAngeles");
        }, 5, 300, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(344, 110, 0, [ⵠᐃ.ⲆⵠᐃΔⵠⵠᐃ, ⵠᐃ.ⲆᐃΔᐃᐃΔᐃ, ⵠᐃ.ΔΔΔⲆΔΔⵠ], da, 0, function () {
            $f("Frankfurt");
        }, -265, 365, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(344, 110, 0, [ⵠᐃ.ⲆΔΔΔⲆⵠⵠ, ⵠᐃ.ⲆΔΔΔⵠⵠᐃ, ⵠᐃ.ᐃΔⵠΔⲆⵠⵠ], da, 0, function () {
            $f("Osaka");
        }, 100, 365, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(344, 110, 0, [ⵠᐃ.ⲆⲆⵠⵠΔᐃᐃ, ⵠᐃ.ⲆΔΔⲆΔⵠⵠ, ⵠᐃ.ᐃᐃᐃⲆⲆΔⵠ], da, 0, function () {
            $f("Sydney");
        }, -86, 365, ba | _, ea);
        this.buttons[b++].view = G;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(G);
        }, 224, 140, ba | _, ea);
        this.buttons[b++].view = Y;
        this.buttons[b] = Tv(230, 352, 0, [ⵠᐃ.ⵠⵠⲆⲆⵠⵠᐃ, ⵠᐃ.ⲆΔΔᐃᐃᐃⲆ, ⵠᐃ.ᐃᐃⵠⲆᐃᐃΔ], da, 0, function () {
            Vf(350);
        }, -280, 240, ba | _, ea);
        this.buttons[b++].view = Y;
        this.buttons[b] = Tv(230, 352, 0, [ⵠᐃ.ΔⵠⵠⲆⵠⲆⲆ, ⵠᐃ.ⲆⵠⵠⲆᐃᐃⲆ, ⵠᐃ.ⲆᐃⲆΔᐃΔⵠ], da, 0, function () {
            Vf(700);
        }, -130, 240, ba | _, ea);
        this.buttons[b++].view = Y;
        this.buttons[b] = Tv(230, 352, 0, [ⵠᐃ.ᐃᐃⵠΔᐃⲆᐃ, ⵠᐃ.ᐃᐃⲆᐃᐃΔΔ, ⵠᐃ.ᐃⲆⲆᐃΔⵠᐃ], da, 0, function () {
            Vf(1400);
        }, 20, 240, ba | _, ea);
        this.buttons[b++].view = Y;
        this.buttons[b] = Tv(230, 352, 0, [ⵠᐃ.ⵠᐃᐃΔΔΔΔ, ⵠᐃ.ΔⲆⵠⵠᐃⵠᐃ, ⵠᐃ.ⲆⲆⲆΔᐃᐃΔ], da, 0, function () {
            Vf(3000);
        }, 170, 240, ba | _, ea);
        this.buttons[b++].view = Y;
        this.buttons[b] = Tv(105, 119, 0, [ⵠᐃ.Δⵠᐃⵠⵠⵠⵠ, ⵠᐃ.ᐃⵠΔⲆᐃᐃᐃ, ⵠᐃ.ᐃᐃΔⲆⲆⵠΔ], da, 0, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = aj.document.createElement("textarea");
            b.value = hw + "?server=" + a[1] + "&region=" + a[0];
            aj.document.body.appendChild(b);
            b.select();
            aj.document.execCommand("copy");
            aj.document.body.removeChild(b);
        }, 170, 310, ba | _, ea);
        this.buttons[b++].view = L;
        this.buttons[b] = Tv(105, 119, 0, [ⵠᐃ.ᐃΔⲆΔⵠⲆΔ, ⵠᐃ.ᐃΔⲆⵠᐃⵠΔ, ⵠᐃ.ⲆΔᐃΔᐃⲆⵠ], da, 0, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", Df + "rebootServer?token=" + $w + "&userid=" + _w);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = hw + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, ba | _, ea);
        this.buttons[b++].view = L;
        this.buttons[b] = Tv(204, 115, 0, [ⵠᐃ.ΔᐃΔᐃᐃⵠⵠ, ⵠᐃ.ⲆᐃⵠⵠΔⵠⲆ, ⵠᐃ.ᐃΔᐃᐃᐃⵠΔ], da, 0, function () {
            aj.open("./commands.html", "_blank");
        }, -265, 490, ba | _, ea);
        this.buttons[b++].view = L;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ᐃᐃⲆⵠᐃⲆΔ, ⵠᐃ.ΔⵠΔⲆⲆᐃΔ, ⵠᐃ.ΔⵠᐃᐃΔΔⵠ], da, 0, function () {
            H(T);
        }, -210, 170, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ⵠⲆⵠᐃΔᐃⵠ, ⵠᐃ.ᐃⲆᐃΔΔⲆΔ, ⵠᐃ.ΔⲆᐃⵠΔⵠΔ], da, 0, function () {
            H(k);
        }, 70, 170, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ⲆΔᐃⲆⵠΔᐃ, ⵠᐃ.ⲆⲆⲆᐃⵠΔᐃ, ⵠᐃ.ⲆⲆⵠⲆⵠᐃΔ], da, 0, function () {
            H(w);
        }, 70, 204, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ⵠᐃΔⲆᐃⲆⵠ, ⵠᐃ.ⲆⵠⲆᐃⲆⲆΔ, ⵠᐃ.ⵠΔᐃᐃΔⲆΔ], da, 0, function () {
            H(x);
        }, -210, 204, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ⵠᐃΔⲆᐃⲆⵠ, ⵠᐃ.ⲆⵠⲆᐃⲆⲆΔ, ⵠᐃ.ⵠΔᐃᐃΔⲆΔ], da, 0, function () {
            H(J);
        }, 70, 238, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ⵠᐃΔⲆᐃⲆⵠ, ⵠᐃ.ⲆⵠⲆᐃⲆⲆΔ, ⵠᐃ.ⵠΔᐃᐃΔⲆΔ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                ex(0, 300);
            } else {
                H(v);
            }
        }, 307, 205, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ᐃⵠᐃⵠΔⵠⵠ, ⵠᐃ.ΔⵠⵠΔⵠΔⲆ, ⵠᐃ.ⲆⵠΔⲆⲆⲆΔ], da, 0, function () {
            H(P);
        }, -210, 238, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(145, 69, 0, [ⵠᐃ.ᐃⵠᐃⵠΔⵠⵠ, ⵠᐃ.ΔⵠⵠΔⵠΔⲆ, ⵠᐃ.ⲆⵠΔⲆⲆⲆΔ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                ex(1, 600);
            } else {
                H(v);
            }
        }, 307, 239, ba | _, ea);
        this.buttons[b++].view = c;
        this.buttons[b] = Tv(192, 101, 0, [ⵠᐃ.ⵠᐃᐃΔᐃⵠΔ, ⵠᐃ.ΔΔᐃΔΔᐃΔ, ⵠᐃ.ᐃΔⵠᐃⲆΔⲆ], da, 0, function () {
            gx();
        }, -100, 250, ba | _, ea);
        this.buttons[b++].view = F;
        this.buttons[b] = Tv(192, 104, 0, [ⵠᐃ.ᐃΔᐃⵠⵠΔΔ, ⵠᐃ.ᐃᐃΔⲆΔⲆᐃ, ⵠᐃ.ΔⲆᐃᐃⲆⲆⲆ], da, 0, function () {
            gx();
        }, -100, 239, ba | _, ea);
        this.buttons[b++].view = X;
        this.buttons[b] = Tv(192, 101, 0, [ⵠᐃ.ΔΔⲆⵠΔᐃΔ, ⵠᐃ.ΔⲆΔⲆᐃⵠⵠ, ⵠᐃ.ΔⲆᐃⵠⲆΔᐃ], da, 0, function () {
            H(d);
        }, 10, 250, ba | _, ea);
        this.buttons[b++].view = F;
        this.buttons[b] = Tv(192, 104, 0, [ⵠᐃ.ⲆᐃⵠⲆΔΔΔ, ⵠᐃ.ᐃΔⲆΔᐃⵠΔ, ⵠᐃ.ⲆΔⵠᐃᐃⲆᐃ], da, 0, function () {
            H(d);
        }, 10, 239, ba | _, ea);
        this.buttons[b++].view = X;
        ΔⵠⵠⲆⲆⵠΔ = [];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ⲆᐃΔᐃⵠ] = [ⵠᐃ.ᐃΔΔⵠⵠΔΔ, ⵠᐃ.ΔΔⵠⲆᐃᐃΔ, ⵠᐃ.ᐃΔᐃΔΔⲆⲆ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ᐃΔᐃⲆ] = [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ᐃᐃⵠΔ] = [ⵠᐃ.ⲆᐃⲆΔⵠⲆⲆ, ⵠᐃ.ᐃᐃⲆΔⲆⵠᐃ, ⵠᐃ.ᐃⲆᐃᐃΔⵠᐃ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ΔΔᐃⲆ] = [ⵠᐃ.ᐃⵠΔⵠΔⵠᐃ, ⵠᐃ.ᐃⵠΔΔᐃⲆⵠ, ⵠᐃ.ⵠΔⲆᐃⲆⵠᐃ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ⲆᐃⲆⵠ] = [ⵠᐃ.ᐃⲆᐃΔⲆᐃΔ, ⵠᐃ.ⲆᐃᐃⲆΔⵠⵠ, ⵠᐃ.ⵠᐃⲆΔⵠⲆⵠ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ⵠᐃⲆᐃ] = [ⵠᐃ.ⵠⲆⵠⲆΔⵠⵠ, ⵠᐃ.ΔⵠⲆⲆⲆⵠΔ, ⵠᐃ.ΔᐃΔⵠⵠⵠⵠ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ⵠⲆΔᐃ] = [ⵠᐃ.ΔᐃΔΔᐃⵠⲆ, ⵠᐃ.ᐃⲆⲆΔΔⵠⵠ, ⵠᐃ.ᐃⲆⲆΔΔΔⵠ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ⵠⲆᐃᐃᐃ] = [ⵠᐃ.ΔᐃⲆⵠΔⵠᐃ, ⵠᐃ.ⲆⲆᐃⵠⵠⵠⲆ, ⵠᐃ.ᐃΔⵠⲆⲆᐃΔ];
        ΔⵠⵠⲆⲆⵠΔ[ⵠᐃΔ.ΔⵠΔΔᐃᐃⵠ] = [ⵠᐃ.ᐃⲆᐃᐃⲆⲆⲆ, ⵠᐃ.ᐃⲆΔⲆᐃⲆΔ, ⵠᐃ.ᐃᐃᐃᐃᐃᐃⲆ];
        ΔᐃᐃΔⲆᐃⲆ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 205, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 300, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Yk, -29, 395, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 205, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, _q, 65, 300, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ma, 65, 395, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 205, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ma, 159, 300, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ek, 159, 395, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, Ch, -61, 315, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, eo, 260, 315, ba | _, ea);
        this.buttons[b++].view = B;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = B;
        ⵠΔᐃⵠᐃⲆⵠΔⲆ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 205, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ii, -29, 300, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, wj, -29, 395, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, _l, 65, 205, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, mh, 65, 300, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Xh, 65, 395, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, _l, 159, 205, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 300, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 395, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, undefined, -61, 315, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, undefined, 260, 315, ba | _, ea);
        this.buttons[b++].view = S;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = S;
        ΔⵠⵠᐃΔΔⲆΔⵠ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, _q, -29, 205, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 300, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Kr, -29, 395, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 205, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, gj, 65, 300, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 395, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Yk, 159, 205, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, _q, 159, 300, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ma, 159, 395, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, ii, -61, 315, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, undefined, 260, 315, ba | _, ea);
        this.buttons[b++].view = Q;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = Q;
        ⲆᐃⲆⲆΔᐃⵠΔᐃ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 205, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ts, -29, 300, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Lq, -29, 395, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 205, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 300, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, pr, 65, 395, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 205, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ts, 159, 300, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Kr, 159, 395, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, undefined, -61, 315, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, undefined, 260, 315, ba | _, ea);
        this.buttons[b++].view = D;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = D;
        ΔⵠΔΔⵠᐃⲆⲆⲆ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 205, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, gj, -29, 300, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ts, -29, 395, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Yk, 65, 205, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, ol, 65, 300, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Xh, 65, 395, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 205, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 300, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 395, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, wj, -61, 315, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, undefined, 260, 315, ba | _, ea);
        this.buttons[b++].view = I;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = I;
        ⵠⲆᐃΔᐃⲆⵠⵠⵠ = b;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 205, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 300, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, -29, 395, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 205, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, wj, 65, 300, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 65, 395, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, Tk, 159, 205, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, eo, 159, 300, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(178, 182, 0, [ⵠᐃ.ⲆⵠⲆΔ, ⵠᐃ.ΔΔⲆⵠ, ⵠᐃ.ⲆΔΔᐃ], da, 0, undefined, 159, 395, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⵠⵠᐃⲆᐃΔᐃ, ⵠᐃ.ᐃⵠⲆⲆᐃΔΔ, ⵠᐃ.ΔΔⲆⲆᐃⵠᐃ], da, 0, undefined, -61, 315, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(39, 122, 0, [ⵠᐃ.ⲆΔΔⵠⵠΔΔ, ⵠᐃ.ⲆⵠⵠΔⲆⲆᐃ, ⵠᐃ.ΔⵠⲆᐃⲆΔⵠ], da, 0, Xh, 260, 315, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(m);
        }, -320, 470, ba | _, ea);
        this.buttons[b++].view = E;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ⵠᐃⲆᐃΔⵠⲆ, ⵠᐃ.ᐃᐃⵠⲆΔᐃΔ, ⵠᐃ.ⲆⲆⲆᐃᐃΔⵠ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(3, 50);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = k;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = k;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ΔᐃⲆᐃᐃⲆⲆ, ⵠᐃ.ᐃⵠᐃⲆΔⲆⵠ, ⵠᐃ.ⵠΔⲆᐃᐃΔΔ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(0, 100);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = T;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = T;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ΔΔᐃΔᐃⵠᐃ, ⵠᐃ.ᐃⵠⵠⵠⲆⵠΔ, ⵠᐃ.ⵠᐃⲆᐃᐃᐃⲆ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(4, 150);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = w;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = w;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ⲆⵠⲆⵠⵠᐃᐃ, ⵠᐃ.ΔⵠᐃⲆⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃᐃⲆⵠ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(1, 300);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = x;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = x;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ⵠⲆⲆⵠΔⲆⵠ, ⵠᐃ.ΔΔⲆΔΔᐃᐃ, ⵠᐃ.ⲆᐃⵠⲆΔⵠᐃ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(2, 600);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = P;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = P;
        this.buttons[b] = Tv(260, 260, 0, [ⵠᐃ.ⲆⵠⲆⵠⵠᐃᐃ, ⵠᐃ.ΔⵠᐃⲆⵠⵠⵠ, ⵠᐃ.ⲆΔⵠᐃᐃⲆⵠ], da, 0, function () {
            if (R.ⲆⵠᐃΔᐃ()) {
                Zf(5, 300);
            } else {
                H(v);
            }
        }, -65, 197, ba | _, ea);
        this.buttons[b++].view = J;
        this.buttons[b] = Tv(115, 73, 0, [ⵠᐃ.ΔΔⵠΔᐃ, ⵠᐃ.ⲆⵠⲆΔᐃ, ⵠᐃ.ⵠΔⵠⲆⲆ], da, 0, function () {
            H(c);
        }, 309, 180, ba | _, ea);
        this.buttons[b++].view = J;
        var ta = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ΔⲆΔⲆⲆΔⵠ, ⵠᐃ.ⲆΔᐃΔᐃᐃⵠ, ⵠᐃ.ᐃᐃᐃⲆΔΔᐃ], da, 0, function () {
            sa(_l, 0);
        }, -305, 132, ba | _, ea);
        this.buttons[b++].view = d;
        var ua = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⵠⲆΔⲆᐃⵠⵠ, ⵠᐃ.ΔⵠΔⲆᐃⵠⲆ, ⵠᐃ.ⵠᐃΔᐃΔᐃΔ], da, 0, function () {
            sa(undefined, 1);
        }, -273, 132, ba | _, ea);
        this.buttons[b++].view = d;
        var va = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⵠΔΔⵠⲆᐃᐃ, ⵠᐃ.ⲆᐃⲆΔΔΔⵠ, ⵠᐃ.ΔΔΔΔⲆΔⲆ], da, 0, function () {
            sa(Ch, 2);
        }, -241, 132, ba | _, ea);
        this.buttons[b++].view = d;
        var wa = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ᐃΔⵠⵠⲆⵠⲆ, ⵠᐃ.ⵠΔᐃⲆᐃⲆΔ, ⵠᐃ.ΔⵠⵠᐃΔⲆΔ], da, 0, function () {
            sa(undefined, 3);
        }, -305, 165, ba | _, ea);
        this.buttons[b++].view = d;
        var xa = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ΔΔΔⲆΔΔᐃ, ⵠᐃ.ⵠⵠⲆᐃⲆΔΔ, ⵠᐃ.ᐃΔᐃᐃΔΔᐃ], da, 0, function () {
            sa(ts, 4);
        }, -273, 165, ba | _, ea);
        this.buttons[b++].view = d;
        var ya = b;
        this.buttons[b] = Tv(46, 51, 0, [ⵠᐃ.ⵠⵠΔΔᐃⵠⲆ, ⵠᐃ.ᐃⲆⵠⵠᐃⵠΔ, ⵠᐃ.ⵠΔⲆΔΔᐃⲆ], da, 0, function () {
            sa(pr, 5);
        }, -241, 165, ba | _, ea);
        this.buttons[b++].view = d;
        var za = b;
        this.buttons[b] = Tv(460, 73, 0, [ⵠᐃ.ΔΔⵠⲆΔΔᐃ, ⵠᐃ.ⲆⵠᐃᐃⲆᐃⵠ, ⵠᐃ.ⵠΔⲆⵠⵠᐃⲆ], da, 0, function () {
            sa(-1);
        }, -180, 170, ba | _, ea);
        this.buttons[b++].view = d;
        var Aa = b;
        this.buttons[b] = Tv(222, 68, 0, [ⵠᐃ.ⵠΔⵠᐃⵠⲆΔ, ⵠᐃ.ΔᐃᐃⲆᐃΔᐃ, ⵠᐃ.ⵠᐃⵠⲆⲆⲆⲆ], da, 0, function () {
            sa(0);
        }, -180, 215, ba | _, ea);
        this.buttons[b++].view = d;
        var Ba = b;
        this.buttons[b] = Tv(222, 68, 0, [ⵠᐃ.ΔⵠᐃⵠΔⲆΔ, ⵠᐃ.ⵠⵠⵠᐃⲆⵠΔ, ⵠᐃ.ᐃΔⵠᐃⵠᐃⵠ], da, 0, function () {
            sa(4);
        }, -180, 260, ba | _, ea);
        this.buttons[b++].view = d;
        var Ca = b;
        this.buttons[b] = Tv(222, 68, 0, [ⵠᐃ.ⲆᐃΔⲆᐃⲆΔ, ⵠᐃ.ⵠⲆᐃⵠΔⵠⲆ, ⵠᐃ.ⵠⲆⵠⲆΔΔᐃ], da, 0, function () {
            sa(2);
        }, -60, 215, ba | _, ea);
        this.buttons[b++].view = d;
        var Da = b;
        this.buttons[b] = Tv(222, 68, 0, [ⵠᐃ.ᐃⲆΔᐃΔⵠⵠ, ⵠᐃ.ᐃΔⵠΔⵠⲆΔ, ⵠᐃ.ⲆΔⵠᐃⲆᐃᐃ], da, 0, function () {
            sa(3);
        }, -60, 260, ba | _, ea);
        this.buttons[b++].view = d;
        this.ᐃΔᐃΔⲆⲆⲆ = b;
        this.buttons[b] = Tv(143, 66, 0, [ⵠᐃ.ⵠᐃⲆⲆᐃⵠⲆ, ⵠᐃ.ᐃⲆⲆᐃᐃᐃΔ, ⵠᐃ.ᐃΔⵠⲆΔᐃⲆ], da, 0, function () {
            Xf(Xh, df.ᐃΔᐃΔⲆⲆⲆ);
        }, -298, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⵠⲆᐃᐃⵠΔⵠ = b;
        this.buttons[b] = Tv(104, 66, 0, [ⵠᐃ.ⲆⲆⲆᐃⵠⵠⲆ, ⵠᐃ.ΔΔᐃΔΔⲆΔ, ⵠᐃ.ⵠⵠᐃⲆΔⵠΔ], da, 0, function () {
            Xf(Lq, df.ⵠⲆᐃᐃⵠΔⵠ);
        }, -223, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆᐃΔΔᐃⲆⲆ = b;
        this.buttons[b] = Tv(110, 66, 0, [ⵠᐃ.ⲆᐃⵠΔᐃᐃΔ, ⵠᐃ.ⲆᐃΔⲆΔᐃⵠ, ⵠᐃ.ᐃⵠΔⲆⵠⵠΔ], da, 0, function () {
            Xf(_l, df.ⲆᐃΔΔᐃⲆⲆ);
        }, -168, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ⲆⲆⵠᐃᐃΔᐃ = b;
        this.buttons[b] = Tv(88, 66, 0, [ⵠᐃ.ᐃᐃᐃⵠΔⵠⵠ, ⵠᐃ.ᐃⲆⵠᐃⵠᐃⵠ, ⵠᐃ.ΔⲆᐃⲆⵠⲆΔ], da, 0, function () {
            Xf(Lq, df.ⲆⲆⵠᐃᐃΔᐃ);
        }, -110, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.ΔⲆᐃᐃⲆⵠⵠ = b;
        this.buttons[b] = Tv(88, 66, 0, [ⵠᐃ.ᐃⵠᐃⲆΔⵠᐃ, ⵠᐃ.ⵠⲆΔΔᐃᐃΔ, ⵠᐃ.ⵠⲆᐃⲆΔⲆᐃ], da, 0, function () {
            Xf(ma, df.ΔⲆᐃᐃⲆⵠⵠ);
        }, -63, 110, ba | _, ea);
        this.buttons[b++].view = C;
        this.buttons[b] = Tv(86, 44, 0, [ⵠᐃ.Δᐃⵠⵠⵠⵠⵠ, ⵠᐃ.ⲆᐃⲆⵠⵠΔᐃ, ⵠᐃ.ΔⲆᐃᐃᐃⲆⵠ], da, 0, function () {
            aj.open("./terms.html", "_blank");
        }, 349, 290, ba | _, ea);
        this.buttons[b++].view = c;
        var Ea = new i(ⵠⲆⲆⲆ.ᐃⲆᐃΔΔ, ΔᐃᐃΔⲆᐃⲆ, function (a) {
            df.ΔΔᐃΔ = a;
            if (df.unlock.ΔΔᐃΔ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔΔᐃΔ, this.unlock.ΔΔᐃΔ);
        var Fa = new i(ⵠⲆⲆⲆ.ΔⲆⲆⲆ, ⲆᐃⲆⲆΔᐃⵠΔᐃ, function (a) {
            df.ⲆΔΔⵠⵠ = a;
            if (df.unlock.ⲆΔΔⵠⵠ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆΔΔⵠⵠ, this.unlock.ⲆΔΔⵠⵠ);
        var Ga = new i(ⵠⲆⲆⲆ.ᐃᐃᐃⲆⵠ, ΔⵠΔΔⵠᐃⲆⲆⲆ, function (a) {
            df.ᐃⵠᐃⲆⵠ = a;
            if (df.unlock.ᐃⵠᐃⲆⵠ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⵠᐃⲆⵠ, this.unlock.ᐃⵠᐃⲆⵠ);
        var Ha = new i(ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ, ⵠⲆᐃΔᐃⲆⵠⵠⵠ, function (a) {
            df.ΔⲆⲆᐃΔ = a;
            if (df.unlock.ΔⲆⲆᐃΔ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔⲆⲆᐃΔ, this.unlock.ΔⲆⲆᐃΔ);
        var Ia = new i(ⵠⲆⲆⲆ.ΔⵠⵠⲆⲆ, ΔⵠⵠᐃΔΔⲆΔⵠ, function (a) {
            df.ᐃⲆⵠᐃᐃ = a;
            if (df.unlock.ᐃⲆⵠᐃᐃ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⲆⵠᐃᐃ, this.unlock.ᐃⲆⵠᐃᐃ);
        var Ja = new i(ⵠⲆⲆⲆ.ⲆΔⵠᐃⵠ, ⵠΔᐃⵠᐃⲆⵠΔⲆ, function (a) {
            df.ΔᐃΔⲆᐃ = a;
            if (df.unlock.ΔᐃΔⲆᐃ[a] === 1) {
                ⵠΔᐃⲆ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃΔⲆᐃ, this.unlock.ΔᐃΔⲆᐃ);
        this.ⲆⵠΔᐃᐃⲆⵠ = function (a) {
            yf.ⲆΔᐃⲆ = Uv(R.ΔΔ, a);
            for (var b = 0; b < R.buttons.length; b++) {
                if (fa === R.buttons[b].info.active) {
                    R.buttons[b].ΔᐃⲆⲆ(R.ΔΔ, yf.ⲆΔᐃⲆ, Ov);
                }
            }
        };
        this.ⲆⵠᐃᐃᐃᐃΔ = function (a) {
            yf.ⲆΔᐃⲆ = Uv(R.ΔΔ, a);
            for (var b = 0; R.buttons.length > b; b++) {
                var c = R.buttons[b];
                if (c.info.active === fa && c.ΔᐃⲆⲆ(R.ΔΔ, yf.ⲆΔᐃⲆ, Pv)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ⲆᐃᐃⲆΔⲆⲆ = Qk;
        this.ⲆⵠⲆᐃⲆⵠᐃ = function (a) {
            yf.ⲆΔᐃⲆ = Uv(R.ΔΔ, a);
            var b = Zl;
            for (var c = 0; c < R.buttons.length; c++) {
                if (fa === R.buttons[c].info.active) {
                    b |= R.buttons[c].ΔᐃⲆⲆ(R.ΔΔ, yf.ⲆΔᐃⲆ, Nv);
                }
            }
            if (R.ⲆᐃᐃⲆΔⲆⲆ !== b) {
                R.ⲆᐃᐃⲆΔⲆⲆ = b;
                e.style.cursor = b ? R.ⵠᐃⲆⵠⵠⲆᐃ : R.ᐃᐃΔΔΔᐃΔ;
            }
        };
        this.ᐃⵠᐃⲆΔⲆⲆ = function () {
            aj.addEventListener("mousedown", this.ⲆⵠΔᐃᐃⲆⵠ, false);
            aj.addEventListener("mouseup", this.ⲆⵠᐃᐃᐃᐃΔ, Tn);
            aj.addEventListener("mousemove", this.ⲆⵠⲆᐃⲆⵠᐃ, false);
        };
        this.ⵠⲆΔⵠᐃⵠᐃ = function () {
            aj.removeEventListener("mousedown", this.ⲆⵠΔᐃᐃⲆⵠ, bn);
            aj.removeEventListener("mouseup", this.ⲆⵠᐃᐃᐃᐃΔ, Tn);
            aj.removeEventListener("mousemove", this.ⲆⵠⲆᐃⲆⵠᐃ, false);
        };
    }
    (function () {
        function b() {
            this.Ⲇᐃⵠⵠⵠ();
        }
        b.prototype = {
            Ⲇᐃⵠⵠⵠ: function () {
                var a = this || f;
                a.ᐃᐃΔⲆⵠΔᐃ = 1000;
                a.ⵠⲆⵠⵠⲆⵠⵠ = {};
                a.ΔΔΔᐃⵠ = [];
                a.ⵠⵠΔᐃⵠ = false;
                a.ΔΔⵠΔⲆ = 1;
                a.ⵠᐃΔᐃΔⵠⲆ = "canplaythrough";
                a.ᐃⲆΔᐃⲆ = typeof aj != "undefined" && aj.navigator ? aj.navigator : null;
                a.ᐃᐃⲆⲆᐃⵠⲆ = null;
                a.ⲆⲆⵠΔΔΔᐃ = false;
                a.ⲆΔⵠᐃᐃ = true;
                a.ⲆⲆᐃᐃΔⲆⵠ = true;
                a.Ⲇ = null;
                a.ⵠᐃⵠΔΔⲆΔ = true;
                a.ⵠⲆΔΔⲆΔⵠ();
                return a;
            },
            volume: function (b) {
                var c = this || f;
                b = parseFloat(b);
                if (!c.Ⲇ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ΔΔⵠΔⲆ = b;
                    if (c.ⵠⵠΔᐃⵠ) {
                        return c;
                    }
                    if (c.ⲆΔⵠᐃᐃ) {
                        c.ᐃᐃⲆⲆᐃⵠⲆ.gain.value = b;
                    }
                    for (var d = 0; d < c.ΔΔΔᐃⵠ.length; d++) {
                        if (!c.ΔΔΔᐃⵠ[d].ΔⵠⲆᐃⲆ) {
                            for (var g = c.ΔΔΔᐃⵠ[d].ΔΔⵠⲆΔ(), h = 0; h < g.length; h++) {
                                var j = c.ΔΔΔᐃⵠ[d].ΔⵠⲆⵠᐃ(g[h]);
                                if (j && j.ᐃⲆᐃᐃ) {
                                    j.ᐃⲆᐃᐃ.volume = j.ΔΔⵠΔⲆ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ΔΔⵠΔⲆ;
            },
            ΔⵠᐃⵠᐃⲆⲆ: function (b) {
                var c = this || f;
                if (!c.Ⲇ) {
                    i();
                }
                c.ⵠⵠΔᐃⵠ = b;
                if (c.ⲆΔⵠᐃᐃ) {
                    c.ᐃᐃⲆⲆᐃⵠⲆ.gain.value = b ? 0 : c.ΔΔⵠΔⲆ;
                }
                for (var d = 0; d < c.ΔΔΔᐃⵠ.length; d++) {
                    if (!c.ΔΔΔᐃⵠ[d].ΔⵠⲆᐃⲆ) {
                        for (var e = c.ΔΔΔᐃⵠ[d].ΔΔⵠⲆΔ(), g = 0; g < e.length; g++) {
                            var h = c.ΔΔΔᐃⵠ[d].ΔⵠⲆⵠᐃ(e[g]);
                            if (h && h.ᐃⲆᐃᐃ) {
                                h.ᐃⲆᐃᐃ.muted = !!b || h.ⵠⵠΔᐃⵠ;
                            }
                        }
                    }
                }
                return c;
            },
            ⵠⵠᐃᐃⲆᐃΔ: function () {
                var a = this || f;
                for (var b = a.ΔΔΔᐃⵠ.length - 1; b >= 0; b--) {
                    a.ΔΔΔᐃⵠ[b].ⵠⵠᐃᐃⲆᐃΔ();
                }
                if (a.ⲆΔⵠᐃᐃ && a.Ⲇ && a.Ⲇ.close !== undefined) {
                    a.Ⲇ.close();
                    a.Ⲇ = null;
                    i();
                }
                return a;
            },
            ΔⲆⵠⵠᐃⵠΔᐃᐃ: function (a) {
                return (this || f).ⵠⲆⵠⵠⲆⵠⵠ[a.replace(/^x-/, "")];
            },
            ⵠⲆΔΔⲆΔⵠ: function () {
                var a = this || f;
                a.state = a.Ⲇ && a.Ⲇ.state || "running";
                a.ⲆᐃⲆⵠᐃⲆᐃ();
                if (!a.ⲆΔⵠᐃᐃ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⵠᐃΔᐃΔⵠⲆ = "canplay";
                            }
                        } catch (b) {
                            a.ⲆⲆⵠΔΔΔᐃ = true;
                        }
                    } else {
                        a.ⲆⲆⵠΔΔΔᐃ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ⲆⲆⵠΔΔΔᐃ = true;
                    }
                } catch (a) { }
                if (!a.ⲆⲆⵠΔΔΔᐃ) {
                    a.ΔᐃⵠᐃⲆⲆⲆⲆⵠ();
                }
                return a;
            },
            ΔᐃⵠᐃⲆⲆⲆⲆⵠ: function () {
                var b = this || f;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ᐃⲆΔᐃⲆ && b.ᐃⲆΔᐃⲆ.userAgent.match(/OPR\/([0-6].)/g);
                var g = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ⵠⲆⵠⵠⲆⵠⵠ = {
                    ⵠⵠΔⲆᐃᐃΔⵠᐃ: !g && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ⲆΔᐃΔⲆⵠⵠⵠᐃ: !!d,
                    ΔⵠᐃⲆΔⵠⲆᐃᐃ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ⲆΔᐃΔΔᐃΔⵠᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆⵠⲆⵠⲆᐃΔⲆⲆ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ΔⲆⲆᐃⵠⲆᐃⵠᐃ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ΔⵠᐃⵠᐃΔⵠⲆⵠ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ⵠⲆΔⲆⲆᐃⲆⲆⲆ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ΔΔⲆⵠⵠᐃᐃⲆᐃ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ᐃΔⵠⵠᐃᐃΔⵠⲆ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ⲆᐃᐃⵠⲆⲆΔⵠⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆⵠⵠΔΔΔⲆⲆⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃΔⵠΔᐃᐃⲆⲆᐃ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ᐃᐃΔΔΔⲆⲆΔⲆ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ⲆⲆΔΔΔΔΔᐃⵠ: function () {
                var b = this || f;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ᐃⲆΔᐃⲆ && b.ᐃⲆΔᐃⲆ.userAgent);
                var c = !!("ontouchend" in aj) || !!b.ᐃⲆΔᐃⲆ && b.ᐃⲆΔᐃⲆ.maxTouchPoints > 0 || !!b.ᐃⲆΔᐃⲆ && b.ᐃⲆΔᐃⲆ.ΔᐃΔΔΔⲆᐃⵠᐃ > 0;
                if (!b.ΔᐃⵠⲆᐃⵠⵠ && b.Ⲇ && (a || c)) {
                    b.ΔᐃⵠⲆᐃⵠⵠ = false;
                    if (!b.ΔⲆᐃΔᐃⲆΔⵠΔ && b.Ⲇ.sampleRate !== 44100) {
                        b.ΔⲆᐃΔᐃⲆΔⵠΔ = true;
                        b.ⵠⵠᐃᐃⲆᐃΔ();
                    }
                    b.ⵠᐃⲆΔⵠⵠᐃ = b.Ⲇ.createBuffer(1, 1, 22050);
                    function c() {
                        f.ⲆᐃⲆⲆⵠⵠⲆ();
                        var a = b.Ⲇ.createBufferSource();
                        a.buffer = b.ⵠᐃⲆΔⵠⵠᐃ;
                        a.connect(b.Ⲇ.destination);
                        if (a.start === undefined) {
                            a.ΔⲆΔΔΔΔⲆᐃᐃ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.Ⲇ.resume == "function") {
                            b.Ⲇ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ΔᐃⵠⲆᐃⵠⵠ = true;
                            b.ⵠᐃⵠΔΔⲆΔ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ⲆᐃⲆⵠᐃⲆᐃ: function () {
                var a = this;
                if (a.ⲆⲆᐃᐃΔⲆⵠ && a.Ⲇ && a.Ⲇ.suspend !== undefined && f.ⲆΔⵠᐃᐃ) {
                    for (var b = 0; b < a.ΔΔΔᐃⵠ.length; b++) {
                        if (a.ΔΔΔᐃⵠ[b].ΔⵠⲆᐃⲆ) {
                            for (var c = 0; c < a.ΔΔΔᐃⵠ[b].ⵠⵠⲆⲆΔ.length; c++) {
                                if (!a.ΔΔΔᐃⵠ[b].ⵠⵠⲆⲆΔ[c].ⲆᐃⲆⵠⲆ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ΔᐃΔⵠⲆⵠΔ) {
                        clearTimeout(a.ΔᐃΔⵠⲆⵠΔ);
                    }
                    a.ΔᐃΔⵠⲆⵠΔ = setTimeout(function () {
                        if (a.ⲆⲆᐃᐃΔⲆⵠ) {
                            a.ΔᐃΔⵠⲆⵠΔ = null;
                            a.state = "suspending";
                            a.Ⲇ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ⲆⵠⵠᐃᐃⲆΔ) {
                                    delete a.ⲆⵠⵠᐃᐃⲆΔ;
                                    a.ⲆᐃⲆⲆⵠⵠⲆ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ⲆᐃⲆⲆⵠⵠⲆ: function () {
                var a = this;
                if (a.Ⲇ && a.Ⲇ.resume !== undefined && f.ⲆΔⵠᐃᐃ) {
                    if (a.state === "running" && a.ΔᐃΔⵠⲆⵠΔ) {
                        clearTimeout(a.ΔᐃΔⵠⲆⵠΔ);
                        a.ΔᐃΔⵠⲆⵠΔ = null;
                    } else if (a.state === "suspended") {
                        a.Ⲇ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ΔΔΔᐃⵠ.length; b++) {
                                a.ΔΔΔᐃⵠ[b].ⲆⲆⲆᐃⵠ("resume");
                            }
                        });
                        if (a.ΔᐃΔⵠⲆⵠΔ) {
                            clearTimeout(a.ΔᐃΔⵠⲆⵠΔ);
                            a.ΔᐃΔⵠⲆⵠΔ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ⲆⵠⵠᐃᐃⲆΔ = true;
                    }
                    return a;
                }
            }
        };
        var f = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.Ⲇᐃⵠⵠⵠ(a);
            } else {
                console.error(undefined);
            }
        }
        c.prototype = {
            Ⲇᐃⵠⵠⵠ: function (a) {
                var b = this;
                if (!f.Ⲇ) {
                    i();
                }
                b.ᐃᐃΔⵠⵠⵠⵠᐃᐃ = a.autoplay || false;
                b.ⲆⲆⲆⵠⲆΔⲆ = typeof a.ΔΔᐃᐃⵠⵠⵠ != "string" ? a.ΔΔᐃᐃⵠⵠⵠ : [a.ΔΔᐃᐃⵠⵠⵠ];
                b.ᐃⵠⵠΔΔⲆΔ = a.ΔⵠⲆⵠᐃΔΔⲆᐃ || false;
                b.ⵠⵠΔᐃⵠ = a.ΔⵠᐃⵠᐃⲆⲆ || false;
                b.ⲆΔᐃⲆⲆ = a.loop || false;
                b.ΔᐃΔⵠⵠᐃⲆⲆΔ = a.ᐃᐃΔⵠⵠᐃⵠⵠⲆ || 5;
                b.ᐃⵠΔⲆⵠⲆⲆⲆⲆ = typeof a.preload != "boolean" || a.preload;
                b.ᐃⵠⲆᐃΔ = a.rate || 1;
                b.ΔⲆⵠᐃⲆ = a.Δⵠ || {};
                b.ᐃⵠΔΔᐃ = typeof a.src != "string" ? a.src : [a.src];
                b.ΔΔⵠΔⲆ = a.volume !== undefined ? a.volume : 1;
                b.ᐃᐃⲆⲆΔᐃⵠ = 0;
                b.ⵠᐃⲆΔᐃ = "unloaded";
                b.ⵠⵠⲆⲆΔ = [];
                b.ⵠᐃᐃΔᐃΔⵠ = {};
                b.ᐃⲆᐃⵠΔ = [];
                b.ᐃΔᐃΔᐃⲆⲆΔⲆ = a.onend ? [{
                    ΔⲆⵠᐃⵠ: a.onend
                }] : [];
                b.ᐃᐃᐃᐃⵠⲆⲆᐃᐃ = a.onfade ? [{
                    ΔⲆⵠᐃⵠ: a.onfade
                }] : [];
                b.ⵠⵠᐃΔᐃⲆΔⵠᐃ = a.onload ? [{
                    ΔⲆⵠᐃⵠ: a.onload
                }] : [];
                b.ΔⵠⵠⵠᐃⲆΔⵠᐃ = a.ᐃᐃᐃᐃᐃⵠⲆⲆΔ ? [{
                    ΔⲆⵠᐃⵠ: a.ᐃᐃᐃᐃᐃⵠⲆⲆΔ
                }] : [];
                b.ΔⵠⵠⲆᐃΔⲆⵠΔ = a.onpause ? [{
                    ΔⲆⵠᐃⵠ: a.onpause
                }] : [];
                b.ᐃⲆⵠΔⵠⲆΔⲆⵠ = a.onplay ? [{
                    ΔⲆⵠᐃⵠ: a.onplay
                }] : [];
                b.ⵠΔⲆⵠⵠⵠΔⲆΔ = a.onstop ? [{
                    ΔⲆⵠᐃⵠ: a.onstop
                }] : [];
                b.ΔΔᐃΔΔΔΔᐃⵠ = a.onmute ? [{
                    ΔⲆⵠᐃⵠ: a.onmute
                }] : [];
                b.ⲆⵠⲆⵠΔⵠⵠⲆΔ = a.ΔⲆⵠⲆΔⲆⲆⲆᐃ ? [{
                    ΔⲆⵠᐃⵠ: a.ΔⲆⵠⲆΔⲆⲆⲆᐃ
                }] : [];
                b.Ⲇᐃᐃⵠᐃⵠᐃⵠᐃ = a.ⵠᐃᐃΔⵠᐃᐃᐃᐃ ? [{
                    ΔⲆⵠᐃⵠ: a.ⵠᐃᐃΔⵠᐃᐃᐃᐃ
                }] : [];
                b.ⵠⲆΔⵠΔⲆⲆⵠᐃ = a.ⵠⵠΔᐃⵠⲆΔⲆⵠ ? [{
                    ΔⲆⵠᐃⵠ: a.ⵠⵠΔᐃⵠⲆΔⲆⵠ
                }] : [];
                b.ⵠⲆⲆᐃΔΔⵠⲆᐃ = [];
                b.ΔⵠⲆᐃⲆ = f.ⲆΔⵠᐃᐃ && !b.ᐃⵠⵠΔΔⲆΔ;
                if (f.Ⲇ !== undefined && f.Ⲇ && f.ⵠᐃⵠΔΔⲆΔ) {
                    f.ⲆⲆΔΔΔΔΔᐃⵠ();
                }
                f.ΔΔΔᐃⵠ.push(b);
                if (b.ᐃᐃΔⵠⵠⵠⵠᐃᐃ) {
                    b.ᐃⲆᐃⵠΔ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ᐃⵠΔⲆⵠⲆⲆⲆⲆ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!f.ⲆⲆⵠΔΔΔᐃ) {
                    if (typeof b.ᐃⵠΔΔᐃ == "string") {
                        b.ᐃⵠΔΔᐃ = [b.ᐃⵠΔΔᐃ];
                    }
                    for (var e = 0; e < b.ᐃⵠΔΔᐃ.length; e++) {
                        var g;
                        var i;
                        if (b.ⲆⲆⲆⵠⲆΔⲆ && b.ⲆⲆⲆⵠⲆΔⲆ[e]) {
                            g = b.ⲆⲆⲆⵠⲆΔⲆ[e];
                        } else {
                            if (typeof (i = b.ᐃⵠΔΔᐃ[e]) != "string") {
                                b.ⲆⲆⲆᐃⵠ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                                g = /\.([^.]+)$/.exec(i.split("?", 1)[0]);
                            }
                            g &&= g[1].toLowerCase();
                        }
                        if (!g) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (g && f.ΔⲆⵠⵠᐃⵠΔᐃᐃ(g)) {
                            c = b.ᐃⵠΔΔᐃ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.ᐃⵠΔΔᐃ = c;
                        b.ⵠᐃⲆΔᐃ = "loading";
                        if (aj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ᐃⵠⵠΔΔⲆΔ = true;
                            b.ΔⵠⲆᐃⲆ = false;
                        }
                        new d(b);
                        if (b.ΔⵠⲆᐃⲆ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ⲆⲆⲆᐃⵠ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ⲆⲆⲆᐃⵠ("loaderror", null, "No audio support.");
            },
            play: function (e, j) {
                var k = this;
                var n = null;
                if (typeof e == "number") {
                    n = e;
                    e = null;
                } else {
                    if (typeof e == "string" && k.ⵠᐃⲆΔᐃ === "loaded" && !k.ΔⲆⵠᐃⲆ[e]) {
                        return null;
                    }
                    if (e === undefined) {
                        e = "__default";
                        var o = 0;
                        for (var p = 0; p < k.ⵠⵠⲆⲆΔ.length; p++) {
                            if (k.ⵠⵠⲆⲆΔ[p].ⲆᐃⲆⵠⲆ && !k.ⵠⵠⲆⲆΔ[p].ΔᐃᐃΔⲆ) {
                                o++;
                                n = k.ⵠⵠⲆⲆΔ[p].ⲆᐃΔⲆ;
                            }
                        }
                        if (o === 1) {
                            e = null;
                        } else {
                            n = null;
                        }
                    }
                }
                var q = n ? k.ΔⵠⲆⵠᐃ(n) : k.ΔΔⵠᐃⵠⵠᐃΔⲆ();
                if (!q) {
                    return null;
                }
                if (n && !e) {
                    e = q.ΔⲆⵠᐃⲆ || "__default";
                }
                if (k.ⵠᐃⲆΔᐃ !== "loaded") {
                    q.ΔⲆⵠᐃⲆ = e;
                    q.ΔᐃᐃΔⲆ = false;
                    var h = q.ⲆᐃΔⲆ;
                    k.ᐃⲆᐃⵠΔ.push({
                        event: "play",
                        action: function () {
                            k.play(h);
                        }
                    });
                    return h;
                }
                if (n && !q.ⲆᐃⲆⵠⲆ) {
                    if (!j) {
                        setTimeout(function () {
                            k.ⲆⲆⲆᐃⵠ("play", q.ⲆᐃΔⲆ);
                        }, 0);
                    }
                    return q.ⲆᐃΔⲆ;
                }
                if (k.ΔⵠⲆᐃⲆ) {
                    f.ⲆᐃⲆⲆⵠⵠⲆ();
                }
                var l = Math.max(0, q.ⵠΔᐃⵠΔ > 0 ? q.ⵠΔᐃⵠΔ : k.ΔⲆⵠᐃⲆ[e][0] / 1000);
                var g = Math.max(0, (k.ΔⲆⵠᐃⲆ[e][0] + k.ΔⲆⵠᐃⲆ[e][1]) / 1000 - l);
                var t = g * 1000 / Math.abs(q.ᐃⵠⲆᐃΔ);
                q.ⲆᐃⲆⵠⲆ = false;
                q.ΔᐃᐃΔⲆ = false;
                q.ΔⲆⵠᐃⲆ = e;
                q.ⵠΔᐃⵠΔ = l;
                q.ᐃΔΔᐃᐃ = k.ΔⲆⵠᐃⲆ[e][0] / 1000;
                q.ᐃᐃᐃΔᐃᐃΔ = (k.ΔⲆⵠᐃⲆ[e][0] + k.ΔⲆⵠᐃⲆ[e][1]) / 1000;
                q.ⲆΔᐃⲆⲆ = !!q.ⲆΔᐃⲆⲆ || !!k.ΔⲆⵠᐃⲆ[e][2];
                var b = q.ᐃⲆᐃᐃ;
                if (k.ΔⵠⲆᐃⲆ) {
                    function a() {
                        k.ⵠⵠΔⵠⲆᐃᐃΔΔ(q);
                        var a = q.ⵠⵠΔᐃⵠ || k.ⵠⵠΔᐃⵠ ? 0 : q.ΔΔⵠΔⲆ;
                        b.gain.setValueAtTime(a, f.Ⲇ.currentTime);
                        q.ᐃΔΔᐃᐃΔⲆ = f.Ⲇ.currentTime;
                        if (b.ⲆⲆΔᐃᐃ.start === undefined) {
                            if (q.ⲆΔᐃⲆⲆ) {
                                b.ⲆⲆΔᐃᐃ.ᐃΔᐃΔⵠⵠΔⲆᐃ(0, l, 86400);
                            } else {
                                b.ⲆⲆΔᐃᐃ.ᐃΔᐃΔⵠⵠΔⲆᐃ(0, l, g);
                            }
                        } else if (q.ⲆΔᐃⲆⲆ) {
                            b.ⲆⲆΔᐃᐃ.start(0, l, 86400);
                        } else {
                            b.ⲆⲆΔᐃᐃ.start(0, l, g);
                        }
                        if (t !== Infinity) {
                            k.ⵠᐃᐃΔᐃΔⵠ[q.ⲆᐃΔⲆ] = setTimeout(k.ΔᐃᐃΔⲆ.bind(k, q), t);
                        }
                        if (!j) {
                            setTimeout(function () {
                                k.ⲆⲆⲆᐃⵠ("play", q.ⲆᐃΔⲆ);
                            }, 0);
                        }
                    }
                    var d = f.state === "running";
                    if (k.ⵠᐃⲆΔᐃ === "loaded" && d) {
                        a();
                    } else {
                        var m = d || k.ⵠᐃⲆΔᐃ !== "loaded" ? "load" : "resume";
                        k.once(m, a, d ? q.ⲆᐃΔⲆ : null);
                        k.ΔⲆⵠⵠⲆᐃᐃ(q.ⲆᐃΔⲆ);
                    }
                } else {
                    function a() {
                        b.currentTime = l;
                        b.muted = q.ⵠⵠΔᐃⵠ || k.ⵠⵠΔᐃⵠ || f.ⵠⵠΔᐃⵠ || b.muted;
                        b.volume = q.ΔΔⵠΔⲆ * f.volume();
                        b.playbackRate = q.ᐃⵠⲆᐃΔ;
                        b.play();
                        if (t !== Infinity) {
                            k.ⵠᐃᐃΔᐃΔⵠ[q.ⲆᐃΔⲆ] = setTimeout(k.ΔᐃᐃΔⲆ.bind(k, q), t);
                        }
                        if (!j) {
                            k.ⲆⲆⲆᐃⵠ("play", q.ⲆᐃΔⲆ);
                        }
                    }
                    var c = k.ⵠᐃⲆΔᐃ === "loaded" && (aj && aj.ⲆΔⲆΔⲆΔΔⵠᐃ || !b.readyState && f.ᐃⲆΔᐃⲆ.ⵠⲆΔΔΔⲆⲆΔᐃ);
                    if (b.readyState === 4 || c) {
                        a();
                    } else {
                        function c() {
                            a();
                            b.removeEventListener(f.ⵠᐃΔᐃΔⵠⲆ, c, false);
                        }
                        b.addEventListener(f.ⵠᐃΔᐃΔⵠⲆ, c, false);
                        k.ΔⲆⵠⵠⲆᐃᐃ(q.ⲆᐃΔⲆ);
                    }
                }
                return q.ⲆᐃΔⲆ;
            },
            pause: function (a) {
                var b = this;
                if (b.ⵠᐃⲆΔᐃ !== "loaded") {
                    b.ᐃⲆᐃⵠΔ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ΔΔⵠⲆΔ(a), d = 0; d < c.length; d++) {
                    b.ΔⲆⵠⵠⲆᐃᐃ(c[d]);
                    var e = b.ΔⵠⲆⵠᐃ(c[d]);
                    if (e && !e.ⲆᐃⲆⵠⲆ && (e.ⵠΔᐃⵠΔ = b.ᐃΔΔⵠⲆᐃΔ(c[d]), e.ΔᐃᐃΔΔⲆⵠ = 0, e.ⲆᐃⲆⵠⲆ = true, b.ΔⵠⵠΔΔᐃⲆ(c[d]), e.ᐃⲆᐃᐃ)) {
                        if (b.ΔⵠⲆᐃⲆ) {
                            if (!e.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ) {
                                continue;
                            }
                            if (e.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.stop === undefined) {
                                e.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.ᐃⲆⲆᐃΔᐃᐃΔⲆ(0);
                            } else {
                                e.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.stop(0);
                            }
                            b.ᐃⵠⲆⵠⵠᐃᐃ(e.ᐃⲆᐃᐃ);
                        } else if (!isNaN(e.ᐃⲆᐃᐃ.duration) || e.ᐃⲆᐃᐃ.duration === Infinity) {
                            e.ᐃⲆᐃᐃ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ⲆⲆⲆᐃⵠ("pause", e ? e.ⲆᐃΔⲆ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ⵠᐃⲆΔᐃ !== "loaded") {
                    d.ᐃⲆᐃⵠΔ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ΔΔⵠⲆΔ(b), f = 0; f < e.length; f++) {
                    d.ΔⲆⵠⵠⲆᐃᐃ(e[f]);
                    var g = d.ΔⵠⲆⵠᐃ(e[f]);
                    if (g) {
                        g.ⵠΔᐃⵠΔ = g.ᐃΔΔᐃᐃ || 0;
                        g.ΔᐃᐃΔΔⲆⵠ = 0;
                        g.ⲆᐃⲆⵠⲆ = true;
                        g.ΔᐃᐃΔⲆ = true;
                        d.ΔⵠⵠΔΔᐃⲆ(e[f]);
                        if (g.ᐃⲆᐃᐃ) {
                            if (d.ΔⵠⲆᐃⲆ) {
                                if (g.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ) {
                                    if (g.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.stop === undefined) {
                                        g.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.ᐃⲆⲆᐃΔᐃᐃΔⲆ(0);
                                    } else {
                                        g.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.stop(0);
                                    }
                                    d.ᐃⵠⲆⵠⵠᐃᐃ(g.ᐃⲆᐃᐃ);
                                }
                            } else if (!isNaN(g.ᐃⲆᐃᐃ.duration) || g.ᐃⲆᐃᐃ.duration === Infinity) {
                                g.ᐃⲆᐃᐃ.currentTime = g.ᐃΔΔᐃᐃ || 0;
                                g.ᐃⲆᐃᐃ.pause();
                            }
                        }
                        if (!c) {
                            d.ⲆⲆⲆᐃⵠ("stop", g.ⲆᐃΔⲆ);
                        }
                    }
                }
                return d;
            },
            ΔⵠᐃⵠᐃⲆⲆ: function (b, c) {
                var d = this;
                if (d.ⵠᐃⲆΔᐃ !== "loaded") {
                    d.ᐃⲆᐃⵠΔ.push({
                        event: "mute",
                        action: function () {
                            d.ΔⵠᐃⵠᐃⲆⲆ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠⵠΔᐃⵠ;
                    }
                    d.ⵠⵠΔᐃⵠ = b;
                }
                for (var e = d.ΔΔⵠⲆΔ(c), g = 0; g < e.length; g++) {
                    var h = d.ΔⵠⲆⵠᐃ(e[g]);
                    if (h) {
                        h.ⵠⵠΔᐃⵠ = b;
                        if (d.ΔⵠⲆᐃⲆ && h.ᐃⲆᐃᐃ) {
                            h.ᐃⲆᐃᐃ.gain.setValueAtTime(b ? 0 : h.ΔΔⵠΔⲆ, f.Ⲇ.currentTime);
                        } else if (h.ᐃⲆᐃᐃ) {
                            h.ᐃⲆᐃᐃ.muted = !!f.ⵠⵠΔᐃⵠ || b;
                        }
                        d.ⲆⲆⲆᐃⵠ("mute", h.ⲆᐃΔⲆ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var g = this;
                var h = arguments;
                if (h.length === 0) {
                    return g.ΔΔⵠΔⲆ;
                }
                if (h.length === 1 || h.length === 2 && h[1] === undefined) {
                    if (g.ΔΔⵠⲆΔ().indexOf(h[0]) >= 0) {
                        c = parseInt(h[0], 10);
                    } else {
                        b = parseFloat(h[0]);
                    }
                } else if (h.length >= 2) {
                    b = parseFloat(h[0]);
                    c = parseInt(h[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? g.ΔⵠⲆⵠᐃ(c) : g.ⵠⵠⲆⲆΔ[0]) {
                        return d.ΔΔⵠΔⲆ;
                    } else {
                        return 0;
                    }
                }
                if (g.ⵠᐃⲆΔᐃ !== "loaded") {
                    g.ᐃⲆᐃⵠΔ.push({
                        event: "volume",
                        action: function () {
                            g.volume.apply(g, h);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ΔΔⵠΔⲆ = b;
                }
                c = g.ΔΔⵠⲆΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ΔⵠⲆⵠᐃ(c[a])) {
                        d.ΔΔⵠΔⲆ = b;
                        if (!h[2]) {
                            g.ΔⵠⵠΔΔᐃⲆ(c[a]);
                        }
                        if (g.ΔⵠⲆᐃⲆ && d.ᐃⲆᐃᐃ && !d.ⵠⵠΔᐃⵠ) {
                            d.ᐃⲆᐃᐃ.gain.setValueAtTime(b, f.Ⲇ.currentTime);
                        } else if (d.ᐃⲆᐃᐃ && !d.ⵠⵠΔᐃⵠ) {
                            d.ᐃⲆᐃᐃ.volume = b * f.volume();
                        }
                        g.ⲆⲆⲆᐃⵠ("volume", d.ⲆᐃΔⲆ);
                    }
                }
                return g;
            },
            fade: function (c, e, i, j) {
                var k = this;
                var a = Math.abs(c - e);
                var n = c > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? i / o : i;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ⵠᐃⲆΔᐃ !== "loaded") {
                    k.ᐃⲆᐃⵠΔ.push({
                        event: "fade",
                        action: function () {
                            k.fade(c, e, i, j);
                        }
                    });
                    return k;
                }
                k.volume(c, j);
                for (var q = k.ΔΔⵠⲆΔ(j), g = 0; g < q.length; g++) {
                    var r = k.ΔⵠⲆⵠᐃ(q[g]);
                    if (r) {
                        if (!j) {
                            k.ΔⵠⵠΔΔᐃⲆ(q[g]);
                        }
                        if (k.ΔⵠⲆᐃⲆ && !r.ⵠⵠΔᐃⵠ) {
                            var s = f.Ⲇ.currentTime;
                            var t = s + i / 1000;
                            r.ΔΔⵠΔⲆ = c;
                            r.ᐃⲆᐃᐃ.gain.setValueAtTime(c, s);
                            r.ᐃⲆᐃᐃ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = c;
                        r.ᐃⲆⲆⵠΔΔⵠ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.ΔⵠⲆᐃⲆ) {
                                if (j === undefined) {
                                    k.ΔΔⵠΔⲆ = w;
                                }
                                b.ΔΔⵠΔⲆ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < c && w <= e || e > c && w >= e) {
                                clearInterval(b.ᐃⲆⲆⵠΔΔⵠ);
                                b.ᐃⲆⲆⵠΔΔⵠ = null;
                                k.volume(e, a);
                                k.ⲆⲆⲆᐃⵠ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ΔⵠⵠΔΔᐃⲆ: function (a) {
                var b = this;
                var c = b.ΔⵠⲆⵠᐃ(a);
                if (c && c.ᐃⲆⲆⵠΔΔⵠ) {
                    if (b.ΔⵠⲆᐃⲆ) {
                        c.ᐃⲆᐃᐃ.gain.cancelScheduledValues(f.Ⲇ.currentTime);
                    }
                    clearInterval(c.ᐃⲆⲆⵠΔΔⵠ);
                    c.ᐃⲆⲆⵠΔΔⵠ = null;
                    b.ⲆⲆⲆᐃⵠ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ⲆΔᐃⲆⲆ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ΔⵠⲆⵠᐃ(parseInt(g[0], 10))) && d.ⲆΔᐃⲆⲆ;
                    }
                    b = g[0];
                    f.ⲆΔᐃⲆⲆ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ΔΔⵠⲆΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ΔⵠⲆⵠᐃ(h[a])) {
                        d.ⲆΔᐃⲆⲆ = b;
                        if (f.ΔⵠⲆᐃⲆ && d.ᐃⲆᐃᐃ && d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ) {
                            d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loop = b;
                            if (b) {
                                d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loopStart = d.ᐃΔΔᐃᐃ || 0;
                                d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loopEnd = d.ᐃᐃᐃΔᐃᐃΔ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var g = this;
                var j = arguments;
                if (j.length === 0) {
                    c = g.ⵠⵠⲆⲆΔ[0].ⲆᐃΔⲆ;
                } else if (j.length === 1) {
                    if (g.ΔΔⵠⲆΔ().indexOf(j[0]) >= 0) {
                        c = parseInt(j[0], 10);
                    } else {
                        b = parseFloat(j[0]);
                    }
                } else if (j.length === 2) {
                    b = parseFloat(j[0]);
                    c = parseInt(j[1], 10);
                }
                if (typeof b != "number") {
                    if (d = g.ΔⵠⲆⵠᐃ(c)) {
                        return d.ᐃⵠⲆᐃΔ;
                    } else {
                        return g.ᐃⵠⲆᐃΔ;
                    }
                }
                if (g.ⵠᐃⲆΔᐃ !== "loaded") {
                    g.ᐃⲆᐃⵠΔ.push({
                        event: "rate",
                        action: function () {
                            g.rate.apply(g, j);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ᐃⵠⲆᐃΔ = b;
                }
                c = g.ΔΔⵠⲆΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ΔⵠⲆⵠᐃ(c[a])) {
                        d.ΔᐃᐃΔΔⲆⵠ = g.ᐃΔΔⵠⲆᐃΔ(c[a]);
                        d.ᐃΔΔᐃᐃΔⲆ = g.ΔⵠⲆᐃⲆ ? f.Ⲇ.currentTime : d.ᐃΔΔᐃᐃΔⲆ;
                        d.ᐃⵠⲆᐃΔ = b;
                        if (g.ΔⵠⲆᐃⲆ && d.ᐃⲆᐃᐃ && d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ) {
                            d.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.playbackRate.value = b;
                        } else if (d.ᐃⲆᐃᐃ) {
                            d.ᐃⲆᐃᐃ.playbackRate = b;
                        }
                        var k = g.ᐃΔΔⵠⲆᐃΔ(c[a]);
                        var l = ((g.ΔⲆⵠᐃⲆ[d.ΔⲆⵠᐃⲆ][0] + g.ΔⲆⵠᐃⲆ[d.ΔⲆⵠᐃⲆ][1]) / 1000 - k) * 1000 / Math.abs(d.ᐃⵠⲆᐃΔ);
                        if (!!g.ⵠᐃᐃΔᐃΔⵠ[c[a]] || !d.ⲆᐃⲆⵠⲆ) {
                            g.ΔⲆⵠⵠⲆᐃᐃ(c[a]);
                            g.ⵠᐃᐃΔᐃΔⵠ[c[a]] = setTimeout(g.ΔᐃᐃΔⲆ.bind(g, d), l);
                        }
                        g.ⲆⲆⲆᐃⵠ("rate", d.ⲆᐃΔⲆ);
                    }
                }
                return g;
            },
            ᐃΔΔⵠⲆᐃΔ: function () {
                var b;
                var c;
                var d = this;
                var g = arguments;
                if (g.length === 0) {
                    c = d.ⵠⵠⲆⲆΔ[0].ⲆᐃΔⲆ;
                } else if (g.length === 1) {
                    if (d.ΔΔⵠⲆΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        c = d.ⵠⵠⲆⲆΔ[0].ⲆᐃΔⲆ;
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ⵠᐃⲆΔᐃ !== "loaded") {
                    d.ᐃⲆᐃⵠΔ.push({
                        event: "seek",
                        action: function () {
                            d.ᐃΔΔⵠⲆᐃΔ.apply(d, g);
                        }
                    });
                    return d;
                }
                var j = d.ΔⵠⲆⵠᐃ(c);
                if (j) {
                    if (typeof b != "number" || b < 0) {
                        if (d.ΔⵠⲆᐃⲆ) {
                            var a = d.ⵠΔⵠⲆⲆⲆΔ(c) ? f.Ⲇ.currentTime - j.ᐃΔΔᐃᐃΔⲆ : 0;
                            var k = j.ΔᐃᐃΔΔⲆⵠ ? j.ΔᐃᐃΔΔⲆⵠ - j.ⵠΔᐃⵠΔ : 0;
                            return j.ⵠΔᐃⵠΔ + (k + a * Math.abs(j.ᐃⵠⲆᐃΔ));
                        }
                        return j.ᐃⲆᐃᐃ.currentTime;
                    }
                    var l = d.ⵠΔⵠⲆⲆⲆΔ(c);
                    if (l) {
                        d.pause(c, true);
                    }
                    j.ⵠΔᐃⵠΔ = b;
                    j.ΔᐃᐃΔⲆ = false;
                    d.ΔⲆⵠⵠⲆᐃᐃ(c);
                    if (l) {
                        d.play(c, true);
                    }
                    if (!d.ΔⵠⲆᐃⲆ && j.ᐃⲆᐃᐃ) {
                        j.ᐃⲆᐃᐃ.currentTime = b;
                    }
                    d.ⲆⲆⲆᐃⵠ("seek", c);
                }
                return d;
            },
            ⵠΔⵠⲆⲆⲆΔ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ΔⵠⲆⵠᐃ(a);
                    return !!c && !c.ⲆᐃⲆⵠⲆ;
                }
                for (var d = 0; d < b.ⵠⵠⲆⲆΔ.length; d++) {
                    if (!b.ⵠⵠⲆⲆΔ[d].ⲆᐃⲆⵠⲆ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ᐃᐃⲆⲆΔᐃⵠ;
                var d = b.ΔⵠⲆⵠᐃ(a);
                if (d) {
                    c = b.ΔⲆⵠᐃⲆ[d.ΔⲆⵠᐃⲆ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ⵠᐃⲆΔᐃ;
            },
            ⵠⵠᐃᐃⲆᐃΔ: function () {
                var a = this;
                for (var b = a.ⵠⵠⲆⲆΔ, c = 0; c < b.length; c++) {
                    if (!b[c].ⲆᐃⲆⵠⲆ) {
                        a.stop(b[c].ⲆᐃΔⲆ);
                    }
                    if (!a.ΔⵠⲆᐃⲆ) {
                        if (!/MSIE |Trident\//.test(f.ᐃⲆΔᐃⲆ && f.ᐃⲆΔᐃⲆ.userAgent)) {
                            b[c].ᐃⲆᐃᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].ᐃⲆᐃᐃ.removeEventListener("error", b[c].ⲆΔⵠⵠᐃⲆᐃ, false);
                        b[c].ᐃⲆᐃᐃ.removeEventListener(f.ⵠᐃΔᐃΔⵠⲆ, b[c].ⲆⲆⵠᐃᐃⲆⵠ, false);
                    }
                    delete b[c].ᐃⲆᐃᐃ;
                    a.ΔⲆⵠⵠⲆᐃᐃ(b[c].ⲆᐃΔⲆ);
                    var d = f.ΔΔΔᐃⵠ.indexOf(a);
                    if (d >= 0) {
                        f.ΔΔΔᐃⵠ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < f.ΔΔΔᐃⵠ.length; c++) {
                    if (f.ΔΔΔᐃⵠ[c].ᐃⵠΔΔᐃ === a.ᐃⵠΔΔᐃ) {
                        g = false;
                        break;
                    }
                }
                if (j && g) {
                    delete j[a.ᐃⵠΔΔᐃ];
                }
                f.ⲆⲆⵠΔΔΔᐃ = false;
                a.ⵠᐃⲆΔᐃ = "unloaded";
                a.ⵠⵠⲆⲆΔ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ΔⲆⵠᐃⵠ: b,
                        once: d
                    } : {
                        id: c,
                        ΔⲆⵠᐃⵠ: b
                    });
                }
                return this;
            },
            ⵠⲆᐃᐃⲆΔΔᐃᐃ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ΔⲆⵠᐃⵠ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ⲆⲆⲆᐃⵠ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ΔⲆⵠᐃⵠ), 0);
                        if (f[g].once) {
                            e.ⵠⲆᐃᐃⲆΔΔᐃᐃ(b, f[g].ΔⲆⵠᐃⵠ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ΔΔⵠΔⲆᐃⲆ: function () {
                var a = this;
                if (a.ᐃⲆᐃⵠΔ.length > 0) {
                    var b = a.ᐃⲆᐃⵠΔ[0];
                    a.once(b.event, function () {
                        a.ᐃⲆᐃⵠΔ.shift();
                        a.ΔΔⵠΔⲆᐃⲆ();
                    });
                    b.action();
                }
                return a;
            },
            ΔᐃᐃΔⲆ: function (b) {
                var c = this;
                var d = b.ΔⲆⵠᐃⲆ;
                if (!c.ΔⵠⲆᐃⲆ && c.ᐃⲆᐃᐃ && !c.ᐃⲆᐃᐃ.ended) {
                    setTimeout(c.ΔᐃᐃΔⲆ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ⲆΔᐃⲆⲆ || !!c.ΔⲆⵠᐃⲆ[d][2];
                c.ⲆⲆⲆᐃⵠ("end", b.ⲆᐃΔⲆ);
                if (!c.ΔⵠⲆᐃⲆ && e) {
                    c.stop(b.ⲆᐃΔⲆ, true).play(b.ⲆᐃΔⲆ);
                }
                if (c.ΔⵠⲆᐃⲆ && e) {
                    c.ⲆⲆⲆᐃⵠ("play", b.ⲆᐃΔⲆ);
                    b.ⵠΔᐃⵠΔ = b.ᐃΔΔᐃᐃ || 0;
                    b.ΔᐃᐃΔΔⲆⵠ = 0;
                    b.ᐃΔΔᐃᐃΔⲆ = f.Ⲇ.currentTime;
                    var g = (b.ᐃᐃᐃΔᐃᐃΔ - b.ᐃΔΔᐃᐃ) * 1000 / Math.abs(b.ᐃⵠⲆᐃΔ);
                    c.ⵠᐃᐃΔᐃΔⵠ[b.ⲆᐃΔⲆ] = setTimeout(c.ΔᐃᐃΔⲆ.bind(c, b), g);
                }
                if (c.ΔⵠⲆᐃⲆ && !e) {
                    b.ⲆᐃⲆⵠⲆ = true;
                    b.ΔᐃᐃΔⲆ = true;
                    b.ⵠΔᐃⵠΔ = b.ᐃΔΔᐃᐃ || 0;
                    b.ΔᐃᐃΔΔⲆⵠ = 0;
                    c.ΔⲆⵠⵠⲆᐃᐃ(b.ⲆᐃΔⲆ);
                    c.ᐃⵠⲆⵠⵠᐃᐃ(b.ᐃⲆᐃᐃ);
                    f.ⲆᐃⲆⵠᐃⲆᐃ();
                }
                if (!c.ΔⵠⲆᐃⲆ && !e) {
                    c.stop(b.ⲆᐃΔⲆ);
                }
                return c;
            },
            ΔⲆⵠⵠⲆᐃᐃ: function (a) {
                var b = this;
                if (b.ⵠᐃᐃΔᐃΔⵠ[a]) {
                    clearTimeout(b.ⵠᐃᐃΔᐃΔⵠ[a]);
                    delete b.ⵠᐃᐃΔᐃΔⵠ[a];
                }
                return b;
            },
            ΔⵠⲆⵠᐃ: function (a) {
                for (var b = this, c = 0; c < b.ⵠⵠⲆⲆΔ.length; c++) {
                    if (a === b.ⵠⵠⲆⲆΔ[c].ⲆᐃΔⲆ) {
                        return b.ⵠⵠⲆⲆΔ[c];
                    }
                }
                return null;
            },
            ΔΔⵠᐃⵠⵠᐃΔⲆ: function () {
                var a = this;
                a.ⲆᐃⲆⵠⲆⵠᐃᐃⵠ();
                for (var b = 0; b < a.ⵠⵠⲆⲆΔ.length; b++) {
                    if (a.ⵠⵠⲆⲆΔ[b].ΔᐃᐃΔⲆ) {
                        return a.ⵠⵠⲆⲆΔ[b].reset();
                    }
                }
                return new d(a);
            },
            ⲆᐃⲆⵠⲆⵠᐃᐃⵠ: function () {
                var a = this;
                var b = a.ΔᐃΔⵠⵠᐃⲆⲆΔ;
                var c = 0;
                var d = 0;
                if (a.ⵠⵠⲆⲆΔ.length >= b) {
                    for (d = 0; d < a.ⵠⵠⲆⲆΔ.length; d++) {
                        if (a.ⵠⵠⲆⲆΔ[d].ΔᐃᐃΔⲆ) {
                            c++;
                        }
                    }
                    for (d = a.ⵠⵠⲆⲆΔ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ⵠⵠⲆⲆΔ[d].ΔᐃᐃΔⲆ) {
                            if (a.ΔⵠⲆᐃⲆ && a.ⵠⵠⲆⲆΔ[d].ᐃⲆᐃᐃ) {
                                a.ⵠⵠⲆⲆΔ[d].ᐃⲆᐃᐃ.disconnect(0);
                            }
                            a.ⵠⵠⲆⲆΔ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ΔΔⵠⲆΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ⵠⵠⲆⲆΔ.length; c++) {
                        b.push(this.ⵠⵠⲆⲆΔ[c].ⲆᐃΔⲆ);
                    }
                    return b;
                }
                return [a];
            },
            ⵠⵠΔⵠⲆᐃᐃΔΔ: function (a) {
                a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ = f.Ⲇ.createBufferSource();
                a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.buffer = j[this.ᐃⵠΔΔᐃ];
                if (a.ᐃΔᐃΔⵠ) {
                    a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.connect(a.ᐃΔᐃΔⵠ);
                } else {
                    a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.connect(a.ᐃⲆᐃᐃ);
                }
                a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loop = a.ⲆΔᐃⲆⲆ;
                if (a.ⲆΔᐃⲆⲆ) {
                    a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loopStart = a.ᐃΔΔᐃᐃ || 0;
                    a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.loopEnd = a.ᐃᐃᐃΔᐃᐃΔ;
                }
                a.ᐃⲆᐃᐃ.ⲆⲆΔᐃᐃ.playbackRate.value = a.ᐃⵠⲆᐃΔ;
                return this;
            },
            ᐃⵠⲆⵠⵠᐃᐃ: function (a) {
                var b = this;
                if (b.ⵠᐃⲆΔⵠⵠᐃ) {
                    a.ⲆⲆΔᐃᐃ.onended = null;
                    a.ⲆⲆΔᐃᐃ.disconnect(0);
                    try {
                        a.ⲆⲆΔᐃᐃ.buffer = b.ⵠᐃⲆΔⵠⵠᐃ;
                    } catch (a) { }
                }
                a.ⲆⲆΔᐃᐃ = null;
                return b;
            }
        };
        function d(a) {
            this.ⵠᐃⵠⲆΔⵠⲆ = a;
            this.Ⲇᐃⵠⵠⵠ();
        }
        d.prototype = {
            Ⲇᐃⵠⵠⵠ: function () {
                var a = this;
                var b = a.ⵠᐃⵠⲆΔⵠⲆ;
                a.ⵠⵠΔᐃⵠ = b.ⵠⵠΔᐃⵠ;
                a.ⲆΔᐃⲆⲆ = b.ⲆΔᐃⲆⲆ;
                a.ΔΔⵠΔⲆ = b.ΔΔⵠΔⲆ;
                a.ᐃⵠⲆᐃΔ = b.ᐃⵠⲆᐃΔ;
                a.ⵠΔᐃⵠΔ = 0;
                a.ⲆᐃⲆⵠⲆ = true;
                a.ΔᐃᐃΔⲆ = true;
                a.ΔⲆⵠᐃⲆ = "__default";
                a.ⲆᐃΔⲆ = ++f.ᐃᐃΔⲆⵠΔᐃ;
                b.ⵠⵠⲆⲆΔ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ⵠᐃⵠⲆΔⵠⲆ;
                var c = f.ⵠⵠΔᐃⵠ || a.ⵠⵠΔᐃⵠ || a.ⵠᐃⵠⲆΔⵠⲆ.ⵠⵠΔᐃⵠ ? 0 : a.ΔΔⵠΔⲆ;
                if (b.ΔⵠⲆᐃⲆ) {
                    a.ᐃⲆᐃᐃ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⲆⵠᐃⲆΔΔΔⲆᐃ() : f.Ⲇ.createGain();
                    a.ᐃⲆᐃᐃ.gain.setValueAtTime(c, f.Ⲇ.currentTime);
                    a.ᐃⲆᐃᐃ.paused = true;
                    a.ᐃⲆᐃᐃ.connect(f.ᐃᐃⲆⲆᐃⵠⲆ);
                } else {
                    a.ᐃⲆᐃᐃ = new Audio();
                    a.ⲆΔⵠⵠᐃⲆᐃ = a.ΔⲆⲆΔⵠᐃΔⲆΔ.bind(a);
                    a.ᐃⲆᐃᐃ.addEventListener("error", a.ⲆΔⵠⵠᐃⲆᐃ, false);
                    a.ⲆⲆⵠᐃᐃⲆⵠ = a.ⵠᐃⲆΔⵠΔⵠΔⵠ.bind(a);
                    a.ᐃⲆᐃᐃ.addEventListener(f.ⵠᐃΔᐃΔⵠⲆ, a.ⲆⲆⵠᐃᐃⲆⵠ, false);
                    a.ᐃⲆᐃᐃ.src = b.ᐃⵠΔΔᐃ;
                    a.ᐃⲆᐃᐃ.preload = "auto";
                    a.ᐃⲆᐃᐃ.volume = c * f.volume();
                    a.ᐃⲆᐃᐃ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ⵠᐃⵠⲆΔⵠⲆ;
                a.ⵠⵠΔᐃⵠ = b.ⵠⵠΔᐃⵠ;
                a.ⲆΔᐃⲆⲆ = b.ⲆΔᐃⲆⲆ;
                a.ΔΔⵠΔⲆ = b.ΔΔⵠΔⲆ;
                a.ᐃⵠⲆᐃΔ = b.ᐃⵠⲆᐃΔ;
                a.ⵠΔᐃⵠΔ = 0;
                a.ΔᐃᐃΔΔⲆⵠ = 0;
                a.ⲆᐃⲆⵠⲆ = true;
                a.ΔᐃᐃΔⲆ = true;
                a.ΔⲆⵠᐃⲆ = "__default";
                a.ⲆᐃΔⲆ = ++f.ᐃᐃΔⲆⵠΔᐃ;
                return a;
            },
            ΔⲆⲆΔⵠᐃΔⲆΔ: function () {
                var a = this;
                a.ⵠᐃⵠⲆΔⵠⲆ.ⲆⲆⲆᐃⵠ("loaderror", a.ⲆᐃΔⲆ, a.ᐃⲆᐃᐃ.error ? a.ᐃⲆᐃᐃ.error.code : 0);
                a.ᐃⲆᐃᐃ.removeEventListener("error", a.ⲆΔⵠⵠᐃⲆᐃ, false);
            },
            ⵠᐃⲆΔⵠΔⵠΔⵠ: function () {
                var a = this;
                var b = a.ⵠᐃⵠⲆΔⵠⲆ;
                b.ᐃᐃⲆⲆΔᐃⵠ = Math.ceil(a.ᐃⲆᐃᐃ.duration * 10) / 10;
                if (Object.keys(b.ΔⲆⵠᐃⲆ).length === 0) {
                    b.ΔⲆⵠᐃⲆ = {
                        ⲆᐃΔΔΔΔᐃⵠΔ: [0, b.ᐃᐃⲆⲆΔᐃⵠ * 1000]
                    };
                }
                if (b.ⵠᐃⲆΔᐃ !== "loaded") {
                    b.ⵠᐃⲆΔᐃ = "loaded";
                    b.ⲆⲆⲆᐃⵠ("load");
                    b.ΔΔⵠΔⲆᐃⲆ();
                }
                a.ᐃⲆᐃᐃ.removeEventListener(f.ⵠᐃΔᐃΔⵠⲆ, a.ⲆⲆⵠᐃᐃⲆⵠ, false);
            }
        };
        var j = {};
        function a(a) {
            var b = a.ᐃⵠΔΔᐃ;
            if (j[b]) {
                a.ᐃᐃⲆⲆΔᐃⵠ = j[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var f = new XMLHttpRequest();
                f.open("GET", b, true);
                f.responseType = "arraybuffer";
                f.onload = function () {
                    var b = (f.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(f.response, a);
                    } else {
                        a.ⲆⲆⲆᐃⵠ("loaderror", null, "Failed loading audio file with status: " + f.status + ".");
                    }
                };
                f.onerror = function () {
                    if (a.ΔⵠⲆᐃⲆ) {
                        a.ᐃⵠⵠΔΔⲆΔ = true;
                        a.ΔⵠⲆᐃⲆ = false;
                        a.ⵠⵠⲆⲆΔ = [];
                        delete j[b];
                        a.load();
                    }
                };
                k(f);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            f.Ⲇ.decodeAudioData(a, function (a) {
                if (a && b.ⵠⵠⲆⲆΔ.length > 0) {
                    j[b.ᐃⵠΔΔᐃ] = a;
                    h(b, a);
                }
            }, function () {
                b.ⲆⲆⲆᐃⵠ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ᐃᐃⲆⲆΔᐃⵠ) {
                a.ᐃᐃⲆⲆΔᐃⵠ = b.duration;
            }
            if (Object.keys(a.ΔⲆⵠᐃⲆ).length === 0) {
                a.ΔⲆⵠᐃⲆ = {
                    ⲆᐃΔΔΔΔᐃⵠΔ: [0, a.ᐃᐃⲆⲆΔᐃⵠ * 1000]
                };
            }
            if (a.ⵠᐃⲆΔᐃ !== "loaded") {
                a.ⵠᐃⲆΔᐃ = "loaded";
                a.ⲆⲆⲆᐃⵠ("load");
                a.ΔΔⵠΔⲆᐃⲆ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    f.Ⲇ = new AudioContext();
                } else if (typeof ΔⵠⵠΔᐃⲆΔᐃⵠ != "undefined") {
                    f.Ⲇ = new ΔⵠⵠΔᐃⲆΔᐃⵠ();
                } else {
                    f.ⲆΔⵠᐃᐃ = false;
                }
            } catch (a) {
                f.ⲆΔⵠᐃᐃ = false;
            }
            var a = /iP(hone|od|ad)/.test(f.ᐃⲆΔᐃⲆ && f.ᐃⲆΔᐃⲆ.platform);
            var b = f.ᐃⲆΔᐃⲆ && f.ᐃⲆΔᐃⲆ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(f.ᐃⲆΔᐃⲆ && f.ᐃⲆΔᐃⲆ.userAgent.toLowerCase());
                if (f.ᐃⲆΔᐃⲆ && f.ᐃⲆΔᐃⲆ.ⲆⵠᐃᐃᐃᐃⵠⵠⲆ && !d || f.ᐃⲆΔᐃⲆ && !f.ᐃⲆΔᐃⲆ.ⲆⵠᐃᐃᐃᐃⵠⵠⲆ && !d) {
                    f.ⲆΔⵠᐃᐃ = false;
                }
            }
            if (f.ⲆΔⵠᐃᐃ) {
                f.ᐃᐃⲆⲆᐃⵠⲆ = f.Ⲇ.createGain === undefined ? f.Ⲇ.ⲆⵠᐃⲆΔΔΔⲆᐃ() : f.Ⲇ.createGain();
                f.ᐃᐃⲆⲆᐃⵠⲆ.gain.value = f.ⵠⵠΔᐃⵠ ? 0 : 1;
                f.ᐃᐃⲆⲆᐃⵠⲆ.connect(f.Ⲇ.destination);
            }
            f.ⵠⲆΔΔⲆΔⵠ();
        }
        if (typeof ΔⲆᐃⲆⵠΔⵠ == "function" && ΔⲆᐃⲆⵠΔⵠ.ᐃᐃⵠⲆⵠᐃⲆ) {
            ΔⲆᐃⲆⵠΔⵠ([], function () {
                return {
                    Howler: f,
                    Howl: c
                };
            });
        }
        if (typeof ⲆᐃⵠⵠⵠⲆⵠ != "undefined") {
            ⲆᐃⵠⵠⵠⲆⵠ.Howler = f;
            ⲆᐃⵠⵠⵠⲆⵠ.Howl = c;
        }
        if (typeof aj != "undefined") {
            aj.ΔΔΔⵠⲆⲆΔ = b;
            aj.Howler = f;
            aj.Howl = c;
            aj.ⵠⵠΔᐃΔⲆᐃ = d;
        } else if (typeof ⲆⲆⲆⵠⲆᐃⵠ != "undefined") {
            ⲆⲆⲆⵠⲆᐃⵠ.ΔΔΔⵠⲆⲆΔ = b;
            ⲆⲆⲆⵠⲆᐃⵠ.Howler = f;
            ⲆⲆⲆⵠⲆᐃⵠ.Howl = c;
            ⲆⲆⲆⵠⲆᐃⵠ.ⵠⵠΔᐃΔⲆᐃ = d;
        }
    })();
    (function () {
        ΔΔΔⵠⲆⲆΔ.prototype.ⵠⲆΔᐃⲆ = [0, 0, 0];
        ΔΔΔⵠⲆⲆΔ.prototype.ᐃⲆⵠⲆΔ = [0, 0, -1, 0, 1, 0];
        ΔΔΔⵠⲆⲆΔ.prototype.ⲆΔⲆⵠΔΔⵠ = function (a) {
            var b = this;
            if (!b.Ⲇ || !b.Ⲇ.listener) {
                return b;
            }
            for (var c = b.ΔΔΔᐃⵠ.length - 1; c >= 0; c--) {
                b.ΔΔΔᐃⵠ[c].ⲆΔⲆⵠΔΔⵠ(a);
            }
            return b;
        };
        ΔΔΔⵠⲆⲆΔ.prototype.ⲆΔᐃⲆ = function (a, b, c) {
            var d = this;
            if (d.Ⲇ && d.Ⲇ.listener) {
                b = typeof b != "number" ? d.ⵠⲆΔᐃⲆ[1] : b;
                c = typeof c != "number" ? d.ⵠⲆΔᐃⲆ[2] : c;
                if (typeof a != "number") {
                    return d.ⵠⲆΔᐃⲆ;
                } else {
                    d.ⵠⲆΔᐃⲆ = [a, b, c];
                    d.Ⲇ.listener.setPosition(d.ⵠⲆΔᐃⲆ[0], d.ⵠⲆΔᐃⲆ[1], d.ⵠⲆΔᐃⲆ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ΔΔΔⵠⲆⲆΔ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.Ⲇ || !h.Ⲇ.listener) {
                return h;
            }
            var j = h.ᐃⲆⵠⲆΔ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ᐃⲆⵠⲆΔ = [b, c, d, e, f, g];
                h.Ⲇ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.Ⲇᐃⵠⵠⵠ = function (a) {
            return function (b) {
                var c = this;
                c.ᐃⲆⵠⲆΔ = b.orientation || [1, 0, 0];
                c.ⲆΔΔⵠⲆΔⵠ = b.ⲆΔⲆⵠΔΔⵠ || null;
                c.ⵠⲆΔᐃⲆ = b.ⲆΔᐃⲆ || null;
                c.ΔᐃᐃᐃⲆ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ⵠΔⵠⵠᐃⲆⵠⲆΔ = b.ᐃᐃΔⵠᐃᐃΔⲆᐃ ? [{
                    ΔⲆⵠᐃⵠ: b.ᐃᐃΔⵠᐃᐃΔⲆᐃ
                }] : [];
                c.ΔⲆΔⵠᐃⵠΔⵠⵠ = b.ⵠᐃⲆΔΔⵠΔᐃⵠ ? [{
                    ΔⲆⵠᐃⵠ: b.ⵠᐃⲆΔΔⵠΔᐃⵠ
                }] : [];
                c.ᐃᐃΔᐃᐃᐃⲆⵠᐃ = b.ⲆⵠΔΔᐃΔⲆⲆᐃ ? [{
                    ΔⲆⵠᐃⵠ: b.ⲆⵠΔΔᐃΔⲆⲆᐃ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.Ⲇᐃⵠⵠⵠ);
        Howl.prototype.ⲆΔⲆⵠΔΔⵠ = function (c, d) {
            var e = this;
            if (!e.ΔⵠⲆᐃⲆ) {
                return e;
            }
            if (e.ⵠᐃⲆΔᐃ !== "loaded") {
                e.ᐃⲆᐃⵠΔ.push({
                    event: "stereo",
                    action: function () {
                        e.ⲆΔⲆⵠΔΔⵠ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.Ⲇ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ⲆΔΔⵠⲆΔⵠ;
                }
                e.ⲆΔΔⵠⲆΔⵠ = c;
                e.ⵠⲆΔᐃⲆ = [c, 0, 0];
            }
            for (var g = e.ΔΔⵠⲆΔ(d), a = 0; a < g.length; a++) {
                var h = e.ΔⵠⲆⵠᐃ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ⲆΔΔⵠⲆΔⵠ;
                    }
                    h.ⲆΔΔⵠⲆΔⵠ = c;
                    h.ⵠⲆΔᐃⲆ = [c, 0, 0];
                    if (h.ᐃⲆᐃᐃ) {
                        h.ΔᐃᐃᐃⲆ.panningModel = "equalpower";
                        if (!h.ᐃΔᐃΔⵠ || !h.ᐃΔᐃΔⵠ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ᐃΔᐃΔⵠ.setPosition(c, 0, 0);
                        } else {
                            h.ᐃΔᐃΔⵠ.pan.value = c;
                        }
                    }
                    e.ⲆⲆⲆᐃⵠ("stereo", h.ⲆᐃΔⲆ);
                }
            }
            return e;
        };
        Howl.prototype.ⲆΔᐃⲆ = function (c, d, e, f) {
            var g = this;
            if (!g.ΔⵠⲆᐃⲆ) {
                return g;
            }
            if (g.ⵠᐃⲆΔᐃ !== "loaded") {
                g.ᐃⲆᐃⵠΔ.push({
                    event: "pos",
                    action: function () {
                        g.ⲆΔᐃⲆ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠⲆΔᐃⲆ;
                }
                g.ⵠⲆΔᐃⲆ = [c, d, e];
            }
            for (var a = g.ΔΔⵠⲆΔ(f), i = 0; i < a.length; i++) {
                var j = g.ΔⵠⲆⵠᐃ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠⲆΔᐃⲆ;
                    }
                    j.ⵠⲆΔᐃⲆ = [c, d, e];
                    if (j.ᐃⲆᐃᐃ) {
                        if (!j.ᐃΔᐃΔⵠ || !!j.ᐃΔᐃΔⵠ.pan) {
                            b(j, "spatial");
                        }
                        j.ᐃΔᐃΔⵠ.setPosition(c, d, e);
                    }
                    g.ⲆⲆⲆᐃⵠ("pos", j.ⲆᐃΔⲆ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.ΔⵠⲆᐃⲆ) {
                return g;
            }
            if (g.ⵠᐃⲆΔᐃ !== "loaded") {
                g.ᐃⲆᐃⵠΔ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ᐃⲆⵠⲆΔ[1] : d;
            e = typeof e != "number" ? g.ᐃⲆⵠⲆΔ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ᐃⲆⵠⲆΔ;
                }
                g.ᐃⲆⵠⲆΔ = [c, d, e];
            }
            for (var a = g.ΔΔⵠⲆΔ(f), i = 0; i < a.length; i++) {
                var j = g.ΔⵠⲆⵠᐃ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ᐃⲆⵠⲆΔ;
                    }
                    j.ᐃⲆⵠⲆΔ = [c, d, e];
                    if (j.ᐃⲆᐃᐃ) {
                        if (!j.ᐃΔᐃΔⵠ) {
                            j.ⵠⲆΔᐃⲆ ||= g.ⵠⲆΔᐃⲆ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ᐃΔᐃΔⵠ.setOrientation(c, d, e);
                    }
                    g.ⲆⲆⲆᐃⵠ("orientation", j.ⲆᐃΔⲆ);
                }
            }
            return g;
        };
        Howl.prototype.ᐃⲆⵠⲆᐃⲆⵠΔΔ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.ΔⵠⲆᐃⲆ) {
                return f;
            }
            if (g.length === 0) {
                return f.ΔᐃᐃᐃⲆ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ΔⵠⲆⵠᐃ(parseInt(g[0], 10))) {
                        return e.ΔᐃᐃᐃⲆ;
                    } else {
                        return f.ΔᐃᐃᐃⲆ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ΔᐃᐃᐃⲆ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ᐃᐃⲆΔᐃᐃⲆΔⵠ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ᐃⲆᐃᐃⵠΔᐃⵠⵠ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ⲆΔᐃΔⵠᐃⲆᐃⵠ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ΔΔⲆᐃᐃⵠΔⲆⵠ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ΔⲆᐃⵠΔⵠⲆⲆᐃ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ⵠΔⲆⵠΔᐃⲆΔᐃ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ⲆⵠᐃᐃⵠΔⵠⲆⲆ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ⲆᐃᐃᐃᐃⵠᐃⲆⵠ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ΔΔⵠⲆΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ΔⵠⲆⵠᐃ(a[j])) {
                    var k = e.ΔᐃᐃᐃⲆ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ᐃΔᐃΔⵠ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⵠⲆΔᐃⲆ ||= f.ⵠⲆΔᐃⲆ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⵠⵠΔᐃΔⲆᐃ.prototype.Ⲇᐃⵠⵠⵠ = function (a) {
            return function () {
                var b = this;
                var c = b.ⵠᐃⵠⲆΔⵠⲆ;
                b.ᐃⲆⵠⲆΔ = c.ᐃⲆⵠⲆΔ;
                b.ⲆΔΔⵠⲆΔⵠ = c.ⲆΔΔⵠⲆΔⵠ;
                b.ⵠⲆΔᐃⲆ = c.ⵠⲆΔᐃⲆ;
                b.ΔᐃᐃᐃⲆ = c.ΔᐃᐃᐃⲆ;
                a.call(this);
                if (b.ⲆΔΔⵠⲆΔⵠ) {
                    c.ⲆΔⲆⵠΔΔⵠ(b.ⲆΔΔⵠⲆΔⵠ);
                } else if (b.ⵠⲆΔᐃⲆ) {
                    c.ⲆΔᐃⲆ(b.ⵠⲆΔᐃⲆ[0], b.ⵠⲆΔᐃⲆ[1], b.ⵠⲆΔᐃⲆ[2], b.ⲆᐃΔⲆ);
                }
            };
        }(ⵠⵠΔᐃΔⲆᐃ.prototype.Ⲇᐃⵠⵠⵠ);
        ⵠⵠΔᐃΔⲆᐃ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ⵠᐃⵠⲆΔⵠⲆ;
                b.ᐃⲆⵠⲆΔ = c.ᐃⲆⵠⲆΔ;
                b.ⵠⲆΔᐃⲆ = c.ⵠⲆΔᐃⲆ;
                b.ΔᐃᐃᐃⲆ = c.ΔᐃᐃᐃⲆ;
                return a.call(this);
            };
        }(ⵠⵠΔᐃΔⲆᐃ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ᐃΔᐃΔⵠ = Howler.Ⲇ.createPanner();
                a.ᐃΔᐃΔⵠ.coneInnerAngle = a.ΔᐃᐃᐃⲆ.coneInnerAngle;
                a.ᐃΔᐃΔⵠ.coneOuterAngle = a.ΔᐃᐃᐃⲆ.coneOuterAngle;
                a.ᐃΔᐃΔⵠ.coneOuterGain = a.ΔᐃᐃᐃⲆ.coneOuterGain;
                a.ᐃΔᐃΔⵠ.distanceModel = a.ΔᐃᐃᐃⲆ.distanceModel;
                a.ᐃΔᐃΔⵠ.maxDistance = a.ΔᐃᐃᐃⲆ.maxDistance;
                a.ᐃΔᐃΔⵠ.panningModel = a.ΔᐃᐃᐃⲆ.panningModel;
                a.ᐃΔᐃΔⵠ.refDistance = a.ΔᐃᐃᐃⲆ.refDistance;
                a.ᐃΔᐃΔⵠ.rolloffFactor = a.ΔᐃᐃᐃⲆ.rolloffFactor;
                a.ᐃΔᐃΔⵠ.setPosition(a.ⵠⲆΔᐃⲆ[0], a.ⵠⲆΔᐃⲆ[1], a.ⵠⲆΔᐃⲆ[2]);
                a.ᐃΔᐃΔⵠ.setOrientation(a.ᐃⲆⵠⲆΔ[0], a.ᐃⲆⵠⲆΔ[1], a.ᐃⲆⵠⲆΔ[2]);
            } else {
                a.ᐃΔᐃΔⵠ = Howler.Ⲇ.createStereoPanner();
                a.ᐃΔᐃΔⵠ.pan.value = a.ⲆΔΔⵠⲆΔⵠ;
            }
            a.ᐃΔᐃΔⵠ.connect(a.ᐃⲆᐃᐃ);
            if (!a.ⲆᐃⲆⵠⲆ) {
                a.ⵠᐃⵠⲆΔⵠⲆ.pause(a.ⲆᐃΔⲆ, true).play(a.ⲆᐃΔⲆ);
            }
        }
    })();
    var nf = 1;
    var of = 1;
    var af = {
        ⲆⵠⲆΔΔᐃΔΔⲆ: 12,
        ΔᐃΔΔⵠ: 3,
        ΔΔⵠⲆⵠⵠΔᐃⵠ: 5000,
        ΔⲆᐃᐃΔΔⲆ: 3000,
        ⲆⲆⵠⲆᐃΔᐃⲆΔ: 12,
        ΔᐃⵠⲆⵠ: 1,
        ⵠⵠΔᐃⵠⵠᐃᐃⲆ: 5000,
        ΔⲆⵠⵠᐃⵠⵠ: 12,
        ᐃⵠΔ: 6,
        ⲆⲆΔΔᐃⲆᐃ: 460000,
        ΔⵠⵠⵠΔ: 8,
        ᐃⵠΔⵠⲆ: 2,
        ⲆⲆᐃⲆΔᐃⵠⵠⲆ: 5000
    };
    var rf = [];
    rf[-1] = 1;
    rf[28] = 1;
    rf[49] = 1;
    rf[as.ΔᐃᐃΔⲆᐃᐃΔⵠ] = 2;
    rf[8] = 2;
    rf[1] = 2;
    rf[3] = 2;
    rf[4] = 2;
    rf[31] = 2;
    rf[32] = 2;
    rf[9] = 2;
    rf[57] = 2;
    rf[0] = 2;
    rf[63] = 2;
    rf[17] = 2;
    rf[5] = 2;
    rf[6] = 2;
    rf[30] = 2;
    rf[as.ⲆⵠⵠΔⲆⲆΔⵠᐃ] = 2;
    rf[18] = 2;
    rf[12] = 2;
    rf[13] = 2;
    rf[14] = 2;
    rf[15] = 2;
    rf[16] = 2;
    rf[33] = 2;
    rf[as.ΔⵠᐃⲆᐃⵠⲆΔᐃ] = 2;
    rf[35] = 2;
    rf[36] = 2;
    rf[37] = 2;
    rf[38] = 2;
    rf[39] = 2;
    rf[45] = 2;
    rf[62] = 2;
    rf[54] = 2;
    rf[53] = 2;
    rf[46] = 3;
    rf[50] = 3;
    rf[51] = 3;
    rf[52] = 3;
    ᐃᐃⲆᐃ = [];
    ᐃᐃⲆᐃ[0] = 0;
    ᐃᐃⲆᐃ[1] = 1;
    ᐃᐃⲆᐃ[2] = 1;
    ᐃᐃⲆᐃ[3] = 1;
    ᐃᐃⲆᐃ[4] = 0;
    ᐃᐃⲆᐃ[5] = 0;
    ᐃᐃⲆᐃ[6] = 0;
    ᐃᐃⲆᐃ[7] = 0;
    ᐃᐃⲆᐃ[8] = 0;
    ᐃᐃⲆᐃ[9] = 0;
    ᐃᐃⲆᐃ[10] = 1;
    ᐃᐃⲆᐃ[11] = 1;
    ᐃᐃⲆᐃ[12] = 1;
    ᐃᐃⲆᐃ[13] = 1;
    ᐃᐃⲆᐃ[14] = 1;
    ᐃᐃⲆᐃ[15] = 1;
    ᐃᐃⲆᐃ[16] = 0;
    ᐃᐃⲆᐃ[17] = 0;
    ᐃᐃⲆᐃ[18] = 0;
    ᐃᐃⲆᐃ[19] = 0;
    ᐃᐃⲆᐃ[20] = 0;
    ᐃᐃⲆᐃ[21] = 0;
    ᐃᐃⲆᐃ[22] = 0;
    ᐃᐃⲆᐃ[23] = 1;
    ᐃᐃⲆᐃ[24] = 1;
    ᐃᐃⲆᐃ[25] = 1;
    ᐃᐃⲆᐃ[26] = 1;
    ᐃᐃⲆᐃ[27] = 1;
    ᐃᐃⲆᐃ[28] = 1;
    ᐃᐃⲆᐃ[29] = 1;
    ᐃᐃⲆᐃ[30] = 1;
    ᐃᐃⲆᐃ[31] = 1;
    ᐃᐃⲆᐃ[32] = 1;
    ᐃᐃⲆᐃ[33] = 1;
    ᐃᐃⲆᐃ[34] = 1;
    ᐃᐃⲆᐃ[35] = 1;
    ᐃᐃⲆᐃ[36] = 1;
    ᐃᐃⲆᐃ[37] = 1;
    ᐃᐃⲆᐃ[38] = 1;
    ᐃᐃⲆᐃ[40] = 0;
    ᐃᐃⲆᐃ[41] = 0;
    ᐃᐃⲆᐃ[42] = 0;
    ᐃᐃⲆᐃ[50] = 1;
    ᐃᐃⲆᐃ[51] = 1;
    ᐃᐃⲆᐃ[52] = 1;
    ᐃᐃⲆᐃ[55] = 0;
    ᐃᐃⲆᐃ[56] = 0;
    ᐃᐃⲆᐃ[57] = 0;
    ᐃᐃⲆᐃ[58] = 0;
    ⵠⵠᐃΔⵠ = [];
    ⵠⵠᐃΔⵠ[sw.ᐃᐃⲆⵠΔ] = 0;
    ⵠⵠᐃΔⵠ[1] = 0;
    ⵠⵠᐃΔⵠ[29] = 0;
    ⵠⵠᐃΔⵠ[6] = 0;
    ⵠⵠᐃΔⵠ[3] = -1;
    ⵠⵠᐃΔⵠ[31] = -1;
    ⵠⵠᐃΔⵠ[2] = 0;
    ⵠⵠᐃΔⵠ[4] = 0;
    ⵠⵠᐃΔⵠ[30] = 0;
    ⵠⵠᐃΔⵠ[33] = 0;
    ⵠⵠᐃΔⵠ[32] = 1;
    ⵠⵠᐃΔⵠ[35] = 1;
    ⵠⵠᐃΔⵠ[7] = 1;
    ⵠⵠᐃΔⵠ[8] = 1;
    ⵠⵠᐃΔⵠ[9] = 1;
    ⵠⵠᐃΔⵠ[19] = 1;
    ⵠⵠᐃΔⵠ[50] = 1;
    ⵠⵠᐃΔⵠ[5] = 0;
    ⵠⵠᐃΔⵠ[12] = 1;
    ⵠⵠᐃΔⵠ[13] = 1;
    ⵠⵠᐃΔⵠ[14] = 1;
    ⵠⵠᐃΔⵠ[20] = 1;
    ⵠⵠᐃΔⵠ[52] = 1;
    ⵠⵠᐃΔⵠ[10] = 0;
    ⵠⵠᐃΔⵠ[15] = 1;
    ⵠⵠᐃΔⵠ[16] = 1;
    ⵠⵠᐃΔⵠ[17] = 1;
    ⵠⵠᐃΔⵠ[21] = 1;
    ⵠⵠᐃΔⵠ[51] = 1;
    ⵠⵠᐃΔⵠ[45] = 0;
    ⵠⵠᐃΔⵠ[46] = 1;
    ⵠⵠᐃΔⵠ[47] = 1;
    ⵠⵠᐃΔⵠ[48] = 1;
    ⵠⵠᐃΔⵠ[49] = 1;
    ⵠⵠᐃΔⵠ[53] = 1;
    ⵠⵠᐃΔⵠ[18] = 1;
    ⵠⵠᐃΔⵠ[22] = 1;
    ⵠⵠᐃΔⵠ[23] = 1;
    ⵠⵠᐃΔⵠ[11] = 0;
    ⵠⵠᐃΔⵠ[34] = 1;
    var sf = {
        ΔᐃⵠⲆⵠΔΔ: {
            ΔⲆΔᐃΔ: null,
            path: ["audio/ambience.mp3"],
            Δⵠ: {
                d2: [90684, 300, false],
                d0: [90086, 300, Mr],
                d1: [90391, 300, false]
            },
            sample: {
                d0: 8,
                d1: 8,
                d2: 8
            }
        },
        ᐃⵠᐃⵠΔⲆΔ: {
            ΔⲆΔᐃΔ: null,
            path: ["audio/ambience.mp3"],
            Δⵠ: {
                p2: [89815, 300, Qj],
                p1: [89549, 300, Ga],
                p0: [89303, 300, false]
            },
            sample: {
                p0: 8,
                p1: 8,
                p2: 8
            }
        },
        ⲆΔᐃΔⵠⵠⲆ: {
            ΔⲆΔᐃΔ: null,
            path: ["audio/ambience.mp3"],
            Δⵠ: {
                w3: [89025, 300, false],
                w1: [88473, 300, cr],
                w0: [88195, 300, false],
                w2: [88751, 300, false]
            },
            sample: {
                w0: 8,
                w1: 8,
                w2: 8,
                w3: 8
            }
        },
        ⵠᐃΔΔΔⵠᐃ: {
            ΔⲆΔᐃΔ: null,
            path: ["audio/ambience.mp3"],
            Δⵠ: {
                ᐃⲆⵠⲆΔΔⲆ: [92249, 500, false],
                ⲆⲆᐃⲆⲆ: [12356, 6965, u],
                ⵠⵠⵠⲆᐃ: [91431, 400, false],
                ΔΔⲆΔⲆΔⵠ: [19882, 8301, mk],
                ΔⲆⵠⵠᐃΔⲆ: [30562, 655, Ll],
                ⲆⵠⵠᐃᐃΔΔ: [31658, 813, Jr],
                ⵠΔᐃⵠᐃⵠΔ: [91022, 400, false],
                ⵠᐃⵠΔΔΔⵠ: [66014, 925, true],
                ⲆⲆΔⵠⲆⵠⲆ: [66961, 21223, sh],
                ⵠⵠⵠⵠⵠᐃⵠⵠΔ: [100, 2800, true],
                ᐃΔⵠΔⲆᐃⵠ: [32604, 21890, Uq],
                ⵠᐃΔⲆᐃΔⲆ: [3100, 8800, Qg],
                ⲆⲆⲆⲆⲆ: [28380, 1797, true],
                ΔⲆΔΔΔᐃⵠ: [66961, 21223, true],
                ᐃᐃᐃΔⲆΔⲆ: [54524, 11393, true]
            },
            sample: {
                ⵠⵠⵠⵠⵠᐃⵠⵠΔ: 1,
                ⵠᐃΔⲆᐃΔⲆ: 1,
                ΔΔⲆΔⲆΔⵠ: 1,
                ᐃΔⵠΔⲆᐃⵠ: 1,
                ᐃᐃᐃΔⲆΔⲆ: 1,
                ΔⲆΔΔΔᐃⵠ: 1,
                ⲆⲆΔⵠⲆⵠⲆ: 1,
                ⲆⲆᐃⲆⲆ: 8,
                ⲆⲆⲆⲆⲆ: 8,
                ΔⲆⵠⵠᐃΔⲆ: 8,
                ⲆⵠⵠᐃᐃΔΔ: 8,
                ⵠᐃⵠΔΔΔⵠ: 8,
                ⵠΔᐃⵠᐃⵠΔ: 6,
                ⵠⵠⵠⲆᐃ: 6,
                ᐃⲆⵠⲆΔΔⲆ: 6
            }
        }
    };
    function hf(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.Ⲇᐃⵠᐃⵠ = b;
        this.ⵠᐃᐃⲆⲆⵠⵠ = b;
        this.ⵠⲆⲆ = c;
        this.ⵠᐃⲆ = d;
        this.fade = e;
        this.ⲆΔΔᐃⵠᐃⲆ = f;
        this.ⵠⲆⵠⵠⵠⵠΔ = i;
        this.ΔⵠᐃⲆ = a;
        this.ⲆᐃΔⵠᐃⵠⲆ = j;
        this.source = k;
        this.source.ⲆⲆⲆⵠⵠⲆΔ = k.x + k.w;
        this.source.ⲆᐃΔⲆⵠ = k.y + k.ⵠⵠⲆ;
        this.ⲆᐃⵠΔΔᐃⲆⵠⲆ = h;
        this.ᐃΔᐃⲆⲆⵠⵠ = l;
        this.ᐃΔᐃΔⲆΔᐃ = 0;
        this.ΔᐃΔⲆⵠⵠⲆ = {
            ⲆᐃΔΔ: 5,
            d: 5
        };
        this.ΔΔⲆΔΔ = function () {
            this.Ⲇᐃⵠᐃⵠ -= Xw;
            if (this.Ⲇᐃⵠᐃⵠ < 0) {
                this.Ⲇᐃⵠᐃⵠ = this.ⵠᐃᐃⲆⲆⵠⵠ;
                var a = sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ.playing(this.ⵠⲆⲆ);
                var b = sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ.playing(this.ⵠᐃⲆ);
                if (a && !b) {
                    var c = nf * this.ΔⵠᐃⲆ.volume(this.ⵠⲆⲆ);
                    var d = (this.ⵠⲆⵠⵠⵠⵠΔ * Math.random() + this.ⲆΔΔᐃⵠᐃⲆ) * nf;
                    this.ΔⵠᐃⲆ.fade(c, d, this.fade, this.ⵠⲆⲆ);
                } else if (!a && b) {
                    c = nf * this.ΔⵠᐃⲆ.volume(this.ⵠᐃⲆ);
                    d = (this.ⵠⲆⵠⵠⵠⵠΔ * Math.random() + this.ⲆΔΔᐃⵠᐃⲆ) * nf;
                    this.ΔⵠᐃⲆ.fade(c, d, this.fade, this.ⵠᐃⲆ);
                }
            }
        };
        this.transition = function () {
            this.Ⲇᐃⵠᐃⵠ = this.ⵠᐃᐃⲆⲆⵠⵠ;
            this.ΔᐃΔⲆⵠⵠⲆ.d = this.ΔᐃΔⲆⵠⵠⲆ.ⲆᐃΔΔ;
            if (cf.time) {
                this.ΔⵠᐃⲆ.fade(0, this.ⲆΔΔᐃⵠᐃⲆ * nf, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠⲆⲆ);
                this.ΔⵠᐃⲆ.play(this.ⵠⲆⲆ);
                if (this.ΔⵠᐃⲆ.playing(this.ⵠᐃⲆ)) {
                    var a = nf * this.ΔⵠᐃⲆ.volume(this.ⵠᐃⲆ);
                    this.ΔⵠᐃⲆ.fade(a, 0, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠᐃⲆ);
                }
            } else {
                this.ΔⵠᐃⲆ.fade(0, nf * this.ⲆΔΔᐃⵠᐃⲆ, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠᐃⲆ);
                this.ΔⵠᐃⲆ.play(this.ⵠᐃⲆ);
                if (this.ΔⵠᐃⲆ.playing(this.ⵠⲆⲆ)) {
                    a = nf * this.ΔⵠᐃⲆ.volume(this.ⵠⲆⲆ);
                    this.ΔⵠᐃⲆ.fade(a, 0, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠⲆⲆ);
                }
            }
        };
        this.check = function (a) {
            if (this.ᐃΔᐃΔⲆΔᐃ) {
                if (ΔⲆⵠᐃ.ᐃΔᐃⲆⲆⵠⵠ(a, this.ⲆᐃⵠΔΔᐃⲆⵠⲆ)) {
                    if (!Ww.transition && cf.ⲆᐃⵠΔΔ.now < 460000) {
                        if (cf.time) {
                            if (!this.ΔⵠᐃⲆ.playing(this.ⵠⲆⲆ)) {
                                this.ΔᐃΔⲆⵠⵠⲆ.d -= Xw;
                                if (this.ΔᐃΔⲆⵠⵠⲆ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ΔⵠᐃⲆ.playing(this.ⵠᐃⲆ)) {
                            this.ΔᐃΔⲆⵠⵠⲆ.d -= Xw;
                            if (this.ΔᐃΔⲆⵠⵠⲆ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ᐃΔᐃΔⲆΔᐃ = 0;
                    if (this.ΔⵠᐃⲆ.playing(this.ⵠⲆⲆ)) {
                        var b = nf * this.ΔⵠᐃⲆ.volume(this.ⵠⲆⲆ);
                        this.ΔⵠᐃⲆ.fade(b, 0, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠⲆⲆ);
                    }
                    if (this.ΔⵠᐃⲆ.playing(this.ⵠᐃⲆ)) {
                        b = nf * this.ΔⵠᐃⲆ.volume(this.ⵠᐃⲆ);
                        this.ΔⵠᐃⲆ.fade(b, 0, this.ⲆᐃΔⵠᐃⵠⲆ, this.ⵠᐃⲆ);
                    }
                }
            } else if (ΔⲆⵠᐃ.ᐃΔᐃⲆⲆⵠⵠ(a, this.ᐃΔᐃⲆⲆⵠⵠ)) {
                this.ᐃΔᐃΔⲆΔᐃ = 1;
                if (!Ww.transition && cf.ⲆᐃⵠΔΔ.now < 460000) {
                    this.transition();
                }
            }
        };
        this.ⵠⵠΔ = function (a, b) {
            var c;
            var d;
            c = this.source.x > a.x ? Ww.ⵠΔΔΔᐃⵠⲆ(this.source.x) : this.source.ⲆⲆⲆⵠⵠⲆΔ < a.x ? Ww.ⵠΔΔΔᐃⵠⲆ(this.source.ⲆⲆⲆⵠⵠⲆΔ) : b.x;
            d = a.y < this.source.y ? Ww.ᐃⲆΔᐃΔⵠᐃ(this.source.y) : this.source.ⲆᐃΔⲆⵠ < a.y ? Ww.ᐃⲆΔᐃΔⵠᐃ(this.source.ⲆᐃΔⲆⵠ) : b.y;
            this.ΔⵠᐃⲆ.pos(c, d, -0.5, this.ⵠⲆⲆ);
            this.ΔⵠᐃⲆ.pos(c, d, -0.5, this.ⵠᐃⲆ);
        };
    }
    function lf(b, c, d, e) {
        const f = (b | 6896) & ~(b & 6896);
        const g = (c | 22480) & ~(c & 22480);
        const a = ~(d & 45110) & (d | 45110);
        const i = ((50495 + e) * 22695477 + 1) % 4294967296;
        const j = ot(f, g, a, i);
        (function (b, c, d, e, f, i) {
            const a = ((61747 + b) * 2147483629 + 2147483587) % 2147483647;
            const j = (8 << (c >> 16 & 255)) + (24 << (c >> 24 & 255)) + (0 << (c >> 8 & 255)) + (16 << (c & 255));
            const k = (8 << (f & 255)) + (24 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (0 << (f >> 16 & 255));
            const h = (i | 59232) & ~(i & 59232);
            const l = vr(a, j, ~(d & 40987) & 40987 | ~(d & 40987) & d, ((35844 + e) * 1103515245 + 12345) % 2147483648);
            pc(k, h, a, j);
        })(f, g, a, i, f, g);
        return ~(j & 62316) & (j | 62316);
    }
    ⵠΔⵠᐃⵠ = {
        ⵠⵠᐃᐃⲆᐃᐃ: 3,
        ⲆⵠᐃᐃⲆΔⲆⵠΔ: 0.2,
        ⲆΔᐃⲆⵠⲆⲆ: 100,
        ΔⲆΔⲆⵠΔⵠ: 100,
        ᐃᐃᐃᐃᐃᐃΔ: 300,
        ΔΔΔΔⲆ: 2,
        ᐃΔᐃΔᐃⵠΔΔⵠ: 0.2,
        ΔⵠⲆⵠⵠⲆⵠ: 2,
        ΔⵠᐃⵠᐃⲆΔ: 0,
        ᐃⲆⲆΔⵠΔⲆⲆᐃ: 0.4,
        ⲆᐃᐃᐃᐃⲆᐃ: 1,
        ᐃΔⲆⲆⵠⲆΔ: 4,
        ΔᐃⲆᐃᐃᐃΔⲆΔ: 0.2,
        ⵠᐃⲆⵠΔⲆᐃ: 100
    };
    function gf(a, b, c) {
        this.ΔⲆⵠΔⵠⵠΔ = a;
        this.c = 0;
        this.ΔⵠᐃⲆ = b;
        this.ⵠⵠⵠΔⲆ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ⵠⵠⵠΔⲆ[this.c];
            this.ΔⲆⵠΔⵠⵠΔ.ᐃⲆⲆⲆⵠⵠⵠ(this.ΔⵠᐃⲆ, a);
            this.ΔⵠᐃⲆ.play(a);
        };
    }
    function uf(a) {
        this.ᐃⲆΔᐃⵠᐃᐃ = 1;
        this.ᐃⲆⲆⵠ = 0;
        this.mode = -1;
        this.ⲆⲆⲆⲆⲆ = Ww.sample.ⲆⲆⲆⲆⲆ[a];
        this.ΔⲆⵠⵠᐃΔⲆ = Ww.sample.ΔⲆⵠⵠᐃΔⲆ[a];
        this.ⲆⵠⵠᐃᐃΔΔ = Ww.sample.ⲆⵠⵠᐃᐃΔΔ[a];
        this.ⵠᐃⵠΔΔΔⵠ = Ww.sample.ⵠᐃⵠΔΔΔⵠ[a];
        this.ΔΔⲆⵠⵠᐃⵠ = new gf(this, sf.ᐃⵠᐃⵠΔⲆΔ.ΔⲆΔᐃΔ, Ww.ΔⵠᐃΔⲆ.ΔΔⲆⵠⵠᐃⵠ[a]);
        this.Δⵠⵠᐃⵠ = new gf(this, sf.ⲆΔᐃΔⵠⵠⲆ.ΔⲆΔᐃΔ, Ww.ΔⵠᐃΔⲆ.Δⵠⵠᐃⵠ[a]);
        this.ΔⲆⵠΔⵠ = new gf(this, sf.ΔᐃⵠⲆⵠΔΔ.ΔⲆΔᐃΔ, Ww.ΔⵠᐃΔⲆ.ΔⲆⵠΔⵠ[a]);
        this.ᐃⲆⵠᐃΔ = a;
        this.x = 0;
        this.y = 0;
        this.ΔᐃΔΔⲆ = 0;
        this.Ⲇᐃⵠᐃⵠ = ⵠΔⵠᐃⵠ.ⲆΔⲆΔᐃⵠⵠⵠᐃ;
        this.ⲆΔᐃⲆ = {
            x: 0,
            y: 0
        };
        this.ᐃΔⲆΔⵠ = sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ;
        this.ⲆⲆⵠΔⵠΔᐃᐃᐃ = function (a) {
            if (a === 1) {
                this.ΔΔⲆⵠⵠᐃⵠ.play();
            } else if (a === 2) {
                this.Δⵠⵠᐃⵠ.play();
            } else if (a === 3) {
                this.ΔⲆⵠΔⵠ.play();
            }
        };
        this.ⵠⲆⲆⲆⵠⵠᐃ = function (a) {
            if (a.ᐃⵠⵠⲆⵠⲆᐃ > 0) {
                return ⵠΔⵠᐃⵠ.ΔΔΔΔⲆ;
            } else if (a.ⲆᐃΔΔΔⵠΔ > 0) {
                return ⵠΔⵠᐃⵠ.ⲆᐃᐃᐃᐃⲆᐃ;
            } else if (a.ΔⵠᐃⲆᐃ > 0 || a.ⲆⵠⲆⲆᐃ > 0) {
                return ⵠΔⵠᐃⵠ.ⵠⵠᐃᐃⲆᐃᐃ;
            } else {
                return ⵠΔⵠᐃⵠ.ΔⵠᐃⵠᐃⲆΔ;
            }
        };
        this.Ⲇᐃⵠⵠⵠ = function (a) {
            this.ᐃⲆΔᐃⵠᐃᐃ = 0;
            this.ᐃⲆⲆⵠ = a;
            var b = cf.ⵠⲆᐃⲆⲆ[a];
            b.ᐃⲆⵠᐃΔ = this.ᐃⲆⵠᐃΔ;
            this.mode = this.ⵠⲆⲆⲆⵠⵠᐃ(b);
            this.ⲆΔᐃⲆ.x = b.x;
            this.ⲆΔᐃⲆ.y = b.y;
        };
        this.ΔΔΔⵠⵠΔΔ = function () {
            this.ᐃⲆΔᐃⵠᐃᐃ = 1;
            this.mode = -1;
            this.ᐃΔⲆΔⵠ.stop(this.ⲆⲆⲆⲆⲆ);
            this.ᐃΔⲆΔⵠ.stop(this.ΔⲆⵠⵠᐃΔⲆ);
            this.ᐃΔⲆΔⵠ.stop(this.ⲆⵠⵠᐃᐃΔΔ);
            this.ᐃΔⲆΔⵠ.stop(this.ⵠᐃⵠΔΔΔⵠ);
        };
        this.fade = function (a, b) {
            var c = of * this.ᐃΔⲆΔⵠ.volume(a);
            this.ᐃΔⲆΔⵠ.fade(c, 0, b, a);
        };
        this.ᐃⲆⲆⲆⵠⵠⵠ = function (a, b) {
            if (this.ΔᐃΔΔⲆ && this.ᐃⲆⵠᐃΔ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ΔΔⲆΔΔ = function (b, c, d, e, f, g, a) {
            this.Ⲇᐃⵠᐃⵠ = g;
            if (e && f === this.mode) {
                var i = this.ᐃΔⲆΔⵠ.volume(b) * of;
                if (this.ΔᐃΔΔⲆ) {
                    var j = of * (d * Math.random() + c);
                    this.ᐃΔⲆΔⵠ.fade(i, j, a, b);
                } else {
                    this.ᐃΔⲆΔⵠ.fade(i, 0, a, b);
                }
            } else if (f != this.mode && this.ΔᐃΔΔⲆ) {
                this.ᐃΔⲆΔⵠ.fade(0, of * (c + d), a, b);
            } else if (this.ΔᐃΔΔⲆ) {
                i = of * this.ᐃΔⲆΔⵠ.volume(b);
                j = of * (Math.random() * d + c);
                this.ᐃΔⲆΔⵠ.fade(i, j, a, b);
            }
            this.ᐃⲆⲆⲆⵠⵠⵠ(this.ᐃΔⲆΔⵠ, b);
            this.ᐃΔⲆΔⵠ.play(b);
        };
        this.ⵠⵠΔ = function () {
            var a = cf.ⵠⲆᐃⲆⲆ[this.ᐃⲆⲆⵠ];
            this.Ⲇᐃⵠᐃⵠ -= Xw;
            if (this.Ⲇᐃⵠᐃⵠ <= 0) {
                var b = 0;
                if (a.x != this.ⲆΔᐃⲆ.x || a.y != this.ⲆΔᐃⲆ.y) {
                    if (!this.ΔᐃΔΔⲆ) {
                        b = 1;
                        this.ΔᐃΔΔⲆ = 1;
                    }
                    this.x = Ww.ⲆᐃᐃᐃⵠΔⵠ(a.x, ⵠΔⵠᐃⵠ.ΔⵠⲆⵠⵠⲆⵠ);
                    this.y = Ww.ⵠΔΔⲆⵠⵠᐃ(a.y, ⵠΔⵠᐃⵠ.ΔⵠⲆⵠⵠⲆⵠ);
                } else if (this.ΔᐃΔΔⲆ) {
                    b = 1;
                    this.ΔᐃΔΔⲆ = 0;
                }
                this.ⲆΔᐃⲆ.x = a.x;
                this.ⲆΔᐃⲆ.y = a.y;
                ᐃⲆᐃΔ = this.ⵠⲆⲆⲆⵠⵠᐃ(a);
                if (this.mode != ᐃⲆᐃΔ) {
                    if (ⵠΔⵠᐃⵠ.ⲆᐃᐃᐃᐃⲆᐃ === this.mode) {
                        this.fade(this.ⲆⲆⲆⲆⲆ, ⵠΔⵠᐃⵠ.ᐃᐃᐃᐃᐃᐃΔ);
                    } else if (this.mode === ⵠΔⵠᐃⵠ.ΔΔΔΔⲆ) {
                        this.fade(this.ΔⲆⵠⵠᐃΔⲆ, ⵠΔⵠᐃⵠ.ΔⲆΔⲆⵠΔⵠ);
                    } else if (ⵠΔⵠᐃⵠ.ΔⵠᐃⵠᐃⲆΔ === this.mode) {
                        this.fade(this.ⲆⵠⵠᐃᐃΔΔ, ⵠΔⵠᐃⵠ.ⵠᐃⲆⵠΔⲆᐃ);
                    } else if (ⵠΔⵠᐃⵠ.ⵠⵠᐃᐃⲆᐃᐃ === this.mode) {
                        this.fade(this.ⵠᐃⵠΔΔΔⵠ, ⵠΔⵠᐃⵠ.ⲆΔᐃⲆⵠⲆⲆ);
                    }
                }
                if (ᐃⲆᐃΔ === ⵠΔⵠᐃⵠ.ⲆᐃᐃᐃᐃⲆᐃ) {
                    this.ΔΔⲆΔΔ(this.ⲆⲆⲆⲆⲆ, 0.08, 0.3, b, ᐃⲆᐃΔ, ⵠΔⵠᐃⵠ.ᐃⲆⲆΔⵠΔⲆⲆᐃ, ⵠΔⵠᐃⵠ.ᐃᐃᐃᐃᐃᐃΔ);
                } else if (ᐃⲆᐃΔ === ⵠΔⵠᐃⵠ.ΔΔΔΔⲆ) {
                    this.ΔΔⲆΔΔ(this.ΔⲆⵠⵠᐃΔⲆ, 0.2, 0.3, b, ᐃⲆᐃΔ, ⵠΔⵠᐃⵠ.ΔᐃⲆᐃᐃᐃΔⲆΔ, ⵠΔⵠᐃⵠ.ΔⲆΔⲆⵠΔⵠ);
                } else if (ᐃⲆᐃΔ === ⵠΔⵠᐃⵠ.ΔⵠᐃⵠᐃⲆΔ) {
                    this.ΔΔⲆΔΔ(this.ⲆⵠⵠᐃᐃΔΔ, 0.3, 0.6, b, ᐃⲆᐃΔ, ⵠΔⵠᐃⵠ.ᐃΔᐃΔᐃⵠΔΔⵠ, ⵠΔⵠᐃⵠ.ⵠᐃⲆⵠΔⲆᐃ);
                } else if (ᐃⲆᐃΔ === ⵠΔⵠᐃⵠ.ⵠⵠᐃᐃⲆᐃᐃ) {
                    this.ΔΔⲆΔΔ(this.ⵠᐃⵠΔΔΔⵠ, 0.1, 0.25, b, ᐃⲆᐃΔ, ⵠΔⵠᐃⵠ.ⲆⵠᐃᐃⲆΔⲆⵠΔ, ⵠΔⵠᐃⵠ.ⲆΔᐃⲆⵠⲆⲆ);
                }
                this.mode = ᐃⲆᐃΔ;
            }
        };
        this.check = function () {
            var a = cf.ⵠⲆᐃⲆⲆ[this.ᐃⲆⲆⵠ];
            return !!a || (this.ΔΔΔⵠⵠΔΔ(a), false);
        };
    }
    function bf(b, c, d) {
        const e = ((b + 29930) * 1664525 + 1013904223) % 4294967296;
        const f = ((7040 + c) * 1103515245 + 12345) % 2147483648;
        const g = (8 << (d >> 0 & 255)) + (0 << (d >> 16 & 255)) + (24 << (d >> 8 & 255)) + (16 << (d >> 24 & 255));
        const a = yr(e, f, g, e);
        const h = dt(f, g, e, f, g, e);
        return (8 << ((a ^ h) >> 24 & 255)) + (16 << ((a ^ h) >> 8 & 255)) + (0 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) & 255));
    }
    ΔᐃᐃΔᐃΔΔ = 0;
    document.getElementById("version").innerHTML = 52 + ".3";
    var df;
    var Rw = [];
    var Sw = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Ur.ΔⵠⲆⲆᐃ[Sw.time];
    Sw.items.push(new vw(1, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Sw.items.push(new vw(100, 0, 0, 0, 0, 0, 0, 5));
    Sw.items.push(new vw(2, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Sw.items.push(new vw(100, 0, 0, 0, 0, 0, 0, 5));
    ᐃⲆΔΔ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + et[324] + "]";
            }
        }
        this.ᐃᐃⲆⵠ = null;
        this.Ⲇᐃᐃⵠᐃ = 0;
        this.ⲆⲆᐃⵠΔ = [];
        this.ᐃᐃⵠⵠΔⵠⵠ = {};
        this.ⵠᐃᐃⲆΔⵠⲆ = {};
        this.ΔᐃᐃⲆⲆ = [[], [], [], [], [], [], [], [], []];
        this.ΔᐃΔⵠⵠⵠΔ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ⲆΔⵠΔᐃ = 0;
        this.ᐃᐃⵠΔⲆΔᐃ = 0;
        this.ᐃᐃⵠⲆⲆΔΔ = function (c) {
            if (dw !== pr) {
                b.ⲆⲆᐃⵠΔ.push({
                    a: dw.name,
                    gm: dw.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                c();
                return;
            }
            fetch(hw + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        b.ⲆⲆᐃⵠΔ = [];
                        b.ⵠᐃᐃⲆΔⵠⲆ = {};
                        for (let a in pw.ΔΔᐃⵠⲆⵠᐃ) {
                            const c = pw.ΔΔᐃⵠⲆⵠᐃ[a];
                            b.ⲆⲆᐃⵠΔ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: j
                            });
                        }
                        var f = 1;
                        var i = 3;
                        for (let c = 0; c < d.length; c++) {
                            const e = d[c];
                            const a = e.n;
                            const j = e.l;
                            const k = e.p;
                            const h = [];
                            b.ᐃᐃⵠⵠΔⵠⵠ[a] = h;
                            const l = [];
                            for (let b = 0; k.length > b; b++) {
                                const c = a + k[b][0];
                                l.push(c);
                                h.push(c);
                            }
                            for (let c = 0; j.length > c; c++) {
                                const d = j[c];
                                let e;
                                let a = pw.ΔΔᐃⵠⲆⵠᐃ[d[2]];
                                let g = a + d[f];
                                e = a in b.ⵠᐃᐃⲆΔⵠⲆ ? ++b.ⵠᐃᐃⲆΔⵠⲆ[a] : b.ⵠᐃᐃⲆΔⵠⲆ[a] = 1;
                                if (g in b.ⵠᐃᐃⲆΔⵠⲆ) {
                                    ⵠΔⵠᐃⵠΔⵠ = ++b.ⵠᐃᐃⲆΔⵠⲆ[g];
                                } else {
                                    ⵠΔⵠᐃⵠΔⵠ = b.ⵠᐃᐃⲆΔⵠⲆ[g] = 1;
                                }
                                b.ⲆⲆᐃⵠΔ.push({
                                    name: d[4],
                                    a: pw.ΔΔⵠⵠΔⲆΔⲆΔ[d[f]] + " " + ⵠΔⵠᐃⵠΔⵠ,
                                    r: d[f],
                                    gm: pw.ΔΔᐃⵠⲆⵠᐃ[d[2]],
                                    idx: e,
                                    m: 100,
                                    nu: d[i],
                                    id: d[f] + d[0],
                                    p: l
                                });
                            }
                        }
                        const e = [];
                        const a = [];
                        const g = [];
                        for (let c = 0; b.ⲆⲆᐃⵠΔ.length > c; c++) {
                            const d = b.ⲆⲆᐃⵠΔ[c];
                            if (!d.auto) {
                                if (d.gm === pw.ΔΔᐃⵠⲆⵠᐃ[6]) {
                                    if (typeof d.name === "string" && (d.name.indexOf("Private Server") !== -1 || d.nu > 95)) {
                                        e.push(d);
                                    } else {
                                        g.push(d);
                                    }
                                    a.push(c);
                                }
                            }
                        }
                        const k = [];
                        k.push(...g.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        k.push(...e.sort(function (a, b) {
                            return (b.nu < 95 ? b.nu : 0) - (a.nu < 95 ? a.nu : 0);
                        }));
                        for (let c = 0; a.length > c; c++) {
                            const d = a[c];
                            const e = k[c];
                            e.idx = c + 1;
                            b.ⲆⲆᐃⵠΔ[d] = e;
                        }
                        c();
                    });
                } else {
                    aj.setTimeout(function () {
                        b.ᐃᐃⵠⲆⲆΔΔ(c);
                    }, 3000);
                }
            });
        };
        this.ⵠⵠΔⵠΔΔⵠⲆΔ = function (a) {
            var b = [];
            for (var c = 0; a.length > c; c++) {
                if (a[c].a.indexOf(tr) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ⲆΔΔᐃΔᐃᐃ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ᐃⲆΔΔ.ΔᐃΔⵠⵠⵠΔ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ] === -1) {
                ᐃⲆΔΔ.ΔᐃΔⵠⵠⵠΔ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ] = e.selectedIndex = ᐃⲆΔΔ.ⵠⵠΔⵠΔΔⵠⲆΔ(b);
            } else {
                e.selectedIndex = ᐃⲆΔΔ.ΔᐃΔⵠⵠⵠΔ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + et[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + et[323] + " (" + this.ᐃΔⵠⵠⵠⵠⵠ + ") " + et[325] + "</li>";
            for (d = 0; d < b.length; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + et[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ᐃⲆΔΔ.ΔᐃᐃⲆⲆ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ], e = 0; d.length > e; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ᐃⲆΔΔ.ΔᐃΔⵠⵠⵠΔ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ᐃΔⵠⵠⵠⵠⵠ = 0;
        this.ⵠⵠΔΔⲆⵠⲆⲆⲆ = function () {
            this.ᐃΔⵠⵠⵠⵠⵠ = 0;
            for (var a = 0; ᐃⲆΔΔ.ⲆⲆᐃⵠΔ.length > a; a++) {
                if (this.ⲆⲆᐃⵠΔ[a].gm == "experimental") {
                    this.ΔᐃᐃⲆⲆ[7].push(this.ⲆⲆᐃⵠΔ[a]);
                } else if (this.ⲆⲆᐃⵠΔ[a].gm == "zombies") {
                    this.ΔᐃᐃⲆⲆ[2].push(this.ⲆⲆᐃⵠΔ[a]);
                } else if (this.ⲆⲆᐃⵠΔ[a].gm == "community") {
                    this.ΔᐃᐃⲆⲆ[6].push(this.ⲆⲆᐃⵠΔ[a]);
                } else if (this.ⲆⲆᐃⵠΔ[a].gm == "forest") {
                    this.ΔᐃᐃⲆⲆ[4].push(this.ⲆⲆᐃⵠΔ[a]);
                } else if (this.ⲆⲆᐃⵠΔ[a].gm == "battle-royale") {
                    this.ΔᐃᐃⲆⲆ[5].push(this.ⲆⲆᐃⵠΔ[a]);
                } else if (this.ⲆⲆᐃⵠΔ[a].gm == "vampires") {
                    this.ΔᐃᐃⲆⲆ[3].push(this.ⲆⲆᐃⵠΔ[a]);
                } else {
                    this.ΔᐃᐃⲆⲆ[0].push(this.ⲆⲆᐃⵠΔ[a]);
                }
                this.ᐃΔⵠⵠⵠⵠⵠ += this.ⲆⲆᐃⵠΔ[a].nu;
            }
            for (a = 0; this.ΔᐃᐃⲆⲆ.length > a; a++) {
                if (this.ΔᐃᐃⲆⲆ[a].length === 0) {
                    this.ΔᐃᐃⲆⲆ[a].push({
                        a: et[327],
                        ΔⲆⲆⲆΔᐃⵠΔᐃ: 0,
                        ᐃᐃ: "127.0.0.1",
                        Δⵠᐃ: 80
                    });
                }
            }
            this.ⲆΔΔᐃΔᐃᐃ(this.ΔᐃᐃⲆⲆ[0]);
            this.ⲆⲆᐃⲆΔ = function (a) {
                ᐃⲆΔΔ.ⲆΔⵠΔᐃ = a;
                ᐃⲆΔΔ.ⲆΔΔᐃΔᐃᐃ(ᐃⲆΔΔ.ΔᐃᐃⲆⲆ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ]);
                ᐃⲆΔΔ.ⲆΔΔᐃΔᐃᐃ(ᐃⲆΔΔ.ΔᐃᐃⲆⲆ[ᐃⲆΔΔ.ⲆΔⵠΔᐃ]);
                document.getElementById("servselect").selectedIndex = ᐃⲆΔΔ.ⲆΔⵠΔᐃ;
            };
        };
        this.ⲆΔᐃⲆⲆⲆΔ = 0;
        this.ⵠⵠⲆⲆΔᐃⲆ = 0;
        this.ⲆᐃⲆⲆΔ = null;
        this.timeout = function () {
            b.ⵠⵠⲆⲆΔᐃⲆ++;
            b.ᐃᐃⲆⵠ.close();
            if (b.ⵠⵠⲆⲆΔᐃⲆ > 3) {
                Jf = 1;
                df.ⲆⲆⵠΔᐃⲆⲆⲆⲆ = ow.ⵠᐃⵠΔᐃⲆⲆⵠᐃ;
                b.ⲆⲆᐃᐃΔ(et[300]);
                df.waiting = So;
                if (Tw.reconnect.enabled) {
                    Vw.ⲆⲆᐃⲆⵠ(df.ⲆΔΔᐃⵠ);
                }
            } else if (Tw.ⲆΔᐃΔⵠⵠᐃ === undefined || eo === Tw.ᐃⵠⵠΔⲆⲆᐃ || Xh === Tw.ᐃⵠᐃᐃᐃΔΔ) {
                df.ⵠᐃⵠⲆΔⲆⵠ(function () {
                    b.ᐃⲆⲆΔⲆᐃᐃ();
                }, 1);
            } else {
                b.ᐃⲆⲆΔⲆᐃᐃ();
            }
        };
        this.ᐃΔΔΔⵠΔᐃ = function (a) {
            if (this.ᐃᐃⲆⵠ.Ⲇᐃᐃⵠᐃ == this.Ⲇᐃᐃⵠᐃ) {
                this.Ⲇᐃᐃⵠᐃ++;
                this.ⲆⲆᐃᐃΔ(et[301] + a);
                Vw.ⲆⲆᐃⲆⵠ(df.ⲆΔΔᐃⵠ);
            }
        };
        this.ΔⵠᐃⵠᐃⲆⲆ = function () {
            this.ⲆⲆᐃᐃΔ("You speak too much");
        };
        this.ⲆᐃᐃⲆᐃⵠⲆΔΔ = function () {
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[302]);
            df.waiting = ah;
        };
        this.ⵠⲆⲆᐃⲆᐃⵠⵠᐃ = function () {
            Tw.ⵠᐃⵠⵠΔ.open = Xi;
        };
        this.ⲆᐃⵠΔΔᐃⵠⵠⵠ = function () {
            Vw.ⲆⲆᐃⲆᐃⲆΔ = 0;
        };
        this.ⲆⲆΔⲆⲆΔᐃΔΔ = function () {
            Vw.ᐃᐃⵠΔⵠΔⵠ = 0;
        };
        this.ᐃᐃΔⵠΔΔⵠΔⲆ = function (a) {
            Tw.ᐃΔⵠᐃΔ.ᐃⵠⲆΔΔ = a;
            if (cf.ⵠΔΔⲆⲆ > -300) {
                if (a === 0) {
                    this.ⲆⲆᐃᐃΔ(et[340]);
                } else {
                    this.ⲆⲆᐃᐃΔ(et[341]);
                }
            }
        };
        this.Ⲇⵠᐃᐃᐃ = function (a) {
            Tw.Ⲇⵠᐃᐃᐃ = a;
        };
        this.ΔⵠⲆΔⵠⵠᐃⵠⲆ = function (a) {
            Tw.ⵠⵠⵠᐃⵠᐃⲆ = a;
        };
        this.ⵠⵠⵠᐃⵠᐃⲆ = function (a) {
            Tw.ᐃⲆΔⵠⵠ.ᐃⵠⲆΔΔ = a;
            if (cf.ΔⵠᐃⲆᐃ > -300) {
                if (a === 0) {
                    this.ⲆⲆᐃᐃΔ(et[342]);
                } else {
                    this.ⲆⲆᐃᐃΔ(et[343]);
                }
            }
        };
        this.ᐃⵠΔⲆⲆⲆⵠⲆⲆ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ΔΔⲆⵠΔⲆᐃΔⲆ = function () {
            Vw.ⵠᐃⵠⲆⵠᐃᐃ = 0;
        };
        this.ⵠⵠⲆⵠᐃⲆⵠⵠⲆ = function () {
            Vw.ⵠⵠΔᐃⵠᐃΔ = 0;
        };
        this.ᐃⲆᐃΔⵠⲆᐃΔⵠ = function () {
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ = [];
            Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ = [];
            Tw.ⲆⲆⵠⵠ.id = -1;
            Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.stop();
            Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ = [];
            Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ = false;
            Tw.ᐃⵠΔᐃ.ΔⲆᐃⵠⵠΔΔⵠⵠ = false;
            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
            Tw.ᐃⵠΔᐃ.id = -1;
            Tw.ᐃⵠΔᐃ.ⵠⲆⵠᐃⲆ = Wh;
            Tw.ᐃⵠΔᐃ.ᐃⵠⲆᐃⵠ = false;
            Tw.ᐃⵠΔᐃ.ⲆⲆᐃⲆⲆ = Zl;
            Tw.ᐃⵠΔᐃ.ⲆⲆⲆⲆⲆⵠⵠ = aq;
            Tw.ᐃⵠΔᐃ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ($a, 0, 1, 0, 1, 1);
        };
        this.ⵠΔⵠΔⵠⲆΔⵠΔ = function () {
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ();
            df.waiting = false;
        };
        this.ⵠⵠᐃⲆΔΔⵠ = function (a) {
            for (var b = 0; b < a.length; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ΔⲆⵠᐃ.ⲆΔⵠⵠⵠΔΔ(a[b]);
                }
            }
            Tw.ΔⲆΔΔΔ.ᐃⲆΔⵠᐃ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ⲆⲆᐃᐃΔ(a);
        };
        this.ⵠᐃΔᐃᐃᐃⵠⲆⵠ = function () {
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[339]);
            df.waiting = false;
        };
        this.ⲆⵠᐃᐃᐃⲆⵠⲆⲆ = function () {
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[338]);
            df.waiting = false;
        };
        this.ᐃⲆᐃΔΔⵠⲆⵠΔ = function () {
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[304]);
            df.waiting = Ga;
        };
        this.ᐃⲆⵠⲆΔⲆⲆᐃⵠ = function () {
            Tw.ⲆⲆⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ(1, 0);
            Vw.ⲆΔᐃΔΔᐃᐃ();
        };
        this.ⵠⵠᐃᐃᐃᐃⲆⵠⵠ = function (a) {
            var b = a[1];
            var c = cf.ⲆⵠᐃΔ[b];
            c.ΔΔᐃΔ = a[2];
            c.ΔᐃΔⲆᐃ = a[3];
            c.ⵠᐃΔⵠⵠΔⵠ = a[4];
            c.ᐃⵠᐃⲆⵠ = a[5];
            c.ᐃⲆⵠᐃᐃ = a[6];
            c.ΔⲆⲆᐃΔ = a[7];
            c.level = a[8];
            var d = cf.ⵠⲆᐃⲆⲆ[b * cf.ΔⵠᐃⲆᐃⲆⲆ];
            if (d) {
                d.ΔΔᐃΔ = a[2];
                d.ΔᐃΔⲆᐃ = a[3];
                d.ⵠᐃΔⵠⵠΔⵠ = a[4];
                d.ᐃⵠᐃⲆⵠ = a[5];
            }
        };
        this.ⵠⲆⵠⲆΔᐃΔⲆΔ = function (a) {
            if (a === 29) {
                Tw.ⲆⲆⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ(1, 0);
                Vw.ⲆΔᐃΔΔᐃᐃ();
            } else {
                this.ⲆⲆᐃⲆΔᐃΔ([0, a, 1]);
            }
            Tw.ᐃⵠΔᐃ.ⵠΔⲆΔΔΔⵠ();
        };
        this.ΔΔΔⲆΔΔᐃᐃⲆ = function (a) {
            Tw.ΔᐃⲆⵠΔ.Ⲇᐃⵠᐃⵠ = 0;
            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆⲆⲆᐃⲆⵠ(a);
        };
        this.ⲆⲆⵠⲆⵠΔⲆⵠⵠ = function (a) {
            for (var b = Zg[a].r, c = 0; b.length > c; c++) {
                if (Tw.ⲆⲆⵠⵠ.max > Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length || Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ⲆⲆᐃⲆΔᐃΔ([0, b[c][0], d]);
                }
            }
            Tw.ᐃⵠΔᐃ.ⵠΔⲆΔΔΔⵠ();
        };
        this.ᐃⵠⵠⲆΔᐃᐃⲆᐃ = function (a) {
            Tw.ΔᐃⲆⵠΔ.Ⲇᐃⵠᐃⵠ = 0;
            Tw.ᐃⵠΔᐃ.ΔⲆᐃⲆᐃΔΔᐃⵠ(a);
        };
        this.ⲆⲆᐃᐃΔ = function (a) {
            if (Tw.alert.text) {
                if (a !== Tw.alert.text && Tw.alert.list[Tw.alert.list.length - 1] !== a) {
                    Tw.alert.list.push(a);
                }
            } else {
                Tw.alert.text = a;
            }
        };
        this.ⵠⲆΔⲆΔΔⲆΔᐃ = function () {
            this.ⲆⲆᐃᐃΔ(et[305]);
        };
        this.ᐃΔⲆⲆⵠᐃΔⵠΔ = function () {
            var a;
            a = Tw.ⵠᐃⲆ == 0 ? et[306] : et[307] + (Tw.ⵠᐃⲆ + 1) + et[308];
            this.ⲆⲆᐃᐃΔ(a);
            Tw.ⵠᐃⲆ++;
        };
        this.ⲆⵠⵠΔⵠΔⲆᐃᐃ = function () {
            clearTimeout(b.ⲆᐃⲆⲆΔ);
            Tw.reconnect.enabled = Qj;
            Tw.ᐃΔΔΔᐃ = po;
            this.ⲆⲆᐃᐃΔ(et[309]);
            Vw.ⲆⲆᐃⲆⵠ(df.ⲆΔΔᐃⵠ);
            this.ᐃᐃⲆⵠ.close();
        };
        this.ΔⲆⵠᐃΔⲆⵠⵠⲆ = function () {
            Jf = 1;
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[310]);
            df.waiting = So;
        };
        this.ⲆⲆΔⲆⵠⵠΔΔⵠ = function () {
            Jf = 1;
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            this.ⲆⲆᐃᐃΔ(et[311]);
            df.waiting = mn;
        };
        this.ᐃⵠΔⵠⵠΔΔⲆᐃ = function (a) {
            var b = a[1];
            var c = cf.ⲆⵠᐃΔ;
            c[b].ᐃᐃⲆⵠᐃ = a[2];
            c[b].ΔΔᐃΔ = a[3];
            c[b].ΔᐃΔⲆᐃ = a[4];
            c[b].ⵠᐃΔⵠⵠΔⵠ = a[5];
            c[b].ᐃⵠᐃⲆⵠ = a[6];
            c[b].ᐃⲆⵠᐃᐃ = a[7];
            c[b].ΔⲆⲆᐃΔ = a[8];
            c[b].level = a[9];
            c[b].ⲆΔⲆⲆⵠ = 0;
            c[b].ⲆᐃᐃⵠΔⲆᐃ = null;
            c[b].label = null;
            c[b].ΔᐃⵠⲆΔΔⲆ = null;
            c[b].ᐃΔΔΔᐃ = true;
            if (bw === 1) {
                c[b].ᐃᐃⲆⵠᐃ += "|" + b;
            }
        };
        this.ⲆᐃΔΔⲆΔⲆⲆⵠ = function () {
            this.ᐃᐃⲆⵠ[aw](oq[wo].stringify([5]));
        };
        this.ⵠⵠᐃΔⲆΔⲆⵠᐃ = function () {
            this.ⲆⲆᐃᐃΔ(et[312]);
        };
        this.ⵠⲆⲆⵠⲆⲆⵠ = function () {
            this.ⲆⲆᐃᐃΔ(et[313]);
        };
        this.ⲆᐃΔᐃⲆⲆⲆᐃⵠ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Go[xq].stringify([25, a]));
            Tw.ⵠᐃⵠⵠΔ.open = aq;
        };
        this.ᐃⵠᐃΔⲆⲆΔᐃⲆ = function (a) {
            for (var b = lw[a - 1].items, c = 0; c < b.length && Tw.ⲆⲆⵠⵠ.max > Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Tw.ⲆⲆⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ(1, 0);
                } else {
                    this.ⲆⲆᐃⲆΔᐃΔ([0, d, e]);
                }
            }
        };
        this.ⲆⲆᐃⲆΔᐃΔ = function (b) {
            for (var c = b.length, d = Tw.ⲆⲆⵠⵠ, e = 1; c > e; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; h < d.ΔⲆⲆᐃᐃ.length; h++) {
                    if (f == d.ΔⲆⲆᐃᐃ[h].id) {
                        d.ⲆⲆⲆΔ[f] += g;
                        break;
                    }
                }
                if (h == d.ΔⲆⲆᐃᐃ.length) {
                    d.ⲆⲆⲆΔ[f] = g;
                    d.ΔⲆⲆᐃᐃ.push(Vw.ᐃᐃⵠ[f]);
                    Vw.ⲆΔᐃΔΔᐃᐃ();
                }
            }
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ⲆΔᐃΔ = function (b, c, d, e, f, g, a) {
            Tw.ⲆΔᐃΔ.ⵠⵠⲆⵠ = b / 100;
            Tw.ⲆΔᐃΔ.ⵠⵠⲆ = c / 100;
            Tw.ⲆΔᐃΔ.c = d / 100;
            Tw.ⲆΔᐃΔ.ΔⵠΔ = e / 100;
            Tw.ⲆΔᐃΔ.ⵠⲆΔ = f / 100;
            Tw.ⲆΔᐃΔ.ᐃⲆᐃⲆΔΔⲆ = g / 100;
            Tw.Ⲇⵠᐃᐃᐃ = a;
        };
        this.ᐃΔΔΔⵠⲆⵠⲆᐃ = function (a) {
            Vw.ᐃᐃⵠⵠ.modify(a, 2);
        };
        this.ᐃΔᐃΔΔᐃΔᐃⵠ = function (a) {
            Vw.ᐃᐃⵠⵠ.modify(a, 0);
        };
        this.claimed = function (a) {
            Vw.ᐃᐃⵠⵠ.modify(a, 3);
        };
        this.ⵠⵠΔΔⵠᐃⵠⵠᐃ = function (a, b) {
            Tw.ⲆΔᐃΔ.ⵠⵠⲆⵠ = a / 100;
            Tw.Ⲇⵠᐃᐃᐃ = b;
        };
        this.ⲆⵠⵠⲆΔⲆΔⵠᐃ = function (a) {
            Tw.ⲆΔᐃΔ.ΔⵠΔ = a / 100;
        };
        this.ⵠⵠⵠᐃᐃⲆⵠΔⵠ = function (a) {
            Tw.ⲆΔᐃΔ.ⵠⵠⲆ = a / 100;
        };
        this.ᐃⲆᐃⲆᐃᐃᐃⲆⵠ = function (a) {
            Tw.ⲆΔᐃΔ.ᐃⲆᐃⲆΔΔⲆ = a / 100;
        };
        this.ⵠⵠᐃⲆΔᐃⲆᐃΔ = function (a) {
            Tw.ⲆΔᐃΔ.c = a / 100;
        };
        this.ⵠᐃΔΔⵠⲆⵠᐃⲆ = function (a) {
            cf.time = a;
            cf.transition = xo;
            Ww.transition = 1;
        };
        this.ᐃⲆⲆΔᐃⲆᐃⲆⵠ = function () {
            document.getElementById("game_body").style.backgroundColor = Ur.ΔⵠⲆⲆᐃ[cf.time];
        };
        this.ⵠⲆⲆⲆⲆᐃᐃⵠⲆ = function (a) {
            if (cf.mode == 1 && cf.ⲆⵠᐃΔ[a].ᐃᐃⲆⵠᐃ !== "spectator") {
                this.ⲆⲆᐃᐃΔ(cf.ⲆⵠᐃΔ[a].ᐃᐃⲆⵠᐃ + et[314]);
            }
            cf.ⲆⵠᐃΔ[a].ᐃΔΔΔᐃ = false;
        };
        this.ΔᐃΔⵠΔⲆΔⲆᐃ = function (a) {
            var b = new Uint16Array(a);
            ΔⵠᐃⲆ.ⲆⲆⵠ.ΔᐃⲆΔⵠ(b[1], b[2]);
        };
        this.ΔⵠᐃⲆⲆΔⲆᐃⲆ = function (a) {
            if (!Spectator) {
                var b = new Uint16Array(a);
                Tw.ⲆⲆⵠ.ΔᐃⲆΔⵠ(b[1], b[2]);
            }
        };
        this.ⵠⵠΔⵠⵠⲆⵠᐃΔ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; f < e; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = Math.PI * ((b[5 + f * 4] >> 1) / 127) * 2;
                var k = cf.ⵠⲆᐃⲆⲆ[i * cf.ΔⵠᐃⲆᐃⲆⲆ + g];
                if (k && k.ⵠⲆⵠᐃ) {
                    if (Ww.loaded && Ww.ⲆΔΔᐃⵠ) {
                        Ww.ⵠⲆⵠᐃ(b[5 + f * 4] & 1, ⵠⵠᐃΔⵠ[k.type], k.x, k.y);
                    }
                    k.ⵠⲆⵠᐃ.angle = j;
                    k.ⵠⲆⵠᐃ.ⵠⵠΔ = j;
                }
            }
        };
        this.ΔⲆⵠΔⵠᐃΔⵠΔ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; e < d; e++) {
                var f;
                var i = e * 4;
                var k = c[1 + i];
                var m = c[2 + i];
                var p = Math.PI * ((c[3 + i] >> 1) / 127) * 2;
                var q = c[4 + i];
                var t = Rw.Δⵠⵠᐃ[m][k];
                switch (q) {
                    case 0:
                        (f = t.p[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 1:
                        (f = t.s[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 2:
                        (f = t.s[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 3:
                        (f = t.s[2][0]).angle = p;
                        f.ⵠⵠΔ = ra;
                        break;
                    case 4:
                        (f = t.t[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 5:
                        (f = t.t[1][0]).angle = p;
                        f.ⵠⵠΔ = oi;
                        break;
                    case 6:
                        (f = t.t[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 7:
                        (f = t.t[3][0]).angle = p;
                        f.ⵠⵠΔ = xo;
                        break;
                    case 8:
                        (f = t.t[4][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 9:
                        (f = t.t[5][0]).angle = p;
                        f.ⵠⵠΔ = yg;
                        break;
                    case 10:
                        (f = t.g[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 11:
                        (f = t.g[1][0]).angle = p;
                        f.ⵠⵠΔ = u;
                        break;
                    case 12:
                        (f = t.g[2][0]).angle = p;
                        f.ⵠⵠΔ = j;
                        break;
                    case 13:
                        (f = t.d[0][0]).angle = p;
                        f.ⵠⵠΔ = gl;
                        break;
                    case 14:
                        (f = t.d[1][0]).angle = p;
                        f.ⵠⵠΔ = Fh;
                        break;
                    case 15:
                        (f = t.d[2][0]).angle = p;
                        f.ⵠⵠΔ = u;
                        break;
                    case 16:
                        (f = t.b[0][0]).angle = p;
                        f.ⵠⵠΔ = j;
                        break;
                    case 17:
                        (f = t.b[1][0]).angle = p;
                        f.ⵠⵠΔ = yg;
                        break;
                    case 18:
                        (f = t.b[2][0]).angle = p;
                        f.ⵠⵠΔ = cl;
                        break;
                    case 19:
                        (f = t.b[3][0]).angle = p;
                        f.ⵠⵠΔ = $l;
                        break;
                    case 20:
                        (f = t.f[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 21:
                        (f = t.f[1][0]).angle = p;
                        f.ⵠⵠΔ = $l;
                        break;
                    case 22:
                        (f = t.f[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 23:
                        (f = t.sw[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 24:
                        (f = t.sw[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 25:
                        (f = t.sw[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 26:
                        (f = t.gw[0][0]).angle = p;
                        f.ⵠⵠΔ = Qg;
                        break;
                    case 27:
                        (f = t.gw[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 28:
                        (f = t.gw[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 29:
                        (f = t.dw[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 30:
                        (f = t.dw[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 31:
                        (f = t.dw[2][0]).angle = p;
                        f.ⵠⵠΔ = Jr;
                        break;
                    case 32:
                        (f = t.a[0][0]).angle = p;
                        f.ⵠⵠΔ = Uq;
                        break;
                    case 33:
                        (f = t.a[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 34:
                        (f = t.a[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 35:
                        (f = t.cs[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 36:
                        (f = t.cs[1][0]).angle = p;
                        f.ⵠⵠΔ = Fh;
                        break;
                    case 37:
                        (f = t.cs[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 38:
                        (f = t.cs[3][0]).angle = p;
                        f.ⵠⵠΔ = Uq;
                        break;
                    case 40:
                        (f = t.plm[0][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 41:
                        (f = t.plm[1][0]).angle = p;
                        f.ⵠⵠΔ = sh;
                        break;
                    case 42:
                        (f = t.plm[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 50:
                        (f = t.re[0][0]).angle = p;
                        f.ⵠⵠΔ = yg;
                        break;
                    case 51:
                        (f = t.re[1][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 52:
                        (f = t.re[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                        break;
                    case 55:
                        (f = t.c[0][0]).angle = p;
                        f.ⵠⵠΔ = u;
                        break;
                    case 56:
                        (f = t.m[0][0]).angle = p;
                        f.ⵠⵠΔ = gl;
                        break;
                    case 57:
                        (f = t.m[1][0]).angle = p;
                        f.ⵠⵠΔ = $l;
                        break;
                    case 58:
                        (f = t.m[2][0]).angle = p;
                        f.ⵠⵠΔ = true;
                }
                if (Ww.loaded && Ww.ⲆΔΔᐃⵠ && f) {
                    Ww.ⵠⲆⵠᐃ(c[3 + i] & 1, ᐃᐃⲆᐃ[q], f.x, f.y);
                }
            }
        };
        this.ⵠⲆⵠⲆᐃ = function () {
            this.ᐃᐃⲆⵠ[aw](Jo[To].stringify([2, Tw.ⵠⲆⵠⲆᐃ.ⵠᐃⲆⵠ, Tw.ⵠⲆⵠⲆᐃ.ⲆⵠⵠⲆⵠ]));
        };
        this.ᐃⵠⲆⵠᐃⲆⵠⵠⵠ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](Jo[Lo].stringify([33, b, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ΔᐃᐃᐃⲆⵠΔ = function (a, b, c) {
            if (b) {
                this.ᐃᐃⲆⵠ[aw](Jo[Lo].stringify([13, b, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
            } else {
                this.ᐃᐃⲆⵠ[aw](Jo[Do].stringify([37, c, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
            }
        };
        this.ΔⵠᐃⵠⲆΔⲆⲆⲆ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([19, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ⲆΔΔΔⵠᐃⵠΔΔ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[sa].stringify([1, a]));
        };
        this.ⲆᐃⲆᐃⲆⵠⵠΔΔ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Uo[To].stringify([9, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ⲆⵠⲆᐃΔⵠᐃΔΔ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](Go[$o].stringify([23, b, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ, a.type]));
        };
        this.ⲆΔⵠΔΔΔᐃⵠᐃ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](Go[$o].stringify([3, b, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ⲆΔᐃⲆᐃΔᐃⵠΔ = function (a, b, c) {
            this.ᐃᐃⲆⵠ[aw](Uo[Lo].stringify([15, b, c, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ᐃΔⲆⵠⲆΔΔ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([22, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ, a.type]));
        };
        this.ⲆⵠᐃⵠΔΔΔᐃⵠ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([6, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ⲆᐃΔⵠΔᐃⲆⲆΔ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([32, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ΔᐃⲆⵠⲆΔᐃᐃⲆ = function (a) {
            this.ᐃᐃⲆⵠ[aw](yq[wq].stringify([17, a.ⵠᐃⲆⵠ, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ᐃⵠΔΔⲆΔᐃⲆᐃ = function (a) {
            this.ᐃᐃⲆⵠ[aw](zq[xq].stringify([24, a.ⲆⵠⵠⲆⵠ]));
        };
        this.ⲆⲆⵠΔⲆᐃᐃ = function (a) {
            b.ᐃᐃⲆⵠ[aw](Aq[sa].stringify([34, Tw.ⲆᐃᐃᐃΔ.id, Tw.ᐃⵠΔΔⵠ[a]]));
        };
        this.ⵠⵠᐃⵠΔᐃⲆⵠΔ = function () {
            b.ᐃᐃⲆⵠ[aw](ya[fa].stringify([12, Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ, Tw.ⲆᐃᐃᐃΔ.id]));
        };
        this.ⵠΔᐃᐃΔⲆⲆ = function () {
            b.ᐃᐃⲆⵠ[aw](Dq[Aa].stringify([10]));
        };
        this.ᐃΔⵠⲆⵠᐃⲆⲆᐃ = function () {
            b.ᐃᐃⲆⵠ[aw](Dq[sa].stringify([18, Tw.ⲆᐃᐃᐃΔ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Tw.ⲆᐃᐃᐃΔ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Tw.ⲆᐃᐃᐃΔ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.Δⵠⵠ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                cf.ΔΔᐃⵠⵠⲆⲆⵠⵠ();
            }
            for (var n = (e.length - 2) / 18, o = 0; o < n; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = w * cf.ΔⵠᐃⲆᐃⲆⲆ + y;
                if (x & 1) {
                    cf.ΔⵠᐃⲆⲆᐃᐃᐃⵠ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = e[q + 1] / 255 * Math.PI * 2;
                    if (cf.ⵠⲆᐃⲆⲆ[z]) {
                        var I = cf.ⵠⲆᐃⲆⲆ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(I, I.r) > 200) {
                            I.x = B;
                            I.y = D;
                        }
                        if (I.id !== Tw.id || w === 0) {
                            I.ⲆᐃⲆΔΔⲆⵠ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ⵠⲆΔⵠΔ = F;
                        I.ΔᐃᐃⵠⲆ = G;
                        if (I.ⵠⵠΔ) {
                            I.ⵠⵠΔ(x);
                        }
                    } else {
                        var J = new vw(A, w, y, B, D, H, x, E, F, G);
                        cf.ⵠⲆᐃⲆⲆ[z] = J;
                        cf.Δⵠⵠ[A].push(J);
                    }
                }
            }
        };
        this.ⵠⲆⵠⵠⲆ = function (a) {
            this.ⲆΔᐃⲆⲆⲆΔ = wf;
            var b = new Uint16Array(a);
            Tw.ⲆⲆᐃΔⵠ.Ⲇᐃⵠⵠⵠ(b);
        };
        this.ΔᐃΔΔⵠᐃᐃⵠΔ = function (a) {
            if (mh !== Vg) {
                Zg = Vg;
            }
            if (a.length > 0) {
                Vg = JSON.parse(JSON.stringify(Zg));
                for (var b = 0; b < a.length; b++) {
                    var c = a[b];
                    var d = Zg[c.item];
                    if (d !== undefined) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ⵠⲆΔ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ⵠᐃⵠⲆⵠⲆᐃ = function (a) {
            if (a && a.length !== 0) {
                Tw.ⵠᐃⵠⲆⵠⲆᐃ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    ᐃⲆ = [];
                    var f = b.length * 18 + 10;
                    var g = 0;
                    d.font = 14 + "px Baloo Paaji";
                    for (var h = 0; b.length > h; h++) {
                        if (b[h].charAt(0) === "#") {
                            ᐃⲆ[h] = b[h].substring(0, 7);
                            b[h] = b[h].substring(8);
                        } else {
                            ᐃⲆ[h] = "#FFFFFF";
                        }
                        g = Math.max(d.measureText(b[h]).width + 16, g);
                    }
                    c.height = f;
                    c.width = g;
                    h = 0;
                    for (; b.length > h; h++) {
                        var i = Sd(1, b[h], 14, ᐃⲆ[h], null, null, null, null, null, "#000", 6);
                        d.drawImage(i, 8, h * 18 + 5);
                    }
                    return c;
                }(a);
            } else {
                Tw.ⵠᐃⵠⲆⵠⲆᐃ.message = _q;
            }
        };
        this.ΔⲆΔⲆΔ = function (a) {
            var b = cf.ⵠⲆᐃⲆⲆ[a[1] * cf.ΔⵠᐃⲆᐃⲆⲆ];
            if (b) {
                if (cf.mode === 2 && b.ΔΔᐃΔ === 0) {
                    if (Tw.ᐃΔᐃᐃⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + ⲆⵠΔⲆΔ);
                        } else {
                            b.text.push(ⲆⵠΔⲆΔ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ΔᐃΔⲆᐃᐃⲆ[Math.floor(Math.random() * ΔᐃΔⲆᐃᐃⲆ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ᐃⵠᐃⵠΔⲆΔΔⲆ = function (a) {
            if (Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ.length !== Tw.ⲆⲆⵠⵠ.max || Zg[a].ΔⵠⲆⵠ === 29 || Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(Zg[a].ΔⵠⲆⵠ) != -1 || Tw.ⲆⲆⵠⵠ.ⵠⲆΔΔΔⵠⵠᐃⲆ(Zg[a].r)) {
                if (Settings.AutoBook) this.ᐃᐃⲆⵠ[aw](oq[wo].stringify([35, 28]));
                this.ᐃᐃⲆⵠ[aw](oq[wo].stringify([36, a]));
                lastcrafted = a;
                return 1;
            } else {
                this.ⵠⲆⲆⵠⲆⲆⵠ();
                return 0;
            }
        };
        this.ⵠⲆⵠᐃⲆ = function (a) {
            Tw.ᐃⵠΔᐃ.ΔᐃΔⵠΔΔΔⲆⲆ(a);
        };
        this.ᐃⵠⲆᐃⵠ = function (a) {
            Tw.ᐃⵠΔᐃ.ᐃⵠⲆᐃⵠ = a;
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ⲆⲆᐃⲆⲆ = function (a) {
            Tw.ᐃⵠΔᐃ.ⲆⲆᐃⲆⲆ = a;
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ⲆⲆⲆⲆⲆⵠⵠ = function (a) {
            Tw.ᐃⵠΔᐃ.ⲆⲆⲆⲆⲆⵠⵠ = a;
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ΔΔᐃᐃⵠΔΔⵠΔ = function (a) {
            this.ⲆⲆᐃᐃΔ(et[315]);
        };
        this.ⵠᐃᐃᐃⲆᐃΔΔᐃ = function () {
            Tw.ᐃⵠΔᐃ.ⵠΔⲆΔΔΔⵠ();
        };
        this.ΔᐃᐃΔᐃ = function (a) {
            Vw.ΔᐃᐃΔᐃ.ⲆⵠᐃΔ = [];
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            var c = 0;
            for (var d = 1; a.length > d; d += 2) {
                var e = {
                    x: Math.floor(a[d] * cf.w / 250),
                    y: Math.floor(a[d + 1] * cf.ⵠⵠⲆ / 250)
                };
                if (b && !c && !Tw.ᐃᐃᐃΔᐃΔⲆ && ΔⲆⵠᐃ.Ⲇᐃⵠᐃ(e, b) < 250) {
                    c += 1;
                } else {
                    Vw.ΔᐃᐃΔᐃ.ⲆⵠᐃΔ.push(e);
                }
            }
        };
        this.ⲆⲆⵠΔⵠΔᐃⵠᐃ = function () {
            Tw.ⵠⲆⵠⲆᐃ.open = Tn;
            Tw.ⵠΔᐃᐃᐃ.enabled = false;
            Tw.ⵠΔᐃᐃᐃ.Ⲇᐃⵠᐃⵠ = -1;
            Tw.ⵠΔᐃᐃᐃ.label = null;
            Tw.ⵠΔᐃᐃᐃ.ΔᐃⵠⵠⵠⵠΔ = null;
            Tw.ⵠΔᐃᐃᐃ.now = -1;
        };
        this.ⵠΔᐃᐃᐃ = function (a) {
            pw.ΔⵠⵠᐃⲆᐃⵠ = a;
            Tw.ⵠΔᐃᐃᐃ.enabled = true;
            Tw.ⵠΔᐃᐃᐃ.Ⲇᐃⵠᐃⵠ = new Date().getTime();
            Tw.ⵠΔᐃᐃᐃ.label = null;
            Tw.ⵠΔᐃᐃᐃ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
                var d = Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(b[c]);
                if (d != -1) {
                    Tw.ⲆⲆⵠⵠ.ᐃΔⵠᐃⲆⵠΔ(b.length[c], d);
                }
            }
            Tw.ᐃⵠΔᐃ.ⵠΔⲆΔΔΔⵠ();
        };
        this.ⵠⵠΔΔΔⵠⲆⵠΔ = function (a, b, c) {
            this.ΔⵠⵠᐃᐃⲆᐃ(a, b * 256 + c);
        };
        this.ΔⵠⵠᐃᐃⲆᐃ = function (a, b) {
            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆΔᐃΔΔ(a, b, Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(a));
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ᐃᐃⲆⲆΔⵠΔΔⵠ = function (a) {
            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
            Tw.ⲆⲆᐃⵠⲆ.wait = true;
            var b = Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(a);
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆΔᐃΔΔ(a, 1, b);
            if (b >= 0 && !Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ[a]) {
                Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
            }
            if (a == 159) {
                Tw.ᐃⵠΔΔⵠ = [Tw.id];
            }
        };
        this.ᐃⵠⵠⲆᐃΔⵠⵠⲆ = function () {
            this.ᐃᐃⲆⵠ[aw](Jo[To].stringify([8]));
        };
        this.ⵠΔᐃⲆᐃⵠΔΔᐃ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Go[Do].stringify([26, a.ⵠΔⵠⵠⵠ, a.id]));
        };
        this.ΔᐃΔⵠⵠᐃᐃⵠΔ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](Go[$o].stringify([27, a, b]));
        };
        this.ⲆⲆΔᐃⵠⲆⵠᐃⵠ = function () {
            var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            if (a) {
                var b = Math.PI * 2;
                this.ᐃᐃⲆⵠ[aw](Go[Do].stringify([28, Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ, Math.floor((a.angle + b) % b * 255 / b), Tw.ᐃⵠΔᐃ.mode]));
            }
        };
        this.ⲆⲆⵠΔⲆ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
                    this.ᐃᐃⲆⵠ[aw](Uo[Lo].stringify([35, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Tw.ᐃΔᐃᐃⲆ) {
                        if (Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ === a) {
                            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
                        } else {
                            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case as.ΔⵠᐃⲆᐃⵠⲆΔᐃ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Tw.ᐃΔᐃᐃⲆ) {
                        Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
                        if ((c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ]) && a === c.right) {
                            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([35, 7]));
                        } else {
                            Tw.Δⵠⵠᐃⵠ.wait = true;
                            this.ᐃᐃⲆⵠ[aw](yq[wq].stringify([35, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Tw.ᐃΔᐃᐃⲆ) {
                        Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
                        if ((c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ]) && a === c.right) {
                            this.ᐃᐃⲆⵠ[aw](zq[xq].stringify([35, 7]));
                        } else {
                            this.ᐃᐃⲆⵠ[aw](Aq[sa].stringify([35, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Tw.ᐃΔᐃᐃⲆ) {
                        Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
                        var c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                        this.ᐃᐃⲆⵠ[aw](Aq[sa].stringify([35, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ]) && c.ΔΔⵠΔΔ !== a) {
                        Tw.ⵠΔΔᐃᐃ.wait = true;
                    }
                    this.ᐃᐃⲆⵠ[aw](Uo[$o].stringify([35, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ᐃᐃⲆⵠ[aw](ya[fa].stringify([35, a]));
            }
        };
        this.ΔⲆⵠⵠⵠᐃⲆᐃⲆ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Go[wo].stringify([11, a]));
        };
        this.ⵠⵠΔⲆΔⵠⲆᐃⵠ = function (a) {
            Tw.ⲆⲆᐃⵠⲆ.wait = true;
            var b = Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(a);
            Tw.ⲆⲆⵠⵠ.ᐃΔⵠᐃⲆⵠΔ(a, b);
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ⲆⲆᐃⵠΔⵠⵠΔⵠ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](oq[xq].stringify([31, a]));
            lastrecycled = a;
        };
        this.ᐃΔⲆⲆⵠΔΔᐃⲆ = function (a, b) {
            this.ᐃᐃⲆⵠ[aw](Jo[To].stringify([30, a]));
        };
        this.ᐃᐃⵠⲆΔⵠᐃᐃⲆ = function (a) {
            Tw.ⲆⲆᐃⵠⲆ.wait = j;
            var b = Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(a);
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆΔᐃΔΔ(a, 1, b);
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ΔΔᐃⲆΔⵠᐃΔⵠ = function (a) {
            var b = a[1];
            var c = a[2];
            Tw.ⲆⲆᐃⵠⲆ.wait = gl;
            var d = Tw.ⲆⲆⵠⵠ.ᐃΔᐃⵠⲆ(b);
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆΔᐃΔΔ(b, c, d);
            Tw.ᐃⵠΔᐃ.ⵠⵠΔ();
        };
        this.ⲆⵠΔⵠΔⵠⲆⵠᐃ = function () {
            this.ᐃᐃⲆⵠ[aw](Jo[To].stringify([38]));
        };
        this.ⵠᐃⵠⲆⵠⵠΔΔΔ = function (a) {
            var b = Math.PI * 2;
            this.ᐃᐃⲆⵠ[aw](Go[Do].stringify([16, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠⲆⵠᐃᐃᐃⵠΔΔ = function (a) {
            var b = Math.PI * 2;
            this.ᐃᐃⲆⵠ[aw](Go[Do].stringify([0, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ΔⵠⵠᐃⲆⵠᐃⵠᐃ = function (a) {
            if (!Spectator) {
                if (LastMove != a) {
                    this.ᐃᐃⲆⵠ[aw](ⲆⲆΔⵠΔⵠⵠ[ko].stringify([29, a]));
                    LastMove = a;
                }
            }
        };
        this.ᐃᐃⵠⲆᐃᐃᐃⲆΔ = function (a) {
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([7, a]));
        };
        this.ᐃⵠΔⲆΔΔⵠᐃΔ = function (a) {
            var b = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
            if (Tw.ᐃΔᐃᐃⲆ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + ⲆⵠΔⲆΔ);
                } else {
                    b.text.push(ⲆⵠΔⲆΔ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ᐃᐃⲆⵠ[aw](Zo[$o].stringify([14, a]));
        };
        this.ⵠⵠᐃⵠᐃ = function (a) {
            var b = ΔⵠᐃⲆ.select.Δⵠⵠ;
            if (b.length != 0) {
                var c = [29];
                var d = [];
                ΔⲆⵠᐃ.ⲆⵠᐃΔᐃⲆⵠ(a, {
                    x: ΔⵠᐃⲆ.ⲆⲆⵠ.rx,
                    y: ΔⵠᐃⲆ.ⲆⲆⵠ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; e < b.length; e++) {
                    d.push(b[e].ⵠᐃⵠⵠⵠΔΔΔΔ);
                }
                c.push(d);
                this.ᐃᐃⲆⵠ[aw](yq[wq].stringify(c));
            }
        };
        this.ⵠⲆΔΔⲆⲆᐃ = 0;
        this.ᐃᐃΔΔⵠⲆΔ = {
            ᐃᐃ: 0,
            ΔⵠⲆᐃ: 0
        };
        this.ΔᐃⵠⵠⵠΔⵠⵠⲆ = function () {
            if (wf - this.ⵠⲆΔΔⲆⲆᐃ > 50) {
                this.ⵠⲆΔΔⲆⲆᐃ = wf;
                var a = Tw.ⲆⲆⵠ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ᐃᐃΔΔⵠⲆΔ.ᐃᐃ || c != this.ᐃᐃΔΔⵠⲆΔ.ΔⵠⲆᐃ) {
                    this.ᐃᐃⲆⵠ[aw](Aq[xq].stringify([4, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ᐃᐃΔΔⵠⲆΔ.ᐃᐃ = b;
                    this.ᐃᐃΔΔⵠⲆΔ.ΔⵠⲆᐃ = c;
                }
            }
        };
        this.ΔᐃⲆΔΔⲆⲆ = 0;
        this.ΔΔⵠᐃⵠⲆΔⵠΔ = function () {
            if (wf - this.ΔᐃⲆΔΔⲆⲆ > 60000) {
                this.ΔᐃⲆΔΔⲆⲆ = wf;
                this.ping();
            }
        };
        this.ⵠⲆⲆⲆⵠⵠⲆᐃⵠ = function () {
            Tw.reconnect.enabled = Fh;
            if (this.ᐃᐃⲆⵠ.Ⲇᐃᐃⵠᐃ == this.Ⲇᐃᐃⵠᐃ) {
                this.Ⲇᐃᐃⵠᐃ++;
                this.ᐃᐃⲆⵠ.close();
                ᐃⲆΔΔ.connect();
            }
        };
        this.ⵠᐃⲆΔⲆΔΔᐃⵠ = function (a) {
            this.ⲆⲆᐃᐃΔ(et[316]);
            for (var b = 1; b < a.length; b++) {
                Tw.ᐃⵠΔΔⵠ.push(a[b]);
            }
        };
        this.ⵠᐃⲆⲆⲆⲆᐃᐃᐃ = function (a) {
            this.ⲆⲆᐃᐃΔ(cf.ⲆⵠᐃΔ[a].ᐃᐃⲆⵠᐃ + et[318]);
            Tw.ᐃⵠΔΔⵠ.push(a);
            var b = document.getElementById("team_box");
            if (Vw.ⲆⵠⵠⲆΔ != -1 && b.style.display == "inline-block") {
                Vw.ᐃⲆᐃᐃⵠ[Vw.ⲆⵠⵠⲆΔ].action();
            }
        };
        this.ⲆΔᐃⵠᐃⲆⵠⲆᐃ = function () {
            this.ⲆⲆᐃᐃΔ(et[319]);
            Tw.ⲆᐃᐃᐃΔ.wait = true;
            Tw.ᐃⵠΔΔⵠ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ᐃᐃΔⲆΔᐃΔⵠᐃ = function (a) {
            if (a == Tw.id) {
                this.ⲆⲆᐃᐃΔ(et[320]);
                Tw.ⲆᐃᐃᐃΔ.wait = cl;
                Tw.ᐃⵠΔΔⵠ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ⲆⲆᐃᐃΔ(cf.ⲆⵠᐃΔ[a].ᐃᐃⲆⵠᐃ + et[321]);
                for (var b = 0; Tw.ᐃⵠΔΔⵠ.length > b; b++) {
                    if (a == Tw.ᐃⵠΔΔⵠ[b]) {
                        Tw.ᐃⵠΔΔⵠ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (Vw.ⲆⵠⵠⲆΔ != -1 && c.style.display == "inline-block") {
                    Vw.ᐃⲆᐃᐃⵠ[Vw.ⲆⵠⵠⲆΔ].action();
                }
            }
        };
        this.ⲆⵠᐃⵠⲆᐃᐃⲆΔ = function (a) {
            Tw.ᐃΔΔΔᐃ = false;
            this.ⲆⲆᐃᐃΔ(et[322]);
            if (this.Ⲇᐃᐃⵠᐃ == this.ᐃᐃⲆⵠ.Ⲇᐃᐃⵠᐃ) {
                this.Ⲇᐃᐃⵠᐃ++;
                Vw.ⲆⲆᐃⲆⵠ(df.ⲆΔΔᐃⵠ);
                this.ᐃᐃⲆⵠ.close();
            }
        };
        this.ⵠᐃᐃᐃⲆⵠⲆΔΔ = function (a, b) {
            Tw.ᐃΔΔΔᐃ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Tw.ΔⲆΔᐃΔᐃΔ.ⵠⵠⵠⲆⲆⲆⲆ = it[a][Math.floor(Math.random() * it[a].length)];
            Tw.ΔⲆΔᐃΔᐃΔ.ⲆΔⲆⲆⵠ = ΔⲆⵠᐃ.ⲆⲆⵠΔⵠΔΔ(cf.ⲆⵠᐃΔ[Tw.id].ⲆΔⲆⲆⵠ);
            Tw.ΔⲆΔᐃΔᐃΔ.ΔⵠᐃΔΔᐃⵠ = ΔⲆⵠᐃ.ⲆⲆⵠΔⵠΔΔ(d[1]);
            Tw.ΔⲆΔᐃΔᐃΔ.ΔⲆⵠΔΔⲆⵠ = c[1];
            this.ⲆⲆᐃᐃΔ(et[317]);
            if (this.ᐃᐃⲆⵠ.Ⲇᐃᐃⵠᐃ == this.Ⲇᐃᐃⵠᐃ) {
                this.Ⲇᐃᐃⵠᐃ++;
                Vw.ⲆⲆᐃⲆⵠ(Uw.ⲆΔΔᐃⵠ);
                this.ᐃᐃⲆⵠ.close();
                try {
                    aj.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ᐃᐃⲆⵠ[aw]("[21]");
        };
        this.ᐃΔⵠᐃΔⵠᐃΔᐃ = function () {
            if (this.ᐃᐃⲆⵠ.readyState == 3) {
                this.ⲆΔᐃⲆⲆⲆΔ -= 600000;
            }
        };
        this.ⵠⲆᐃⲆᐃⲆΔⲆⲆ = function () {
            if (Xw > 5) {
                this.ⲆΔᐃⲆⲆⲆΔ = wf;
            }
            if (wf - this.ⲆΔᐃⲆⲆⲆΔ > 600000) {
                this.ⲆΔᐃⲆⲆⲆΔ = wf;
                this.ⵠⲆⲆⲆⵠⵠⲆᐃⵠ();
            }
        };
        this.ΔⵠΔⵠⲆⲆⵠⲆᐃ = function (c) {
            LastMove = 0;
            Jf++;
            clearTimeout(this.ⲆᐃⲆⲆΔ);
            document.getElementById("commandMainBoxName").innerHTML = this.ΔᐃᐃⲆⲆ[this.ⲆΔⵠΔᐃ][this.ΔᐃΔⵠⵠⵠΔ[this.ⲆΔⵠΔᐃ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ⲆΔᐃⲆⲆⲆΔ = wf;
            Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.ⲆⵠⲆΔΔ = Tw.ⲆΔᐃΔ.ⵠᐃΔⲆᐃ.ᐃⵠᐃⵠⵠ;
            Tw.ⲆΔᐃΔ.ΔᐃⲆΔⵠᐃⵠ.ⲆⵠⲆΔΔ = Tw.ⲆΔᐃΔ.ΔᐃⲆΔⵠᐃⵠ.ᐃⵠᐃⵠⵠ;
            Tw.ⲆΔᐃΔ.ΔᐃⲆᐃⵠⵠⵠ.ⲆⵠⲆΔΔ = Tw.ⲆΔᐃΔ.ΔᐃⲆᐃⵠⵠⵠ.ᐃⵠᐃⵠⵠ;
            Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.ⲆⵠⲆΔΔ = Tw.ⲆΔᐃΔ.ⵠΔⲆᐃⵠᐃⵠ.ᐃⵠᐃⵠⵠ;
            Tw.ⲆΔᐃΔ.ⲆⵠᐃⵠΔΔⵠ.ⲆⵠⲆΔΔ = Tw.ⲆΔᐃΔ.ⲆⵠᐃⵠΔΔⵠ.ᐃⵠᐃⵠⵠ;
            Tw.ⲆΔᐃΔ.ⵠⵠⲆⵠ = 1;
            Tw.ⲆΔᐃΔ.c = 1;
            Tw.ⲆΔᐃΔ.ⵠⵠⲆ = 1;
            Tw.ⲆΔᐃΔ.ΔⵠΔ = 1;
            Tw.ⲆΔᐃΔ.ⵠⲆΔ = 1;
            Tw.ⲆΔᐃΔ.ᐃⲆᐃⲆΔΔⲆ = 1;
            Tw.ᐃⵠⵠΔⲆᐃᐃ = Vh;
            Vw.ⲆΔⲆᐃᐃ.display = 0;
            Tw.ⲆⲆⵠⵠ.ΔⲆⲆᐃᐃ = [];
            Tw.ⲆⲆⵠⵠ.ⲆⲆⲆΔ = [];
            Tw.ⲆⲆⵠⵠ.max = 10;
            Tw.ⲆⲆⵠⵠ.ⲆΔⲆⵠΔⵠΔ = 0;
            Tw.ⲆⲆⵠⵠ.ⲆΔΔⵠⵠ = 0;
            Tw.ⲆⲆⵠⵠ.id = -1;
            Vw.ⲆⲆᐃⲆᐃⲆΔ = 1;
            Vw.ᐃᐃⵠΔⵠΔⵠ = 1;
            Vw.ⵠⵠΔᐃⵠᐃΔ = 1;
            Vw.ⵠᐃⵠⲆⵠᐃᐃ = 1;
            Tw.ᐃΔΔΔᐃ = true;
            Tw.ⲆⲆⵠⵠ.ⵠⲆⲆᐃⵠᐃᐃ.stop();
            Tw.ᐃⵠΔᐃ.ᐃⵠⵠⲆⲆ = [];
            Tw.ᐃⵠΔᐃ.ᐃᐃᐃᐃⲆ = false;
            Tw.ᐃⵠΔᐃ.ΔⲆᐃⵠⵠΔΔⵠⵠ = po;
            Tw.ᐃⵠΔᐃ.ⵠΔⲆⲆ = -1;
            Tw.ᐃⵠΔᐃ.id = -1;
            Tw.ᐃⵠΔᐃ.ⵠⲆⵠᐃⲆ = false;
            Tw.ᐃⵠΔᐃ.ᐃⵠⲆᐃⵠ = Tn;
            Tw.ᐃⵠΔᐃ.ⲆⲆᐃⲆⲆ = bn;
            Tw.ᐃⵠΔᐃ.ⲆⲆⲆⲆⲆⵠⵠ = So;
            Tw.ᐃⵠΔᐃ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 1, 0, 1, 1);
            Tw.Δⵠⵠᐃⵠ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(Qj, 0, 1, 0, 1 / 10, 1);
            Tw.Δⵠⵠᐃⵠ.wait = false;
            Tw.ⵠΔΔᐃᐃ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(false, 0, 1, 0, 1 / 5, 1);
            Tw.ⵠΔΔᐃᐃ.wait = po;
            Tw.ⲆⲆᐃⵠⲆ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(yl, 0, 1, 0, 1, 1);
            Tw.ⲆⲆᐃⵠⲆ.wait = Ga;
            Tw.ⲆᐃᐃᐃΔ.id = -1;
            Tw.ⲆᐃᐃᐃΔ.ⵠᐃⲆⵠ = -1;
            Tw.ⲆᐃᐃᐃΔ.wait = false;
            Tw.ⲆᐃᐃᐃΔ.timeout = new ΔⲆⵠᐃ.ⲆΔᐃᐃ(So, 0, 1, 0, 1 / 30, 1);
            Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.x = -1;
            Vw.ΔᐃᐃΔᐃ.ⲆᐃΔⵠΔᐃⵠ.y = -1;
            Vw.ΔⲆᐃΔ.open = m;
            Vw.ΔᐃᐃΔᐃ.ⲆⵠᐃΔ = [];
            Tw.ⵠⲆᐃⲆΔᐃⵠ.enabled = false;
            cf.mode = c[1];
            if (c[20] !== undefined && c[21] !== undefined) {
                cf.ⵠⵠⲆⵠΔ = c[20];
                cf.ⵠⵠⲆΔΔ = c[21];
                cf.w = cf.ΔΔⲆⵠΔΔᐃ * cf.ⵠⵠⲆⵠΔ;
                cf.ⵠⵠⲆ = cf.ⵠⵠⲆΔΔ * cf.ⵠⵠⵠⵠΔΔᐃ;
            }
            cf.ᐃᐃΔⵠᐃΔᐃ = c[22];
            cf.ᐃΔⲆⲆΔ = c[23];
            b.ⵠᐃⵠⲆⵠⲆᐃ(c[24]);
            b.ΔᐃΔΔⵠᐃᐃⵠΔ(c[25]);
            Tw.ᐃΔⵠᐃΔ.ᐃⵠⲆΔΔ = c[26];
            Tw.ⵠⵠⵠᐃⵠᐃⲆ = 0;
            Tw.ᐃⲆΔⵠⵠ.ᐃⵠⲆΔΔ = c[27];
            cf.ⵠΔΔᐃⲆⵠⵠⵠⵠ(c[19]);
            cf.time = c[5];
            cf.ⲆᐃⵠΔΔ.ⵠᐃᐃⲆⲆ = c[15];
            cf.ⲆᐃⵠΔΔ.Ⲇᐃⵠⵠⵠ = new Date().getTime();
            Vw.ᐃᐃⵠⵠ.ⵠΔⲆᐃᐃⲆΔ = c[16];
            cf.transition = false;
            Tw.ⵠᐃⲆ = c[2];
            Vw.ᐃᐃⵠⵠ.reset();
            Tw.ᐃⵠΔΔⵠ = c[8];
            cf.Δⵠⵠ[0] = [];
            cf.Δⵠⵠ[100] = [];
            cf.Δⵠⵠ[2] = [];
            cf.Δⵠⵠ[1] = [];
            cf.Δⵠⵠ[6] = [];
            cf.Δⵠⵠ[3] = [];
            cf.Δⵠⵠ[31] = [];
            cf.Δⵠⵠ[37] = [];
            cf.Δⵠⵠ[43] = [];
            cf.Δⵠⵠ[44] = [];
            cf.Δⵠⵠ[39] = [];
            cf.Δⵠⵠ[40] = [];
            cf.Δⵠⵠ[54] = [];
            cf.Δⵠⵠ[55] = [];
            cf.Δⵠⵠ[4] = [];
            cf.Δⵠⵠ[7] = [];
            cf.Δⵠⵠ[8] = [];
            cf.Δⵠⵠ[9] = [];
            cf.Δⵠⵠ[10] = [];
            cf.Δⵠⵠ[15] = [];
            cf.Δⵠⵠ[16] = [];
            cf.Δⵠⵠ[17] = [];
            cf.Δⵠⵠ[45] = [];
            cf.Δⵠⵠ[46] = [];
            cf.Δⵠⵠ[47] = [];
            cf.Δⵠⵠ[48] = [];
            cf.Δⵠⵠ[49] = [];
            cf.Δⵠⵠ[53] = [];
            cf.Δⵠⵠ[11] = [];
            cf.Δⵠⵠ[22] = [];
            cf.Δⵠⵠ[23] = [];
            cf.Δⵠⵠ[5] = [];
            cf.Δⵠⵠ[12] = [];
            cf.Δⵠⵠ[13] = [];
            cf.Δⵠⵠ[14] = [];
            cf.Δⵠⵠ[60] = [];
            cf.Δⵠⵠ[70] = [];
            cf.Δⵠⵠ[71] = [];
            cf.Δⵠⵠ[72] = [];
            cf.Δⵠⵠ[73] = [];
            cf.Δⵠⵠ[74] = [];
            cf.Δⵠⵠ[81] = [];
            cf.Δⵠⵠ[82] = [];
            cf.Δⵠⵠ[87] = [];
            cf.Δⵠⵠ[86] = [];
            cf.Δⵠⵠ[34] = [];
            cf.Δⵠⵠ[65] = [];
            cf.Δⵠⵠ[66] = [];
            cf.Δⵠⵠ[67] = [];
            cf.Δⵠⵠ[62] = [];
            cf.Δⵠⵠ[63] = [];
            cf.Δⵠⵠ[78] = [];
            cf.Δⵠⵠ[77] = [];
            cf.Δⵠⵠ[75] = [];
            cf.Δⵠⵠ[76] = [];
            cf.Δⵠⵠ[64] = [];
            cf.Δⵠⵠ[69] = [];
            cf.Δⵠⵠ[68] = [];
            cf.Δⵠⵠ[79] = [];
            cf.Δⵠⵠ[89] = [];
            cf.Δⵠⵠ[83] = [];
            cf.Δⵠⵠ[84] = [];
            cf.Δⵠⵠ[85] = [];
            cf.Δⵠⵠ[80] = [];
            cf.Δⵠⵠ[88] = [];
            cf.Δⵠⵠ[91] = [];
            cf.Δⵠⵠ[90] = [];
            cf.Δⵠⵠ[61] = [];
            cf.Δⵠⵠ[18] = [];
            cf.Δⵠⵠ[19] = [];
            cf.Δⵠⵠ[20] = [];
            cf.Δⵠⵠ[21] = [];
            cf.Δⵠⵠ[50] = [];
            cf.Δⵠⵠ[52] = [];
            cf.Δⵠⵠ[51] = [];
            cf.Δⵠⵠ[29] = [];
            cf.Δⵠⵠ[56] = [];
            cf.Δⵠⵠ[30] = [];
            cf.Δⵠⵠ[38] = [];
            cf.Δⵠⵠ[33] = [];
            cf.Δⵠⵠ[32] = [];
            cf.Δⵠⵠ[24] = [];
            cf.Δⵠⵠ[25] = [];
            cf.Δⵠⵠ[26] = [];
            cf.Δⵠⵠ[27] = [];
            cf.Δⵠⵠ[28] = [];
            cf.Δⵠⵠ[42] = [];
            cf.Δⵠⵠ[41] = [];
            cf.Δⵠⵠ[35] = [];
            cf.Δⵠⵠ[36] = [];
            cf.ⵠⲆᐃⲆⲆ = [];
            cf.ΔⵠᐃⲆᐃⲆⲆ = c[7];
            Tw.id = c[9];
            Tw.ᐃⲆⲆⵠ = cf.ΔⵠᐃⲆᐃⲆⲆ * Tw.id;
            if (Ww.loaded) {
                Ww.ⲆⵠᐃΔ[0].ᐃⲆⲆⵠ = Tw.ᐃⲆⲆⵠ;
                Ww.ⲆⵠᐃΔ[0].ᐃⲆΔᐃⵠᐃᐃ = 0;
            }
            zf.ΔΔⲆⲆⵠᐃᐃ();
            Tw.ⲆⲆⵠ.ΔᐃⲆΔⵠ(c[3], c[10]);
            cf.ⲆⵠᐃΔ = [];
            var d = cf.ⲆⵠᐃΔ;
            for (var e = 0; c[11] > e; e++) {
                d.push(new xw());
            }
            e = 0;
            for (var f = c[4]; f.length > e; e++) {
                var g = d[f[e].i];
                g.ᐃᐃⲆⵠᐃ = f[e].n;
                g.ΔΔᐃΔ = f[e].s;
                g.ΔᐃΔⲆᐃ = f[e].a;
                g.ᐃⲆⵠᐃᐃ = f[e].c;
                g.ᐃⵠᐃⲆⵠ = f[e].b;
                g.ΔⲆⲆᐃΔ = f[e].d;
                g.ⵠᐃΔⵠⵠΔⵠ = f[e].g;
                g.level = f[e].l;
                g.ⲆΔⲆⲆⵠ = ΔⲆⵠᐃ.ΔⵠⵠⵠΔⵠΔ(f[e].p);
                g.ᐃΔΔΔᐃ = true;
                if (bw === 1) {
                    g.ᐃᐃⲆⵠᐃ += "|" + f[e].i;
                }
            }
            Tw.ⲆⲆᐃΔⵠ.sort();
            if (cf.mode === 1 && cf.ⲆⵠᐃΔ[Tw.id].ᐃᐃⲆⵠᐃ === "spectator") {
                Tw.ᐃᐃᐃΔᐃΔⲆ = true;
            } else {
                Tw.ᐃᐃᐃΔᐃΔⲆ = false;
            }
            if (cf.mode === 2 && cf.ⲆⵠᐃΔ[Tw.id].ΔΔᐃΔ === 0) {
                Tw.ᐃΔᐃᐃⲆ = true;
            } else {
                Tw.ᐃΔᐃᐃⲆ = false;
            }
            if (cf.mode === 3 && cf.ⲆⵠᐃΔ[Tw.id].ΔΔᐃΔ === 0) {
                Tw.ΔⵠⲆᐃⵠᐃΔ = true;
            } else {
                Tw.ΔⵠⲆᐃⵠᐃΔ = $a;
            }
            ⵠΔᐃⲆ.set("starve_token", Tw.ⵠΔⲆⵠⲆ);
            if (c[12] === 0) {
                Tw.ⵠᐃⵠⵠΔ.Ⲇᐃⵠᐃⵠ = 0;
                Vw.ᐃᐃⵠⵠ.restore(c[17]);
                var h = c[14];
                if (h[29]) {
                    Tw.ⲆⲆⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ(1, 0);
                }
                for (e = 0; e < h.length; e++) {
                    if (h[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ⲆⲆᐃⲆΔᐃΔ([0, e, h[e]]);
                    }
                }
                Tw.ⵠᐃⵠⵠΔ.open = $a;
            } else {
                if (cf.mode === 4) {
                    this.ⲆⲆᐃⲆΔᐃΔ([0, 238, 1]);
                } else if (cf.mode === 3) {
                    if (Tw.ΔⵠⲆᐃⵠᐃΔ) {
                        this.ⲆⲆᐃⲆΔᐃΔ([0, 190, 4]);
                    } else {
                        this.ⲆⲆᐃⲆΔᐃΔ([0, 191, 3]);
                    }
                }
                if (cf.mode === 0 || cf.mode === 3 || cf.mode === 7 || cf.mode === 4) {
                    Tw.ⵠᐃⵠⵠΔ.Ⲇᐃⵠᐃⵠ = new Date().getTime();
                    Tw.ⵠᐃⵠⵠΔ.open = true;
                    Tw.ⵠᐃⵠⵠΔ.value = c[13];
                    Vw.ⵠᐃⵠⵠΔ.Ⲇᐃⵠⵠⵠ();
                } else {
                    Tw.ⵠᐃⵠⵠΔ.Ⲇᐃⵠᐃⵠ = 0;
                    Tw.ⵠᐃⵠⵠΔ.open = false;
                    Tw.ⵠᐃⵠⵠΔ.value = 0;
                }
                Tw.ᐃΔᐃⵠⲆΔᐃ = c[12].toString();
            }
            Tw.ⵠΔᐃᐃᐃ.enabled = c[6];
            Tw.ⵠΔᐃᐃᐃ.Ⲇᐃⵠᐃⵠ = -1;
            Tw.ⵠΔᐃᐃᐃ.label = null;
            Tw.ⵠΔᐃᐃᐃ.now = -1;
            ⵠΔᐃⲆ.set("starve_token_id", Tw.ᐃΔᐃⵠⲆΔᐃ);
            if (Tw.reconnect.enabled) {
                Tw.reconnect.rotate = 0;
                Tw.reconnect.enabled = xj;
            } else {
                df.ⲆⲆᐃⲆⵠ(Vw.ⲆΔΔᐃⵠ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + df.ΔΔᐃΔ + "A" + df.ΔᐃΔⲆᐃ);
                }
            }
        };
        this.connect = function () {
            b.ⵠⵠⲆⲆΔᐃⲆ = 0;
            b.ᐃⲆⲆΔⲆᐃᐃ();
        };
        this.ⵠⵠⵠⵠⲆⵠΔ = [];
        this.ΔΔⵠΔᐃⵠⲆᐃⲆ = function (c) {
            const d = b.ⲆⲆᐃⵠΔ.filter(a => a.gm === c);
            const f = {};
            for (let a = 0; a < d.length; a++) {
                const b = d[a];
                const c = b.r;
                if (c !== undefined) {
                    if (f[c] === undefined) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function e(d) {
                b.ⵠⵠⵠⵠⲆⵠΔ[c] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                b.ΔⲆᐃᐃⵠⲆⲆ({
                    domain: gw,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (b.ⵠⵠⵠⵠⲆⵠΔ[c] !== undefined) {
                e(b.ⵠⵠⵠⵠⲆⵠΔ[c]);
                return;
            }
            let a = 1;
            function g(b) {
                const c = new aj.XMLHttpRequest();
                const d = b[0];
                const f = d.p;
                const g = d.r;
                const i = f[Math.floor(Math.random() * f.length)];
                c.open("GET", "https://" + i + "." + gw + "/", gl);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        e(g);
                    }
                };
                c.send();
            }
            for (let a in f) {
                g(f[a]);
            }
            aj.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = aj.Object.keys(f);
                e(b[Math.floor(b.length * Math.random())]);
            }, 5000);
        };
        this.ⵠΔⵠⲆΔⲆᐃΔΔ = function () {
            let a = pw.ΔΔᐃⵠⲆⵠᐃ[b.ⲆΔⵠΔᐃ];
            console.log(pr, _l, ts);
            let c = b.ΔᐃΔⵠⵠⵠΔ[b.ⲆΔⵠΔᐃ];
            let d = b.ⲆⲆᐃⵠΔ.find(b => b.gm == a && b.idx == c);
            if (d === undefined) {
                b.ΔΔⵠΔᐃⵠⲆᐃⲆ(a);
            } else {
                b.ΔⲆᐃᐃⵠⲆⲆ({
                    domain: gw,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ᐃⲆⲆΔⲆᐃᐃ = function () {
            console.log(undefined);
            if (ew !== ts && fw !== ts) {
                console.log(undefined, ek, undefined);
                b.ΔⲆᐃᐃⵠⲆⲆ({
                    domain: gw,
                    is_tls: 1,
                    id: fw + ew,
                    p: b.ᐃᐃⵠⵠΔⵠⵠ[fw]
                });
                return;
            }
            if (dw === undefined) {
                b.ⵠΔⵠⲆΔⲆᐃΔΔ();
            } else {
                b.ΔⲆᐃᐃⵠⲆⲆ({
                    domain: dw.domain,
                    is_tls: dw.ssl,
                    id: dw.id,
                    p: [dw.p]
                });
            }
        };
        this.ΔⲆᐃᐃⵠⲆⲆ = function (c) {
            let d = c.domain;
            let e = c.is_tls;
            let f = c.id;
            let a = c.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let h = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(fn, gj);
            b.ᐃᐃⲆⵠ = new aj.WebSocket(h);
            b.ᐃᐃⲆⵠ.binaryType = "arraybuffer";
            b.ᐃᐃⲆⵠ.Ⲇᐃᐃⵠᐃ = b.Ⲇᐃᐃⵠᐃ;
            b.ᐃᐃⲆⵠ.onmessage = function (a) {
                if (b.Ⲇᐃᐃⵠᐃ == b.Ⲇᐃᐃⵠᐃ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ΔⲆΔⲆΔ(c);
                                break;
                            case 1:
                                b.ᐃΔΔΔⵠΔᐃ(c[1]);
                                break;
                            case 2:
                                b.ᐃⵠΔⵠⵠΔΔⲆᐃ(c);
                                break;
                            case 3:
                                b.ΔⵠΔⵠⲆⲆⵠⲆᐃ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ⵠⵠᐃⲆΔΔⵠ(c);
                                break;
                            case 6:
                                b.ⵠᐃⵠⲆⵠⲆᐃ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g = nw[e];
                            let a = ma;
                            let h = fn;
                            if (g === pr) {
                                mw += e * 2;
                                if (mw < 65535) {
                                    h = ij(Nj(e));
                                } else {
                                    mw = e;
                                    for (let a = 0; a < nw.length; a++) {
                                        if (nw[a] !== pr) {
                                            const b = nw[a][0];
                                            nw[a] = mh;
                                            kj(b);
                                        }
                                    }
                                    h = ij(Nj(e));
                                    de();
                                }
                                a = fk(h);
                                nw[e] = [h, a];
                            } else {
                                h = g[0];
                                a = g[1];
                            }
                            for (let g = 0; g < f.length; g++) {
                                a[g] = f[g];
                            }
                            Ye(h, c, d);
                            for (let g = 0; f.length > g; g++) {
                                f[g] = a[g];
                            }
                            return f;
                        }(a.data, Tw.ⲆⲆᐃᐃᐃΔⵠ, Tw.ⲆⲆⲆΔⲆΔᐃⵠᐃ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.Δⵠⵠ(e, d, ah);
                                break;
                            case 1:
                                b.Δⵠⵠ(e, d, true);
                                break;
                            case 2:
                                b.ⵠᐃᐃᐃⲆᐃΔΔᐃ();
                                break;
                            case 3:
                                b.ⲆⲆᐃⲆΔᐃΔ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ᐃⲆᐃΔΔⵠⲆⵠΔ();
                                break;
                            case 5:
                                b.ⲆⲆΔⲆⵠⵠΔΔⵠ();
                                break;
                            case 6:
                                b.ΔΔᐃᐃⵠΔΔⵠΔ();
                                break;
                            case 7:
                                b.ΔⲆⵠΔⵠᐃΔⵠΔ(e);
                                break;
                            case 8:
                                b.ⵠⲆⵠⲆΔᐃΔⲆΔ(d[1]);
                                break;
                            case 9:
                                b.ᐃⵠⵠⲆΔᐃᐃⲆᐃ(d[1]);
                                break;
                            case 10:
                                b.ⵠⲆⲆⵠⲆⲆⵠ();
                                break;
                            case 11:
                                b.ΔⵠⵠᐃᐃⲆᐃ(d[1], d[2]);
                                break;
                            case 12:
                                b.ⵠⲆⵠᐃⲆ(d[1]);
                                break;
                            case 13:
                                b.ⵠⵠΔⵠⵠⲆⵠᐃΔ(d, e);
                                break;
                            case 14:
                                b.ΔⵠᐃⵠᐃⲆⲆ();
                                break;
                            case 15:
                                b.ⵠⲆⲆⲆⲆᐃᐃⵠⲆ(d[1]);
                                break;
                            case 16:
                                b.ⲆΔᐃΔ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ΔⵠᐃⲆⲆΔⲆᐃⲆ(e);
                                break;
                            case 18:
                                b.ⵠⵠᐃΔⲆΔⲆⵠᐃ();
                                break;
                            case 19:
                                b.ⲆⲆᐃⲆⲆ(d[1]);
                                break;
                            case 20:
                                b.ᐃΔⲆⲆⵠᐃΔⵠΔ();
                                break;
                            case 21:
                                b.ⵠⲆⵠⵠⲆ(e);
                                break;
                            case 22:
                                b.ⵠᐃΔΔⵠⲆⵠᐃⲆ(d[1]);
                                break;
                            case 23:
                                b.ΔᐃΔⵠΔⲆΔⲆᐃ(e);
                                break;
                            case 24:
                                b.ᐃᐃⲆⲆΔⵠΔΔⵠ(d[1]);
                                break;
                            case 25:
                                b.ⵠᐃᐃᐃⲆⵠⲆΔΔ(d[1], e);
                                break;
                            case 26:
                                b.ΔᐃᐃΔᐃ(d);
                                break;
                            case 27:
                                b.ⲆⵠⵠΔⵠΔⲆᐃᐃ();
                                break;
                            case 28:
                                b.ⵠΔᐃᐃᐃ(d[1]);
                                break;
                            case 29:
                                b.ⲆⲆⵠΔⵠΔᐃⵠᐃ();
                                break;
                            case 30:
                                b.ⲆⵠᐃⵠⲆᐃᐃⲆΔ();
                                break;
                            case 31:
                                b.ⵠᐃⲆΔⲆΔΔᐃⵠ(d);
                                break;
                            case 32:
                                b.ᐃᐃΔⲆΔᐃΔⵠᐃ(d[1]);
                                break;
                            case 33:
                                b.ⵠᐃⲆⲆⲆⲆᐃᐃᐃ(d[1]);
                                break;
                            case 34:
                                b.ⲆΔᐃⵠᐃⲆⵠⲆᐃ();
                                break;
                            case 35:
                                b.ᐃⵠᐃΔⲆⲆΔᐃⲆ(d[1]);
                                break;
                            case 36:
                                b.ⲆⲆⲆⲆⲆⵠⵠ(d[1]);
                                break;
                            case 37:
                                b.ⵠⵠΔΔⵠᐃⵠⵠᐃ(d[1], d[2]);
                                break;
                            case 38:
                                b.ⵠⵠⵠᐃᐃⲆⵠΔⵠ(d[1]);
                                break;
                            case 39:
                                b.ⲆⵠⵠⲆΔⲆΔⵠᐃ(d[1]);
                                break;
                            case 40:
                                b.ᐃⲆⵠⲆΔⲆⲆᐃⵠ();
                                break;
                            case 41:
                                b.ⵠⵠᐃᐃᐃᐃⲆⵠⵠ(d);
                                break;
                            case 42:
                                b.ᐃΔΔΔⵠⲆⵠⲆᐃ(d[1]);
                                break;
                            case 43:
                                b.ᐃΔᐃΔΔᐃΔᐃⵠ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ΔΔΔⲆΔΔᐃᐃⲆ(d[1]);
                                break;
                            case 46:
                                b.ⲆⲆⵠⲆⵠΔⲆⵠⵠ(d[1]);
                                break;
                            case 47:
                                b.ᐃⵠⲆᐃⵠ(d[1]);
                                break;
                            case 48:
                                b.ⵠⲆΔⲆΔΔⲆΔᐃ();
                                break;
                            case 50:
                                b.ⵠⵠΔΔΔⵠⲆⵠΔ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ΔⲆⵠᐃΔⲆⵠⵠⲆ();
                                break;
                            case 52:
                                b.ⵠⵠΔⲆΔⵠⲆᐃⵠ(d[1]);
                                break;
                            case 53:
                                b.ᐃᐃⵠⲆΔⵠᐃᐃⲆ(d[1]);
                                break;
                            case 54:
                                b.ΔΔⲆⲆΔⲆᐃΔⲆ();
                                break;
                            case 55:
                                b.ᐃⲆᐃⲆᐃᐃᐃⲆⵠ(d[1]);
                                break;
                            case 56:
                                b.ⵠⵠᐃⲆΔᐃⲆᐃΔ(d[1]);
                                break;
                            case 57:
                                b.ⲆⵠᐃᐃᐃⲆⵠⲆⲆ();
                                break;
                            case 58:
                                b.ⵠᐃΔᐃᐃᐃⵠⲆⵠ();
                                break;
                            case 59:
                                b.ᐃⲆᐃΔⵠⲆᐃΔⵠ();
                                break;
                            case 60:
                                b.ⵠⲆⲆᐃⲆᐃⵠⵠᐃ();
                                break;
                            case 61:
                                Tw.ⲆⲆⵠ.ⲆΔⵠᐃⲆⵠΔ = 0.2;
                                Tw.ⲆⲆⵠ.Ⲇᐃⵠᐃⵠ = 3;
                                break;
                            case 62:
                                b.ΔΔᐃⲆΔⵠᐃΔⵠ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ⲆⲆΔⲆⲆΔᐃΔΔ();
                                break;
                            case 64:
                                b.ⲆᐃⵠΔΔᐃⵠⵠⵠ();
                                break;
                            case 65:
                                b.ⵠⵠⲆⵠᐃⲆⵠⵠⲆ();
                                break;
                            case 66:
                                b.ΔΔⲆⵠΔⲆᐃΔⲆ();
                                break;
                            case 67:
                                b.ᐃⵠΔⲆⲆⲆⵠⲆⲆ(d[1]);
                                break;
                            case 68:
                                b.ᐃᐃΔⵠΔΔⵠΔⲆ(d[1]);
                                break;
                            case 69:
                                b.ⵠⵠⵠᐃⵠᐃⲆ(d[1]);
                                break;
                            case 70:
                                b.ΔⵠⲆΔⵠⵠᐃⵠⲆ(d[1]);
                                break;
                            case 71:
                                b.Ⲇⵠᐃᐃᐃ(d[1]);
                        }
                    }
                }
            };
            b.ᐃᐃⲆⵠ.onerror = function () {
                if (Tw.reconnect.enabled) {
                    aj.setTimeout(b.timeout, 2500);
                }
            };
            this.ᐃᐃⲆⵠ.onopen = function () {
                clearTimeout(b.ⲆᐃⲆⲆΔ);
                Tw.ⲆΔᐃΔⵠⵠᐃ = Tw.ⲆΔᐃΔⵠⵠᐃ || ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("token");
                ΔⲆⵠᐃ.ΔΔⲆΔⵠⲆⵠ().then(a => {
                    b.ᐃᐃⲆⵠ[aw](Dq[fa].stringify([df.ᐃᐃⲆⵠᐃ.input.value, screen.width + 200, screen.height + 200, 52, Tw.ⵠΔⲆⵠⲆ, Tw.ᐃΔᐃⵠⲆΔᐃ, Tw.reconnect.enabled ? 1 : 0, df.ΔΔᐃΔ, df.ΔᐃΔⲆᐃ, df.ⲆΔΔⵠⵠ, df.ᐃⵠᐃⲆⵠ, df.ᐃⲆⵠᐃᐃ, df.ΔⲆⲆᐃΔ, _w === fn ? 0 : _w, $w === ts ? 0 : $w.substring($w.length - 50), cw, Tw.ⲆΔᐃΔⵠⵠᐃ, a, Tw.ᐃⵠⵠΔⲆⲆᐃ, Tw.ᐃⵠᐃᐃᐃΔΔ]));
                    Tw.ⲆΔᐃΔⵠⵠᐃ = _l;
                    Tw.ᐃⵠⵠΔⲆⲆᐃ = undefined;
                    Tw.ᐃⵠᐃᐃᐃΔΔ = undefined;
                    b.ⲆᐃⲆⲆΔ = setTimeout(b.timeout, 2000);
                });
            };
        };
    }();
    var cf;
    var Tw;
    var Uw;
    var Vw = {
        ᐃⲆⲆⲆⵠ: false
    };
    var Ww = new function () {
        this.ⲆΔΔᐃⵠ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ⵠΔΔΔᐃⵠⲆ = function (a) {
            return a / cf.w * 100;
        };
        this.ᐃⲆΔᐃΔⵠᐃ = function (a) {
            return a / cf.ⵠⵠⲆ * 100;
        };
        this.ⲆᐃᐃᐃⵠΔⵠ = function (a, b) {
            a = this.ⵠΔΔΔᐃⵠⲆ(a) - this.ⵠᐃΔⵠⲆ.x;
            return this.ⵠᐃΔⵠⲆ.x + b * a;
        };
        this.ⵠΔΔⲆⵠⵠᐃ = function (a, b) {
            a = Math.abs(this.ᐃⲆΔᐃΔⵠᐃ(a) - this.ⵠᐃΔⵠⲆ.y);
            return this.ⵠᐃΔⵠⲆ.y + b * a;
        };
        this.sample = {};
        this.ΔⵠᐃΔⲆ = {};
        this.ΔⵠᐃⲆ = {};
        this.ΔᐃⵠⲆΔΔᐃ = function (b, c, d, e) {
            for (var f = 0; f < c.length; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return Uq;
                }
            }
            return false;
        };
        this.ⵠⲆⵠᐃ = function (a, b, c, d) {
            c = this.ⲆᐃᐃᐃⵠΔⵠ(c, ⵠΔⵠᐃⵠ.ᐃΔⲆⲆⵠⲆΔ);
            d = this.ⵠΔΔⲆⵠⵠᐃ(d, ⵠΔⵠᐃⵠ.ᐃΔⲆⲆⵠⲆΔ);
            console.log("HIT", a, b, c, d, ⵠΔⵠᐃⵠ.ᐃΔⲆⲆⵠⲆΔ);
            if (a) {
                if (b === 1) {
                    this.ΔᐃⵠⲆΔΔᐃ(this.ΔⵠᐃⲆ.ᐃⲆⵠⲆΔΔⲆ, this.sample.ᐃⲆⵠⲆΔΔⲆ, c, d);
                } else if (b === 0) {
                    this.ΔᐃⵠⲆΔΔᐃ(this.ΔⵠᐃⲆ.ⵠΔᐃⵠᐃⵠΔ, this.sample.ⵠΔᐃⵠᐃⵠΔ, c, d);
                }
            } else {
                this.ΔᐃⵠⲆΔΔᐃ(this.ΔⵠᐃⲆ.ⵠⵠⵠⲆᐃ, this.sample.ⵠⵠⵠⲆᐃ, c, d);
            }
        };
        this.ⵠᐃΔⵠⲆ = {
            x: 0,
            y: 0
        };
        this.ΔⵠⲆⲆⲆⲆⵠ = {
            y: 0,
            x: 0
        };
        this.ⲆᐃⲆᐃⲆ = {};
        this.ⲆⵠᐃΔ = [];
        this.ᐃΔⲆΔⵠ = function (a, b) {
            for (var c in this.ⲆᐃⲆᐃⲆ) {
                var d = this.ⲆᐃⲆᐃⲆ[c];
                d.check(a);
                if (d.ᐃΔᐃΔⲆΔᐃ) {
                    if (cf.ⲆᐃⵠΔΔ.now < 460000) {
                        d.ΔΔⲆΔΔ();
                    }
                    if (b) {
                        d.ⵠⵠΔ(a, this.ⵠᐃΔⵠⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ⵠᐃⵠΔᐃΔⲆΔΔ = function () {
            var a = [];
            for (var b = 0; this.ⲆⵠᐃΔ.length > b; b++) {
                if ((e = this.ⲆⵠᐃΔ[b]).ᐃⲆΔᐃⵠᐃᐃ) {
                    a.push(b);
                } else if (!e.ᐃⲆΔᐃⵠᐃᐃ && !cf.ⵠⲆᐃⲆⲆ[e.ᐃⲆⲆⵠ]) {
                    e.ΔΔΔⵠⵠΔΔ();
                    a.push(b);
                }
            }
            var c = cf.Δⵠⵠ[0];
            var d = 0;
            for (b = 0; b < c.length && a.length > d; b++) {
                var e = c[b];
                if ((cf.mode != 1 || cf.ⲆⵠᐃΔ[e.id].ᐃᐃⲆⵠᐃ !== "spectator") && e.ᐃⲆⵠᐃΔ === -1 && e.ᐃⲆⲆⵠ !== Tw.ᐃⲆⲆⵠ) {
                    this.ⲆⵠᐃΔ[a[d]].Ⲇᐃⵠⵠⵠ(e.ᐃⲆⲆⵠ);
                    d++;
                }
            }
        };
        this.ⲆᐃΔΔⲆᐃⲆⵠᐃ = function () {
            this.ⵠᐃⵠΔᐃΔⲆΔΔ();
            for (var a = 0; a < this.ⲆⵠᐃΔ.length; a++) {
                var b = this.ⲆⵠᐃΔ[a];
                if (!b.ᐃⲆΔᐃⵠᐃᐃ && b.check()) {
                    b.ⵠⵠΔ();
                }
            }
        };
        this.ᐃᐃᐃᐃΔⲆⵠⲆᐃ = function (a) {
            if (this.ΔⵠⲆⲆⲆⲆⵠ.x === a.x && this.ΔⵠⲆⲆⲆⲆⵠ.y === a.y) {
                return 0;
            } else {
                this.ΔⵠⲆⲆⲆⲆⵠ.x = a.x;
                this.ΔⵠⲆⲆⲆⲆⵠ.y = a.y;
                this.ⵠᐃΔⵠⲆ.x = this.ⵠΔΔΔᐃⵠⲆ(a.x);
                this.ⵠᐃΔⵠⲆ.y = this.ᐃⲆΔᐃΔⵠᐃ(a.y);
                Howler.pos(this.ⵠᐃΔⵠⲆ.x, this.ⵠᐃΔⵠⲆ.y, 0);
                return 1;
            }
        };
        this.ΔΔΔⵠⵠⲆΔⲆᐃ = function () {
            if (this.ⲆΔΔᐃⵠ && this.loaded) {
                var a = cf.ⵠⲆᐃⲆⲆ[Tw.ᐃⲆⲆⵠ];
                if (a) {
                    a.ᐃⲆⵠᐃΔ = 0;
                    var b = this.ᐃᐃᐃᐃΔⲆⵠⲆᐃ(a);
                    if (cf.mode !== 2 && cf.mode !== 4 && cf.mode !== 5) {
                        this.ᐃΔⲆΔⵠ(a, b);
                    }
                    this.ⲆᐃΔΔⲆᐃⲆⵠᐃ();
                }
            }
        };
        this.ⲆΔⲆΔᐃⵠΔⵠⵠ = function () {
            for (var b in sf) {
                var c = sf[b];
                if (typeof c === "object" && c.path) {
                    c.ΔⲆΔᐃΔ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.Δⵠ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(undefined);
                    for (var h = 0; h < f; h++) {
                        var j = c.ΔⲆΔᐃΔ.play(d);
                        c.ΔⲆΔᐃΔ.stop(j);
                        c.ΔⲆΔᐃΔ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(ek, _q);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        Ww.sample[d] = g;
                    } else {
                        Ww.sample[d] = g[0];
                    }
                    Ww.ΔⵠᐃⲆ[d] = c.ΔⲆΔᐃΔ;
                }
            }
        };
        this.ⵠⵠΔΔⲆΔⲆ = function (a, b, c) {
            for (var d = 0; a.length > d; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⲆᐃⵠⵠᐃΔⲆ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; d > i; i++) {
                var j = a[i] = [];
                for (ΔⵠⲆᐃ = 0; e > ΔⵠⲆᐃ; ΔⵠⲆᐃ++) {
                    j[ΔⵠⲆᐃ] = Ww.sample[f + ΔⵠⲆᐃ][i];
                    c.ΔⲆΔᐃΔ.volume(g, j[ΔⵠⲆᐃ]);
                }
            }
        };
        this.Ⲇᐃⵠⵠⵠ = function () {
            Ww.ⲆΔⲆΔᐃⵠΔⵠⵠ();
            Ww.ΔⵠᐃΔⲆ.ΔΔⲆⵠⵠᐃⵠ = [];
            Ww.ΔⵠᐃΔⲆ.Δⵠⵠᐃⵠ = [];
            Ww.ΔⵠᐃΔⲆ.ΔⲆⵠΔⵠ = [];
            Ww.ⲆᐃⵠⵠᐃΔⲆ(Ww.ΔⵠᐃΔⲆ.ΔΔⲆⵠⵠᐃⵠ, sf.ᐃⵠᐃⵠΔⲆΔ, 8, 3, "p", 0.15);
            Ww.ⲆᐃⵠⵠᐃΔⲆ(Ww.ΔⵠᐃΔⲆ.Δⵠⵠᐃⵠ, sf.ⲆΔᐃΔⵠⵠⲆ, 8, 4, "w", 0.15);
            Ww.ⲆᐃⵠⵠᐃΔⲆ(Ww.ΔⵠᐃΔⲆ.ΔⲆⵠΔⵠ, sf.ΔᐃⵠⲆⵠΔΔ, 8, 3, "d", 0.09);
            Ww.ⵠⵠΔΔⲆΔⲆ(Ww.sample.ⵠⵠⵠⲆᐃ, Ww.ΔⵠᐃⲆ.ⵠⵠⵠⲆᐃ, 0.15);
            Ww.ⵠⵠΔΔⲆΔⲆ(Ww.sample.ⵠΔᐃⵠᐃⵠΔ, Ww.ΔⵠᐃⲆ.ⵠΔᐃⵠᐃⵠΔ, 0.2);
            Ww.ⵠⵠΔΔⲆΔⲆ(Ww.sample.ᐃⲆⵠⲆΔΔⲆ, Ww.ΔⵠᐃⲆ.ᐃⲆⵠⲆΔΔⲆ, 1);
            Ww.ⲆᐃⲆᐃⲆ.ⲆΔⲆⲆⵠⵠΔⵠᐃ = new hf(12, this.sample.ΔΔⲆΔⲆΔⵠ, this.sample.ⵠᐃΔⲆᐃΔⲆ, 5000, 0.05, 0.4, sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ, 3000, {
                x: Ur.ⲆⵠΔⵠᐃᐃᐃ,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ,
                w: cf.w,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            }, {
                x: Ur.ⲆⵠΔⵠᐃᐃᐃ - 2300,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ - 4000,
                w: cf.w,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            }, {
                x: Ur.ⲆⵠΔⵠᐃᐃᐃ - 1500,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ - 2000,
                w: cf.w,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            });
            Ww.ⲆᐃⲆᐃⲆ.ⲆΔᐃΔᐃᐃΔⲆᐃ = new hf(12, this.sample.ᐃᐃᐃΔⲆΔⲆ, this.sample.ᐃΔⵠΔⲆᐃⵠ, 5000, 0.03, 0.25, sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ, 3000, {
                x: 0,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ + 800,
                w: Ur.ⲆⵠΔⵠᐃᐃᐃ - 2300,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            }, {
                x: -100,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ - 300,
                w: Ur.ⲆⵠΔⵠᐃᐃᐃ - 100,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            }, {
                x: -100,
                y: Ur.ᐃⲆⲆⵠΔⲆⲆ + 400,
                w: Ur.ⲆⵠΔⵠᐃᐃᐃ - 1400,
                ⵠⵠⲆ: cf.ⵠⵠⲆ
            });
            Ww.ⲆᐃⲆᐃⲆ.ⵠᐃⵠΔΔΔⵠ = new hf(12, this.sample.ⲆⲆΔⵠⲆⵠⲆ, this.sample.ΔⲆΔΔΔᐃⵠ, 5000, 0.01, 0.22, sf.ⵠᐃΔΔΔⵠᐃ.ΔⲆΔᐃΔ, 3000, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⵠⲆ: Ur.ᐃⲆⲆⵠΔⲆⲆ - 1000
            }, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⵠⲆ: Ur.ᐃⲆⲆⵠΔⲆⲆ + 600
            }, {
                x: -100,
                y: -100,
                w: cf.w + 200,
                ⵠⵠⲆ: Ur.ᐃⲆⲆⵠΔⲆⲆ + 100
            });
            for (var a = 0; a < 8; a++) {
                Ww.ⲆⵠᐃΔ[a] = new uf(a);
            }
            Ww.ⲆⵠᐃΔ[0].Ⲇᐃⵠⵠⵠ(Tw.ᐃⲆⲆⵠ);
            Ww.loaded = 1;
        };
        this.ⲆⲆⵠᐃᐃⵠⲆⲆⲆ = function () {
            if (!this.transition && cf.ⲆᐃⵠΔΔ.now < 460000) {
                this.transition = 1;
            }
        };
        this.ⲆⲆᐃⲆⵠ = function () {
            if (this.ⲆΔΔᐃⵠ && this.loaded) {
                for (var a in Ww.sample) {
                    var b = Ww.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            Ww.ΔⵠᐃⲆ[a].stop(b[c]);
                        }
                    } else {
                        Ww.ΔⵠᐃⲆ[a].stop(b);
                    }
                }
                for (c = 0; c < Ww.ⲆⵠᐃΔ.length; c++) {
                    Ww.ⲆⵠᐃΔ[c].ΔΔΔⵠⵠΔΔ();
                }
            }
        };
        this.select = function () {
            if (Ww.ⲆΔΔᐃⵠ) {
                Ww.ⲆⲆᐃⲆⵠ();
            } else {
                if (!Ww.loaded) {
                    Ww.Ⲇᐃⵠⵠⵠ();
                }
                Ww.ⲆⵠᐃΔ[0].ᐃⲆⲆⵠ = Tw.ᐃⲆⲆⵠ;
                Ww.ⲆⵠᐃΔ[0].ᐃⲆΔᐃⵠᐃᐃ = 0;
                Ww.ⲆⲆⵠᐃᐃⵠⲆⲆⲆ();
            }
            Ww.ⲆΔΔᐃⵠ = !Ww.ⲆΔΔᐃⵠ;
        };
    }();
    var zf = new function () {
        this.ΔΔᐃⲆⲆⲆᐃ = function () {
            this.ⵠΔⲆⵠΔ = 81;
            this.ⵠΔΔΔΔ = 68;
            this.ᐃⵠⲆⲆⲆ = 90;
            this.ΔⲆⲆⵠΔΔᐃ = 83;
        };
        this.ᐃⲆᐃΔⵠⲆⲆ = function () {
            this.ⵠΔⲆⵠΔ = 65;
            this.ⵠΔΔΔΔ = 68;
            this.ᐃⵠⲆⲆⲆ = 87;
            this.ⵠᐃΔᐃⵠ = 83;
        };
        this.ΔⵠⵠⲆΔ = 0;
        this.ΔⲆⲆⵠΔΔᐃ = 1;
        this.ⵠᐃⵠᐃⵠⲆⵠ = 49;
        this.ⲆⲆⲆᐃⲆΔΔ = 50;
        this.ᐃΔⲆⲆⲆⵠᐃ = 51;
        this.ⵠΔΔⵠⲆⵠⲆ = 52;
        this.ΔⲆΔᐃⵠⲆⲆΔΔ = 53;
        this.ⲆⲆΔⵠᐃΔᐃ = 17;
        this.ⲆⵠᐃⵠⵠΔⵠ = 37;
        this.ⲆⲆⲆⲆΔᐃⲆ = 39;
        this.ⲆΔⲆⵠᐃᐃΔ = 38;
        this.ΔΔᐃᐃΔⲆᐃ = 40;
        this.ⲆΔᐃΔᐃΔΔ = 32;
        this.ⵠⲆⵠᐃᐃⵠⲆ = 82;
        this.ᐃⲆⲆΔΔᐃⵠ = 71;
        this.ⵠΔᐃΔΔᐃⲆ = 86;
        this.ᐃΔΔⲆΔᐃΔ = 66;
        this.ᐃⲆᐃΔⵠⲆⲆ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ΔⵠⵠⲆΔ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ΔⵠⵠⲆΔ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (this.ⵠΔⲆⵠΔ == b || this.ⲆⵠᐃⵠⵠΔⵠ == b) {
                this.ᐃⲆᐃᐃⵠΔΔ();
            } else if (this.ᐃⵠⲆⲆⲆ == b || this.ⲆΔⲆⵠᐃᐃΔ == b) {
                this.ⵠΔⲆΔⵠΔⵠ();
            } else if (b == this.ΔⲆⲆⵠΔΔᐃ || this.ΔⲆⵠⵠΔᐃΔⵠⲆ == b) {
                this.ᐃᐃᐃᐃΔᐃΔ();
            } else if (b == this.ⵠΔΔΔΔ || this.ⲆⲆⲆⲆΔᐃⲆ == b) {
                this.ⲆⵠⵠⲆⲆⵠⲆ();
            }
            this.keys[b] = this.ΔⲆⲆⵠΔΔᐃ;
            return b;
        };
        this.ᐃⲆᐃᐃⵠΔΔ = function () {
            this.keys[this.ⵠΔΔΔΔ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆⲆⲆⲆΔᐃⲆ] = this.ΔⵠⵠⲆΔ;
        };
        this.ⲆⵠⵠⲆⲆⵠⲆ = function () {
            this.keys[this.ⵠΔⲆⵠΔ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆⵠᐃⵠⵠΔⵠ] = this.ΔⵠⵠⲆΔ;
        };
        this.ᐃᐃᐃᐃΔᐃΔ = function () {
            this.keys[this.ᐃⵠⲆⲆⲆ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆΔⲆⵠᐃᐃΔ] = this.ΔⵠⵠⲆΔ;
        };
        this.ⵠΔⲆΔⵠΔⵠ = function () {
            this.keys[this.ⵠᐃΔᐃⵠ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ΔΔᐃᐃΔⲆᐃ] = this.ΔⵠⵠⲆΔ;
        };
        this.ΔΔⲆⲆⵠᐃᐃ = function () {
            this.keys[this.ⵠΔΔΔΔ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆⲆⲆⲆΔᐃⲆ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⵠΔⲆⵠΔ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆⵠᐃⵠⵠΔⵠ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ᐃⵠⲆⲆⲆ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⲆΔⲆⵠᐃᐃΔ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ⵠᐃΔᐃⵠ] = this.ΔⵠⵠⲆΔ;
            this.keys[this.ΔΔᐃᐃΔⲆᐃ] = this.ΔⵠⵠⲆΔ;
        };
        this.ⵠΔⵠⲆⵠⲆⲆ = function () {
            return this.keys[this.ⵠΔⲆⵠΔ] || this.keys[this.ⲆⵠᐃⵠⵠΔⵠ];
        };
        this.ΔⲆⵠΔⲆΔᐃ = function () {
            return this.keys[this.ⵠΔΔΔΔ] || this.keys[this.ⲆⲆⲆⲆΔᐃⲆ];
        };
        this.ΔⲆⲆⵠⲆΔⵠ = function () {
            return this.keys[this.ᐃⵠⲆⲆⲆ] || this.keys[this.ⲆΔⲆⵠᐃᐃΔ];
        };
        this.ⵠⵠⲆⵠΔᐃΔ = function () {
            return this.keys[this.ⵠᐃΔᐃⵠ] || this.keys[this.ΔΔᐃᐃΔⲆᐃ];
        };
        this.ⲆⵠΔᐃᐃⲆᐃᐃⲆ = function () {
            return this.keys[this.ⲆⲆΔⵠᐃΔᐃ];
        };
        this.ᐃΔⲆᐃᐃΔⵠⲆⲆ = function () {
            return this.keys[this.ⵠᐃⵠᐃⵠⲆⵠ];
        };
        this.ⲆⵠᐃⲆⲆⲆⲆΔⵠ = function () {
            return this.keys[this.ⲆⲆⲆᐃⲆΔΔ];
        };
        this.ⵠᐃⵠΔΔΔᐃⲆΔ = function () {
            return this.keys[this.ᐃΔⲆⲆⲆⵠᐃ];
        };
        this.ⲆᐃΔᐃΔⲆᐃⲆⲆ = function () {
            return this.keys[this.ⵠΔΔⵠⲆⵠⲆ];
        };
        this.ΔⵠᐃΔⲆⲆᐃΔΔ = function () {
            return this.keys[this.ⲆΔᐃΔᐃΔΔ];
        };
        this.ⲆⲆⵠᐃⵠⲆΔⵠΔ = function () {
            return this.keys[this.ⵠⲆⵠᐃᐃⵠⲆ];
        };
        this.ⵠⲆⲆΔΔΔⲆᐃΔ = function () {
            return this.keys[this.ᐃⲆⲆΔΔᐃⵠ];
        };
        this.ΔⵠⵠΔᐃⲆΔⲆΔ = function () {
            return this.keys[this.ⵠΔᐃΔΔᐃⲆ];
        };
        this.ⲆᐃᐃⵠΔⲆⵠΔᐃ = function () {
            return this.keys[this.ᐃΔΔⲆΔᐃΔ];
        };
    }();
    var yf = new function () {
        this.ΔⲆⲆⵠΔΔᐃ = 0;
        this.ΔⵠⵠⲆΔ = 1;
        this.IDLE = 2;
        this.ᐃΔᐃⵠᐃᐃᐃ = 0;
        this.ᐃⵠⲆᐃⵠᐃᐃⲆΔ = 1;
        this.ⲆΔᐃⲆ = {
            x: 0,
            y: 0
        };
        this.ⲆⵠΔⵠⲆᐃᐃ = 0;
        this.ⲆⵠⵠΔᐃⵠᐃ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.Ⲇᐃⵠᐃ = this.ᐃΔᐃⵠᐃᐃᐃ;
        this.down = function () {
            this.state = this.ΔⲆⲆⵠΔΔᐃ;
        };
        this.up = function () {
            this.state = this.ΔⵠⵠⲆΔ;
        };
        this.ⵠⵠΔ = function () {
            if (this.ⲆΔᐃⲆ.x != this.ⲆⵠΔⵠⲆᐃᐃ || this.ⲆⵠⵠΔᐃⵠᐃ != this.ⲆΔᐃⲆ.y) {
                this.ⲆⵠΔⵠⲆᐃᐃ = this.ⲆΔᐃⲆ.x;
                this.ⲆⵠⵠΔᐃⵠᐃ = this.ⲆΔᐃⲆ.y;
                return j;
            } else {
                return Qk;
            }
        };
    }();
    var wf = 0;
    var Xw = 0;
    var Yw = new function (c, e, f) {
        this.ΔΔ = c;
        this.Ⲇ = e;
        this.ⵠΔᐃΔᐃⲆⵠ = {
            translate: {
                y: 0,
                x: 0
            },
            style: document.getElementById("loading").style,
            ⵠⵠΔ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ⵠΔᐃΔᐃⲆⵠ.style.position = "absolute";
        this.ⵠΔᐃΔᐃⲆⵠ.style.display = "inline-block";
        this.ⵠΔᐃΔᐃⲆⵠ.ⵠⵠΔ();
        this.ᐃⲆⲆⲆⵠ = Qg;
        this.stop = function () {
            this.ᐃⲆⲆⲆⵠ = Qj;
        };
        this.ⵠⵠᐃᐃΔⵠⲆ = {
            total: 1
        };
        var i = this;
        function j() { }
        var k = 0;
        function n(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ᐃⲆⵠⲆⵠ = function () {
            i.ⵠⵠΔ();
            if (++k == 40) {
                i.stop();
                j();
                return;
            }
            aj.setTimeout(i.ᐃⲆⵠⲆⵠ, 33);
        };
        this.ⲆⲆᐃⲆⵠ = function (a) {
            j = a;
            i.ᐃⲆⵠⲆⵠ();
        };
        new Date().getTime();
        Object.keys(ⵠᐃ).length;
        console.log(undefined, ii);
        for (var o in ⵠᐃ) {
            if (n(ⵠᐃ[o]) === 0) {
                0;
            }
        }
        console.log(undefined, _l);
        function p() {
            if (this.ⲆΔⵠⵠⵠⵠᐃ !== 0) {
                return this.ⲆΔⵠⵠⵠⵠᐃ;
            } else {
                this.ⲆΔⵠⵠⵠⵠᐃ = 2;
                this.src = this.ᐃⵠΔΔᐃ;
                return 0;
            }
        }
        function l(a) {
            this.ⲆΔⵠⵠⵠⵠᐃ = 1;
        }
        var g = 0;
        function q() {
            console.log(mh);
            if (g !== 1) {
                g = 1;
                console.log(eo);
                if (kt !== Ts) {
                    Ts();
                }
                kt();
                var a = ΔⲆⵠᐃ.ΔᐃⵠᐃⵠⵠΔ("server");
                if (a !== null) {
                    ᐃⲆΔΔ.ᐃᐃⵠΔⲆΔᐃ = 1;
                    ᐃⲆΔΔ.ⲆⲆᐃⵠΔ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ᐃⲆΔΔ.ⵠⵠΔΔⲆⵠⲆⲆⲆ();
                setTimeout(f, 100);
            }
        }
        function b() {
            let a = function () {
                ᐃⲆΔΔ.ᐃᐃⵠⲆⲆΔΔ(q);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(b, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function d() {
            this.ⵠⲆΔᐃⲆᐃΔ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ⵠⲆΔᐃⲆᐃΔ}`, this);
            if (this.ⵠⲆΔᐃⲆᐃΔ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ⵠⲆΔᐃⲆᐃΔ;
            var b = this.src;
            var c = n(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ᐃᐃⵠᐃΔΔⲆ) {
                    if (b.indexOf(ᐃᐃⵠᐃΔΔⲆ[c]) !== -1) {
                        ⵠᐃ[c] = new Image();
                        ⵠᐃ[c].onload = l;
                        ⵠᐃ[c].onerror = d;
                        ⵠᐃ[c].ⵠⲆΔᐃⲆᐃΔ = a;
                        ⵠᐃ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function s(a) {
            for (var b in ⵠᐃ) {
                var c = ⵠᐃ[b];
                if (typeof c === "string" && n(c) === a) {
                    ⵠᐃ[b] = new Image();
                    ⵠᐃ[b].ⲆΔⵠⵠⵠⵠᐃ = 0;
                    ⵠᐃ[b].ⵠⲆΔᐃⲆᐃΔ = 0;
                    ⵠᐃ[b].onload = l;
                    ⵠᐃ[b].onerror = d;
                    ⵠᐃ[b].ᐃⵠΔⲆᐃⵠⲆ = p;
                    ⵠᐃ[b].ᐃⵠΔΔᐃ = c;
                }
            }
        }
        s(1);
        s(0);
        Sd(1, "l", 20, "#000");
        b();
        nc();
        this.ⵠⵠΔ = function () {
            this.ⵠΔᐃΔᐃⲆⵠ.translate.x = (On - 500) / 2;
            this.ⵠΔᐃΔᐃⲆⵠ.translate.y = (Hn - 150) / 2;
            var a = 2500 / (40 - k + 1) - 48;
            this.ⵠΔᐃΔᐃⲆⵠ.translate.y -= a;
            this.ⵠΔᐃΔᐃⲆⵠ.ⵠⵠΔ();
        };
        this.ⵠΔᐃΔᐃⲆⵠ.ⵠⵠΔ();
        this.Δᐃᐃⵠ = function () {
            try {
                fc();
            } catch (a) { }
            this.ⵠⵠΔ();
        };
    }(jn, Wn, function () {
        zc();
        Vw = new Ow(jn, Wn);
        (df = new tf(jn, Wn)).ⲆΔⵠⵠΔⵠᐃΔᐃ();
        Uw = new Mw(jn, Wn);
        cf = new yw();
        Tw = new zw();
        Yw.ⲆⲆᐃⲆⵠ(function () {
            Yw.ⵠΔᐃΔᐃⲆⵠ.style.display = "none";
            df.ⲆΔΔᐃⵠ();
        });
    });
    function kf() {
        try {
            aj.Widget.adsRefresh();
        } catch (a) { }
    }
    function xf(c, e, f, i, j, k) {
        const a = ~(c & 13700) & 13700 | ~(c & 13700) & c;
        const m = (2531011 + (4462 + e) * 214013) % 4294967296;
        const n = f ^ 7910;
        const h = ~(j & 17535) & (j | 17535);
        const l = (16 << ((a ^ m) >> 16 & 255)) + (24 << ((a ^ m) & 255)) + (0 << ((a ^ m) >> 8 & 255)) + (8 << ((a ^ m) >> 24 & 255));
        const g = (16 << ((l ^ n) >> 8 & 255)) + (8 << ((l ^ n) >> 24 & 255)) + (24 << ((l ^ n) >> 16 & 255)) + (0 << ((l ^ n) & 255));
        const o = ~(g & 12745) & 12745 | ~(g & 12745) & g;
        const b = (0 << ((o ^ h) >> 8 & 255)) + (16 << ((o ^ h) >> 24 & 255)) + (24 << ((o ^ h) >> 16 & 255)) + (8 << ((o ^ h) & 255));
        return ~(b & 42926) & 42926 | ~(b & 42926) & b;
    }
    aj.onbeforeunload = function () {
        if (Vw.ᐃⲆⲆⲆⵠ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Wq();
    (function b(a) {
        aj.requestAnimationFrame(b);
        Xw = (a - wf) / 1000;
        wf = a;
        Xw = Xw > 1 ? 1 : Xw;
        if (Vw.ᐃⲆⲆⲆⵠ) {
            Vw.Δᐃᐃⵠ();
        } else {
            Wn.clearRect(0, 0, On, Hn);
            if (Yw.ᐃⲆⲆⲆⵠ) {
                Yw.Δᐃᐃⵠ();
            } else if (df.ᐃⲆⲆⲆⵠ) {
                df.Δᐃᐃⵠ();
            } else if (Uw.ᐃⲆⲆⲆⵠ) {
                Uw.Δᐃᐃⵠ();
            }
        }
        if (Spectator) {
            if (zf.ⵠⵠⲆⵠΔᐃΔ()) Tw.ⲆⲆⵠ.y -= 50;
            if (zf.ΔⲆⲆⵠⲆΔⵠ()) Tw.ⲆⲆⵠ.y += 50;
            if (zf.ΔⲆⵠΔⲆΔᐃ()) Tw.ⲆⲆⵠ.x -= 50;
            if (zf.ⵠΔⵠⲆⵠⲆⲆ()) Tw.ⲆⲆⵠ.x += 50;
        }
    })(0);
    var Jf = 0;
    function Zw() {
        Bf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        Bf.send();
    }
    var Bf = new XMLHttpRequest();
    function Ef(b, c, d, e) {
        const f = ((b + 18888) * 214013 + 2531011) % 4294967296;
        const g = (2147483587 + (c + 36088) * 2147483629) % 2147483647;
        const a = (d | 44146) & ~(d & 44146);
        const i = (29553 + e) % 65430;
        const j = xf(f, g, a, 0, f);
        const h = Qr(a, i, f, g);
        return (24 << ((j ^ h) & 255)) + (0 << ((j ^ h) >> 8 & 255)) + (8 << ((j ^ h) >> 16 & 255)) + (16 << ((j ^ h) >> 24 & 255));
    }
    Bf.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var Df = "https://token.starve.io/";
    var If = "https://token2.starve.io/";
    var Sf = 0;
    var Qf = 1;
    var _f = 4;
    var Ff = undefined;
    var $w = undefined;
    var _w = fn;
    var ax = 0;
    aj.ΔⵠⵠⲆⵠⲆⵠ = function () {
        ax = 1;
    };
    var bx = {
        ⲆⵠᐃΔⲆΔⲆΔⵠ: "ACCESS_TOKEN"
    };
    var Lf = document.createElement("script");
    Lf.type = "text/javascript";
    Lf.async = true;
    Lf.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Lf.addEventListener("load", function (a) {
        aj.XPayStationWidget.init(bx);
        aj.XPayStationWidget.on("status-done", Kf);
    }, Tn);
    document.getElementsByTagName("head")[0].appendChild(Lf);
    aj.fbAsyncInit = function () {
        fx();
        console.log(undefined);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Of = undefined;
    var cx = undefined;
    function dx() {
        aj.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Of = a).isSignedIn.listen(qf);
            Of.currentUser.listen(Uf);
            if (Of.isSignedIn.get()) {
                Of.signIn();
            }
            Yf();
        });
    }
    function qf(a) { }
    function Uf(a) {
        if ($w === undefined && cx !== Tk && ($w = cx.getAuthResponse().id_token) !== Yk) {
            Ff = Sf;
            _w = cx.getBasicProfile().getId();
            aj.ΔⵠⵠⲆⵠⲆⵠ();
            return;
        }
        if (a !== undefined && a.isSignedIn() === true) {
            _w = (cx = a).id;
            _w = cx.getBasicProfile().getId();
            $w = cx.getAuthResponse().id_token;
            Ff = Sf;
            aj.ΔⵠⵠⲆⵠⲆⵠ();
        }
    }
    function Yf() {
        if (Of) {
            cx = Of.currentUser.get();
        }
    }
    function Kf() {
        var a = new XMLHttpRequest();
        a.open("GET", Df + "claimBread?userid=" + _w);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    df.ⵠⲆⲆⵠΔ = b;
                }
            }
        };
        a.send();
    }
    function Vf(a) {
        if (_w) {
            var b = new XMLHttpRequest();
            b.open("GET", Df + "xsolla?userid=" + _w + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    bx.access_token = b.responseText;
                    aj.XPayStationWidget.init(bx);
                    aj.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function Xf(b, c, d, e) {
        b = pr === b ? df.ᐃⵠᐃΔΔⵠⵠ : b;
        c = mh === c ? df.ᐃⲆⵠⲆΔⲆΔ : c;
        d = Kr === d ? df.ᐃⲆΔⲆᐃⲆⵠ : d;
        e = Yk === e ? df.ⲆⲆΔⲆⵠⵠᐃ : e;
        if (df.ᐃⵠᐃΔΔⵠⵠ !== b || c !== df.ᐃⲆⵠⲆΔⲆΔ || df.ᐃⲆΔⲆᐃⲆⵠ !== d || e !== df.ⲆⲆΔⲆⵠⵠᐃ) {
            df.ᐃⵠᐃΔΔⵠⵠ = b;
            df.ᐃⲆⵠⲆΔⲆΔ = c;
            df.ᐃⲆΔⲆᐃⲆⵠ = d;
            df.ⲆⲆΔⲆⵠⵠᐃ = e;
            if (df.ΔⵠⵠᐃΔⵠⲆ === e) {
                e = "0";
            } else if (df.ⲆᐃⲆⲆⵠΔⲆ === e) {
                e = "1";
            } else if (e === df.ⲆⵠⲆᐃⲆⵠⵠ) {
                e = "2";
            } else if (df.ΔⵠᐃⵠⵠΔⲆ === e) {
                e = "3";
            } else if (df.ᐃⵠⲆΔΔᐃᐃ === e) {
                e = "4";
            } else if (df.ⵠᐃΔᐃΔΔᐃ === e) {
                e = "5";
            }
            if (df.ᐃΔᐃΔⲆⲆⲆ === c) {
                c = "total";
            } else if (c === df.ⵠⲆᐃᐃⵠΔⵠ) {
                c = "normal";
            } else if (c === df.ⲆⲆⵠᐃᐃΔᐃ) {
                c = "zombie";
            } else if (c === df.ΔⲆᐃᐃⲆⵠⵠ) {
                c = "vampire";
            } else if (c === df.ⲆᐃΔΔᐃⲆⲆ) {
                c = "forest";
            }
            if (b === df.ᐃᐃⲆⲆΔᐃΔ) {
                b = "all";
            }
            if (b === df.ᐃⵠⵠⲆᐃᐃΔ) {
                b = "week";
            }
            if (df.ⲆⵠⵠⵠΔⲆⲆ === b) {
                b = "today";
            }
            if (d === df.ⲆⲆᐃⲆⵠⲆⵠ) {
                d = "kill";
            } else if (df.ᐃⲆΔΔⵠᐃΔ === d) {
                d = "score";
            } else if (d === df.ⲆᐃΔᐃⵠⲆⵠ) {
                d = "time";
            }
            var f = new XMLHttpRequest();
            f.open("GET", Df + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + e);
            f.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            f.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && f.responseText !== "0") {
                    for (var a = JSON.parse(f.responseText), b = "", c = 0; c < a.length; c++) {
                        ⵠⲆⵠⵠⵠ = a[c];
                        var d = ⵠⲆⵠⵠⵠ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = aj.decodeURIComponent(aj.escape(aj.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += df.ᐃⲆᐃΔᐃⲆⵠ(ⵠⲆⵠⵠⵠ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ⵠⲆⵠⵠⵠ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ⵠⲆⵠⵠⵠ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ⵠⲆⵠⵠⵠ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            f.send();
        }
    }
    function Zf(a, b) {
        if (df.ΔΔⵠⲆⵠ <= 0) {
            if (b > df.ⵠⲆⲆⵠΔ) {
                df.ⵠᐃᐃⵠ(df.ΔΔⵠⵠᐃ);
            } else {
                df.ΔΔⵠⲆⵠ = 2;
                df.ΔⵠΔΔⲆⲆᐃ = 0;
                df.ΔΔⲆⵠⵠᐃⲆ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", Df + "buySpin?token=" + $w + "&userid=" + _w + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            df.ⲆΔⵠΔᐃΔⵠᐃⵠ(Math.PI * a.rand * 2, a.type, a.id);
                            df.ⵠⲆⲆⵠΔ -= b;
                        } else {
                            df.ΔΔⵠⲆⵠ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function $f(a) {
        var b = new XMLHttpRequest();
        b.open("GET", Df + "setRegion?token=" + $w + "&userid=" + _w + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    df.ⵠᐃᐃⵠ(df.ᐃᐃⲆⲆⲆ);
                } else {
                    df.ⵠᐃᐃⵠ(df.ⵠⵠⵠΔⵠ);
                }
            }
        };
        b.send();
    }
    function ex(a, b) {
        if (b > df.ⵠⲆⲆⵠΔ) {
            df.ⵠᐃᐃⵠ(df.ΔΔⵠⵠᐃ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", Df + "buyKit?token=" + $w + "&userid=" + _w + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    df.ⵠⲆⲆⵠΔ -= b;
                    df.ᐃΔᐃⲆᐃ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function fx() {
        if (aj.FB) {
            aj.FB.init({
                xfbml: true,
                cookie: true,
                version: "v15.0",
                appId: "642017356260407"
            });
        }
        if (_w === undefined) {
            (function () {
                try {
                    if (aj.FB && aj.FB.getUserID()) {
                        _w = aj.FB.getUserID();
                        if (ma === $w) {
                            aj.FB.getLoginStatus(function () {
                                Ff = Qf;
                                $w = aj.FB.getAuthResponse().accessToken;
                                aj.ΔⵠⵠⲆⵠⲆⵠ(_w);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    _w = cx.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function gx() {
        if (df.ⵠⲆⲆⵠΔ >= 300 || df.ᐃⵠΔΔⲆΔⲆ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", Df + "changeNickname?token=" + $w + "&userid=" + _w + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            df.ⵠⲆⲆⵠΔ -= a;
                        }
                        df.ᐃⵠΔΔⲆΔⲆ = 1;
                        df.ⵠᐃᐃⵠ(df.ⵠⵠⲆᐃⲆ);
                    }
                };
                b.send();
            }
        }
    }
    aj.onload = function () {
        aj.gapi.load("auth2", dx);
    };
})();
