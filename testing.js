(function () {
    var $f = 125;
    if ($f === 2) {
        $f = 186;
    }
    var aj = 85;
    if (aj === 13) {
        aj = 158;
    }
    var bj = 110;
    if (bj > 7) {
        bj = 230;
    }
    const cj = window;
    Math.floor(52[52 .ΔΔΔⵠΔᐃⲆ]);
    var n = 29;
    Math.floor(225[225 .ⵠⵠⵠⲆⲆⲆⲆ]);
    if (n === 7) {
        n = 79;
    }
    var dj = 149;
    if (dj == 10) {
        dj = 218;
    }
    Math.floor(181[181 .ΔΔᐃⲆⲆⲆⲆ]);
    var ej = 15;
    if (ej > 13) {
        ej = 213;
    }
    let fj = 138;
    const gj = function (a) {
        let b = "";
        for (let c = 0; c < a.length; c++) {
            b += cj.String.fromCharCode(a[c] ^ fj++ % 255);
        }
        return b;
    };
    Math.floor(242[242 .ᐃⲆΔᐃΔⵠⵠ]);
    const h = 15;
    const l = 17;
    const g = 1;
    const u = -8;
    const b = 4;
    const hj = false;
    const d = 12;
    const ij = undefined;
    const c = -4;
    const m = 13;
    const p = 255;
    const v = 256;
    const f = true;
    var z = cj.console;
    z.info = z.error = z.warn = z.debug = z.ᐃᐃΔⲆⲆΔΔΔᐃ = z.trace = z.time = z.timeEnd = function () { };
    const y = 19;
    const w = 16;
    const C = 18;
    const A = 255;
    const k = 100;
    const x = 9;
    const J = 1 << 1;
    const M = 5;
    const B = 1;
    const D = 20;
    const E = 9;
    const I = 4;
    const P = 2;
    const Q = 6;
    const S = 20;
    var F = cj.Math.acos;
    cj.Math.acos = cj.Math.asin;
    cj.Math.asin = F;
    var R = cj.Math.cos;
    cj.Math.cos = cj.Math.sin;
    cj.Math.sin = R;
    const j = 6;
    const G = 14;
    const L = 15;
    const T = 20;
    const N = 8;
    const O = 2048;
    const q = 11;
    const H = 16;
    const U = 10;
    const W = 7;
    const K = 0;
    const V = 4096;
    const X = 100;
    const Y = 4;
    const Z = 5;
    const _ = 3;
    const ee = 255;
    const ie = 4;
    const ne = 12;
    let ae;
    const oe = hj;
    let se;
    let te;
    let jj;
    let kj = ij;
    const lj = 16;
    const be = 13;
    let de;
    let mj = ij;
    let nj = ij;
    const oj = hj;
    const pe = 18;
    let Ce = "_";
    let pj = [];
    const fe = 17;
    let ze;
    const qj = 1;
    let we;
    let rj;
    let sj = ij;
    let tj = ij;
    const uj = 7;
    let Je = ij;
    const vj = 256;
    const Be = 5;
    let De;
    const wj = 6;
    let Ie;
    const xj = 15;
    let Qe;
    const yj = f;
    const Fe = 16;
    let Re = ij;
    const zj = 19;
    const Ge = 9;
    let Le;
    const Aj = ij;
    const Ne = 12;
    const Oe = 11;
    let qe = ij;
    let Bj = ij;
    const Cj = 20;
    const Ye = 8;
    let Ke;
    let Dj;
    let Ej;
    let Fj;
    let Gj = ij;
    const Hj = 4;
    let ii;
    const Ij = 14;
    const ni = 1;
    const oi = 13;
    const ai = 10;
    let ri;
    const Jj = 8;
    let hi;
    let Kj;
    let Lj;
    let Mj = ij;
    const Nj = 3;
    let di;
    let Oj = Aj;
    const Pj = 0;
    let ci = Aj;
    const Qj = 6;
    let Ci;
    const Rj = 2;
    let fi = Aj;
    const Sj = 13;
    let yi;
    const Tj = 0;
    const Pi = 11;
    let Ai;
    let Uj;
    let Vj = ij;
    const Wj = 11;
    const Mi = 6;
    let Bi;
    let Xj = ij;
    let Yj = ij;
    const Zj = 255;
    let Si = ij;
    let $j = Aj;
    const _j = 100;
    let Fi;
    let ak = Aj;
    const bk = 5;
    const Gi = 14;
    let Li;
    let ck;
    let dk = ij;
    const ek = 17;
    let qi = 0;
    if (!cj.WebAssembly || !cj.WebAssembly.instantiate) {
        ᐃᐃᐃΔΔⲆᐃΔᐃ();
    }
    const fk = {
        Date: Date
    };
    const Ui = hj;
    const Yi = 7;
    const Ki = 0;
    cj.WebAssembly.instantiate(Uint8Array.from(cj.atob(""), function (a) {
        return a.charCodeAt(0);
    }), fk).then(function (a) {
        ae = a.instance;
        se = ae.exports;
        te = se.memory;
        jj = te.buffer;
        kj = se.__pin;
        mj = se.__unpin;
        nj = se.__new;
        de = se.__collect;
        Ce = "_";
        for (let b = 0; b < 31; b++) {
            pj[b] = se[Ce + b];
        }
        ze = se.__rtti_base;
        sj = new Float32Array(jj);
        we = new Float64Array(jj);
        tj = new BigUint64Array(jj);
        rj = new Uint32Array(jj);
        Je = new Uint16Array(jj);
        De = new Uint8Array(jj);
        Ie = new BigInt64Array(jj);
        Qe = new Int32Array(jj);
        Re = new Int16Array(jj);
        Le = new Int8Array(jj);
        yi = pj[12];
        Dj = pj[21];
        dk = pj[14];
        Ke = pj[28];
        Bi = pj[16];
        qe = pj[25];
        Uj = pj[4];
        Yj = pj[2];
        hi = pj[30];
        Vj = pj[5];
        Si = pj[23];
        Oj = pj[11];
        Lj = pj[8];
        fi = pj[9];
        Bj = pj[26];
        Ej = pj[15];
        Gj = pj[20];
        ii = pj[10];
        ci = pj[13];
        ri = pj[22];
        ak = pj[17];
        Li = pj[0];
        Xj = pj[3];
        Kj = pj[18];
        Mj = pj[19];
        $j = pj[7];
        Ci = pj[29];
        Fj = pj[1];
        Fi = pj[27];
        di = pj[6];
        Ai = pj[24];
        qi = 1;
        if (ck) {
            ck();
        }
    });
    const Vi = 14;
    const Xi = 9;
    const Zi = 18;
    const $i = 14;
    const gk = 100;
    const hk = function (a) {
        return rj[(ze + 4 >>> 2) + (a << 1)];
    };
    function ik(a) {
        return 31 - Math.clz32(a >>> 6 & 31);
    }
    const jk = 16;
    const kk = 1;
    const lk = 7;
    const mk = oj;
    function nk(a, b, c) {
        if (c) {
            switch (a) {
                case 2:
                    return sj;
                case 3:
                    return we;
            }
        } else {
            switch (a) {
                case 0:
                    if (b) {
                        return Le;
                    } else {
                        return De;
                    }
                case 1:
                    if (b) {
                        return Re;
                    } else {
                        return Je;
                    }
                case 2:
                    if (b) {
                        return Qe;
                    } else {
                        return rj;
                    }
                case 3:
                    if (b) {
                        return Ie;
                    } else {
                        return tj;
                    }
            }
        }
    }
    const ok = 2;
    const pk = 20;
    const qk = 12;
    const rk = 256;
    const sk = f;
    const tk = 7;
    function uk(b) {
        const d = rj[b + u >>> 2];
        const e = hk(d);
        const f = ik(e);
        let g = e & I ? b : rj[b + 4 >>> 2];
        const h = e & J ? rj[b + 12 >>> 2] : rj[g + c >>> 2] >>> f;
        return nk(f, e & 2048, e & V).subarray(g >>>= f, g + h);
    }
    const vk = ij;
    const wk = 100;
    const xk = 100;
    const yk = 19;
    function zk(a, b) {
        hi(Kr, a, b);
        const c = Af(Lr[0], Lr[1], Lr[0]);
        Af(Lr[1], Lr[0], Lr[1]);
        return ~(c & 54687) & c | ~(c & 54687) & 54687;
    }
    const Ak = 15;
    const Bk = hj;
    const Ck = 4;
    const Dk = 16;
    const Ek = "development";
    const Fk = "production";
    const Gk = 14;
    function Hk(a) {
        this.ⵠⵠⵠⲆ = 2147483648;
        this.a = 1103515245;
        this.c = 12345;
        this.state = a || Math.floor((this.ⵠⵠⵠⲆ - 1) * Math.random());
    }
    Hk.prototype.random = function () {
        this.state = (this.state * this.a + this.c) % this.ⵠⵠⵠⲆ;
        return this.state / this.ⵠⵠⵠⲆ;
    };
    const Ik = 1;
    Hk.prototype.ᐃᐃᐃᐃⲆΔⵠ = function (a) {
        this.state = a;
    };
    ᐃⵠⵠⵠᐃⵠᐃ = 10000;
    ΔΔⲆᐃᐃΔⵠ = [];
    var Jk = new Hk();
    const Kk = 1;
    const Lk = Aj;
    const Mk = 8;
    Jk.ᐃᐃᐃᐃⲆΔⵠ(new Date().getTime());
    for (var Nk = 0; ᐃⵠⵠⵠᐃⵠᐃ > Nk; Nk++) {
        ΔΔⲆᐃᐃΔⵠ.push(Jk.random());
    }
    function Ok(b, c, d, e, f, g) {
        const a = (16 << (b & 255)) + (0 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b >> 24 & 255));
        const i = (f + 35607) % 65530;
        const j = g ^ 56285;
        return ((16746 + (eo(a, (c | 51076) & ~(c & 51076), ~(d & 5276) & 5276 | ~(d & 5276) & d, ((36195 + e) * 214013 + 2531011) % 4294967296) ^ function (b, c, d) {
            const e = (24 << (b >> 16 & 255)) + (0 << (b >> 8 & 255)) + (8 << (b & 255)) + (16 << (b >> 24 & 255));
            const f = ((c + 49423) * 214013 + 2531011) % 4294967296;
            const g = ~(d & 49063) & d | ~(d & 49063) & 49063;
            const a = Ts(e, f, g, e, f, g);
            const h = function (b, c, d, e, f) {
                const i = b ^ 35137;
                const a = (0 << (c >> 24 & 255)) + (24 << (c & 255)) + (16 << (c >> 16 & 255)) + (8 << (c >> 8 & 255));
                const j = d ^ 9294;
                const k = (e + 41606) % 65404;
                const h = ~(f & 29362) & 29362 | ~(f & 29362) & f;
                const l = gt(i, a, j, k, h, i);
                const g = function (b, c, d, e, f, g) {
                    const a = ~(b & 32138) & (b | 32138);
                    const i = (8 << (g >> 8 & 255)) + (16 << (g >> 24 & 255)) + (0 << (g & 255)) + (24 << (g >> 16 & 255));
                    const j = oo(a, ((c + 25284) * 2147483629 + 2147483587) % 2147483647, d ^ 51759, (0 << (e >> 0 & 255)) + (24 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255)), (16 << (f >> 0 & 255)) + (8 << (f >> 8 & 255)) + (24 << (f >> 16 & 255)) + (0 << (f >> 24 & 255)));
                    Gw(i, a);
                    return j ^ 21358;
                }(a, j, k, h, i, a);
                return (24 << ((l ^ g) & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (0 << ((l ^ g) >> 24 & 255));
            }(e, f, g, e, f);
            return ((22475 + (a ^ h)) * 2147483629 + 2147483587) % 2147483647;
        }(i, j, a))) * 1664525 + 1013904223) % 4294967296;
    }
    const Pk = 10;
    function Qk(b, c, d, e) {
        const f = ~(b & 59259) & b | ~(b & 59259) & 59259;
        const i = ~(c & 56097) & c | ~(c & 56097) & 56097;
        const a = ((43315 + d) * 1664525 + 1013904223) % 4294967296;
        const j = (8 << (e >> 24 & 255)) + (32 << (e >> 32 & 255)) + (24 << (e >> 8 & 255)) + (16 << (e >> 16 & 255));
        const k = function (c, e, f, i, j, k) {
            const a = c ^ 10715;
            const m = (24 << (e >> 16 & 255)) + (16 << (e >> 32 & 255)) + (32 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
            const n = (8 << (f >> 16 & 255)) + (32 << (f >> 24 & 255)) + (16 << (f >> 8 & 255)) + (24 << (f >> 32 & 255));
            const h = i ^ 40782;
            const l = j ^ 41301;
            const g = ~(k & 12091) & (k | 12091);
            const o = on(a, m, n, h, l, g);
            on(a, m, n, h, l, g);
            fn(a, m, n, h, l);
            const b = (o | 3006) & ~(o & 3006);
            return ~(b & 24460) & (b | 24460);
        }(f, i, a, j, f, i);
        const h = En(a, j, f, i, a);
        on(j, f, i, a, j, f);
        const l = (1013904223 + (26191 + (k ^ h)) * 1664525) % 4294967296;
        return (l | 38630) & ~(l & 38630);
    }
    function Rk(b, c, d, e, f) {
        const g = (b + 42869) % 65363;
        const a = ~(c & 35536) & (c | 35536);
        const i = (d + 29497) % 65366;
        const j = f ^ 54380;
        return ((30183 + (Cw(g, a, i, e ^ 41139) ^ dr(j, g, a, i))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Sk(c, e, f, i, j, k) {
        const a = ((39488 + c) * 214013 + 2531011) % 4294967296;
        const m = ~(e & 49976) & e | ~(e & 49976) & 49976;
        const n = ~(f & 35856) & f | ~(f & 35856) & 35856;
        const h = i ^ 52219;
        const l = (j + 3575) % 65503;
        const g = ~(k & 6932) & k | ~(k & 6932) & 6932;
        const o = yn(a, m, n, h, l);
        const b = function (c, d, e, f, i, j) {
            const a = c ^ 30142;
            const k = (d + 63025) % 65493;
            const m = e ^ 30777;
            const h = ((45939 + f) * 22695477 + 1) % 4294967296;
            const l = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 8 & 255));
            const g = (j | 45652) & ~(j & 45652);
            const n = yn(a, k, m, h, l);
            Vk(g, a, k, m, h);
            mn(l, g, a, k, m, h);
            return n ^ 60048;
        }(g, a, m, n, h, l);
        dn(g, a, m, n, h, l);
        const d = (1013904223 + (60709 + (o ^ b)) * 1664525) % 4294967296;
        return ~(d & 42138) & d | ~(d & 42138) & 42138;
    }
    function Tk(a, b, c) {
        Yj(Kr, a, b, c);
        const d = function (b, c, d, e, f, g) {
            ii(Kr, b, c, d, e, f, g);
            const a = function (b, c, d, e) {
                Fj(Kr, b, c, d, e);
                const f = Fr(Lr[0], Lr[1], Lr[2], Lr[3], Lr[0]);
                const g = Nv(Lr[1], Lr[2], Lr[3], Lr[0]);
                return ((129 + (f ^ g)) * 75 + 74) % 65537;
            }(Lr[0], Lr[1], Lr[2], Lr[3]);
            const h = ht(Lr[4], Lr[5], Lr[0], Lr[1], Lr[2]);
            return (24 << ((a ^ h) & 255)) + (8 << ((a ^ h) >> 16 & 255)) + (16 << ((a ^ h) >> 24 & 255)) + (0 << ((a ^ h) >> 8 & 255));
        }(Lr[0], Lr[1], Lr[2], Lr[0], Lr[1], Lr[2]);
        Fr(Lr[0], Lr[1], Lr[2], Lr[0], Lr[1]);
        return ~(d & 24003) & (d | 24003);
    }
    const Uk = 4;
    function Vk(c, d, e, f, i) {
        const j = ((c + 14772) * 2147483629 + 2147483587) % 2147483647;
        const a = d ^ 63080;
        const k = ((e + 60304) * 22695477 + 1) % 4294967296;
        const m = ~(f & 5467) & 5467 | ~(f & 5467) & f;
        const h = (i | 40165) & ~(i & 40165);
        const l = function (b, c, d, e) {
            const f = (b | 57611) & ~(b & 57611);
            const i = ((c + 56889) * 1664525 + 1013904223) % 4294967296;
            const a = d ^ 62842;
            const j = ~(e & 1179) & e | ~(e & 1179) & 1179;
            const k = bq(f, i, a, j);
            const h = Tn(f, i, a, j);
            Qk(f, i, a, j);
            const l = (24 << ((k ^ h) >> 24 & 255)) + (8 << ((k ^ h) >> 16 & 255)) + (16 << ((k ^ h) >> 32 & 255)) + (32 << ((k ^ h) >> 8 & 255));
            return ~(l & 63304) & (l | 63304);
        }(j, a, k, m);
        const g = En(h, j, a, k, m);
        const n = Gn(h, j, a, k, m, h);
        return ((28765 + ((16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 32 & 255)) + (32 << ((l ^ g) >> 8 & 255)) ^ n)) * 1664525 + 1013904223) % 4294967296;
    }
    const Wk = 6;
    const Xk = 5;
    const Yk = 11;
    const Zk = 0;
    const $k = 3;
    const _k = 256;
    function aq(c, d, e, f, i) {
        const j = (12345 + (23101 + c) * 1103515245) % 2147483648;
        const a = d ^ 58614;
        const k = ((e + 45267) * 214013 + 2531011) % 4294967296;
        const m = f ^ 40810;
        const h = (24 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)) + (16 << (i >> 16 & 255));
        const l = Sn(j, a);
        const g = Qk(k, m, h, j);
        (function (b, c, d, e) {
            const f = (b + 34282) % 65336;
            const i = ~(c & 45181) & 45181 | ~(c & 45181) & c;
            const a = (16 << (d >> 8 & 255)) + (32 << (d >> 24 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 16 & 255));
            const j = ~(e & 25475) & 25475 | ~(e & 25475) & e;
            const k = function (a, b) {
                const c = ~(a & 41406) & a | ~(a & 41406) & 41406;
                const d = ((b + 17922) * 1103515245 + 12345) % 2147483648;
                const e = Fn(c, d, c);
                rn(d, c, d, c);
                return ((42346 + (e ^ 18573 ^ dq(d, c, d, c, d))) * 2147483629 + 2147483587) % 2147483647;
            }(f, i);
            const h = Mn(a, j, f, i, a);
            Sn(j, f);
            const l = (58498 + (k ^ h)) % 65531;
        })(a, k, m, h);
        const n = (24 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 32 & 255)) + (16 << ((l ^ g) >> 8 & 255));
        return ~(n & 13644) & n | ~(n & 13644) & 13644;
    }
    function bq(b, c, d, e) {
        const f = b ^ 11762;
        const g = ~(c & 19425) & 19425 | ~(c & 19425) & c;
        return ((55182 + (((17757 + ((32 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (24 << ((f ^ g) >> 24 & 255)) + (16 << ((f ^ g) >> 16 & 255)) ^ (32 << (d >> 16 & 255)) + (8 << (d >> 32 & 255)) + (24 << (d >> 24 & 255)) + (16 << (d >> 8 & 255)))) * 1664525 + 1013904223) % 4294967296 ^ (~(e & 259) & 259 | ~(e & 259) & e))) * 1664525 + 1013904223) % 4294967296;
    }
    const cq = 13;
    function dq(b, c, d, e, f) {
        const i = (32 << (b >> 24 & 255)) + (16 << (b >> 8 & 255)) + (24 << (b >> 16 & 255)) + (8 << (b >> 32 & 255));
        const a = (c + 39144) % 65406;
        const j = d ^ 34575;
        const k = ~(e & 37841) & e | ~(e & 37841) & 37841;
        const h = (f | 25975) & ~(f & 25975);
        const l = bq(i, a, j, k);
        Mn(h, i, a, j, k);
        dn(h, i, a, j, k, h);
        return (l | 19326) & ~(l & 19326) ^ 36297;
    }
    function eq(c, e, f, i, j, k) {
        const a = (1013904223 + (c + 28824) * 1664525) % 4294967296;
        const m = (1013904223 + (13210 + e) * 1664525) % 4294967296;
        const n = ~(f & 32165) & 32165 | ~(f & 32165) & f;
        const h = (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 32 & 255));
        const l = (1 + (39199 + j) * 22695477) % 4294967296;
        const g = k ^ 33037;
        const b = function (b, c, d) {
            const e = (12345 + (39051 + b) * 1103515245) % 2147483648;
            const f = (c | 44117) & ~(c & 44117);
            const g = (24 << (d >> 24 & 255)) + (8 << (d >> 16 & 255)) + (16 << (d >> 32 & 255)) + (32 << (d >> 8 & 255));
            const a = bn(e, f, g, e, f);
            const i = Gn(g, e, f, g, e, f);
            const j = function (a, b) {
                const c = (16 << (a >> 8 & 255)) + (32 << (a >> 16 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255));
                const d = (32 << (b >> 32 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255)) + (16 << (b >> 16 & 255));
                const e = mn(c, d, c, d, c, d);
                (function (b, c, d, e, f) {
                    const i = b ^ 64570;
                    const a = (2531011 + (c + 41768) * 214013) % 4294967296;
                    const j = (1013904223 + (d + 43923) * 1664525) % 4294967296;
                    const k = (16 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (24 << (e >> 8 & 255));
                    const h = (f | 21896) & ~(f & 21896);
                    const l = function (a, b) {
                        const c = ((a + 49468) * 1103515245 + 12345) % 2147483648;
                        const d = ((b + 30513) * 214013 + 2531011) % 4294967296;
                        const e = function (b, c, d) {
                            const e = ((5294 + b) * 1664525 + 1013904223) % 4294967296;
                            const f = (c | 55665) & ~(c & 55665);
                            const g = (d + 54633) % 65404;
                            const a = Vk(e, f, g, e, f);
                            (function (c, e, f, i, j, k) {
                                const a = (2531011 + (c + 16955) * 214013) % 4294967296;
                                const m = ((9436 + e) * 1103515245 + 12345) % 2147483648;
                                const n = (f | 14774) & ~(f & 14774);
                                const h = (i | 48802) & ~(i & 48802);
                                const l = ~(j & 24998) & (j | 24998);
                                const g = (8 << (k >> 8 & 255)) + (16 << (k >> 16 & 255)) + (32 << (k >> 32 & 255)) + (24 << (k >> 24 & 255));
                                const o = en(a, m, n, h);
                                const b = Mn(l, g, a, m, n);
                                const d = en(h, l, g, a);
                            })(g, e, f, g, e, f);
                            Tn(g, e, f, g);
                            return ~(a & 43875) & (a | 43875) ^ 15116;
                        }(c, d, c);
                        fn(d, c, d, c, d);
                        bq(c, d, c, d);
                        return (e | 17943) & ~(e & 17943) ^ 21791;
                    }(i, a);
                    rn(j, k, h, i);
                    const g = fq(a, j, k, h, i);
                })(c, d, c, d, c);
                An(d, c);
                return (e | 58283) & ~(e & 58283) ^ 8337;
            }(g, e);
            const h = (16 << ((a ^ i) >> 32 & 255)) + (24 << ((a ^ i) >> 24 & 255)) + (32 << ((a ^ i) >> 8 & 255)) + (8 << ((a ^ i) >> 16 & 255));
            return (8 << ((h ^ j) >> 32 & 255)) + (16 << ((h ^ j) >> 8 & 255)) + (32 << ((h ^ j) >> 16 & 255)) + (24 << ((h ^ j) >> 24 & 255));
        }(a, m, n);
        Tn(h, l, g, a);
        return ((34159 + (b ^ 2959 ^ en(m, n, h, l))) * 1103515245 + 12345) % 2147483648;
    }
    function fq(b, c, d, e, f) {
        const i = (24 << (b >> 24 & 255)) + (32 << (b >> 16 & 255)) + (16 << (b >> 8 & 255)) + (8 << (b >> 32 & 255));
        const a = (12345 + (c + 3024) * 1103515245) % 2147483648;
        const j = (8 << (d >> 8 & 255)) + (32 << (d >> 32 & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255));
        const k = (1 + (e + 41324) * 22695477) % 4294967296;
        const h = (f | 19607) & ~(f & 19607);
        const l = An(i, a);
        Mn(j, k, h, i, a);
        mn(j, k, h, i, a, j);
        const g = ~(l & 49323) & 49323 | ~(l & 49323) & l;
        return ~(g & 46567) & (g | 46567);
    }
    function en(b, c, d, e) {
        const f = ~(b & 33107) & (b | 33107);
        const g = (24 << (c >> 32 & 255)) + (32 << (c >> 8 & 255)) + (8 << (c >> 16 & 255)) + (16 << (c >> 24 & 255));
        const a = ~(d & 32053) & (d | 32053);
        const i = e ^ 12240;
        const j = function (b, c, d, e) {
            const f = (32 << (b >> 32 & 255)) + (16 << (b >> 16 & 255)) + (24 << (b >> 24 & 255)) + (8 << (b >> 8 & 255));
            const i = (1 + (50595 + c) * 22695477) % 4294967296;
            const a = ~(d & 40066) & d | ~(d & 40066) & 40066;
            const j = e ^ 18768;
            const k = yn(f, i, a, j, f);
            const h = aq(i, a, j, f, i);
            const l = un(a, j);
            return ((16767 + ((2531011 + (35287 + (k ^ h)) * 214013) % 4294967296 ^ l)) * 1664525 + 1013904223) % 4294967296;
        }(f, g, a, i);
        Tn(f, g, a, i);
        return (2531011 + (44352 + ((~(j & 64131) & 64131 | ~(j & 64131) & j) ^ yn(f, g, a, i, f))) * 214013) % 4294967296;
    }
    const tn = 18;
    const nn = 100;
    function on(b, c, d, e, f, i) {
        const a = ~(b & 36133) & (b | 36133);
        const j = (c | 13670) & ~(c & 13670);
        const k = (d | 31390) & ~(d & 31390);
        const h = e ^ 64081;
        const l = f ^ 7550;
        const g = (2147483587 + (i + 63950) * 2147483629) % 2147483647;
        return (12345 + (36760 + (((62552 + (In(a, j, k, h, l) ^ Tn(g, a, j, k))) * 2147483629 + 2147483587) % 2147483647 ^ fn(h, l, g, a, j))) * 1103515245) % 2147483648;
    }
    const an = 255;
    function rn(b, c, d, e) {
        const f = (b | 15432) & ~(b & 15432);
        const g = c ^ 12315;
        const a = d ^ 38714;
        const i = e ^ 58084;
        const j = Sk(f, g, a, i, f, g);
        Tn(a, i, f, g);
        return ((34681 + ((~(j & 41134) & j | ~(j & 41134) & 41134) ^ dn(a, i, f, g, a, i))) * 214013 + 2531011) % 4294967296;
    }
    const sn = 8;
    const hn = 17;
    const ln = 20;
    const gn = 2;
    function un(b, c) {
        const d = (2531011 + (b + 62874) * 214013) % 4294967296;
        const e = (24 << (c >> 24 & 255)) + (16 << (c >> 32 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const f = dn(d, e, d, e, d, e);
        const g = dn(d, e, d, e, d, e);
        bq(d, e, d, e);
        const a = (16 << ((f ^ g) >> 32 & 255)) + (8 << ((f ^ g) >> 24 & 255)) + (24 << ((f ^ g) >> 16 & 255)) + (32 << ((f ^ g) >> 8 & 255));
        return ~(a & 55949) & 55949 | ~(a & 55949) & a;
    }
    function bn(b, c, d, e, f) {
        const i = ((9716 + b) * 1664525 + 1013904223) % 4294967296;
        const a = ~(c & 7703) & c | ~(c & 7703) & 7703;
        const j = (d | 31275) & ~(d & 31275);
        const k = ~(e & 25693) & 25693 | ~(e & 25693) & e;
        const h = (8 << (f >> 8 & 255)) + (32 << (f >> 24 & 255)) + (24 << (f >> 16 & 255)) + (16 << (f >> 32 & 255));
        const l = dn(i, a, j, k, h, i);
        const g = bq(a, j, k, h);
        Fn(i, a, j);
        return (24 << ((l ^ g) >> 16 & 255)) + (8 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 32 & 255)) ^ 31710;
    }
    function dn(b, c, d, e, f, g) {
        const a = b ^ 23409;
        const i = c ^ 26380;
        const j = ((f + 33017) * 1103515245 + 12345) % 2147483648;
        const h = g ^ 42490;
        return ((19056 + (bq(a, i, d ^ 53590, e ^ 36633) ^ bq(j, h, a, i))) * 22695477 + 1) % 4294967296;
    }
    const vn = 12;
    function mn(c, e, f, i, j, k) {
        const a = (24 << (c >> 24 & 255)) + (32 << (c >> 16 & 255)) + (16 << (c >> 8 & 255)) + (8 << (c >> 32 & 255));
        const m = (e | 41551) & ~(e & 41551);
        const n = (24 << (f >> 24 & 255)) + (16 << (f >> 32 & 255)) + (8 << (f >> 16 & 255)) + (32 << (f >> 8 & 255));
        const h = ~(i & 32641) & (i | 32641);
        const l = ((j + 35582) * 214013 + 2531011) % 4294967296;
        const g = ~(k & 1090) & (k | 1090);
        const o = Gn(a, m, n, h, l, g);
        dq(a, m, n, h, l);
        bq(g, a, m, n);
        const b = ~(o & 8077) & 8077 | ~(o & 8077) & o;
        return ~(b & 3708) & (b | 3708);
    }
    const cn = 4;
    const pn = 6;
    const Cn = 16;
    function Tn(b, c, d, e) {
        const f = (2147483587 + (37418 + b) * 2147483629) % 2147483647;
        const g = c ^ 57623;
        const a = ~(d & 40280) & d | ~(d & 40280) & 40280;
        const i = ~(e & 24601) & e | ~(e & 24601) & 24601;
        const j = An(f, g);
        An(a, i);
        En(f, g, a, i, f);
        const h = ~(j & 43902) & 43902 | ~(j & 43902) & j;
        return (h | 8862) & ~(h & 8862);
    }
    function fn(b, c, d, e, f) {
        const i = (2147483587 + (b + 64762) * 2147483629) % 2147483647;
        const a = ((18197 + c) * 214013 + 2531011) % 4294967296;
        const j = (2531011 + (22845 + d) * 214013) % 4294967296;
        const k = (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255));
        const h = ~(f & 11999) & f | ~(f & 11999) & 11999;
        const l = dn(i, a, j, k, h, i);
        const g = mn(a, j, k, h, i, a);
        bq(j, k, h, i);
        return (8 << ((l ^ g) >> 24 & 255)) + (16 << ((l ^ g) >> 16 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (32 << ((l ^ g) >> 32 & 255)) ^ 35444;
    }
    const zn = 2;
    function yn(b, c, d, e, f) {
        const i = b ^ 62008;
        const a = (24 << (c >> 32 & 255)) + (8 << (c >> 16 & 255)) + (32 << (c >> 8 & 255)) + (16 << (c >> 24 & 255));
        const j = ((d + 46531) * 22695477 + 1) % 4294967296;
        const k = ~(e & 1884) & 1884 | ~(e & 1884) & e;
        const h = ~(f & 55588) & 55588 | ~(f & 55588) & f;
        const l = Vk(i, a, j, k, h);
        Gn(i, a, j, k, h, i);
        return ((3037 + (l ^ 57467 ^ En(a, j, k, h, i))) * 1664525 + 1013904223) % 4294967296;
    }
    const wn = 14;
    const Pn = 9;
    function An(a, b) {
        const c = ((a + 44664) * 1664525 + 1013904223) % 4294967296;
        const d = b ^ 53080;
        return (1 + (57525 + ((17769 + (In(c, d, c, d, c) ^ Mn(d, c, d, c, d))) % 65357 ^ bq(c, d, c, d))) * 22695477) % 4294967296;
    }
    const kn = 1;
    const xn = 15;
    const Jn = sk;
    function Mn(b, c, d, e, f) {
        const i = ~(b & 42203) & b | ~(b & 42203) & 42203;
        const a = c ^ 50118;
        const j = d ^ 41620;
        const k = ((e + 34240) * 2147483629 + 2147483587) % 2147483647;
        const h = (32 << (f >> 16 & 255)) + (16 << (f >> 8 & 255)) + (8 << (f >> 32 & 255)) + (24 << (f >> 24 & 255));
        const l = Gn(i, a, j, k, h, i);
        Gn(a, j, k, h, i, a);
        return (2531011 + (53616 + ((l | 43477) & ~(l & 43477) ^ bq(j, k, h, i))) * 214013) % 4294967296;
    }
    const Bn = 1;
    const Dn = 13;
    function En(c, d, e, f, i) {
        const j = ((c + 49173) * 1103515245 + 12345) % 2147483648;
        const a = (d + 52922) % 65337;
        const k = e ^ 25250;
        const m = ~(f & 10903) & 10903 | ~(f & 10903) & f;
        const h = ~(i & 33814) & 33814 | ~(i & 33814) & i;
        const l = dq(j, a, k, m, h);
        const g = Sn(j, a);
        dq(k, m, h, j, a);
        const n = (1 + (19675 + (l ^ g)) * 22695477) % 4294967296;
        return ~(n & 7922) & n | ~(n & 7922) & 7922;
    }
    function In(c, d, e, f, i) {
        const j = (16 << (c >> 32 & 255)) + (24 << (c >> 24 & 255)) + (8 << (c >> 8 & 255)) + (32 << (c >> 16 & 255));
        const a = d ^ 55978;
        const k = ((e + 2934) * 1664525 + 1013904223) % 4294967296;
        const m = ~(f & 30642) & (f | 30642);
        const h = (8 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)) + (16 << (i >> 24 & 255)) + (32 << (i >> 16 & 255));
        const l = Mn(j, a, k, m, h);
        const g = fn(j, a, k, m, h);
        bq(j, a, k, m);
        const n = (16 << ((l ^ g) >> 32 & 255)) + (24 << ((l ^ g) >> 8 & 255)) + (8 << ((l ^ g) >> 24 & 255)) + (32 << ((l ^ g) >> 16 & 255));
        return ~(n & 23686) & (n | 23686);
    }
    function Sn(b, c) {
        const d = b ^ 24508;
        const e = (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 32 & 255)) + (8 << (c >> 24 & 255));
        const f = fq(d, e, d, e, d);
        const g = In(e, d, e, d, e);
        bn(d, e, d, e, d);
        const a = ((11269 + (f ^ g)) * 2147483629 + 2147483587) % 2147483647;
        return ~(a & 40927) & 40927 | ~(a & 40927) & a;
    }
    const Qn = 7;
    const _n = yj;
    function Fn(b, c, d) {
        const e = b ^ 23323;
        const f = (2531011 + (61713 + c) * 214013) % 4294967296;
        const g = (d | 24198) & ~(d & 24198);
        const a = fq(e, f, g, e, f);
        const h = fq(g, e, f, g, e);
        fq(f, g, e, f, g);
        return (16 << ((a ^ h) >> 32 & 255)) + (8 << ((a ^ h) >> 8 & 255)) + (24 << ((a ^ h) >> 24 & 255)) + (32 << ((a ^ h) >> 16 & 255)) ^ 31181;
    }
    const Rn = 0;
    const jn = 255;
    function Gn(b, c, d, e, f, i) {
        const a = d ^ 8102;
        const j = (24 << (e >> 16 & 255)) + (32 << (e >> 32 & 255)) + (8 << (e >> 24 & 255)) + (16 << (e >> 8 & 255));
        const k = ~(f & 29687) & 29687 | ~(f & 29687) & f;
        const h = (1 + (62237 + i) * 22695477) % 4294967296;
        const l = un((b + 52483) % 65496, (16 << (c >> 16 & 255)) + (24 << (c >> 8 & 255)) + (32 << (c >> 24 & 255)) + (8 << (c >> 32 & 255)));
        const g = un(a, j);
        un(k, h);
        return (45290 + (l ^ g)) % 65334 ^ 55575;
    }
    ΔᐃⲆᐃ = {
        ᐃΔᐃΔΔⲆᐃ: () => new Promise((a, b) => {
            cj.grecaptcha.ready(function () {
                cj.grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
                    action: "validate_recaptcha"
                }).then(function (b) {
                    a(b);
                }).catch(c => {
                    if (Wv) {
                        a(0);
                    } else {
                        console.log(Aj);
                        b(c);
                    }
                });
            });
        }),
        ᐃⲆⵠΔΔᐃᐃᐃΔ: function (a) {
            cj.open(a, "_blank").focus();
        },
        ⵠⲆΔⲆΔᐃᐃ: function (a) {
            cj.open(a, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
        },
        ΔⵠᐃᐃⲆΔΔ: function (a, b) {
            for (var c in a) {
                if (a[c] != b[c]) {
                    return false;
                }
            }
            return _n;
        },
        ⲆΔⲆᐃⲆⲆᐃΔⵠ: function (a, b) {
            if (a.length != b.length) {
                return Ui;
            }
            for (var c = 0; c < a.length; c++) {
                if (typeof a == "object") {
                    if (!this.ΔⵠᐃᐃⲆΔΔ(a[c], b[c])) {
                        return hj;
                    }
                } else if (a[c] != b[c]) {
                    return hj;
                }
            }
            return sk;
        },
        ⲆΔᐃⵠⵠⵠⲆ: function (a, b) {
            b.x = a.x;
            b.y = a.y;
        },
        ᐃⲆᐃⵠᐃΔᐃ: function (a, b) {
            return {
                x: a.x - b.x,
                y: a.y - b.y
            };
        },
        ᐃⵠⲆᐃⵠΔΔᐃΔ: function (a, b) {
            a.x *= b;
            a.y *= b;
        },
        ΔΔᐃⲆⵠⵠⵠ: function (a, b) {
            return a.x * b.x + a.y * b.y;
        },
        ΔΔⵠⲆⵠⲆⲆ: function (a) {
            return Math.sqrt(a.x * a.x + a.y * a.y);
        },
        sign: function (a) {
            if (a < 0) {
                return -1;
            } else {
                return 1;
            }
        },
        ⲆⵠᐃⵠΔᐃⲆ: function (a, b) {
            return a.x * b.y - a.y * b.x;
        },
        ΔᐃⵠⵠⲆⵠΔ: function (b, c, d, e) {
            var f = e - c;
            var g = d - b;
            return Math.atan2(f, g);
        },
        ΔⵠⵠⲆⵠⵠⲆ: function (a, b) {
            return Math.asin(this.ΔΔᐃⲆⵠⵠⵠ(a, b) / (this.ΔΔⵠⲆⵠⲆⲆ(a) * this.ΔΔⵠⲆⵠⲆⲆ(b))) * this.sign(this.ⲆⵠᐃⵠΔᐃⲆ(a, b));
        },
        ᐃⵠΔᐃⲆⲆⲆ: function (a) {
            ΔᐃᐃΔᐃΔᐃ = location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var b = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(ΔᐃᐃΔᐃΔᐃ);
            if (b === null) {
                return null;
            } else {
                return b[1];
            }
        },
        ΔⵠⵠⲆᐃᐃᐃ: function (a, b) {
            var c = Math.PI * 2;
            b = (b % c + c) % c;
            if (Math.abs(a - b) > Math.PI) {
                if (a > b) {
                    return b + c;
                } else {
                    return b - c;
                }
            } else {
                return b;
            }
        },
        ΔⵠⲆΔⵠⲆⵠ: function (a, b) {
            return this.ΔⵠⵠⲆⵠⵠⲆ({
                x: 1,
                y: 0
            }, this.ᐃⲆᐃⵠᐃΔᐃ(a, b));
        },
        ΔΔⵠᐃ: function (a, b) {
            return Math.sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
        },
        ⲆᐃᐃΔⲆᐃⲆ: function (a, b) {
            return {
                x: Math.sin(b) * a,
                y: Math.cos(b) * a
            };
        },
        ΔⵠⵠⲆⵠᐃΔ: function (a, b) {
            a.x += b.x;
            a.y += b.y;
        },
        ΔⵠΔⲆⲆΔⲆ: function (a, b) {
            a.x -= b.x;
            a.y -= b.y;
        },
        ΔⵠⲆΔⵠᐃᐃΔⵠ: function (a, b, c) {
            a.x += b;
            a.y += c;
        },
        ΔⵠᐃΔⲆⵠΔᐃⲆ: function (a, b, c) {
            return {
                x: a.x + b,
                y: a.y + c
            };
        },
        ⲆᐃⲆⲆⵠ: function (a, b, c) {
            a.x += Math.sin(c) * b;
            a.y += Math.cos(c) * b;
        },
        ⲆᐃⵠᐃᐃⲆⵠ: function (a, b) {
            return Math.floor((a - b) / 2);
        },
        ⵠᐃⵠⲆᐃⵠⵠ: function (a, b) {
            return {
                x: (a.x + b.x) / 2,
                y: (a.y + b.y) / 2
            };
        },
        ⵠΔΔΔⵠⵠᐃ: function () {
            if (Math.random() > 0.5) {
                return 1;
            } else {
                return -1;
            }
        },
        ᐃⵠⵠⵠⵠⲆⵠⵠⵠ: function (b, c, d) {
            var e = this.ⵠΔΔΔⵠⵠᐃ();
            var f = this.ⵠΔΔΔⵠⵠᐃ();
            var g = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(b + Math.sin(g) * e * d),
                y: Math.floor(c + Math.cos(g) * f * d)
            };
        },
        ΔⵠᐃⲆⵠᐃᐃⵠⵠ: function (a, b, c, d) {
            this.x = a;
            this.y = b;
            this.w = c;
            this.ΔᐃⲆ = d;
        },
        ⲆⲆᐃᐃⲆᐃⲆⵠΔ: function (a) {
            ⲆⲆΔ = [];
            ⲆⲆΔ.push.apply(ⲆⲆΔ, a);
            var b = [];
            while (ⲆⲆΔ.length > 0) {
                var c = Math.floor(Math.random() * ⲆⲆΔ.length);
                b.push(ⲆⲆΔ[c]);
                ⲆⲆΔ.splice(c, 1);
            }
            return b;
        },
        ᐃᐃⲆᐃΔᐃᐃ: function (a) {
            if (a >= 20000) {
                a = (a - 20000) * 1000;
            } else if (a >= 10000) {
                a = (a - 10000) * 100;
            }
            return a;
        },
        ΔΔⲆΔⵠΔᐃ: function (b) {
            if (typeof b !== "number") {
                return "0";
            }
            if (b >= 10000) {
                var c = Math.floor(Math.log10(b)) - 2;
                var d = Math.max(0, 3 - c);
                var e = Math.floor(b / 1000).toString();
                if (d) {
                    for (var f = (e += "." + (b % 1000 / 1000).toString().substring(2).substring(0, d)).length - 1, g = 0; f > 0 && e[f] == "0"; f--) {
                        g++;
                    }
                    if ((e = e.substring(0, e.length - g))[e.length - 1] == ".") {
                        e = e.substring(0, e.length - 1);
                    }
                }
                return e += "k";
            }
            return b.toString();
        },
        ᐃⲆⲆⵠΔΔⲆ: function (a) {
            return a * (2 - a);
        },
        ᐃⵠⲆⲆⵠⲆⵠ: function (a) {
            return --a * a * a + 1;
        },
        ᐃⵠⲆⲆΔ: function (a) {
            if (a < 0.5) {
                return a * 2 * a;
            } else {
                return (4 - a * 2) * a - 1;
            }
        },
        ⲆⲆⲆΔⵠⵠΔ: function (a) {
            if (a < 0.5) {
                return a * 4 * a * a;
            } else {
                return (a - 1) * (a * 2 - 2) * (a * 2 - 2) + 1;
            }
        },
        ⲆⲆᐃΔΔΔᐃᐃΔ: function (a) {
            if (a < 0.5) {
                return a * 8 * a * a * a;
            } else {
                return 1 - --a * 8 * a * a * a;
            }
        },
        ΔᐃⵠⵠⵠⲆᐃ: function (a) {
            return 1 - --a * a * a * a;
        },
        ⲆⵠⵠΔΔⵠᐃ: function (a) {
            return 1 + --a * a * a * a * a;
        },
        ⵠᐃⲆᐃ: function (b, c, d, e, f, g) {
            this.ΔⲆⵠ = b;
            this.ᐃⵠΔ = c;
            this.max = d;
            this.min = e;
            this.ΔΔᐃⲆᐃΔⵠ = f;
            this.ⲆⵠⵠΔΔΔⵠ = g;
            this.ΔᐃⲆⵠⵠⵠⲆ = 0;
            this.ⲆΔᐃⲆ = function () {
                if (this.ΔⲆⵠ) {
                    if ((a = this.ᐃⵠΔ + cf * this.ΔΔᐃⲆᐃΔⵠ) > this.max) {
                        this.ᐃⵠΔ = this.max;
                        this.ΔⲆⵠ = mk;
                        return true;
                    }
                    this.ᐃⵠΔ = a;
                } else {
                    var a;
                    if ((a = this.ᐃⵠΔ - cf * this.ⲆⵠⵠΔΔΔⵠ) < this.min) {
                        this.ᐃⵠΔ = this.min;
                        this.ΔⲆⵠ = true;
                    } else {
                        this.ᐃⵠΔ = a;
                    }
                }
            };
            return false;
        },
        ΔᐃⲆᐃᐃ: function (b, c, d, e, f, g) {
            this.ⲆΔⲆⲆⲆ = b;
            this.ᐃᐃΔⲆⲆ = c;
            this.ⵠⲆⵠⲆᐃ = d;
            this.ᐃΔΔⲆⲆ = e;
            this.x = f;
            this.ᐃΔᐃⵠᐃ = g;
            this.ⲆᐃΔⵠᐃΔⲆ = function () {
                this.x = this.ⲆᐃΔᐃᐃᐃⵠᐃᐃ;
                this.ᐃᐃΔⲆⲆ = 0;
            };
            this.ⲆΔΔᐃⲆᐃⲆ = function (a) {
                if (a !== this.ᐃΔᐃⵠᐃ) {
                    this.ᐃΔᐃⵠᐃ = a;
                    this.ᐃΔΔⲆⲆ = this.x;
                    this.ᐃᐃΔⲆⲆ = 0;
                }
                if (this.ᐃΔᐃⵠᐃ !== this.x) {
                    this.ᐃᐃΔⲆⲆ += cf;
                    if (this.ᐃᐃΔⲆⲆ > this.ⵠⲆⵠⲆᐃ) {
                        this.x = this.ᐃΔᐃⵠᐃ;
                    } else {
                        var b = this.ⲆΔⲆⲆⲆ(this.ᐃᐃΔⲆⲆ / this.ⵠⲆⵠⲆᐃ);
                        this.x = this.ᐃΔΔⲆⲆ + (this.ᐃΔᐃⵠᐃ - this.ᐃΔΔⲆⲆ) * b;
                    }
                }
            };
        },
        ΔᐃⵠᐃⲆΔΔ: function (b, c, d, e, f, g, a, i, j) {
            this.ⲆΔⲆⲆⲆ = b;
            this.ᐃᐃΔⲆⲆ = c;
            this.ⵠⲆⵠⲆᐃ = d;
            this.ᐃΔΔⲆⲆ = e;
            this.ΔᐃⵠⲆᐃ = f;
            this.x = g;
            this.y = a;
            this.ᐃΔᐃⵠᐃ = i;
            this.ⲆⵠⲆⵠⵠⲆⲆ = j;
            this.ⲆΔΔᐃⲆᐃⲆ = function (a) {
                if (a.x != this.ᐃΔᐃⵠᐃ || a.y != this.ⲆⵠⲆⵠⵠⲆⲆ) {
                    this.ᐃΔᐃⵠᐃ = a.x;
                    this.ⲆⵠⲆⵠⵠⲆⲆ = a.y;
                    this.ᐃΔΔⲆⲆ = this.x;
                    this.ΔᐃⵠⲆᐃ = this.y;
                    this.ᐃᐃΔⲆⲆ = 0;
                }
                if (this.ᐃΔᐃⵠᐃ != this.x || this.ⲆⵠⲆⵠⵠⲆⲆ != this.y) {
                    this.ᐃᐃΔⲆⲆ += cf;
                    if (this.ᐃᐃΔⲆⲆ > this.ⵠⲆⵠⲆᐃ) {
                        this.x = this.ᐃΔᐃⵠᐃ;
                        this.y = this.ⲆⵠⲆⵠⵠⲆⲆ;
                    } else {
                        var b = this.ⲆΔⲆⲆⲆ(this.ᐃᐃΔⲆⲆ / this.ⵠⲆⵠⲆᐃ);
                        this.x = this.ᐃΔΔⲆⲆ + (this.ᐃΔᐃⵠᐃ - this.ᐃΔΔⲆⲆ) * b;
                        this.y = this.ΔᐃⵠⲆᐃ + (this.ⲆⵠⲆⵠⵠⲆⲆ - this.ΔᐃⵠⲆᐃ) * b;
                    }
                }
            };
        },
        ⲆⵠᐃΔΔⲆⲆ: function (a) {
            var b = "";
            for (var c = 0; c < a; c++) {
                b += String.fromCharCode(48 + Math.floor(Math.random() * 74));
            }
            return b;
        },
        ᐃⲆᐃᐃⵠⵠΔ: function (a, b) {
            b ||= location.href;
            a = a.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var c = new RegExp("[\\?&]" + a + "=([^&#]*)").exec(b);
            if (c == null) {
                return null;
            } else {
                return c[1];
            }
        },
        ᐃⲆⵠⲆⲆ: function (a) {
            let b = "";
            const c = a.length;
            for (let d = 0; d < c; d++) {
                b += String.fromCharCode(a[d]);
            }
            return b;
        },
        ⵠᐃⲆᐃΔⲆᐃ: function (a, b) {
            return a.x >= b.x && a.x <= b.x + b.w && a.y >= b.y && a.y <= b.y + b.ΔᐃⲆ || mk;
        },
        ᐃᐃΔᐃⵠᐃⲆ: function (b, c, d, e, f, g, a, h) {
            if (Math.max(b, f) < Math.min(c, g) && Math.max(d, a) < Math.min(e, h)) {
                return 1;
            } else {
                return 0;
            }
        },
        ⲆΔⵠⲆᐃⵠⵠ: function (a, b, c) {
            return (1 - c) * a + c * b;
        },
        ᐃⵠᐃⵠⵠΔⲆ: function (a) {
            return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
        }
    };
    const Ln = Bk;
    const Wn = 1;
    const Nn = ij;
    const On = 256;
    const qn = 5;
    const Hn = 19;
    Math.sign = Math.sign || function (a) {
        if (a === 0) {
            return 0;
        } else if (a > 0) {
            return 1;
        } else {
            return -1;
        }
    };
    const Un = 6;
    const Yn = 16;
    const Kn = 2;
    Math.log10 = Math.log10 || function (a) {
        return Math.log(a) / Math.ᐃᐃⲆᐃⵠⲆⵠⲆΔ;
    };
    const Vn = 12;
    (function (a) {
        var b = false;
        if (typeof ⵠᐃⵠⲆΔᐃᐃ === "function" && ⵠᐃⵠⲆΔᐃᐃ.ᐃⵠⲆⵠⲆΔⵠ) {
            ⵠᐃⵠⲆΔᐃᐃ(a);
            b = true;
        }
        if (typeof ⲆⲆΔⵠᐃΔᐃ === "object") {
            ΔⲆⲆⲆⲆᐃΔᐃᐃ.exports = a();
            b = _n;
        }
        if (!b) {
            var c = cj.ᐃⵠΔᐃ;
            var d = cj.ᐃⵠΔᐃ = a();
            d.ᐃⲆⵠᐃᐃⵠⵠᐃΔ = function () {
                cj.ᐃⵠΔᐃ = c;
                return d;
            };
        }
    })(function () {
        function b() {
            for (var a = 0, b = {}; arguments.length > a; a++) {
                var c = arguments[a];
                for (var d in c) {
                    b[d] = c[d];
                }
            }
            return b;
        }
        return function a(c) {
            function d(e, f, j) {
                var k;
                if (typeof document !== "undefined") {
                    if (arguments.length > 1) {
                        if (typeof (j = b({
                            path: "/"
                        }, d.ΔΔᐃⵠΔⲆΔ, j)).expires === "number") {
                            var m = new Date();
                            m.setMilliseconds(m.getMilliseconds() + j.expires * 86400000);
                            j.expires = m;
                        }
                        try {
                            k = JSON.stringify(f);
                            if (/^[\{\[]/.test(k)) {
                                f = k;
                            }
                        } catch (a) { }
                        f = c.write ? c.write(f, e) : encodeURIComponent(String(f)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape);
                        return document.cookie = [e, "=", f, j.expires ? "; expires=" + j.expires.toUTCString() : "", j.path ? "; path=" + j.path : "", j.domain ? "; domain=" + j.domain : "", j.ⲆⵠΔⲆᐃᐃⵠᐃᐃ ? "; secure" : ""].join("");
                    }
                    if (!e) {
                        k = {};
                    }
                    for (var n = document.cookie ? document.cookie.split("; ") : [], h = /(%[0-9A-Z]{2})+/g, l = 0; n.length > l; l++) {
                        var p = n[l].split("=");
                        var q = p.slice(1).join("=");
                        if (q.charAt(0) === "\"") {
                            q = q.slice(1, -1);
                        }
                        try {
                            var s = p[0].replace(h, decodeURIComponent);
                            q = c.read ? c.read(q, s) : c(q, s) || q.replace(h, decodeURIComponent);
                            if (this.json) {
                                try {
                                    q = JSON.parse(q);
                                } catch (a) { }
                            }
                            if (e === s) {
                                k = q;
                                break;
                            }
                            if (!e) {
                                k[s] = q;
                            }
                        } catch (a) { }
                    }
                    return k;
                }
            }
            d.set = d;
            d.get = function (a) {
                return d.call(d, a);
            };
            d.ⵠⵠⲆⲆⵠᐃΔⵠⲆ = function () {
                return d.apply({
                    json: true
                }, [].slice.call(arguments));
            };
            d.ΔΔᐃⵠΔⲆΔ = {};
            d.remove = function (a, c) {
                d(a, "", b(c, {
                    expires: -1
                }));
            };
            d.ᐃΔⵠⵠⲆΔⵠⵠⵠ = a;
            return d;
        }(function () { });
    });
    const Xn = 17;
    const Zn = 3;
    const $n = 7;
    function eo(b, c, d, e) {
        const f = (d | 65069) & ~(d & 65069);
        const g = ~(e & 2450) & (e | 2450);
        const a = Rs((47128 + b) % 65524, c ^ 18642);
        (function (a, b) {
            const c = (1013904223 + (a + 22494) * 1664525) % 4294967296;
            const d = (8 << (b >> 16 & 255)) + (0 << (b >> 24 & 255)) + (24 << (b >> 0 & 255)) + (16 << (b >> 8 & 255));
            const e = Ts(c, d, c, d, c, d);
            (function (b, c, d, e, f) {
                const i = b ^ 46660;
                const a = (c | 38268) & ~(c & 38268);
                const j = (d + 9561) % 65458;
                const k = (1 + (e + 15800) * 22695477) % 4294967296;
                const h = (f | 15396) & ~(f & 15396);
                const l = ef(i, a, j, k, h);
                const g = function (b, c, d, e, f) {
                    const i = ((b + 10592) * 1664525 + 1013904223) % 4294967296;
                    const a = c ^ 6680;
                    const j = ~(d & 43173) & 43173 | ~(d & 43173) & d;
                    const k = ((20618 + e) * 2147483629 + 2147483587) % 2147483647;
                    const h = (12345 + (62839 + f) * 1103515245) % 2147483648;
                    const l = wf(i, a, j, k, h);
                    (function (b, c, d, e, f) {
                        const g = (16 << (b >> 24 & 255)) + (0 << (b & 255)) + (8 << (b >> 16 & 255)) + (24 << (b >> 8 & 255));
                        const a = ~(c & 39473) & (c | 39473);
                        const i = (d | 40312) & ~(d & 40312);
                        const j = (16 << (f >> 24 & 255)) + (0 << (f >> 8 & 255)) + (8 << (f & 255)) + (24 << (f >> 16 & 255));
                        const h = af(g, a, i, ~(e & 61769) & 61769 | ~(e & 61769) & e);
                        (function (b, c, d, e) {
                            const f = ((b + 22047) * 214013 + 2531011) % 4294967296;
                            const g = ~(c & 8462) & 8462 | ~(c & 8462) & c;
                            const a = ((15740 + d) * 2147483629 + 2147483587) % 2147483647;
                            const i = (1013904223 + (e + 49415) * 1664525) % 4294967296;
                            const j = gr(f, g, a, i);
                            const h = Iw(f, g, a, i, f, g);
                        })(j, g, a, i);
                    })(i, a, j, k, h);
                    return l ^ 22645;
                }(i, a, j, k, h);
            })(c, d, c, d, c);
        })(f, g);
        return a ^ 36202;
    }
    const io = yj;
    const to = 100;
    function no(b, c, d, e, f) {
        const i = ~(b & 8915) & (b | 8915);
        const a = ((c + 45384) * 1103515245 + 12345) % 2147483648;
        const j = (1 + (36810 + d) * 22695477) % 4294967296;
        const k = (8 << (e >> 16 & 255)) + (0 << (e >> 24 & 255)) + (24 << (e & 255)) + (16 << (e >> 8 & 255));
        const h = (2531011 + (f + 27559) * 214013) % 4294967296;
        const l = Rs(i, a);
        (function (b, c, d, e, f, i) {
            const a = ~(b & 30234) & (b | 30234);
            const j = ~(c & 9612) & 9612 | ~(c & 9612) & c;
            const k = ((d + 6819) * 1103515245 + 12345) % 2147483648;
            const h = (f | 44236) & ~(f & 44236);
            const l = (0 << (i >> 8 & 255)) + (16 << (i >> 16 & 255)) + (8 << (i >> 24 & 255)) + (24 << (i & 255));
            const g = Cw(a, j, k, ((e + 53913) * 1103515245 + 12345) % 2147483648);
            (function (b, c, d, e, f) {
                const i = (b + 57456) % 65343;
                const a = (39620 + c) % 65429;
                const j = ~(d & 10683) & 10683 | ~(d & 10683) & d;
                const k = ~(e & 16156) & e | ~(e & 16156) & 16156;
                const h = (55109 + f) % 65308;
                const l = Xs(i, a, j, k, h, i);
                af(a, j, k, h);
            })(h, l, a, j, k);
        })(j, k, h, i, a, j);
        return l ^ 36186;
    }
    function oo(b, c, d, e, f) {
        const i = (b | 17544) & ~(b & 17544);
        const a = (c | 43120) & ~(c & 43120);
        const j = d ^ 33499;
        const k = ((63620 + e) * 22695477 + 1) % 4294967296;
        const h = f ^ 23335;
        const l = gt(i, a, j, k, h, i);
        Cw(a, j, k, h);
        return l ^ 31226;
    }
    var ao = document.getElementById("game_canvas");
    const ro = 10;
    const so = 4;
    const ho = 14;
    var lo = ao.getContext("2d");
    const go = 15;
    var uo = ao.width;
    const gq = 1;
    var vo = ao.height;
    var hq = ao.width / 2;
    var iq = ao.height / 2;
    var jq = {
        x: hq,
        y: iq
    };
    const kq = 11;
    const To = 0;
    var fo = 1;
    var lq = 1;
    const mq = 256;
    var wo = -1;
    const nq = 8;
    const Ao = 18;
    const ko = 20;
    var xo = "J" + ca;
    const oq = 7;
    var Mo = "S" + La;
    const pq = 19;
    var Do = cj;
    const Eo = 18;
    const Io = yj;
    const So = 14;
    const Qo = 4;
    var _o;
    var qq;
    var rq = (uq = "O") + "N";
    const sq = 11;
    const Go = ij;
    const Lo = 6;
    var Wo;
    var tq = Do;
    const Oo = Nn;
    Mo = "N";
    var qo = "J";
    var uq = "O" + ca;
    var vq = tq;
    const Yo = 2;
    var Ko;
    const wq = oe;
    var Xo = vq;
    rq = "N" + undefined;
    const Zo = 3;
    const $o = 9;
    const ea = 255;
    var ia = Xo;
    const ta = 6;
    const na = 20;
    const oa = 100;
    var aa;
    const xq = 13;
    const sa = 17;
    const ha = 6;
    var la;
    const yq = 5;
    var ba;
    var zq = ia;
    const va = 7;
    const ma = 16;
    var ca;
    var Aq;
    var Bq = zq;
    const Ta = 1;
    var fa = Bq;
    const Cq = Go;
    qo = "O";
    const ya = 19;
    const wa = 256;
    const Pa = 15;
    const Aa = 12;
    const ka = 4;
    const xa = 100;
    const Ja = 19;
    const Ma = 8;
    const Ba = 11;
    const Da = 10;
    const Ea = 0;
    const Ia = 18;
    var Sa;
    const Dq = 2;
    var _a = fa = Bq;
    const Fa = 14;
    var Ra;
    var Eq = _a;
    const Ga = 3;
    var La = "J" + (Sa = "S");
    ao.oncontextmenu = function () {
        return Ln;
    };
    const Wa = io;
    const Na = 13;
    const Oa = 10;
    const qa = 15;
    const Ha = 6;
    const Ua = 1;
    function Ya(a) {
        var b = new Image();
        b.src = a.toDataURL("image/png");
        b.width = a.width;
        b.height = a.height;
        b.ᐃΔⵠⵠⲆΔΔ = 1;
        return b;
    }
    xo = "J";
    const Fq = 16;
    qq = La + (qo += xo = Mo);
    const Va = 100;
    const Xa = 14;
    const Za = 7;
    const $a = 1;
    uq = rq;
    const Gq = oj;
    rq = ca;
    ca = La;
    const Hq = Cq;
    const Iq = 255;
    const Jq = 20;
    const Kq = Oo;
    uq = La;
    Ko = aa = La + qo;
    Mo = qo + xo;
    const Lq = 11;
    const Mq = 1;
    la = _o = qq;
    const Nq = 256;
    uq = La + qo;
    ba = qq;
    const Oq = io;
    rq = La + qo;
    Aq = Wo = _o;
    const Pq = 9;
    const Qq = 8;
    qo = ca = La;
    const Rq = 0;
    const Sq = 20;
    Sa = qq;
    Ra = _o;
    const Tq = 17;
    xo = uq;
    const Uq = 17;
    const Vq = 2;
    var Wq = cj.devicePixelRatio || 1;
    var Xq = lo.ᐃⵠᐃⵠⲆⲆⵠΔⲆ || lo.ⵠⲆⲆⲆⵠΔⵠΔᐃ || lo.ⵠᐃⵠⲆΔⲆⵠⲆⵠ || lo.ᐃⵠΔΔΔᐃⲆⲆⵠ || lo.ΔⵠΔⵠΔΔⲆᐃⵠ || 1;
    function Yq() {
        if (cj.innerWidth != ao.width) {
            ao.width = cj.innerWidth;
            uo = ao.width;
            hq = ao.width / 2;
        }
        if (ao.height != cj.innerHeight) {
            ao.height = cj.innerHeight;
            vo = ao.height;
            iq = ao.height / 2;
        }
        jq = {
            x: hq,
            y: iq
        };
        var a = ao.width;
        var b = ao.height;
        lq = wo === -1 ? Wq / Xq : wo;
        ao.width = a * lq;
        ao.height = b * lq;
        ao.style.width = a + "px";
        ao.style.height = b + "px";
        lo.scale(lq, lq);
        if (Ww) {
            Ww.ᐃⵠΔΔ.ⵠᐃΔᐃᐃⲆΔ = a;
            Ww.ᐃⵠΔΔ.ⵠⲆᐃΔⵠⵠᐃ = b;
        }
        if (_w.ⵠⵠΔⵠⲆ) {
            _w.ⲆΔᐃⲆ();
        } else if (rf.ⵠⵠΔⵠⲆ) {
            rf.ⲆΔᐃⲆ();
        } else if (Yw.ⵠⵠΔⵠⲆ) {
            Yw.ⲆΔᐃⲆ();
        } else if (Xw.ⵠⵠΔⵠⲆ) {
            Xw.ⲆΔᐃⲆ();
        }
    }
    var Zq = document.getElementById("game_body");
    const $q = 5;
    Zq.ondragstart = function () {
        return hj;
    };
    Zq.ondrop = function () {
        return wq;
    };
    Zq.onresize = Yq;
    (function () {
        var b = 0;
        for (var a = ["ms", "moz", "webkit", "o"], c = 0; c < a.length && !cj.requestAnimationFrame; ++c) {
            cj.requestAnimationFrame = cj[a[c] + "RequestAnimationFrame"];
            cj.cancelAnimationFrame = cj[a[c] + "CancelAnimationFrame"] || cj[a[c] + "CancelRequestAnimationFrame"];
        }
        cj.requestAnimationFrame ||= function (c, d) {
            var e = new Date().getTime();
            var f = Math.max(0, 16 - (e - b));
            var a = cj.setTimeout(function () {
                c(e + f);
            }, f);
            b = e + f;
            return a;
        };
        if (!cj.cancelAnimationFrame) {
            cj.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            };
        }
    })();
    const _q = 19;
    const ar = 5;
    const cr = mk;
    function dr(b, c, d, e) {
        const f = b ^ 32156;
        const g = (c | 42802) & ~(c & 42802);
        const a = d ^ 26896;
        const h = ~(e & 39839) & (e | 39839);
        return (1013904223 + (41948 + (Mw(f, g, a, h) ^ Mw(f, g, a, h))) * 1664525) % 4294967296;
    }
    const er = 11;
    const fr = 6;
    function gr(b, c, d, e) {
        const f = (b | 37241) & ~(b & 37241);
        const g = ((c + 34586) * 2147483629 + 2147483587) % 2147483647;
        const a = (16 << (d >> 16 & 255)) + (24 << (d & 255)) + (0 << (d >> 8 & 255)) + (8 << (d >> 24 & 255));
        const h = ~(e & 64361) & e | ~(e & 64361) & 64361;
        return (1013904223 + (38483 + (dr(f, g, a, h) ^ function (b, c, d, e, f) {
            const g = (24 << (b >> 16 & 255)) + (16 << (b >> 24 & 255)) + (0 << (b & 255)) + (8 << (b >> 8 & 255));
            const a = c ^ 53697;
            const i = ~(d & 26481) & 26481 | ~(d & 26481) & d;
            const j = ~(f & 22412) & 22412 | ~(f & 22412) & f;
            const h = Nw(g, a, i, (0 << (e >> 16 & 255)) + (8 << (e & 255)) + (16 << (e >> 24 & 255)) + (24 << (e >> 8 & 255)));
            af(j, g, a, i);
            return (h | 40825) & ~(h & 40825);
        }(f, g, a, h, f))) * 1664525) % 4294967296;
    }
    var hr = navigator.language || navigator.userLanguage;
    var ir = -new Date().getTimezoneOffset() / 60;
    const kr = 255;
    const lr = 4;
    var mr = "Europe";
    const nr = 3;
    var or = "South America";
    const pr = 18;
    const rr = 11;
    const sr = Aj;
    const jr = 15;
    const tr = _n;
    const ur = 12;
    var vr = mr;
    const wr = 14;
    if (ir >= -2 && ir <= 2) {
        vr = mr;
    } else if (ir > 2 && ir <= 5) {
        vr = "Russia";
    } else if (ir > 5 && ir <= 9) {
        vr = "Asia";
    } else if (ir > 9) {
        vr = "Australia";
    } else if (ir >= -5 && ir < -2) {
        vr = hr === "pt-BR" || hr === "pt-br" || hr === "pt" || hr === "pt-pt" ? or : "North America";
    } else if (ir < -5) {
        vr = hr === "pt-BR" || hr === "pt-br" || hr === "pt" || hr === "pt-pt" ? or : "West America";
    }
    const xr = 6;
    const qr = 19;
    var Hk = {
        ΔᐃⲆⲆⲆᐃᐃ: function (a) {
            var b = 2147483648;
            var c = a || Math.floor(Math.random() * (b - 1));
            this.ⲆⲆⵠⲆⲆ = function (a) {
                c = a || Math.floor(Math.random() * (b - 1));
            };
            this.get = function () {
                return (c = (c * 1103515245 + 12345) % b) / b;
            };
        }
    };
    const yr = 13;
    const zr = 9;
    const Ar = 100;
    const Cr = 11;
    var Dr = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
    function Er(a, b) {
        ak(Kr, a, b);
        const c = function (b, c, d, e) {
            $j(Kr, b, c, d, e);
            const f = jg(Lr[0], Lr[1], Lr[2], Lr[3], Lr[0], Lr[1]);
            const g = jg(Lr[2], Lr[3], Lr[0], Lr[1], Lr[2], Lr[3]);
            return ((141 + (f ^ g)) * 75 + 74) % 65537;
        }(Lr[0], Lr[1], Lr[0], Lr[1]);
        jg(Lr[0], Lr[1], Lr[0], Lr[1], Lr[0], Lr[1]);
        return ~(c & 61278) & (c | 61278);
    }
    function Fr(b, c, d, e, f) {
        Si(Kr, b, c, d, e, f);
        const g = ht(Lr[0], Lr[1], Lr[2], Lr[3], Lr[4]);
        Er(Lr[0], Lr[1]);
        return g ^ 31964;
    }
    const Gr = 10;
    const Hr = 3;
    const Ir = 8;
    const Jr = Wa;
    let Kr;
    let Lr = Kq;
    const Mr = ck;

    /*
      *****************
      *SCRIPT VARIABLE*
      *****************
      */

    (function () {
        function e(t, r, n) {
            function i(a, s) {
                if (!r[a]) {
                    if (!t[a]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(a, !0);
                        if (o) return o(a, !0);
                        var d = Error("Cannot find module '" + a + "'");
                        throw d.code = "MODULE_NOT_FOUND", d
                    }
                    var m = r[a] = {
                        exports: {}
                    };
                    t[a][0].call(m.exports, function (e) {
                        return i(t[a][1][e] || e)
                    }, m, m.exports, e, t, r, n)
                }
                return r[a].exports
            }
            for (var o = "function" == typeof require && require, a = 0; a < n.length; a++) i(n[a]);
            return i
        }
        return e
    })()({
        1: [function (e, t, r) {
            let n = e("worker-timers");
            window.workerTimers = n
        }, {
            "worker-timers": 4
        }],
        2: [function (e, t, r) {
            var n, i;
            n = this, i = function (e) {
                "use strict";
                var t, r, n, i, o = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                    a = new WeakMap,
                    s = (r = (t = a, function (e, r) {
                        return t.set(e, r), r
                    }), n = a, function (e) {
                        var t = n.get(e),
                            i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                        if (!e.has(i)) return r(e, i);
                        if (e.size < 536870912) {
                            for (; e.has(i);) i = Math.floor(1073741824 * Math.random());
                            return r(e, i)
                        }
                        if (e.size > o) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);) i = Math.floor(Math.random() * o);
                        return r(e, i)
                    }),
                    u = (i = s, function (e) {
                        var t = i(e);
                        return e.add(t), t
                    });
                e.addUniqueNumber = u, e.generateUniqueNumber = s
            }, "object" == typeof r && void 0 !== t ? i(r) : "function" == typeof define && define.amd ? define(["exports"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).fastUniqueNumbers = {})
        }, {}],
        3: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r = function e(r) {
                    var n = new Map([
                        [0, function () { }]
                    ]),
                        i = new Map([
                            [0, function () { }]
                        ]),
                        o = new Map,
                        a = new Worker(r);
                    return a.addEventListener("message", function (e) {
                        var t, r = e.data;
                        if (void 0 !== (t = r).method && "call" === t.method) {
                            var a = r.params,
                                s = a.timerId,
                                u = a.timerType;
                            if ("interval" === u) {
                                var d = n.get(s);
                                if ("number" == typeof d) {
                                    var m = o.get(d);
                                    if (void 0 === m || m.timerId !== s || m.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== d) d();
                                else throw Error("The timer is in an undefined state.")
                            } else if ("timeout" === u) {
                                var f = i.get(s);
                                if ("number" == typeof f) {
                                    var c = o.get(f);
                                    if (void 0 === c || c.timerId !== s || c.timerType !== u) throw Error("The timer is in an undefined state.")
                                } else if (void 0 !== f) f(), i["delete"](s);
                                else throw Error("The timer is in an undefined state.")
                            }
                        } else if (null === (l = r).error && "number" == typeof l.id) {
                            var l, v = r.id,
                                p = o.get(v);
                            if (void 0 === p) throw Error("The timer is in an undefined state.");
                            var h = p.timerId,
                                w = p.timerType;
                            o["delete"](v), "interval" === w ? n["delete"](h) : i["delete"](h)
                        } else throw Error(r.error.message)
                    }), {
                        clearInterval: function e(r) {
                            var i = t.generateUniqueNumber(o);
                            o.set(i, {
                                timerId: r,
                                timerType: "interval"
                            }), n.set(r, i), a.postMessage({
                                id: i,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "interval"
                                }
                            })
                        },
                        clearTimeout: function e(r) {
                            var n = t.generateUniqueNumber(o);
                            o.set(n, {
                                timerId: r,
                                timerType: "timeout"
                            }), i.set(r, n), a.postMessage({
                                id: n,
                                method: "clear",
                                params: {
                                    timerId: r,
                                    timerType: "timeout"
                                }
                            })
                        },
                        setInterval: function e(r, i) {
                            var o = t.generateUniqueNumber(n);
                            return n.set(o, function () {
                                r(), "function" == typeof n.get(o) && a.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: i,
                                        now: performance.now(),
                                        timerId: o,
                                        timerType: "interval"
                                    }
                                })
                            }), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: i,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "interval"
                                }
                            }), o
                        },
                        setTimeout: function e(r, n) {
                            var o = t.generateUniqueNumber(i);
                            return i.set(o, r), a.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: n,
                                    now: performance.now(),
                                    timerId: o,
                                    timerType: "timeout"
                                }
                            }), o
                        }
                    }
                };
                e.load = r
            }, "object" == typeof r && void 0 !== t ? i(r, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimersBroker = {}, n.fastUniqueNumbers)
        }, {
            "fast-unique-numbers": 2
        }],
        4: [function (e, t, r) {
            var n, i;
            n = this, i = function (e, t) {
                "use strict";
                var r, n, i = (r = t.load, n = null, function () {
                    if (null !== n) return n;
                    var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                        t = URL.createObjectURL(e);
                    return n = r(t), setTimeout(function () {
                        return URL.revokeObjectURL(t)
                    }), n
                }),
                    o = function e(t) {
                        return i().clearInterval(t)
                    },
                    a = function e(t) {
                        return i().clearTimeout(t)
                    },
                    s = function e(t, r) {
                        return i().setInterval(t, r)
                    },
                    u = function e(t, r) {
                        return i().setTimeout(t, r)
                    };
                e.clearInterval = o, e.clearTimeout = a, e.setInterval = s, e.setTimeout = u
            }, "object" == typeof r && void 0 !== t ? i(r, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], i) : i((n = "undefined" != typeof globalThis ? globalThis : n || self).workerTimers = {}, n.workerTimersBroker)
        }, {
            "worker-timers-broker": 3
        }]
    }, {}, [1]);

    let Settings = {
        AutoSpike: {
            e: false,
            k: "Space",
            m: true,
            p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
        },
    };

    window.Utils = {
        initUI: () => {
            let gui = new guify({
                title: "pew",
                theme: {
                    name: "loux",
                    colors: {
                        panelBackground: "rgb(0,0,0)",
                        componentBackground: "rgb(3, 16, 34)",
                        componentForeground: "rgb(62, 125, 215)",
                        textPrimary: "rgb(0, 255, 255)",
                        textSecondary: "rgb(255,255,255)",
                        textHover: "rgb(43, 16, 159)"
                    },
                    font: {
                        fontFamily: "Baloo Paaji",
                        fontSize: "20px",
                        fontWeight: "1"
                    }
                },
                align: "right",
                width: 550,
                barMode: "none",
                panelMode: "none",
                opacity: .6,
                root: document.body,
                open: false
            });

            gui.Register({
                type: "folder",
                label: "AutoSpike",
                open: false
            });

            gui.Register([{
                type: "button",
                label: "Set AutoSpike Key",
                action: data => {
                    Utils.controls.setKeyBind("AutoSpike")
                }
            }, {
                type: "display",
                label: "AutoSpike Key:",
                object: Settings.AutoSpike,
                property: "k"
            }, {
                type: "checkbox",
                label: "AutoSpike 2",
                object: Settings.AutoSpike,
                property: "m",
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "1",
                object: Settings.AutoSpike.p,
                property: "0",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "2",
                object: Settings.AutoSpike.p,
                property: "1",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "3",
                object: Settings.AutoSpike.p,
                property: "2",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "4",
                object: Settings.AutoSpike.p,
                property: "3",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "5",
                object: Settings.AutoSpike.p,
                property: "4",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "6",
                object: Settings.AutoSpike.p,
                property: "5",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }, {
                type: "select",
                label: "7",
                object: Settings.AutoSpike.p,
                property: "6",
                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                onChange: data => {
                    Utils.saveSettings()
                }
            }], {
                folder: "AutoSpike"
            });
        },
        controls: null,
        controller: class {
            setKeyBind(callback) {
                Settings[callback].k = "Press any key";
                let click = 0;
                document.addEventListener("keydown", function abc(event) {
                    click++;
                    if (click >= 1) {
                        if (event.code == "Escape") {
                            Settings[callback].k = "NONE"
                        } else {
                            Settings[callback].k = event.code
                        }
                        document.removeEventListener("keydown", abc);
                        Utils.saveSettings()
                    }
                })
            }
        },
        saveSettings: () => {
            for (let HACK in Settings) {
                localStorage.setItem(HACK + "loux", JSON.stringify(Settings[HACK]))
            }
        },
        loadSettings: () => {
            for (let HACK in Settings) {
                let data = localStorage.getItem(HACK + "loux");
                if (data) Settings[HACK] = JSON.parse(data)
            }
        },
        LoadHack: () => {
            window.Utils.loadSettings();
            Settings.AutoSpike.e = false;
            window.Utils.controls = new window.Utils.controller;
            let script = document.createElement("script");
            script.onload = function () {
                window.Utils.initUI()
            };
            script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
            document.body.appendChild(script);
            setTimeout(() => {
                let mainFlakes = document.getElementById("snowflakeContainer");
                if (mainFlakes) {
                    mainFlakes.nextElementSibling.remove();
                    mainFlakes.previousElementSibling.remove();
                    for (let i = 0; i < mainFlakes.childNodes.length; i++) {
                        mainFlakes.childNodes[i].remove()
                    }
                    mainFlakes.remove()
                }
            }, 1e4)
        }
    };

    function LouxInterval() {
        if (ⵠΔᐃᐃ.ⵠⵠᐃᐃ && ⵠΔᐃᐃ.ⵠⵠᐃᐃ.readyState === 1 && Ww && Ww.ⵠᐃⲆⲆⲆ) {
            let myPlayer = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            if (myPlayer) {
                if (Settings.AutoSpike.e) {
                    var spikeid;
                    for (let i = 0, SpikeP = Settings.AutoSpike.p; i < SpikeP.length; i++) {
                        var CurrentSpike = SpikeP[i];
                        switch (CurrentSpike) {
                            case "Reidite Spike":
                                CurrentSpike = 219;
                                break;
                            case "Amethyst Spike":
                                CurrentSpike = 123;
                                break;
                            case "Diamond Spike":
                                CurrentSpike = 170;
                                break;
                            case "Gold Spike":
                                CurrentSpike = 169;
                                break;
                            case "Stone Spike":
                                CurrentSpike = 168;
                                break;
                            case "Wood Spike":
                                CurrentSpike = 160;
                                break;
                            case "Wood Wall":
                                CurrentSpike = 162;
                                break;
                            case "Nothing":
                                CurrentSpike = -1;
                                break
                        }
                        if (CurrentSpike === -1 || !Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[CurrentSpike]) continue;
                        spikeid = CurrentSpike;
                        break
                    }
                    if (spikeid) {
                        let PInumb = 2 * Math.PI;
                        let MYPLAYERANGLE = Math.floor((myPlayer.angle + PInumb) % PInumb * 255 / PInumb);
                        if (Settings.AutoSpike.m) {
                            for (let ang = 1; ang < 31; ang++) {
                                ⵠΔᐃᐃ.ⵠⵠᐃᐃ.send(JSON.stringify([23, spikeid, (ang + MYPLAYERANGLE) % 255, 0]));
                                ⵠΔᐃᐃ.ⵠⵠᐃᐃ.send(JSON.stringify([23, spikeid, (MYPLAYERANGLE - ang + 255) % 255, 0]))
                            }
                        }
                        ⵠΔᐃᐃ.ⵠⵠᐃᐃ.send(JSON.stringify([23, spikeid, MYPLAYERANGLE, 0]))
                    }
                }
            }
        }
    }

    /*
    *********
    ***END***
    *********
    */

    ck = function () {
        Kr = kj(qe(13));
        Lr = uk(Kr);
        if (Mr) {
            Mr();
        }

        let MainHackInterval;
        setTimeout(() => {
            MainHackInterval = workerTimers.setInterval(LouxInterval, 80)
        }, 7000);

        setTimeout(() => {
            if (ⵠΔᐃᐃ.ⵠⵠᐃᐃ && ⵠΔᐃᐃ.ⵠⵠᐃᐃ.readyState === 1 && Ww && Ww.ⵠᐃⲆⲆⲆ) {
                let cc = "";
                for (const _ of Array(25).keys()) {
                    cc += (String.fromCharCode(Math.floor(Math.random() * 8000) + 1));
                }

                var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                if (Ww.ΔⵠᐃⲆⲆ) {
                    if (Math.random() > 0.5) {
                        b.text.push(cc.substring(0, 25) + " ..." + "Uuunnnggg");
                    } else {
                        b.text.push("Uuunnnggg" + "... " + a.substring(0, 25));
                    }
                } else {
                    b.text.push(cc);
                }
                ⵠΔᐃᐃ.ⵠⵠᐃᐃ.send(JSON.stringify([17, cc]))
            }
        }, 2000);

        window.Utils.LoadHack();
    };
    var Or = 0;
    var Pr = {
        Ⲇⵠⵠᐃᐃ: ["#133A2B", "#042b30"],
        ⵠΔⵠΔⲆⲆⵠᐃᐃ: ["#EBF2F0", "#136167"],
        ⲆⲆⲆⵠⲆΔⵠ: ["#4EB687", "#187484"],
        ᐃⲆⵠᐃᐃΔᐃ: ["#664516", "#13474C"],
        ΔⵠΔᐃᐃᐃΔ: ["#FCEFBB", "#0F4D48"],
        ΔⵠⲆΔΔΔΔ: ["#C1AA7E", "#0F423D"],
        ⵠᐃⵠΔΔᐃⵠ: ["#594837", "#163A3A"],
        ⵠⵠⲆᐃΔⲆⵠ: ["#A5D6D6", "#539CA0"],
        ΔΔⲆΔⲆ: ["#0B6A84", "#09373F"],
        ΔᐃᐃⲆΔⵠᐃ: ["#2A8B9B", "#0F464C"],
        ᐃΔⲆⵠᐃⲆΔ: ["#A9D6D3", "#115E60"],
        ⲆΔΔΔᐃⵠⲆ: ["#ECF7F9", "#539CA0"],
        ΔⲆⵠᐃᐃⲆⵠ: ["#FFF", "#FFF"],
        ΔⲆⲆᐃⲆⲆⲆ: ["#FFF", "#FFF"],
        ᐃΔⲆΔᐃᐃⲆ: ["#1C9BA4", "#00272F"],
        ΔⲆⲆⵠⲆ: ["#2D2017", "#031C1E"],
        ΔᐃΔ: 0,
        ΔΔⲆ: 1,
        ΔΔⲆⵠⲆᐃⲆⵠⲆ: 2300,
        ⵠΔⲆⵠᐃⲆⲆᐃⲆ: 2290,
        ᐃΔΔΔᐃᐃⲆ: 34,
        ⲆⵠⵠⲆⲆⵠⲆ: 5,
        ⲆᐃᐃⵠΔⵠⲆ: 68,
        ⵠᐃⲆᐃᐃⲆⵠ: 34,
        ⲆΔᐃΔⵠΔᐃ: 5,
        ᐃⲆⵠᐃⲆΔᐃ: 1,
        ᐃⲆⲆⵠᐃⵠⵠ: 0.6,
        ᐃΔⵠΔⵠⲆⵠ: 0.25,
        ᐃⲆⵠⲆᐃⵠⲆ: 50,
        ⵠᐃⵠⲆᐃⵠᐃ: 10,
        ᐃΔⲆᐃᐃⵠⵠ: 75,
        ΔΔⲆᐃᐃΔΔ: 20,
        ⵠΔᐃⵠΔΔⲆ: 5,
        ᐃΔⵠΔᐃ: 0,
        ΔᐃⲆⲆΔ: 1,
        ⵠⲆⵠⵠⵠ: 2,
        ⲆᐃᐃᐃΔ: 3,
        ⲆⲆⲆΔΔ: 4,
        ⲆⲆΔᐃΔ: 5,
        ⵠⲆⵠᐃⵠ: 6,
        ᐃⲆΔΔΔ: 7,
        ⲆⲆᐃⵠⵠ: 8,
        ⵠΔⲆΔⵠ: 9,
        ⵠⵠⲆⲆᐃ: 10,
        ⲆᐃⵠΔΔ: 11,
        ΔΔⵠΔᐃ: 12,
        ⲆᐃΔⵠΔ: 13,
        ⵠᐃΔⵠᐃ: 14,
        ⲆⵠⵠΔΔ: 15,
        ᐃΔⲆⵠΔ: 16,
        ᐃⵠⲆⵠⲆ: 17,
        ⲆⲆⲆᐃⲆ: 18,
        ⲆⲆⲆᐃᐃ: 19,
        ⵠᐃⵠΔⵠ: 20,
        ⵠⲆᐃΔⲆ: 21,
        ⲆΔᐃΔⲆ: 22,
        ⵠΔⵠΔᐃ: 23,
        ⵠΔⵠⵠᐃ: 24,
        ΔΔΔᐃᐃ: 25,
        ⲆᐃⵠᐃⲆ: 26,
        ΔᐃᐃᐃⲆ: 27,
        ΔᐃⲆᐃⵠ: 28,
        ⲆΔⲆⲆ: 29,
        Ⲇⵠᐃⵠᐃ: 30,
        ⲆⲆⵠᐃΔ: 31,
        ΔΔᐃⵠⵠ: 32,
        ⵠⵠⲆⵠⲆ: 33,
        ᐃᐃⵠⲆⲆ: 34,
        ᐃΔⵠⲆΔ: 35,
        ᐃᐃΔᐃⲆ: 36,
        ⵠΔᐃⲆⵠ: 37,
        ΔⵠΔᐃᐃ: 38,
        ΔᐃⲆⵠⵠ: 39,
        ᐃⲆΔⲆⵠ: 40,
        ⲆⲆⵠᐃᐃ: 41,
        ΔᐃⲆΔΔ: 42,
        ⵠᐃⲆΔⵠ: 43,
        ⵠΔⵠᐃΔ: 44,
        ᐃⲆᐃΔΔ: 45,
        ΔⲆΔⵠᐃ: 46,
        ⵠᐃⵠⵠΔ: 47,
        ᐃΔⲆⲆᐃ: 48,
        ΔⵠΔᐃⵠ: 49,
        ᐃⵠΔᐃⲆ: 50,
        ΔΔⲆⵠⲆ: 51,
        Ⲇⵠⵠᐃⵠ: 52,
        ⵠⵠΔᐃΔ: 53,
        ᐃⲆᐃⲆⵠ: 54,
        ⵠⲆΔⲆᐃ: 55,
        ⲆᐃⲆⵠⲆ: 56,
        ⲆᐃΔⵠⵠ: 57,
        ⲆⵠⵠᐃⲆ: 58,
        ΔΔⲆΔΔ: 59,
        ⲆᐃⵠⵠΔ: 60,
        ⲆΔᐃᐃⲆ: 61,
        ΔΔⵠΔⲆ: 62,
        ᐃⵠΔⵠᐃ: 63,
        ⲆᐃⲆⲆΔ: 64,
        ᐃᐃΔΔᐃ: 65,
        ⲆⲆⲆᐃΔ: 66,
        ⲆΔⲆⲆᐃ: 67,
        ΔⵠⲆⲆⵠ: 68,
        ⲆᐃⲆΔⲆ: 69,
        ᐃⲆᐃΔⲆ: 70,
        ᐃΔⲆⵠⵠ: 71,
        ⵠⲆΔΔⲆ: 72,
        ⲆΔᐃΔΔ: 73,
        ΔⵠᐃⲆᐃ: 74,
        ΔᐃⵠⵠΔ: 75,
        ᐃΔΔⵠⵠ: 76,
        ΔΔⵠⲆᐃ: 77,
        ⵠⵠᐃⵠⵠ: 78,
        ᐃΔⲆᐃΔ: 79,
        ΔΔⵠᐃⲆ: 80,
        ⵠΔᐃΔⵠ: 81,
        ᐃΔⲆⲆΔ: 82,
        ⲆⲆⲆΔⲆ: 83,
        ⲆⵠΔⲆⲆ: 84,
        ⲆⲆΔⲆᐃ: 85,
        ⲆΔᐃᐃᐃ: 86,
        ⲆⵠᐃⲆᐃ: 87,
        ⵠⵠⲆⲆⲆ: 88,
        ⲆⲆⲆⵠᐃ: 89,
        ΔⲆⵠⲆᐃ: 90,
        ᐃΔⵠΔⵠ: 91,
        ᐃⲆⲆΔΔ: 92,
        ΔⲆᐃᐃⵠ: 93,
        ⲆᐃⲆᐃⵠ: 94,
        ΔⵠΔᐃⲆ: 95,
        ⵠᐃⵠᐃᐃ: 96,
        ᐃⵠᐃⵠΔ: 97,
        ⵠⲆⲆⲆᐃ: 98,
        ⵠⲆΔⵠⵠ: 99,
        ᐃΔᐃΔᐃΔⵠⲆⲆ: 100,
        ᐃⲆᐃΔᐃ: 101,
        ᐃᐃⵠⵠⲆ: 102,
        ⲆΔΔⵠᐃ: 103,
        ⲆᐃΔᐃⵠ: 104,
        ᐃΔΔᐃⲆ: 105,
        ΔⵠⲆᐃⵠ: 106,
        ΔΔΔΔⲆ: 107,
        ⵠΔⵠⲆᐃ: 108,
        ΔⲆⲆᐃ: 109,
        ᐃⵠΔⲆΔ: 110,
        ⲆⲆⵠⲆ: 111,
        ⲆⲆⲆⵠ: 112,
        ⲆΔΔΔⲆⵠᐃ: 113,
        ⵠⵠⲆΔᐃ: 114,
        ᐃⲆΔΔᐃᐃᐃ: 115,
        ⲆⲆⲆⵠⲆ: 116,
        ⲆΔⲆⵠⲆ: 117,
        ᐃᐃᐃⲆΔᐃⲆ: 118,
        Δⵠⵠᐃⵠⵠᐃ: 119,
        Δⵠᐃⵠᐃ: 120,
        ᐃᐃᐃⲆ: 121,
        ΔⵠᐃΔΔ: 122,
        ᐃⲆΔΔᐃ: 123,
        ⲆᐃΔᐃΔⲆⵠ: 124,
        ᐃⵠⵠⵠⲆ: 125,
        ⵠᐃᐃⲆⲆ: 126,
        ᐃΔᐃⲆΔ: 127,
        ΔⲆⵠⵠⵠ: 128,
        ΔᐃΔⲆⲆ: 129,
        ΔᐃΔⵠⵠ: 130,
        ⵠⵠᐃᐃⲆ: 131,
        ᐃⵠⵠΔᐃ: 132,
        ΔⵠΔⵠᐃ: 133,
        ᐃⵠΔⲆⲆ: 134,
        ⲆᐃⵠⵠⲆ: 135,
        ⵠⵠΔⲆᐃ: 136,
        ⲆⲆᐃⲆⵠ: 137,
        Ⲇᐃⵠᐃᐃ: 138,
        ⲆⲆⲆⲆⲆ: 139,
        ΔⲆⲆⲆΔΔᐃ: 140,
        ΔΔΔⵠΔ: 141,
        ⵠᐃΔᐃⵠⵠⲆ: 142,
        ᐃΔΔⵠⲆᐃⵠ: 143,
        ⲆⵠⲆᐃⲆⵠᐃ: 144,
        ⲆⵠΔⲆⵠΔⲆ: 145,
        ᐃⵠᐃᐃΔ: 146,
        ᐃᐃΔΔⲆ: 147,
        ΔΔⲆΔᐃ: 148,
        ᐃᐃⲆⵠΔ: 149,
        ΔⲆΔⵠⲆ: 150,
        ΔⲆⵠΔᐃ: 151,
        ᐃⵠⲆⲆᐃ: 152,
        ΔⵠΔⵠⲆ: 153,
        ⲆⵠᐃⲆⲆ: 154,
        ΔⵠᐃᐃΔ: 155,
        ⵠΔᐃⲆⲆ: 156,
        ⲆΔⵠⲆΔ: 157,
        ⵠⲆⵠⲆⵠ: 158,
        ΔⲆⲆᐃⲆ: 159,
        ⲆⵠᐃⵠΔ: 160,
        ⲆᐃⲆⵠΔ: 161,
        ΔᐃⵠᐃΔ: 162,
        ΔᐃᐃⵠⲆ: 163,
        ⵠⵠᐃⲆΔ: 164,
        ᐃⵠⲆΔⵠ: 165,
        ⵠⵠⲆΔⲆⲆⲆ: 166,
        ᐃⲆⲆⲆᐃ: 167,
        ⵠᐃᐃΔⵠ: 168,
        ⲆΔᐃΔᐃ: 169,
        ⲆΔΔᐃΔ: 170,
        ⲆⲆⵠⲆⵠⲆᐃ: 171,
        ΔⵠᐃⲆⵠΔᐃ: 172,
        ΔᐃΔΔΔⲆᐃ: 173,
        ΔΔΔᐃⵠ: 174,
        ⵠⲆⲆⲆⲆⲆᐃ: 175,
        ⲆⲆⵠⲆΔⵠⲆ: 176,
        ⲆⵠⲆᐃᐃᐃΔ: 177,
        ΔΔΔⲆΔΔⲆ: 178,
        ⵠᐃⵠΔⵠᐃⲆ: 179,
        ᐃΔⵠⲆⵠᐃⲆ: 180,
        ⲆⲆⲆⲆᐃᐃⵠ: 181,
        ᐃⲆⲆⲆⲆΔⲆ: 182,
        ⲆⲆᐃΔᐃ: 183,
        ⲆⲆⲆΔⵠ: 184,
        ⵠⲆᐃⲆⲆ: 185,
        ⵠⵠΔⵠⵠ: 186,
        ⵠᐃⵠᐃΔ: 187,
        ᐃⲆΔΔⵠΔΔ: 188,
        ΔΔᐃΔᐃ: 189,
        ⵠⲆΔⵠᐃ: 190,
        ΔΔⲆᐃⲆΔᐃ: 191,
        ⲆⵠΔⵠⲆ: 192,
        ΔⲆⵠⵠΔΔᐃ: 193,
        ⲆΔⵠⲆⲆ: 194,
        ⵠΔᐃⲆΔ: 195,
        ⲆⵠᐃΔⲆΔΔ: 196,
        ⵠᐃᐃⵠⵠᐃᐃ: 197,
        ᐃᐃⵠⵠΔ: 198,
        ΔᐃΔⲆᐃ: 199,
        ᐃᐃⵠⵠⲆΔᐃ: 200,
        ΔᐃⲆⲆⵠ: 201,
        ⲆⵠⲆⵠ: 202,
        Δᐃⵠᐃⵠ: 203,
        ⵠⲆⲆΔΔΔΔ: 204,
        ΔΔⲆⵠᐃ: 205,
        ⲆΔΔΔⲆⵠⵠ: 206,
        ⲆⲆⲆⲆΔ: 207,
        ⵠⵠᐃᐃⲆⲆΔ: 208,
        ΔᐃᐃⲆᐃ: 209,
        ᐃΔᐃⲆΔΔᐃ: 210,
        ⲆⵠⲆΔΔⲆᐃ: 211,
        ⵠⵠᐃⲆⵠ: 212,
        ᐃΔᐃⲆⵠ: 213,
        ⵠᐃᐃⲆΔ: 214,
        ΔⲆⲆᐃⵠ: 215,
        ᐃⲆⵠΔΔ: 216,
        ΔΔⵠᐃΔ: 217,
        ⵠᐃᐃΔᐃ: 218,
        ⵠΔⵠⲆΔ: 219,
        ⵠᐃⲆᐃᐃ: 220,
        ⵠⲆᐃΔⵠ: 221,
        ᐃⲆⵠⲆᐃ: 222,
        ᐃⵠᐃΔⵠ: 223,
        ⵠᐃᐃᐃⲆ: 224,
        ᐃΔᐃᐃᐃΔᐃ: 225,
        ΔⲆᐃΔⲆᐃⲆ: 226,
        ᐃⵠΔⵠⵠ: 227,
        ⵠΔⲆᐃΔⵠⵠ: 228,
        ΔⲆⵠⵠⲆ: 229,
        ΔⵠⵠⲆΔ: 230,
        ⲆⲆᐃⵠΔ: 231,
        ⵠΔⲆⵠΔ: 232,
        ⵠᐃⲆᐃΔ: 233,
        ΔⲆⵠⵠΔⵠⲆ: 234,
        ΔⲆⵠⲆΔ: 235,
        ᐃΔⵠⲆᐃ: 236,
        ᐃᐃⵠᐃΔ: 237,
        ᐃΔΔⲆΔ: 238,
        ᐃⵠⵠᐃΔ: 239,
        ⲆΔⲆⲆⵠ: 240,
        ᐃᐃⵠᐃⵠ: 241,
        ⵠᐃᐃⵠΔ: 242,
        ΔⲆⵠΔⲆⲆⵠ: 243,
        ᐃᐃⲆⲆᐃ: 244,
        ᐃⲆⵠΔⲆ: 245,
        ᐃⵠⲆⵠⵠⲆⲆ: 246,
        ᐃⵠⲆᐃΔ: 247,
        ⵠⵠΔΔᐃ: 248,
        ⲆᐃⲆᐃⵠⵠⵠ: 249,
        ᐃⲆⵠⵠⵠ: 250,
        ⵠᐃΔᐃⵠ: 251,
        ⵠⵠΔⲆᐃᐃᐃ: 252,
        ⵠᐃΔⵠⵠᐃⲆ: 253,
        ΔⵠΔΔΔⲆⲆ: 254,
        ΔⲆⲆΔΔⲆᐃ: 255,
        ΔⵠᐃⲆΔⵠᐃ: 256,
        ⵠⵠⵠᐃΔᐃᐃ: 257,
        ΔΔᐃᐃΔⲆᐃ: 258,
        ⵠᐃⵠⵠΔⲆⲆ: 259,
        ⲆⵠΔᐃᐃ: 260,
        ⵠⵠᐃΔⲆⲆΔ: 261,
        ⲆᐃⵠΔⲆΔᐃ: 262,
        ΔᐃⵠⲆⵠᐃⵠ: 263,
        ⲆᐃⲆⵠᐃ: 264,
        ΔΔⲆⲆᐃⵠᐃ: 265,
        ᐃⵠⵠᐃΔᐃⵠ: 266,
        ΔⲆⵠⲆⵠᐃⲆ: 267,
        ⵠⵠᐃⲆⲆΔⵠ: 268,
        ⵠⵠΔᐃᐃᐃΔ: 269,
        ⲆΔΔΔⲆⲆⲆ: 270,
        ΔᐃΔⲆⵠΔⵠ: 271,
        ⵠᐃⲆⲆᐃⲆᐃ: 272,
        ᐃⲆⲆⲆⵠΔΔ: 273,
        ᐃᐃⵠΔⲆΔᐃ: 274,
        ⲆⵠᐃΔΔⵠΔ: 275,
        ⵠᐃᐃᐃⲆⲆⲆ: 276,
        ΔΔᐃᐃⲆᐃⲆ: 277,
        ⲆⵠᐃΔⲆⵠᐃ: 278,
        ΔⲆᐃⵠ: 279,
        ᐃᐃΔᐃΔ: 280,
        ᐃᐃΔᐃⵠᐃᐃ: 281,
        ⵠⵠΔΔⲆᐃⲆ: 282,
        Ⲇⵠ: 283,
        ΔΔᐃΔᐃⲆᐃ: 284,
        ᐃⵠⵠⲆΔ: 285,
        ΔᐃⲆⲆᐃ: 286,
        ⵠΔᐃΔᐃΔᐃ: 287,
        ΔΔᐃΔⵠ: 288,
        ᐃΔⵠΔⵠⵠⵠ: 289,
        ⲆΔᐃⵠⲆᐃⲆ: 290,
        ⵠᐃⵠⵠⲆᐃΔ: 291,
        ⲆⲆⵠⵠⲆⲆᐃ: 292,
        ⵠᐃⵠᐃΔⲆⵠ: 293,
        ⵠΔⲆΔᐃ: 294,
        ΔΔⲆⲆΔᐃⵠ: 295,
        ΔᐃᐃⲆⲆΔΔ: 296,
        ΔᐃᐃΔⲆᐃⲆ: 297,
        ΔᐃᐃⲆⵠⲆᐃ: 298,
        ᐃΔΔᐃⵠ: 299,
        ᐃⲆΔΔᐃⲆᐃ: 300,
        ⵠⵠⵠΔⵠⵠⲆ: 301,
        ΔⲆⲆᐃⵠΔᐃ: 302,
        ᐃΔᐃΔΔⵠᐃ: 303,
        ⵠΔⲆᐃⵠΔΔ: 304,
        ᐃᐃⲆΔΔΔᐃ: 305,
        ⵠΔΔΔᐃᐃⲆ: 306,
        ⲆΔΔΔⲆ: 307,
        ᐃⲆᐃΔᐃⲆᐃ: 308,
        ᐃΔΔⵠΔᐃᐃ: 309,
        ⵠⵠΔΔⲆⲆᐃ: 310,
        ᐃⲆΔⲆⵠⲆⵠ: 311,
        ᐃΔⲆⵠᐃᐃⵠ: 312,
        ᐃᐃᐃⲆᐃⲆⲆ: 313,
        ⵠᐃᐃΔⵠᐃΔ: 314,
        ⵠⲆᐃⵠⲆᐃⵠ: 315,
        ᐃⲆΔᐃᐃⵠΔ: 316,
        ΔΔΔᐃΔⵠⲆ: 317,
        ⵠΔⵠᐃᐃΔⵠ: 318,
        ⵠⲆᐃⲆⵠⲆᐃ: 319,
        ᐃᐃᐃⵠΔΔⲆ: 320,
        ᐃⵠᐃⵠⵠ: 321,
        ΔⲆⲆⵠΔⵠⵠ: 322,
        ⵠⲆΔⲆᐃⵠⵠ: 323,
        ⲆⲆⵠΔⵠᐃΔ: 324,
        ⵠⵠΔⲆⲆⵠⵠ: 325,
        ⵠⲆΔⲆⵠΔⵠ: 326,
        ᐃⵠⲆᐃⵠⵠⵠ: 327,
        ⲆⲆΔΔᐃΔⲆ: 328,
        ⵠⲆⲆⲆⵠⲆⵠ: 329,
        ⲆⲆᐃⲆⲆⵠⵠ: 330,
        ΔⵠᐃⵠΔᐃᐃ: 331,
        ⲆᐃⲆⲆᐃΔΔ: 332,
        ᐃᐃⲆⵠᐃⵠⲆ: 333,
        ⲆⵠΔΔⵠⵠⲆ: 334,
        ᐃΔᐃⵠⲆⲆⲆ: 335,
        ᐃⵠⵠΔᐃⲆᐃ: 336,
        ᐃⵠᐃᐃⲆⲆⵠ: 337,
        ᐃⵠⲆⲆⵠΔᐃ: 338,
        ⲆΔΔⲆᐃᐃᐃ: 339,
        ⲆᐃᐃᐃᐃⵠΔ: 340,
        ᐃᐃⵠⵠⲆⲆⲆ: 341,
        ᐃᐃⲆⲆΔⵠⵠ: 342,
        ΔⵠⵠⲆⲆᐃⵠ: 343,
        ᐃⲆⲆΔⲆᐃⲆ: 344,
        ⵠⵠⵠΔΔⲆⵠ: 345,
        ᐃᐃⵠⵠᐃⲆⵠ: 346,
        ⲆΔⵠⲆⲆⵠⵠᐃⵠ: 347,
        ⵠᐃⲆΔⲆΔᐃ: 348,
        ᐃⲆⲆⲆⵠⲆᐃ: 349,
        ⵠΔᐃΔⵠⲆⵠ: 350,
        ᐃⵠⵠΔᐃᐃⲆ: 351,
        ⲆⵠⲆᐃⵠⵠᐃ: 352,
        ⲆⲆⲆⵠΔⵠᐃ: 353,
        ᐃⲆⲆΔⲆΔⵠ: 354,
        ⵠⵠᐃⲆⲆΔᐃ: 355,
        ⲆᐃⵠΔⵠⲆⲆ: 356,
        ᐃⲆΔⵠΔΔΔ: 357,
        ᐃⵠⲆⲆᐃⲆᐃ: 358,
        ⵠᐃⵠΔᐃᐃᐃ: 359,
        ⲆΔᐃⵠⵠᐃⲆ: 360,
        ΔᐃΔⵠᐃⲆⵠ: 361,
        ⵠᐃΔⲆⵠΔΔ: 362,
        ⵠᐃΔⵠⵠⵠᐃ: 363,
        ⵠⵠᐃⵠⲆⲆΔ: 364,
        ΔⲆⲆⲆᐃᐃᐃ: 365,
        ᐃⲆΔᐃΔᐃⲆ: 366,
        ⵠΔΔⵠᐃⵠⲆ: 367,
        ⵠΔⲆⵠⵠᐃⵠ: 368,
        ⲆⵠᐃΔⲆᐃΔ: 369,
        ⲆΔΔᐃⵠᐃⲆ: 370,
        ᐃᐃⲆΔⲆⲆⵠ: 371,
        ⲆⵠⲆᐃⵠΔⲆ: 372,
        ⵠᐃΔⲆΔΔᐃ: 373,
        ⵠΔΔⲆⵠⵠⲆ: 374,
        ΔⵠᐃⲆⵠΔⲆ: 375,
        ΔᐃᐃᐃΔⵠΔ: 376,
        ΔᐃᐃᐃⲆᐃΔ: 377,
        ⵠⵠΔⵠⵠⵠᐃ: 378,
        ⲆᐃᐃΔⵠᐃΔ: 379,
        ΔⵠⵠⵠΔᐃᐃ: 380,
        ⲆᐃⵠΔⲆΔⵠ: 381,
        ⵠΔΔᐃᐃⲆᐃ: 382,
        ⵠᐃᐃⲆⵠᐃΔ: 383,
        ΔΔⵠᐃΔⵠⲆ: 384,
        ⵠΔⲆⲆᐃΔⲆ: 385,
        ⵠΔⲆⲆⵠΔⵠ: 386,
        ⲆΔⵠΔᐃΔⵠ: 387,
        ⵠⵠⵠᐃᐃΔⲆ: 388,
        ΔᐃⵠⲆⲆᐃⵠ: 389,
        ᐃⲆⲆⵠⵠⲆΔ: 390,
        ᐃᐃⲆⵠⵠⵠⲆ: 391,
        ΔⲆⵠᐃΔΔⲆ: 392,
        ᐃᐃⲆᐃΔⵠᐃ: 393,
        ΔᐃⵠᐃⲆⵠᐃ: 394,
        ⲆΔⵠⵠᐃᐃⲆ: 395,
        ᐃᐃⲆΔᐃᐃⲆ: 396,
        ΔΔⲆᐃᐃⲆⲆ: 397,
        ⵠⲆⲆΔΔᐃᐃ: 398,
        ᐃⵠΔΔΔᐃⵠ: 399,
        ⲆΔᐃᐃΔⵠⵠ: 400,
        ⵠΔⵠᐃᐃΔΔ: 401,
        ⵠⲆⲆⲆΔᐃⵠ: 402,
        ΔᐃΔⵠⲆⵠΔ: 403,
        ⵠᐃᐃΔΔΔΔ: 404,
        ΔᐃΔⵠⲆΔⵠ: 405,
        ⲆⲆᐃⵠΔΔⲆ: 406,
        ΔΔⵠᐃᐃΔⵠ: 407,
        ⲆⲆᐃᐃⵠΔᐃ: 408,
        ᐃΔⵠᐃᐃⲆΔ: 409,
        ᐃⲆⵠⵠⵠᐃⵠ: 410,
        ⲆΔᐃⲆⵠⵠⵠ: 411,
        ᐃΔⲆⵠⲆᐃΔ: 412,
        ᐃΔΔⲆⵠ: 413,
        ᐃᐃⲆΔΔΔᐃⵠⲆ: 414,
        ⲆᐃᐃⲆᐃ: 415,
        ⲆⵠⵠΔⲆ: 416,
        ΔᐃⲆⵠⲆⵠⲆᐃᐃ: 417,
        ᐃᐃⵠᐃⲆⲆΔ: 418,
        ⲆⲆⵠⵠⲆ: 419,
        ⲆⵠΔΔⲆΔᐃ: 420,
        ⵠᐃᐃᐃⲆᐃⲆ: 421,
        ΔⵠⲆⲆᐃⲆᐃ: 422,
        ⵠⲆⵠⵠΔⵠⵠ: 423,
        ΔΔΔⵠᐃᐃΔ: 424,
        ᐃᐃΔΔⵠΔⵠ: 425,
        ΔᐃΔⲆᐃⲆᐃ: 426,
        ΔⵠⲆⲆᐃⵠⵠ: 427,
        ᐃⵠⵠᐃⵠᐃᐃ: 428,
        ΔΔⲆᐃΔⲆⲆ: 429,
        ΔⲆⵠᐃⲆⲆΔ: 430,
        ᐃⲆⲆᐃⵠΔⲆ: 431,
        ᐃΔᐃΔΔⵠⵠ: 432,
        ⲆΔⲆΔΔᐃΔ: 433,
        ᐃᐃᐃⲆᐃᐃΔ: 434,
        ⲆᐃΔΔΔⵠᐃ: 435,
        ⲆⲆⲆᐃⲆᐃⵠ: 436,
        ΔΔᐃⲆⵠⵠΔ: 437,
        ᐃⲆΔΔⲆΔⲆ: 438,
        ⲆᐃⵠᐃᐃᐃⲆ: 439,
        ⵠⲆΔΔⲆⲆⲆ: 440,
        ⵠⲆΔᐃΔΔⲆ: 441,
        ⲆᐃⵠΔⲆΔⲆ: 442,
        ᐃⲆᐃᐃⲆᐃᐃ: 443,
        ᐃᐃⲆᐃⵠⵠⲆⲆⲆ: 444,
        ᐃⲆΔᐃⲆ: 445,
        ΔΔⵠᐃΔⲆᐃ: 446,
        ⲆⵠⵠΔⵠᐃⲆ: 447,
        ᐃⵠⵠΔⵠᐃᐃⲆⲆ: 448,
        ⵠΔΔΔⲆ: 449,
        ⵠΔⲆⲆⵠ: 450,
        ⲆᐃΔᐃⲆⲆᐃ: 451,
        ΔⲆⲆⵠⲆⲆⲆ: 452,
        ⵠΔΔΔⲆΔⲆ: 453,
        ⵠΔΔᐃⲆᐃⲆ: 454,
        ⵠΔⲆⵠⵠⲆᐃ: 455,
        ΔᐃΔΔᐃⲆⲆ: 456,
        ⵠΔⵠᐃⲆᐃΔ: 457,
        ⲆᐃⲆΔᐃⵠᐃ: 458,
        ᐃΔⵠⵠᐃᐃΔ: 459,
        ᐃⲆⵠⵠᐃᐃΔ: 460,
        ⲆⲆⵠⲆᐃᐃΔ: 461,
        ⵠⲆⲆⵠΔΔⲆ: 462,
        ᐃⲆΔᐃⵠⲆⵠ: 463,
        ᐃᐃⵠⲆᐃⲆⲆ: 464,
        ᐃᐃᐃᐃᐃΔΔ: 465,
        ⲆⵠΔᐃΔᐃⵠ: 466,
        ⲆⲆᐃΔΔᐃᐃ: 467,
        ⵠΔΔᐃΔⲆᐃ: 468,
        ⵠΔΔⵠⵠⲆⵠ: 469,
        ⲆⲆⲆⵠᐃᐃΔ: 470,
        ⵠⵠⵠⲆⵠⵠⵠ: 471,
        ᐃΔⵠᐃⵠΔᐃ: 472,
        ⲆⵠⵠⲆⲆᐃⵠ: 473,
        ⲆᐃᐃᐃⲆⲆᐃ: 474,
        ᐃᐃⵠᐃⵠⲆⲆ: 475,
        ⲆΔᐃΔⲆⵠⵠ: 476,
        ᐃᐃⵠⵠⵠⵠΔ: 477,
        ⵠᐃΔΔⵠΔᐃ: 478,
        ᐃⲆᐃⲆΔᐃΔ: 479,
        ⵠᐃᐃⵠᐃⵠᐃ: 480,
        ᐃᐃᐃⵠⲆⵠΔ: 481,
        ⵠᐃⲆΔⲆΔⵠ: 482,
        ΔΔⵠⲆᐃΔΔ: 483,
        ⲆⲆⵠᐃⵠΔᐃ: 484,
        ᐃΔΔⲆᐃᐃⵠ: 485,
        ΔΔᐃΔΔⲆΔ: 486,
        ΔᐃⵠⵠΔⵠⲆ: 487,
        ΔᐃᐃᐃⲆΔᐃ: 488,
        ⵠᐃΔΔΔⵠⵠ: 489,
        ᐃⲆⵠⲆᐃⲆᐃ: 490,
        ᐃΔⲆΔΔⵠⵠ: 491,
        ⲆΔⲆᐃⲆⵠⵠ: 492,
        ΔⵠⲆΔᐃⲆΔ: 493,
        ⵠⵠᐃⵠᐃΔⲆ: 494,
        ⵠΔΔⲆⲆⵠⵠ: 495,
        ⵠⵠⲆⵠΔΔⲆ: 496,
        ⵠᐃⲆⵠⲆᐃΔ: 497,
        ΔΔΔᐃΔΔᐃ: 498,
        ⵠΔΔᐃᐃΔⲆ: 499,
        ΔⵠⵠⲆⲆΔⲆ: 500,
        ΔᐃᐃᐃᐃΔⵠ: 501,
        ⵠⵠⲆΔᐃⵠΔ: 502,
        ⲆᐃΔΔⵠⵠⵠ: 503,
        ᐃΔΔⲆⲆⵠΔ: 504,
        ⲆⵠⵠᐃⵠΔᐃ: 505,
        ΔᐃⲆΔΔΔⵠ: 506,
        ᐃᐃᐃᐃᐃΔΔ: 507,
        ⵠⲆⵠᐃⵠⲆᐃ: 508,
        Ⲇᐃᐃⵠⵠᐃᐃ: 509,
        ⲆⵠΔⲆᐃⲆⲆ: 510,
        ᐃΔⵠᐃᐃᐃΔ: 511,
        ΔΔⵠⵠⵠⵠΔ: 512,
        ⲆⲆⲆⲆᐃⵠⲆ: 513,
        ΔΔⵠⲆᐃΔⵠ: 514,
        ΔⵠⵠΔᐃᐃⲆ: 515,
        ⵠⲆᐃᐃΔᐃᐃ: 516,
        ᐃⵠⵠᐃΔᐃΔ: 517,
        ΔᐃⲆᐃᐃᐃⵠ: 518,
        ⵠΔΔⲆⵠⵠⵠ: 519,
        ΔⵠΔΔᐃⵠⲆ: 520,
        ⲆΔⵠⲆᐃⵠΔ: 521,
        ⵠⲆΔᐃⵠᐃΔ: 522,
        ΔᐃᐃΔΔΔⵠ: 523,
        ⵠᐃⲆΔᐃᐃΔ: 524,
        ⲆᐃΔⲆᐃⵠᐃ: 525,
        ΔⵠΔᐃᐃⲆᐃ: 526,
        ΔⵠⲆᐃᐃΔⵠ: 527,
        ΔΔⵠⲆⵠᐃΔ: 528,
        ΔΔΔⵠΔⲆⵠ: 529,
        ᐃᐃΔᐃᐃⵠᐃ: 530,
        ⲆⵠΔᐃⵠΔⵠ: 531,
        ΔΔᐃᐃⵠⵠⵠ: 532,
        ⵠᐃᐃᐃⲆΔⲆ: 533,
        Ⲇⵠⵠᐃⵠᐃⵠ: 534,
        ⵠΔⵠᐃⵠⲆΔ: 535,
        ᐃΔᐃⵠⲆΔⲆ: 536,
        ᐃⵠᐃⵠΔⵠⲆ: 537,
        ΔⵠᐃᐃΔⵠᐃ: 538,
        ⲆⵠΔⵠⲆⵠΔⲆᐃ: 539,
        ΔΔᐃⵠᐃⵠΔ: 540,
        ΔⵠⲆⵠᐃΔᐃ: 541,
        ᐃⲆⲆⲆΔⵠΔ: 542,
        ⲆΔᐃᐃⲆⵠᐃ: 543,
        ΔΔΔⵠᐃⲆΔΔⵠ: 544,
        POINTS: 545,
        ΔᐃⲆᐃⲆⵠᐃ: 546,
        ᐃⵠᐃΔᐃⵠⲆ: 547,
        ΔⵠΔΔᐃᐃⲆ: 548,
        ᐃΔⲆⲆΔΔΔ: 549,
        ⲆⲆᐃᐃᐃⲆⵠ: 550,
        ᐃⵠΔⲆΔⲆΔ: 551,
        ⵠᐃⵠΔⲆⲆⵠ: 552,
        ᐃⵠⲆⲆⲆᐃΔ: 553,
        ⲆΔᐃⵠⲆᐃⵠ: 554,
        ΔᐃⵠⲆΔᐃⲆ: 555,
        ΔⲆΔⵠⵠΔⵠ: 556,
        ᐃᐃⲆᐃⲆᐃⲆ: 557,
        ᐃᐃᐃⲆΔⵠⵠ: 558,
        ⲆᐃⵠΔᐃΔᐃ: 559,
        ΔᐃᐃⲆⵠⵠᐃ: 560,
        ⲆᐃᐃⲆᐃⲆᐃ: 561,
        ⲆΔⲆⲆΔⵠⲆ: 562,
        ΔᐃΔΔΔⵠΔ: 563,
        ᐃⵠⲆⲆⲆΔΔ: 564,
        ᐃⵠⲆᐃⲆⲆᐃ: 565,
        ΔⲆⵠᐃᐃⵠΔ: 566,
        ᐃᐃⲆᐃⵠⵠΔ: 567,
        ⵠⵠΔⲆⲆΔΔ: 568,
        ⵠⵠⲆΔΔΔⵠ: 569,
        ᐃᐃⵠⵠΔⲆⲆ: 570,
        ΔⲆⲆᐃⵠΔΔ: 571,
        ᐃΔⲆΔⲆⲆΔ: 572,
        ᐃⲆᐃΔⲆΔⲆ: 573,
        ⵠⵠⵠⵠᐃᐃᐃ: 574,
        ⲆΔᐃᐃⵠⲆᐃ: 575,
        ⲆⲆⵠⵠΔⲆΔ: 576,
        ᐃⵠⲆⲆⵠΔⵠ: 577,
        ΔⵠⵠⵠⲆⵠΔ: 578,
        ΔⵠᐃⵠⵠᐃⲆ: 579,
        ⲆⵠⲆΔᐃⲆᐃ: 580,
        ⵠⲆⲆΔⵠᐃᐃ: 581,
        ΔⵠⲆᐃⵠⵠⲆ: 582,
        ᐃⲆΔⵠⵠᐃΔ: 583,
        ⲆᐃⵠΔⲆⲆⲆ: 584,
        ᐃΔⵠⵠΔΔⵠ: 585,
        ΔᐃⲆⲆΔⵠᐃ: 586,
        ⲆⵠⲆⵠΔΔΔ: 587,
        ᐃᐃⵠΔΔⵠᐃ: 588,
        ⵠΔⵠⵠⵠΔΔ: 589,
        ⲆΔⵠⲆᐃⵠⲆ: 590,
        ΔⲆΔᐃⵠᐃᐃ: 591,
        ⵠΔΔΔⲆᐃΔ: 592,
        ⵠⵠᐃⲆⲆΔΔⲆΔ: 593,
        ⲆⲆᐃᐃⲆⵠⲆ: 594,
        ⵠⵠᐃⵠᐃᐃⲆⲆᐃ: 595,
        ⵠᐃᐃΔΔⲆⵠ: 596,
        ⵠᐃⵠⲆⲆⵠⲆᐃΔ: 597,
        ᐃΔΔΔΔᐃⵠⵠⲆ: 598,
        ΔⵠⲆⵠΔⲆΔⲆΔ: 599,
        ⵠᐃⵠᐃᐃⲆⵠΔᐃ: 600,
        ⵠᐃΔⲆⵠⲆΔⵠΔ: 601,
        ⲆΔⲆᐃⵠⵠᐃ: 602,
        ΔⲆᐃΔᐃ: 603,
        ⵠⵠΔⵠⵠΔᐃ: 604,
        ⵠᐃⵠΔΔΔΔ: 605,
        ⵠᐃᐃΔΔⵠᐃ: 606,
        ᐃᐃⵠΔⲆᐃⵠΔⵠ: 607,
        ᐃΔⵠⵠᐃⵠᐃ: 608,
        ΔᐃⲆⵠⵠΔⲆ: 609,
        ⵠᐃΔΔⵠᐃΔ: 610,
        ⵠΔᐃⵠΔᐃΔ: 611,
        ⵠᐃⲆⵠΔⲆΔ: 612,
        ΔⲆΔᐃΔΔΔ: 613,
        ⵠᐃΔᐃᐃᐃⲆ: 614,
        ⵠⵠⵠΔⲆΔⵠ: 615,
        ⲆⵠⵠᐃⲆᐃⲆ: 616,
        ΔΔⲆⵠⲆⲆⲆ: 617,
        ᐃΔΔΔⲆΔΔ: 618,
        ⵠⲆᐃᐃⲆ: 619,
        ⵠΔⵠᐃⲆ: 620,
        ᐃΔⵠΔⲆ: 621,
        ΔⲆΔⵠΔΔᐃⲆΔ: 622,
        ΔΔⲆⲆᐃⲆΔ: 623,
        ᐃᐃΔΔⲆⲆΔ: 624,
        ⵠΔⵠᐃᐃⵠⲆ: 625,
        ⲆΔΔᐃⵠᐃⵠ: 626,
        ⲆΔⵠᐃᐃΔⲆ: 627,
        ⵠᐃⵠΔΔⲆⵠ: 628,
        ⵠᐃΔⵠⲆⵠⲆ: 629,
        ⲆᐃⵠⲆⵠᐃⲆ: 630,
        ⵠᐃΔᐃⵠⲆⵠ: 631,
        ΔᐃΔⲆⵠΔⲆ: 632,
        ᐃⵠⵠⲆⲆᐃΔ: 633,
        ⵠΔΔΔΔⵠΔ: 634,
        ΔⲆⵠᐃⲆⵠᐃ: 635,
        ᐃⲆΔⵠᐃⵠᐃ: 636,
        ⲆⵠⲆᐃⵠ: 637,
        ΔⵠᐃΔⵠΔⵠ: 638,
        ΔΔⵠᐃᐃⵠΔ: 639,
        ΔΔΔⲆⵠⵠⵠ: 640,
        ΔᐃᐃΔᐃΔⵠ: 641,
        ⵠⵠΔⵠⲆⵠᐃ: 642,
        ΔᐃⵠⵠⲆᐃⵠ: 643,
        ⲆΔⵠⲆⵠⲆⵠ: 644,
        ⲆΔΔⵠᐃᐃⲆ: 645,
        ⵠⵠᐃᐃⵠᐃΔ: 646,
        ⵠⲆᐃΔⵠΔⲆ: 647,
        ⲆᐃⵠΔΔΔⵠ: 648,
        ᐃᐃΔⵠᐃⵠⲆ: 649,
        ΔⵠⵠⲆΔⲆᐃ: 650,
        ⵠᐃⲆⲆⵠⲆⲆ: 651,
        ⲆⵠᐃⲆⵠΔⲆ: 652,
        ⲆⵠᐃⵠⲆᐃⵠ: 653,
        ⵠᐃⵠⲆᐃⵠⲆ: 654,
        ᐃΔΔΔⵠⵠⵠ: 655,
        ⲆⵠΔⲆⵠⵠⲆ: 656,
        ⵠⵠΔⲆⵠᐃΔ: 657,
        ᐃⵠⲆⵠⲆⲆᐃ: 658,
        ᐃΔⵠⵠⲆⲆᐃ: 659,
        ⲆΔᐃᐃⲆΔΔ: 660,
        ᐃΔⵠⵠΔᐃⵠ: 661,
        ΔⵠⲆᐃΔΔⵠ: 662,
        ⵠⵠⵠΔᐃⵠᐃ: 663,
        ΔⵠᐃⲆᐃⲆⵠ: 664,
        ΔⲆⵠΔⲆⵠΔ: 665,
        ΔⲆⵠⵠⲆᐃⵠ: 666,
        ⵠᐃΔⲆΔᐃᐃ: 667,
        ⲆᐃⲆΔᐃΔⵠ: 668,
        ᐃⵠⵠⲆⲆΔΔ: 669,
        ΔⵠΔⵠⲆΔᐃ: 670,
        ⵠᐃⲆⵠⵠⲆᐃ: 671,
        ⵠⵠΔⵠΔᐃΔ: 672,
        ΔⵠⲆᐃⲆ: 673,
        ΔᐃΔⲆⲆΔⵠ: 674,
        ⲆΔᐃⵠⲆⲆⲆ: 675,
        ᐃᐃⵠΔᐃ: 676,
        ᐃⵠᐃⵠᐃⵠΔⵠᐃ: 677,
        ᐃⲆⲆⵠⵠᐃⲆ: 678,
        ⵠⲆΔⲆⲆ: 679,
        ⵠᐃᐃᐃⲆⲆΔ: 680,
        ⵠᐃⲆⲆⵠᐃⲆ: 681,
        ⵠⲆᐃⲆᐃⵠᐃ: 682,
        ᐃⲆᐃⵠᐃᐃΔ: 683,
        ⵠΔⲆⲆⲆΔⲆ: 684,
        ⲆⲆⲆⲆᐃⲆⲆ: 685,
        ᐃⵠⲆᐃᐃⲆᐃ: 686,
        ⲆΔⵠΔⲆᐃᐃ: 687,
        ΔⵠΔᐃᐃΔΔ: 688,
        ΔⲆⲆⲆⵠⵠⵠ: 689,
        ⲆᐃΔᐃᐃΔΔ: 690,
        ⲆⵠⲆⵠΔ: 691,
        ᐃⲆᐃⲆΔ: 692,
        ΔⵠᐃΔⵠ: 693,
        ᐃΔⲆΔᐃ: 694,
        ⲆⲆᐃⲆΔ: 695,
        ⲆᐃⵠⲆⲆⲆⲆ: 696,
        ᐃⵠⵠⵠⵠⲆⵠ: 697,
        ΔΔᐃΔΔⵠⵠ: 698,
        ᐃᐃΔᐃΔΔᐃ: 699,
        ⲆⵠⵠΔᐃᐃⵠ: 700,
        ⲆΔΔᐃΔⵠΔ: 701,
        ᐃᐃⲆⵠᐃᐃⲆ: 702,
        ⲆⲆΔⵠᐃᐃⵠ: 703,
        ⲆΔⲆⲆᐃΔΔ: 704,
        ⵠⵠᐃⵠΔᐃΔ: 705,
        ΔΔⵠⲆⲆᐃⵠ: 706,
        ⲆⵠΔⲆⵠΔᐃ: 707,
        ᐃᐃⲆᐃᐃᐃⲆ: 708,
        ΔⲆⲆⲆᐃΔᐃ: 709,
        ᐃⵠⵠⲆᐃΔΔ: 710,
        ΔᐃᐃΔΔⵠΔ: 711,
        ΔⵠᐃⲆⲆⵠⵠ: 712,
        ᐃᐃΔⵠᐃΔⵠ: 713,
        ⲆⵠⲆᐃᐃⲆⵠ: 714,
        ⲆᐃᐃΔΔᐃΔ: 715,
        ⵠⲆⵠᐃᐃᐃⲆ: 716,
        ᐃᐃⲆⵠΔⲆΔ: 717,
        ⲆᐃΔᐃⵠΔⵠ: 718,
        ᐃΔⲆΔᐃⵠⲆ: 719,
        ᐃⵠⵠⲆⲆⲆⲆ: 720,
        ΔᐃⲆᐃⲆⵠΔⲆᐃ: 721,
        ⵠⵠⲆⲆᐃΔᐃ: 722,
        ᐃᐃⲆⲆⵠᐃᐃ: 723,
        ᐃⲆΔΔᐃⲆⵠ: 724,
        ΔᐃⲆⲆⲆΔᐃ: 725,
        ⲆⵠΔΔᐃⲆⲆ: 726,
        ᐃⵠⵠᐃⵠⵠΔ: 727,
        ΔᐃΔΔⵠⲆᐃ: 728,
        ΔᐃᐃΔᐃⵠΔ: 729,
        ᐃⵠⵠᐃᐃⵠΔ: 730,
        ΔⲆᐃΔᐃΔⵠ: 731,
        ⲆⵠΔᐃⲆᐃⲆ: 732,
        ⲆⲆⵠᐃΔⵠⲆ: 733,
        ᐃΔⲆΔΔΔᐃ: 734,
        ⲆΔⲆⲆⲆⲆΔ: 735,
        ⲆΔⲆⲆⵠΔΔ: 736,
        Δᐃⵠᐃⵠᐃᐃ: 737,
        ΔᐃⵠΔⵠᐃᐃ: 738,
        ⵠⲆⵠᐃⲆᐃᐃ: 739,
        ⵠⵠⲆⵠⲆⵠⲆ: 740,
        ⵠⲆᐃⲆⲆⲆΔ: 741,
        ⲆⲆⵠⲆⵠⵠⵠ: 742,
        ⵠᐃⲆΔΔⵠΔ: 743,
        ⲆⲆᐃⵠΔⵠΔ: 744,
        ⲆᐃΔⵠᐃⲆⵠ: 745,
        ⲆⲆΔⲆΔⵠΔ: 746,
        ᐃⲆᐃᐃΔⵠΔ: 747,
        ΔⲆΔⵠⲆⲆⵠ: 748,
        ᐃᐃⲆⲆⲆⵠᐃ: 749,
        ⵠⲆΔᐃⲆⲆⲆ: 750,
        ΔⵠΔⵠᐃⲆⵠ: 751,
        ⵠΔᐃⲆⵠⵠⵠ: 752,
        ⵠΔᐃᐃⲆΔⵠ: 753,
        ⲆⲆΔⵠⵠⵠⵠ: 754,
        ⲆᐃΔΔΔΔΔ: 755,
        ΔΔΔᐃΔᐃⲆ: 756,
        ΔᐃᐃⵠΔΔⵠ: 757,
        ⲆΔⵠΔᐃᐃΔ: 758,
        ΔⲆᐃⵠᐃΔΔ: 759,
        ⲆΔⵠᐃΔΔⵠ: 760,
        ΔᐃΔᐃⵠᐃⵠ: 761,
        ⲆΔΔⲆⵠⵠΔ: 762,
        ᐃΔΔΔΔΔᐃ: 763,
        ΔΔⵠⵠⲆΔᐃ: 764,
        ⵠᐃᐃⵠΔΔⲆ: 765,
        ⵠᐃΔᐃΔᐃΔ: 766,
        ⵠⲆⵠᐃᐃⵠⵠ: 767,
        ΔΔⵠⲆΔΔⵠ: 768,
        ΔⵠⲆⲆΔⵠΔ: 769,
        ⵠΔⲆΔᐃⲆⵠ: 770,
        ᐃΔΔᐃⵠᐃⲆ: 771,
        ⲆⲆᐃⵠΔⵠᐃ: 772,
        ΔᐃⵠⲆΔᐃΔ: 773,
        ⵠⲆᐃΔⵠΔⵠ: 774,
        ⲆⲆᐃΔᐃᐃΔ: 775,
        ᐃⲆΔⵠᐃⵠⲆ: 776,
        ⵠⲆⲆᐃⵠⲆΔ: 777,
        ΔΔᐃⲆⵠⲆⵠ: 778,
        ΔᐃᐃΔⲆᐃⵠ: 779,
        ΔⵠΔΔΔᐃⵠ: 780,
        ᐃⵠᐃᐃⲆⵠᐃ: 781,
        ᐃⲆΔᐃⲆᐃΔ: 782,
        ᐃⵠᐃᐃΔᐃⵠ: 783,
        ⵠᐃᐃᐃΔᐃΔ: 784,
        ΔⲆⵠΔΔᐃᐃ: 785,
        ⲆΔΔⵠΔⲆᐃ: 786,
        ΔΔᐃⲆᐃⵠⲆ: 787,
        ᐃᐃⵠⵠⵠⲆⵠ: 788,
        ΔᐃΔⲆⲆⲆⲆ: 789,
        ΔⲆΔᐃⲆᐃΔ: 790,
        ⲆᐃⲆᐃΔⲆᐃ: 791,
        ⲆⵠΔΔⲆⵠⵠ: 792,
        ΔΔⲆⵠⵠ: 793,
        ⲆⲆⵠⵠᐃⲆᐃ: 794,
        ⲆⲆΔΔⵠⲆⲆ: 795,
        ⵠΔᐃΔⲆ: 796,
        ⲆΔⵠⲆΔⲆᐃ: 797,
        ΔΔⵠᐃⲆΔᐃ: 798,
        ΔΔΔᐃⲆⲆⲆ: 799,
        ⲆΔⲆΔⲆᐃᐃ: 800,
        ⲆΔΔΔΔⵠΔ: 801,
        ΔⵠⲆⲆⲆ: 802,
        ⵠᐃⵠᐃᐃⲆᐃ: 803,
        ⲆⲆⲆⵠⵠⵠⲆᐃΔ: 804,
        ΔⲆᐃⲆᐃᐃᐃⲆⲆ: 805,
        ⵠΔᐃᐃΔⲆⵠⵠᐃ: 806,
        ⲆⲆΔⲆᐃᐃᐃᐃⲆ: 807,
        ⲆᐃᐃᐃⲆⵠΔ: 808,
        ⵠⵠᐃᐃⵠⲆΔ: 809,
        ⵠᐃⵠΔΔΔⵠ: 810,
        ᐃᐃΔⵠⲆⵠⲆ: 811,
        ΔᐃᐃΔᐃⵠᐃ: 812,
        ⵠⵠⲆⲆᐃᐃΔ: 813,
        ΔⲆⲆⵠΔΔΔ: 814,
        ΔΔⲆᐃⵠⵠⵠ: 815,
        ⵠᐃΔΔⵠⵠⵠ: 816,
        ΔⵠⵠⵠⲆⲆⲆ: 817,
        ⵠᐃⲆΔΔ: 818,
        ⲆΔⵠⵠⲆ: 819,
        ΔⵠⵠᐃⵠᐃΔ: 820,
        ΔⵠΔᐃΔⵠΔ: 821,
        ⵠⵠⲆⵠᐃⲆⲆ: 822,
        ᐃΔⲆⵠⲆᐃⵠ: 823,
        ΔⵠᐃⵠΔᐃΔ: 824,
        ⵠⵠΔⵠΔⲆⲆ: 825,
        ⲆΔΔⵠΔⵠⵠ: 826,
        ᐃⵠⵠΔⵠⵠⲆ: 827,
        ⲆⵠΔΔⲆⵠⲆ: 828,
        ⵠⲆᐃⲆΔΔΔ: 829,
        ⲆΔΔΔⲆΔⵠ: 830,
        ⲆᐃΔⲆⵠⵠΔ: 831,
        ⲆⲆⲆⵠⲆⲆᐃΔᐃ: 832,
        ᐃΔΔⵠⵠⲆⵠⵠᐃ: 833,
        ⲆⲆⲆΔⲆⲆᐃ: 834,
        ᐃⲆⲆᐃΔⲆⵠ: 835,
        ⵠΔᐃⵠⲆΔⲆ: 836,
        ⵠⲆⵠⲆΔⵠⲆ: 837,
        ⵠⲆΔⲆᐃᐃⵠ: 838,
        ⵠᐃⵠⲆⲆⲆᐃ: 839,
        ΔΔⲆⲆᐃⲆⵠ: 840,
        ΔΔⵠΔΔⵠⲆ: 841,
        ⵠᐃⵠⲆⵠⲆᐃ: 842,
        ⵠᐃⵠᐃⲆⵠⵠ: 843,
        ⵠΔΔᐃᐃᐃΔ: 844,
        ⲆΔⲆᐃᐃⵠⲆ: 845,
        ΔⲆⲆΔΔⵠⲆ: 846,
        ᐃⲆΔΔⵠΔᐃ: 847,
        ᐃⲆΔⲆᐃⲆⲆ: 848,
        ᐃΔᐃⵠⲆⲆᐃ: 849,
        ΔⵠⵠΔⵠᐃⵠ: 850,
        ᐃⲆΔⲆᐃΔᐃ: 851,
        ⲆⲆⲆᐃᐃⲆⲆᐃⲆ: 852,
        ⲆᐃⲆᐃΔᐃΔ: 853,
        ᐃⵠᐃⵠᐃ: 854,
        ᐃⲆᐃᐃⲆⲆᐃΔΔ: 855,
        ΔΔΔᐃᐃΔᐃⵠΔ: 856,
        ⲆⵠⵠΔᐃⲆΔΔΔ: 857,
        ΔⲆⵠΔΔΔⲆΔⵠ: 858,
        ⲆⲆΔΔΔΔΔ: 859,
        ΔⲆΔΔⲆΔᐃ: 860,
        ΔⵠⲆᐃᐃⲆⲆ: 861,
        ᐃᐃⵠⵠⵠΔⲆ: 862,
        ⲆⵠⲆᐃⵠⵠⵠ: 863,
        ⲆⵠΔⲆⵠⲆΔᐃⲆ: 864,
        ΔⲆΔⵠΔᐃᐃ: 865,
        ⲆᐃⵠⲆⲆᐃᐃ: 866,
        ⲆⵠⲆⲆΔⲆⲆ: 867,
        ΔΔⵠᐃΔΔⲆ: 868,
        ⲆᐃᐃᐃⲆΔⵠ: 869,
        ⲆⵠᐃᐃᐃⲆⵠ: 870,
        ΔΔΔⲆᐃⲆᐃ: 871,
        ΔᐃⵠⲆⵠ: 872,
        ⲆΔⵠΔᐃⵠᐃⵠⵠ: 873,
        ΔΔᐃᐃΔΔΔ: 874,
        ᐃⲆⵠⵠⵠᐃᐃ: 875,
        ⵠΔΔⲆΔⵠᐃ: 876,
        ⲆΔΔⲆΔΔⲆ: 877,
        ⵠΔΔΔⲆⲆⵠ: 878,
        ⲆΔᐃⵠᐃΔᐃ: 879,
        ⲆⲆⲆⲆⵠⲆΔ: 880,
        ᐃΔᐃΔⲆⲆⲆ: 881,
        ⲆᐃΔⲆΔⲆⲆ: 882,
        ⲆⲆⵠⲆΔᐃⵠ: 883,
        ⲆⵠⲆⲆⲆᐃᐃ: 884,
        ⵠᐃᐃⲆⲆΔⵠ: 885,
        ⵠⲆᐃᐃⲆⲆⲆ: 886,
        ⵠⵠⲆⵠᐃ: 887,
        ᐃΔᐃΔᐃΔΔ: 888,
        ᐃᐃⲆⲆⲆΔᐃ: 889,
        ΔⵠΔᐃⲆΔⲆ: 890,
        ⲆⲆᐃΔΔⵠΔ: 891,
        ⲆΔⵠΔΔⵠᐃ: 892,
        ᐃⵠⲆᐃΔⵠᐃ: 893,
        ᐃⲆᐃⵠⵠᐃΔ: 894,
        ⲆᐃⲆᐃΔⵠⲆ: 895,
        ᐃⲆⲆⲆΔⲆΔ: 896,
        ΔΔΔⵠⵠᐃⲆ: 897,
        ⵠΔΔΔΔᐃΔ: 898,
        ⲆⲆⲆᐃᐃⵠᐃ: 899,
        ΔᐃⲆᐃⵠΔΔ: 900,
        ⲆΔⲆᐃᐃᐃⲆ: 901,
        ⲆΔⲆΔᐃΔΔ: 902,
        ΔᐃⲆⲆᐃΔⵠ: 903,
        ⲆᐃΔⵠⲆⲆᐃ: 904,
        ΔΔⲆᐃⲆⲆᐃ: 905,
        ᐃⲆⲆᐃΔⵠᐃ: 906,
        ⲆⵠᐃⲆΔⲆΔ: 907,
        ⵠΔⲆⵠΔΔΔ: 908,
        ⵠΔⵠΔⲆᐃᐃ: 909,
        ΔΔᐃⲆΔᐃΔ: 910,
        ⲆⵠⵠᐃⲆⲆΔ: 911,
        ΔⲆΔⵠⲆᐃᐃ: 912,
        ⲆⲆⲆⵠΔΔΔ: 913,
        ⲆⲆΔⲆⲆⲆⵠΔᐃ: 914,
        ΔᐃᐃⵠⲆᐃⵠⵠⵠ: 915,
        ⵠΔⲆⵠΔᐃΔⵠΔ: 916,
        ⲆᐃⲆΔⲆⵠΔΔΔ: 917,
        ᐃΔⵠⲆΔΔᐃ: 918,
        ⵠΔⲆΔⲆⵠⲆ: 919,
        ⵠᐃΔⵠⵠ: 920,
        ᐃΔΔⵠΔⲆᐃ: 921,
        ⲆⵠⲆⵠΔΔⵠ: 922,
        ⵠⲆⵠΔⵠΔⲆ: 923,
        ᐃΔⲆⵠⵠΔⲆ: 924,
        ⵠᐃᐃⵠᐃⵠⵠ: 925,
        ᐃⲆⵠⵠΔᐃⲆ: 926,
        ΔᐃⵠⵠΔΔΔ: 927,
        ⲆᐃⵠⵠⲆᐃⵠ: 928,
        ᐃⵠᐃⵠⵠⲆΔ: 929,
        ⵠⵠᐃⲆⲆΔΔ: 930,
        ⵠⲆΔⲆΔΔΔ: 931,
        ᐃⲆΔⲆᐃⵠⲆ: 932,
        ΔᐃᐃᐃΔⵠⲆ: 933,
        ΔⲆΔⵠᐃᐃᐃ: 934,
        ⵠΔⲆⵠⵠⲆⵠ: 935,
        ΔⲆⲆⲆΔᐃⵠ: 936,
        ⲆᐃΔⵠΔᐃΔ: 937,
        ⲆᐃᐃⲆᐃⵠⵠ: 938,
        ᐃⵠᐃⵠⵠΔⵠ: 939,
        ΔⵠⵠΔᐃⵠⲆΔᐃ: 940,
        ΔⲆΔᐃᐃ: 941,
        ⲆΔᐃΔⵠⵠⵠ: 942,
        ᐃᐃᐃⵠⵠᐃΔ: 943,
        ⲆΔⲆⵠΔⵠΔ: 944,
        ᐃΔⵠⲆᐃⵠᐃ: 945,
        ᐃΔⵠᐃᐃΔⲆ: 946,
        ΔⵠⵠⲆΔΔᐃ: 947,
        ⵠⲆⵠⲆⵠⲆⲆ: 948,
        ⵠⵠᐃΔⲆⵠⲆ: 949,
        ⲆᐃΔΔⵠⲆΔ: 950,
        ⲆⵠⲆⲆᐃᐃᐃ: 951,
        ᐃⵠΔⲆⲆΔⵠ: 952,
        ΔΔⲆᐃᐃΔⲆ: 953,
        ΔΔⲆᐃⲆᐃᐃ: 954,
        ⲆΔᐃΔᐃΔⲆ: 955,
        ⲆⲆᐃᐃΔΔΔ: 956,
        ᐃⲆΔΔⵠⲆᐃ: 957,
        ΔⲆᐃⵠᐃΔⵠ: 958,
        ΔΔⲆΔⲆᐃΔ: 959,
        ⲆⲆⲆᐃΔΔⵠ: 960,
        ⲆⵠΔΔⲆᐃⲆ: 961,
        ΔⲆⲆⲆⲆΔΔ: 962,
        ᐃᐃⲆΔᐃⵠⵠ: 963,
        ΔᐃⲆⲆᐃⵠⲆΔⲆ: 964,
        ⲆⲆⵠⵠΔᐃⲆ: 965,
        ⵠΔⲆᐃⲆΔⲆ: 966,
        ⲆΔΔΔⲆΔΔ: 967,
        ⵠⵠᐃΔⵠᐃⵠ: 968,
        ⵠⵠΔⵠᐃⵠⵠ: 969,
        Ⲇⵠⵠᐃᐃⵠᐃ: 970,
        ΔᐃⲆⲆⲆᐃΔ: 971,
        ᐃΔΔΔΔⵠΔ: 972,
        ⲆⵠⲆΔᐃΔᐃ: 973,
        ⲆΔⲆⲆᐃⵠΔ: 974,
        ᐃⵠΔᐃᐃᐃⵠ: 975,
        ⲆⵠⲆᐃⲆΔⲆ: 976,
        ᐃᐃΔⲆⲆΔⲆ: 977,
        ⵠⵠΔᐃⵠᐃⲆ: 978,
        ⵠⵠⲆⲆΔⵠΔ: 979,
        ᐃⵠΔᐃΔⵠⲆ: 980,
        ᐃΔⲆⵠΔⵠΔ: 981,
        ᐃΔᐃᐃⲆⲆⵠ: 982,
        ᐃⲆⵠⲆΔᐃⵠ: 983,
        ᐃⵠᐃΔΔⲆΔ: 984,
        ⵠⵠⲆᐃΔᐃⲆ: 985,
        ᐃᐃⲆⲆⲆᐃⲆ: 986,
        ⵠΔΔᐃΔᐃᐃ: 987,
        ⲆⲆΔⵠᐃⲆᐃ: 988,
        ⲆⲆᐃⲆᐃ: 989,
        ᐃⲆⵠⲆᐃⲆⵠ: 990,
        ⵠⵠⵠⵠΔΔᐃ: 991,
        ᐃⵠᐃΔⵠⲆΔ: 992,
        ⲆⲆΔᐃⲆⵠΔ: 993,
        ⵠᐃΔⵠⵠⵠⵠ: 994,
        ᐃⲆᐃΔΔΔⲆ: 995,
        ΔΔⲆΔᐃⲆⲆ: 996,
        ΔᐃΔΔⲆΔᐃ: 997,
        ⲆⵠⵠⵠΔᐃⵠ: 998,
        ⲆⲆⵠⵠⵠⲆᐃ: 999,
        ⵠᐃⵠΔᐃΔⵠ: 1000,
        ⵠΔᐃⵠⵠⲆᐃ: 1001,
        ᐃΔⲆᐃΔᐃⲆ: 1002,
        ⲆⲆΔⵠΔⲆⵠ: 1003,
        ⲆᐃⵠⲆᐃΔᐃ: 1004,
        ᐃⵠⲆⲆΔⵠΔ: 1005,
        ΔⵠⲆⵠΔⵠⵠ: 1006,
        ⵠⲆΔᐃᐃᐃⲆ: 1007,
        ⵠΔⲆΔΔΔᐃ: 1008,
        ΔΔⲆⵠⲆⲆΔ: 1009,
        ⵠᐃᐃᐃΔᐃⲆ: 1010,
        ⵠᐃⲆᐃΔⲆⵠ: 1011,
        ΔΔⲆⵠΔΔⲆ: 1012,
        ⵠΔᐃΔΔⵠⲆ: 1013,
        ᐃᐃⲆΔⲆⵠⲆ: 1014,
        ⵠⲆᐃΔᐃᐃⵠ: 1015,
        ⲆⲆⵠⲆⲆΔⲆ: 1016,
        ⵠΔⲆᐃᐃⲆⲆ: 1017,
        ⵠⵠΔᐃᐃⲆⵠ: 1018,
        ΔΔΔⵠⲆⵠΔ: 1019,
        ⲆΔⵠΔᐃⲆᐃ: 1020,
        ᐃΔΔⵠⵠᐃᐃ: 1021,
        ⲆΔⲆᐃⵠⲆⵠ: 1022,
        ΔⵠᐃⵠⲆᐃᐃ: 1023,
        ᐃΔⲆΔ: 1024,
        ⲆⲆᐃΔ: 1025,
        ΔⵠⲆⲆⵠᐃΔ: 1026,
        ⵠⵠΔΔᐃⲆⲆ: 1027,
        ⲆΔⵠⲆᐃΔⲆ: 1028,
        ΔⵠᐃⵠᐃΔᐃ: 1029,
        ᐃᐃⵠΔᐃᐃΔ: 1030,
        ΔΔⵠⲆⵠⲆΔ: 1031,
        ᐃΔΔᐃᐃⵠⵠ: 1032,
        ΔⲆⵠⲆⲆ: 1033,
        ΔⲆΔΔΔⲆⵠ: 1034,
        ΔⵠⲆᐃᐃ: 1035,
        ᐃᐃΔⵠΔΔⵠ: 1036,
        ⲆᐃⵠΔⲆ: 1037,
        ΔⵠᐃⲆᐃᐃᐃ: 1038,
        ΔᐃⲆᐃΔ: 1039,
        ΔⲆⵠⲆΔⵠᐃ: 1040,
        ΔᐃᐃΔΔ: 1041,
        ⲆΔΔΔΔ: 1042,
        ⲆΔⲆⲆΔⲆᐃ: 1043,
        ΔΔⲆⲆΔΔᐃ: 1044,
        ⵠᐃⲆᐃⵠⲆᐃ: 1045,
        ⲆⵠΔⲆΔⲆΔ: 1046,
        ⲆΔᐃⲆⲆⵠᐃ: 1047,
        ⲆᐃⵠΔⵠᐃⵠ: 1048,
        ⲆⵠⵠⲆⲆᐃᐃ: 1049,
        ΔΔᐃⵠΔᐃⵠ: 1050,
        ΔⲆⵠⲆΔΔⲆ: 1051,
        ⲆⲆΔΔⲆ: 1052,
        ⲆⲆᐃⲆⲆᐃⲆ: 1053,
        ⲆⲆᐃⵠΔ: 1054,
        ⵠΔⵠᐃⵠⲆⲆ: 1055,
        ⲆⲆⲆᐃᐃΔΔ: 1056,
        ᐃⲆⲆᐃᐃⲆⲆ: 1057,
        ᐃⲆⲆⲆΔᐃΔ: 1058,
        ⵠᐃⵠΔⲆⵠⲆ: 1059,
        ᐃⵠⲆΔᐃⲆᐃ: 1060,
        ⵠⲆΔᐃⵠⲆᐃᐃᐃ: 1061,
        ᐃⲆᐃΔⲆⵠⲆ: 1062,
        ⲆⵠᐃⲆⵠⲆᐃ: 1063,
        ΔⲆΔⵠⲆⵠᐃᐃⵠ: 1064,
        ⲆⵠᐃⵠⵠⲆⲆ: 1065,
        ⲆΔⵠΔⲆⲆⲆ: 1066,
        ⲆᐃΔⵠᐃⵠⲆ: 1067,
        ᐃⲆⲆᐃᐃΔⵠ: 1068,
        ⵠΔⲆⵠΔ: 1069,
        ⵠⵠᐃΔⲆⵠᐃ: 1070,
        ⲆⵠⵠⵠⵠⵠⲆ: 1071,
        ᐃΔⲆᐃᐃⵠᐃ: 1072,
        ⲆᐃⵠΔⲆⲆⵠ: 1073,
        ᐃⲆⲆΔⵠⲆΔ: 1074,
        ᐃᐃⵠᐃᐃⲆᐃ: 1075,
        ΔⲆⲆⲆⲆⲆⵠ: 1076,
        ⲆᐃⲆⵠᐃᐃᐃ: 1077,
        ⵠΔᐃⵠⵠⵠΔ: 1078,
        ΔⲆΔⵠⲆᐃΔ: 1079,
        ΔΔᐃΔⲆᐃᐃ: 1080,
        ⲆⲆΔᐃᐃⵠⲆ: 1081,
        ᐃⵠⵠᐃᐃⵠⲆ: 1082,
        ⵠⵠⲆΔⵠⵠⵠ: 1083,
        ⵠᐃⲆᐃΔ: 1084,
        ⵠⵠΔⲆΔⵠⲆ: 1085,
        ΔᐃΔⵠⲆᐃⵠ: 1086,
        ⵠⲆⵠⲆΔⲆᐃ: 1087,
        ᐃᐃⲆΔᐃⵠᐃ: 1088,
        ⵠΔⵠᐃΔΔⵠ: 1089,
        ΔᐃᐃᐃⲆᐃⲆ: 1090,
        ᐃⲆΔⵠᐃᐃΔ: 1091,
        ΔⲆΔⲆᐃΔᐃ: 1092,
        ΔⲆⵠⵠᐃⵠΔ: 1093,
        ⲆⲆⲆᐃⵠΔΔ: 1094,
        ᐃΔⵠⵠⲆΔⵠ: 1095,
        ᐃⲆⵠⵠⵠⵠⲆ: 1096,
        ⲆⲆΔⵠΔⲆΔ: 1097,
        ⵠⲆⵠΔΔᐃΔ: 1098,
        ΔⲆⵠⲆΔ: 1099,
        ᐃᐃΔⲆⲆᐃⵠ: 1100,
        ΔⲆΔⵠᐃⲆᐃ: 1101,
        ⵠΔⵠΔΔⲆᐃ: 1102,
        ⵠᐃⲆⵠΔⵠᐃ: 1103,
        ⵠⲆⲆⵠᐃΔΔ: 1104,
        ΔⵠⵠⲆⵠᐃᐃ: 1105,
        ⲆᐃᐃΔⵠⲆⵠ: 1106,
        ⲆⵠᐃⵠᐃᐃⲆ: 1107,
        ΔⲆΔⵠᐃⵠΔ: 1108,
        ⲆΔⲆⵠΔⵠⵠ: 1109,
        ⵠⵠⲆᐃⲆⵠᐃ: 1110,
        ⵠᐃᐃΔⵠΔⲆ: 1111,
        ᐃⲆⵠⵠΔΔΔ: 1112,
        ⵠⵠΔⵠⵠⲆⵠ: 1113,
        ⵠΔⲆⵠᐃⲆΔ: 1114,
        ΔⵠΔⵠΔΔⵠ: 1115,
        ⲆᐃΔΔᐃⲆⵠ: 1116,
        ⲆⵠⲆⲆᐃⲆⲆ: 1117,
        ⲆᐃⵠΔⲆΔΔ: 1118,
        ⲆΔⲆⵠᐃΔᐃ: 1119,
        ᐃΔΔⲆΔ: 1120,
        ΔⲆΔⵠⲆⵠⵠ: 1121,
        ΔⲆΔΔΔᐃᐃ: 1122,
        ᐃⵠΔⲆⵠⲆⵠ: 1123,
        ᐃᐃⲆᐃᐃⵠᐃ: 1124,
        ⵠⵠⲆⲆⲆⲆⲆ: 1125,
        ⵠⲆΔⵠᐃⵠⵠ: 1126,
        ⲆΔΔᐃⵠΔᐃ: 1127,
        ⵠᐃΔᐃᐃᐃᐃ: 1128,
        ⲆΔᐃΔᐃⲆᐃ: 1129,
        ᐃⵠᐃΔΔΔᐃ: 1130,
        ⵠΔΔᐃΔⵠⲆ: 1131,
        ⲆⲆⵠᐃⲆΔⲆ: 1132,
        ⲆⵠⵠΔΔᐃⲆ: 1133,
        ᐃⵠⵠΔΔΔΔ: 1134,
        ᐃᐃᐃᐃⵠᐃⵠ: 1135,
        ⵠᐃᐃⵠΔⲆⵠ: 1136,
        Δᐃⵠᐃᐃⵠᐃ: 1137,
        ⲆΔⲆᐃⲆΔΔ: 1138,
        ΔⵠⲆⵠⵠⵠⵠ: 1139,
        ⲆⵠΔᐃΔⵠⵠ: 1140,
        ᐃΔᐃⲆⵠΔΔ: 1141,
        ΔⵠΔⵠⵠᐃΔ: 1142,
        ᐃᐃᐃΔⵠᐃⵠ: 1143,
        ⵠᐃΔⲆⲆΔⵠ: 1144,
        ᐃⵠᐃᐃⲆⵠⲆ: 1145,
        ⲆᐃᐃΔᐃΔΔ: 1146,
        ᐃⲆᐃᐃᐃᐃⲆ: 1147,
        ⲆΔⵠⲆᐃⲆᐃ: 1148,
        ᐃᐃᐃⵠΔΔⵠ: ["#E9CF96", "#144940"],
        ⵠⲆⵠⵠᐃⵠⵠ: 1149,
        ᐃΔⲆⲆᐃⲆⵠ: 1150,
        ᐃΔᐃᐃΔⵠⲆ: 1151,
        ⵠᐃⵠⲆⵠⵠᐃ: 1152,
        ΔΔᐃΔᐃⵠΔ: 1153,
        ᐃᐃᐃⵠⵠΔᐃ: 1154,
        ⵠΔⵠᐃⲆΔᐃ: 1155,
        ᐃⵠᐃΔⲆ: 1156,
        ⵠⲆⲆⵠⵠᐃΔ: 1157,
        ⵠᐃᐃᐃᐃⲆᐃ: 1158,
        ⵠΔΔᐃⲆⵠᐃ: 1159,
        ΔⲆΔⵠⲆⲆⲆ: 1160,
        ⲆᐃⲆⵠⵠΔⲆ: 1161,
        ΔⲆⵠᐃⲆⵠⲆ: 1162,
        ⲆⲆⵠⲆᐃⵠⵠ: 1163,
        ᐃⲆⲆⵠⲆⵠᐃ: 1164,
        ᐃΔⲆⵠⵠᐃⵠ: 1165,
        ⵠᐃΔⵠⲆⲆⵠ: 1166,
        ⵠΔᐃⵠⵠΔΔ: 1167,
        ᐃⵠⵠΔⲆⲆᐃ: 1168,
        ΔΔᐃⲆⲆΔⲆ: 1169,
        ΔⲆᐃΔᐃΔⲆ: 1170,
        ⲆⲆΔΔⵠΔⵠ: 1171,
        ⵠⲆΔΔΔⵠⵠ: 1172,
        ⵠⵠⲆΔΔᐃⵠ: 1173,
        ᐃΔᐃᐃⲆⲆⲆ: 1174,
        ⲆⲆⲆⵠᐃᐃⵠ: 1175,
        ᐃⵠΔΔⵠᐃⲆ: 1176,
        ᐃⲆᐃΔⵠⵠⲆ: 1177,
        ⲆⲆⲆΔⲆⲆⲆ: 1178,
        ΔᐃⲆΔⵠⲆᐃ: 1179,
        ⵠⵠⵠᐃᐃΔᐃ: 1180,
        ⵠⵠᐃᐃⵠⲆⲆ: 1181,
        ΔⵠⲆⵠΔΔⵠ: 1182,
        ⲆⲆᐃⲆⲆⵠᐃ: 1183,
        ⲆⲆⲆᐃΔⵠⵠ: 1184,
        ⵠᐃⵠΔΔᐃⲆ: 1185,
        ΔᐃᐃΔⵠⵠⲆ: 1186,
        ᐃⲆⵠⵠⲆⲆⲆ: 1187,
        ᐃΔΔΔⵠᐃᐃ: 1188,
        ⵠΔΔⵠⲆᐃⲆ: 1189,
        ⵠⲆⲆⲆⵠᐃⵠ: 1190,
        ΔᐃΔΔΔΔⵠ: 1191,
        ⲆⵠⵠⵠⲆⲆΔ: 1192,
        ᐃᐃᐃⲆⵠⵠΔ: 1193,
        ⲆᐃᐃⵠⵠⵠΔ: 1194,
        ᐃΔⵠΔⵠᐃᐃ: 1195,
        ⵠⲆᐃⲆᐃᐃⲆ: 1196,
        ᐃⲆⲆΔⵠⵠᐃ: 1197,
        ⲆⵠᐃΔⵠⵠⵠ: 1198,
        ᐃᐃᐃⲆⲆⲆΔ: 1199,
        ⵠⵠᐃⵠᐃᐃᐃ: 1200,
        ᐃΔΔΔⵠᐃⵠ: 1201,
        ΔᐃⲆⲆΔᐃᐃ: 1202,
        ᐃⵠⲆⵠᐃⵠΔ: 1203,
        ⵠⵠⵠⵠⵠΔⲆ: 1204,
        ⵠΔΔⵠⲆⲆⲆ: 1205,
        ᐃⲆⲆᐃΔⵠΔ: 1206,
        ΔᐃΔΔⵠΔⲆ: 1207,
        ⲆⲆΔⲆⲆΔΔ: 1208,
        ᐃΔΔᐃⲆⵠⵠ: 1209,
        ΔⵠⲆⵠΔᐃΔ: 1210,
        ᐃⵠⵠⲆⲆⲆΔ: 1211,
        ᐃᐃⵠⲆⲆᐃⲆ: 1212,
        ΔⲆⵠΔⲆΔΔ: 1213,
        ᐃᐃⵠⲆⵠⵠΔ: 1214,
        ΔᐃⵠⲆᐃΔᐃ: 1215,
        ᐃᐃⲆΔΔΔⲆ: 1216,
        ⲆⵠⲆᐃᐃᐃⲆ: 1217,
        ᐃᐃΔⵠΔ: 1218,
        ⲆⲆⵠⵠᐃⲆⲆ: 1219,
        ⵠⵠΔΔᐃ: 1220,
        ⲆⵠⵠᐃⵠⲆⵠ: 1221,
        ᐃᐃᐃΔΔⲆᐃ: 1222,
        ΔⲆⵠΔΔᐃΔ: 1223,
        ⵠⲆⵠⵠᐃᐃⲆ: 1224,
        ΔⵠⵠᐃⲆⲆᐃ: 1225,
        ⵠᐃᐃⵠⵠΔⵠ: 1226,
        ⲆΔΔᐃⲆⲆⵠ: 1227,
        ΔΔᐃⲆⵠᐃⲆ: 1228,
        ⲆⵠΔⵠΔᐃⵠ: 1229,
        ᐃΔᐃⲆⲆⲆΔ: 1230,
        ᐃⲆⲆⲆⲆΔΔ: 1231,
        ΔⲆΔΔⲆΔΔ: 1232,
        ᐃΔΔⲆᐃᐃᐃ: 1233,
        ⵠⵠⲆΔΔⲆᐃ: 1234,
        ⲆⲆΔⲆⵠⲆΔ: 1235,
        ΔⵠᐃᐃⲆΔⵠ: 1236,
        ⵠⵠᐃΔⲆΔⵠ: 1237,
        ⲆΔᐃⲆⵠⲆⵠ: 1238,
        ᐃΔⲆΔᐃⲆᐃ: 1239,
        ᐃΔᐃΔᐃⲆⲆ: 1240,
        ⵠⲆⲆⲆⲆⵠᐃ: 1241,
        ⲆⵠⲆⲆⵠⵠⵠ: 1242,
        ⲆΔΔΔᐃⲆⵠ: 1243,
        ᐃΔⵠΔΔⲆΔ: 1244,
        ᐃΔⵠⲆᐃᐃⵠ: 1245,
        ⵠᐃⲆⲆᐃⵠⲆ: 1246,
        ΔⲆΔⲆᐃᐃⵠ: 1247,
        ⵠⲆⵠᐃⵠΔⲆ: 1248,
        ᐃΔᐃΔᐃⵠⲆ: 1249,
        ΔⵠⵠΔΔΔⵠ: 1250,
        ᐃⲆⲆⲆⵠᐃⲆ: 1251,
        ⵠⲆΔΔⲆⵠⵠ: 1252,
        ᐃⵠΔⲆⲆΔⲆ: 1253,
        ᐃⲆⲆΔᐃᐃⲆ: 1254,
        ᐃΔᐃⲆΔᐃⵠ: 1255,
        ⲆⲆᐃΔΔⲆⲆ: 1256,
        ᐃᐃⲆⲆΔᐃΔ: 1257,
        ⵠᐃⵠΔⲆΔΔ: 1258,
        ⲆΔⲆΔⲆΔᐃ: 1259,
        ⲆΔΔᐃⲆᐃᐃ: 1260,
        ⲆΔᐃΔⵠⲆⵠ: 1261,
        ⲆΔᐃΔⲆⵠᐃ: 1262,
        ᐃⵠΔᐃⵠⵠⲆ: 1263,
        ᐃⵠⵠⵠⵠΔⵠ: 1264,
        ⵠᐃⲆⲆⲆⲆᐃ: 1265,
        ΔⵠᐃΔΔΔⵠ: 1266,
        ⵠΔⲆᐃΔⲆᐃ: 1267,
        ⵠⲆⵠⵠⲆⲆΔ: 1268,
        ⲆⵠΔΔⲆᐃΔ: 1269,
        ΔⲆΔᐃⵠⵠⵠ: 1270,
        ⵠΔᐃΔΔᐃⵠ: 1271,
        ΔᐃⵠᐃⵠⲆⵠ: 1272,
        ⲆⵠᐃⲆΔⵠᐃ: 1273
    };
    Or = 0;
    const Qr = 16;
    var Rr = {
        ΔΔᐃΔⵠ: 0,
        ΔᐃⲆΔⲆ: 1,
        ΔᐃΔⵠΔ: 2,
        ⵠⵠⲆΔᐃ: 3,
        ⲆⲆᐃⵠⵠ: 4,
        ΔᐃⲆⲆΔ: 5,
        ⲆᐃᐃᐃΔ: 6,
        ⲆⲆⲆΔΔ: 7,
        ⲆⲆⵠᐃΔ: 8,
        ΔΔᐃⵠⵠ: 9,
        ᐃΔⵠⲆΔ: 10,
        ᐃᐃΔᐃⲆ: 11,
        ⵠΔᐃⲆⵠ: 12,
        ΔⵠΔᐃᐃ: 13,
        ΔᐃⲆⵠⵠ: 14,
        ᐃⲆᐃΔΔ: 15,
        ΔⲆΔⵠᐃ: 16,
        ᐃⵠΔᐃⲆ: 17,
        ΔΔⲆⵠⲆ: 18,
        Ⲇⵠⵠᐃⵠ: 19,
        ΔᐃΔⵠⵠ: 20,
        ΔⵠΔᐃⵠ: 21,
        ⵠⵠΔᐃΔ: 22,
        ᐃⲆᐃⲆⵠ: 23,
        ΔᐃⲆᐃⵠ: 24,
        ΔΔⵠΔᐃ: 25,
        ⲆᐃΔⵠΔ: 26,
        ⵠᐃΔⵠᐃ: 27,
        ⲆⵠⵠΔΔ: 28,
        ⵠⵠⲆⵠⲆ: 29,
        ᐃᐃⵠⲆⲆ: 30,
        ᐃΔⲆⵠΔ: 31,
        ᐃⵠⲆⵠⲆ: 32,
        ⲆⲆⲆᐃⲆ: 33,
        ⲆᐃΔⵠⵠ: 34,
        ᐃΔⵠΔᐃ: 35,
        ⲆⲆΔᐃΔ: 36,
        ⵠⲆⵠᐃⵠ: 37,
        Ⲇⵠᐃⵠᐃ: 38,
        ⲆⲆⲆᐃᐃ: 39,
        ⵠᐃΔᐃⵠ: 40,
        ᐃⵠⵠΔᐃ: 41,
        ΔⲆΔⲆᐃ: 42,
        ⵠⲆⵠⵠΔ: 43,
        ⵠⵠⵠⲆⵠ: 44,
        ⲆᐃⵠⲆΔ: 45,
        ᐃΔΔΔⲆ: 46,
        ΔΔⲆⲆⵠ: 47,
        ⵠⵠⵠΔΔ: 48,
        ⲆΔⲆⵠⲆ: 49,
        Ⲇᐃⵠᐃᐃ: 50,
        ⲆΔⲆⵠᐃ: 51,
        ΔⵠΔⵠᐃ: 52,
        ⵠⵠΔⲆᐃ: 53,
        ⵠΔᐃⲆΔ: 54,
        ΔᐃⵠᐃΔ: 55,
        ΔᐃᐃⵠⲆ: 56,
        ⵠⵠᐃⲆΔ: 57,
        ᐃⵠⲆΔⵠ: 58,
        ΔⵠᐃΔΔ: 59,
        ΔΔⵠᐃΔ: 60,
        Δᐃᐃᐃⵠ: 61,
        ⵠⲆⲆΔᐃ: 62,
        ΔΔΔⲆᐃ: 63,
        ᐃᐃⵠᐃⲆ: 64,
        ⲆⵠΔⵠΔ: 65,
        ⵠᐃᐃΔᐃ: 66,
        ⲆⵠᐃⵠΔ: 67,
        ⵠᐃᐃΔⵠ: 68,
        ⲆΔᐃΔᐃ: 69,
        ⲆΔΔᐃΔ: 70,
        ᐃⲆΔΔᐃ: 71,
        ⵠΔⵠⲆΔ: 72,
        ⵠⵠᐃⲆⵠ: 73,
        ᐃΔᐃⲆⵠ: 74,
        ⵠᐃᐃⲆΔ: 75,
        ΔⲆⲆᐃⵠ: 76,
        ᐃⲆⵠΔΔ: 77,
        ⵠᐃⲆᐃᐃ: 78,
        ᐃⲆⲆⲆᐃ: 79,
        ⵠΔⵠΔᐃ: 80,
        ⵠΔⵠⵠᐃ: 81,
        ᐃΔⲆⲆΔ: 82,
        ⵠⵠⲆⲆᐃ: 83,
        ⲆᐃⵠΔΔ: 84,
        ᐃⲆΔⲆⵠ: 85,
        ⵠⵠⲆⲆⲆ: 86,
        ⲆⵠⵠᐃⲆ: 87,
        ΔΔΔᐃᐃ: 88,
        ⲆᐃⵠᐃⲆ: 89,
        ΔᐃᐃᐃⲆ: 90,
        ⵠᐃⲆΔⵠ: 91,
        ⵠΔⵠᐃΔ: 92,
        ᐃΔⲆⲆᐃ: 93,
        ⵠᐃⵠⵠΔ: 94,
        ⵠᐃⵠΔⵠ: 95,
        ⵠⲆᐃΔⲆ: 96,
        ⲆΔᐃΔⲆ: 97,
        ΔΔⵠᐃⲆ: 98,
        ⵠΔᐃΔⵠ: 99,
        ⲆΔⲆⲆ: 100,
        Δⵠᐃⵠᐃ: 101,
        ᐃᐃΔΔⲆ: 102,
        ΔΔⲆΔᐃ: 103,
        ⵠⲆⵠⲆⵠ: 104,
        ΔⲆⲆᐃⲆ: 105,
        ᐃⵠⵠⵠⲆ: 106,
        ⵠⲆΔⵠᐃ: 107,
        ⵠⲆᐃΔⵠ: 108,
        ΔΔΔⵠΔ: 109,
        ΔⲆⵠⵠⵠ: 110,
        ᐃΔᐃⲆΔ: 111,
        ᐃⵠⲆΔΔΔᐃ: 112,
        ⲆΔⲆΔⵠΔⵠ: 113,
        ⲆᐃⵠⵠⲆ: 114,
        ΔⲆⵠΔᐃ: 115,
        ᐃⵠⲆⲆᐃ: 116,
        ΔⵠΔⵠⲆ: 117,
        ⲆⵠᐃⲆⲆ: 118,
        ΔⵠᐃᐃΔ: 119,
        ⵠΔᐃⲆⲆ: 120,
        ⲆΔⵠⲆΔ: 121,
        ⵠⲆΔⲆᐃ: 122,
        ⲆᐃⲆⵠⲆ: 123,
        ⵠⲆⲆⵠᐃ: 124,
        ΔΔᐃⲆᐃ: 125,
        ΔΔⲆΔΔ: 126,
        ⲆᐃⵠⵠΔ: 127,
        ⲆΔᐃᐃⲆ: 128,
        ΔΔⵠΔⲆ: 129,
        ᐃⵠΔⵠᐃ: 130,
        ⲆᐃⲆⲆΔ: 131,
        ᐃⲆᐃΔᐃ: 132,
        ᐃᐃΔΔᐃ: 133,
        ᐃᐃⵠⵠⲆ: 134,
        ⲆⲆⲆᐃΔ: 135,
        ⲆΔΔⵠᐃ: 136,
        ⲆΔⲆⲆᐃ: 137,
        ⲆᐃΔᐃⵠ: 138,
        ΔⵠⲆⲆⵠ: 139,
        ᐃΔΔᐃⲆ: 140,
        ⲆᐃⲆΔⲆ: 141,
        ΔⵠⲆᐃⵠ: 142,
        ᐃⲆᐃΔⲆ: 143,
        ΔΔΔΔⲆ: 144,
        ᐃΔⲆⵠⵠ: 145,
        ⵠⲆΔΔⲆ: 146,
        ⲆΔᐃΔΔ: 147,
        ΔⵠᐃⲆᐃ: 148,
        ΔᐃⵠⵠΔ: 149,
        ᐃΔΔⵠⵠ: 150,
        ΔΔⵠⲆᐃ: 151,
        ⵠⵠᐃⵠⵠ: 152,
        ᐃΔⲆᐃΔ: 153,
        ⲆⲆⲆΔⲆ: 154,
        ⲆⵠΔⲆⲆ: 155,
        ⲆⲆΔⲆᐃ: 156,
        ⲆΔᐃᐃᐃ: 157,
        ᐃⲆΔⲆᐃ: 158,
        ΔⵠⵠΔⵠ: 159,
        ⲆΔΔΔⵠ: 160,
        ⲆⲆᐃΔᐃ: 161,
        ᐃᐃⵠⵠΔ: 162,
        ᐃⵠᐃΔⵠ: 163,
        ⵠᐃᐃᐃⲆ: 164,
        ⲆⲆⲆⵠᐃ: 165,
        ᐃΔⵠⲆᐃ: 166,
        ⲆᐃⲆᐃⵠ: 167,
        ΔⵠΔᐃⲆ: 168,
        ⵠᐃⵠᐃᐃ: 169,
        ᐃⵠᐃⵠΔ: 170,
        ⵠⲆⲆⲆᐃ: 171,
        ⵠⲆΔⵠⵠ: 172,
        ΔⲆⵠⲆᐃ: 173,
        ᐃⲆⲆΔΔ: 174,
        ΔⲆᐃᐃⵠ: 175,
        ᐃΔⵠΔⵠ: 176
    };
    const Sr = cr;
    const Tr = 20;
    const Ur = 6;
    Or = 0;
    var Vr = {
        ᐃΔⵠΔᐃ: 0,
        ΔᐃⲆⲆΔ: 1,
        ⵠⲆⵠⵠⵠ: 2,
        ⲆᐃᐃᐃΔ: 3,
        ⲆⲆⲆΔΔ: 4,
        ⲆⲆΔᐃΔ: 5,
        ⵠⲆⵠᐃⵠ: 6,
        ᐃⲆΔΔΔ: 7,
        ⲆⲆᐃⵠⵠ: 8,
        ⵠΔⲆΔⵠ: 9,
        ⵠⵠⲆⲆᐃ: 10,
        ⲆᐃⵠΔΔ: 11,
        ΔΔⵠΔᐃ: 12,
        ⲆᐃΔⵠΔ: 13,
        ⵠᐃΔⵠᐃ: 14,
        ⲆⵠⵠΔΔ: 15,
        ᐃΔⲆⵠΔ: 16,
        ᐃⵠⲆⵠⲆ: 17,
        ⲆⲆⲆᐃⲆ: 18,
        ⲆⲆⲆᐃᐃ: 19,
        ⵠᐃⵠΔⵠ: 20,
        ⵠⲆᐃΔⲆ: 21,
        ⲆΔᐃΔⲆ: 22,
        ⵠΔⵠΔᐃ: 23,
        ⵠΔⵠⵠᐃ: 24,
        ΔΔΔᐃᐃ: 25,
        ⲆᐃⵠᐃⲆ: 26,
        ΔᐃᐃᐃⲆ: 27,
        ΔᐃⲆᐃⵠ: 28,
        ⲆΔⲆⲆ: 29,
        Ⲇⵠᐃⵠᐃ: 30,
        ⲆⲆⵠᐃΔ: 31,
        ΔΔᐃⵠⵠ: 32,
        ⵠⵠⲆⵠⲆ: 33,
        ᐃᐃⵠⲆⲆ: 34,
        ᐃΔⵠⲆΔ: 35,
        ᐃᐃΔᐃⲆ: 36,
        ⵠΔᐃⲆⵠ: 37,
        ΔⵠΔᐃᐃ: 38,
        ΔᐃⲆⵠⵠ: 39,
        ᐃⲆΔⲆⵠ: 40,
        ⲆⲆⵠᐃᐃ: 41,
        ΔᐃⲆΔΔ: 42,
        ⵠᐃⲆΔⵠ: 43,
        ⵠΔⵠᐃΔ: 44,
        ᐃⲆᐃΔΔ: 45,
        ΔⲆΔⵠᐃ: 46,
        ⵠᐃⵠⵠΔ: 47,
        ᐃΔⲆⲆᐃ: 48,
        ΔⵠΔᐃⵠ: 49,
        ᐃⵠΔᐃⲆ: 50,
        ΔΔⲆⵠⲆ: 51,
        Ⲇⵠⵠᐃⵠ: 52,
        ⵠⵠΔᐃΔ: 53,
        ᐃⲆᐃⲆⵠ: 54,
        ⵠⲆΔⲆᐃ: 55,
        ⲆᐃⲆⵠⲆ: 56,
        ⲆᐃΔⵠⵠ: 57,
        ⲆⵠⵠᐃⲆ: 58,
        ΔΔⲆΔΔ: 59,
        ⲆᐃⵠⵠΔ: 60,
        ⲆΔᐃᐃⲆ: 61,
        ΔΔⵠΔⲆ: 62,
        ᐃⵠΔⵠᐃ: 63,
        ⲆᐃⲆⲆΔ: 64,
        ᐃᐃΔΔᐃ: 65,
        ⲆⲆⲆᐃΔ: 66,
        ⲆΔⲆⲆᐃ: 67,
        ΔⵠⲆⲆⵠ: 68,
        ⲆᐃⲆΔⲆ: 69,
        ᐃⲆᐃΔⲆ: 70,
        ᐃΔⲆⵠⵠ: 71,
        ⵠⲆΔΔⲆ: 72,
        ⲆΔᐃΔΔ: 73,
        ΔⵠᐃⲆᐃ: 74,
        ΔᐃⵠⵠΔ: 75,
        ᐃΔΔⵠⵠ: 76,
        ΔΔⵠⲆᐃ: 77,
        ⵠⵠᐃⵠⵠ: 78,
        ᐃΔⲆᐃΔ: 79,
        ΔΔⵠᐃⲆ: 80,
        ⵠΔᐃΔⵠ: 81,
        ᐃΔⲆⲆΔ: 82,
        ⲆⲆⲆΔⲆ: 83,
        ⲆⵠΔⲆⲆ: 84,
        ⲆⲆΔⲆᐃ: 85,
        ⲆΔᐃᐃᐃ: 86,
        ⲆⵠᐃⲆᐃ: 87,
        ⵠⵠⲆⲆⲆ: 88,
        ⲆⲆⲆⵠᐃ: 89,
        ΔⲆⵠⲆᐃ: 90,
        ᐃΔⵠΔⵠ: 91,
        ᐃⲆⲆΔΔ: 92,
        ΔⲆᐃᐃⵠ: 93,
        ⲆᐃⲆᐃⵠ: 94,
        ΔⵠΔᐃⲆ: 95,
        ⵠᐃⵠᐃᐃ: 96,
        ᐃⵠᐃⵠΔ: 97,
        ⵠⲆⲆⲆᐃ: 98,
        ⵠⲆΔⵠⵠ: 99,
        ᐃⲆⵠΔⲆ: 100,
        ᐃⲆᐃΔᐃ: 101,
        ᐃᐃⵠⵠⲆ: 102,
        ⲆΔΔⵠᐃ: 103,
        ⲆᐃΔᐃⵠ: 104,
        ᐃΔΔᐃⲆ: 105,
        ΔⵠⲆᐃⵠ: 106,
        ΔΔΔΔⲆ: 107,
        ΔⲆΔᐃ: 108,
        ⵠΔΔⲆ: 109,
        ᐃⵠΔⲆΔ: 110,
        ⲆⲆⵠⲆ: 111,
        ⲆⲆⲆⵠ: 112,
        ΔΔᐃΔⵠ: 113,
        ⵠⵠⲆΔᐃ: 114,
        ⵠᐃΔᐃⵠ: 115,
        ⲆⲆⲆⵠⲆ: 116,
        ⲆΔⲆⵠⲆ: 117,
        ΔᐃⲆΔⲆ: 118,
        ΔᐃΔⵠΔ: 119,
        Δⵠᐃⵠᐃ: 120,
        ᐃᐃᐃⲆ: 121,
        ΔⵠᐃΔΔ: 122,
        ᐃⲆΔΔᐃ: 123,
        ⲆⵠΔⵠΔ: 124,
        ᐃⵠⵠⵠⲆ: 125,
        ⵠᐃᐃⲆⲆ: 126,
        ᐃΔᐃⲆΔ: 127,
        ΔⲆⵠⵠⵠ: 128,
        ΔᐃΔⲆⲆ: 129,
        ΔᐃΔⵠⵠ: 130,
        ⵠⵠᐃᐃⲆ: 131,
        ᐃⵠⵠΔᐃ: 132,
        ΔⵠΔⵠᐃ: 133,
        ᐃⵠΔⲆⲆ: 134,
        ⲆᐃⵠⵠⲆ: 135,
        ⵠⵠΔⲆᐃ: 136,
        ⲆⲆᐃⲆⵠ: 137,
        Ⲇᐃⵠᐃᐃ: 138,
        ⲆⲆⲆⲆⲆ: 139,
        Ⲇⵠⵠᐃᐃ: 140,
        ΔΔΔⵠΔ: 141,
        ᐃᐃⵠⲆΔ: 142,
        ⲆΔⲆⵠᐃ: 143,
        ⵠⲆⲆⵠᐃ: 144,
        ΔΔᐃⲆᐃ: 145,
        ᐃⵠᐃᐃΔ: 146,
        ᐃᐃΔΔⲆ: 147,
        ΔΔⲆΔᐃ: 148,
        ᐃᐃⲆⵠΔ: 149,
        ΔⲆΔⵠⲆ: 150,
        ΔⲆⵠΔᐃ: 151,
        ᐃⵠⲆⲆᐃ: 152,
        ΔⵠΔⵠⲆ: 153,
        ⲆⵠᐃⲆⲆ: 154,
        ΔⵠᐃᐃΔ: 155,
        ⵠΔᐃⲆⲆ: 156,
        ⲆΔⵠⲆΔ: 157,
        ⵠⲆⵠⲆⵠ: 158,
        ΔⲆⲆᐃⲆ: 159,
        ⲆⵠᐃⵠΔ: 160,
        ⲆᐃⲆⵠΔ: 161,
        ΔᐃⵠᐃΔ: 162,
        ΔᐃᐃⵠⲆ: 163,
        ⵠⵠᐃⲆΔ: 164,
        ᐃⵠⲆΔⵠ: 165,
        Δᐃᐃᐃⵠ: 166,
        ᐃⲆⲆⲆᐃ: 167,
        ⵠᐃᐃΔⵠ: 168,
        ⲆΔᐃΔᐃ: 169,
        ⲆΔΔᐃΔ: 170,
        ⵠⲆⲆΔᐃ: 171,
        ΔΔΔⲆᐃ: 172,
        ᐃᐃⵠᐃⲆ: 173,
        ΔΔΔᐃⵠ: 174,
        ⵠⵠᐃⵠⲆ: 175,
        ᐃⵠᐃᐃⲆ: 176,
        ᐃⵠΔΔⲆ: 177,
        ⲆⵠⵠΔᐃ: 178,
        ⲆᐃⵠΔᐃ: 179,
        ᐃⲆΔⲆᐃ: 180,
        ΔⵠⵠΔⵠ: 181,
        ⲆΔΔΔⵠ: 182,
        ⲆⲆᐃΔᐃ: 183,
        ⲆⲆⲆΔⵠ: 184,
        ⵠⲆᐃⲆⲆ: 185,
        ⵠⵠΔⵠⵠ: 186,
        ⵠᐃⵠᐃΔ: 187,
        ΔⲆΔⲆᐃ: 188,
        ΔΔᐃΔᐃ: 189,
        ⵠⲆΔⵠᐃ: 190,
        ⵠⲆⵠⵠΔ: 191,
        ⲆⵠΔⵠⲆ: 192,
        ⵠⵠⵠⲆⵠ: 193,
        ⲆΔⵠⲆⲆ: 194,
        ⵠΔᐃⲆΔ: 195,
        ΔⲆⵠⵠⲆ: 196,
        ΔⵠⵠⲆΔ: 197,
        ᐃᐃⵠⵠΔ: 198,
        ΔᐃΔⲆᐃ: 199,
        ΔᐃᐃⲆⵠ: 200,
        ΔᐃⲆⲆⵠ: 201,
        ⲆⵠⲆⵠ: 202,
        ⲆⲆᐃΔΔ: 203,
        ⲆᐃⵠⲆΔ: 204,
        ΔΔⲆⵠᐃ: 205,
        ᐃΔΔΔⲆ: 206,
        ⲆⲆⲆⲆΔ: 207,
        ΔΔⲆⲆⵠ: 208,
        ΔᐃᐃⲆᐃ: 209,
        ⵠⵠⵠΔΔ: 210,
        ᐃⵠⵠᐃΔ: 211,
        ⵠⵠᐃⲆⵠ: 212,
        ᐃΔᐃⲆⵠ: 213,
        ⵠᐃᐃⲆΔ: 214,
        ΔⲆⲆᐃⵠ: 215,
        ᐃⲆⵠΔΔ: 216,
        ΔΔⵠᐃΔ: 217,
        ⵠᐃᐃΔᐃ: 218,
        ⵠΔⵠⲆΔ: 219,
        ⵠᐃⲆᐃᐃ: 220,
        ⵠⲆᐃΔⵠ: 221,
        ᐃⲆⵠⲆᐃ: 222,
        ᐃⵠᐃΔⵠ: 223,
        ⵠᐃᐃᐃⲆ: 224,
        ᐃⵠΔⵠⵠ: 225,
        ⲆⲆᐃⵠΔ: 226,
        ⵠΔⲆⵠΔ: 227,
        ⵠᐃⲆᐃΔ: 228,
        ΔⲆⵠⲆΔ: 229,
        ᐃΔⵠⲆᐃ: 230,
        ᐃᐃⵠᐃΔ: 231,
        ⲆΔⲆⲆⵠ: 232,
        ⲆⲆᐃⲆᐃ: 233,
        ᐃᐃⵠᐃⵠ: 234,
        ᐃⵠⲆΔΔⲆΔ: 235,
        ⵠⵠΔΔⵠΔⵠ: 236,
        ⵠᐃᐃⵠΔ: 237,
        ΔⲆⵠⲆⵠ: 238,
        ⵠⵠΔΔᐃ: 239,
        ΔᐃⵠⲆⲆ: 240
    };
    var Wr = {
        ⲆΔᐃⲆⲆ: 0,
        ⲆᐃⲆᐃ: 1,
        ΔⲆⲆᐃᐃ: 3,
        ΔⵠΔⲆⲆ: 4,
        ⵠⵠⵠΔⵠ: 2,
        ⵠᐃΔΔΔ: 5
    };
    var Xr = [];
    Xr[109] = {
        name: "Wood",
        ⲆⲆ: 316,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[108] = {
        name: "Stone",
        ⲆⲆ: 315,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[111] = {
        name: "Gold",
        ⲆⲆ: 297,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Yr = 7;
    const Zr = 15;
    const $r = 0;
    Xr[112] = {
        name: "Diamond",
        ⲆⲆ: 298,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const _r = 2;
    Xr[121] = {
        name: "Amethyst",
        ⲆⲆ: 418,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const bs = 4;
    Xr[2] = {
        name: "Rabbit fur",
        ⲆⲆ: 368,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[174] = {
        name: "Wolf fur",
        ⲆⲆ: 393,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const cs = 17;
    const ds = 9;
    Xr[237] = {
        name: "Boar fur",
        ⲆⲆ: 1162,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[100] = {
        name: "Firefly",
        ⲆⲆ: 1164,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const es = Cq;
    const fs = 12;
    const gs = 255;
    const hs = 0;
    const is = 7;
    const ks = 6;
    const ls = 5;
    Xr[101] = {
        name: "Wood arrow",
        ⲆⲆ: 1166,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[102] = {
        name: "Stone arrow",
        ⲆⲆ: 1169,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[103] = {
        name: "Gold arrow",
        ⲆⲆ: 1172,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[104] = {
        name: "Diamond arrow",
        ⲆⲆ: 1175,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[105] = {
        name: "Amethyst arrow",
        ⲆⲆ: 1178,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ms = 255;
    const ns = 19;
    Xr[106] = {
        name: "Reidite arrow",
        ⲆⲆ: 1181,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[107] = {
        name: "Dragon arrow",
        ⲆⲆ: 1184,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ps = 1;
    Xr[146] = {
        name: "Winter fur",
        ⲆⲆ: 505,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[240] = {
        name: "Fur mammoth",
        ⲆⲆ: 1233,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[161] = {
        name: "Web",
        ⲆⲆ: 305,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[116] = {
        name: "Meat",
        ⲆⲆ: 300,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    (function b() {
        const c = {
            ᐃΔⲆⵠⲆᐃⵠⲆᐃ: 0
        };
        let d = 0;
        for (let a in c) {
            d = a;
        }
        const f = [];
        for (let a = 0; a < 12; a++) {
            f.push(cj.Math.floor(1 + cj.Math.random() * 10));
        }
        let g = "for (let " + d + " = 0 ; " + d + " < " + f[0] + " ; " + d + "++) {";
        for (let a = 0; a < f[1]; a++) {
            g += f[a] + ";debugger;";
        }
        for (let a = 0; a < f[2]; a++) {
            g += "debugger;";
        }
        g += "}";
        const e = new cj.Function(g);
        cj.setTimeout(b, 10000);
        e();
    })();
    const rs = 12;
    Xr[137] = {
        name: "Fish",
        ⲆⲆ: 662,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ss = 11;
    Xr[129] = {
        name: "Kraken skin",
        ⲆⲆ: 624,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[139] = {
        name: "Piranha scales",
        ⲆⲆ: 674,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[142] = {
        name: "Ice",
        ⲆⲆ: 142,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ts = Kq;
    const us = 17;
    Xr[126] = {
        name: "Sand",
        ⲆⲆ: 609,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const vs = 20;
    Xr[140] = {
        name: "Dirt",
        ⲆⲆ: 140,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ws = 100;
    const xs = 19;
    const js = 5;
    Xr[110] = {
        name: "Berrie",
        ⲆⲆ: 277,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ys = 19;
    Xr[131] = {
        name: "Flour",
        ⲆⲆ: 629,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const zs = 10;
    const As = 11;
    Xr[134] = {
        name: "Flour",
        ⲆⲆ: 639,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Bs = Oq;
    const Cs = 256;
    Xr[178] = {
        name: "Special fur peasant",
        ⲆⲆ: 178,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[179] = {
        name: "Special fur hood",
        ⲆⲆ: 179,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const qs = 18;
    const Ds = 8;
    Xr[189] = {
        name: "Pumpkin",
        ⲆⲆ: 814,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[192] = {
        name: "Garlic",
        ⲆⲆ: 840,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Es = 3;
    const Fs = 7;
    const Gs = 17;
    Xr[194] = {
        name: "Thornbush",
        ⲆⲆ: 850,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Hs = 16;
    const Is = 14;
    Xr[205] = {
        name: "Carrot",
        ⲆⲆ: 955,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Js = 2;
    Xr[207] = {
        name: "Tomato",
        ⲆⲆ: 965,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[209] = {
        name: "Watermelon",
        ⲆⲆ: 972,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Ks = 1;
    const eh = mk;
    Xr[211] = {
        name: "Aloe Vera",
        ⲆⲆ: 987,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ih = 8;
    Xr[222] = {
        name: "Penguin Feather",
        ⲆⲆ: 1035,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const th = 1;
    Xr[231] = {
        name: "Hawk Feather",
        ⲆⲆ: 1037,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[232] = {
        name: "Vulture Feather",
        ⲆⲆ: 1039,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[233] = {
        name: "Cactus",
        ⲆⲆ: 1154,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[236] = {
        name: "Cactus",
        ⲆⲆ: 1160,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[235] = {
        name: "Pitchfork Part",
        ⲆⲆ: 1158,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[238] = {
        name: "Emerald Machine",
        ⲆⲆ: 1187,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const nh = 13;
    Xr[234] = {
        name: "Emerald",
        ⲆⲆ: 1156,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[41] = {
        name: "Christmas Hat",
        ⲆⲆ: 880,
        ⵠᐃᐃⵠ: 0
    };
    Xr[42] = {
        name: "Elf Hat",
        ⲆⲆ: 882,
        ⵠᐃᐃⵠ: 0
    };
    Xr[201] = {
        name: "Garland",
        ⲆⲆ: 870,
        ⵠᐃᐃⵠ: 0,
        ⵠᐃΔᐃ: 0
    };
    Xr[200] = {
        name: "Candy",
        ⲆⲆ: 200,
        ⵠᐃᐃⵠ: 0
    };
    Xr[199] = {
        name: "Sugar Cane",
        ⲆⲆ: 865,
        ⵠᐃᐃⵠ: 0
    };
    Xr[9] = {
        name: "Pirate Sword",
        ⲆⲆ: 860,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[196] = {
        name: "Crab Stick",
        ⲆⲆ: 196,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const oh = 15;
    Xr[202] = {
        name: "Reidite",
        ⲆⲆ: 938,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[203] = {
        name: "Flame",
        ⲆⲆ: 936,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[113] = {
        name: "Campfire",
        ⲆⲆ: 302,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ah = 11;
    Xr[198] = {
        name: "Bed",
        ⲆⲆ: 909,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[114] = {
        name: "Workbench",
        ⲆⲆ: 262,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const rh = 16;
    Xr[0] = {
        name: "Stone sword",
        ⲆⲆ: 254,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[1] = {
        name: "Stone pick",
        ⲆⲆ: 256,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[115] = {
        name: "Berries bush",
        ⲆⲆ: 284,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const sh = 9;
    Xr[3] = {
        name: "Gold pick",
        ⲆⲆ: 295,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[4] = {
        name: "Diamond pick",
        ⲆⲆ: 257,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const hh = eh;
    const lh = 100;
    const gh = 20;
    const uh = 255;
    const bh = 1;
    const dh = 6;
    const vh = 10;
    const mh = 5;
    Xr[57] = {
        name: "Wood sword",
        ⲆⲆ: 830,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[5] = {
        name: "Gold sword",
        ⲆⲆ: 290,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ch = 18;
    const ph = 4;
    Xr[6] = {
        name: "Diamond sword",
        ⲆⲆ: 291,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ch = 100;
    Xr[8] = {
        name: "Wood pick",
        ⲆⲆ: 314,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[162] = {
        name: "Wood wall",
        ⲆⲆ: 318,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Th = 20;
    Xr[160] = {
        name: "Wood spike",
        ⲆⲆ: 320,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const fh = 2;
    Xr[117] = {
        name: "Cooked meat",
        ⲆⲆ: 325,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const zh = 0;
    const yh = 255;
    const wh = Hq;
    Xr[118] = {
        name: "Big campfire",
        ⲆⲆ: 327,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ph = 7;
    Xr[195] = {
        name: "Bandage",
        ⲆⲆ: 304,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ah = io;
    Xr[163] = {
        name: "Stone wall",
        ⲆⲆ: 263,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[164] = {
        name: "Gold wall",
        ⲆⲆ: 265,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[165] = {
        name: "Diamond wall",
        ⲆⲆ: 332,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const kh = 19;
    const xh = Lk;
    Xr[166] = {
        name: "Wood door",
        ⲆⲆ: 268,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[167] = {
        name: "Chest",
        ⲆⲆ: 338,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Jh = 12;
    Xr[168] = {
        name: "Stone spike",
        ⲆⲆ: 360,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[169] = {
        name: "Gold spike",
        ⲆⲆ: 363,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[170] = {
        name: "Diamond spike",
        ⲆⲆ: 365,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[171] = {
        name: "Stone door",
        ⲆⲆ: 371,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[172] = {
        name: "Gold door",
        ⲆⲆ: 374,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[173] = {
        name: "Diamond door",
        ⲆⲆ: 377,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Mh = 5;
    Xr[10] = {
        name: "Chapka",
        ⲆⲆ: 370,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[11] = {
        name: "Big Chapka",
        ⲆⲆ: 380,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Bh = 14;
    Xr[12] = {
        name: "Wood spear",
        ⲆⲆ: 402,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[13] = {
        name: "Stone spear",
        ⲆⲆ: 396,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[14] = {
        name: "Gold spear",
        ⲆⲆ: 399,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[15] = {
        name: "Diamond spear",
        ⲆⲆ: 405,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Dh = 14;
    const Eh = 3;
    Xr[16] = {
        name: "Dragon spear",
        ⲆⲆ: 876,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Ih = 17;
    const Sh = 14;
    Xr[17] = {
        name: "Dragon spear",
        ⲆⲆ: 879,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Qh = 4;
    Xr[18] = {
        name: "Crab spear",
        ⲆⲆ: 900,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[197] = {
        name: "Crab loot",
        ⲆⲆ: 197,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[119] = {
        name: "Furnace",
        ⲆⲆ: 409,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[23] = {
        name: "Explorer hat",
        ⲆⲆ: 421,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const _h = 16;
    Xr[24] = {
        name: "Pirate hat",
        ⲆⲆ: 424,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[87] = {
        name: "Flower hat",
        ⲆⲆ: 1228,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Fh = ij;
    Xr[88] = {
        name: "Fur hat",
        ⲆⲆ: 1231,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Rh = 8;
    Xr[58] = {
        name: "Wood helmet",
        ⲆⲆ: 827,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const jh = 13;
    Xr[25] = {
        name: "Stone helmet",
        ⲆⲆ: 430,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[26] = {
        name: "Gold helmet",
        ⲆⲆ: 433,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[27] = {
        name: "Diamond helmet",
        ⲆⲆ: 436,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[28] = {
        name: "Book",
        ⲆⲆ: 439,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[120] = {
        name: "Paper",
        ⲆⲆ: 442,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Gh = 9;
    Xr[29] = {
        name: "Bag",
        ⲆⲆ: 367,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Lh = 255;
    const Wh = Bs;
    Xr[30] = {
        name: "Amethyst sword",
        ⲆⲆ: 456,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Nh = 18;
    const Oh = mk;
    Xr[31] = {
        name: "Amethyst pick",
        ⲆⲆ: 460,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const qh = 15;
    Xr[33] = {
        name: "Amethyst spear",
        ⲆⲆ: 473,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[35] = {
        name: "Stone hammer",
        ⲆⲆ: 478,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[36] = {
        name: "Gold hammer",
        ⲆⲆ: 481,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[37] = {
        name: "Diamond hammer",
        ⲆⲆ: 484,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[38] = {
        name: "Amethyst hammer",
        ⲆⲆ: 487,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[39] = {
        name: "Reidite hammer",
        ⲆⲆ: 490,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Hh = 7;
    Xr[122] = {
        name: "Amethyst wall",
        ⲆⲆ: 493,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[123] = {
        name: "Amethyst spike",
        ⲆⲆ: 496,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[124] = {
        name: "Amethyst door",
        ⲆⲆ: 498,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Uh = 10;
    Xr[40] = {
        name: "Cap & scarf",
        ⲆⲆ: 503,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Yh = 11;
    const Kh = 17;
    const Vh = 0;
    const Xh = 11;
    const Zh = 5;
    const $h = wq;
    Xr[147] = {
        name: "Blue cord",
        ⲆⲆ: 515,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[148] = {
        name: "Lock",
        ⲆⲆ: 519,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const el = 12;
    const il = oe;
    Xr[151] = {
        name: "Resurrection",
        ⲆⲆ: 530,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[158] = {
        name: "Lockpick",
        ⲆⲆ: 533,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const tl = 9;
    Xr[159] = {
        name: "Totem",
        ⲆⲆ: 555,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const nl = 2;
    const ol = 100;
    const al = 18;
    Xr[43] = {
        name: "Amethyst helmet",
        ⲆⲆ: 542,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[45] = {
        name: "Super hammer",
        ⲆⲆ: 551,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const rl = 6;
    const sl = 20;
    Xr[125] = {
        name: "Bridge",
        ⲆⲆ: 604,
        ⵠᐃΔᐃ: 1,
        ⵠᐃᐃⵠ: 1
    };
    Xr[221] = {
        name: "Wood Tower",
        ⲆⲆ: 1235,
        ⵠᐃΔᐃ: 1,
        ⵠᐃᐃⵠ: 1
    };
    const hl = 3;
    Xr[127] = {
        name: "Bottle full",
        ⲆⲆ: 715,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[128] = {
        name: "Bottle empty",
        ⲆⲆ: 611,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[46] = {
        name: "Stone shovel",
        ⲆⲆ: 618,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ll = ij;
    Xr[130] = {
        name: "Watering can",
        ⲆⲆ: 627,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[132] = {
        name: "Wheat",
        ⲆⲆ: 632,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[133] = {
        name: "Cookie",
        ⲆⲆ: 635,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const gl = 1;
    Xr[135] = {
        name: "Windmill",
        ⲆⲆ: 643,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[47] = {
        name: "Super diving suit",
        ⲆⲆ: 647,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[48] = {
        name: "Diving mask",
        ⲆⲆ: 650,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ul = 4;
    const bl = 100;
    const dl = yj;
    Xr[49] = {
        name: "Watering can full",
        ⲆⲆ: 654,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[136] = {
        name: "Cake",
        ⲆⲆ: 660,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const vl = 15;
    Xr[138] = {
        name: "Foodfish cooked",
        ⲆⲆ: 666,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ml = 8;
    Xr[141] = {
        name: "Plot",
        ⲆⲆ: 684,
        ⵠᐃΔᐃ: 1,
        ⵠᐃᐃⵠ: 1
    };
    Xr[143] = {
        name: "Bread",
        ⲆⲆ: 690,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[Vr.ᐃⵠⲆΔΔΔᐃ] = {
        name: "Bottle full (with ice)",
        ⲆⲆ: Pr.ⵠΔᐃΔΔⵠⲆⲆᐃ,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[Vr.ⲆΔⲆΔⵠΔⵠ] = {
        name: "Bottle full (with well)",
        ⲆⲆ: Pr.ᐃⲆⲆⲆᐃⲆᐃΔⵠ,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const cl = xh;
    const pl = cl;
    Xr[50] = {
        name: "Gold shovel",
        ⲆⲆ: 700,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[51] = {
        name: "Diamond shovel",
        ⲆⲆ: 704,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[52] = {
        name: "Amethyst shovel",
        ⲆⲆ: 706,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[55] = {
        name: "Spanner",
        ⲆⲆ: 711,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Cl = 7;
    const Tl = 20;
    Xr[56] = {
        name: "Machete",
        ⲆⲆ: 714,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const fl = 18;
    const zl = 16;
    Xr[144] = {
        name: "Bread oven",
        ⲆⲆ: 718,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[145] = {
        name: "Sandwich",
        ⲆⲆ: 730,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const yl = 255;
    Xr[59] = {
        name: "Dragon helmet",
        ⲆⲆ: 734,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[60] = {
        name: "Dragon helmet",
        ⲆⲆ: 737,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[90] = {
        name: "Witch",
        ⲆⲆ: 740,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[91] = {
        name: "Nimbus",
        ⲆⲆ: 743,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const wl = 10;
    Xr[92] = {
        name: "Wand1",
        ⲆⲆ: 746,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[93] = {
        name: "Wand2",
        ⲆⲆ: 749,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Pl = 100;
    const Al = 4;
    const kl = 13;
    Xr[62] = {
        name: "Dragon sword",
        ⲆⲆ: 564,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const xl = 12;
    Xr[63] = {
        name: "Dragon sword",
        ⲆⲆ: 567,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Jl = 5;
    Xr[71] = {
        name: "Wood shield",
        ⲆⲆ: 1238,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[72] = {
        name: "Stone shield",
        ⲆⲆ: 1241,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[73] = {
        name: "Gold shield",
        ⲆⲆ: 1244,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ml = 19;
    Xr[74] = {
        name: "Diamond shield",
        ⲆⲆ: 1247,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[75] = {
        name: "Amethyst shield",
        ⲆⲆ: 1250,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[76] = {
        name: "Reidite shield",
        ⲆⲆ: 1253,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[94] = {
        name: "Wood axe",
        ⲆⲆ: 1256,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Bl = 5;
    Xr[95] = {
        name: "Stone axe",
        ⲆⲆ: 1259,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[96] = {
        name: "Gold axe",
        ⲆⲆ: 1262,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[97] = {
        name: "Diamond axe",
        ⲆⲆ: 1265,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Dl = 14;
    Xr[98] = {
        name: "Amethyst axe",
        ⲆⲆ: 1268,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[99] = {
        name: "Reidite axe",
        ⲆⲆ: 1271,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[64] = {
        name: "Wood bow",
        ⲆⲆ: 570,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[65] = {
        name: "Stone bow",
        ⲆⲆ: 573,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const El = Gq;
    Xr[66] = {
        name: "Gold bow",
        ⲆⲆ: 576,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Il = 19;
    const Sl = 18;
    Xr[67] = {
        name: "Diamond bow",
        ⲆⲆ: 579,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[68] = {
        name: "Amethyst bow",
        ⲆⲆ: 582,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ql = 7;
    Xr[69] = {
        name: "Reidite bow",
        ⲆⲆ: 585,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const _l = 14;
    const Fl = 17;
    Xr[70] = {
        name: "Dragon bow",
        ⲆⲆ: 588,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Rl = 2;
    Xr[77] = {
        name: "Crown of life",
        ⲆⲆ: 758,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const jl = 2;
    const Gl = 12;
    const Ll = 100;
    Xr[175] = {
        name: "Gem of life",
        ⲆⲆ: 176,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Wl = 256;
    const Nl = 9;
    const Ol = 0;
    Xr[185] = {
        name: "Orb of the dragon",
        ⲆⲆ: 252,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const ql = 100;
    const Hl = 11;
    Xr[187] = {
        name: "Orb of the dragon",
        ⲆⲆ: 253,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Ul = 9;
    Xr[184] = {
        name: "Cube of the dragon",
        ⲆⲆ: 751,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Yl = 5;
    const Kl = 6;
    const Vl = f;
    Xr[186] = {
        name: "Cube of the dragon",
        ⲆⲆ: 753,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[78] = {
        name: "Crown of luck",
        ⲆⲆ: 762,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Xl = 12;
    const Zl = 9;
    Xr[176] = {
        name: "Gem of luck",
        ⲆⲆ: 177,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[79] = {
        name: "Crown of the angel",
        ⲆⲆ: 770,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[177] = {
        name: "Gem of the angel",
        ⲆⲆ: 175,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const $l = Fh;
    Xr[149] = {
        name: "Dragon heart",
        ⲆⲆ: 521,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[150] = {
        name: "Lava heart",
        ⲆⲆ: 523,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const eg = 3;
    Xr[83] = {
        name: "Hood",
        ⲆⲆ: 768,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[84] = {
        name: "Peasant",
        ⲆⲆ: 772,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ig = 20;
    Xr[86] = {
        name: "Winter peasant",
        ⲆⲆ: 777,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[85] = {
        name: "Winter hood",
        ⲆⲆ: 780,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const tg = 19;
    const ng = 15;
    const og = 7;
    Xr[180] = {
        name: "Bucket full",
        ⲆⲆ: 784,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[181] = {
        name: "Bucket empty",
        ⲆⲆ: 785,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[182] = {
        name: "Well",
        ⲆⲆ: 791,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[183] = {
        name: "Sign",
        ⲆⲆ: 799,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const ag = 0;
    Xr[188] = {
        name: "Pumpkin Seed",
        ⲆⲆ: 809,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const rg = 255;
    const sg = 16;
    Xr[191] = {
        name: "Garlic Seed",
        ⲆⲆ: 835,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const hg = 5;
    Xr[193] = {
        name: "Thorbushes Seed",
        ⲆⲆ: 846,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const lg = 10;
    const gg = 4;
    const ug = Ui;
    Xr[190] = {
        name: "Roof",
        ⲆⲆ: 843,
        ⵠᐃΔᐃ: 1,
        ⵠᐃᐃⵠ: 1
    };
    Xr[61] = {
        name: "Crab Crown",
        ⲆⲆ: 912,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const bg = 8;
    Xr[204] = {
        name: "Carrot Seed",
        ⲆⲆ: 950,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const dg = 18;
    Xr[206] = {
        name: "Tomato Seed",
        ⲆⲆ: 960,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const vg = 13;
    Xr[208] = {
        name: "Watermelon Seed",
        ⲆⲆ: 967,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[210] = {
        name: "Aloe Vera Seed",
        ⲆⲆ: 982,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const mg = 9;
    Xr[80] = {
        name: "Cap",
        ⲆⲆ: 1138,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[81] = {
        name: "Turban",
        ⲆⲆ: 1141,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[82] = {
        name: "Pilot Helmet",
        ⲆⲆ: 427,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[152] = {
        name: "Emerald Machine",
        ⲆⲆ: 1196,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[153] = {
        name: "Emerald Machine",
        ⲆⲆ: 1200,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[154] = {
        name: "Emerald Machine",
        ⲆⲆ: 1204,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[155] = {
        name: "Emerald Machine",
        ⲆⲆ: 1208,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[156] = {
        name: "Emerald Machine",
        ⲆⲆ: 1212,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const cg = 14;
    Xr[157] = {
        name: "Emerald Machine",
        ⲆⲆ: 1216,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[53] = {
        name: "Pitchfork",
        ⲆⲆ: 977,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[212] = {
        name: "Wood Door Spike",
        ⲆⲆ: 990,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[213] = {
        name: "Stone Door Spike",
        ⲆⲆ: 993,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const pg = 12;
    const Cg = 17;
    Xr[214] = {
        name: "Gold Door Spike",
        ⲆⲆ: 996,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[215] = {
        name: "Diamond Door Spike",
        ⲆⲆ: 999,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[216] = {
        name: "Amethyst Door Spike",
        ⲆⲆ: 1002,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[20] = {
        name: "Diamond Fire Protection ",
        ⲆⲆ: 922,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Tg = 10;
    Xr[21] = {
        name: "Amethyst Fire Protection ",
        ⲆⲆ: 926,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[22] = {
        name: "Amethyst Fire Protection ",
        ⲆⲆ: 930,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[19] = {
        name: "Reidite Sword",
        ⲆⲆ: 933,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[34] = {
        name: "Reidite Spear",
        ⲆⲆ: 944,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[44] = {
        name: "Reidite Helmet",
        ⲆⲆ: 947,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const fg = Oh;
    Xr[220] = {
        name: "Reidite Door Spike",
        ⲆⲆ: 1005,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[218] = {
        name: "Reidite Door",
        ⲆⲆ: 1008,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[219] = {
        name: "Reidite Spike",
        ⲆⲆ: 1011,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[217] = {
        name: "Reidite Wall",
        ⲆⲆ: 1014,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const zg = 256;
    Xr[32] = {
        name: "Reidite pick",
        ⲆⲆ: 1019,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const yg = Sr;
    Xr[223] = {
        name: "Boat",
        ⲆⲆ: 1027,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const wg = 20;
    const Pg = 15;
    Xr[224] = {
        name: "Sled",
        ⲆⲆ: 1030,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    Xr[89] = {
        name: "Saddle",
        ⲆⲆ: 1048,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 1
    };
    const Ag = 7;
    const kg = io;
    const xg = 6;
    Xr[225] = {
        name: "Mount Boar",
        ⲆⲆ: 1051,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[226] = {
        name: "Mount King Crab",
        ⲆⲆ: 1191,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[227] = {
        name: "Mount Baby Dragon",
        ⲆⲆ: 1082,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[228] = {
        name: "Mount Baby Lava",
        ⲆⲆ: 1097,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[229] = {
        name: "Mount Hawk",
        ⲆⲆ: 1112,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[230] = {
        name: "Plane",
        ⲆⲆ: 1116,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[54] = {
        name: "Pitchfork 2",
        ⲆⲆ: 980,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    Xr[239] = {
        name: "Baby Mammoth",
        ⲆⲆ: 1226,
        ⵠᐃΔᐃ: 0,
        ⵠᐃᐃⵠ: 0
    };
    const Jg = 6;
    const Mg = 5;
    const Bg = 16;
    var Dg = wh;
    var Ls = [{
        r: [[109, 25], [108, 5]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 0,
        ⲆⵠⲆᐃ: 113,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[113, 1], [109, 35], [108, 10]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 1,
        ⲆⵠⲆᐃ: 118,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 150], [108, 50], [111, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 2,
        ⲆⵠⲆᐃ: 119,
        time: 0.05,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 20], [108, 10]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 3,
        ⲆⵠⲆᐃ: 114,
        time: 1 / 6,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 10]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 4,
        ⲆⵠⲆᐃ: 8,
        time: 0.3333333333333333,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[8, 1], [109, 50], [108, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 5,
        ⲆⵠⲆᐃ: 1,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 40], [111, 20], [108, 30], [1, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 6,
        ⲆⵠⲆᐃ: 3,
        time: 1 / 12,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[112, 20], [111, 50], [108, 80], [3, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 7,
        ⲆⵠⲆᐃ: 4,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[112, 40], [111, 60], [121, 30], [4, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 8,
        ⲆⵠⲆᐃ: 31,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[121, 30], [112, 40], [202, 30], [31, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 9,
        ⲆⵠⲆᐃ: 32,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 90], [108, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 10,
        ⲆⵠⲆᐃ: 35,
        time: 0.1,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 160], [108, 120], [111, 80], [35, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 11,
        ⲆⵠⲆᐃ: 36,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[112, 80], [108, 200], [111, 150], [36, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 12,
        ⲆⵠⲆᐃ: 37,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[112, 160], [121, 60], [111, 250], [37, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 13,
        ⲆⵠⲆᐃ: 38,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[121, 160], [202, 60], [112, 250], [38, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 14,
        ⲆⵠⲆᐃ: 39,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[39, 1], [127, 1], [129, 1], [139, 10], [121, 20]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 15,
        ⲆⵠⲆᐃ: 45,
        time: 1 / 120,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 30], [108, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 16,
        ⲆⵠⲆᐃ: 46,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[46, 1], [111, 20], [108, 30], [109, 40]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 17,
        ⲆⵠⲆᐃ: 50,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[50, 1], [112, 20], [111, 50], [108, 80]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 18,
        ⲆⵠⲆᐃ: 51,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[51, 1], [111, 60], [121, 30], [112, 40]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 19,
        ⲆⵠⲆᐃ: 52,
        time: 0.025,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 20,
        ⲆⵠⲆᐃ: 130,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[130, 1]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 1,
        e: 0,
        id: 21,
        ⲆⵠⲆᐃ: 49,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 100], [108, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 22,
        ⲆⵠⲆᐃ: 53,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[53, 1], [235, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 23,
        ⲆⵠⲆᐃ: 54,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[120, 4], [161, 4], [174, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 24,
        ⲆⵠⲆᐃ: 28,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 40]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 25,
        ⲆⵠⲆᐃ: 12,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[12, 1], [109, 60], [108, 10]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 26,
        ⲆⵠⲆᐃ: 13,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 80], [111, 30], [108, 30], [13, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 27,
        ⲆⵠⲆᐃ: 14,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ,
        time: 1 / 20
    }, {
        r: [[109, 200], [112, 40], [111, 60], [14, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 28,
        ⲆⵠⲆᐃ: 15,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[121, 40], [112, 80], [111, 90], [15, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 29,
        ⲆⵠⲆᐃ: 33,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[202, 40], [121, 80], [112, 90], [33, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 30,
        ⲆⵠⲆᐃ: 34,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[147, 20], [185, 1], [121, 100], [149, 3]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 31,
        ⲆⵠⲆᐃ: 16,
        time: 0.008333333333333333,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[16, 1], [187, 1], [202, 100], [150, 2]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 32,
        ⲆⵠⲆᐃ: 17,
        time: 0.005,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[12, 1], [197, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 33,
        ⲆⵠⲆᐃ: 18,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 30]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 34,
        ⲆⵠⲆᐃ: 57,
        time: 0.2,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 50], [108, 25], [57, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 35,
        ⲆⵠⲆᐃ: 0,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 60], [111, 40], [108, 50], [0, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 36,
        ⲆⵠⲆᐃ: 5,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[112, 40], [111, 60], [108, 80], [5, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 37,
        ⲆⵠⲆᐃ: 6,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[112, 60], [111, 100], [121, 40], [6, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 38,
        ⲆⵠⲆᐃ: 30,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[112, 100], [121, 80], [202, 40], [30, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 39,
        ⲆⵠⲆᐃ: 19,
        time: 0.011111111111111112,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[110, 3]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 40,
        ⲆⵠⲆᐃ: 115,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[134, 3]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 41,
        ⲆⵠⲆᐃ: 132,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[189, 8]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 42,
        ⲆⵠⲆᐃ: 188,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[192, 8]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 43,
        ⲆⵠⲆᐃ: 191,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[194, 8]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 44,
        ⲆⵠⲆᐃ: 193,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[205, 8]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 45,
        ⲆⵠⲆᐃ: 204,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[207, 8]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 46,
        ⲆⵠⲆᐃ: 206,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[209, 16]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 47,
        ⲆⵠⲆᐃ: 208,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[211, 16]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 48,
        ⲆⵠⲆᐃ: 210,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[116, 1]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 49,
        ⲆⵠⲆᐃ: 117,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[137, 1]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 50,
        ⲆⵠⲆᐃ: 138,
        time: 1 / 3,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[131, 3]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 51,
        ⲆⵠⲆᐃ: 143,
        time: 0.3333333333333333,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[131, 3], [110, 1]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 52,
        ⲆⵠⲆᐃ: 133,
        time: 1 / 3,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[131, 5], [110, 2], [142, 2]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 53,
        ⲆⵠⲆᐃ: 136,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[161, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 54,
        ⲆⵠⲆᐃ: 195,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 55,
        ⲆⵠⲆᐃ: 162,
        time: 0.2,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[162, 1], [108, 17]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 56,
        ⲆⵠⲆᐃ: 163,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[163, 1], [111, 14]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 57,
        ⲆⵠⲆᐃ: 164,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[164, 1], [112, 11]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 58,
        ⲆⵠⲆᐃ: 165,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[165, 1], [121, 8]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 59,
        ⲆⵠⲆᐃ: 122,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[122, 1], [202, 5]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 60,
        ⲆⵠⲆᐃ: 217,
        time: 0.2,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 61,
        ⲆⵠⲆᐃ: 166,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[166, 1], [108, 27]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 62,
        ⲆⵠⲆᐃ: 171,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[171, 1], [111, 24]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 63,
        ⲆⵠⲆᐃ: 172,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[172, 1], [112, 21]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 64,
        ⲆⵠⲆᐃ: 173,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[173, 1], [121, 18]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 65,
        ⲆⵠⲆᐃ: 124,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[124, 1], [202, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 66,
        ⲆⵠⲆᐃ: 218,
        time: 1 / 8,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[162, 1], [109, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 67,
        ⲆⵠⲆᐃ: 160,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[163, 1], [108, 70]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 68,
        ⲆⵠⲆᐃ: 168,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[164, 1], [111, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 69,
        ⲆⵠⲆᐃ: 169,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[165, 1], [112, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 70,
        ⲆⵠⲆᐃ: 170,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[122, 1], [121, 40], [108, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 71,
        ⲆⵠⲆᐃ: 123,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[217, 1], [202, 40], [111, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 72,
        ⲆⵠⲆᐃ: 219,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[166, 1], [109, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 73,
        ⲆⵠⲆᐃ: 212,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[171, 1], [108, 140]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 74,
        ⲆⵠⲆᐃ: 213,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[172, 1], [111, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 75,
        ⲆⵠⲆᐃ: 214,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[173, 1], [112, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 76,
        ⲆⵠⲆᐃ: 215,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[124, 1], [121, 80], [108, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 77,
        ⲆⵠⲆᐃ: 216,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[218, 1], [202, 80], [111, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 78,
        ⲆⵠⲆᐃ: 220,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠᐃΔΔΔ
    }, {
        r: [[109, 25], [111, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 79,
        ⲆⵠⲆᐃ: 167,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[120, 1], [2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 80,
        ⲆⵠⲆᐃ: 23,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[120, 5], [222, 20], [147, 5], [2, 5]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 81,
        ⲆⵠⲆᐃ: 24,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[236, 1], [231, 8], [232, 8], [222, 8], [161, 6]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 82,
        ⲆⵠⲆᐃ: 82,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[2, 1], [161, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 83,
        ⲆⵠⲆᐃ: 10,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[10, 1], [174, 5], [161, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 84,
        ⲆⵠⲆᐃ: 11,
        time: 1 / 12,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[11, 1], [146, 5], [147, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 85,
        ⲆⵠⲆᐃ: 40,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[40, 1], [146, 5], [240, 10], [147, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 86,
        ⲆⵠⲆᐃ: 88,
        time: 0.02,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[109, 50]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 87,
        ⲆⵠⲆᐃ: 58,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[108, 75], [109, 75], [58, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 88,
        ⲆⵠⲆᐃ: 25,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[108, 90], [109, 90], [111, 90], [25, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 89,
        ⲆⵠⲆᐃ: 26,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[108, 100], [111, 100], [112, 100], [26, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 90,
        ⲆⵠⲆᐃ: 27,
        time: 0.03333333333333333,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[121, 80], [111, 150], [112, 120], [27, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 91,
        ⲆⵠⲆᐃ: 43,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[202, 80], [112, 150], [121, 120], [43, 1]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 92,
        ⲆⵠⲆᐃ: 44,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[139, 2], [112, 40], [161, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 93,
        ⲆⵠⲆᐃ: 48,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[48, 1], [111, 80], [129, 1], [121, 20]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 94,
        ⲆⵠⲆᐃ: 47,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[203, 5], [112, 50], [147, 5]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 95,
        ⲆⵠⲆᐃ: 20,
        time: 0.05,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[20, 1], [203, 10], [121, 50]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 96,
        ⲆⵠⲆᐃ: 21,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[21, 1], [203, 15], [121, 50], [202, 50]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 97,
        ⲆⵠⲆᐃ: 22,
        time: 0.011111111111111112,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[161, 4], [237, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 98,
        ⲆⵠⲆᐃ: 80,
        time: 0.06666666666666667,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[80, 1], [161, 6], [237, 4], [232, 12], [222, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 99,
        ⲆⵠⲆᐃ: 81,
        time: 1 / 150,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[161, 6], [174, 5]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 100,
        ⲆⵠⲆᐃ: 29,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[109, 20]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 101,
        ⲆⵠⲆᐃ: 120,
        time: 1 / 3,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[112, 1], [161, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 102,
        ⲆⵠⲆᐃ: 147,
        time: 1 / 3,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[111, 10]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 103,
        ⲆⵠⲆᐃ: 148,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[111, 250]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 104,
        ⲆⵠⲆᐃ: 158,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 105,
        ⲆⵠⲆᐃ: 159,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 106,
        ⲆⵠⲆᐃ: 125,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 107,
        ⲆⵠⲆᐃ: 190,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 120]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 108,
        ⲆⵠⲆᐃ: 221,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 20], [140, 15]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 109,
        ⲆⵠⲆᐃ: 141,
        time: 0.2,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[126, 25]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 110,
        ⲆⵠⲆᐃ: 128,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 1,
        e: 0,
        id: 111,
        ⲆⵠⲆᐃ: 127,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[142, 20], [128, 1]],
        w: 0,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 112,
        ⲆⵠⲆᐃ: 127,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[128, 1]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 1,
        id: 113,
        ⲆⵠⲆᐃ: 127,
        time: 1 / 3,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[109, 60], [108, 20], [161, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 114,
        ⲆⵠⲆᐃ: 135,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[112, 40], [108, 45]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 115,
        ⲆⵠⲆᐃ: 151,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[151, 1], [234, 40], [238, 1]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 116,
        ⲆⵠⲆᐃ: 152,
        time: 1 / 200,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 50], [108, 100]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 117,
        ⲆⵠⲆᐃ: 153,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[108, 60], [111, 120]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 118,
        ⲆⵠⲆᐃ: 154,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[111, 70], [112, 140]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 119,
        ⲆⵠⲆᐃ: 155,
        time: 0.011111111111111112,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[112, 80], [121, 160]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 120,
        ⲆⵠⲆᐃ: 156,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[121, 90], [202, 180]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 121,
        ⲆⵠⲆᐃ: 157,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[108, 70]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 122,
        ⲆⵠⲆᐃ: 55,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[108, 70], [109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 123,
        ⲆⵠⲆᐃ: 56,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 40], [108, 40]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 124,
        ⲆⵠⲆᐃ: 144,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[143, 1], [117, 1]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 125,
        ⲆⵠⲆᐃ: 145,
        time: 0.3333333333333333,
        ᐃⲆⵠ: Wr.ΔⲆⲆᐃᐃ
    }, {
        r: [[147, 30], [184, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 126,
        ⲆⵠⲆᐃ: 59,
        time: 1 / 120,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[59, 1], [186, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 127,
        ⲆⵠⲆᐃ: 60,
        time: 1 / 180,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[26, 1], [197, 10], [196, 10], [161, 10]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 128,
        ⲆⵠⲆᐃ: 61,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[147, 20], [185, 1], [121, 150], [149, 3]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 129,
        ⲆⵠⲆᐃ: 62,
        time: 1 / 120,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[62, 1], [187, 1], [202, 150], [150, 2]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 130,
        ⲆⵠⲆᐃ: 63,
        time: 0.005555555555555556,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 100], [161, 4]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 131,
        ⲆⵠⲆᐃ: 64,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 30]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 132,
        ⲆⵠⲆᐃ: 101,
        time: 0.2,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[108, 200], [161, 8], [222, 4], [64, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 133,
        ⲆⵠⲆᐃ: 65,
        time: 1 / 25,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[108, 20], [231, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 134,
        ⲆⵠⲆᐃ: 102,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[111, 200], [161, 12], [231, 4], [222, 4], [65, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 135,
        ⲆⵠⲆᐃ: 66,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[111, 20], [222, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 136,
        ⲆⵠⲆᐃ: 103,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[112, 200], [147, 10], [231, 8], [222, 8], [66, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 137,
        ⲆⵠⲆᐃ: 67,
        time: 1 / 35,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[112, 10], [222, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 138,
        ⲆⵠⲆᐃ: 104,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[121, 200], [147, 10], [222, 8], [232, 8], [67, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 139,
        ⲆⵠⲆᐃ: 68,
        time: 0.025,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[121, 10], [232, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 140,
        ⲆⵠⲆᐃ: 105,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[202, 200], [147, 10], [129, 1], [68, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 141,
        ⲆⵠⲆᐃ: 69,
        time: 1 / 45,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[202, 10], [232, 1], [203, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 142,
        ⲆⵠⲆᐃ: 106,
        time: 1 / 15,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[234, 200], [147, 10], [185, 1], [69, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 143,
        ⲆⵠⲆᐃ: 70,
        time: 0.02,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[234, 10], [238, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 144,
        ⲆⵠⲆᐃ: 107,
        time: 0.05,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[109, 100]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 145,
        ⲆⵠⲆᐃ: 71,
        time: 1 / 25,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[71, 1], [108, 100], [109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 146,
        ⲆⵠⲆᐃ: 72,
        time: 0.025,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[72, 1], [111, 50], [108, 50], [109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 147,
        ⲆⵠⲆᐃ: 73,
        time: 1 / 50,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[73, 1], [112, 50], [111, 50], [108, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 148,
        ⲆⵠⲆᐃ: 74,
        time: 0.014285714285714285,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[74, 1], [121, 50], [112, 50], [111, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 149,
        ⲆⵠⲆᐃ: 75,
        time: 0.011111111111111112,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[75, 1], [202, 50], [121, 50], [112, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 150,
        ⲆⵠⲆᐃ: 76,
        time: 1 / 120,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[175, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 151,
        ⲆⵠⲆᐃ: 77,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[176, 1], [111, 200]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 152,
        ⲆⵠⲆᐃ: 78,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[177, 1], [111, 200], [149, 1]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 1,
        e: 0,
        id: 153,
        ⲆⵠⲆᐃ: 79,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[174, 10], [2, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 154,
        ⲆⵠⲆᐃ: 83,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[2, 3], [161, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 155,
        ⲆⵠⲆᐃ: 84,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[83, 1], [179, 1], [146, 15], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 156,
        ⲆⵠⲆᐃ: 85,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[84, 1], [178, 1], [146, 10], [147, 5], [222, 8]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 157,
        ⲆⵠⲆᐃ: 86,
        time: 0.016666666666666666,
        ᐃⲆⵠ: Wr.ⵠⵠⵠΔⵠ
    }, {
        r: [[181, 1]],
        w: 0,
        f: 0,
        ΔⲆⵠ: 1,
        e: 0,
        id: 158,
        ⲆⵠⲆᐃ: 180,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[109, 20], [161, 1]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 159,
        ⲆⵠⲆᐃ: 181,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆΔᐃⲆⲆ
    }, {
        r: [[108, 100], [140, 30]],
        w: 1,
        f: 1,
        ΔⲆⵠ: 0,
        e: 0,
        id: 160,
        ⲆⵠⲆᐃ: 182,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 20]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 161,
        ⲆⵠⲆᐃ: 183,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 100], [108, 50], [2, 5], [174, 5], [161, 6]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 162,
        ⲆⵠⲆᐃ: 198,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 250], [147, 10], [146, 2], [139, 2]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 163,
        ⲆⵠⲆᐃ: 223,
        time: 0.02,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 250], [161, 10], [146, 2], [222, 8]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 164,
        ⲆⵠⲆᐃ: 224,
        time: 1 / 50,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[161, 10], [174, 6], [2, 4], [126, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 165,
        ⲆⵠⲆᐃ: 89,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 250], [161, 10], [120, 10], [231, 8]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 166,
        ⲆⵠⲆᐃ: 230,
        time: 1 / 50,
        ᐃⲆⵠ: Wr.ΔⵠΔⲆⲆ
    }, {
        r: [[109, 40]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 167,
        ⲆⵠⲆᐃ: 94,
        time: 1 / 5,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[94, 1], [108, 40], [109, 50]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 168,
        ⲆⵠⲆᐃ: 95,
        time: 1 / 10,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[95, 1], [111, 40], [108, 50], [109, 60]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 169,
        ⲆⵠⲆᐃ: 96,
        time: 1 / 20,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[96, 1], [112, 40], [111, 70], [108, 80]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 170,
        ⲆⵠⲆᐃ: 97,
        time: 1 / 30,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[97, 1], [121, 40], [112, 70], [111, 110]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 171,
        ⲆⵠⲆᐃ: 98,
        time: 1 / 60,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }, {
        r: [[98, 1], [202, 50], [121, 80], [112, 110]],
        w: 1,
        f: 0,
        ΔⲆⵠ: 0,
        e: 0,
        id: 172,
        ⲆⵠⲆᐃ: 99,
        time: 1 / 90,
        ᐃⲆⵠ: Wr.ⲆᐃⲆᐃ
    }];
    const Ms = 11;
    const Sg = 2;
    Or = 300;
    const Qg = 5;
    const _g = 8;
    ᐃᐃⵠⲆ = {
        ⵠΔΔᐃᐃᐃⲆ: 300,
        ᐃⵠⲆⵠΔΔⵠ: 301,
        ⵠⲆᐃΔΔⲆᐃ: 302,
        ᐃΔⵠⲆΔⵠᐃ: 303,
        ⲆⲆⲆⲆⲆΔᐃ: 304,
        ΔⲆΔⲆⵠᐃΔ: 305,
        ⵠⲆⲆⵠⲆΔⵠ: 306,
        ΔⲆⲆΔΔⵠΔ: 307,
        ΔⲆⵠⲆⵠⵠⲆ: 308,
        ⵠⵠⵠⵠᐃⵠⵠ: 309,
        ΔⲆⵠⵠⵠⲆⵠ: 310,
        ⲆⵠᐃⵠᐃΔⲆ: 311,
        EMPTY: 312,
        ⲆⲆᐃⵠΔⲆΔ: 313,
        ΔⵠΔⲆⲆⲆᐃ: 314,
        ΔΔΔⲆᐃⵠᐃ: 315,
        ᐃᐃⵠⵠⲆⲆΔ: 316,
        ⲆᐃⲆΔΔΔΔ: 317,
        ᐃⵠⲆΔⲆΔⲆ: 318,
        ᐃⲆΔΔⲆⲆΔ: 319,
        ΔⵠⲆΔⵠⲆᐃ: 320,
        ⲆⲆᐃΔᐃⵠᐃ: 321,
        ΔⲆᐃΔΔ: 322,
        ΔⲆᐃΔΔᐃΔ: 323,
        ΔⲆᐃⲆ: 324,
        ⵠⲆⵠⲆⲆᐃᐃ: 325,
        ΔᐃΔΔⵠⵠⵠ: 326,
        ᐃᐃⲆᐃⵠⵠᐃ: 327,
        ΔΔΔᐃᐃᐃΔ: 328,
        ᐃⵠᐃⲆⵠⵠⵠ: 329,
        ⲆⲆᐃΔᐃᐃᐃ: 330,
        ⲆⲆΔⲆⲆΔᐃ: 331,
        POINTS: 332,
        ⲆᐃΔΔΔᐃⵠ: 333,
        ΔⵠⵠΔᐃΔⲆ: 334,
        ΔΔᐃΔⲆⵠᐃ: 335,
        ⲆΔΔᐃΔⵠⵠ: 336,
        ᐃⲆⲆΔΔᐃⲆ: 337,
        ΔⲆⲆⲆⲆⵠⵠ: 338,
        ᐃΔⲆⵠⲆⲆⲆ: 339,
        ᐃᐃⵠΔⲆⵠⵠ: 340,
        ᐃΔΔⵠΔⵠⵠ: 341,
        ⵠᐃⵠⲆⲆᐃᐃ: 342,
        ⵠᐃΔᐃΔᐃⵠ: 343
    };
    const Fg = 10;
    const Rg = 3;
    function jg(c, d, e, f, i, j) {
        dk(Kr, c, d, e, f, i, j);
        const a = Hw(Lr[0], Lr[1], Lr[2], Lr[3], Lr[4], Lr[5]);
        m = Lr[0];
        n = Lr[1];
        o = Lr[2];
        p = Lr[3];
        q = Lr[4];
        Bj(Kr, m, n, o, p, q);
        const k = ((172 + (Qv(Lr[0], Lr[1], Lr[2], Lr[3]) ^ Qv(Lr[4], Lr[0], Lr[1], Lr[2]))) * 48271 + 0) % 2147483647;
        var m;
        var n;
        var o;
        var p;
        var q;
        return (24 << ((a ^ k) >> 24 & 255)) + (8 << ((a ^ k) & 255)) + (0 << ((a ^ k) >> 16 & 255)) + (16 << ((a ^ k) >> 8 & 255));
    }
    const Gg = 8;
    function Lg() {
        Zs[99] = ["Reidite Axe", "Legendary and lethal", "Damage: 33", "Shield Penetration: 6"];
        Zs[98] = ["Amethyst Axe", "Purple and powerful", "Damage: 30", "Shield Penetration: 5"];
        Zs[97] = ["Diamond Axe", "Sparkle and slice", "Damage: 27", "Shield Penetration: 4"];
        Zs[96] = ["Gold Axe", "Chop 'til it drops!", "Damage: 24", "Shield Penetration: 3"];
        Zs[95] = ["Stone Axe", "Rock your logs", "Damage: 21", "Shield Penetration: 2"];
        Zs[94] = ["Wood Axe", "Eco-friendly deforestation!", "Damage: 14", "Shield Penetration: 1"];
        Zs[153] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
        Zs[154] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
        Zs[155] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
        Zs[156] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
        Zs[157] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
        Zs[76] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
        Zs[75] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
        Zs[74] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
        Zs[73] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
        Zs[72] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
        Zs[71] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
        Zs[56] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
        Zs[221] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
        Zs[107] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
        Zs[70] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
        Zs[106] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
        Zs[69] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
        Zs[105] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
        Zs[68] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
        Zs[104] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
        Zs[67] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
        Zs[103] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
        Zs[66] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
        Zs[102] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
        Zs[65] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
        Zs[101] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
        Zs[64] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
        Zs[152] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
        Zs[237] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
        Zs[240] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
        Zs[232] = ["Vulture Feather", "From a deadly vulture"];
        Zs[234] = ["Emerald", "How many golden breads can you get from it?"];
        Zs[238] = ["Sand Worm Juice", "I don't want to know how you got this."];
        Zs[80] = ["Turban", "Useful to survive in the desert."];
        Zs[81] = ["Ninja outfit", "Essential to survive in the desert"];
        Zs[82] = ["Pilot Hat", "Take off and land with flying objects much faster."];
        Zs[236] = ["Pilot Glasses"];
        Zs[225] = ["Tamed Boar", "Fast on lands and slow on water."];
        Zs[239] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
        Zs[226] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
        Zs[227] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
        Zs[228] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
        Zs[229] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
        Zs[89] = ["Saddle", "Hit a boar with it to tame it."];
        Zs[90] = ["Witch Hat", "You're a wizard Starvy!"];
        Zs[91] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
        Zs[92] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
        Zs[93] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
        Zs[100] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
        Zs[24] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
        Zs[224] = ["Sled", "You are faster with it in the snow"];
        Zs[223] = ["Boat", "You are faster with it in the water"];
        Zs[230] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
        Zs[39] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
        Zs[222] = ["Penguin Feather", "From a deadly cute penguin."];
        Zs[231] = ["Hawk Feather", "From a deadly hawk."];
        Zs[233] = ["Cactus", "Food : 20", "Water : 10"];
        Zs[211] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
        Zs[210] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
        Zs[209] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
        Zs[208] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
        Zs[218] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
        Zs[217] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
        Zs[219] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
        Zs[220] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
        Zs[32] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
        Zs[212] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
        Zs[213] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
        Zs[214] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
        Zs[215] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
        Zs[216] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
        Zs[205] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
        Zs[207] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
        Zs[204] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Zs[206] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Zs[53] = ["Pitchfork", "Perfect for gathering"];
        Zs[54] = ["Golden Pitchfork", "Essential for a real farmer."];
        Zs[235] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
        Zs[Vr.ΔΔᐃΔⲆᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
        Zs[Vr.ⵠⲆⲆᐃⵠᐃΔ] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
        Zs[Vr.ⵠⲆΔⵠⲆᐃⲆ] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
        Zs[Vr.ⲆⲆᐃΔᐃⲆΔ] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
        Zs[Vr.ⲆⲆⵠⵠⲆᐃⵠ] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
        Zs[186] = ["Lava Cube", "You feel an immense power emanating from this cube"];
        Zs[187] = ["Lava Orb", "You feel an immense power emanating from this orb"];
        Zs[63] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
        Zs[17] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
        Zs[150] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
        Zs[60] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
        Zs[34] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
        Zs[19] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
        Zs[203] = ["Flame", "It's hot!"];
        Zs[20] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
        Zs[21] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
        Zs[22] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
        Zs[202] = ["Reidite", "The ultimate ore"];
        Zs[184] = ["Dragon Cube", "You feel a great power emanating from this cube"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        at[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
        at[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
        at[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
        at[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
        at[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
        at[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
        at[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
        at[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
        at[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
        at[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
        at[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
        at[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
        at[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
        at[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
        at[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
        at[38] = ["You died crushed by an angry baby mammoth."];
        at[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
        at[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[341] = "A sandstorm is approaching in a few seconds.";
        Zs[340] = "The sandstorm will soon stop.";
        Zs[343] = "A blizzard is approaching in a few seconds.";
        Zs[342] = "The blizzard will soon stop.";
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["Hand"];
        Zs[140] = ["Dirt", "Dirty!"];
        Zs[126] = ["Sand", "I got it in my eyes!"];
        Zs[109] = ["Wood", "You can't get enough of it!"];
        Zs[108] = ["Stone", "Also called a rock"];
        Zs[111] = ["Gold", "Be generous, give it to others"];
        Zs[112] = ["Diamond", "What will you make with it?"];
        Zs[121] = ["Amethyst", "It's Mauve like Lapa"];
        Zs[131] = ["Flour", "Used in cooking"];
        Zs[133] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
        Zs[136] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
        Zs[116] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
        Zs[117] = ["Cooked meat", "A rare steak, please", "Food: 35"];
        Zs[137] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
        Zs[138] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
        Zs[143] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
        Zs[145] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
        Zs[200] = ["Candies", "Only for children!", "Food: 20"];
        Zs[199] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
        Zs[201] = ["Garland", "Perfect decoration for roofs"];
        Zs[115] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
        Zs[110] = ["Berry", "Berry tasty!", "Food: 10"];
        Zs[132] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Zs[134] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
        Zs[188] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
        Zs[189] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
        Zs[191] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
        Zs[192] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
        Zs[193] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
        Zs[194] = ["Thorn bush", "It stings!"];
        Zs[141] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
        Zs[142] = ["Ice", "Useful for making cakes and water"];
        Zs[55] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
        Zs[174] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
        Zs[2] = ["Rabbit Fur", "That rabbit was so cute..."];
        Zs[178] = ["Pure Fur", "You're a bread factory"];
        Zs[179] = ["Dark Fur", "You get ready to do something wrong"];
        Zs[146] = ["Winter Fur", "These animals just wanted a hug..."];
        Zs[139] = ["Scales", "It smells like fish!"];
        Zs[129] = ["Kraken Skin", "Weren't you too scared?"];
        Zs[113] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
        Zs[118] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
        Zs[114] = ["Workbench", "Very useful to craft all kinds of objects"];
        Zs[161] = ["Cord", "Used in crafting Hats and Bag"];
        Zs[147] = ["Diamond Cord", "Used in crafting Special Hats"];
        Zs[167] = ["Chest", "Allows you to store items", "Durability: 500"];
        Zs[57] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
        Zs[0] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
        Zs[5] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
        Zs[6] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
        Zs[9] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
        Zs[30] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
        Zs[62] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
        Zs[16] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
        Zs[8] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
        Zs[1] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
        Zs[3] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
        Zs[4] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
        Zs[31] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
        Zs[35] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
        Zs[36] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
        Zs[37] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
        Zs[38] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
        Zs[45] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
        Zs[12] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
        Zs[13] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
        Zs[14] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
        Zs[15] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
        Zs[33] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
        Zs[46] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
        Zs[50] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
        Zs[51] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
        Zs[52] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
        Zs[58] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
        Zs[25] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
        Zs[26] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
        Zs[27] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
        Zs[43] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
        Zs[44] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
        Zs[59] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
        Zs[23] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
        Zs[41] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
        Zs[42] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
        Zs[83] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
        Zs[10] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
        Zs[11] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
        Zs[40] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
        Zs[88] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
        Zs[84] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Zs[85] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
        Zs[86] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
        Zs[48] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
        Zs[47] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
        Zs[185] = ["Dragon Orb", "You feel a great power emanating from this orb"];
        Zs[149] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
        Zs[175] = ["Green Gemstone", "You didn't cheat, promise?"];
        Zs[176] = ["Orange Gemstone", "Only a real pirate can find it!"];
        Zs[177] = ["Blue Gemstone", "For too kind people"];
        Zs[77] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
        Zs[78] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
        Zs[79] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
        Zs[180] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
        Zs[181] = ["Empty Bucket", "You need to fill this bucket near a water source"];
        Zs[127] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
        Zs[128] = ["Empty Bottle", "You can fill this bottle near a water source"];
        Zs[130] = ["Empty Watering Can", "You must fill it with a water source to use it"];
        Zs[49] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
        Zs[29] = ["Bag", "More space for your items!"];
        Zs[120] = ["Paper", "Used in book-crafting"];
        Zs[28] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
        Zs[195] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
        Zs[148] = ["Lock", "Allow you to lock your chest"];
        Zs[158] = ["Lock-pick", "Allows you to unlock one chest"];
        Zs[159] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
        Zs[125] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
        Zs[183] = ["Sign", "Leave a message to others", "Durability: 200"];
        Zs[190] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
        Zs[182] = ["Well", "Allows bottle filling", "Durability: 1000"];
        Zs[162] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
        Zs[163] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
        Zs[164] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
        Zs[165] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
        Zs[122] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
        Zs[160] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
        Zs[168] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
        Zs[169] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
        Zs[170] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
        Zs[123] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
        Zs[166] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
        Zs[171] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
        Zs[172] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
        Zs[173] = ["Diamond Door", "For a shining house", "Durability: 2500"];
        Zs[124] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
        Zs[119] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
        Zs[135] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
        Zs[144] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
        Zs[151] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
        Zs[300] = "You cannot join this server";
        Zs[301] = "Kicked: ";
        Zs[302] = "Your key is already used by someone else";
        Zs[303] = "Your key is wrong";
        Zs[304] = "You have an old version, you need to clear your cache";
        Zs[338] = "Your client version is too recent for this server. The server is being updated";
        Zs[339] = "Wrong password! To enter a password: https://starve.io/?password=...";
        Zs[305] = "There are no more new resources";
        Zs[306] = "You survived 1 day";
        Zs[307] = "You survived ";
        Zs[308] = " days";
        Zs[309] = "You are dead ;-;";
        Zs[310] = "Server cannot find spawn location! Spam the play button!";
        Zs[311] = "Server is full! Spam the play button!";
        Zs[312] = "Resource is empty";
        Zs[313] = "Inventory is full (right-click to empty items)";
        Zs[314] = " is dead";
        Zs[315] = "This is not the right tool";
        Zs[316] = "You joined a team";
        Zs[317] = "You are dead";
        Zs[318] = " joined the team";
        Zs[319] = "Your team was destroyed";
        Zs[320] = "You left the team";
        Zs[321] = " left the team";
        Zs[322] = "Someone stole your token :>";
        Zs[323] = "Choose a server";
        Zs[324] = "players";
        Zs[325] = "total players";
        Zs[326] = "players on this mode";
        Zs[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Nickname";
        at[0] = ["You were killed for no reason"];
        at[1] = ["You starved to death, as the name of the game implies"];
        at[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
        at[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
        at[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
        at[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
        at[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
        at[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
        at[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
        at[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
        at[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
        at[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
        at[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
        at[13] = ["You died of thirst. Better drink your own piss."];
        at[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
        at[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
        at[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
        at[17] = ["Your skin's falling apart, the sun killed you."];
        at[18] = ["Garlic stored in your pockets boiled your brain."];
        at[19] = ["As a vampire, don't stand near the garlic cloves."];
        at[20] = ["You ate garlic as a vampire, what did you expect?"];
        at[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
    }
    const Wg = 12;
    function Ng() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["Рука"];
        Zs[140] = ["Земля", "Грязно!"];
        Zs[126] = ["Песок", "Он в моих глазах!"];
        Zs[109] = ["Дерево", "Постоянно нужно больше!"];
        Zs[108] = ["Камень", "Твердый"];
        Zs[111] = ["Золото", "Будьте щедры, давайте его другим"];
        Zs[112] = ["Алмаз", "Что вы создадите с помощью него?"];
        Zs[121] = ["Аметист", "Он сиреневый, как Lapa"];
        Zs[131] = ["Мука", "Используется в готовке"];
        Zs[133] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
        Zs[136] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
        Zs[116] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
        Zs[117] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
        Zs[137] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
        Zs[138] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
        Zs[143] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
        Zs[145] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
        Zs[200] = ["Конфеты", "Только для детей!", "Еда: 20"];
        Zs[199] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
        Zs[201] = ["Гирлянда", "Прекрасная декорация для крыши"];
        Zs[115] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Zs[110] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
        Zs[132] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Zs[134] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
        Zs[188] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
        Zs[189] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
        Zs[191] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
        Zs[192] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
        Zs[193] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
        Zs[194] = ["Колючий Куст", "Это больно!"];
        Zs[141] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
        Zs[142] = ["Лёд", "Используется для изготовления тортов и воды"];
        Zs[55] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
        Zs[174] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
        Zs[2] = ["Шкура Зайца", "Этот кролик был таким милым..."];
        Zs[178] = ["Чистая Шкура", "Вы - фабрика хлеба"];
        Zs[179] = ["Чёрная Шкура", "Вы готовы делать зло."];
        Zs[146] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
        Zs[139] = ["Чешуя", "Она пахнет рыбой!"];
        Zs[129] = ["Шкура Кракена", "Вы не испугались?"];
        Zs[113] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
        Zs[118] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
        Zs[114] = ["Верстак", "Необходим для создания многих предметов"];
        Zs[161] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
        Zs[147] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
        Zs[167] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
        Zs[57] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
        Zs[0] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
        Zs[5] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
        Zs[6] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
        Zs[9] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
        Zs[30] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
        Zs[62] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
        Zs[16] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
        Zs[8] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
        Zs[1] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
        Zs[3] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
        Zs[4] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
        Zs[31] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
        Zs[35] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
        Zs[36] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
        Zs[37] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
        Zs[38] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
        Zs[45] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
        Zs[12] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
        Zs[13] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
        Zs[14] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
        Zs[15] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
        Zs[33] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
        Zs[46] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
        Zs[50] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
        Zs[51] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
        Zs[52] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
        Zs[58] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
        Zs[25] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
        Zs[26] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
        Zs[27] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
        Zs[43] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
        Zs[59] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
        Zs[23] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
        Zs[41] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
        Zs[42] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
        Zs[83] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Zs[10] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
        Zs[11] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
        Zs[40] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
        Zs[84] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Zs[85] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
        Zs[86] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
        Zs[48] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
        Zs[47] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
        Zs[185] = ["Шар Дракона", "Даётся за квест"];
        Zs[149] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
        Zs[175] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
        Zs[176] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
        Zs[177] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
        Zs[77] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
        Zs[78] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
        Zs[79] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
        Zs[180] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
        Zs[181] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
        Zs[127] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
        Zs[128] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
        Zs[130] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
        Zs[49] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
        Zs[29] = ["Рюкзак", "Больше места для ваших предметов!"];
        Zs[120] = ["Бумага", "Используется при создании книги"];
        Zs[28] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
        Zs[195] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
        Zs[148] = ["Замок", "Позволяет вам закрыть ваш сундук"];
        Zs[158] = ["Ключ", "Даёт вам открыть один запертый сундук"];
        Zs[159] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
        Zs[125] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
        Zs[183] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
        Zs[190] = ["Крыша", "Немного скрывает вас и согревает!"];
        Zs[182] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
        Zs[162] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
        Zs[163] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
        Zs[164] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
        Zs[165] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
        Zs[122] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
        Zs[160] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
        Zs[168] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
        Zs[169] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
        Zs[170] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
        Zs[123] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
        Zs[166] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
        Zs[171] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
        Zs[172] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
        Zs[173] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
        Zs[124] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
        Zs[119] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
        Zs[135] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
        Zs[144] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
        Zs[151] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
        Zs[300] = "Вы не можете зайти на этот сервер";
        Zs[301] = "Выгнаны: ";
        Zs[302] = "Ваш ключ уже используется кем-то";
        Zs[303] = "Ваш ключ неправильный";
        Zs[304] = "У вас старая версия, вам нужно очистить кеш";
        Zs[305] = "Ресурсов больше нет";
        Zs[306] = "Вы выжили 1 день";
        Zs[307] = "Вы выжили ";
        Zs[308] = " дней";
        Zs[309] = "Вы умерли ;-;";
        Zs[310] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
        Zs[311] = "Сервер заполнен! Спамьте кнопку играть!";
        Zs[312] = "Ресурсы закончились";
        Zs[313] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
        Zs[314] = " умер";
        Zs[315] = "Это не тот инструмент";
        Zs[316] = "Вы вошли в команду";
        Zs[317] = "Вы умерли";
        Zs[318] = " вошёл в команду";
        Zs[319] = "Ваша команда была разрушена";
        Zs[320] = "Вы покинули команду";
        Zs[321] = " покинул команду";
        Zs[322] = "Кто-то использует ваш токен :>";
        Zs[323] = "Выберите сервер";
        Zs[324] = "игроков";
        Zs[325] = "игроков всего";
        Zs[326] = "игроков в этом режиме";
        Zs[327] = "Скоро...";
        document.getElementById("nickname_input").placeholder = "Имя";
        at[0] = ["Вы были убиты без причины"];
        at[1] = ["Вы умерли от голода, как название игры подразумевает это"];
        at[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
        at[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
        at[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
        at[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
        at[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
        at[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
        at[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
        at[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
        at[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
        at[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
        at[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
        at[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
        at[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
        at[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
        at[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
        at[17] = ["Твоя кожа разваливается, солнце убило тебя"];
        at[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
        at[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
        at[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
        at[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
    }
    const Og = 18;
    function qg(b, c, d, e, f, g) {
        ri(Kr, b, c, d, e, f, g);
        const a = function (b, c, d, e, f) {
            Ej(Kr, b, c, d, e, f);
            const g = Hw(Lr[0], Lr[1], Lr[2], Lr[3], Lr[4], Lr[0]);
            a = Lr[1];
            i = Lr[2];
            j = Lr[3];
            Dj(Kr, a, i, j);
            Af(Lr[0], Lr[1], Lr[2]);
            zk(Lr[0], Lr[1]);
            var a;
            var i;
            var j;
            return ~(g & 43785) & 43785 | ~(g & 43785) & g;
        }(Lr[0], Lr[1], Lr[2], Lr[3], Lr[4]);
        const h = Nv(Lr[5], Lr[0], Lr[1], Lr[2]);
        return (8 << ((a ^ h) >> 16 & 255)) + (24 << ((a ^ h) >> 8 & 255)) + (16 << ((a ^ h) & 255)) + (0 << ((a ^ h) >> 24 & 255));
    }
    const Hg = 20;
    const Ug = 15;
    const Yg = 0;
    function Kg() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["mão"];
        Zs[140] = ["terra", "está sujo!"];
        Zs[126] = ["areia", "entrou nos meus olhos!"];
        Zs[109] = ["madeira", "você não pode pegar o suficiente disso!"];
        Zs[108] = ["pedra", "também chamado rocha"];
        Zs[111] = ["ouro", "seja generoso, dê para outros"];
        Zs[112] = ["diamante", "o que você irá fazer com isso?"];
        Zs[121] = ["ametista", "é mauve como lapa"];
        Zs[131] = ["farinha", "usada na cozinha"];
        Zs[133] = ["biscoito", "biscoito da vovó", "comida: 50"];
        Zs[136] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
        Zs[116] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
        Zs[117] = ["carne assada", "um mal passado, por favor", "comida: 35"];
        Zs[137] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
        Zs[138] = ["peixe assado", "com limão é perfeito", "comida: 35"];
        Zs[143] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
        Zs[145] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
        Zs[200] = ["doces", "apenas para crianças!", "comida: 100"];
        Zs[199] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
        Zs[201] = ["pisca-pisca", "decoração perfeita de telhado"];
        Zs[115] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Zs[110] = ["berry", "Berry saborosa!", "comida: 10"];
        Zs[132] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
        Zs[134] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
        Zs[188] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
        Zs[189] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
        Zs[191] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
        Zs[192] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
        Zs[193] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
        Zs[194] = ["mato de espinhos", "pica!"];
        Zs[141] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
        Zs[142] = ["gelo", "útil para fazer bolo e água"];
        Zs[55] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
        Zs[174] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
        Zs[2] = ["pele de coelho", "o coelho era tão fofo..."];
        Zs[178] = ["pele pura", "você é uma fábrica de pão"];
        Zs[179] = ["pele negra", "você está pronto para fazer algo errado"];
        Zs[146] = ["pele de inverno", "ele só queria um abraço"];
        Zs[139] = ["escala", "é pequeno como peixe!"];
        Zs[129] = ["pele do kraken", "você não está com medo?"];
        Zs[113] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
        Zs[118] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
        Zs[114] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
        Zs[161] = ["linha", "usada para fazer chapéus e mochila"];
        Zs[147] = ["linha de diamante", "usada para fazer chapéus especiais"];
        Zs[167] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
        Zs[57] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
        Zs[0] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
        Zs[5] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
        Zs[6] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
        Zs[9] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
        Zs[30] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
        Zs[62] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
        Zs[16] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
        Zs[8] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
        Zs[Vr.ᐃᐃⲆⵠⲆΔⲆΔᐃ] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
        Zs[3] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
        Zs[4] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
        Zs[31] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
        Zs[35] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
        Zs[36] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
        Zs[37] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
        Zs[38] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
        Zs[45] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
        Zs[12] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
        Zs[13] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
        Zs[14] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
        Zs[15] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
        Zs[33] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
        Zs[46] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
        Zs[50] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
        Zs[51] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
        Zs[52] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
        Zs[58] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
        Zs[25] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
        Zs[26] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
        Zs[27] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
        Zs[43] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
        Zs[59] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
        Zs[23] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
        Zs[41] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
        Zs[42] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
        Zs[83] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
        Zs[10] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
        Zs[11] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
        Zs[40] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
        Zs[84] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Zs[85] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
        Zs[86] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
        Zs[48] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
        Zs[47] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
        Zs[185] = ["esfera do dragão", "dado na questt"];
        Zs[149] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
        Zs[175] = ["pedra verde", "você não vai trapacear, promete?"];
        Zs[176] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
        Zs[177] = ["pedra azul", "para pessoas muito gentis"];
        Zs[77] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
        Zs[78] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
        Zs[79] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
        Zs[180] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
        Zs[181] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
        Zs[127] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
        Zs[128] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
        Zs[130] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
        Zs[49] = ["regador", "permite regar as plantas", "dano: 1"];
        Zs[29] = ["mochila", "mais espaço para seus itens!"];
        Zs[120] = ["papel", "usado para fazer o livro"];
        Zs[28] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
        Zs[195] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
        Zs[148] = ["fechadura", "permite você trancar seu baú"];
        Zs[158] = ["chave", "permite destrancar um baú"];
        Zs[159] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
        Zs[125] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
        Zs[183] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
        Zs[190] = ["telhado", "esconde você um pouco e te esquenta!"];
        Zs[182] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
        Zs[162] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
        Zs[163] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
        Zs[164] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
        Zs[165] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
        Zs[122] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
        Zs[160] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
        Zs[168] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
        Zs[169] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
        Zs[170] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
        Zs[123] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
        Zs[166] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
        Zs[171] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
        Zs[172] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
        Zs[173] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
        Zs[124] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
        Zs[119] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
        Zs[135] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Zs[144] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
        Zs[151] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
        Zs[300] = "você não pode entrar no servidor";
        Zs[301] = "kickado: ";
        Zs[302] = "sua chave está em uso por outra pessoa";
        Zs[303] = "sua chave está errada";
        Zs[304] = "você tem uma versão velha, limpe seu cache";
        Zs[305] = "não tem mais recursos";
        Zs[306] = "você sobreviveu 1 dia";
        Zs[307] = "você sobreviveu ";
        Zs[308] = " dias";
        Zs[309] = "você está morto ;-;";
        Zs[310] = "servidor não pôde achar um local de spawn! spam o botão de play!";
        Zs[311] = "servidor está cheio! spam o botão de play!";
        Zs[312] = "não tem recursos";
        Zs[313] = "inventário está cheio (botão direito para deletar itens)";
        Zs[314] = " está morto";
        Zs[315] = "essa não é a ferramenta certa";
        Zs[316] = "você entrou no time";
        Zs[317] = "você está morto";
        Zs[318] = "entrou no time";
        Zs[319] = "seu time foi destruido";
        Zs[320] = "você saiu do time";
        Zs[321] = " saiu do time";
        Zs[322] = "alguém roubou sua ficha :>";
        Zs[323] = "escolha um servidor";
        Zs[324] = "jogadores";
        Zs[325] = "jogadores totais";
        Zs[326] = "jogadores nesse modo";
        Zs[327] = "Coming soon...";
        document.getElementById("nickname_input").placeholder = "Apelido";
        at[0] = ["você morreu sem motivo"];
        at[1] = ["você morreu de fome, como o jogo diz"];
        at[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
        at[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
        at[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
        at[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
        at[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
        at[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
        at[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
        at[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
        at[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
        at[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
        at[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
        at[13] = ["você morreu de sede. melhor beber sua própria urina."];
        at[14] = ["você sabia que você morre afogado? agora você sabe."];
        at[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
        at[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
        at[17] = ["sua pele caindo aos pedaços, o sol te matou."];
        at[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
        at[19] = ["como vampiro, não chegue perto do alho."];
        at[20] = ["você comeu alho como vampiro, o que você esperava?"];
        at[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
    }
    const Vg = 0;
    function Xg() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["Mano"];
        Zs[140] = ["Tierra", "¡Tan limpia como mis manos!"];
        Zs[126] = ["Arena", "¡Tengo arena en mis ojos!"];
        Zs[109] = ["Madera", "¡Nunca hay suficiente!"];
        Zs[108] = ["Piedra", "También llamada roca."];
        Zs[111] = ["Oro", "Sé generoso, compártelo con los otros"];
        Zs[112] = ["Diamante", "¿Que vas a hacer con él?"];
        Zs[121] = ["Amatista", "Es Mauve como Lapa"];
        Zs[131] = ["Harina", "Usada para cocinar."];
        Zs[133] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
        Zs[136] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
        Zs[116] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
        Zs[117] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
        Zs[137] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
        Zs[138] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
        Zs[143] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
        Zs[145] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
        Zs[200] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
        Zs[199] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
        Zs[201] = ["Guirnalda", "Perfecta para decorar el techo"];
        Zs[115] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Zs[110] = ["Baya", "No es venenosa.", "Comida: 10"];
        Zs[132] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Zs[134] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
        Zs[188] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
        Zs[189] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
        Zs[191] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
        Zs[192] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
        Zs[193] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
        Zs[194] = ["Planta de Espinas", "¡Te daña!"];
        Zs[141] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
        Zs[142] = ["Hielo", "Bueno para hacer tartas y agua"];
        Zs[55] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
        Zs[174] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
        Zs[2] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
        Zs[178] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
        Zs[179] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
        Zs[146] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
        Zs[139] = ["Escamas", "¡Huele a pescado!"];
        Zs[129] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
        Zs[113] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
        Zs[118] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
        Zs[114] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
        Zs[161] = ["Hilo", "Usado para craftear ropa y mochila"];
        Zs[147] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
        Zs[167] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
        Zs[57] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
        Zs[0] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
        Zs[5] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
        Zs[6] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
        Zs[9] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
        Zs[30] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
        Zs[62] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
        Zs[16] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
        Zs[8] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
        Zs[1] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
        Zs[3] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
        Zs[4] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
        Zs[31] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
        Zs[35] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
        Zs[36] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
        Zs[37] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
        Zs[38] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
        Zs[45] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
        Zs[12] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
        Zs[13] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
        Zs[14] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
        Zs[15] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
        Zs[33] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
        Zs[46] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
        Zs[50] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
        Zs[51] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
        Zs[52] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
        Zs[58] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
        Zs[25] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
        Zs[26] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
        Zs[27] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
        Zs[43] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
        Zs[59] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
        Zs[23] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
        Zs[41] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
        Zs[42] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
        Zs[83] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
        Zs[10] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
        Zs[11] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
        Zs[40] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
        Zs[84] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
        Zs[85] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
        Zs[86] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
        Zs[48] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
        Zs[47] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
        Zs[185] = ["Esfera del Dragón", "Dada en la misión"];
        Zs[149] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
        Zs[175] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
        Zs[176] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
        Zs[177] = ["Gema Azul", "Para gente muy amable"];
        Zs[77] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Zs[78] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
        Zs[79] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
        Zs[180] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
        Zs[181] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
        Zs[127] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
        Zs[128] = ["Botella Vacia", "La puedes llenar de agua"];
        Zs[130] = ["Regadera Vacía", "La tienes que llenar de agua"];
        Zs[49] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
        Zs[29] = ["Mochila", "¡Mas espacio para tus cosas!"];
        Zs[120] = ["Hoja", "Usada para hacer un libro"];
        Zs[28] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
        Zs[195] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
        Zs[148] = ["Cerradura", "Te permite cerrar tu cofre"];
        Zs[158] = ["Llave", "Te permite abrir un cofre cerrado"];
        Zs[159] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
        Zs[125] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
        Zs[183] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
        Zs[190] = ["Techo", "Te esconde un poco y te protege del frío"];
        Zs[182] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
        Zs[162] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
        Zs[163] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
        Zs[164] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
        Zs[165] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
        Zs[122] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
        Zs[160] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
        Zs[168] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
        Zs[169] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
        Zs[170] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
        Zs[123] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
        Zs[166] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
        Zs[171] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
        Zs[172] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
        Zs[173] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
        Zs[124] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
        Zs[119] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
        Zs[135] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Zs[144] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
        Zs[151] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
        Zs[300] = "No puedes unirte a este servidor";
        Zs[301] = "Expulsado: ";
        Zs[302] = "Tu llave ya está usada";
        Zs[303] = "Tu llave está mal";
        Zs[304] = "Tienes una versión antigua, limpia tu cache";
        Zs[305] = "No hay mas recursos";
        Zs[306] = "Has sobrevivido 1 día";
        Zs[307] = "Has sobrevivido ";
        Zs[308] = " días";
        Zs[309] = "Estás muerto ;-;";
        Zs[310] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
        Zs[311] = "El servidor esta lleno, ¡spamea el botón de jugar!";
        Zs[312] = "Recurso vacio";
        Zs[313] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
        Zs[314] = " está muerto";
        Zs[315] = "Esta no es la herramienta correcta";
        Zs[316] = "Te has unido a un equipo";
        Zs[317] = "Estás muerto";
        Zs[318] = " se unió al equipo";
        Zs[319] = "Tu equipo ha sido destruido";
        Zs[320] = "Has dejado el equipo";
        Zs[321] = " dejo el equipo ";
        Zs[322] = "Alguien te robó tu token :>";
        Zs[323] = "Elige un servidor";
        Zs[324] = "jugadores";
        Zs[325] = "total de jugadores";
        Zs[326] = "Jugadores en este modo de juego";
        Zs[327] = "Próximamente...";
        document.getElementById("nickname_input").placeholder = "Apodo";
        at[0] = ["Has muerto por ninguna razón"];
        at[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
        at[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
        at[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
        at[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
        at[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
        at[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
        at[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
        at[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
        at[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
        at[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
        at[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
        at[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
        at[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
        at[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
        at[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
        at[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
        at[17] = ["Tu piel se cayó, el sol te quemó."];
        at[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
        at[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
        at[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
        at[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
    }
    const Zg = 13;
    const $g = 17;
    const Ns = 10;
    const Os = 255;
    function Ps(b, c, d, e, f) {
        const g = (1013904223 + (d + 64848) * 1664525) % 4294967296;
        const a = ((15809 + e) * 2147483629 + 2147483587) % 2147483647;
        const h = (2531011 + (f + 15508) * 214013) % 4294967296;
        return (2531011 + (56132 + (Gw((0 << (b >> 24 & 255)) + (24 << (b & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)), ((c + 12283) * 1103515245 + 12345) % 2147483648) ^ function (b, c, d) {
            const e = b ^ 63634;
            const f = (c | 4723) & ~(c & 4723);
            const g = ~(d & 6440) & 6440 | ~(d & 6440) & d;
            const a = function (b, c, d, e, f, i) {
                const a = ((b + 26740) * 1664525 + 1013904223) % 4294967296;
                const j = (0 << (c >> 0 & 255)) + (8 << (c >> 8 & 255)) + (24 << (c >> 24 & 255)) + (16 << (c >> 16 & 255));
                const k = (16 << (f >> 24 & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255)) + (0 << (f & 255));
                const h = (2531011 + (i + 46278) * 214013) % 4294967296;
                const l = dr(a, j, ~(d & 51888) & (d | 51888), e ^ 18545);
                const g = function (b, c, d, e) {
                    const f = ~(b & 46989) & (b | 46989);
                    const g = ~(c & 24259) & (c | 24259);
                    const a = (33534 + d) % 65400;
                    const h = Bw(f, g, a, ((35747 + e) * 1103515245 + 12345) % 2147483648);
                    (function (b, c, d) {
                        const e = ~(b & 6897) & b | ~(b & 6897) & 6897;
                        const f = (c | 10949) & ~(c & 10949);
                        const g = (d | 61335) & ~(d & 61335);
                        const a = Ok(e, f, g, e, f, g);
                        const h = no(e, f, g, e, f);
                    })(f, g, a);
                    return (h | 25571) & ~(h & 25571);
                }(k, h, a, j);
                return (24 << ((l ^ g) >> 16 & 255)) + (16 << ((l ^ g) >> 24 & 255)) + (8 << ((l ^ g) & 255)) + (0 << ((l ^ g) >> 8 & 255));
            }(e, f, g, e, f, g);
            Xs(e, f, g, e, f, g);
            return ~(a & 61065) & a | ~(a & 61065) & 61065;
        }(g, a, h))) * 214013) % 4294967296;
    }
    const Qs = 4;
    function Rs(a, b) {
        const c = a ^ 53197;
        const d = ~(b & 8782) & 8782 | ~(b & 8782) & b;
        const e = Nw(c, d, c, d);
        oo(c, d, c, d, c);
        return ~(e & 623) & e | ~(e & 623) & 623;
    }
    function Ss() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["Hand"];
        Zs[140] = ["Boden", "Dreckig!"];
        Zs[126] = ["Sand", "Ich habe es in meine Augen bekommen!"];
        Zs[109] = ["Holz", "Du kannst niemals zu viel haben!"];
        Zs[108] = ["Stein", "Auch Fels gennant"];
        Zs[111] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
        Zs[112] = ["Diamant", "Was wirst du daraus machen?"];
        Zs[121] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
        Zs[131] = ["Mehl", "wird fürs Backen gebraucht"];
        Zs[133] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
        Zs[136] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
        Zs[116] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
        Zs[117] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
        Zs[137] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
        Zs[138] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
        Zs[143] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
        Zs[145] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
        Zs[200] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
        Zs[199] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
        Zs[201] = ["Girlande", "perfekter Schmuck für Dächer"];
        Zs[115] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Zs[110] = ["Beere", "Beeren lecker!", "Essen: 10"];
        Zs[132] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Zs[134] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
        Zs[188] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Zs[189] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
        Zs[191] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
        Zs[192] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
        Zs[193] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
        Zs[194] = ["Dornenbusch", "Es sticht!"];
        Zs[141] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
        Zs[142] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
        Zs[55] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
        Zs[174] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
        Zs[2] = ["Hasenfell", "Der Hase war so süß..."];
        Zs[178] = ["Klares Fell", "Du bist eine Brotfabrik"];
        Zs[179] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
        Zs[146] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
        Zs[139] = ["Schuppen", "Es riecht wie Fisch!"];
        Zs[129] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
        Zs[113] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
        Zs[118] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
        Zs[114] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
        Zs[161] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
        Zs[147] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
        Zs[167] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
        Zs[57] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
        Zs[0] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
        Zs[5] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
        Zs[6] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Zs[9] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
        Zs[30] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
        Zs[62] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
        Zs[16] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
        Zs[8] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
        Zs[1] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
        Zs[3] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Zs[4] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Zs[31] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Zs[35] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
        Zs[36] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
        Zs[37] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
        Zs[38] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
        Zs[45] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
        Zs[12] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
        Zs[13] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
        Zs[14] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
        Zs[15] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
        Zs[33] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
        Zs[46] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
        Zs[50] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
        Zs[51] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
        Zs[52] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
        Zs[58] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
        Zs[25] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
        Zs[26] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
        Zs[27] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
        Zs[43] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
        Zs[59] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
        Zs[23] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[41] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[42] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[83] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[10] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[11] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[40] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
        Zs[84] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[85] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[86] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
        Zs[48] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
        Zs[47] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Zs[185] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
        Zs[149] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
        Zs[175] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
        Zs[176] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
        Zs[177] = ["Blauer Edelstein", "Für sehr nette Leute"];
        Zs[77] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Zs[78] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Zs[79] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
        Zs[180] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
        Zs[181] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
        Zs[127] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
        Zs[128] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
        Zs[130] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
        Zs[49] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
        Zs[29] = ["Rucksack", "Mehr Platz im Inventar!"];
        Zs[120] = ["Papier", "Wird fürs Büchermachen verwendet"];
        Zs[28] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
        Zs[195] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
        Zs[148] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
        Zs[158] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
        Zs[159] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
        Zs[125] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
        Zs[183] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
        Zs[190] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
        Zs[182] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
        Zs[162] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
        Zs[163] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
        Zs[164] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
        Zs[165] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
        Zs[122] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
        Zs[160] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
        Zs[168] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
        Zs[169] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
        Zs[170] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
        Zs[123] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
        Zs[166] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
        Zs[171] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
        Zs[172] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
        Zs[173] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
        Zs[124] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
        Zs[119] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
        Zs[135] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Zs[144] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
        Zs[151] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
        Zs[300] = "Du kannst diesem Server nicht beitreten";
        Zs[301] = "Gekickt: ";
        Zs[302] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
        Zs[303] = "Dein Schlüssel ist falsch";
        Zs[304] = "Deine Version ist veraltet, säubere dein Cache";
        Zs[305] = "Es gibt keine neuen Ressourcen";
        Zs[306] = "Du hast einen Tag überlebt";
        Zs[307] = "Du hast überlebt ";
        Zs[308] = " Tage";
        Zs[309] = "Du bist gestorben ;-;";
        Zs[310] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
        Zs[311] = "Server ist voll! Drücke immer wieder auf spielen!";
        Zs[312] = "Ressource ist leer";
        Zs[313] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
        Zs[314] = " ist gestorben";
        Zs[315] = "Das ist nicht das richtige Werkzeug";
        Zs[316] = "Du bist einem Team beigetreten";
        Zs[317] = "Du bist gestorben";
        Zs[318] = " ist dem Team beigetreten";
        Zs[319] = "Dein Team wurde zerstört";
        Zs[320] = "Du hast das Team verlassen";
        Zs[321] = " hat das Team verlassen";
        Zs[322] = "Jemand hat dein Token gestohlen :>";
        Zs[323] = "Suche dir ein Server aus";
        Zs[324] = "Spieler";
        Zs[325] = "alle Spieler";
        Zs[326] = "Spieler in diesem Modus";
        Zs[327] = "Bald verfügbar...";
        document.getElementById("nickname_input").placeholder = "Spitzname";
        at[0] = ["Du wurdest ohne Grund getötet"];
        at[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
        at[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
        at[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
        at[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
        at[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
        at[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
        at[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
        at[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
        at[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
        at[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
        at[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
        at[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
        at[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
        at[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
        at[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
        at[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
        at[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
        at[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
        at[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
        at[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
        at[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
    }
    function Ts(c, d, e, f, i, j) {
        const a = ((3602 + c) * 1103515245 + 12345) % 2147483648;
        const k = (d | 8190) & ~(d & 8190);
        const m = ((8004 + e) * 1103515245 + 12345) % 2147483648;
        const h = ((39824 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (8 << (j & 255)) + (0 << (j >> 8 & 255)) + (16 << (j >> 16 & 255)) + (24 << (j >> 24 & 255));
        const g = Rk(a, k, m, h, (24 << (i & 255)) + (8 << (i >> 8 & 255)) + (0 << (i >> 16 & 255)) + (16 << (i >> 24 & 255)));
        const n = ef(l, a, k, m, h);
        return (0 << ((g ^ n) >> 8 & 255)) + (16 << ((g ^ n) >> 24 & 255)) + (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) >> 0 & 255));
    }
    const Us = 15;
    function Vs() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " BACK TO THE GAME";
        Zs[329] = " Share on Twitter";
        Zs[330] = " Share on Facebook";
        Zs[331] = "You can buy items on the shop in the next game with your points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Kill";
        Zs[335] = "Days survived";
        Zs[336] = "Building method: Free. Press G to change";
        Zs[337] = "Building method: Grid. Press G to change";
        Zs[197] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
        Zs[18] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quests";
        document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
        document.getElementById("constraintquest").innerHTML = " Constraints";
        document.getElementById("claim_rewards").innerHTML = " Claim rewards";
        document.getElementById("rewardquest").innerHTML = " Reward";
        document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
        document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
        document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
        document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
        document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
        document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
        document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "CLAIM REWARD!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUIT";
        Zs[7] = ["Ręka"];
        Zs[140] = ["Ziemia", "Brudna!"];
        Zs[126] = ["Piasek", "Mam go w oczach!"];
        Zs[109] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
        Zs[108] = ["Kamień", "Także nazywany skałą"];
        Zs[111] = ["Złoto", "Bądź hojny, daj trochę innym"];
        Zs[112] = ["Diament", "Co z nim zrobisz?"];
        Zs[121] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
        Zs[131] = ["Mąka", "Używana w gotowaniu"];
        Zs[133] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
        Zs[136] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
        Zs[116] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
        Zs[117] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
        Zs[137] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
        Zs[138] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
        Zs[143] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
        Zs[145] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
        Zs[200] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
        Zs[199] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
        Zs[201] = ["Girlanda", "Idealna do dekorowania dachów"];
        Zs[115] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Zs[110] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
        Zs[132] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Zs[134] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
        Zs[188] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Zs[189] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
        Zs[191] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
        Zs[192] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
        Zs[193] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
        Zs[194] = ["Kolczasty krzew", "Kłuje!"];
        Zs[141] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
        Zs[142] = ["Lód", "Użyteczny do robienia ciast i wody"];
        Zs[55] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
        Zs[174] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
        Zs[2] = ["Skóra królika", "Ten królik był taki słodziutki..."];
        Zs[178] = ["Skóra", "Jesteś fabryką chleba"];
        Zs[179] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
        Zs[146] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
        Zs[139] = ["Łuski", "Pachnie jak ryba!"];
        Zs[129] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
        Zs[113] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
        Zs[118] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
        Zs[114] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
        Zs[161] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
        Zs[147] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
        Zs[167] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
        Zs[57] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
        Zs[0] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
        Zs[5] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
        Zs[6] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Zs[9] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
        Zs[30] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
        Zs[62] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
        Zs[16] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
        Zs[8] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
        Zs[1] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
        Zs[3] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Zs[4] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Zs[31] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Zs[35] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
        Zs[36] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
        Zs[37] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
        Zs[38] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
        Zs[45] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
        Zs[12] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
        Zs[13] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
        Zs[14] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
        Zs[15] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
        Zs[33] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
        Zs[46] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
        Zs[50] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
        Zs[51] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
        Zs[52] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
        Zs[58] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
        Zs[25] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
        Zs[26] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
        Zs[27] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
        Zs[43] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
        Zs[59] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
        Zs[23] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
        Zs[41] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
        Zs[42] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
        Zs[83] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
        Zs[10] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
        Zs[11] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
        Zs[40] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
        Zs[84] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
        Zs[85] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
        Zs[86] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
        Zs[48] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
        Zs[47] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Zs[185] = ["Smocza kula", "Zdobyta podczas zadania"];
        Zs[149] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
        Zs[175] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
        Zs[176] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
        Zs[177] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
        Zs[77] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Zs[78] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Zs[79] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
        Zs[180] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
        Zs[181] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
        Zs[127] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
        Zs[128] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
        Zs[130] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
        Zs[49] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
        Zs[29] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
        Zs[120] = ["Papier", "Używany w tworzeniu książki"];
        Zs[28] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
        Zs[195] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
        Zs[148] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
        Zs[158] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
        Zs[159] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
        Zs[125] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
        Zs[183] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
        Zs[190] = ["Dach", "Trochę cie ogrzewa i chowa!"];
        Zs[182] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
        Zs[162] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
        Zs[163] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
        Zs[164] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
        Zs[165] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
        Zs[122] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
        Zs[160] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
        Zs[168] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
        Zs[169] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
        Zs[170] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
        Zs[123] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
        Zs[166] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
        Zs[171] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
        Zs[172] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
        Zs[173] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
        Zs[124] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
        Zs[119] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
        Zs[135] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Zs[144] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
        Zs[151] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
        Zs[300] = "Nie możesz dołączyć do tego serwera";
        Zs[301] = "Wyrzucony: ";
        Zs[302] = "Twój klucz jest aktualnie używany przez innego gracza";
        Zs[303] = "Twój klucz jest nieprawidłowy";
        Zs[304] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
        Zs[305] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
        Zs[306] = "Przeżyłeś 1 dzień";
        Zs[307] = "Przeżyłeś ";
        Zs[308] = " dni";
        Zs[309] = "Jesteś martwy ;-;";
        Zs[310] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
        Zs[311] = "Serwer jest pełny! Spamuj przycisk zagraj!";
        Zs[312] = "Źródło jest puste";
        Zs[313] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
        Zs[314] = " jest martwy";
        Zs[315] = "To nie jest właściwe narzędzie";
        Zs[316] = "Dołączyłeś do drużyny";
        Zs[317] = "Jesteś martwy";
        Zs[318] = " dołączył do drużyny";
        Zs[319] = "Twoja drużyna została zniszczona";
        Zs[320] = " Opuściłeś drużynę";
        Zs[321] = " opuścił drużynę";
        Zs[322] = "Ktoś ukradł twój żeton :>";
        Zs[323] = "Wybierz serwer";
        Zs[324] = "graczy";
        Zs[325] = "wszystkich graczy";
        Zs[326] = "graczy w tym trybie";
        Zs[327] = "Już wkrótce...";
        document.getElementById("nickname_input").placeholder = "Przydomek";
        at[0] = ["Zostałeś zabity bez powodu"];
        at[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
        at[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
        at[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
        at[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
        at[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
        at[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
        at[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
        at[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
        at[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
        at[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
        at[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
        at[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
        at[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
        at[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
        at[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
        at[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
        at[17] = ["Twoja skóra odpada, słońce cię zabija."];
        at[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
        at[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
        at[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
        at[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
    }
    function Ws() {
        Zs[184] = ["You feel a great power emanating from this orb"];
        at[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
        Zs[196] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
        Zs[328] = " RETOUR AU JEU";
        Zs[329] = " Partage sur Twitter";
        Zs[330] = " Partage sur Facebook";
        Zs[331] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
        Zs[332] = "points";
        Zs[333] = "Score";
        Zs[334] = "Tués";
        Zs[335] = "Jours survécus";
        Zs[336] = "Mode de construction: Libre. Appuie sur G pour changer";
        Zs[337] = "Mode de construction: Grille. Appuie sur G pour changer";
        Zs[197] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
        Zs[18] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
        Zs[61] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
        Zs[198] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
        document.getElementById("typequest").innerHTML = "Chrono Quêtes";
        document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
        document.getElementById("constraintquest").innerHTML = " Contraintes";
        document.getElementById("claim_rewards").innerHTML = " Résultat";
        document.getElementById("rewardquest").innerHTML = " Récompenses";
        document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
        document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
        document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
        document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
        document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
        document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
        document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var a = 0; a < 7; a++) {
            document.getElementById("claim_reward_" + a).innerHTML = "RÉCOMPENSE!";
        }
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
        Zs[7] = ["Main"];
        Zs[140] = ["Terre", "C'est sale!"];
        Zs[126] = ["Sable", "J'en ai dans les yeux"];
        Zs[109] = ["Bois", "Tu n'en auras jamais trop!"];
        Zs[108] = ["Pierre", "Aussi appelée roche"];
        Zs[111] = ["Or", "Sois généreux, donne en aux autres"];
        Zs[112] = ["Diamant", "Comme tes yeux! wesh"];
        Zs[121] = ["Améthyste", "C'est Mauve comme Lapa"];
        Zs[131] = ["Farine", "Utile pour la cuisine"];
        Zs[133] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
        Zs[136] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
        Zs[116] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
        Zs[117] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
        Zs[137] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
        Zs[138] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
        Zs[143] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
        Zs[145] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
        Zs[200] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
        Zs[199] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
        Zs[201] = ["Guirlandes", "Utilisable sur les toits"];
        Zs[115] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Zs[110] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
        Zs[132] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Zs[134] = ["Blé", "Peut être transformé en farine dans les moulins"];
        Zs[188] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
        Zs[189] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
        Zs[191] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
        Zs[192] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
        Zs[193] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
        Zs[194] = ["Ronces", "Ça pique!"];
        Zs[141] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
        Zs[142] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
        Zs[55] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
        Zs[174] = ["Peau de loup", "Il était où le gentil ti Youki?"];
        Zs[2] = ["Peau de lapin", "Vous êtes un monstre"];
        Zs[178] = ["Fourrure blanche", "Tu es une usine à pain"];
        Zs[179] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
        Zs[146] = ["Fourrure d'hiver", "Il voulait juste un calin"];
        Zs[139] = ["Écailles", "Ça sent le poisson!"];
        Zs[129] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
        Zs[113] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
        Zs[118] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
        Zs[114] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
        Zs[161] = ["Fil", "Utile pour faire des chapeaux et un sac"];
        Zs[147] = ["Fil de diamant", "Utile pour faire des chapeaux"];
        Zs[167] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
        Zs[57] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
        Zs[0] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
        Zs[5] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
        Zs[6] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
        Zs[9] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
        Zs[30] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
        Zs[62] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
        Zs[16] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
        Zs[8] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
        Zs[1] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
        Zs[3] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
        Zs[4] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
        Zs[31] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
        Zs[35] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
        Zs[36] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
        Zs[37] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
        Zs[38] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
        Zs[45] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
        Zs[12] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
        Zs[13] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
        Zs[14] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
        Zs[15] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
        Zs[33] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
        Zs[46] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
        Zs[50] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
        Zs[51] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
        Zs[52] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
        Zs[58] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
        Zs[25] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
        Zs[26] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
        Zs[27] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
        Zs[43] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
        Zs[59] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
        Zs[23] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[41] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[42] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[83] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[10] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[11] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[40] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
        Zs[84] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[85] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[86] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
        Zs[48] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
        Zs[47] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
        Zs[185] = ["Orbe du Dragon", "Donné en Quête"];
        Zs[149] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
        Zs[175] = ["Gemme verte", "Tu n'as pas triché, promis?"];
        Zs[176] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
        Zs[177] = ["Gemme bleue", "Pour les gens trop gentils"];
        Zs[77] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
        Zs[78] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
        Zs[79] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
        Zs[180] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
        Zs[181] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
        Zs[127] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
        Zs[128] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
        Zs[130] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
        Zs[49] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
        Zs[29] = ["Sac", "Plus de place dans ton inventaire!"];
        Zs[120] = ["Papier", "Pour fabriquer toute sorte d'objets"];
        Zs[28] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
        Zs[195] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
        Zs[148] = ["Cadenas", "Pour verrouiller un coffre"];
        Zs[158] = ["Clé", "Pour déverrouiller un coffre"];
        Zs[159] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
        Zs[125] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
        Zs[183] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
        Zs[190] = ["Toit", "Te cache un peu et te réchauffe"];
        Zs[182] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
        Zs[162] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
        Zs[163] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
        Zs[164] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
        Zs[165] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
        Zs[122] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
        Zs[160] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
        Zs[168] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
        Zs[169] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
        Zs[170] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
        Zs[123] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
        Zs[166] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
        Zs[171] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
        Zs[172] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
        Zs[173] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
        Zs[124] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
        Zs[119] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
        Zs[135] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Zs[144] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
        Zs[151] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
        Zs[300] = "Tu ne peux pas rejoindre le serveur";
        Zs[301] = "Expulsé: ";
        Zs[302] = "Ta clé est déjà utilisée par quelqu'un d'autre";
        Zs[303] = "Ta clé est fausse";
        Zs[304] = "Tu as une vieille version, rafraichis tes caches";
        Zs[305] = "Il n'y a plus de nouvelles ressources";
        Zs[306] = "Tu as survécu 1 jour";
        Zs[307] = "Tu as survécu ";
        Zs[308] = " jours";
        Zs[309] = "Tu es mort ;-;";
        Zs[310] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
        Zs[311] = "Le serveur est complet! Spam le bouton jouer";
        Zs[312] = "Cette ressource est vide";
        Zs[313] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
        Zs[314] = " est mort";
        Zs[315] = "Ce n'est pas le bon outil";
        Zs[316] = "Tu as rejoins une équipe";
        Zs[317] = "Tu es mort";
        Zs[318] = " a rejoint l'équipe";
        Zs[319] = "Ton équipe a été détruite";
        Zs[320] = "Tu as quitté l'équipe";
        Zs[321] = " a quitté l'équipe";
        Zs[322] = "Quelqu'un a volé ton token :>";
        Zs[323] = "Choisis un serveur";
        Zs[324] = "joueurs";
        Zs[325] = "joueurs";
        Zs[326] = "joueurs dans ce mode";
        Zs[327] = "Bientôt...";
        document.getElementById("nickname_input").placeholder = "Surnom";
        at[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
        at[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
        at[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
        at[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
        at[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
        at[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
        at[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
        at[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
        at[8] = ["Cet ours voulait juste un câlin."];
        at[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
        at[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
        at[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
        at[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
        at[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
        at[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
        at[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
        at[16] = ["Un kraken a 'kraké' tes os."];
        at[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
        at[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
        at[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
        at[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
        at[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
        Δᐃᐃᐃᐃ = "Uuunnnggg";
        ΔⵠⵠΔΔⲆⵠ = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
    }
    function Xs(c, d, e, f, i, j) {
        const a = (32704 + c) % 65384;
        const k = d ^ 9177;
        const m = (e | 29749) & ~(e & 29749);
        const h = ~(f & 26696) & f | ~(f & 26696) & 26696;
        const l = i ^ 28960;
        const g = (j | 47144) & ~(j & 47144);
        const n = Pf(a, k, m, h);
        Ok(l, g, a, k, m, h);
        return ~(n & 30990) & 30990 | ~(n & 30990) & n;
    }
    const Ys = 18;
    var Zs = [];
    for (var $s = 0; $s < 344; $s++) {
        Zs[$s] = "";
    }
    const _s = 19;
    var at = [];
    $(".md-languages").on("click", function () {
        $(this).toggleClass("active");
    });
    $(".md-languages ul li").on("click", function () {
        var a = $(this).text();
        if (a === "English") {
            Lg();
        } else if (a === "Français") {
            Ws();
        } else if (a === "Deutsch") {
            Ss();
        } else if (a === "Español") {
            Xg();
        } else if (a === "Português") {
            Kg();
        } else if (a === "Русский") {
            Ng();
        } else if (a === "Polski") {
            Vs();
        }
        ⵠᐃⵠᐃⵠ = [];
        Ww.ΔⵠΔΔ.label = [];
        $(".md-languages ul li").removeClass("active");
        $(this).addClass("active");
        $(".md-languages label button").text(a);
    });
    const bt = 4;
    const ct = 12;
    hr = "EN";
    var dt = navigator.language || navigator.userLanguage;
    switch (dt) {
        case "ru":
            hr = "RU";
            break;
        case "en":
            hr = "EN";
            break;
        case "es":
            hr = "SP";
            break;
        case "fr":
            hr = "FR";
            break;
        case "pl":
            hr = "PL";
            break;
        case "de":
            hr = "DE";
            break;
        case "pt":
            hr = "PT";
    }
    var et;
    if (hr === "FR") {
        $(".md-languages label button").text("Français");
        et = Ws;
    } else if (hr === "PL") {
        $(".md-languages label button").text("Polski");
        et = Vs;
    } else if (hr === "PT") {
        $(".md-languages label button").text("Português");
        et = Kg;
    } else if (hr === "SP") {
        $(".md-languages label button").text("Español");
        et = Xg;
    } else if (hr === "RU") {
        $(".md-languages label button").text("Русский");
        et = Ng;
    } else if (hr === "DE") {
        $(".md-languages label button").text("Deutsch");
        et = Ss;
    } else {
        $(".md-languages label button").text("English");
        et = Lg;
    }
    const ft = dl;
    function gt(c, d, e, f, i, j) {
        const a = ((c + 62036) * 22695477 + 1) % 4294967296;
        const k = (d | 16943) & ~(d & 16943);
        const m = ~(e & 58494) & e | ~(e & 58494) & 58494;
        const h = ((18197 + f) * 1664525 + 1013904223) % 4294967296;
        const l = (12345 + (57458 + j) * 1103515245) % 2147483648;
        const g = Rk(a, k, m, h, (0 << (i >> 16 & 255)) + (16 << (i & 255)) + (24 << (i >> 24 & 255)) + (8 << (i >> 8 & 255)));
        const n = Rk(l, a, k, m, h);
        return (24 << ((g ^ n) >> 16 & 255)) + (8 << ((g ^ n) & 255)) + (0 << ((g ^ n) >> 24 & 255)) + (16 << ((g ^ n) >> 8 & 255));
    }
    function ht(a, b, c, d, e) {
        Mj(Kr, a, b, c, d, e);
        return ((42 + (function (a, b) {
            Kj(Kr, a, b);
            const c = qg(Lr[0], Lr[1], Lr[0], Lr[1], Lr[0], Lr[1]);
            const d = Fw(Lr[0], Lr[1], Lr[0], Lr[1]);
            return ((247 + (c ^ d)) * 8121 + 28411) % 134456;
        }(Lr[0], Lr[1]) ^ jg(Lr[2], Lr[3], Lr[4], Lr[0], Lr[1], Lr[2]))) * 75 + 74) % 65537;
    }
    const it = 9;
    ⵠⵠ = {
        ⵠⵠᐃΔⵠΔᐃΔⲆ: "img/logo.png",
        ᐃⵠᐃΔⲆⵠᐃ: "img/mapday.png",
        ⵠⵠⲆᐃⲆΔⲆ: "img/mapnight.png",
        ΔᐃΔⲆⵠⲆⲆΔⲆ: "img/bigzday.png",
        ⵠⲆⵠΔΔⵠⵠⵠᐃ: "img/bigznight.png",
        ΔⲆⲆⵠⲆⵠΔ: "img/bigday-river1.png",
        ΔⵠΔⲆⵠⲆⲆⵠⲆ: "img/bigday-lake.png",
        ⲆⵠⲆΔⵠⲆΔ: "img/bigday-berry.png",
        ⲆᐃΔᐃⲆᐃⲆ: "img/bigday-stone1.png",
        ΔᐃᐃⲆⲆΔᐃ: "img/bigday-stone2.png",
        ᐃΔΔᐃⲆⲆΔ: "img/bigday-gold1.png",
        ⲆΔⵠᐃΔⲆⲆ: "img/bigday-gold2.png",
        ΔⵠⲆⵠᐃΔΔ: "img/bigday-emerald1.png",
        ⲆᐃⵠΔⲆᐃᐃ: "img/bigday-emerald2.png",
        ΔⲆᐃᐃⵠΔΔ: "img/bigday-amethyst.png",
        ⵠⲆᐃΔⲆᐃⵠ: "img/bigday-bear.png",
        ΔΔⵠᐃᐃⵠⲆ: "img/bigday-cave.png",
        ⵠⵠⲆⵠⲆⵠΔ: "img/bigday-diamond.png",
        ΔᐃᐃᐃⲆⵠⵠ: "img/bigday-island.png",
        ⵠⲆⵠᐃⲆⲆᐃ: "img/bigday-reidite.png",
        ΔⲆᐃᐃΔⵠⲆ: "img/bigday-spider.png",
        ⵠⵠⵠⲆⵠᐃⵠ: "img/bigday-wolf.png",
        ⵠΔⲆⵠⵠᐃᐃ: "img/bigday-fir-tree.png",
        ⲆⲆΔΔᐃⵠᐃ: "img/bigday-fox.png",
        ᐃⲆΔΔΔⵠⵠ: "img/bigday-kraken.png",
        ⵠⵠΔΔⵠᐃⵠ: "img/bigday-piranha.png",
        ⵠᐃⵠⵠⵠΔⲆ: "img/bigday-cactus.png",
        ΔᐃⵠΔⵠΔΔ: "img/bigday-magma.png",
        ⵠᐃᐃΔᐃΔᐃ: "img/bigday-river1.png",
        ᐃⲆᐃⵠΔΔᐃᐃⲆ: "img/bignight-lake.png",
        ⲆᐃⵠⵠᐃΔⵠᐃΔ: "img/bignight-berry.png",
        ᐃⲆᐃΔΔᐃᐃ: "img/bignight-stone1.png",
        ⵠΔⵠⲆᐃⵠᐃ: "img/bignight-stone2.png",
        ⵠΔΔⲆⲆⵠⲆ: "img/bignight-gold1.png",
        ⲆⵠⲆᐃΔⲆΔ: "img/bignight-gold2.png",
        ΔᐃⵠⲆΔⲆᐃ: "img/bignight-emerald1.png",
        ⲆⲆΔⵠΔⵠⲆ: "img/bignight-emerald2.png",
        ᐃⲆⵠΔⲆΔⲆ: "img/bignight-amethyst.png",
        ᐃⵠᐃⲆⲆΔΔ: "img/bignight-bear.png",
        ᐃⵠⵠⲆⵠⲆⵠ: "img/bignight-cave.png",
        ᐃⲆᐃᐃⲆⵠⵠ: "img/bignight-diamond.png",
        ⲆᐃΔᐃᐃⵠΔ: "img/bignight-island.png",
        ᐃⲆⵠᐃⵠⲆⲆ: "img/bignight-reidite.png",
        ⵠΔᐃⲆᐃΔⵠ: "img/bignight-spider.png",
        ΔΔⲆⲆᐃΔᐃ: "img/bignight-wolf.png",
        ⲆⵠⲆᐃᐃⲆΔ: "img/bignight-fir-tree.png",
        ᐃⲆᐃⵠⲆⵠⵠ: "img/bignight-fox.png",
        ⵠΔⲆΔΔⲆΔ: "img/bignight-kraken.png",
        ⵠⲆⲆⲆⵠⵠΔ: "img/bignight-piranha.png",
        ⵠⵠⵠⲆⲆᐃⵠ: "img/bignight-cactus.png",
        ⲆΔⲆᐃⲆᐃᐃ: "img/bignight-magma.png",
        ΔⲆⵠᐃᐃΔⵠ: "img/bigday-desert.png",
        ΔⵠΔΔⲆⲆΔ: "img/bigday-winter.png",
        ⲆⵠΔᐃⵠⵠⲆ: "img/bigday-lava.png",
        ᐃᐃⵠⵠᐃⵠΔ: "img/bigday-forest.png",
        ΔᐃⵠⲆⵠΔΔ: "img/bignight-desert.png",
        ΔᐃΔⲆΔΔᐃ: "img/bignight-winter.png",
        ⲆᐃΔⲆΔⵠΔ: "img/bignight-lava.png",
        ⵠᐃΔⲆΔⵠᐃ: "img/bignight-forest.png",
        ⲆΔΔⵠⵠᐃⵠ: "img/day-river-wave.png",
        ᐃⵠⲆΔᐃΔΔ: "img/night-river-wave.png",
        ΔⵠᐃᐃⲆΔᐃ: "img/day-fog0.png",
        ᐃⵠΔⲆᐃⵠⵠ: "img/day-fog1.png",
        ΔΔΔΔⵠΔⵠ: "img/day-fog2.png",
        ᐃᐃᐃⲆⲆΔΔ: "img/night-fog0.png",
        ⵠΔΔⲆᐃΔΔ: "img/night-fog1.png",
        ᐃⲆΔΔⲆⵠⲆ: "img/night-fog2.png",
        ⲆᐃⲆⲆΔⵠᐃ: "img/day-fogdesert0.png",
        ⲆⲆⵠⵠΔΔᐃ: "img/day-fogdesert1.png",
        ᐃΔᐃⵠᐃᐃⲆ: "img/day-fogdesert2.png",
        ⵠΔᐃᐃᐃΔⲆ: "img/night-fogdesert0.png",
        ΔⲆⵠᐃⲆᐃΔ: "img/night-fogdesert1.png",
        ᐃᐃⲆⲆΔⲆⲆ: "img/night-fogdesert2.png",
        ⲆΔΔⵠⲆⵠⵠ: "img/day-cross-server.png",
        ⵠⵠⲆΔⵠⲆᐃ: "img/day-here-server.png",
        ⲆᐃⵠⵠⵠⲆⵠ: "img/day-finish-server.png",
        ᐃⵠᐃⵠᐃΔΔ: "img/day-item-server.png",
        ᐃⲆⵠΔᐃΔᐃ: "img/day-skull-server.png",
        ᐃᐃⲆⵠⲆⵠⵠ: "img/night-cross-server.png",
        ⲆⵠⵠⵠΔᐃⲆ: "img/night-here-server.png",
        ΔΔⲆⵠᐃⲆΔ: "img/night-finish-server.png",
        ΔΔᐃⵠΔᐃⲆ: "img/night-item-server.png",
        ᐃΔΔᐃⵠΔⲆ: "img/night-skull-server.png",
        ΔⵠᐃΔⲆⵠΔ: "img/day-reidite0.png",
        ⵠⵠⲆᐃΔⲆΔ: "img/night-reidite0.png",
        ΔᐃⲆᐃᐃᐃΔ: "img/day-reidite1.png",
        ΔⵠᐃᐃⵠⲆⲆ: "img/night-reidite1.png",
        ⲆⲆⵠΔᐃⲆⵠ: "img/day-reidite2.png",
        ⵠᐃᐃᐃⵠΔᐃ: "img/night-reidite2.png",
        ΔᐃⲆⵠᐃⲆᐃ: "img/day-lava1.png",
        ⲆⵠΔΔⵠⵠⵠ: "img/night-lava1.png",
        ⲆⲆⲆᐃⵠⲆΔ: "img/day-lava2.png",
        Δⵠⵠᐃⵠᐃᐃ: "img/night-lava2.png",
        ᐃⵠΔⲆⵠⲆᐃ: "img/day-lava3.png",
        ΔⵠᐃⵠΔⲆⵠ: "img/night-lava3.png",
        ⲆΔΔⵠⲆⲆⵠ: "img/day-lava4.png",
        ΔᐃΔⲆΔⵠⵠ: "img/night-lava4.png",
        ᐃⵠᐃⵠⲆᐃᐃ: "img/day-lava5.png",
        ⵠⲆⵠΔⵠΔᐃ: "img/night-lava5.png",
        ⵠⵠΔⵠⵠⵠⲆ: "img/day-lava6.png",
        ᐃⵠⵠΔᐃᐃΔ: "img/night-lava6.png",
        ΔᐃⵠⵠⲆⵠᐃ: "img/day-lava-ground1.png",
        ΔⲆⲆᐃⵠΔⲆ: "img/night-lava-ground1.png",
        ⵠⵠⵠΔⵠⲆΔ: "img/day-lava-ground2.png",
        ⲆⲆⲆΔΔⵠᐃ: "img/night-lava-ground2.png",
        ⲆΔⵠΔΔⵠΔ: "img/day-lava-ground3.png",
        ⵠΔᐃⲆΔᐃᐃ: "img/night-lava-ground3.png",
        ΔⵠⲆⵠᐃⲆΔ: "img/day-lava-ground4.png",
        ⵠΔⲆΔᐃΔᐃ: "img/night-lava-ground4.png",
        ΔΔⲆᐃⵠΔⲆ: "img/day-lava-ground5.png",
        ⵠⲆΔⲆΔⲆᐃ: "img/night-lava-ground5.png",
        ᐃⲆⲆⵠΔΔⵠ: "img/day-lava-ground6.png",
        ᐃΔⵠΔᐃΔⵠ: "img/night-lava-ground6.png",
        ΔᐃⲆΔⲆⵠᐃ: "img/day-fire-mob.png",
        ⲆⵠⲆᐃⵠᐃⵠ: "img/night-fire-mob.png",
        ΔΔⵠⲆⵠⵠΔ: "img/hurt-fire-mob.png",
        ᐃⲆᐃΔᐃⲆⲆ: "img/day-diamond-protection.png",
        ΔⲆⵠᐃⵠⲆᐃ: "img/night-diamond-protection.png",
        ᐃᐃᐃΔΔᐃᐃ: "img/day-hand-diamond-protection.png",
        ⵠⵠᐃⲆΔⲆⲆ: "img/night-hand-diamond-protection.png",
        ᐃⵠΔᐃⵠⲆⲆ: "img/inv-diamond-protection-out.png",
        ᐃΔⲆⵠⵠⲆΔ: "img/inv-diamond-protection-in.png",
        ⲆᐃⵠⵠΔⲆⵠ: "img/inv-diamond-protection-click.png",
        ⵠⲆᐃⵠΔΔⵠ: "img/day-amethyst-protection.png",
        ΔⵠⵠΔⵠΔᐃ: "img/night-amethyst-protection.png",
        ᐃⲆⲆⵠⲆᐃᐃⵠⲆ: "img/day-hand-amethyst-protection.png",
        ᐃΔⲆⵠᐃⵠⲆⵠᐃ: "img/night-hand-amethyst-protection.png",
        ᐃᐃΔᐃⵠᐃⵠ: "img/inv-amethyst-protection-out.png",
        ⲆΔΔⵠⲆⵠⲆ: "img/inv-amethyst-protection-in.png",
        ᐃΔᐃΔΔⲆⵠ: "img/inv-amethyst-protection-click.png",
        ⲆⲆⲆΔᐃΔΔ: "img/day-reidite-sword.png",
        ⲆⲆⲆΔⵠΔⲆ: "img/night-reidite-sword.png",
        ᐃⵠΔⲆⲆᐃᐃ: "img/inv-reidite-sword-out.png",
        ᐃΔᐃⵠⵠⲆᐃ: "img/inv-reidite-sword-in.png",
        ΔⵠⵠᐃΔΔᐃ: "img/inv-reidite-sword-click.png",
        ⲆΔⵠⲆᐃᐃⲆ: "img/inv-reidite-out.png",
        ⵠᐃⲆⵠⲆⲆⲆ: "img/inv-reidite-in.png",
        ⵠⲆⵠⵠⲆΔᐃ: "img/inv-reidite-click.png",
        ΔΔⵠΔΔⲆΔ: "img/inv-flame-out.png",
        ⵠⲆⲆᐃΔΔⲆ: "img/inv-flame-in.png",
        ΔᐃΔⲆΔⲆᐃ: "img/inv-flame-click.png",
        ⵠⲆΔⵠᐃᐃⲆ: "img/day-magma-buble0.png",
        ᐃⲆⲆⲆΔΔⵠ: "img/night-magma-buble0.png",
        ⵠⲆⵠΔᐃⵠⵠ: "img/day-magma-buble1.png",
        ᐃⲆⵠⲆⲆΔⵠ: "img/night-magma-buble1.png",
        ⵠⵠΔⲆⲆⲆⲆ: "img/day-magma-buble2.png",
        ⵠᐃⲆⲆⲆᐃⵠ: "img/night-magma-buble2.png",
        ΔΔΔΔΔⵠⵠ: "img/day-lava-dragon.png",
        ᐃΔⵠⲆⵠⲆⲆ: "img/night-lava-dragon.png",
        ΔⵠⲆⵠΔΔⵠⲆΔ: "img/day-fire-dragon.png",
        ᐃⲆⲆᐃΔΔΔⵠᐃ: "img/night-fire-dragon.png",
        ᐃᐃⵠⲆᐃⲆⲆ: "img/hurt-lava-dragon.png",
        ΔΔⵠᐃⲆⵠⲆ: "img/day-lava-wing-left.png",
        ⵠᐃⵠᐃⵠᐃᐃ: "img/night-lava-wing-left.png",
        ᐃⲆΔⵠⵠΔᐃ: "img/day-lava-wing-right.png",
        ΔᐃⵠⲆᐃⲆⲆ: "img/night-lava-wing-right.png",
        ⵠΔΔᐃΔⲆᐃ: "img/hurt-lava-wing-left.png",
        ⵠΔΔⵠⵠⲆⵠ: "img/hurt-lava-wing-right.png",
        ᐃΔᐃⵠⲆⲆΔ: "img/day-reidite-spear.png",
        ⵠΔᐃΔΔⲆᐃ: "img/night-reidite-spear.png",
        ⲆⲆΔΔⵠⵠᐃ: "img/inv-reidite-spear-out.png",
        ⲆᐃⲆⲆΔⲆᐃ: "img/inv-reidite-spear-in.png",
        ᐃⲆⵠᐃⵠᐃⵠ: "img/inv-reidite-spear-click.png",
        ΔⲆᐃⲆΔᐃⲆ: "img/day-reidite-helmet.png",
        ΔⲆⲆⲆⵠⲆΔ: "img/night-reidite-helmet.png",
        ᐃᐃᐃⲆⲆⵠⲆ: "img/inv-reidite-helmet-out.png",
        ⵠⲆᐃⵠᐃⲆᐃ: "img/inv-reidite-helmet-in.png",
        ᐃΔᐃΔᐃᐃⵠ: "img/inv-reidite-helmet-click.png",
        ⲆⵠΔᐃⲆⲆΔ: "img/day-hand-reidite-protection.png",
        ⵠᐃⵠᐃⵠΔᐃ: "img/night-hand-reidite-protection.png",
        ⲆᐃⵠΔⵠΔⵠ: "img/day-reidite-protection.png",
        ⲆⵠᐃⵠⵠⵠⲆ: "img/night-reidite-protection.png",
        ᐃⵠΔᐃΔⵠⵠ: "img/inv-reidite-protection-out.png",
        ⲆΔᐃᐃᐃΔⵠ: "img/inv-reidite-protection-in.png",
        ΔΔΔⲆⲆⵠΔ: "img/inv-reidite-protection-click.png",
        ᐃᐃⲆⵠΔᐃᐃ: "img/day-lava-dragon-sword.png",
        ΔⲆᐃⵠⵠⲆᐃ: "img/night-lava-dragon-sword.png",
        ᐃᐃⲆⵠⲆⲆᐃ: "img/inv-lava-dragon-sword-out.png",
        ΔᐃⵠΔΔⵠΔ: "img/inv-lava-dragon-sword-in.png",
        ⲆⵠⵠᐃΔᐃᐃ: "img/inv-lava-dragon-sword-click.png",
        ᐃⲆⵠΔᐃⵠⵠ: "img/day-lava-spear.png",
        ᐃΔΔⲆᐃⲆΔ: "img/night-lava-spear.png",
        ΔⵠᐃΔΔⵠⲆ: "img/inv-lava-spear-out.png",
        ⲆΔᐃⲆΔⵠᐃ: "img/inv-lava-spear-in.png",
        ᐃΔⵠⵠⵠᐃΔ: "img/inv-lava-spear-click.png",
        ΔⵠⵠⲆⵠᐃⵠ: "img/day-lava-helmet.png",
        ⵠⲆⲆᐃΔᐃᐃ: "img/night-lava-helmet.png",
        ΔⵠⵠⲆᐃⵠᐃ: "img/inv-lava-helmet-out.png",
        ΔⵠᐃΔᐃⲆᐃ: "img/inv-lava-helmet-in.png",
        ⲆᐃⲆᐃⵠⲆⵠ: "img/inv-lava-helmet-click.png",
        ΔⵠⲆⵠΔᐃⵠ: "img/day-witch-hat.png",
        ⲆΔⵠⵠⵠΔΔ: "img/night-witch-hat.png",
        ⵠⲆΔⵠⵠⵠⵠ: "img/inv-witch-hat-out.png",
        ΔⲆⲆᐃΔᐃᐃ: "img/inv-witch-hat-in.png",
        ⵠⵠⵠᐃᐃⵠᐃ: "img/inv-witch-hat-click.png",
        ⲆⲆΔᐃᐃΔⲆ: "img/day-nimbus2000.png",
        ΔⲆⵠⵠⲆΔⲆ: "img/night-nimbus2000.png",
        ΔᐃΔΔⵠⵠΔ: "img/inv-nimbus2000-out.png",
        ⵠⲆⲆⲆᐃⵠⲆ: "img/inv-nimbus2000-in.png",
        ΔᐃᐃⲆⲆⵠΔ: "img/inv-nimbus2000-click.png",
        ⵠⵠΔᐃΔⵠⵠ: "img/day-accessory1-pacques.png",
        ᐃⵠΔΔⵠΔⲆ: "img/night-accessory1-pacques.png",
        ⲆΔᐃᐃᐃᐃⵠ: "img/day-accessory2-pacques.png",
        ΔⲆⲆΔΔⲆⵠ: "img/night-accessory2-pacques.png",
        ΔΔΔⵠⲆⲆᐃ: "img/day-accessory3-pacques.png",
        ⵠᐃⵠᐃΔⲆᐃ: "img/night-accessory3-pacques.png",
        ΔⵠⲆⵠᐃⲆⲆ: "img/day-accessory5-pacques.png",
        ⵠⵠΔᐃΔⲆᐃ: "img/night-accessory5-pacques.png",
        ᐃᐃᐃᐃⲆΔΔ: "img/day-accessory6-pacques.png",
        ᐃⲆⵠⵠᐃⲆⲆ: "img/night-accessory6-pacques.png",
        ΔⲆⲆΔΔⲆΔ: "img/day-accessory7-pacques.png",
        ᐃΔᐃⲆⵠⲆⲆ: "img/night-accessory7-pacques.png",
        ⵠᐃᐃΔᐃΔΔ: "img/day-accessory8-pacques.png",
        ᐃⲆᐃⲆⵠⲆΔ: "img/night-accessory8-pacques.png",
        ΔⵠⵠⵠΔᐃⵠ: "img/day-bag-pacques.png",
        ᐃΔⵠΔⲆⵠᐃ: "img/night-bag-pacques.png",
        ⲆⵠⵠⲆᐃᐃⲆ: "img/day-carrot.png",
        ⵠⲆΔⵠᐃⲆⲆ: "img/night-carrot.png",
        ᐃΔᐃⲆⵠⵠᐃ: "img/day-carrot-dried.png",
        ⵠᐃΔⵠⲆⵠᐃ: "img/night-carrot-dried.png",
        ⵠⲆΔΔⲆᐃᐃ: "img/day-tomato-herb.png",
        ⵠⲆΔⵠᐃΔᐃ: "img/night-tomato-herb.png",
        ⲆΔⵠⵠⲆΔΔ: "img/day-tomato-herb-dried.png",
        ΔΔⲆΔᐃⵠᐃ: "img/night-tomato-herb-dried.png",
        ᐃⲆΔⵠᐃΔⲆ: "img/day-tomato.png",
        ᐃⲆⲆΔⵠⲆⲆ: "img/night-tomato.png",
        ⲆᐃⵠⲆⲆΔΔ: "img/inv-carrot-out.png",
        ᐃⲆᐃⲆⵠΔᐃ: "img/inv-carrot-in.png",
        ΔᐃⵠᐃᐃⲆΔ: "img/inv-carrot-click.png",
        ΔⵠΔⵠⵠⵠᐃ: "img/inv-tomato-out.png",
        ΔᐃⲆⲆⵠⲆΔ: "img/inv-tomato-in.png",
        ᐃⲆⲆⲆΔⵠⵠ: "img/inv-tomato-click.png",
        ΔⵠΔⲆⵠᐃᐃ: "img/day-player0.png",
        ⲆⵠᐃᐃⲆⲆᐃ: "img/night-player0.png",
        ᐃᐃⲆΔⲆᐃⵠ: "img/day-player1.png",
        ⲆⵠΔΔⲆⵠᐃ: "img/night-player1.png",
        ⵠⵠⵠⵠⲆΔᐃ: "img/day-player2.png",
        ᐃΔⲆΔⲆΔⲆ: "img/night-player22.png",
        ΔᐃΔⲆΔⲆΔ: "img/day-player3.png",
        ⵠᐃⵠΔΔᐃᐃ: "img/night-player33.png",
        ⵠᐃΔᐃᐃⲆᐃ: "img/day-player4.png",
        ᐃᐃΔΔⵠᐃⲆ: "img/night-player4.png",
        ᐃᐃⲆⲆⲆⵠⲆ: "img/day-player5.png",
        ⵠᐃΔᐃⵠΔⵠ: "img/night-player5.png",
        ⲆⲆⲆⵠⲆΔᐃ: "img/day-player6.png",
        ⲆⵠⵠᐃⲆⵠⵠ: "img/night-player6.png",
        ᐃⵠΔⲆⵠΔᐃ: "img/day-player7.png",
        ᐃΔⵠᐃⲆⵠᐃ: "img/night-player7.png",
        ΔΔⵠⲆᐃᐃⵠ: "img/day-player8.png",
        ⲆⵠΔⲆᐃᐃⵠ: "img/night-player8.png",
        ΔΔⵠΔⲆΔΔ: "img/day-player9.png",
        ⲆⲆⲆᐃᐃⵠΔ: "img/night-player9.png",
        ΔᐃΔⵠⲆⲆⵠ: "img/day-player10.png",
        ΔⲆΔⲆⲆⲆᐃ: "img/night-player10.png",
        ΔⲆⵠⲆᐃᐃΔ: "img/day-player11.png",
        ᐃΔⵠᐃⲆⲆⲆ: "img/night-player11.png",
        ΔΔⵠⵠⵠΔΔ: "img/day-player12.png",
        ᐃⲆᐃΔⵠΔᐃ: "img/night-player12.png",
        ⵠᐃⲆⲆᐃΔⵠ: "img/day-player13.png",
        ⲆⲆᐃⲆⵠⵠⲆ: "img/night-player13.png",
        ΔᐃⲆΔⵠΔⵠ: "img/day-player14.png",
        ⲆᐃⵠΔⵠᐃᐃ: "img/night-player14.png",
        ⵠᐃⵠⵠᐃⲆⲆ: "img/day-player15.png",
        ⵠⵠⲆΔⲆᐃⵠ: "img/night-player15.png",
        ⲆΔⵠⵠⵠᐃⲆ: "img/day-player16.png",
        ⲆᐃⵠᐃⵠⲆⵠ: "img/night-player16.png",
        ⵠⵠᐃⵠΔⵠⵠ: "img/day-player17.png",
        ᐃⲆⵠᐃⵠⵠⵠ: "img/night-player17.png",
        ⵠᐃⵠᐃⲆⵠΔ: "img/day-player18.png",
        Ⲇᐃⵠⵠⵠⵠᐃ: "img/night-player18.png",
        ⵠⲆⵠΔᐃᐃᐃ: "img/day-player19.png",
        ⲆⲆᐃⵠⵠⲆΔ: "img/night-player19.png",
        ⲆᐃⵠⵠΔΔᐃ: "img/day-hand-player0.png",
        ⵠΔⲆⲆᐃⲆⲆ: "img/night-hand-player0.png",
        ΔⲆᐃᐃᐃⵠⲆ: "img/day-hand-player1.png",
        ⵠΔᐃΔⵠΔⲆ: "img/night-hand-player1.png",
        ⵠΔⵠⲆᐃⵠΔ: "img/day-hand-player2.png",
        ᐃⵠⵠⵠⵠⲆᐃ: "img/night-hand-player22.png",
        ⵠᐃΔⵠⵠⵠΔ: "img/day-hand-player3.png",
        ⵠⲆⲆᐃΔⲆᐃ: "img/night-hand-player33.png",
        ⵠᐃᐃᐃΔⲆᐃ: "img/day-hand-player4.png",
        ⵠᐃΔᐃⵠᐃⵠ: "img/night-hand-player4.png",
        ⵠⲆⵠᐃⲆⲆⵠ: "img/day-hand-player5.png",
        ΔᐃⲆⲆΔⵠⲆ: "img/night-hand-player5.png",
        ⲆᐃⵠᐃΔᐃⵠ: "img/day-hand-player6.png",
        ᐃⲆᐃⵠⵠΔⵠ: "img/night-hand-player6.png",
        ᐃⵠᐃᐃΔⵠⲆ: "img/day-hand-player7.png",
        ⵠᐃΔⲆⲆⲆⲆ: "img/night-hand-player7.png",
        ᐃΔⲆⲆᐃΔᐃ: "img/day-hand-player8.png",
        ⵠᐃⲆⲆᐃΔᐃ: "img/night-hand-player8.png",
        ᐃⲆⲆⲆᐃΔᐃ: "img/day-hand-player9.png",
        ᐃᐃⵠΔⵠⲆΔ: "img/night-hand-player9.png",
        ΔᐃΔⲆᐃΔⲆ: "img/day-hand-player10.png",
        ΔᐃᐃᐃⵠⲆΔ: "img/night-hand-player10.png",
        ΔᐃⵠΔⲆⵠᐃ: "img/day-hand-player11.png",
        ΔΔⲆᐃΔⵠᐃ: "img/night-hand-player11.png",
        ΔΔΔⲆᐃᐃⵠ: "img/day-hand-player12.png",
        ᐃⲆΔᐃᐃⲆⵠ: "img/night-hand-player12.png",
        ⲆⵠΔΔⲆⲆᐃ: "img/day-hand-player13.png",
        ⲆⵠᐃᐃΔⲆⵠ: "img/night-hand-player13.png",
        ᐃⲆΔᐃⵠΔⵠ: "img/day-hand-player14.png",
        ΔᐃΔᐃⵠΔⲆ: "img/night-hand-player14.png",
        ᐃᐃⵠⵠⲆⵠᐃ: "img/day-hand-player15.png",
        ⲆᐃᐃΔΔⵠⲆ: "img/night-hand-player15.png",
        ΔⵠⲆⵠᐃⲆⵠ: "img/day-hand-player16.png",
        ᐃⵠⲆΔⲆᐃⲆ: "img/night-hand-player16.png",
        ⲆᐃᐃΔⵠⵠⲆ: "img/day-hand-player17.png",
        ⲆᐃᐃⲆⵠⲆΔ: "img/night-hand-player17.png",
        ΔⲆᐃⲆⵠΔΔ: "img/day-hand-player18.png",
        ΔⵠᐃΔⲆⲆΔ: "img/night-hand-player18.png",
        ⵠⲆⲆᐃΔⲆΔ: "img/day-hand-player19.png",
        ᐃⵠΔⵠⲆΔᐃ: "img/night-hand-player19.png",
        ⲆⵠᐃΔᐃⲆΔ: "img/day-accessory4.png",
        ΔⵠΔⵠΔⲆΔ: "img/night-accessory4.png",
        ΔᐃΔⲆᐃᐃⵠ: "img/day-accessory9.png",
        ⲆΔΔᐃⵠⲆⲆ: "img/night-accessory9.png",
        ⲆⵠⵠΔᐃⵠⵠ: "img/day-accessory10.png",
        ⲆⲆΔⵠᐃⲆⵠ: "img/night-accessory10.png",
        ⵠΔⵠⲆⲆΔⵠ: "img/day-accessory11.png",
        ᐃⲆⲆⵠⵠⵠⵠ: "img/night-accessory11.png",
        ᐃⲆⲆⲆⲆⵠΔ: "img/day-accessory12.png",
        ΔⵠⲆⵠⲆⲆⲆ: "img/night-accessory12.png",
        ⲆⵠᐃⲆΔⵠΔ: "img/day-bag.png",
        ΔᐃΔⲆΔⵠᐃ: "img/night-bag.png",
        ⵠᐃᐃΔⵠⲆⵠ: "img/inv-bag-out.png",
        ᐃΔΔⵠⵠⵠᐃ: "img/inv-bag-in.png",
        ⲆΔᐃᐃⲆᐃⵠ: "img/inv-bag-click.png",
        ⲆⵠΔΔⲆⲆⲆ: "img/day-pitchfork.png",
        ⲆⲆᐃⵠᐃᐃⲆ: "img/night-pitchfork.png",
        ⵠⵠΔᐃᐃΔⲆ: "img/inv-pitchfork-out.png",
        ᐃᐃⵠᐃⲆᐃᐃ: "img/inv-pitchfork-in.png",
        ⵠΔΔᐃΔᐃΔ: "img/inv-pitchfork-click.png",
        ΔⲆⲆⲆΔᐃᐃ: "img/inv-wood-spike-door-out.png",
        ΔᐃΔⵠΔᐃᐃ: "img/inv-wood-spike-door-in.png",
        ⲆᐃⵠᐃⵠⲆⲆ: "img/inv-wood-spike-door-click.png",
        ΔΔⵠᐃᐃⲆᐃ: "img/inv-stone-spike-door-out.png",
        ⲆⲆⵠᐃᐃⵠᐃ: "img/inv-stone-spike-door-in.png",
        ΔⵠΔΔᐃᐃΔ: "img/inv-stone-spike-door-click.png",
        ⵠⵠΔᐃⵠⲆΔ: "img/inv-gold-spike-door-out.png",
        ᐃΔᐃᐃΔᐃᐃ: "img/inv-gold-spike-door-in.png",
        ᐃⵠᐃΔᐃⲆΔ: "img/inv-gold-spike-door-click.png",
        ΔⲆⲆᐃⵠᐃⲆ: "img/inv-diamond-spike-door-out.png",
        ᐃⲆⲆᐃᐃⲆⵠ: "img/inv-diamond-spike-door-in.png",
        ΔΔΔᐃᐃⵠΔ: "img/inv-diamond-spike-door-click.png",
        ᐃΔΔᐃᐃᐃⵠ: "img/inv-amethyst-spike-door-out.png",
        ⲆΔⵠⵠΔΔᐃ: "img/inv-amethyst-spike-door-in.png",
        ᐃΔⲆΔⵠᐃΔ: "img/inv-amethyst-spike-door-click.png",
        ⵠΔᐃⵠᐃΔᐃ: "img/day-wood-spike-door.png",
        ᐃⲆⲆⵠⲆⲆΔ: "img/night-wood-spike-door.png",
        ΔⵠⲆΔⵠⵠΔ: "img/day-stone-spike-door.png",
        ⲆᐃᐃⲆⲆⵠΔ: "img/night-stone-spike-door.png",
        ⲆⲆᐃⲆⲆᐃΔ: "img/day-gold-spike-door.png",
        ΔΔΔᐃΔᐃᐃ: "img/night-gold-spike-door.png",
        ΔⵠΔⵠᐃⵠⲆ: "img/day-diamond-spike-door.png",
        ᐃᐃⲆⲆⵠΔΔ: "img/night-diamond-spike-door.png",
        ᐃⲆⵠⵠᐃΔΔ: "img/day-amethyst-spike-door.png",
        ᐃΔΔᐃⲆⲆⲆ: "img/night-amethyst-spike-door.png",
        ᐃⵠΔⲆΔΔⵠ: "img/inv-reidite-spike-door-out.png",
        ΔⲆᐃᐃᐃⵠⵠ: "img/inv-reidite-spike-door-in.png",
        ⵠⲆⵠⵠΔΔᐃ: "img/inv-reidite-spike-door-click.png",
        ΔⲆΔΔⲆᐃΔ: "img/inv-reidite-door-out.png",
        ᐃⵠⲆⲆⲆΔⵠ: "img/inv-reidite-door-in.png",
        ⵠⵠᐃΔⵠⵠᐃ: "img/inv-reidite-door-click.png",
        ⵠᐃⵠⵠᐃᐃⵠ: "img/inv-reidite-spike-out.png",
        ΔⲆᐃⲆΔⵠⵠ: "img/inv-reidite-spike-in.png",
        ᐃⵠᐃᐃⲆΔᐃ: "img/inv-reidite-spike-click.png",
        ⵠΔⲆⵠᐃᐃⲆ: "img/inv-reidite-wall-out.png",
        ΔⲆΔⲆⵠΔⲆ: "img/inv-reidite-wall-in.png",
        ᐃⲆⵠⲆᐃᐃⵠ: "img/inv-reidite-wall-click.png",
        ᐃΔⵠⵠⲆΔᐃ: "img/day-reidite-wall.png",
        ᐃⲆᐃᐃᐃⲆⲆ: "img/night-reidite-wall.png",
        ⵠⲆⵠⲆⲆΔΔ: "img/day-reidite-door.png",
        ΔⲆᐃΔᐃⲆⲆ: "img/night-reidite-door.png",
        ΔᐃⲆⵠⲆⵠⲆ: "img/day-reidite-spike.png",
        ΔᐃⲆⲆᐃⲆᐃ: "img/night-reidite-spike.png",
        ⲆⵠⵠᐃⵠᐃⲆ: "img/day-reidite-spike-door.png",
        ⲆᐃⲆⵠΔⲆΔ: "img/night-reidite-spike-door.png",
        ᐃⵠᐃᐃᐃᐃᐃ: "img/inv-reidite-pickaxe-out.png",
        ᐃⵠⵠΔⲆⲆⲆ: "img/inv-reidite-pickaxe-in.png",
        ᐃΔⲆΔⵠⵠΔ: "img/inv-reidite-pickaxe-click.png",
        ΔⵠⵠⲆᐃⵠΔ: "img/day-reidite-pickaxe.png",
        ⲆΔᐃⵠᐃᐃᐃ: "img/night-reidite-pickaxe.png",
        ᐃΔΔᐃΔΔΔ: "img/inv-reidite-hammer-out.png",
        ᐃⲆⵠΔΔᐃⵠ: "img/inv-reidite-hammer-in.png",
        ᐃⲆⵠⵠΔᐃΔ: "img/inv-reidite-hammer-click.png",
        ᐃᐃⵠᐃⵠᐃⲆ: "img/day-reidite-hammer.png",
        ΔⲆΔᐃⵠⵠⲆ: "img/night-reidite-hammer.png",
        ⵠᐃⵠⵠᐃΔᐃ: "img/day-watermelon1.png",
        ΔⲆΔᐃⵠᐃΔ: "img/night-watermelon1.png",
        ᐃⵠᐃⲆᐃΔⵠ: "img/day-watermelon-dried1.png",
        ΔⲆΔᐃⵠⵠΔ: "img/night-watermelon-dried1.png",
        ⲆᐃᐃⲆΔⵠⵠ: "img/inv-watermelon-out.png",
        ⲆΔᐃⲆΔΔⲆ: "img/inv-watermelon-in.png",
        ⲆⵠⲆᐃⵠΔⵠ: "img/inv-watermelon-click.png",
        ᐃⵠⲆⲆΔΔⲆ: "img/day-boat.png",
        ᐃⲆᐃᐃⲆΔⵠ: "img/night-boat.png",
        ⵠΔΔᐃᐃⵠΔ: "img/day-boat-wave.png",
        ΔⵠᐃⲆᐃⲆΔ: "img/night-boat-wave.png",
        ⲆⵠⲆⲆᐃⵠⲆ: "img/inv-boat-out.png",
        ᐃⵠⲆⵠⲆⵠⵠ: "img/inv-boat-in.png",
        ᐃⲆᐃΔⲆⵠᐃ: "img/inv-boat-click.png",
        ᐃⲆⲆΔΔⲆⵠ: "img/day-plane.png",
        ΔΔⲆᐃⵠᐃⵠ: "img/night-plane.png",
        ⵠΔΔⵠΔⵠΔ: "img/inv-plane-out.png",
        ᐃΔⲆᐃᐃⲆΔ: "img/inv-plane-in.png",
        ᐃⲆⲆⲆⲆⲆⲆ: "img/inv-plane-click.png",
        ⲆⵠΔⲆᐃⲆⵠ: "img/day-sled.png",
        ⲆⵠᐃᐃᐃΔᐃ: "img/night-sled.png",
        Ⲇⵠⵠᐃᐃᐃⵠ: "img/day-sled-wave.png",
        ΔΔᐃᐃΔᐃⲆ: "img/night-sled-wave.png",
        ΔⲆⲆΔⵠⲆᐃ: "img/inv-sled-out.png",
        ᐃⵠᐃⲆⲆⵠⲆ: "img/inv-sled-in.png",
        ⲆⲆⵠⵠᐃᐃⵠ: "img/inv-sled-click.png",
        ΔⵠⵠⵠⵠΔᐃ: "img/day-pirate-hat.png",
        ⲆⲆⲆᐃⲆⲆᐃ: "img/night-pirate-hat.png",
        ⵠⵠⵠⵠᐃᐃⵠ: "img/inv-pirate-hat-out.png",
        ⵠΔⲆΔⲆⵠᐃ: "img/inv-pirate-hat-in.png",
        ΔᐃⲆⵠⲆᐃⵠ: "img/inv-pirate-hat-click.png",
        ᐃΔⵠᐃᐃᐃⵠ: "img/day-penguin.png",
        ⵠⲆΔⲆⵠΔΔ: "img/night-penguin.png",
        ΔⲆΔΔΔⲆⵠ: "img/hurt-penguin.png",
        ΔⵠⲆᐃᐃ: "img/inv-penguin-feather-click.png",
        ⲆᐃⵠΔⲆ: "img/inv-hawk-feather-click.png",
        ⵠⲆⲆᐃⵠⵠᐃ: "img/day-boar1.png",
        ⲆⲆᐃⵠⲆΔᐃ: "img/day-boar1-tamed.png",
        ⵠⲆⲆΔΔⵠⲆ: "img/day-boar1-angry.png",
        ᐃᐃΔΔⵠⵠⵠ: "img/night-boar1.png",
        ⲆⲆᐃᐃΔᐃΔ: "img/night-boar1-tamed.png",
        ΔΔΔΔΔΔⵠ: "img/night-boar1-angry.png",
        ⲆⲆᐃⲆⵠᐃᐃ: "img/inv-mount-boar-out.png",
        ⲆᐃⵠΔΔΔⲆ: "img/inv-mount-boar-in.png",
        ΔⲆᐃⲆⵠⵠΔ: "img/inv-mount-boar-click.png",
        ⵠᐃⲆᐃⵠⲆᐃ: "img/day-hurt-boar1.png",
        ⵠΔⲆᐃΔⵠⵠ: "img/boar1-step.png",
        ΔⲆⵠⲆⲆΔⲆ: "img/day-saddle1.png",
        ⵠᐃⲆⵠᐃⲆΔ: "img/night-saddle1.png",
        ⲆΔⵠⵠⵠⲆᐃ: "img/inv-saddle-out.png",
        ᐃΔᐃⵠⵠⲆⵠ: "img/inv-saddle-in.png",
        ΔᐃⲆⲆΔⵠΔ: "img/inv-saddle-click.png",
        ⵠᐃⵠΔΔⵠΔ: "img/day-magic-wand0.png",
        ⵠⵠΔⲆᐃΔⵠ: "img/night-magic-wand0.png",
        ⵠᐃⵠΔᐃⵠᐃ: "img/day-light-wand1.png",
        ᐃⲆⲆᐃⲆΔⲆ: "img/night-light-wand1.png",
        ⲆᐃᐃᐃᐃΔΔ: "img/inv-magic-wand0-out.png",
        ⵠᐃⵠΔᐃⵠⲆ: "img/inv-magic-wand0-in.png",
        ᐃΔΔᐃᐃⵠᐃ: "img/inv-magic-wand0-click.png",
        ⵠⵠⵠⵠⲆⲆⵠ: "img/day-magic-wand1.png",
        ⵠᐃᐃᐃΔⵠᐃ: "img/night-magic-wand1.png",
        ⵠⵠΔⲆⲆΔⵠ: "img/day-light-wand0.png",
        ⵠⲆᐃᐃᐃⵠⲆ: "img/night-light-wand0.png",
        ⵠΔⵠᐃΔⲆⵠ: "img/inv-magic-wand1-out.png",
        ΔᐃΔⵠᐃᐃᐃ: "img/inv-magic-wand1-in.png",
        ΔΔⲆⲆΔᐃⲆ: "img/inv-magic-wand1-click.png",
        ᐃⵠΔⵠΔⲆΔ: "img/day-firefly.png",
        ⲆⲆⲆⲆⵠⵠᐃ: "img/night-firefly.png",
        ᐃⵠⲆⵠⵠⲆⲆ: "img/hurt-firefly.png",
        ⵠᐃⵠⲆⵠⲆⵠ: "img/inv-firefly-out.png",
        ⵠⵠⲆᐃΔⵠⲆ: "img/inv-firefly-in.png",
        ᐃⵠⵠⲆⵠΔᐃ: "img/inv-firefly-click.png",
        ΔⵠΔⲆⲆⲆΔ: "img/day-baby-dragon.png",
        ΔᐃⵠᐃΔⵠΔ: "img/night-baby-dragon.png",
        ᐃΔⲆⵠⲆΔⲆ: "img/day-baby-dragon-angry.png",
        ⲆᐃⲆⵠⵠᐃᐃ: "img/night-baby-dragon-angry.png",
        ΔΔⵠΔⵠᐃᐃ: "img/day-baby-dragon-tamed.png",
        ⵠΔΔᐃⲆΔᐃ: "img/night-baby-dragon-tamed.png",
        ᐃⵠⵠⲆΔⵠΔ: "img/day-wing-dragon-left-angry.png",
        ΔᐃᐃⲆⲆⲆⲆ: "img/night-dragon-wing-left-angry.png",
        ⲆᐃⲆᐃΔᐃⲆ: "img/day-wing-dragon-right-angry.png",
        ᐃⲆⵠᐃΔⲆⵠ: "img/night-dragon-wing-right-angry.png",
        ⵠⵠᐃⲆᐃᐃⵠ: "img/day-wing-dragon-left-tamed.png",
        ᐃⲆⵠⵠⵠᐃΔ: "img/night-dragon-wing-left-tamed.png",
        ᐃΔⵠΔΔᐃⲆ: "img/day-wing-dragon-right-tamed.png",
        ᐃΔᐃⵠⵠⵠⵠ: "img/night-wing-dragon-right-tamed.png",
        ⵠᐃⵠΔΔΔᐃ: "img/day-wing-dragon-left.png",
        ΔⵠᐃᐃⵠⵠΔ: "img/night-dragon-wing-left.png",
        ⲆΔᐃᐃⵠⲆⵠ: "img/day-wing-dragon-right.png",
        ΔΔⲆΔⵠⵠΔ: "img/night-wing-dragon-right.png",
        ⲆᐃⲆⵠᐃᐃᐃ: "img/hurt-baby-dragon.png",
        ⵠΔᐃⵠⵠⵠΔ: "img/hurt-baby-dragon-wing-left.png",
        ΔⲆΔⵠⲆᐃΔ: "img/hurt-baby-dragon-wing-right.png",
        ⲆⵠⲆΔΔⵠⵠ: "img/inv-baby-dragon-out.png",
        ΔⵠᐃⲆⵠᐃᐃ: "img/inv-baby-dragon-in.png",
        ΔᐃⵠΔⵠⲆΔ: "img/inv-baby-dragon-click.png",
        ⵠⵠΔᐃΔᐃᐃ: "img/day-baby-lava.png",
        ᐃⲆΔΔⲆᐃⲆ: "img/night-baby-lava.png",
        ⵠⵠᐃᐃⲆΔⵠ: "img/day-baby-lava-angry.png",
        ⵠⲆⵠⲆⲆⵠⲆ: "img/night-baby-lava-angry.png",
        ⲆᐃΔⵠⵠⵠΔ: "img/day-baby-lava-tamed.png",
        ⵠΔΔΔⵠᐃⵠ: "img/night-baby-lava-tamed.png",
        ᐃⵠΔⵠⲆⵠΔ: "img/day-wing-lava-left-angry.png",
        ᐃΔᐃΔᐃⲆᐃ: "img/night-wing-lava-left-angry.png",
        ⵠΔΔΔⵠⲆⵠ: "img/day-wing-lava-right-angry.png",
        ᐃᐃⵠⵠΔⵠⲆ: "img/night-wing-lava-right-angry.png",
        ᐃⵠⵠΔᐃⵠᐃ: "img/day-wing-lava-left-tamed.png",
        ΔΔᐃⲆⵠⲆⲆ: "img/night-wing-lava-left-tamed.png",
        ΔⲆᐃᐃⲆΔⲆ: "img/day-wing-lava-right-tamed.png",
        ⵠΔΔΔⲆΔᐃ: "img/night-wing-lava-right-tamed.png",
        ᐃⵠᐃΔⲆⵠΔ: "img/day-wing-lava-left.png",
        ᐃⲆΔᐃΔⵠΔ: "img/night-wing-lava-left.png",
        ᐃᐃⵠᐃⲆΔⵠ: "img/day-wing-lava-right.png",
        ⲆᐃⲆΔᐃΔⲆ: "img/night-wing-lava-right.png",
        ΔⲆΔⲆᐃΔᐃ: "img/hurt-baby-lava.png",
        ΔⲆⵠⵠᐃⵠΔ: "img/hurt-baby-lava-wing-left.png",
        ⲆⲆⲆᐃⵠΔΔ: "img/hurt-baby-lava-wing-right.png",
        ΔⵠΔⲆΔᐃᐃ: "img/inv-baby-lava-out.png",
        ΔⲆΔⵠΔΔᐃ: "img/inv-baby-lava-in.png",
        ⵠⲆΔⲆⵠΔⲆ: "img/inv-baby-lava-click.png",
        ᐃᐃᐃᐃΔⲆⲆ: "img/day-falcon.png",
        ᐃⲆⵠⵠⵠΔⵠ: "img/night-falcon.png",
        ΔⵠΔⲆᐃᐃΔ: "img/day-falcon-angry.png",
        ᐃⲆⵠΔⲆⲆΔ: "img/night-falcon-angry.png",
        ᐃᐃⲆΔΔⲆΔ: "img/day-falcon-ground.png",
        ⲆΔΔⲆΔⲆⵠ: "img/night-falcon-ground.png",
        ΔⵠΔᐃᐃᐃⲆ: "img/day-falcon-ground-angry.png",
        ΔⲆⲆΔⵠΔᐃ: "img/night-falcon-ground-angry.png",
        Δⵠⵠᐃⵠⵠⵠ: "img/day-falcon-wings-left.png",
        ⵠⵠᐃⵠⵠΔΔ: "img/night-falcon-wings-left.png",
        ᐃⲆΔⲆΔᐃⲆ: "img/day-falcon-wings-right.png",
        ⲆᐃΔⲆⵠⵠⵠ: "img/night-falcon-wings-right.png",
        ΔΔⲆⲆᐃΔΔ: "img/day-falcon-angry-wings-left.png",
        ΔⵠᐃᐃⵠΔᐃ: "img/night-falcon-angry-wings-left.png",
        ᐃᐃΔⲆⲆⲆⲆ: "img/day-falcon-angry-wings-right.png",
        ⲆⲆᐃΔⲆΔⲆ: "img/night-falcon-angry-wings-right.png",
        ⲆⲆⲆⲆⵠΔⲆ: "img/day-falcon-wings-left-tamed.png",
        ⲆΔΔᐃᐃⲆⲆ: "img/night-falcon-wings-left-tamed.png",
        ΔΔⲆΔᐃⲆΔ: "img/day-falcon-wings-right-tamed.png",
        ⵠⵠᐃⲆΔⵠᐃ: "img/night-falcon-wings-right-tamed.png",
        ᐃΔΔΔⲆᐃⵠ: "img/day-falcon-tamed.png",
        ⲆⲆᐃᐃⵠⵠⲆ: "img/night-falcon-tamed.png",
        ΔⵠΔⵠΔΔⵠ: "img/hurt-falcon-ground.png",
        ⲆⵠᐃⵠᐃᐃⲆ: "img/hurt-falcon.png",
        ΔⲆΔⵠᐃⵠΔ: "img/hurt-falcon-wings-left.png",
        ⲆΔⲆⵠΔⵠⵠ: "img/hurt-falcon-wings-right.png",
        ᐃΔⵠⵠΔᐃᐃ: "img/inv-falcon-out.png",
        ᐃΔⵠᐃⵠⵠⲆ: "img/inv-falcon-in.png",
        ⵠⲆⵠΔΔⲆⲆ: "img/inv-falcon-click.png",
        ⲆⵠⵠᐃⲆⵠᐃ: "img/day-crab-boss.png",
        ⲆΔⵠΔⵠΔⵠ: "img/night-crab-boss.png",
        ΔⲆⵠΔᐃⵠⵠ: "img/day-crab-boss-angry.png",
        ᐃᐃⵠⵠⲆⲆᐃ: "img/night-crab-boss-angry.png",
        ΔⵠᐃΔⲆΔⵠ: "img/day-crab-boss-tamed.png",
        ⲆⲆᐃᐃᐃⵠⲆ: "img/night-crab-boss-tamed.png",
        ⵠⵠᐃⲆᐃΔΔ: "img/day-crab-boss-claw-left-attack.png",
        ΔᐃᐃᐃⵠⵠΔ: "img/night-crab-boss-claw-left-attack.png",
        ⵠᐃΔⲆⵠⲆᐃ: "img/day-crab-boss-claw-right-attack.png",
        ⲆⵠΔᐃᐃⵠⵠ: "img/night-crab-boss-claw-right-attack.png",
        ΔⵠΔⲆᐃⲆⵠᐃⵠ: "img/day-crab-boss-claw-left-tamed.png",
        ⵠⲆⵠᐃⲆΔⵠⲆⵠ: "img/night-crab-boss-claw-left-tamed.png",
        ᐃΔⲆᐃᐃⲆⵠⵠᐃ: "img/day-crab-boss-claw-right-tamed.png",
        ᐃΔΔᐃΔⲆᐃΔⵠ: "img/night-crab-boss-claw-right-tamed.png",
        ᐃⵠᐃⵠⲆᐃⲆ: "img/day-crab-boss-claw-left.png",
        ⵠᐃⲆΔᐃⲆⲆ: "img/night-crab-boss-claw-left.png",
        ⲆⲆⵠⲆⵠΔΔ: "img/day-crab-boss-claw-right.png",
        ⲆⲆⵠΔΔᐃⲆ: "img/night-crab-boss-claw-right.png",
        ⲆⲆⲆᐃᐃΔΔ: "img/hurt-crab-boss.png",
        ᐃⲆⲆᐃᐃⲆⲆ: "img/hurt-crab-boss-claw-left.png",
        ᐃⲆⲆⲆΔᐃΔ: "img/hurt-crab-boss-claw-right.png",
        ⲆⵠᐃⵠⵠⲆⲆ: "img/heal-crab-boss.png",
        ⲆΔⵠΔⲆⲆⲆ: "img/heal-crab-boss-claw-left.png",
        ⲆᐃΔⵠᐃⵠⲆ: "img/heal-crab-boss-claw-right.png",
        ΔⲆⵠⵠΔⵠⲆ: "img/crab-step.png",
        ΔΔⵠⵠⵠΔᐃ: "img/inv-crab-boss-out.png",
        ΔΔᐃΔⵠⲆΔ: "img/inv-crab-boss-in.png",
        ᐃⲆΔΔⵠᐃⵠ: "img/inv-crab-boss-click.png",
        ᐃΔⵠΔΔΔΔ: "img/day-cactus10.png",
        ⲆᐃᐃΔⲆⵠᐃ: "img/night-cactus10.png",
        ⲆⲆᐃᐃⲆⵠⵠ: "img/inv-cactus-out.png",
        ⵠⲆⵠΔΔΔΔ: "img/inv-cactus-in.png",
        ᐃⵠᐃⲆΔᐃⲆ: "img/inv-cactus-click.png",
        ⲆΔᐃΔᐃⵠΔ: "img/day-scorpion.png",
        ΔⵠⵠⲆΔⲆⵠ: "img/night-scorpion.png",
        ᐃΔᐃΔΔΔᐃ: "img/day-scorpion-hand-left.png",
        ⵠᐃᐃᐃᐃᐃⲆ: "img/night-scorpion-hand-left.png",
        ⲆΔΔᐃᐃᐃⲆ: "img/day-scorpion-hand-right.png",
        ⲆΔⲆⵠᐃⵠⲆ: "img/night-scorpion-hand-right.png",
        ⵠᐃΔⲆⲆΔⵠ: "img/hurt-scorpion.png",
        ᐃⲆᐃᐃᐃᐃⲆ: "img/hurt-scorpion-hand-left.png",
        ⲆΔⵠⲆᐃⲆᐃ: "img/hurt-scorpion-hand-right.png",
        ᐃⲆⲆⲆⵠΔᐃ: "img/day-vulture.png",
        ⲆᐃΔᐃΔᐃΔ: "img/night-vulture.png",
        ᐃⲆΔⵠᐃⲆᐃ: "img/day-vulture-angry.png",
        ⵠᐃᐃΔΔᐃΔ: "img/night-vulture-angry.png",
        ᐃᐃΔᐃⲆⵠΔ: "img/day-vulture-ground.png",
        ᐃΔⲆⵠⲆⲆⵠ: "img/night-vulture-ground.png",
        ⲆⵠⵠⵠᐃⲆⲆ: "img/day-vulture-ground-angry.png",
        ΔᐃⵠⲆᐃⵠᐃ: "img/night-vulture-ground-angry.png",
        ΔΔⲆⲆⵠᐃⵠ: "img/day-vulture-wings-left.png",
        ᐃΔᐃᐃΔΔⵠ: "img/night-vulture-wings-left.png",
        ⵠⵠΔᐃΔᐃⲆ: "img/day-vulture-wings-right.png",
        ⲆⲆⲆⵠΔⲆⵠ: "img/night-vulture-wings-right.png",
        ΔΔΔᐃΔⵠᐃ: "img/day-vulture-angry-wings-left.png",
        ⲆΔⵠⵠᐃᐃΔ: "img/night-vulture-angry-wings-left.png",
        ΔⵠᐃⵠᐃᐃⲆ: "img/day-vulture-angry-wings-right.png",
        ⵠⲆⲆᐃᐃⲆⵠ: "img/night-vulture-angry-wings-right.png",
        ΔⵠⲆᐃΔᐃⵠ: "img/day-vulture-wings-left-tamed.png",
        ⵠⲆΔΔⵠⵠᐃ: "img/night-vulture-wings-left-tamed.png",
        ΔⵠᐃΔⲆⵠⵠ: "img/day-vulture-wings-right-tamed.png",
        ΔⲆᐃⵠΔⵠⲆ: "img/night-vulture-wings-right-tamed.png",
        ᐃΔⵠⲆⲆᐃᐃ: "img/day-vulture-tamed.png",
        ᐃΔΔΔᐃΔⵠ: "img/night-vulture-tamed.png",
        ⵠᐃᐃⵠΔⲆⵠ: "img/hurt-vulture-ground.png",
        ⵠᐃΔᐃᐃᐃᐃ: "img/hurt-vulture.png",
        ⲆΔᐃΔᐃⲆᐃ: "img/hurt-vulture-wings-left.png",
        ᐃⵠᐃΔΔΔᐃ: "img/hurt-vulture-wings-right.png",
        ᐃⲆᐃΔΔᐃⲆ: "img/day-aloe-vera.png",
        ⲆᐃᐃⲆⵠᐃΔ: "img/night-aloe-vera.png",
        ⵠⵠΔΔᐃΔⲆ: "img/inv-aloe-vera-out.png",
        ΔⵠΔⵠΔⵠⲆ: "img/inv-aloe-vera-in.png",
        ⲆⵠΔⲆⵠⵠⵠ: "img/inv-aloe-vera-click.png",
        ΔᐃᐃΔⵠⲆⵠ: "img/day-aloe-vera-grown.png",
        ⵠᐃⲆΔⵠⵠⲆ: "img/night-aloe-vera-grown.png",
        ᐃΔᐃΔⲆⲆᐃ: "img/day-aloe-vera-dried.png",
        ᐃΔᐃΔⲆΔⵠ: "img/night-aloe-vera-dried.png",
        ⵠⲆΔⲆⲆⲆΔ: "img/day-turban1.png",
        ΔΔⲆⲆⲆⲆⵠ: "img/night-turban1.png",
        ⲆⲆⵠᐃᐃᐃΔ: "img/day-turban2.png",
        ⵠᐃⲆᐃΔⵠΔ: "img/night-turban2.png",
        ⲆⲆΔΔΔᐃⲆ: "img/inv-turban2-out.png",
        ⲆᐃⵠΔΔΔᐃ: "img/inv-turban2-in.png",
        ΔᐃΔΔⵠΔΔ: "img/inv-turban2-click.png",
        ΔᐃⵠⵠⲆᐃᐃ: "img/inv-turban1-out.png",
        ΔⵠᐃⲆΔⵠⵠ: "img/inv-turban1-in.png",
        ΔΔⵠᐃⵠⲆᐃ: "img/inv-turban1-click.png",
        ᐃⵠᐃᐃᐃⵠⲆ: "img/day-pitchfork2.png",
        ⵠⲆΔΔᐃᐃⲆ: "img/night-pitchfork2.png",
        ΔⲆⲆᐃⲆΔⲆ: "img/inv-pitchfork2-out.png",
        ⲆΔⲆⵠⵠΔⵠ: "img/inv-pitchfork2-in.png",
        ⲆⵠΔᐃⵠΔΔ: "img/inv-pitchfork2-click.png",
        ΔᐃΔⵠⲆⵠᐃ: "img/inv-gold-fork-click.png",
        ᐃᐃⲆⵠⵠⲆⵠ: "img/inv-pilot-glasses-click.png",
        ᐃⲆΔⲆⲆᐃⲆ: "img/day-pilot-helmet.png",
        ⲆⲆⲆⲆᐃⵠⵠ: "img/night-pilot-helmet.png",
        ⲆⵠΔΔᐃΔᐃ: "img/inv-pilot-helmet-out.png",
        ᐃᐃⲆᐃᐃⵠⵠ: "img/inv-pilot-helmet-in.png",
        ⵠᐃΔⲆⵠᐃᐃ: "img/inv-pilot-helmet-click.png",
        ΔᐃⲆΔΔᐃΔⲆΔ: "img/day-sandworm0.png",
        ΔⲆᐃⲆᐃⵠⲆ: "img/day-sandworm1.png",
        ⵠⵠᐃⲆᐃⲆᐃ: "img/day-sandworm2.png",
        ᐃⲆⵠΔΔⲆᐃⲆᐃ: "img/night-sandworm0.png",
        ᐃⲆᐃΔⲆᐃᐃ: "img/night-sandworm1.png",
        ⵠⵠΔᐃⲆⲆⲆ: "img/night-sandworm2.png",
        ⵠⲆⵠⵠᐃⵠⵠ: "img/hurt-sandworm0.png",
        ᐃΔᐃᐃΔⵠⲆ: "img/hurt-sandworm1.png",
        ΔΔᐃΔᐃⵠΔ: "img/hurt-sandworm2.png",
        ΔᐃⲆᐃΔ: "img/inv-vulture-feather-click.png",
        ⵠᐃΔⲆΔᐃⵠ: "img/day-emerald0.png",
        ᐃᐃΔᐃⲆΔΔ: "img/night-emerald0.png",
        ⵠⵠᐃⲆⵠΔᐃ: "img/day-emerald1.png",
        ⵠΔΔⵠᐃᐃΔ: "img/night-emerald1.png",
        ⲆⵠᐃⲆᐃⲆΔ: "img/day-emerald2.png",
        ⵠⵠⵠΔᐃᐃⵠ: "img/night-emerald2.png",
        ᐃⵠᐃΔⲆ: "img/inv-emerald-click.png",
        ᐃⲆⵠᐃⵠⲆⵠ: "img/inv-sworm-juice-out.png",
        ⵠΔΔΔⵠΔⲆ: "img/inv-sworm-juice-in.png",
        ⲆΔⵠᐃⲆⵠⲆ: "img/inv-sworm-juice-click.png",
        ᐃΔΔⲆⲆΔⵠ: "img/day-point-machine.png",
        ΔᐃⲆΔΔⲆⵠ: "img/night-point-machine.png",
        ⲆⲆΔΔⲆⲆⵠ: "img/day-point-machine-hole.png",
        ⲆΔⵠⵠᐃⲆᐃ: "img/night-point-machine-hole.png",
        ⵠⲆᐃⲆΔⵠΔ: "img/day-point-machine-ground.png",
        ΔΔΔⵠᐃⵠⵠ: "img/night-point-machine-ground.png",
        ⲆΔΔᐃⲆⵠᐃ: "img/day-point-machine-rotate.png",
        Ⲇⵠⵠᐃᐃⵠⵠ: "img/night-point-machine-rotate.png",
        ⲆᐃΔⵠΔΔᐃ: "img/inv-point-machine-out.png",
        ⵠᐃΔΔΔⲆΔ: "img/inv-point-machine-in.png",
        ⲆⵠΔⲆᐃⵠᐃ: "img/inv-point-machine-click.png",
        ΔᐃΔⲆⵠⵠᐃ: "img/day-extractor-machine0-stone.png",
        ΔᐃⵠⵠⵠΔⲆ: "img/night-extractor-machine0-stone.png",
        ΔᐃΔᐃΔⵠΔ: "img/day-extractor-machine-stone.png",
        ⲆⵠⵠⲆⵠᐃΔ: "img/night-extractor-machine-stone.png",
        ⲆᐃΔΔᐃᐃⲆ: "img/inv-extractor-machine-stone-out.png",
        ᐃΔΔᐃⵠΔΔ: "img/inv-extractor-machine-stone-in.png",
        ᐃⵠⲆᐃⲆΔⲆ: "img/inv-extractor-machine-stone-click.png",
        ΔΔⵠⵠⵠΔⵠ: "img/day-extractor-machine0-gold.png",
        ᐃΔⵠⵠⲆⵠⵠ: "img/night-extractor-machine0-gold.png",
        ⵠⵠΔΔᐃᐃΔ: "img/day-extractor-machine-gold.png",
        ⵠⵠⵠᐃⲆⲆᐃ: "img/night-extractor-machine-gold.png",
        ⵠⵠⲆΔᐃᐃΔ: "img/inv-extractor-machine-gold-out.png",
        ᐃⵠΔⲆⵠⵠᐃ: "img/inv-extractor-machine-gold-in.png",
        ΔᐃⵠⵠⵠᐃⲆ: "img/inv-extractor-machine-gold-click.png",
        ΔⲆΔⲆⵠⲆΔ: "img/day-extractor-machine0-diamond.png",
        ΔΔⵠⵠⵠᐃⲆ: "img/night-extractor-machine0-diamond.png",
        ᐃᐃⵠⲆⵠΔⲆ: "img/day-extractor-machine-diamond.png",
        ⵠⵠᐃΔⵠⵠⵠ: "img/night-extractor-machine-diamond.png",
        ᐃⲆⵠⲆΔⲆⲆ: "img/inv-extractor-machine-diamond-out.png",
        ᐃᐃⲆΔΔⲆⵠ: "img/inv-extractor-machine-diamond-in.png",
        ᐃᐃΔᐃᐃᐃΔ: "img/inv-extractor-machine-diamond-click.png",
        ⲆⵠᐃΔⵠⵠⲆ: "img/day-extractor-machine0-amethyst.png",
        ΔΔΔⲆΔΔᐃ: "img/night-extractor-machine0-amethyst.png",
        ᐃⵠΔΔΔⵠⵠ: "img/day-extractor-machine-amethyst.png",
        ⵠⲆⵠⵠΔᐃⲆ: "img/night-extractor-machine-amethyst.png",
        ΔⲆⵠᐃⵠΔⵠ: "img/inv-extractor-machine-amethyst-out.png",
        ⲆᐃΔⲆΔΔⲆ: "img/inv-extractor-machine-amethyst-in.png",
        ΔᐃⵠᐃⲆⵠΔ: "img/inv-extractor-machine-amethyst-click.png",
        ΔⵠᐃⲆⵠⵠᐃ: "img/day-extractor-machine0-reidite.png",
        ᐃᐃΔΔⵠᐃᐃ: "img/night-extractor-machine0-reidite.png",
        ΔⵠΔΔᐃⲆΔ: "img/day-extractor-machine-reidite.png",
        ᐃᐃⲆᐃΔΔⲆ: "img/night-extractor-machine-reidite.png",
        ᐃⵠΔᐃⲆᐃⵠ: "img/inv-extractor-machine-reidite-out.png",
        ⲆⲆⲆⲆⲆⵠⲆ: "img/inv-extractor-machine-reidite-in.png",
        ⵠⵠⵠⵠⵠᐃᐃ: "img/inv-extractor-machine-reidite-click.png",
        ⲆⵠΔⲆⵠⵠⲆ: "img/extractor-cases.png",
        ⲆⲆⲆᐃᐃᐃⲆ: "img/day-golden-hen.png",
        ΔᐃⵠⲆⵠⵠᐃ: "img/night-golden-hen.png",
        ⲆΔΔᐃΔᐃⲆ: "img/day-golden-chicken.png",
        ⵠᐃⵠⵠᐃⵠⲆ: "img/night-golden-chicken.png",
        ⲆΔⲆᐃⵠⲆⵠ: "img/hurt-golden-hen.png",
        ΔⵠᐃⵠⲆᐃᐃ: "img/hurt-golden-chicken.png",
        ⲆⵠᐃᐃΔⲆΔ: "img/logo-interface.png",
        ᐃᐃΔΔⵠⲆᐃ: "img/forest-mode-hover.png",
        ⵠΔᐃΔᐃᐃⵠ: "img/normal-mode-hover.png",
        ΔΔΔⲆΔⲆΔ: "img/vampire-mode-hover.png",
        ΔᐃⲆᐃΔᐃΔ: "img/zombie-mode-hover.png",
        ᐃᐃⵠΔⲆⵠⲆ: "img/community-mode-hover2.png",
        ⲆⲆⵠⲆⲆᐃΔ: "img/experimental-mode-hover.png",
        ΔΔᐃΔΔΔⲆ: "img/zombie-mode-out.png",
        ⵠⵠᐃΔᐃⵠⵠ: "img/zombie-mode-in.png",
        ⲆᐃᐃⲆⲆΔⵠ: "img/zombie-mode-click.png",
        ⲆΔᐃⲆⵠΔⲆ: "img/vampire-mode-out.png",
        ᐃΔⲆᐃᐃΔⵠ: "img/vampire-mode-in.png",
        ⲆᐃⵠΔᐃⲆᐃ: "img/vampire-mode-click.png",
        ΔⵠᐃΔᐃⲆΔ: "img/normal-mode-out.png",
        ⵠⵠΔⲆⵠⵠᐃ: "img/normal-mode-in.png",
        ᐃΔΔΔΔⵠⲆ: "img/normal-mode-click.png",
        ᐃᐃΔⲆⵠᐃᐃ: "img/forest-mode-out.png",
        ⲆⲆΔᐃᐃⲆⲆ: "img/forest-mode-in.png",
        ΔΔⲆᐃᐃⲆᐃ: "img/forest-mode-click.png",
        ⵠⲆᐃᐃⵠᐃᐃ: "img/community-mode-out.png",
        ΔⵠⲆⲆⲆᐃΔ: "img/community-mode-in.png",
        ⲆⲆⲆᐃᐃⵠⲆ: "img/community-mode-click.png",
        ᐃᐃⲆⲆᐃⵠⲆ: "img/experimental-modes-out.png",
        ⲆⵠΔΔⵠᐃΔ: "img/experimental-modes-in.png",
        ⲆᐃᐃᐃΔΔⵠ: "img/experimental-modes-click.png",
        ᐃⵠΔⵠⲆⲆᐃ: "img/youtube-button-out.png",
        ᐃΔᐃⵠΔⲆΔ: "img/youtube-button-in.png",
        ᐃΔⵠⵠⵠᐃⵠ: "img/youtube-button-click.png",
        ⵠⵠΔⲆⵠⲆᐃ: "img/wiki-button-out.png",
        ⵠΔᐃⵠΔⵠⵠ: "img/wiki-button-in.png",
        ⵠⵠⲆⲆⲆⵠΔ: "img/wiki-button-click.png",
        ⲆⵠᐃⲆᐃᐃᐃ: "img/twitter-button-out.png",
        ⲆᐃΔΔⵠⲆⵠ: "img/twitter-button-in.png",
        ΔⲆⵠⵠⵠⲆⲆ: "img/twitter-button-click.png",
        ΔᐃⵠⵠΔⲆⵠ: "img/facebook-button-out.png",
        ᐃⵠᐃΔΔᐃⵠ: "img/facebook-button-in.png",
        ⵠⵠᐃᐃᐃΔⵠ: "img/facebook-button-click.png",
        ⵠᐃΔⵠᐃᐃΔ: "img/reddit-button-out.png",
        Δⵠⵠᐃᐃᐃᐃ: "img/reddit-button-in.png",
        ᐃΔⲆⲆᐃᐃⵠ: "img/reddit-button-click.png",
        ⵠΔᐃᐃΔΔᐃ: "img/discord-button-out.png",
        ⵠᐃⵠΔⲆⵠΔ: "img/discord-button-in.png",
        ⵠⲆΔⵠⲆⲆⲆ: "img/discord-button-click.png",
        ⵠⵠΔⵠᐃΔⲆ: "img/merch-button-out.png",
        ΔⵠⲆΔⲆΔᐃ: "img/merch-button-in.png",
        ᐃⵠⵠⲆⵠΔⲆ: "img/merch-button-click.png",
        ⵠⲆΔΔᐃΔⵠⲆΔ: "img/terminal-button-out.png",
        ᐃⲆⲆⲆᐃᐃⵠΔⲆ: "img/terminal-button-in.png",
        ⲆΔⲆⵠⵠΔᐃⵠᐃ: "img/terminal-button-click.png",
        ΔⲆΔⲆⲆᐃⵠ: "img/restart-out.png",
        ΔᐃΔⲆᐃΔᐃ: "img/restart-in.png",
        ⵠⲆⲆΔⲆⵠᐃ: "img/restart-click.png",
        ⵠΔΔⲆⲆᐃΔ: "img/guide-out.png",
        ⲆΔⵠⲆⵠΔⵠ: "img/guide-in.png",
        ⵠΔⲆⲆᐃⵠⵠ: "img/guide-click.png",
        ⵠᐃⵠⲆⵠᐃᐃ: "img/copy-paste-out.png",
        ᐃⲆⲆΔⲆⵠⲆ: "img/copy-paste-in.png",
        ᐃⲆⵠⲆⵠⲆᐃ: "img/copy-paste-click.png",
        ΔΔⵠⵠⲆᐃᐃ: "img/link-buttons-bg.png",
        ᐃⲆᐃⵠⲆⲆⵠ: "img/changelog-box2.png",
        ⵠΔᐃⲆᐃᐃΔ: "img/changelog_31.png",
        ⵠΔⵠᐃᐃⲆⵠ: "img/banner-taming.png",
        ΔⲆΔⵠⵠᐃΔ: "img/profile-button-out.png",
        ΔΔⵠΔⲆⲆΔ: "img/profile-button-in.png",
        ᐃᐃⲆᐃΔᐃⲆ: "img/profile-button-click.png",
        ΔⵠᐃⲆΔΔⲆ: "img/login-button-out.png",
        ⵠⵠᐃⵠᐃⲆⵠ: "img/login-button-in.png",
        ΔⵠⲆᐃᐃⲆᐃ: "img/login-button-click.png",
        ΔⲆⲆⲆᐃⲆᐃ: "img/login-google-out.png",
        ΔᐃⵠⵠⲆᐃⲆ: "img/login-google-in.png",
        ⵠⲆΔⲆΔⵠΔ: "img/login-google-click.png",
        ⵠΔᐃⵠᐃⵠⵠ: "img/login-facebook-out.png",
        ΔⲆΔⵠᐃΔΔ: "img/login-facebook-in.png",
        ⲆⲆΔⵠΔΔΔ: "img/login-facebook-click.png",
        ⲆΔⲆⲆΔⵠⵠ: "img/account-box.png",
        ⵠⵠᐃᐃⲆⵠⵠⵠⲆ: "img/account-under-maintenance.png",
        ⲆⲆᐃᐃᐃΔⲆ: "img/close-button-account-out.png",
        ⵠΔⲆⵠΔⵠⵠ: "img/close-button-account-in.png",
        ᐃⵠᐃΔⲆⲆⲆ: "img/close-button-account-click.png",
        ΔⲆΔΔⲆΔⲆ: "img/play-button-out.png",
        ΔⵠⵠⵠⵠⲆⲆ: "img/play-button-in.png",
        ᐃⵠᐃⲆΔΔᐃ: "img/play-button-click.png",
        ΔᐃᐃΔΔΔΔⲆⲆ: "img/app-store-badge.png",
        ᐃΔⵠⵠᐃᐃᐃⲆⲆ: "img/play-store-badge.png",
        ⵠᐃᐃⵠᐃΔΔⲆΔ: "img/mobile-boxad.png",
        ⲆᐃⵠΔΔᐃᐃ: "img/modify-name-out.png",
        ⵠⵠⵠᐃⵠᐃⲆ: "img/modify-name-in.png",
        ⵠⵠⲆⲆᐃᐃᐃ: "img/modify-name-click.png",
        ⲆⲆⵠⵠⲆᐃⲆ: "img/copy-id-button-out.png",
        ⲆΔⲆΔΔⲆᐃ: "img/copy-id-button-hover.png",
        ⵠᐃⵠⵠⵠᐃΔ: "img/copy-id-button-active.png",
        ⵠⵠⵠⲆΔⵠᐃ: "img/yes-button-out.png",
        ⵠⵠΔⲆⵠΔᐃ: "img/yes-button-in.png",
        ⵠΔᐃᐃⵠⲆᐃ: "img/yes-button-click.png",
        ⲆᐃⵠⵠᐃⲆⵠ: "img/yes-300-button-out.png",
        ⲆᐃᐃΔΔⲆΔ: "img/yes-300-button-in.png",
        ⵠⵠⲆⵠⲆⲆᐃ: "img/yes-300-button-click.png",
        ⲆⵠⵠᐃⲆΔⵠ: "img/no-button-out.png",
        ⲆⵠⵠⵠᐃⲆΔ: "img/no-button-in.png",
        ΔᐃΔⵠⵠⵠⲆ: "img/no-button-click.png",
        ΔⵠᐃⲆΔⵠⲆ: "img/no-thanks-button-out.png",
        ⵠⵠⵠΔᐃᐃᐃ: "img/no-thanks-button-in.png",
        ⵠΔⵠⵠᐃΔΔ: "img/no-thanks-button-click.png",
        ᐃⵠⵠⵠᐃᐃⲆ: "img/shop-button-out.png",
        ⵠⵠΔⵠᐃⵠⲆ: "img/shop-button-in.png",
        ⲆΔⲆΔΔⲆⲆ: "img/shop-button-click.png",
        ᐃᐃⲆⲆⲆΔΔ: "img/logout-out.png",
        ᐃⲆⵠⲆⵠΔΔ: "img/logout-in.png",
        ⵠⵠᐃΔⲆΔⲆ: "img/logout-click.png",
        ΔⲆᐃᐃΔⲆᐃ: "img/terms-button-out.png",
        ᐃⵠⵠΔᐃΔⵠ: "img/terms-button-in.png",
        ⵠΔᐃΔⵠΔΔ: "img/terms-button-click.png",
        ΔⵠΔΔΔⵠⵠ: "img/tutorial-icon.png",
        ⲆΔᐃᐃⲆⵠⵠ: "img/skins-icon.png",
        ⵠΔⲆᐃⵠᐃⵠ: "img/shop-icon.png",
        ⵠΔΔΔᐃᐃᐃⲆΔ: "img/paint-icon.png",
        ΔⵠⲆⵠⲆⵠⵠ: "img/leaderboard-icon.png",
        ⲆᐃⵠᐃⵠⵠΔ: "img/start-icon.png",
        ⲆΔⲆⵠⲆⲆΔ: "img/profile-icon.png",
        ⵠⲆⵠΔⵠⲆⵠ: "img/server-access-icon2.png",
        ⵠⵠΔΔᐃⵠⲆ: "img/button-homepage-bg-out.png",
        ⵠⲆⲆᐃⲆⵠⲆ: "img/button-homepage-bg-in.png",
        ΔΔᐃᐃⲆΔΔ: "img/button-homepage-bg-click.png",
        ᐃᐃΔⲆΔΔⲆ: "img/button-bottom-homepage-bg-out.png",
        ᐃᐃⵠⲆΔᐃᐃ: "img/button-bottom-homepage-bg-in.png",
        ΔΔᐃᐃⲆⲆᐃ: "img/button-bottom-homepage-bg-click.png",
        ᐃⵠᐃᐃⵠΔⵠ: "img/lvl-player.png",
        Δᐃⵠⵠⵠⵠⵠ: "img/avatar-player.png",
        ⵠⵠⲆⲆⵠΔΔ: "img/avatar-player1.png",
        ΔⵠⲆᐃⲆⲆⲆ: "img/avatar-player2.png",
        ⲆΔᐃⵠΔⵠⲆ: "img/avatar-player3.png",
        ⲆᐃⲆⲆΔΔΔ: "img/avatar-player4.png",
        ⲆᐃᐃΔⵠⵠᐃ: "img/avatar-player5.png",
        ⵠᐃⵠᐃΔᐃᐃ: "img/avatar-player6.png",
        ⲆΔⵠⲆⵠΔⲆ: "img/avatar-player7.png",
        ΔⵠⵠⵠΔᐃⲆ: "img/avatar-player8.png",
        ΔΔᐃᐃⲆⲆⵠ: "img/avatar-player9.png",
        ⲆΔⲆᐃⵠⲆⲆ: "img/avatar-player10.png",
        ΔⵠᐃᐃⵠᐃⲆ: "img/avatar-player11.png",
        ⵠΔⲆⵠΔⵠΔ: "img/avatar-player12.png",
        ᐃⲆᐃᐃᐃⲆΔ: "img/avatar-player13.png",
        ᐃⵠⲆⵠⵠΔⲆ: "img/avatar-player14.png",
        ΔⵠΔⵠⲆⵠᐃ: "img/avatar-player14.png",
        ⲆⲆΔᐃⵠΔΔ: "img/avatar-player14.png",
        ΔΔⵠΔΔΔⵠ: "img/avatar-player14.png",
        ᐃΔΔⲆᐃⲆᐃⲆΔ: "img/golden-bread.png",
        ΔΔΔⲆⲆᐃⵠ: "img/buy-bread-out.png",
        ΔᐃⵠⵠⲆΔⵠ: "img/buy-bread-in.png",
        ⲆᐃΔΔΔⵠⲆ: "img/buy-bread-click.png",
        ⵠΔⲆⲆΔⵠⵠ: "img/gauge.png",
        ⵠᐃΔᐃᐃⲆⵠⲆᐃ: "img/season-4-out.png",
        ΔⵠΔⵠᐃⵠᐃᐃⲆ: "img/season-4-in.png",
        ⵠⵠⵠⵠΔΔⲆΔⲆ: "img/season-4-click.png",
        ΔⲆⲆᐃΔⲆᐃΔⵠ: "img/season4-box.png",
        ⵠΔΔᐃⵠⲆᐃⲆᐃ: "img/season-5-out.png",
        ⲆⵠΔᐃᐃΔⵠⲆⵠ: "img/season-5-in.png",
        ⲆⵠΔⲆᐃⵠᐃᐃΔ: "img/season-5-click.png",
        ⲆⵠⵠᐃⲆⵠⲆᐃⲆ: "img/season5-box.png",
        ΔⵠⲆⲆⵠⲆⲆ: "img/season-6-out.png",
        ⲆⲆⲆᐃⲆᐃΔ: "img/season-6-in.png",
        ᐃⲆΔΔⵠᐃᐃ: "img/season-6-click.png",
        ᐃΔⵠᐃⵠΔⲆ: "img/season6-box.png",
        ⲆⲆᐃᐃΔΔⵠ: "img/profile3-box.png",
        ⲆΔⵠΔΔⵠⲆ: "img/skins-box.png",
        ⲆⲆᐃΔᐃᐃⵠ: "img/shop-box.png",
        ⲆⲆⵠᐃᐃΔⲆⲆᐃ: "img/private-server-box.png",
        ⵠᐃⲆⵠΔⵠⲆ: "img/location-box.png",
        ⵠⲆⲆⲆⲆⲆⵠ: "img/server-duration-box.png",
        ⵠⵠᐃᐃᐃΔⲆ: "img/tutorial-box.png",
        ΔᐃᐃΔΔⵠⲆ: "img/leaderboard2-box.png",
        ⲆⵠⵠⵠΔΔⵠ: "img/buy-breads-box.png",
        ⵠⵠᐃΔⲆᐃᐃ: "img/bag-box.png",
        ⵠⲆᐃᐃⵠⲆⵠ: "img/deadbox-box.png",
        ⵠⲆᐃΔᐃΔⲆ: "img/book-box.png",
        ⲆᐃᐃᐃᐃᐃΔ: "img/accessories-box.png",
        ⲆⲆᐃᐃⲆΔⲆ: "img/customskin-box.png",
        ⵠⲆΔⵠΔᐃⵠ: "img/bag-lasts.png",
        ⲆᐃΔⵠⲆⵠⲆ: "img/server-lasts.png",
        ⲆΔⲆΔᐃᐃⵠ: "img/server-access-box3.png",
        ⲆⲆⵠⲆΔΔᐃ: "img/lootbox-box.png",
        ΔⵠⲆᐃᐃᐃⲆ: "img/change-nickname0.png",
        ⲆΔⵠΔΔΔⲆ: "img/change-nickname1.png",
        ΔᐃᐃⵠΔⵠΔ: "img/cheating-box.png",
        ΔᐃⵠΔᐃⵠΔᐃᐃ: "img/daily-quest-box.png",
        ΔΔⵠⵠᐃⵠⵠΔⵠ: "img/daily-5-bread.png",
        ⲆᐃⵠⲆᐃⲆᐃΔΔ: "img/daily-10-bread.png",
        ΔⲆⲆⲆΔⲆⲆⵠᐃ: "img/daily-valid.png",
        ᐃΔᐃⵠΔᐃⲆ: "img/normal-profile-out.png",
        ΔᐃⵠΔⲆᐃΔ: "img/normal-profile-in.png",
        ⲆΔᐃⵠⵠᐃΔ: "img/normal-profile-click.png",
        ⲆΔᐃᐃᐃⲆⲆ: "img/forest-profile-out.png",
        ᐃΔⵠⵠΔⲆᐃ: "img/forest-profile-in.png",
        ⵠΔⵠΔⵠⲆⵠ: "img/forest-profile-click.png",
        ⲆⵠⲆⲆⲆⵠᐃ: "img/zombie-profile-out.png",
        ⲆᐃΔΔⲆΔᐃ: "img/zombie-profile-in.png",
        ᐃᐃΔᐃⲆⲆⲆ: "img/zombie-profile-click.png",
        ⵠⵠⵠⲆⵠᐃⲆ: "img/vampire-profile-out.png",
        ⲆⲆⲆⲆⲆⵠᐃ: "img/vampire-profile-in.png",
        ᐃᐃᐃⲆⲆΔᐃ: "img/vampire-profile-click.png",
        ΔⲆⵠⲆⵠⵠΔ: "img/total-profile-out.png",
        ⵠᐃⵠΔΔᐃΔ: "img/total-profile-in.png",
        ⵠⲆΔᐃΔΔΔ: "img/total-profile-click.png",
        ᐃⲆⲆᐃΔᐃⲆ: "img/season1-out.png",
        ⵠⲆΔᐃΔᐃⵠ: "img/season1-in.png",
        ᐃⵠᐃⵠᐃⵠⲆ: "img/season1-click.png",
        ⵠᐃⲆᐃⵠⵠⲆ: "img/season2-out.png",
        ⲆΔⵠⲆΔᐃΔ: "img/season2-in.png",
        ΔᐃᐃᐃΔⲆᐃ: "img/season2-click.png",
        ΔⲆᐃⲆⲆⵠᐃ: "img/season3-out.png",
        ⲆⲆⵠΔΔΔΔ: "img/season3-in.png",
        ⲆΔⲆΔᐃΔⵠ: "img/season3-click.png",
        ⲆⲆᐃᐃⵠⵠΔ: "img/season4-out.png",
        ⵠⵠᐃΔΔᐃⲆ: "img/season4-in.png",
        ᐃᐃⲆΔⵠⲆⵠ: "img/season4-click.png",
        ΔⲆΔⵠᐃᐃⲆ: "img/season5-out.png",
        ⲆⲆᐃⵠᐃΔᐃ: "img/season5-in.png",
        ⲆⲆᐃⲆⲆⵠⲆ: "img/season5-click.png",
        ⵠΔᐃⵠⵠⵠᐃ: "img/season6-out.png",
        ΔΔᐃᐃᐃⵠⲆ: "img/season6-in.png",
        ΔⵠⵠⲆᐃΔᐃ: "img/season6-click.png",
        ⵠⵠΔΔⵠⵠⵠ: "img/locked-skin-alert.png",
        ΔΔⵠΔⲆⵠⵠ: "img/locked-custom-alert.png",
        ⵠⵠⲆⵠΔⲆΔ: "img/bg-red-locked.png",
        ᐃᐃⲆⲆᐃᐃⲆ: "img/skin-button-out.png",
        ΔⵠᐃᐃⲆⵠⵠ: "img/skin-button-in.png",
        ⵠⵠⲆᐃⵠᐃᐃ: "img/skin-button-click.png",
        ΔΔᐃⲆΔⵠᐃ: "img/accessory-button-out.png",
        ᐃⵠⵠⲆⵠⵠⵠ: "img/accessory-button-in.png",
        ᐃΔⵠⲆᐃᐃⲆ: "img/accessory-button-click.png",
        ᐃⵠⲆⲆᐃⵠⵠ: "img/bag-button-out.png",
        ᐃⲆᐃⵠⵠⵠⵠ: "img/bag-button-in.png",
        ⵠⲆⲆⲆΔⵠΔ: "img/bag-button-click.png",
        ⵠⵠⲆΔᐃᐃⲆ: "img/book-button-out.png",
        ᐃⲆΔᐃᐃΔᐃ: "img/book-button-in.png",
        ⲆⲆΔⲆᐃΔᐃ: "img/book-button-click.png",
        ᐃⲆⵠⲆΔᐃⲆ: "img/deadbox-button-out.png",
        ᐃᐃⵠΔⲆᐃΔ: "img/deadbox-button-in.png",
        ⵠΔⲆⵠΔΔⲆ: "img/deadbox-button-click.png",
        ΔⵠⲆⲆᐃᐃᐃ: "img/loot-button-out.png",
        ΔⲆΔΔᐃᐃΔ: "img/loot-button-in.png",
        ΔΔⵠⲆⲆⲆⵠ: "img/loot-button-click.png",
        ⲆᐃᐃᐃⵠΔᐃ: "img/free-item-out.png",
        ᐃⲆᐃΔᐃⲆΔ: "img/free-item-in.png",
        ⵠᐃᐃⵠΔⵠᐃ: "img/free-item-click.png",
        Δᐃⵠⵠ: "img/wood-item-out.png",
        ΔΔᐃΔ: "img/wood-item-in.png",
        ⵠⵠΔⵠ: "img/wood-item-click.png",
        ⵠⲆⲆⵠᐃΔⲆ: "img/stone-item.png",
        ⵠᐃΔⵠⵠΔⵠ: "img/stone-item-in.png",
        ᐃᐃᐃⵠᐃΔᐃ: "img/stone-item-click.png",
        ⲆⲆΔΔᐃᐃⵠ: "img/gold-item.png",
        ⲆⵠⵠⵠⲆᐃⲆ: "img/gold-item-in.png",
        ⵠⵠᐃⵠᐃⲆⲆ: "img/gold-item-click.png",
        ᐃᐃⵠΔΔᐃⵠ: "img/diamond-item.png",
        ΔⵠΔᐃⵠⲆⲆ: "img/diamond-item-in.png",
        ⵠⵠⲆⲆⲆΔΔ: "img/diamond-item-click.png",
        ΔⵠⵠⲆⲆᐃⲆ: "img/amethyst-item.png",
        ⲆⲆⲆΔᐃᐃⲆ: "img/amethyst-item-in.png",
        ΔⵠⲆⲆⵠⵠᐃ: "img/amethyst-item-click.png",
        ᐃⵠⵠᐃⲆⲆⲆ: "img/reidite-item.png",
        ᐃⲆⲆⲆⵠⵠⵠ: "img/reidite-item-in.png",
        ⵠΔⵠⵠᐃⵠⲆ: "img/reidite-item-click.png",
        ⵠΔᐃΔⵠⲆⲆ: "img/special-item-out.png",
        ΔΔᐃᐃⲆⲆⲆ: "img/special-item-in.png",
        ⲆᐃᐃᐃᐃᐃⲆ: "img/special-item-click.png",
        ᐃΔⲆᐃᐃᐃⵠ: "img/level-item-out.png",
        ΔΔΔΔⲆⵠΔ: "img/level-item-in.png",
        ⵠΔᐃΔᐃᐃΔ: "img/level-item-click.png",
        ΔⵠⲆᐃⲆΔⲆ: "img/skin-previous-out.png",
        ᐃⵠᐃᐃᐃΔΔ: "img/skin-previous-in.png",
        ΔΔΔⵠᐃⲆΔ: "img/skin-previous-click.png",
        ΔᐃΔⲆⵠΔΔ: "img/skin-next-out.png",
        ⵠⵠᐃⵠΔⲆⵠ: "img/skin-next-in.png",
        ᐃⲆᐃⲆᐃⲆΔ: "img/skin-next-click.png",
        ⲆΔΔᐃⵠ: "img/back-button-out.png",
        ᐃΔᐃΔᐃ: "img/back-button-in.png",
        ΔᐃⲆΔᐃ: "img/back-button-click.png",
        ⲆⲆⵠᐃⵠⵠᐃ: "img/get-more-button-out.png",
        ΔⲆΔⲆⵠᐃⲆ: "img/get-more-button-in.png",
        ᐃᐃᐃΔΔⵠⵠ: "img/get-more-button-click.png",
        ⲆᐃᐃⵠⲆᐃⵠ: "img/currency1-out.png",
        ⵠΔΔⵠⲆⵠΔ: "img/currency1-in.png",
        ΔⵠΔᐃΔⵠⲆ: "img/currency1-click.png",
        ⲆΔΔΔⵠᐃΔ: "img/currency2-out.png",
        ⲆⲆⵠΔⲆᐃΔ: "img/currency2-in.png",
        ⲆΔⵠᐃᐃⲆⵠ: "img/currency2-click.png",
        ΔⲆᐃᐃⲆⵠᐃ: "img/currency3-out.png",
        ⲆⵠⵠⵠΔⵠⵠ: "img/currency3-in.png",
        ⵠᐃΔΔᐃⲆⵠ: "img/currency3-click.png",
        ⵠⵠΔⲆᐃⵠⲆ: "img/currency4-out.png",
        ᐃⲆΔⲆⵠΔΔ: "img/currency4-in.png",
        ᐃⵠⲆΔⵠⲆⵠ: "img/currency4-click.png",
        ⲆⵠΔΔⲆΔⵠ: "img/currency5-out.png",
        ΔΔᐃΔⲆⲆᐃ: "img/currency5-in.png",
        ⵠΔⵠΔᐃⲆΔ: "img/currency5-click.png",
        ᐃΔⵠᐃΔⵠΔ: "img/price1-out.png",
        ⵠᐃΔⲆⲆⵠⵠ: "img/price1-in.png",
        ΔΔΔⵠΔⵠⵠ: "img/price1-click.png",
        ⵠᐃⵠⵠᐃⲆᐃ: "img/price2-out.png",
        ⵠⲆᐃⲆⵠᐃⲆ: "img/price2-in.png",
        ⲆⲆᐃⲆΔΔⲆ: "img/price2-click.png",
        ⲆᐃⵠⵠΔᐃⵠ: "img/price3-out.png",
        ΔΔᐃΔⵠⵠᐃ: "img/price3-in.png",
        ᐃⵠΔⵠⲆⲆⲆ: "img/price3-click.png",
        ⵠΔΔⲆΔⵠΔ: "img/price4-out.png",
        ⵠⵠΔᐃᐃᐃⲆ: "img/price4-in.png",
        ⵠⲆΔᐃⵠⵠᐃ: "img/price4-click.png",
        ΔᐃⲆΔⵠⲆΔ: "img/price5-out.png",
        ⲆⵠⲆⲆΔᐃⵠ: "img/price5-in.png",
        ⵠΔⵠΔⲆⲆⵠ: "img/price5-click.png",
        ᐃⲆⵠΔΔⲆᐃⲆΔ: "img/buy-private-server-out.png",
        ⵠᐃΔⵠΔΔΔⵠⵠ: "img/buy-private-server-in.png",
        ΔⵠΔⲆⵠⲆᐃⵠⵠ: "img/buy-private-server-click.png",
        ᐃⲆⵠΔⲆⲆⵠ: "img/atlanta-button-out.png",
        ᐃᐃⵠΔᐃⵠⲆ: "img/atlanta-button-in.png",
        ⵠΔⵠΔⲆⲆᐃ: "img/atlanta-button-click.png",
        ΔᐃⵠᐃΔᐃᐃ: "img/los-angeles-button-out.png",
        ⵠᐃᐃⵠᐃⵠⲆ: "img/los-angeles-button-in.png",
        ᐃⲆΔⵠⲆᐃᐃ: "img/los-angeles-button-click.png",
        ⲆΔⲆΔᐃᐃᐃ: "img/sydney-button-out.png",
        ⲆᐃⲆⵠᐃⵠⵠ: "img/sydney-button-in.png",
        ⲆⵠⵠⲆΔⲆΔ: "img/sydney-button-click.png",
        ⲆⲆΔΔⵠᐃΔ: "img/frankfurt-button-out.png",
        ⲆΔᐃⵠΔⵠⵠ: "img/frankfurt-button-in.png",
        ᐃⲆⲆⵠΔΔᐃ: "img/frankfurt-button-click.png",
        ⲆⵠΔᐃᐃᐃⲆ: "img/osaka-button-out.png",
        ⵠΔⵠⵠⲆⲆⲆ: "img/osaka-button-in.png",
        ⲆᐃⵠⲆⵠᐃᐃ: "img/osaka-button-click.png",
        ⵠᐃⲆΔΔⵠΔΔᐃ: "img/yes-location-out.png",
        ⲆᐃᐃⵠΔΔᐃⲆᐃ: "img/yes-location-in.png",
        ΔⲆⵠⵠⲆᐃΔⲆⲆ: "img/yes-location-click.png",
        ΔΔΔⲆⲆᐃⲆ: "img/3days-button-out.png",
        ⵠⲆΔⵠⲆⵠᐃ: "img/3days-button-in.png",
        ᐃΔⵠΔⲆⲆΔ: "img/3days-button-click.png",
        ΔΔΔⲆⲆⲆΔ: "img/7days-button-out.png",
        ΔΔᐃⵠⵠⲆΔ: "img/7days-button-in.png",
        ⲆⲆⲆⲆΔⲆⵠ: "img/7days-button-click.png",
        ⵠⵠⵠⲆᐃⲆᐃ: "img/30days-button-out.png",
        ΔΔⲆΔᐃⵠⵠ: "img/30days-button-in.png",
        ⲆⲆⲆⵠⲆΔⲆ: "img/30days-button-click.png",
        ᐃⲆᐃᐃΔᐃⵠ: "img/90days-button-out.png",
        ᐃΔΔᐃⲆⵠΔ: "img/90days-button-in.png",
        ⲆⵠⲆΔⲆⲆⵠ: "img/90days-button-click.png",
        ⲆⵠⲆᐃⲆⵠⲆ: "img/spin1.png",
        ⲆⲆⲆⵠᐃΔᐃ: "img/spin2.png",
        ΔΔⵠΔⵠΔΔ: "img/spin3.png",
        ⲆⵠⲆⲆⲆⲆⵠ: "img/spin4.png",
        ⲆΔΔⲆⲆⵠⵠ: "img/spin5.png",
        Δⵠᐃⵠᐃᐃᐃ: "img/spin6.png",
        ⵠΔΔⵠⲆⲆᐃ: "img/arrow-spin.png",
        ΔⵠⲆᐃᐃⵠᐃ: "img/spin-button-1-out.png",
        ⲆᐃΔⲆⵠⲆᐃ: "img/spin-button-1-in.png",
        ΔΔⵠΔⲆⲆⲆ: "img/spin-button-1-click.png",
        ᐃⵠΔΔᐃᐃⲆ: "img/spin-button-2-out.png",
        ⲆⵠⲆΔⲆᐃΔ: "img/spin-button-2-in.png",
        ᐃΔⲆⲆⵠΔⲆ: "img/spin-button-2-click.png",
        ᐃᐃⵠΔⲆⵠΔ: "img/spin-button-3-out.png",
        ΔΔΔⲆⵠⲆᐃ: "img/spin-button-3-in.png",
        ᐃΔⵠΔΔᐃᐃ: "img/spin-button-3-click.png",
        ΔΔⲆⵠΔᐃΔ: "img/spin-button-4-out.png",
        ⲆΔᐃᐃᐃΔᐃ: "img/spin-button-4-in.png",
        ΔΔᐃⵠⲆᐃΔ: "img/spin-button-4-click.png",
        ΔΔⲆΔΔΔΔ: "img/spin-button-5-out.png",
        ⲆⲆⲆᐃΔᐃᐃ: "img/spin-button-5-in.png",
        ⲆⵠᐃΔᐃΔⵠ: "img/spin-button-5-click.png",
        ᐃⲆΔΔⲆᐃΔ: "img/spin-light.png",
        ⵠⲆⵠᐃΔΔΔ: "img/tuto-wiki-out.png",
        ΔᐃΔⵠⵠΔⲆ: "img/tuto-wiki-in.png",
        ⵠⵠΔⵠⲆⲆᐃ: "img/tuto-wiki-click.png",
        ᐃⲆᐃᐃΔᐃⲆ: "img/tuto-previous-out.png",
        ΔⲆⲆᐃΔΔⵠ: "img/tuto-previous-in.png",
        ΔᐃΔⵠⲆᐃΔ: "img/tuto-previous-click.png",
        ⵠⲆΔᐃⲆⵠΔ: "img/tuto-next-out.png",
        ⲆᐃⲆᐃⲆΔΔ: "img/tuto-next-in.png",
        ᐃᐃΔΔΔⵠⲆ: "img/tuto-next-click.png",
        ⲆⲆⵠⲆᐃⵠΔ: "img/time-leaderboard-out.png",
        ᐃΔⲆⵠⵠᐃᐃ: "img/time-leaderboard-in.png",
        ⲆⵠΔᐃⵠΔᐃ: "img/time-leaderboard-click.png",
        ⲆΔΔΔⵠᐃᐃ: "img/score-leaderboard-out.png",
        ⵠⲆᐃⵠΔⵠᐃ: "img/score-leaderboard-in.png",
        ⲆⵠᐃⲆᐃᐃΔ: "img/score-leaderboard-click.png",
        ᐃⵠᐃᐃⵠⵠΔ: "img/lvl-leaderboard-out.png",
        ⲆⵠⵠᐃⲆᐃΔ: "img/lvl-leaderboard-in.png",
        ⵠⲆⲆΔⵠΔⲆ: "img/lvl-leaderboard-click.png",
        ⲆᐃⲆⲆᐃⲆⲆ: "img/kill-leaderboard-out.png",
        ⵠᐃΔⵠⵠⲆⵠ: "img/kill-leaderboard-in.png",
        ΔΔⲆⵠⲆΔΔ: "img/kill-leaderboard-click.png",
        ΔᐃᐃⲆⵠⵠⵠ: "img/all-leaderboard-out.png",
        ⵠΔⲆᐃⵠⵠⲆ: "img/all-leaderboard-in.png",
        ΔⵠⵠᐃΔⲆᐃ: "img/all-leaderboard-click.png",
        ᐃⵠᐃⲆΔⲆⵠ: "img/today-leaderboard-out.png",
        ᐃⲆⲆⵠΔⵠⵠ: "img/today-leaderboard-in.png",
        ⵠⵠⵠᐃⲆⵠⵠ: "img/today-leaderboard-click.png",
        ⵠᐃⵠⲆⲆΔⲆ: "img/week-leaderboard-out.png",
        ΔᐃΔΔⲆⲆⲆ: "img/week-leaderboard-in.png",
        ⵠᐃᐃⲆⲆΔᐃ: "img/week-leaderboard-click.png",
        ᐃᐃΔΔⲆⲆⵠ: "img/season1-out.png",
        ᐃⵠⲆᐃⲆᐃⲆ: "img/season1-in.png",
        ⲆΔⲆⲆⵠⲆᐃ: "img/season1-click.png",
        ⵠⵠⵠⲆΔⲆⲆ: "img/season2-out.png",
        ⲆᐃⵠᐃⲆᐃΔ: "img/season2-in.png",
        ΔⲆⵠΔⵠⲆⲆ: "img/season2-click.png",
        ᐃΔΔⵠΔΔⲆ: "img/season3-out.png",
        ⲆᐃΔᐃΔᐃᐃ: "img/season3-in.png",
        ⵠⲆⲆⲆⵠⵠⵠ: "img/season3-click.png",
        ΔⲆⲆⵠᐃⵠΔ: "img/season4-out.png",
        ᐃᐃΔᐃᐃΔⵠ: "img/season4-in.png",
        ΔᐃⲆⲆⲆΔⵠ: "img/season4-click.png",
        ᐃΔᐃᐃΔⵠⵠ: "img/season5-out.png",
        ᐃᐃᐃᐃⲆΔⲆ: "img/season5-in.png",
        ᐃⲆⲆⵠΔⲆⵠ: "img/season5-click.png",
        ⵠⵠⲆⵠⲆᐃΔ: "img/season6-out.png",
        ⵠⲆⲆΔⲆᐃⵠ: "img/season6-in.png",
        ᐃΔⲆⲆⲆⵠᐃ: "img/season6-click.png",
        ⵠΔΔⵠⵠⵠΔ: "img/total-lead-out.png",
        ⵠᐃⵠⲆᐃΔᐃ: "img/total-lead-in.png",
        ᐃᐃᐃᐃⵠΔΔ: "img/total-lead-click.png",
        ⲆΔᐃΔⵠΔΔ: "img/normal-lead-out.png",
        ᐃᐃΔΔΔⵠⵠ: "img/normal-lead-in.png",
        ⵠᐃᐃᐃᐃⵠⵠ: "img/normal-lead-click.png",
        ᐃΔΔᐃᐃᐃⲆ: "img/forest-lead-out.png",
        ᐃⲆⵠⲆⵠᐃⲆ: "img/forest-lead-in.png",
        ⵠⵠΔΔⲆⲆΔ: "img/forest-lead-click.png",
        ΔᐃΔΔΔⵠⲆ: "img/vampire-lead-out.png",
        ⵠΔᐃⲆΔⵠⵠ: "img/vampire-lead-in.png",
        ⵠⲆⵠⲆᐃᐃⵠ: "img/vampire-lead-click.png",
        ᐃⵠⵠᐃΔᐃᐃ: "img/zombie-lead-out.png",
        ⵠΔᐃᐃΔⲆⲆ: "img/zombie-lead-in.png",
        ᐃΔⲆⵠⵠⲆᐃ: "img/zombie-lead-click.png",
        ⵠⲆⲆⵠᐃᐃⲆ: "img/day-level5.png",
        ⲆⲆᐃᐃⲆⲆⲆ: "img/night-level5.png",
        ⵠⵠᐃⵠⵠΔᐃ: "img/day-level10.png",
        ΔⵠᐃⲆᐃΔⵠ: "img/night-level10.png",
        ⵠΔⵠⵠⲆΔΔ: "img/day-level15.png",
        ᐃⵠΔΔᐃⲆⵠ: "img/night-level15.png",
        ΔΔΔⵠΔⵠΔ: "img/day-level20.png",
        ᐃⵠⲆⲆᐃⲆⲆ: "img/night-level20.png",
        ⲆⲆⲆᐃⲆΔⵠ: "img/day-level25.png",
        ⵠⲆⵠᐃⲆⵠⵠ: "img/night-level25.png",
        ΔΔΔⲆΔⲆⲆ: "img/day-level30.png",
        ᐃⵠⵠΔⲆⲆⵠ: "img/night-level30.png",
        ΔⵠⲆᐃⵠΔⲆ: "img/day-level35.png",
        ⵠΔⲆⲆΔⵠΔ: "img/night-level35.png",
        ⲆᐃΔⲆⵠᐃⵠ: "img/day-level40.png",
        ⲆⲆⲆᐃⲆⲆⲆ: "img/night-level40.png",
        ⵠᐃⲆᐃⵠᐃᐃ: "img/day-level45.png",
        ⲆⵠΔᐃΔⲆΔ: "img/night-level45.png",
        ⵠⵠΔΔⲆᐃᐃ: "img/day-level50.png",
        ΔΔΔΔᐃⵠᐃ: "img/night-level50.png",
        ΔᐃᐃᐃⲆΔΔ: "img/day-level55.png",
        ΔΔⲆⲆΔΔⵠ: "img/night-level55.png",
        ΔⵠⲆⵠᐃⵠᐃ: "img/day-level60.png",
        ⲆΔΔⲆᐃⵠⲆ: "img/night-level60.png",
        ⵠᐃⲆⲆⵠⵠⲆ: "img/day-skin-devast0.png",
        ΔⲆᐃᐃⲆⲆⵠ: "img/night-skin-devast0.png",
        ᐃΔⵠᐃⲆᐃΔ: "img/day-hand-devaster.png",
        ⲆⲆⲆⲆΔᐃⵠ: "img/night-hand-devaster.png",
        ⵠⲆⵠⵠⵠⵠⲆ: "img/day-skin-star0.png",
        ⲆⲆⵠⲆⲆᐃⵠ: "img/night-skin-star0.png",
        ᐃᐃᐃⵠᐃᐃⲆ: "img/day-hand-star0.png",
        ᐃΔⲆⲆΔΔᐃ: "img/night-hand-star0.png",
        ⵠᐃⲆΔⵠΔΔ: "img/day-vampire.png",
        ⵠⲆᐃⲆΔⵠⲆ: "img/night-vampire.png",
        ΔⵠᐃᐃΔⲆⵠ: "img/day-hand-vampire.png",
        ⲆⵠΔⵠᐃⲆⲆ: "img/night-hand-vampire.png",
        ᐃΔⵠⲆΔΔΔ: "img/day-zombie.png",
        ΔΔᐃⲆⲆⲆΔ: "img/night-zombie.png",
        ᐃΔᐃᐃⲆΔᐃ: "img/day-hand-zombie.png",
        ᐃΔΔⲆᐃⲆⵠ: "img/night-hand-zombie.png",
        ΔΔⲆᐃΔΔᐃ: "img/day-skin113.png",
        ⲆᐃΔⲆΔᐃᐃ: "img/night-skin113.png",
        ᐃⵠⲆᐃⵠΔΔ: "img/day-hand-skin113.png",
        ⲆⵠⲆⵠᐃⵠΔ: "img/night-hand-skin113.png",
        ⲆΔⲆᐃΔΔᐃ: "img/day-skin0.png",
        ᐃⵠⵠᐃⵠΔᐃ: "img/night-skin0.png",
        ΔΔⲆᐃⵠΔΔ: "img/day-skin1.png",
        ᐃΔᐃⵠⵠⵠⲆ: "img/night-skin1.png",
        ᐃⲆⵠⲆⵠᐃⵠ: "img/day-skin2.png",
        ⵠⵠᐃΔᐃⲆΔ: "img/night-skin2.png",
        ΔⲆΔⲆᐃⵠᐃ: "img/day-skin3.png",
        ⲆΔⵠΔⵠⵠⲆ: "img/night-skin3.png",
        ⲆⲆⵠⵠΔⲆⵠ: "img/day-skin4.png",
        ᐃΔᐃΔⵠⵠΔ: "img/night-skin4.png",
        ⵠΔⵠⲆᐃΔⲆ: "img/day-skin5.png",
        ΔⵠΔᐃᐃⲆΔ: "img/night-skin5.png",
        ᐃⲆⵠⲆΔΔⲆ: "img/day-skin6.png",
        ⵠⲆΔⲆⵠⲆⲆ: "img/night-skin6.png",
        ΔⲆⵠᐃᐃⲆᐃ: "img/day-skin7.png",
        ⲆⵠΔᐃⵠᐃᐃ: "img/night-skin7.png",
        ⵠⲆⵠᐃⵠΔΔ: "img/day-skin8.png",
        ⵠⵠᐃᐃⵠᐃⵠ: "img/night-skin8.png",
        ΔΔᐃΔΔⵠⲆ: "img/day-skin9.png",
        ⲆⲆΔᐃᐃΔΔ: "img/night-skin9.png",
        ΔΔᐃⵠᐃᐃⲆ: "img/day-skin10.png",
        ⲆᐃΔᐃⵠⲆⵠ: "img/night-skin10.png",
        ΔᐃⵠⵠⵠΔΔ: "img/day-skin11.png",
        ⵠⲆⵠⵠⲆᐃᐃ: "img/night-skin11.png",
        ΔⵠΔⵠᐃΔⲆ: "img/day-skin12.png",
        ⵠΔᐃᐃΔΔΔ: "img/night-skin12.png",
        ⲆⲆⵠᐃΔΔⵠ: "img/day-skin13.png",
        ⲆⵠⲆᐃΔΔᐃ: "img/night-skin13.png",
        ᐃᐃΔΔᐃⲆᐃ: "img/day-skin14.png",
        ΔⵠⲆⵠΔⵠᐃ: "img/night-skin14.png",
        ⲆΔⵠⵠΔⵠᐃ: "img/day-skin15.png",
        ⵠⲆⲆⵠⵠⲆⵠ: "img/night-skin15.png",
        ᐃΔΔΔⲆⲆᐃ: "img/day-skin16.png",
        ⵠΔᐃⲆᐃⵠΔ: "img/night-skin16.png",
        ⵠⲆⲆⲆᐃΔⲆ: "img/day-skin17.png",
        ΔⵠⲆⲆΔᐃⲆ: "img/night-skin17.png",
        ⵠⲆᐃⵠⵠⵠⲆ: "img/day-skin18.png",
        ⵠⵠⵠⵠΔⲆⲆ: "img/night-skin18.png",
        ⵠⲆⵠⵠⵠΔⲆ: "img/day-skin19.png",
        ⲆΔⲆᐃᐃᐃⵠ: "img/night-skin19.png",
        ⲆΔΔⲆᐃΔⲆ: "img/day-skin20.png",
        ⲆⲆⲆΔᐃⵠⵠ: "img/night-skin20.png",
        ⵠⵠΔᐃⲆᐃΔ: "img/day-skin21.png",
        ⲆⵠⲆᐃΔᐃΔ: "img/night-skin21.png",
        ΔⲆᐃΔΔⵠΔ: "img/day-skin22.png",
        ΔⵠΔᐃⵠᐃΔ: "img/night-skin22.png",
        ᐃⲆⲆᐃⲆⵠᐃ: "img/day-skin23.png",
        ΔⵠⲆⵠΔⵠⲆ: "img/night-skin23.png",
        ΔⵠᐃⵠⲆⵠᐃ: "img/day-skin24.png",
        ΔᐃⲆⵠΔᐃᐃ: "img/night-skin24.png",
        ⲆΔⵠᐃⲆⵠΔ: "img/day-skin25.png",
        ⵠⵠⵠΔⵠΔⵠ: "img/night-skin25.png",
        ⵠΔⵠⵠⵠᐃᐃ: "img/day-skin26.png",
        ᐃΔⵠᐃⲆⵠⵠ: "img/night-skin26.png",
        ᐃⲆΔᐃⲆᐃⵠ: "img/day-skin27.png",
        ᐃΔⵠⵠⲆⲆΔ: "img/night-skin27.png",
        ⵠⵠⲆⵠᐃᐃⲆ: "img/day-skin28.png",
        ⲆⵠΔⵠⲆⵠᐃ: "img/night-skin28.png",
        ⲆᐃⵠᐃΔⲆᐃ: "img/day-skin29.png",
        ᐃᐃⲆⲆⵠⲆⵠ: "img/night-skin29.png",
        ⵠⵠⵠⵠΔⵠⲆ: "img/day-skin30.png",
        ΔᐃⲆΔΔΔⲆ: "img/night-skin30.png",
        ⵠⵠᐃⵠᐃᐃⲆ: "img/day-skin31.png",
        ΔⲆⲆⲆⵠⵠᐃ: "img/night-skin31.png",
        ⲆⲆᐃⵠⵠⲆⲆ: "img/day-skin32.png",
        ΔⲆᐃΔᐃᐃⲆ: "img/night-skin32.png",
        ⵠⲆᐃⵠⵠΔⲆ: "img/day-skin33.png",
        ⲆΔⲆΔΔᐃⵠ: "img/night-skin33.png",
        ⵠᐃᐃⵠΔΔᐃ: "img/day-skin34.png",
        ⵠᐃᐃⵠⲆᐃΔ: "img/night-skin34.png",
        ⲆⵠⲆᐃⲆⲆⲆ: "img/day-skin35.png",
        ⲆⵠΔⵠᐃⲆΔ: "img/night-skin35.png",
        ⵠΔᐃᐃΔᐃΔ: "img/day-skin36.png",
        ΔΔⵠⵠⵠⵠᐃ: "img/night-skin36.png",
        ΔᐃΔΔᐃᐃᐃ: "img/day-skin37.png",
        ⵠⲆᐃΔΔΔⲆ: "img/night-skin37.png",
        ᐃΔⲆⵠΔΔΔ: "img/day-skin38.png",
        ⲆⵠΔᐃΔⵠⲆ: "img/night-skin38.png",
        ⲆⲆⲆᐃᐃΔⵠ: "img/day-skin39.png",
        ᐃⵠⵠᐃⵠⲆⲆ: "img/night-skin39.png",
        ᐃΔΔᐃⲆⵠⲆ: "img/day-skin40.png",
        ᐃᐃⲆⵠᐃΔᐃ: "img/night-skin40.png",
        ⲆⵠⵠΔᐃⵠᐃ: "img/day-skin41.png",
        ⲆⵠⵠᐃⵠⲆᐃ: "img/night-skin41.png",
        ⲆⵠⵠⲆΔΔᐃ: "img/day-skin42.png",
        ΔⵠⵠⵠᐃⲆⵠ: "img/night-skin42.png",
        ⵠᐃᐃᐃᐃᐃⵠ: "img/day-skin43.png",
        ⵠⲆᐃΔⲆΔⵠ: "img/night-skin43.png",
        ⲆⵠⲆⵠΔᐃΔ: "img/day-skin44.png",
        ⲆⵠᐃΔᐃᐃⵠ: "img/night-skin44.png",
        ⲆⲆⲆⲆᐃⲆⵠ: "img/day-skin45.png",
        ⵠᐃΔⵠᐃⵠΔ: "img/night-skin45.png",
        ⲆᐃⵠⵠᐃⲆΔ: "img/day-skin46.png",
        ΔᐃⲆⵠΔΔᐃ: "img/night-skin46.png",
        ΔⲆᐃⲆⵠΔⵠ: "img/day-skin47.png",
        ᐃⵠⵠⵠⵠᐃᐃ: "img/night-skin47.png",
        ⲆⲆᐃⵠⲆⵠᐃ: "img/day-skin48.png",
        ᐃⵠΔⵠⲆᐃⵠ: "img/night-skin48.png",
        ᐃΔΔⵠⲆⵠⲆ: "img/day-skin49.png",
        ᐃΔⲆΔⲆⲆᐃ: "img/night-skin49.png",
        ⵠⲆΔⲆᐃΔΔ: "img/day-skin50.png",
        ⲆⵠⲆᐃΔᐃᐃ: "img/night-skin50.png",
        ΔⲆⲆᐃⵠⲆΔ: "img/day-skin51.png",
        ⲆΔⲆⵠⲆΔⲆ: "img/night-skin51.png",
        ⲆᐃΔⵠᐃΔⵠ: "img/day-skin52.png",
        ΔΔⲆᐃΔⲆᐃ: "img/night-skin52.png",
        ᐃΔⵠⲆᐃⵠΔ: "img/day-skin53.png",
        ⵠⵠⵠⲆⲆⵠⲆ: "img/night-skin53.png",
        ΔⲆΔⵠᐃⲆⵠ: "img/day-skin54.png",
        ᐃᐃⲆⵠⲆᐃⵠ: "img/night-skin54.png",
        ᐃⵠᐃΔΔᐃⲆ: "img/day-skin55.png",
        ⲆⵠΔⵠΔᐃⲆ: "img/night-skin55.png",
        ᐃᐃΔᐃⲆⵠⲆ: "img/day-skin56.png",
        ⲆⲆⲆⲆⵠⵠΔ: "img/night-skin56.png",
        ⲆΔΔΔΔΔⲆ: "img/day-skin57.png",
        ᐃⵠⵠⲆΔⵠⲆ: "img/night-skin57.png",
        ΔⲆΔΔᐃᐃᐃ: "img/day-skin58.png",
        ΔΔⲆⲆⵠⲆᐃ: "img/night-skin58.png",
        ⲆⲆΔⵠⵠΔΔ: "img/day-skin59.png",
        ⵠⲆⲆΔⵠⲆΔ: "img/night-skin59.png",
        ᐃᐃΔᐃᐃⲆⵠ: "img/day-skin60.png",
        ⵠΔⲆΔΔΔΔ: "img/night-skin60.png",
        ΔⵠᐃⲆᐃⵠⵠ: "img/day-skin61.png",
        ᐃᐃᐃᐃᐃᐃΔ: "img/night-skin61.png",
        ⲆᐃΔⲆⲆᐃⲆ: "img/day-skin62.png",
        ΔΔΔⵠⲆⲆⲆ: "img/night-skin62.png",
        ⵠᐃΔᐃᐃΔⲆ: "img/day-skin63.png",
        ΔᐃΔⲆⵠᐃⲆ: "img/night-skin63.png",
        ⵠΔⲆⲆΔⲆᐃ: "img/day-skin64.png",
        ΔΔⵠΔⵠΔⲆ: "img/night-skin64.png",
        ᐃⲆⵠᐃΔⲆΔ: "img/day-skin65.png",
        ⵠⲆⵠⲆΔΔΔ: "img/night-skin65.png",
        ⵠⲆᐃᐃᐃΔⵠ: "img/day-skin66.png",
        ΔⲆⵠⵠᐃΔΔ: "img/night-skin66.png",
        ⵠᐃⲆⵠΔⵠΔ: "img/day-skin67.png",
        ᐃΔⵠΔⲆⵠΔ: "img/night-skin67.png",
        ⵠᐃⵠᐃⵠΔⵠ: "img/day-skin68.png",
        ⵠⵠⵠΔⲆᐃΔ: "img/night-skin68.png",
        ᐃᐃᐃⲆΔⵠⲆ: "img/day-skin69.png",
        ᐃΔⵠⲆⲆᐃⵠ: "img/night-skin69.png",
        ΔⵠⲆΔⲆᐃΔ: "img/day-skin70.png",
        ΔΔᐃᐃⵠᐃΔ: "img/night-skin70.png",
        ⲆⲆⲆΔⵠΔⵠ: "img/day-skin71.png",
        ΔⲆⵠⵠᐃᐃΔ: "img/night-skin71.png",
        ⵠᐃΔⲆΔⲆΔ: "img/day-skin72.png",
        ⲆᐃⵠⵠⲆⵠⲆ: "img/night-skin72.png",
        ⵠⲆⵠⵠⲆᐃΔ: "img/day-skin73.png",
        ΔⲆΔΔⵠΔⲆ: "img/night-skin73.png",
        ᐃΔᐃΔᐃⲆΔ: "img/day-skin74.png",
        ⲆΔᐃⲆΔΔᐃ: "img/night-skin74.png",
        ⵠⲆᐃΔⵠⵠⲆ: "img/day-skin75.png",
        ᐃΔᐃᐃⵠⵠⵠ: "img/night-skin75.png",
        ⵠᐃᐃΔⵠᐃⵠ: "img/day-skin76.png",
        ⵠⲆΔᐃᐃⵠΔ: "img/night-skin76.png",
        ᐃᐃⲆⵠⵠⵠΔ: "img/day-skin77.png",
        ⵠⲆⵠⲆⲆᐃΔ: "img/night-skin77.png",
        ᐃΔᐃΔⵠᐃⵠ: "img/day-skin78.png",
        ᐃⲆᐃⵠΔΔΔ: "img/night-skin78.png",
        ΔΔΔᐃᐃⵠᐃ: "img/day-skin79.png",
        ᐃᐃⲆΔⵠⵠⵠ: "img/night-skin79.png",
        ⲆᐃⲆⲆⵠⲆΔ: "img/day-skin80.png",
        ⵠΔΔⵠᐃⵠᐃ: "img/night-skin80.png",
        ΔⲆΔΔᐃⵠⵠ: "img/day-skin81.png",
        ᐃⲆⵠⵠΔⵠΔ: "img/night-skin81.png",
        ᐃᐃᐃⲆⲆΔⵠ: "img/day-skin82.png",
        ⵠⲆᐃΔⲆΔΔ: "img/night-skin82.png",
        ⵠᐃⵠⵠⲆⲆⲆ: "img/day-skin83.png",
        ⲆΔⵠᐃⵠⲆΔ: "img/night-skin83.png",
        ⵠᐃⵠΔⵠΔᐃ: "img/day-skin84.png",
        ⲆᐃᐃΔΔΔΔ: "img/night-skin84.png",
        ᐃⲆΔᐃΔⲆΔ: "img/day-skin85.png",
        ⵠᐃΔⲆΔⲆⵠ: "img/night-skin85.png",
        ⵠΔⲆⵠᐃΔⵠ: "img/day-skin86.png",
        ᐃΔⲆΔⵠΔᐃ: "img/night-skin86.png",
        ⲆΔΔᐃΔᐃΔ: "img/day-skin87.png",
        ᐃⵠᐃⲆⲆᐃΔ: "img/night-skin87.png",
        ᐃⲆⲆΔΔⵠⲆ: "img/day-skin88.png",
        ΔΔᐃⲆᐃⲆᐃ: "img/night-skin88.png",
        ᐃᐃⲆⲆᐃᐃᐃ: "img/day-skin89.png",
        ⲆⵠᐃᐃⲆᐃⲆ: "img/night-skin89.png",
        ⵠⵠⲆⲆΔⵠⵠ: "img/day-skin90.png",
        ⵠΔᐃⲆⵠᐃΔ: "img/night-skin90.png",
        ⵠⲆΔᐃᐃⵠⲆ: "img/day-skin91.png",
        ᐃⵠᐃⵠⵠᐃⲆ: "img/night-skin91.png",
        ⲆⵠᐃᐃΔᐃⵠ: "img/day-skin92.png",
        ⲆᐃΔⲆΔⲆⵠ: "img/night-skin92.png",
        ⲆᐃᐃΔΔᐃᐃ: "img/day-skin93.png",
        ⵠΔΔⵠⵠᐃΔ: "img/night-skin93.png",
        ⵠΔⲆΔᐃⲆⲆ: "img/day-skin94.png",
        ΔⵠᐃⵠΔᐃⵠ: "img/night-skin94.png",
        ᐃⲆΔᐃᐃⲆᐃ: "img/day-skin95.png",
        ᐃᐃⵠⲆⲆⲆᐃ: "img/night-skin95.png",
        ⵠΔΔΔⲆⵠΔ: "img/day-skin96.png",
        ᐃⵠⵠᐃⲆⵠᐃ: "img/night-skin96.png",
        ΔⵠᐃⵠΔⵠⲆ: "img/day-skin97.png",
        ⵠⲆᐃⲆⲆΔᐃ: "img/night-skin97.png",
        ⲆᐃⵠⵠⵠΔᐃ: "img/day-skin98.png",
        ⲆⲆⲆΔⵠᐃⲆ: "img/night-skin98.png",
        ᐃⵠⵠᐃΔΔⵠ: "img/day-skin99.png",
        ΔⲆΔⲆⲆΔⵠ: "img/night-skin99.png",
        ⵠⲆⲆᐃⲆⲆⲆ: "img/day-skin100.png",
        ΔⲆⵠᐃⲆΔΔ: "img/night-skin100.png",
        ⲆΔⲆᐃΔⲆⲆ: "img/day-skin101.png",
        ᐃΔⵠΔⵠⲆΔ: "img/night-skin101.png",
        ᐃⲆΔⲆⵠⵠᐃ: "img/day-skin102.png",
        ⲆΔⲆΔᐃᐃΔ: "img/night-skin102.png",
        ⲆⵠⵠᐃΔᐃΔ: "img/day-skin103.png",
        ΔΔΔΔᐃΔΔ: "img/night-skin103.png",
        ⲆᐃᐃΔᐃⵠΔ: "img/day-skin104.png",
        ᐃΔΔⵠΔΔᐃ: "img/night-skin104.png",
        ᐃΔⵠⲆᐃΔⲆ: "img/day-skin105.png",
        ⵠⲆᐃΔⵠⲆΔ: "img/night-skin105.png",
        ⵠⵠⲆⲆᐃⲆᐃ: "img/day-skin106.png",
        ΔΔᐃᐃᐃᐃⵠ: "img/night-skin106.png",
        ⵠⵠⲆⵠᐃⲆᐃ: "img/day-skin107.png",
        ᐃⵠⲆᐃⲆΔᐃ: "img/night-skin107.png",
        ⲆΔΔⲆΔᐃⵠ: "img/day-skin108.png",
        ᐃⲆΔᐃΔΔᐃ: "img/night-skin108.png",
        ᐃⲆᐃΔΔΔΔ: "img/day-skin109.png",
        ⲆᐃᐃⲆᐃΔⲆ: "img/night-skin109.png",
        ΔᐃⵠΔᐃΔⲆ: "img/day-skin110.png",
        ᐃⵠᐃΔⲆΔᐃ: "img/night-skin110.png",
        ⲆⵠᐃᐃᐃᐃⲆ: "img/day-skin111.png",
        ⲆΔΔᐃΔΔᐃ: "img/night-skin111.png",
        ⲆᐃᐃⲆⲆⵠᐃ: "img/day-skin112.png",
        ΔⲆⵠΔⵠᐃΔ: "img/night-skin112.png",
        ᐃᐃᐃⵠⵠⵠᐃⲆⵠ: "img/day-skin113.png",
        ΔⲆⲆᐃΔΔⲆⲆΔ: "img/night-skin113.png",
        ⲆΔᐃⵠⵠⲆΔ: "img/day-skin114.png",
        ΔⲆⲆⵠⵠⲆᐃ: "img/night-skin114.png",
        ΔᐃⵠⵠᐃΔⵠ: "img/day-skin115.png",
        ⵠⲆΔΔᐃⵠⵠ: "img/night-skin115.png",
        ⲆⵠⲆᐃⵠΔΔ: "img/day-skin116.png",
        ⲆΔᐃⵠⲆⵠΔ: "img/night-skin116.png",
        ⵠⲆⵠⵠⲆᐃⵠ: "img/day-skin117.png",
        ⲆΔⵠⵠΔⵠⵠ: "img/night-skin117.png",
        ᐃⲆⲆⵠᐃΔⲆ: "img/day-skin118.png",
        ⲆᐃᐃⲆΔΔᐃ: "img/night-skin118.png",
        ⲆΔᐃΔⲆᐃⲆ: "img/day-skin119.png",
        ⲆⵠⵠᐃΔⲆᐃ: "img/night-skin119.png",
        ΔⲆⵠΔⵠⵠᐃ: "img/day-skin120.png",
        ᐃΔΔΔΔΔΔ: "img/night-skin120.png",
        ⵠΔⲆΔΔᐃⲆ: "img/day-skin121.png",
        ⲆΔⲆⵠⲆᐃᐃ: "img/night-skin121.png",
        ΔᐃᐃⵠΔΔⲆ: "img/day-skin122.png",
        ⲆⲆⲆⵠⲆᐃᐃ: "img/night-skin122.png",
        ⵠΔⵠⵠᐃᐃᐃ: "img/day-skin123.png",
        ΔΔⲆⵠΔⲆΔ: "img/night-skin123.png",
        ⵠΔⲆⵠⲆᐃⲆ: "img/day-skin124.png",
        ⵠΔΔⵠΔⵠⲆ: "img/night-skin124.png",
        ΔⵠⲆⲆⵠⵠΔ: "img/day-skin125.png",
        ΔᐃΔᐃΔⵠᐃ: "img/night-skin125.png",
        ⵠᐃᐃΔⲆᐃᐃ: "img/day-skin126.png",
        ΔⵠΔⲆⵠⵠⲆ: "img/night-skin126.png",
        ⲆΔΔᐃᐃᐃⵠ: "img/day-skin127.png",
        ᐃⲆΔᐃⵠⵠᐃ: "img/night-skin127.png",
        ⲆⵠⵠⲆⲆᐃⲆ: "img/day-skin128.png",
        ⲆⲆⲆⲆⵠᐃΔ: "img/night-skin128.png",
        ⵠΔⲆⵠᐃⵠΔ: "img/day-skin129.png",
        ᐃᐃⵠᐃΔⵠΔ: "img/night-skin129.png",
        ᐃⵠⲆΔᐃⲆⲆ: "img/day-skin130-1.png",
        ⲆⵠⵠⵠᐃᐃΔ: "img/night-skin130-1.png",
        ⲆᐃⲆⵠΔᐃⵠ: "img/day-skin131.png",
        ⲆᐃΔⵠΔΔⲆ: "img/night-skin131.png",
        ΔΔᐃⲆⵠᐃᐃ: "img/day-skin132.png",
        ⲆⵠΔⵠⲆΔΔ: "img/night-skin132.png",
        ΔⲆᐃᐃⵠⲆᐃ: "img/day-skin133.png",
        ⲆᐃᐃΔⲆΔΔ: "img/night-skin133.png",
        ⲆᐃⲆΔⲆᐃⲆ: "img/day-skin134.png",
        ᐃⲆⵠⲆΔᐃᐃ: "img/night-skin134.png",
        ⵠⵠᐃΔⲆᐃⲆ: "img/day-skin135.png",
        ⵠᐃⲆⵠⲆⲆᐃ: "img/night-skin135.png",
        ⵠΔⲆⲆⲆⵠⲆ: "img/day-skin136.png",
        ᐃᐃⵠᐃⵠⵠⲆ: "img/night-skin136.png",
        ΔᐃⵠΔᐃⲆᐃ: "img/day-skin137.png",
        ᐃⲆΔⲆⲆⲆᐃ: "img/night-skin137.png",
        ⵠⲆΔΔᐃⲆΔ: "img/day-skin138.png",
        ΔⲆⲆⵠᐃᐃΔ: "img/night-skin138.png",
        ⲆⲆΔⲆΔᐃⵠ: "img/day-skin139.png",
        ⲆⲆⲆΔⲆⲆΔ: "img/night-skin139.png",
        ΔᐃᐃⵠⲆΔⲆ: "img/day-skin140.png",
        ΔΔΔΔⲆⵠⵠ: "img/night-skin140.png",
        ΔⲆᐃⵠⲆᐃΔ: "img/day-skin141.png",
        ⵠΔΔᐃⵠⲆᐃ: "img/night-skin141.png",
        ΔⵠΔⲆᐃᐃⲆ: "img/day-skin142.png",
        ΔᐃⲆⵠΔⲆⵠ: "img/night-skin142.png",
        ΔⲆᐃᐃⵠΔⵠ: "img/day-skin143.png",
        ⲆΔⵠᐃΔⲆΔ: "img/night-skin143.png",
        ⵠᐃⲆΔⲆⵠᐃ: "img/day-skin144.png",
        ⵠΔⵠᐃᐃⲆᐃ: "img/night-skin144.png",
        ΔΔΔⲆⵠⵠᐃ: "img/day-skin145.png",
        ⲆⲆᐃΔΔᐃⲆ: "img/night-skin145.png",
        ⲆᐃᐃⵠⲆⲆⵠ: "img/day-skin146.png",
        ΔᐃΔΔᐃⵠⲆ: "img/night-skin146.png",
        ⵠⲆᐃᐃⲆΔⵠ: "img/day-skin147.png",
        ᐃᐃⵠᐃᐃⵠΔ: "img/night-skin147.png",
        ⲆΔⵠΔⵠᐃΔ: "img/day-skin148.png",
        ⲆⵠᐃΔⵠΔⲆ: "img/night-skin148.png",
        ⵠΔΔⵠᐃⲆᐃ: "img/day-skin149.png",
        ᐃᐃΔᐃΔΔⵠ: "img/night-skin149.png",
        ⵠΔᐃΔᐃΔΔ: "img/day-skin150.png",
        ⲆⵠⲆⲆⲆΔⵠ: "img/night-skin150.png",
        ⵠⵠⵠᐃⲆⵠΔ: "img/day-skin151.png",
        ᐃⵠᐃⲆΔΔΔ: "img/night-skin151.png",
        ⲆΔⵠⲆⵠᐃΔ: "img/day-skin152.png",
        ᐃᐃⲆᐃⵠᐃⲆ: "img/night-skin152.png",
        ⲆⲆⵠⵠᐃⲆⵠ: "img/day-skin153.png",
        ᐃⲆΔΔⲆΔΔ: "img/night-skin153.png",
        ΔⲆⵠΔⵠΔᐃ: "img/day-skin154.png",
        ᐃⵠᐃᐃⵠᐃᐃ: "img/night-skin154.png",
        ⲆᐃⵠⵠΔΔⵠ: "img/day-skin155.png",
        ᐃⲆⲆⵠⲆⲆᐃ: "img/night-skin155.png",
        ΔⲆⵠᐃᐃᐃΔ: "img/day-skin156.png",
        ᐃᐃΔⵠⲆΔⵠ: "img/night-skin156.png",
        ΔⵠⲆᐃⲆᐃⲆ: "img/day-skin157.png",
        ⵠⲆⵠⵠⲆⲆᐃ: "img/night-skin157.png",
        ᐃΔⲆⲆΔΔⲆ: "img/day-skin158.png",
        ⲆⲆᐃⵠΔᐃⲆ: "img/night-skin158.png",
        ⲆᐃⲆⲆⵠⲆⲆ: "img/day-skin159.png",
        ⵠᐃⲆᐃⵠᐃⵠ: "img/night-skin159.png",
        ⲆᐃⲆᐃΔᐃᐃ: "img/day-skin160.png",
        ΔⵠΔⵠⲆⵠⲆ: "img/night-skin160.png",
        ⲆᐃΔΔᐃⵠᐃ: "img/day-skin161.png",
        ΔⵠⵠⵠΔⵠᐃ: "img/night-skin161.png",
        ⲆΔΔΔᐃᐃⲆ: "img/day-skin162.png",
        ᐃⲆΔᐃⵠⵠΔ: "img/night-skin162.png",
        ⲆΔⵠᐃΔᐃⵠ: "img/day-skin163.png",
        ⵠⲆⵠᐃⵠᐃⲆ: "img/night-skin163.png",
        ⲆᐃⲆᐃⲆⵠⲆ: "img/day-skin164.png",
        ᐃⵠᐃᐃΔⲆΔ: "img/night-skin164.png",
        ⵠΔΔⲆᐃⲆᐃ: "img/day-skin165.png",
        ΔⵠΔⵠᐃⵠΔ: "img/night-skin165.png",
        ΔⵠⲆΔⵠⵠⲆ: "img/day-skin166.png",
        ⲆⵠᐃⵠΔᐃΔ: "img/night-skin166.png",
        ΔⵠⵠΔΔⵠᐃ: "img/day-skin167.png",
        ΔⲆΔᐃⵠⵠᐃ: "img/night-skin167.png",
        ᐃΔⲆᐃⲆⲆΔ: "img/day-skin168.png",
        ⵠΔΔⵠⲆᐃΔ: "img/night-skin168.png",
        ΔᐃᐃᐃⲆⵠⲆ: "img/day-skin169.png",
        ᐃⲆⵠⵠΔΔᐃ: "img/night-skin169.png",
        ᐃⵠΔⲆΔⵠⵠ: "img/day-skin170.png",
        ⵠⵠΔⵠᐃᐃⵠ: "img/night-skin170.png",
        ᐃⲆⵠⲆⵠᐃᐃ: "img/day-skin171.png",
        ᐃⵠⵠⲆⵠⲆᐃ: "img/night-skin171.png",
        ⲆⵠⲆⲆᐃᐃⵠ: "img/day-skin172.png",
        ⲆⵠᐃΔΔᐃᐃ: "img/night-skin172.png",
        ᐃⲆΔⲆⲆᐃⵠ: "img/day-skin173.png",
        ᐃᐃⲆᐃⲆᐃⵠ: "img/night-skin173.png",
        ⲆᐃⲆᐃΔΔΔ: "img/day-skin174.png",
        ᐃⲆⲆⲆᐃⲆᐃ: "img/night-skin174.png",
        ᐃⵠⵠⲆⵠⲆⲆ: "img/day-skin175.png",
        ΔΔᐃⲆᐃΔΔ: "img/night-skin175.png",
        ΔⲆⲆΔΔΔᐃ: "img/day-skin176.png",
        ᐃΔⲆᐃᐃΔᐃ: "img/night-skin176.png",
        ᐃⲆᐃⵠΔⲆΔ: "img/day-skin177.png",
        ⵠΔⲆⵠⲆⲆΔ: "img/night-skin177.png",
        ⵠᐃⵠⲆᐃⲆΔ: "img/day-skin178.png",
        ᐃΔΔⲆᐃⲆⲆ: "img/night-skin178.png",
        ⲆⵠⲆⵠᐃⲆⲆ: "img/day-skin179.png",
        ⵠᐃⲆΔⵠᐃᐃ: "img/night-skin179.png",
        ᐃΔⲆⵠᐃΔⲆ: "img/day-skin180.png",
        ⵠᐃⵠⵠΔᐃⲆ: "img/night-skin180.png",
        ΔΔᐃⵠΔⵠᐃ: "img/day-skin181.png",
        ᐃΔⵠᐃⵠΔΔ: "img/night-skin181.png",
        ΔΔⵠΔᐃΔΔ: "img/day-skin182.png",
        ᐃᐃⵠᐃΔⲆΔ: "img/night-skin182.png",
        ⵠᐃᐃᐃᐃᐃΔ: "img/day-skin183.png",
        ⲆᐃⲆⲆⲆᐃⲆ: "img/night-skin183.png",
        ΔⲆΔⵠᐃⵠⵠ: "img/day-skin184.png",
        ⵠᐃⲆⵠⲆⵠⵠ: "img/night-skin184.png",
        ΔΔⲆᐃⲆⲆΔ: "img/day-skin185.png",
        ᐃⵠᐃⵠΔⵠΔ: "img/night-skin185.png",
        ᐃΔⵠΔᐃⲆⲆ: "img/day-skin186.png",
        ⲆⲆⵠᐃΔᐃᐃ: "img/night-skin186.png",
        ⵠⵠΔᐃΔⲆⲆ: "img/day-skin187.png",
        ⵠᐃᐃΔⲆⲆⲆ: "img/night-skin187.png",
        ⵠⲆⲆᐃΔⵠΔ: "img/day-skin188.png",
        ᐃⲆᐃⲆⲆΔΔ: "img/night-skin188.png",
        Δⵠᐃᐃⵠⵠᐃ: "img/day-skin189.png",
        ⲆⲆⲆΔⵠⵠⲆ: "img/night-skin189.png",
        ᐃⲆΔⵠᐃᐃⵠ: "img/day-skin190.png",
        ΔⲆⵠᐃᐃⲆΔ: "img/night-skin190.png",
        ᐃⵠΔⵠΔⲆⲆ: "img/day-skin191.png",
        ⲆⵠⵠᐃⲆⵠΔ: "img/night-skin191.png",
        ⵠᐃⲆⵠΔᐃΔ: "img/day-skin192.png",
        ΔᐃΔᐃᐃΔⵠ: "img/night-skin192.png",
        ᐃᐃΔⵠⲆΔᐃ: "img/day-skin193.png",
        ⲆᐃⵠⲆᐃⵠΔ: "img/night-skin193.png",
        ᐃⲆⲆΔᐃΔᐃ: "img/day-skin194.png",
        ⲆᐃΔⵠⵠⲆᐃ: "img/night-skin194.png",
        ⵠᐃⲆⵠᐃΔᐃ: "img/day-skin195.png",
        ΔΔⲆⵠⵠⲆᐃ: "img/night-skin195.png",
        ΔⲆⵠΔΔⵠⲆ: "img/day-skin196.png",
        ΔⵠⵠⲆⵠⲆⲆ: "img/night-skin196.png",
        ΔⵠⵠᐃⲆᐃⲆ: "img/day-skin197.png",
        ⵠΔⵠⲆⵠᐃⵠ: "img/night-skin197.png",
        ⲆⵠᐃᐃΔᐃᐃ: "img/day-skin198.png",
        ᐃᐃⲆⵠⲆΔⲆ: "img/night-skin198.png",
        ᐃᐃⲆΔⲆⵠΔ: "img/day-skin199.png",
        ⲆΔΔⲆᐃᐃⵠ: "img/night-skin199.png",
        ⲆᐃΔⵠⲆⵠΔ: "img/day-skin200.png",
        ᐃⲆᐃΔᐃΔⵠ: "img/night-skin200.png",
        ΔΔⲆᐃΔΔΔ: "img/day-skin201.png",
        ⵠᐃᐃⵠⵠΔΔ: "img/night-skin201.png",
        ΔⵠᐃΔⵠⲆΔ: "img/day-skin202.png",
        ΔⲆⲆᐃᐃⲆΔ: "img/night-skin202.png",
        ⲆᐃⵠⲆⲆΔⲆ: "img/day-skin203.png",
        ᐃⵠᐃΔᐃⵠΔ: "img/night-skin203.png",
        ⲆⲆΔᐃⲆⵠⲆ: "img/day-skin204.png",
        ⲆᐃΔⵠⵠⵠⲆ: "img/night-skin204.png",
        ΔⲆⵠⵠⲆⵠⵠ: "img/day-skin205.png",
        ᐃⵠΔΔⲆⵠᐃ: "img/night-skin205.png",
        ⲆΔᐃᐃΔΔⵠ: "img/day-skin206.png",
        ᐃΔⲆⲆΔⲆⲆ: "img/night-skin206.png",
        ⲆΔⲆᐃⲆⲆΔ: "img/day-skin207.png",
        ⵠⵠΔΔᐃⲆⵠ: "img/night-skin207.png",
        ᐃΔΔⵠΔⲆⵠ: "img/day-skin208.png",
        ΔΔⲆⲆᐃⵠⵠ: "img/night-skin208.png",
        ⵠᐃᐃΔⲆΔᐃ: "img/day-skin209.png",
        ⲆᐃⲆΔᐃⵠΔ: "img/night-skin209.png",
        ΔᐃΔⵠⵠⲆΔ: "img/day-skin210.png",
        ᐃΔΔⲆⵠᐃⲆ: "img/night-skin210.png",
        ΔΔᐃᐃᐃΔᐃ: "img/day-skin211.png",
        ⲆⵠⲆⲆᐃᐃⲆ: "img/night-skin211.png",
        ⲆⵠⲆᐃᐃᐃᐃ: "img/day-skin212.png",
        ⵠⵠᐃΔΔΔΔ: "img/night-skin212.png",
        ⲆΔᐃⵠᐃΔⵠ: "img/day-hand-skin0.png",
        ⲆᐃΔⵠⵠᐃⵠ: "img/night-hand-skin0.png",
        ᐃⲆΔΔᐃⵠΔ: "img/day-hand-skin1.png",
        ΔⲆⵠᐃᐃⵠᐃ: "img/night-hand-skin1.png",
        ⵠⲆⲆⵠᐃⵠΔ: "img/day-hand-skin2.png",
        ΔⵠⲆⲆⲆⲆⵠ: "img/night-hand-skin2.png",
        ᐃⲆⲆΔⲆΔⲆ: "img/day-hand-skin3.png",
        ⲆΔⲆΔΔΔᐃ: "img/night-hand-skin3.png",
        ⲆᐃᐃᐃⵠⲆⲆ: "img/day-hand-skin4.png",
        ᐃΔⵠⲆΔⲆᐃ: "img/night-hand-skin4.png",
        ⲆⲆⵠΔΔⵠᐃ: "img/day-hand-skin5.png",
        ⵠⲆⲆⵠΔΔⵠ: "img/night-hand-skin5.png",
        ᐃⲆⵠᐃⲆᐃⲆ: "img/day-hand-skin6.png",
        ⵠᐃⵠΔΔⲆᐃⵠⵠ: "img/night-hand-skin6.png",
        ᐃⲆⲆΔⲆⵠΔ: "img/day-hand-skin6.png",
        ⵠⵠⵠⵠⲆⵠⵠ: "img/night-hand-skin6.png",
        ⲆᐃᐃΔᐃⵠⲆ: "img/day-hand-skin8.png",
        ΔᐃᐃᐃΔΔᐃ: "img/night-hand-skin8.png",
        ᐃΔⵠᐃⲆᐃⲆ: "img/day-hand-skin9.png",
        ΔⵠⲆⲆΔᐃᐃ: "img/night-hand-skin9.png",
        ⵠΔⲆⵠⲆᐃΔ: "img/day-hand-skin10.png",
        ⲆⵠΔᐃⵠⵠⵠ: "img/night-hand-skin10.png",
        ᐃᐃΔΔⲆᐃⲆ: "img/day-hand-skin11.png",
        ΔⵠⲆᐃΔⲆⵠ: "img/night-hand-skin11.png",
        ΔᐃⵠⵠΔΔⵠ: "img/day-hand-skin12.png",
        ᐃΔΔΔᐃⲆⲆ: "img/night-hand-skin12.png",
        ᐃΔⲆΔⲆⵠΔ: "img/day-hand-skin13.png",
        ᐃⵠΔΔⵠΔᐃ: "img/night-hand-skin13.png",
        ᐃΔⵠᐃΔⵠⵠ: "img/day-hand-skin14.png",
        ⲆᐃᐃⵠᐃⵠΔ: "img/night-hand-skin14.png",
        ⵠΔᐃⲆⵠᐃⲆ: "img/day-hand-skin15.png",
        ΔⵠᐃΔΔⲆΔ: "img/night-hand-skin15.png",
        ΔⲆⵠⵠΔᐃⵠ: "img/day-hand-skin16.png",
        ΔᐃΔⵠΔΔᐃ: "img/night-hand-skin16.png",
        ⵠⲆᐃᐃᐃⲆΔ: "img/day-hand-skin17.png",
        Ⲇⵠᐃᐃᐃᐃⵠ: "img/night-hand-skin17.png",
        ⵠΔᐃᐃⵠΔⲆ: "img/day-hand-skin18.png",
        ᐃᐃⵠᐃⵠⵠᐃ: "img/night-hand-skin18.png",
        ⵠⵠᐃΔΔⲆⵠ: "img/day-hand-skin19.png",
        ᐃΔⵠⵠΔⵠᐃ: "img/night-hand-skin19.png",
        ⵠΔΔⲆΔΔⵠ: "img/day-hand-skin20.png",
        ΔΔⲆᐃⵠⵠΔ: "img/night-hand-skin20.png",
        ΔⲆⵠⵠⵠⵠⲆ: "img/day-hand-skin21.png",
        ᐃΔΔⲆⵠΔΔ: "img/night-hand-skin21.png",
        ⲆⵠΔᐃⵠⵠΔ: "img/day-hand-skin22.png",
        ⲆⲆⵠⲆᐃᐃᐃ: "img/night-hand-skin22.png",
        ᐃⲆᐃⵠⵠⲆⵠ: "img/day-hand-skin23.png",
        ⲆᐃⵠᐃΔΔΔ: "img/night-hand-skin23.png",
        ΔⵠⵠΔᐃⵠⵠ: "img/day-hand-skin24.png",
        ⲆᐃΔⵠᐃⲆᐃ: "img/night-hand-skin24.png",
        ᐃΔΔⵠⲆⲆⲆ: "img/day-hand-skin25.png",
        ⵠⵠΔᐃⵠⲆᐃ: "img/night-hand-skin25.png",
        ΔⲆᐃᐃⵠⵠⵠ: "img/day-hand-skin26.png",
        ΔΔᐃⵠⵠᐃⲆ: "img/night-hand-skin26.png",
        ⲆⲆⲆᐃᐃᐃᐃ: "img/day-hand-skin27.png",
        ⲆⵠΔΔΔⵠᐃ: "img/night-hand-skin27.png",
        ᐃΔⵠⵠⲆᐃⲆ: "img/day-hand-skin28.png",
        ⵠᐃΔᐃᐃΔΔ: "img/night-hand-skin28.png",
        ΔⵠⵠΔⵠᐃⲆ: "img/day-hand-skin29.png",
        ⲆⲆᐃΔⵠᐃⵠ: "img/night-hand-skin29.png",
        ᐃΔᐃⲆᐃⵠΔ: "img/day-hand-skin30.png",
        ⲆⲆᐃΔⲆⵠΔ: "img/night-hand-skin30.png",
        ⵠⲆΔⵠΔⲆⵠ: "img/day-hand-skin31.png",
        ⵠⲆⲆⲆⲆΔⵠ: "img/night-hand-skin31.png",
        ᐃⵠⲆⵠⲆᐃᐃ: "img/day-hand-skin32.png",
        ΔΔⲆᐃⲆΔⵠ: "img/night-hand-skin32.png",
        ⵠᐃⲆⵠᐃᐃⲆ: "img/day-hand-skin33.png",
        ⲆⵠᐃⵠΔⲆⵠ: "img/night-hand-skin33.png",
        ᐃⲆΔⲆⲆⲆⵠ: "img/day-hand-skin34.png",
        ⲆⲆⵠᐃⲆⲆΔ: "img/night-hand-skin34.png",
        ⵠⵠⵠⲆΔᐃΔ: "img/day-hand-skin35.png",
        Δᐃᐃⵠᐃᐃⵠ: "img/night-hand-skin35.png",
        ΔΔᐃΔΔᐃⲆ: "img/day-hand-skin36.png",
        ᐃᐃᐃᐃΔΔΔ: "img/night-hand-skin36.png",
        ⵠΔᐃⵠᐃⵠΔ: "img/day-hand-skin37.png",
        ΔⲆᐃΔⵠⵠᐃ: "img/night-hand-skin37.png",
        ⵠᐃΔΔⵠⲆΔ: "img/day-hand-skin38.png",
        ᐃΔᐃᐃᐃⵠⲆ: "img/night-hand-skin38.png",
        ΔⵠⵠⲆⵠⲆΔ: "img/day-hand-skin39.png",
        ⲆⵠⲆᐃⵠⲆⵠ: "img/night-hand-skin39.png",
        ΔⲆΔᐃΔⲆᐃ: "img/day-hand-skin40.png",
        ⲆΔⲆⵠᐃⲆⵠ: "img/night-hand-skin40.png",
        ⲆⵠᐃΔⵠⲆᐃ: "img/day-hand-skin41.png",
        ΔΔᐃΔᐃΔⲆ: "img/night-hand-skin41.png",
        ⲆᐃⲆⵠⲆⲆⲆ: "img/day-hand-skin42.png",
        ⲆⵠΔⲆⲆᐃⲆ: "img/night-hand-skin42.png",
        ⵠᐃⲆΔⲆᐃΔ: "img/day-hand-skin43.png",
        ⲆⵠΔⲆᐃΔⲆ: "img/night-hand-skin43.png",
        ⲆⲆΔⲆⵠⲆⵠ: "img/day-hand-skin16.png",
        ⵠΔᐃⵠΔⲆⵠ: "img/night-hand-skin16.png",
        ⵠᐃᐃΔⲆⵠᐃ: "img/day-hand-skin45.png",
        ΔⵠⲆΔⲆⵠᐃ: "img/night-hand-skin45.png",
        ⵠⵠΔᐃΔⲆⵠ: "img/day-hand-skin46.png",
        ⵠⵠᐃᐃᐃⲆΔ: "img/night-hand-skin46.png",
        ⲆⲆΔΔᐃᐃⲆ: "img/day-hand-skin47.png",
        ᐃΔⲆΔΔᐃᐃ: "img/night-hand-skin47.png",
        ΔᐃⵠΔΔᐃᐃ: "img/day-hand-skin48.png",
        ΔⲆᐃᐃᐃᐃᐃ: "img/night-hand-skin48.png",
        ⲆⵠⵠⵠⲆⲆᐃ: "img/day-hand-skin49.png",
        ⲆᐃⵠⲆΔⲆΔ: "img/night-hand-skin49.png",
        ⵠⵠΔⵠⵠⵠΔ: "img/day-hand-skin49.png",
        ⲆᐃᐃⵠⲆᐃΔ: "img/night-hand-skin49.png",
        ⲆᐃⲆᐃⲆⲆⵠ: "img/day-hand-skin51.png",
        ΔⵠⲆⵠⵠΔⵠ: "img/night-hand-skin51.png",
        ᐃΔⲆᐃⵠΔΔ: "img/day-hand-skin52.png",
        ΔᐃᐃⵠΔᐃΔ: "img/night-hand-skin52.png",
        ΔΔᐃᐃⵠᐃⲆ: "img/day-hand-skin53.png",
        ΔΔⲆᐃᐃⵠΔ: "img/night-hand-skin53.png",
        ΔᐃⵠⵠⲆⲆⲆ: "img/day-hand-skin53.png",
        ⲆᐃⲆⵠⲆᐃⵠ: "img/night-hand-skin53.png",
        ⲆΔᐃⵠⲆᐃᐃ: "img/day-hand-skin55.png",
        ᐃⲆᐃⵠⲆⲆΔ: "img/night-hand-skin55.png",
        ⲆⲆΔᐃᐃⲆᐃ: "img/day-hand-skin56.png",
        ᐃⵠΔᐃⲆΔⲆ: "img/night-hand-skin56.png",
        ᐃⲆⲆⲆΔΔᐃ: "img/day-hand-skin57.png",
        ᐃᐃⲆΔΔⲆᐃ: "img/night-hand-skin57.png",
        ⵠᐃⲆᐃΔΔΔ: "img/day-hand-skin58.png",
        ⵠⵠⲆᐃⲆⲆΔ: "img/night-hand-skin58.png",
        ⵠⲆⵠΔⵠᐃⵠ: "img/day-hand-skin59.png",
        ⲆΔⵠΔΔⲆΔ: "img/night-hand-skin59.png",
        ⵠⲆΔΔⲆⲆᐃ: "img/day-hand-skin61.png",
        ΔᐃΔΔᐃⵠⵠ: "img/night-hand-skin61.png",
        ᐃⵠΔⵠᐃᐃᐃ: "img/day-hand-skin61.png",
        ⲆⲆⵠᐃᐃΔΔ: "img/night-hand-skin61.png",
        ⵠⵠⵠᐃᐃⲆⲆ: "img/day-hand-skin62.png",
        ⵠᐃⵠΔᐃᐃΔ: "img/night-hand-skin62.png",
        ⲆΔᐃΔΔⵠᐃ: "img/day-hand-skin63.png",
        ᐃⲆⲆᐃⲆⵠΔ: "img/night-hand-skin63.png",
        ΔⵠᐃⲆᐃΔᐃ: "img/day-hand-skin64.png",
        ᐃΔᐃⲆⲆⵠᐃ: "img/night-hand-skin64.png",
        ⵠΔᐃΔΔⲆΔ: "img/day-hand-skin65.png",
        ᐃΔΔᐃⵠⲆᐃ: "img/night-hand-skin65.png",
        ᐃᐃΔΔᐃΔⲆ: "img/day-hand-skin66.png",
        ⲆΔⲆᐃⵠⵠⵠ: "img/night-hand-skin66.png",
        ⵠⲆⵠⵠΔΔⵠ: "img/day-hand-skin67.png",
        ⵠΔⲆΔᐃⲆΔ: "img/night-hand-skin67.png",
        ᐃᐃΔΔᐃⲆΔ: "img/day-hand-skin68.png",
        ⲆⲆⵠⲆᐃᐃⵠ: "img/night-hand-skin68.png",
        ᐃⲆⲆⵠΔᐃᐃ: "img/day-hand-skin69.png",
        ᐃⵠᐃⵠᐃᐃⲆ: "img/night-hand-skin69.png",
        ᐃⵠᐃᐃΔⵠⵠ: "img/day-hand-skin70.png",
        ᐃᐃⵠⵠⵠⲆᐃ: "img/night-hand-skin70.png",
        ΔΔΔΔᐃⲆⲆ: "img/day-hand-skin71.png",
        ΔΔΔⵠⵠΔⲆ: "img/night-hand-skin71.png",
        ⲆⵠⲆⲆⲆΔΔ: "img/day-hand-skin72.png",
        ⲆΔⵠⲆⲆᐃⲆ: "img/night-hand-skin72.png",
        ⲆΔⲆⲆΔᐃⲆ: "img/day-hand-skin73.png",
        ᐃᐃⵠᐃⵠΔΔ: "img/night-hand-skin73.png",
        ⵠⵠⲆᐃΔⵠᐃ: "img/day-hand-skin74.png",
        ᐃⵠᐃᐃΔᐃᐃ: "img/night-hand-skin74.png",
        ᐃΔⵠⲆΔᐃΔ: "img/day-hand-skin75.png",
        ⲆⲆⵠΔᐃⵠⵠ: "img/night-hand-skin75.png",
        ⵠΔᐃⲆⲆᐃΔ: "img/day-hand-skin76.png",
        ΔΔᐃᐃⵠⲆᐃ: "img/night-hand-skin76.png",
        ⵠⲆᐃⵠⵠᐃⲆ: "img/day-hand-skin77.png",
        ΔⵠⵠⵠⲆⵠᐃ: "img/night-hand-skin77.png",
        ᐃⲆᐃⲆⲆᐃⵠ: "img/day-hand-skin78.png",
        ᐃᐃⵠⵠⲆᐃⲆ: "img/night-hand-skin78.png",
        ⵠⲆⵠΔⵠⵠⲆ: "img/day-hand-skin79.png",
        ᐃⲆΔⵠΔΔⲆ: "img/night-hand-skin79.png",
        ᐃⲆⵠᐃⵠᐃⲆ: "img/day-hand-skin80.png",
        ΔΔᐃⵠᐃΔΔ: "img/night-hand-skin80.png",
        ⲆΔΔⲆΔᐃΔ: "img/day-hand-skin81.png",
        ΔⵠΔⵠⲆΔΔ: "img/night-hand-skin81.png",
        ΔⲆⲆⲆⵠΔⵠ: "img/day-hand-skin82.png",
        ΔⲆᐃⲆᐃΔᐃ: "img/night-hand-skin82.png",
        ⵠⲆⵠⵠⲆΔⵠ: "img/day-hand-skin83.png",
        ΔⲆⲆⲆΔⲆⵠ: "img/night-hand-skin83.png",
        ⲆⲆⵠⲆⵠⲆⲆ: "img/day-hand-skin84.png",
        ⲆⵠⵠΔⲆⲆΔ: "img/night-hand-skin84.png",
        ⵠⲆΔⲆᐃⲆΔ: "img/day-hand-skin85.png",
        ᐃΔᐃᐃΔⲆⵠ: "img/night-hand-skin85.png",
        ⲆᐃⲆⲆΔᐃⲆ: "img/day-hand-skin86.png",
        ⵠⲆΔⲆΔⲆⲆ: "img/night-hand-skin86.png",
        ⲆⲆΔⵠΔΔⵠ: "img/day-hand-skin87.png",
        ⲆΔⵠⲆⲆⵠⲆ: "img/night-hand-skin87.png",
        ⵠⵠΔⲆΔᐃΔ: "img/day-hand-skin88.png",
        ⵠⵠⲆⵠΔᐃⵠ: "img/night-hand-skin88.png",
        ⲆⵠⵠⲆⵠᐃᐃ: "img/day-hand-skin89.png",
        ⵠᐃᐃΔᐃΔⵠ: "img/night-hand-skin89.png",
        ᐃᐃⵠⲆⵠΔⵠ: "img/day-hand-skin90.png",
        ⲆᐃⲆⲆΔΔⲆ: "img/night-hand-skin90.png",
        ⵠᐃⲆᐃᐃᐃⵠ: "img/day-hand-skin91.png",
        ᐃⲆⲆⵠⲆᐃΔ: "img/night-hand-skin91.png",
        ᐃΔΔᐃᐃᐃΔ: "img/day-hand-skin92.png",
        ΔΔⵠΔⲆΔᐃ: "img/night-hand-skin92.png",
        ⲆⲆⵠΔᐃᐃᐃ: "img/day-hand-skin93.png",
        ΔⲆⲆᐃⲆⲆᐃ: "img/night-hand-skin93.png",
        ᐃᐃⲆΔⲆΔⵠ: "img/day-hand-skin94.png",
        ⲆⵠⲆΔᐃⵠΔ: "img/night-hand-skin94.png",
        ⲆⲆΔᐃⵠᐃΔ: "img/day-hand-skin95.png",
        ⵠᐃⲆⵠⲆⲆΔ: "img/night-hand-skin95.png",
        ᐃⲆⲆΔᐃΔΔ: "img/day-hand-skin96.png",
        ⵠⲆⵠᐃⲆᐃΔ: "img/night-hand-skin96.png",
        ᐃΔᐃⵠⲆⲆⵠ: "img/day-hand-skin97.png",
        ⵠⵠⵠΔⲆΔⲆ: "img/night-hand-skin97.png",
        ⲆΔᐃΔⵠᐃᐃ: "img/day-hand-skin98.png",
        ⲆᐃⵠⵠⵠᐃⲆ: "img/night-hand-skin98.png",
        ΔᐃⵠΔΔⵠⵠ: "img/day-hand-skin99.png",
        ΔᐃⵠⵠⲆⵠⵠ: "img/night-hand-skin99.png",
        ᐃⲆΔⲆΔΔᐃ: "img/day-hand-skin100.png",
        ⵠᐃΔⲆⲆᐃᐃ: "img/night-hand-skin100.png",
        ⲆⲆⲆⲆΔΔⲆ: "img/day-hand-skin101.png",
        ⲆΔⲆᐃΔⵠⲆ: "img/night-hand-skin101.png",
        ⵠⵠᐃΔⵠᐃⲆ: "img/day-hand-skin102.png",
        ⲆᐃΔᐃⵠⲆΔ: "img/night-hand-skin102.png",
        ⵠΔⵠᐃⲆⲆΔ: "img/day-hand-skin103.png",
        ΔⲆᐃΔᐃᐃᐃ: "img/night-hand-skin103.png",
        ⲆΔᐃⵠⵠᐃⵠ: "img/day-hand-skin104.png",
        ΔᐃⲆⲆᐃᐃⲆ: "img/night-hand-skin104.png",
        ⲆⵠᐃΔᐃΔⲆ: "img/day-hand-skin105.png",
        ⲆⵠΔⲆΔⵠᐃ: "img/night-hand-skin105.png",
        ⵠᐃⲆΔⵠⲆⵠ: "img/day-hand-skin106.png",
        ᐃⵠΔⲆⲆⲆⵠ: "img/night-hand-skin106.png",
        ⵠⵠⵠᐃⲆᐃΔ: "img/day-hand-skin107.png",
        ΔⲆⲆΔⲆⲆⲆ: "img/night-hand-skin107.png",
        ΔΔⲆⵠΔⵠᐃ: "img/day-hand-skin108.png",
        ⲆⲆΔΔΔⵠⵠ: "img/night-hand-skin108.png",
        ᐃᐃⵠΔΔΔⲆ: "img/day-hand-skin109.png",
        ⵠᐃᐃⵠⵠΔⲆ: "img/night-hand-skin109.png",
        ᐃⵠΔΔⲆΔⵠ: "img/day-hand-skin110.png",
        ᐃⲆΔᐃⲆⵠΔ: "img/night-hand-skin110.png",
        ᐃⲆΔⵠⵠᐃⵠ: "img/day-hand-skin111.png",
        ⲆⲆᐃⲆⵠΔⵠ: "img/night-hand-skin111.png",
        ᐃᐃⲆΔⵠⵠⲆ: "img/day-hand-skin112.png",
        ⲆᐃⲆⵠΔᐃⲆ: "img/night-hand-skin112.png",
        ΔᐃⲆᐃᐃᐃᐃⵠⵠ: "img/day-hand-skin113.png",
        ᐃΔΔⵠᐃᐃⵠᐃᐃ: "img/night-hand-skin113.png",
        ⵠᐃⲆⵠΔΔⵠ: "img/day-hand-skin114.png",
        ⵠᐃⲆⵠⵠΔᐃ: "img/night-hand-skin114.png",
        ⵠΔⲆᐃⲆⵠⲆ: "img/day-hand-skin115.png",
        ⵠΔᐃⵠᐃᐃᐃ: "img/night-hand-skin115.png",
        ⲆᐃⲆⲆᐃⵠᐃ: "img/day-hand-skin116.png",
        ⲆⲆΔΔΔΔᐃ: "img/night-hand-skin116.png",
        ΔᐃⲆΔⵠⲆⵠ: "img/day-hand-skin117.png",
        ΔᐃΔⵠⵠᐃⲆ: "img/night-hand-skin117.png",
        ⲆⵠⵠⲆᐃⲆⵠ: "img/day-hand-skin118.png",
        ⲆᐃΔΔⲆⵠᐃ: "img/night-hand-skin118.png",
        ΔᐃⵠⲆⲆⲆⵠ: "img/day-hand-skin119.png",
        ᐃΔᐃᐃⵠⲆⵠ: "img/night-hand-skin119.png",
        ⵠⲆⲆⵠⲆⲆΔ: "img/day-hand-skin120.png",
        ᐃⲆΔΔⵠⵠᐃ: "img/night-hand-skin120.png",
        ᐃⵠᐃᐃⵠⲆⵠ: "img/day-hand-skin122.png",
        ᐃΔⲆⲆᐃⵠⲆ: "img/night-hand-skin122.png",
        ᐃⵠᐃᐃΔΔᐃ: "img/day-hand-skin122.png",
        Δᐃⵠᐃᐃⵠⵠ: "img/night-hand-skin122.png",
        ⵠΔᐃⵠⲆᐃᐃ: "img/day-hand-skin122.png",
        ⵠⵠΔᐃᐃⵠΔ: "img/night-hand-skin122.png",
        ΔᐃᐃⲆⲆⲆΔ: "img/day-hand-skin124.png",
        ᐃᐃΔⲆⵠΔᐃ: "img/night-hand-skin124.png",
        ⲆⵠΔᐃⲆΔⲆ: "img/day-hand-skin125.png",
        ⵠᐃΔⲆⲆΔⲆ: "img/night-hand-skin125.png",
        ΔᐃΔⲆⲆⵠⵠ: "img/day-hand-skin126.png",
        ⲆᐃᐃⲆᐃΔᐃ: "img/night-hand-skin126.png",
        ᐃΔⵠⵠⵠⲆⲆ: "img/day-hand-skin127.png",
        ⲆΔⲆᐃΔⲆⵠ: "img/night-hand-skin127.png",
        ⲆΔᐃΔᐃᐃΔ: "img/day-hand-skin128.png",
        ᐃᐃΔⲆⲆⵠⲆ: "img/night-hand-skin128.png",
        ᐃᐃⲆΔⵠΔⵠ: "img/day-hand-skin129.png",
        ⵠⵠᐃⵠΔΔⵠ: "img/night-hand-skin129.png",
        ⵠⵠᐃᐃⲆⵠᐃ: "img/day-hand-skin130.png",
        ⲆΔᐃΔΔⵠΔ: "img/night-hand-skin130.png",
        ΔᐃΔᐃⵠᐃᐃ: "img/day-hand-skin131.png",
        ⲆⵠΔᐃⵠⲆⵠ: "img/night-hand-skin131.png",
        ⲆⲆΔⲆⲆⲆᐃ: "img/day-hand-skin130.png",
        ⲆⲆΔΔⲆᐃⵠ: "img/night-hand-skin130.png",
        ⲆΔΔⵠΔΔⲆ: "img/day-hand-skin133.png",
        ᐃⲆⲆⲆᐃᐃᐃ: "img/night-hand-skin133.png",
        ⲆⵠⲆᐃΔⵠⲆ: "img/day-hand-skin134.png",
        ⲆⲆⵠⲆΔⲆⲆ: "img/night-hand-skin134.png",
        ⲆⲆΔᐃⲆΔΔ: "img/day-hand-skin135.png",
        ᐃᐃΔⵠⵠΔⲆ: "img/night-hand-skin135.png",
        ΔⲆᐃΔⲆⲆΔ: "img/day-hand-skin136.png",
        ⲆᐃⲆΔⵠᐃᐃ: "img/night-hand-skin136.png",
        ΔⲆᐃΔⵠᐃᐃ: "img/day-hand-skin137.png",
        ⵠΔⲆΔⵠΔⲆ: "img/night-hand-skin137.png",
        ᐃⵠⲆⲆΔⵠⵠ: "img/day-hand-skin138.png",
        ΔᐃᐃᐃⲆΔⵠ: "img/night-hand-skin138.png",
        ⲆΔⲆΔⲆⲆⲆ: "img/day-hand-skin139.png",
        ⲆⲆᐃⵠⲆⵠΔ: "img/night-hand-skin139.png",
        ⵠΔⲆΔΔⲆⵠ: "img/day-hand-skin140.png",
        ⵠΔΔΔⵠⲆᐃ: "img/night-hand-skin140.png",
        Δᐃᐃᐃᐃⵠᐃ: "img/day-hand-skin141.png",
        ⲆᐃⲆᐃᐃΔᐃ: "img/night-hand-skin141.png",
        ⲆⵠⵠⲆᐃᐃⵠ: "img/day-hand-skin142.png",
        ⵠΔⵠΔᐃΔⲆ: "img/night-hand-skin142.png",
        ΔΔᐃᐃΔΔᐃ: "img/day-hand-skin143.png",
        ⵠΔⵠΔⵠⲆΔ: "img/night-hand-skin143.png",
        ᐃᐃⲆⵠᐃⲆⵠ: "img/day-hand-skin144.png",
        ᐃⲆᐃᐃⵠⵠᐃ: "img/night-hand-skin144.png",
        ⲆⲆΔⲆΔⲆΔ: "img/day-hand-skin145.png",
        ΔᐃⵠΔΔΔⲆ: "img/night-hand-skin145.png",
        ᐃΔⲆⲆⵠΔΔ: "img/day-hand-skin146.png",
        ⲆᐃⵠⵠΔⲆⲆ: "img/night-hand-skin146.png",
        ⵠⵠᐃⵠᐃⵠᐃ: "img/day-hand-skin147.png",
        ΔⲆΔᐃᐃⲆⵠ: "img/night-hand-skin147.png",
        ⵠⵠⵠΔⲆⵠⵠ: "img/day-hand-skin148.png",
        ⲆᐃⲆᐃΔⵠᐃ: "img/night-hand-skin148.png",
        ᐃΔⲆⵠⵠΔᐃ: "img/day-hand-skin149.png",
        ⵠⵠⲆᐃⵠⵠᐃ: "img/night-hand-skin149.png",
        ⲆⲆᐃⵠΔⵠⵠ: "img/day-hand-skin150.png",
        ΔΔΔⵠᐃΔΔ: "img/night-hand-skin150.png",
        ⵠⵠⲆᐃⲆΔᐃ: "img/day-hand-skin151.png",
        ΔⲆⵠΔⵠⵠⲆ: "img/night-hand-skin151.png",
        ⵠΔΔⲆΔⲆᐃ: "img/day-hand-skin152.png",
        ΔⲆⵠⲆΔᐃᐃ: "img/night-hand-skin152.png",
        ΔⲆᐃⲆΔᐃᐃ: "img/day-hand-skin153.png",
        ᐃΔⲆⲆᐃⲆΔ: "img/night-hand-skin153.png",
        ᐃᐃⲆⲆΔΔⲆ: "img/day-hand-skin154.png",
        ⲆΔⲆⵠⲆᐃⵠ: "img/night-hand-skin154.png",
        ᐃⵠᐃⵠΔᐃⲆ: "img/day-hand-skin155.png",
        ⲆᐃⵠΔᐃⵠᐃ: "img/night-hand-skin155.png",
        ᐃⲆⲆᐃΔΔⵠ: "img/day-hand-skin156.png",
        ᐃⵠⵠⲆⵠⵠᐃ: "img/night-hand-skin156.png",
        ᐃⵠⲆΔⵠⲆⲆ: "img/day-hand-skin157.png",
        ᐃΔⲆΔᐃΔᐃ: "img/night-hand-skin157.png",
        ᐃⲆΔᐃΔⲆᐃ: "img/day-hand-skin158.png",
        Δᐃᐃᐃⵠᐃᐃ: "img/night-hand-skin158.png",
        ⲆⲆⲆᐃⲆⲆΔ: "img/day-hand-skin159.png",
        ⵠⲆⵠⲆΔΔⵠ: "img/night-hand-skin159.png",
        ⲆⵠⲆⵠⵠᐃⲆ: "img/day-hand-skin160.png",
        ᐃⲆⵠᐃΔΔⵠ: "img/night-hand-skin160.png",
        ΔⵠΔᐃⲆⵠⲆ: "img/day-hand-skin161.png",
        ⵠᐃᐃΔⲆⵠⵠ: "img/night-hand-skin161.png",
        ᐃᐃⲆᐃΔᐃⵠ: "img/day-hand-skin162.png",
        ⲆⲆᐃΔⲆΔⵠ: "img/night-hand-skin162.png",
        ᐃⵠΔⵠΔⵠΔ: "img/day-hand-skin163.png",
        ᐃⲆᐃⲆⲆⵠⵠ: "img/night-hand-skin163.png",
        ⲆⵠⲆⵠⲆΔᐃ: "img/day-hand-skin164.png",
        ⵠᐃⲆⵠΔⵠⵠ: "img/night-hand-skin164.png",
        ⲆⲆΔⵠⵠⲆΔ: "img/day-hand-skin165.png",
        ΔΔⵠᐃⲆⲆⲆ: "img/night-hand-skin165.png",
        ᐃⲆⵠᐃⵠⲆᐃ: "img/day-hand-skin166.png",
        ΔΔⵠᐃⵠⲆⲆ: "img/night-hand-skin166.png",
        ᐃΔᐃⵠⲆⵠΔ: "img/day-hand-skin167.png",
        ⵠⲆⲆΔᐃᐃⵠ: "img/night-hand-skin167.png",
        ΔⵠᐃᐃΔᐃⵠ: "img/day-hand-skin168.png",
        ⲆᐃⲆᐃⵠΔᐃ: "img/night-hand-skin168.png",
        ⵠⵠⵠΔⵠᐃᐃ: "img/day-hand-skin169.png",
        ᐃᐃΔᐃᐃⵠΔ: "img/night-hand-skin169.png",
        ⲆⲆⲆΔΔⲆΔ: "img/day-hand-skin170.png",
        ⵠᐃⵠΔΔΔⲆ: "img/night-hand-skin170.png",
        ⵠⲆᐃⵠᐃⲆΔ: "img/day-hand-skin171.png",
        ΔΔᐃⲆᐃᐃᐃ: "img/night-hand-skin171.png",
        ⲆΔⵠⵠᐃΔⵠ: "img/day-hand-skin172.png",
        ⲆⵠⲆΔΔⵠⲆ: "img/night-hand-skin172.png",
        ΔΔⵠⵠⲆᐃⲆ: "img/day-hand-skin173.png",
        ⵠΔⲆᐃΔⵠⲆ: "img/night-hand-skin173.png",
        ᐃⲆⲆᐃᐃⲆΔ: "img/day-hand-skin174.png",
        ΔᐃᐃⵠᐃΔᐃ: "img/night-hand-skin174.png",
        ⵠΔΔⲆⲆⵠΔ: "img/day-hand-skin175.png",
        ⵠⵠΔⲆᐃⵠᐃ: "img/night-hand-skin175.png",
        ΔⵠⵠⵠΔⲆⵠ: "img/day-hand-skin176.png",
        ΔΔΔⲆΔⵠᐃ: "img/night-hand-skin176.png",
        ⲆⵠᐃΔΔⲆᐃ: "img/day-hand-skin177.png",
        ΔΔⵠᐃᐃΔΔ: "img/night-hand-skin177.png",
        ⲆᐃΔⲆᐃⲆⲆ: "img/day-hand-skin178.png",
        ⲆⲆΔⲆΔᐃⲆ: "img/night-hand-skin178.png",
        ᐃⲆⲆΔᐃⵠⵠ: "img/day-hand-skin179.png",
        ⵠΔⲆΔⲆᐃⵠ: "img/night-hand-skin179.png",
        ᐃᐃⲆⲆⵠᐃⲆ: "img/day-hand-skin180.png",
        ᐃⵠⵠⲆⲆⵠᐃ: "img/night-hand-skin180.png",
        ᐃᐃⲆᐃⵠᐃΔ: "img/day-hand-skin181.png",
        ΔⲆᐃⲆⲆΔⲆ: "img/night-hand-skin181.png",
        ᐃⲆᐃᐃⵠⲆⲆ: "img/day-hand-skin182.png",
        ᐃΔⲆⲆⲆⲆⵠ: "img/night-hand-skin182.png",
        ⲆⵠᐃⲆⲆⲆΔ: "img/day-hand-skin183.png",
        ⲆΔᐃⵠᐃⲆⲆ: "img/night-hand-skin183.png",
        ⵠⲆΔⲆΔᐃΔ: "img/day-hand-skin184.png",
        ΔⲆⲆΔⵠᐃⵠ: "img/night-hand-skin184.png",
        ⵠᐃⲆⲆⵠⲆᐃ: "img/day-hand-skin185.png",
        ⵠⵠΔⵠᐃᐃᐃ: "img/night-hand-skin185.png",
        ᐃΔᐃΔᐃⲆⵠ: "img/day-hand-skin186.png",
        ᐃᐃⵠⵠᐃΔᐃ: "img/night-hand-skin186.png",
        ᐃⵠΔΔⵠᐃᐃ: "img/day-hand-skin187.png",
        ⲆⵠⲆⲆⵠⲆᐃ: "img/night-hand-skin187.png",
        ⵠᐃΔΔΔᐃⵠ: "img/day-hand-skin188.png",
        ᐃᐃᐃΔᐃⲆⲆ: "img/night-hand-skin188.png",
        ΔⵠᐃΔᐃᐃΔ: "img/day-hand-skin189.png",
        ΔⵠⲆΔᐃⲆᐃ: "img/night-hand-skin189.png",
        ΔⵠⵠᐃⲆⲆⲆ: "img/day-hand-skin190.png",
        ⲆΔΔᐃⲆⲆΔ: "img/night-hand-skin190.png",
        ⵠᐃΔⲆᐃⲆᐃ: "img/day-hand-skin191.png",
        ⵠΔⵠᐃⵠⲆⵠ: "img/night-hand-skin191.png",
        ⲆⲆΔΔⲆᐃᐃ: "img/day-hand-skin192.png",
        ᐃΔⵠⲆⲆⲆⵠ: "img/night-hand-skin192.png",
        ⵠΔⲆⵠᐃΔᐃ: "img/day-hand-skin193.png",
        ΔᐃᐃⲆΔⲆⵠ: "img/night-hand-skin193.png",
        ⵠⲆⵠⲆⵠⵠΔ: "img/day-hand-skin194.png",
        ΔᐃΔΔⲆΔⲆ: "img/night-hand-skin194.png",
        ᐃᐃᐃⲆⲆⲆⲆ: "img/day-hand-skin195.png",
        ⲆⲆᐃᐃᐃⲆⲆ: "img/night-hand-skin195.png",
        ⵠⲆΔΔᐃΔⵠ: "img/day-hand-skin196.png",
        ⵠⲆΔⵠΔⵠᐃ: "img/night-hand-skin196.png",
        ΔΔⲆᐃⵠΔⵠ: "img/day-hand-skin197.png",
        Ⲇⵠᐃᐃᐃⵠᐃ: "img/night-hand-skin197.png",
        ⲆΔᐃⲆⲆΔΔ: "img/day-hand-skin198.png",
        ⵠΔⵠⵠΔΔⲆ: "img/night-hand-skin198.png",
        ⲆⲆᐃΔⲆⵠᐃ: "img/day-hand-skin199.png",
        ⲆΔⲆⵠⲆᐃⲆ: "img/night-hand-skin199.png",
        ᐃⵠΔⲆⵠᐃⵠ: "img/day-hand-skin200.png",
        ΔⲆᐃⲆᐃⲆᐃ: "img/night-hand-skin200.png",
        ⲆΔΔⵠᐃⲆΔ: "img/day-hand-skin201.png",
        ⵠⵠⲆᐃΔᐃᐃ: "img/night-hand-skin201.png",
        ᐃⵠΔᐃⲆΔᐃ: "img/day-hand-skin202.png",
        ᐃᐃᐃᐃⵠⵠⵠ: "img/night-hand-skin202.png",
        ᐃⵠᐃΔᐃⵠᐃ: "img/day-hand-skin203.png",
        ⵠΔⲆⲆΔⲆΔ: "img/night-hand-skin203.png",
        ⲆⵠᐃⲆⲆⵠⵠ: "img/day-hand-skin204.png",
        ⲆⲆᐃⵠⲆⲆΔ: "img/night-hand-skin204.png",
        ΔⲆᐃⲆⲆΔᐃ: "img/day-hand-skin205.png",
        ΔⵠΔΔᐃΔⵠ: "img/night-hand-skin205.png",
        ⲆΔⲆⵠᐃᐃⵠ: "img/day-hand-skin206.png",
        ⵠΔⵠⲆⵠᐃᐃ: "img/night-hand-skin206.png",
        ⲆⵠⲆᐃⲆΔⵠ: "img/day-hand-skin207.png",
        ΔⵠⲆⲆⲆⲆᐃ: "img/night-hand-skin207.png",
        ⵠⲆⵠᐃᐃᐃᐃ: "img/day-hand-skin208.png",
        ΔⲆⵠΔⲆᐃⲆ: "img/night-hand-skin208.png",
        ᐃⵠⵠⵠⵠⲆΔ: "img/day-hand-skin209.png",
        ⵠᐃΔΔΔΔⲆ: "img/night-hand-skin209.png",
        ΔᐃΔΔᐃⲆⵠ: "img/day-hand-skin210.png",
        ΔⵠΔⵠⵠΔⵠ: "img/night-hand-skin210.png",
        ⲆⵠⵠⵠᐃⲆᐃ: "img/day-hand-skin211.png",
        ⲆΔΔΔⲆⵠⲆ: "img/night-hand-skin211.png",
        ⲆΔᐃⵠᐃⲆΔ: "img/day-hand-skin212.png",
        ΔⵠΔⲆⵠᐃⵠ: "img/night-hand-skin212.png",
        ⲆᐃᐃⲆⲆΔΔ: "img/day-bag-star0.png",
        ⲆⵠⵠⲆⲆΔⵠ: "img/night-bag-star0.png",
        ᐃΔᐃΔⵠᐃᐃ: "img/day-bag0.png",
        ⲆᐃΔⲆⲆⲆⲆ: "img/night-bag0.png",
        ⲆΔⲆΔᐃⲆⲆ: "img/day-bag1.png",
        ΔΔⵠΔⲆᐃⲆ: "img/night-bag1.png",
        ⲆⲆΔᐃⵠΔⵠ: "img/day-bag2.png",
        ᐃⲆΔᐃⵠⲆⲆ: "img/night-bag2.png",
        ⵠⵠⲆⲆⲆΔⲆ: "img/day-bag3.png",
        ᐃᐃᐃⲆΔΔᐃ: "img/night-bag3.png",
        ⵠⲆⲆⲆⵠⵠⲆ: "img/day-bag4.png",
        ⲆⲆᐃΔᐃⵠⵠ: "img/night-bag4.png",
        ᐃᐃⵠⲆⲆΔᐃ: "img/day-bag5.png",
        ᐃᐃⲆⲆΔⲆⵠ: "img/night-bag5.png",
        ⵠᐃⵠⵠᐃⵠⵠ: "img/day-bag6.png",
        ᐃⵠⲆⵠᐃᐃⵠ: "img/night-bag6.png",
        ᐃᐃᐃᐃⵠᐃᐃ: "img/day-bag7.png",
        ⵠⵠᐃᐃΔⵠⵠ: "img/night-bag7.png",
        ΔᐃᐃⵠⵠΔⲆ: "img/day-bag8.png",
        ΔⵠΔᐃⲆΔⵠ: "img/night-bag8.png",
        ᐃⲆΔⵠⵠⲆⵠ: "img/day-bag9.png",
        ⲆⵠᐃⵠᐃΔΔ: "img/night-bag9.png",
        ΔᐃⲆΔΔᐃΔ: "img/day-bag10.png",
        ᐃⲆᐃΔΔⲆⲆ: "img/night-bag10.png",
        ΔΔⵠΔⲆⲆⵠ: "img/day-bag11.png",
        ⵠᐃⵠⲆⵠⵠΔ: "img/night-bag11.png",
        ⲆᐃⲆΔᐃᐃΔ: "img/day-bag13.png",
        ᐃΔᐃᐃΔᐃⵠ: "img/night-bag13.png",
        ΔΔⵠΔⵠᐃⲆ: "img/day-bag14.png",
        ⲆΔⵠᐃⲆΔⵠ: "img/night-bag14.png",
        ⲆⲆⲆΔΔⵠⵠ: "img/day-bag16.png",
        ΔᐃΔⵠᐃΔᐃ: "img/night-bag16.png",
        ΔⵠᐃⵠΔⵠᐃ: "img/day-bag17.png",
        ⲆᐃᐃΔⲆⲆⵠ: "img/night-bag17.png",
        ΔⲆΔΔⲆᐃⲆ: "img/day-bag18.png",
        ⲆⵠᐃⵠⵠᐃΔ: "img/night-bag18.png",
        ᐃⲆᐃⲆᐃⵠᐃ: "img/day-bag19.png",
        ΔⵠΔⵠⵠⲆᐃ: "img/night-bag19.png",
        ⲆᐃᐃᐃⲆᐃΔ: "img/day-bag20.png",
        ⲆᐃⵠᐃⲆⵠⲆ: "img/night-bag20.png",
        ⲆΔΔⲆⵠⲆΔ: "img/day-bag21.png",
        ⵠⲆⲆⲆΔⵠⲆ: "img/night-bag21.png",
        ᐃΔΔΔⲆΔᐃ: "img/day-bag22.png",
        ᐃⵠⲆⲆⵠΔⲆ: "img/night-bag22.png",
        ⲆⵠⲆⵠΔᐃⲆ: "img/day-bag23.png",
        ΔⲆⲆⵠⵠΔᐃ: "img/night-bag23.png",
        ⵠⲆⲆⵠⵠⲆⲆ: "img/day-bag24.png",
        ᐃⲆΔⲆⲆᐃᐃ: "img/night-bag24.png",
        ⵠⵠⵠⵠⵠᐃΔ: "img/day-bag25.png",
        ᐃᐃⲆΔⵠⵠΔ: "img/night-bag25.png",
        ⲆⵠΔⵠⲆⲆΔ: "img/day-bag26.png",
        ᐃᐃⲆᐃⲆⲆⲆ: "img/night-bag26.png",
        ⵠⵠΔⲆⵠⲆΔ: "img/day-bag27.png",
        ⵠᐃΔⵠⲆΔᐃ: "img/night-bag27.png",
        ⵠΔⵠⲆᐃᐃⲆ: "img/day-bag28.png",
        ᐃⵠⵠⵠⲆᐃᐃ: "img/night-bag28.png",
        ⵠⵠΔᐃⲆⵠᐃ: "img/day-bag29.png",
        ΔΔΔᐃΔᐃⵠ: "img/night-bag29.png",
        ⵠⲆΔᐃΔΔᐃ: "img/day-bag30.png",
        ᐃΔᐃⲆᐃⲆᐃ: "img/night-bag30.png",
        ᐃⵠᐃⲆΔⲆⲆ: "img/day-bag31.png",
        ΔΔᐃⲆΔⵠⵠ: "img/night-bag31.png",
        ᐃΔⵠⲆⵠΔΔ: "img/day-bag32.png",
        ⲆⲆΔⲆⵠΔⲆ: "img/night-bag32.png",
        ᐃⵠᐃⲆⲆΔᐃ: "img/day-bag33.png",
        ⲆⵠΔᐃᐃΔⵠ: "img/night-bag33.png",
        ᐃⵠⵠᐃᐃᐃⲆ: "img/day-bag34.png",
        ⵠⵠⲆΔⲆΔⵠ: "img/night-bag34.png",
        ⵠΔⲆⵠⲆⵠⵠ: "img/day-bag35.png",
        ⵠΔΔⵠΔⲆΔ: "img/night-bag35.png",
        ⵠᐃᐃⲆⵠᐃᐃ: "img/day-bag36.png",
        Ⲇᐃⵠᐃⵠᐃᐃ: "img/night-bag36.png",
        ᐃⲆⵠⵠⵠⵠᐃ: "img/day-bag37.png",
        ⵠΔΔⵠⲆⵠᐃ: "img/night-bag37.png",
        ⵠΔΔΔᐃⲆⵠ: "img/day-bag38.png",
        ΔⲆΔⲆΔᐃⵠ: "img/night-bag38.png",
        ⵠᐃᐃⵠⲆⲆᐃ: "img/day-bag39.png",
        ⲆΔⲆᐃⲆᐃⲆ: "img/night-bag39.png",
        ⵠᐃΔΔⲆⵠⵠ: "img/day-bag40.png",
        ⵠⵠⲆΔᐃⲆᐃ: "img/night-bag40.png",
        ⲆᐃⲆΔᐃᐃⵠ: "img/day-bag41.png",
        ᐃⲆΔⲆᐃⲆΔ: "img/night-bag41.png",
        ᐃⵠⲆⵠⵠΔⵠ: "img/day-bag42.png",
        ⲆⲆⵠΔΔⵠΔ: "img/night-bag42.png",
        ᐃⵠᐃⵠⵠⵠᐃ: "img/day-bag43.png",
        ⵠⲆᐃΔᐃⲆⵠ: "img/night-bag43.png",
        ⲆᐃᐃⵠΔΔⲆ: "img/day-bag44.png",
        ᐃⲆⵠΔⵠᐃⲆ: "img/night-bag44.png",
        ᐃᐃⵠΔᐃᐃⲆ: "img/day-bag45.png",
        ⲆⵠⵠⵠᐃΔᐃ: "img/night-bag45.png",
        ⲆᐃᐃΔⵠᐃᐃ: "img/day-bag46.png",
        ⲆⵠⲆⲆⲆΔⲆ: "img/night-bag46.png",
        ⲆⲆⲆⲆΔⲆⲆ: "img/day-bag47.png",
        ᐃⲆⲆᐃᐃΔΔ: "img/night-bag47.png",
        ⵠⲆᐃᐃⵠⲆⲆ: "img/day-bag48.png",
        ⲆⵠΔΔⵠΔᐃ: "img/night-bag48.png",
        ΔᐃᐃⵠⲆⵠⵠ: "img/day-bag49.png",
        ΔⵠⵠᐃᐃⲆⵠ: "img/night-bag49.png",
        ᐃᐃᐃΔⵠⲆⲆ: "img/day-bag50.png",
        ᐃⲆⵠΔⲆᐃⲆ: "img/night-bag50.png",
        ΔᐃⵠⵠΔⵠⵠ: "img/day-bag51.png",
        ΔⵠⵠⵠⵠᐃΔ: "img/night-bag51.png",
        ΔᐃⲆⵠⲆᐃᐃ: "img/day-bag52.png",
        ᐃⵠΔⵠᐃᐃΔ: "img/night-bag52.png",
        ⲆⵠⲆΔⲆⵠⵠ: "img/day-bag53.png",
        ⵠⲆⲆᐃⲆΔⲆ: "img/night-bag53.png",
        Ⲇⵠⵠᐃⵠⵠⵠ: "img/day-bag54.png",
        ΔᐃΔⵠᐃΔⵠ: "img/night-bag54.png",
        ΔⲆⵠⲆⵠⲆΔ: "img/day-bag55.png",
        ΔⲆΔⲆⲆᐃΔ: "img/night-bag55.png",
        ΔⲆⲆΔⲆᐃⲆ: "img/day-bag56.png",
        ⵠΔΔⲆᐃᐃⵠ: "img/night-bag56.png",
        ⲆΔⲆΔΔΔΔ: "img/day-bag57.png",
        ⲆⵠᐃᐃⵠⲆⲆ: "img/night-bag57.png",
        ΔΔⵠⲆⵠᐃⲆ: "img/day-bag58.png",
        ΔⵠΔᐃⲆⵠᐃ: "img/night-bag58.png",
        ΔΔⵠⲆⲆΔΔ: "img/day-bag59.png",
        ᐃⵠΔⲆⵠᐃᐃ: "img/night-bag59.png",
        ⵠⲆᐃⲆⲆΔΔ: "img/day-bag60.png",
        ΔⵠⲆᐃΔᐃΔ: "img/night-bag60.png",
        ⲆⵠⵠⵠΔⵠᐃ: "img/day-bag61.png",
        ⵠΔⲆΔⵠᐃⵠ: "img/night-bag61.png",
        ᐃⵠⲆΔⵠᐃΔ: "img/day-bag62.png",
        ᐃⲆᐃⲆⵠⲆⵠ: "img/night-bag62.png",
        ΔᐃⲆᐃⵠᐃⵠ: "img/day-bag63.png",
        ΔⲆⵠⲆⲆΔΔ: "img/night-bag63.png",
        ΔΔⲆᐃᐃᐃΔ: "img/day-bag64.png",
        ⵠⵠⲆⲆⵠⲆΔ: "img/night-bag64.png",
        ⵠⵠᐃⵠⲆⵠⲆ: "img/day-bag65.png",
        ΔᐃΔᐃΔⵠⲆ: "img/night-bag65.png",
        ⲆⲆⵠᐃΔⲆΔ: "img/day-bag66.png",
        ΔⵠᐃᐃᐃⲆⲆ: "img/night-bag66.png",
        Ⲇᐃᐃⵠᐃⵠⵠ: "img/day-bag67.png",
        ᐃᐃᐃᐃᐃⵠᐃ: "img/night-bag67.png",
        ⲆⲆᐃᐃΔⵠⲆ: "img/day-bag68.png",
        ⲆⵠΔᐃⲆⵠᐃ: "img/night-bag68.png",
        ⲆⵠⲆⵠⲆᐃΔ: "img/day-bag69.png",
        ⵠⲆⲆᐃᐃΔᐃ: "img/night-bag69.png",
        ⲆⲆᐃⲆᐃᐃΔ: "img/day-bag70.png",
        ⵠⲆⲆΔⵠⵠⵠ: "img/night-bag70.png",
        ⲆⲆΔᐃΔⲆⲆ: "img/day-bag71.png",
        ⵠΔᐃᐃⲆΔⲆ: "img/night-bag71.png",
        ⵠⲆⵠᐃΔⲆΔ: "img/day-bag72.png",
        ⲆⵠⵠΔΔᐃᐃ: "img/night-bag72.png",
        ⵠⵠⵠⲆⵠᐃΔ: "img/day-bag73.png",
        ⲆΔⲆᐃⲆΔⲆ: "img/night-bag73.png",
        ΔⲆΔⲆⵠᐃⵠ: "img/day-bag74.png",
        ⵠⵠⲆᐃΔⵠΔ: "img/night-bag74.png",
        ⵠΔΔⵠᐃⲆⲆ: "img/day-bag75.png",
        ⲆⲆⵠⲆⵠᐃⵠ: "img/night-bag75.png",
        ᐃᐃᐃⲆⵠⲆⵠ: "img/day-bag76.png",
        ᐃⵠⲆΔᐃⲆⵠ: "img/night-bag76.png",
        ᐃᐃⵠⵠⲆⵠⵠ: "img/day-bag77.png",
        ⵠⵠⲆⲆⵠⲆⲆ: "img/night-bag77.png",
        ᐃⵠᐃⵠΔΔΔ: "img/day-bag78.png",
        ⵠᐃⲆⲆⵠⵠΔ: "img/night-bag78.png",
        ΔⲆᐃⵠⵠⵠⵠ: "img/day-bag79.png",
        ΔᐃⵠⵠⵠΔⵠ: "img/night-bag79.png",
        ΔᐃΔΔΔⲆΔ: "img/day-bag80.png",
        ⵠᐃⵠᐃΔᐃⲆ: "img/night-bag80.png",
        Ⲇⵠⵠᐃⵠⵠᐃ: "img/day-accessory0.png",
        ΔⲆΔⲆⲆⵠᐃ: "img/day-accessory0-pacques.png",
        ΔⵠⲆᐃⵠΔΔ: "img/night-accessory0-pacques.png",
        ΔⵠⲆⲆⵠᐃᐃ: "img/day-accessory13.png",
        ᐃⲆᐃᐃⲆΔⲆ: "img/night-accessory13.png",
        ⵠᐃⵠᐃⲆⲆᐃ: "img/day-accessory14.png",
        ᐃⵠⲆⲆᐃᐃⵠ: "img/night-accessory14.png",
        ⵠⵠⵠⵠⲆᐃⵠ: "img/day-accessory15.png",
        ⲆΔΔᐃΔⲆΔ: "img/night-accessory15.png",
        ΔⵠΔΔⵠᐃΔ: "img/day-accessory16.png",
        ΔⵠⵠⵠᐃΔᐃ: "img/night-accessory16.png",
        ᐃᐃΔⵠᐃΔΔ: "img/day-accessory17.png",
        ᐃΔΔΔΔᐃᐃ: "img/day-accessory17.png",
        ΔΔⵠΔⲆⵠⲆ: "img/day-accessory19.png",
        ⵠΔⲆᐃᐃⵠΔ: "img/night-accessory19.png",
        ⵠⲆᐃⵠⵠⲆⲆ: "img/day-accessory20.png",
        ᐃᐃⲆΔΔΔΔ: "img/night-accessory20.png",
        ⵠᐃᐃᐃⲆΔᐃ: "img/day-accessory21.png",
        ⵠΔⲆΔΔΔⵠ: "img/night-accessory21.png",
        ΔᐃΔᐃⵠⵠΔ: "img/day-accessory22.png",
        ΔⵠⲆΔᐃΔⲆ: "img/night-accessory22.png",
        ΔⲆⲆᐃⲆΔΔ: "img/day-accessory23.png",
        ΔΔΔⲆⲆⲆⲆ: "img/night-accessory23.png",
        ⲆᐃΔΔᐃΔⲆ: "img/day-accessory24.png",
        ΔᐃΔᐃⵠΔⵠ: "img/night-accessory24.png",
        ᐃⲆⵠⵠⲆⲆΔ: "img/day-accessory25.png",
        ΔΔᐃᐃΔΔⵠ: "img/night-accessory25.png",
        ⲆΔᐃⲆΔᐃⲆ: "img/day-accessory26.png",
        ΔΔΔΔᐃⲆᐃ: "img/night-accessory26.png",
        ΔᐃᐃⲆΔᐃᐃ: "img/day-accessory27.png",
        ⲆΔⲆⲆⲆⵠⵠ: "img/night-accessory27.png",
        ΔⲆⵠⵠΔⲆⲆ: "img/day-accessory18.png",
        ⵠᐃᐃⵠᐃΔⲆ: "img/night-accessory18.png",
        ⲆᐃⲆᐃᐃⵠΔ: "img/day-accessory29.png",
        ⵠⲆⵠⲆⵠᐃᐃ: "img/night-accessory29.png",
        ΔΔⵠⲆᐃⵠΔ: "img/day-accessory30.png",
        ⵠⵠᐃⲆⲆⵠΔ: "img/night-accessory30.png",
        ΔᐃΔΔⲆⵠᐃ: "img/day-accessory31.png",
        ⲆⵠΔΔΔΔⵠ: "img/night-accessory31.png",
        ΔⲆⵠΔⲆⵠⵠ: "img/day-accessory32.png",
        ⲆᐃΔᐃⵠᐃⵠ: "img/night-accessory32.png",
        Ⲇᐃⵠᐃⵠⵠⵠ: "img/day-accessory33.png",
        ΔⵠⲆΔⵠⲆⲆ: "img/night-accessory33.png",
        ⲆᐃⵠΔⲆⲆᐃ: "img/day-accessory34.png",
        ⲆⲆⲆⵠᐃΔⵠ: "img/night-accessory34.png",
        ᐃΔᐃⲆⲆΔⲆ: "img/day-accessory35.png",
        ⲆᐃᐃᐃⵠⲆΔ: "img/night-accessory35.png",
        ΔⵠⲆᐃΔⲆΔ: "img/day-accessory28.png",
        ΔᐃᐃⲆⲆΔⲆ: "img/night-accessory28.png",
        ᐃⲆΔΔⲆⵠⵠ: "img/day-accessory36.png",
        ⲆᐃᐃΔⲆΔⲆ: "img/night-accessory36.png",
        ⵠⲆᐃⵠⲆΔᐃ: "img/day-accessory37.png",
        ⲆⵠΔⵠⵠⲆΔ: "img/night-accessory37.png",
        ⵠⲆⵠⲆΔᐃᐃ: "img/day-accessory39.png",
        ⵠᐃᐃⵠΔΔΔ: "img/night-accessory39.png",
        ⵠⲆⵠⵠⵠⲆΔ: "img/day-accessory40.png",
        ΔⵠᐃᐃᐃⵠΔ: "img/night-accessory40.png",
        ΔⲆΔⵠᐃⲆⲆ: "img/day-accessory41.png",
        ⲆᐃΔⲆⲆᐃΔ: "img/night-accessory41.png",
        ⵠᐃᐃⲆᐃⲆⵠ: "img/day-accessory42.png",
        ⲆⵠⵠΔΔΔΔ: "img/night-accessory42.png",
        ΔⵠᐃΔⵠⵠΔ: "img/day-accessory43.png",
        Ⲇᐃᐃᐃⵠⵠⵠ: "img/night-accessory43.png",
        ᐃᐃΔⵠᐃⵠⵠ: "img/day-accessory44.png",
        ᐃⵠᐃΔⲆⲆΔ: "img/night-accessory44.png",
        ⵠⵠⵠᐃⲆᐃⵠ: "img/day-accessory38.png",
        ΔᐃⵠⵠⵠⲆⲆ: "img/night-accessory38.png",
        ⵠⲆⵠⲆᐃΔⲆ: "img/day-accessory46.png",
        ΔΔᐃⲆᐃⲆⵠ: "img/night-accessory46.png",
        ΔⲆⲆΔΔΔⵠ: "img/day-accessory47.png",
        ⵠⵠⲆⵠⲆᐃⲆ: "img/night-accessory47.png",
        ΔⵠⵠᐃᐃᐃⲆ: "img/day-accessory48.png",
        ΔⵠΔⲆⵠΔⵠ: "img/night-accessory48.png",
        ΔᐃΔⵠⲆⲆΔ: "img/day-accessory49.png",
        ⲆⵠⲆᐃⲆΔᐃ: "img/night-accessory49.png",
        ΔᐃⵠΔΔΔΔ: "img/day-accessory45.png",
        ⵠΔⵠΔᐃᐃⵠ: "img/night-accessory45.png",
        ⵠΔΔᐃΔΔⵠ: "img/day-accessory50.png",
        ⵠᐃᐃΔⵠⵠΔ: "img/night-accessory50.png",
        ΔⲆⵠⵠᐃⲆⲆ: "img/day-accessory51.png",
        ⲆᐃΔΔⲆⵠΔ: "img/night-accessory51.png",
        ᐃΔⲆᐃⲆᐃᐃ: "img/day-accessory52.png",
        ⵠΔΔᐃᐃⵠⲆ: "img/night-accessory52.png",
        ⵠᐃΔⵠⵠΔΔ: "img/day-accessory53.png",
        ⵠⵠΔⵠⵠⲆΔ: "img/night-accessory53.png",
        ⵠΔᐃᐃᐃΔΔ: "img/day-accessory54.png",
        ⵠΔᐃⵠΔᐃⵠ: "img/night-accessory54.png",
        ΔⵠᐃΔⲆᐃⵠ: "img/day-accessory55.png",
        ⵠᐃᐃᐃᐃⵠΔ: "img/night-accessory55.png",
        ΔⲆᐃⵠᐃΔⲆ: "img/day-accessory56.png",
        ⲆᐃΔΔⵠⵠⲆ: "img/night-accessory56.png",
        ⲆⲆⲆⵠⲆᐃⲆ: "img/day-accessory57.png",
        ⲆⲆⵠΔΔᐃⵠ: "img/night-accessory57.png",
        ΔⵠΔᐃⵠⲆⵠ: "img/day-accessory58.png",
        ᐃⲆΔⵠΔΔᐃ: "img/night-accessory58.png",
        ΔΔΔᐃⲆΔᐃ: "img/day-accessory59.png",
        ⵠⲆᐃⵠⵠⲆⵠ: "img/night-accessory59.png",
        ᐃΔᐃⵠⲆΔⵠ: "img/day-accessory60.png",
        ΔⲆⵠᐃΔⵠⵠ: "img/night-accessory60.png",
        ᐃᐃΔⲆᐃⲆΔ: "img/day-accessory61.png",
        ⲆΔⵠᐃⵠᐃⵠ: "img/night-accessory61.png",
        ΔᐃΔΔᐃΔᐃ: "img/day-accessory62.png",
        ᐃⲆⵠΔΔᐃⲆ: "img/night-accessory62.png",
        ⵠΔⵠΔⵠᐃⲆ: "img/day-accessory63.png",
        ⵠⵠⵠΔⵠΔΔ: "img/night-accessory63.png",
        ⵠΔᐃᐃᐃⵠΔ: "img/day-accessory64.png",
        ⵠⵠᐃⵠⲆⲆⲆ: "img/night-accessory64.png",
        ⲆⵠΔⵠᐃⲆᐃ: "img/day-accessory65.png",
        ΔⵠⲆⵠᐃⵠⲆ: "img/night-accessory65.png",
        ⲆⲆⲆᐃᐃⲆᐃ: "img/day-accessory66.png",
        ᐃⵠⲆΔⲆⲆⲆ: "img/night-accessory66.png",
        ⲆⲆⲆⵠΔᐃⲆ: "img/day-accessory67.png",
        ⵠⲆⵠΔΔΔⲆ: "img/night-accessory67.png",
        ⵠⲆⵠⲆΔⲆⲆ: "img/day-accessory68.png",
        ᐃᐃⲆⵠⲆᐃⲆ: "img/night-accessory68.png",
        ⲆⲆⵠⲆⵠΔᐃ: "img/day-accessory69.png",
        ΔᐃⵠⲆᐃⵠⵠ: "img/night-accessory69.png",
        ⵠⲆΔⵠⵠΔⵠ: "img/day-accessory70.png",
        ΔⲆᐃᐃᐃᐃⵠ: "img/night-accessory70.png",
        ᐃⵠΔᐃⲆⵠⲆ: "img/day-accessory71.png",
        ΔᐃᐃⵠΔΔᐃ: "img/night-accessory71.png",
        ΔⲆΔΔΔΔΔ: "img/day-accessory72.png",
        ⲆⵠΔᐃΔⲆᐃ: "img/night-accessory72.png",
        ⵠᐃΔᐃᐃᐃⵠ: "img/day-accessory73.png",
        ⲆᐃⲆΔᐃⲆⵠ: "img/night-accessory73.png",
        ⵠᐃᐃⲆᐃⲆΔ: "img/day-accessory74.png",
        ⵠΔⲆⵠⵠⲆΔ: "img/night-accessory74.png",
        ΔᐃΔⵠᐃⵠᐃ: "img/day-accessory75.png",
        ᐃΔⵠⲆⲆΔⵠ: "img/night-accessory75.png",
        ⵠΔⵠΔΔⲆⲆ: "img/day-accessory76.png",
        ΔⵠᐃΔΔᐃᐃ: "img/night-accessory76.png",
        ᐃⵠΔⵠΔΔᐃ: "img/day-accessory77.png",
        ⵠΔⲆⲆⲆᐃⵠ: "img/night-accessory77.png",
        ⲆᐃⵠᐃⵠΔⲆ: "img/day-accessory78.png",
        ⲆΔⵠⵠⵠⵠΔ: "img/night-accessory78.png",
        ΔⵠⲆⵠΔⲆⲆ: "img/day-accessory79.png",
        ⵠⲆᐃⲆᐃᐃΔ: "img/night-accessory79.png",
        ΔΔΔⵠᐃΔᐃ: "img/day-accessory80.png",
        ⵠⵠⲆⲆⵠᐃⲆ: "img/night-accessory80.png",
        ⵠΔⲆᐃΔᐃΔ: "img/day-accessory81.png",
        ΔⲆᐃⲆΔⲆΔ: "img/night-accessory81.png",
        ΔⲆᐃΔΔⵠⵠ: "img/day-accessory83.png",
        ᐃᐃᐃⵠⵠΔⲆ: "img/night-accessory83.png",
        ΔᐃᐃᐃΔⵠᐃ: "img/day-accessory84.png",
        ᐃΔΔΔⵠΔⲆ: "img/night-accessory84.png",
        ⲆⲆᐃΔᐃⲆⵠ: "img/day-accessory85.png",
        ⵠⲆᐃᐃΔⲆⲆ: "img/night-accessory85.png",
        ⲆΔΔᐃⵠᐃᐃ: "img/day-accessory86.png",
        ΔⲆⵠⵠⵠᐃⵠ: "img/night-accessory86.png",
        ⵠⵠⲆⵠΔⲆᐃ: "img/day-accessory87.png",
        ⵠΔⵠΔᐃⲆⲆ: "img/night-accessory87.png",
        ⵠⵠΔⵠⲆⲆⲆ: "img/day-accessory88.png",
        ⲆⲆⲆΔΔᐃΔ: "img/night-accessory88.png",
        Ⲇⵠᐃᐃⵠⵠⵠ: "img/day-accessory89.png",
        ᐃⵠΔΔΔⵠⲆ: "img/night-accessory89.png",
        ᐃΔᐃᐃΔⵠΔ: "img/day-accessory90.png",
        ᐃⲆⲆΔᐃΔⵠ: "img/night-accessory90.png",
        ΔⵠᐃΔᐃᐃⲆ: "img/day-accessory91.png",
        ᐃⵠᐃᐃⲆⲆᐃ: "img/night-accessory91.png",
        ⲆΔⵠᐃⲆᐃΔ: "img/day-accessory92.png",
        ΔⲆⲆᐃⵠⵠⲆ: "img/night-accessory92.png",
        ΔⲆΔⵠⵠⲆΔ: "img/day-accessory93.png",
        ΔⵠⵠⵠᐃⵠⲆ: "img/night-accessory93.png",
        ᐃⵠⲆΔⵠΔᐃ: "img/day-accessory94.png",
        ⵠⲆⵠⵠⵠΔΔ: "img/night-accessory94.png",
        ⵠΔⵠΔⲆᐃⵠ: "img/day-accessory95.png",
        ᐃⲆΔⵠΔΔⵠ: "img/night-accessory95.png",
        ⲆⲆΔⵠⲆⵠᐃ: "img/day-accessory96.png",
        ᐃΔᐃᐃⵠΔᐃ: "img/night-accessory96.png",
        ΔⲆᐃᐃΔⵠⵠ: "img/day-accessory97.png",
        ⲆⵠⲆⵠᐃΔⲆ: "img/night-accessory97.png",
        ΔⵠᐃᐃⲆⵠⲆ: "img/day-accessory98.png",
        ᐃⲆΔⲆⲆⵠΔ: "img/night-accessory98.png",
        ΔⵠΔΔⵠΔᐃ: "img/day-accessory99.png",
        ⵠΔⵠᐃᐃᐃⲆ: "img/night-accessory99.png",
        ⲆⲆⲆⲆᐃᐃⲆ: "img/day-accessory100.png",
        ΔᐃᐃⵠⵠΔΔ: "img/night-accessory100.png",
        ⵠⵠᐃⲆᐃⵠⲆ: "img/day-accessory101.png",
        ΔΔⲆΔⵠᐃᐃ: "img/night-accessory101.png",
        ΔᐃᐃᐃⵠⲆⵠ: "img/day-accessory102.png",
        ΔⲆᐃⲆⵠⵠⵠ: "img/night-accessory102.png",
        ᐃΔᐃⲆⵠⵠⵠ: "img/day-accessory103.png",
        ΔⲆΔⵠΔᐃⲆ: "img/night-accessory103.png",
        ⵠⵠⲆΔⲆⵠⲆ: "img/day-accessory104.png",
        ⵠⵠΔⵠᐃⲆΔ: "img/night-accessory104.png",
        ᐃⲆⲆⲆⲆⲆⵠ: "img/day-accessory105.png",
        ᐃⲆᐃᐃΔⵠᐃ: "img/night-accessory105.png",
        ⵠⵠⲆⲆⲆⲆᐃⲆΔ: "img/day-accessory106.png",
        ⵠⵠᐃⲆᐃⵠⲆⵠⵠ: "img/night-accessory106.png",
        ᐃΔⲆⲆᐃⲆΔᐃᐃ: "img/day-accessory107.png",
        ᐃᐃΔⲆⵠⲆⵠᐃΔ: "img/night-accessory107.png",
        ᐃⲆⵠⲆⵠⵠⵠ: "img/day-accessory82.png",
        ΔΔⲆⵠⲆⵠⵠ: "img/night-accessory82.png",
        ⵠᐃⲆⲆΔⲆᐃ: "img/day-book0.png",
        ᐃⵠΔⵠⵠΔᐃ: "img/night-book0.png",
        ⵠⵠⲆΔΔⵠⲆ: "img/day-book1.png",
        ⵠΔᐃΔΔΔⵠ: "img/night-book1.png",
        ΔⵠΔΔⲆⲆⵠ: "img/day-book2.png",
        ᐃᐃⲆΔⵠⲆΔ: "img/night-book2.png",
        ⲆⵠⵠⵠⲆⲆⵠ: "img/day-book3.png",
        ᐃⲆᐃⵠⵠⲆΔ: "img/night-book3.png",
        ⵠⵠⲆΔⲆⲆᐃ: "img/day-book4.png",
        ΔᐃᐃⵠⲆᐃᐃ: "img/night-book4.png",
        ⲆΔⲆᐃⵠΔΔ: "img/day-book5.png",
        ᐃⲆᐃΔⵠⲆⵠ: "img/night-book5.png",
        ᐃᐃΔᐃΔᐃᐃ: "img/day-book6.png",
        ΔΔΔⲆᐃᐃⲆ: "img/night-book6.png",
        ᐃᐃΔⵠⵠⵠⲆ: "img/day-book7.png",
        ᐃΔΔⵠΔΔⵠ: "img/night-book7.png",
        ΔΔⲆᐃΔᐃⵠ: "img/day-book8.png",
        ᐃⲆᐃᐃΔⵠⵠ: "img/night-book8.png",
        ᐃⲆⵠΔⲆⵠⲆ: "img/day-book9.png",
        ⵠΔΔⲆⵠᐃᐃ: "img/night-book9.png",
        ΔⵠᐃⵠⵠΔΔ: "img/day-book10.png",
        ᐃᐃⲆᐃᐃΔⲆ: "img/night-book10.png",
        ⵠⲆΔᐃᐃⵠⵠ: "img/day-book11.png",
        ᐃⵠᐃⲆⵠΔⲆ: "img/night-book11.png",
        ⵠⵠᐃⲆⵠⲆⵠ: "img/day-book12.png",
        ⲆⲆⵠᐃⵠᐃᐃ: "img/night-book12.png",
        ΔᐃᐃΔⵠᐃⵠ: "img/day-book13.png",
        ᐃΔⵠⵠΔⲆⲆ: "img/night-book13.png",
        ΔᐃᐃᐃᐃⵠΔ: "img/day-book14.png",
        ΔᐃⲆᐃΔⵠᐃ: "img/night-book14.png",
        ΔᐃᐃⲆΔᐃΔ: "img/day-book15.png",
        ᐃᐃⵠⲆᐃⵠⵠ: "img/night-book15.png",
        ᐃⲆⵠΔᐃⲆⲆ: "img/day-book16.png",
        ΔᐃⲆᐃⵠΔⵠ: "img/night-book16.png",
        ⲆΔΔⲆⵠΔᐃ: "img/day-book17.png",
        ᐃᐃⲆⲆⵠΔᐃ: "img/night-book17.png",
        ⵠΔⲆᐃΔΔⵠ: "img/day-book18.png",
        ⲆΔⵠⲆⲆᐃⵠ: "img/night-book18.png",
        ⲆⲆⵠᐃⲆⵠⲆ: "img/day-book19.png",
        ᐃⲆΔⲆⲆⵠⵠ: "img/night-book19.png",
        ⵠⲆΔⵠΔⲆΔ: "img/day-book20.png",
        ΔⵠⵠᐃⲆᐃⵠ: "img/night-book20.png",
        ᐃᐃΔᐃΔⲆⲆ: "img/day-book21.png",
        ⵠⲆⵠᐃⵠᐃⵠ: "img/night-book21.png",
        ⲆⵠΔⲆⲆΔΔ: "img/day-book22.png",
        ⲆΔᐃⲆⵠⲆⲆ: "img/night-book22.png",
        ΔⲆᐃΔⲆΔⲆ: "img/day-book23.png",
        ΔⲆⲆⵠⵠΔⵠ: "img/night-book23.png",
        ΔᐃΔᐃⲆᐃⲆ: "img/day-book24.png",
        ⵠΔⵠΔᐃᐃⲆ: "img/night-book24.png",
        ᐃⲆΔⲆⲆⲆⲆ: "img/day-book25.png",
        ΔⲆᐃᐃᐃΔᐃ: "img/night-book25.png",
        ΔᐃᐃⲆᐃⲆᐃ: "img/day-book26.png",
        ⲆᐃⵠᐃΔⲆⲆ: "img/night-book26.png",
        ⵠΔⵠΔⲆⵠᐃ: "img/day-book27.png",
        ΔⵠⲆΔᐃⲆⵠ: "img/night-book27.png",
        ⵠⵠⲆⲆᐃⲆⲆ: "img/day-book28.png",
        ⲆⵠⵠⵠⲆⵠⵠ: "img/night-book28.png",
        ΔᐃᐃⲆⵠΔⵠ: "img/day-book29.png",
        ᐃⵠⵠⵠⵠᐃΔ: "img/night-book29.png",
        ᐃᐃΔᐃⵠᐃΔ: "img/day-book30.png",
        ⵠⲆⵠⲆⵠⵠᐃ: "img/night-book30.png",
        ⵠⵠⵠⵠⵠᐃⵠ: "img/day-book31.png",
        ⲆᐃⵠⲆᐃⲆΔ: "img/night-book31.png",
        ᐃΔⲆⵠᐃⵠⵠ: "img/day-book32.png",
        ᐃⲆᐃⵠⵠΔΔ: "img/night-book32.png",
        ᐃⲆᐃΔⲆΔⵠ: "img/day-book33.png",
        ⵠⵠΔᐃⲆΔᐃ: "img/night-book33.png",
        ⵠⲆΔᐃⲆᐃⵠ: "img/day-book34.png",
        ⲆᐃΔᐃᐃⲆΔ: "img/night-book34.png",
        ΔᐃⲆⲆⵠᐃΔ: "img/day-book35.png",
        ⵠⵠΔⲆᐃⲆΔ: "img/night-book35.png",
        ⵠΔᐃⵠᐃΔⵠ: "img/day-book36.png",
        ΔⵠᐃΔᐃΔᐃ: "img/night-book36.png",
        ΔⲆⵠⲆΔⵠⵠⲆⵠ: "img/day-book37.png",
        ΔᐃΔᐃⵠⵠᐃΔΔ: "img/night-book37.png",
        ᐃⲆⲆΔⲆⵠᐃ: "img/day-book38.png",
        ᐃⵠᐃᐃⵠⵠⲆ: "img/night-book38.png",
        ΔⲆᐃᐃⲆⵠΔ: "img/day-book39.png",
        ⵠⲆᐃⵠⲆⵠⵠ: "img/night-book39.png",
        ⲆΔΔⲆⵠⵠⲆ: "img/day-book40.png",
        ⲆⵠⵠᐃᐃⲆⲆ: "img/night-book40.png",
        ⵠᐃⵠᐃⵠⵠᐃ: "img/day-book41.png",
        ᐃᐃΔⵠᐃⲆΔ: "img/night-book41.png",
        ΔᐃᐃⲆⲆᐃΔ: "img/day-book42.png",
        ᐃⲆⵠΔⵠᐃΔ: "img/night-book42.png",
        ⵠᐃΔᐃΔᐃⲆ: "img/day-book43.png",
        ᐃⵠΔᐃⲆⵠᐃ: "img/night-book43.png",
        ΔΔΔⲆⲆΔⵠ: "img/day-book44.png",
        ΔⲆᐃⵠⲆⲆᐃ: "img/night-book44.png",
        ΔⲆⵠⲆⲆⵠⵠ: "img/day-book45.png",
        ⲆᐃⲆⵠⵠⵠᐃ: "img/night-book45.png",
        ΔΔΔΔⵠⲆΔ: "img/day-book46.png",
        ⵠΔⵠⲆᐃᐃΔ: "img/night-book46.png",
        ᐃΔΔΔᐃⲆΔ: "img/day-book47.png",
        ΔΔᐃᐃΔᐃΔ: "img/night-book47.png",
        ⲆᐃⲆⵠⵠΔⵠ: "img/day-book48.png",
        ⵠⲆᐃⵠⵠⲆᐃ: "img/night-book48.png",
        ⵠᐃΔⵠⲆΔⵠ: "img/day-book49.png",
        ΔΔΔⵠᐃᐃᐃ: "img/night-book49.png",
        ⵠⲆⵠⵠᐃΔᐃ: "img/day-book50.png",
        ᐃᐃⲆᐃⵠⲆᐃ: "img/night-book50.png",
        ⲆᐃⲆⲆΔᐃΔ: "img/day-crate1.png",
        ⵠᐃⲆⲆⲆⵠⲆ: "img/night-crate1.png",
        ⲆΔⲆⵠΔⲆⲆ: "img/day-crate2.png",
        ⲆΔΔⲆΔⲆⲆ: "img/night-crate2.png",
        ΔⲆᐃⵠᐃᐃᐃ: "img/day-crate3.png",
        ΔΔΔΔΔᐃᐃ: "img/night-crate3.png",
        ΔⵠⵠⵠΔΔⲆ: "img/day-crate4.png",
        ⵠΔᐃΔⵠⲆᐃ: "img/night-crate4.png",
        ΔⲆⵠᐃⵠⲆⲆ: "img/day-crate5.png",
        ⲆⵠⲆⵠⵠⲆΔ: "img/night-crate5.png",
        ΔΔᐃⲆⲆⲆⵠ: "img/day-crate6.png",
        ⵠᐃⵠᐃΔⵠⲆ: "img/night-crate6.png",
        ⲆⲆΔⲆᐃΔΔ: "img/day-crate7.png",
        ᐃⲆΔΔⵠΔⵠ: "img/night-crate7.png",
        ᐃⵠΔᐃΔᐃⲆ: "img/day-crate8.png",
        ΔΔⲆⵠⵠⵠⲆ: "img/night-crate8.png",
        ⵠⲆⲆΔᐃⵠⵠ: "img/day-crate9.png",
        ⲆΔᐃΔΔᐃⲆ: "img/night-crate9.png",
        ⵠᐃⲆⲆⲆΔΔ: "img/day-crate10.png",
        ⵠⲆⲆΔΔⲆΔ: "img/night-crate10.png",
        ᐃⵠⵠΔΔΔᐃ: "img/day-crate11.png",
        ⵠⲆⵠΔΔⵠⵠ: "img/night-crate11.png",
        ⵠⵠᐃᐃΔⲆⵠ: "img/day-crate12.png",
        ᐃⵠⲆΔᐃᐃⵠ: "img/night-crate12.png",
        ⵠᐃΔᐃΔⲆⲆ: "img/day-crate13.png",
        ⲆᐃⵠΔΔⲆΔ: "img/night-crate13.png",
        ⲆᐃⵠⵠⵠⵠⲆ: "img/day-crate14.png",
        ᐃⵠᐃΔⵠΔⵠ: "img/night-crate14.png",
        ⵠΔⲆᐃᐃⵠⵠ: "img/day-crate15.png",
        ⵠⵠᐃⵠᐃⵠⲆ: "img/night-crate15.png",
        ᐃᐃΔⵠᐃᐃⲆ: "img/day-crate16.png",
        ⵠΔⵠⵠⲆᐃᐃ: "img/night-crate16.png",
        ⵠᐃⲆⲆᐃⲆΔ: "img/day-crate17.png",
        ΔᐃⲆᐃᐃΔᐃ: "img/night-crate17.png",
        ⲆⲆⵠΔΔΔⲆ: "img/day-crate18.png",
        ⲆⵠᐃΔⲆᐃⲆ: "img/night-crate18.png",
        ΔⲆⲆΔⵠⲆⵠ: "img/day-crate19.png",
        ᐃᐃⵠⵠΔⲆΔ: "img/night-crate19.png",
        ⵠⵠᐃᐃⲆᐃⵠ: "img/day-crate20.png",
        ΔⲆⵠⵠᐃⵠⲆ: "img/night-crate20.png",
        ⲆᐃΔⵠⲆⲆⲆ: "img/day-crate21.png",
        ΔⵠᐃᐃⵠΔⵠ: "img/night-crate21.png",
        ΔᐃⲆⲆⲆΔⲆ: "img/day-crate22.png",
        ⲆⲆⵠΔⲆᐃⵠ: "img/night-crate22.png",
        ΔΔⵠΔⲆᐃᐃ: "img/day-crate23.png",
        ⵠⵠᐃⲆⵠⲆΔ: "img/night-crate23.png",
        ⵠⲆⵠΔⲆᐃᐃ: "img/day-crate24.png",
        ᐃᐃᐃΔⲆΔᐃ: "img/night-crate24.png",
        ⵠⵠⵠⵠⵠⵠΔ: "img/day-crate25.png",
        ⲆⲆΔⲆΔᐃᐃ: "img/night-crate25.png",
        ΔⲆΔᐃⲆΔⵠ: "img/day-crate26.png",
        Δⵠᐃᐃᐃᐃⵠ: "img/night-crate26.png",
        ᐃΔᐃΔⲆⵠᐃ: "img/day-crate27.png",
        ⵠⵠⵠⲆⵠΔⲆ: "img/night-crate27.png",
        ᐃᐃᐃᐃⲆⵠᐃ: "img/day-crate28.png",
        ⵠⲆΔⲆᐃΔⲆ: "img/night-crate28.png",
        ΔⵠⵠⲆⵠΔⵠ: "img/day-crate29.png",
        ⵠⲆⵠᐃΔⵠⲆ: "img/night-crate29.png",
        ᐃⲆᐃᐃⲆⵠΔ: "img/day-crate30.png",
        ΔⲆΔΔΔⲆⲆ: "img/night-crate30.png",
        ᐃⲆΔⵠⲆΔⲆ: "img/day-crate31.png",
        ΔΔᐃⵠⲆⲆΔ: "img/night-crate31.png",
        ⲆⲆⵠⲆⲆⵠᐃ: "img/day-crate32.png",
        ᐃⲆᐃⵠΔᐃΔ: "img/night-crate32.png",
        ΔΔᐃⲆΔΔᐃ: "img/day-crate33.png",
        ⲆⵠⵠᐃᐃⵠΔ: "img/night-crate33.png",
        ⲆΔⵠΔᐃΔⲆ: "img/day-crate34.png",
        ΔΔᐃΔᐃᐃᐃ: "img/night-crate34.png",
        ᐃⲆΔΔⵠᐃⲆ: "img/day-crate35.png",
        ⵠⲆΔⵠΔΔΔ: "img/night-crate35.png",
        ΔᐃᐃᐃΔᐃᐃ: "img/day-crate36.png",
        ⵠΔᐃⵠⵠΔⵠ: "img/night-crate36.png",
        ⵠᐃⲆΔΔⲆΔ: "img/day-crate37.png",
        ΔΔᐃⵠᐃᐃⵠ: "img/night-crate37.png",
        ᐃⲆᐃⲆⵠᐃⲆ: "img/day-crate38.png",
        ⵠⵠΔΔΔᐃᐃ: "img/night-crate38.png",
        ⵠⲆⲆⲆΔⲆⲆ: "img/day-crate39.png",
        ⲆⲆᐃⵠΔⵠⲆ: "img/night-crate39.png",
        ⲆⵠΔᐃΔⲆⲆ: "img/day-crate40.png",
        ΔⲆΔⲆᐃⲆᐃ: "img/night-crate40.png",
        ΔⵠⵠⲆᐃⲆⲆ: "img/day-crate41.png",
        ⲆᐃᐃⲆᐃΔⵠ: "img/night-crate41.png",
        ⵠᐃⲆⵠⵠᐃⲆ: "img/day-crate42.png",
        ΔΔⵠΔΔΔⲆ: "img/night-crate42.png",
        ᐃⲆᐃⵠⲆᐃᐃ: "img/day-crate43.png",
        ᐃΔΔΔⵠΔᐃ: "img/night-crate43.png",
        ⲆᐃⲆⲆⵠΔᐃ: "img/day-crate44.png",
        ⲆⵠⵠΔⲆΔⲆ: "img/night-crate44.png",
        ⲆᐃΔΔΔᐃᐃ: "img/day-crate45.png",
        ΔΔⲆⲆΔⲆⲆ: "img/night-crate45.png",
        ᐃⲆⵠⵠᐃᐃⵠ: "img/day-crate46.png",
        ⲆᐃᐃᐃⵠⲆᐃ: "img/night-crate46.png",
        ⲆⵠⲆⲆΔΔᐃ: "img/day-crate47.png",
        ΔⵠⲆⲆⲆᐃⵠ: "img/night-crate47.png",
        ⲆᐃΔⲆᐃᐃᐃ: "img/day-crate48.png",
        ΔᐃⵠⵠᐃⵠΔ: "img/night-crate48.png",
        ⲆⵠⵠⲆⲆᐃΔ: "img/day-crate49.png",
        ᐃΔⲆⵠΔⲆᐃ: "img/night-crate49.png",
        ΔΔⲆΔⵠΔⲆ: "img/day-crate50.png",
        ⲆⲆⲆⵠᐃⲆᐃ: "img/night-crate50.png",
        ᐃⲆⲆⵠΔᐃΔ: "img/day-crate51.png",
        ⵠᐃⵠᐃⲆΔⲆ: "img/night-crate51.png",
        ⲆᐃⲆⵠⲆⲆΔ: "img/day-crate52.png",
        ⲆΔⵠΔᐃᐃⲆ: "img/night-crate52.png",
        ⲆΔΔⲆⲆΔΔ: "img/day-crate53.png",
        ᐃⲆΔⲆⲆΔᐃ: "img/night-crate53.png",
        ⵠⲆΔⲆᐃᐃᐃ: "img/day-crate54.png",
        ᐃΔΔⵠⵠΔᐃ: "img/night-crate54.png",
        ΔⲆⲆⵠΔᐃᐃ: "img/day-crate55.png",
        ⲆⲆᐃⵠΔⲆᐃ: "img/night-crate55.png",
        ⲆᐃΔⵠΔᐃⲆ: "img/day-crate56.png",
        ᐃⲆᐃΔΔᐃⵠ: "img/night-crate56.png",
        ΔⵠΔⵠⵠᐃⲆ: "img/day-crate57.png",
        ΔᐃⲆᐃⲆⲆᐃ: "img/night-crate57.png",
        ᐃⵠΔᐃᐃΔⲆ: "img/day-crate58.png",
        ᐃᐃΔⵠΔⵠⵠ: "img/night-crate58.png",
        ᐃΔΔΔⲆⵠΔ: "img/day-crate59.png",
        ᐃᐃᐃⵠΔⵠᐃ: "img/night-crate59.png",
        ⲆᐃⲆᐃᐃΔΔ: "img/day-crate60.png",
        ΔΔⲆᐃΔᐃⲆ: "img/night-crate60.png",
        ΔⲆⲆⲆΔᐃΔ: "img/day-crate61.png",
        ⵠΔᐃⲆᐃᐃⵠ: "img/night-crate61.png",
        ⵠᐃⵠᐃᐃΔⵠ: "img/day-crate62.png",
        ᐃⵠΔⲆᐃᐃΔ: "img/night-crate62.png",
        ᐃⲆⲆⲆⵠᐃᐃ: "img/day-crate63.png",
        ᐃΔΔⲆΔΔᐃ: "img/night-crate63.png",
        ᐃᐃΔⵠᐃᐃⵠ: "img/day-crate64.png",
        ΔⲆΔΔⲆⵠΔ: "img/night-crate64.png",
        ⲆⵠΔⵠⵠⲆⵠ: "img/day-crate65.png",
        ΔᐃΔⵠΔᐃⲆ: "img/night-crate65.png",
        ᐃΔⲆⲆⵠᐃᐃ: "img/day-crate66.png",
        ΔᐃⲆⵠⲆⵠⵠ: "img/night-crate66.png",
        ᐃⲆⵠΔᐃⵠΔ: "img/day-crate67.png",
        ⲆΔⲆⲆⲆᐃΔ: "img/night-crate67.png",
        ΔⵠⲆΔⲆⲆᐃ: "img/day-crate68.png",
        ⲆΔᐃⵠΔΔᐃ: "img/night-crate68.png",
        ⲆᐃⵠⲆⵠΔΔ: "img/day-crate69.png",
        ΔΔΔΔⵠⵠᐃ: "img/night-crate69.png",
        ⵠΔΔⵠⲆⵠⵠ: "img/day-crate70.png",
        ᐃⲆⵠⵠᐃⲆⵠ: "img/night-crate70.png",
        ⲆⲆΔΔᐃΔⵠ: "img/day-crate71.png",
        ⵠⵠᐃᐃⵠⵠⵠ: "img/night-crate71.png",
        ⵠᐃⵠⵠⲆⲆⵠ: "img/day-crate72.png",
        ⲆⲆⵠⵠⲆᐃᐃ: "img/night-crate72.png",
        ΔΔΔᐃΔⵠΔ: "img/day-crate73.png",
        ᐃΔⵠⵠⵠΔΔ: "img/night-crate73.png",
        ΔⲆᐃΔΔᐃⲆ: "img/day-crate74.png",
        ᐃⲆⵠⵠΔΔⲆ: "img/night-crate74.png",
        ⲆⵠΔⲆᐃΔⵠ: "img/day-crate75.png",
        ᐃΔΔᐃΔΔᐃ: "img/night-crate75.png",
        ΔⲆᐃⲆⲆⲆⲆ: "img/day-crate76.png",
        ⲆⵠΔΔⵠᐃᐃ: "img/night-crate76.png",
        ᐃⲆΔⲆⵠⲆΔ: "img/day-crate77.png",
        ⲆᐃᐃᐃᐃΔᐃ: "img/night-crate77.png",
        ΔΔΔΔΔⵠᐃ: "img/day-crate78.png",
        ᐃⵠᐃⲆᐃᐃⲆ: "img/night-crate78.png",
        ΔᐃⲆⲆᐃΔᐃ: "img/day-crate79.png",
        ⲆⵠⲆᐃΔⵠⵠ: "img/night-crate79.png",
        ΔᐃⵠΔΔⲆᐃ: "img/day-herb0.png",
        ΔⲆⵠⵠΔΔⵠ: "img/day-herb1.png",
        ΔⲆⵠⵠΔⵠⵠ: "img/day-herb2.png",
        ᐃⲆΔⲆΔⲆΔ: "img/day-herb3.png",
        ⲆⵠⵠΔⲆⲆⲆ: "img/day-herb4.png",
        ᐃⵠⲆΔΔⵠⵠ: "img/day-herb5.png",
        ᐃᐃΔᐃⵠⲆⲆ: "img/day-herb6.png",
        ΔᐃⲆᐃⲆⲆⵠ: "img/day-herb7.png",
        ⵠⲆᐃⵠᐃᐃⲆ: "img/day-herb8.png",
        ᐃΔΔΔⲆⵠⵠ: "img/day-herb9.png",
        ⲆΔⵠⵠΔⵠⲆ: "img/day-herb10.png",
        ΔⵠⲆⲆΔᐃΔ: "img/day-herb11.png",
        ⲆᐃⲆⲆᐃᐃᐃ: "img/day-herb12.png",
        ΔΔⲆΔΔΔⵠ: "img/day-herb13.png",
        ⲆⲆⵠᐃⵠⲆᐃ: "img/day-herb14.png",
        ⲆᐃΔᐃᐃⲆᐃ: "img/day-herb15.png",
        ᐃΔⵠⲆⵠⵠⵠ: "img/day-shell0.png",
        ⵠⲆᐃⲆⵠⲆΔ: "img/day-shell1.png",
        ⲆᐃΔΔⲆᐃΔ: "img/day-shell2.png",
        ΔΔⵠᐃⵠⲆⵠ: "img/day-leaf1.png",
        ⵠⲆΔⲆⵠⲆᐃ: "img/day-leaf2.png",
        ⵠΔⲆΔᐃⵠⵠ: "img/day-leaf3.png",
        ⲆⲆⲆᐃⵠⵠⲆ: "img/day-leaf4.png",
        ⵠⵠΔⲆⲆⵠΔ: "img/day-leaf5.png",
        ⲆᐃᐃⲆⵠⵠⲆ: "img/day-leaf6.png",
        ΔᐃᐃⲆⲆⵠⵠ: "img/day-leaf7.png",
        ⵠⲆΔᐃΔⵠⲆ: "img/day-leaf8.png",
        ⵠᐃΔΔᐃⲆΔ: "img/day-rock0.png",
        ΔΔᐃΔⲆⲆⲆ: "img/day-rock1.png",
        ⲆⵠⲆⲆΔΔⵠ: "img/day-rock2.png",
        ᐃΔⲆᐃⵠΔᐃ: "img/day-rock3.png",
        ᐃⲆⲆᐃⵠΔᐃ: "img/day-rock4.png",
        ᐃᐃⲆᐃΔⲆⲆ: "img/day-rock5.png",
        ᐃΔᐃᐃΔⲆᐃ: "img/day-rock6.png",
        ΔΔΔⵠⵠⲆΔ: "img/day-rock7.png",
        ⲆⲆΔΔΔΔⲆ: "img/day-rock8.png",
        ΔⲆⵠΔΔⵠᐃ: "img/day-rock9.png",
        ΔⵠᐃⵠⵠⲆⵠ: "img/day-rock10.png",
        ΔᐃᐃⵠⲆⵠΔ: "img/day-rock11.png",
        ᐃⲆΔᐃⵠⲆᐃ: "img/day-rock12.png",
        ⵠᐃⲆⲆᐃᐃᐃ: "img/day-rock13.png",
        ⲆⲆⵠΔΔᐃᐃ: "img/day-flower1.png",
        ⵠΔΔΔᐃΔⲆ: "img/day-flower2.png",
        ᐃΔΔⲆⲆⵠⵠ: "img/day-flower3.png",
        ᐃⲆᐃᐃΔⲆⵠ: "img/day-flower4.png",
        ⲆⲆⵠΔᐃΔⲆ: "img/day-flower5.png",
        ⲆΔᐃⲆⲆⲆᐃ: "img/day-flower6.png",
        ⲆⲆⵠⵠⵠⲆⲆ: "img/day-flower7.png",
        ⵠⲆΔᐃⲆᐃⲆ: "img/day-flower8.png",
        ᐃᐃⵠⵠⵠᐃⲆ: "img/day-flower9.png",
        ⲆⵠⲆᐃᐃⲆᐃ: "img/day-herb16.png",
        ⵠΔΔᐃⲆⵠΔ: "img/day-herb17.png",
        ΔⵠᐃⲆⵠⲆⲆ: "img/day-herb18.png",
        ᐃᐃᐃⵠⵠⵠⲆ: "img/day-herb19.png",
        ᐃᐃⲆΔΔᐃⵠ: "img/day-herb20.png",
        ⲆᐃᐃⵠᐃⲆᐃ: "img/day-herb21.png",
        ΔⵠᐃᐃᐃΔⵠ: "img/night-herb0.png",
        ᐃᐃⲆᐃⲆⲆⵠ: "img/night-herb1.png",
        ⵠΔᐃᐃᐃⲆΔ: "img/night-herb2.png",
        ⵠⵠⵠⲆᐃᐃⲆ: "img/night-herb3.png",
        ᐃᐃᐃᐃⲆΔᐃ: "img/night-herb4.png",
        ⲆⲆΔⵠⲆΔΔ: "img/night-herb5.png",
        ΔΔᐃᐃᐃⲆᐃ: "img/night-herb6.png",
        ᐃᐃⲆⵠΔⵠⵠ: "img/night-herb7.png",
        ⲆᐃΔⲆᐃᐃΔ: "img/night-herb8.png",
        ΔΔⲆᐃⲆⲆⲆ: "img/night-herb9.png",
        ⵠⲆⵠᐃΔΔⵠ: "img/night-herb10.png",
        ⵠⵠΔΔⵠᐃᐃ: "img/night-herb11.png",
        ⲆⲆⲆᐃⵠⵠΔ: "img/night-herb12.png",
        ⵠΔⲆᐃᐃⵠⲆ: "img/night-herb13.png",
        ΔᐃⲆⵠᐃΔⲆ: "img/night-herb14.png",
        ⲆⲆⲆⲆᐃⵠᐃ: "img/night-herb15.png",
        ᐃᐃΔⵠΔᐃᐃ: "img/night-shell0.png",
        ⵠᐃᐃⵠᐃΔⵠ: "img/night-shell1.png",
        ⵠⵠⵠᐃⵠⵠⵠ: "img/night-shell2.png",
        ⲆⵠᐃⲆᐃⵠⲆ: "img/night-leaf1.png",
        ⲆⵠⵠᐃΔΔⵠ: "img/night-leaf2.png",
        ΔⵠⲆᐃⵠᐃΔ: "img/night-leaf3.png",
        ⲆⵠⲆΔⲆΔⲆ: "img/night-leaf4.png",
        ⵠⲆⲆᐃΔΔⵠ: "img/night-leaf5.png",
        ⵠⵠΔΔᐃⲆᐃ: "img/night-leaf6.png",
        ⲆᐃⲆⲆᐃⲆᐃ: "img/night-leaf7.png",
        ΔⲆᐃⵠⵠΔⲆ: "img/night-leaf8.png",
        ΔⲆᐃᐃⲆΔᐃ: "img/night-rock0.png",
        ᐃᐃᐃⵠΔⲆⲆ: "img/night-rock1.png",
        ⵠⲆⵠᐃⵠⲆΔ: "img/night-rock2.png",
        ⵠⵠⵠΔᐃΔⵠ: "img/night-rock3.png",
        ᐃⲆᐃᐃΔᐃΔ: "img/night-rock4.png",
        ᐃΔⵠⵠⵠⲆⵠ: "img/night-rock5.png",
        ΔⲆΔᐃΔΔᐃ: "img/night-rock6.png",
        ᐃΔⲆⲆᐃΔΔ: "img/night-rock7.png",
        ΔᐃᐃⲆⲆᐃⵠ: "img/night-rock8.png",
        ⵠⵠⵠⲆⲆⲆⵠ: "img/night-rock9.png",
        ⲆⵠΔᐃⵠⲆΔ: "img/night-rock10.png",
        ⲆⲆⵠᐃⲆⲆⵠ: "img/night-rock11.png",
        ΔⲆᐃᐃΔΔⵠ: "img/night-rock12.png",
        ⲆⲆⵠⵠΔⲆⲆ: "img/night-rock13.png",
        ⲆⵠΔⵠⲆⵠⲆ: "img/night-flower1.png",
        ᐃᐃΔΔⵠⵠⲆ: "img/night-flower2.png",
        ⲆᐃΔΔᐃᐃΔ: "img/night-flower3.png",
        ⵠⵠⵠᐃⲆΔⲆ: "img/night-flower4.png",
        ᐃᐃⲆⵠᐃᐃᐃ: "img/night-flower5.png",
        ΔⲆᐃⲆᐃⵠΔ: "img/night-flower6.png",
        ⵠⲆⵠⲆⵠⵠⵠ: "img/night-flower7.png",
        ᐃⲆⲆᐃⵠᐃⲆ: "img/night-flower8.png",
        ᐃⲆⲆⵠⲆᐃⵠ: "img/night-flower9.png",
        ⲆΔⲆⵠΔᐃⲆ: "img/night-herb16.png",
        ΔᐃⵠᐃᐃΔΔ: "img/night-herb17.png",
        ΔΔⵠᐃΔᐃΔ: "img/night-herb18.png",
        ᐃᐃⲆᐃᐃᐃⵠ: "img/night-herb19.png",
        ΔΔᐃⵠⲆⲆᐃ: "img/night-herb20.png",
        ΔⲆⲆⲆⲆⲆᐃ: "img/night-herb21.png",
        ⵠⵠᐃⲆᐃⲆⲆ: "img/day-river000-010-000.png",
        ⲆⲆᐃⲆᐃⲆᐃ: "img/day-river000-010-010.png",
        ᐃⵠⲆⵠᐃΔⵠ: "img/day-river000-011-000.png",
        ⵠⵠⲆⵠⵠΔⲆ: "img/day-river000-011-010.png",
        ⲆΔᐃᐃⵠⵠⵠ: "img/day-river000-011-011.png",
        ᐃΔΔⵠᐃΔᐃ: "img/day-river000-110-000.png",
        ⵠᐃⲆⵠΔΔΔ: "img/day-river000-110-010.png",
        ΔⲆΔᐃⲆᐃⲆ: "img/day-river000-110-110.png",
        ⵠΔⲆᐃⵠᐃᐃ: "img/day-river000-111-000.png",
        ᐃΔⲆΔⲆⵠⲆ: "img/day-river000-111-010.png",
        ⲆⵠⵠᐃΔⵠⲆ: "img/day-river000-111-011.png",
        ᐃᐃⲆⵠⲆΔΔ: "img/day-river000-111-110.png",
        ⲆᐃΔⲆᐃⲆΔ: "img/day-river000-111-111.png",
        ΔⲆΔⵠΔⵠⲆ: "img/day-river010-010-000.png",
        ⵠΔⵠⵠΔᐃⲆ: "img/day-river010-010-010.png",
        ΔⲆᐃⵠΔᐃᐃ: "img/day-river010-011-000.png",
        ⲆⵠⲆᐃⲆᐃᐃ: "img/day-river010-011-010.png",
        ⲆⵠΔⵠΔⲆⵠ: "img/day-river010-011-011.png",
        ⵠᐃⲆᐃⲆᐃΔ: "img/day-river010-110-000.png",
        ⵠⵠΔⵠⲆⵠΔ: "img/day-river010-110-010.png",
        ΔᐃⵠⲆΔᐃⵠ: "img/day-river010-110-110.png",
        ΔᐃⵠᐃΔⲆⵠ: "img/day-river010-111-000.png",
        ⲆᐃⵠΔᐃΔⵠ: "img/day-river010-111-010.png",
        ⲆΔΔⵠⵠᐃⲆ: "img/day-river010-111-011.png",
        ᐃⲆᐃⲆΔⵠⲆ: "img/day-river010-111-110.png",
        ⲆᐃⲆⵠᐃᐃΔ: "img/day-river010-111-111.png",
        ⲆⲆΔⲆⲆⲆⵠ: "img/day-river011-011-000.png",
        ⲆⲆⲆΔΔⲆⲆ: "img/day-river011-011-010.png",
        ΔᐃᐃᐃⲆᐃⵠ: "img/day-river011-011-011.png",
        ⲆᐃΔⲆⲆⲆᐃ: "img/day-river011-111-000.png",
        ⵠⲆⵠⲆᐃΔΔ: "img/day-river011-111-010.png",
        ΔΔⵠⲆᐃⲆᐃ: "img/day-river011-111-011.png",
        ⲆⵠⲆⲆᐃⵠᐃ: "img/day-river011-111-110.png",
        ΔⲆⲆⵠΔⵠᐃ: "img/day-river011-111-111.png",
        ⵠⵠⲆᐃⵠⲆⲆ: "img/day-river110-110-000.png",
        ⵠⲆΔᐃᐃᐃᐃ: "img/day-river110-110-010.png",
        ᐃᐃⵠᐃⲆⵠΔ: "img/day-river110-110-110.png",
        ᐃⵠᐃᐃΔⲆⲆ: "img/day-river110-111-000.png",
        ⵠΔᐃᐃᐃᐃᐃ: "img/day-river110-111-010.png",
        ⵠⵠᐃⵠⵠⵠⵠ: "img/day-river110-111-011.png",
        ⵠᐃᐃΔΔᐃⵠ: "img/day-river110-111-110.png",
        ΔᐃᐃⵠΔⵠⲆ: "img/day-river110-111-111.png",
        ⲆΔⵠⲆⵠⵠΔ: "img/day-river111-111-011.png",
        ᐃⵠⵠΔΔⲆΔ: "img/day-river111-111-110.png",
        ⲆΔⵠⲆⵠⵠΔ: "img/day-river111-111-011.png",
        ΔⲆⵠⵠΔΔⲆ: "img/day-river111-111-000.png",
        ⵠⵠΔⲆΔⵠΔ: "img/day-river111-111-111.png",
        ⵠᐃⲆⵠⵠⵠᐃ: "img/day-river111-111-010.png",
        ⵠⵠΔⵠⲆᐃⲆ: "img/night-river000-010-000.png",
        ⲆⲆⲆᐃⵠⲆᐃ: "img/night-river000-010-010.png",
        ⵠⵠⵠᐃΔᐃΔ: "img/night-river000-011-000.png",
        ΔᐃΔᐃⲆΔⵠ: "img/night-river000-011-010.png",
        ᐃⵠⲆᐃⵠΔⲆ: "img/night-river000-011-011.png",
        ΔΔᐃⵠⵠⵠⲆ: "img/night-river000-110-000.png",
        ᐃᐃΔⵠᐃᐃΔ: "img/night-river000-110-010.png",
        ⲆᐃⵠⵠⵠΔΔ: "img/night-river000-110-110.png",
        ⲆΔΔΔΔΔᐃ: "img/night-river000-111-000.png",
        ⲆᐃΔⲆΔⵠⲆ: "img/night-river000-111-010.png",
        ᐃᐃⲆⵠᐃΔΔ: "img/night-river000-111-011.png",
        ⵠⲆᐃΔⲆΔⲆ: "img/night-river000-111-110.png",
        ⵠΔⵠⵠΔᐃⵠ: "img/night-river000-111-111.png",
        ΔⲆⲆᐃⵠᐃΔ: "img/night-river010-010-000.png",
        ⵠⵠᐃⵠⲆΔΔ: "img/night-river010-010-010.png",
        ᐃΔⲆᐃΔΔⲆ: "img/night-river010-011-000.png",
        ⲆΔᐃⵠⵠⵠⵠ: "img/night-river010-011-010.png",
        ⲆⲆΔΔⵠΔⲆ: "img/night-river010-011-011.png",
        ΔⲆΔⲆᐃᐃΔ: "img/night-river010-110-000.png",
        ᐃⵠⲆⲆΔⲆΔ: "img/night-river010-110-010.png",
        ⲆᐃⲆⵠⵠⵠⲆ: "img/night-river010-110-110.png",
        ᐃᐃΔⵠᐃⲆⲆ: "img/night-river010-111-000.png",
        ΔΔⲆⲆⲆⲆᐃ: "img/night-river010-111-010.png",
        ⲆΔⵠΔⲆⵠΔ: "img/night-river010-111-011.png",
        ⲆΔⵠⵠⲆᐃᐃ: "img/night-river010-111-110.png",
        ΔΔⵠⲆⵠᐃᐃ: "img/night-river010-111-111.png",
        ᐃΔᐃΔᐃⵠΔ: "img/night-river011-011-000.png",
        ⵠΔᐃᐃΔⵠᐃ: "img/night-river011-011-010.png",
        ⲆΔⲆᐃⵠΔⵠ: "img/night-river011-011-011.png",
        ᐃᐃΔᐃΔᐃΔ: "img/night-river011-111-000.png",
        ΔᐃΔⲆᐃⵠΔ: "img/night-river011-111-010.png",
        ⲆⲆᐃⵠⵠⵠⲆ: "img/night-river011-111-011.png",
        ⲆᐃⲆᐃΔΔⵠ: "img/night-river011-111-110.png",
        ⲆⵠⵠⵠⲆᐃΔ: "img/night-river011-111-111.png",
        ᐃⵠΔⵠⲆᐃⲆ: "img/night-river110-110-000.png",
        ⲆᐃⵠᐃⲆᐃⲆ: "img/night-river110-110-010.png",
        ᐃᐃⲆᐃΔΔⵠ: "img/night-river110-110-110.png",
        ΔΔΔⵠⵠᐃᐃ: "img/night-river110-111-000.png",
        ⵠⵠⲆⲆᐃⵠΔ: "img/night-river110-111-010.png",
        ᐃΔΔᐃⵠⵠⵠ: "img/night-river110-111-011.png",
        ᐃᐃᐃΔᐃΔⲆ: "img/night-river110-111-110.png",
        ᐃᐃⵠΔΔⵠⵠ: "img/night-river110-111-111.png",
        ⲆⵠⲆⵠⵠⵠΔ: "img/night-river111-111-011.png",
        ᐃⲆⲆΔΔΔᐃ: "img/night-river111-111-110.png",
        ⲆⵠⲆⵠⵠⵠΔ: "img/night-river111-111-011.png",
        ᐃⲆⲆⲆΔᐃⵠ: "img/night-river111-111-000.png",
        ΔⵠᐃⲆⵠⲆΔ: "img/night-river111-111-111.png",
        ᐃᐃᐃⲆΔᐃⵠ: "img/night-river111-111-010.png",
        ⵠⲆᐃᐃΔⲆΔ: "img/day-pebblecompo1.png",
        ⲆΔⵠΔΔ: "img/day-pebblecompo2.png",
        ΔⲆᐃⵠⲆ: "img/day-pebblecompo3.png",
        ⵠᐃΔⲆⵠΔᐃ: "img/day-pebblecompo4.png",
        ⲆⲆᐃᐃᐃ: "img/day-pebblecompo5.png",
        ΔⵠΔΔⲆ: "img/day-pebblecompo6.png",
        ΔΔΔⵠⵠ: "img/day-pebblecompo7.png",
        ΔⵠⲆⵠⵠⵠᐃ: "img/day-pebblecompo8.png",
        ᐃⵠⲆΔΔⲆⵠ: "img/day-pebblecompo9.png",
        ⲆⲆⵠⲆⵠⲆΔ: "img/day-pebblecompo10.png",
        ᐃΔᐃᐃⵠ: "img/day-pebblecompo11.png",
        ΔᐃᐃᐃⲆⲆⵠ: "img/day-pebblecompo12.png",
        ᐃᐃⲆΔⲆΔᐃ: "img/day-pebblecompo13.png",
        ⵠᐃΔⵠΔⵠΔ: "img/day-pebblecompo14.png",
        ΔΔΔⲆⲆⵠⵠ: "img/day-pebblecompo15.png",
        ΔΔⵠᐃⲆⲆΔ: "img/day-pebblecompo16.png",
        Ⲇⵠⵠⵠᐃ: "img/day-pebblecompo17.png",
        ⲆⵠᐃⲆⵠᐃΔ: "img/day-pebblecompo18.png",
        ⵠΔⲆΔⲆᐃΔ: "img/day-pebblecompo19.png",
        ⵠⵠⲆᐃⲆ: "img/day-pebblecompo20.png",
        ⵠⲆΔΔᐃ: "img/day-pebblecompo21.png",
        ⲆⲆᐃᐃⵠⵠᐃ: "img/day-pebblecompo22.png",
        ᐃⲆⵠᐃΔΔⲆ: "img/day-pebblecompo23.png",
        ⵠⲆΔⵠΔⲆⲆ: "img/day-pebblecompo24.png",
        ⵠⲆΔΔⵠ: "img/day-pebblecompo25.png",
        ΔⲆⲆΔᐃ: "img/day-pebblecompo26.png",
        ⲆΔᐃΔᐃⲆⲆ: "img/day-pebblecompo27.png",
        ⲆᐃᐃΔᐃ: "img/day-pebblecompo28.png",
        ᐃᐃΔⲆᐃᐃᐃ: "img/night-pebblecompo1.png",
        ⲆΔⵠⲆⵠ: "img/night-pebblecompo2.png",
        ⲆΔΔᐃᐃ: "img/night-pebblecompo3.png",
        ⲆⲆΔⲆⲆᐃⵠ: "img/night-pebblecompo4.png",
        ΔⲆᐃⵠΔ: "img/night-pebblecompo5.png",
        ᐃⵠⲆᐃᐃ: "img/night-pebblecompo6.png",
        ⵠⵠᐃΔⵠ: "img/night-pebblecompo7.png",
        ΔΔⵠⲆⵠᐃⵠ: "img/night-pebblecompo8.png",
        ⲆⲆⲆΔⲆΔⵠ: "img/night-pebblecompo9.png",
        ⲆⵠᐃᐃⲆⵠⵠ: "img/night-pebblecompo10.png",
        ᐃΔⵠⵠⵠ: "img/night-pebblecompo11.png",
        ᐃᐃⲆΔⵠᐃΔ: "img/night-pebblecompo12.png",
        ⵠⲆᐃᐃᐃΔᐃ: "img/night-pebblecompo13.png",
        ⲆⵠΔΔⲆⵠΔ: "img/night-pebblecompo14.png",
        ᐃⵠΔⲆΔᐃⲆ: "img/night-pebblecompo15.png",
        ⲆⲆΔⲆⲆᐃᐃ: "img/night-pebblecompo16.png",
        ⵠⵠΔⲆⵠ: "img/night-pebblecompo17.png",
        ᐃᐃᐃⵠⲆᐃⵠ: "img/night-pebblecompo18.png",
        ᐃΔⵠⵠⵠΔᐃ: "img/night-pebblecompo19.png",
        ΔⵠᐃⲆΔ: "img/night-pebblecompo20.png",
        ⲆⵠⲆⲆⲆ: "img/night-pebblecompo21.png",
        ⵠᐃᐃᐃⵠⲆⵠ: "img/night-pebblecompo22.png",
        ΔᐃᐃⵠⲆⲆΔ: "img/night-pebblecompo23.png",
        ⵠⲆⲆᐃΔᐃⵠ: "img/night-pebblecompo24.png",
        ⵠᐃⵠⲆⵠ: "img/night-pebblecompo25.png",
        ⲆᐃΔΔⵠ: "img/night-pebblecompo26.png",
        ᐃᐃⵠΔⵠᐃⲆ: "img/night-pebblecompo27.png",
        ⵠΔΔᐃⲆ: "img/night-pebblecompo28.png",
        ⵠᐃⲆⲆⲆⵠⵠ: "img/day-baby-mammoth.png",
        ⵠᐃⵠⵠⲆᐃⵠ: "img/day-baby-mammoth-tamed.png",
        ⵠⲆΔᐃᐃⲆᐃ: "img/day-baby-mammoth-angry.png",
        ΔᐃⲆᐃᐃⲆᐃ: "img/night-baby-mammoth.png",
        ⵠⵠΔⵠΔᐃⵠ: "img/night-baby-mammoth-tamed.png",
        ⲆᐃⲆⵠᐃΔⲆ: "img/night-baby-mammoth-angry.png",
        ΔⵠᐃᐃⲆⲆⲆ: "img/inv-mammoth-out.png",
        ᐃᐃⵠⲆΔΔΔ: "img/inv-mammoth-in.png",
        ⲆΔᐃⲆⲆⵠΔ: "img/inv-mammoth-click.png",
        ΔⲆⵠΔΔᐃΔ: "img/hurt-baby-mammoth.png",
        ⲆᐃⲆᐃⵠⵠⵠ: "img/baby-mammoth-step.png",
        ⲆⲆⵠⲆⲆⵠⲆ: "img/day-flower-hat.png",
        ΔΔΔᐃⵠⲆᐃ: "img/night-flower-hat.png",
        ⵠⲆΔΔΔⲆⵠ: "img/inv-flower-hat-out.png",
        ⲆΔⵠⵠⲆⲆᐃ: "img/inv-flower-hat-in.png",
        ⵠⲆΔᐃⲆΔΔ: "img/inv-flower-hat-click.png",
        ᐃⵠᐃΔⲆⲆᐃ: "img/day-fur-hat.png",
        ⲆΔΔⲆΔΔⵠ: "img/night-fur-hat.png",
        ⵠⲆⲆⵠⲆⵠⵠ: "img/inv-fur-hat-out.png",
        ΔᐃⲆΔᐃⲆⲆ: "img/inv-fur-hat-in.png",
        ΔⲆⵠΔⵠⵠⵠ: "img/inv-fur-hat-click.png",
        ΔⵠΔⵠⵠΔΔ: "img/day-mammoth.png",
        ΔⵠⵠⵠⲆΔᐃ: "img/night-mammoth.png",
        ⲆⲆⵠⵠᐃⲆⲆ: "img/hurt-mammoth.png",
        ⲆⵠⵠΔᐃᐃⲆ: "img/inv-mammoth-fur-out.png",
        ⲆᐃᐃⲆᐃⵠⲆ: "img/inv-mammoth-fur-in.png",
        ⵠⵠΔΔⲆⵠⵠ: "img/inv-mammoth-fur-click.png",
        ΔⵠᐃⲆⲆⵠⲆ: "img/inv-wood-bow-out.png",
        ⲆⲆᐃΔⲆⲆⲆ: "img/inv-wood-bow-in.png",
        ⲆΔᐃᐃⵠΔᐃ: "img/inv-wood-bow-click.png",
        ᐃⵠⲆΔΔΔⲆ: "img/inv-wood-arrow-out.png",
        ⲆⲆⵠᐃⵠⵠⵠ: "img/inv-wood-arrow-in.png",
        ᐃⵠᐃⲆᐃⵠᐃ: "img/inv-wood-arrow-click.png",
        ΔⲆⵠᐃΔΔⵠ: "img/day-wood-bow2.png",
        ⲆΔᐃⵠΔⲆⲆ: "img/night-wood-bow2.png",
        ᐃⵠⵠΔᐃΔΔ: "img/day-wood-arrow.png",
        ⲆᐃᐃⲆⵠⲆⲆ: "img/night-wood-arrow.png",
        ⵠⲆᐃⵠⲆΔΔ: "img/inv-stone-bow-out.png",
        ΔΔⲆᐃⵠΔᐃ: "img/inv-stone-bow-in.png",
        ΔⵠΔⵠᐃΔᐃ: "img/inv-stone-bow-click.png",
        Δᐃⵠⵠⵠᐃᐃ: "img/inv-stone-arrow-out.png",
        ᐃᐃΔⲆⵠⲆᐃ: "img/inv-stone-arrow-in.png",
        ⲆⵠⵠΔⵠⵠⵠ: "img/inv-stone-arrow-click.png",
        ΔⵠⵠⵠⵠΔΔ: "img/day-stone-bow.png",
        ᐃᐃΔⲆᐃⵠΔ: "img/night-stone-bow.png",
        ΔⵠᐃⲆⵠΔΔ: "img/day-stone-arrow.png",
        ⵠⲆⵠΔⲆΔⵠ: "img/night-stone-arrow.png",
        ΔⲆⵠᐃᐃᐃᐃ: "img/inv-gold-bow-out.png",
        ᐃᐃⲆⵠΔⲆᐃ: "img/inv-gold-bow-in.png",
        ΔⵠᐃⵠⲆⵠⵠ: "img/inv-gold-bow-click.png",
        ⲆᐃΔᐃᐃΔⲆ: "img/inv-gold-arrow-out.png",
        ᐃⵠᐃΔᐃΔᐃ: "img/inv-gold-arrow-in.png",
        ⲆΔΔΔᐃΔⵠ: "img/inv-gold-arrow-click.png",
        ⵠᐃΔⲆⲆⲆΔ: "img/day-gold-bow.png",
        ⵠΔⲆⵠⵠⵠⵠ: "img/night-gold-bow.png",
        ᐃⲆΔΔⲆᐃᐃ: "img/day-gold-arrow.png",
        ᐃΔΔΔΔⲆΔ: "img/night-gold-arrow.png",
        ᐃΔΔⵠᐃⵠⲆ: "img/inv-diamond-bow-out.png",
        ΔᐃΔΔⵠᐃⲆ: "img/inv-diamond-bow-in.png",
        ⵠⵠΔΔⲆΔΔ: "img/inv-diamond-bow-click.png",
        ⲆⲆᐃⲆΔⲆᐃ: "img/inv-diamond-arrow-out.png",
        ⵠⲆⵠⵠⲆⵠⲆ: "img/inv-diamond-arrow-in.png",
        ⵠⲆⲆΔⵠⵠᐃ: "img/inv-diamond-arrow-click.png",
        ⵠᐃⲆᐃⲆⲆⲆ: "img/day-diamond-bow.png",
        ⲆⵠᐃⲆᐃⲆⲆ: "img/night-diamond-bow.png",
        ⲆΔΔⵠⲆⲆΔ: "img/day-diamond-arrow.png",
        ⵠⵠᐃΔⲆⲆᐃ: "img/night-diamond-arrow.png",
        ⵠΔⲆⲆⵠⵠⲆ: "img/inv-amethyst-bow-out.png",
        ΔⲆΔⲆⲆΔⲆ: "img/inv-amethyst-bow-in.png",
        ⲆᐃⲆᐃⵠᐃⵠⵠᐃ: "img/inv-amethyst-bow-click.png",
        ⵠΔⲆⲆⵠⵠⵠᐃᐃ: "img/inv-amethyst-arrow-out.png",
        ⲆⵠᐃⲆᐃΔΔᐃᐃ: "img/inv-amethyst-arrow-in.png",
        ᐃⲆⲆⲆⲆⵠⲆΔᐃ: "img/inv-amethyst-arrow-click.png",
        ⵠⲆΔⲆᐃⵠⲆΔᐃ: "img/day-amethyst-bow.png",
        ⵠⵠΔΔᐃⲆⵠᐃⲆ: "img/night-amethyst-bow.png",
        ⵠΔΔⵠⵠⲆᐃ: "img/day-amethyst-arrow.png",
        ⵠⲆⵠᐃⵠⵠᐃ: "img/night-amethyst-arrow.png",
        ΔⵠⵠΔⵠⵠⵠⵠΔ: "img/inv-dragon-bow-out.png",
        ΔᐃᐃⵠⵠⲆⵠⵠᐃ: "img/inv-dragon-bow-in.png",
        ᐃⵠⵠᐃΔⵠⲆᐃΔ: "img/inv-dragon-bow-click.png",
        ΔⲆΔᐃⵠᐃⵠᐃᐃ: "img/inv-dragon-arrow-out.png",
        ⵠᐃᐃⲆⲆⵠⲆⵠⵠ: "img/inv-dragon-arrow-in.png",
        ⵠᐃⲆⲆⲆᐃᐃᐃⵠ: "img/inv-dragon-arrow-click.png",
        ⲆⲆΔⵠᐃᐃΔⵠⵠ: "img/day-dragon-bow.png",
        ᐃⵠᐃⲆΔⲆⵠᐃⵠ: "img/night-dragon-bow.png",
        ⲆΔⲆⵠΔᐃΔ: "img/day-dragon-arrow.png",
        ⲆⵠⵠⲆΔΔⵠ: "img/night-dragon-arrow.png",
        ⲆΔᐃⵠⵠΔⵠⲆⲆ: "img/inv-reidite-bow-out.png",
        ⵠΔᐃⵠΔΔⵠΔΔ: "img/inv-reidite-bow-in.png",
        ΔᐃⲆᐃⵠⵠⲆⵠΔ: "img/inv-reidite-bow-click.png",
        ΔⵠⵠᐃᐃΔⲆⲆᐃ: "img/inv-reidite-arrow-out.png",
        ⵠΔⵠⵠᐃΔΔΔᐃ: "img/inv-reidite-arrow-in.png",
        ΔΔⲆⲆⲆΔᐃΔᐃ: "img/inv-reidite-arrow-click.png",
        ⵠⲆᐃᐃᐃᐃᐃⲆⵠ: "img/day-reidite-bow.png",
        ΔᐃΔⲆᐃⲆΔⲆⲆ: "img/night-reidite-bow.png",
        ⵠΔᐃΔⲆΔⵠ: "img/day-reidite-arrow.png",
        ᐃᐃⵠⵠⲆᐃᐃᐃⲆ: "img/night-reidite-arrow.png",
        ᐃΔΔΔⲆΔⲆΔⵠ: "img/inv-wooden-axe-out.png",
        ΔⵠᐃᐃⲆΔⵠⵠⵠ: "img/inv-wooden-axe-in.png",
        ᐃⲆⲆⲆⲆΔⲆᐃⲆ: "img/inv-wooden-axe-click.png",
        ᐃⲆⲆⲆᐃΔⲆⲆⵠ: "img/day-wooden-axe.png",
        ᐃᐃⲆⲆΔΔⲆⲆⵠ: "img/night-wooden-axe.png",
        ᐃΔⵠᐃᐃΔΔΔΔ: "img/inv-stone-axe-out.png",
        ⵠⲆⲆⲆᐃΔᐃΔΔ: "img/inv-stone-axe-in.png",
        ᐃΔΔⲆᐃᐃΔᐃᐃ: "img/inv-stone-axe-click.png",
        ΔⲆⲆᐃⵠᐃⲆᐃΔ: "img/day-stone-axe.png",
        ΔⵠⲆⲆᐃⲆΔᐃⲆ: "img/night-stone-axe.png",
        ⲆⵠΔᐃⲆᐃⵠΔⲆ: "img/inv-golden-axe-out.png",
        ⵠΔᐃⵠⲆᐃⲆⲆᐃ: "img/inv-golden-axe-in.png",
        ᐃⲆⲆⲆᐃⲆⲆΔⵠ: "img/inv-golden-axe-click.png",
        ᐃΔᐃⲆⲆⲆᐃⲆⲆ: "img/day-golden-axe.png",
        ΔΔⵠⲆⵠᐃΔⲆΔ: "img/night-golden-axe.png",
        ᐃⲆΔⵠⲆⵠⵠΔⲆ: "img/inv-diamond-axe-out.png",
        ΔⲆⵠᐃⵠⲆΔΔᐃ: "img/inv-diamond-axe-in.png",
        ᐃΔⵠⵠᐃᐃΔⲆᐃ: "img/inv-diamond-axe-click.png",
        ⵠΔᐃⵠΔΔⵠⲆᐃ: "img/day-diamond-axe.png",
        ᐃⲆᐃΔⲆⵠⲆⵠⲆ: "img/night-diamond-axe.png",
        ᐃⵠΔᐃΔⵠΔⵠⲆ: "img/inv-amethyst-axe-out.png",
        ⵠᐃⵠΔᐃΔΔⲆⵠ: "img/inv-amethyst-axe-in.png",
        ΔⵠΔⲆⵠᐃΔⲆⲆ: "img/inv-amethyst-axe-click.png",
        ⵠⲆⲆⵠᐃⲆⵠᐃⵠ: "img/day-amethyst-axe.png",
        ⲆⲆᐃΔⵠᐃᐃΔⵠ: "img/night-amethyst-axe.png",
        ΔΔⲆᐃΔⵠⵠᐃᐃ: "img/inv-reidite-axe-out.png",
        ⲆⵠⵠⵠⲆⲆⲆⵠΔ: "img/inv-reidite-axe-in.png",
        ᐃⲆⲆΔΔⵠᐃΔⲆ: "img/inv-reidite-axe-click.png",
        ⵠⲆⵠⵠⵠΔΔΔⲆ: "img/day-reidite-axe.png",
        ΔⵠᐃⵠᐃⵠⲆΔⵠ: "img/night-reidite-axe.png",
        ᐃⵠᐃΔᐃⵠⲆ: "img/bandage-activated.png",
        ΔᐃⲆᐃⲆⵠᐃ: "img/auto-feed.png",
        ᐃΔⲆⲆΔΔΔ: "img/stop-regeneration.png",
        ΔⵠΔΔᐃᐃⲆ: "img/stop-regeneration2.png",
        ⲆᐃⲆⲆΔᐃᐃⲆΔ: "img/day-wood-platform.png",
        ⵠΔⵠᐃᐃᐃΔⲆⵠ: "img/night-wood-platform.png",
        ᐃⵠΔᐃΔⲆᐃΔᐃ: "img/inv-wood-platform-in.png",
        ᐃΔΔᐃⵠΔⲆᐃⲆ: "img/inv-wood-platform-out.png",
        ⵠΔᐃⵠⲆⲆᐃΔⲆ: "img/inv-wood-platform-click.png",
        ⲆⲆΔⵠⲆᐃᐃⵠΔ: "img/day-wood-shield.png",
        ⲆⵠⲆΔᐃᐃⵠⲆⵠ: "img/night-wood-shield.png",
        ⵠⵠⵠⲆⵠⵠⵠᐃⵠ: "img/day-stone-shield.png",
        ⵠᐃᐃΔᐃᐃⵠⲆⲆ: "img/night-stone-shield.png",
        ᐃᐃⲆⲆⵠΔⵠⲆⲆ: "img/day-gold-shield.png",
        ⵠᐃⲆΔⵠΔⲆⲆⵠ: "img/night-gold-shield.png",
        ᐃΔΔΔⵠΔⵠᐃᐃ: "img/day-diamond-shield.png",
        ΔⲆΔᐃⲆᐃᐃΔⲆ: "img/night-diamond-shield.png",
        ᐃᐃΔΔⵠᐃᐃⵠⲆ: "img/day-amethyst-shield.png",
        ᐃⵠᐃΔⵠΔᐃⵠⵠ: "img/night-amethyst-shield.png",
        ⵠⲆΔΔᐃⵠⲆΔᐃ: "img/day-reidite-shield.png",
        ⵠᐃⲆⵠⵠⵠⲆⲆΔ: "img/night-reidite-shield.png",
        ΔᐃᐃⵠΔᐃⲆⵠᐃ: "img/inv-wood-shield-in.png",
        ⲆⵠΔⲆⵠⲆⲆᐃⵠ: "img/inv-wood-shield-out.png",
        ⵠⵠΔⲆᐃⲆᐃⲆⲆ: "img/inv-wood-shield-click.png",
        ΔⲆⵠΔᐃΔΔⲆᐃ: "img/inv-stone-shield-in.png",
        ⲆⵠⲆⵠⵠⲆΔⵠΔ: "img/inv-stone-shield-out.png",
        ⲆᐃΔᐃⵠΔΔᐃΔ: "img/inv-stone-shield-click.png",
        ᐃᐃⵠⲆΔⲆΔΔⲆ: "img/inv-gold-shield-in.png",
        ⲆⵠⲆⵠⵠΔΔᐃΔ: "img/inv-gold-shield-out.png",
        ⵠⲆⲆⲆⵠΔᐃΔᐃ: "img/inv-gold-shield-click.png",
        ᐃᐃᐃⵠⵠΔᐃᐃᐃ: "img/inv-diamond-shield-in.png",
        ΔᐃΔΔⵠⵠᐃᐃΔ: "img/inv-diamond-shield-out.png",
        ᐃᐃⲆⵠⲆᐃⵠᐃᐃ: "img/inv-diamond-shield-click.png",
        ⲆΔΔΔⵠⲆᐃⲆΔ: "img/inv-amethyst-shield-in.png",
        ᐃⲆΔΔᐃⵠⵠⵠΔ: "img/inv-amethyst-shield-out.png",
        ⵠⲆΔⲆᐃᐃⲆᐃΔ: "img/inv-amethyst-shield-click.png",
        ᐃⵠΔⵠⵠⲆⵠᐃⵠ: "img/inv-reidite-shield-in.png",
        ⲆⵠΔΔⵠⵠΔⲆᐃ: "img/inv-reidite-shield-out.png",
        ΔⲆⵠⵠΔΔΔⲆⵠ: "img/inv-reidite-shield-click.png",
        ΔⲆΔⵠⲆⲆⲆⲆⵠ: "img/day-machete.png",
        ⵠΔΔᐃΔⲆⵠᐃⵠ: "img/night-machete.png",
        ⵠᐃᐃⲆⲆΔⵠⲆⲆ: "img/inv-machete-in.png",
        ⵠⲆΔᐃᐃᐃΔⲆⵠ: "img/inv-machete-out.png",
        ⵠⲆⵠⲆᐃⲆᐃⵠⲆ: "img/inv-machete-click.png"
    };
    ⵠⵠⵠᐃⵠⵠΔ = [{}];
    ⵠⵠⵠᐃⵠⵠΔ[0].stringify = function (a) {
        var b = new Uint8Array(new ArrayBuffer(a.length));
        for (var c = 0; a.length > c; c++) {
            b[c] = a[c];
        }
        return b;
    };
    ᐃΔⵠⲆᐃΔΔ = {};
    ⲆⵠⲆⵠⲆⲆⵠⲆᐃ = {};
    for (var $s in ⵠⵠ) {
        ᐃΔⵠⲆᐃΔΔ[$s] = ⵠⵠ[$s];
    }
    const jt = 8;
    const kt = 19;
    Ⲇᐃ = [];
    ⵠⲆΔ = {};
    ⵠⲆΔ.ᐃΔΔΔᐃ = 0;
    ⵠⲆΔ.ⵠΔΔⲆ = 1;
    const lt = 3;
    const mt = 11;
    ⵠⲆΔ.ΔⲆΔᐃ = 2;
    const nt = 2;
    const ot = 7;
    const pt = 16;
    ⵠⲆΔ.ⲆⲆⵠⲆ = 3;
    ⵠⲆΔ.ⲆⲆⲆⵠ = 4;
    ⵠⲆΔ.ᐃᐃᐃⲆ = 5;
    ⵠⲆΔ.ⲆⵠⲆⵠ = 6;
    ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ = 7;
    ⵠⲆΔ.ᐃⵠᐃΔΔ = 8;
    ᐃⲆᐃΔ = {};
    const qt = 15;
    ΔᐃᐃⲆ = [];
    ⵠⵠⲆΔΔⲆΔ = function (a, b) {
        for (var c = 0; a.length > c; c++) {
            if (a[c].id === b) {
                return c;
            }
        }
        return -1;
    };
    var rt = [];
    function st(a, b) {
        for (var c = 0; c < rt.length; c += b) {
            var d = rt[c];
            if (a === d[0]) {
                vt(d[0], d[1], d[2], d[3]);
            }
        }
    }
    const tt = 4;
    const ut = 0;
    function vt(b, c, d, e) {
        var f = ΔᐃᐃⲆ[b];
        if (f !== undefined) {
            for (var i = 0; i < 2; i++) {
                var j = f[c][i];
                var k = e * 193 / lf.ⵠᐃⵠⲆᐃ;
                var m = d * 193 / lf.ΔⲆΔΔⵠ;
                var n = j.width / 3.5;
                var o = j.height / 3.5;
                Ⲇᐃ[818][i].drawImage(j, k - n / 2, m - o / 2, n, o);
                k = e * 600 / lf.ⵠᐃⵠⲆᐃ;
                m = d * 600 / lf.ΔⲆΔΔⵠ;
                n = j.width / 1.5;
                o = j.height / 1.5;
                Ⲇᐃ[819][i].drawImage(j, k - n / 2, m - o / 2, n, o);
            }
        }
    }
    function wt(a, b, c, d) {
        if (b) {
            a.fillStyle = b;
            a.fill();
        }
        if (c) {
            a.lineWidth = d;
            a.strokeStyle = c;
            a.stroke();
        }
    }
    function xt(b, c, d, e, f, g) {
        if (e < g * 2) {
            g = e / 2;
        }
        if (f < g * 2) {
            g = f / 2;
        }
        if (g < 0) {
            g = 0;
        }
        b.beginPath();
        b.moveTo(c + g, d);
        b.arcTo(c + e, d, c + e, d + f, g);
        b.arcTo(c + e, d + f, c, d + f, g);
        b.arcTo(c, d + f, c, d, g);
        b.arcTo(c, d, c + e, d, g);
        b.closePath();
    }
    ⲆᐃⲆᐃⵠᐃⲆⵠΔ = function () {
        for (var b = 0; b < 2; b++) {
            Ⲇᐃ[818][b].clearRect(0, 0, 193, 193);
            Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.MAP[b], 0, 0, 193, 193);
            Ⲇᐃ[819][b].clearRect(0, 0, 600, 600);
            Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.MAP[b], 0, 0, 600, 600);
            for (var c = lf.ⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
                var d = lf.ⵠⵠⲆᐃ[c];
                var f = d.x1 * 193 / (lf.ⵠᐃⵠⲆᐃ * 100);
                var j = d.y1 * 193 / (lf.ΔⲆΔΔⵠ * 100);
                var k = d.w * 193 / (lf.ⵠᐃⵠⲆᐃ * 100);
                var m = d.ΔᐃⲆ * 193 / (lf.ΔⲆΔΔⵠ * 100);
                var p = d.x1 * 600 / (lf.ⵠᐃⵠⲆᐃ * 100);
                var q = d.y1 * 600 / (lf.ΔⲆΔΔⵠ * 100);
                var u = d.w * 600 / (lf.ⵠᐃⵠⲆᐃ * 100);
                var v = d.ΔᐃⲆ * 600 / (lf.ΔⲆΔΔⵠ * 100);
                if (d.ᐃⲆⵠ === lf.ᐃⵠᐃⲆⲆ) {
                    Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.FOREST[b], f, j, k, m);
                    Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.FOREST[b], p, q, u, v);
                }
                if (d.ᐃⲆⵠ === lf.Δᐃᐃⵠᐃⵠⵠ) {
                    Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.WINTER[b], f, j, k, m);
                    Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.WINTER[b], p, q, u, v);
                }
                if (lf.ⲆⲆΔΔⲆΔⵠ === d.ᐃⲆⵠ) {
                    Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.LAVA[b], f, j, k, m);
                    Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.LAVA[b], p, q, u, v);
                }
                if (lf.ᐃⵠΔΔⵠⲆⲆ === d.ᐃⲆⵠ) {
                    Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.CAVE[b], f, j, k, m);
                    Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.CAVE[b], p, q, u, v);
                }
                if (d.ᐃⲆⵠ === lf.ⵠᐃΔΔⵠⵠΔ) {
                    Ⲇᐃ[818][b].drawImage(ΔᐃᐃⲆ.DESERT[b], f, j, k, m);
                    Ⲇᐃ[819][b].drawImage(ΔᐃᐃⲆ.DESERT[b], p, q, u, v);
                }
            }
        }
    };
    ΔⲆᐃᐃⲆᐃᐃⲆΔ = function () {
        ᐃⲆᐃΔ = {
            ⵠⲆᐃⵠⲆ: [{
                id: 0,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃᐃⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⵠⵠΔΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆⲆᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Starver"
            }, {
                id: 3,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⲆΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠΔΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃΔⵠⵠⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⲆᐃΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Angry"
            }, {
                id: 2,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆΔⲆΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⵠⲆᐃⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠⵠⵠⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sad"
            }, {
                id: 9,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆᐃᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆⲆᐃΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠΔⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Happy 1"
            }, {
                id: 1,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⲆΔⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔΔⲆⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃᐃᐃⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔᐃΔⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "What?"
            }, {
                id: 4,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔᐃᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃΔΔⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃᐃᐃΔⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔᐃⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Suspicious"
            }, {
                id: 5,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⲆⲆⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃΔᐃⵠΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠᐃⲆⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃⲆⲆΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Scar"
            }, {
                id: 6,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⵠⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃⲆⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⵠᐃΔᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆᐃⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "In Trouble"
            }, {
                id: 7,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔⲆⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠᐃⲆⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃᐃΔⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔⲆⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Cute"
            }, {
                id: 8,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⲆᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⲆⲆᐃΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⲆⲆᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bored 1"
            }, {
                id: 10,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⲆⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃΔⲆᐃΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃᐃⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Happy 2"
            }, {
                id: 11,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⲆᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠᐃⲆⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠΔⲆⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⲆᐃΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Crazy"
            }, {
                id: 12,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠⵠⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃΔⵠΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔΔⲆᐃᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆΔᐃᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Happy 3"
            }, {
                id: 13,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⲆᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃⲆⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠΔΔⲆⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠᐃᐃΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Very Cute"
            }, {
                id: 14,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆΔⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠΔⵠᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔᐃⵠΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃΔᐃⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Curious"
            }, {
                id: 15,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆΔⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⵠⵠⲆⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃᐃΔΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bored 2"
            }, {
                id: 16,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠⵠⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠᐃⵠⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⲆⵠᐃⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠⲆΔⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Happy 4"
            }, {
                id: 17,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⵠΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠᐃⵠⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃᐃΔⵠⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃᐃⲆⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Scar 2"
            }, {
                id: 18,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠᐃⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.Ⲇᐃⵠⵠⵠⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃⲆⵠΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠᐃΔⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sick"
            }, {
                id: 19,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠΔᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃⵠⵠⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⲆᐃΔⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠΔⵠⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Somnambule"
            }, {
                id: 24,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠᐃᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃⵠᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆΔⲆⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⵠⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Pixelbitie",
                name: "Feel Bad"
            }, {
                id: 23,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆᐃΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠᐃⵠΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃⵠᐃΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃΔⵠⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Pixelbitie",
                name: "Mmmh."
            }, {
                id: 103,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃΔⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⵠΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆᐃⲆⲆᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠⵠⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Panic"
            }, {
                id: 105,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⲆⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠᐃⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⵠᐃⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔᐃⵠᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Hypnotic"
            }, {
                id: 106,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔΔᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⵠΔⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔΔⲆΔᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠΔⵠⲆΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Stars in the eyes"
            }, {
                id: 220,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠᐃⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠⲆⵠᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔⲆᐃⵠΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.Ⲇⵠᐃᐃᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Seams"
            }, {
                id: 104,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔᐃᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆΔⵠⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠΔⵠⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆΔⵠΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Scared at night"
            }, {
                id: 20,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆΔⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⲆΔⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠᐃᐃΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔⵠᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Vampire"
            }, {
                id: 21,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⵠⲆΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⲆⲆⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔᐃᐃⲆΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔΔⲆᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Zombie"
            }, {
                id: 22,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⲆⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃᐃⲆⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠᐃⲆᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⲆⲆΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Pixelbitie",
                name: "Devaster"
            }, {
                id: 116,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔᐃᐃⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⵠⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆᐃᐃᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆⲆⵠⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Fukss",
                name: "Dead Devaster"
            }, {
                id: 27,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆᐃᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠᐃΔΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⵠⵠΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Winter",
                name: "Cactus"
            }, {
                id: 28,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆΔᐃⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔΔⲆΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⲆᐃⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Bee"
            }, {
                id: 49,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃⵠⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆⵠΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⵠΔᐃⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃΔⵠᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Camo Skin"
            }, {
                id: 58,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃⵠΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃⵠⲆᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔⲆⲆⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠᐃⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Blue Limax Skin"
            }, {
                id: 59,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃⵠⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆΔΔᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆⵠᐃᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠᐃⵠΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Red Limax Skin"
            }, {
                id: 94,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃⲆΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠⲆⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆⵠΔᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠᐃⵠᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Pumpkin"
            }, {
                id: 109,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠΔⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃΔΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⵠⲆⵠⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⵠΔⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Wood"
            }, {
                id: 114,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⲆⲆᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃᐃⲆᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⵠⲆⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃᐃΔᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Zebra"
            }, {
                id: 120,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔᐃᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠⲆⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔᐃⵠᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⲆⵠⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "CrysTal",
                name: "Tiger"
            }, {
                id: 134,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃΔΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃⲆᐃΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⵠΔΔΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃᐃⵠⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Franchestcreator",
                name: "Day or Night"
            }, {
                id: 135,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠΔᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃΔⲆΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔΔⲆΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆΔᐃⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Poinet",
                name: "Square Starver"
            }, {
                id: 136,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠᐃᐃᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔᐃΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔⵠⵠᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃⲆⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Voodoo Doll"
            }, {
                id: 137,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠΔⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆΔⵠⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆⵠΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Frankenstein"
            }, {
                id: 138,
                ⵠΔⲆ: ⵠⵠ.ⲆΔᐃⵠⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆⵠⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆⵠΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⲆⵠⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Mummy"
            }, {
                id: 139,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠⵠᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆΔΔᐃⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⲆᐃⲆⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔᐃⵠᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Werewolf"
            }, {
                id: 140,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆᐃⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔᐃⵠⲆⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⲆⲆᐃⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆΔΔΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Cthulhu"
            }, {
                id: 141,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠⵠΔⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⲆΔⵠⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃΔⵠⵠᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sea Man"
            }, {
                id: 142,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆⵠᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃⲆΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⵠⲆᐃⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃΔΔⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Pumpkin"
            }, {
                id: 148,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⵠⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠΔⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃᐃⲆⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃΔⲆⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Snowman"
            }, {
                id: 149,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆⲆⵠⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔᐃΔⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠΔᐃⲆΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔⲆⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Christmas Tree Man"
            }, {
                id: 150,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃΔⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⲆⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃΔⲆⲆⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃᐃⲆᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Mrs Bell"
            }, {
                id: 151,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔᐃⵠⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠⵠⵠⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆᐃΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Elfy"
            }, {
                id: 152,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆⲆⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃΔᐃᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃΔⲆⲆⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Mr Present"
            }, {
                id: 153,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⵠᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠᐃΔⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆΔⵠΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠᐃⵠΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "My Dear Old Deer"
            }, {
                id: 154,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⲆΔᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠⵠᐃᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠᐃᐃⲆⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔᐃΔΔⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr Angel"
            }, {
                id: 155,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⵠΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⵠΔΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃΔᐃⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔᐃⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr Ice Cube"
            }, {
                id: 156,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⵠⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔⲆⲆⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆΔΔⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr Snowman"
            }, {
                id: 159,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃΔⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆⵠⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔᐃⲆΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃΔⵠⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "CrysTal",
                name: "Crystal Sky Skin"
            }, {
                id: 167,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃᐃⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠᐃΔⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔᐃᐃΔΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⵠΔⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Franchestcreator",
                name: "Radioactive Starver"
            }, {
                id: 169,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔΔᐃⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⲆⲆⵠΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⵠⵠΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "TheScaryBlaze",
                name: "Eaten Cookie"
            }, {
                id: 170,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃᐃⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠᐃᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠᐃⵠᐃⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆΔᐃᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "aloner",
                name: "Blob Thing"
            }, {
                id: 172,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔⵠᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃΔᐃΔΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⲆⵠⵠΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⲆᐃⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "aloner",
                name: "Machine Mask"
            }, {
                id: 184,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆᐃΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⵠⲆⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⲆⵠⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆⵠᐃΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mad"
            }, {
                id: 206,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃᐃᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⲆⲆⲆᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠᐃⲆⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔᐃⵠᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Survivor"
            }, {
                id: 209,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⵠΔᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠᐃΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔᐃΔᐃⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠⵠᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Starverator"
            }, {
                id: 230,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆᐃⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔΔᐃⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⲆᐃⲆΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆⲆⲆⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Totem"
            }, {
                id: 231,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔⵠΔⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⲆᐃⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠᐃᐃᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⵠΔⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Big Pile of Sand"
            }, {
                id: 232,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃΔⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⲆΔᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠⵠⵠⵠⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔΔΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Big Pile of Dirt"
            }, {
                id: 235,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆᐃᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃΔΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃⵠᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠΔⲆⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sandstone"
            }, {
                id: 29,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⲆⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃΔᐃⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⲆⵠᐃⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆⲆⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Pixelbitie",
                name: "Lollipop 1"
            }, {
                id: 30,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠΔⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆΔⲆΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆΔΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lollipop 2"
            }, {
                id: 31,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠⵠΔⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃΔⵠⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃᐃᐃⵠⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⵠⲆΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lollipop 3"
            }, {
                id: 32,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⲆᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔᐃᐃⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⵠΔΔⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⲆⵠΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lollipop 4"
            }, {
                id: 33,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠᐃⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃᐃⵠᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃᐃΔᐃⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃᐃΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Sushui",
                name: "Yellow Bird"
            }, {
                id: 34,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃΔΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆΔᐃᐃΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠᐃⲆᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆⲆΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Sushui",
                name: "Red Bird"
            }, {
                id: 35,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔᐃⵠⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⲆⵠⲆᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔᐃⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Sushui",
                name: "Blue Bird"
            }, {
                id: 37,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆⲆᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⲆΔᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆᐃᐃᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.Ⲇⵠᐃᐃᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Winter",
                name: "Owl"
            }, {
                id: 52,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠⵠⲆⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⲆᐃᐃᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔΔΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Nemo"
            }, {
                id: 53,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⵠⲆⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠⵠⲆᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔᐃᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Bread"
            }, {
                id: 74,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔⵠⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆΔⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⵠⵠⲆⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⵠⲆΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 2"
            }, {
                id: 75,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔⲆᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆᐃΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠΔⵠⵠⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃᐃⵠⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Communist & Taco4Life",
                name: "Mr. Bread 3"
            }, {
                id: 60,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆᐃⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⵠᐃⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⵠⲆΔᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.Δᐃᐃⵠᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Red Berry"
            }, {
                id: 61,
                ⵠΔⲆ: ⵠⵠ.ⵠΔᐃᐃΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⵠⵠⵠⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔᐃΔΔᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃᐃᐃΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Berry"
            }, {
                id: 70,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⲆᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃΔⵠᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃᐃΔⲆⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆΔⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Cake"
            }, {
                id: 71,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⵠᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆⵠΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠΔᐃΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠᐃᐃᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Christmas Cake"
            }, {
                id: 77,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⵠᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆᐃΔⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⲆᐃⵠΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃⵠΔᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Pancakez",
                name: "Mr. Pancake"
            }, {
                id: 87,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⲆⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔⵠⲆⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⵠᐃᐃⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⵠΔᐃᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Taco"
            }, {
                id: 78,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⵠⲆᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠⲆⲆⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔᐃᐃⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⲆᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Bottle"
            }, {
                id: 79,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⵠᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⵠⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠⵠⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆⵠⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Bottle 2"
            }, {
                id: 97,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆΔⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠⵠᐃᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔΔΔᐃⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔΔⵠⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Pink Rabbit"
            }, {
                id: 102,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⲆⵠⵠⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⲆⲆᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆᐃⵠⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⵠⵠⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Marshmallow"
            }, {
                id: 107,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃⲆⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃΔⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆⲆⲆⵠΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃⲆᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Fox"
            }, {
                id: 132,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⵠᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆᐃⲆΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⵠᐃⲆᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⲆΔⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Raccoon"
            }, {
                id: 111,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⵠᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆΔⵠΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⲆⲆΔᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆΔⲆΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Cloud"
            }, {
                id: 113,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆΔΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⲆᐃⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠΔⲆΔᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⲆⵠΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Moon"
            }, {
                id: 117,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠᐃᐃΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⲆΔⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔΔᐃᐃᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⵠΔⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Mr. Panda"
            }, {
                id: 118,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃΔΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⵠΔᐃᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⲆᐃⲆⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Mr. Strawberry"
            }, {
                id: 119,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆΔᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃⵠΔᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆΔⲆΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⲆΔᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito & Sushuui",
                name: "Mummy"
            }, {
                id: 122,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃⵠΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⲆⲆΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔᐃⵠⲆⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⵠΔⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Dino"
            }, {
                id: 127,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⲆⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆΔᐃᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠᐃΔⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃΔᐃⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Mr. Koala"
            }, {
                id: 160,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⲆⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠᐃⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃΔⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆΔⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bottle Protection"
            }, {
                id: 162,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔΔᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆⵠᐃᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠⲆⲆΔⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃᐃⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "CrysTal",
                name: "Leaf Man"
            }, {
                id: 166,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔⲆᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆⵠΔⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⵠⲆᐃᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⵠΔᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Bubble"
            }, {
                id: 174,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⲆⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃΔΔᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔⲆΔⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃⵠΔΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "upfiz",
                name: "Potato"
            }, {
                id: 171,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠΔⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃΔⵠΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⵠΔⲆⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆᐃΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "aloner",
                name: "Axolotl"
            }, {
                id: 178,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠΔⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃᐃⵠᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆⲆΔΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆⵠⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Rusted Machine"
            }, {
                id: 179,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⵠΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⲆⵠⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃⵠΔᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⵠΔᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Starving Machine"
            }, {
                id: 181,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆᐃⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⵠⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠⲆΔⵠⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆΔᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Night Stars"
            }, {
                id: 191,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠΔΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔᐃⵠⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔᐃⵠⲆⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⲆΔᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Blue Jay"
            }, {
                id: 198,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆᐃΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⲆⲆᐃⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆᐃᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃⵠᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "AWTP",
                name: "Dave"
            }, {
                id: 200,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆΔΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆᐃᐃΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⵠⵠΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔΔⲆΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Jinty",
                name: "Smug"
            }, {
                id: 203,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆΔⵠᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆΔᐃⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆΔⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Reclaimed"
            }, {
                id: 204,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆⵠᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠⵠΔᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆⲆⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠⵠⲆⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Legacy Wolf"
            }, {
                id: 211,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆᐃΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⲆⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃΔΔΔᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃᐃΔᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Starver of the Seas"
            }, {
                id: 213,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⵠᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠᐃᐃⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⵠᐃⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔΔᐃⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Ice"
            }, {
                id: 219,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠΔΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⲆⵠⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆΔΔᐃΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆΔⵠΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Ramil",
                name: "Sandwich Cookie"
            }, {
                id: 221,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠᐃᐃΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⵠⲆΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃⲆⲆΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⵠⵠΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Purple Geode"
            }, {
                id: 222,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⲆΔⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔⲆᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆᐃΔⲆⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆⵠⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Cyan Geode"
            }, {
                id: 223,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⵠⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃΔᐃΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔⲆⵠᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃⲆᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Yellow Geode"
            }, {
                id: 228,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔΔⲆⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃⲆⲆΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠΔΔᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Furnace Head"
            }, {
                id: 229,
                ⵠΔⲆ: ⵠⵠ.ⲆΔᐃᐃΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆⲆΔⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔⲆⵠᐃᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⵠⲆⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag"
            }, {
                id: 227,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⵠⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠᐃⲆⲆⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃⵠⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lit Furnace Head"
            }, {
                id: 25,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⲆΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆΔⲆⵠⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⵠᐃⲆᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃΔⵠⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Pixelbitie",
                name: "Test Dummy"
            }, {
                id: 41,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠⲆⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃᐃⵠᐃᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆⲆΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Star-ver"
            }, {
                id: 43,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠⵠⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⵠⲆᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃΔΔⲆᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆᐃΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Communist",
                name: "Starver Chest"
            }, {
                id: 88,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔᐃᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔⲆⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃΔΔⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆⲆᐃⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Communist",
                name: "Starver Workbench"
            }, {
                id: 121,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔΔⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠᐃⲆⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆΔᐃΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⵠᐃⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Fish"
            }, {
                id: 39,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃΔΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔᐃⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠΔᐃⵠⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠⲆᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Negligent4Dia",
                name: "Crab"
            }, {
                id: 40,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆᐃⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⵠΔⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆᐃⵠⵠⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⵠᐃΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Negligent4Dia",
                name: "Piranha"
            }, {
                id: 36,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔΔⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃⲆᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆⵠⵠΔᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃΔⵠΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Fox"
            }, {
                id: 69,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⵠΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃΔᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔⲆⵠⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔᐃⵠΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Zed",
                name: "Baby Foxy"
            }, {
                id: 51,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⵠⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠᐃⲆⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃᐃⵠⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔᐃⵠⵠᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "HOWI",
                name: "Winter Bear"
            }, {
                id: 133,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔᐃΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔⲆⵠΔⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆΔΔΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Hawk"
            }, {
                id: 55,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆΔΔΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔᐃⲆᐃⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃΔⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Nice Little Yuki"
            }, {
                id: 68,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃΔⲆΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆΔⲆᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔⲆᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Baby Yuki"
            }, {
                id: 62,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔΔᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃΔΔΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃⵠᐃⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃΔⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Carrot"
            }, {
                id: 56,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆⲆⵠⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆΔⵠΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⲆⲆⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bat Limax"
            }, {
                id: 72,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⲆⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠⵠⵠᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔΔᐃᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Mr. Crate"
            }, {
                id: 73,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆᐃⵠⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔⵠⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠΔΔᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃᐃᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Taco4Life & eogito",
                name: "Mr. Spider"
            }, {
                id: 93,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠᐃⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠΔⲆᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃΔΔᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠⲆᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Anyone want to play?",
                name: "Mr. Spider 2"
            }, {
                id: 82,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔΔΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠⲆΔⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆⲆΔΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⲆΔΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Blue Starfish"
            }, {
                id: 83,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔΔᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⲆⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆᐃΔΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⲆᐃⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Orange Starfish"
            }, {
                id: 84,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔⵠⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆΔⵠⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠΔⵠᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⵠΔΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Pink Starfish"
            }, {
                id: 85,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔᐃᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆΔΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆΔΔⲆⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃΔΔᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. ShellMauve"
            }, {
                id: 86,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃⲆᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃᐃᐃᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔⵠᐃᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠᐃᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Shell Bead"
            }, {
                id: 96,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔⲆΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠⵠⲆⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⲆⲆⲆΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⵠⲆⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Fukss",
                name: "Angry Crab"
            }, {
                id: 98,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔΔⵠΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔⲆⲆΔᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠᐃⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Penguin"
            }, {
                id: 126,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠΔⵠⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⲆⲆΔΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆᐃΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Anyone want to play?",
                name: "Mr. Boar"
            }, {
                id: 145,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆΔΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆⵠⲆᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃᐃⵠⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆⲆᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "I saw you"
            }, {
                id: 146,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⵠΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆⵠⲆᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃᐃΔΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.Δᐃⵠᐃᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "It was funny"
            }, {
                id: 147,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⵠᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⵠΔⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃⵠⲆᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠΔᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "You can scream"
            }, {
                id: 158,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆΔⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⲆΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⲆᐃΔⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠⲆΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Mr. Book"
            }, {
                id: 163,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔⲆΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆΔⲆⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔⲆΔⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃⵠⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Anyone want to play?",
                name: "Mr. Mammoth"
            }, {
                id: 164,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⵠⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔⲆⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⲆΔΔⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔΔΔⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "SoOw",
                name: "Mr. Mammoth 2"
            }, {
                id: 161,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠΔᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆⲆⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃΔⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆΔⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Nightmare"
            }, {
                id: 168,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆΔⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠᐃᐃⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆⵠᐃⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆᐃᐃⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Shiny Crystal"
            }, {
                id: 173,
                ⵠΔⲆ: ⵠⵠ.ⵠΔᐃΔᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆⲆⲆΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆᐃⵠΔⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔΔⵠᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Water skin"
            }, {
                id: 175,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠᐃⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⲆΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⲆᐃⲆΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⵠΔⵠⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Fall Berry Bush Starver"
            }, {
                id: 176,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠⲆⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆᐃⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔΔⲆΔⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⵠⲆΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Christmas Berry Bush Starver"
            }, {
                id: 177,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠⵠᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔΔⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆᐃⲆΔᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆⲆᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Berry Bush Starver"
            }, {
                id: 182,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆⲆΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃⵠΔᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔᐃΔⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.Δᐃᐃᐃⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamer"
            }, {
                id: 185,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔΔᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⵠΔⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠΔᐃⲆⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃᐃΔⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Wolf"
            }, {
                id: 186,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔΔᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔᐃⵠⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆᐃΔᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃΔⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Snow Wolf"
            }, {
                id: 187,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠᐃΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠᐃⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔⵠΔⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆᐃⲆⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Rabbit"
            }, {
                id: 188,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃᐃΔⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⲆⵠⲆΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⲆⵠΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Snow Rabbit"
            }, {
                id: 189,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⵠᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔⵠⵠⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⵠᐃⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Bear"
            }, {
                id: 190,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆΔⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃⵠΔᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⵠᐃⵠⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⵠᐃⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Polar Bear"
            }, {
                id: 196,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃΔΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔⵠⵠᐃΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⲆΔΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Crying Angel"
            }, {
                id: 202,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠⲆᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⲆᐃⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃΔⲆᐃⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆΔⲆΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Fennec"
            }, {
                id: 207,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆⵠⲆⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆΔⲆΔᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⲆΔⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Decay"
            }, {
                id: 212,
                ⵠΔⲆ: ⵠⵠ.Δⵠᐃᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆΔⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠᐃΔᐃᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆΔᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Pillow"
            }, {
                id: 218,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⵠᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⵠⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃᐃⲆⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃᐃᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Exotic"
            }, {
                id: 224,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃⵠⵠΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔΔⵠᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠⲆᐃΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Apple"
            }, {
                id: 225,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃΔⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆᐃᐃⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔᐃⲆΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃᐃᐃⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Golden Apple"
            }, {
                id: 233,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⵠⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⲆⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃΔΔᐃⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠΔⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lava Cube"
            }, {
                id: 234,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃᐃᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆⲆᐃᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠⵠⵠᐃⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔΔΔⲆⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Dragon Cube"
            }, {
                id: 42,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔΔᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⵠΔⵠᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠᐃΔⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃᐃⵠᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Winter",
                name: "Will-O'-The-Wisp"
            }, {
                id: 91,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃᐃᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠⵠᐃΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃΔΔᐃΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆᐃⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "ExpertyAnimations",
                name: "Flame"
            }, {
                id: 26,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠⵠΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆⵠⵠⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃⲆⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠᐃΔΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Be a Tree"
            }, {
                id: 38,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠⵠΔⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃᐃⵠΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠᐃⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Winter",
                name: "Toxic Mutant"
            }, {
                id: 50,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠᐃⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠΔⵠΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔΔⵠⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠΔᐃⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Communist",
                name: "Mr. Tomato"
            }, {
                id: 54,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠᐃΔⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⲆⵠⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⵠΔⵠᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆᐃΔⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Mauve, the Lapa"
            }, {
                id: 57,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆᐃⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃΔᐃᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠⲆⵠⲆᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⲆᐃⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Golden Fish"
            }, {
                id: 64,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆᐃᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠᐃⵠⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠⵠⲆⵠⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⲆᐃⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "LapaMauve"
            }, {
                id: 65,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⵠᐃΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆΔᐃΔⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⲆⵠᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "LapaMauve "
            }, {
                id: 92,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⵠΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠΔⲆⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠⵠΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆΔᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Burger"
            }, {
                id: 66,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠΔᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠᐃΔⵠⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔᐃΔᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Tropical Starver"
            }, {
                id: 80,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠᐃΔΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⵠΔᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃⵠⲆᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆᐃⵠⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. ShellPink"
            }, {
                id: 81,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆⲆⵠⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔᐃᐃⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠΔᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. OranShell"
            }, {
                id: 99,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃΔᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔᐃⲆΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⲆᐃΔⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠᐃᐃΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Pepe"
            }, {
                id: 100,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃΔⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃᐃⵠⵠⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⵠⲆΔᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⲆⵠΔᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "fatant",
                name: "Mr. Ant"
            }, {
                id: 115,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⲆΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃⲆⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⵠⲆⵠΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆⲆΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Mr. Watermelon"
            }, {
                id: 101,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃΔⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆΔᐃᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃⲆⲆᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔᐃᐃⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Thornbush"
            }, {
                id: 131,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃᐃᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆΔⵠⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠΔⲆⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Cthulhu"
            }, {
                id: 143,
                ⵠΔⲆ: ⵠⵠ.ⲆΔᐃΔⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃΔⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠⲆⲆⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔᐃᐃⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Mr. Cactus"
            }, {
                id: 144,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠΔⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔΔΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⲆⵠⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆΔΔⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Momo"
            }, {
                id: 180,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠᐃᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃΔⵠⲆΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆⲆᐃΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠⵠⲆⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Scream"
            }, {
                id: 193,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⵠΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⵠⵠΔⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃΔᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Dragon"
            }, {
                id: 195,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠⲆⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆᐃⵠᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔᐃⲆᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Forest Spirit"
            }, {
                id: 197,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⲆⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆᐃⲆᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔΔⵠⵠⲆᐃⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆᐃΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Evil Goat"
            }, {
                id: 199,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⵠⲆⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⲆᐃΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔΔⲆⲆⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠΔⲆᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Rotten"
            }, {
                id: 201,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃⵠΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆⵠⲆⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠᐃΔΔⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔΔⵠᐃᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Fossil"
            }, {
                id: 205,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃⵠΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠᐃⵠΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃᐃⲆᐃⵠᐃΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃⲆⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Spectrum"
            }, {
                id: 210,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃΔⲆⲆⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠΔΔⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⲆⲆⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Helpy",
                name: "Black Cat"
            }, {
                id: 214,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔⵠΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃⲆⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃΔⲆᐃⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⵠᐃⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Lynx"
            }, {
                id: 215,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⵠΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔᐃᐃΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔΔⲆᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⵠⲆⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Warg"
            }, {
                id: 217,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆΔᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⵠⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠⲆⵠⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃΔΔⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Menhir"
            }, {
                id: 95,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆΔⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃᐃⵠᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃᐃΔⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃᐃⵠⵠⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Mr. Garlic"
            }, {
                id: 76,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆᐃⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆⵠⲆΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⲆᐃⲆⲆⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⵠⲆⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Robot Dragon"
            }, {
                id: 44,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃⵠⵠⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔΔᐃⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⵠᐃᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Lava Dragon Version 1"
            }, {
                id: 90,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠᐃΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⲆΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔᐃΔΔⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔΔᐃⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "ExpertyAnimations",
                name: "Lava Dragon Version 2"
            }, {
                id: 124,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⵠᐃΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⲆⲆΔⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠΔΔⵠⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃⵠⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Lava Dragon Version 3"
            }, {
                id: 45,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔⵠᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃᐃΔΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔᐃⵠⵠΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔΔΔᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Sushui",
                name: "Ice Dragon Version 1"
            }, {
                id: 46,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠᐃΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆᐃΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃΔⲆΔⲆⵠΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⵠΔΔⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Ice Dragon Version 2"
            }, {
                id: 108,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠᐃⵠⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆⵠⵠⲆΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆⲆⲆΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Ice Dragon Version 3"
            }, {
                id: 123,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⵠⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆΔⵠᐃⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃΔⵠᐃᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⵠⵠⵠᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Baby Dragon Version 1"
            }, {
                id: 128,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠᐃΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔᐃΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⵠᐃⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔⲆᐃΔᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Baby Dragon Version 2"
            }, {
                id: 125,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆᐃⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠᐃⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆΔⲆΔΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃΔⲆⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Baby Lava"
            }, {
                id: 47,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔᐃⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆᐃΔᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⲆⵠⵠⵠⵠⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔΔⲆⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Kraken"
            }, {
                id: 129,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃΔᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⵠΔΔᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔᐃⵠⵠᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃⲆⲆᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Sandworm"
            }, {
                id: 63,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆⵠΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃΔⵠⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃΔΔⵠⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔᐃᐃᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Golden Bread"
            }, {
                id: 67,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠⲆΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⵠᐃⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆᐃⲆⵠⲆⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔⲆⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "ForgottenHeroe",
                name: "Starver Ores"
            }, {
                id: 130,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⵠⲆᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃΔⵠⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⵠᐃΔᐃΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠΔⲆΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Poo"
            }, {
                id: 89,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⲆΔⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⵠΔⵠΔⲆ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠᐃⲆᐃΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔᐃⲆⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Poinet",
                name: "Volcano Starver"
            }, {
                id: 112,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔᐃΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⲆⲆᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆΔⵠΔΔⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆΔⵠⲆⲆⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Lava Starver"
            }, {
                id: 183,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⲆⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆᐃⵠᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⲆᐃⲆⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⲆⵠⲆΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Revaster"
            }, {
                id: 192,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆᐃⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠⲆᐃΔ,
                ΔΔᐃⲆ: ⵠⵠ.ΔⵠᐃᐃΔᐃⵠ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆᐃⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Awakened"
            }, {
                id: 194,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔⲆΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔⵠᐃᐃⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆⲆⲆΔΔⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠᐃⵠΔΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Ice Dragon"
            }, {
                id: 236,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠᐃΔⲆΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⲆᐃᐃⵠⲆⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔⲆⲆⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Crystal Dragon"
            }, {
                id: 208,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⵠΔⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠᐃⲆⲆⵠⲆᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠⵠΔⵠᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bone Dragon"
            }, {
                id: 216,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠⲆᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠΔⲆⵠᐃΔᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ΔᐃᐃⲆΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Warg Ghost"
            }, {
                id: 226,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⲆⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃΔᐃⵠΔ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠᐃΔᐃⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⵠΔⲆⲆΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Cursed"
            }, {
                id: 48,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⲆΔᐃᐃ,
                ΔΔᐃⲆ: ⵠⵠ.ᐃⵠⲆᐃⵠΔΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆⵠⲆⵠᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Robot"
            }, {
                id: 110,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔᐃΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃΔⲆΔⲆⵠ,
                ΔΔᐃⲆ: ⵠⵠ.ⵠⲆΔⲆᐃⲆΔ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃΔᐃᐃΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Blue Butterfly"
            }, {
                id: 157,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃᐃⵠⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃΔⲆΔΔ,
                ΔΔᐃⲆ: ⵠⵠ.ⲆΔΔⵠΔΔⲆ,
                ⵠᐃᐃᐃ: ⵠⵠ.ᐃⲆⲆⲆᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Yrifox"
            }, {
                id: 165,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⵠⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔᐃⵠⲆᐃ,
                ΔΔᐃⲆ: ⵠⵠ.Δᐃᐃᐃᐃⵠᐃ,
                ⵠᐃᐃᐃ: ⵠⵠ.ⲆᐃⲆᐃᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ,
                ᐃᐃᐃ: "OmarJr13",
                name: "Blob Skin"
            }],
            ⲆΔⲆⲆ: [{
                id: 0,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠᐃⲆΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔⲆΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag 1"
            }, {
                id: 1,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃΔⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⲆⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Bag"
            }, {
                id: 2,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆⲆⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃΔᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag 2"
            }, {
                id: 3,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⵠⲆⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⲆΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag 3"
            }, {
                id: 4,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆⵠᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag 4"
            }, {
                id: 5,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃᐃΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag 5"
            }, {
                id: 11,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⵠΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆⵠⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wood Pickaxe Bag"
            }, {
                id: 19,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆΔΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔⵠᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Wood Carrier"
            }, {
                id: 37,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.Ⲇᐃⵠᐃⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bag 6"
            }, {
                id: 39,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔΔᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⲆΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Wooden Swords"
            }, {
                id: 44,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠᐃⵠⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃΔᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Communist",
                name: "Big Bag"
            }, {
                id: 7,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠᐃⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Communist",
                name: "Bag 6"
            }, {
                id: 8,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠⵠΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠΔⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Easter Bag"
            }, {
                id: 9,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠⲆⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Star Bag"
            }, {
                id: 10,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃⵠᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Bag"
            }, {
                id: 20,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃⵠΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃΔⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Stone Carrier"
            }, {
                id: 24,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Stone Pickaxe Bag"
            }, {
                id: 6,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆΔᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃᐃΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Communist",
                name: "Bag Camouflage"
            }, {
                id: 38,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⵠⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Stone Swords"
            }, {
                id: 54,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆΔⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Cow Bag"
            }, {
                id: 59,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠⲆⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔᐃⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "CrysTal",
                name: "Starver Bag"
            }, {
                id: 62,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠⵠΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆΔⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "CrysTal",
                name: "Crystal Sky Bag"
            }, {
                id: 71,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆᐃⲆᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆΔⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Portable Furnace"
            }, {
                id: 78,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⵠⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆⲆⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Crate Bag"
            }, {
                id: 13,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆΔΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃΔΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Honey Pot"
            }, {
                id: 21,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔΔⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃⵠⵠᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Gold Carrier"
            }, {
                id: 30,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆΔⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Gold Pickaxe Bag"
            }, {
                id: 29,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠᐃⲆΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⲆΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Ariel",
                name: "Mr and Mrs Bakers"
            }, {
                id: 41,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔΔⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆΔᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Golden Swords"
            }, {
                id: 47,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃΔⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆⲆⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Explorer Bag"
            }, {
                id: 51,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃΔⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠΔⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Bamboo Bag"
            }, {
                id: 53,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆⵠⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔⵠᐃᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Mummy Bag"
            }, {
                id: 58,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆΔΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃᐃⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Watermelon Bag"
            }, {
                id: 60,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆᐃΔᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Garlic Bag"
            }, {
                id: 61,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔⲆⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Pumpkin Bag"
            }, {
                id: 64,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆᐃⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠⲆⲆΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "upfiz",
                name: "Oil Barel bag"
            }, {
                id: 67,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆᐃᐃΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Tree Bag"
            }, {
                id: 70,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⵠⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆᐃᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Lit Portable Furnace"
            }, {
                id: 72,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Christmas Berry Bush Bag"
            }, {
                id: 73,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠᐃΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Berry Bush Bag"
            }, {
                id: 74,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⲆⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Fall Berry Bush Bag"
            }, {
                id: 76,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠⲆⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Reclaimed Bag"
            }, {
                id: 14,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆΔᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⵠΔⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "a Rabbit in my Bag"
            }, {
                id: 15,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔᐃⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔᐃⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bird's nest"
            }, {
                id: 16,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⲆⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃⲆΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "a Fish on your Back"
            }, {
                id: 17,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⵠⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔᐃⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "a Squirrel in my Bag"
            }, {
                id: 22,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃⲆᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⵠⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Diamond Carrier"
            }, {
                id: 12,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔΔⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆⲆⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Resources Bag"
            }, {
                id: 32,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔⵠⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆᐃⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Diamond Pickaxe Bag"
            }, {
                id: 40,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃⵠⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆᐃⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Diamond Swords"
            }, {
                id: 45,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃⵠΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠΔⵠᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "My Cake Bag"
            }, {
                id: 46,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃⵠΔᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠⵠᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "My Christmas Cake Bag"
            }, {
                id: 52,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠⵠΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⵠⵠᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Fish Bag"
            }, {
                id: 65,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃᐃᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆⲆⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Cloud Bag"
            }, {
                id: 68,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠᐃΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃᐃᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Bee Bag"
            }, {
                id: 77,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃⲆⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆΔᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bag and Bedroll"
            }, {
                id: 80,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⵠⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⵠⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Peasant's Bag"
            }, {
                id: 81,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔΔΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠᐃΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Probably Stolen Bag"
            }, {
                id: 48,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⲆΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⲆᐃᐃΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "fatant",
                name: "Natural Bag"
            }, {
                id: 23,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃᐃᐃⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠᐃⲆⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Amethyst Carrier"
            }, {
                id: 25,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔⲆⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃΔⵠⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Amethyst Pickaxe Bag"
            }, {
                id: 28,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔᐃΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃⲆᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Your Baby"
            }, {
                id: 33,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⵠⲆⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆΔⲆⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Tropical Bag"
            }, {
                id: 43,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⲆⵠⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠΔΔⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Amethyst Swords"
            }, {
                id: 35,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⵠᐃᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆΔⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Ice Bag"
            }, {
                id: 50,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠᐃᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Thornbush Bag"
            }, {
                id: 56,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⲆⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⲆⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Autumn Bag"
            }, {
                id: 57,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆΔⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⲆᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Dino Egg Bag"
            }, {
                id: 66,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⵠⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔᐃΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Magic Cloud Bag"
            }, {
                id: 69,
                ⵠΔⲆ: ⵠⵠ.Ⲇᐃᐃⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃᐃᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Chest Bag"
            }, {
                id: 75,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⲆⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆᐃΔⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Spectum Bag"
            }, {
                id: 79,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠᐃⵠΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆⲆⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Winter Peasant's Bag"
            }, {
                id: 31,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆⲆΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io ",
                name: "Reidite Carrier"
            }, {
                id: 18,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠⲆⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Lava Bag"
            }, {
                id: 49,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃᐃⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔΔⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Lava Bag 2"
            }, {
                id: 36,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⵠΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Dragon Bag"
            }, {
                id: 55,
                ⵠΔⲆ: ⵠⵠ.Ⲇⵠⵠᐃⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔⵠᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Ice Bag"
            }, {
                id: 26,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⲆᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠⵠⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Reidite Pickaxe Bag"
            }, {
                id: 27,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔᐃⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔᐃΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Octopus Bowl"
            }, {
                id: 34,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠᐃⲆⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Cave Bag"
            }, {
                id: 42,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆΔᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Bag with Reidite Swords"
            }, {
                id: 63,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⲆΔⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⲆⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Engineer Bag"
            }],
            ᐃⲆⵠⵠⵠ: [{
                id: 0,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔⲆᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔΔⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Dead Box"
            }, {
                id: 1,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃⲆⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠᐃΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Hidden item"
            }, {
                id: 2,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⲆΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⲆⲆⲆⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box 1"
            }, {
                id: 3,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆⵠΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔⲆΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box 2"
            }, {
                id: 4,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⵠᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box 3"
            }, {
                id: 5,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠⵠΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃΔⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Broken Wooden Box"
            }, {
                id: 6,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠᐃⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆⵠⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box"
            }, {
                id: 7,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔᐃΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⵠⵠⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Battle Box"
            }, {
                id: 8,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆΔᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔᐃΔΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box with a Cross"
            }, {
                id: 9,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⲆΔΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box with Bubbles"
            }, {
                id: 10,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⵠΔΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠΔΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden Box with Eyes"
            }, {
                id: 11,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃᐃΔⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆΔᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Dark Wooden Box"
            }, {
                id: 38,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆⲆΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃⵠΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Weddlz",
                name: "Noob Box"
            }, {
                id: 12,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠΔΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden and Stone Box"
            }, {
                id: 14,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆΔⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠⵠΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Star Box 1"
            }, {
                id: 15,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠⵠᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Star Box 2"
            }, {
                id: 27,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠⲆⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠᐃΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Flower Box"
            }, {
                id: 46,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⲆⲆΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⲆⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Blue Box"
            }, {
                id: 75,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⲆⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔΔⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Night Stars Crate"
            }, {
                id: 19,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃᐃⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Beehive"
            }, {
                id: 13,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃΔⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden and Golden Box"
            }, {
                id: 21,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆⲆⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠΔⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Gravestone"
            }, {
                id: 25,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔᐃⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.Δⵠᐃᐃᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Communist",
                name: "Sky Box"
            }, {
                id: 29,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃᐃⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔΔΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Winter",
                name: "Golden Box"
            }, {
                id: 34,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔΔⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆΔⵠΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Communist",
                name: "Water Crate"
            }, {
                id: 35,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Communist",
                name: "Glass Crate"
            }, {
                id: 70,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔΔᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃᐃⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "CrysTal",
                name: "Crystal Sky Box"
            }, {
                id: 74,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔⲆᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔᐃΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Reclaimed Crate"
            }, {
                id: 77,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔΔΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⲆᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Workplace Accident"
            }, {
                id: 16,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆᐃᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃⵠᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden and Diamond Box"
            }, {
                id: 18,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠΔΔΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠᐃΔⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Don't Hit Me"
            }, {
                id: 26,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃΔⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠⲆⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Underwater Box"
            }, {
                id: 31,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⵠΔᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Communist",
                name: "Items Pile"
            }, {
                id: 32,
                ⵠΔⲆ: ⵠⵠ.ΔΔᐃⲆΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Cake Box"
            }, {
                id: 33,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠΔᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃΔᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Christmas Cake Box"
            }, {
                id: 36,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆΔΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⵠᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Fukss",
                name: "Crab Box"
            }, {
                id: 42,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃⵠⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔΔⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Fishing Box"
            }, {
                id: 72,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔᐃΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠⵠⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Storage Machine"
            }, {
                id: 22,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃⲆⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Let me out of here"
            }, {
                id: 17,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠⵠⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Wooden and Amethyst Box"
            }, {
                id: 24,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠⵠⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆΔⲆΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Aquarium"
            }, {
                id: 28,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃᐃⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆΔⲆᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Gift Box"
            }, {
                id: 40,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠⲆᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃⲆᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Open Watermelon Box"
            }, {
                id: 41,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⵠⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⵠΔΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Watermelon Box"
            }, {
                id: 39,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⲆᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Thornbush Box"
            }, {
                id: 43,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⲆⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠΔⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Rabbit in the Box"
            }, {
                id: 47,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⲆᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⵠⵠᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Garlic Plot"
            }, {
                id: 48,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠⲆⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⲆⵠΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Pumpkin Plot"
            }, {
                id: 78,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆⲆᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆᐃΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Spectrum Portal"
            }, {
                id: 45,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⵠᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃᐃⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Autumn Box"
            }, {
                id: 44,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔΔΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⲆΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Box"
            }, {
                id: 20,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⲆᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆᐃᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Metal and Reidite Box"
            }, {
                id: 23,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠΔⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃΔⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Kraken Box"
            }, {
                id: 30,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⵠⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⵠⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Lava Box"
            }, {
                id: 37,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃⲆⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Lava Box 2"
            }, {
                id: 49,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆΔⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆⵠᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Rabbit"
            }, {
                id: 50,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆⵠΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Wolf"
            }, {
                id: 51,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⵠⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠΔᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Spider"
            }, {
                id: 52,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Hawk"
            }, {
                id: 53,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔⲆᐃᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⵠⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Bear"
            }, {
                id: 54,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆⵠΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃⵠΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Fox"
            }, {
                id: 55,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⵠΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃΔΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Baby Mammoth"
            }, {
                id: 56,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔⵠⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆᐃⲆⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Mammoth"
            }, {
                id: 57,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔᐃᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃΔⵠΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Sandworm"
            }, {
                id: 58,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔΔⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃⵠΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Vulture"
            }, {
                id: 59,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆᐃᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆᐃΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Kraken"
            }, {
                id: 60,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆⲆΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃⲆᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Piranha"
            }, {
                id: 61,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠᐃᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔⲆᐃᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Baby Dragon"
            }, {
                id: 62,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⲆΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Baby Lava"
            }, {
                id: 63,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔΔⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Dragon"
            }, {
                id: 64,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔⵠⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔⵠΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Penguin"
            }, {
                id: 65,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Lava Dragon"
            }, {
                id: 66,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠΔᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆⲆⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Boar"
            }, {
                id: 67,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆΔⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔᐃⵠΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Fire mob"
            }, {
                id: 68,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠⲆⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the Crab"
            }, {
                id: 69,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔⵠⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⵠᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Box of the King Crab"
            }, {
                id: 71,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠⵠⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Dragon Box"
            }, {
                id: 73,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃΔΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⵠΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Rekt"
            }, {
                id: 76,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⲆⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃᐃᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sleeping Tamon Dragon"
            }],
            ΔᐃⲆᐃⵠ: [{
                id: 0,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆⲆΔⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔⵠⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Book 1"
            }, {
                id: 1,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠⵠⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⵠⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Book 2"
            }, {
                id: 2,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆΔⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃᐃⵠⲆᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Book 3"
            }, {
                id: 3,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⲆᐃⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃΔⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Book 4"
            }, {
                id: 4,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔᐃΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔⲆᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Damaged Book 1"
            }, {
                id: 18,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆᐃΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠⲆⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "SeveR",
                name: "Damaged Book 2"
            }, {
                id: 5,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆΔΔⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃΔΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Doctorpus",
                name: "Scroll"
            }, {
                id: 6,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔΔⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆΔⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Doctorpus",
                name: "Clipboard"
            }, {
                id: 7,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔⵠΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Seed Book"
            }, {
                id: 20,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔⵠΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠᐃⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Camo Book"
            }, {
                id: 24,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔᐃⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠΔᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Communist",
                name: "Stone Tablet"
            }, {
                id: 47,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆⵠⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⵠⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Reclaimed Book"
            }, {
                id: 10,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃΔⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠⵠΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Star Book"
            }, {
                id: 8,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠΔⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔⲆⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Gold Book"
            }, {
                id: 15,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⲆΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⵠⲆᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Old Mysterious Paper"
            }, {
                id: 17,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⲆⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Gold Engraving"
            }, {
                id: 25,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔⲆⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃᐃᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "fatant",
                name: "Ant Book"
            }, {
                id: 32,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⵠⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Mummy Book"
            }, {
                id: 37,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃᐃⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Garlic Book"
            }, {
                id: 38,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆΔⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃᐃⵠⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Pumpkin Book"
            }, {
                id: 39,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔⲆⵠⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠᐃᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Christmas Tree Book"
            }, {
                id: 11,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃⵠⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆᐃᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Diamond Book"
            }, {
                id: 9,
                ⵠΔⲆ: ⵠⵠ.ΔΔⲆᐃΔᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃᐃΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Obscure Book"
            }, {
                id: 16,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠΔᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆᐃⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Rolled Parchment"
            }, {
                id: 22,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔⲆⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔᐃⲆⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Cake Book"
            }, {
                id: 23,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃΔⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆⵠⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Christmas Cake Book"
            }, {
                id: 30,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔᐃⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⲆⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "MADBalgouthi",
                name: "Fish Book"
            }, {
                id: 31,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠⲆᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "CrysTal",
                name: "Once upon a time"
            }, {
                id: 48,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔⵠⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔⵠᐃᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Chrono Clock"
            }, {
                id: 49,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆᐃⵠⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Recipe Book"
            }, {
                id: 13,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔᐃᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃⲆⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Amethyst Book"
            }, {
                id: 28,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⲆᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Paint Pallet"
            }, {
                id: 29,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⲆⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠⵠⵠᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "CrysTal",
                name: "Watermelon Book"
            }, {
                id: 27,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠΔⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆΔᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Thornbush Book"
            }, {
                id: 35,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⲆⲆⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔⲆᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Menu"
            }, {
                id: 36,
                ⵠΔⲆ: ⵠⵠ.ⵠΔᐃⵠᐃΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃΔᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "CrysTal",
                name: "Lover Letter"
            }, {
                id: 40,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃΔⵠᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Fresh-Baked Cookies"
            }, {
                id: 41,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⲆⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠΔⵠᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Inside, there is just a book."
            }, {
                id: 45,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔΔⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠⲆᐃᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Crafting Machine"
            }, {
                id: 33,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆᐃΔⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔᐃⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Book"
            }, {
                id: 34,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔᐃᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Autumn Book"
            }, {
                id: 14,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⲆⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠᐃⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Reidite Book"
            }, {
                id: 12,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⲆᐃΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Lava Book"
            }, {
                id: 26,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⲆᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⵠᐃΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Lava Book 2"
            }, {
                id: 19,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Winter",
                name: "Ocean Mystery"
            }, {
                id: 21,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔᐃΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠᐃⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Dragon Book"
            }, {
                id: 42,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔᐃΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔᐃⲆⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Engineer Book"
            }, {
                id: 43,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⲆⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃⵠⲆⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Nightmare Book"
            }, {
                id: 44,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⲆⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⲆⵠⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "aloner",
                name: "Mystery Book"
            }, {
                id: 46,
                ⵠΔⲆ: ⵠⵠ.ᐃΔΔΔᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃᐃΔᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Cursed Book"
            }],
            ⵠΔᐃΔⲆ: [{
                id: 0,
                ⵠΔⲆ: ⵠⵠ.Ⲇⵠⵠᐃⵠⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.Ⲇⵠⵠᐃⵠⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Nothing"
            }, {
                id: 2,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠᐃΔᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⵠΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Pink Cheeks"
            }, {
                id: 3,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔᐃΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Heart"
            }, {
                id: 1,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⵠⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃⵠᐃΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bandage 1"
            }, {
                id: 4,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃᐃᐃⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠⵠᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃΔΔΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Flower 1"
            }, {
                id: 5,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃΔᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃⲆⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bow 1"
            }, {
                id: 6,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⲆᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔᐃⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bandage 2"
            }, {
                id: 7,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠⵠⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔᐃΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Flower 2"
            }, {
                id: 8,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠⵠΔᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆΔⵠᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Bandage 3"
            }, {
                id: 36,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆᐃΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃᐃⲆⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Foliage"
            }, {
                id: 59,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆΔΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆⵠⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Peaceful"
            }, {
                id: 67,
                ⵠΔⲆ: ⵠⵠ.ⵠΔᐃᐃᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔᐃⵠΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Sparkles"
            }, {
                id: 68,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃΔⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Luxury"
            }, {
                id: 69,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃⵠᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔΔⵠⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⵠΔΔⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Snow Flakes Crown"
            }, {
                id: 17,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⲆⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆᐃⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Glasses 1"
            }, {
                id: 10,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆΔΔⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃⲆⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Bow 2"
            }, {
                id: 11,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆⲆⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃᐃⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "pizza wa",
                name: "Little Stars"
            }, {
                id: 12,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⲆⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⲆⵠⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Pirate Eye Patch 1"
            }, {
                id: 44,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠᐃⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃΔⲆⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Pirate Eye Patch 2"
            }, {
                id: 23,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⲆᐃⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔⲆⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Clown nose"
            }, {
                id: 16,
                ⵠΔⲆ: ⵠⵠ.ⲆΔᐃᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆΔΔⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Eye Patch"
            }, {
                id: 30,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠⲆᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃⲆⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "eogito",
                name: "Flower 3"
            }, {
                id: 38,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃⵠⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔⵠⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Winter",
                name: "False Nose"
            }, {
                id: 74,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⲆᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠᐃⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Red Cloth"
            }, {
                id: 75,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔΔᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⵠΔΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Blue Cloth"
            }, {
                id: 79,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆᐃᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆΔⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Transparent Mask"
            }, {
                id: 89,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠΔΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Anyone want to play?",
                name: "Starve.io Anime"
            }, {
                id: 94,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔⵠΔΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆⲆⲆᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Ant",
                name: "Hero Mask"
            }, {
                id: 100,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆⵠΔⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠΔᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "This starver is mad"
            }, {
                id: 104,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃΔᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠᐃᐃⲆⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Scars"
            }, {
                id: 106,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⵠⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⵠᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "In Search of Intelligence"
            }, {
                id: 109,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆΔⵠⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔᐃᐃⵠΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Reclaimed Bandage"
            }, {
                id: 111,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⲆⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ΔⲆΔᐃ,
                ᐃᐃᐃ: "Starve.io",
                name: "Unwrap Starver for Gift"
            }, {
                id: 15,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔΔⵠᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⵠⵠᐃΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Star Glasses"
            }, {
                id: 21,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃᐃⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆΔΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Great-aunt's Glasses"
            }, {
                id: 24,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔΔᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃΔᐃⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Little Starver"
            }, {
                id: 22,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔᐃⵠⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆΔᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Little Glasses"
            }, {
                id: 13,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⵠᐃⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆⲆᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Flower Chain"
            }, {
                id: 29,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⲆᐃᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⲆⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Horns"
            }, {
                id: 31,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔΔⲆⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔΔΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Golden Flower"
            }, {
                id: 40,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⵠⵠⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "pizza wa",
                name: "Sleeping Mask"
            }, {
                id: 57,
                ⵠΔⲆ: ⵠⵠ.ΔᐃⵠΔΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠΔᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Taco4Life",
                name: "Fish on your head"
            }, {
                id: 58,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⲆᐃΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃⲆᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Rose"
            }, {
                id: 91,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆⵠΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⲆᐃᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "upfiz",
                name: "Grey Scarf"
            }, {
                id: 92,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⵠᐃΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⲆⲆⵠᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "upfiz",
                name: "Black Scarf"
            }, {
                id: 93,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⲆᐃΔᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃⲆΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "upfiz",
                name: "Skull Mask"
            }, {
                id: 95,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⲆⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⵠⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Golden Monocle"
            }, {
                id: 96,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃΔΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃᐃⵠⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "A simple instruction"
            }, {
                id: 102,
                ⵠΔⲆ: ⵠⵠ.Ⲇⵠᐃᐃⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔΔΔⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Garland"
            }, {
                id: 103,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃᐃΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆⲆΔᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "The Doormat"
            }, {
                id: 108,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠΔⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⵠΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Copium Tanks"
            }, {
                id: 117,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⲆΔⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔⵠᐃⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Eyelashes"
            }, {
                id: 118,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆⲆⲆⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆᐃᐃΔⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⵠⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Helmet Prototype"
            }, {
                id: 9,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔᐃΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔΔⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Fancy Glasses"
            }, {
                id: 25,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⵠⵠⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔᐃᐃΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Medecin Mask"
            }, {
                id: 14,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆⲆⲆⲆⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⵠⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mr. Mayor"
            }, {
                id: 19,
                ⵠΔⲆ: ⵠⵠ.ΔΔⵠΔⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆᐃᐃⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sunglasses 2"
            }, {
                id: 28,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⵠΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃⵠᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "pizza wa",
                name: "Starfish"
            }, {
                id: 37,
                ⵠΔⲆ: ⵠⵠ.ᐃⲆΔΔⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃΔⲆΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Berry"
            }, {
                id: 39,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⲆΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃⵠΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Flake"
            }, {
                id: 43,
                ⵠΔⲆ: ⵠⵠ.ΔⵠᐃΔⵠⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.Ⲇᐃᐃᐃⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Leaf "
            }, {
                id: 61,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⵠⲆⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆᐃⲆΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "A sword in your head"
            }, {
                id: 62,
                ⵠΔⲆ: ⵠⵠ.ⵠΔΔᐃΔΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠᐃᐃΔⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Winter Scarf"
            }, {
                id: 64,
                ⵠΔⲆ: ⵠⵠ.ᐃΔⲆᐃⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔΔᐃᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Scarf 2"
            }, {
                id: 66,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔⵠⵠΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠΔⵠⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Winter Scarf 3"
            }, {
                id: 70,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⵠⲆᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⵠΔΔᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mask with animal tracks"
            }, {
                id: 71,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔᐃⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⲆΔⵠΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Spring Mask"
            }, {
                id: 72,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔᐃⲆΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃⵠⵠⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Pink Mask"
            }, {
                id: 73,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃⵠⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠᐃΔⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Blue Mask"
            }, {
                id: 76,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠΔⵠᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠⵠΔⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Military Mask"
            }, {
                id: 77,
                ⵠΔⲆ: ⵠⵠ.ⵠΔᐃᐃᐃⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⵠᐃⵠⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Orange Mask"
            }, {
                id: 78,
                ⵠΔⲆ: ⵠⵠ.ⲆⵠΔⵠᐃⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆⵠᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "White and Red Points Mask"
            }, {
                id: 80,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⵠΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠΔΔΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Stick out your tongue Mask"
            }, {
                id: 81,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⵠⲆΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆⵠⲆᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Two Teeth Mask"
            }, {
                id: 82,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⵠⲆⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⵠⲆᐃⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Make-up Mask"
            }, {
                id: 83,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆΔⵠⵠΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃᐃᐃᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sad Mask"
            }, {
                id: 84,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠΔᐃⲆⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃᐃⵠΔΔᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Happy Mask"
            }, {
                id: 90,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠᐃⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⵠⵠⵠⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "aloner",
                name: "Blood"
            }, {
                id: 101,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔⵠⲆⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆΔΔᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Axed Plans"
            }, {
                id: 105,
                ⵠΔⲆ: ⵠⵠ.ⲆΔⵠᐃⲆᐃΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⲆᐃⵠⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Saddle"
            }, {
                id: 113,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆⲆᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃᐃⵠⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "I see"
            }, {
                id: 114,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⲆᐃⵠⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆΔⵠᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "I have no body and I must dress"
            }, {
                id: 115,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃⵠⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆᐃⲆⵠⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⲆⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Cursed Crown"
            }, {
                id: 27,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃⲆΔᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔⲆⲆⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Clown Face"
            }, {
                id: 20,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆᐃⵠⵠⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃᐃⲆΔΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Sunglasses 3"
            }, {
                id: 32,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠΔⲆⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔᐃⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Engineer's Glasses"
            }, {
                id: 33,
                ⵠΔⲆ: ⵠⵠ.Ⲇᐃⵠᐃⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠⲆΔⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Engineer's Monocle"
            }, {
                id: 34,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃⵠΔⲆⲆᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆⵠᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mauve's butt"
            }, {
                id: 41,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔⲆⲆᐃΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Lapa Head"
            }, {
                id: 42,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃⲆᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⵠΔΔΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "eogito",
                name: "Lapa Head "
            }, {
                id: 85,
                ⵠΔⲆ: ⵠⵠ.ΔⲆΔΔΔΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃΔⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Mask and Glasses"
            }, {
                id: 110,
                ⵠΔⲆ: ⵠⵠ.ΔⲆᐃᐃΔⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠⲆⵠᐃΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃᐃᐃⲆ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Spectrum Pet"
            }, {
                id: 60,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⵠᐃᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠΔⲆⵠΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Jason"
            }, {
                id: 26,
                ⵠΔⲆ: ⵠⵠ.ⲆΔᐃⲆΔᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔᐃⲆᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Devil Horns"
            }, {
                id: 18,
                ⵠΔⲆ: ⵠⵠ.ᐃᐃΔⵠᐃΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔΔΔᐃᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Big Boss"
            }, {
                id: 35,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃⲆⲆΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃᐃᐃⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Baby Kraken"
            }, {
                id: 63,
                ⵠΔⲆ: ⵠⵠ.ΔⲆⵠⵠᐃⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃΔΔⲆⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Deer Antlers"
            }, {
                id: 65,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠⵠᐃⲆᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔᐃⵠⵠⵠⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Baby Dragon on your head"
            }, {
                id: 86,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃΔᐃᐃᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆᐃⲆΔᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Gaz Mask and Glasses"
            }, {
                id: 87,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃᐃⲆᐃⲆΔ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆⵠⵠⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Pink Gaz Mask and Glasses"
            }, {
                id: 88,
                ⵠΔⲆ: ⵠⵠ.ΔᐃΔⵠᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔⵠⲆⲆΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "eogito",
                name: "Engineer Glasses"
            }, {
                id: 97,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃΔⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ᐃΔΔΔⵠΔⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Jarred Horns"
            }, {
                id: 98,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆᐃΔᐃⲆⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆᐃᐃΔⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Curved Horns"
            }, {
                id: 99,
                ⵠΔⲆ: ⵠⵠ.ⲆΔΔᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆⵠⵠⵠᐃⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Evil Goat Horns"
            }, {
                id: 107,
                ⵠΔⲆ: ⵠⵠ.ᐃⵠⲆΔⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠⵠⵠΔΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Decorative Earmuffs"
            }, {
                id: 112,
                ⵠΔⲆ: ⵠⵠ.ΔⵠΔΔⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⵠᐃᐃᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Tamon Dragon Pet"
            }, {
                id: 116,
                ⵠΔⲆ: ⵠⵠ.ᐃΔᐃⲆⵠⵠⵠ,
                ᐃᐃⵠ: ⵠⵠ.ΔⲆΔⵠΔᐃⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ⲆⵠⲆⵠ,
                ᐃᐃᐃ: "Starve.io",
                name: "Blanket"
            }, {
                id: 45,
                ⵠΔⲆ: ⵠⵠ.ⵠⲆⲆⵠᐃᐃⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆᐃᐃⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 5",
                level: 5
            }, {
                id: 46,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠᐃⵠⵠΔᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔⵠᐃⲆᐃΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 10",
                level: 10
            }, {
                id: 47,
                ⵠΔⲆ: ⵠⵠ.ⵠΔⵠⵠⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠΔΔᐃⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 15",
                level: 15
            }, {
                id: 48,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⵠΔⵠΔ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⲆⲆᐃⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 20",
                level: 20
            }, {
                id: 49,
                ⵠΔⲆ: ⵠⵠ.ⲆⲆⲆᐃⲆΔⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⵠⲆⵠᐃⲆⵠⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 25",
                level: 25
            }, {
                id: 50,
                ⵠΔⲆ: ⵠⵠ.ΔΔΔⲆΔⲆⲆ,
                ᐃᐃⵠ: ⵠⵠ.ᐃⵠⵠΔⲆⲆⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 30",
                level: 30
            }, {
                id: 51,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆᐃⵠΔⲆ,
                ᐃᐃⵠ: ⵠⵠ.ⵠΔⲆⲆΔⵠΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 35",
                level: 35
            }, {
                id: 52,
                ⵠΔⲆ: ⵠⵠ.ⲆᐃΔⲆⵠᐃⵠ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⲆⲆᐃⲆⲆⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 40",
                level: 40
            }, {
                id: 53,
                ⵠΔⲆ: ⵠⵠ.ⵠᐃⲆᐃⵠᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆⵠΔᐃΔⲆΔ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 45",
                level: 45
            }, {
                id: 54,
                ⵠΔⲆ: ⵠⵠ.ⵠⵠΔΔⲆᐃᐃ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔΔΔᐃⵠᐃ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 50",
                level: 50
            }, {
                id: 55,
                ⵠΔⲆ: ⵠⵠ.ΔᐃᐃᐃⲆΔΔ,
                ᐃᐃⵠ: ⵠⵠ.ΔΔⲆⲆΔΔⵠ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 55",
                level: 55
            }, {
                id: 56,
                ⵠΔⲆ: ⵠⵠ.ΔⵠⲆⵠᐃⵠᐃ,
                ᐃᐃⵠ: ⵠⵠ.ⲆΔΔⲆᐃⵠⲆ,
                Ⲇᐃᐃ: ⵠⲆΔ.ᐃⵠᐃΔΔ,
                ᐃᐃᐃ: "Starve.io",
                name: "More than Level 60",
                level: 60
            }]
        };
        ew.ⵠⲆᐃⵠⲆⲆᐃ = ⵠⵠⲆΔΔⲆΔ(ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ, 21);
        ew.ᐃⵠⲆⵠᐃᐃΔ = ⵠⵠⲆΔΔⲆΔ(ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ, 20);
        Ⲇᐃ[255] = [];
        Ⲇᐃ[7] = [];
        Ⲇᐃ[250] = [];
        Ⲇᐃ[28] = [];
        Ⲇᐃ[29] = [];
        Ⲇᐃ[796] = [];
        for (var a = 0; ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ.length > a; a++) {
            Ⲇᐃ[255][a] = [ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[a].ⵠΔⲆ, ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[a].ᐃᐃⵠ];
            Ⲇᐃ[7][a] = [ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[a].ΔΔᐃⲆ, ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[a].ⵠᐃᐃᐃ];
        }
        for (a = 0; ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ.length > a; a++) {
            Ⲇᐃ[28][a] = [ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ[a].ⵠΔⲆ, ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ[a].ᐃᐃⵠ];
        }
        for (a = 0; a < ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ.length; a++) {
            Ⲇᐃ[250][a] = [ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ[a].ⵠΔⲆ, ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ[a].ᐃᐃⵠ];
        }
        for (a = 0; a < ᐃⲆᐃΔ.ⲆΔⲆⲆ.length; a++) {
            Ⲇᐃ[29][a] = [ᐃⲆᐃΔ.ⲆΔⲆⲆ[a].ⵠΔⲆ, ᐃⲆᐃΔ.ⲆΔⲆⲆ[a].ᐃᐃⵠ];
        }
        for (a = 0; ᐃⲆᐃΔ.ⵠΔᐃΔⲆ.length > a; a++) {
            Ⲇᐃ[796][a] = [ᐃⲆᐃΔ.ⵠΔᐃΔⲆ[a].ⵠΔⲆ, ᐃⲆᐃΔ.ⵠΔᐃΔⲆ[a].ᐃᐃⵠ];
        }
    };
    const yt = 0;
    function zt(a, b, c, d) {
        a.beginPath();
        a.arc(b, c, d, 0, Math.PI * 2);
    }
    function At(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = Math.sqrt(b.width * b.width + b.height * b.height);
        d2 = e / 2;
        c.width = e;
        c.height = e;
        d.translate(d2, d2);
        d.rotate(a);
        d.drawImage(b, -b.width / 2, -b.height / 2);
        return c;
    }
    function Bt(b, c, d, e) {
        var f = Math.PI * 2 / c;
        b.beginPath();
        var g = [{
            x: d,
            y: 0
        }];
        var a = [];
        for (var i = 1; c > i; i++) {
            g.push({
                x: Math.sin(i * f) * d,
                y: Math.cos(i * f) * d
            });
            var j = g.length;
            a.push(ΔᐃⲆᐃ.ⵠᐃⵠⲆᐃⵠⵠ(g[j - 2], g[j - 1]));
        }
        a.push(ΔᐃⲆᐃ.ⵠᐃⵠⲆᐃⵠⵠ(g[g.length - 1], g[0]));
        var k = a[a.length - 1];
        b.moveTo(k.x, k.y);
        for (i = 0; i < c; i++) {
            b.arcTo(g[i].x, g[i].y, a[i].x, a[i].y, e);
        }
        b.closePath();
    }
    function Ct(a, b, c, d, e) {
        a.beginPath();
        a.lineCap = "round";
        a.arc(b, c, d, 0, Math.PI * 2 * e);
    }
    const Dt = 13;
    const Et = 255;
    function Ft(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.floor(b * 28);
        var g = Math.floor(b * 20);
        e.font = g + "px Baloo Paaji";
        var a = b * 8;
        var h = e.measureText(c).width + a * 2;
        d.width = h;
        d.height = f;
        xt(e, 0, 0, h, f, b * 10);
        e.globalAlpha = 0.5;
        wt(e, "#000");
        e.globalAlpha = 1;
        e.textBaseline = "middle";
        e.font = g + "px Baloo Paaji";
        e.beginPath();
        e.fillStyle = "#FFF";
        e.fillText(c, a, f / 2);
        return d;
    }
    const Gt = 4;
    const Ht = 20;
    function It(c, e) {
        var f = document.createElement("canvas");
        var i = f.getContext("2d");
        var j = c * 120;
        var k = c * 110;
        var a = j / 2;
        var m = k / 2;
        var n = c * 20;
        var h = c * 112;
        var l = c * 82;
        var g = h / 2;
        var o = l / 2;
        var b = c * 4;
        f.width = j;
        f.height = k;
        i.globalAlpha = 1;
        i.translate(a, m);
        xt(i, -g, -o, h, l, n);
        wt(i, e, e, b);
        return f;
    }
    const Kt = 18;
    const Lt = tr;
    const Mt = 0;
    function Nt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 264;
        d.height = a * 246;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 54);
        e.bezierCurveTo(a * 79, a * 21, a * 131, a * 13, a * 153, a * 36);
        e.bezierCurveTo(a * 204, a * 27, a * 221, a * 52, a * 216, a * 83);
        e.bezierCurveTo(a * 241, a * 103, a * 232, a * 138, a * 214, a * 147);
        e.bezierCurveTo(a * 223, a * 184, a * 201, a * 200, a * 175, a * 199);
        e.bezierCurveTo(a * 156, a * 218, a * 135, a * 222, a * 114, a * 203);
        e.bezierCurveTo(a * 62, a * 213, a * 66, a * 189, a * 59, a * 170);
        e.bezierCurveTo(a * 27, a * 164, a * 31, a * 134, a * 38, a * 123);
        e.bezierCurveTo(a * 11, a * 80, a * 51, a * 52, a * 75, a * 54);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 102);
        e.bezierCurveTo(a * 111, a * 80, a * 110, a * 66, a * 108, a * 51);
        e.bezierCurveTo(a * 119, a * 65, a * 129, a * 85, a * 135, a * 99);
        e.bezierCurveTo(a * 142, a * 67, a * 146, a * 60, a * 152, a * 50);
        e.bezierCurveTo(a * 154, a * 71, a * 152, a * 85, a * 149, a * 104);
        e.bezierCurveTo(a * 166, a * 88, a * 175, a * 83, a * 188, a * 78);
        e.bezierCurveTo(a * 179, a * 91, a * 170, a * 103, a * 160, a * 112);
        e.bezierCurveTo(a * 186, a * 107, a * 191, a * 107, a * 204, a * 108);
        e.bezierCurveTo(a * 195, a * 114, a * 179, a * 120, a * 163, a * 123);
        e.bezierCurveTo(a * 183, a * 130, a * 186, a * 135, a * 192, a * 140);
        e.bezierCurveTo(a * 179, a * 141, a * 164, a * 139, a * 153, a * 135);
        e.bezierCurveTo(a * 158, a * 145, a * 163, a * 159, a * 165, a * 177);
        e.bezierCurveTo(a * 154, a * 166, a * 145, a * 153, a * 138, a * 139);
        e.bezierCurveTo(a * 133, a * 155, a * 125, a * 170, a * 117, a * 182);
        e.bezierCurveTo(a * 116, a * 160, a * 119, a * 151, a * 124, a * 138);
        e.bezierCurveTo(a * 107, a * 150, a * 95, a * 156, a * 82, a * 159);
        e.bezierCurveTo(a * 94, a * 140, a * 101, a * 136, a * 113, a * 128);
        e.bezierCurveTo(a * 78, a * 123, a * 75, a * 121, a * 67, a * 118);
        e.bezierCurveTo(a * 85, a * 112, a * 94, a * 112, a * 111, a * 113);
        e.bezierCurveTo(a * 89, a * 97, a * 85, a * 93, a * 78, a * 82);
        e.bezierCurveTo(a * 92, a * 85, a * 101, a * 90, a * 121, a * 102);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 103);
        e.bezierCurveTo(a * 111, a * 112, a * 117, a * 136, a * 140, a * 130);
        e.bezierCurveTo(a * 151, a * 126, a * 156, a * 115, a * 155, a * 107);
        e.bezierCurveTo(a * 155, a * 96, a * 154, a * 94, a * 148, a * 94);
        e.bezierCurveTo(a * 141, a * 94, a * 146, a * 104, a * 136, a * 104);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        return d;
    }
    const eb = 10;
    const ib = 17;
    function tb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 22;
        d.height = a * 22;
        e.globalAlpha = 0.4;
        zt(e, a * 11, a * 11, a * 10);
        wt(e, c[0]);
        e.globalAlpha = 0.7;
        zt(e, a * 11, a * 11, a * 7);
        wt(e, c[0]);
        e.globalAlpha = 1;
        zt(e, a * 11, a * 11, a * 4);
        wt(e, c[0]);
        return d;
    }
    function nb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 70;
        d.height = a * 70;
        e.globalAlpha = 0.5;
        zt(e, a * 26, a * 26, a * 9);
        wt(e, c[0]);
        zt(e, a * 56, a * 36, a * 9);
        wt(e, c[1]);
        zt(e, a * 40, a * 50, a * 9);
        wt(e, c[2]);
        e.globalAlpha = 1;
        zt(e, a * 26, a * 26, a * 5);
        wt(e, c[0]);
        zt(e, a * 56, a * 36, a * 5);
        wt(e, c[1]);
        zt(e, a * 40, a * 50, a * 5);
        wt(e, c[2]);
        return d;
    }
    const ob = Wa;
    function ab(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 69.5, a * 145);
        xt(e, a * -8.5, a * -63, a * 17, a * 127, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 183, a * 145);
        xt(e, a * -8, a * -63, a * 16, a * 126, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 62.5);
        e.rotate(6.28);
        xt(e, a * -84.5, a * -25.5, a * 169, a * 51, a * 5);
        e.restore();
        wt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 118);
        e.rotate(6.24);
        xt(e, a * -85.5, a * -24, a * 169, a * 48, a * 5);
        e.restore();
        wt(e, c[3], c[1], a * 6);
        e.save();
        e.translate(a * 122, a * 177.5);
        e.rotate(6.32);
        xt(e, a * -84, a * -23.5, a * 169, a * 47, a * 5);
        e.restore();
        wt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 157);
        e.bezierCurveTo(a * 49, a * 160, a * 49, a * 160, a * 61, a * 163);
        e.bezierCurveTo(a * 49.5, a * 165.5, a * 49.5, a * 165.5, a * 38, a * 168);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 205, a * 175);
        e.bezierCurveTo(a * 192.5, a * 180, a * 192.5, a * 180, a * 180, a * 185);
        e.bezierCurveTo(a * 193, a * 188, a * 193, a * 188, a * 206, a * 191);
        e.closePath();
        wt(e, c[1]);
        return d;
    }
    function rb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 183, a * 107);
        xt(e, a * -8, a * -70.5, a * 16, a * 141, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 69.5, a * 110);
        xt(e, a * -8.5, a * -71, a * 17, a * 143, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 181);
        xt(e, a * -84.5, a * -26, a * 169, a * 52, a * 5);
        e.restore();
        wt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 95);
        e.bezierCurveTo(a * 105, a * 96, a * 113, a * 99, a * 134, a * 102);
        e.bezierCurveTo(a * 147, a * 106, a * 173, a * 100, a * 207, a * 105);
        e.bezierCurveTo(a * 210, a * 105, a * 207, a * 140, a * 207, a * 154);
        e.bezierCurveTo(a * 123.5, a * 151.5, a * 123.5, a * 151.5, a * 40, a * 149);
        e.bezierCurveTo(a * 37, a * 145, a * 39, a * 95, a * 41, a * 96);
        e.closePath();
        wt(e, c[2], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 75);
        e.bezierCurveTo(a * 54, a * 72.5, a * 54, a * 72.5, a * 40, a * 70);
        e.bezierCurveTo(a * 38, a * 46, a * 40, a * 46, a * 53, a * 46);
        e.bezierCurveTo(a * 201, a * 41, a * 201, a * 41, a * 201, a * 42);
        e.bezierCurveTo(a * 211, a * 40, a * 208, a * 53, a * 208, a * 72);
        e.bezierCurveTo(a * 209, a * 91, a * 210, a * 96, a * 194, a * 94);
        e.bezierCurveTo(a * 119, a * 97, a * 119, a * 97, a * 44, a * 100);
        e.bezierCurveTo(a * 39, a * 99, a * 40, a * 96, a * 40, a * 80);
        e.bezierCurveTo(a * 54, a * 77.5, a * 54, a * 77.5, a * 68, a * 75);
        e.closePath();
        wt(e, c[3], c[1], a * 6);
        return d;
    }
    function sb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 247;
        e.save();
        e.translate(a * 182, a * 120);
        xt(e, a * -8, a * -67, a * 16, a * 134, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 68.5, a * 127.5);
        xt(e, a * -8.5, a * -70.5, a * 17, a * 141, a * 1);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 123.5, a * 68);
        xt(e, a * -82.5, a * -24, a * 165, a * 48, a * 4);
        e.restore();
        wt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123, a * 179.5);
        xt(e, a * -83, a * -24.5, a * 166, a * 49, a * 4);
        e.restore();
        wt(e, c[2], c[1], a * 6);
        e.save();
        e.translate(a * 123.5, a * 123.5);
        e.rotate(6.24);
        xt(e, a * -82.5, a * -24.5, a * 165, a * 49, a * 4);
        e.restore();
        wt(e, c[3], c[1], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 112);
        e.bezierCurveTo(a * 149, a * 121.5, a * 96, a * 130, a * 94, a * 131);
        e.bezierCurveTo(a * 149.5, a * 127.5, a * 149.5, a * 127.5, a * 205, a * 124);
        e.closePath();
        wt(e, c[1]);
        return d;
    }
    const hb = 12;
    function lb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        xt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        wt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 96.49996948242188, a * 66.79510498046875);
        e.rotate(0);
        xt(e, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.translate(a * 2, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119, a * 28);
        e.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        e.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        e.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        e.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        e.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        e.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        e.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        e.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        e.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        e.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        e.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        e.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        e.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        e.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        e.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        e.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        e.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        e.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        e.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        e.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        e.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        return d;
    }
    function gb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 191;
        d.height = a * 153;
        e.globalAlpha = 0.5;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        xt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        wt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 97.49996948242188, a * 95.12844848632812);
        xt(e, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26.999969482421875, a * 50.850677490234375);
        e.bezierCurveTo(a * 46.499969482421875, a * 64.85067749023438, a * 46.499969482421875, a * 64.85067749023438, a * 65.99996948242188, a * 78.85067749023438);
        e.bezierCurveTo(a * 80.99996948242188, a * 87.85067749023438, a * 105.99996948242188, a * 82.85067749023438, a * 114.99996948242188, a * 80.85067749023438);
        e.bezierCurveTo(a * 130.99996948242188, a * 69.85067749023438, a * 152.99996948242188, a * 70.85067749023438, a * 166.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 156.99996948242188, a * 52.850677490234375, a * 156.99996948242188, a * 52.850677490234375, a * 146.99996948242188, a * 37.850677490234375);
        e.bezierCurveTo(a * 101.49996948242188, a * 37.350677490234375, a * 101.49996948242188, a * 37.350677490234375, a * 55.999969482421875, a * 36.850677490234375);
        e.closePath();
        wt(e, c[2], c[3], a * 4);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 41.999969482421875, a * 50.850677490234375, a * 47.999969482421875, a * 47.850677490234375, a * 56.999969482421875, a * 49.850677490234375);
        e.bezierCurveTo(a * 65.99996948242188, a * 41.850677490234375, a * 76.99996948242188, a * 42.850677490234375, a * 90.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 94.99996948242188, a * 42.850677490234375, a * 104.99996948242188, a * 42.850677490234375, a * 114.99996948242188, a * 47.850677490234375);
        e.bezierCurveTo(a * 131.99996948242188, a * 42.850677490234375, a * 142.99996948242188, a * 48.850677490234375, a * 145.99996948242188, a * 56.850677490234375);
        e.bezierCurveTo(a * 160.99996948242188, a * 63.850677490234375, a * 154.99996948242188, a * 69.85067749023438, a * 155.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 141.99996948242188, a * 71.85067749023438, a * 141.99996948242188, a * 71.85067749023438, a * 127.99996948242188, a * 72.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 83.85067749023438, a * 107.99996948242188, a * 82.85067749023438, a * 90.99996948242188, a * 85.85067749023438);
        e.bezierCurveTo(a * 70.99996948242188, a * 83.85067749023438, a * 64.99996948242188, a * 79.85067749023438, a * 53.999969482421875, a * 70.85067749023438);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 33.999969482421875, a * 65.85067749023438);
        e.bezierCurveTo(a * 36.999969482421875, a * 59.850677490234375, a * 34.999969482421875, a * 60.850677490234375, a * 39.999969482421875, a * 59.850677490234375);
        e.bezierCurveTo(a * 47.999969482421875, a * 61.850677490234375, a * 62.999969482421875, a * 76.85067749023438, a * 74.99996948242188, a * 79.85067749023438);
        e.bezierCurveTo(a * 93.99996948242188, a * 85.85067749023438, a * 111.99996948242188, a * 83.85067749023438, a * 124.99996948242188, a * 70.85067749023438);
        e.bezierCurveTo(a * 129.99996948242188, a * 67.85067749023438, a * 145.99996948242188, a * 65.85067749023438, a * 159.99996948242188, a * 67.85067749023438);
        e.bezierCurveTo(a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 71.85067749023438, a * 159.99996948242188, a * 75.85067749023438);
        e.bezierCurveTo(a * 146.99996948242188, a * 72.85067749023438, a * 144.99996948242188, a * 75.85067749023438, a * 143.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 144.99996948242188, a * 86.85067749023438, a * 140.99996948242188, a * 90.85067749023438, a * 137.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 139.99996948242188, a * 72.85067749023438, a * 135.99996948242188, a * 72.85067749023438, a * 133.99996948242188, a * 82.85067749023438);
        e.bezierCurveTo(a * 127.99996948242188, a * 88.85067749023438, a * 124.99996948242188, a * 70.85067749023438, a * 116.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 110.99996948242188, a * 91.85067749023438, a * 96.99996948242188, a * 81.85067749023438, a * 89.99996948242188, a * 90.85067749023438);
        e.bezierCurveTo(a * 85.99996948242188, a * 92.85067749023438, a * 81.99996948242188, a * 95.85067749023438, a * 76.99996948242188, a * 86.85067749023438);
        e.bezierCurveTo(a * 67.99996948242188, a * 93.85067749023438, a * 67.99996948242188, a * 91.85067749023438, a * 60.999969482421875, a * 79.85067749023438);
        e.bezierCurveTo(a * 53.999969482421875, a * 71.85067749023438, a * 52.999969482421875, a * 72.85067749023438, a * 46.999969482421875, a * 77.85067749023438);
        e.bezierCurveTo(a * 41.999969482421875, a * 78.85067749023438, a * 42.999969482421875, a * 69.85067749023438, a * 33.999969482421875, a * 65.85067749023438);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        zt(e, a * 68, a * 111.29513549804688, a * 15);
        wt(e, c[7], c[8], a * 4);
        zt(e, a * 123, a * 111.29510498046875, a * 15);
        wt(e, c[7], c[8], a * 4);
        zt(e, a * 63, a * 106, a * 5);
        wt(e, c[9]);
        zt(e, a * 118, a * 106, a * 5);
        wt(e, c[9]);
        return d;
    }
    const ub = 16;
    function bb(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 200;
        var f = b * 200;
        c.width = e;
        c.height = f;
        var g = Wd(0.35, il, ["#0e3022", "#0b8052", "#077b49"]);
        d.drawImage(g, 10, 10);
        g = Nd(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 21, 20);
        g = Nd(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 38, 28);
        g = Nd(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 15, 37);
        g = Nd(0.9, false, ["#3d2a6e", "#8255b5"]);
        d.drawImage(g, 32, 45);
        return c;
    }
    function db(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 40;
        var a = b * 40;
        e.width = g;
        e.height = a;
        var i = b * g / 2;
        var j = b * a / 2;
        var k = b * 15;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        zt(f, 0, 0, k);
        wt(f, d[0]);
        k = b * 5;
        i = b * 2;
        j = b * 1;
        f.translate(i, j);
        f.globalAlpha = 1;
        zt(f, 0, 0, k);
        wt(f, d[1]);
        f.restore();
        return e;
    }
    function vb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 191;
        c.height = a * 153;
        d.save();
        d.translate(a * 96.49996948242188, a * 66.79510498046875);
        xt(d, a * -79.5, a * -48.5, a * 159, a * 97, a * 22);
        d.restore();
        wt(d, b[0], b[0], a * 4);
        d.translate(a * 2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 119, a * 28);
        d.bezierCurveTo(a * 119, a * 22, a * 119, a * 20, a * 122, a * 16);
        d.bezierCurveTo(a * 149, a * 39, a * 149, a * 39, a * 176, a * 63);
        d.bezierCurveTo(a * 176, a * 75, a * 176, a * 75, a * 175, a * 88);
        d.bezierCurveTo(a * 174, a * 90, a * 174, a * 90, a * 172, a * 93);
        d.bezierCurveTo(a * 171, a * 101, a * 169, a * 109, a * 164, a * 113);
        d.bezierCurveTo(a * 163, a * 104, a * 163, a * 104, a * 162, a * 95);
        d.bezierCurveTo(a * 155, a * 105, a * 155, a * 105, a * 147, a * 116);
        d.bezierCurveTo(a * 87, a * 114, a * 87, a * 114, a * 26, a * 112);
        d.bezierCurveTo(a * 27, a * 106, a * 27, a * 106, a * 27, a * 101);
        d.bezierCurveTo(a * 24, a * 104, a * 24, a * 104, a * 20, a * 108);
        d.bezierCurveTo(a * 17, a * 103, a * 20, a * 86, a * 23, a * 72);
        d.bezierCurveTo(a * 15, a * 74, a * 14, a * 78, a * 12, a * 83);
        d.bezierCurveTo(a * 12, a * 65, a * 12, a * 54, a * 16, a * 42);
        d.bezierCurveTo(a * 14, a * 39, a * 14, a * 39, a * 12, a * 36);
        d.bezierCurveTo(a * 16, a * 33, a * 16, a * 33, a * 19, a * 30);
        d.bezierCurveTo(a * 18, a * 27, a * 18, a * 27, a * 17, a * 25);
        d.bezierCurveTo(a * 24, a * 24, a * 31, a * 21, a * 29, a * 19);
        d.bezierCurveTo(a * 37, a * 25, a * 37, a * 25, a * 45, a * 31);
        d.bezierCurveTo(a * 40, a * 23, a * 40, a * 21, a * 42, a * 16);
        d.bezierCurveTo(a * 74, a * 16, a * 74, a * 16, a * 106, a * 16);
        d.bezierCurveTo(a * 113, a * 21, a * 113, a * 21, a * 119, a * 26);
        d.closePath();
        wt(d, b[0], b[0], a * 4);
        d.save();
        d.translate(a * 97.49996948242188, a * 95.12844848632812);
        xt(d, a * -62.5, a * -41.5, a * 125, a * 83, a * 20);
        d.restore();
        wt(d, b[0], b[0], a * 4);
        return c;
    }
    function mb(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 185;
        f.height = b * 240;
        g.globalAlpha = 0.5;
        g.translate(0, b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        wt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 137);
        g.bezierCurveTo(b * 60, b * 87, b * 68, b * 66, b * 92, b * 67);
        g.bezierCurveTo(b * 115, b * 64, b * 129, b * 97, b * 137, b * 136);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 181);
        g.bezierCurveTo(b * 30, b * 164, b * 19, b * 150, b * 11, b * 136);
        g.bezierCurveTo(b * 28, b * 121, b * 38, b * 132, b * 48, b * 150);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 63, b * 208);
        g.bezierCurveTo(b * 75, b * 224, b * 86, b * 228, b * 93, b * 228);
        g.bezierCurveTo(b * 104, b * 229, b * 116, b * 219, b * 122, b * 205);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 130, b * 170);
        g.bezierCurveTo(b * 146, b * 125, b * 156, b * 126, b * 173, b * 137);
        g.bezierCurveTo(b * 167, b * 151, b * 143, b * 174, b * 131, b * 183);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 39, b * 140);
        g.bezierCurveTo(b * 75, b * 126, b * 113, b * 127, b * 143, b * 137);
        g.bezierCurveTo(b * 141, b * 186, b * 130, b * 202, b * 113, b * 214);
        g.bezierCurveTo(b * 85, b * 228, b * 56, b * 219, b * 48, b * 173);
        g.bezierCurveTo(b * 40, b * 148, b * 43, b * 145, b * 39, b * 140);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 59, b * 99);
        g.bezierCurveTo(b * 71, b * 68, b * 81, b * 68, b * 94, b * 67);
        g.bezierCurveTo(b * 105, b * 66, b * 119, b * 75, b * 123, b * 96);
        g.bezierCurveTo(b * 104, b * 91, b * 101, b * 94, b * 94, b * 97);
        g.bezierCurveTo(b * 76, b * 92, b * 73, b * 93, b * 60, b * 99);
        g.closePath();
        wt(g, d[3], d[2], b * 4);
        if (e === 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 47, b * 149);
            g.bezierCurveTo(b * 43, b * 140, b * 48, b * 130, b * 59, b * 127);
            g.bezierCurveTo(b * 77, b * 126, b * 90, b * 131, b * 131, b * 127);
            g.bezierCurveTo(b * 143, b * 130, b * 144, b * 143, b * 132, b * 154);
            g.bezierCurveTo(b * 90, b * 152, b * 90, b * 152, b * 48, b * 150);
            g.closePath();
            wt(g, d[1]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 40, b * 139);
            g.bezierCurveTo(b * 48, b * 113, b * 76, b * 119, b * 91, b * 126);
            g.bezierCurveTo(b * 117, b * 113, b * 135, b * 117, b * 144, b * 134);
            g.bezierCurveTo(b * 144, b * 138, b * 144, b * 138, b * 144, b * 142);
            g.bezierCurveTo(b * 128, b * 124, b * 108, b * 124, b * 91, b * 136);
            g.bezierCurveTo(b * 59, b * 124, b * 50, b * 137, b * 42, b * 148);
            g.closePath();
            wt(g, d[3], d[2], b * 4);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 41, b * 139);
            g.bezierCurveTo(b * 53, b * 117, b * 69, b * 118, b * 92, b * 127);
            g.bezierCurveTo(b * 124, b * 111, b * 136, b * 121, b * 143, b * 136);
            g.bezierCurveTo(b * 142, b * 144, b * 142, b * 144, b * 141, b * 152);
            g.bezierCurveTo(b * 128, b * 131, b * 113, b * 138, b * 92, b * 145);
            g.bezierCurveTo(b * 57, b * 133, b * 57, b * 147, b * 44, b * 154);
            g.closePath();
            wt(g, d[3], d[2], b * 4);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 95);
        g.bezierCurveTo(b * 99, b * 82, b * 98, b * 58, b * 99, b * 40);
        g.bezierCurveTo(b * 90, b * 38, b * 89, b * 34, b * 92, b * 17);
        g.bezierCurveTo(b * 92, b * 5, b * 83, b * 16, b * 78, b * 29);
        g.bezierCurveTo(b * 72, b * 59, b * 87, b * 81, b * 89, b * 87);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 90, b * 86);
        g.bezierCurveTo(b * 95, b * 74, b * 95, b * 62, b * 95, b * 43);
        g.bezierCurveTo(b * 84, b * 37, b * 86, b * 34, b * 89, b * 16);
        g.bezierCurveTo(b * 75, b * 29, b * 80, b * 58, b * 90, b * 85);
        g.closePath();
        wt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 117);
        g.bezierCurveTo(b * 98, b * 87, b * 93, b * 78, b * 85, b * 76);
        g.bezierCurveTo(b * 85.5, b * 79.5, b * 85.5, b * 79.5, b * 86, b * 83);
        g.bezierCurveTo(b * 84, b * 85.5, b * 84, b * 85.5, b * 82, b * 88);
        g.bezierCurveTo(b * 90, b * 93, b * 89, b * 100, b * 92, b * 117);
        g.closePath();
        wt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 92, b * 175);
        g.bezierCurveTo(b * 95, b * 135, b * 98, b * 125, b * 109, b * 121);
        g.bezierCurveTo(b * 106, b * 114, b * 104, b * 114, b * 102, b * 113);
        g.bezierCurveTo(b * 103, b * 106, b * 104, b * 103, b * 107, b * 96);
        g.bezierCurveTo(b * 74, b * 108, b * 86, b * 157, b * 92, b * 174);
        g.closePath();
        wt(g, d[1], d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 169);
        g.bezierCurveTo(b * 42, b * 187, b * 50, b * 193, b * 59, b * 198);
        g.closePath();
        wt(g, Cq, d[2], b * 5);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 136, b * 171);
        g.bezierCurveTo(b * 139, b * 186, b * 138, b * 191, b * 124, b * 199);
        g.closePath();
        wt(g, undefined, d[2], b * 4);
        zt(g, b * 63, b * 180, b * 15.231546211727817);
        wt(g, d[4]);
        zt(g, b * 121, b * 181, b * 15.652475842498529);
        wt(g, d[4]);
        zt(g, b * 58, b * 175, b * 5.656854249492381);
        wt(g, d[2]);
        zt(g, b * 116, b * 175, b * 5.656854249492381);
        wt(g, d[2]);
        return f;
    }
    function cb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 185;
        c.height = a * 240;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 137);
        d.bezierCurveTo(a * 60, a * 87, a * 68, a * 66, a * 92, a * 67);
        d.bezierCurveTo(a * 115, a * 64, a * 129, a * 97, a * 137, a * 136);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 53, a * 181);
        d.bezierCurveTo(a * 30, a * 164, a * 19, a * 150, a * 11, a * 136);
        d.bezierCurveTo(a * 28, a * 121, a * 38, a * 132, a * 48, a * 150);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 63, a * 208);
        d.bezierCurveTo(a * 75, a * 224, a * 86, a * 228, a * 93, a * 228);
        d.bezierCurveTo(a * 104, a * 229, a * 116, a * 219, a * 122, a * 205);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 170);
        d.bezierCurveTo(a * 146, a * 125, a * 156, a * 126, a * 173, a * 137);
        d.bezierCurveTo(a * 167, a * 151, a * 143, a * 174, a * 131, a * 183);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 39, a * 140);
        d.bezierCurveTo(a * 75, a * 126, a * 113, a * 127, a * 143, a * 137);
        d.bezierCurveTo(a * 141, a * 186, a * 130, a * 202, a * 113, a * 214);
        d.bezierCurveTo(a * 85, a * 228, a * 56, a * 219, a * 48, a * 173);
        d.bezierCurveTo(a * 40, a * 148, a * 43, a * 145, a * 39, a * 140);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 95);
        d.bezierCurveTo(a * 99, a * 82, a * 98, a * 58, a * 99, a * 40);
        d.bezierCurveTo(a * 90, a * 38, a * 89, a * 34, a * 92, a * 17);
        d.bezierCurveTo(a * 92, a * 5, a * 83, a * 16, a * 78, a * 29);
        d.bezierCurveTo(a * 72, a * 59, a * 87, a * 81, a * 89, a * 87);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 90, a * 86);
        d.bezierCurveTo(a * 95, a * 74, a * 95, a * 62, a * 95, a * 43);
        d.bezierCurveTo(a * 84, a * 37, a * 86, a * 34, a * 89, a * 16);
        d.bezierCurveTo(a * 75, a * 29, a * 80, a * 58, a * 90, a * 85);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 117);
        d.bezierCurveTo(a * 98, a * 87, a * 93, a * 78, a * 85, a * 76);
        d.bezierCurveTo(a * 85.5, a * 79.5, a * 85.5, a * 79.5, a * 86, a * 83);
        d.bezierCurveTo(a * 84, a * 85.5, a * 84, a * 85.5, a * 82, a * 88);
        d.bezierCurveTo(a * 90, a * 93, a * 89, a * 100, a * 92, a * 117);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 92, a * 175);
        d.bezierCurveTo(a * 95, a * 135, a * 98, a * 125, a * 109, a * 121);
        d.bezierCurveTo(a * 106, a * 114, a * 104, a * 114, a * 102, a * 113);
        d.bezierCurveTo(a * 103, a * 106, a * 104, a * 103, a * 107, a * 96);
        d.bezierCurveTo(a * 74, a * 108, a * 86, a * 157, a * 92, a * 174);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    const pb = 8;
    function Cb(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 100;
        var j = c * 100;
        var a = i / 2;
        var k = j / 2;
        e.width = i;
        e.height = j;
        var m = c * 5;
        var h = c * 28;
        var l = m / 2;
        var g = h / 2;
        f.translate(a, k);
        for (var n = 0; n < 4; n++) {
            xt(f, -l, -g, m, h, c * 2);
            f.rotate(Math.PI / 4);
            wt(f, d);
        }
        f.arc(0, 0, c * 10, 0, Math.PI * 2);
        wt(f, d);
        f.globalCompositeOperation = "destination-out";
        zt(f, 0, 0, c * 4);
        f.fill();
        return e;
    }
    const Tb = 3;
    const fb = 2;
    function zb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 32;
        var a = c * 32;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 5;
        var l = c * 28;
        var g = h / 2;
        var o = l / 2;
        j.translate(c * 0, c * 0);
        j.translate(m, n);
        if (f == 1) {
            zt(j, 0, 0, c * 10);
            wt(j, e[2], e[2], c * 3);
            for (var b = 0; b < 4; b++) {
                xt(j, -g, -o, h, l, c * 2);
                j.rotate(Math.PI / 4);
                wt(j, e[2], e[2], c * 4);
            }
        }
        zt(j, 0, 0, c * 10);
        wt(j, e[0], e[1], c * 1.5);
        for (b = 0; b < 4; b++) {
            xt(j, -g, -o, h, l, c * 2);
            j.rotate(Math.PI / 4);
            wt(j, e[0], e[1], c * 1.5);
        }
        zt(j, 0, 0, c * 10);
        wt(j, e[0]);
        zt(j, 0, 0, c * 4);
        wt(j, e[2], e[1], c * 1.5);
        j.globalCompositeOperation = "destination-out";
        zt(j, 0, 0, c * 4);
        wt(j, e[0], e[1], c * 2);
        j.globalCompositeOperation = "source-over";
        zt(j, 0, 0, c * 4);
        wt(j, ll, e[1], c * 2);
        return i;
    }
    const yb = 15;
    function wb(f, e, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var n = (d = f * 125) / 2;
        var a = (r = f * 95) / 2;
        var o = f * 10;
        var p = f * 8;
        var h = f * 112;
        var l = f * 82;
        var g = h / 2;
        var q = l / 2;
        var b = f * 4;
        j.width = d;
        j.height = r;
        k.translate(n - f * 4, a + f * 4);
        k.globalAlpha = e ? 0.5 : 1;
        xt(k, -g, -q, h, l, o);
        wt(k, i[0]);
        k.globalAlpha = 1;
        k.translate(0, -p);
        xt(k, -g, -q, h, l, o);
        wt(k, i[1], i[2], b);
        var d = f * 55;
        var r = f * 45;
        o = 5;
        k.translate(f * -40, f * -30);
        xt(k, 0, 0, d, r, o);
        wt(k, i[3]);
        var t = Cb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * -25);
        t = Cb(f * 0.7, i[3]);
        k.drawImage(t, f * 45, f * 15);
        t = Cb(f * 1.2, i[3]);
        k.drawImage(t, f * 28, f * -30);
        d = f * 15;
        r = f * 70;
        o = f * 5;
        k.translate(f * 78, f * -5);
        xt(k, 0, 0, d, r, o);
        wt(k, i[4]);
        d = f * 9;
        r = f * 50;
        o = f * 3;
        k.translate(f * -20, f * 20);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        xt(k, 0, 0, d, r, o);
        wt(k, i[5]);
        k.translate(f * -20, f * 29);
        k.rotate(Math.PI / 5);
        k.globalAlpha = 0.6;
        k.beginPath();
        k.lineJoin = "round";
        k.moveTo(0, 0);
        k.lineTo(0, f * 30);
        k.lineTo(f * 30, f * 30);
        k.closePath();
        wt(k, null, i[5], f * 8);
        return j;
    }
    const Pb = 2;
    function Ab(c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var i = c * 85;
        var j = c * 115;
        var a = c * 6;
        e.width = i;
        e.height = j;
        f.translate(c * -130, c * -60 + a);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        wt(f, d[0]);
        f.translate(0, -a);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(c * 190, c * 87, c * 201, c * 59, c * 208, c * 64);
        f.bezierCurveTo(c * 213, c * 68, c * 204, c * 93, c * 195, c * 109);
        f.bezierCurveTo(c * 195, c * 109, c * 202, c * 124, c * 191, c * 141);
        f.bezierCurveTo(c * 182, c * 151, c * 164, c * 155, c * 148, c * 144);
        f.bezierCurveTo(c * 136, c * 135, c * 138, c * 111, c * 145, c * 104);
        f.bezierCurveTo(c * 140, c * 92, c * 131, c * 67, c * 138, c * 63);
        f.bezierCurveTo(c * 145, c * 61, c * 153, c * 82, c * 155, c * 96);
        f.bezierCurveTo(c * 167, c * 91, c * 178, c * 92, c * 187, c * 98);
        f.closePath();
        wt(f, d[1], d[2], 4);
        var k = c * 155;
        var m = c * 133;
        var h = c * 10;
        var l = c * 3;
        var g = k + c * -3;
        var n = m + c * -5;
        f.save();
        f.translate(k, m);
        f.globalAlpha = 1;
        zt(f, 0, 0, h);
        wt(f, d[3]);
        f.restore();
        f.save();
        f.translate(g, n);
        f.globalAlpha = 1;
        zt(f, 0, 0, l);
        wt(f, d[4]);
        f.restore();
        f.save();
        f.translate(k + c * 27, m);
        f.globalAlpha = 1;
        zt(f, 0, 0, h);
        wt(f, d[3]);
        f.restore();
        f.save();
        f.translate(c * 27 + g, n);
        f.globalAlpha = 1;
        zt(f, 0, 0, l);
        wt(f, d[4]);
        return e;
    }
    const kb = 9;
    const xb = 16;
    function Jb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 85, a * 237);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 54.585977194239184, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178, a * 238);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 270, a * 239);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 53.58058329516393, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 222, a * 312);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 52.53573932334064, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 317, a * 159);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 57.63465889766331, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 223.5, a * 139.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 51.66236541235796, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 132.5, a * 137.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 52.009614495783374, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 178.5, a * 58.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 53.16013544000805, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 177.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 50, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 54, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 319.5, a * 138.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 55.08175741568164, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 269.5, a * 216.0625);
        e.rotate(1.5707963267948966);
        Bt(e, 6, a * 54.589376255824725, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.save();
        e.translate(a * 221.5, a * 293.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 49.49747468305833, a * 1);
        e.restore();
        wt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 342.0625);
        e.bezierCurveTo(a * 221.5, a * 350.5625, a * 221.5, a * 350.5625, a * 221.5, a * 359.0625);
        e.closePath();
        wt(e, ts, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 270.0625);
        e.bezierCurveTo(a * 84.5, a * 277.0625, a * 84.5, a * 277.0625, a * 84.5, a * 284.0625);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.save();
        e.translate(a * 84.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 177.5, a * 215.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 222.5, a * 294.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 270.5, a * 216.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 320.5, a * 134.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 224.5, a * 138.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 133.5, a * 137.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        e.save();
        e.translate(a * 178.5, a * 56.0625);
        e.rotate(0.5235987755982988);
        Bt(e, 6, a * 30, a * 15);
        e.restore();
        wt(e, c[3]);
        return d;
    }
    function Mb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        wt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111.25, a * 8.953125);
        e.bezierCurveTo(a * 117.75, a * 12.453125, a * 117.75, a * 12.453125, a * 124.25, a * 15.953125);
        e.bezierCurveTo(a * 113.75, a * 39.953125, a * 113.75, a * 39.953125, a * 103.25, a * 63.953125);
        e.bezierCurveTo(a * 97.75, a * 64.953125, a * 97.75, a * 64.953125, a * 92.25, a * 65.953125);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85.25, a * 82.953125);
        e.bezierCurveTo(a * 98.25, a * 46.453125, a * 98.25, a * 46.453125, a * 111.25, a * 9.953125);
        e.closePath();
        wt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        wt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 160.25, a * 114.953125);
        e.bezierCurveTo(a * 156.25, a * 122.453125, a * 156.25, a * 122.453125, a * 152.25, a * 129.953125);
        e.bezierCurveTo(a * 130.25, a * 117.953125, a * 130.25, a * 117.953125, a * 108.25, a * 105.953125);
        e.bezierCurveTo(a * 107.25, a * 98.953125, a * 107.25, a * 98.953125, a * 106.25, a * 91.953125);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.25, a * 84.953125);
        e.bezierCurveTo(a * 123.75, a * 100.453125, a * 123.75, a * 100.453125, a * 160.25, a * 115.953125);
        e.closePath();
        wt(e, xh, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        wt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 13.25, a * 53.953125);
        e.bezierCurveTo(a * 17.25, a * 46.953125, a * 17.25, a * 46.953125, a * 21.25, a * 39.953125);
        e.bezierCurveTo(a * 42.75, a * 52.453125, a * 42.75, a * 52.453125, a * 64.25, a * 64.953125);
        e.bezierCurveTo(a * 64.25, a * 70.953125, a * 64.25, a * 70.953125, a * 64.25, a * 76.953125);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.25, a * 83.953125);
        e.bezierCurveTo(a * 47.75, a * 68.453125, a * 47.75, a * 68.453125, a * 12.25, a * 52.953125);
        e.closePath();
        wt(e, undefined, c[6], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        wt(e, undefined, c[0], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.25, a * 159.953125);
        e.bezierCurveTo(a * 49.25, a * 155.453125, a * 49.25, a * 155.453125, a * 42.25, a * 150.953125);
        e.bezierCurveTo(a * 54.25, a * 127.953125, a * 54.25, a * 127.953125, a * 66.25, a * 104.953125);
        e.bezierCurveTo(a * 71.25, a * 104.953125, a * 71.25, a * 104.953125, a * 76.25, a * 104.953125);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.25, a * 86.953125);
        e.bezierCurveTo(a * 70.25, a * 123.953125, a * 70.25, a * 123.953125, a * 56.25, a * 160.953125);
        e.closePath();
        wt(e, Aj, c[6], a * 4);
        return d;
    }
    function Bb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 202.5, a * 147.5);
        xt(e, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
        e.restore();
        wt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 190.5);
        xt(e, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
        e.restore();
        wt(e, b[2], b[1], a * 12);
        e.save();
        e.save();
        e.translate(a * 202.5, a * 233.5);
        xt(e, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 202.5, a * 275);
        xt(e, a * 96.5, a * -21, a * -193, a * 42, a * 0);
        e.restore();
        wt(e, b[0], b[1], a * 12);
        e.save();
        e.translate(a * 201, a * 212);
        e.rotate(8.64);
        xt(e, a * -116, a * -22, a * 232, a * 44, a * 10);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 121.5);
        xt(e, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 203.5, a * 299);
        xt(e, a * -115.5, a * -20, a * 231, a * 40, a * 10);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 298.5, a * 210);
        xt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 108.5, a * 210);
        xt(e, a * -20.5, a * -109, a * 41, a * 218, a * 10);
        e.restore();
        wt(e, b[3], b[1], a * 12);
        e.save();
        e.translate(a * 204, a * 121.5);
        xt(e, a * -92, a * -9.5, a * 184, a * 19, a * 10);
        e.restore();
        wt(e, b[3], b[3], a * 10);
        e.save();
        e.translate(a * 197, a * 299);
        xt(e, a * 85, a * -9, a * -170, a * 18, a * 10);
        e.restore();
        wt(e, b[3], b[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 94, a * 317);
        e.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
        e.closePath();
        wt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279, a * 142);
        e.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
        e.closePath();
        wt(e, undefined, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 106);
        e.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
        e.closePath();
        wt(e, ll, b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 281, a * 282);
        e.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
        e.closePath();
        wt(e, Aj, b[1], a * 12);
        if (c == 0) {
            e.scale(2, 2);
            e.translate(a * -7, a * 55);
            e.rotate(-0.5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 60, a * 47);
            e.bezierCurveTo(a * 81, a * 46, a * 85, a * 47, a * 83, a * 63);
            e.bezierCurveTo(a * 83, a * 72, a * 83, a * 75, a * 72, a * 73);
            e.bezierCurveTo(a * 68, a * 80, a * 69, a * 82, a * 66, a * 73);
            e.bezierCurveTo(a * 62, a * 81, a * 61, a * 82, a * 59, a * 73);
            e.bezierCurveTo(a * 54, a * 81, a * 55, a * 81, a * 52, a * 74);
            e.bezierCurveTo(a * 38, a * 76, a * 41, a * 74, a * 40, a * 66);
            e.bezierCurveTo(a * 38, a * 45, a * 39, a * 49, a * 59, a * 47);
            e.closePath();
            wt(e, b[4], b[4], a * 5);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68, a * 54);
            e.bezierCurveTo(a * 75, a * 54, a * 77, a * 62, a * 71, a * 64);
            e.bezierCurveTo(a * 62, a * 65, a * 63, a * 54, a * 68, a * 54);
            e.closePath();
            wt(e, b[3]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 50, a * 55);
            e.bezierCurveTo(a * 57, a * 55, a * 58, a * 65, a * 52, a * 65);
            e.bezierCurveTo(a * 44, a * 66, a * 44, a * 54, a * 50, a * 55);
            e.closePath();
            wt(e, b[3]);
        } else if (c == 1) {
            e.scale(0.6, 0.6);
            e.translate(a * 185, a * 165);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 108, a * 56);
            e.bezierCurveTo(a * 136, a * 58, a * 203, a * 69, a * 234, a * 75);
            e.bezierCurveTo(a * 246, a * 77, a * 247, a * 78, a * 245, a * 90);
            e.bezierCurveTo(a * 238, a * 143, a * 228, a * 197, a * 214, a * 259);
            e.bezierCurveTo(a * 212, a * 267, a * 209, a * 270, a * 189, a * 268);
            e.bezierCurveTo(a * 142, a * 264, a * 106, a * 260, a * 75, a * 253);
            e.bezierCurveTo(a * 60, a * 250, a * 64, a * 250, a * 66, a * 221);
            e.bezierCurveTo(a * 71, a * 168, a * 87, a * 95, a * 98, a * 67);
            e.bezierCurveTo(a * 101, a * 57, a * 103, a * 56, a * 106, a * 56);
            e.closePath();
            wt(e, b[4], b[4], a * 20);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 112, a * 72);
            e.bezierCurveTo(a * 132, a * 73, a * 227, a * 85, a * 226, a * 91);
            e.bezierCurveTo(a * 231, a * 89, a * 217, a * 196, a * 200, a * 250);
            e.bezierCurveTo(a * 196, a * 254, a * 175, a * 249, a * 166, a * 249);
            e.bezierCurveTo(a * 91, a * 241, a * 82, a * 236, a * 83, a * 232);
            e.bezierCurveTo(a * 90, a * 144, a * 108, a * 71, a * 111, a * 72);
            e.closePath();
            wt(e, cl, b[0], a * 13);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 132, a * 117);
            e.bezierCurveTo(a * 171, a * 86, a * 191, a * 101, a * 188, a * 134);
            e.bezierCurveTo(a * 185, a * 154, a * 170, a * 158, a * 153, a * 158);
            e.bezierCurveTo(a * 143, a * 172, a * 146, a * 180, a * 147, a * 193);
            wt(e, undefined, b[0], a * 20);
            zt(e, a * 142, a * 221, a * 16.1245154965971);
            wt(e, b[0]);
        }
        return d;
    }
    function Db(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 255);
        e.bezierCurveTo(a * 113, a * 243, a * 179, a * 210, a * 219, a * 196);
        e.bezierCurveTo(a * 252, a * 203, a * 288, a * 215, a * 318, a * 233);
        e.bezierCurveTo(a * 304, a * 254, a * 258, a * 273, a * 215, a * 296);
        e.bezierCurveTo(a * 161, a * 287, a * 119, a * 270, a * 102, a * 257);
        e.closePath();
        wt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 258);
        e.bezierCurveTo(a * 99, a * 272.5, a * 99, a * 272.5, a * 99, a * 287);
        e.bezierCurveTo(a * 166, a * 319, a * 193, a * 320, a * 212, a * 324);
        e.bezierCurveTo(a * 292, a * 286, a * 312, a * 271, a * 319, a * 263);
        e.bezierCurveTo(a * 320, a * 249, a * 320, a * 241, a * 318, a * 234);
        e.bezierCurveTo(a * 300, a * 254, a * 254, a * 277, a * 216, a * 294);
        e.bezierCurveTo(a * 190, a * 296, a * 135, a * 276, a * 102, a * 258);
        e.closePath();
        wt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 323);
        e.bezierCurveTo(a * 211.5, a * 310.5, a * 211.5, a * 310.5, a * 211, a * 298);
        e.closePath();
        wt(e, undefined, c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 210);
        e.bezierCurveTo(a * 286, a * 210, a * 331, a * 254, a * 212, a * 276);
        e.bezierCurveTo(a * 108, a * 276, a * 112, a * 222, a * 213, a * 208);
        e.closePath();
        wt(e, c[3], c[4], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 200);
        e.bezierCurveTo(a * 126, a * 216, a * 177, a * 232, a * 213, a * 237);
        e.bezierCurveTo(a * 266, a * 218, a * 288, a * 209, a * 318, a * 190);
        e.bezierCurveTo(a * 269, a * 164, a * 239, a * 158, a * 214, a * 153);
        e.bezierCurveTo(a * 148, a * 172, a * 131, a * 182, a * 98, a * 200);
        e.closePath();
        wt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97, a * 204);
        e.bezierCurveTo(a * 97, a * 215.5, a * 97, a * 215.5, a * 97, a * 227);
        e.bezierCurveTo(a * 148, a * 250, a * 179, a * 256, a * 212, a * 262);
        e.bezierCurveTo(a * 268, a * 244, a * 281, a * 233, a * 318, a * 214);
        e.bezierCurveTo(a * 318, a * 203, a * 318, a * 203, a * 318, a * 192);
        e.bezierCurveTo(a * 250, a * 225, a * 236, a * 231, a * 214, a * 239);
        e.bezierCurveTo(a * 158, a * 228, a * 126, a * 215, a * 99, a * 201);
        e.closePath();
        wt(e, c[2], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212, a * 260);
        e.bezierCurveTo(a * 212, a * 251.5, a * 212, a * 251.5, a * 212, a * 243);
        e.closePath();
        wt(e, ts, c[1], a * 14);
        zt(e, a * 161, a * 201, a * 13);
        wt(e, c[5]);
        zt(e, a * 216, a * 205, a * 8.06225774829855);
        wt(e, c[5]);
        zt(e, a * 216, a * 175, a * 6.708203932499369);
        wt(e, c[5]);
        zt(e, a * 271, a * 191, a * 5.0990195135927845);
        wt(e, c[5]);
        zt(e, a * 206, a * 180, a * 11.180339887498949);
        wt(e, c[5]);
        return d;
    }
    function Eb(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 238;
        c.height = a * 230;
        d.translate(a * -93, a * -110 + a * 5);
        d.globalAlpha = 0.3;
        zt(d, a * 213.5, a * 256.75, a * 75);
        wt(d, b[5]);
        zt(d, a * 213.5, a * 175.75, a * 25);
        wt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[5];
        d.stroke();
        d.translate(0, -5);
        d.globalAlpha = 1;
        zt(d, a * 213.5, a * 256.75, a * 75);
        wt(d, b[3]);
        zt(d, a * 213.5, a * 175.75, a * 25);
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.lineWidth = a * 10;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 219.5, a * 158.75);
        d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 210.5, a * 160.75);
        d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
        d.closePath();
        d.fillStyle = b[0];
        d.fill();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 17;
        d.strokeStyle = b[3];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 156.5, a * 137.75);
        d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.5, a * 178.75);
        d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130.5, a * 124.75);
        d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 183.75);
        d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107.5, a * 213.75);
        d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 212.5, a * 187.75);
        d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 102.5, a * 258.75);
        d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.5, a * 192.75);
        d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
        d.lineWidth = a * 8;
        d.strokeStyle = b[0];
        d.stroke();
        zt(d, a * 213.5, a * 256.75, a * 70);
        wt(d, b[0]);
        zt(d, a * 213.5, a * 175.75, a * 20);
        wt(d, b[0]);
        zt(d, a * 222, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        zt(d, a * 205, a * 166, a * 5);
        d.fillStyle = b[2];
        d.fill();
        zt(d, a * 206.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        zt(d, a * 223.2, a * 167, a * 2.5);
        d.fillStyle = b[4];
        d.fill();
        d.save();
        d.translate(a * 213.5, a * 293.75);
        d.rotate(0.76);
        xt(d, a * -22, a * -21, a * 44, a * 42, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        d.save();
        d.translate(a * 212.5, a * 258.25);
        d.rotate(0.8);
        xt(d, a * -15, a * -14.5, a * 30, a * 29, a * 6);
        d.restore();
        d.fillStyle = b[1];
        d.fill();
        return c;
    }
    function Ib(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 188;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        wt(d, b[0], b[0], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        wt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
        d.closePath();
        wt(d, b[0], b[0], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        d.closePath();
        wt(d, b[0], b[0], a * 2);
        d.globalAlpha = 1;
        d.translate(0, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        wt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 60.00567626953125, a * 99.35227966308594);
        d.bezierCurveTo(a * 70.00567626953125, a * 82.35227966308594, a * 85.00567626953125, a * 86.35227966308594, a * 87.00567626953125, a * 97.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 101.35227966308594, a * 88.00567626953125, a * 105.35227966308594, a * 87.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 89.00567626953125, a * 111.35227966308594, a * 91.00567626953125, a * 112.35227966308594, a * 93.00567626953125, a * 115.35227966308594);
        d.bezierCurveTo(a * 96.00567626953125, a * 111.35227966308594, a * 99.00567626953125, a * 111.35227966308594, a * 100.00567626953125, a * 110.35227966308594);
        d.bezierCurveTo(a * 98.00567626953125, a * 92.35227966308594, a * 103.00567626953125, a * 86.35227966308594, a * 113.00567626953125, a * 89.35227966308594);
        d.bezierCurveTo(a * 122.00567626953125, a * 92.35227966308594, a * 123.00567626953125, a * 94.35227966308594, a * 126.00567626953125, a * 98.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 102.35227966308594, a * 123.00567626953125, a * 103.35227966308594, a * 121.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 124.00567626953125, a * 105.35227966308594, a * 126.00567626953125, a * 107.35227966308594, a * 129.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 115.00567626953125, a * 122.35227966308594, a * 113.00567626953125, a * 145.35227966308594, a * 100.00567626953125, a * 152.35227966308594);
        d.bezierCurveTo(a * 91.00567626953125, a * 158.35227966308594, a * 83.00567626953125, a * 149.35227966308594, a * 76.00567626953125, a * 138.35227966308594);
        d.bezierCurveTo(a * 67.00567626953125, a * 114.35227966308594, a * 63.00567626953125, a * 113.35227966308594, a * 59.00567626953125, a * 111.35227966308594);
        d.bezierCurveTo(a * 62.00567626953125, a * 107.35227966308594, a * 64.00567626953125, a * 105.35227966308594, a * 66.00567626953125, a * 104.35227966308594);
        d.bezierCurveTo(a * 63.00567626953125, a * 100.35227966308594, a * 62.00567626953125, a * 100.35227966308594, a * 60.00567626953125, a * 99.35227966308594);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
        d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
        d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
        d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
        d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
        d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
        d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
        d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
        d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
        d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
        d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
        d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
        d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
        d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
        d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
        d.closePath();
        wt(d, undefined, b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
        d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
        d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
        d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
        wt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
        d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
        d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
        wt(d, b[1], b[2], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 57.00567626953125, a * 68.53410339355469);
        d.bezierCurveTo(a * 63.00567626953125, a * 69.53410339355469, a * 69.00567626953125, a * 66.53410339355469, a * 73.00567626953125, a * 60.53410339355469);
        d.bezierCurveTo(a * 66.00567626953125, a * 47.53410339355469, a * 61.00567626953125, a * 42.53410339355469, a * 58.00567626953125, a * 49.53410339355469);
        d.bezierCurveTo(a * 56.00567626953125, a * 59.53410339355469, a * 56.00567626953125, a * 64.53410339355469, a * 57.00567626953125, a * 67.53410339355469);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115.00567626953125, a * 59.715911865234375);
        d.bezierCurveTo(a * 119.00567626953125, a * 48.715911865234375, a * 126.00567626953125, a * 41.715911865234375, a * 129.00567626953125, a * 48.715911865234375);
        d.bezierCurveTo(a * 131.00567626953125, a * 56.715911865234375, a * 133.00567626953125, a * 71.71591186523438, a * 127.00567626953125, a * 68.71591186523438);
        d.bezierCurveTo(a * 120.00567626953125, a * 67.71591186523438, a * 114.00567626953125, a * 59.715911865234375, a * 116.00567626953125, a * 58.715911865234375);
        d.closePath();
        wt(d, b[3]);
        zt(d, a * 77, a * 107, a * 6);
        wt(d, b[2]);
        zt(d, a * 110, a * 107, a * 6);
        wt(d, b[2]);
        zt(d, a * 75, a * 105, a * 3);
        wt(d, b[4]);
        zt(d, a * 108, a * 105, a * 3);
        wt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 88.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 93.00567626953125, a * 137.4431915283203, a * 96.00567626953125, a * 138.4431915283203, a * 100.00567626953125, a * 141.4431915283203);
        d.bezierCurveTo(a * 103.00567626953125, a * 143.4431915283203, a * 101.00567626953125, a * 149.4431915283203, a * 95.00567626953125, a * 148.4431915283203);
        d.bezierCurveTo(a * 85.00567626953125, a * 148.4431915283203, a * 86.00567626953125, a * 145.4431915283203, a * 88.00567626953125, a * 142.4431915283203);
        d.closePath();
        wt(d, b[1]);
        return c;
    }
    function Sb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 52;
        d.height = a * 65;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.833328247070312, a * 12.078125);
        e.bezierCurveTo(a * 15.333328247070312, a * 28.078125, a * 15.333328247070312, a * 28.078125, a * 20.833328247070312, a * 44.078125);
        e.closePath();
        wt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 7.8333282470703125, a * 20.078125);
        e.bezierCurveTo(a * 16.833328247070312, a * 32.578125, a * 16.833328247070312, a * 32.578125, a * 25.833328247070312, a * 45.078125);
        e.closePath();
        wt(e, sr, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 26.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 11.078125, a * 16.833328247070312, a * 8.078125, a * 14.833328247070312, a * 7.078125);
        e.bezierCurveTo(a * 11.833328247070312, a * 17.078125, a * 13.833328247070312, a * 22.078125, a * 23.833328247070312, a * 27.078125);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.83332824707031, a * 8.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 27.078125, a * 28.833328247070312, a * 27.078125, a * 23.833328247070312, a * 28.078125);
        e.bezierCurveTo(a * 21.833328247070312, a * 14.078125, a * 26.833328247070312, a * 11.078125, a * 35.83332824707031, a * 8.078125);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.833328247070312, a * 39.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 29.078125, a * 14.833328247070312, a * 27.078125, a * 5.8333282470703125, a * 29.078125);
        e.bezierCurveTo(a * 9.833328247070312, a * 39.078125, a * 16.833328247070312, a * 42.078125, a * 25.833328247070312, a * 40.078125);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.83332824707031, a * 23.078125);
        e.bezierCurveTo(a * 35.83332824707031, a * 35.078125, a * 31.833328247070312, a * 37.078125, a * 25.833328247070312, a * 36.078125);
        e.bezierCurveTo(a * 25.833328247070312, a * 24.078125, a * 33.83332824707031, a * 21.078125, a * 42.83332824707031, a * 23.078125);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.833328247070312, a * 24.078125);
        e.bezierCurveTo(a * 20.833328247070312, a * 34.078125, a * 23.833328247070312, a * 40.078125, a * 27.833328247070312, a * 43.078125);
        e.bezierCurveTo(a * 37.33332824707031, a * 28.078125, a * 37.33332824707031, a * 28.078125, a * 46.83332824707031, a * 13.078125);
        wt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38.83332824707031, a * 14.078125);
        e.bezierCurveTo(a * 34.83332824707031, a * 24.078125, a * 34.83332824707031, a * 24.078125, a * 30.833328247070312, a * 34.078125);
        wt(e, Lk, c[1], a * 2);
        return d;
    }
    function Qb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        Bt(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.32);
        Bt(e, 7, a * 42.15447781671598, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        Bt(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        e.rotate(0.28);
        Bt(e, 7, a * 30.463092423455635, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 4);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        zt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        zt(e, a * 86.25, a * 84.953125, a * 18.867962264113206);
        wt(e, c[5], c[6], a * 4);
        return d;
    }
    function _b(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 55;
        var a = b * 55;
        var h = b * 8;
        e.width = g;
        e.height = a;
        f.translate(b * -65, b * -55 + h);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 95, b * 60);
        f.bezierCurveTo(b * 107, b * 62, b * 110, b * 73, b * 107, b * 79);
        f.bezierCurveTo(b * 104, b * 85, b * 85, b * 93, b * 81, b * 88);
        f.bezierCurveTo(b * 74, b * 80, b * 85, b * 60, b * 95, b * 60);
        f.closePath();
        wt(f, d[0], d[1], 3);
        f.globalAlpha = 1;
        f.beginPath();
        f.moveTo(b * 91, b * 70);
        f.bezierCurveTo(b * 91, b * 75, b * 100, b * 76, b * 100, b * 73);
        f.bezierCurveTo(b * 100, b * 69, b * 89, b * 65, b * 91, b * 70);
        f.closePath();
        wt(f, d[2], d[3], 3);
        return e;
    }
    const Fb = 10;
    const Rb = 13;
    function jb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 75;
        var a = b * 55;
        e.width = g;
        e.height = a;
        f.translate(b * -30, b * -40);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 67, b * 56, b * 72, b * 71, b * 72, b * 71);
        f.bezierCurveTo(b * 72, b * 71, b * 84, b * 70, b * 75, b * 82);
        f.bezierCurveTo(b * 70, b * 88, b * 61, b * 89, b * 58, b * 89);
        f.bezierCurveTo(b * 55, b * 89, b * 40, b * 89, b * 46, b * 77);
        f.bezierCurveTo(b * 46, b * 77, b * 43, b * 63, b * 43, b * 63);
        f.bezierCurveTo(b * 35, b * 61, b * 35, b * 53, b * 42, b * 47);
        f.bezierCurveTo(b * 48, b * 42, b * 62, b * 41, b * 66, b * 43);
        f.bezierCurveTo(b * 70, b * 45, b * 72, b * 48, b * 67, b * 56);
        f.closePath();
        wt(f, d[0]);
        f.beginPath();
        f.bezierCurveTo(b * 68, b * 61, b * 72, b * 76, b * 72, b * 76);
        f.bezierCurveTo(b * 65, b * 85, b * 61, b * 85, b * 49, b * 83);
        f.bezierCurveTo(b * 49, b * 83, b * 44, b * 63, b * 44, b * 63);
        f.bezierCurveTo(b * 54, b * 63, b * 60, b * 63, b * 67, b * 55);
        f.closePath();
        wt(f, d[1]);
        f.beginPath();
        f.moveTo(b * 69, b * 65);
        f.bezierCurveTo(b * 70, b * 61, b * 81, b * 66, b * 86, b * 66);
        f.bezierCurveTo(b * 90, b * 66, b * 97, b * 63, b * 97, b * 56);
        f.bezierCurveTo(b * 97, b * 50, b * 93, b * 47, b * 88, b * 44);
        wt(f, false, d[1], 2);
        f.beginPath();
        f.moveTo(b * 50, b * 48);
        f.bezierCurveTo(b * 43, b * 52, b * 50, b * 54, b * 51, b * 54);
        f.bezierCurveTo(b * 54, b * 54, b * 59, b * 52, b * 59, b * 49);
        f.bezierCurveTo(b * 59, b * 48, b * 55, b * 46, b * 50, b * 48);
        wt(f, d[2]);
        return e;
    }
    function Gb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 173;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        Bt(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 86.25, a * 84.953125);
        Bt(e, 7, a * 9.848857801796104, a * 5);
        e.restore();
        wt(e, c[8], c[9], a * 4);
        return d;
    }
    if (cj.ᐃᐃⵠᐃΔΔⲆ) {
        var Lb = cj.Math.acos;
        cj.Math.acos = cj.Math.asin;
        cj.Math.asin = Lb;
        var Wb = cj.Math.acos;
        cj.Math.acos = cj.Math.asin;
        cj.Math.asin = Wb;
    }
    function Nb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 145;
        var a = b * 145;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 70;
        f.translate(i, j);
        f.globalAlpha = 0.4;
        zt(f, 0, 0, h);
        wt(f, d[0]);
        h = b * 50;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        zt(f, 0, 0, h);
        wt(f, d[0]);
        h = b * 35;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        zt(f, 0, 0, h);
        wt(f, d[1]);
        h = b * 20;
        f.translate(0, 0);
        f.globalAlpha = 0.8;
        zt(f, 0, 0, h);
        wt(f, d[2]);
        return e;
    }
    function Ob(f, e, i, j, k) {
        var n = document.createElement("canvas");
        var a = n.getContext("2d");
        var o = f * 70;
        var p = f * 70;
        var h = f * 10;
        var l = f * 5;
        n.width = o;
        n.height = p + l;
        for (var g = 0; e.length > g; g++) {
            var q = e[g];
            a.globalAlpha = q.a;
            var r = q.f(i, false, q.c);
            a.save();
            a.translate(o / 2 + q.x * f, p / 2 + f * q.y);
            a.rotate(q.r);
            a.drawImage(r, -r.width / 2, -r.height / 2);
            a.restore();
        }
        var s = [];
        for (g = 0; j.length > g; g++) {
            var t = document.createElement("canvas");
            var v = t.getContext("2d");
            t.width = o;
            t.height = p + l;
            v.globalAlpha = k / 2;
            if (g == 2) {
                xt(v, 0, l, o, p, h);
            } else {
                xt(v, 0, 0, o, p + l, h);
            }
            wt(v, "#081a19");
            v.globalAlpha = k;
            if (g == 2) {
                xt(v, 0, l, o, p, h);
            } else {
                xt(v, 0, 0, o, p, h);
            }
            wt(v, j[g]);
            v.globalAlpha = 1;
            if (g == 2) {
                v.drawImage(n, 0, l);
            } else {
                v.drawImage(n, 0, 0);
            }
            s.push(Ya(t));
        }
        return s;
    }
    function qb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 135;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m, n);
        j.rotate(-Math.PI / 5);
        j.globalAlpha = 1;
        xt(j, -o, -b, l, g, h);
        wt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 5);
        j.globalAlpha = 1;
        xt(j, -o, -b, l, g, h);
        wt(j, f[0], f[1], d);
        return i;
    }
    function Hb(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 193;
        var a = c * 198;
        var n = c * 140;
        var o = c * 90;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 25;
        var g = c * 180;
        var b = l / 2;
        var d = g / 2;
        var p = c * 4;
        j.translate(c * -25, c * 1);
        j.translate(n, o);
        j.rotate(-Math.PI / 5);
        xt(j, -b, -d, l, g, h);
        wt(j, f[0], f[1], p);
        j.translate(c * -30, c * -25);
        j.rotate(Math.PI / 3);
        xt(j, -b, -d, l, g, h);
        wt(j, f[0], f[1], p);
        j.translate(c * 35, c * 30);
        j.rotate(Math.PI / 3);
        xt(j, -b, -d, l, g, h);
        wt(j, f[0], f[1], p);
        return i;
    }
    function Ub(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 195;
        var a = c * 190;
        var m = k / 2;
        var n = a / 2;
        i.width = k;
        i.height = a;
        var h = c * 10;
        var l = c * 35;
        var g = c * 150;
        var o = l / 2;
        var b = g / 2;
        var d = c * 4;
        j.translate(m - c * 5, n - c * 5);
        j.rotate(-Math.PI / 1.25);
        j.globalAlpha = 1;
        xt(j, -o, -b, l, g, h);
        wt(j, f[0], f[1], d);
        j.translate(0, 0);
        j.rotate(Math.PI / 3);
        j.globalAlpha = 1;
        xt(j, -o, -b, l, g, h);
        wt(j, f[0], f[1], d);
        j.translate(0, 5);
        xt(j, -o / 2, -b / 2, l / 2, g / 3, h - 2);
        wt(j, f[1]);
        return i;
    }
    const Yb = 17;
    function Kb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        wt(e, Hq, c[2], a * 4);
        zt(e, a * 18, a * 38, a * 14.866068747318506);
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        wt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        return d;
    }
    function Vb(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 155;
        d.height = a * 127;
        e.globalAlpha = 0.5;
        e.translate(0, a * 8);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 68);
        e.bezierCurveTo(a * 86, a * 64, a * 117, a * 66, a * 134, a * 68);
        e.bezierCurveTo(a * 152, a * 69, a * 165, a * 86, a * 152, a * 104);
        e.bezierCurveTo(a * 146, a * 87, a * 122, a * 89, a * 98, a * 90);
        e.bezierCurveTo(a * 64, a * 89, a * 41, a * 91, a * 36, a * 106);
        e.bezierCurveTo(a * 19, a * 92, a * 31, a * 71, a * 54, a * 69);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.translate(a * 7, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 41);
        e.bezierCurveTo(a * 49, a * 31, a * 53, a * 29, a * 62, a * 27);
        e.bezierCurveTo(a * 59, a * 24, a * 56, a * 25, a * 53, a * 24);
        e.bezierCurveTo(a * 67, a * 15, a * 84, a * 12, a * 120, a * 16);
        e.bezierCurveTo(a * 107, a * 11, a * 96, a * 6, a * 85, a * 2);
        e.bezierCurveTo(a * 59, a * 3, a * 54, a * 7, a * 40, a * 17);
        e.bezierCurveTo(a * 32.5, a * 22.5, a * 32.5, a * 22.5, a * 25, a * 28);
        e.bezierCurveTo(a * 32, a * 30, a * 32, a * 30, a * 39, a * 32);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 28);
        e.bezierCurveTo(a * 39, a * 30, a * 37, a * 31, a * 40, a * 32);
        e.bezierCurveTo(a * 22, a * 45, a * 26, a * 58, a * 29, a * 66);
        e.bezierCurveTo(a * 86.5, a * 65, a * 86.5, a * 65, a * 144, a * 64);
        e.bezierCurveTo(a * 151, a * 42, a * 132, a * 20, a * 120, a * 16);
        e.bezierCurveTo(a * 106, a * 12, a * 89, a * 0, a * 73, a * 3);
        e.bezierCurveTo(a * 51, a * 5, a * 36, a * 20, a * 25, a * 28);
        e.closePath();
        wt(e, undefined, c[2], a * 4);
        zt(e, a * 18, a * 38, a * 14.866068747318506);
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 30);
        e.bezierCurveTo(a * 27, a * 38, a * 25, a * 50, a * 26, a * 60);
        e.bezierCurveTo(a * 36.5, a * 58.5, a * 36.5, a * 58.5, a * 47, a * 57);
        wt(e, c[1], c[2], a * 4);
        e.translate(a * -7, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 74);
        e.bezierCurveTo(a * 38, a * 77.5, a * 38, a * 77.5, a * 49, a * 81);
        e.bezierCurveTo(a * 54.5, a * 75.5, a * 54.5, a * 75.5, a * 60, a * 70);
        e.bezierCurveTo(a * 64, a * 72, a * 64, a * 72, a * 68, a * 74);
        e.bezierCurveTo(a * 80.5, a * 67.5, a * 80.5, a * 67.5, a * 93, a * 61);
        e.bezierCurveTo(a * 104.5, a * 68, a * 104.5, a * 68, a * 116, a * 75);
        e.bezierCurveTo(a * 120.5, a * 72.5, a * 120.5, a * 72.5, a * 125, a * 70);
        e.bezierCurveTo(a * 129, a * 75, a * 129, a * 75, a * 133, a * 80);
        e.bezierCurveTo(a * 145.5, a * 76.5, a * 145.5, a * 76.5, a * 158, a * 73);
        e.bezierCurveTo(a * 158, a * 87, a * 158, a * 93, a * 155, a * 95);
        e.bezierCurveTo(a * 152.5, a * 96, a * 152.5, a * 96, a * 150, a * 97);
        e.bezierCurveTo(a * 121, a * 85, a * 108, a * 86, a * 93, a * 85);
        e.bezierCurveTo(a * 64, a * 85, a * 52, a * 95, a * 38, a * 99);
        e.bezierCurveTo(a * 36, a * 98.5, a * 36, a * 98.5, a * 34, a * 98);
        e.bezierCurveTo(a * 25, a * 98, a * 27, a * 91, a * 27, a * 76);
        e.closePath();
        wt(e, c[6], c[7], a * 6);
        return d;
    }
    function Xb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 370;
        var a = b * 370;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 180;
        f.globalAlpha = 0.2;
        zt(f, i, j, h);
        wt(f, d[0]);
        return e;
    }
    function Zb(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 205;
        var a = b * 205;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        var h = b * 100;
        f.translate(i, j);
        f.globalAlpha = 1;
        zt(f, 0, 0, h);
        wt(f, d[0]);
        return e;
    }
    const $b = 18;
    const ed = 255;
    function id(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 32;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2 + b * 10);
        e.globalAlpha = 0.5;
        zt(e, 0, 0, a);
        wt(e, c[0], c[0]);
        e.translate(0, b * -8);
        e.globalAlpha = 1;
        zt(e, 0, 0, a);
        wt(e, c[1], c[2], h);
        return d;
    }
    const td = 10;
    function nd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 220;
        var g = b * 220;
        var a = b * 16;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 0.5;
        zt(e, 0, 0, a);
        wt(e, c[0]);
        e.globalAlpha = 1;
        return d;
    }
    function od(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 121;
        f.height = b * 130;
        g.translate(0, b * 20);
        if (d == 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 6, b * 23);
            g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
            g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
            g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
            g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
            g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
            g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
            g.closePath();
            wt(g, $l, c[3], b * 13);
        }
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 6, b * 23);
        g.bezierCurveTo(b * 6, b * 46, b * 6, b * 46, b * 6, b * 69);
        g.bezierCurveTo(b * 21, b * 69, b * 21, b * 69, b * 36, b * 69);
        g.bezierCurveTo(b * 45.5, b * 78.5, b * 45.5, b * 78.5, b * 55, b * 88);
        g.bezierCurveTo(b * 55.5, b * 45.5, b * 55.5, b * 45.5, b * 56, b * 3);
        g.bezierCurveTo(b * 47, b * 14, b * 47, b * 14, b * 38, b * 25);
        g.bezierCurveTo(b * 23, b * 25, b * 23, b * 25, b * 6, b * 23);
        g.closePath();
        wt(g, c[1], c[2], b * 4);
        if (e == 1) {
            g.translate(0, b * 5);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            wt(g, Fh, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            wt(g, ij, c[0], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            wt(g, ts, c[0], b * 10);
            if (d == 1) {
                g.translate(b * -6, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 67, b * 30);
                g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
                wt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 70, b * 17);
                g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
                wt(g, undefined, c[3], b * 18);
                g.translate(3, b * 0);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 76, b * 8);
                g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
                wt(g, Cq, c[3], b * 18);
                g.translate(-6, b * 0);
            } else {
                g.translate(b * -6, b * -5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 67, b * 30);
            g.bezierCurveTo(b * 73, b * 47, b * 69, b * 45, b * 67, b * 58);
            wt(g, ij, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 17);
            g.bezierCurveTo(b * 83, b * 45, b * 76, b * 55, b * 70, b * 69);
            wt(g, Fh, c[2], b * 10);
            g.translate(3, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 76, b * 8);
            g.bezierCurveTo(b * 88, b * 31, b * 89, b * 55, b * 76, b * 79);
            wt(g, undefined, c[2], b * 10);
        } else {
            if (d == 1) {
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                wt(g, undefined, c[3], b * 18);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                wt(g, undefined, c[3], b * 18);
            } else {
                g.translate(0, b * -5);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 108, b * 27);
                g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
                g.closePath();
                wt(g, ll, c[0], b * 7);
                g.beginPath();
                g.lineCap = "round";
                g.lineJoin = "round";
                g.moveTo(b * 79, b * 30);
                g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
                g.closePath();
                wt(g, undefined, c[0], b * 7);
                g.translate(0, b * 5);
            }
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 108, b * 27);
            g.bezierCurveTo(b * 94, b * 45.5, b * 94, b * 45.5, b * 80, b * 64);
            g.closePath();
            wt(g, Lk, c[2], b * 7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 79, b * 30);
            g.bezierCurveTo(b * 93, b * 47, b * 93, b * 47, b * 107, b * 64);
            g.closePath();
            wt(g, undefined, c[2], b * 7);
        }
        return f;
    }
    function ad(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = Math.max(c.width, b.width);
        var g = Math.max(c.height, b.height);
        d.width = f;
        d.height = g;
        e.drawImage(b, (f - b.width) / 2, (g - b.height) / 2);
        e.drawImage(c, (f - c.width) / 2, (g - c.height) / 2);
        return d;
    }
    function rd(c, e, f, i) {
        var j = document.createElement("canvas");
        var k = j.getContext("2d");
        var a = c * 210;
        var m = c * 205;
        var n = c * 30;
        var h = c * 20;
        var l = c * 200;
        var g = c * 180;
        var o = l / 2;
        var b = g / 2;
        j.width = a;
        j.height = m;
        j.width = c * 419;
        j.height = c * 412;
        if (i == 1) {
            k.save();
            k.translate(c * 10, c * 0);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 117.99996948242188, c * 216.40621948242188);
            k.bezierCurveTo(c * 86.99996948242188, c * 221.40621948242188, c * 74.99996948242188, c * 217.40621948242188, c * 60.999969482421875, c * 205.40621948242188);
            wt(k, es, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 114.99996948242188, c * 227.40621948242188);
            k.bezierCurveTo(c * 90.99996948242188, c * 233.40621948242188, c * 66.99996948242188, c * 228.40621948242188, c * 43.999969482421875, c * 225.40621948242188);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 110.99996948242188, c * 236.40621948242188);
            k.bezierCurveTo(c * 94.99996948242188, c * 244.40621948242188, c * 79.99996948242188, c * 249.40621948242188, c * 60.999969482421875, c * 249.40621948242188);
            wt(k, ij, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 111.99996948242188, c * 206.29513549804688);
            k.bezierCurveTo(c * 91.99996948242188, c * 206.29513549804688, c * 87.99996948242188, c * 201.29513549804688, c * 79.99996948242188, c * 192.29513549804688);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 109.99996948242188, c * 249.18402099609375);
            k.bezierCurveTo(c * 97.99996948242188, c * 263.18402099609375, c * 85.99996948242188, c * 271.18402099609375, c * 65.99996948242188, c * 277.18402099609375);
            wt(k, sr, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 105.99996948242188, c * 192.18402099609375);
            k.bezierCurveTo(c * 99.49996948242188, c * 197.68402099609375, c * 99.49996948242188, c * 197.68402099609375, c * 92.99996948242188, c * 203.18402099609375);
            k.bezierCurveTo(c * 95.99996948242188, c * 213.18402099609375, c * 95.99996948242188, c * 215.18402099609375, c * 89.99996948242188, c * 219.18402099609375);
            k.bezierCurveTo(c * 91.99996948242188, c * 223.18402099609375, c * 91.99996948242188, c * 226.18402099609375, c * 87.99996948242188, c * 230.18402099609375);
            k.bezierCurveTo(c * 89.99996948242188, c * 234.18402099609375, c * 91.99996948242188, c * 237.18402099609375, c * 90.99996948242188, c * 244.18402099609375);
            k.bezierCurveTo(c * 96.99996948242188, c * 252.18402099609375, c * 96.99996948242188, c * 256.18402099609375, c * 95.99996948242188, c * 262.18402099609375);
            k.bezierCurveTo(c * 106.49996948242188, c * 264.18402099609375, c * 106.49996948242188, c * 264.18402099609375, c * 116.99996948242188, c * 266.18402099609375);
            wt(k, $l, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 104.99996948242188, c * 183.29513549804688);
            k.bezierCurveTo(c * 99.99996948242188, c * 193.29513549804688, c * 93.99996948242188, c * 195.29513549804688, c * 89.99996948242188, c * 201.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 212.29513549804688, c * 85.99996948242188, c * 214.29513549804688, c * 81.99996948242188, c * 215.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 223.29513549804688, c * 83.99996948242188, c * 227.29513549804688, c * 79.99996948242188, c * 230.29513549804688);
            k.bezierCurveTo(c * 83.99996948242188, c * 235.29513549804688, c * 84.99996948242188, c * 240.29513549804688, c * 79.99996948242188, c * 246.29513549804688);
            k.bezierCurveTo(c * 86.99996948242188, c * 251.29513549804688, c * 91.99996948242188, c * 256.2951354980469, c * 89.99996948242188, c * 266.2951354980469);
            k.bezierCurveTo(c * 102.99996948242188, c * 269.2951354980469, c * 102.99996948242188, c * 269.2951354980469, c * 115.99996948242188, c * 272.2951354980469);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 107.99996948242188, c * 177.85067749023438);
            k.bezierCurveTo(c * 95.99996948242188, c * 187.35067749023438, c * 95.99996948242188, c * 187.35067749023438, c * 83.99996948242188, c * 196.85067749023438);
            k.bezierCurveTo(c * 82.99996948242188, c * 203.85067749023438, c * 80.99996948242188, c * 209.85067749023438, c * 72.99996948242188, c * 210.85067749023438);
            k.bezierCurveTo(c * 73.99996948242188, c * 220.85067749023438, c * 73.99996948242188, c * 221.85067749023438, c * 66.99996948242188, c * 227.85067749023438);
            k.bezierCurveTo(c * 71.99996948242188, c * 235.85067749023438, c * 73.99996948242188, c * 239.85067749023438, c * 71.99996948242188, c * 247.85067749023438);
            k.bezierCurveTo(c * 80.99996948242188, c * 257.8506774902344, c * 81.99996948242188, c * 263.8506774902344, c * 77.99996948242188, c * 271.8506774902344);
            k.bezierCurveTo(c * 95.49996948242188, c * 272.8506774902344, c * 95.49996948242188, c * 272.8506774902344, c * 112.99996948242188, c * 273.8506774902344);
            wt(k, ll, e[4], c * 3);
            k.restore();
        } else if (i == 2) {
            k.save();
            k.translate(c * 130, c * 35);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 133.85067749023438);
            k.bezierCurveTo(c * 195.99996948242188, c * 129.85067749023438, c * 196.99996948242188, c * 111.85067749023438, c * 200.99996948242188, c * 88.85067749023438);
            wt(k, pl, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 143.85067749023438);
            k.bezierCurveTo(c * 189.99996948242188, c * 145.85067749023438, c * 207.99996948242188, c * 126.85067749023438, c * 222.99996948242188, c * 100.85067749023438);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 170.99996948242188, c * 157.85067749023438);
            k.bezierCurveTo(c * 193.99996948242188, c * 160.85067749023438, c * 210.99996948242188, c * 151.85067749023438, c * 232.99996948242188, c * 139.85067749023438);
            wt(k, ts, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 169.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 192.99996948242188, c * 175.85067749023438, c * 203.99996948242188, c * 177.85067749023438, c * 245.99996948242188, c * 168.85067749023438);
            wt(k, ts, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 167.99996948242188, c * 168.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 189.85067749023438, c * 191.99996948242188, c * 193.85067749023438, c * 220.99996948242188, c * 196.85067749023438);
            wt(k, cl, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 117.85067749023438);
            k.bezierCurveTo(c * 181.99996948242188, c * 120.85067749023438, c * 181.99996948242188, c * 120.85067749023438, c * 186.99996948242188, c * 123.85067749023438);
            k.bezierCurveTo(c * 183.99996948242188, c * 137.85067749023438, c * 185.99996948242188, c * 136.85067749023438, c * 190.99996948242188, c * 136.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 147.85067749023438, c * 189.99996948242188, c * 152.85067749023438, c * 193.99996948242188, c * 155.85067749023438);
            k.bezierCurveTo(c * 187.99996948242188, c * 165.85067749023438, c * 190.99996948242188, c * 169.85067749023438, c * 190.99996948242188, c * 172.85067749023438);
            k.bezierCurveTo(c * 186.99996948242188, c * 183.85067749023438, c * 186.99996948242188, c * 185.85067749023438, c * 189.99996948242188, c * 188.85067749023438);
            k.bezierCurveTo(c * 182.49996948242188, c * 195.35067749023438, c * 182.49996948242188, c * 195.35067749023438, c * 174.99996948242188, c * 201.85067749023438);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 112.18402099609375);
            k.bezierCurveTo(c * 183.99996948242188, c * 119.18402099609375, c * 186.99996948242188, c * 117.18402099609375, c * 192.99996948242188, c * 116.18402099609375);
            k.bezierCurveTo(c * 191.99996948242188, c * 126.18402099609375, c * 193.99996948242188, c * 130.18402099609375, c * 199.99996948242188, c * 130.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 145.18402099609375, c * 197.99996948242188, c * 147.18402099609375, c * 201.99996948242188, c * 153.18402099609375);
            k.bezierCurveTo(c * 196.99996948242188, c * 164.18402099609375, c * 197.99996948242188, c * 169.18402099609375, c * 201.99996948242188, c * 174.18402099609375);
            k.bezierCurveTo(c * 194.99996948242188, c * 184.18402099609375, c * 196.99996948242188, c * 187.18402099609375, c * 200.99996948242188, c * 193.18402099609375);
            k.bezierCurveTo(c * 185.99996948242188, c * 195.18402099609375, c * 181.99996948242188, c * 201.18402099609375, c * 174.99996948242188, c * 210.18402099609375);
            wt(k, undefined, e[4], c * 3);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 176.99996948242188, c * 101.29513549804688);
            k.bezierCurveTo(c * 181.99996948242188, c * 108.29513549804688, c * 189.99996948242188, c * 110.29513549804688, c * 195.99996948242188, c * 107.29513549804688);
            k.bezierCurveTo(c * 197.99996948242188, c * 121.29513549804688, c * 200.99996948242188, c * 122.29513549804688, c * 206.99996948242188, c * 122.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 138.29513549804688, c * 204.99996948242188, c * 142.29513549804688, c * 211.99996948242188, c * 148.29513549804688);
            k.bezierCurveTo(c * 201.99996948242188, c * 156.29513549804688, c * 205.99996948242188, c * 167.29513549804688, c * 213.99996948242188, c * 173.29513549804688);
            k.bezierCurveTo(c * 204.99996948242188, c * 181.29513549804688, c * 204.99996948242188, c * 187.29513549804688, c * 205.99996948242188, c * 193.29513549804688);
            k.bezierCurveTo(c * 190.99996948242188, c * 198.29513549804688, c * 181.99996948242188, c * 205.29513549804688, c * 174.99996948242188, c * 214.29513549804688);
            wt(k, xh, e[4], c * 3);
            k.restore();
        }
        k.translate(j.width / 2, j.height / 2);
        if (!i) {
            k.globalAlpha = 0.5;
            xt(k, -o, -b, l, g + h, n);
            wt(k, e[0]);
            if (f) {
                k.rotate(Math.PI);
            }
            k.globalAlpha = 1;
            xt(k, -o, -b, l, g, n);
            wt(k, e[1], e[2], 4);
            k.globalAlpha = 1;
            xt(k, c * 35 - o, c * 20 - b, l - c * 50, g - c * 50, n - c * 10);
            wt(k, e[3]);
        }
        if (i == 3) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            wt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            wt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            wt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            wt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            wt(k, e[5]);
        } else if (i == 4) {
            k.translate(-j.width / 2, -j.height / 2);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 30, c * 167);
            k.bezierCurveTo(c * 47, c * 144, c * 64, c * 140, c * 80, c * 147);
            k.bezierCurveTo(c * 95, c * 154, c * 95, c * 159, c * 100, c * 179);
            k.bezierCurveTo(c * 105, c * 202, c * 95, c * 218, c * 69, c * 218);
            k.bezierCurveTo(c * 48, c * 236, c * 26, c * 223, c * 28, c * 213);
            k.bezierCurveTo(c * 28, c * 205, c * 29, c * 199, c * 32, c * 195);
            k.bezierCurveTo(c * 21, c * 183, c * 27, c * 173, c * 30, c * 167);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 26, c * 145);
            k.bezierCurveTo(c * 32, c * 138, c * 37, c * 137, c * 40, c * 139);
            k.bezierCurveTo(c * 43, c * 140, c * 41, c * 150, c * 31, c * 159);
            k.bezierCurveTo(c * 23, c * 166, c * 17, c * 158, c * 26, c * 145);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 13, c * 193);
            k.bezierCurveTo(c * 21, c * 187, c * 30, c * 190, c * 20, c * 202);
            k.bezierCurveTo(c * 13, c * 208, c * 7, c * 202, c * 13, c * 193);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 121, c * 190);
            k.bezierCurveTo(c * 129, c * 186, c * 137, c * 183, c * 135, c * 163);
            k.bezierCurveTo(c * 131, c * 135, c * 153, c * 127, c * 177, c * 124);
            k.bezierCurveTo(c * 198, c * 120, c * 208, c * 122, c * 226, c * 128);
            k.bezierCurveTo(c * 261, c * 112, c * 271, c * 126, c * 287, c * 147);
            k.bezierCurveTo(c * 310, c * 163, c * 304, c * 183, c * 283, c * 196);
            k.bezierCurveTo(c * 296, c * 249, c * 278, c * 262, c * 253, c * 263);
            k.bezierCurveTo(c * 210, c * 264, c * 188, c * 252, c * 177, c * 234);
            k.bezierCurveTo(c * 133, c * 242, c * 123, c * 241, c * 115, c * 225);
            k.bezierCurveTo(c * 109, c * 206, c * 115, c * 193, c * 121, c * 190);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 335, c * 196);
            k.bezierCurveTo(c * 312, c * 208, c * 300, c * 185, c * 309, c * 167);
            k.bezierCurveTo(c * 314, c * 141, c * 339, c * 127, c * 359, c * 144);
            k.bezierCurveTo(c * 363, c * 148, c * 364, c * 150, c * 364, c * 150);
            k.bezierCurveTo(c * 392, c * 143, c * 396, c * 183, c * 378, c * 204);
            k.bezierCurveTo(c * 367, c * 215, c * 339, c * 208, c * 335, c * 196);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 349, c * 212);
            k.bezierCurveTo(c * 339, c * 216, c * 334, c * 208, c * 341, c * 203);
            k.bezierCurveTo(c * 353, c * 198, c * 361, c * 205, c * 349, c * 212);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 46, c * 165);
            k.bezierCurveTo(c * 55, c * 148, c * 85, c * 157, c * 83, c * 175);
            k.bezierCurveTo(c * 99, c * 185, c * 89, c * 212, c * 66, c * 204);
            k.bezierCurveTo(c * 55, c * 212, c * 43, c * 212, c * 41, c * 202);
            k.bezierCurveTo(c * 39, c * 194, c * 42, c * 187, c * 49, c * 185);
            k.bezierCurveTo(c * 44, c * 175, c * 45, c * 172, c * 46, c * 165);
            k.closePath();
            wt(k, e[4]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 219, c * 144);
            k.bezierCurveTo(c * 251, c * 121, c * 277, c * 136, c * 276, c * 159);
            k.bezierCurveTo(c * 276, c * 176, c * 273, c * 191, c * 242, c * 193);
            k.bezierCurveTo(c * 226, c * 228, c * 155, c * 219, c * 150, c * 183);
            k.bezierCurveTo(c * 142, c * 144, c * 174, c * 127, c * 219, c * 144);
            k.closePath();
            wt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 123, c * 214);
            k.bezierCurveTo(c * 119, c * 198, c * 129, c * 189, c * 146, c * 194);
            k.bezierCurveTo(c * 158, c * 201, c * 165, c * 218, c * 147, c * 226);
            k.bezierCurveTo(c * 135, c * 230, c * 125, c * 222, c * 123, c * 214);
            k.closePath();
            wt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 257, c * 199);
            k.bezierCurveTo(c * 264, c * 199, c * 275, c * 213, c * 261, c * 220);
            k.bezierCurveTo(c * 246, c * 225, c * 235, c * 200, c * 257, c * 199);
            k.closePath();
            wt(k, e[5]);
            k.translate(c * -5, c * 55);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 186, c * 123);
            k.bezierCurveTo(c * 198, c * 115, c * 219, c * 110, c * 219, c * 123);
            k.bezierCurveTo(c * 216, c * 135, c * 171, c * 143, c * 186, c * 123);
            k.closePath();
            wt(k, e[5]);
            k.translate(c * 5, c * -55);
            k.translate(c * -5, c * 15);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 171, c * 241);
            k.bezierCurveTo(c * 189, c * 234, c * 200, c * 248, c * 189, c * 254);
            k.bezierCurveTo(c * 179, c * 260, c * 158, c * 246, c * 171, c * 241);
            k.closePath();
            wt(k, e[5]);
            k.beginPath();
            k.lineCap = "round";
            k.lineJoin = "round";
            k.moveTo(c * 367, c * 164);
            k.bezierCurveTo(c * 380, c * 160, c * 391, c * 185, c * 371, c * 189);
            k.bezierCurveTo(c * 362, c * 192, c * 354, c * 191, c * 350, c * 185);
            k.bezierCurveTo(c * 326, c * 205, c * 314, c * 182, c * 316, c * 171);
            k.bezierCurveTo(c * 317, c * 150, c * 332, c * 143, c * 347, c * 147);
            k.bezierCurveTo(c * 361, c * 151, c * 366, c * 158, c * 367, c * 164);
            k.closePath();
            wt(k, e[4]);
        }
        return j;
    }
    function sd(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 40;
        var g = b * 40;
        var a = b * 16;
        var h = b * 4;
        d.width = f;
        d.height = g;
        e.translate(f / 2, g / 2);
        e.globalAlpha = 1;
        zt(e, 0, 0, a);
        wt(e, c[0], c[1], h);
        return d;
    }
    function hd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = (b = c * 450) / 2;
        var a = (p = c * 145) / 2;
        var m = c * 10;
        var n = c * 300;
        var h = c * 30;
        var l = n / 2;
        var g = h / 2;
        var o = 4;
        if (f) {
            var b = c * 145;
            var p = c * 450;
            i.width = b;
            i.height = p;
            j.rotate(Math.PI / 2);
            j.save();
            j.globalAlpha = 0.5;
            xt(j, c * 100, c * -110, n, h, m);
            wt(j, e[0]);
            j.translate(c * 178, c * -98);
            xt(j, -l, -g - c * 6, c * 100, c * 100, m);
            wt(j, e[0]);
            j.translate(c * -50, c * 5);
            xt(j, c * 220, c * -15, c * 90, c * 90, m);
            wt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 250, c * -63);
            xt(j, -l - c * 20, -g, n, h, m);
            wt(j, e[1], e[2], o);
            j.translate(c * -70, c * -40);
            xt(j, -l - c * 20, -g, c * 100, c * 100, m);
            wt(j, e[3], e[4], o);
            j.translate(c * -70, c * 15);
            xt(j, c * 220, c * -22, c * 90, c * 90, m);
            wt(j, e[3], e[4], o);
            xt(j, c * 230, c * -12, c * 55, c * 55, m);
            wt(j, e[5]);
            j.translate(c * -70, 0);
            xt(j, c * -15, c * -2, c * 60, c * 60, m);
            wt(j, e[5]);
            j.restore();
        } else {
            i.width = b;
            i.height = p;
            j.save();
            j.globalAlpha = 0.5;
            j.translate(k, a + c * 10);
            xt(j, -l, -g, n, h, m);
            wt(j, e[0]);
            j.translate(c * -65, c * -25);
            xt(j, -l, -g - c * 6, c * 100, c * 100, c * 15);
            wt(j, e[0]);
            j.translate(c * -35, c * -5);
            xt(j, c * 220, c * -15, c * 90, c * 90, c * 15);
            wt(j, e[0]);
            j.restore();
            j.save();
            j.globalAlpha = 1;
            j.translate(c * 240, c * 70);
            xt(j, -l, -g, n, h, m);
            wt(j, e[1], e[2], o);
            j.translate(c * -60, c * -40);
            xt(j, -l - c * 20, -g, c * 100, c * 100, c * 15);
            wt(j, e[3], e[4], o);
            j.translate(c * -55, c * 10);
            xt(j, c * 220, c * -22, c * 90, c * 90, c * 15);
            wt(j, e[3], e[4], o);
            xt(j, c * 240, c * -12, c * 55, c * 55, c * 12);
            wt(j, e[5]);
            j.translate(c * 45, c * 0);
            xt(j, c * -145, c * -2, c * 60, c * 60, c * 12);
            wt(j, e[5]);
            j.restore();
        }
        return i;
    }
    const ld = 256;
    const gd = 12;
    function ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 250;
        e.translate(a * -135, a * -75);
        e.globalAlpha = b ? 0.8 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        wt(e, c[0]);
        zt(e, a * 160.5, a * 243.03125, a * 7);
        wt(e, c[0]);
        zt(e, a * 227.5, a * 242.03125, a * 7);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        wt(e, c[0], c[0], a * 5);
        zt(e, a * 194, a * 298, a * 9);
        wt(e, c[0], c[0], a * 5);
        e.globalAlpha = 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 178.5, a * 238.03125);
        e.bezierCurveTo(a * 177, a * 175.03125, a * 177, a * 175.03125, a * 175.5, a * 112.03125);
        e.bezierCurveTo(a * 184.5, a * 100.53125, a * 184.5, a * 100.53125, a * 193.5, a * 89.03125);
        e.bezierCurveTo(a * 202, a * 100.03125, a * 202, a * 100.03125, a * 210.5, a * 111.03125);
        e.bezierCurveTo(a * 209.5, a * 174.03125, a * 209.5, a * 174.03125, a * 208.5, a * 237.03125);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155.5, a * 239.03125);
        e.bezierCurveTo(a * 194, a * 238.53125, a * 194, a * 238.53125, a * 232.5, a * 238.03125);
        e.bezierCurveTo(a * 232.5, a * 243.03125, a * 232.5, a * 243.03125, a * 232.5, a * 248.03125);
        e.bezierCurveTo(a * 194, a * 248.53125, a * 194, a * 248.53125, a * 155.5, a * 249.03125);
        e.closePath();
        wt(e, c[1], c[2], a * 5);
        zt(e, a * 160.5, a * 243.03125, a * 7);
        wt(e, c[1], c[2], a * 5);
        zt(e, a * 227.5, a * 242.03125, a * 7);
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.5, a * 253.03125);
        e.bezierCurveTo(a * 193.5, a * 253.03125, a * 193.5, a * 253.03125, a * 201.5, a * 253.03125);
        e.bezierCurveTo(a * 201.5, a * 276.03125, a * 201.5, a * 276.03125, a * 201.5, a * 299.03125);
        e.bezierCurveTo(a * 194.5, a * 299.03125, a * 194.5, a * 299.03125, a * 187.5, a * 299.03125);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        zt(e, a * 194, a * 298, a * 9);
        wt(e, c[1], c[2], a * 7);
        return d;
    }
    function bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 424;
        d.height = a * 788;
        e.translate(a * 25, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        xt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        wt(e, c[0]);
        zt(e, a * 204, a * 693, a * 36.013886210738214);
        wt(e, c[0]);
        zt(e, a * 105, a * 518, a * 30);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -25, a * -25);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 193.5, a * 602.5);
        e.rotate(-0.12);
        xt(e, a * -26.5, a * -97.5, a * 53, a * 195, a * 25);
        e.restore();
        wt(e, c[1], c[2], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 519);
        e.bezierCurveTo(a * 182, a * 513, a * 182, a * 513, a * 227, a * 507);
        e.bezierCurveTo(a * 214, a * 417, a * 189, a * 304, a * 221, a * 180);
        e.bezierCurveTo(a * 191, a * 126, a * 192, a * 105, a * 198, a * 64);
        e.bezierCurveTo(a * 123, a * 102, a * 99, a * 285, a * 137, a * 517);
        e.closePath();
        wt(e, c[3], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 119);
        e.bezierCurveTo(a * 176, a * 142, a * 184, a * 165, a * 197, a * 183);
        e.bezierCurveTo(a * 167, a * 325, a * 191, a * 405, a * 202, a * 502);
        e.bezierCurveTo(a * 180, a * 503, a * 180, a * 503, a * 158, a * 504);
        e.bezierCurveTo(a * 135, a * 396, a * 134, a * 185, a * 175, a * 119);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 518);
        e.bezierCurveTo(a * 111.5, a * 533, a * 111.5, a * 533, a * 113, a * 548);
        e.bezierCurveTo(a * 162.5, a * 544, a * 162.5, a * 544, a * 212, a * 540);
        e.bezierCurveTo(a * 312, a * 535, a * 281, a * 665, a * 225, a * 665);
        e.bezierCurveTo(a * 227, a * 686.5, a * 227, a * 686.5, a * 229, a * 708);
        e.bezierCurveTo(a * 343, a * 684, a * 354, a * 496, a * 222, a * 498);
        e.bezierCurveTo(a * 165.5, a * 503, a * 165.5, a * 503, a * 109, a * 508);
        e.closePath();
        wt(e, c[6], c[4], a * 16);
        zt(e, a * 204, a * 693, a * 36.013886210738214);
        wt(e, c[6], c[4], a * 16);
        zt(e, a * 105, a * 518, a * 30);
        wt(e, c[6], c[4], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 171, a * 535);
        e.bezierCurveTo(a * 139.5, a * 537.5, a * 139.5, a * 537.5, a * 108, a * 540);
        e.bezierCurveTo(a * 110, a * 527.5, a * 110, a * 527.5, a * 112, a * 515);
        e.bezierCurveTo(a * 148, a * 513, a * 148, a * 513, a * 184, a * 511);
        e.closePath();
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 244, a * 669);
        e.bezierCurveTo(a * 248.5, a * 680, a * 248.5, a * 680, a * 253, a * 691);
        e.bezierCurveTo(a * 239.5, a * 697, a * 239.5, a * 697, a * 226, a * 703);
        e.bezierCurveTo(a * 223, a * 691.5, a * 223, a * 691.5, a * 220, a * 680);
        e.closePath();
        wt(e, c[6]);
        zt(e, a * 204, a * 693, a * 17.029386365926403);
        wt(e, c[7]);
        zt(e, a * 106, a * 518, a * 12);
        wt(e, c[7]);
        return d;
    }
    function dd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 469;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        xt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 31);
        e.bezierCurveTo(a * 125, a * 43, a * 125, a * 43, a * 132, a * 55);
        e.bezierCurveTo(a * 109.5, a * 185.5, a * 109.5, a * 185.5, a * 87, a * 316);
        e.bezierCurveTo(a * 72, a * 313.5, a * 72, a * 313.5, a * 57, a * 311);
        e.bezierCurveTo(a * 76.5, a * 181, a * 76.5, a * 181, a * 96, a * 51);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 30);
        e.bezierCurveTo(a * 96, a * 49.5, a * 96, a * 49.5, a * 104, a * 69);
        e.bezierCurveTo(a * 105.5, a * 41.5, a * 105.5, a * 41.5, a * 107, a * 14);
        e.bezierCurveTo(a * 114, a * 9.5, a * 114, a * 9.5, a * 121, a * 5);
        e.bezierCurveTo(a * 135.5, a * 27.5, a * 135.5, a * 27.5, a * 150, a * 50);
        e.bezierCurveTo(a * 110.5, a * 286, a * 110.5, a * 286, a * 103, a * 331);
        e.bezierCurveTo(a * 69.5, a * 325, a * 69.5, a * 325, a * 36, a * 319);
        e.bezierCurveTo(a * 56.5, a * 180, a * 56.5, a * 180, a * 77, a * 41);
        e.closePath();
        wt(e, undefined, c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 328);
        e.bezierCurveTo(a * 47, a * 385.5, a * 47, a * 385.5, a * 38, a * 443);
        e.bezierCurveTo(a * 52, a * 446, a * 52, a * 446, a * 66, a * 449);
        e.bezierCurveTo(a * 76.5, a * 388.5, a * 76.5, a * 388.5, a * 87, a * 328);
        e.closePath();
        wt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 302);
        e.bezierCurveTo(a * 104, a * 316.5, a * 104, a * 316.5, a * 134, a * 331);
        e.bezierCurveTo(a * 133, a * 341, a * 133, a * 341, a * 132, a * 351);
        e.bezierCurveTo(a * 69.5, a * 342, a * 69.5, a * 342, a * 7, a * 333);
        e.bezierCurveTo(a * 8, a * 323, a * 8, a * 323, a * 9, a * 313);
        e.closePath();
        wt(e, c[4], c[5], a * 7);
        e.save();
        e.translate(a * 51.5, a * 440.5);
        e.rotate(0.2);
        xt(e, a * -20.5, a * -18.5, a * 41, a * 37, a * 10);
        e.restore();
        wt(e, c[4], c[5], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 316);
        e.bezierCurveTo(a * 90, a * 324.5, a * 90, a * 324.5, a * 107, a * 333);
        e.bezierCurveTo(a * 70, a * 327.5, a * 70, a * 327.5, a * 33, a * 322);
        e.closePath();
        wt(e, c[6]);
        return d;
    }
    function vd(c, e, f) {
        var i = document.createElement("canvas");
        var j = i.getContext("2d");
        var k = c * 105;
        var a = c * 125;
        var m = c * 4;
        var n = c * 10;
        var h = c * 5;
        var l = c * 10;
        var g = c * 110;
        var o = l / 2;
        var b = g / 2;
        i.width = k;
        i.height = a;
        j.save();
        j.globalAlpha = e ? 0.5 : 1;
        j.translate(k / 2 + c * 8, a / 2 + h);
        xt(j, -o, -b, l, g, n);
        wt(j, e ? f[0] : f[1]);
        j.translate(c * -130 + h, c * -128 + h);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        wt(j, f[2]);
        j.restore();
        j.translate(k / 2 + 8, a / 2);
        j.globalAlpha = 1;
        xt(j, -o, -b, l, g, n);
        wt(j, f[3], f[4], m);
        j.translate(c * -130, c * -125);
        j.beginPath();
        j.bezierCurveTo(c * 159, c * 93, c * 156, c * 99, c * 154, c * 102);
        j.bezierCurveTo(c * 128, c * 92, c * 90, c * 93, c * 72, c * 96);
        j.bezierCurveTo(c * 68, c * 84, c * 143, c * 73, c * 162, c * 86);
        j.closePath();
        wt(j, f[5], f[6], m);
        return i;
    }
    const md = 18;
    function cd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 283;
        f.height = b * 224;
        g.translate(0, b * 15);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        wt(g, d[0]);
        g.translate(0, b * -15);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        wt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        wt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        wt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        wt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        wt(g, pl, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        wt(g, undefined, d[2], b * 40);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 93, b * 55);
        g.bezierCurveTo(b * 127, b * 27, b * 195, b * 42, b * 213, b * 78);
        g.bezierCurveTo(b * 254, b * 134, b * 226, b * 198, b * 153, b * 197);
        g.bezierCurveTo(b * 59, b * 204, b * 56, b * 158, b * 51, b * 115);
        g.bezierCurveTo(b * 50, b * 93, b * 81, b * 62, b * 90, b * 57);
        g.closePath();
        wt(g, d[1], d[2], b * 10);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 100, b * 33);
        g.bezierCurveTo(b * 85, b * 62, b * 102, b * 66, b * 110, b * 83);
        wt(g, Go, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 181, b * 32);
        g.bezierCurveTo(b * 196, b * 62, b * 181, b * 68, b * 178, b * 69);
        wt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 225, b * 52);
        g.bezierCurveTo(b * 228, b * 78, b * 207, b * 77, b * 192, b * 88);
        wt(g, undefined, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 34, b * 134);
        g.bezierCurveTo(b * 46, b * 111, b * 57, b * 111, b * 79, b * 109);
        wt(g, Hq, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 249, b * 135);
        g.bezierCurveTo(b * 233, b * 107, b * 212, b * 112, b * 202, b * 115);
        wt(g, Aj, d[1], b * 20);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 56, b * 50);
        g.bezierCurveTo(b * 56, b * 82, b * 73, b * 82, b * 93, b * 89);
        wt(g, undefined, d[1], b * 20);
        zt(g, b * 101, b * 155, b * 20.591260281974);
        wt(g, d[3]);
        zt(g, b * 180, b * 155, b * 20.591260281974);
        wt(g, d[3]);
        zt(g, b * 95, b * 148, b * 7.211102550927978);
        wt(g, d[4]);
        zt(g, b * 173, b * 148, b * 7.211102550927978);
        wt(g, d[4]);
        if (e === 1) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 191, b * 107);
            g.bezierCurveTo(b * 180, b * 104, b * 175, b * 101, b * 180, b * 95);
            g.bezierCurveTo(b * 180, b * 95, b * 181, b * 99, b * 188, b * 103);
            g.bezierCurveTo(b * 191, b * 101, b * 191, b * 95, b * 190, b * 91);
            g.bezierCurveTo(b * 190, b * 91, b * 196, b * 89, b * 195, b * 99);
            g.closePath();
            wt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 206, b * 98);
            g.bezierCurveTo(b * 203, b * 95, b * 200, b * 93, b * 198, b * 101);
            g.bezierCurveTo(b * 194, b * 109, b * 193, b * 109, b * 196, b * 110);
            g.bezierCurveTo(b * 206, b * 115, b * 209, b * 114, b * 211, b * 111);
            g.bezierCurveTo(b * 211, b * 106, b * 208, b * 108, b * 203, b * 108);
            g.bezierCurveTo(b * 193, b * 107, b * 204, b * 101, b * 206, b * 99);
            g.closePath();
            wt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 172, b * 111);
            g.bezierCurveTo(b * 172, b * 106, b * 174, b * 105, b * 185, b * 109);
            g.bezierCurveTo(b * 190, b * 109, b * 189, b * 114, b * 185, b * 120);
            g.bezierCurveTo(b * 181, b * 125, b * 180, b * 126, b * 176, b * 122);
            g.bezierCurveTo(b * 182, b * 119, b * 187, b * 110, b * 182, b * 112);
            g.closePath();
            wt(g, d[2]);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 202, b * 125);
            g.bezierCurveTo(b * 197, b * 117, b * 193, b * 116, b * 193, b * 120);
            g.bezierCurveTo(b * 192.5, b * 124.5, b * 192.5, b * 124.5, b * 192, b * 129);
            g.bezierCurveTo(b * 188, b * 129, b * 187, b * 124, b * 189, b * 120);
            g.bezierCurveTo(b * 191, b * 110, b * 192, b * 110, b * 200, b * 116);
            g.bezierCurveTo(b * 208, b * 120, b * 207, b * 123, b * 202, b * 125);
            g.closePath();
            wt(g, d[2]);
        }
        return f;
    }
    function pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        xt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        wt(e, c[0]);
        zt(e, a * 122, a * 480, a * 18.439088914585774);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 129, a * 218, a * 129, a * 218, a * 147, a * 85);
        e.bezierCurveTo(a * 167, a * 65.5, a * 167, a * 65.5, a * 187, a * 46);
        e.bezierCurveTo(a * 201.5, a * 70.5, a * 201.5, a * 70.5, a * 216, a * 95);
        e.bezierCurveTo(a * 194.5, a * 227.5, a * 194.5, a * 227.5, a * 173, a * 360);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 425.5);
        e.rotate(0.16);
        xt(e, a * -14, a * -56.5, a * 28, a * 113, a * 8);
        e.restore();
        wt(e, c[4], c[5], a * 12.5);
        zt(e, a * 122, a * 480, a * 18.439088914585774);
        wt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 371);
        e.bezierCurveTo(a * 131, a * 373, a * 145, a * 378, a * 197, a * 388);
        e.bezierCurveTo(a * 205, a * 382.5, a * 205, a * 382.5, a * 213, a * 377);
        e.bezierCurveTo(a * 167, a * 352, a * 117, a * 345, a * 69, a * 355);
        e.closePath();
        wt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 345);
        e.bezierCurveTo(a * 142, a * 345, a * 147, a * 346, a * 158, a * 349);
        e.bezierCurveTo(a * 177.5, a * 224.5, a * 177.5, a * 224.5, a * 197, a * 100);
        e.bezierCurveTo(a * 190.5, a * 84.5, a * 190.5, a * 84.5, a * 184, a * 69);
        e.bezierCurveTo(a * 173.5, a * 82, a * 173.5, a * 82, a * 163, a * 95);
        e.closePath();
        wt(e, c[3]);
        return d;
    }
    function Cd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 283;
        c.height = a * 224;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 33);
        d.bezierCurveTo(a * 85, a * 62, a * 102, a * 66, a * 110, a * 83);
        wt(d, ll, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 181, a * 32);
        d.bezierCurveTo(a * 196, a * 62, a * 181, a * 68, a * 178, a * 69);
        wt(d, $l, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 225, a * 52);
        d.bezierCurveTo(a * 228, a * 78, a * 207, a * 77, a * 192, a * 88);
        wt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 34, a * 134);
        d.bezierCurveTo(a * 46, a * 111, a * 57, a * 111, a * 79, a * 109);
        wt(d, cl, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 249, a * 135);
        d.bezierCurveTo(a * 233, a * 107, a * 212, a * 112, a * 202, a * 115);
        wt(d, undefined, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 56, a * 50);
        d.bezierCurveTo(a * 56, a * 82, a * 73, a * 82, a * 93, a * 89);
        wt(d, Go, b[0], a * 40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 55);
        d.bezierCurveTo(a * 124, a * 29, a * 179, a * 44, a * 188, a * 52);
        d.bezierCurveTo(a * 207, a * 64, a * 226, a * 94, a * 231, a * 118);
        d.bezierCurveTo(a * 236, a * 145, a * 222, a * 184, a * 193, a * 192);
        d.bezierCurveTo(a * 147, a * 201, a * 116, a * 200, a * 93, a * 193);
        d.bezierCurveTo(a * 61, a * 180, a * 48, a * 147, a * 50, a * 123);
        d.bezierCurveTo(a * 50, a * 93, a * 76, a * 66, a * 92, a * 56);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    const Td = 8;
    function fd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        xt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.save();
        e.translate(a * 132, a * 423);
        e.rotate(0.16);
        xt(e, a * -14, a * -61, a * 28, a * 122, a * 10);
        e.restore();
        wt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 344);
        e.bezierCurveTo(a * 123, a * 214, a * 123, a * 214, a * 146, a * 84);
        e.bezierCurveTo(a * 166.5, a * 65, a * 166.5, a * 65, a * 187, a * 46);
        e.bezierCurveTo(a * 201, a * 71, a * 201, a * 71, a * 215, a * 96);
        e.bezierCurveTo(a * 199.5, a * 226.5, a * 199.5, a * 226.5, a * 184, a * 357);
        e.bezierCurveTo(a * 162.5, a * 362.5, a * 162.5, a * 362.5, a * 141, a * 368);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 75, a * 328);
        e.bezierCurveTo(a * 88, a * 336.5, a * 88, a * 336.5, a * 101, a * 345);
        e.bezierCurveTo(a * 123.5, a * 337.5, a * 123.5, a * 337.5, a * 146, a * 330);
        e.bezierCurveTo(a * 165, a * 343.5, a * 165, a * 343.5, a * 184, a * 357);
        e.bezierCurveTo(a * 198.5, a * 353, a * 198.5, a * 353, a * 213, a * 349);
        e.bezierCurveTo(a * 200.5, a * 364.5, a * 200.5, a * 364.5, a * 188, a * 380);
        e.bezierCurveTo(a * 163, a * 380.5, a * 163, a * 380.5, a * 138, a * 381);
        e.bezierCurveTo(a * 112, a * 373.5, a * 112, a * 373.5, a * 86, a * 366);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 121, a * 332);
        e.bezierCurveTo(a * 133.5, a * 327.5, a * 133.5, a * 327.5, a * 146, a * 323);
        e.bezierCurveTo(a * 157, a * 330.5, a * 157, a * 330.5, a * 168, a * 338);
        e.bezierCurveTo(a * 182.5, a * 219.5, a * 182.5, a * 219.5, a * 197, a * 101);
        e.bezierCurveTo(a * 190, a * 84.5, a * 190, a * 84.5, a * 183, a * 68);
        e.bezierCurveTo(a * 172.5, a * 81, a * 172.5, a * 81, a * 162, a * 94);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 463);
        e.bezierCurveTo(a * 124.5, a * 466, a * 124.5, a * 466, a * 144, a * 469);
        e.bezierCurveTo(a * 145.5, a * 478.5, a * 145.5, a * 478.5, a * 147, a * 488);
        e.bezierCurveTo(a * 133.5, a * 495.5, a * 133.5, a * 495.5, a * 120, a * 503);
        e.bezierCurveTo(a * 108.5, a * 492, a * 108.5, a * 492, a * 97, a * 481);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 346);
        e.bezierCurveTo(a * 125, a * 352, a * 125, a * 352, a * 107, a * 358);
        e.bezierCurveTo(a * 124, a * 363, a * 140, a * 368, a * 141, a * 368);
        e.bezierCurveTo(a * 156.5, a * 367, a * 156.5, a * 367, a * 172, a * 366);
        e.closePath();
        wt(e, c[3]);
        return d;
    }
    function zd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 321;
        d.height = a * 284;
        e.translate(a * 100, a * 30);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        wt(e, undefined, c[4], a * 4);
        e.translate(a * -100, a * -30);
        e.translate(a * 10, a * 70);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        wt(e, Fh, c[4], a * 4);
        e.translate(a * 20, a * -80);
        e.translate(a * 5, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58, a * 33);
        e.bezierCurveTo(a * 81, a * 22, a * 93, a * 26, a * 123, a * 47);
        e.bezierCurveTo(a * 160, a * 73, a * 169, a * 80, a * 191, a * 99);
        e.bezierCurveTo(a * 202, a * 107, a * 211, a * 118, a * 195, a * 151);
        e.bezierCurveTo(a * 181, a * 183, a * 157, a * 192, a * 129, a * 174);
        e.bezierCurveTo(a * 78, a * 140, a * 68, a * 129, a * 37, a * 94);
        e.bezierCurveTo(a * 15, a * 68, a * 25, a * 52, a * 56, a * 34);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167, a * 120);
        e.bezierCurveTo(a * 196, a * 106, a * 207, a * 111, a * 199, a * 135);
        e.bezierCurveTo(a * 185, a * 172, a * 166, a * 187, a * 145, a * 179);
        e.bezierCurveTo(a * 118, a * 166, a * 127, a * 139, a * 166, a * 121);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25, a * 64);
        e.bezierCurveTo(a * 59, a * 96, a * 97, a * 128, a * 129, a * 151);
        e.bezierCurveTo(a * 126, a * 163, a * 134, a * 174, a * 142, a * 180);
        e.bezierCurveTo(a * 114, a * 170, a * 68, a * 134, a * 31, a * 85);
        e.bezierCurveTo(a * 24, a * 71, a * 24, a * 70, a * 25, a * 65);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 141);
        e.bezierCurveTo(a * 181, a * 131, a * 186, a * 135, a * 173, a * 152);
        e.bezierCurveTo(a * 163, a * 163, a * 155, a * 161, a * 151, a * 150);
        e.bezierCurveTo(a * 147, a * 140, a * 155, a * 131, a * 175, a * 125);
        e.bezierCurveTo(a * 190, a * 120, a * 196, a * 121, a * 189, a * 143);
        e.bezierCurveTo(a * 182, a * 167, a * 169, a * 174, a * 157, a * 174);
        e.bezierCurveTo(a * 138, a * 172, a * 139, a * 162, a * 140, a * 156);
        wt(e, Fh, c[4], a * 4);
        return d;
    }
    function yd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 350;
        d.height = a * 140;
        e.translate(a * -50, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.5, a * 222.0625);
        e.bezierCurveTo(a * 185.5, a * 184.0625, a * 302.5, a * 171.0625, a * 313.5, a * 222.0625);
        e.bezierCurveTo(a * 330.5, a * 263.0625, a * 181.5, a * 274.0625, a * 184.5, a * 223.0625);
        e.closePath();
        wt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.5, a * 241.0625);
        e.bezierCurveTo(a * 144.5, a * 278.0625, a * 270.5, a * 209.0625, a * 228.5, a * 174.0625);
        e.bezierCurveTo(a * 196.5, a * 147.0625, a * 117.5, a * 196.0625, a * 131.5, a * 240.0625);
        e.closePath();
        wt(e, c[0], c[1], a * 8);
        zt(e, a * 270.5, a * 225.0625, a * 15.811388300841896);
        wt(e, c[2]);
        zt(e, a * 243.5, a * 225.0625, a * 6.082762530298219);
        wt(e, c[2]);
        zt(e, a * 255.5, a * 210.0625, a * 10.816653826391969);
        wt(e, c[2]);
        zt(e, a * 167.5, a * 215.0625, a * 15.297058540778355);
        wt(e, c[2]);
        zt(e, a * 176.5, a * 204.0625, a * 7.280109889280518);
        wt(e, c[2]);
        zt(e, a * 206.5, a * 189.0625, a * 7.280109889280518);
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151.5, a * 212.0625);
        e.bezierCurveTo(a * 161.5, a * 204.0625, a * 173.5, a * 214.0625, a * 158.5, a * 221.0625);
        e.bezierCurveTo(a * 145.5, a * 228.0625, a * 144.5, a * 216.0625, a * 151.5, a * 212.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 209.0625);
        e.bezierCurveTo(a * 205.5, a * 202.0625, a * 215.5, a * 207.0625, a * 199.5, a * 217.0625);
        e.bezierCurveTo(a * 187.5, a * 224.0625, a * 182.5, a * 217.0625, a * 194.5, a * 209.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188.5, a * 183.0625);
        e.bezierCurveTo(a * 201.5, a * 176.0625, a * 213.5, a * 187.0625, a * 193.5, a * 193.0625);
        e.bezierCurveTo(a * 185.5, a * 194.0625, a * 175.5, a * 189.0625, a * 188.5, a * 183.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 261.5, a * 202.0625);
        e.bezierCurveTo(a * 274.5, a * 201.0625, a * 282.5, a * 214.0625, a * 261.5, a * 215.0625);
        e.bezierCurveTo(a * 246.5, a * 214.0625, a * 248.5, a * 203.0625, a * 261.5, a * 202.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 240.5, a * 231.0625);
        e.bezierCurveTo(a * 255.5, a * 231.0625, a * 254.5, a * 243.0625, a * 240.5, a * 242.0625);
        e.bezierCurveTo(a * 225.5, a * 239.0625, a * 225.5, a * 232.0625, a * 240.5, a * 231.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        return d;
    }
    function wd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        xt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        Bt(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112, a * 356);
        e.bezierCurveTo(a * 124, a * 220.5, a * 124, a * 220.5, a * 136, a * 85);
        e.bezierCurveTo(a * 162.5, a * 65.5, a * 162.5, a * 65.5, a * 189, a * 46);
        e.bezierCurveTo(a * 208.5, a * 72.5, a * 208.5, a * 72.5, a * 228, a * 99);
        e.bezierCurveTo(a * 200, a * 232, a * 200, a * 232, a * 172, a * 365);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 131, a * 423);
        e.rotate(0.16);
        xt(e, a * -14, a * -53, a * 28, a * 106, a * 10);
        e.restore();
        wt(e, c[4], c[5], a * 12.5);
        e.save();
        e.translate(a * 122, a * 480);
        e.rotate(1.72);
        Bt(e, 4, a * 26.476404589747453, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 387);
        e.bezierCurveTo(a * 138, a * 376, a * 138, a * 376, a * 66, a * 365);
        e.bezierCurveTo(a * 76, a * 355, a * 76, a * 355, a * 86, a * 345);
        e.bezierCurveTo(a * 99, a * 346.5, a * 99, a * 346.5, a * 112, a * 348);
        e.bezierCurveTo(a * 128.5, a * 344, a * 128.5, a * 344, a * 145, a * 340);
        e.bezierCurveTo(a * 158, a * 348, a * 158, a * 348, a * 171, a * 356);
        e.bezierCurveTo(a * 184, a * 358, a * 184, a * 358, a * 197, a * 360);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 129, a * 338);
        e.bezierCurveTo(a * 137, a * 336, a * 137, a * 336, a * 145, a * 334);
        e.bezierCurveTo(a * 152.5, a * 338, a * 152.5, a * 338, a * 160, a * 342);
        e.bezierCurveTo(a * 184, a * 224, a * 184, a * 224, a * 208, a * 106);
        e.bezierCurveTo(a * 197, a * 88, a * 187, a * 70, a * 186, a * 70);
        e.bezierCurveTo(a * 169.5, a * 83, a * 169.5, a * 83, a * 153, a * 96);
        e.closePath();
        wt(e, c[3]);
        return d;
    }
    function Pd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 112;
        e.translate(0, a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 16, a * 44);
        e.bezierCurveTo(a * 30.5, a * 48, a * 30.5, a * 48, a * 45, a * 52);
        e.bezierCurveTo(a * 36.5, a * 63, a * 36.5, a * 63, a * 28, a * 74);
        e.bezierCurveTo(a * 32, a * 86, a * 61, a * 92, a * 78, a * 76);
        e.bezierCurveTo(a * 93, a * 62, a * 92, a * 40, a * 80, a * 26);
        e.bezierCurveTo(a * 65, a * 11, a * 42, a * 16, a * 34, a * 21);
        e.bezierCurveTo(a * 22, a * 27, a * 16, a * 39, a * 16, a * 44);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        return d;
    }
    function Ad(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 118;
        d.height = a * 114;
        e.translate(0, a * 10);
        zt(e, a * 42, a * 43, a * 24.758836806279895);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -10);
        zt(e, a * 42, a * 43, a * 24.758836806279895);
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 90);
        e.bezierCurveTo(a * 72, a * 91, a * 75, a * 92, a * 71, a * 96);
        e.bezierCurveTo(a * 65, a * 98, a * 65, a * 94, a * 65, a * 91);
        e.closePath();
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 45);
        e.bezierCurveTo(a * 108, a * 59, a * 100, a * 86, a * 85, a * 91);
        e.bezierCurveTo(a * 80, a * 96, a * 68, a * 95, a * 58, a * 87);
        e.bezierCurveTo(a * 53, a * 80, a * 61, a * 64, a * 66, a * 58);
        e.bezierCurveTo(a * 73, a * 48, a * 78, a * 44, a * 87, a * 45);
        e.closePath();
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 16);
        e.bezierCurveTo(a * 55, a * 19, a * 54, a * 20, a * 55, a * 22);
        e.bezierCurveTo(a * 52, a * 24.5, a * 52, a * 24.5, a * 49, a * 27);
        e.bezierCurveTo(a * 45, a * 25, a * 45, a * 25, a * 41, a * 23);
        e.bezierCurveTo(a * 45, a * 19, a * 48, a * 16, a * 52, a * 16);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 30);
        e.bezierCurveTo(a * 66, a * 29, a * 64, a * 30, a * 66, a * 30);
        e.bezierCurveTo(a * 67, a * 31, a * 67, a * 31, a * 68, a * 32);
        e.bezierCurveTo(a * 66.5, a * 33.5, a * 66.5, a * 33.5, a * 65, a * 35);
        e.bezierCurveTo(a * 63.5, a * 32.5, a * 63.5, a * 32.5, a * 62, a * 30);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 21);
        e.bezierCurveTo(a * 31, a * 22, a * 31, a * 26, a * 29, a * 29);
        e.bezierCurveTo(a * 26, a * 28.5, a * 26, a * 28.5, a * 23, a * 28);
        e.bezierCurveTo(a * 23, a * 26.5, a * 23, a * 26.5, a * 23, a * 25);
        e.bezierCurveTo(a * 25, a * 23, a * 25, a * 23, a * 27, a * 21);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 36);
        e.bezierCurveTo(a * 23, a * 36, a * 24, a * 42, a * 19, a * 46);
        e.bezierCurveTo(a * 12, a * 39, a * 15, a * 38, a * 18, a * 37);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 34);
        e.bezierCurveTo(a * 35, a * 36, a * 36, a * 39, a * 32, a * 45);
        e.bezierCurveTo(a * 25, a * 46, a * 25, a * 44, a * 30, a * 34);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 35);
        e.bezierCurveTo(a * 58, a * 27, a * 57, a * 27, a * 52, a * 31);
        e.bezierCurveTo(a * 50, a * 36, a * 53, a * 38, a * 58, a * 36);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 46);
        e.bezierCurveTo(a * 64.5, a * 46.5, a * 64.5, a * 46.5, a * 66, a * 47);
        e.bezierCurveTo(a * 70, a * 50, a * 70, a * 53, a * 61, a * 55);
        e.bezierCurveTo(a * 62, a * 50.5, a * 62, a * 50.5, a * 63, a * 46);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 42);
        e.bezierCurveTo(a * 47, a * 41, a * 53, a * 47, a * 46, a * 51);
        e.bezierCurveTo(a * 38, a * 49, a * 39, a * 46, a * 41, a * 43);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 57);
        e.bezierCurveTo(a * 54, a * 57, a * 54, a * 58, a * 55, a * 61);
        e.bezierCurveTo(a * 54, a * 63, a * 52, a * 64, a * 48, a * 65);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 52);
        e.bezierCurveTo(a * 25, a * 51, a * 27, a * 50, a * 28, a * 54);
        e.bezierCurveTo(a * 27, a * 58, a * 24, a * 58, a * 22, a * 58);
        e.bezierCurveTo(a * 21, a * 55.5, a * 21, a * 55.5, a * 20, a * 53);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 61);
        e.bezierCurveTo(a * 37, a * 61, a * 39, a * 63, a * 39, a * 68);
        e.bezierCurveTo(a * 36, a * 68.5, a * 36, a * 68.5, a * 33, a * 69);
        e.bezierCurveTo(a * 30.5, a * 67.5, a * 30.5, a * 67.5, a * 28, a * 66);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 45);
        e.bezierCurveTo(a * 90, a * 46.5, a * 90, a * 46.5, a * 92, a * 48);
        e.bezierCurveTo(a * 92, a * 50, a * 92, a * 50, a * 92, a * 52);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 53);
        e.bezierCurveTo(a * 97.5, a * 55, a * 97.5, a * 55, a * 99, a * 57);
        e.bezierCurveTo(a * 97.5, a * 59.5, a * 97.5, a * 59.5, a * 96, a * 62);
        e.bezierCurveTo(a * 93.5, a * 60.5, a * 93.5, a * 60.5, a * 91, a * 59);
        e.bezierCurveTo(a * 91.5, a * 57, a * 91.5, a * 57, a * 92, a * 55);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 92, a * 71);
        e.bezierCurveTo(a * 94.5, a * 70.5, a * 94.5, a * 70.5, a * 97, a * 70);
        e.bezierCurveTo(a * 98.5, a * 72.5, a * 98.5, a * 72.5, a * 100, a * 75);
        e.bezierCurveTo(a * 97, a * 76.5, a * 97, a * 76.5, a * 94, a * 78);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 82);
        e.bezierCurveTo(a * 96, a * 83, a * 96, a * 83, a * 97, a * 84);
        e.bezierCurveTo(a * 97, a * 85.5, a * 97, a * 85.5, a * 97, a * 87);
        e.bezierCurveTo(a * 93.5, a * 87.5, a * 93.5, a * 87.5, a * 90, a * 88);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 72);
        e.bezierCurveTo(a * 89, a * 76, a * 88, a * 81, a * 85, a * 82);
        e.bezierCurveTo(a * 80, a * 80, a * 82, a * 78, a * 85, a * 72);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 86);
        e.bezierCurveTo(a * 84, a * 88, a * 86, a * 88, a * 85, a * 93);
        e.bezierCurveTo(a * 80, a * 96, a * 79, a * 96, a * 76, a * 91);
        e.closePath();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 46);
        e.bezierCurveTo(a * 93, a * 51, a * 91, a * 62, a * 80, a * 78);
        e.bezierCurveTo(a * 74, a * 86, a * 66, a * 90, a * 60, a * 86);
        e.bezierCurveTo(a * 55, a * 79, a * 57, a * 73, a * 67, a * 57);
        e.bezierCurveTo(a * 71, a * 51, a * 79, a * 44, a * 84, a * 46);
        e.closePath();
        wt(e, c[5], c[6], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 76, a * 60);
        e.bezierCurveTo(a * 80, a * 66, a * 75, a * 74, a * 68, a * 74);
        e.bezierCurveTo(a * 60, a * 64, a * 68, a * 59, a * 76, a * 59);
        e.closePath();
        wt(e, c[7], c[8], a * 5);
        return d;
    }
    function kd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 131;
        d.height = a * 121;
        e.translate(0, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 59);
        e.bezierCurveTo(a * 93, a * 61.5, a * 93, a * 61.5, a * 76, a * 64);
        e.bezierCurveTo(a * 84.5, a * 78.5, a * 84.5, a * 78.5, a * 93, a * 93);
        e.bezierCurveTo(a * 70, a * 111, a * 43, a * 103, a * 30, a * 82);
        e.bezierCurveTo(a * 17, a * 61, a * 25, a * 30, a * 51, a * 21);
        e.bezierCurveTo(a * 66, a * 15, a * 83, a * 18, a * 96, a * 29);
        e.bezierCurveTo(a * 104, a * 35, a * 109, a * 47, a * 110, a * 58);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        return d;
    }
    function xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 70;
        var a = b * 90;
        var i = b * 4;
        var j = b * 5;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        wt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        wt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70 + j);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        wt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * 3, b * -93 + j);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 0.5;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        wt(f, "#0d1b1c");
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        wt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 112, b * 109, b * 111, b * 100, b * 106, b * 93);
        f.bezierCurveTo(b * 104, b * 90, b * 91, b * 87, b * 91, b * 87);
        f.bezierCurveTo(b * 91, b * 88, b * 91, b * 96, b * 94, b * 102);
        f.bezierCurveTo(b * 97, b * 108, b * 106, b * 112, b * 113, b * 112);
        f.closePath();
        wt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * -80, b * -70);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 108, b * 120, b * 100, b * 119, b * 91, b * 127);
        f.bezierCurveTo(b * 83, b * 134, b * 82, b * 146, b * 83, b * 146);
        f.bezierCurveTo(b * 84, b * 146, b * 98, b * 142, b * 103, b * 138);
        f.bezierCurveTo(b * 107, b * 135, b * 110, b * 130, b * 112, b * 121);
        f.closePath();
        wt(f, d[0], d[1], i);
        f.restore();
        f.save();
        f.translate(b * 3, b * -93);
        f.rotate(Math.PI / 5);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 130, b * 79, b * 132, b * 86, b * 130, b * 93);
        f.bezierCurveTo(b * 128, b * 100, b * 121, b * 107, b * 120, b * 107);
        f.bezierCurveTo(b * 120, b * 107, b * 115, b * 98, b * 115, b * 92);
        f.bezierCurveTo(b * 115, b * 86, b * 119, b * 76, b * 127, b * 73);
        f.closePath();
        wt(f, d[0], d[1], i);
        f.restore();
        return e;
    }
    function Jd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 290;
        d.height = a * 525;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        xt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        wt(e, c[0]);
        zt(e, a * 121, a * 480, a * 20.396078054371138);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 351);
        e.bezierCurveTo(a * 128.5, a * 218.5, a * 128.5, a * 218.5, a * 146, a * 86);
        e.bezierCurveTo(a * 166.5, a * 66.5, a * 166.5, a * 66.5, a * 187, a * 47);
        e.bezierCurveTo(a * 201, a * 71.5, a * 201, a * 71.5, a * 215, a * 96);
        e.bezierCurveTo(a * 193, a * 228.5, a * 193, a * 228.5, a * 171, a * 361);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        e.save();
        e.translate(a * 129.5, a * 424);
        e.rotate(0.16);
        xt(e, a * -15.5, a * -63, a * 31, a * 126, a * 10);
        e.restore();
        wt(e, c[4], c[5], a * 12.5);
        zt(e, a * 121, a * 480, a * 20.396078054371138);
        wt(e, c[4], c[5], a * 12.5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 311);
        e.bezierCurveTo(a * 95, a * 324, a * 95, a * 324, a * 100, a * 337);
        e.bezierCurveTo(a * 141.5, a * 345.5, a * 141.5, a * 345.5, a * 183, a * 354);
        e.bezierCurveTo(a * 193.5, a * 342.5, a * 193.5, a * 342.5, a * 204, a * 331);
        e.bezierCurveTo(a * 202, a * 354, a * 202, a * 354, a * 200, a * 377);
        e.bezierCurveTo(a * 147, a * 388, a * 106, a * 371, a * 79, a * 356);
        e.closePath();
        wt(e, c[1], c[2], a * 12.5);
        return d;
    }
    function Md(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 217;
        d.height = a * 215;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 113);
        e.bezierCurveTo(a * 135, a * 98, a * 136, a * 96, a * 142, a * 97);
        e.bezierCurveTo(a * 167, a * 106, a * 167, a * 106, a * 171, a * 109);
        e.bezierCurveTo(a * 173, a * 120, a * 173, a * 134, a * 169, a * 141);
        e.bezierCurveTo(a * 140, a * 149.5, a * 140, a * 149.5, a * 111, a * 158);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 103);
        e.bezierCurveTo(a * 167, a * 91, a * 175, a * 87, a * 176, a * 94);
        e.bezierCurveTo(a * 175, a * 102, a * 176, a * 102, a * 186, a * 103);
        e.bezierCurveTo(a * 191, a * 104, a * 192, a * 105, a * 185, a * 116);
        e.bezierCurveTo(a * 183, a * 120, a * 191, a * 124, a * 189, a * 129);
        e.bezierCurveTo(a * 185, a * 139, a * 178, a * 134, a * 166, a * 131);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 46);
        e.bezierCurveTo(a * 60, a * 34, a * 60, a * 29, a * 56, a * 19);
        e.bezierCurveTo(a * 52, a * 12, a * 52, a * 16, a * 49, a * 24);
        e.bezierCurveTo(a * 48, a * 27, a * 46, a * 28, a * 39, a * 27);
        e.bezierCurveTo(a * 33, a * 26, a * 34, a * 31, a * 35, a * 37);
        e.bezierCurveTo(a * 36, a * 41, a * 27, a * 46, a * 29, a * 52);
        e.bezierCurveTo(a * 36, a * 55, a * 35, a * 56, a * 31, a * 59);
        e.bezierCurveTo(a * 27, a * 65, a * 32, a * 64, a * 35, a * 62);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 50);
        e.bezierCurveTo(a * 51, a * 35, a * 70, a * 32, a * 78, a * 29);
        e.bezierCurveTo(a * 84, a * 27, a * 113, a * 36, a * 127, a * 41);
        e.bezierCurveTo(a * 140, a * 47, a * 147, a * 69, a * 137, a * 73);
        e.bezierCurveTo(a * 124, a * 92, a * 117, a * 92, a * 109, a * 94);
        e.bezierCurveTo(a * 101, a * 96, a * 89, a * 92, a * 65, a * 83);
        e.bezierCurveTo(a * 54, a * 80, a * 46, a * 58, a * 46, a * 51);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 40);
        e.bezierCurveTo(a * 49, a * 34, a * 49, a * 34, a * 47, a * 28);
        e.bezierCurveTo(a * 38, a * 28, a * 34, a * 27, a * 37, a * 37);
        e.bezierCurveTo(a * 43, a * 40.5, a * 43, a * 40.5, a * 49, a * 44);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 29, a * 48);
        e.bezierCurveTo(a * 38, a * 49, a * 38, a * 49, a * 47, a * 50);
        e.bezierCurveTo(a * 46.5, a * 51.5, a * 46.5, a * 51.5, a * 46, a * 53);
        e.bezierCurveTo(a * 40, a * 53.5, a * 40, a * 53.5, a * 34, a * 54);
        e.bezierCurveTo(a * 29, a * 51, a * 32, a * 51.5, a * 30, a * 49);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 89, a * 61);
        e.bezierCurveTo(a * 101, a * 70, a * 109, a * 90, a * 102, a * 90);
        e.bezierCurveTo(a * 97, a * 91, a * 87, a * 91, a * 60, a * 80);
        e.bezierCurveTo(a * 48, a * 65, a * 46, a * 56, a * 48, a * 53);
        e.bezierCurveTo(a * 50, a * 52, a * 66, a * 56, a * 89, a * 61);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99, a * 59);
        e.bezierCurveTo(a * 115, a * 45, a * 125, a * 42, a * 129, a * 47);
        e.bezierCurveTo(a * 138, a * 56, a * 140, a * 63, a * 138, a * 67);
        e.bezierCurveTo(a * 131, a * 80, a * 122, a * 87, a * 114, a * 90);
        e.bezierCurveTo(a * 105, a * 80, a * 95, a * 62, a * 98, a * 61);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 62);
        e.bezierCurveTo(a * 139, a * 45, a * 153, a * 40, a * 150, a * 48);
        e.bezierCurveTo(a * 145, a * 57, a * 157, a * 63, a * 157, a * 70);
        e.bezierCurveTo(a * 157, a * 74, a * 142, a * 77, a * 142, a * 85);
        e.bezierCurveTo(a * 143, a * 91, a * 141, a * 92, a * 135, a * 90);
        e.bezierCurveTo(a * 132, a * 90, a * 132, a * 96, a * 124, a * 99);
        e.bezierCurveTo(a * 118, a * 93, a * 116, a * 77, a * 116, a * 64);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 130);
        e.bezierCurveTo(a * 157, a * 115, a * 165, a * 111, a * 167, a * 115);
        e.bezierCurveTo(a * 170, a * 117, a * 171, a * 135, a * 167, a * 141);
        e.bezierCurveTo(a * 135.5, a * 149.5, a * 135.5, a * 149.5, a * 104, a * 158);
        e.closePath();
        wt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 119);
        e.bezierCurveTo(a * 46, a * 120, a * 40, a * 118, a * 34, a * 116);
        e.bezierCurveTo(a * 28, a * 111, a * 41, a * 112, a * 39, a * 108);
        e.bezierCurveTo(a * 36, a * 100, a * 49, a * 102, a * 53, a * 95);
        e.bezierCurveTo(a * 57, a * 84, a * 58, a * 85, a * 63, a * 93);
        e.bezierCurveTo(a * 68, a * 96, a * 72, a * 94, a * 80, a * 88);
        e.bezierCurveTo(a * 80, a * 96, a * 78, a * 107, a * 66, a * 115);
        e.closePath();
        wt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 64);
        e.bezierCurveTo(a * 133.5, a * 57, a * 133.5, a * 57, a * 149, a * 50);
        e.bezierCurveTo(a * 145, a * 54, a * 154, a * 65, a * 157, a * 68);
        e.bezierCurveTo(a * 138.5, a * 66.5, a * 138.5, a * 66.5, a * 120, a * 65);
        e.closePath();
        wt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 65);
        e.bezierCurveTo(a * 129, a * 77, a * 129, a * 77, a * 140, a * 89);
        e.bezierCurveTo(a * 131, a * 89, a * 130, a * 92, a * 128, a * 96);
        e.bezierCurveTo(a * 123.5, a * 82, a * 123.5, a * 82, a * 119, a * 68);
        e.closePath();
        wt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 112);
        e.bezierCurveTo(a * 63, a * 108, a * 78, a * 111, a * 88, a * 112);
        e.bezierCurveTo(a * 98, a * 122, a * 117, a * 136, a * 125, a * 157);
        e.bezierCurveTo(a * 123, a * 180, a * 123, a * 185, a * 118, a * 186);
        e.bezierCurveTo(a * 101, a * 190, a * 89, a * 191, a * 79, a * 187);
        e.bezierCurveTo(a * 53, a * 165, a * 50, a * 153, a * 47, a * 144);
        e.bezierCurveTo(a * 46, a * 128, a * 46, a * 124, a * 50, a * 112);
        e.closePath();
        wt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 114);
        e.bezierCurveTo(a * 81, a * 149, a * 80, a * 147, a * 80, a * 149);
        e.bezierCurveTo(a * 82, a * 155, a * 80, a * 182, a * 74, a * 182);
        e.bezierCurveTo(a * 60, a * 172, a * 52, a * 157, a * 47, a * 144);
        e.closePath();
        wt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 85, a * 152);
        e.bezierCurveTo(a * 99, a * 150, a * 109, a * 152, a * 119, a * 156);
        e.bezierCurveTo(a * 122, a * 163, a * 122, a * 174, a * 117, a * 182);
        e.closePath();
        e.bezierCurveTo(a * 93, a * 188, a * 82, a * 187, a * 83, a * 179);
        wt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 166);
        e.bezierCurveTo(a * 133, a * 165, a * 142, a * 168, a * 137, a * 173);
        e.bezierCurveTo(a * 127, a * 177, a * 137, a * 195, a * 126, a * 196);
        e.bezierCurveTo(a * 112, a * 195, a * 112, a * 194, a * 109, a * 199);
        e.bezierCurveTo(a * 105, a * 205, a * 102, a * 195, a * 96, a * 197);
        e.bezierCurveTo(a * 84, a * 201, a * 88, a * 198, a * 90, a * 187);
        e.bezierCurveTo(a * 96, a * 171, a * 97, a * 170, a * 103, a * 167);
        e.closePath();
        wt(e, c[9], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 168);
        e.bezierCurveTo(a * 118, a * 172.5, a * 118, a * 172.5, a * 131, a * 177);
        e.bezierCurveTo(a * 133, a * 190, a * 132, a * 199, a * 116, a * 194);
        e.bezierCurveTo(a * 110, a * 182, a * 110, a * 182, a * 104, a * 170);
        e.closePath();
        wt(e, c[10]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 169);
        e.bezierCurveTo(a * 100.5, a * 182, a * 100.5, a * 182, a * 99, a * 195);
        e.bezierCurveTo(a * 93.5, a * 196.5, a * 93.5, a * 196.5, a * 88, a * 198);
        e.bezierCurveTo(a * 94, a * 176, a * 96, a * 174, a * 101, a * 168);
        e.closePath();
        wt(e, c[9], c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 107);
        e.bezierCurveTo(a * 64, a * 101, a * 64, a * 101, a * 64, a * 95);
        e.bezierCurveTo(a * 57, a * 86, a * 57, a * 84, a * 53, a * 97);
        e.bezierCurveTo(a * 55, a * 103.5, a * 55, a * 103.5, a * 57, a * 110);
        e.closePath();
        wt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 108);
        e.bezierCurveTo(a * 46.5, a * 111, a * 46.5, a * 111, a * 53, a * 114);
        e.bezierCurveTo(a * 50.5, a * 117, a * 50.5, a * 117, a * 48, a * 120);
        e.bezierCurveTo(a * 40.5, a * 117.5, a * 40.5, a * 117.5, a * 33, a * 115);
        e.bezierCurveTo(a * 36, a * 112, a * 36, a * 112, a * 39, a * 109);
        e.closePath();
        wt(e, c[11], c[11], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 106);
        e.bezierCurveTo(a * 178.5, a * 110.5, a * 178.5, a * 110.5, a * 168, a * 115);
        e.bezierCurveTo(a * 168.5, a * 119, a * 168.5, a * 119, a * 169, a * 123);
        e.bezierCurveTo(a * 179, a * 124.5, a * 179, a * 124.5, a * 189, a * 126);
        e.bezierCurveTo(a * 182, a * 118, a * 183, a * 115, a * 188, a * 106);
        e.closePath();
        wt(e, c[8]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 69, a * 178);
        e.bezierCurveTo(a * 69, a * 141, a * 70, a * 136, a * 77, a * 137);
        e.bezierCurveTo(a * 88, a * 133, a * 101, a * 134, a * 108, a * 137);
        wt(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 161);
        e.bezierCurveTo(a * 54, a * 124, a * 55, a * 119, a * 62, a * 119);
        e.bezierCurveTo(a * 74, a * 117, a * 85, a * 117, a * 93, a * 119);
        wt(e, undefined, c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 91, a * 29);
        e.bezierCurveTo(a * 74, a * 33, a * 62, a * 46, a * 57, a * 54);
        e.bezierCurveTo(a * 57, a * 63, a * 68, a * 76, a * 77, a * 87);
        wt(e, undefined, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 33);
        e.bezierCurveTo(a * 82, a * 51, a * 80, a * 52, a * 79, a * 59);
        e.bezierCurveTo(a * 78, a * 65, a * 93, a * 86, a * 101, a * 93);
        wt(e, cl, c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 98);
        e.bezierCurveTo(a * 126.5, a * 103, a * 126.5, a * 103, a * 123, a * 108);
        e.bezierCurveTo(a * 133.5, a * 107, a * 133.5, a * 107, a * 144, a * 106);
        e.bezierCurveTo(a * 138.5, a * 110, a * 138.5, a * 110, a * 133, a * 114);
        e.bezierCurveTo(a * 142, a * 114, a * 142, a * 114, a * 151, a * 114);
        e.bezierCurveTo(a * 146.5, a * 119.5, a * 146.5, a * 119.5, a * 142, a * 125);
        e.bezierCurveTo(a * 146.5, a * 127, a * 146.5, a * 127, a * 151, a * 129);
        e.bezierCurveTo(a * 147.5, a * 132, a * 147.5, a * 132, a * 144, a * 135);
        e.bezierCurveTo(a * 148, a * 137, a * 148, a * 137, a * 152, a * 139);
        e.bezierCurveTo(a * 149, a * 142.5, a * 149, a * 142.5, a * 146, a * 146);
        wt(e, Aj, c[3], a * 4);
        return d;
    }
    function Bd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 154;
        d.height = a * 261;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125, a * 69);
        e.bezierCurveTo(a * 123.5, a * 141.5, a * 123.5, a * 141.5, a * 122, a * 214);
        e.bezierCurveTo(a * 123, a * 228, a * 119, a * 239, a * 102, a * 239);
        e.bezierCurveTo(a * 90, a * 238, a * 86, a * 225, a * 89, a * 197);
        e.bezierCurveTo(a * 92, a * 159, a * 92, a * 141, a * 94, a * 84);
        e.bezierCurveTo(a * 94, a * 58, a * 87, a * 50, a * 73, a * 52);
        e.bezierCurveTo(a * 53, a * 54, a * 54, a * 92, a * 34, a * 87);
        e.bezierCurveTo(a * 13, a * 85, a * 22, a * 58, a * 34, a * 40);
        e.bezierCurveTo(a * 44, a * 24, a * 68, a * 17, a * 86, a * 21);
        e.bezierCurveTo(a * 111, a * 23, a * 123, a * 39, a * 125, a * 67);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 43);
        e.bezierCurveTo(a * 31, a * 61, a * 43, a * 70, a * 51, a * 75);
        e.bezierCurveTo(a * 48, a * 84, a * 41, a * 89, a * 33, a * 86);
        e.bezierCurveTo(a * 23, a * 88, a * 20, a * 76, a * 23, a * 62);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45, a * 29);
        e.bezierCurveTo(a * 49, a * 45, a * 61, a * 54, a * 64, a * 55);
        e.bezierCurveTo(a * 67.5, a * 53, a * 67.5, a * 53, a * 71, a * 51);
        e.bezierCurveTo(a * 80, a * 44, a * 83, a * 33, a * 82, a * 20);
        e.bezierCurveTo(a * 59, a * 17, a * 51, a * 23, a * 45, a * 30);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 56);
        e.bezierCurveTo(a * 90, a * 33, a * 103, a * 25, a * 105, a * 27);
        e.bezierCurveTo(a * 116, a * 31, a * 121, a * 45, a * 122, a * 50);
        e.bezierCurveTo(a * 112, a * 62, a * 103, a * 63, a * 91, a * 62);
        e.bezierCurveTo(a * 89, a * 59.5, a * 89, a * 59.5, a * 87, a * 57);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 81);
        e.bezierCurveTo(a * 109, a * 82, a * 123, a * 70, a * 124, a * 63);
        e.bezierCurveTo(a * 124, a * 75.5, a * 124, a * 75.5, a * 124, a * 88);
        e.bezierCurveTo(a * 119, a * 99, a * 103, a * 103, a * 94, a * 103);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 124);
        e.bezierCurveTo(a * 108, a * 125, a * 122, a * 113, a * 124, a * 106);
        e.bezierCurveTo(a * 124, a * 119, a * 124, a * 129, a * 124, a * 132);
        e.bezierCurveTo(a * 110, a * 147, a * 94, a * 148, a * 90, a * 147);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 170);
        e.bezierCurveTo(a * 104, a * 166, a * 122, a * 158, a * 122, a * 151);
        e.bezierCurveTo(a * 122, a * 162.5, a * 122, a * 162.5, a * 122, a * 174);
        e.bezierCurveTo(a * 111, a * 191, a * 97, a * 191, a * 89, a * 191);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 88, a * 208);
        e.bezierCurveTo(a * 100, a * 209, a * 115, a * 205, a * 122, a * 193);
        e.bezierCurveTo(a * 122, a * 205.5, a * 122, a * 205.5, a * 122, a * 218);
        e.bezierCurveTo(a * 115, a * 229, a * 103, a * 235, a * 90, a * 228);
        e.bezierCurveTo(a * 88, a * 224, a * 88, a * 217, a * 88, a * 211);
        e.closePath();
        wt(e, c[3]);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 81);
        e.bezierCurveTo(a * 32, a * 84, a * 41, a * 81, a * 45, a * 68);
        e.bezierCurveTo(a * 50, a * 50, a * 62, a * 40, a * 79, a * 43);
        e.bezierCurveTo(a * 95, a * 45, a * 102, a * 58, a * 101, a * 81);
        e.bezierCurveTo(a * 99.5, a * 120.5, a * 99.5, a * 120.5, a * 98, a * 160);
        e.bezierCurveTo(a * 96.5, a * 191.5, a * 96.5, a * 191.5, a * 95, a * 223);
        e.bezierCurveTo(a * 93, a * 232, a * 101, a * 235, a * 108, a * 238);
        e.bezierCurveTo(a * 100, a * 240, a * 90, a * 233, a * 90, a * 224);
        e.bezierCurveTo(a * 92, a * 157, a * 92, a * 157, a * 94, a * 90);
        e.bezierCurveTo(a * 94, a * 56, a * 89, a * 53, a * 77, a * 51);
        e.bezierCurveTo(a * 58, a * 50, a * 54, a * 59, a * 49, a * 75);
        e.bezierCurveTo(a * 44, a * 91, a * 28, a * 90, a * 23, a * 81);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 123);
        e.bezierCurveTo(a * 88, a * 130, a * 88, a * 127, a * 94, a * 128);
        e.bezierCurveTo(a * 91, a * 136, a * 94, a * 137, a * 99, a * 142);
        e.bezierCurveTo(a * 97, a * 149, a * 99, a * 152, a * 105, a * 155);
        e.bezierCurveTo(a * 107, a * 159, a * 113, a * 159, a * 120, a * 158);
        e.bezierCurveTo(a * 121, a * 160, a * 125, a * 163, a * 132, a * 163);
        e.bezierCurveTo(a * 133, a * 166, a * 136, a * 169, a * 138, a * 170);
        e.bezierCurveTo(a * 133, a * 171, a * 132, a * 172, a * 129, a * 174);
        e.bezierCurveTo(a * 122, a * 170, a * 120, a * 170, a * 116, a * 174);
        e.bezierCurveTo(a * 108, a * 170.5, a * 108, a * 170.5, a * 100, a * 167);
        e.bezierCurveTo(a * 95, a * 172, a * 94, a * 179, a * 95, a * 184);
        e.bezierCurveTo(a * 87, a * 185, a * 87, a * 189, a * 88, a * 194);
        e.bezierCurveTo(a * 82, a * 194, a * 81, a * 195, a * 79, a * 197);
        e.bezierCurveTo(a * 78, a * 192, a * 78, a * 191, a * 77, a * 189);
        e.bezierCurveTo(a * 81, a * 185, a * 82, a * 183, a * 80, a * 176);
        e.bezierCurveTo(a * 89, a * 170, a * 92, a * 168, a * 95, a * 163);
        e.bezierCurveTo(a * 91, a * 151, a * 88, a * 151, a * 82, a * 147);
        e.bezierCurveTo(a * 85, a * 142, a * 85, a * 137, a * 81, a * 133);
        e.bezierCurveTo(a * 84, a * 127, a * 84, a * 125, a * 82, a * 124);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        zt(e, a * 107, a * 152, a * 9);
        wt(e, c[6]);
        zt(e, a * 105, a * 173, a * 9);
        wt(e, c[6]);
        zt(e, a * 87, a * 161, a * 9);
        wt(e, c[6]);
        zt(e, a * 106, a * 147, a * 4);
        wt(e, c[7]);
        zt(e, a * 104, a * 167, a * 4);
        wt(e, c[7]);
        zt(e, a * 86, a * 154, a * 4);
        wt(e, c[7]);
        return d;
    }
    const Dd = 2;
    function Ed(c, e, f, i, j, k, n, o, p, h, l = 0) {
        var g = document.createElement("canvas");
        var q = g.getContext("2d");
        k = k ? k * c : 0;
        var b = Math.floor(c * f);
        q.font = b + "px Baloo Paaji";
        q.lineJoin = "round";
        o *= c;
        var r = n ? o * 2 : 0;
        if (p) {
            var t = Math.min(q.measureText(e).width + c * 2 + r, p);
        } else {
            t = q.measureText(e).width + c * 2 + r + c * l * 2;
        }
        b = (b + k + l) * c + r;
        g.width = t;
        g.height = b;
        if (n) {
            q.fillStyle = n;
            xt(q, 0, 0, t, b, o * 2);
            q.fill();
            q.translate(o, o);
        }
        q.textBaseline = "middle";
        q.font = f + "px Baloo Paaji";
        q.lineJoin = "round";
        if (j) {
            q.beginPath();
            q.fillStyle = j;
            q.fillText(e, 0, b / 2 + k - r / 2, t);
        }
        q.beginPath();
        if (h) {
            q.strokeStyle = h;
            q.lineWidth = l;
            q.strokeText(e, l, (b - r) / 2, t);
        }
        q.fillStyle = i;
        q.fillText(e, l, (b - r) / 2, t);
        return g;
    }
    function Id(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 220;
        var a = b * 230;
        var i = b * 100;
        var j = i / 4;
        var h = b * 20;
        e.width = g;
        e.height = a;
        f.translate(g / 2, a / 2 + h);
        f.globalAlpha = 0.5;
        Bt(f, 7, i, j);
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, -h);
        Bt(f, 7, i, j);
        wt(f, d[1]);
        Bt(f, 6, i * 0.65, j * 0.65);
        wt(f, d[2]);
        return e;
    }
    const Sd = 3;
    function Qd(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        var a = b * 220;
        var i = b * 220;
        var j = b * 100;
        var h = j / 4;
        f.width = a;
        f.height = i;
        g.translate(a / 2, i / 2);
        g.globalAlpha = c ? 0.5 : 1;
        if (!c) {
            g.translate(b * 0, b * -8);
        }
        Bt(g, 7, j, h);
        wt(g, c ? d[0] : d[1]);
        g.globalAlpha = 1;
        if (e == 0) {
            Bt(g, 6, j * 0.65, h * 0.65);
            wt(g, d[2]);
        } else if (e == 1) {
            g.translate(b * 20, b * 20);
            Bt(g, 6, j * 0.45, h * 0.4);
            wt(g, d[2]);
        }
        return f;
    }
    function _d(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * c * 2;
        var a = b * c * 2;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j);
        zt(f, 0, 0, b * c);
        wt(f, d);
        return e;
    }
    function Fd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        wt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        wt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        wt(e, c[0], c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        wt(e, c[0], c[0], a * 12);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100.5, a * 126.34375);
        e.bezierCurveTo(a * 151.5, a * 104.34375, a * 279.5, a * 188.34375, a * 297.5, a * 292.34375);
        e.bezierCurveTo(a * 222.5, a * 307.34375, a * 106.5, a * 196.34375, a * 100.5, a * 127.34375);
        e.closePath();
        wt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 106.5, a * 131.34375);
        e.bezierCurveTo(a * 140.5, a * 142.34375, a * 225.5, a * 184.34375, a * 290.5, a * 287.34375);
        e.bezierCurveTo(a * 270.5, a * 188.34375, a * 152.5, a * 118.34375, a * 107.5, a * 131.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 137.34375);
        e.bezierCurveTo(a * 161.5, a * 138.34375, a * 164.5, a * 140.34375, a * 168.5, a * 142.34375);
        e.bezierCurveTo(a * 165.5, a * 156.34375, a * 141.5, a * 176.34375, a * 126.5, a * 179.34375);
        e.bezierCurveTo(a * 123.5, a * 173.34375, a * 120.5, a * 169.34375, a * 120.5, a * 169.34375);
        e.bezierCurveTo(a * 141.5, a * 161.34375, a * 156.5, a * 145.34375, a * 155.5, a * 136.34375);
        e.closePath();
        wt(e, c[4]);
        zt(e, a * 125.5, a * 140.34375, a * 11.180339887498949);
        wt(e, c[5]);
        zt(e, a * 122.5, a * 135.34375, a * 5.0990195135927845);
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196.5, a * 151.34375);
        e.bezierCurveTo(a * 211.5, a * 158.34375, a * 224.5, a * 171.34375, a * 229.5, a * 176.34375);
        e.bezierCurveTo(a * 246.5, a * 163.34375, a * 259.5, a * 166.34375, a * 272.5, a * 168.34375);
        e.bezierCurveTo(a * 254.5, a * 146.34375, a * 214.5, a * 145.34375, a * 198.5, a * 151.34375);
        e.closePath();
        wt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154.5, a * 222.34375);
        e.bezierCurveTo(a * 164.5, a * 234.34375, a * 173.5, a * 242.34375, a * 178.5, a * 245.34375);
        e.bezierCurveTo(a * 174.5, a * 265.34375, a * 180.5, a * 274.34375, a * 186.5, a * 283.34375);
        e.bezierCurveTo(a * 165.5, a * 277.34375, a * 151.5, a * 245.34375, a * 155.5, a * 224.34375);
        e.closePath();
        wt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 279.5, a * 294.34375);
        e.bezierCurveTo(a * 286.5, a * 285.84375, a * 286.5, a * 285.84375, a * 293.5, a * 277.34375);
        e.bezierCurveTo(a * 315.5, a * 280.34375, a * 315.5, a * 280.34375, a * 337.5, a * 283.34375);
        e.bezierCurveTo(a * 340.5, a * 311.34375, a * 317.5, a * 326.34375, a * 307.5, a * 331.34375);
        e.closePath();
        wt(e, c[7], c[8], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 296.5, a * 287.34375);
        e.bezierCurveTo(a * 311.5, a * 291.34375, a * 311.5, a * 291.34375, a * 326.5, a * 295.34375);
        e.closePath();
        wt(e, undefined, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 289.34375);
        e.bezierCurveTo(a * 308.5, a * 297.34375, a * 308.5, a * 297.34375, a * 322.5, a * 305.34375);
        e.closePath();
        wt(e, ts, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 294.5, a * 291.34375);
        e.bezierCurveTo(a * 304, a * 303.34375, a * 304, a * 303.34375, a * 313.5, a * 315.34375);
        e.closePath();
        wt(e, es, c[9], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 161.34375);
        e.bezierCurveTo(a * 230.5, a * 160.34375, a * 236.5, a * 158.34375, a * 238.5, a * 161.34375);
        e.bezierCurveTo(a * 238.5, a * 157.34375, a * 228.5, a * 159.34375, a * 227.5, a * 161.34375);
        e.closePath();
        wt(e, undefined, c[9], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 167.5, a * 248.34375);
        e.bezierCurveTo(a * 165.5, a * 251.34375, a * 168.5, a * 256.34375, a * 168.5, a * 253.34375);
        e.bezierCurveTo(a * 166.5, a * 252.34375, a * 168.5, a * 246.34375, a * 166.5, a * 247.34375);
        e.closePath();
        wt(e, undefined, c[9], a * 3);
        return d;
    }
    function Rd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 373;
        d.height = a * 314;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        xt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        wt(e, c[0], c[0], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        wt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        xt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        wt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        xt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        wt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        xt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        wt(e, c[0], c[0], a * 6);
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        xt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        wt(e, c[0], c[0], a * 6);
        zt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        wt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224.048583984375, a * 56.6805419921875);
        e.bezierCurveTo(a * 326.048583984375, a * 69.6805419921875, a * 363.048583984375, a * 148.6805419921875, a * 349.048583984375, a * 206.6805419921875);
        e.bezierCurveTo(a * 329.048583984375, a * 278.6805419921875, a * 252.048583984375, a * 283.6805419921875, a * 206.048583984375, a * 275.6805419921875);
        e.bezierCurveTo(a * 206.548583984375, a * 266.6805419921875, a * 206.548583984375, a * 266.6805419921875, a * 207.048583984375, a * 257.6805419921875);
        e.bezierCurveTo(a * 276.048583984375, a * 268.6805419921875, a * 308.048583984375, a * 239.6805419921875, a * 323.048583984375, a * 208.6805419921875);
        e.bezierCurveTo(a * 352.048583984375, a * 145.6805419921875, a * 292.048583984375, a * 86.6805419921875, a * 223.048583984375, a * 74.6805419921875);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 184.048583984375, a * 69.1805419921875);
        xt(e, a * -40, a * -28.5, a * 80, a * 57, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 185.048583984375, a * 61.6805419921875);
        e.bezierCurveTo(a * 145.048583984375, a * 59.6805419921875, a * 138.048583984375, a * 41.6805419921875, a * 148.048583984375, a * 33.6805419921875);
        e.bezierCurveTo(a * 169.048583984375, a * 17.6805419921875, a * 194.048583984375, a * 20.6805419921875, a * 210.048583984375, a * 27.6805419921875);
        e.bezierCurveTo(a * 234.048583984375, a * 40.6805419921875, a * 225.048583984375, a * 57.6805419921875, a * 186.048583984375, a * 61.6805419921875);
        e.closePath();
        wt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 183.548583984375, a * 119.6805419921875);
        xt(e, a * -121.5, a * -45, a * 243, a * 90, a * 40);
        e.restore();
        wt(e, c[5], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 155.6805419921875);
        xt(e, a * -121, a * -52, a * 242, a * 104, a * 40);
        e.restore();
        wt(e, c[3], c[4], a * 6);
        e.save();
        e.translate(a * 183.048583984375, a * 205.1805419921875);
        xt(e, a * -121, a * -50.5, a * 242, a * 101, a * 40);
        e.restore();
        wt(e, c[6], c[4], a * 6);
        e.globalCompositeOperation = "destination-out";
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        xt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        wt(e, c[7], c[8], a * 6);
        e.globalCompositeOperation = "source-over";
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 185.048583984375, a * 204.1805419921875);
        xt(e, a * -100, a * -34.5, a * 200, a * 69, a * 40);
        e.restore();
        wt(e, c[7], c[8], a * 6);
        e.globalAlpha = 1;
        e.save();
        zt(e, a * 185.048583984375, a * 257.6805419921875, a * 27.018512172212592);
        wt(e, c[3], c[4], a * 6);
        e.restore();
        return d;
    }
    function jd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 80;
        c.height = a * 100;
        d.scale(0.5, 0.5);
        d.translate(10, 15);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        wt(d, Aj, b[0], a * 10);
        d.translate(0, -10);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 47, a * 5);
        d.bezierCurveTo(a * 19, a * 30, a * 12, a * 42, a * 10, a * 55);
        d.bezierCurveTo(a * 11, a * 75, a * 27, a * 76, a * 36, a * 72);
        d.bezierCurveTo(a * 52, a * 60, a * 53, a * 46, a * 54, a * 31);
        d.bezierCurveTo(a * 53, a * 14, a * 50, a * 9, a * 48, a * 6);
        d.closePath();
        wt(d, b[1], b[2], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 18, a * 77, a * 10, a * 83, a * 4, a * 87);
        wt(d, undefined, b[2], a * 8);
        d.globalAlpha = 0.5;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 17, a * 70);
        d.bezierCurveTo(a * 33, a * 52, a * 39, a * 33, a * 48, a * 7);
        wt(d, undefined, b[2], a * 8);
        return c;
    }
    function Ot(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 220;
        d.height = a * 180;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -90, a * -150);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        wt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        wt(e, c[5], c[5], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        wt(e, ij, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        wt(e, c[4], c[4], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        wt(e, cl, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 140, a * 265.33333587646484);
        e.bezierCurveTo(a * 141, a * 250.33333587646484, a * 148, a * 244.33333587646484, a * 160, a * 241.33333587646484);
        e.bezierCurveTo(a * 200, a * 241.33333587646484, a * 200, a * 241.33333587646484, a * 240, a * 241.33333587646484);
        e.bezierCurveTo(a * 256, a * 243.33333587646484, a * 260, a * 255.33333587646484, a * 260, a * 265.33333587646484);
        e.bezierCurveTo(a * 261, a * 281.33333587646484, a * 247, a * 289.33333587646484, a * 240, a * 289.33333587646484);
        e.bezierCurveTo(a * 161, a * 289.33333587646484, a * 200.5, a * 289.33333587646484, a * 161, a * 289.33333587646484);
        e.bezierCurveTo(a * 149, a * 288.33333587646484, a * 142, a * 278.33333587646484, a * 140, a * 266.33333587646484);
        e.closePath();
        wt(e, es, c[4], a * 6);
        e.globalAlpha = 0.5;
        e.scale(1, 1);
        e.translate(a * 105, a * 155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 74.27557373046875, a * 5.406280517578125, a * 90.27557373046875, a * 6.406280517578125, a * 99.27557373046875, a * 5.406280517578125);
        e.bezierCurveTo(a * 120.27557373046875, a * 5.406280517578125, a * 126.27557373046875, a * 10.406280517578125, a * 136.27557373046875, a * 20.406280517578125);
        e.bezierCurveTo(a * 157.77557373046875, a * 37.906280517578125, a * 157.77557373046875, a * 37.906280517578125, a * 179.27557373046875, a * 55.406280517578125);
        e.bezierCurveTo(a * 190.27557373046875, a * 63.406280517578125, a * 192.27557373046875, a * 77.40628051757812, a * 189.27557373046875, a * 91.40628051757812);
        e.bezierCurveTo(a * 183.27557373046875, a * 108.40628051757812, a * 176.27557373046875, a * 110.40628051757812, a * 169.27557373046875, a * 118.40628051757812);
        e.bezierCurveTo(a * 152.27557373046875, a * 133.40628051757812, a * 152.27557373046875, a * 133.40628051757812, a * 135.27557373046875, a * 148.40628051757812);
        e.bezierCurveTo(a * 87.27557373046875, a * 143.40628051757812, a * 87.27557373046875, a * 143.40628051757812, a * 39.27557373046875, a * 138.40628051757812);
        e.bezierCurveTo(a * 26.77557373046875, a * 123.40628051757812, a * 26.77557373046875, a * 123.40628051757812, a * 14.27557373046875, a * 108.40628051757812);
        e.bezierCurveTo(a * 2.27557373046875, a * 95.40628051757812, a * 2.27557373046875, a * 92.40628051757812, a * 3.27557373046875, a * 83.40628051757812);
        e.bezierCurveTo(a * 4.27557373046875, a * 63.406280517578125, a * 12.27557373046875, a * 60.406280517578125, a * 24.27557373046875, a * 40.406280517578125);
        e.closePath();
        wt(e, c[5], c[5], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -110, a * -155);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104, a * 237.8000030517578);
        e.bezierCurveTo(a * 110, a * 237.8000030517578, a * 110, a * 237.8000030517578, a * 116, a * 237.8000030517578);
        e.bezierCurveTo(a * 116, a * 241.8000030517578, a * 116, a * 241.8000030517578, a * 116, a * 245.8000030517578);
        e.bezierCurveTo(a * 115, a * 245.3000030517578, a * 115, a * 245.3000030517578, a * 114, a * 244.8000030517578);
        e.bezierCurveTo(a * 109.5, a * 244.8000030517578, a * 109.5, a * 244.8000030517578, a * 105, a * 244.8000030517578);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 211.20000457763672);
        e.bezierCurveTo(a * 106, a * 216.20000457763672, a * 101, a * 234.20000457763672, a * 102, a * 241.20000457763672);
        e.bezierCurveTo(a * 102, a * 260.2000045776367, a * 115, a * 269.2000045776367, a * 115, a * 269.2000045776367);
        e.bezierCurveTo(a * 116, a * 265.2000045776367, a * 115.5, a * 265.2000045776367, a * 116, a * 261.2000045776367);
        e.bezierCurveTo(a * 112, a * 264, a * 108, a * 254, a * 106, a * 242);
        e.bezierCurveTo(a * 105, a * 232, a * 110, a * 222, a * 115, a * 218);
        e.bezierCurveTo(a * 116, a * 216.75, a * 115.5, a * 217.375, a * 116, a * 216.75);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120, a * 207);
        e.bezierCurveTo(a * 115, a * 206, a * 114, a * 209, a * 114, a * 211);
        e.bezierCurveTo(a * 114, a * 268, a * 114, a * 241, a * 114, a * 271);
        e.bezierCurveTo(a * 115, a * 276, a * 118, a * 276, a * 120, a * 276);
        e.bezierCurveTo(a * 122, a * 273, a * 120.5, a * 274.5, a * 121, a * 273);
        e.bezierCurveTo(a * 121, a * 241, a * 121, a * 241, a * 121, a * 209);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 238);
        e.bezierCurveTo(a * 289.5, a * 238, a * 289.5, a * 238, a * 295, a * 238);
        e.bezierCurveTo(a * 295, a * 241.5, a * 295, a * 241.5, a * 295, a * 245);
        e.bezierCurveTo(a * 289.5, a * 245, a * 289.5, a * 245, a * 284, a * 245);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 211);
        e.bezierCurveTo(a * 293, a * 216, a * 297, a * 231, a * 297, a * 241);
        e.bezierCurveTo(a * 298, a * 254, a * 290, a * 265, a * 284, a * 269);
        e.bezierCurveTo(a * 283, a * 266, a * 283.5, a * 266, a * 283, a * 263);
        e.bezierCurveTo(a * 290, a * 260, a * 292, a * 251, a * 293, a * 242);
        e.bezierCurveTo(a * 292, a * 223, a * 289, a * 224, a * 284, a * 218);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 280, a * 206);
        e.bezierCurveTo(a * 284, a * 206, a * 285, a * 208, a * 285, a * 211);
        e.bezierCurveTo(a * 285, a * 241.5, a * 285, a * 241.5, a * 285, a * 272);
        e.bezierCurveTo(a * 284, a * 275, a * 284, a * 275, a * 280, a * 275);
        e.bezierCurveTo(a * 279, a * 273.5, a * 279, a * 273.5, a * 278, a * 272);
        e.bezierCurveTo(a * 278, a * 240.5, a * 278, a * 240.5, a * 278, a * 209);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 138, a * 298.40000915527344);
        e.bezierCurveTo(a * 141, a * 311.40000915527344, a * 151, a * 314.40000915527344, a * 162, a * 316.40000915527344);
        e.bezierCurveTo(a * 224, a * 316.40000915527344, a * 200, a * 315.90000915527344, a * 238, a * 315.40000915527344);
        e.bezierCurveTo(a * 254, a * 316.40000915527344, a * 261, a * 306.40000915527344, a * 264, a * 298.40000915527344);
        e.bezierCurveTo(a * 255, a * 304.40000915527344, a * 250, a * 306.40000915527344, a * 244, a * 306.40000915527344);
        e.bezierCurveTo(a * 201, a * 306.90000915527344, a * 201, a * 306.90000915527344, a * 158, a * 307.40000915527344);
        e.bezierCurveTo(a * 150, a * 306.40000915527344, a * 148, a * 306.40000915527344, a * 139, a * 300.40000915527344);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 177.5999984741211);
        e.bezierCurveTo(a * 130, a * 175.5999984741211, a * 123, a * 190.5999984741211, a * 122, a * 205.5999984741211);
        e.bezierCurveTo(a * 121, a * 277.5999984741211, a * 122, a * 242.5999984741211, a * 122, a * 279.5999984741211);
        e.bezierCurveTo(a * 128, a * 297.5999984741211, a * 137, a * 299.5999984741211, a * 143, a * 300.5999984741211);
        e.bezierCurveTo(a * 163, a * 301.0999984741211, a * 163, a * 301.0999984741211, a * 183, a * 301.5999984741211);
        e.bezierCurveTo(a * 150, a * 300.5999984741211, a * 135, a * 290.5999984741211, a * 134, a * 267.5999984741211);
        e.bezierCurveTo(a * 133, a * 245.5999984741211, a * 146, a * 235.5999984741211, a * 164, a * 235.5999984741211);
        e.bezierCurveTo(a * 206, a * 236.0999984741211, a * 206, a * 236.0999984741211, a * 248, a * 236.5999984741211);
        e.bezierCurveTo(a * 266, a * 243.5999984741211, a * 268, a * 259.5999984741211, a * 267, a * 266.5999984741211);
        e.bezierCurveTo(a * 266, a * 288.5999984741211, a * 251, a * 294.5999984741211, a * 244, a * 297.5999984741211);
        e.bezierCurveTo(a * 228.5, a * 299.5999984741211, a * 228.5, a * 299.5999984741211, a * 213, a * 301.5999984741211);
        e.bezierCurveTo(a * 236, a * 301.0999984741211, a * 236, a * 301.0999984741211, a * 259, a * 300.5999984741211);
        e.bezierCurveTo(a * 272, a * 295.5999984741211, a * 277, a * 288.5999984741211, a * 278, a * 271.5999984741211);
        e.bezierCurveTo(a * 277.5, a * 236.5999984741211, a * 277.5, a * 236.5999984741211, a * 277, a * 201.5999984741211);
        e.bezierCurveTo(a * 276, a * 186.5999984741211, a * 265, a * 178.5999984741211, a * 254, a * 177.5999984741211);
        e.bezierCurveTo(a * 247.5, a * 177.5999984741211, a * 247.5, a * 177.5999984741211, a * 241, a * 177.5999984741211);
        e.bezierCurveTo(a * 255, a * 202.5999984741211, a * 214, a * 217.5999984741211, a * 201, a * 215.5999984741211);
        e.bezierCurveTo(a * 170, a * 215.5999984741211, a * 152, a * 197.5999984741211, a * 161, a * 178.5999984741211);
        e.closePath();
        wt(e, c[2], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 175.5999984741211);
        e.bezierCurveTo(a * 153, a * 176.0999984741211, a * 153, a * 176.0999984741211, a * 144, a * 176.5999984741211);
        e.bezierCurveTo(a * 125, a * 178.5999984741211, a * 121, a * 196.5999984741211, a * 121, a * 207.5999984741211);
        e.bezierCurveTo(a * 121, a * 243.20000076293945, a * 121, a * 243.20000076293945, a * 121, a * 278.8000030517578);
        e.bezierCurveTo(a * 126, a * 298.8000030517578, a * 137, a * 300.8000030517578, a * 146, a * 302.8000030517578);
        e.bezierCurveTo(a * 200.5, a * 302.8000030517578, a * 200.5, a * 302.8000030517578, a * 255, a * 302.8000030517578);
        e.bezierCurveTo(a * 271, a * 301.8000030517578, a * 279, a * 288.8000030517578, a * 279, a * 273.8000030517578);
        e.bezierCurveTo(a * 279, a * 236.8000030517578, a * 279, a * 236.8000030517578, a * 279, a * 199.8000030517578);
        e.bezierCurveTo(a * 274, a * 178.8000030517578, a * 263, a * 177.8000030517578, a * 255, a * 175.8000030517578);
        e.bezierCurveTo(a * 248, a * 175.8000030517578, a * 248, a * 175.8000030517578, a * 241, a * 175.8000030517578);
        e.bezierCurveTo(a * 240, a * 175.8000030517578, a * 240, a * 175.8000030517578, a * 239, a * 175.8000030517578);
        e.bezierCurveTo(a * 254, a * 200.8000030517578, a * 222, a * 211.8000030517578, a * 202, a * 212.8000030517578);
        e.bezierCurveTo(a * 168, a * 213.8000030517578, a * 151, a * 190.8000030517578, a * 163, a * 176.8000030517578);
        e.closePath();
        wt(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 198, a * 161.4000015258789);
        e.bezierCurveTo(a * 198, a * 186.9000015258789, a * 198, a * 186.9000015258789, a * 198, a * 212.4000015258789);
        e.bezierCurveTo(a * 201, a * 212.4000015258789, a * 201, a * 212.4000015258789, a * 204, a * 212.4000015258789);
        e.bezierCurveTo(a * 204, a * 186.9000015258789, a * 204, a * 186.9000015258789, a * 204, a * 161.4000015258789);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 161, a * 194);
        e.bezierCurveTo(a * 188, a * 169, a * 231, a * 179, a * 241, a * 194);
        e.bezierCurveTo(a * 239.5, a * 196, a * 239.5, a * 196, a * 238, a * 198);
        e.bezierCurveTo(a * 221, a * 179, a * 182, a * 182, a * 165, a * 198);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 162, a * 150.80000019073486, a * 241, a * 150.80000019073486, a * 245, a * 188.80000019073486);
        e.bezierCurveTo(a * 242, a * 224.80000019073486, a * 162, a * 228.80000019073486, a * 157, a * 188.80000019073486);
        e.bezierCurveTo(a * 159, a * 188.80000019073486, a * 159, a * 188.80000019073486, a * 161, a * 188.80000019073486);
        e.bezierCurveTo(a * 168, a * 216.80000019073486, a * 231, a * 218.80000019073486, a * 241, a * 188.80000019073486);
        e.bezierCurveTo(a * 236, a * 156.80000019073486, a * 169, a * 152.80000019073486, a * 161, a * 188.80000019073486);
        e.closePath();
        wt(e, c[0], c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 156, a * 188);
        e.bezierCurveTo(a * 160, a * 164, a * 183, a * 159, a * 201, a * 158);
        e.bezierCurveTo(a * 232, a * 159, a * 244, a * 174, a * 246, a * 188);
        e.bezierCurveTo(a * 245, a * 212, a * 213, a * 219, a * 201, a * 218);
        e.bezierCurveTo(a * 181, a * 221, a * 158, a * 207, a * 156, a * 190);
        e.closePath();
        wt(e, pl, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 189);
        e.bezierCurveTo(a * 166, a * 170, a * 185, a * 165, a * 201, a * 164);
        e.bezierCurveTo(a * 227, a * 165, a * 240, a * 178, a * 239, a * 188);
        e.bezierCurveTo(a * 239, a * 204, a * 210, a * 210, a * 201, a * 210);
        e.bezierCurveTo(a * 182, a * 211, a * 166, a * 200, a * 162, a * 190);
        e.closePath();
        wt(e, undefined, c[1], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 262);
        e.bezierCurveTo(a * 136, a * 241, a * 144, a * 236, a * 158, a * 233);
        e.bezierCurveTo(a * 200.5, a * 233, a * 229, a * 232, a * 243, a * 233);
        e.bezierCurveTo(a * 259, a * 235, a * 267, a * 248, a * 269, a * 260);
        e.bezierCurveTo(a * 269, a * 266.5, a * 269, a * 266.5, a * 269, a * 273);
        e.bezierCurveTo(a * 265, a * 290, a * 251, a * 297, a * 242, a * 298);
        e.bezierCurveTo(a * 202, a * 298, a * 202, a * 298, a * 162, a * 298);
        e.bezierCurveTo(a * 148, a * 298, a * 136, a * 289, a * 132, a * 273);
        e.bezierCurveTo(a * 131.5, a * 268, a * 131.5, a * 268, a * 131, a * 263);
        e.bezierCurveTo(a * 135, a * 263, a * 135, a * 263, a * 139, a * 263);
        e.bezierCurveTo(a * 139, a * 281, a * 151, a * 287, a * 160, a * 290);
        e.bezierCurveTo(a * 200.5, a * 290, a * 200.5, a * 290, a * 241, a * 290);
        e.bezierCurveTo(a * 252, a * 290, a * 257, a * 281, a * 262, a * 271);
        e.bezierCurveTo(a * 261.5, a * 267, a * 261.5, a * 267, a * 261, a * 263);
        e.bezierCurveTo(a * 260, a * 249, a * 251, a * 242, a * 241, a * 241);
        e.bezierCurveTo(a * 240.5, a * 240.5, a * 240.5, a * 240.5, a * 240, a * 240);
        e.bezierCurveTo(a * 200, a * 240, a * 200, a * 240, a * 160, a * 240);
        e.bezierCurveTo(a * 145, a * 244, a * 142, a * 250, a * 139, a * 264);
        e.closePath();
        wt(e, c[0], c[0], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 264);
        e.bezierCurveTo(a * 132, a * 244, a * 144, a * 235, a * 157, a * 232);
        e.bezierCurveTo(a * 245, a * 232, a * 201, a * 232, a * 245, a * 232);
        e.bezierCurveTo(a * 264, a * 235, a * 269, a * 251, a * 270, a * 264);
        e.bezierCurveTo(a * 272, a * 291, a * 248, a * 299, a * 242, a * 299);
        e.bezierCurveTo(a * 200, a * 299, a * 200, a * 299, a * 158, a * 299);
        e.bezierCurveTo(a * 139, a * 298, a * 130, a * 276, a * 130, a * 265);
        e.closePath();
        wt(e, xh, c[1], a * 2);
        return d;
    }
    function jd(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 234;
        c.height = a * 183;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 25);
        d.bezierCurveTo(a * 150, a * 3, a * 181, a * 22, a * 203, a * 41);
        d.bezierCurveTo(a * 225, a * 63, a * 225, a * 105, a * 198, a * 133);
        d.bezierCurveTo(a * 179, a * 157, a * 134, a * 178, a * 81, a * 164);
        d.bezierCurveTo(a * 19, a * 148, a * 6, a * 95, a * 21, a * 66);
        d.bezierCurveTo(a * 34, a * 39, a * 52, a * 33, a * 75, a * 25);
        d.closePath();
        wt(d, b[0], b[0], a * 4);
        return c;
    }
    function Ld(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 277.34375);
        e.bezierCurveTo(a * 197.5, a * 259.84375, a * 197.5, a * 259.84375, a * 298.5, a * 242.34375);
        e.bezierCurveTo(a * 311.5, a * 231.34375, a * 307.5, a * 168.34375, a * 298.5, a * 150.34375);
        e.bezierCurveTo(a * 198, a * 170.34375, a * 198, a * 170.34375, a * 97.5, a * 190.34375);
        e.closePath();
        wt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 214.34375);
        e.bezierCurveTo(a * 199, a * 196.34375, a * 199, a * 196.34375, a * 299.5, a * 178.34375);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98.5, a * 247.34375);
        e.bezierCurveTo(a * 201.5, a * 229.34375, a * 201.5, a * 229.34375, a * 304.5, a * 211.34375);
        e.closePath();
        wt(e, Kq, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 97.5, a * 189.34375);
        e.bezierCurveTo(a * 97, a * 199.84375, a * 97, a * 199.84375, a * 96.5, a * 210.34375);
        e.bezierCurveTo(a * 110.5, a * 204.34375, a * 110.5, a * 204.34375, a * 124.5, a * 198.34375);
        e.bezierCurveTo(a * 137.5, a * 203.84375, a * 137.5, a * 203.84375, a * 150.5, a * 209.34375);
        e.bezierCurveTo(a * 172, a * 197.84375, a * 172, a * 197.84375, a * 193.5, a * 186.34375);
        e.bezierCurveTo(a * 211.5, a * 189.84375, a * 211.5, a * 189.84375, a * 229.5, a * 193.34375);
        e.bezierCurveTo(a * 240.5, a * 193.34375, a * 240.5, a * 193.34375, a * 251.5, a * 193.34375);
        e.bezierCurveTo(a * 261, a * 182.84375, a * 261, a * 182.84375, a * 270.5, a * 172.34375);
        e.bezierCurveTo(a * 287.5, a * 169.34375, a * 287.5, a * 169.34375, a * 304.5, a * 166.34375);
        e.bezierCurveTo(a * 304.5, a * 156.34375, a * 300.5, a * 145.34375, a * 298.5, a * 147.34375);
        e.closePath();
        wt(e, c[3], c[4], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 300.5, a * 147.34375);
        e.bezierCurveTo(a * 293.5, a * 121.34375, a * 278.5, a * 106.34375, a * 256.5, a * 101.34375);
        e.bezierCurveTo(a * 176.5, a * 145.34375, a * 176.5, a * 145.34375, a * 96.5, a * 189.34375);
        e.closePath();
        wt(e, c[5], c[6], a * 12);
        zt(e, a * 252.5, a * 129.34375, a * 18.027756377319946);
        wt(e, c[7]);
        zt(e, a * 248.5, a * 121.34375, a * 8.246211251235321);
        wt(e, c[8]);
        return d;
    }
    function Wd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 140;
        var a = b * 150;
        var i = b * 10;
        var j = b * 4;
        e.width = g;
        e.height = a;
        f.translate(b * -50, b * -38 + i);
        f.globalAlpha = c ? 0.5 : 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        wt(f, d[0]);
        f.translate(0, 0 - i);
        f.globalAlpha = 1;
        f.beginPath();
        f.bezierCurveTo(b * 160, b * 65, b * 160, b * 85, b * 152, b * 95);
        f.bezierCurveTo(b * 152, b * 95, b * 173, b * 94, b * 187, b * 102);
        f.bezierCurveTo(b * 187, b * 102, b * 180, b * 120, b * 155, b * 126);
        f.bezierCurveTo(b * 154, b * 126, b * 166, b * 138, b * 169, b * 148);
        f.bezierCurveTo(b * 169, b * 148, b * 148, b * 152, b * 133, b * 140);
        f.bezierCurveTo(b * 133, b * 140, b * 134, b * 160, b * 122, b * 175);
        f.bezierCurveTo(b * 122, b * 175, b * 107, b * 162, b * 107, b * 144);
        f.bezierCurveTo(b * 107, b * 144, b * 98, b * 164, b * 73, b * 167);
        f.bezierCurveTo(b * 73, b * 167, b * 72, b * 134, b * 90, b * 127);
        f.bezierCurveTo(b * 90, b * 127, b * 70, b * 134, b * 55, b * 123);
        f.bezierCurveTo(b * 55, b * 123, b * 58, b * 115, b * 75, b * 104);
        f.bezierCurveTo(b * 75, b * 104, b * 66, b * 96, b * 61, b * 77);
        f.bezierCurveTo(b * 61, b * 77, b * 83, b * 74, b * 102, b * 89);
        f.bezierCurveTo(b * 102, b * 89, b * 92, b * 66, b * 110, b * 41);
        f.bezierCurveTo(b * 111, b * 40, b * 130, b * 54, b * 130, b * 82);
        f.bezierCurveTo(b * 130, b * 82, b * 143, b * 67, b * 159, b * 65);
        f.closePath();
        wt(f, d[1], d[2], j);
        return e;
    }
    function Nd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 18;
        var a = b * 18;
        e.width = g;
        e.height = a;
        var i = b * 9;
        var j = b * 9;
        var k = b * 8;
        f.save();
        f.translate(i, j);
        f.globalAlpha = 1;
        zt(f, 0, 0, k);
        wt(f, d[0]);
        k = b * 3;
        i = 0;
        j = b * -3;
        f.translate(i, j);
        f.globalAlpha = 1;
        zt(f, 0, 0, k);
        wt(f, d[1]);
        f.restore();
        return e;
    }
    function Od(b, c, d, e, f) {
        var g = document.createElement("canvas");
        var a = g.getContext("2d");
        if (e == 0) {
            var i = b * 270;
            var j = b * 250;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 140, b * 3);
            a.translate(b * -25, b * -20);
            a.bezierCurveTo(b * 218, b * 31, b * 251, b * 61, b * 265, b * 85);
            a.bezierCurveTo(b * 278, b * 108, b * 295, b * 160, b * 285, b * 195);
            a.bezierCurveTo(b * 271, b * 242, b * 213, b * 268, b * 188, b * 266);
            a.bezierCurveTo(b * 139, b * 262, b * 70, b * 244, b * 47, b * 204);
            a.bezierCurveTo(b * 20, b * 158, b * 35, b * 78, b * 59, b * 56);
            a.bezierCurveTo(b * 90, b * 28, b * 124, b * 23, b * 140, b * 23);
            a.closePath();
            wt(a, d[0]);
        } else if (e == 1) {
            i = b * 430;
            j = b * 350;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 180, b * 5);
            a.translate(b * -30, b * -60);
            a.bezierCurveTo(b * 283, b * 60, b * 265, b * 163, b * 335, b * 206);
            a.bezierCurveTo(b * 376, b * 231, b * 492, b * 299, b * 434, b * 357);
            a.bezierCurveTo(b * 371, b * 421, b * 289, b * 394, b * 255, b * 386);
            a.bezierCurveTo(b * 218, b * 377, b * 91, b * 359, b * 50, b * 272);
            a.bezierCurveTo(b * 12, b * 192, b * 107, b * 75, b * 178, b * 69);
            a.closePath();
            wt(a, d[0]);
        } else if (e == 2) {
            i = b * 400;
            j = b * 300;
            g.width = i;
            g.height = j;
            a.beginPath();
            a.moveTo(b * 80, b * 52);
            a.translate(b * -40, b * -30);
            a.bezierCurveTo(b * 124, b * 77, b * 241, b * 22, b * 311, b * 65);
            a.bezierCurveTo(b * 352, b * 90, b * 404, b * 176, b * 346, b * 234);
            a.bezierCurveTo(b * 283, b * 298, b * 179, b * 299, b * 145, b * 291);
            a.bezierCurveTo(b * 108, b * 282, b * 100, b * 239, b * 63, b * 205);
            a.bezierCurveTo(b * 37, b * 181, b * 45, b * 131, b * 80, b * 107);
            a.closePath();
            wt(a, d[0]);
        }
        return g;
    }
    function qd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 120;
        var a = b * 150;
        var i = b * 60;
        var j = i / 4;
        var h = b * 15;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 0 + h);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        Bt(f, 8, i, j);
        wt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 11, a / 2 + b * 12);
        f.globalAlpha = 1;
        f.rotate(Math.PI / 3);
        f.translate(0, -h);
        Bt(f, 8, i, j);
        wt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 9, a / 2 - b * 12);
        f.rotate(Math.PI / 2.8);
        Bt(f, 5, i * 0.5, j * 0.4);
        wt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 19, a / 2 + b * 5);
        f.rotate(Math.PI / 1);
        Bt(f, 5, i * 0.5, j * 0.4);
        wt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 8, a / 2 + b * 20);
        f.rotate(Math.PI / 2.25);
        Bt(f, 5, i * 0.5, j * 0.4);
        wt(f, d[2]);
        f.restore();
        return e;
    }
    function Hd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 180;
        var a = b * 210;
        var i = (h = b * 60) / 4;
        var j = b * 20;
        e.width = g;
        e.height = a;
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35 + j);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15 + j);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 0.5;
        f.translate(b * 0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40 + j);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 0.5;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[0]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 0, a / 2 - b * 35);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(b * 0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 10, a / 2 + b * 15);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[1]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 50, a / 2 + b * 40);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[1]);
        f.restore();
        var h;
        i = (h = b * 30) / 4;
        f.save();
        f.translate(g / 2 + b * 5, a / 2 - b * 20);
        f.rotate(Math.PI / -1.8);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 + b * 0, a / 2 + b * 10);
        f.rotate(Math.PI / 2);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[2]);
        f.restore();
        f.save();
        f.translate(g / 2 - b * 45, a / 2 + b * 35);
        f.rotate(Math.PI / 3);
        f.globalAlpha = 1;
        f.translate(0, b * -20);
        Bt(f, 5, h, i);
        wt(f, d[2]);
        f.restore();
        zt(f, g / 2 - b * 7, a / 2 + b * 7, 5);
        wt(f, d[2]);
        return e;
    }
    function Ud(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 309;
        d.height = a * 287;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        wt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        wt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        wt(e, c[0], c[0], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        wt(e, c[0], c[0], a * 10);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34.5, a * 38.53125);
        e.bezierCurveTo(a * 91.5, a * 30.53125, a * 138.5, a * 68.53125, a * 169.5, a * 93.53125);
        e.bezierCurveTo(a * 208.5, a * 128.53125, a * 226.5, a * 157.53125, a * 233.5, a * 209.53125);
        e.bezierCurveTo(a * 195.5, a * 218.53125, a * 138.5, a * 191.53125, a * 105.5, a * 157.53125);
        e.bezierCurveTo(a * 54.5, a * 112.53125, a * 41.5, a * 80.53125, a * 33.5, a * 38.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143.5, a * 74.53125);
        e.bezierCurveTo(a * 164.5, a * 73.53125, a * 159, a * 74.53125, a * 174.5, a * 74.53125);
        e.bezierCurveTo(a * 186, a * 86.53125, a * 186, a * 86.53125, a * 197.5, a * 98.53125);
        e.bezierCurveTo(a * 186, a * 97.03125, a * 186, a * 97.03125, a * 174.5, a * 95.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 142.53125);
        e.bezierCurveTo(a * 92, a * 160.03125, a * 92, a * 160.03125, a * 96.5, a * 177.53125);
        e.bezierCurveTo(a * 108, a * 181.53125, a * 108, a * 181.53125, a * 119.5, a * 185.53125);
        e.bezierCurveTo(a * 116.5, a * 175.53125, a * 116.5, a * 175.53125, a * 113.5, a * 165.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 236.5, a * 189.53125);
        e.bezierCurveTo(a * 274.5, a * 197.53125, a * 255.5, a * 194.03125, a * 274.5, a * 198.53125);
        e.bezierCurveTo(a * 272.5, a * 236.53125, a * 261.5, a * 237.53125, a * 242.5, a * 248.53125);
        e.bezierCurveTo(a * 230.5, a * 231.03125, a * 230.5, a * 231.03125, a * 218.5, a * 213.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 109.5, a * 51.53125);
        e.bezierCurveTo(a * 107.5, a * 92.53125, a * 91.5, a * 95.53125, a * 59.5, a * 101.53125);
        wt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 51.53125);
        e.bezierCurveTo(a * 71, a * 64.53125, a * 69.5, a * 76.53125, a * 69.5, a * 77.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 63.53125);
        e.bezierCurveTo(a * 70.5, a * 65.03125, a * 70.5, a * 65.03125, a * 56.5, a * 66.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.5, a * 84.53125);
        e.bezierCurveTo(a * 125.5, a * 110.03125, a * 125.5, a * 110.03125, a * 125.5, a * 135.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 149.5, a * 108.53125);
        e.bezierCurveTo(a * 150, a * 137.03125, a * 150, a * 137.03125, a * 150.5, a * 165.53125);
        e.closePath();
        wt(e, c[1], c[2], a * 7);
        return d;
    }
    const Yd = 8;
    const Kd = 12;
    const Vd = 9;
    function Xd(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 130;
        var a = b * 142;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 1;
        zt(f, 0, 0, b * 60);
        wt(f, d[0]);
        f.translate(0, b * -7);
        f.globalAlpha = 1;
        zt(f, 0, 0, b * 60);
        wt(f, d[1], d[2], b * 4);
        zt(f, 0, 0, b * 40);
        wt(f, d[3]);
        zt(f, 0, 0, b * 25);
        wt(f, d[4], d[5], b * 8);
        return e;
    }
    function Zd(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 142;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 80);
        e.rotate(0.2);
        Bt(e, 9, a * 60, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 71);
        e.rotate(0.2);
        Bt(e, 9, a * 60, a * 10);
        wt(e, c[1], c[2], 4);
        e.rotate(-0.32);
        Bt(e, 9, a * 38, a * 10);
        wt(e, c[3], c[4], 4);
        e.rotate(0.68);
        Bt(e, 9, a * 20, a * 8);
        wt(e, c[5], c[6], 6);
        e.restore();
        return d;
    }
    const $d = 13;
    function Pt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 248;
        d.height = a * 128;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 7);
        e.bezierCurveTo(a * 169, a * 14, a * 212, a * 9, a * 241, a * 5);
        e.bezierCurveTo(a * 211, a * 63, a * 158, a * 92, a * 103, a * 109);
        e.bezierCurveTo(a * 73, a * 126, a * 54, a * 124, a * 6, a * 99);
        e.bezierCurveTo(a * 82, a * 63, a * 113, a * 35, a * 137, a * 8);
        e.closePath();
        wt(e, c[0], c[1], a * 14);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 73, a * 124);
        e.bezierCurveTo(a * 111, a * 126, a * 162, a * 97, a * 203, a * 61);
        e.bezierCurveTo(a * 156, a * 98, a * 131, a * 106, a * 105, a * 109);
        e.bezierCurveTo(a * 99, a * 121, a * 87, a * 124, a * 72, a * 124);
        e.closePath();
        wt(e, c[2], c[3], a * 1);
        return d;
    }
    function Qt(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 372;
        c.height = a * 375;
        d.globalAlpha = 0.5;
        d.translate(a * 15, a * 15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -15, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        wt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.00003051757812, a * 192.94886779785156);
        d.bezierCurveTo(a * 185.00003051757812, a * 66.94886779785156, a * 184.50003051757812, a * 104.94886779785156, a * 183.00003051757812, a * 16.948867797851562);
        d.bezierCurveTo(a * 216.00003051757812, a * 47.94886779785156, a * 219.00003051757812, a * 80.94886779785156, a * 218.00003051757812, a * 113.94886779785156);
        d.bezierCurveTo(a * 209.00003051757812, a * 165.94886779785156, a * 200.00003051757812, a * 176.94886779785156, a * 189.00003051757812, a * 192.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 190.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 207.00003051757812, a * 348.94886779785156, a * 205.00003051757812, a * 323.94886779785156, a * 209.00003051757812, a * 358.94886779785156);
        d.bezierCurveTo(a * 171.00003051757812, a * 334.94886779785156, a * 167.00003051757812, a * 302.94886779785156, a * 161.00003051757812, a * 268.94886779785156);
        d.bezierCurveTo(a * 160.00003051757812, a * 218.94886779785156, a * 181.00003051757812, a * 191.94886779785156, a * 189.00003051757812, a * 186.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 194.00003051757812, a * 195.94886779785156);
        d.bezierCurveTo(a * 116.00003051757812, a * 150.94886779785156, a * 116.00003051757812, a * 150.94886779785156, a * 38.000030517578125, a * 105.94886779785156);
        d.bezierCurveTo(a * 67.00003051757812, a * 90.94886779785156, a * 96.00003051757812, a * 99.94886779785156, a * 123.00003051757812, a * 111.94886779785156);
        d.bezierCurveTo(a * 183.00003051757812, a * 152.94886779785156, a * 179.00003051757812, a * 180.94886779785156, a * 193.00003051757812, a * 194.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 190.94886779785156);
        d.bezierCurveTo(a * 250.00003051757812, a * 133.94886779785156, a * 311.0000305175781, a * 78.94886779785156, a * 311.0000305175781, a * 76.94886779785156);
        d.bezierCurveTo(a * 306.0000305175781, a * 127.94886779785156, a * 283.0000305175781, a * 148.94886779785156, a * 261.0000305175781, a * 166.94886779785156);
        d.bezierCurveTo(a * 220.00003051757812, a * 197.94886779785156, a * 191.00003051757812, a * 194.94886779785156, a * 189.00003051757812, a * 195.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.00003051757812, a * 194.94886779785156);
        d.bezierCurveTo(a * 268.5000305175781, a * 211.94886779785156, a * 268.5000305175781, a * 211.94886779785156, a * 348.0000305175781, a * 228.94886779785156);
        d.bezierCurveTo(a * 316.0000305175781, a * 247.94886779785156, a * 298.0000305175781, a * 256.94886779785156, a * 250.00003051757812, a * 246.94886779785156);
        d.bezierCurveTo(a * 197.00003051757812, a * 229.94886779785156, a * 189.00003051757812, a * 202.94886779785156, a * 188.00003051757812, a * 199.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.00003051757812, a * 191.94886779785156);
        d.bezierCurveTo(a * 116.50003051757812, a * 238.44886779785156, a * 116.50003051757812, a * 238.44886779785156, a * 41.000030517578125, a * 284.94886779785156);
        d.bezierCurveTo(a * 49.000030517578125, a * 252.94886779785156, a * 56.000030517578125, a * 242.94886779785156, a * 80.00003051757812, a * 215.94886779785156);
        d.bezierCurveTo(a * 125.00003051757812, a * 181.94886779785156, a * 174.00003051757812, a * 183.94886779785156, a * 192.00003051757812, a * 191.94886779785156);
        d.closePath();
        wt(d, b[3], b[3], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 313.0000305175781, a * 76.58523559570312);
        d.bezierCurveTo(a * 308.0000305175781, a * 130.58523559570312, a * 279.0000305175781, a * 158.58523559570312, a * 254.00003051757812, a * 175.58523559570312);
        d.bezierCurveTo(a * 287.0000305175781, a * 182.58523559570312, a * 274.0000305175781, a * 181.08523559570312, a * 294.0000305175781, a * 186.58523559570312);
        d.bezierCurveTo(a * 293.5000305175781, a * 196.08523559570312, a * 293.5000305175781, a * 196.08523559570312, a * 293.0000305175781, a * 205.58523559570312);
        d.bezierCurveTo(a * 304.0000305175781, a * 201.08523559570312, a * 304.0000305175781, a * 201.08523559570312, a * 315.0000305175781, a * 196.58523559570312);
        d.bezierCurveTo(a * 350.0000305175781, a * 219.58523559570312, a * 343.0000305175781, a * 221.58523559570312, a * 351.0000305175781, a * 230.58523559570312);
        d.bezierCurveTo(a * 296.0000305175781, a * 260.5852355957031, a * 264.0000305175781, a * 256.5852355957031, a * 220.00003051757812, a * 236.58523559570312);
        d.bezierCurveTo(a * 233.00003051757812, a * 266.5852355957031, a * 232.00003051757812, a * 279.5852355957031, a * 231.00003051757812, a * 295.5852355957031);
        d.bezierCurveTo(a * 222.00003051757812, a * 297.5852355957031, a * 222.00003051757812, a * 297.5852355957031, a * 213.00003051757812, a * 299.5852355957031);
        d.bezierCurveTo(a * 219.50003051757812, a * 308.0852355957031, a * 219.50003051757812, a * 308.0852355957031, a * 226.00003051757812, a * 316.5852355957031);
        d.bezierCurveTo(a * 223.00003051757812, a * 344.5852355957031, a * 216.00003051757812, a * 350.5852355957031, a * 209.00003051757812, a * 363.5852355957031);
        d.bezierCurveTo(a * 154.00003051757812, a * 318.5852355957031, a * 156.00003051757812, a * 268.5852355957031, a * 160.00003051757812, a * 238.58523559570312);
        d.bezierCurveTo(a * 135.00003051757812, a * 268.5852355957031, a * 125.00003051757812, a * 267.5852355957031, a * 112.00003051757812, a * 272.5852355957031);
        d.bezierCurveTo(a * 104.50003051757812, a * 266.5852355957031, a * 104.50003051757812, a * 266.5852355957031, a * 97.00003051757812, a * 260.5852355957031);
        d.bezierCurveTo(a * 93.00003051757812, a * 271.0852355957031, a * 93.00003051757812, a * 271.0852355957031, a * 89.00003051757812, a * 281.5852355957031);
        d.bezierCurveTo(a * 66.00003051757812, a * 288.5852355957031, a * 59.000030517578125, a * 288.5852355957031, a * 39.000030517578125, a * 285.5852355957031);
        d.bezierCurveTo(a * 56.000030517578125, a * 216.58523559570312, a * 91.00003051757812, a * 204.58523559570312, a * 129.00003051757812, a * 189.58523559570312);
        d.bezierCurveTo(a * 90.00003051757812, a * 176.58523559570312, a * 89.00003051757812, a * 173.58523559570312, a * 79.00003051757812, a * 166.58523559570312);
        d.bezierCurveTo(a * 82.00003051757812, a * 155.08523559570312, a * 82.00003051757812, a * 155.08523559570312, a * 85.00003051757812, a * 143.58523559570312);
        d.bezierCurveTo(a * 75.50003051757812, a * 147.58523559570312, a * 75.50003051757812, a * 147.58523559570312, a * 66.00003051757812, a * 151.58523559570312);
        d.bezierCurveTo(a * 44.000030517578125, a * 133.58523559570312, a * 41.000030517578125, a * 124.58523559570312, a * 34.000030517578125, a * 102.58523559570312);
        d.bezierCurveTo(a * 100.00003051757812, a * 81.58523559570312, a * 134.00003051757812, a * 118.58523559570312, a * 150.00003051757812, a * 128.58523559570312);
        d.bezierCurveTo(a * 144.00003051757812, a * 102.58523559570312, a * 147.00003051757812, a * 90.58523559570312, a * 150.00003051757812, a * 80.58523559570312);
        d.bezierCurveTo(a * 159.50003051757812, a * 79.08523559570312, a * 159.50003051757812, a * 79.08523559570312, a * 169.00003051757812, a * 77.58523559570312);
        d.bezierCurveTo(a * 163.00003051757812, a * 72.58523559570312, a * 163.00003051757812, a * 72.58523559570312, a * 157.00003051757812, a * 67.58523559570312);
        d.bezierCurveTo(a * 162.00003051757812, a * 42.585235595703125, a * 169.00003051757812, a * 29.585235595703125, a * 182.00003051757812, a * 14.585235595703125);
        d.bezierCurveTo(a * 219.00003051757812, a * 48.585235595703125, a * 222.00003051757812, a * 92.58523559570312, a * 218.00003051757812, a * 112.58523559570312);
        d.bezierCurveTo(a * 239.00003051757812, a * 95.58523559570312, a * 242.00003051757812, a * 97.58523559570312, a * 249.00003051757812, a * 94.58523559570312);
        d.bezierCurveTo(a * 255.00003051757812, a * 103.08523559570312, a * 255.00003051757812, a * 103.08523559570312, a * 261.0000305175781, a * 111.58523559570312);
        d.bezierCurveTo(a * 261.5000305175781, a * 99.58523559570312, a * 261.5000305175781, a * 99.58523559570312, a * 262.0000305175781, a * 87.58523559570312);
        d.bezierCurveTo(a * 282.0000305175781, a * 77.58523559570312, a * 301.0000305175781, a * 74.58523559570312, a * 314.0000305175781, a * 76.58523559570312);
        d.closePath();
        wt(d, undefined, b[2], a * 4);
        return c;
    }
    const Rt = 3;
    function Tt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 125;
        d.height = a * 139;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 63, a * 79);
        e.rotate(1);
        Bt(e, 8, a * 60, a * 10);
        wt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 63, a * 69);
        e.rotate(1);
        Bt(e, 8, a * 60, a * 10);
        wt(e, c[1], c[2], 4);
        e.rotate(0.56);
        Bt(e, 8, a * 40, a * 10);
        wt(e, c[3], c[4], 4);
        e.rotate(0.28);
        Bt(e, 8, a * 28, a * 8);
        wt(e, c[5]);
        e.restore();
        return d;
    }
    function Ut(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 101;
        e.translate(a * 0, a * 5);
        if ($s === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            zt(e, a * 44, a * 55, a * 41);
            wt(e, c[0]);
        }
        e.globalAlpha = 1;
        zt(e, a * 44, a * 45, a * 41);
        wt(e, c[1], c[2], a * 4);
        zt(e, a * 44, a * 45, a * 31);
        wt(e, c[3]);
        e.save();
        e.translate(a * 45, a * 45);
        xt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        xt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        zt(e, a * 45, a * 29, a * 7);
        wt(e, c[5]);
        zt(e, a * 45, a * 61, a * 7);
        wt(e, c[5]);
        zt(e, a * 28, a * 45, a * 7);
        wt(e, c[5]);
        zt(e, a * 62, a * 45, a * 7);
        wt(e, c[5]);
        return d;
    }
    function Vt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($s === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1);
            Bt(e, 8, a * 41, a * 10);
            wt(e, c[0]);
            e.restore();
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1);
        Bt(e, 8, a * 41, a * 10);
        wt(e, c[1], c[2], a * 4);
        e.rotate(0.56);
        Bt(e, 8, a * 33, a * 10);
        wt(e, c[3], c[4], a * 4);
        e.rotate(0.28);
        Bt(e, 8, a * 24, a * 8);
        wt(e, c[5]);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        zt(e, a * 45, a * 29, a * 7);
        wt(e, c[5]);
        zt(e, a * 45, a * 61, a * 7);
        wt(e, c[5]);
        zt(e, a * 28, a * 45, a * 7);
        wt(e, c[5]);
        zt(e, a * 62, a * 45, a * 7);
        wt(e, c[5]);
        return d;
    }
    function Wt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($s === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(1.4);
            Bt(e, 7, a * 41, a * 10);
            e.restore();
            wt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(1.4);
        Bt(e, 7, a * 41, a * 10);
        wt(e, c[1], c[2], a * 4);
        Bt(e, 7, a * 35, a * 10);
        wt(e, c[3], c[4], a * 4);
        Bt(e, 7, a * 23, a * 5);
        e.restore();
        wt(e, c[5]);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        zt(e, a * 45, a * 29, a * 7);
        wt(e, c[5]);
        zt(e, a * 45, a * 61, a * 7);
        wt(e, c[5]);
        zt(e, a * 28, a * 45, a * 7);
        wt(e, c[5]);
        zt(e, a * 62, a * 45, a * 7);
        wt(e, c[5]);
        return d;
    }
    function Xt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        Bt(e, 6, a * 146, a * 30);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        Bt(e, 6, a * 146, a * 30);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Bt(e, 6, a * 105, a * 30);
        e.restore();
        wt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Bt(e, 6, a * 66, a * 30);
        e.restore();
        wt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 131, a * 116);
        Bt(e, 7, a * 17, a * 8);
        e.restore();
        wt(e, c[6]);
        e.save();
        e.translate(a * 163, a * 168);
        Bt(e, 7, a * 25, a * 8);
        e.restore();
        wt(e, c[6]);
        e.save();
        e.translate(a * 117, a * 151);
        Bt(e, 7, a * 11, a * 8);
        e.restore();
        wt(e, c[6]);
        e.save();
        e.translate(a * 167, a * 122);
        Bt(e, 7, a * 12, a * 8);
        e.restore();
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        wt(e, Kq, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        wt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        wt(e, pl, c[2], a * 8);
        return d;
    }
    function Yt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 130;
        d.height = a * 148;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 65, a * 85);
        e.rotate(1.4);
        Bt(e, 7, a * 60, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 65, a * 74);
        e.rotate(1.4);
        Bt(e, 7, a * 60, a * 10);
        wt(e, c[1], c[2], 4);
        e.rotate(0.64);
        Bt(e, 7, a * 40, a * 10);
        wt(e, c[3], c[4], 4);
        e.rotate(0.12);
        Bt(e, 7, a * 23, a * 5);
        e.restore();
        wt(e, c[5]);
        return d;
    }
    function Zt(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 300;
        d.height = a * 300;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 150, a * 160);
        e.rotate(6.28);
        Bt(e, 6, a * 146, a * 30);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(6.28);
        Bt(e, 6, a * 146, a * 30);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Bt(e, 6, a * 105, a * 30);
        e.restore();
        wt(e, c[3], c[3], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Bt(e, 6, a * 66, a * 30);
        e.restore();
        wt(e, c[4], c[2], a * 8);
        e.save();
        e.translate(a * 150, a * 150);
        e.rotate(0);
        Bt(e, 6, a * 31, a * 30);
        e.restore();
        wt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 207);
        e.bezierCurveTo(a * 150, a * 151, a * 150, a * 101, a * 150, a * 94);
        e.closePath();
        wt(e, ll, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 118, a * 100);
        e.bezierCurveTo(a * 118, a * 205, a * 118, a * 207, a * 118, a * 200);
        e.closePath();
        wt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183, a * 100);
        e.bezierCurveTo(a * 183, a * 203, a * 183, a * 203, a * 183, a * 200);
        e.closePath();
        wt(e, undefined, c[2], a * 8);
        return d;
    }
    const $t = 17;
    const _t = 10;
    function au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 108;
        d.height = a * 669;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        xt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 54, a * 389.5);
        e.rotate(0);
        xt(e, a * -15, a * -228.5, a * 30, a * 457, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 579);
        e.bezierCurveTo(a * 47, a * 587, a * 61, a * 584, a * 71, a * 579);
        e.bezierCurveTo(a * 75, a * 597.5, a * 75, a * 597.5, a * 79, a * 616);
        e.bezierCurveTo(a * 66.5, a * 628, a * 66.5, a * 628, a * 54, a * 640);
        e.bezierCurveTo(a * 41, a * 628.5, a * 41, a * 628.5, a * 28, a * 617);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141);
        e.bezierCurveTo(a * 40, a * 136, a * 40, a * 136, a * 50, a * 131);
        e.bezierCurveTo(a * 63, a * 136, a * 63, a * 136, a * 76, a * 141);
        e.bezierCurveTo(a * 72.5, a * 161.5, a * 72.5, a * 161.5, a * 69, a * 182);
        e.bezierCurveTo(a * 61.5, a * 186.5, a * 61.5, a * 186.5, a * 54, a * 191);
        e.bezierCurveTo(a * 45, a * 186.5, a * 45, a * 186.5, a * 36, a * 182);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 152);
        e.bezierCurveTo(a * 53, a * 152, a * 53, a * 152, a * 64, a * 152);
        e.bezierCurveTo(a * 62, a * 171, a * 62, a * 176, a * 55, a * 177);
        e.bezierCurveTo(a * 42, a * 176, a * 45, a * 174, a * 42, a * 152);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 28);
        e.bezierCurveTo(a * 67.5, a * 55, a * 67.5, a * 55, a * 83, a * 82);
        e.bezierCurveTo(a * 80, a * 106.5, a * 80, a * 106.5, a * 77, a * 131);
        e.bezierCurveTo(a * 58, a * 147, a * 44, a * 141, a * 29, a * 131);
        e.bezierCurveTo(a * 26.5, a * 106.5, a * 26.5, a * 106.5, a * 24, a * 82);
        e.closePath();
        wt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 53);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 69, a * 87);
        e.bezierCurveTo(a * 67, a * 106, a * 67, a * 106, a * 65, a * 125);
        e.bezierCurveTo(a * 54, a * 130, a * 51, a * 130, a * 41, a * 125);
        e.bezierCurveTo(a * 39, a * 105, a * 39, a * 105, a * 37, a * 85);
        e.closePath();
        wt(e, c[8]);
        return d;
    }
    function bu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 115;
        d.height = a * 585;
        e.scale(-1, 1);
        e.translate(a * -110, 0);
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        xt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -10, a * -10);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 51.5, a * 342);
        xt(e, a * -14.5, a * -225, a * 29, a * 450, a * 20);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 54, a * 83);
        e.bezierCurveTo(a * 70, a * 69, a * 78, a * 62, a * 82, a * 40);
        e.bezierCurveTo(a * 93, a * 48, a * 103, a * 64, a * 95, a * 102);
        e.bezierCurveTo(a * 60, a * 114, a * 53, a * 103, a * 54, a * 85);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 95, a * 97);
        e.bezierCurveTo(a * 56, a * 102, a * 43, a * 77, a * 71, a * 6);
        e.bezierCurveTo(a * 34, a * 10, a * 6, a * 43, a * 5, a * 76);
        e.bezierCurveTo(a * 4, a * 98, a * 15, a * 130, a * 64, a * 130);
        e.bezierCurveTo(a * 76, a * 129, a * 95, a * 113, a * 97, a * 97);
        e.closePath();
        wt(e, c[5], c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 403);
        e.bezierCurveTo(a * 47, a * 412, a * 58, a * 412, a * 67, a * 403);
        e.bezierCurveTo(a * 66.5, a * 434, a * 66.5, a * 434, a * 66, a * 465);
        e.bezierCurveTo(a * 56, a * 480, a * 40, a * 472, a * 36, a * 465);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 427);
        e.bezierCurveTo(a * 47, a * 435, a * 55, a * 435, a * 67, a * 427);
        wt(e, xh, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 448);
        e.bezierCurveTo(a * 46, a * 454, a * 54, a * 457, a * 65, a * 449);
        wt(e, Go, c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 176);
        e.bezierCurveTo(a * 74, a * 175, a * 82, a * 169, a * 96, a * 155);
        e.bezierCurveTo(a * 103, a * 183, a * 95, a * 214, a * 54, a * 219);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 50, a * 176);
        e.bezierCurveTo(a * 25, a * 177, a * 16, a * 164, a * 7, a * 156);
        e.bezierCurveTo(a * 0, a * 186, a * 10, a * 201, a * 43, a * 220);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59, a * 67);
        e.bezierCurveTo(a * 47, a * 97, a * 18, a * 117, a * 11, a * 110);
        e.bezierCurveTo(a * 11, a * 115, a * 15, a * 122, a * 23, a * 124);
        e.bezierCurveTo(a * 46, a * 118, a * 52, a * 113, a * 62, a * 86);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 125);
        e.bezierCurveTo(a * 47, a * 136, a * 57, a * 134, a * 77, a * 127);
        e.bezierCurveTo(a * 71, a * 158, a * 71, a * 159, a * 66, a * 159);
        e.bezierCurveTo(a * 50.5, a * 156.5, a * 50.5, a * 156.5, a * 35, a * 154);
        e.bezierCurveTo(a * 31, a * 145, a * 31, a * 136, a * 31, a * 125);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 171);
        e.bezierCurveTo(a * 32, a * 221, a * 43, a * 233, a * 70, a * 247);
        e.bezierCurveTo(a * 75, a * 234, a * 75, a * 230, a * 72, a * 221);
        e.bezierCurveTo(a * 48, a * 206, a * 54, a * 188, a * 50, a * 176);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60, a * 68);
        e.bezierCurveTo(a * 63, a * 69, a * 65, a * 71, a * 67, a * 77);
        e.bezierCurveTo(a * 61, a * 123, a * 52, a * 137, a * 42, a * 150);
        e.bezierCurveTo(a * 38, a * 151, a * 38, a * 151, a * 34, a * 152);
        e.bezierCurveTo(a * 33, a * 146.5, a * 33, a * 146.5, a * 32, a * 141);
        e.bezierCurveTo(a * 49, a * 118, a * 63, a * 87, a * 59, a * 68);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 71, a * 172);
        e.bezierCurveTo(a * 56, a * 222, a * 49, a * 234, a * 35, a * 248);
        e.bezierCurveTo(a * 30, a * 236, a * 30, a * 230, a * 31, a * 217);
        e.bezierCurveTo(a * 44, a * 202, a * 49, a * 191, a * 52, a * 172);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 151);
        e.bezierCurveTo(a * 27, a * 165, a * 31, a * 173, a * 36, a * 178);
        e.bezierCurveTo(a * 56, a * 185, a * 73, a * 184, a * 71, a * 170);
        e.bezierCurveTo(a * 72, a * 154, a * 71, a * 154, a * 63, a * 155);
        e.closePath();
        wt(e, c[7], c[8], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53, a * 113);
        e.bezierCurveTo(a * 65, a * 140, a * 75, a * 166, a * 52, a * 169);
        e.bezierCurveTo(a * 29, a * 168, a * 41, a * 143, a * 53, a * 112);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        return d;
    }
    function cu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 304;
        d.height = a * 278;
        e.translate(a * 10, a * 25);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -10, a * -25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 128, a * 137);
        e.bezierCurveTo(a * 155, a * 144, a * 223, a * 143, a * 256, a * 122);
        e.bezierCurveTo(a * 249, a * 180, a * 210, a * 227, a * 164, a * 242);
        e.bezierCurveTo(a * 74, a * 213, a * 99, a * 166, a * 127, a * 138);
        e.closePath();
        wt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 284, a * 52);
        e.bezierCurveTo(a * 126, a * 112, a * 89, a * 177, a * 170, a * 241);
        e.bezierCurveTo(a * 103, a * 275, a * 20, a * 239, a * 12, a * 159);
        e.bezierCurveTo(a * 5, a * 76, a * 75, a * 4, a * 165, a * 13);
        e.bezierCurveTo(a * 233, a * 15, a * 260, a * 33, a * 284, a * 52);
        e.closePath();
        wt(e, c[3], c[4], a * 15);
        return d;
    }
    function du(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 647;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        xt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 45, a * 384.5);
        xt(e, a * -15, a * -216.5, a * 30, a * 433, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 572);
        e.bezierCurveTo(a * 44, a * 580, a * 55, a * 576, a * 62, a * 572);
        e.bezierCurveTo(a * 65, a * 585.5, a * 65, a * 585.5, a * 68, a * 599);
        e.bezierCurveTo(a * 71, a * 612, a * 68, a * 618, a * 34, a * 616);
        e.bezierCurveTo(a * 14, a * 615, a * 19, a * 607, a * 27, a * 573);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 587);
        e.bezierCurveTo(a * 39, a * 590, a * 48, a * 588, a * 54, a * 587);
        e.bezierCurveTo(a * 57, a * 604, a * 59, a * 609, a * 46, a * 609);
        e.bezierCurveTo(a * 27, a * 609, a * 28, a * 605, a * 33, a * 588);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 113);
        e.bezierCurveTo(a * 27, a * 139, a * 27, a * 139, a * 23, a * 165);
        e.bezierCurveTo(a * 18, a * 187, a * 39, a * 195, a * 57, a * 186);
        e.bezierCurveTo(a * 68, a * 180, a * 65, a * 171, a * 62, a * 153);
        e.bezierCurveTo(a * 58.5, a * 131, a * 58.5, a * 131, a * 55, a * 109);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 139);
        e.bezierCurveTo(a * 43, a * 139, a * 43, a * 139, a * 47, a * 139);
        e.bezierCurveTo(a * 51, a * 158, a * 56, a * 176, a * 44, a * 175);
        e.bezierCurveTo(a * 33, a * 177, a * 34, a * 167, a * 39, a * 140);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 29);
        e.bezierCurveTo(a * 57, a * 63, a * 57, a * 63, a * 70, a * 97);
        e.bezierCurveTo(a * 60, a * 111, a * 60, a * 111, a * 50, a * 125);
        e.bezierCurveTo(a * 45, a * 128, a * 41, a * 128, a * 35, a * 124);
        e.bezierCurveTo(a * 26.5, a * 110, a * 26.5, a * 110, a * 18, a * 96);
        e.closePath();
        wt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 54);
        e.bezierCurveTo(a * 50, a * 72, a * 50, a * 72, a * 56, a * 90);
        e.bezierCurveTo(a * 58, a * 94, a * 59, a * 98, a * 53, a * 105);
        e.bezierCurveTo(a * 47, a * 113, a * 43, a * 113, a * 36, a * 103);
        e.bezierCurveTo(a * 29, a * 96, a * 31, a * 94, a * 35, a * 83);
        e.closePath();
        wt(e, c[8]);
        return d;
    }
    function eu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 139);
        e.bezierCurveTo(a * 18, a * 163, a * 22, a * 156, a * 53, a * 157);
        e.bezierCurveTo(a * 97.5, a * 157, a * 97.5, a * 157, a * 142, a * 157);
        e.bezierCurveTo(a * 150, a * 157, a * 153, a * 156, a * 154, a * 142);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.save();
        e.translate(a * 86.5, a * 81.5);
        xt(e, a * -66.5, a * -65.5, a * 133, a * 131, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 84.5, a * 79);
        xt(e, a * -50.5, a * -49, a * 101, a * 98, a * 10);
        e.restore();
        wt(e, c[3], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42, a * 54);
        e.bezierCurveTo(a * 37, a * 48, a * 39, a * 44, a * 38, a * 41);
        e.bezierCurveTo(a * 42, a * 40, a * 45, a * 40, a * 50, a * 41);
        e.bezierCurveTo(a * 85, a * 36, a * 98, a * 37, a * 116, a * 42);
        e.bezierCurveTo(a * 132, a * 39, a * 132, a * 39, a * 133, a * 56);
        e.bezierCurveTo(a * 136, a * 73, a * 136, a * 84, a * 132, a * 106);
        e.bezierCurveTo(a * 47, a * 113, a * 85.5, a * 106, a * 39, a * 106);
        e.bezierCurveTo(a * 32, a * 81, a * 38, a * 60, a * 42, a * 55);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 28, a * 24);
        e.rotate(0);
        xt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143, a * 23);
        e.rotate(0);
        xt(e, a * -14, a * -14, a * 28, a * 28, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 80);
        e.bezierCurveTo(a * 73, a * 78, a * 84, a * 74, a * 100, a * 64);
        e.bezierCurveTo(a * 111, a * 57, a * 125, a * 67, a * 108, a * 84);
        e.bezierCurveTo(a * 96, a * 95, a * 86, a * 96, a * 70, a * 88);
        e.bezierCurveTo(a * 62.5, a * 84, a * 62.5, a * 84, a * 55, a * 80);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        wt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        wt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        xt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        xt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        return d;
    }
    function gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 200;
        d.height = a * 200;
        e.save();
        e.translate(a * 112, a * 158);
        xt(e, a * -86.5, a * -86, a * 150, a * 35, a * 20);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 170, a * 100);
        xt(e, a * -86.5, a * -86, a * 35, a * 150, a * 20);
        e.restore();
        wt(e, c[0]);
        return d;
    }
    function hu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 169;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17, a * 112);
        e.bezierCurveTo(a * 14, a * 146, a * 27, a * 152, a * 37, a * 149);
        e.bezierCurveTo(a * 78, a * 155, a * 128, a * 150, a * 146, a * 150);
        e.bezierCurveTo(a * 158, a * 144, a * 158, a * 121, a * 153, a * 114);
        e.closePath();
        wt(e, c[8], c[9], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 127, a * 111);
        e.bezierCurveTo(a * 133, a * 136, a * 115, a * 149, a * 88, a * 150);
        e.bezierCurveTo(a * 119.5, a * 151, a * 119.5, a * 151, a * 151, a * 152);
        e.bezierCurveTo(a * 159, a * 136, a * 155, a * 126, a * 154, a * 113);
        e.closePath();
        wt(e, c[9]);
        e.globalAlpha = 0.5;
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 15, a * 117);
        e.bezierCurveTo(a * 34, a * 109, a * 61, a * 106, a * 94, a * 109);
        e.bezierCurveTo(a * 126, a * 110, a * 142, a * 113, a * 154, a * 119);
        e.bezierCurveTo(a * 154, a * 123, a * 154, a * 123, a * 154, a * 127);
        e.bezierCurveTo(a * 127, a * 118, a * 15, a * 122, a * 18, a * 129);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 127);
        e.bezierCurveTo(a * 13, a * 117, a * 12, a * 109, a * 15, a * 103);
        e.bezierCurveTo(a * 16, a * 95, a * 21, a * 92, a * 60, a * 93);
        e.bezierCurveTo(a * 91, a * 93, a * 118, a * 93, a * 143, a * 96);
        e.bezierCurveTo(a * 151, a * 96, a * 155, a * 99, a * 156, a * 112);
        e.bezierCurveTo(a * 157, a * 124, a * 157, a * 127, a * 156, a * 128);
        e.bezierCurveTo(a * 138, a * 112, a * 100, a * 118, a * 84, a * 118);
        e.bezierCurveTo(a * 28, a * 118, a * 20, a * 120, a * 16, a * 127);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.save();
        e.translate(a * 27.5, a * 138.5);
        xt(e, a * -13.5, a * -14.5, a * 27, a * 29, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        e.save();
        e.translate(a * 143.5, a * 137);
        xt(e, a * -13.5, a * -14, a * 27, a * 28, a * 4);
        e.restore();
        wt(e, c[1], c[2], a * 5);
        return d;
    }
    function iu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 106;
        d.height = a * 681;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        xt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 395);
        e.rotate(0);
        xt(e, a * -11.5, a * -226, a * 23, a * 452, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 588);
        e.bezierCurveTo(a * 47, a * 596, a * 61, a * 594, a * 69, a * 588);
        e.bezierCurveTo(a * 79, a * 615, a * 78, a * 632, a * 59, a * 643);
        e.bezierCurveTo(a * 41, a * 650, a * 27, a * 632, a * 30, a * 610);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 135);
        e.bezierCurveTo(a * 61.5, a * 142, a * 61.5, a * 142, a * 71, a * 149);
        e.bezierCurveTo(a * 69.5, a * 166, a * 69.5, a * 166, a * 68, a * 183);
        e.bezierCurveTo(a * 60.5, a * 187.5, a * 60.5, a * 187.5, a * 53, a * 192);
        e.bezierCurveTo(a * 45, a * 187.5, a * 45, a * 187.5, a * 37, a * 183);
        e.bezierCurveTo(a * 35.5, a * 167, a * 35.5, a * 167, a * 34, a * 151);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 150);
        e.bezierCurveTo(a * 63, a * 164, a * 63, a * 164, a * 62, a * 178);
        e.bezierCurveTo(a * 58, a * 181, a * 58, a * 181, a * 54, a * 184);
        e.bezierCurveTo(a * 48.5, a * 181.5, a * 48.5, a * 181.5, a * 43, a * 179);
        e.bezierCurveTo(a * 42, a * 164.5, a * 42, a * 164.5, a * 41, a * 150);
        e.bezierCurveTo(a * 46, a * 152.5, a * 46, a * 152.5, a * 51, a * 155);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 39);
        e.bezierCurveTo(a * 65.5, a * 82, a * 65.5, a * 82, a * 79, a * 125);
        e.bezierCurveTo(a * 66, a * 137.5, a * 66, a * 137.5, a * 53, a * 150);
        e.bezierCurveTo(a * 39, a * 138, a * 39, a * 138, a * 25, a * 126);
        e.closePath();
        wt(e, c[6], c[7], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 64);
        e.bezierCurveTo(a * 60, a * 92.5, a * 60, a * 92.5, a * 68, a * 121);
        e.bezierCurveTo(a * 61, a * 127.5, a * 61, a * 127.5, a * 54, a * 134);
        e.bezierCurveTo(a * 46.5, a * 127.5, a * 46.5, a * 127.5, a * 39, a * 121);
        e.closePath();
        wt(e, c[8]);
        return d;
    }
    function ju(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 43;
        d.height = a * 209;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 21, a * 102.5);
        xt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        wt(e, c[0]);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.translate(0, a * 10);
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 21, a * 102.5);
        xt(e, a * -4, a * -76.5, a * 8, a * 163, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 10);
        e.bezierCurveTo(a * 25, a * 25.5, a * 25, a * 25.5, a * 30, a * 41);
        e.bezierCurveTo(a * 25.5, a * 38.5, a * 25.5, a * 38.5, a * 21, a * 36);
        e.bezierCurveTo(a * 16, a * 38.5, a * 16, a * 38.5, a * 11, a * 41);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 1);
        e.bezierCurveTo(a * 28, a * 18, a * 28, a * 18, a * 35, a * 35);
        e.bezierCurveTo(a * 28.5, a * 32, a * 28.5, a * 32, a * 22, a * 29);
        e.bezierCurveTo(a * 14.5, a * 32.5, a * 14.5, a * 32.5, a * 7, a * 36);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.translate(0, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 14, a * 146);
        e.bezierCurveTo(a * 21, a * 146, a * 21, a * 146, a * 28, a * 146);
        e.bezierCurveTo(a * 27.5, a * 147.5, a * 27.5, a * 147.5, a * 27, a * 149);
        e.bezierCurveTo(a * 27, a * 160, a * 27, a * 160, a * 27, a * 171);
        e.bezierCurveTo(a * 27.5, a * 171.5, a * 27.5, a * 171.5, a * 28, a * 172);
        e.bezierCurveTo(a * 21, a * 172, a * 21, a * 172, a * 14, a * 172);
        e.bezierCurveTo(a * 14, a * 171.5, a * 14, a * 171.5, a * 14, a * 171);
        e.bezierCurveTo(a * 14.5, a * 171.5, a * 14.5, a * 171.5, a * 15, a * 172);
        e.bezierCurveTo(a * 15, a * 160.5, a * 15, a * 160.5, a * 15, a * 149);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 21, a * 6);
        e.bezierCurveTo(a * 26.5, a * 18.5, a * 26.5, a * 18.5, a * 32, a * 31);
        e.bezierCurveTo(a * 27, a * 29, a * 27, a * 29, a * 22, a * 27);
        e.closePath();
        wt(e, c[8]);
        return d;
    }
    function ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 100;
        d.height = a * 648;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        xt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 43);
        e.bezierCurveTo(a * 61, a * 70, a * 61, a * 70, a * 73, a * 97);
        e.bezierCurveTo(a * 66, a * 116, a * 43, a * 122, a * 26, a * 99);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 50.5, a * 349.5);
        xt(e, a * -13.5, a * -249.5, a * 27, a * 499, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 538);
        e.bezierCurveTo(a * 49.5, a * 538, a * 49.5, a * 538, a * 63, a * 538);
        e.bezierCurveTo(a * 63.5, a * 568, a * 63.5, a * 568, a * 64, a * 598);
        e.bezierCurveTo(a * 50, a * 598, a * 50, a * 598, a * 36, a * 598);
        e.bezierCurveTo(a * 36, a * 568.5, a * 36, a * 568.5, a * 36, a * 539);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 554);
        e.bezierCurveTo(a * 45, a * 561, a * 56, a * 558, a * 63, a * 554);
        e.closePath();
        wt(e, undefined, c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 569);
        e.bezierCurveTo(a * 44, a * 576, a * 58, a * 574, a * 68, a * 569);
        e.bezierCurveTo(a * 68, a * 584, a * 68, a * 584, a * 68, a * 599);
        e.bezierCurveTo(a * 68, a * 608, a * 65, a * 618, a * 49, a * 617);
        e.bezierCurveTo(a * 34, a * 617, a * 32, a * 610, a * 32, a * 598);
        e.closePath();
        wt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 581);
        e.bezierCurveTo(a * 48, a * 584, a * 55, a * 583, a * 60, a * 581);
        e.bezierCurveTo(a * 60, a * 589.5, a * 60, a * 589.5, a * 60, a * 598);
        e.bezierCurveTo(a * 60, a * 604, a * 59, a * 609, a * 48, a * 608);
        e.bezierCurveTo(a * 40, a * 607, a * 40, a * 606, a * 41, a * 581);
        e.closePath();
        wt(e, c[7]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 106);
        e.bezierCurveTo(a * 31, a * 124.5, a * 31, a * 124.5, a * 31, a * 143);
        e.bezierCurveTo(a * 31, a * 163, a * 38, a * 169, a * 48, a * 168);
        e.bezierCurveTo(a * 57, a * 168, a * 67, a * 165, a * 67, a * 148);
        e.bezierCurveTo(a * 67, a * 123.5, a * 67, a * 123.5, a * 67, a * 99);
        e.closePath();
        wt(e, c[5], c[6], a * 8);
        e.save();
        e.translate(a * -46, a * -50);
        e.scale(2, 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 80);
        e.bezierCurveTo(a * 51, a * 89.5, a * 51, a * 89.5, a * 51, a * 99);
        e.bezierCurveTo(a * 49, a * 103, a * 46, a * 105, a * 44, a * 99);
        e.bezierCurveTo(a * 44, a * 88.5, a * 44, a * 88.5, a * 44, a * 78);
        e.closePath();
        wt(e, c[8]);
        e.restore();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 27);
        e.bezierCurveTo(a * 64, a * 62.5, a * 64, a * 62.5, a * 79, a * 98);
        e.bezierCurveTo(a * 74, a * 113, a * 63, a * 121, a * 50, a * 122);
        e.bezierCurveTo(a * 35, a * 123, a * 22, a * 109, a * 20, a * 98);
        e.closePath();
        wt(e, c[8], c[9], a * 8);
        e.scale(2, 2);
        e.translate(a * -23, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 69);
        e.bezierCurveTo(a * 50, a * 76, a * 43, a * 75, a * 38, a * 69);
        e.bezierCurveTo(a * 43, a * 57, a * 43, a * 57, a * 48, a * 45);
        e.closePath();
        wt(e, c[10]);
        return d;
    }
    function lu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 501;
        d.height = a * 309;
        e.translate(0, a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 184);
        e.bezierCurveTo(a * 169, a * 196, a * 194, a * 198, a * 227, a * 198);
        e.bezierCurveTo(a * 235, a * 222, a * 236, a * 223, a * 241, a * 226);
        e.bezierCurveTo(a * 245, a * 228, a * 257, a * 228, a * 263, a * 226);
        e.bezierCurveTo(a * 267, a * 225, a * 270, a * 211, a * 275, a * 198);
        e.bezierCurveTo(a * 332, a * 194, a * 347, a * 192, a * 372, a * 188);
        e.bezierCurveTo(a * 366, a * 174.5, a * 366, a * 174.5, a * 360, a * 161);
        e.bezierCurveTo(a * 253.5, a * 162, a * 253.5, a * 162, a * 147, a * 163);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 116);
        e.bezierCurveTo(a * 90, a * 101, a * 96, a * 89, a * 106, a * 83);
        e.bezierCurveTo(a * 86, a * 79, a * 86, a * 52, a * 93, a * 38);
        e.bezierCurveTo(a * 99, a * 51, a * 107, a * 57, a * 122, a * 63);
        e.bezierCurveTo(a * 130, a * 53, a * 141, a * 46, a * 161, a * 46);
        e.bezierCurveTo(a * 157, a * 31, a * 158, a * 20, a * 169, a * 6);
        e.bezierCurveTo(a * 171, a * 24, a * 186, a * 33, a * 198, a * 45);
        e.bezierCurveTo(a * 252, a * 45, a * 252, a * 45, a * 306, a * 45);
        e.bezierCurveTo(a * 323, a * 33, a * 332, a * 21, a * 335, a * 7);
        e.bezierCurveTo(a * 349, a * 21, a * 347, a * 36, a * 345, a * 46);
        e.bezierCurveTo(a * 364, a * 46, a * 369, a * 48, a * 377, a * 63);
        e.bezierCurveTo(a * 398, a * 58, a * 403, a * 49, a * 409, a * 40);
        e.bezierCurveTo(a * 419, a * 57, a * 411, a * 79, a * 398, a * 85);
        e.bezierCurveTo(a * 405, a * 100, a * 405, a * 106, a * 401, a * 118);
        e.bezierCurveTo(a * 332.5, a * 128.5, a * 332.5, a * 128.5, a * 264, a * 139);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 122, a * 191);
        e.bezierCurveTo(a * 123, a * 237, a * 135, a * 245, a * 153, a * 259);
        e.bezierCurveTo(a * 167, a * 269, a * 158, a * 281, a * 118, a * 276);
        e.bezierCurveTo(a * 104, a * 273, a * 98, a * 268, a * 93, a * 242);
        e.bezierCurveTo(a * 89, a * 220, a * 92, a * 201, a * 102, a * 179);
        e.closePath();
        wt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 403, a * 182);
        e.bezierCurveTo(a * 414, a * 215, a * 412, a * 232, a * 403, a * 260);
        e.bezierCurveTo(a * 395, a * 274, a * 375, a * 272, a * 356, a * 270);
        e.bezierCurveTo(a * 345, a * 268, a * 339, a * 262, a * 354, a * 252);
        e.bezierCurveTo(a * 370, a * 242, a * 380, a * 225, a * 384, a * 184);
        e.closePath();
        wt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 155, a * 157);
        e.bezierCurveTo(a * 146, a * 189, a * 137, a * 198, a * 114, a * 219);
        e.bezierCurveTo(a * 104, a * 212, a * 98, a * 203, a * 89, a * 189);
        e.bezierCurveTo(a * 82, a * 178, a * 91, a * 164, a * 93, a * 136);
        e.closePath();
        wt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 347, a * 162);
        e.bezierCurveTo(a * 357, a * 195, a * 376, a * 209, a * 387, a * 217);
        e.bezierCurveTo(a * 409, a * 201, a * 420, a * 181, a * 416, a * 166);
        e.bezierCurveTo(a * 410, a * 150, a * 412, a * 149, a * 408, a * 130);
        e.closePath();
        wt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 134);
        e.bezierCurveTo(a * 79, a * 102, a * 92, a * 84, a * 108, a * 92);
        e.bezierCurveTo(a * 149, a * 108, a * 184, a * 111, a * 242, a * 111);
        e.bezierCurveTo(a * 294, a * 108, a * 341, a * 105, a * 386, a * 98);
        e.bezierCurveTo(a * 412, a * 91, a * 417, a * 86, a * 415, a * 133);
        e.bezierCurveTo(a * 413, a * 160, a * 413, a * 160, a * 368, a * 174);
        e.bezierCurveTo(a * 308, a * 184, a * 291, a * 185, a * 270, a * 186);
        e.bezierCurveTo(a * 264, a * 206, a * 262, a * 215, a * 253, a * 215);
        e.bezierCurveTo(a * 239, a * 217, a * 239, a * 211, a * 231, a * 186);
        e.bezierCurveTo(a * 178, a * 184, a * 156, a * 179, a * 112, a * 162);
        e.bezierCurveTo(a * 87, a * 151, a * 90, a * 144, a * 87, a * 137);
        e.closePath();
        wt(e, c[4], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 63, a * 98);
        e.bezierCurveTo(a * 84, a * 121, a * 109, a * 102, a * 124, a * 117);
        e.bezierCurveTo(a * 138, a * 136, a * 123, a * 165, a * 94, a * 150);
        e.bezierCurveTo(a * 66, a * 131, a * 64, a * 115, a * 63, a * 99);
        e.closePath();
        wt(e, c[3], c[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 449, a * 97);
        e.bezierCurveTo(a * 446, a * 143, a * 415, a * 151, a * 402, a * 155);
        e.bezierCurveTo(a * 386, a * 157, a * 373, a * 133, a * 391, a * 116);
        e.bezierCurveTo(a * 402, a * 106, a * 432, a * 124, a * 449, a * 97);
        e.closePath();
        wt(e, c[3], c[2], a * 10);
        return d;
    }
    function mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 135;
        d.height = a * 120;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 3.5, a * 55.25);
        e.bezierCurveTo(a * 3.5, a * 114.25, a * 2.5, a * 109.25, a * 3.5, a * 112.25);
        e.bezierCurveTo(a * 5.5, a * 119.25, a * 8.5, a * 119.25, a * 11.5, a * 119.25);
        e.bezierCurveTo(a * 15.5, a * 114.25, a * 13.5, a * 95.25, a * 14.5, a * 82.25);
        e.closePath();
        wt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6.5, a * 43.25);
        e.bezierCurveTo(a * 3.5, a * 27.25, a * 7.5, a * 20.25, a * 25.5, a * 11.25);
        e.bezierCurveTo(a * 45.5, a * -0.75, a * 73.5, a * 1.25, a * 107.5, a * 10.25);
        e.bezierCurveTo(a * 131.5, a * 21.25, a * 125.5, a * 34.25, a * 125.5, a * 36.25);
        e.closePath();
        wt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 120.5, a * 62.25);
        e.bezierCurveTo(a * 121.5, a * 95.25, a * 120.5, a * 80.25, a * 120.5, a * 100.25);
        e.bezierCurveTo(a * 118.5, a * 119.25, a * 123.5, a * 118.25, a * 129.5, a * 113.25);
        e.bezierCurveTo(a * 133.5, a * 107.25, a * 130.5, a * 97.25, a * 130.5, a * 87.25);
        e.bezierCurveTo(a * 129.5, a * 56.25, a * 130, a * 70.75, a * 129.5, a * 54.25);
        e.closePath();
        wt(e, c[0], c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.5, a * 27);
        e.bezierCurveTo(a * 48.5, a * 5, a * 93.5, a * 14, a * 118.5, a * 26);
        e.bezierCurveTo(a * 132.5, a * 35, a * 133.5, a * 52, a * 132.5, a * 68);
        e.bezierCurveTo(a * 125.5, a * 87, a * 116.5, a * 84, a * 96.5, a * 75);
        e.bezierCurveTo(a * 60.5, a * 66, a * 52.5, a * 74, a * 37.5, a * 78);
        e.bezierCurveTo(a * 2.5, a * 86, a * 3.5, a * 78, a * 1.5, a * 61);
        e.bezierCurveTo(a * 1.5, a * 37, a * 9.5, a * 32, a * 15.5, a * 28);
        e.closePath();
        wt(e, c[2], c[3], a * 7);
        return d;
    }
    function nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 626;
        e.translate(a * 20, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 129);
        e.bezierCurveTo(a * 32, a * 135, a * 48, a * 136, a * 53, a * 129);
        e.bezierCurveTo(a * 56, a * 97, a * 53, a * 82, a * 52, a * 64);
        e.bezierCurveTo(a * 49, a * 33, a * 44, a * 27, a * 41, a * 21);
        e.bezierCurveTo(a * 31, a * 40, a * 28, a * 84, a * 27, a * 127);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55, a * 565);
        e.bezierCurveTo(a * 56, a * 586, a * 53, a * 591, a * 40, a * 592);
        e.bezierCurveTo(a * 28, a * 591, a * 27, a * 583, a * 28, a * 557);
        e.bezierCurveTo(a * 27.5, a * 346, a * 27.5, a * 346, a * 27, a * 135);
        e.bezierCurveTo(a * 26, a * 74, a * 36, a * 26, a * 41, a * 15);
        e.bezierCurveTo(a * 54, a * 51, a * 54, a * 81, a * 55, a * 128);
        e.closePath();
        wt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 475);
        e.bezierCurveTo(a * 38, a * 482, a * 48, a * 480, a * 54, a * 474);
        e.bezierCurveTo(a * 54, a * 509.5, a * 54, a * 509.5, a * 54, a * 545);
        e.bezierCurveTo(a * 46, a * 554, a * 36, a * 552, a * 28, a * 545);
        e.closePath();
        wt(e, c[4], c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 496);
        e.bezierCurveTo(a * 39, a * 506, a * 49, a * 503, a * 54, a * 496);
        wt(e, Oo, c[5], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 521);
        e.bezierCurveTo(a * 41, a * 529, a * 49, a * 524, a * 54, a * 520);
        wt(e, undefined, c[5], a * 8);
        return d;
    }
    function ou(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 90;
        d.height = a * 98;
        e.translate(0, a * 4);
        if ($s === 0) {
            e.globalAlpha = b ? 0.5 : 1;
            e.save();
            e.translate(a * 44, a * 50);
            e.rotate(0.2);
            Bt(e, 9, a * 41, a * 10);
            e.restore();
            wt(e, c[0]);
        }
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.2);
        Bt(e, 9, a * 41, a * 10);
        wt(e, c[1], c[2], a * 4);
        e.rotate(-0.32);
        Bt(e, 9, a * 32, a * 10);
        wt(e, c[3], c[4], a * 4);
        e.rotate(0.68);
        Bt(e, 9, a * 23, a * 8);
        wt(e, c[5], c[6], a * 6);
        e.restore();
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -9, a * -25.5, a * 18, a * 51, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        e.save();
        e.translate(a * 45, a * 45);
        e.rotate(0);
        xt(e, a * -26, a * -9, a * 52, a * 18, a * 30);
        e.restore();
        wt(e, c[4], c[4], a * 2);
        zt(e, a * 45, a * 29, a * 7);
        wt(e, c[5]);
        zt(e, a * 45, a * 61, a * 7);
        wt(e, c[5]);
        zt(e, a * 28, a * 45, a * 7);
        wt(e, c[5]);
        zt(e, a * 62, a * 45, a * 7);
        wt(e, c[5]);
        return d;
    }
    const pu = 10;
    function qu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 260;
        d.globalAlpha = 0.5;
        zt(d, a * 126.5, a * 134, a * 119);
        wt(d, b[0]);
        d.globalAlpha = 1;
        zt(d, a * 126.5, a * 124, a * 119);
        wt(d, b[1], b[2], a * 4);
        zt(d, a * 126.5, a * 127, a * 100);
        wt(d, b[3]);
        d.globalAlpha = 0.5;
        zt(d, a * 126.5, a * 135, a * 81);
        wt(d, b[0]);
        d.globalAlpha = 1;
        zt(d, a * 126.5, a * 125, a * 84);
        wt(d, b[4], b[5], a * 4);
        zt(d, a * 126.5, a * 125, a * 61);
        wt(d, b[6], b[7], a * 4);
        d.globalAlpha = 0.5;
        zt(d, a * 126.5, a * 134, a * 40);
        wt(d, b[8]);
        d.globalAlpha = 1;
        zt(d, a * 126.5, a * 125, a * 40);
        wt(d, b[9]);
        return c;
    }
    function ru(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 100;
        c.height = a * 100;
        d.globalAlpha = 0.5;
        d.fillStyle = b[0];
        d.fillRect(0, 0, c.width, c.height);
        return c;
    }
    function su(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 149;
        c.height = a * 153;
        d.globalAlpha = 0.5;
        zt(d, a * 74.5, a * 85, a * 66);
        wt(d, b[0]);
        d.globalAlpha = 1;
        zt(d, a * 75.5, a * 72.5, a * 67);
        wt(d, b[1], b[2], a * 4);
        zt(d, a * 75.5, a * 73.5, a * 54);
        wt(d, b[3]);
        d.globalAlpha = 0.5;
        zt(d, a * 74.5, a * 80.5, a * 39);
        wt(d, b[4]);
        d.globalAlpha = 1;
        zt(d, a * 74.5, a * 74.5, a * 37);
        wt(d, b[5]);
        return c;
    }
    function tu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -200, a * -40);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 344, a * 18.40625);
        d.bezierCurveTo(a * 345, a * 361.40625, a * 344, a * 191.40625, a * 344, a * 364.40625);
        d.bezierCurveTo(a * 261, a * 275.40625, a * 274, a * 259.40625, a * 229, a * 213.40625);
        d.bezierCurveTo(a * 199, a * 187.40625, a * 222, a * 133.40625, a * 273, a * 100.40625);
        d.bezierCurveTo(a * 321, a * 71.40625, a * 327, a * 34.40625, a * 344, a * 18.40625);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 335, a * 38.072906494140625);
        d.bezierCurveTo(a * 307, a * 62.072906494140625, a * 291, a * 60.072906494140625, a * 262, a * 68.07290649414062);
        d.bezierCurveTo(a * 223, a * 80.07290649414062, a * 225, a * 111.07290649414062, a * 264, a * 139.07290649414062);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function uu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 69;
        d.height = a * 120;
        e.globalAlpha = b ? 0.5 : 1;
        e.save();
        e.translate(a * 30, a * 84);
        xt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 45);
        xt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 17);
        xt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 30, a * 31);
        xt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 36, a * 79.140625);
        xt(e, a * -6, a * -66.5, a * 8, a * 100, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 35, a * 40.140625);
        xt(e, a * -9.5, a * -6.5, a * 16, a * 13, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 35, a * 12.140625);
        xt(e, a * -7.5, a * -5.5, a * 12, a * 11, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 3);
        e.save();
        e.translate(a * 34.5, a * 26.140625);
        xt(e, a * -26, a * -14.5, a * 52, a * 29, a * 5);
        e.restore();
        wt(e, c[3], c[4], a * 3);
        return d;
    }
    function wu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 20, a * 20);
        xt(e, 0, 0, a * 400, a * 220, a * 30);
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        wt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        wt(e, c[3], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        wt(e, c[2], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        wt(e, c[3], c[1], a * 12);
        zt(e, a * 41, a * 30, a * 14.7648230602334);
        wt(e, c[3], c[1], a * 12);
        zt(e, a * 369, a * 30, a * 15.556349186104045);
        wt(e, c[3], c[1], a * 12);
        zt(e, a * 364, a * 190, a * 15.620499351813308);
        wt(e, c[3], c[1], a * 12);
        zt(e, a * 41, a * 186, a * 15.556349186104045);
        wt(e, c[3], c[1], a * 12);
        return d;
    }
    function xu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        var g = b * 170;
        var a = b * 172;
        var i = g / 2;
        var j = a / 2;
        e.width = g;
        e.height = a;
        f.translate(i, j + b * 7);
        f.globalAlpha = c ? 0.5 : 0;
        zt(f, 0, 0, b * 60);
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -7);
        f.save();
        for (var h = 0; h < 10; h++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Bt(f, 3, b * 20, b * 4);
            wt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.restore();
        zt(f, 0, 0, b * 60);
        wt(f, d[3], d[4], b * 4);
        zt(f, 0, 0, b * 40);
        wt(f, d[5]);
        zt(f, 0, 0, b * 25);
        wt(f, d[6], d[7], b * 8);
        return e;
    }
    function yu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 139;
        d.height = a * 135;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 77);
        e.bezierCurveTo(a * 6, a * 41, a * 6, a * 33, a * 12, a * 27);
        e.bezierCurveTo(a * 27, a * 6, a * 28, a * 6, a * 37, a * 6);
        e.bezierCurveTo(a * 62, a * 3, a * 64, a * 5, a * 67, a * 13);
        e.bezierCurveTo(a * 80, a * 36, a * 73.5, a * 25, a * 80, a * 37);
        e.bezierCurveTo(a * 73.5, a * 54, a * 65, a * 74, a * 67, a * 71);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 37);
        e.bezierCurveTo(a * 105, a * 40, a * 113, a * 39, a * 117, a * 48);
        e.bezierCurveTo(a * 126, a * 70, a * 128, a * 72, a * 124, a * 80);
        e.bezierCurveTo(a * 112, a * 101, a * 110, a * 104, a * 99, a * 104);
        e.bezierCurveTo(a * 59, a * 100, a * 55, a * 99, a * 56, a * 99);
        e.bezierCurveTo(a * 47.5, a * 79, a * 45, a * 66, a * 39, a * 59);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 63);
        e.bezierCurveTo(a * 5, a * 99, a * 5, a * 101, a * 8, a * 103);
        e.bezierCurveTo(a * 19, a * 123, a * 22, a * 125, a * 28, a * 126);
        e.bezierCurveTo(a * 57, a * 127, a * 55, a * 127, a * 58, a * 120);
        e.bezierCurveTo(a * 82, a * 86, a * 83, a * 78, a * 82, a * 87);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 72.5, a * 52, a * 72.5, a * 52, a * 65, a * 66);
        e.bezierCurveTo(a * 47.5, a * 37, a * 47.5, a * 37, a * 30, a * 7);
        e.bezierCurveTo(a * 48, a * 4, a * 57, a * 4, a * 64, a * 10);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65, a * 65);
        e.bezierCurveTo(a * 125, a * 73, a * 95.5, a * 69, a * 126, a * 73);
        e.bezierCurveTo(a * 119, a * 98, a * 106, a * 104, a * 98, a * 103);
        e.bezierCurveTo(a * 84.5, a * 102, a * 84.5, a * 102, a * 71, a * 101);
        e.bezierCurveTo(a * 64, a * 86, a * 64, a * 86, a * 57, a * 70);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 64, a * 65, a * 46, a * 67, a * 65, a * 65);
        e.bezierCurveTo(a * 43.5, a * 94, a * 43.5, a * 94, a * 22, a * 123);
        e.bezierCurveTo(a * 8, a * 103, a * 8, a * 103, a * 9, a * 103);
        e.bezierCurveTo(a * 5, a * 98, a * 11, a * 89, a * 26, a * 70);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 69);
        e.bezierCurveTo(a * 65, a * 60, a * 45, a * 65, a * 64, a * 60);
        e.bezierCurveTo(a * 63, a * 65, a * 63, a * 65, a * 62, a * 70);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 38);
        e.bezierCurveTo(a * 68, a * 70, a * 75, a * 53, a * 70, a * 68);
        e.bezierCurveTo(a * 65, a * 67, a * 65, a * 67, a * 60, a * 65);
        e.closePath();
        wt(e, c[2]);
        return d;
    }
    function zu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.save();
        f.translate(b * 85, b * 88);
        f.rotate(1.4);
        Bt(f, 7, b * 60, b * 10);
        f.restore();
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 80);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Bt(f, 3, b * 21, b * 4);
            wt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1.4);
        Bt(f, 7, b * 60, b * 10);
        wt(f, d[3], d[4], b * 4);
        f.rotate(0.64);
        Bt(f, 7, b * 40, b * 10);
        wt(f, d[5], d[6], b * 4);
        f.rotate(0.12);
        Bt(f, 7, b * 23, b * 5);
        f.restore();
        wt(f, d[7]);
        return e;
    }
    function Au(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 260;
        e.translate(a * 10, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 41, a * 30, a * 14.7648230602334);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 369, a * 30, a * 15.556349186104045);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 364, a * 190, a * 15.620499351813308);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 41, a * 186, a * 15.556349186104045);
            wt(e, b[3], b[3], a * 32);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 9, a * 5);
            e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
            e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
            e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
            e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
            e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
            e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
            e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
            e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
            e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
            e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
            e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 5, a * 70);
            e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
            e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
            e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
            e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
            e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
            e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
            e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
            e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
            e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 19, a * 158);
            e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
            e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
            e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
            e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
            e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
            e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
            e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 183);
            e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
            e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
            e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
            e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
            e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
            e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
            e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
            e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
            e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
            e.closePath();
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 41, a * 30, a * 14.7648230602334);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 369, a * 30, a * 15.556349186104045);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 364, a * 190, a * 15.620499351813308);
            wt(e, b[3], b[3], a * 32);
            zt(e, a * 41, a * 186, a * 15.556349186104045);
            wt(e, b[3], b[3], a * 32);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9, a * 5);
        e.bezierCurveTo(a * 381, a * 2, a * 197, a * 4.5, a * 385, a * 4);
        e.bezierCurveTo(a * 397, a * 4, a * 401, a * 4, a * 399, a * 23);
        e.bezierCurveTo(a * 367, a * 27, a * 367, a * 27, a * 335, a * 31);
        e.bezierCurveTo(a * 366.5, a * 33.5, a * 366.5, a * 33.5, a * 398, a * 36);
        e.bezierCurveTo(a * 398, a * 41.5, a * 398, a * 41.5, a * 398, a * 47);
        e.bezierCurveTo(a * 398, a * 56, a * 399, a * 56, a * 386, a * 56);
        e.bezierCurveTo(a * 200.5, a * 56.5, a * 200.5, a * 56.5, a * 15, a * 57);
        e.bezierCurveTo(a * 2, a * 55, a * 4, a * 52, a * 4, a * 43);
        e.bezierCurveTo(a * 4, a * 30.5, a * 4, a * 30.5, a * 4, a * 18);
        e.bezierCurveTo(a * 16, a * 18.5, a * 16, a * 18.5, a * 28, a * 19);
        e.bezierCurveTo(a * 18.5, a * 12, a * 18.5, a * 12, a * 9, a * 5);
        e.closePath();
        wt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 70);
        e.bezierCurveTo(a * 5, a * 58, a * 5, a * 55, a * 17, a * 57);
        e.bezierCurveTo(a * 203, a * 57, a * 203, a * 57, a * 389, a * 57);
        e.bezierCurveTo(a * 400, a * 57, a * 400, a * 59, a * 400, a * 69);
        e.bezierCurveTo(a * 400.5, a * 83.5, a * 400.5, a * 83.5, a * 401, a * 98);
        e.bezierCurveTo(a * 402, a * 108, a * 401, a * 108, a * 388, a * 108);
        e.bezierCurveTo(a * 201.5, a * 108, a * 201.5, a * 108, a * 15, a * 108);
        e.bezierCurveTo(a * 1, a * 106, a * 5, a * 106, a * 5, a * 87);
        e.bezierCurveTo(a * 33, a * 84.5, a * 33, a * 84.5, a * 61, a * 82);
        e.bezierCurveTo(a * 33.5, a * 76.5, a * 33.5, a * 76.5, a * 6, a * 71);
        e.closePath();
        wt(e, b[2], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19, a * 158);
        e.bezierCurveTo(a * 2, a * 159, a * 4, a * 156, a * 5, a * 118);
        e.bezierCurveTo(a * 4, a * 110, a * 6, a * 107, a * 26, a * 109);
        e.bezierCurveTo(a * 206.5, a * 109, a * 206.5, a * 109, a * 387, a * 109);
        e.bezierCurveTo(a * 400, a * 108, a * 400, a * 108, a * 398, a * 127);
        e.bezierCurveTo(a * 384.5, a * 130, a * 384.5, a * 130, a * 371, a * 133);
        e.bezierCurveTo(a * 385.5, a * 138, a * 385.5, a * 138, a * 400, a * 143);
        e.bezierCurveTo(a * 402, a * 156, a * 402, a * 162, a * 385, a * 160);
        e.closePath();
        wt(e, b[1], b[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 183);
        e.bezierCurveTo(a * 1, a * 163, a * 4, a * 158, a * 28, a * 161);
        e.bezierCurveTo(a * 207.5, a * 161, a * 207.5, a * 161, a * 387, a * 161);
        e.bezierCurveTo(a * 401, a * 159, a * 400, a * 164, a * 400, a * 177);
        e.bezierCurveTo(a * 364.5, a * 184, a * 364.5, a * 184, a * 329, a * 191);
        e.bezierCurveTo(a * 364.5, a * 192.5, a * 364.5, a * 192.5, a * 400, a * 194);
        e.bezierCurveTo(a * 403, a * 209, a * 401, a * 214, a * 385, a * 213);
        e.bezierCurveTo(a * 201.5, a * 213, a * 201.5, a * 213, a * 18, a * 213);
        e.bezierCurveTo(a * 3, a * 213, a * 2, a * 213, a * 4, a * 198);
        e.bezierCurveTo(a * 12.5, a * 193, a * 12.5, a * 193, a * 21, a * 188);
        e.closePath();
        wt(e, b[2], b[0], a * 12);
        zt(e, a * 41, a * 30, a * 14.7648230602334);
        wt(e, b[2], b[0], a * 12);
        zt(e, a * 369, a * 30, a * 15.556349186104045);
        wt(e, b[2], b[0], a * 12);
        zt(e, a * 364, a * 190, a * 15.620499351813308);
        wt(e, b[2], b[0], a * 12);
        zt(e, a * 41, a * 186, a * 15.556349186104045);
        wt(e, b[2], b[0], a * 12);
        return d;
    }
    function Bu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 3);
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        Bt(f, 7, b * 60, b * 10);
        f.restore();
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Bt(f, 3, b * 21, b * 4);
            wt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(1);
        Bt(f, 8, b * 60, b * 10);
        wt(f, d[3], d[4], b * 4);
        f.rotate(0.56);
        Bt(f, 8, b * 40, b * 10);
        wt(f, d[5], d[6], b * 4);
        f.rotate(0.28);
        Bt(f, 8, b * 28, b * 8);
        wt(f, d[7]);
        f.restore();
        return e;
    }
    function Cu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 300;
        d.translate(a * -80, -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 200.5, a * 14.953125);
        d.bezierCurveTo(a * 203, a * 171.953125, a * 203, a * 171.953125, a * 205.5, a * 328.953125);
        d.bezierCurveTo(a * 188.5, a * 257.953125, a * 164.5, a * 216.953125, a * 166.5, a * 176.953125);
        d.bezierCurveTo(a * 168.5, a * 133.953125, a * 198.5, a * 98.953125, a * 200.5, a * 14.953125);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function Du(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        if (c == 0) {
            e.width = a * 566;
            e.height = a * 429;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 312.625, a * 39.046875);
            d.bezierCurveTo(a * 456.625, a * 60.046875, a * 521.625, a * 134.046875, a * 528.625, a * 199.046875);
            d.bezierCurveTo(a * 540.625, a * 298.046875, a * 491.625, a * 364.046875, a * 405.625, a * 394.046875);
            d.bezierCurveTo(a * 270.625, a * 429.046875, a * 182.625, a * 395.046875, a * 100.625, a * 344.046875);
            d.bezierCurveTo(a * 15.625, a * 283.046875, a * 20.625, a * 195.046875, a * 33.625, a * 158.046875);
            d.bezierCurveTo(a * 56.625, a * 80.046875, a * 102.625, a * 46.046875, a * 183.625, a * 33.046875);
            d.bezierCurveTo(a * 225.625, a * 25.046875, a * 270.625, a * 30.046875, a * 312.625, a * 39.046875);
            d.closePath();
            wt(d, b[0]);
        } else if (c == 1) {
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 511;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 141.625, a * 49.296875);
            d.bezierCurveTo(a * 225.625, a * 10.296875, a * 320.625, a * 16.296875, a * 390.625, a * 39.296875);
            d.bezierCurveTo(a * 476.625, a * 71.296875, a * 483.625, a * 142.296875, a * 486.625, a * 197.296875);
            d.bezierCurveTo(a * 491.625, a * 289.296875, a * 462.625, a * 317.296875, a * 417.625, a * 351.296875);
            d.bezierCurveTo(a * 367.625, a * 385.296875, a * 313.625, a * 404.296875, a * 218.625, a * 395.296875);
            d.bezierCurveTo(a * 108.625, a * 381.296875, a * 81.625, a * 350.296875, a * 52.625, a * 305.296875);
            d.bezierCurveTo(a * 16.625, a * 244.296875, a * 23.625, a * 171.296875, a * 37.625, a * 145.296875);
            d.bezierCurveTo(a * 65.625, a * 84.296875, a * 97.625, a * 74.296875, a * 141.625, a * 49.296875);
            d.closePath();
            wt(d, b[0]);
        } else if (c == 2) {
            var e;
            d = (e = document.createElement("canvas")).getContext("2d");
            e.width = a * 504;
            e.height = a * 408;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 153.625, a * 46.296875);
            d.bezierCurveTo(a * 271.625, a * 17.296875, a * 345.625, a * 35.296875, a * 410.625, a * 71.296875);
            d.bezierCurveTo(a * 473.625, a * 109.296875, a * 478.625, a * 167.296875, a * 473.625, a * 205.296875);
            d.bezierCurveTo(a * 462.625, a * 295.296875, a * 438.625, a * 316.296875, a * 388.625, a * 345.296875);
            d.bezierCurveTo(a * 331.625, a * 374.296875, a * 273.625, a * 392.296875, a * 180.625, a * 387.296875);
            d.bezierCurveTo(a * 111.625, a * 380.296875, a * 86.625, a * 360.296875, a * 51.625, a * 309.296875);
            d.bezierCurveTo(a * 23.625, a * 267.296875, a * 25.625, a * 226.296875, a * 27.625, a * 175.296875);
            d.bezierCurveTo(a * 37.625, a * 99.296875, a * 88.625, a * 57.296875, a * 153.625, a * 46.296875);
            d.closePath();
            wt(d, b[0]);
        }
        return e;
    }
    function Eu(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 170;
        e.height = b * 170;
        f.translate(0, b * 3);
        f.globalAlpha = c ? 0.5 : 1;
        f.save();
        f.translate(b * 85, b * 95);
        f.rotate(1.4);
        Bt(f, 7, b * 60, b * 10);
        f.restore();
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(b * 85, b * 82);
        for (var g = 0; g < 10; g++) {
            f.rotate(Math.PI / 5);
            f.save();
            f.translate(b * 65, 0);
            Bt(f, 3, b * 21, b * 4);
            wt(f, d[1], d[2], b * 4);
            f.restore();
        }
        f.save();
        f.translate(b * 0, b * 0);
        f.rotate(0.2);
        Bt(f, 9, b * 60, b * 10);
        wt(f, d[3], d[4], b * 4);
        f.rotate(-0.32);
        Bt(f, 9, b * 38, b * 10);
        wt(f, d[5], d[6], b * 4);
        f.rotate(0.68);
        Bt(f, 9, b * 20, b * 8);
        wt(f, d[7], d[8], b * 6);
        f.restore();
        return e;
    }
    function Fu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 151;
        d.height = a * 80;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 54);
        e.bezierCurveTo(a * 136, a * 18, a * 129, a * 18, a * 114, a * 13);
        e.bezierCurveTo(a * 51, a * 0, a * 36, a * 16, a * 34, a * 16);
        e.bezierCurveTo(a * 8, a * 28, a * 22, a * 56, a * 21, a * 57);
        e.closePath();
        wt(e, c[2], c[3], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 130, a * 40);
        e.bezierCurveTo(a * 132, a * 35, a * 132, a * 30, a * 132, a * 29);
        e.bezierCurveTo(a * 145, a * 38, a * 144, a * 43, a * 137, a * 54);
        e.closePath();
        wt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 20, a * 33);
        e.bezierCurveTo(a * 24, a * 44, a * 215, a * 39, a * 23, a * 44);
        e.bezierCurveTo(a * 19, a * 49, a * 19, a * 49, a * 15, a * 54);
        e.bezierCurveTo(a * 4, a * 43, a * 10, a * 35, a * 20, a * 32);
        e.closePath();
        wt(e, c[0], c[1], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 52);
        e.bezierCurveTo(a * 24, a * 31, a * 34, a * 25, a * 75, a * 23);
        e.bezierCurveTo(a * 130, a * 24, a * 129, a * 32, a * 134, a * 51);
        e.bezierCurveTo(a * 138, a * 70, a * 126, a * 72, a * 90, a * 73);
        e.bezierCurveTo(a * 18, a * 72, a * 15, a * 68, a * 18, a * 54);
        e.closePath();
        wt(e, c[0], c[1], 4);
        return d;
    }
    function Gu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 165;
        d.height = a * 123;
        e.save();
        e.translate(a * 81, a * 65);
        xt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 81, a * 58);
        xt(e, a * -78, a * -54.5, a * 156, a * 109, a * 20);
        e.restore();
        wt(e, c[1], c[2], 4);
        e.save();
        e.translate(a * 81, a * 58);
        xt(e, a * -69, a * -47, a * 138, a * 93, a * 15);
        e.restore();
        wt(e, c[3], c[4], 4);
        e.save();
        e.translate(a * 79, a * 54);
        xt(e, a * -34, a * -40, a * 68, a * 88, a * 13);
        e.restore();
        wt(e, ij, c[5], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 44, a * 13);
        e.bezierCurveTo(a * 43.5, a * 55, a * 43.5, a * 55, a * 43, a * 101);
        e.closePath();
        wt(e, undefined, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 13);
        e.bezierCurveTo(a * 115, a * 56, a * 115, a * 56, a * 115, a * 101);
        e.closePath();
        wt(e, Lk, c[6], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 6);
        e.bezierCurveTo(a * 35, a * 56, a * 36, a * 109, a * 35, a * 110);
        e.closePath();
        wt(e, undefined, c[7], 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 6);
        e.bezierCurveTo(a * 123, a * 56, a * 123, a * 56, a * 123, a * 110);
        e.closePath();
        wt(e, Aj, c[7], 4);
        e.save();
        e.translate(a * 79, a * 113);
        xt(e, a * -18, a * -2, a * 36, a * 4, a * 20);
        e.restore();
        wt(e, undefined, c[8], 4);
        e.save();
        e.translate(a * 75, a * 118);
        xt(e, a * -6, a * -2.5, a * 20, a * 5, a * 20);
        e.restore();
        wt(e, c[8]);
        return d;
    }
    function Hu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 173;
        c.height = a * 178;
        d.globalAlpha = 0.5;
        zt(d, a * 86.5, a * 98, a * 80);
        wt(d, b[0]);
        d.globalAlpha = 1;
        zt(d, a * 86.5, a * 89, a * 81);
        wt(d, b[1], b[2], a * 4);
        zt(d, a * 86.5, a * 86, a * 59);
        wt(d, b[3], b[4], a * 4);
        d.globalAlpha = 0.5;
        zt(d, a * 86.5, a * 95, a * 34);
        wt(d, b[0]);
        d.globalAlpha = 1;
        zt(d, a * 86.5, a * 89, a * 34);
        wt(d, b[5]);
        return c;
    }
    function Ju(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 450;
        f.height = b * 260;
        var a = wu(b * 1, true, d);
        g.drawImage(a, b * 0, b * 0);
        if (e == 1) {
            g.translate(b * 100, b * 0);
            zt(g, b * 113, b * 120, b * 66);
            wt(g, sr, d[4], b * 13);
            a = ud(b * 0.65, kg, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
            g.rotate(0.7);
            g.drawImage(a, b * 133, b * -64);
            g.rotate(-0.7);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            wt(g, es, d[4], b * 13);
        } else if (e == 2) {
            g.translate(b * 100, b * 0);
            zt(g, b * 113, b * 120, b * 66);
            wt(g, undefined, d[4], b * 13);
            g.translate(b * 30, b * 40);
            g.save();
            g.translate(b * 83.5, b * 66.5);
            xt(g, b * -40.5, b * -29.5, b * 81, b * 59, b * 15);
            g.restore();
            wt(g, "#dff2f7", "#187484", b * 7);
            zt(g, b * 22, b * 82, b * 12);
            wt(g, "#dff2f7", "#187484", b * 7);
            zt(g, b * 145, b * 82, b * 12);
            wt(g, "#dff2f7", "#187484", b * 7);
            a = Wd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 10, b * 85);
            a = Wd(b * 0.5, ft, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 50, b * 85);
            a = Wd(b * 0.5, true, ["#80500b", "#7c4908"]);
            g.drawImage(a, b * 90, b * 85);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 90, b * 105);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 125);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 50, b * 115);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 30, b * 100);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 80, b * 120);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 110, b * 125);
            a = Nd(b * 1, 0, ["#3d2a6e", "#8255b5"]);
            g.drawImage(a, b * 120, b * 105);
        } else if (e == 3) {
            g.translate(b * 100, b * 0);
            zt(g, b * 113, b * 120, b * 66);
            wt(g, undefined, d[4], b * 13);
            g.translate(b * 40, b * 50);
            g.save();
            g.translate(b * 71, b * 69);
            xt(g, b * -30, b * -42, b * 60, b * 84, b * 10);
            g.restore();
            wt(g, undefined, d[5], b * 4);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 42, b * 28);
            g.bezierCurveTo(b * 60, b * 31, b * 60, b * 31, b * 78, b * 34);
            g.bezierCurveTo(b * 82, b * 34, b * 84, b * 37, b * 83, b * 45);
            g.bezierCurveTo(b * 83, b * 80, b * 83, b * 80, b * 83, b * 115);
            g.bezierCurveTo(b * 83, b * 120, b * 80, b * 122, b * 73, b * 120);
            g.bezierCurveTo(b * 42, b * 111, b * 43, b * 109, b * 41, b * 102);
            g.bezierCurveTo(b * 41, b * 71, b * 41, b * 71, b * 41, b * 40);
            g.closePath();
            wt(g, d[5], d[5], b * 4);
            g.translate(b * -40, b * -50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 70, b * 70);
            g.bezierCurveTo(b * 113, b * 120.5, b * 113, b * 120.5, b * 156, b * 171);
            g.closePath();
            wt(g, undefined, d[4], b * 13);
        } else if (e == 4) {
            g.scale(1, 1);
            g.translate(b * 70, b * 50);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 23, b * 6);
            g.bezierCurveTo(b * 25.5, b * 56, b * 25.5, b * 56, b * 28, b * 106);
            wt(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 59, b * 10);
            g.bezierCurveTo(b * 61, b * 51.5, b * 61, b * 51.5, b * 63, b * 93);
            wt(g, Nn, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 7, b * 55);
            g.bezierCurveTo(b * 33.5, b * 55, b * 33.5, b * 55, b * 60, b * 55);
            wt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * 0);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 123, b * 16);
            g.bezierCurveTo(b * 103, b * 16.5, b * 103, b * 16.5, b * 83, b * 17);
            g.bezierCurveTo(b * 83.5, b * 61, b * 83.5, b * 61, b * 84, b * 105);
            g.bezierCurveTo(b * 106, b * 105, b * 106, b * 105, b * 128, b * 105);
            wt(g, undefined, d[5], b * 14);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 72, b * 63);
            g.bezierCurveTo(b * 88.5, b * 62.5, b * 88.5, b * 62.5, b * 105, b * 62);
            wt(g, Cq, d[5], b * 14);
            g.translate(b * 10, b * 10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 141, b * 8);
            g.bezierCurveTo(b * 143, b * 50, b * 143, b * 50, b * 145, b * 92);
            g.bezierCurveTo(b * 169, b * 88.5, b * 169, b * 88.5, b * 193, b * 85);
            wt(g, undefined, d[5], b * 14);
            g.translate(b * 10, b * -10);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 205, b * 124);
            g.bezierCurveTo(b * 205, b * 69, b * 205, b * 69, b * 205, b * 14);
            g.bezierCurveTo(b * 239, b * 15, b * 250, b * 37, b * 249, b * 49);
            g.bezierCurveTo(b * 251, b * 65, b * 242, b * 76, b * 206, b * 75);
            wt(g, undefined, d[5], b * 14);
        }
        return f;
    }
    function Ku(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 345;
        d.height = a * 250;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 58);
        e.bezierCurveTo(a * 100.5, a * 43, a * 100.5, a * 43, a * 96, a * 28);
        e.bezierCurveTo(a * 119.5, a * 33.5, a * 119.5, a * 33.5, a * 143, a * 39);
        e.bezierCurveTo(a * 170, a * 37, a * 177, a * 37, a * 188, a * 40);
        e.bezierCurveTo(a * 213, a * 33.5, a * 213, a * 33.5, a * 238, a * 27);
        e.bezierCurveTo(a * 231, a * 52, a * 234, a * 42.5, a * 230, a * 58);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 108, a * 51);
        e.bezierCurveTo(a * 91, a * 55, a * 85, a * 44, a * 86, a * 29);
        e.bezierCurveTo(a * 62, a * 50, a * 78, a * 69, a * 92, a * 75);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 249, a * 27);
        e.bezierCurveTo(a * 273, a * 49, a * 262, a * 68, a * 246, a * 77);
        e.bezierCurveTo(a * 231, a * 59, a * 236, a * 66.5, a * 226, a * 56);
        e.bezierCurveTo(a * 243, a * 53, a * 252, a * 43, a * 249, a * 28);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87, a * 78);
        e.bezierCurveTo(a * 87, a * 59, a * 98, a * 46, a * 127, a * 48);
        e.bezierCurveTo(a * 176, a * 48.5, a * 176, a * 48.5, a * 225, a * 49);
        e.bezierCurveTo(a * 243, a * 49, a * 253, a * 59, a * 253, a * 76);
        e.bezierCurveTo(a * 211, a * 85.5, a * 211, a * 85.5, a * 169, a * 95);
        e.closePath();
        wt(e, c[5], c[6], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 105);
        e.bezierCurveTo(a * 56, a * 92, a * 59, a * 86, a * 65, a * 73);
        e.bezierCurveTo(a * 62.5, a * 61.5, a * 62.5, a * 61.5, a * 60, a * 50);
        e.bezierCurveTo(a * 99.5, a * 64.5, a * 99.5, a * 64.5, a * 139, a * 79);
        e.bezierCurveTo(a * 164, a * 77, a * 177, a * 76, a * 203, a * 78);
        e.bezierCurveTo(a * 242, a * 63.5, a * 242, a * 63.5, a * 281, a * 49);
        e.bezierCurveTo(a * 279, a * 60.5, a * 279, a * 60.5, a * 277, a * 72);
        e.bezierCurveTo(a * 286, a * 88, a * 286, a * 96, a * 287, a * 104);
        e.bezierCurveTo(a * 228.5, a * 127, a * 228.5, a * 127, a * 170, a * 150);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 48, a * 130);
        e.bezierCurveTo(a * 61, a * 155, a * 63, a * 165, a * 56, a * 171);
        e.bezierCurveTo(a * 48, a * 177, a * 40, a * 171, a * 38, a * 178);
        e.bezierCurveTo(a * 33, a * 180, a * 37, a * 188, a * 47, a * 208);
        e.bezierCurveTo(a * 52, a * 221, a * 55, a * 222, a * 75, a * 229);
        e.bezierCurveTo(a * 91, a * 213, a * 98, a * 212, a * 112, a * 219);
        e.bezierCurveTo(a * 167, a * 225, a * 187, a * 224, a * 222, a * 220);
        e.bezierCurveTo(a * 244, a * 214, a * 247, a * 213, a * 263, a * 229);
        e.bezierCurveTo(a * 295, a * 220, a * 291, a * 215, a * 301, a * 194);
        e.bezierCurveTo(a * 308, a * 178, a * 309, a * 176, a * 302, a * 173);
        e.bezierCurveTo(a * 290, a * 177, a * 289, a * 177, a * 283, a * 169);
        e.bezierCurveTo(a * 279, a * 163, a * 279, a * 161, a * 290, a * 130);
        e.bezierCurveTo(a * 270, a * 127, a * 270, a * 127, a * 250, a * 124);
        e.bezierCurveTo(a * 209, a * 137.5, a * 209, a * 137.5, a * 168, a * 151);
        e.bezierCurveTo(a * 121, a * 135, a * 121, a * 135, a * 74, a * 119);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.globalCompositeOperation = "destination-out";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        wt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        wt(e, c[7], c[8], a * 8);
        e.globalCompositeOperation = "source-over";
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 133, a * 158);
        e.bezierCurveTo(a * 152, a * 193, a * 158, a * 205, a * 140, a * 203);
        e.bezierCurveTo(a * 99, a * 195, a * 96, a * 189, a * 86, a * 173);
        e.bezierCurveTo(a * 80, a * 159, a * 88, a * 145, a * 104, a * 141);
        e.closePath();
        wt(e, Fh, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 215, a * 146);
        e.bezierCurveTo(a * 204, a * 167, a * 204, a * 167, a * 193, a * 188);
        e.bezierCurveTo(a * 187, a * 201, a * 191, a * 209, a * 213, a * 201);
        e.bezierCurveTo(a * 247, a * 192, a * 253, a * 181, a * 257, a * 169);
        e.bezierCurveTo(a * 260, a * 157, a * 254, a * 149, a * 243, a * 141);
        e.closePath();
        wt(e, undefined, c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 66);
        e.bezierCurveTo(a * 57, a * 107, a * 63, a * 96, a * 120, a * 106);
        e.bezierCurveTo(a * 154, a * 112, a * 163, a * 116, a * 174, a * 135);
        e.bezierCurveTo(a * 180, a * 109, a * 191, a * 113, a * 237, a * 103);
        e.bezierCurveTo(a * 276, a * 100, a * 289, a * 94, a * 301, a * 67);
        e.bezierCurveTo(a * 317, a * 112, a * 301, a * 141, a * 274, a * 139);
        e.bezierCurveTo(a * 204, a * 166, a * 197, a * 169, a * 173, a * 183);
        e.bezierCurveTo(a * 170, a * 183, a * 170, a * 183, a * 167, a * 183);
        e.bezierCurveTo(a * 132, a * 160, a * 112, a * 156, a * 73, a * 141);
        e.bezierCurveTo(a * 43, a * 146, a * 27, a * 120, a * 39, a * 66);
        e.closePath();
        wt(e, c[7], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 185);
        e.bezierCurveTo(a * 115, a * 200, a * 118, a * 206, a * 124, a * 212);
        e.bezierCurveTo(a * 133, a * 223, a * 132, a * 231, a * 121, a * 230);
        e.bezierCurveTo(a * 108, a * 226, a * 108, a * 215, a * 107, a * 209);
        e.bezierCurveTo(a * 106, a * 201, a * 110, a * 196, a * 114, a * 185);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226, a * 186);
        e.bezierCurveTo(a * 234, a * 201, a * 238, a * 209, a * 228, a * 225);
        e.bezierCurveTo(a * 223, a * 233, a * 213, a * 233, a * 211, a * 226);
        e.bezierCurveTo(a * 206, a * 219, a * 217, a * 216, a * 221, a * 207);
        e.bezierCurveTo(a * 225, a * 196, a * 225, a * 191, a * 226, a * 186);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 172, a * 110);
        e.bezierCurveTo(a * 189, a * 153, a * 192, a * 160, a * 188, a * 175);
        e.bezierCurveTo(a * 183, a * 190, a * 176, a * 197, a * 165, a * 191);
        e.bezierCurveTo(a * 153, a * 181, a * 152, a * 166, a * 157, a * 151);
        e.bezierCurveTo(a * 164.5, a * 131, a * 164.5, a * 131, a * 172, a * 111);
        e.closePath();
        wt(e, c[3], c[4], a * 8);
        return d;
    }
    function Lu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 320;
        d.translate(a * -60, a * -15);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 3.953125);
        d.bezierCurveTo(a * 188.5, a * 171.453125, a * 188.5, a * 171.453125, a * 188.5, a * 338.953125);
        d.bezierCurveTo(a * 162.5, a * 268.953125, a * 145.5, a * 265.953125, a * 116.5, a * 244.953125);
        d.bezierCurveTo(a * 67.5, a * 204.953125, a * 87.5, a * 160.953125, a * 113.5, a * 125.953125);
        d.bezierCurveTo(a * 141.5, a * 90.953125, a * 176.5, a * 56.953125, a * 188.5, a * 3.953125);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function Mu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 92;
        d.height = a * 108;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 10);
        e.bezierCurveTo(a * 37, a * 2, a * 49, a * 0, a * 61, a * 15);
        e.bezierCurveTo(a * 81, a * 31, a * 78, a * 25, a * 79, a * 37);
        e.bezierCurveTo(a * 76, a * 44, a * 81, a * 56, a * 85, a * 63);
        e.bezierCurveTo(a * 91, a * 71, a * 90, a * 78, a * 83, a * 84);
        e.bezierCurveTo(a * 60, a * 98, a * 67, a * 95, a * 57, a * 102);
        e.bezierCurveTo(a * 47, a * 106, a * 43, a * 106, a * 31, a * 98);
        e.bezierCurveTo(a * 22, a * 91, a * 17, a * 89, a * 7, a * 84);
        e.bezierCurveTo(a * 1, a * 77, a * 4, a * 73, a * 7, a * 60);
        e.bezierCurveTo(a * 11, a * 50, a * 5, a * 32, a * 15, a * 27);
        e.bezierCurveTo(a * 26, a * 18, a * 26, a * 24, a * 31, a * 10);
        e.closePath();
        wt(e, c[0], c[1], 4);
        return d;
    }
    function Nu(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 138;
        d.height = a * 133;
        e.globalAlpha = b ? 0.3 : 1;
        e.translate(0, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 73.640625);
        e.bezierCurveTo(a * 7, a * 23.640625, a * 33, a * 19.640625, a * 71, a * 17.640625);
        e.bezierCurveTo(a * 129, a * 19.640625, a * 130, a * 45.640625, a * 130, a * 76.640625);
        e.bezierCurveTo(a * 90, a * 63.640625, a * 85, a * 63.640625, a * 73, a * 63.640625);
        e.bezierCurveTo(a * 38, a * 63.640625, a * 33, a * 66.640625, a * 8, a * 73.640625);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 28.640625);
        e.bezierCurveTo(a * 51, a * 25.640625, a * 56, a * 7.640625, a * 70, a * 5.640625);
        e.bezierCurveTo(a * 94, a * 7.640625, a * 87, a * 29.640625, a * 72, a * 28.640625);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 26.640625);
        e.bezierCurveTo(a * 42, a * 29.640625, a * 43, a * 31.640625, a * 42, a * 37.640625);
        wt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 90, a * 26.640625);
        e.bezierCurveTo(a * 100, a * 28.640625, a * 98, a * 34.640625, a * 99, a * 38.640625);
        wt(e, ts, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 26, a * 79.640625);
        e.bezierCurveTo(a * 13, a * 84.640625, a * 9, a * 86.640625, a * 7, a * 78.640625);
        e.bezierCurveTo(a * 6, a * 69.640625, a * 15, a * 67.640625, a * 31, a * 62.640625);
        e.bezierCurveTo(a * 63, a * 55.640625, a * 85, a * 57.640625, a * 104, a * 63.640625);
        e.bezierCurveTo(a * 131, a * 69.640625, a * 132, a * 71.640625, a * 131, a * 78.640625);
        e.bezierCurveTo(a * 131, a * 91.640625, a * 112, a * 80.640625, a * 91, a * 75.640625);
        e.bezierCurveTo(a * 51, a * 70.640625, a * 45, a * 74.640625, a * 28, a * 78.640625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 8, a * 82.640625);
        e.bezierCurveTo(a * 40, a * 107.640625, a * 53, a * 104.640625, a * 67, a * 106.640625);
        e.bezierCurveTo(a * 101, a * 103.640625, a * 117, a * 93.640625, a * 127, a * 84.640625);
        e.bezierCurveTo(a * 135, a * 95.640625, a * 131, a * 107.640625, a * 110, a * 118.640625);
        e.bezierCurveTo(a * 78, a * 129.640625, a * 67, a * 130.640625, a * 27, a * 119.640625);
        e.bezierCurveTo(a * 0, a * 105.640625, a * 8, a * 83.640625, a * 10, a * 84.640625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        return d;
    }
    const Ou = 3;
    function Pu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 330;
        d.translate(a * -60, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 188.5, a * 7.953125);
        d.bezierCurveTo(a * 188.5, a * 334.953125, a * 188.5, a * 332.953125, a * 188.5, a * 339.953125);
        d.bezierCurveTo(a * 166.5, a * 295.953125, a * 145.5, a * 295.953125, a * 139.5, a * 282.953125);
        d.bezierCurveTo(a * 124.5, a * 244.953125, a * 139.5, a * 243.953125, a * 131.5, a * 212.953125);
        d.bezierCurveTo(a * 118.5, a * 161.953125, a * 69.5, a * 156.953125, a * 74.5, a * 92.953125);
        d.bezierCurveTo(a * 85.5, a * 41.953125, a * 158.5, a * 49.953125, a * 188.5, a * 7.953125);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function Qu(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 120;
        c.height = a * 280;
        d.translate(a * -100, a * -20);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 228.5, a * 331.953125);
        d.bezierCurveTo(a * 228.5, a * 12.953125, a * 228.5, a * 171.453125, a * 228.5, a * 10.953125);
        d.bezierCurveTo(a * 196.5, a * 76.953125, a * 206.5, a * 78.953125, a * 191.5, a * 114.953125);
        d.bezierCurveTo(a * 162.5, a * 170.953125, a * 206.5, a * 220.953125, a * 210.5, a * 251.953125);
        d.bezierCurveTo(a * 218.5, a * 287.953125, a * 220.5, a * 291.953125, a * 228.5, a * 331.953125);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function Ru(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 161;
        c.height = a * 190;
        d.globalAlpha = 0.5;
        d.translate(0, 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, -8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        wt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 28, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        wt(d, b[3]);
        zt(d, a * 103, a * 110, a * 11);
        wt(d, b[4]);
        zt(d, a * 55, a * 111, a * 11);
        wt(d, b[4]);
        zt(d, a * 99, a * 107, a * 5);
        wt(d, b[1]);
        zt(d, a * 51, a * 108, a * 5);
        wt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 121);
        d.bezierCurveTo(a * 45, a * 128, a * 51, a * 133, a * 53, a * 141);
        d.bezierCurveTo(a * 59, a * 161, a * 70, a * 173, a * 80, a * 169);
        d.bezierCurveTo(a * 89, a * 172, a * 99, a * 149, a * 107, a * 133);
        d.bezierCurveTo(a * 114, a * 122, a * 119, a * 123, a * 124, a * 119);
        d.bezierCurveTo(a * 109, a * 148, a * 117, a * 133, a * 109, a * 147);
        d.bezierCurveTo(a * 87, a * 180, a * 84, a * 179, a * 76, a * 178);
        d.bezierCurveTo(a * 49, a * 173, a * 44, a * 149, a * 31, a * 121);
        d.closePath();
        wt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.translate(-2, 0);
        d.moveTo(a * 71, a * 162);
        d.bezierCurveTo(a * 80, a * 155, a * 85, a * 159, a * 89, a * 164);
        d.bezierCurveTo(a * 90, a * 171, a * 86, a * 173, a * 79, a * 173);
        d.bezierCurveTo(a * 67, a * 172, a * 67, a * 168, a * 71, a * 162);
        d.closePath();
        wt(d, b[3]);
        d.translate(2, 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 9, a * 93);
        d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
        d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
        d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
        d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
        d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
        d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
        d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
        d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
        d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
        d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
        d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
        d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
        d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
        d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
        d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
        d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
        d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
        d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
        d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
        d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
        d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
        d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
        d.closePath();
        wt(d, $l, b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 25, a * 63);
        d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
        d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
        d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
        wt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 91, a * 53);
        d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
        d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
        d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
        wt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31, a * 63);
        d.bezierCurveTo(a * 23, a * 54, a * 24, a * 47, a * 26, a * 37);
        d.bezierCurveTo(a * 28, a * 29, a * 31, a * 31, a * 41, a * 35);
        d.bezierCurveTo(a * 52, a * 45, a * 55, a * 51, a * 57, a * 53);
        d.bezierCurveTo(a * 50, a * 50, a * 44, a * 47, a * 43, a * 48);
        d.bezierCurveTo(a * 43, a * 52, a * 43, a * 52, a * 42, a * 57);
        d.bezierCurveTo(a * 38, a * 54, a * 38, a * 54, a * 33, a * 51);
        d.bezierCurveTo(a * 34, a * 56, a * 34, a * 56, a * 34, a * 61);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 99, a * 55);
        d.bezierCurveTo(a * 107, a * 43, a * 113, a * 39, a * 121, a * 34);
        d.bezierCurveTo(a * 130, a * 29, a * 130, a * 34, a * 130, a * 42);
        d.bezierCurveTo(a * 131, a * 57, a * 128, a * 61, a * 129, a * 63);
        d.bezierCurveTo(a * 124, a * 62, a * 124, a * 62, a * 119, a * 61);
        d.bezierCurveTo(a * 119, a * 56, a * 120, a * 61, a * 118, a * 52);
        d.bezierCurveTo(a * 115, a * 55, a * 111, a * 59, a * 111, a * 58);
        d.bezierCurveTo(a * 110, a * 54, a * 109, a * 57, a * 109, a * 51);
        d.closePath();
        wt(d, b[3]);
        return c;
    }
    function Su(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 20;
        c.height = a * 35;
        xt(d, 0, 0, 20, 35, 7);
        wt(d, b[0]);
        return c;
    }
    function em(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 48;
        c.height = a * 47;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 7.1875, a * 25.434661865234375);
        d.bezierCurveTo(a * 11.1875, a * 13.434661865234375, a * 18.1875, a * 8.434661865234375, a * 32.1875, a * 10.434661865234375);
        d.bezierCurveTo(a * 45.1875, a * 14.434661865234375, a * 41.1875, a * 24.434661865234375, a * 36.1875, a * 30.434661865234375);
        d.bezierCurveTo(a * 22.1875, a * 42.434661865234375, a * 2.1875, a * 41.434661865234375, a * 7.1875, a * 25.434661865234375);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    function im(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 33;
        c.height = a * 35;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 12.75, a * 7.1328125);
        d.bezierCurveTo(a * 26.75, a * 8.1328125, a * 27.75, a * 14.1328125, a * 24.75, a * 23.1328125);
        d.bezierCurveTo(a * 19.75, a * 31.1328125, a * 15.75, a * 33.1328125, a * 6.75, a * 26.1328125);
        d.bezierCurveTo(a * 0.75, a * 19.1328125, a * 4.75, a * 8.1328125, a * 12.75, a * 7.1328125);
        d.closePath();
        wt(d, b[0]);
        return c;
    }
    const tm = 13;
    function nm(a, b, c) {
        var d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        var e;
        d = (e = document.createElement("canvas")).getContext("2d");
        e.width = a * 47;
        e.height = a * 60;
        zt(d, a * 23.5, a * 20.734375, a * 15.132745950421556);
        wt(d, cl, c[2], a * 4);
        zt(d, a * 23.5, a * 20.734375, a * 18.601075237738275);
        wt(d, sr, c[1], a * 4);
        zt(d, a * 23.5, a * 20.734375, a * 11.40175425099138);
        wt(d, cl, c[1], a * 4);
        d.save();
        d.translate(a * 23, a * 38.734375);
        d.rotate(0);
        xt(d, a * -21.5, a * -19, a * 43, a * 38, a * 10);
        d.restore();
        wt(d, c[2], c[1], a * 4);
        d.save();
        d.translate(a * 23.5, a * 43.734375);
        d.rotate(0.5235987755982988);
        Bt(d, 3, a * 8.06225774829855, a * 0);
        d.restore();
        wt(d, c[3]);
        zt(d, a * 23.5, a * 35.734375, a * 7.0710678118654755);
        wt(d, c[3]);
        return e;
    }
    function om(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        wt(e, undefined, c[2], a * 40);
        e.globalAlpha = 0.4;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        wt(e, vk, c[1], a * 20);
        e.globalAlpha = 0.8;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51.000030517578125, a * 37.9886474609375);
        e.bezierCurveTo(a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 61.9886474609375, a * 51.000030517578125, a * 85.9886474609375);
        e.bezierCurveTo(a * 75.50003051757812, a * 85.9886474609375, a * 75.50003051757812, a * 85.9886474609375, a * 100.00003051757812, a * 85.9886474609375);
        e.bezierCurveTo(a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 61.9886474609375, a * 100.00003051757812, a * 37.9886474609375);
        e.bezierCurveTo(a * 76.00003051757812, a * 37.9886474609375, a * 76.00003051757812, a * 37.9886474609375, a * 52.000030517578125, a * 37.9886474609375);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 99.00003051757812, a * 38.9886474609375);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.9886474609375, a * 93.50003051757812, a * 44.9886474609375, a * 88.00003051757812, a * 50.9886474609375);
        e.bezierCurveTo(a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 72.4886474609375, a * 88.00003051757812, a * 93.9886474609375);
        e.bezierCurveTo(a * 94.00003051757812, a * 90.4886474609375, a * 94.00003051757812, a * 90.4886474609375, a * 100.00003051757812, a * 86.9886474609375);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.00003051757812, a * 49.625);
        e.bezierCurveTo(a * 61.000030517578125, a * 49.625, a * 61.000030517578125, a * 49.625, a * 35.000030517578125, a * 49.625);
        e.bezierCurveTo(a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 70.625, a * 35.000030517578125, a * 91.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 91.625, a * 60.500030517578125, a * 91.625, a * 86.00003051757812, a * 91.625);
        e.bezierCurveTo(a * 86.50003051757812, a * 70.625, a * 86.50003051757812, a * 70.625, a * 87.00003051757812, a * 49.625);
        e.closePath();
        wt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 36.625);
        e.bezierCurveTo(a * 73.00003051757812, a * 37.125, a * 73.00003051757812, a * 37.125, a * 99.00003051757812, a * 37.625);
        e.bezierCurveTo(a * 93.50003051757812, a * 44.125, a * 93.50003051757812, a * 44.125, a * 88.00003051757812, a * 50.625);
        e.bezierCurveTo(a * 60.500030517578125, a * 50.125, a * 60.500030517578125, a * 50.125, a * 33.000030517578125, a * 49.625);
        e.closePath();
        wt(e, c[1], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 53.000030517578125, a * 52.625);
        e.bezierCurveTo(a * 40.000030517578125, a * 54.625, a * 39.000030517578125, a * 59.625, a * 40.000030517578125, a * 67.625);
        e.bezierCurveTo(a * 45.000030517578125, a * 59.625, a * 48.000030517578125, a * 58.625, a * 54.000030517578125, a * 53.625);
        e.closePath();
        wt(e, c[3]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.000030517578125, a * 41.17047119140625);
        e.bezierCurveTo(a * 45.000030517578125, a * 38.17047119140625, a * 49.000030517578125, a * 37.17047119140625, a * 62.000030517578125, a * 38.17047119140625);
        e.bezierCurveTo(a * 78.00003051757812, a * 38.17047119140625, a * 78.00003051757812, a * 38.17047119140625, a * 94.00003051757812, a * 38.17047119140625);
        e.bezierCurveTo(a * 100.00003051757812, a * 38.17047119140625, a * 102.00003051757812, a * 38.17047119140625, a * 101.00003051757812, a * 47.17047119140625);
        e.bezierCurveTo(a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 63.67047119140625, a * 101.00003051757812, a * 80.17047119140625);
        e.bezierCurveTo(a * 102.00003051757812, a * 84.17047119140625, a * 100.00003051757812, a * 86.17047119140625, a * 95.00003051757812, a * 88.17047119140625);
        e.bezierCurveTo(a * 84.00003051757812, a * 94.17047119140625, a * 89.00003051757812, a * 94.17047119140625, a * 79.00003051757812, a * 94.17047119140625);
        e.bezierCurveTo(a * 59.500030517578125, a * 94.17047119140625, a * 59.500030517578125, a * 94.17047119140625, a * 40.000030517578125, a * 94.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 94.17047119140625, a * 34.000030517578125, a * 86.17047119140625);
        e.bezierCurveTo(a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 69.67047119140625, a * 34.000030517578125, a * 53.17047119140625);
        e.bezierCurveTo(a * 33.000030517578125, a * 47.17047119140625, a * 34.000030517578125, a * 47.17047119140625, a * 40.000030517578125, a * 42.17047119140625);
        e.closePath();
        wt(e, undefined, c[3], a * 4);
        return d;
    }
    function am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 105;
        d.height = a * 144;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -5, a * 0);
        e.save();
        e.translate(a * 52.5, a * 91.5);
        xt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        wt(e, c[0], c[0], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        xt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        wt(e, c[0], c[0], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        xt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        wt(e, c[0], c[0], a * 4);
        e.translate(a * 5, a * 0);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 52.5, a * 91.5);
        xt(e, a * -4.5, a * -39, a * 9, a * 78, a * 5);
        e.restore();
        wt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 53, a * 36);
        xt(e, a * -29, a * -17.5, a * 58, a * 35, a * 5);
        e.restore();
        wt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 53.5, a * 35.5);
        xt(e, a * -26.5, a * -15, a * 53, a * 30, a * 5);
        e.restore();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 49, a * 60.5);
        e.bezierCurveTo(a * 44, a * 56.5, a * 44, a * 56.5, a * 39, a * 52.5);
        e.bezierCurveTo(a * 39, a * 46.5, a * 39, a * 46.5, a * 39, a * 40.5);
        e.bezierCurveTo(a * 44, a * 44, a * 44, a * 44, a * 49, a * 47.5);
        e.bezierCurveTo(a * 49, a * 54, a * 49, a * 54, a * 49, a * 60.5);
        e.closePath();
        wt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 40.5);
        e.bezierCurveTo(a * 66, a * 46.5, a * 66, a * 46.5, a * 66, a * 52.5);
        e.bezierCurveTo(a * 60.5, a * 56.5, a * 60.5, a * 56.5, a * 55, a * 60.5);
        e.bezierCurveTo(a * 56, a * 53, a * 56, a * 53, a * 57, a * 45.5);
        e.bezierCurveTo(a * 61.5, a * 43, a * 61.5, a * 43, a * 66, a * 40.5);
        e.closePath();
        wt(e, c[7], c[6], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 33.5);
        e.bezierCurveTo(a * 55.5, a * 41, a * 55.5, a * 41, a * 59, a * 48.5);
        e.bezierCurveTo(a * 56, a * 58, a * 56, a * 58, a * 53, a * 67.5);
        e.bezierCurveTo(a * 49, a * 58, a * 49, a * 58, a * 45, a * 48.5);
        e.bezierCurveTo(a * 48.5, a * 41, a * 48.5, a * 41, a * 52, a * 33.5);
        e.closePath();
        wt(e, c[9], c[8], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 52, a * 47.5);
        e.bezierCurveTo(a * 54.5, a * 50.5, a * 54.5, a * 50.5, a * 57, a * 53.5);
        e.bezierCurveTo(a * 55, a * 60, a * 55, a * 60, a * 53, a * 66.5);
        e.bezierCurveTo(a * 50.5, a * 61, a * 50.5, a * 61, a * 48, a * 55.5);
        e.bezierCurveTo(a * 50, a * 52, a * 50, a * 52, a * 52, a * 48.5);
        e.closePath();
        wt(e, c[11], c[10], a * 3);
        return d;
    }
    function rm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.save();
        e.translate(a * 70.16665649414062, a * 38.20831298828125);
        xt(e, a * -58.5, a * -27.5, a * 117, a * 55, a * 20);
        e.restore();
        wt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 70, a * 42.70831298828125);
        xt(e, a * -61, a * -20, a * 122, a * 40, a * 20);
        e.restore();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123, a * 70.375);
        e.bezierCurveTo(a * 115, a * 99.375, a * 119, a * 85.375, a * 115, a * 100.375);
        e.bezierCurveTo(a * 112, a * 116.375, a * 117, a * 109.375, a * 131, a * 100.375);
        e.bezierCurveTo(a * 131, a * 83.375, a * 131, a * 83.375, a * 131, a * 66.375);
        e.closePath();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 11, a * 68.375);
        e.bezierCurveTo(a * 11.166656494140625, a * 84.375, a * 9, a * 99.375, a * 10, a * 100.375);
        e.bezierCurveTo(a * 35, a * 113.375, a * 27, a * 110.375, a * 25, a * 95.375);
        e.bezierCurveTo(a * 16, a * 68.375, a * 17, a * 69.375, a * 17, a * 68.375);
        e.closePath();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46, a * 32.375);
        e.bezierCurveTo(a * 43, a * 8.375, a * 45, a * 7.375, a * 56, a * 6.375);
        e.bezierCurveTo(a * 105, a * 4.375, a * 102, a * 6.375, a * 97, a * 32.375);
        e.bezierCurveTo(a * 138, a * 43.375, a * 133, a * 45.375, a * 133, a * 58.375);
        e.bezierCurveTo(a * 133, a * 85.375, a * 125, a * 74.375, a * 111, a * 70.375);
        e.bezierCurveTo(a * 70, a * 69.875, a * 29, a * 69.375, a * 29, a * 69.375);
        e.bezierCurveTo(a * 7, a * 84.375, a * 7, a * 70.375, a * 7, a * 59.375);
        e.bezierCurveTo(a * 6, a * 28.375, a * 32, a * 39.375, a * 44, a * 32.375);
        e.closePath();
        wt(e, c[2], c[1], a * 4);
        zt(e, a * 71, a * 44.375, a * 16.55294535724685);
        wt(e, c[2], c[1], a * 4);
        zt(e, a * 71, a * 43.70831298828125, a * 8.94427190999916);
        wt(e, c[2], c[1], a * 4);
        return d;
    }
    function sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 46;
        d.height = a * 140;
        e.scale(a * -1, a * 1);
        e.translate(a * -50, a * 40);
        e.translate(a * -20, 0);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        xt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        wt(e, c[0]);
        e.translate(a * 0, 0);
        e.globalAlpha = 1;
        e.translate(a * 10, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22.599990844726562, a * 85.94999694824219);
        e.bezierCurveTo(a * 17.599990844726562, a * 83.94999694824219, a * 17.599990844726562, a * 83.94999694824219, a * 12.599990844726562, a * 81.94999694824219);
        e.bezierCurveTo(a * 19.599990844726562, a * 73.94999694824219, a * 2.5999908447265625, a * 22.949996948242188, a * 33.59999084472656, a * 7.9499969482421875);
        e.bezierCurveTo(a * 27.599990844726562, a * 28.949996948242188, a * 33.59999084472656, a * 26.949996948242188, a * 35.59999084472656, a * 32.94999694824219);
        e.bezierCurveTo(a * 25.599990844726562, a * 59.94999694824219, a * 26.599990844726562, a * 69.94999694824219, a * 29.599990844726562, a * 82.94999694824219);
        e.closePath();
        wt(e, c[3], c[4], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -1, 0);
        e.moveTo(a * 17.599990844726562, a * 89.75);
        e.bezierCurveTo(a * 24.599990844726562, a * 99.75, a * 24.599990844726562, a * 101.75, a * 20.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 28.599990844726562, a * 110.75, a * 26.599990844726562, a * 112.75, a * 28.599990844726562, a * 111.75);
        e.bezierCurveTo(a * 30.599990844726562, a * 96.75, a * 32.59999084472656, a * 96.75, a * 30.599990844726562, a * 87.75);
        e.closePath();
        wt(e, c[1], c[2], a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 1, 0);
        e.moveTo(a * 7.5999908447265625, a * 86.34999084472656);
        e.bezierCurveTo(a * 12.599990844726562, a * 85.34999084472656, a * 14.599990844726562, a * 84.34999084472656, a * 13.599990844726562, a * 84.34999084472656);
        e.bezierCurveTo(a * 21.599990844726562, a * 83.34999084472656, a * 21.599990844726562, a * 83.34999084472656, a * 29.599990844726562, a * 82.34999084472656);
        e.bezierCurveTo(a * 33.59999084472656, a * 85.84999084472656, a * 33.59999084472656, a * 85.84999084472656, a * 37.59999084472656, a * 89.34999084472656);
        e.bezierCurveTo(a * 34.09999084472656, a * 91.84999084472656, a * 34.09999084472656, a * 91.84999084472656, a * 30.599990844726562, a * 94.34999084472656);
        e.bezierCurveTo(a * 21.099990844726562, a * 93.34999084472656, a * 21.099990844726562, a * 93.34999084472656, a * 11.599990844726562, a * 92.34999084472656);
        e.closePath();
        wt(e, c[1], c[2], a * 3);
        e.save();
        e.translate(a * 23.599990844726562, a * 110.94999694824219);
        e.rotate(0);
        xt(e, a * -7, a * -4, a * 14, a * 8, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 3);
        return d;
    }
    function hm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 110;
        c.height = a * 110;
        d.globalAlpha = 0.2;
        zt(d, a * 55, a * 55, a * 55);
        wt(d, b[0]);
        return c;
    }
    function lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 218;
        d.height = a * 185;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 64, a * 53.135406494140625);
        e.bezierCurveTo(a * 92, a * 17.135406494140625, a * 116, a * 11.135406494140625, a * 158, a * 53.135406494140625);
        e.bezierCurveTo(a * 178, a * 74.13540649414062, a * 181, a * 81.13540649414062, a * 196, a * 101.13540649414062);
        e.bezierCurveTo(a * 214, a * 127.13540649414062, a * 192, a * 138.13540649414062, a * 173, a * 149.13540649414062);
        e.bezierCurveTo(a * 137, a * 166.13540649414062, a * 74, a * 170.13540649414062, a * 36, a * 141.13540649414062);
        e.bezierCurveTo(a * 13, a * 127.13540649414062, a * 20, a * 119.13540649414062, a * 30, a * 103.13540649414062);
        e.bezierCurveTo(a * 48, a * 71.13540649414062, a * 54, a * 67.13540649414062, a * 63, a * 54.135406494140625);
        e.closePath();
        wt(e, c[0], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107, a * 25.135406494140625);
        e.bezierCurveTo(a * 62, a * 90.13540649414062, a * 54, a * 129.13540649414062, a * 53, a * 151.13540649414062);
        e.bezierCurveTo(a * 39.5, a * 142.13540649414062, a * 39.5, a * 142.13540649414062, a * 26, a * 133.13540649414062);
        e.bezierCurveTo(a * 23.5, a * 128.63540649414062, a * 23.5, a * 128.63540649414062, a * 21, a * 124.13540649414062);
        e.bezierCurveTo(a * 22, a * 113.13540649414062, a * 31, a * 99.13540649414062, a * 40, a * 88.13540649414062);
        e.bezierCurveTo(a * 54.5, a * 67.13540649414062, a * 54.5, a * 67.13540649414062, a * 69, a * 46.135406494140625);
        e.bezierCurveTo(a * 80.5, a * 36.635406494140625, a * 80.5, a * 36.635406494140625, a * 92, a * 27.135406494140625);
        e.closePath();
        wt(e, c[1]);
        return d;
    }
    function gm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 175;
        d.height = a * 106;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 38, a * 46);
        e.bezierCurveTo(a * 52, a * 37, a * 69, a * 36, a * 85, a * 36);
        e.bezierCurveTo(a * 118, a * 38, a * 129, a * 42, a * 137, a * 48);
        e.bezierCurveTo(a * 135, a * 45, a * 135, a * 45, a * 133, a * 42);
        e.bezierCurveTo(a * 124, a * 32, a * 116, a * 28, a * 88, a * 25);
        e.bezierCurveTo(a * 47, a * 28, a * 40, a * 32, a * 36, a * 44);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 75);
        e.bezierCurveTo(a * 143, a * 51, a * 133, a * 29, a * 100, a * 27);
        e.bezierCurveTo(a * 52, a * 21, a * 37, a * 37, a * 31, a * 54);
        e.bezierCurveTo(a * 23, a * 78, a * 28, a * 77, a * 36, a * 79);
        e.bezierCurveTo(a * 80, a * 87, a * 120, a * 81, a * 145, a * 76);
        e.closePath();
        wt(e, ts, c[2], a * 4);
        e.translate(0, a * -3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        wt(e, c[10], c[10], a * 4);
        e.translate(0, a * 3);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 19);
        e.bezierCurveTo(a * 24, a * 35, a * 35, a * 42, a * 42, a * 44);
        e.bezierCurveTo(a * 43, a * 51, a * 43, a * 48, a * 43, a * 56);
        e.bezierCurveTo(a * 25, a * 47, a * 17, a * 36, a * 23, a * 20);
        e.closePath();
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 18);
        e.bezierCurveTo(a * 159, a * 44, a * 139, a * 52, a * 130, a * 55);
        e.bezierCurveTo(a * 129, a * 48, a * 129, a * 46, a * 131, a * 43);
        e.bezierCurveTo(a * 144, a * 37, a * 148, a * 35, a * 147, a * 18);
        e.closePath();
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131, a * 43);
        e.bezierCurveTo(a * 145, a * 40, a * 148, a * 32, a * 147, a * 17);
        e.bezierCurveTo(a * 166, a * 39, a * 155, a * 62, a * 140, a * 67);
        e.bezierCurveTo(a * 128, a * 65, a * 128, a * 52, a * 131, a * 45);
        e.closePath();
        wt(e, Go, c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41, a * 43);
        e.bezierCurveTo(a * 30, a * 42, a * 24, a * 33, a * 25, a * 17);
        e.bezierCurveTo(a * 7, a * 34, a * 17, a * 63, a * 33, a * 66);
        e.bezierCurveTo(a * 45, a * 59, a * 44, a * 53, a * 42, a * 44);
        e.closePath();
        wt(e, undefined, c[4], a * 4);
        e.save();
        e.translate(a * 87, a * 34.5);
        e.rotate(0);
        xt(e, a * -8, a * -10.5, a * 16, a * 21, a * 10);
        e.restore();
        wt(e, c[7], c[2], a * 4);
        e.save();
        e.translate(a * 87, a * 57);
        e.rotate(0);
        xt(e, a * -8, a * -23, a * 16, a * 46, a * 10);
        e.restore();
        wt(e, c[8], c[2], a * 4);
        zt(e, a * 87, a * 39, a * 4.123105625617661);
        wt(e, c[9], c[2], a * 4);
        zt(e, a * 87, a * 60, a * 4.242640687119285);
        wt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 67);
        e.bezierCurveTo(a * 55, a * 80, a * 126, a * 74, a * 144, a * 68);
        e.bezierCurveTo(a * 144.5, a * 75, a * 144.5, a * 75, a * 145, a * 82);
        e.bezierCurveTo(a * 114, a * 94, a * 47, a * 91, a * 28, a * 82);
        e.closePath();
        wt(e, c[8], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27, a * 69);
        e.bezierCurveTo(a * 13, a * 77, a * 16, a * 74, a * 27, a * 80);
        e.closePath();
        wt(e, c[9], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 70);
        e.bezierCurveTo(a * 149.5, a * 72, a * 149.5, a * 72, a * 154, a * 74);
        e.bezierCurveTo(a * 150, a * 77, a * 150, a * 77, a * 146, a * 80);
        e.closePath();
        wt(e, c[9], c[2], a * 4);
        zt(e, a * 50, a * 80, a * 5);
        wt(e, c[9], c[2], a * 4);
        zt(e, a * 86.01141357421875, a * 81.76705932617188, a * 5);
        wt(e, c[9], c[2], a * 4);
        zt(e, a * 119.01141357421875, a * 80.13069152832031, a * 5);
        wt(e, c[9], c[2], a * 4);
        return d;
    }
    function um(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 88;
        d.height = a * 88;
        e.save();
        e.translate(a * 44, a * 44);
        e.rotate(0.52);
        Bt(e, 6, a * 43, a * 10);
        e.restore();
        wt(e, c[0], c[1], a * 3);
        return d;
    }
    function bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 147;
        c.height = a * 172;
        d.globalAlpha = 0.5;
        d.translate(0, a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        wt(d, b[0]);
        d.translate(0, a * -8);
        d.globalAlpha = 1;
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 8, a * 50);
        d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
        d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
        d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
        d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
        d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
        d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
        d.closePath();
        wt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 14, a * 57);
        d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
        d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
        wt(d, b[1], b[2], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 93, a * 47);
        d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
        d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
        wt(d, b[1], b[2], a * 4);
        zt(d, a * 51, a * 91, a * 9);
        wt(d, b[3]);
        zt(d, a * 95, a * 91, a * 9);
        wt(d, b[3]);
        zt(d, a * 91, a * 89, a * 4);
        wt(d, b[4]);
        zt(d, a * 47, a * 89, a * 4);
        wt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 54, a * 133);
        d.bezierCurveTo(a * 56, a * 108, a * 64, a * 99, a * 73, a * 98);
        d.bezierCurveTo(a * 86, a * 97, a * 91, a * 119, a * 93, a * 133);
        d.bezierCurveTo(a * 94, a * 155, a * 90, a * 150, a * 74, a * 155);
        d.bezierCurveTo(a * 50, a * 152, a * 55, a * 145, a * 54, a * 134);
        d.closePath();
        wt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 65.25, a * 135);
        d.bezierCurveTo(a * 75.25, a * 128, a * 83.25, a * 133, a * 83.25, a * 138);
        d.bezierCurveTo(a * 88.25, a * 148, a * 61.25, a * 149, a * 64.25, a * 137);
        d.closePath();
        wt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 74, a * 145);
        d.bezierCurveTo(a * 74, a * 148, a * 74, a * 148, a * 74, a * 151);
        d.closePath();
        wt(d, undefined, b[6], a * 2);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 19, a * 58);
        d.bezierCurveTo(a * 10, a * 38, a * 18, a * 33, a * 28, a * 34);
        d.bezierCurveTo(a * 41, a * 39, a * 45, a * 45, a * 50, a * 51);
        d.closePath();
        wt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 100, a * 51);
        d.bezierCurveTo(a * 106, a * 36, a * 119, a * 31, a * 128, a * 36);
        d.bezierCurveTo(a * 137, a * 49, a * 128, a * 58, a * 128, a * 60);
        d.closePath();
        wt(d, b[6]);
        return c;
    }
    function dm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 187;
        d.height = a * 119;
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, 3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        wt(e, c[5]);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, -3);
        e.moveTo(a * 53, a * 45);
        e.bezierCurveTo(a * 3, a * 60, a * 11, a * 72, a * 19, a * 81);
        e.bezierCurveTo(a * 28, a * 82, a * 24, a * 81, a * 29, a * 82);
        e.bezierCurveTo(a * 26, a * 87, a * 28, a * 84, a * 28, a * 87);
        e.bezierCurveTo(a * 63, a * 101, a * 92, a * 100, a * 138, a * 93);
        e.bezierCurveTo(a * 172, a * 87, a * 180, a * 72, a * 168, a * 62);
        e.bezierCurveTo(a * 154, a * 51, a * 150, a * 50, a * 148, a * 49);
        e.bezierCurveTo(a * 132, a * 42, a * 90, a * 40, a * 55, a * 45);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 151, a * 60);
        e.bezierCurveTo(a * 140, a * 36, a * 137, a * 32, a * 124, a * 29);
        e.bezierCurveTo(a * 98, a * 22, a * 80, a * 24, a * 62, a * 28);
        e.bezierCurveTo(a * 42, a * 35, a * 38, a * 46, a * 34, a * 58);
        e.bezierCurveTo(a * 53, a * 74, a * 76, a * 76, a * 91, a * 78);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 37, a * 53);
        e.bezierCurveTo(a * 30, a * 56, a * 29, a * 67, a * 30, a * 68);
        e.bezierCurveTo(a * 94, a * 108, a * 150, a * 76, a * 155, a * 70);
        e.bezierCurveTo(a * 154, a * 60, a * 151, a * 54, a * 149, a * 53);
        e.bezierCurveTo(a * 101, a * 74, a * 66, a * 66, a * 37, a * 53);
        e.closePath();
        wt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 100, a * 36);
        e.bezierCurveTo(a * 92, a * 25, a * 86, a * 28, a * 82, a * 34);
        e.bezierCurveTo(a * 88, a * 40, a * 93, a * 40, a * 98, a * 36);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 43);
        e.bezierCurveTo(a * 69, a * 46, a * 67, a * 52, a * 69, a * 58);
        wt(e, undefined, c[1], a * 4);
        zt(e, a * 58, a * 50, a * 5);
        wt(e, c[4]);
        zt(e, a * 43, a * 65, a * 5);
        wt(e, c[4]);
        zt(e, a * 58, a * 73, a * 5);
        wt(e, c[4]);
        zt(e, a * 58, a * 50, a * 2);
        wt(e, c[5]);
        zt(e, a * 43, a * 65, a * 2);
        wt(e, c[5]);
        zt(e, a * 58, a * 73, a * 2);
        wt(e, c[5]);
        return d;
    }
    function vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 170;
        e.translate(0, a * -170);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159.5, a * 322.0625);
        e.bezierCurveTo(a * 240.5, a * 293.0625, a * 240.5, a * 293.0625, a * 321.5, a * 264.0625);
        e.bezierCurveTo(a * 276.5, a * 230.0625, a * 276.5, a * 230.0625, a * 231.5, a * 196.0625);
        e.bezierCurveTo(a * 158.5, a * 221.5625, a * 158.5, a * 221.5625, a * 85.5, a * 247.0625);
        e.closePath();
        wt(e, c[0], c[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 212.5, a * 270.0625);
        e.bezierCurveTo(a * 235, a * 261.5625, a * 235, a * 261.5625, a * 257.5, a * 253.0625);
        e.closePath();
        wt(e, undefined, c[0], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 193.5, a * 226.0625);
        e.bezierCurveTo(a * 204.5, a * 242.0625, a * 242.5, a * 237.0625, a * 251.5, a * 225.0625);
        e.bezierCurveTo(a * 246.5, a * 195.0625, a * 205.5, a * 190.0625, a * 193.5, a * 227.0625);
        e.closePath();
        wt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164.5, a * 245.0625);
        e.bezierCurveTo(a * 182.5, a * 264.0625, a * 252.5, a * 258.0625, a * 276.5, a * 244.0625);
        e.bezierCurveTo(a * 265.5, a * 226.0625, a * 244.5, a * 231.0625, a * 229.5, a * 230.0625);
        e.bezierCurveTo(a * 205.5, a * 227.0625, a * 175.5, a * 202.0625, a * 162.5, a * 244.0625);
        e.closePath();
        wt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 260.0625);
        e.bezierCurveTo(a * 134.5, a * 279.0625, a * 170.5, a * 275.0625, a * 191.5, a * 257.0625);
        e.bezierCurveTo(a * 174.5, a * 208.0625, a * 142.5, a * 197.0625, a * 116.5, a * 259.0625);
        e.closePath();
        wt(e, c[2], c[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 152.5, a * 278.0625);
        e.bezierCurveTo(a * 165.5, a * 294.0625, a * 200.5, a * 287.0625, a * 216.5, a * 278.0625);
        e.bezierCurveTo(a * 206.5, a * 247.0625, a * 173.5, a * 233.0625, a * 153.5, a * 276.0625);
        e.closePath();
        wt(e, c[2], c[3], a * 12);
        return d;
    }
    function mm(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 501;
        f.height = b * 564;
        g.scale(0.5, 0.5);
        g.translate(b * 240, b * 255);
        g.rotate(e);
        g.globalAlpha = c ? 0.5 : 0.2;
        zt(g, b * 174, b * 87.984375, b * 20.8806130178211);
        wt(g, d[0], d[0], b * 8);
        zt(g, b * 174, b * 87.984375, b * 12.165525060596439);
        wt(g, d[0], d[0], b * 8);
        zt(g, b * 174, b * 87.484375, b * 6);
        wt(g, d[0]);
        zt(g, b * 30, b * 87.984375, b * 20.8806130178211);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 30, b * 87.984375, b * 12.165525060596439);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 30, b * 87.484375, b * 6);
        wt(g, d[0]);
        zt(g, b * 100, b * 30, b * 20.8806130178211);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 100, b * 30, b * 12.165525060596439);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 100, b * 30, b * 6);
        wt(g, d[0]);
        zt(g, b * 100, b * 130, b * 20.8806130178211);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 100, b * 130, b * 12.165525060596439);
        wt(g, d[0], d[0], b * 4);
        zt(g, b * 100, b * 130, b * 6);
        wt(g, d[0]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        g.rotate(0);
        xt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        wt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 101, b * 64.984375);
        g.rotate(0);
        xt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        wt(g, d[0], d[0], b * 4);
        g.save();
        g.translate(b * 102, b * 63.484375);
        g.rotate(0);
        xt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        g.translate(5, -5);
        g.globalAlpha = 1;
        zt(g, b * 174, b * 87.984375, b * 20.8806130178211);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 174, b * 87.984375, b * 12.165525060596439);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 174, b * 87.484375, b * 6);
        wt(g, d[2]);
        zt(g, b * 30, b * 87.984375, b * 20.8806130178211);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 30, b * 87.984375, b * 12.165525060596439);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 30, b * 87.484375, b * 6);
        wt(g, d[2]);
        zt(g, b * 102, b * 30, b * 20.8806130178211);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 102, b * 30, b * 12.165525060596439);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 102, b * 30, b * 6);
        wt(g, d[1]);
        zt(g, b * 102, b * 130, b * 20.8806130178211);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 102, b * 130, b * 12.165525060596439);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 102, b * 130, b * 6);
        wt(g, d[1]);
        g.save();
        g.translate(b * 102, b * 81.984375);
        xt(g, b * -74, b * -57, b * 148, b * 114, b * 23);
        g.restore();
        wt(g, d[1], d[3], b * 8);
        g.save();
        g.translate(b * 101, b * 64.984375);
        xt(g, b * -33, b * -10, b * 66, b * 20, b * 15);
        g.restore();
        wt(g, d[2], d[1], b * 8);
        g.save();
        g.translate(b * 102, b * 63.484375);
        xt(g, b * -9, b * -27.5, b * 18, b * 55, b * 15);
        g.restore();
        wt(g, d[2], d[1], b * 8);
        zt(g, b * 135, b * 107.36605834960938, b * 21.095023109728988);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 135, b * 107.36605834960938, b * 13);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 135, b * 107.36605834960938, b * 6.082762530298219);
        wt(g, d[2]);
        zt(g, b * 70, b * 107.36605834960938, b * 21.095023109728988);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 70, b * 107.36605834960938, b * 13);
        wt(g, d[1], d[3], b * 8);
        zt(g, b * 70, b * 107.36605834960938, b * 6.082762530298219);
        wt(g, d[2]);
        return f;
    }
    function cm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 158;
        d.height = a * 201;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        wt(e, c[8], c[8], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96.5, a * 76.421875);
        e.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
        e.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
        e.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 61.5, a * 78.421875);
        e.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
        e.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
        e.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 127.421875);
        e.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
        e.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
        e.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 41.5, a * 134.421875);
        e.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
        e.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
        e.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 78.5, a * 51.921875);
        e.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
        e.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
        e.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
        e.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        zt(e, a * 108.5, a * 148.421875, a * 9);
        wt(e, c[5]);
        zt(e, a * 106.5, a * 144.421875, a * 3);
        wt(e, c[6]);
        zt(e, a * 46.5, a * 148.421875, a * 9);
        wt(e, c[5]);
        zt(e, a * 44.5, a * 144.421875, a * 3);
        wt(e, c[6]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 114.421875);
        e.bezierCurveTo(a * 121.5, a * 137.421875, a * 118.5, a * 133.421875, a * 108.5, a * 139.421875);
        e.bezierCurveTo(a * 94.5, a * 146.421875, a * 96.5, a * 148.421875, a * 95.5, a * 152.421875);
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.translate(0, a * -2);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35.5, a * 131.421875);
        e.bezierCurveTo(a * 36.5, a * 140.421875, a * 39.5, a * 140.421875, a * 49.5, a * 143.421875);
        e.bezierCurveTo(a * 59.5, a * 149.421875, a * 57.5, a * 151.421875, a * 59.5, a * 155.421875);
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 57.421875);
        e.bezierCurveTo(a * 101.5, a * 120.421875, a * 92.5, a * 127.421875, a * 78.5, a * 134.421875);
        e.bezierCurveTo(a * 51.5, a * 131.421875, a * 63.5, a * 102.421875, a * 70.5, a * 59.421875);
        e.bezierCurveTo(a * 75, a * 55.421875, a * 78.5, a * 52.421875, a * 79.5, a * 51.421875);
        e.closePath();
        wt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79.5, a * 61.421875);
        e.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
        e.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
        e.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 72.421875);
        e.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
        e.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 154.421875);
        e.bezierCurveTo(a * 93.5, a * 163.921875, a * 93.5, a * 163.921875, a * 99.5, a * 173.421875);
        e.bezierCurveTo(a * 95, a * 177.421875, a * 95, a * 177.421875, a * 90.5, a * 181.421875);
        e.bezierCurveTo(a * 89, a * 167.921875, a * 89, a * 167.921875, a * 87.5, a * 154.421875);
        e.closePath();
        wt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 81.5, a * 164.421875);
        e.bezierCurveTo(a * 84, a * 172.921875, a * 84, a * 172.921875, a * 86.5, a * 181.421875);
        e.bezierCurveTo(a * 82.5, a * 182.421875, a * 82.5, a * 182.421875, a * 78.5, a * 183.421875);
        e.closePath();
        wt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 164.421875);
        e.bezierCurveTo(a * 73.5, a * 173.921875, a * 73.5, a * 173.921875, a * 74.5, a * 183.421875);
        e.bezierCurveTo(a * 70.5, a * 182.921875, a * 70.5, a * 182.921875, a * 66.5, a * 182.421875);
        e.closePath();
        wt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 65.5, a * 156.421875);
        e.bezierCurveTo(a * 65, a * 168.421875, a * 65, a * 168.421875, a * 64.5, a * 180.421875);
        e.bezierCurveTo(a * 58.5, a * 177.421875, a * 58.5, a * 177.421875, a * 52.5, a * 174.421875);
        e.closePath();
        wt(e, c[6], c[7], a * 2);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 42.5, a * 163.421875);
        e.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
        e.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
        e.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        return d;
    }
    function pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        xt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        wt(e, c[2]);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        xt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        wt(e, c[2]);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        xt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        wt(e, c[2]);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        xt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        wt(e, c[2]);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        xt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        wt(e, c[2]);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        xt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        wt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 41.15177917480469);
        e.rotate(0.8);
        xt(e, a * -16, a * -16.5, a * 32, a * 33, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 22.5089111328125);
        e.bezierCurveTo(a * 97.5, a * 41.5089111328125, a * 97.5, a * 41.5089111328125, a * 97, a * 60.5089111328125);
        wt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 147.5, a * 69.5089111328125);
        e.rotate(0.2);
        xt(e, a * -15.5, a * -16, a * 31, a * 32, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 163, a * 59.50892639160156);
        e.bezierCurveTo(a * 147, a * 69.50892639160156, a * 127, a * 82.50892639160156, a * 131, a * 79.50892639160156);
        wt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 143.5, a * 128.2946319580078);
        e.rotate(1.24);
        xt(e, a * -16.5, a * -17.5, a * 33, a * 35, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 162, a * 135.93748474121094);
        e.bezierCurveTo(a * 143.5, a * 128.43748474121094, a * 129, a * 120.93748474121094, a * 125, a * 120.93748474121094);
        wt(e, ts, c[4], a * 5);
        e.save();
        e.translate(a * 99, a * 156.08035278320312);
        e.rotate(0.84);
        xt(e, a * -18, a * -18, a * 36, a * 36, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 136.08035278320312);
        e.bezierCurveTo(a * 98, a * 156.08035278320312, a * 98, a * 156.08035278320312, a * 98, a * 176.08035278320312);
        wt(e, cl, c[4], a * 5);
        e.save();
        e.translate(a * 54, a * 72.22320556640625);
        e.rotate(1.32);
        xt(e, a * -18, a * -19, a * 36, a * 38, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 34, a * 60.79463195800781);
        e.bezierCurveTo(a * 53.5, a * 72.29463195800781, a * 69, a * 79.79463195800781, a * 73, a * 83.79463195800781);
        wt(e, undefined, c[4], a * 5);
        e.save();
        e.translate(a * 49, a * 127.29463195800781);
        e.rotate(1.76);
        xt(e, a * -20, a * -17.5, a * 40, a * 35, a * 7);
        e.restore();
        wt(e, c[3], c[4], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 30, a * 141.7946319580078);
        e.bezierCurveTo(a * 47, a * 130.2946319580078, a * 64, a * 119.79463195800781, a * 64, a * 118.79463195800781);
        wt(e, undefined, c[4], a * 5);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 98, a * 99);
        Bt(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        wt(e, c[2]);
        e.save();
        e.translate(a * 98, a * 99);
        Bt(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        wt(e, c[2]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 98, a * 99);
        Bt(e, 6, a * 70.28669492273468, a * 10);
        e.restore();
        wt(e, c[5], c[6], a * 5);
        e.save();
        e.translate(a * 98, a * 99);
        Bt(e, 6, a * 56.455940020351264, a * 10);
        e.restore();
        wt(e, c[7], c[8], a * 7);
        return d;
    }
    function Cm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 120;
        e.height = b * 100;
        xt(f, b * 10, b * 10, b * 95, b * 80, b * 10);
        wt(f, c[2]);
        xt(f, b * 10, b * 5, b * 95, b * 80, b * 10);
        wt(f, c[3], c[4], b * 4);
        if (d == 0) {
            var g = ym(b * 0.75, c, 0);
            f.drawImage(g, b * 22, b * 18);
        } else if (d == 1) {
            g = ym(b * 0.75, c, 1);
            f.drawImage(g, b * 22, b * 18);
        }
        return e;
    }
    function Tm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 89;
        d.height = a * 89;
        e.save();
        e.translate(a * 44.5, a * 44.5);
        Bt(e, 6, a * 40, a * 10);
        e.restore();
        wt(e, c[0], c[1], a * 5);
        e.save();
        e.translate(a * 44.5, a * 44.5);
        Bt(e, 6, a * 25.11521001172521, a * 10);
        e.restore();
        wt(e, c[2], c[3], a * 5);
        return d;
    }
    function fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 168;
        d.height = a * 100;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 10, a * 5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        xt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        wt(e, c[0]);
        zt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -10, a * -5);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        xt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        wt(e, undefined, c[3], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        wt(e, undefined, c[3], a * 6);
        zt(e, a * 78, a * 44.80000305175781, a * 42.44616584663204);
        wt(e, $l, c[3], a * 6);
        e.save();
        e.translate(a * 24.5, a * 44.30000305175781);
        xt(e, a * -19.5, a * -8.5, a * 39, a * 17, a * 10);
        e.restore();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 37.80000305175781);
        e.bezierCurveTo(a * 142, a * 37.80000305175781, a * 140, a * 37.80000305175781, a * 141, a * 37.80000305175781);
        e.bezierCurveTo(a * 147, a * 28.800003051757812, a * 149, a * 26.800003051757812, a * 153, a * 32.80000305175781);
        e.bezierCurveTo(a * 160, a * 42.80000305175781, a * 157, a * 50.80000305175781, a * 153, a * 58.80000305175781);
        e.bezierCurveTo(a * 148, a * 62.80000305175781, a * 147, a * 59.80000305175781, a * 143, a * 52.80000305175781);
        e.bezierCurveTo(a * 129, a * 52.80000305175781, a * 129, a * 52.80000305175781, a * 115, a * 52.80000305175781);
        e.closePath();
        wt(e, c[1]);
        zt(e, a * 78, a * 44.80000305175781, a * 39.44616584663204);
        wt(e, c[2], c[1], a * 4);
        zt(e, a * 78, a * 44.80000305175781, a * 29.68164415931166);
        wt(e, c[3], c[1], a * 4);
        zt(e, a * 78, a * 44, a * 20);
        wt(e, c[4]);
        return d;
    }
    function zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 167;
        d.height = a * 136;
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        xt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 0.8;
        e.save();
        e.translate(a * 76.71426391601562, a * 67.85713195800781);
        xt(e, a * -57.5, a * -54.5, a * 115, a * 109, a * 15);
        e.restore();
        wt(e, undefined, c[1], a * 7);
        e.globalAlpha = 0.5;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        xt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.save();
        e.translate(a * 91.21426391601562, a * 67.35713195800781);
        xt(e, a * -56, a * -55, a * 115, a * 109, a * 15);
        e.restore();
        wt(e, undefined, c[1], a * 7);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.21426391601562, a * 70.35713195800781);
        e.bezierCurveTo(a * 133.21426391601562, a * 95.35713195800781, a * 128.21426391601562, a * 109.35713195800781, a * 108.21426391601562, a * 108.35713195800781);
        wt(e, Aj, c[1], a * 10);
        return d;
    }
    function ym(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 95;
        d.height = a * 85;
        if (c == 0) {
            e.translate(a * 7, a * 15);
            e.scale(0.9, 0.9);
            e.save();
            xt(e, a * 0, a * 5, a * 90, a * 60, 10);
            wt(e, b[0]);
            e.globalCompositeOperation = "destination-out";
            zt(e, a * 25, a * 40, a * 10);
            e.fill();
            zt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
            e.save();
            xt(e, 0, 0, a * 90, a * 60, a * 10);
            wt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            zt(e, a * 25, a * 40, a * 10);
            e.fill();
            zt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        } else if (c == 1) {
            e.scale(0.8, 0.8);
            e.translate(a * 15, a * 33);
            e.save();
            e.scale(0.56, 0.56);
            e.translate(a * -39, a * -60);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 32.5, a * 50.642852783203125);
            e.bezierCurveTo(a * 83, a * 69.64285278320312, a * 83, a * 69.64285278320312, a * 133.5, a * 88.64285278320312);
            e.bezierCurveTo(a * 93, a * 92.64285278320312, a * 93, a * 92.64285278320312, a * 52.5, a * 96.64285278320312);
            e.bezierCurveTo(a * 30.5, a * 100.64285278320312, a * 36.5, a * 94.64285278320312, a * 32.5, a * 84.64285278320312);
            e.bezierCurveTo(a * 21.5, a * 45.642852783203125, a * 24.5, a * 48.642852783203125, a * 31.5, a * 50.642852783203125);
            e.closePath();
            wt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 116.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 160.5, a * 67.14285278320312, a * 160.5, a * 67.14285278320312, a * 204.5, a * 48.642852783203125);
            e.bezierCurveTo(a * 220.5, a * 42.642852783203125, a * 208.5, a * 68.64285278320312, a * 205.5, a * 85.64285278320312);
            e.bezierCurveTo(a * 202.5, a * 98.64285278320312, a * 199.5, a * 98.64285278320312, a * 188.5, a * 100.64285278320312);
            e.closePath();
            wt(e, b[1]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 166.5, a * 68.64285278320312);
            e.bezierCurveTo(a * 147.5, a * 72.64285278320312, a * 145.5, a * 73.64285278320312, a * 142.5, a * 62.642852783203125);
            e.bezierCurveTo(a * 121.5, a * 12.642852783203125, a * 122.5, a * 5.642852783203125, a * 117.5, a * 15.642852783203125);
            e.bezierCurveTo(a * 105.5, a * 40.642852783203125, a * 105.5, a * 40.642852783203125, a * 93.5, a * 65.64285278320312);
            e.bezierCurveTo(a * 89.5, a * 74.64285278320312, a * 84.5, a * 72.64285278320312, a * 73.5, a * 74.64285278320312);
            e.bezierCurveTo(a * 98, a * 87.64285278320312, a * 98, a * 87.64285278320312, a * 122.5, a * 100.64285278320312);
            e.closePath();
            wt(e, b[1]);
            e.restore();
            e.save();
            xt(e, 0, a * 15, a * 90, a * 50, a * 10);
            wt(e, b[0]);
            xt(e, 0, a * 10, a * 90, a * 50, a * 10);
            wt(e, b[1]);
            e.globalCompositeOperation = "destination-out";
            zt(e, a * 25, a * 40, a * 10);
            e.fill();
            zt(e, a * 65, a * 40, a * 10);
            e.fill();
            e.restore();
        }
        return d;
    }
    function wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 202;
        d.height = a * 202;
        e.translate(a * 2, a * 1);
        e.globalAlpha = 0.3;
        zt(e, a * 98, a * 99, a * 100);
        wt(e, c[0]);
        e.globalAlpha = 0.5;
        zt(e, a * 98, a * 99, a * 90);
        wt(e, c[1]);
        return d;
    }
    function Pm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 170;
        d.height = a * 170;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * -10, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * 10, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72.5, a * 4.109375);
        e.bezierCurveTo(a * 117, a * 9.609375, a * 117, a * 9.609375, a * 161.5, a * 15.109375);
        e.bezierCurveTo(a * 134.5, a * 106.109375, a * 110.5, a * 130.109375, a * 63.5, a * 145.109375);
        e.bezierCurveTo(a * 33.5, a * 120.609375, a * 33.5, a * 120.609375, a * 3.5, a * 96.109375);
        e.bezierCurveTo(a * 82.5, a * 75.109375, a * 69.5, a * 29.109375, a * 71.5, a * 6.109375);
        e.closePath();
        wt(e, c[1], c[2], a * 10);
        return d;
    }
    function Am(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 163;
        d.height = a * 163;
        e.save();
        e.translate(a * 82.5, a * 81.1015625);
        e.rotate(0);
        xt(e, a * -65.5, a * -66, a * 131, a * 131, a * 5);
        e.restore();
        wt(e, c[1]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        xt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80, a * 17.1015625);
        xt(e, a * -64, a * -4.5, a * 129, a * 9, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        xt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 83.6015625);
        xt(e, a * -4.5, a * -61, a * 9, a * 129, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        xt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 82.6015625);
        xt(e, a * -4.5, a * -65, a * 9, a * 129, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        xt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 80.5, a * 145.6015625);
        xt(e, a * -65.5, a * -4, a * 129, a * 9, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        xt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17, a * 18.1015625);
        xt(e, a * -11, a * -11.5, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        xt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 16.6015625);
        xt(e, a * -10.5, a * -11.5, a * 21, a * 22, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        xt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 145.5, a * 144.1015625);
        xt(e, a * -10.5, a * -11, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        xt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        e.translate(a * 17.5, a * 145.1015625);
        xt(e, a * -11.5, a * -12, a * 22, a * 22, a * 5);
        e.restore();
        wt(e, c[2], c[3], a * 3);
        return d;
    }
    function km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 161;
        d.height = a * 184;
        e.translate(0, a * 10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        wt(e, c[0]);
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 45.5, a * 144.609375);
        e.bezierCurveTo(a * 35.5, a * 155.609375, a * 37, a * 152.109375, a * 28.5, a * 159.609375);
        e.bezierCurveTo(a * 16.5, a * 154.609375, a * 16.5, a * 151.609375, a * 17.5, a * 141.609375);
        e.bezierCurveTo(a * 25.5, a * 134.109375, a * 25.5, a * 134.109375, a * 33.5, a * 126.609375);
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.5, a * 34.609375);
        e.bezierCurveTo(a * 48.5, a * 7.609375, a * 11.5, a * 58.609375, a * 20.5, a * 97.609375);
        e.bezierCurveTo(a * 44.5, a * 161.609375, a * 70.5, a * 171.609375, a * 88.5, a * 156.609375);
        e.bezierCurveTo(a * 120.5, a * 129.609375, a * 123.5, a * 105.609375, a * 128.5, a * 83.609375);
        e.bezierCurveTo(a * 137.5, a * 79.609375, a * 141.5, a * 79.609375, a * 146.5, a * 81.609375);
        e.bezierCurveTo(a * 153.5, a * 70.609375, a * 151.5, a * 65.609375, a * 148.5, a * 61.609375);
        e.bezierCurveTo(a * 134.5, a * 60.609375, a * 131.5, a * 63.609375, a * 127.5, a * 66.609375);
        e.bezierCurveTo(a * 127.5, a * 55.609375, a * 125.5, a * 54.609375, a * 120.5, a * 51.609375);
        e.bezierCurveTo(a * 128.5, a * 42.609375, a * 136.5, a * 38.609375, a * 147.5, a * 39.609375);
        e.bezierCurveTo(a * 152.5, a * 23.609375, a * 147.5, a * 21.609375, a * 140.5, a * 17.609375);
        e.bezierCurveTo(a * 120.5, a * 17.609375, a * 114.5, a * 27.609375, a * 106.5, a * 35.609375);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 104.5, a * 35.609375);
        e.bezierCurveTo(a * 71.5, a * 36.609375, a * 57.5, a * 52.609375, a * 58.5, a * 81.609375);
        e.bezierCurveTo(a * 59.5, a * 103.609375, a * 66.5, a * 107.609375, a * 66.5, a * 116.609375);
        e.bezierCurveTo(a * 67.5, a * 128.609375, a * 65.5, a * 131.609375, a * 63.5, a * 137.609375);
        wt(e, undefined, c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.5, a * 72.609375);
        e.bezierCurveTo(a * 38.5, a * 80.609375, a * 43.5, a * 81.609375, a * 37.5, a * 89.609375);
        wt(e, undefined, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.5, a * 85.609375);
        e.bezierCurveTo(a * 75.5, a * 91.609375, a * 76.5, a * 96.609375, a * 81.5, a * 104.609375);
        wt(e, Nn, c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68.5, a * 122.609375);
        e.bezierCurveTo(a * 79.5, a * 130.609375, a * 74.5, a * 128.609375, a * 80.5, a * 134.609375);
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142.5, a * 18.609375);
        e.bezierCurveTo(a * 151.5, a * 28.609375, a * 151.5, a * 32.609375, a * 146.5, a * 40.609375);
        e.bezierCurveTo(a * 137.5, a * 26.609375, a * 138.5, a * 24.609375, a * 142.5, a * 19.609375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146.5, a * 61.50892639160156);
        e.bezierCurveTo(a * 157.5, a * 69.50892639160156, a * 150.5, a * 79.50892639160156, a * 145.5, a * 81.50892639160156);
        e.bezierCurveTo(a * 140.5, a * 65.50892639160156, a * 144.5, a * 64.50892639160156, a * 146.5, a * 62.50892639160156);
        e.closePath();
        wt(e, c[3]);
        return d;
    }
    function xm(b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        var f = b * 120;
        var g = b * 140;
        d.width = f;
        d.height = g;
        d.width = b * 130;
        d.height = b * 120;
        xt(e, b * 10, b * 12, b * 110, b * 90, b * 10);
        wt(e, c[0]);
        xt(e, b * 10, b * 5, b * 110, b * 90, b * 10);
        wt(e, c[1], c[2], b * 4);
        var a = At(-Math.PI / 5, vd(b * 0.5, kg, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 12, b * 18);
        a = At(Math.PI / 4, uu(b * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
        e.drawImage(a, b * 36, b * 16);
        return d;
    }
    function Jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 145;
        d.height = a * 120;
        e.beginPath();
        e.scale(0.6, 0.6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 18, a * -8);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.beginPath();
        e.scale(1.1, 1.1);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -9, a * 4);
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.scale(1.1, 1.1);
        e.translate(a * -9, a * 4);
        e.save();
        e.translate(a * 100, a * 73.06874084472656);
        e.rotate(0);
        xt(e, a * -61, a * -38.5, a * 122, a * 40, a * 20);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 100, a * 71.36874389648438);
        e.rotate(0);
        xt(e, a * -60.5, a * -18, a * 121, a * 30, a * 20);
        e.restore();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 144, a * 80);
        e.bezierCurveTo(a * 152, a * 100, a * 152, a * 101, a * 153, a * 102);
        e.bezierCurveTo(a * 159, a * 100, a * 159, a * 100, a * 160, a * 100);
        e.bezierCurveTo(a * 161, a * 84, a * 161, a * 84, a * 162, a * 68);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 57, a * 75);
        e.bezierCurveTo(a * 48, a * 101, a * 53, a * 89, a * 48, a * 102);
        e.bezierCurveTo(a * 44, a * 100, a * 44, a * 100, a * 39, a * 97);
        e.bezierCurveTo(a * 39, a * 83, a * 39, a * 83, a * 39, a * 69);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 101, a * 72);
        e.bezierCurveTo(a * 144, a * 69, a * 149, a * 58, a * 162, a * 49);
        e.bezierCurveTo(a * 174, a * 31, a * 173, a * 38, a * 172, a * 45);
        e.bezierCurveTo(a * 168, a * 73, a * 158, a * 75, a * 152, a * 78);
        e.bezierCurveTo(a * 106, a * 89, a * 107, a * 91, a * 107, a * 94);
        e.bezierCurveTo(a * 107, a * 100, a * 107, a * 107, a * 107, a * 107);
        e.bezierCurveTo(a * 99, a * 112, a * 98, a * 110, a * 93, a * 107);
        e.bezierCurveTo(a * 94, a * 107, a * 93, a * 107, a * 93, a * 107);
        e.bezierCurveTo(a * 93, a * 100, a * 93, a * 100, a * 92, a * 94);
        e.bezierCurveTo(a * 92, a * 89, a * 90, a * 90, a * 73, a * 86);
        e.bezierCurveTo(a * 45, a * 81, a * 40, a * 77, a * 35, a * 68);
        e.bezierCurveTo(a * 23, a * 36, a * 28, a * 34, a * 36, a * 46);
        e.bezierCurveTo(a * 45, a * 58, a * 83, a * 72, a * 98, a * 72);
        e.closePath();
        wt(e, c[4], c[5], a * 4);
        e.translate(0, 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115.5, a * 116.07290649414062);
        e.bezierCurveTo(a * 159.5, a * 99.07290649414062, a * 159.5, a * 98.07290649414062, a * 159.5, a * 98.07290649414062);
        e.bezierCurveTo(a * 155.5, a * 116.07290649414062, a * 159.5, a * 116.07290649414062, a * 159.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 147.5, a * 130.07290649414062, a * 136.5, a * 132.07290649414062, a * 115.5, a * 138.07290649414062);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.5, a * 96.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 114.07290649414062, a * 62.5, a * 105.57290649414062, a * 85.5, a * 115.07290649414062);
        e.bezierCurveTo(a * 85.5, a * 125.57290649414062, a * 85.5, a * 125.57290649414062, a * 85.5, a * 136.07290649414062);
        e.bezierCurveTo(a * 51.5, a * 129.07290649414062, a * 51.5, a * 125.07290649414062, a * 41.5, a * 118.07290649414062);
        e.bezierCurveTo(a * 44.5, a * 106.07290649414062, a * 42.5, a * 103.07290649414062, a * 40.5, a * 96.07290649414062);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        wt(e, c[3], c[2], a * 4);
        e.scale(0.5, 0.5);
        e.translate(a * 100, a * 71);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86, a * 80);
        e.bezierCurveTo(a * 97, a * 88, a * 106, a * 84, a * 112, a * 80);
        e.bezierCurveTo(a * 112, a * 62, a * 106, a * 59, a * 99, a * 54);
        e.bezierCurveTo(a * 86, a * 62, a * 86, a * 73, a * 86, a * 80);
        e.closePath();
        wt(e, c[6], c[2], a * 4);
        return d;
    }
    function Mm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 247;
        d.height = a * 247;
        e.translate(0, a * 10);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 150, a * 62);
        e.bezierCurveTo(a * 151.5, a * 71.5, a * 149, a * 70, a * 153, a * 81);
        e.bezierCurveTo(a * 158, a * 73.5, a * 158, a * 73.5, a * 163, a * 66);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 164, a * 171);
        e.bezierCurveTo(a * 149, a * 159, a * 156.5, a * 165, a * 149, a * 159);
        e.bezierCurveTo(a * 149, a * 167, a * 149, a * 170, a * 152, a * 178);
        e.closePath();
        wt(e, c[5]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        wt(e, c[1], c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137, a * 137);
        e.bezierCurveTo(a * 145, a * 125, a * 138, a * 108, a * 123, a * 104);
        e.bezierCurveTo(a * 81, a * 101, a * 88, a * 77, a * 98, a * 65);
        e.bezierCurveTo(a * 117, a * 38, a * 138, a * 39, a * 165, a * 52);
        e.bezierCurveTo(a * 197, a * 72, a * 207, a * 111, a * 197, a * 140);
        e.bezierCurveTo(a * 182, a * 180, a * 161, a * 197, a * 112, a * 194);
        e.bezierCurveTo(a * 58, a * 194, a * 37, a * 170, a * 34, a * 142);
        e.bezierCurveTo(a * 29, a * 102, a * 40, a * 63, a * 51, a * 45);
        e.bezierCurveTo(a * 43, a * 78, a * 41, a * 103, a * 43, a * 122);
        e.bezierCurveTo(a * 51, a * 158, a * 63, a * 174, a * 95, a * 179);
        e.bezierCurveTo(a * 129, a * 186, a * 169, a * 172, a * 177, a * 144);
        e.bezierCurveTo(a * 197, a * 105, a * 172, a * 76, a * 160, a * 71);
        e.bezierCurveTo(a * 125, a * 52, a * 111, a * 73, a * 111, a * 81);
        e.bezierCurveTo(a * 106, a * 93, a * 140, a * 92, a * 147, a * 107);
        e.bezierCurveTo(a * 153, a * 128, a * 140, a * 135, a * 137, a * 139);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 132, a * 95);
        e.bezierCurveTo(a * 154, a * 102, a * 154, a * 126, a * 137, a * 139);
        e.bezierCurveTo(a * 113, a * 152, a * 89, a * 136, a * 80, a * 121);
        e.bezierCurveTo(a * 57, a * 89, a * 69, a * 63, a * 79, a * 52);
        e.bezierCurveTo(a * 110, a * 20, a * 139, a * 21, a * 150, a * 25);
        e.bezierCurveTo(a * 197, a * 36, a * 221, a * 67, a * 226, a * 90);
        e.bezierCurveTo(a * 234, a * 134, a * 214, a * 177, a * 195, a * 197);
        e.bezierCurveTo(a * 144, a * 242, a * 79, a * 216, a * 58, a * 206);
        e.bezierCurveTo(a * 13, a * 174, a * 20, a * 134, a * 23, a * 107);
        e.bezierCurveTo(a * 26, a * 78, a * 33, a * 60, a * 38, a * 43);
        e.bezierCurveTo(a * 42, a * 32, a * 47, a * 32, a * 50, a * 36);
        e.bezierCurveTo(a * 54, a * 37, a * 50, a * 52, a * 44, a * 87);
        e.bezierCurveTo(a * 40, a * 115, a * 46, a * 142, a * 57, a * 158);
        e.bezierCurveTo(a * 76, a * 189, a * 129, a * 182, a * 152, a * 173);
        e.bezierCurveTo(a * 186, a * 156, a * 191, a * 106, a * 176, a * 85);
        e.bezierCurveTo(a * 159, a * 61, a * 132, a * 62, a * 122, a * 66);
        e.bezierCurveTo(a * 108, a * 74, a * 108, a * 89, a * 116, a * 90);
        e.bezierCurveTo(a * 123, a * 92, a * 130, a * 93, a * 131, a * 94);
        e.closePath();
        wt(e, undefined, c[2], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 63);
        e.bezierCurveTo(a * 91, a * 64, a * 96, a * 62, a * 98, a * 53);
        e.bezierCurveTo(a * 91, a * 45, a * 85, a * 42, a * 78, a * 41);
        e.bezierCurveTo(a * 81, a * 51, a * 82, a * 57, a * 82, a * 63);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 148, a * 40);
        e.bezierCurveTo(a * 140, a * 52, a * 131, a * 51, a * 123, a * 43);
        e.bezierCurveTo(a * 123, a * 25, a * 129, a * 17, a * 134, a * 12);
        e.bezierCurveTo(a * 138, a * 35, a * 142, a * 31, a * 148, a * 40);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 189, a * 43);
        e.bezierCurveTo(a * 191, a * 54, a * 196, a * 58, a * 205, a * 59);
        e.bezierCurveTo(a * 211, a * 42, a * 214, a * 37, a * 216, a * 31);
        e.bezierCurveTo(a * 202, a * 34, a * 195, a * 39, a * 190, a * 43);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 98);
        e.bezierCurveTo(a * 219, a * 105, a * 225, a * 107, a * 230, a * 109);
        e.bezierCurveTo(a * 227, a * 113, a * 221, a * 115, a * 215, a * 115);
        e.bezierCurveTo(a * 208, a * 109, a * 211, a * 101, a * 216, a * 98);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 180, a * 85);
        e.bezierCurveTo(a * 193, a * 86, a * 196, a * 98, a * 191, a * 108);
        e.bezierCurveTo(a * 179, a * 112, a * 167, a * 113, a * 155, a * 111);
        e.bezierCurveTo(a * 169, a * 100, a * 176, a * 96, a * 180, a * 85);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 96, a * 114);
        e.bezierCurveTo(a * 102, a * 109, a * 112, a * 110, a * 114, a * 118);
        e.bezierCurveTo(a * 111, a * 134, a * 102, a * 143, a * 95, a * 147);
        e.bezierCurveTo(a * 98, a * 123, a * 97, a * 119, a * 96, a * 115);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 92);
        e.bezierCurveTo(a * 86, a * 95, a * 89, a * 102, a * 83, a * 111);
        e.bezierCurveTo(a * 70, a * 110, a * 61, a * 107, a * 54, a * 100);
        e.bezierCurveTo(a * 70, a * 97, a * 70, a * 95, a * 78, a * 92);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39, a * 130);
        e.bezierCurveTo(a * 37, a * 141, a * 41, a * 143, a * 48, a * 144);
        e.bezierCurveTo(a * 54, a * 134, a * 55, a * 131, a * 56, a * 123);
        e.bezierCurveTo(a * 47, a * 129, a * 43, a * 129, a * 39, a * 129);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 113, a * 189);
        e.bezierCurveTo(a * 119, a * 201, a * 127, a * 198, a * 134, a * 192);
        e.bezierCurveTo(a * 128, a * 175, a * 128, a * 173, a * 128, a * 165);
        e.bezierCurveTo(a * 117, a * 176, a * 116, a * 182, a * 113, a * 187);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 74, a * 154);
        e.bezierCurveTo(a * 76, a * 163, a * 76, a * 170, a * 75, a * 177);
        e.bezierCurveTo(a * 68, a * 179, a * 66, a * 176, a * 63, a * 171);
        e.bezierCurveTo(a * 69, a * 164, a * 72, a * 159, a * 74, a * 154);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206, a * 152);
        e.bezierCurveTo(a * 198, a * 158, a * 198, a * 166, a * 201, a * 171);
        e.bezierCurveTo(a * 209, a * 170, a * 221, a * 170, a * 226, a * 172);
        e.bezierCurveTo(a * 219, a * 159, a * 210, a * 155, a * 207, a * 153);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 181, a * 184);
        e.bezierCurveTo(a * 170, a * 184, a * 167, a * 187, a * 163, a * 195);
        e.bezierCurveTo(a * 171, a * 207, a * 183, a * 214, a * 191, a * 217);
        e.bezierCurveTo(a * 183, a * 204, a * 184, a * 196, a * 181, a * 184);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 66, a * 199);
        e.bezierCurveTo(a * 73, a * 197, a * 78, a * 199, a * 79, a * 206);
        e.bezierCurveTo(a * 71, a * 216, a * 67, a * 221, a * 57, a * 223);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 143);
        e.bezierCurveTo(a * 183, a * 146, a * 183, a * 149, a * 179, a * 152);
        e.bezierCurveTo(a * 174, a * 146, a * 174, a * 146, a * 169, a * 140);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 32, a * 159);
        e.bezierCurveTo(a * 45, a * 160, a * 48, a * 164, a * 45, a * 175);
        e.bezierCurveTo(a * 28, a * 183, a * 25, a * 184, a * 19, a * 184);
        e.bezierCurveTo(a * 30, a * 170, a * 29, a * 164, a * 31, a * 160);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110, a * 214);
        e.bezierCurveTo(a * 106, a * 212, a * 104, a * 213, a * 102, a * 218);
        e.bezierCurveTo(a * 104, a * 220, a * 107, a * 222, a * 110, a * 224);
        e.bezierCurveTo(a * 110.5, a * 219, a * 110.5, a * 219, a * 111, a * 214);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 40, a * 52);
        e.bezierCurveTo(a * 41, a * 57, a * 40, a * 61, a * 34, a * 60);
        e.bezierCurveTo(a * 31.5, a * 55, a * 31.5, a * 55, a * 29, a * 50);
        e.bezierCurveTo(a * 34, a * 50.5, a * 34, a * 50.5, a * 39, a * 51);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 81);
        e.bezierCurveTo(a * 37, a * 84, a * 38, a * 90, a * 34, a * 99);
        e.bezierCurveTo(a * 23, a * 97, a * 19, a * 96, a * 16, a * 93);
        e.bezierCurveTo(a * 24, a * 88, a * 28, a * 85, a * 30, a * 81);
        e.closePath();
        wt(e, c[4], c[5], a * 5);
        return d;
    }
    function Bm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -165, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217, a * 103);
        d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
        d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
        d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
        d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
        d.closePath();
        wt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 231, a * 163);
        d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
        d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
        d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
        d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
        d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
        d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
        d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
        d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
        d.closePath();
        wt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 234, a * 154);
        d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
        d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
        d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
        d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
        d.closePath();
        wt(d, b[2]);
        return c;
    }
    function Dm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 450;
        d.height = a * 790;
        e.translate(a * 5, a * 5);
        e.globalAlpha = b ? 0 : 0;
        zt(e, a * 178.5, a * 172.828125, a * 150);
        wt(e, Fh, c[0], a * 65);
        zt(e, a * 178.5, a * 172.828125, a * 150);
        wt(e, Oo, c[0], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        xt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 136, a * 581.828125);
        xt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        wt(e, c[0]);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        xt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 140, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 176.5, a * 295.328125, a * 213, a * 295.828125);
        e.bezierCurveTo(a * 201.5, a * 325.328125, a * 201.5, a * 325.328125, a * 190, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 161, a * 356.828125);
        e.bezierCurveTo(a * 154.5, a * 328.828125, a * 154.5, a * 328.828125, a * 148, a * 300.828125);
        e.closePath();
        wt(e, c[0]);
        e.translate(3, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        wt(e, c[0], c[0], a * 7);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * 15, a * 35);
        zt(e, a * 178.5, a * 172.828125, a * 150);
        wt(e, Cq, c[2], a * 95);
        zt(e, a * 178.5, a * 172.828125, a * 150);
        wt(e, undefined, c[1], a * 55);
        e.closePath();
        e.save();
        e.translate(a * 177, a * 512.328125);
        xt(e, a * -25, a * -202.5, a * 65, a * 405, a * 25);
        e.restore();
        wt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 136, a * 581.828125);
        xt(e, a * -39, a * -23, a * 78, a * 46, a * 25);
        e.restore();
        wt(e, c[1], c[2], a * 20);
        e.save();
        e.translate(a * 135.5, a * 663.828125);
        xt(e, a * -39.5, a * -22, a * 79, a * 44, a * 25);
        e.restore();
        wt(e, c[1], c[2], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 114, a * 594.828125);
        e.bezierCurveTo(a * 175, a * 596.828125, a * 163, a * 596.828125, a * 172, a * 594.828125);
        e.bezierCurveTo(a * 171.5, a * 633.828125, a * 171.5, a * 633.828125, a * 171, a * 672.828125);
        e.bezierCurveTo(a * 110, a * 673.828125, a * 140.5, a * 673.328125, a * 110, a * 673.828125);
        e.bezierCurveTo(a * 110.5, a * 661.828125, a * 110.5, a * 661.828125, a * 111, a * 649.828125);
        e.bezierCurveTo(a * 157, a * 633.828125, a * 134, a * 607.828125, a * 114, a * 594.828125);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(0, a * 5);
        e.moveTo(a * 123, a * 294.828125);
        e.bezierCurveTo(a * 212, a * 295.828125, a * 190.5, a * 295.328125, a * 250, a * 295.828125);
        e.bezierCurveTo(a * 231.5, a * 325.328125, a * 231.5, a * 325.328125, a * 220, a * 354.828125);
        e.bezierCurveTo(a * 175.5, a * 355.828125, a * 175.5, a * 355.828125, a * 140, a * 356.828125);
        e.bezierCurveTo(a * 123.5, a * 328.828125, a * 123.5, a * 328.828125, a * 123, a * 294.828125);
        e.closePath();
        wt(e, c[1]);
        e.translate(0, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 159, a * 679.828125);
        e.bezierCurveTo(a * 180, a * 665.828125, a * 155, a * 675.828125, a * 151, a * 671.828125);
        e.bezierCurveTo(a * 154.5, a * 685.328125, a * 154.5, a * 685.328125, a * 158, a * 698.828125);
        e.bezierCurveTo(a * 171, a * 699.828125, a * 171, a * 699.828125, a * 184, a * 700.828125);
        e.closePath();
        wt(e, c[1]);
        e.save();
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157, a * 548.828125);
        e.bezierCurveTo(a * 157, a * 561.828125, a * 157, a * 561.828125, a * 157, a * 574.828125);
        e.bezierCurveTo(a * 132.5, a * 580.828125, a * 132.5, a * 580.828125, a * 108, a * 586.828125);
        e.bezierCurveTo(a * 112, a * 599.828125, a * 111, a * 593.828125, a * 112, a * 599.828125);
        e.bezierCurveTo(a * 159, a * 603.828125, a * 126.5, a * 601.328125, a * 141, a * 602.828125);
        e.bezierCurveTo(a * 145, a * 641.828125, a * 143.5, a * 623.828125, a * 146, a * 644.828125);
        e.bezierCurveTo(a * 129.5, a * 645.328125, a * 129.5, a * 645.328125, a * 113, a * 645.828125);
        e.bezierCurveTo(a * 107.5, a * 652.828125, a * 107.5, a * 652.828125, a * 102, a * 659.828125);
        e.bezierCurveTo(a * 104, a * 669.328125, a * 104, a * 669.328125, a * 106, a * 678.828125);
        e.bezierCurveTo(a * 145, a * 679.328125, a * 145, a * 679.328125, a * 184, a * 679.828125);
        e.bezierCurveTo(a * 185, a * 615.828125, a * 185, a * 615.828125, a * 186, a * 551.828125);
        e.bezierCurveTo(a * 172.5, a * 551.328125, a * 172.5, a * 551.328125, a * 159, a * 550.828125);
        e.closePath();
        wt(e, c[1], c[1], a * 7);
        e.restore();
        return d;
    }
    function Em(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 102;
        d.height = a * 102;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(3, 3);
        xt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        wt(e, c[0]);
        xt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        wt(e, c[0]);
        xt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[0]);
        xt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[0]);
        xt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(-3, -3);
        xt(e, a * 24, a * 26, a * 70, a * 9, a * 10);
        wt(e, c[1]);
        xt(e, a * 26, a * 70, a * 70, a * 9, a * 10);
        wt(e, c[1]);
        xt(e, a * 5, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[2], c[3], a * 4);
        xt(e, a * 40, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[2], c[3], a * 4);
        xt(e, a * 75, a * 3, a * 22, a * 94, a * 5);
        wt(e, c[2], c[3], a * 4);
        return d;
    }
    function Im(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.globalAlpha = 1;
        e.translate(a * 20, a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        wt(e, c[0]);
        e.translate(a * -20, a * -20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        wt(e, c[1], c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        wt(e, undefined, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        wt(e, xh, c[2], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        wt(e, c[3], c[2], a * 19);
        zt(e, a * 92.5, a * 216.0625, a * 13.892443989449804);
        wt(e, c[4]);
        zt(e, a * 68.5, a * 227.0625, a * 8.06225774829855);
        wt(e, c[4]);
        zt(e, a * 85.5, a * 240.0625, a * 6.708203932499369);
        wt(e, c[4]);
        zt(e, a * 147.5, a * 294.0625, a * 17.46424919657298);
        wt(e, c[4]);
        zt(e, a * 166.5, a * 273.0625, a * 6.708203932499369);
        wt(e, c[4]);
        zt(e, a * 114.5, a * 294.0625, a * 12.36931687685298);
        wt(e, c[4]);
        zt(e, a * 123.5, a * 220.0625, a * 5.830951894845301);
        wt(e, c[4]);
        zt(e, a * 114.5, a * 259.0625, a * 4.123105625617661);
        wt(e, c[4]);
        zt(e, a * 63.5, a * 265.0625, a * 5.385164807134504);
        wt(e, c[4]);
        zt(e, a * 148.5, a * 235.0625, a * 4.47213595499958);
        wt(e, c[4]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        wt(e, c[5]);
        return d;
    }
    function Sm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 137;
        d.height = a * 129;
        e.globalAlpha = 0.5;
        zt(e, a * 69, a * 64, a * 48.16637831516918);
        wt(e, c[1]);
        e.globalAlpha = 0.7;
        zt(e, a * 69, a * 64, a * 38.23105625617661);
        wt(e, c[2]);
        e.globalAlpha = 0.7;
        zt(e, a * 69, a * 64, a * 32.01562118716424);
        wt(e, c[2], c[3], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 72, a * 41);
        e.bezierCurveTo(a * 52, a * 41, a * 48, a * 50, a * 45, a * 58);
        e.bezierCurveTo(a * 43, a * 67, a * 45, a * 68, a * 46, a * 72);
        e.bezierCurveTo(a * 52, a * 53, a * 60, a * 48, a * 72, a * 42);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 93, a * 62);
        e.bezierCurveTo(a * 95, a * 72, a * 90, a * 81, a * 81, a * 87);
        e.bezierCurveTo(a * 74, a * 91, a * 69, a * 89, a * 64, a * 88);
        e.bezierCurveTo(a * 77, a * 83, a * 84, a * 82, a * 92, a * 62);
        e.closePath();
        wt(e, c[3]);
        return d;
    }
    function Qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 272;
        d.height = a * 264;
        e.translate(0, a * 20);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        wt(e, c[0]);
        e.translate(0, a * -20);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56.999969482421875, a * 84.517333984375);
        e.bezierCurveTo(a * 61.999969482421875, a * 58.517333984375, a * 79.99996948242188, a * 50.517333984375, a * 102.99996948242188, a * 50.517333984375);
        e.bezierCurveTo(a * 119.99996948242188, a * 26.517333984375, a * 137.99996948242188, a * 32.517333984375, a * 156.99996948242188, a * 44.517333984375);
        e.bezierCurveTo(a * 187.99996948242188, a * 42.517333984375, a * 195.99996948242188, a * 50.517333984375, a * 202.99996948242188, a * 77.517333984375);
        e.bezierCurveTo(a * 229.99996948242188, a * 80.517333984375, a * 231.99996948242188, a * 96.517333984375, a * 229.99996948242188, a * 118.517333984375);
        e.bezierCurveTo(a * 241.99996948242188, a * 147.517333984375, a * 236.99996948242188, a * 148.517333984375, a * 220.99996948242188, a * 165.517333984375);
        e.bezierCurveTo(a * 222.99996948242188, a * 192.517333984375, a * 209.99996948242188, a * 212.517333984375, a * 177.99996948242188, a * 213.517333984375);
        e.bezierCurveTo(a * 159.99996948242188, a * 234.517333984375, a * 141.99996948242188, a * 234.517333984375, a * 116.99996948242188, a * 222.517333984375);
        e.bezierCurveTo(a * 72.99996948242188, a * 226.517333984375, a * 66.99996948242188, a * 207.517333984375, a * 65.99996948242188, a * 190.517333984375);
        e.bezierCurveTo(a * 35.999969482421875, a * 180.517333984375, a * 30.999969482421875, a * 162.517333984375, a * 39.999969482421875, a * 135.517333984375);
        e.bezierCurveTo(a * 23.999969482421875, a * 110.517333984375, a * 43.999969482421875, a * 90.517333984375, a * 55.999969482421875, a * 85.517333984375);
        e.closePath();
        wt(e, c[1], c[2], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.99996948242188, a * 116.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 74.18402099609375, a * 109.99996948242188, a * 63.18402099609375);
        e.bezierCurveTo(a * 115.99996948242188, a * 69.18402099609375, a * 125.99996948242188, a * 87.18402099609375, a * 137.99996948242188, a * 112.18402099609375);
        e.bezierCurveTo(a * 142.99996948242188, a * 84.18402099609375, a * 143.99996948242188, a * 76.18402099609375, a * 153.99996948242188, a * 62.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 79.18402099609375, a * 149.99996948242188, a * 110.18402099609375, a * 151.99996948242188, a * 117.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 104.18402099609375, a * 180.99996948242188, a * 91.18402099609375, a * 191.99996948242188, a * 91.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 102.18402099609375, a * 180.99996948242188, a * 106.18402099609375, a * 160.99996948242188, a * 124.18402099609375);
        e.bezierCurveTo(a * 190.99996948242188, a * 121.18402099609375, a * 199.99996948242188, a * 120.18402099609375, a * 207.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 199.99996948242188, a * 129.18402099609375, a * 181.99996948242188, a * 132.18402099609375, a * 160.99996948242188, a * 135.18402099609375);
        e.bezierCurveTo(a * 179.99996948242188, a * 142.18402099609375, a * 193.99996948242188, a * 151.18402099609375, a * 196.99996948242188, a * 156.18402099609375);
        e.bezierCurveTo(a * 185.99996948242188, a * 156.18402099609375, a * 163.99996948242188, a * 149.18402099609375, a * 152.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 157.99996948242188, a * 155.18402099609375, a * 165.99996948242188, a * 176.18402099609375, a * 169.99996948242188, a * 195.18402099609375);
        e.bezierCurveTo(a * 162.99996948242188, a * 190.18402099609375, a * 147.99996948242188, a * 167.18402099609375, a * 139.99996948242188, a * 153.18402099609375);
        e.bezierCurveTo(a * 137.99996948242188, a * 167.18402099609375, a * 126.99996948242188, a * 194.18402099609375, a * 119.99996948242188, a * 204.18402099609375);
        e.bezierCurveTo(a * 117.99996948242188, a * 186.18402099609375, a * 123.99996948242188, a * 165.18402099609375, a * 126.99996948242188, a * 149.18402099609375);
        e.bezierCurveTo(a * 110.99996948242188, a * 163.18402099609375, a * 103.99996948242188, a * 170.18402099609375, a * 82.99996948242188, a * 177.18402099609375);
        e.bezierCurveTo(a * 90.99996948242188, a * 162.18402099609375, a * 99.99996948242188, a * 153.18402099609375, a * 117.99996948242188, a * 140.18402099609375);
        e.bezierCurveTo(a * 97.99996948242188, a * 140.18402099609375, a * 83.99996948242188, a * 139.18402099609375, a * 65.99996948242188, a * 132.18402099609375);
        e.bezierCurveTo(a * 77.99996948242188, a * 127.18402099609375, a * 95.99996948242188, a * 127.18402099609375, a * 115.99996948242188, a * 127.18402099609375);
        e.bezierCurveTo(a * 91.99996948242188, a * 113.18402099609375, a * 84.99996948242188, a * 107.18402099609375, a * 76.99996948242188, a * 96.18402099609375);
        e.bezierCurveTo(a * 94.99996948242188, a * 99.18402099609375, a * 109.99996948242188, a * 109.18402099609375, a * 123.99996948242188, a * 116.18402099609375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 131.99996948242188, a * 119.18402099609375);
        e.bezierCurveTo(a * 141.99996948242188, a * 119.18402099609375, a * 145.99996948242188, a * 116.18402099609375, a * 147.99996948242188, a * 109.18402099609375);
        e.bezierCurveTo(a * 151.99996948242188, a * 107.18402099609375, a * 159.99996948242188, a * 107.18402099609375, a * 156.99996948242188, a * 123.18402099609375);
        e.bezierCurveTo(a * 155.99996948242188, a * 140.18402099609375, a * 142.99996948242188, a * 149.18402099609375, a * 132.99996948242188, a * 147.18402099609375);
        e.bezierCurveTo(a * 119.99996948242188, a * 144.18402099609375, a * 113.99996948242188, a * 122.18402099609375, a * 131.99996948242188, a * 119.18402099609375);
        e.closePath();
        wt(e, c[4], c[5], a * 6);
        return d;
    }
    function _m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        zt(e, a * 220, a * 201, a * 170.41713528867922);
        wt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        zt(e, a * 220, a * 201, a * 170.41713528867922);
        wt(e, c[1], c[2], a * 6);
        zt(e, a * 220, a * 201, a * 130);
        wt(e, c[11], c[2], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        wt(e, c[5], c[6], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 142, a * 223);
        e.bezierCurveTo(a * 128, a * 213, a * 123, a * 214, a * 111, a * 223);
        e.closePath();
        wt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 133);
        e.bezierCurveTo(a * 269, a * 188, a * 262, a * 229, a * 251, a * 253);
        e.bezierCurveTo(a * 288, a * 224, a * 273, a * 139, a * 252, a * 133);
        e.closePath();
        wt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 203, a * 102);
        e.bezierCurveTo(a * 204, a * 136, a * 200, a * 159, a * 189, a * 174);
        e.bezierCurveTo(a * 223, a * 164, a * 219, a * 87, a * 205, a * 83);
        e.closePath();
        wt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 196, a * 324);
        e.bezierCurveTo(a * 209, a * 239, a * 200, a * 219, a * 192, a * 196);
        e.bezierCurveTo(a * 229, a * 216, a * 219, a * 316, a * 198, a * 325);
        e.closePath();
        wt(e, c[10], c[10], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 266, a * 166);
        e.bezierCurveTo(a * 249, a * 154, a * 243, a * 161, a * 233, a * 167);
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 269, a * 192);
        e.bezierCurveTo(a * 256, a * 183, a * 241, a * 186, a * 233, a * 192);
        wt(e, Fh, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 217);
        e.bezierCurveTo(a * 251, a * 211, a * 242, a * 213, a * 236, a * 218);
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 204, a * 141);
        e.bezierCurveTo(a * 191, a * 131, a * 187, a * 133, a * 176, a * 141);
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 230);
        e.bezierCurveTo(a * 193, a * 222, a * 185, a * 224, a * 177, a * 231);
        wt(e, Kq, c[6], a * 6);
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 210, a * 258);
        e.bezierCurveTo(a * 196, a * 247, a * 191, a * 250, a * 177, a * 259);
        wt(e, ij, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 196);
        e.bezierCurveTo(a * 130, a * 186, a * 124, a * 187, a * 114, a * 195);
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 218, a * 97);
        e.bezierCurveTo(a * 219, a * 163, a * 201, a * 176, a * 191, a * 175);
        e.bezierCurveTo(a * 176, a * 177, a * 168, a * 167, a * 160, a * 115);
        e.closePath();
        wt(e, sr, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 224, a * 181);
        e.bezierCurveTo(a * 225, a * 138, a * 246, a * 115, a * 263, a * 137);
        e.bezierCurveTo(a * 282, a * 174, a * 279, a * 217, a * 265, a * 243);
        e.bezierCurveTo(a * 253, a * 264, a * 240, a * 256, a * 233, a * 238);
        e.bezierCurveTo(a * 221, a * 212, a * 225, a * 198, a * 224, a * 184);
        e.closePath();
        wt(e, es, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 169, a * 289);
        e.bezierCurveTo(a * 161, a * 234, a * 168, a * 197, a * 187, a * 195);
        e.bezierCurveTo(a * 219, a * 189, a * 222, a * 256, a * 216, a * 307);
        e.closePath();
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 143, a * 146);
        e.bezierCurveTo(a * 161, a * 199, a * 151, a * 245, a * 138, a * 266);
        e.bezierCurveTo(a * 120.5, a * 239.5, a * 120.5, a * 239.5, a * 103, a * 213);
        e.closePath();
        wt(e, ij, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 283, a * 135);
        e.bezierCurveTo(a * 277, a * 176, a * 298, a * 194, a * 315, a * 205);
        e.bezierCurveTo(a * 323.5, a * 175, a * 323.5, a * 175, a * 332, a * 145);
        e.closePath();
        wt(e, undefined, c[6], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 318, a * 223);
        e.bezierCurveTo(a * 290, a * 195, a * 271, a * 256, a * 283, a * 281);
        e.bezierCurveTo(a * 303.5, a * 267, a * 303.5, a * 267, a * 324, a * 253);
        e.closePath();
        wt(e, ij, c[6], a * 6);
        zt(e, a * 222, a * 199, a * 120.74767078498864);
        wt(e, undefined, c[3], a * 40);
        zt(e, a * 220, a * 200, a * 95.44108130150245);
        wt(e, undefined, c[2], a * 15);
        zt(e, a * 220, a * 201, a * 85);
        wt(e, pl, c[4], a * 10);
        e.globalAlpha = 0.5;
        zt(e, a * 220, a * 201, a * 82);
        wt(e, c[9]);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        zt(e, a * 63, a * 136, a * 49.193495504995376);
        wt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        zt(e, a * 63, a * 136, a * 49.193495504995376);
        wt(e, c[8], c[2], a * 4);
        zt(e, a * 63, a * 137, a * 25.632011235952593);
        wt(e, c[7], c[2], a * 4);
        return d;
    }
    function Fm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.save();
        e.translate(a * 204, a * 195.0833282470703);
        e.rotate(10.16);
        xt(e, a * -97.5, a * -134.5, a * 195, a * 269, a * 10);
        e.restore();
        wt(e, c[0], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.5, a * 226.5833282470703);
        e.bezierCurveTo(a * 120.5, a * 281.5833282470703, a * 120.5, a * 281.5833282470703, a * 182.5, a * 336.5833282470703);
        e.bezierCurveTo(a * 263, a * 248.5833282470703, a * 263, a * 248.5833282470703, a * 343.5, a * 160.5833282470703);
        e.bezierCurveTo(a * 280.5, a * 104.58332824707031, a * 280.5, a * 104.58332824707031, a * 217.5, a * 48.58332824707031);
        e.closePath();
        wt(e, c[2], c[3], a * 4);
        e.save();
        e.translate(a * 197, a * 169.0833282470703);
        e.rotate(10.16);
        xt(e, a * -93.5, a * -126.5, a * 187, a * 253, a * 10);
        e.restore();
        wt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.5, a * 24.583328247070312);
        e.bezierCurveTo(a * 58.5, a * 207.5833282470703, a * 143, a * 116.58332824707031, a * 59.5, a * 208.5833282470703);
        e.closePath();
        wt(e, ts, c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 202.64999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 215.64999389648438, a * 46.133331298828125, a * 228.64999389648438);
        e.closePath();
        wt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 55.133331298828125, a * 211.64999389648438);
        e.bezierCurveTo(a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 225.14999389648438, a * 55.133331298828125, a * 238.64999389648438);
        e.bezierCurveTo(a * 50.133331298828125, a * 235.64999389648438, a * 50.133331298828125, a * 235.64999389648438, a * 45.133331298828125, a * 232.64999389648438);
        e.bezierCurveTo(a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 216.64999389648438, a * 45.133331298828125, a * 200.64999389648438);
        e.closePath();
        wt(e, c[4], c[1], a * 8);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 46.133331298828125, a * 198.39999389648438);
        e.bezierCurveTo(a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 199.89999389648438, a * 46.133331298828125, a * 201.39999389648438);
        e.closePath();
        wt(e, c[4], c[1], a * 8);
        e.save();
        e.translate(a * 249.63333129882812, a * 120.89999389648438);
        e.rotate(7.04);
        xt(e, a * -58.5, a * -32, a * 117, a * 64, a * 10);
        e.restore();
        wt(e, c[5]);
        return d;
    }
    function Rm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 271;
        c.height = a * 366;
        d.globalAlpha = 0.5;
        d.translate(0, a * 10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        wt(d, b[0]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(0, a * -10);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        wt(d, b[3], b[3], a * 8);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 99);
        d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
        d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
        d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
        d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
        d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
        d.closePath();
        wt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 73, a * 270);
        d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
        d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
        d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
        d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
        d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
        d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
        d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
        d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
        d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
        d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
        d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
        d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
        d.closePath();
        wt(d, b[5]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 76, a * 252);
        d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
        d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
        d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
        d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
        d.closePath();
        wt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 84, a * 257);
        d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
        d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
        d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
        d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
        d.closePath();
        wt(d, b[1]);
        zt(d, a * 102, a * 269, a * 11);
        wt(d, b[3]);
        zt(d, a * 98, a * 266, a * 5);
        wt(d, b[6]);
        zt(d, a * 168, a * 269, a * 11);
        wt(d, b[3]);
        zt(d, a * 164, a * 266, a * 5);
        wt(d, b[6]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 125, a * 65);
        d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
        d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
        d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
        d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
        d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
        d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
        d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
        d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
        d.closePath();
        wt(d, b[2]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 235);
        d.bezierCurveTo(a * 118, a * 258, a * 137, a * 268, a * 148, a * 246);
        d.bezierCurveTo(a * 156, a * 228, a * 152, a * 169, a * 150, a * 140);
        d.bezierCurveTo(a * 147, a * 87, a * 143, a * 69, a * 142, a * 60);
        d.bezierCurveTo(a * 136, a * 44, a * 132, a * 43, a * 127, a * 62);
        d.bezierCurveTo(a * 119, a * 116, a * 119, a * 140, a * 116, a * 166);
        d.bezierCurveTo(a * 113, a * 202, a * 113, a * 223, a * 115, a * 233);
        d.closePath();
        wt(d, b[4]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 132, a * 219);
        d.bezierCurveTo(a * 140, a * 229, a * 142, a * 231, a * 145, a * 237);
        d.bezierCurveTo(a * 145, a * 245, a * 139, a * 249, a * 133, a * 249);
        d.bezierCurveTo(a * 123, a * 248, a * 123, a * 243, a * 121, a * 239);
        d.bezierCurveTo(a * 126, a * 227, a * 129, a * 223, a * 132, a * 219);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 179);
        d.bezierCurveTo(a * 140, a * 188.5, a * 140, a * 188.5, a * 147, a * 198);
        d.bezierCurveTo(a * 148, a * 209, a * 142, a * 214, a * 133, a * 214);
        d.bezierCurveTo(a * 121, a * 211, a * 121, a * 207, a * 120, a * 200);
        d.bezierCurveTo(a * 126.5, a * 189.5, a * 126.5, a * 189.5, a * 133, a * 179);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 143);
        d.bezierCurveTo(a * 139, a * 151.5, a * 139, a * 151.5, a * 145, a * 160);
        d.bezierCurveTo(a * 143, a * 167, a * 140, a * 170, a * 134, a * 170);
        d.bezierCurveTo(a * 128, a * 169, a * 124, a * 167, a * 123, a * 161);
        d.bezierCurveTo(a * 128, a * 152, a * 128, a * 152, a * 133, a * 143);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 115);
        d.bezierCurveTo(a * 137.5, a * 121.5, a * 137.5, a * 121.5, a * 142, a * 128);
        d.bezierCurveTo(a * 141, a * 133, a * 138, a * 135, a * 133, a * 135);
        d.bezierCurveTo(a * 129, a * 135, a * 125, a * 132, a * 125, a * 129);
        d.bezierCurveTo(a * 129, a * 122, a * 129, a * 122, a * 133, a * 115);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 133, a * 94);
        d.bezierCurveTo(a * 136.5, a * 98.5, a * 136.5, a * 98.5, a * 140, a * 103);
        d.bezierCurveTo(a * 139, a * 109, a * 137, a * 109, a * 133, a * 110);
        d.bezierCurveTo(a * 127, a * 108, a * 129, a * 107, a * 127, a * 105);
        d.bezierCurveTo(a * 130, a * 99.5, a * 130, a * 99.5, a * 133, a * 94);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 130, a * 279);
        d.bezierCurveTo(a * 136.5, a * 287.5, a * 136.5, a * 287.5, a * 143, a * 296);
        d.bezierCurveTo(a * 143, a * 302, a * 139, a * 309, a * 131, a * 308);
        d.bezierCurveTo(a * 123, a * 306, a * 121, a * 303, a * 120, a * 297);
        d.bezierCurveTo(a * 125.5, a * 288.5, a * 125.5, a * 288.5, a * 131, a * 280);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 147, a * 303);
        d.bezierCurveTo(a * 151, a * 311, a * 151, a * 319, a * 147, a * 321);
        d.bezierCurveTo(a * 138, a * 320, a * 145, a * 308, a * 147, a * 303);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 303);
        d.bezierCurveTo(a * 115, a * 312, a * 118, a * 319, a * 115, a * 319);
        d.bezierCurveTo(a * 112, a * 324, a * 109, a * 318, a * 109, a * 314);
        d.bezierCurveTo(a * 109, a * 308, a * 112, a * 303, a * 115, a * 303);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 89, a * 280);
        d.bezierCurveTo(a * 83, a * 279, a * 80, a * 281, a * 81, a * 286);
        d.bezierCurveTo(a * 83, a * 290, a * 84, a * 290, a * 87, a * 286);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 94, a * 290);
        d.bezierCurveTo(a * 93, a * 294, a * 90, a * 303, a * 86, a * 298);
        d.bezierCurveTo(a * 84, a * 295, a * 84, a * 291, a * 89, a * 291);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 163, a * 295);
        d.bezierCurveTo(a * 175, a * 294, a * 176, a * 296, a * 175, a * 301);
        d.bezierCurveTo(a * 174, a * 305, a * 171, a * 305, a * 166, a * 300);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 172, a * 286);
        d.bezierCurveTo(a * 180, a * 285, a * 181, a * 285, a * 180, a * 291);
        d.bezierCurveTo(a * 176, a * 295, a * 174, a * 294, a * 172, a * 286);
        d.closePath();
        wt(d, b[8]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 115, a * 37);
        d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
        d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
        d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
        d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
        d.closePath();
        wt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 146, a * 34);
        d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
        d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
        d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
        d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
        d.closePath();
        wt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 143, a * 69);
        d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
        d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
        d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
        d.closePath();
        wt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 149, a * 92);
        d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
        d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
        d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
        d.closePath();
        wt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 111, a * 61);
        d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
        d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
        d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
        d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
        d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
        d.closePath();
        wt(d, b[7]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 107, a * 81);
        d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
        d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
        d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
        d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
        d.closePath();
        wt(d, b[7]);
        return c;
    }
    function jm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 142;
        d.height = a * 118;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 111, a * 27.3671875);
        e.bezierCurveTo(a * 128, a * 9.3671875, a * 125, a * 13.3671875, a * 126, a * 21.3671875);
        e.bezierCurveTo(a * 126, a * 33.3671875, a * 119, a * 43.3671875, a * 118, a * 42.3671875);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 31, a * 23.3671875);
        e.bezierCurveTo(a * 17, a * 15.3671875, a * 16, a * 14.3671875, a * 17, a * 20.3671875);
        e.bezierCurveTo(a * 22, a * 33.3671875, a * 20, a * 27.3671875, a * 24, a * 34.3671875);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 70.5, a * 34.8671875);
        e.rotate(0);
        xt(e, a * -49.5, a * -21.5, a * 99, a * 43, a * 15);
        e.restore();
        wt(e, c[0], c[1], a * 4);
        e.save();
        e.translate(a * 71, a * 40.8671875);
        e.rotate(0);
        xt(e, a * -49, a * -12.5, a * 98, a * 25, a * 15);
        e.restore();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 19.800003051757812, a * 75.95625305175781);
        e.bezierCurveTo(a * 19.300003051757812, a * 82.95625305175781, a * 19.300003051757812, a * 82.95625305175781, a * 18.800003051757812, a * 89.95625305175781);
        e.bezierCurveTo(a * 38.80000305175781, a * 115.95625305175781, a * 37.80000305175781, a * 104.95625305175781, a * 31.800003051757812, a * 91.95625305175781);
        e.closePath();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 119.80000305175781, a * 75.95625305175781);
        e.bezierCurveTo(a * 120.80000305175781, a * 82.95625305175781, a * 120.80000305175781, a * 82.95625305175781, a * 121.80000305175781, a * 89.95625305175781);
        e.bezierCurveTo(a * 101.80000305175781, a * 111.95625305175781, a * 99.80000305175781, a * 111.95625305175781, a * 112.80000305175781, a * 81.95625305175781);
        e.closePath();
        wt(e, c[2], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.800003051757812, a * 49.15625);
        e.bezierCurveTo(a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 64.15625, a * 17.800003051757812, a * 79.15625);
        e.bezierCurveTo(a * 23.300003051757812, a * 85.15625, a * 23.300003051757812, a * 85.15625, a * 28.800003051757812, a * 91.15625);
        e.bezierCurveTo(a * 36.80000305175781, a * 96.15625, a * 32.80000305175781, a * 91.15625, a * 28.800003051757812, a * 77.15625);
        e.bezierCurveTo(a * 33.80000305175781, a * 65.15625, a * 33.80000305175781, a * 65.15625, a * 38.80000305175781, a * 53.15625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 123.80000305175781, a * 53.95625305175781);
        e.bezierCurveTo(a * 121.80000305175781, a * 77.95625305175781, a * 121.80000305175781, a * 74.95625305175781, a * 121.80000305175781, a * 78.95625305175781);
        e.bezierCurveTo(a * 115.80000305175781, a * 84.95625305175781, a * 115.80000305175781, a * 84.95625305175781, a * 109.80000305175781, a * 90.95625305175781);
        e.bezierCurveTo(a * 102.80000305175781, a * 93.95625305175781, a * 105.80000305175781, a * 86.95625305175781, a * 110.80000305175781, a * 76.95625305175781);
        e.bezierCurveTo(a * 107.30000305175781, a * 65.45625305175781, a * 103.80000305175781, a * 53.95625305175781, a * 103.80000305175781, a * 53.95625305175781);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 18, a * 56.3671875);
        e.bezierCurveTo(a * 70, a * 56.8671875, a * 70, a * 56.8671875, a * 122, a * 57.3671875);
        e.bezierCurveTo(a * 137, a * 20.3671875, a * 137, a * 16.3671875, a * 126, a * 22.3671875);
        e.bezierCurveTo(a * 115.5, a * 34.3671875, a * 115.5, a * 34.3671875, a * 105, a * 46.3671875);
        e.bezierCurveTo(a * 70.5, a * 46.3671875, a * 70.5, a * 46.3671875, a * 36, a * 46.3671875);
        e.bezierCurveTo(a * 4, a * 14.3671875, a * 7, a * 18.3671875, a * 8, a * 27.3671875);
        e.bezierCurveTo(a * 12.5, a * 41.8671875, a * 12.5, a * 41.8671875, a * 17, a * 56.3671875);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 68.30000305175781, a * 41.45625305175781);
        e.rotate(0.76);
        xt(e, a * -20.5, a * -20.5, a * 41, a * 41, a * 10);
        e.restore();
        wt(e, undefined, c[5], a * 4);
        e.save();
        e.translate(a * 68.80000305175781, a * 44.45625305175781);
        e.rotate(0.76);
        xt(e, a * -21, a * -20.5, a * 42, a * 41, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 4);
        e.save();
        e.translate(a * 69.80000305175781, a * 44.556243896484375);
        e.rotate(0.76);
        xt(e, a * -10, a * -10, a * 20, a * 20, a * 5);
        e.restore();
        wt(e, c[6], c[7], a * 4);
        return d;
    }
    function Gm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 85;
        c.height = a * 145;
        d.translate(a * -20, a * -95);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 50, a * 105);
        d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
        d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
        d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
        d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
        d.closePath();
        wt(d, b[1]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44, a * 106);
        d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
        d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
        d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
        d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
        d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
        d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
        d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
        d.closePath();
        wt(d, b[2], b[3], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 30, a * 159);
        d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
        d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
        d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
        d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
        d.closePath();
        wt(d, b[2]);
        return c;
    }
    function Lm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 440;
        d.height = a * 388;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        zt(e, a * 220, a * 201, a * 170.41713528867922);
        wt(e, c[0], c[0], a * 6);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        zt(e, a * 220, a * 201, a * 170.41713528867922);
        wt(e, c[1], c[2], a * 6);
        zt(e, a * 220, a * 201, a * 130);
        wt(e, c[11], c[2], a * 6);
        zt(e, a * 222, a * 199, a * 120.74767078498864);
        wt(e, undefined, c[3], a * 40);
        zt(e, a * 220, a * 200, a * 95.44108130150245);
        wt(e, Go, c[2], a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        zt(e, a * 63, a * 136, a * 49.193495504995376);
        wt(e, c[0], c[0], a * 4);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        zt(e, a * 63, a * 136, a * 49.193495504995376);
        wt(e, c[8], c[2], a * 4);
        zt(e, a * 63, a * 137, a * 25.632011235952593);
        wt(e, c[7], c[2], a * 4);
        return d;
    }
    function Wm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 104;
        d.height = a * 117;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 90);
        e.bezierCurveTo(a * 20, a * 99.5, a * 20, a * 99.5, a * 36, a * 109);
        e.bezierCurveTo(a * 67, a * 92, a * 67, a * 92, a * 98, a * 75);
        e.bezierCurveTo(a * 91, a * 27, a * 91, a * 27, a * 91, a * 28);
        e.bezierCurveTo(a * 72.5, a * 16, a * 72.5, a * 16, a * 54, a * 4);
        e.bezierCurveTo(a * 33.5, a * 10, a * 33.5, a * 10, a * 13, a * 16);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 6, a * 76);
        e.bezierCurveTo(a * 13.5, a * 51.5, a * 13.5, a * 51.5, a * 21, a * 27);
        e.bezierCurveTo(a * 37.5, a * 17, a * 37.5, a * 17, a * 54, a * 7);
        e.bezierCurveTo(a * 33.5, a * 12.5, a * 33.5, a * 12.5, a * 13, a * 18);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 24, a * 62);
        e.bezierCurveTo(a * 28.5, a * 53, a * 28.5, a * 53, a * 33, a * 44);
        e.bezierCurveTo(a * 41.5, a * 41, a * 41.5, a * 41, a * 50, a * 38);
        e.bezierCurveTo(a * 52.5, a * 35, a * 52.5, a * 35, a * 55, a * 32);
        e.bezierCurveTo(a * 52, a * 30, a * 52, a * 30, a * 49, a * 28);
        e.bezierCurveTo(a * 38, a * 31.5, a * 38, a * 31.5, a * 27, a * 35);
        e.closePath();
        wt(e, c[1]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66, a * 90.5, a * 66, a * 90.5, a * 96, a * 74);
        e.bezierCurveTo(a * 93, a * 52.5, a * 93, a * 52.5, a * 90, a * 31);
        e.bezierCurveTo(a * 87, a * 48, a * 87, a * 48, a * 84, a * 65);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 1, a * 89);
        e.bezierCurveTo(a * 18, a * 100, a * 34, a * 110, a * 35, a * 111);
        e.bezierCurveTo(a * 67, a * 93, a * 67, a * 93, a * 99, a * 75);
        e.bezierCurveTo(a * 100, a * 78.5, a * 100, a * 78.5, a * 101, a * 82);
        e.bezierCurveTo(a * 68, a * 99, a * 68, a * 99, a * 35, a * 116);
        e.bezierCurveTo(a * 18, a * 106.5, a * 18, a * 106.5, a * 1, a * 97);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36, a * 107);
        e.bezierCurveTo(a * 66.5, a * 91.5, a * 66.5, a * 91.5, a * 97, a * 76);
        e.bezierCurveTo(a * 94.5, a * 52, a * 94.5, a * 52, a * 92, a * 28);
        e.bezierCurveTo(a * 73, a * 15.5, a * 73, a * 15.5, a * 54, a * 3);
        e.bezierCurveTo(a * 33, a * 9.5, a * 33, a * 9.5, a * 12, a * 16);
        e.bezierCurveTo(a * 8, a * 53, a * 8, a * 53, a * 4, a * 90);
        e.bezierCurveTo(a * 18.5, a * 99, a * 18.5, a * 99, a * 33, a * 108);
        e.closePath();
        wt(e, vk, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 22, a * 71);
        e.bezierCurveTo(a * 30, a * 76.5, a * 30, a * 76.5, a * 38, a * 82);
        e.bezierCurveTo(a * 53, a * 72, a * 53, a * 72, a * 68, a * 62);
        e.bezierCurveTo(a * 68, a * 52, a * 68, a * 52, a * 68, a * 42);
        e.bezierCurveTo(a * 59.5, a * 35.5, a * 59.5, a * 35.5, a * 51, a * 29);
        e.bezierCurveTo(a * 39.5, a * 32, a * 39.5, a * 32, a * 28, a * 35);
        e.bezierCurveTo(a * 25, a * 52, a * 25, a * 52, a * 22, a * 69);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 5, a * 89);
        e.bezierCurveTo(a * 20, a * 73, a * 12.5, a * 80.5, a * 20, a * 72);
        e.closePath();
        wt(e, es, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 35, a * 102);
        e.bezierCurveTo(a * 36, a * 92.5, a * 36, a * 92.5, a * 37, a * 83);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 68, a * 62);
        e.bezierCurveTo(a * 81, a * 67.5, a * 81, a * 67.5, a * 94, a * 73);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 70, a * 41);
        e.bezierCurveTo(a * 80, a * 35.5, a * 80, a * 35.5, a * 90, a * 30);
        e.closePath();
        wt(e, Kq, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 28, a * 33);
        e.bezierCurveTo(a * 21.5, a * 26.5, a * 21.5, a * 26.5, a * 15, a * 20);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 51, a * 28);
        e.bezierCurveTo(a * 53, a * 17, a * 53, a * 17, a * 55, a * 6);
        e.closePath();
        wt(e, undefined, c[4], a * 6);
        return d;
    }
    function Nm(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 376;
        c.height = a * 371;
        d.globalAlpha = 0.5;
        d.translate(a * 5, a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.translate(a * -4, a * -5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
        d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
        d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
        d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
        d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
        d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
        d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
        d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
        d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
        d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
        d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
        d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
        d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
        d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
        d.closePath();
        wt(d, undefined, b[1], a * 12);
        d.translate(a * -1, a * 0);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 270.633544921875, a * 88.98580932617188);
        d.bezierCurveTo(a * 296.633544921875, a * 65.98580932617188, a * 318.633544921875, a * 62.985809326171875, a * 348.633544921875, a * 57.985809326171875);
        d.bezierCurveTo(a * 309.633544921875, a * 76.98580932617188, a * 291.633544921875, a * 88.98580932617188, a * 280.633544921875, a * 99.98580932617188);
        d.closePath();
        wt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 275.633544921875, a * 281.9858093261719);
        d.bezierCurveTo(a * 303.633544921875, a * 308.9858093261719, a * 321.633544921875, a * 308.9858093261719, a * 335.633544921875, a * 315.9858093261719);
        d.bezierCurveTo(a * 305.633544921875, a * 320.9858093261719, a * 278.633544921875, a * 307.9858093261719, a * 264.633544921875, a * 293.9858093261719);
        d.closePath();
        wt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 124.633544921875, a * 291.9858093261719);
        d.bezierCurveTo(a * 106.633544921875, a * 316.9858093261719, a * 72.633544921875, a * 325.9858093261719, a * 53.633544921875, a * 319.9858093261719);
        d.bezierCurveTo(a * 83.633544921875, a * 308.9858093261719, a * 97.633544921875, a * 298.9858093261719, a * 112.633544921875, a * 284.9858093261719);
        d.closePath();
        wt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 113.633544921875, a * 80.98580932617188);
        d.bezierCurveTo(a * 91.633544921875, a * 54.985809326171875, a * 72.633544921875, a * 56.985809326171875, a * 36.633544921875, a * 49.985809326171875);
        d.bezierCurveTo(a * 87.633544921875, a * 72.98580932617188, a * 95.633544921875, a * 82.98580932617188, a * 106.633544921875, a * 96.98580932617188);
        d.closePath();
        wt(d, b[4], b[5], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 202.633544921875, a * 20.985809326171875);
        d.bezierCurveTo(a * 219.633544921875, a * 49.985809326171875, a * 259.633544921875, a * 80.98580932617188, a * 255.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 268.633544921875, a * 86.98580932617188, a * 265.633544921875, a * 87.98580932617188, a * 275.633544921875, a * 82.98580932617188);
        d.bezierCurveTo(a * 283.633544921875, a * 87.98580932617188, a * 283.633544921875, a * 87.98580932617188, a * 291.633544921875, a * 92.98580932617188);
        d.bezierCurveTo(a * 269.633544921875, a * 116.98580932617188, a * 270.633544921875, a * 124.98580932617188, a * 267.633544921875, a * 130.98580932617188);
        d.bezierCurveTo(a * 307.633544921875, a * 168.98580932617188, a * 339.633544921875, a * 132.98580932617188, a * 352.633544921875, a * 93.98580932617188);
        d.bezierCurveTo(a * 366.633544921875, a * 145.98580932617188, a * 345.633544921875, a * 207.98580932617188, a * 286.633544921875, a * 208.98580932617188);
        d.bezierCurveTo(a * 315.633544921875, a * 223.98580932617188, a * 327.633544921875, a * 287.9858093261719, a * 355.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 293.633544921875, a * 298.9858093261719, a * 293.633544921875, a * 275.9858093261719, a * 276.633544921875, a * 266.9858093261719);
        d.bezierCurveTo(a * 274.633544921875, a * 282.9858093261719, a * 287.633544921875, a * 288.9858093261719, a * 295.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 287.133544921875, a * 302.4858093261719, a * 287.133544921875, a * 302.4858093261719, a * 278.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 261.633544921875, a * 297.9858093261719, a * 258.633544921875, a * 293.9858093261719, a * 255.633544921875, a * 290.9858093261719);
        d.bezierCurveTo(a * 249.633544921875, a * 301.9858093261719, a * 225.633544921875, a * 320.9858093261719, a * 202.633544921875, a * 354.9858093261719);
        d.bezierCurveTo(a * 195.633544921875, a * 318.9858093261719, a * 196.633544921875, a * 306.9858093261719, a * 198.633544921875, a * 300.9858093261719);
        d.bezierCurveTo(a * 209.633544921875, a * 268.9858093261719, a * 199.633544921875, a * 266.9858093261719, a * 195.633544921875, a * 256.9858093261719);
        d.bezierCurveTo(a * 183.633544921875, a * 274.9858093261719, a * 182.633544921875, a * 281.9858093261719, a * 192.633544921875, a * 305.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 317.9858093261719, a * 191.633544921875, a * 336.9858093261719, a * 186.633544921875, a * 351.9858093261719);
        d.bezierCurveTo(a * 166.633544921875, a * 318.9858093261719, a * 141.633544921875, a * 303.9858093261719, a * 136.633544921875, a * 286.9858093261719);
        d.bezierCurveTo(a * 122.633544921875, a * 303.9858093261719, a * 115.633544921875, a * 305.9858093261719, a * 109.633544921875, a * 306.9858093261719);
        d.bezierCurveTo(a * 101.133544921875, a * 301.9858093261719, a * 94.633544921875, a * 297.9858093261719, a * 92.633544921875, a * 296.9858093261719);
        d.bezierCurveTo(a * 116.633544921875, a * 277.9858093261719, a * 116.633544921875, a * 266.9858093261719, a * 119.633544921875, a * 257.9858093261719);
        d.bezierCurveTo(a * 107.633544921875, a * 257.9858093261719, a * 65.633544921875, a * 308.9858093261719, a * 24.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 51.633544921875, a * 275.9858093261719, a * 64.633544921875, a * 220.98580932617188, a * 108.633544921875, a * 205.98580932617188);
        d.bezierCurveTo(a * 14.633544921875, a * 198.98580932617188, a * 26.633544921875, a * 142.98580932617188, a * 25.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 41.633544921875, a * 155.98580932617188, a * 81.633544921875, a * 148.98580932617188, a * 113.633544921875, a * 124.98580932617188);
        d.bezierCurveTo(a * 102.633544921875, a * 93.98580932617188, a * 95.633544921875, a * 88.98580932617188, a * 89.633544921875, a * 81.98580932617188);
        d.bezierCurveTo(a * 97.633544921875, a * 76.48580932617188, a * 97.633544921875, a * 76.48580932617188, a * 105.633544921875, a * 70.98580932617188);
        d.bezierCurveTo(a * 120.633544921875, a * 78.98580932617188, a * 121.633544921875, a * 81.98580932617188, a * 124.633544921875, a * 86.98580932617188);
        d.bezierCurveTo(a * 132.633544921875, a * 71.98580932617188, a * 160.633544921875, a * 56.985809326171875, a * 175.633544921875, a * 23.985809326171875);
        d.bezierCurveTo(a * 182.633544921875, a * 53.985809326171875, a * 170.633544921875, a * 102.98580932617188, a * 191.633544921875, a * 125.98580932617188);
        d.bezierCurveTo(a * 214.633544921875, a * 89.98580932617188, a * 192.633544921875, a * 58.985809326171875, a * 202.633544921875, a * 20.985809326171875);
        d.closePath();
        wt(d, b[2], b[3], a * 5);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 203.633544921875, a * 21.985809326171875);
        d.bezierCurveTo(a * 223.633544921875, a * 63.985809326171875, a * 227.633544921875, a * 72.98580932617188, a * 235.633544921875, a * 98.98580932617188);
        d.bezierCurveTo(a * 241.633544921875, a * 123.98580932617188, a * 225.633544921875, a * 138.98580932617188, a * 196.633544921875, a * 122.98580932617188);
        d.bezierCurveTo(a * 213.633544921875, a * 93.98580932617188, a * 199.633544921875, a * 49.985809326171875, a * 203.633544921875, a * 26.985809326171875);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.633544921875, a * 25.985809326171875);
        d.bezierCurveTo(a * 176.633544921875, a * 51.985809326171875, a * 171.633544921875, a * 88.98580932617188, a * 186.633544921875, a * 121.98580932617188);
        d.bezierCurveTo(a * 156.633544921875, a * 144.98580932617188, a * 139.633544921875, a * 120.98580932617188, a * 147.633544921875, a * 97.98580932617188);
        d.bezierCurveTo(a * 152.633544921875, a * 77.98580932617188, a * 162.633544921875, a * 60.985809326171875, a * 176.633544921875, a * 25.985809326171875);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 26.633544921875, a * 96.98580932617188);
        d.bezierCurveTo(a * 38.633544921875, a * 151.98580932617188, a * 61.633544921875, a * 161.98580932617188, a * 88.633544921875, a * 168.98580932617188);
        d.bezierCurveTo(a * 117.633544921875, a * 177.98580932617188, a * 113.633544921875, a * 185.98580932617188, a * 106.633544921875, a * 204.98580932617188);
        d.bezierCurveTo(a * 32.633544921875, a * 204.98580932617188, a * 25.633544921875, a * 149.98580932617188, a * 25.633544921875, a * 97.98580932617188);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 351.633544921875, a * 99.98580932617188);
        d.bezierCurveTo(a * 365.633544921875, a * 161.98580932617188, a * 333.633544921875, a * 203.98580932617188, a * 287.633544921875, a * 207.98580932617188);
        d.bezierCurveTo(a * 255.633544921875, a * 208.98580932617188, a * 266.633544921875, a * 174.98580932617188, a * 285.633544921875, a * 176.98580932617188);
        d.bezierCurveTo(a * 313.633544921875, a * 178.98580932617188, a * 348.633544921875, a * 135.98580932617188, a * 353.633544921875, a * 99.98580932617188);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 350.633544921875, a * 302.9858093261719);
        d.bezierCurveTo(a * 310.633544921875, a * 280.9858093261719, a * 314.633544921875, a * 244.98580932617188, a * 292.633544921875, a * 230.98580932617188);
        d.bezierCurveTo(a * 272.633544921875, a * 215.98580932617188, a * 263.633544921875, a * 222.98580932617188, a * 256.633544921875, a * 236.98580932617188);
        d.bezierCurveTo(a * 251.633544921875, a * 249.98580932617188, a * 264.633544921875, a * 255.98580932617188, a * 279.633544921875, a * 268.9858093261719);
        d.bezierCurveTo(a * 306.633544921875, a * 295.9858093261719, a * 325.633544921875, a * 299.9858093261719, a * 349.633544921875, a * 302.9858093261719);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 95.633544921875, a * 224.98580932617188);
        d.bezierCurveTo(a * 64.633544921875, a * 245.98580932617188, a * 62.633544921875, a * 280.9858093261719, a * 32.633544921875, a * 303.9858093261719);
        d.bezierCurveTo(a * 59.633544921875, a * 301.9858093261719, a * 102.633544921875, a * 260.9858093261719, a * 116.633544921875, a * 255.98580932617188);
        d.bezierCurveTo(a * 139.633544921875, a * 229.98580932617188, a * 108.633544921875, a * 209.98580932617188, a * 97.633544921875, a * 224.98580932617188);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 253.98580932617188);
        d.bezierCurveTo(a * 209.633544921875, a * 282.9858093261719, a * 205.633544921875, a * 278.9858093261719, a * 199.633544921875, a * 307.9858093261719);
        d.bezierCurveTo(a * 198.633544921875, a * 332.9858093261719, a * 201.633544921875, a * 340.9858093261719, a * 202.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 215.633544921875, a * 313.9858093261719, a * 226.633544921875, a * 291.9858093261719, a * 235.633544921875, a * 270.9858093261719);
        d.bezierCurveTo(a * 243.633544921875, a * 247.98580932617188, a * 219.633544921875, a * 235.98580932617188, a * 196.633544921875, a * 252.98580932617188);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 195.633544921875, a * 251.98580932617188);
        d.bezierCurveTo(a * 176.633544921875, a * 275.9858093261719, a * 182.633544921875, a * 285.9858093261719, a * 191.633544921875, a * 308.9858093261719);
        d.bezierCurveTo(a * 194.633544921875, a * 318.9858093261719, a * 190.633544921875, a * 334.9858093261719, a * 186.633544921875, a * 348.9858093261719);
        d.bezierCurveTo(a * 175.633544921875, a * 307.9858093261719, a * 157.633544921875, a * 291.9858093261719, a * 155.633544921875, a * 272.9858093261719);
        d.bezierCurveTo(a * 150.633544921875, a * 243.98580932617188, a * 170.633544921875, a * 236.98580932617188, a * 195.633544921875, a * 251.98580932617188);
        d.closePath();
        wt(d, b[3]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 316, a * 186.8020782470703);
        d.bezierCurveTo(a * 315, a * 173.8020782470703, a * 298, a * 177.8020782470703, a * 293, a * 183.8020782470703);
        d.bezierCurveTo(a * 285, a * 195.8020782470703, a * 314, a * 197.8020782470703, a * 315, a * 187.8020782470703);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 340, a * 157.8020782470703);
        d.bezierCurveTo(a * 327, a * 153.8020782470703, a * 321, a * 168.8020782470703, a * 330, a * 174.8020782470703);
        d.bezierCurveTo(a * 341, a * 178.8020782470703, a * 347, a * 161.8020782470703, a * 341, a * 157.8020782470703);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 349, a * 136.8020782470703);
        d.bezierCurveTo(a * 343, a * 135.8020782470703, a * 342, a * 139.8020782470703, a * 341, a * 147.8020782470703);
        d.bezierCurveTo(a * 343, a * 155.8020782470703, a * 353, a * 143.8020782470703, a * 349, a * 137.8020782470703);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 278.75, a * 246.4375);
        d.bezierCurveTo(a * 288.75, a * 242.4375, a * 301.75, a * 248.4375, a * 298.75, a * 262.4375);
        d.bezierCurveTo(a * 293.75, a * 271.4375, a * 287.75, a * 271.4375, a * 278.75, a * 262.4375);
        d.bezierCurveTo(a * 271.75, a * 255.4375, a * 274.75, a * 250.4375, a * 277.75, a * 247.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 310.75, a * 277.4375);
        d.bezierCurveTo(a * 319.75, a * 280.4375, a * 322.75, a * 283.4375, a * 321.75, a * 289.4375);
        d.bezierCurveTo(a * 319.75, a * 295.4375, a * 313.75, a * 291.4375, a * 308.75, a * 288.4375);
        d.bezierCurveTo(a * 301.75, a * 281.4375, a * 306.75, a * 277.4375, a * 309.75, a * 277.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 217.75, a * 257.4375);
        d.bezierCurveTo(a * 227.75, a * 269.4375, a * 220.75, a * 281.4375, a * 212.75, a * 280.4375);
        d.bezierCurveTo(a * 206.75, a * 279.4375, a * 206.75, a * 269.4375, a * 204.75, a * 260.4375);
        d.bezierCurveTo(a * 204.75, a * 254.4375, a * 211.75, a * 253.4375, a * 216.75, a * 256.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 289.4375);
        d.bezierCurveTo(a * 219.75, a * 292.4375, a * 213.75, a * 306.4375, a * 206.75, a * 307.4375);
        d.bezierCurveTo(a * 199.75, a * 303.4375, a * 209.75, a * 287.4375, a * 210.75, a * 289.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 171.75, a * 256.4375);
        d.bezierCurveTo(a * 162.75, a * 273.4375, a * 166.75, a * 278.4375, a * 175.75, a * 280.4375);
        d.bezierCurveTo(a * 183.75, a * 278.4375, a * 185.75, a * 257.4375, a * 182.75, a * 255.4375);
        d.bezierCurveTo(a * 176.75, a * 251.4375, a * 172.75, a * 253.4375, a * 172.75, a * 256.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 175.75, a * 289.9375);
        d.bezierCurveTo(a * 183.75, a * 287.9375, a * 186.75, a * 301.9375, a * 182.75, a * 305.9375);
        d.bezierCurveTo(a * 176.75, a * 307.9375, a * 171.75, a * 292.9375, a * 174.75, a * 290.9375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.75, a * 314.4375);
        d.bezierCurveTo(a * 209.75, a * 316.4375, a * 210.75, a * 320.4375, a * 206.75, a * 323.4375);
        d.bezierCurveTo(a * 201.75, a * 324.4375, a * 201.75, a * 314.4375, a * 204.75, a * 314.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.75, a * 313.4375);
        d.bezierCurveTo(a * 181.75, a * 315.4375, a * 180.75, a * 321.4375, a * 185.75, a * 326.4375);
        d.bezierCurveTo(a * 190.75, a * 327.4375, a * 190.75, a * 313.4375, a * 187.75, a * 314.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 103.75, a * 244.4375);
        d.bezierCurveTo(a * 96.75, a * 239.4375, a * 83.75, a * 240.4375, a * 81.75, a * 255.4375);
        d.bezierCurveTo(a * 80.75, a * 264.4375, a * 89.75, a * 269.4375, a * 99.75, a * 260.4375);
        d.bezierCurveTo(a * 106.75, a * 254.4375, a * 106.75, a * 250.4375, a * 104.75, a * 245.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 86.75, a * 182.4375);
        d.bezierCurveTo(a * 82.75, a * 170.4375, a * 66.75, a * 169.4375, a * 61.75, a * 181.4375);
        d.bezierCurveTo(a * 58.75, a * 187.4375, a * 68.75, a * 194.4375, a * 75.75, a * 192.4375);
        d.bezierCurveTo(a * 83.75, a * 192.4375, a * 86.75, a * 187.4375, a * 86.75, a * 183.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 44.75, a * 152.4375);
        d.bezierCurveTo(a * 55.75, a * 159.4375, a * 54.75, a * 170.4375, a * 46.75, a * 171.4375);
        d.bezierCurveTo(a * 39.75, a * 170.4375, a * 34.75, a * 151.4375, a * 43.75, a * 152.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 31.75, a * 130.4375);
        d.bezierCurveTo(a * 35.75, a * 132.4375, a * 35.75, a * 131.4375, a * 37.75, a * 137.4375);
        d.bezierCurveTo(a * 36.75, a * 144.4375, a * 36.75, a * 145.4375, a * 33.75, a * 144.4375);
        d.bezierCurveTo(a * 26.75, a * 137.4375, a * 29.75, a * 131.4375, a * 31.75, a * 130.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 69.75, a * 274.4375);
        d.bezierCurveTo(a * 62.75, a * 272.4375, a * 59.75, a * 277.4375, a * 57.75, a * 284.4375);
        d.bezierCurveTo(a * 56.75, a * 290.4375, a * 63.75, a * 289.4375, a * 71.75, a * 282.4375);
        d.bezierCurveTo(a * 75.75, a * 277.4375, a * 72.75, a * 275.4375, a * 69.75, a * 274.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 165.75, a * 95.4375);
        d.bezierCurveTo(a * 177.75, a * 97.4375, a * 182.75, a * 115.4375, a * 173.75, a * 121.4375);
        d.bezierCurveTo(a * 164.75, a * 126.4375, a * 149.75, a * 102.4375, a * 164.75, a * 96.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 216.75, a * 94.4375);
        d.bezierCurveTo(a * 227.75, a * 99.4375, a * 223.75, a * 122.4375, a * 210.75, a * 119.4375);
        d.bezierCurveTo(a * 203.75, a * 115.4375, a * 207.75, a * 93.4375, a * 216.75, a * 94.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 211.75, a * 68.4375);
        d.bezierCurveTo(a * 218.75, a * 69.4375, a * 220.75, a * 77.4375, a * 216.75, a * 83.4375);
        d.bezierCurveTo(a * 208.75, a * 89.4375, a * 205.75, a * 68.4375, a * 210.75, a * 68.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 169.75, a * 71.4375);
        d.bezierCurveTo(a * 162.75, a * 72.4375, a * 159.75, a * 83.4375, a * 167.75, a * 88.4375);
        d.bezierCurveTo(a * 174.75, a * 90.4375, a * 174.75, a * 72.4375, a * 170.75, a * 71.4375);
        d.closePath();
        wt(d, b[6], b[7], a * 4);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 193.75, a * 160.4375);
        d.bezierCurveTo(a * 215.75, a * 168.4375, a * 224.75, a * 180.4375, a * 229.75, a * 193.4375);
        d.bezierCurveTo(a * 223.75, a * 211.4375, a * 205.75, a * 225.4375, a * 193.75, a * 229.4375);
        d.bezierCurveTo(a * 167.75, a * 217.4375, a * 161.75, a * 205.4375, a * 156.75, a * 192.4375);
        d.bezierCurveTo(a * 164.75, a * 175.4375, a * 176.75, a * 166.4375, a * 192.75, a * 160.4375);
        d.closePath();
        wt(d, b[8], b[9], a * 3);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 189.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 184.11249923706055, a * 190.1999969482422, a * 184.11249923706055, a * 191.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 192.1999969482422, a * 180.61249923706055, a * 192.1999969482422, a * 180.61249923706055, a * 193.1999969482422, a * 175.61249923706055);
        d.bezierCurveTo(a * 195.6999969482422, a * 177.11249923706055, a * 195.6999969482422, a * 177.11249923706055, a * 198.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 181.11249923706055, a * 198.1999969482422, a * 183.61249923706055);
        d.bezierCurveTo(a * 201.6999969482422, a * 181.11249923706055, a * 201.6999969482422, a * 181.11249923706055, a * 205.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 206.6999969482422, a * 180.61249923706055, a * 206.6999969482422, a * 180.61249923706055, a * 208.1999969482422, a * 182.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 185.61249923706055, a * 206.1999969482422, a * 185.61249923706055, a * 204.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 208.6999969482422, a * 188.61249923706055, a * 208.6999969482422, a * 188.61249923706055, a * 213.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 191.11249923706055, a * 213.1999969482422, a * 193.61249923706055);
        d.bezierCurveTo(a * 209.6999969482422, a * 194.61249923706055, a * 209.6999969482422, a * 194.61249923706055, a * 206.1999969482422, a * 195.61249923706055);
        d.bezierCurveTo(a * 210.1999969482422, a * 198.61249923706055, a * 210.1999969482422, a * 198.61249923706055, a * 214.1999969482422, a * 201.61249923706055);
        d.bezierCurveTo(a * 212.1999969482422, a * 203.61249923706055, a * 212.1999969482422, a * 203.61249923706055, a * 210.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 204.11249923706055, a * 207.1999969482422, a * 204.11249923706055, a * 204.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 205.6999969482422, a * 207.61249923706055, a * 205.6999969482422, a * 207.61249923706055, a * 207.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 204.6999969482422, a * 213.61249923706055, a * 204.6999969482422, a * 213.61249923706055, a * 202.1999969482422, a * 214.61249923706055);
        d.bezierCurveTo(a * 200.1999969482422, a * 210.61249923706055, a * 200.1999969482422, a * 210.61249923706055, a * 198.1999969482422, a * 206.61249923706055);
        d.bezierCurveTo(a * 196.6999969482422, a * 211.61249923706055, a * 196.6999969482422, a * 211.61249923706055, a * 195.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 192.6999969482422, a * 216.11249923706055, a * 192.6999969482422, a * 216.11249923706055, a * 190.1999969482422, a * 215.61249923706055);
        d.bezierCurveTo(a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 211.61249923706055, a * 190.1999969482422, a * 207.61249923706055);
        d.bezierCurveTo(a * 186.1999969482422, a * 210.61249923706055, a * 186.1999969482422, a * 210.61249923706055, a * 182.1999969482422, a * 213.61249923706055);
        d.bezierCurveTo(a * 181.1999969482422, a * 211.11249923706055, a * 181.1999969482422, a * 211.11249923706055, a * 180.1999969482422, a * 208.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 205.61249923706055, a * 183.1999969482422, a * 205.61249923706055, a * 186.1999969482422, a * 202.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 203.11249923706055, a * 180.6999969482422, a * 203.11249923706055, a * 175.1999969482422, a * 203.61249923706055);
        d.bezierCurveTo(a * 174.6999969482422, a * 200.11249923706055, a * 174.6999969482422, a * 200.11249923706055, a * 174.1999969482422, a * 196.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 195.61249923706055, a * 177.1999969482422, a * 195.61249923706055, a * 180.1999969482422, a * 194.61249923706055);
        d.bezierCurveTo(a * 177.1999969482422, a * 191.61249923706055, a * 177.1999969482422, a * 191.61249923706055, a * 174.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 175.6999969482422, a * 187.11249923706055, a * 175.6999969482422, a * 187.11249923706055, a * 177.1999969482422, a * 185.61249923706055);
        d.bezierCurveTo(a * 180.6999969482422, a * 187.11249923706055, a * 180.6999969482422, a * 187.11249923706055, a * 184.1999969482422, a * 188.61249923706055);
        d.bezierCurveTo(a * 182.6999969482422, a * 183.61249923706055, a * 182.6999969482422, a * 183.61249923706055, a * 181.1999969482422, a * 178.61249923706055);
        d.bezierCurveTo(a * 183.1999969482422, a * 177.11249923706055, a * 183.1999969482422, a * 177.11249923706055, a * 185.1999969482422, a * 175.61249923706055);
        d.closePath();
        wt(d, b[10]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 173.8125);
        d.bezierCurveTo(a * 187.1999969482422, a * 179.3125, a * 187.1999969482422, a * 179.3125, a * 189.1999969482422, a * 184.8125);
        d.bezierCurveTo(a * 184.1999969482422, a * 181.8125, a * 184.1999969482422, a * 181.8125, a * 179.1999969482422, a * 178.8125);
        d.bezierCurveTo(a * 181.1999969482422, a * 175.8125, a * 182.1999969482422, a * 174.8125, a * 185.1999969482422, a * 173.8125);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 192.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 172.61249542236328, a * 196.1999969482422, a * 171.61249542236328, a * 199.1999969482422, a * 173.61249542236328);
        d.bezierCurveTo(a * 197.6999969482422, a * 179.61249542236328, a * 197.6999969482422, a * 179.61249542236328, a * 196.1999969482422, a * 185.61249542236328);
        d.bezierCurveTo(a * 194.1999969482422, a * 179.61249542236328, a * 194.1999969482422, a * 179.61249542236328, a * 192.1999969482422, a * 173.61249542236328);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 205.1999969482422, a * 176.2125015258789);
        d.bezierCurveTo(a * 210.1999969482422, a * 178.2125015258789, a * 211.1999969482422, a * 179.2125015258789, a * 211.1999969482422, a * 181.2125015258789);
        d.bezierCurveTo(a * 206.6999969482422, a * 184.7125015258789, a * 206.6999969482422, a * 184.7125015258789, a * 202.1999969482422, a * 188.2125015258789);
        d.bezierCurveTo(a * 203.6999969482422, a * 182.2125015258789, a * 203.6999969482422, a * 182.2125015258789, a * 205.1999969482422, a * 176.2125015258789);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 214.1999969482422, a * 187.21249985694885);
        d.bezierCurveTo(a * 216.1999969482422, a * 191.21249985694885, a * 216.1999969482422, a * 192.21249985694885, a * 215.1999969482422, a * 195.21249985694885);
        d.bezierCurveTo(a * 206.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885, a * 205.1999969482422, a * 194.21249985694885);
        d.bezierCurveTo(a * 209.6999969482422, a * 190.71249985694885, a * 209.6999969482422, a * 190.71249985694885, a * 214.1999969482422, a * 187.21249985694885);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 204.1999969482422, a * 201.8125);
        d.bezierCurveTo(a * 209.1999969482422, a * 201.3125, a * 209.1999969482422, a * 201.3125, a * 214.1999969482422, a * 200.8125);
        d.bezierCurveTo(a * 215.1999969482422, a * 204.8125, a * 214.1999969482422, a * 205.8125, a * 213.1999969482422, a * 208.8125);
        d.bezierCurveTo(a * 208.6999969482422, a * 205.3125, a * 208.6999969482422, a * 205.3125, a * 204.1999969482422, a * 201.8125);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 199.1999969482422, a * 205.61249923706055);
        d.bezierCurveTo(a * 207.1999969482422, a * 212.61249923706055, a * 203.6999969482422, a * 209.11249923706055, a * 208.1999969482422, a * 212.61249923706055);
        d.bezierCurveTo(a * 206.1999969482422, a * 215.61249923706055, a * 204.1999969482422, a * 217.61249923706055, a * 203.1999969482422, a * 216.61249923706055);
        d.bezierCurveTo(a * 201.1999969482422, a * 211.11249923706055, a * 201.1999969482422, a * 211.11249923706055, a * 199.1999969482422, a * 205.61249923706055);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 191.1999969482422, a * 207.01250076293945);
        d.bezierCurveTo(a * 194.1999969482422, a * 213.01250076293945, a * 194.1999969482422, a * 216.01250076293945, a * 196.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 193.1999969482422, a * 220.01250076293945, a * 190.1999969482422, a * 220.01250076293945, a * 188.1999969482422, a * 218.01250076293945);
        d.bezierCurveTo(a * 189.6999969482422, a * 213.01250076293945, a * 189.6999969482422, a * 213.01250076293945, a * 191.1999969482422, a * 208.01250076293945);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 186.1999969482422, a * 203.21249961853027);
        d.bezierCurveTo(a * 184.1999969482422, a * 209.21249961853027, a * 184.1999969482422, a * 209.21249961853027, a * 182.1999969482422, a * 215.21249961853027);
        d.bezierCurveTo(a * 177.1999969482422, a * 212.21249961853027, a * 176.1999969482422, a * 211.21249961853027, a * 177.1999969482422, a * 210.21249961853027);
        d.bezierCurveTo(a * 181.6999969482422, a * 206.71249961853027, a * 181.6999969482422, a * 206.71249961853027, a * 186.1999969482422, a * 203.21249961853027);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 183.1999969482422, a * 196.8125);
        d.bezierCurveTo(a * 177.1999969482422, a * 196.3125, a * 177.1999969482422, a * 196.3125, a * 171.1999969482422, a * 195.8125);
        d.bezierCurveTo(a * 171.1999969482422, a * 199.8125, a * 171.1999969482422, a * 202.8125, a * 174.1999969482422, a * 204.8125);
        d.bezierCurveTo(a * 178.6999969482422, a * 200.8125, a * 178.6999969482422, a * 200.8125, a * 183.1999969482422, a * 196.8125);
        d.closePath();
        wt(d, b[11]);
        d.beginPath();
        d.lineCap = "round";
        d.lineJoin = "round";
        d.moveTo(a * 185.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 179.6999969482422, a * 186.71249771118164, a * 179.6999969482422, a * 186.71249771118164, a * 174.1999969482422, a * 183.21249771118164);
        d.bezierCurveTo(a * 172.1999969482422, a * 186.21249771118164, a * 172.1999969482422, a * 187.21249771118164, a * 172.1999969482422, a * 190.21249771118164);
        d.bezierCurveTo(a * 178.1999969482422, a * 190.21249771118164, a * 178.1999969482422, a * 190.21249771118164, a * 184.1999969482422, a * 190.21249771118164);
        d.closePath();
        wt(d, b[11]);
        zt(d, a * 126.19999694824219, a * 169.8125, a * 8.94427190999916);
        wt(d, b[12]);
        zt(d, a * 123.19999694824219, a * 164.8125, a * 2.8284271247461903);
        wt(d, b[13]);
        zt(d, a * 253.1999969482422, a * 169.8125, a * 8.94427190999916);
        wt(d, b[12]);
        zt(d, a * 255.1999969482422, a * 164.8125, a * 2.23606797749979);
        wt(d, b[13]);
        return c;
    }
    function Om(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 185;
        e.height = b * 164;
        f.translate(0, 0);
        var g = function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 201;
            d.height = a * 164;
            e.translate(0, a * 5);
            e.globalAlpha = b ? 0.5 : 1;
            zt(e, a * 100.5, a * 82, a * 74.92746655359852);
            wt(e, c[0], c[0], a * 4);
            zt(e, a * 100.5, a * 82, a * 65.9417374971317);
            wt(e, c[0], c[0], a * 4);
            e.translate(0, -5);
            e.globalAlpha = 1;
            zt(e, a * 100.5, a * 82, a * 74.92746655359852);
            wt(e, c[1], c[3], a * 4);
            zt(e, a * 100.5, a * 82, a * 65.9417374971317);
            wt(e, c[1], c[2], a * 4);
            zt(e, a * 100.5, a * 82, a * 35.9417374971317);
            wt(e, c[1], c[2], a * 20);
            zt(e, a * 100.5, a * 82, a * 15.9417374971317);
            wt(e, c[1], c[2], a * 6);
            return d;
        }(b, c, d);
        f.drawImage(g, b * -10, b * 0);
        g = mm(b, c, d, 0);
        f.drawImage(g, b * -83, b * -40);
        g = mm(b, c, d, Math.PI / 1.4);
        f.drawImage(g, b * -15, b * -88);
        g = mm(b, c, d, Math.PI / -1.4);
        f.drawImage(g, b * 15, b * -8);
        return e;
    }
    function qm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 180;
        d.height = a * 120;
        e.translate(a * -65, a * -35);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        xt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        wt(e, c[0]);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        xt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 150.5, a * 63.84375);
        xt(e, a * -67, a * -16.5, a * 134, a * 33, a * 5);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 75.34375);
        e.bezierCurveTo(a * 83, a * 106.34375, a * 83, a * 106.34375, a * 85.5, a * 137.34375);
        e.bezierCurveTo(a * 93, a * 135.84375, a * 93, a * 135.84375, a * 100.5, a * 134.34375);
        e.bezierCurveTo(a * 99.5, a * 100.84375, a * 99.5, a * 100.84375, a * 98.5, a * 67.34375);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 206.5, a * 71.34375);
        e.bezierCurveTo(a * 203.5, a * 104.34375, a * 203.5, a * 104.34375, a * 200.5, a * 137.34375);
        e.bezierCurveTo(a * 208.5, a * 137.34375, a * 208.5, a * 137.34375, a * 216.5, a * 137.34375);
        e.bezierCurveTo(a * 219, a * 102.84375, a * 219, a * 102.84375, a * 221.5, a * 68.34375);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 136.5, a * 75.34375);
        e.bezierCurveTo(a * 139, a * 94.34375, a * 139, a * 94.34375, a * 141.5, a * 113.34375);
        e.bezierCurveTo(a * 149.5, a * 115.34375, a * 149.5, a * 115.34375, a * 157.5, a * 117.34375);
        e.bezierCurveTo(a * 162, a * 97.34375, a * 162, a * 97.34375, a * 166.5, a * 77.34375);
        e.closePath();
        wt(e, c[1], c[2], a * 4);
        e.save();
        e.translate(a * 152.5, a * 80.84375);
        e.rotate(3.12);
        xt(e, a * -73, a * -20.5, a * 146, a * 41, a * 5);
        e.restore();
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 83.5, a * 73.34375);
        e.bezierCurveTo(a * 93.5, a * 70.34375, a * 105.5, a * 70.34375, a * 124.5, a * 72.34375);
        e.bezierCurveTo(a * 132.5, a * 78.34375, a * 162.5, a * 80.34375, a * 176.5, a * 76.34375);
        e.bezierCurveTo(a * 194.5, a * 69.34375, a * 192.5, a * 68.34375, a * 199.5, a * 63.34375);
        e.bezierCurveTo(a * 204.5, a * 63.34375, a * 204.5, a * 63.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 153.5, a * 82.34375, a * 157.5, a * 85.34375, a * 209.5, a * 63.34375);
        e.bezierCurveTo(a * 194.5, a * 88.34375, a * 162.5, a * 87.34375, a * 149.5, a * 88.34375);
        e.bezierCurveTo(a * 129.5, a * 81.34375, a * 103.5, a * 75.34375, a * 83.5, a * 82.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 137.5, a * 65.34375);
        e.bezierCurveTo(a * 150.5, a * 76.34375, a * 170.5, a * 71.34375, a * 174.5, a * 65.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 221.5, a * 85.34375);
        e.bezierCurveTo(a * 211.5, a * 79.34375, a * 191.5, a * 88.34375, a * 181.5, a * 96.34375);
        e.bezierCurveTo(a * 201.5, a * 96.34375, a * 201.5, a * 96.34375, a * 221.5, a * 96.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84.5, a * 89.34375);
        e.bezierCurveTo(a * 102.5, a * 87.34375, a * 112.5, a * 88.34375, a * 119.5, a * 97.34375);
        e.bezierCurveTo(a * 102, a * 98.34375, a * 102, a * 98.34375, a * 84.5, a * 99.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 208.5, a * 104.34375);
        e.bezierCurveTo(a * 208.5, a * 110.34375, a * 208.5, a * 110.34375, a * 208.5, a * 116.34375);
        e.bezierCurveTo(a * 211.5, a * 110.34375, a * 211.5, a * 110.34375, a * 214.5, a * 104.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 87.5, a * 117.34375);
        e.bezierCurveTo(a * 92, a * 118.84375, a * 92, a * 118.84375, a * 96.5, a * 120.34375);
        e.bezierCurveTo(a * 93, a * 123.84375, a * 93, a * 123.84375, a * 89.5, a * 127.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.5, a * 51.34375);
        e.bezierCurveTo(a * 122.5, a * 54.34375, a * 122.5, a * 54.34375, a * 137.5, a * 57.34375);
        e.bezierCurveTo(a * 118, a * 57.34375, a * 118, a * 57.34375, a * 98.5, a * 57.34375);
        e.bezierCurveTo(a * 94.5, a * 54.84375, a * 94.5, a * 54.84375, a * 90.5, a * 52.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 170.5, a * 52.34375);
        e.bezierCurveTo(a * 179.5, a * 51.84375, a * 179.5, a * 51.84375, a * 188.5, a * 51.34375);
        e.bezierCurveTo(a * 187.5, a * 53.84375, a * 187.5, a * 53.84375, a * 186.5, a * 56.34375);
        e.bezierCurveTo(a * 177, a * 56.34375, a * 177, a * 56.34375, a * 167.5, a * 56.34375);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80.5, a * 69.34375);
        e.bezierCurveTo(a * 86.5, a * 70.34375, a * 86.5, a * 70.34375, a * 92.5, a * 71.34375);
        e.bezierCurveTo(a * 86, a * 73.34375, a * 86, a * 73.34375, a * 79.5, a * 75.34375);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222.5, a * 75.34375);
        e.bezierCurveTo(a * 214.5, a * 76.34375, a * 214.5, a * 76.34375, a * 206.5, a * 77.34375);
        e.bezierCurveTo(a * 216.5, a * 79.34375, a * 216.5, a * 79.34375, a * 226.5, a * 81.34375);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 116.5, a * 100.34375);
        e.bezierCurveTo(a * 128, a * 97.34375, a * 128, a * 97.34375, a * 139.5, a * 94.34375);
        e.bezierCurveTo(a * 140, a * 96.84375, a * 140, a * 96.84375, a * 140.5, a * 99.34375);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 112.5, a * 48.34375);
        e.bezierCurveTo(a * 115.5, a * 50.84375, a * 115.5, a * 50.84375, a * 118.5, a * 53.34375);
        e.bezierCurveTo(a * 131, a * 50.84375, a * 131, a * 50.84375, a * 143.5, a * 48.34375);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216.5, a * 109.34375);
        e.bezierCurveTo(a * 213, a * 114.84375, a * 213, a * 114.84375, a * 209.5, a * 120.34375);
        e.bezierCurveTo(a * 212, a * 118.84375, a * 212, a * 118.84375, a * 214.5, a * 117.34375);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 86.5, a * 133.34375);
        e.bezierCurveTo(a * 89, a * 127.34375, a * 89, a * 127.34375, a * 91.5, a * 121.34375);
        e.bezierCurveTo(a * 92.5, a * 127.34375, a * 92.5, a * 127.34375, a * 93.5, a * 133.34375);
        e.closePath();
        wt(e, c[2]);
        return d;
    }
    function Hm(b, c, d) {
        var e = document.createElement("canvas");
        var f = e.getContext("2d");
        e.width = b * 496;
        e.height = b * 520;
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 19.000030517578125, b * 256.67613983154297);
        f.bezierCurveTo(b * 1.000030517578125, b * 332.67613983154297, b * 23.000030517578125, b * 404.67613983154297, b * 95.00003051757812, b * 463.67613983154297);
        f.bezierCurveTo(b * 128.00003051757812, b * 491.67613983154297, b * 165.00003051757812, b * 507.67613983154297, b * 194.00003051757812, b * 512.676139831543);
        f.bezierCurveTo(b * 280.0000305175781, b * 517.676139831543, b * 291.0000305175781, b * 516.676139831543, b * 342.0000305175781, b * 497.67613983154297);
        f.bezierCurveTo(b * 425.0000305175781, b * 454.67613983154297, b * 469.0000305175781, b * 392.67613983154297, b * 468.0000305175781, b * 300.67613983154297);
        f.bezierCurveTo(b * 408.5000305175781, b * 365.17613983154297, b * 408.5000305175781, b * 365.17613983154297, b * 349.0000305175781, b * 429.67613983154297);
        f.bezierCurveTo(b * 256.0000305175781, b * 473.67613983154297, b * 167.00003051757812, b * 459.67613983154297, b * 78.00003051757812, b * 384.67613983154297);
        f.closePath();
        wt(f, d[0]);
        f.globalAlpha = 1;
        f.translate(0, b * -10);
        zt(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        wt(f, d[5], Aj, b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 10);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 65.00003051757812, b * 263.4034118652344);
        f.bezierCurveTo(b * 109.00003051757812, b * 160.40341186523438, b * 185.00003051757812, b * 128.40341186523438, b * 222.00003051757812, b * 124.40341186523438);
        f.bezierCurveTo(b * 277.0000305175781, b * 116.40341186523438, b * 339.0000305175781, b * 134.40341186523438, b * 379.0000305175781, b * 195.40341186523438);
        f.bezierCurveTo(b * 409.0000305175781, b * 242.40341186523438, b * 416.0000305175781, b * 256.4034118652344, b * 428.0000305175781, b * 304.4034118652344);
        f.bezierCurveTo(b * 457.0000305175781, b * 203.40341186523438, b * 449.0000305175781, b * 183.40341186523438, b * 438.0000305175781, b * 162.40341186523438);
        f.bezierCurveTo(b * 381.0000305175781, b * 73.40341186523438, b * 360.0000305175781, b * 66.40341186523438, b * 257.0000305175781, b * 46.403411865234375);
        f.bezierCurveTo(b * 191.00003051757812, b * 45.403411865234375, b * 142.00003051757812, b * 65.40341186523438, b * 101.00003051757812, b * 115.40341186523438);
        f.closePath();
        wt(f, d[0]);
        f.globalAlpha = 1;
        var g = function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 496;
            c.height = a * 520;
            d.globalAlpha = 1;
            d.translate(0, a * -10);
            zt(d, a * 247.01138305664062, a * 250.13068389892578, a * 232.81967270830015);
            wt(d, b[1], b[2], a * 14);
            d.globalCompositeOperation = "destination-out";
            zt(d, a * 247.01138305664062, a * 249.3125, a * 161.4465855941215);
            wt(d, b[0], b[0], a * 14);
            d.globalCompositeOperation = "source-over";
            return c;
        }(b, d);
        f.drawImage(g, 0, 0);
        f.translate(0, b * -10);
        zt(f, b * 247.01138305664062, b * 249.3125, b * 161.4465855941215);
        wt(f, Go, d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 325.0113830566406, b * 13.767059326171875);
        f.bezierCurveTo(b * 349.5113830566406, b * 25.767059326171875, b * 349.5113830566406, b * 25.767059326171875, b * 374.0113830566406, b * 37.767059326171875);
        f.bezierCurveTo(b * 384.0113830566406, b * 44.767059326171875, b * 383.0113830566406, b * 50.767059326171875, b * 368.0113830566406, b * 68.76705932617188);
        f.bezierCurveTo(b * 352.5113830566406, b * 91.26705932617188, b * 352.5113830566406, b * 91.26705932617188, b * 337.0113830566406, b * 113.76705932617188);
        f.bezierCurveTo(b * 328.0113830566406, b * 119.76705932617188, b * 328.0113830566406, b * 121.76705932617188, b * 312.0113830566406, b * 112.76705932617188);
        f.bezierCurveTo(b * 303.0113830566406, b * 108.26705932617188, b * 303.0113830566406, b * 108.26705932617188, b * 294.0113830566406, b * 103.76705932617188);
        f.bezierCurveTo(b * 287.0113830566406, b * 99.76705932617188, b * 293.0113830566406, b * 84.76705932617188, b * 297.0113830566406, b * 67.76705932617188);
        f.bezierCurveTo(b * 302.0113830566406, b * 47.767059326171875, b * 302.0113830566406, b * 47.767059326171875, b * 307.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 310.0113830566406, b * 15.767059326171875, b * 317.0113830566406, b * 12.767059326171875, b * 323.0113830566406, b * 13.767059326171875);
        f.closePath();
        wt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 403.0113830566406, b * 89.76705932617188);
        f.bezierCurveTo(b * 413.0113830566406, b * 76.76705932617188, b * 418.0113830566406, b * 79.76705932617188, b * 428.0113830566406, b * 92.76705932617188);
        f.bezierCurveTo(b * 435.0113830566406, b * 99.76705932617188, b * 435.0113830566406, b * 99.76705932617188, b * 442.0113830566406, b * 106.76705932617188);
        f.bezierCurveTo(b * 450.0113830566406, b * 116.76705932617188, b * 445.0113830566406, b * 119.76705932617188, b * 433.0113830566406, b * 128.76705932617188);
        f.bezierCurveTo(b * 408.0113830566406, b * 146.26705932617188, b * 408.0113830566406, b * 146.26705932617188, b * 383.0113830566406, b * 163.76705932617188);
        f.bezierCurveTo(b * 376.0113830566406, b * 166.76705932617188, b * 377.0113830566406, b * 165.76705932617188, b * 368.0113830566406, b * 156.76705932617188);
        f.bezierCurveTo(b * 359.0113830566406, b * 144.76705932617188, b * 359.0113830566406, b * 142.76705932617188, b * 367.0113830566406, b * 133.76705932617188);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 228.01138305664062, b * 1.767059326171875);
        f.bezierCurveTo(b * 246.51138305664062, b * 3.267059326171875, b * 246.51138305664062, b * 3.267059326171875, b * 265.0113830566406, b * 4.767059326171875);
        f.bezierCurveTo(b * 273.0113830566406, b * 5.767059326171875, b * 275.0113830566406, b * 11.767059326171875, b * 270.0113830566406, b * 27.767059326171875);
        f.bezierCurveTo(b * 264.0113830566406, b * 54.267059326171875, b * 264.0113830566406, b * 54.267059326171875, b * 258.0113830566406, b * 80.76705932617188);
        f.bezierCurveTo(b * 256.0113830566406, b * 92.76705932617188, b * 256.0113830566406, b * 94.76705932617188, b * 242.01138305664062, b * 93.76705932617188);
        f.bezierCurveTo(b * 226.01138305664062, b * 95.76705932617188, b * 225.01138305664062, b * 91.76705932617188, b * 225.01138305664062, b * 80.76705932617188);
        f.bezierCurveTo(b * 223.51138305664062, b * 50.267059326171875, b * 223.51138305664062, b * 50.267059326171875, b * 222.01138305664062, b * 19.767059326171875);
        f.bezierCurveTo(b * 219.01138305664062, b * 8.767059326171875, b * 224.01138305664062, b * 4.767059326171875, b * 227.01138305664062, b * 2.767059326171875);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 142.01138305664062, b * 25.767059326171875);
        f.bezierCurveTo(b * 158.51138305664062, b * 19.767059326171875, b * 158.51138305664062, b * 19.767059326171875, b * 175.01138305664062, b * 13.767059326171875);
        f.bezierCurveTo(b * 188.01138305664062, b * 11.767059326171875, b * 188.01138305664062, b * 16.767059326171875, b * 191.01138305664062, b * 29.767059326171875);
        f.bezierCurveTo(b * 197.01138305664062, b * 60.267059326171875, b * 197.01138305664062, b * 60.267059326171875, b * 203.01138305664062, b * 90.76705932617188);
        f.bezierCurveTo(b * 206.01138305664062, b * 102.76705932617188, b * 196.01138305664062, b * 99.76705932617188, b * 181.01138305664062, b * 105.76705932617188);
        f.bezierCurveTo(b * 175.01138305664062, b * 108.76705932617188, b * 172.01138305664062, b * 104.76705932617188, b * 164.01138305664062, b * 84.76705932617188);
        f.bezierCurveTo(b * 152.51138305664062, b * 63.267059326171875, b * 152.51138305664062, b * 63.267059326171875, b * 141.01138305664062, b * 41.767059326171875);
        f.bezierCurveTo(b * 138.01138305664062, b * 35.767059326171875, b * 138.01138305664062, b * 29.767059326171875, b * 141.01138305664062, b * 27.767059326171875);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 70.01138305664062, b * 76.76705932617188);
        f.bezierCurveTo(b * 83.01138305664062, b * 64.26705932617188, b * 83.01138305664062, b * 64.26705932617188, b * 96.01138305664062, b * 51.767059326171875);
        f.bezierCurveTo(b * 104.01138305664062, b * 44.767059326171875, b * 110.01138305664062, b * 51.767059326171875, b * 119.01138305664062, b * 66.76705932617188);
        f.bezierCurveTo(b * 135.01138305664062, b * 88.26705932617188, b * 135.01138305664062, b * 88.26705932617188, b * 151.01138305664062, b * 109.76705932617188);
        f.bezierCurveTo(b * 157.01138305664062, b * 119.76705932617188, b * 153.01138305664062, b * 122.76705932617188, b * 147.01138305664062, b * 129.76705932617188);
        f.bezierCurveTo(b * 138.01138305664062, b * 140.76705932617188, b * 136.01138305664062, b * 140.76705932617188, b * 122.01138305664062, b * 127.76705932617188);
        f.bezierCurveTo(b * 99.51138305664062, b * 110.26705932617188, b * 99.51138305664062, b * 110.26705932617188, b * 77.01138305664062, b * 92.76705932617188);
        f.bezierCurveTo(b * 66.01138305664062, b * 83.76705932617188, b * 66.01138305664062, b * 82.76705932617188, b * 69.01138305664062, b * 78.76705932617188);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 33.011383056640625, b * 126.76705932617188);
        f.bezierCurveTo(b * 22.011383056640625, b * 149.76705932617188, b * 22.011383056640625, b * 149.76705932617188, b * 11.011383056640625, b * 172.76705932617188);
        f.bezierCurveTo(b * 7.011383056640625, b * 184.76705932617188, b * 11.011383056640625, b * 189.76705932617188, b * 36.011383056640625, b * 195.76705932617188);
        f.bezierCurveTo(b * 61.011383056640625, b * 202.26705932617188, b * 61.011383056640625, b * 202.26705932617188, b * 86.01138305664062, b * 208.76705932617188);
        f.bezierCurveTo(b * 100.01138305664062, b * 214.76705932617188, b * 102.01138305664062, b * 203.76705932617188, b * 109.01138305664062, b * 189.76705932617188);
        f.bezierCurveTo(b * 117.01138305664062, b * 171.76705932617188, b * 116.01138305664062, b * 166.76705932617188, b * 97.01138305664062, b * 156.76705932617188);
        f.bezierCurveTo(b * 74.01138305664062, b * 140.76705932617188, b * 74.01138305664062, b * 140.76705932617188, b * 51.011383056640625, b * 124.76705932617188);
        f.bezierCurveTo(b * 42.011383056640625, b * 118.76705932617188, b * 37.011383056640625, b * 119.76705932617188, b * 33.011383056640625, b * 126.76705932617188);
        f.closePath();
        wt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 13.011383056640625, b * 229.76705932617188);
        f.bezierCurveTo(b * 45.511383056640625, b * 233.76705932617188, b * 45.511383056640625, b * 233.76705932617188, b * 78.01138305664062, b * 237.76705932617188);
        f.bezierCurveTo(b * 92.01138305664062, b * 239.76705932617188, b * 92.01138305664062, b * 246.76705932617188, b * 91.01138305664062, b * 257.7670593261719);
        f.bezierCurveTo(b * 92.01138305664062, b * 275.7670593261719, b * 91.01138305664062, b * 274.7670593261719, b * 68.01138305664062, b * 276.7670593261719);
        f.bezierCurveTo(b * 42.511383056640625, b * 279.7670593261719, b * 42.511383056640625, b * 279.7670593261719, b * 17.011383056640625, b * 282.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 282.7670593261719, b * 3.011383056640625, b * 276.7670593261719, b * 2.011383056640625, b * 260.7670593261719);
        f.bezierCurveTo(b * 2.011383056640625, b * 231.76705932617188, b * 4.011383056640625, b * 232.76705932617188, b * 11.011383056640625, b * 230.76705932617188);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 97.01138305664062, b * 329.7670593261719);
        f.bezierCurveTo(b * 68.51138305664062, b * 343.7670593261719, b * 68.51138305664062, b * 343.7670593261719, b * 40.011383056640625, b * 357.7670593261719);
        f.bezierCurveTo(b * 29.011383056640625, b * 360.7670593261719, b * 27.011383056640625, b * 361.7670593261719, b * 20.011383056640625, b * 346.7670593261719);
        f.bezierCurveTo(b * 16.511383056640625, b * 336.2670593261719, b * 16.511383056640625, b * 336.2670593261719, b * 13.011383056640625, b * 325.7670593261719);
        f.bezierCurveTo(b * 10.011383056640625, b * 307.7670593261719, b * 18.011383056640625, b * 312.7670593261719, b * 34.011383056640625, b * 306.7670593261719);
        f.bezierCurveTo(b * 59.511383056640625, b * 302.2670593261719, b * 59.511383056640625, b * 302.2670593261719, b * 85.01138305664062, b * 297.7670593261719);
        f.bezierCurveTo(b * 97.01138305664062, b * 294.7670593261719, b * 100.01138305664062, b * 297.7670593261719, b * 100.01138305664062, b * 307.7670593261719);
        f.bezierCurveTo(b * 105.01138305664062, b * 326.7670593261719, b * 103.01138305664062, b * 325.7670593261719, b * 97.01138305664062, b * 329.7670593261719);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 394.0113830566406, b * 181.76705932617188);
        f.bezierCurveTo(b * 426.5113830566406, b * 166.76705932617188, b * 426.5113830566406, b * 166.76705932617188, b * 459.0113830566406, b * 151.76705932617188);
        f.bezierCurveTo(b * 469.0113830566406, b * 152.76705932617188, b * 469.0113830566406, b * 155.76705932617188, b * 472.0113830566406, b * 165.76705932617188);
        f.bezierCurveTo(b * 476.0113830566406, b * 177.26705932617188, b * 476.0113830566406, b * 177.26705932617188, b * 480.0113830566406, b * 188.76705932617188);
        f.bezierCurveTo(b * 483.0113830566406, b * 199.76705932617188, b * 480.0113830566406, b * 200.76705932617188, b * 460.0113830566406, b * 205.76705932617188);
        f.bezierCurveTo(b * 433.5113830566406, b * 210.26705932617188, b * 433.5113830566406, b * 210.26705932617188, b * 407.0113830566406, b * 214.76705932617188);
        f.bezierCurveTo(b * 395.0113830566406, b * 218.76705932617188, b * 397.0113830566406, b * 211.76705932617188, b * 393.0113830566406, b * 202.76705932617188);
        f.bezierCurveTo(b * 387.0113830566406, b * 188.76705932617188, b * 387.0113830566406, b * 187.76705932617188, b * 394.0113830566406, b * 181.76705932617188);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 411.0113830566406, b * 234.76705932617188);
        f.bezierCurveTo(b * 446.0113830566406, b * 233.26705932617188, b * 446.0113830566406, b * 233.26705932617188, b * 481.0113830566406, b * 231.76705932617188);
        f.bezierCurveTo(b * 491.0113830566406, b * 232.76705932617188, b * 493.0113830566406, b * 239.76705932617188, b * 491.0113830566406, b * 251.76705932617188);
        f.bezierCurveTo(b * 490.0113830566406, b * 263.7670593261719, b * 490.0113830566406, b * 263.7670593261719, b * 489.0113830566406, b * 275.7670593261719);
        f.bezierCurveTo(b * 487.0113830566406, b * 283.7670593261719, b * 483.0113830566406, b * 284.7670593261719, b * 464.0113830566406, b * 280.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 273.7670593261719, b * 437.0113830566406, b * 273.7670593261719, b * 410.0113830566406, b * 266.7670593261719);
        f.bezierCurveTo(b * 400.0113830566406, b * 261.7670593261719, b * 401.0113830566406, b * 259.7670593261719, b * 402.0113830566406, b * 249.76705932617188);
        f.bezierCurveTo(b * 401.0113830566406, b * 237.76705932617188, b * 403.0113830566406, b * 235.76705932617188, b * 408.0113830566406, b * 234.76705932617188);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 400.0113830566406, b * 290.7670593261719);
        f.bezierCurveTo(b * 437.0113830566406, b * 301.2670593261719, b * 437.0113830566406, b * 301.2670593261719, b * 474.0113830566406, b * 311.7670593261719);
        f.bezierCurveTo(b * 484.0113830566406, b * 319.7670593261719, b * 481.0113830566406, b * 322.7670593261719, b * 474.0113830566406, b * 335.7670593261719);
        f.bezierCurveTo(b * 465.5113830566406, b * 354.7670593261719, b * 465.5113830566406, b * 354.7670593261719, b * 457.0113830566406, b * 373.7670593261719);
        f.bezierCurveTo(b * 449.0113830566406, b * 386.7670593261719, b * 444.0113830566406, b * 384.7670593261719, b * 427.0113830566406, b * 370.7670593261719);
        f.bezierCurveTo(b * 403.0113830566406, b * 354.7670593261719, b * 403.0113830566406, b * 354.7670593261719, b * 379.0113830566406, b * 338.7670593261719);
        f.bezierCurveTo(b * 371.0113830566406, b * 327.7670593261719, b * 373.0113830566406, b * 323.7670593261719, b * 377.0113830566406, b * 313.7670593261719);
        f.bezierCurveTo(b * 386.0113830566406, b * 292.7670593261719, b * 393.0113830566406, b * 288.7670593261719, b * 398.0113830566406, b * 291.7670593261719);
        f.closePath();
        wt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 366.0113830566406, b * 361.2216033935547);
        f.bezierCurveTo(b * 393.0113830566406, b * 383.2216033935547, b * 393.0113830566406, b * 383.2216033935547, b * 420.0113830566406, b * 405.2216033935547);
        f.bezierCurveTo(b * 427.0113830566406, b * 414.2216033935547, b * 425.0113830566406, b * 417.2216033935547, b * 413.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 405.5113830566406, b * 435.2216033935547, b * 405.5113830566406, b * 435.2216033935547, b * 398.0113830566406, b * 442.2216033935547);
        f.bezierCurveTo(b * 388.0113830566406, b * 451.2216033935547, b * 385.0113830566406, b * 445.2216033935547, b * 373.0113830566406, b * 428.2216033935547);
        f.bezierCurveTo(b * 358.5113830566406, b * 408.2216033935547, b * 358.5113830566406, b * 408.2216033935547, b * 344.0113830566406, b * 388.2216033935547);
        f.bezierCurveTo(b * 337.0113830566406, b * 378.2216033935547, b * 342.0113830566406, b * 377.2216033935547, b * 347.0113830566406, b * 371.2216033935547);
        f.bezierCurveTo(b * 359.0113830566406, b * 359.2216033935547, b * 361.0113830566406, b * 358.2216033935547, b * 364.0113830566406, b * 361.2216033935547);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 323.0113830566406, b * 393.2216033935547);
        f.bezierCurveTo(b * 338.0113830566406, b * 424.7216033935547, b * 338.0113830566406, b * 424.7216033935547, b * 353.0113830566406, b * 456.2216033935547);
        f.bezierCurveTo(b * 355.0113830566406, b * 467.2216033935547, b * 354.0113830566406, b * 469.2216033935547, b * 336.0113830566406, b * 475.2216033935547);
        f.bezierCurveTo(b * 326.0113830566406, b * 478.2216033935547, b * 326.0113830566406, b * 478.2216033935547, b * 316.0113830566406, b * 481.2216033935547);
        f.bezierCurveTo(b * 304.0113830566406, b * 484.2216033935547, b * 304.0113830566406, b * 477.2216033935547, b * 301.0113830566406, b * 454.2216033935547);
        f.bezierCurveTo(b * 295.5113830566406, b * 429.2216033935547, b * 295.5113830566406, b * 429.2216033935547, b * 290.0113830566406, b * 404.2216033935547);
        f.bezierCurveTo(b * 287.0113830566406, b * 396.2216033935547, b * 297.0113830566406, b * 394.2216033935547, b * 303.0113830566406, b * 392.2216033935547);
        f.bezierCurveTo(b * 316.0113830566406, b * 387.2216033935547, b * 318.0113830566406, b * 387.2216033935547, b * 323.0113830566406, b * 394.2216033935547);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 270.0113830566406, b * 413.2216033935547);
        f.bezierCurveTo(b * 271.0113830566406, b * 445.7216033935547, b * 271.0113830566406, b * 445.7216033935547, b * 272.0113830566406, b * 478.2216033935547);
        f.bezierCurveTo(b * 273.0113830566406, b * 490.2216033935547, b * 267.0113830566406, b * 493.2216033935547, b * 249.01138305664062, b * 490.2216033935547);
        f.bezierCurveTo(b * 222.01138305664062, b * 492.2216033935547, b * 220.01138305664062, b * 485.2216033935547, b * 225.01138305664062, b * 467.2216033935547);
        f.bezierCurveTo(b * 230.51138305664062, b * 440.2216033935547, b * 230.51138305664062, b * 440.2216033935547, b * 236.01138305664062, b * 413.2216033935547);
        f.bezierCurveTo(b * 237.01138305664062, b * 405.2216033935547, b * 238.01138305664062, b * 404.2216033935547, b * 253.01138305664062, b * 403.2216033935547);
        f.bezierCurveTo(b * 269.0113830566406, b * 405.2216033935547, b * 270.0113830566406, b * 407.2216033935547, b * 269.0113830566406, b * 412.2216033935547);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 207.01138305664062, b * 406.2216033935547);
        f.bezierCurveTo(b * 197.51138305664062, b * 440.7216033935547, b * 197.51138305664062, b * 440.7216033935547, b * 188.01138305664062, b * 475.2216033935547);
        f.bezierCurveTo(b * 184.01138305664062, b * 485.2216033935547, b * 179.01138305664062, b * 491.2216033935547, b * 152.01138305664062, b * 477.2216033935547);
        f.bezierCurveTo(b * 136.51138305664062, b * 469.7216033935547, b * 136.51138305664062, b * 469.7216033935547, b * 121.01138305664062, b * 462.2216033935547);
        f.bezierCurveTo(b * 109.01138305664062, b * 453.2216033935547, b * 117.01138305664062, b * 447.2216033935547, b * 133.01138305664062, b * 427.2216033935547);
        f.bezierCurveTo(b * 146.51138305664062, b * 406.7216033935547, b * 146.51138305664062, b * 406.7216033935547, b * 160.01138305664062, b * 386.2216033935547);
        f.bezierCurveTo(b * 163.01138305664062, b * 377.2216033935547, b * 168.01138305664062, b * 378.2216033935547, b * 187.01138305664062, b * 387.2216033935547);
        f.bezierCurveTo(b * 206.01138305664062, b * 395.2216033935547, b * 208.01138305664062, b * 398.2216033935547, b * 207.01138305664062, b * 405.2216033935547);
        f.closePath();
        wt(f, d[3], d[2], b * 12);
        f.globalAlpha = c ? 0.5 : 1;
        f.translate(0, b * 5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        wt(f, d[0], d[0], b * 12);
        f.globalAlpha = 1;
        f.translate(0, b * -5);
        f.beginPath();
        f.lineCap = "round";
        f.lineJoin = "round";
        f.moveTo(b * 130.01138305664062, b * 375.2216033935547);
        f.bezierCurveTo(b * 109.51138305664062, b * 400.7216033935547, b * 109.51138305664062, b * 400.7216033935547, b * 89.01138305664062, b * 426.2216033935547);
        f.bezierCurveTo(b * 82.01138305664062, b * 435.2216033935547, b * 77.01138305664062, b * 435.2216033935547, b * 62.011383056640625, b * 417.2216033935547);
        f.bezierCurveTo(b * 43.011383056640625, b * 397.2216033935547, b * 47.011383056640625, b * 395.2216033935547, b * 62.011383056640625, b * 382.2216033935547);
        f.bezierCurveTo(b * 84.01138305664062, b * 366.7216033935547, b * 84.01138305664062, b * 366.7216033935547, b * 106.01138305664062, b * 351.2216033935547);
        f.bezierCurveTo(b * 116.01138305664062, b * 344.2216033935547, b * 120.01138305664062, b * 347.2216033935547, b * 127.01138305664062, b * 356.2216033935547);
        f.bezierCurveTo(b * 137.01138305664062, b * 366.2216033935547, b * 137.01138305664062, b * 366.2216033935547, b * 131.01138305664062, b * 376.2216033935547);
        f.closePath();
        wt(f, d[4], d[2], b * 12);
        return e;
    }
    const Um = 3;
    function Ym(a, b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        c.width = a * 253;
        c.height = a * 192;
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 42, a * 99);
        d.globalAlpha = 0.5;
        xt(d, a * -7, a * -20, a * 14, a * 39, a * 20);
        d.restore();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 37, a * 94);
        xt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
        d.restore();
        wt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 136, a * 99);
        d.globalAlpha = 0.5;
        xt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        wt(d, b[0], b[0], a * 13);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 131, a * 94);
        xt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
        d.restore();
        wt(d, b[2], b[2], a * 13);
        d.save();
        d.translate(a * 131, a * 94);
        xt(d, a * -76, a * -61, a * 152, a * 122, a * 20);
        d.restore();
        wt(d, b[3], b[1], a * 8);
        d.save();
        d.translate(a * 168.5, a * 93.5);
        xt(d, a * -30.5, a * -58.5, a * 61, a * 117, a * 20);
        d.restore();
        wt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 93.5, a * 95.5);
        xt(d, a * -32, a * -59.5, a * 59, a * 119, a * 20);
        d.restore();
        wt(d, b[3], b[4], a * 6);
        d.save();
        d.translate(a * 130.5, a * 94);
        xt(d, a * -36, a * -67, a * 73, a * 134, a * 20);
        d.restore();
        wt(d, b[3], b[2], a * 8);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 133, a * 97);
        xt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 133, a * 92);
        xt(d, a * -83, a * -12, a * 160, a * 24, a * 0);
        d.restore();
        wt(d, b[2]);
        d.globalAlpha = 0.5;
        d.save();
        d.translate(a * 228, a * 99.5);
        d.globalAlpha = 0.5;
        xt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 223, a * 94.5);
        xt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
        d.restore();
        wt(d, b[2]);
        d.save();
        d.translate(a * 133.5, a * 175.5);
        d.globalAlpha = 0.5;
        xt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        wt(d, b[0]);
        d.globalAlpha = 1;
        d.save();
        d.translate(a * 128.5, a * 170.5);
        xt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
        d.restore();
        wt(d, b[2]);
        return c;
    }
    function Km(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 310;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 192);
        e.bezierCurveTo(a * 198, a * 202, a * 245, a * 203, a * 335, a * 194);
        e.bezierCurveTo(a * 336, a * 232, a * 326, a * 235, a * 232, a * 237);
        e.bezierCurveTo(a * 161, a * 235, a * 122, a * 235, a * 126, a * 193);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 146, a * 239);
        e.bezierCurveTo(a * 174, a * 74, a * 287, a * 88, a * 320, a * 240);
        e.bezierCurveTo(a * 329, a * 231, a * 340, a * 219, a * 332, a * 115);
        e.bezierCurveTo(a * 330, a * 40, a * 144, a * 30, a * 129, a * 116);
        e.bezierCurveTo(a * 124, a * 217, a * 124, a * 228, a * 143, a * 237);
        e.closePath();
        wt(e, c[0], c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126, a * 193);
        e.bezierCurveTo(a * 173, a * 94, a * 209, a * 100, a * 228, a * 57);
        e.bezierCurveTo(a * 190, a * 112, a * 165, a * 115, a * 127, a * 184);
        e.closePath();
        wt(e, Nn, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 230, a * 57);
        e.bezierCurveTo(a * 266, a * 117, a * 310, a * 130, a * 332, a * 183);
        e.bezierCurveTo(a * 290, a * 112, a * 262, a * 109, a * 230, a * 56);
        e.closePath();
        wt(e, sr, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 154, a * 212);
        e.bezierCurveTo(a * 208, a * 224, a * 252, a * 219, a * 305, a * 212);
        e.bezierCurveTo(a * 267, a * 219, a * 204, a * 222, a * 155, a * 212);
        e.closePath();
        wt(e, undefined, c[1], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 239, a * 59);
        e.bezierCurveTo(a * 302, a * 72, a * 325, a * 84, a * 326, a * 115);
        e.bezierCurveTo(a * 289, a * 80, a * 270, a * 88, a * 253, a * 78);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 216, a * 61);
        e.bezierCurveTo(a * 209, a * 70, a * 209, a * 70, a * 202, a * 79);
        e.bezierCurveTo(a * 173, a * 87, a * 162, a * 91, a * 137, a * 107);
        e.bezierCurveTo(a * 153, a * 78, a * 174, a * 67, a * 212, a * 62);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 175, a * 125);
        e.bezierCurveTo(a * 218, a * 94, a * 238, a * 90, a * 281, a * 125);
        e.bezierCurveTo(a * 245, a * 89, a * 240, a * 80, a * 228, a * 67);
        e.bezierCurveTo(a * 207, a * 100, a * 192, a * 104, a * 177, a * 123);
        e.closePath();
        wt(e, c[2]);
        return d;
    }
    function Vm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 81;
        d.height = a * 77;
        e.translate(0, a * 10);
        e.scale(0.2, 0.2);
        e.translate(0, a * -30);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 36.5, a * 278.0625);
            e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
            e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
            e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
            e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
            e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
            e.closePath();
            wt(e, b[0], b[3], a * 50);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 36.5, a * 278.0625);
        e.bezierCurveTo(a * 67.5, a * 316.0625, a * 134.5, a * 334.0625, a * 199.5, a * 319.0625);
        e.bezierCurveTo(a * 254.5, a * 304.0625, a * 346.5, a * 270.0625, a * 348.5, a * 237.0625);
        e.bezierCurveTo(a * 359.5, a * 206.0625, a * 318.5, a * 129.0625, a * 262.5, a * 122.0625);
        e.bezierCurveTo(a * 213.5, a * 115.0625, a * 166.5, a * 133.0625, a * 104.5, a * 166.0625);
        e.bezierCurveTo(a * 54.5, a * 194.0625, a * 23.5, a * 241.0625, a * 36.5, a * 277.0625);
        e.closePath();
        wt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 214.5, a * 124.0625);
        e.bezierCurveTo(a * 242.5, a * 125.0625, a * 272.5, a * 159.0625, a * 283.5, a * 184.0625);
        e.bezierCurveTo(a * 277.5, a * 161.0625, a * 233.5, a * 128.0625, a * 219.5, a * 122.0625);
        e.closePath();
        wt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 157.5, a * 145.0625);
        e.bezierCurveTo(a * 176.5, a * 148.0625, a * 205.5, a * 176.0625, a * 212.5, a * 197.0625);
        e.bezierCurveTo(a * 205.5, a * 178.0625, a * 177.5, a * 152.0625, a * 156.5, a * 142.0625);
        e.closePath();
        wt(e, b[0], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103.5, a * 169.0625);
        e.bezierCurveTo(a * 160.5, a * 166.0625, a * 228.5, a * 312.0625, a * 162.5, a * 323.0625);
        e.bezierCurveTo(a * 128.5, a * 330.0625, a * 45.5, a * 312.0625, a * 34.5, a * 268.0625);
        e.bezierCurveTo(a * 30.5, a * 238.0625, a * 44.5, a * 222.0625, a * 52.5, a * 211.0625);
        e.bezierCurveTo(a * 82.5, a * 174.0625, a * 104.5, a * 166.0625, a * 119.5, a * 172.0625);
        e.closePath();
        wt(e, b[2], b[1], a * 19);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 194.5, a * 313.0625);
        e.bezierCurveTo(a * 222.5, a * 306.0625, a * 319.5, a * 271.0625, a * 337.5, a * 241.0625);
        e.bezierCurveTo(a * 274.5, a * 270.0625, a * 216.5, a * 288.0625, a * 199.5, a * 287.0625);
        e.bezierCurveTo(a * 198.5, a * 302.0625, a * 195.5, a * 311.0625, a * 193.5, a * 312.0625);
        e.closePath();
        wt(e, b[1]);
        e.scale(3, 3);
        e.translate(15, a * 10);
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 4, a * 32);
            e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
            e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
            e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
            wt(e, ll, b[3], a * 28);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 56, a * 6);
            e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
            e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
            e.closePath();
            wt(e, b[3], b[3], a * 28);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        wt(e, wh, b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        wt(e, b[1], b[1], a * 17);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 4, a * 32);
        e.bezierCurveTo(a * 19, a * 25, a * 19, a * 25, a * 34, a * 18);
        e.bezierCurveTo(a * 41.5, a * 23.5, a * 41.5, a * 23.5, a * 49, a * 29);
        e.bezierCurveTo(a * 59.5, a * 20, a * 59.5, a * 20, a * 70, a * 11);
        wt(e, undefined, b[2], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 56, a * 6);
        e.bezierCurveTo(a * 63.5, a * 13.5, a * 63.5, a * 13.5, a * 71, a * 21);
        e.bezierCurveTo(a * 74.5, a * 11.5, a * 74.5, a * 11.5, a * 78, a * 2);
        e.closePath();
        wt(e, b[2], b[2], a * 10);
        return d;
    }
    function Xm(b) {
        var c = document.createElement("canvas");
        var d = c.getContext("2d");
        var e = b * 600;
        var f = b * 22;
        var g = b * 4;
        var a = b * 4;
        c.width = e;
        c.height = f;
        xt(d, b * 5, b * 5, e - b * 10, f - b * 10, g);
        wt(d, null, "#BBE8EF", a);
        return c;
    }
    function Zm(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 160;
        d.height = a * 161;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80.5, a * 78);
        xt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80.5, a * 78);
        xt(e, a * -71.5, a * -71, a * 143, a * 143, a * 10);
        e.restore();
        wt(e, c[1], c[2], a * 6);
        e.save();
        e.translate(a * 80, a * 78.5);
        xt(e, a * -17, a * -72.5, a * 34, a * 145, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 80, a * 79.5);
        xt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 80, a * 79.5);
        xt(e, a * -73, a * -16.5, a * 145, a * 34, a * 10);
        e.restore();
        wt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 79, a * 71);
        e.bezierCurveTo(a * 90, a * 42, a * 98, a * 36, a * 109, a * 43);
        e.bezierCurveTo(a * 119, a * 47, a * 128, a * 62, a * 107, a * 72);
        e.bezierCurveTo(a * 96, a * 78.5, a * 96, a * 78.5, a * 85, a * 85);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 84, a * 78);
        e.bezierCurveTo(a * 113, a * 82, a * 123, a * 97, a * 115, a * 108);
        e.bezierCurveTo(a * 110, a * 119, a * 98, a * 124, a * 87, a * 107);
        e.bezierCurveTo(a * 81.5, a * 94.5, a * 81.5, a * 94.5, a * 76, a * 82);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 80, a * 73);
        e.bezierCurveTo(a * 64, a * 37, a * 55, a * 34, a * 45, a * 42);
        e.bezierCurveTo(a * 30, a * 54, a * 36, a * 65, a * 51, a * 72);
        e.bezierCurveTo(a * 62.5, a * 77, a * 62.5, a * 77, a * 74, a * 82);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 82, a * 83);
        e.bezierCurveTo(a * 73, a * 107, a * 60, a * 123, a * 47, a * 113);
        e.bezierCurveTo(a * 33, a * 105, a * 33, a * 92, a * 52, a * 85);
        e.bezierCurveTo(a * 74, a * 73, a * 77, a * 76, a * 76, a * 75);
        e.closePath();
        wt(e, c[3], c[4], a * 6);
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(0, a * 10);
        e.save();
        e.translate(a * 78.5, a * 78);
        xt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(0, a * -10);
        e.save();
        e.translate(a * 78.5, a * 78);
        xt(e, a * -13.5, a * -14, a * 27, a * 27, a * 6);
        e.restore();
        wt(e, c[3], c[4], a * 6);
        return d;
    }
    function $m(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        xt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        wt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 110.57142639160156, a * 197.09820556640625);
        e.bezierCurveTo(a * 158.07142639160156, a * 179.09820556640625, a * 158.07142639160156, a * 179.09820556640625, a * 205.57142639160156, a * 161.09820556640625);
        e.bezierCurveTo(a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 235.45535278320312, a * 205.57142639160156, a * 309.8125);
        e.bezierCurveTo(a * 205.57142639160156, a * 323.8125, a * 200.57142639160156, a * 325.8125, a * 187.57142639160156, a * 326.8125);
        e.bezierCurveTo(a * 155.57142639160156, a * 326.3125, a * 155.57142639160156, a * 326.3125, a * 123.57142639160156, a * 325.8125);
        e.bezierCurveTo(a * 111.57142639160156, a * 326.8125, a * 109.57142639160156, a * 321.8125, a * 110.57142639160156, a * 312.8125);
        e.closePath();
        wt(e, c[3], c[4], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        wt(e, ll, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        wt(e, xh, c[6], a * 15);
        return d;
    }
    function ec(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 109;
        d.height = a * 110;
        zt(e, a * 54.5, a * 55, a * 48.038209575038294);
        wt(e, b[0], b[1], a * 8);
        if (c == 0) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54.928558349609375, a * 43.72320556640625);
            e.bezierCurveTo(a * 66.92855834960938, a * 31.72320556640625, a * 69.92855834960938, a * 29.72320556640625, a * 74.92855834960938, a * 29.72320556640625);
            e.bezierCurveTo(a * 86.92855834960938, a * 28.72320556640625, a * 91.92855834960938, a * 42.72320556640625, a * 89.92855834960938, a * 52.72320556640625);
            e.bezierCurveTo(a * 88.92855834960938, a * 63.72320556640625, a * 73.92855834960938, a * 75.72320556640625, a * 55.928558349609375, a * 87.72320556640625);
            e.bezierCurveTo(a * 37.928558349609375, a * 78.72320556640625, a * 26.928558349609375, a * 65.72320556640625, a * 19.928558349609375, a * 54.72320556640625);
            e.bezierCurveTo(a * 13.928558349609375, a * 42.72320556640625, a * 21.928558349609375, a * 28.72320556640625, a * 35.928558349609375, a * 29.72320556640625);
            e.bezierCurveTo(a * 45.928558349609375, a * 31.72320556640625, a * 51.928558349609375, a * 40.72320556640625, a * 53.928558349609375, a * 44.72320556640625);
            e.closePath();
            wt(e, b[2]);
        } else if (c == 1) {
            e.save();
            e.translate(a * 55, a * 39.48748779296875);
            xt(e, a * -11.5, a * -36, a * 23, a * 72, a * 10);
            e.restore();
            wt(e, b[2], b[3], a * 4);
            zt(e, a * 54.5, a * 78.48748779296875, a * 22.02271554554524);
            wt(e, b[4], b[3], a * 4);
            e.save();
            e.translate(a * 55.5, a * 57.287506103515625);
            xt(e, a * -9, a * -16, a * 18, a * 32, a * 10);
            e.restore();
            wt(e, b[4]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 25.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 25.287506103515625, a * 63.5, a * 25.287506103515625, a * 54.5, a * 25.287506103515625);
            e.closePath();
            wt(e, vk, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 37.287506103515625);
            e.bezierCurveTo(a * 60.5, a * 37.287506103515625, a * 60.5, a * 37.287506103515625, a * 54.5, a * 37.287506103515625);
            e.closePath();
            wt(e, ll, b[5], a * 4);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 66.5, a * 50.287506103515625);
            e.bezierCurveTo(a * 61, a * 50.287506103515625, a * 61, a * 50.287506103515625, a * 55.5, a * 50.287506103515625);
            e.closePath();
            wt(e, Cq, b[5], a * 4);
        } else if (c == 2) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 45.928558349609375, a * 55.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 67.29463195800781, a * 38.928558349609375, a * 67.29463195800781, a * 31.928558349609375, a * 79.29463195800781);
            e.bezierCurveTo(a * 15.928558349609375, a * 85.29463195800781, a * 17.928558349609375, a * 86.29463195800781, a * 17.928558349609375, a * 90.29463195800781);
            e.bezierCurveTo(a * 19.928558349609375, a * 94.29463195800781, a * 21.928558349609375, a * 94.29463195800781, a * 27.928558349609375, a * 92.29463195800781);
            e.bezierCurveTo(a * 29.928558349609375, a * 98.29463195800781, a * 30.928558349609375, a * 99.29463195800781, a * 33.928558349609375, a * 99.29463195800781);
            e.bezierCurveTo(a * 38.928558349609375, a * 97.29463195800781, a * 38.928558349609375, a * 93.29463195800781, a * 37.928558349609375, a * 86.29463195800781);
            e.bezierCurveTo(a * 45.428558349609375, a * 73.29463195800781, a * 51.928558349609375, a * 64.29463195800781, a * 52.928558349609375, a * 60.29463195800781);
            e.closePath();
            wt(e, b[2]);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 55.928558349609375, a * 8.866058349609375);
            e.bezierCurveTo(a * 35.928558349609375, a * 35.866058349609375, a * 37.928558349609375, a * 48.866058349609375, a * 46.928558349609375, a * 62.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 72.86605834960938, a * 80.92855834960938, a * 55.866058349609375, a * 93.92855834960938, a * 36.866058349609375);
            e.closePath();
            wt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 93.92855834960938, a * 36.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 37.866058349609375, a * 77.92855834960938, a * 36.866058349609375, a * 67.92855834960938, a * 28.866058349609375);
            e.bezierCurveTo(a * 53.928558349609375, a * 16.866058349609375, a * 53.928558349609375, a * 14.866058349609375, a * 55.928558349609375, a * 7.866058349609375);
            e.bezierCurveTo(a * 65.92855834960938, a * 4.866058349609375, a * 71.92855834960938, a * 7.866058349609375, a * 83.92855834960938, a * 13.866058349609375);
            e.bezierCurveTo(a * 96.92855834960938, a * 21.866058349609375, a * 95.92855834960938, a * 31.866058349609375, a * 92.92855834960938, a * 36.866058349609375);
            e.closePath();
            wt(e, b[3], b[4], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 68.92855834960938, a * 16.866058349609375);
            e.bezierCurveTo(a * 71.92855834960938, a * 13.866058349609375, a * 76.92855834960938, a * 16.866058349609375, a * 79.92855834960938, a * 21.866058349609375);
            e.bezierCurveTo(a * 82.92855834960938, a * 24.866058349609375, a * 81.92855834960938, a * 27.866058349609375, a * 73.92855834960938, a * 24.866058349609375);
            e.bezierCurveTo(a * 67.92855834960938, a * 20.866058349609375, a * 66.92855834960938, a * 19.866058349609375, a * 67.92855834960938, a * 17.866058349609375);
            e.closePath();
            wt(e, b[2]);
        } else if (c == 3) {
            e.scale(0.9, 0.9);
            e.translate(a * 6, 0);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 54, a * 0.421875);
            e.bezierCurveTo(a * 84, a * 45.421875, a * 89, a * 51.421875, a * 83, a * 74.421875);
            e.bezierCurveTo(a * 74, a * 95.421875, a * 46, a * 98.421875, a * 30, a * 78.421875);
            e.bezierCurveTo(a * 22, a * 59.421875, a * 27, a * 49.421875, a * 34, a * 36.421875);
            e.closePath();
            wt(e, b[2], b[3], a * 6);
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 74, a * 52.421875);
            e.bezierCurveTo(a * 77, a * 73.421875, a * 69, a * 81.421875, a * 58, a * 81.421875);
            e.bezierCurveTo(a * 66, a * 71.421875, a * 70, a * 66.421875, a * 74, a * 52.421875);
            e.closePath();
            wt(e, b[3]);
        }
        return d;
    }
    function ic(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 170;
        f.height = b * 200;
        g.translate(b * 5, b * 15);
        if (e == 1) {
            g.translate(0, b * -5);
            zt(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
            wt(g, d[1], d[5], b * 20);
            zt(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
            wt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 31.267044067382812);
            xt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
            g.restore();
            wt(g, d[1], d[5], b * 20);
            g.save();
            g.translate(b * 77.00003051757812, b * 13.267044067382812);
            xt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
            g.restore();
            wt(g, d[1], d[5], b * 20);
        }
        zt(g, b * 77.00003051757812, b * 104.49432373046875, b * 71.84010022264724);
        wt(g, d[1], d[2], b * 7);
        zt(g, b * 77.00003051757812, b * 104.22160339355469, b * 61.554853586049575);
        wt(g, d[1], d[2], b * 7);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 18.000030517578125, b * 105.85795593261719);
        g.bezierCurveTo(b * 134.00003051757812, b * 104.85795593261719, b * 77.00003051757812, b * 104.85795593261719, b * 136.00003051757812, b * 103.85795593261719);
        g.closePath();
        wt(g, d[1], d[2], b * 8);
        zt(g, b * 77.00003051757812, b * 104.6761474609375, b * 32.55764119219941);
        wt(g, d[1], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 112.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 87.03977966308594, b * 78.00003051757812, b * 62.03977966308594);
        g.closePath();
        wt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 78.00003051757812, b * 48.03977966308594);
        g.bezierCurveTo(b * 82.00003051757812, b * 55.53977966308594, b * 82.00003051757812, b * 55.53977966308594, b * 86.00003051757812, b * 63.03977966308594);
        g.bezierCurveTo(b * 78.00003051757812, b * 63.03977966308594, b * 78.00003051757812, b * 63.03977966308594, b * 70.00003051757812, b * 63.03977966308594);
        g.closePath();
        wt(g, d[3], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 80.00003051757812, b * 111.6761474609375);
        g.bezierCurveTo(b * 95.00003051757812, b * 97.1761474609375, b * 95.00003051757812, b * 97.1761474609375, b * 110.00003051757812, b * 82.6761474609375);
        g.closePath();
        wt(g, d[3], d[2], b * 8);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 107.00003051757812, b * 76.6761474609375);
        g.bezierCurveTo(b * 111.50003051757812, b * 82.6761474609375, b * 111.50003051757812, b * 82.6761474609375, b * 116.00003051757812, b * 88.6761474609375);
        g.bezierCurveTo(b * 118.50003051757812, b * 81.6761474609375, b * 118.50003051757812, b * 81.6761474609375, b * 121.00003051757812, b * 74.6761474609375);
        g.closePath();
        wt(g, d[3], d[2], b * 4);
        zt(g, b * 77.00003051757812, b * 105.03977966308594, b * 15.556349186104045);
        wt(g, d[3], d[2], b * 4);
        g.save();
        g.translate(b * 77.00003051757812, b * 31.267044067382812);
        g.rotate(0);
        xt(g, b * -6, b * -12.5, b * 12, b * 25, b * 10);
        g.restore();
        wt(g, d[1], d[2], b * 7);
        g.save();
        g.translate(b * 77.00003051757812, b * 13.267044067382812);
        g.rotate(0);
        xt(g, b * -15, b * -10.5, b * 30, b * 21, b * 10);
        g.restore();
        wt(g, d[1], d[2], b * 7);
        return f;
    }
    function tc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 465;
        d.height = a * 405;
        e.globalAlpha = 1;
        e.translate(a * 6, a * 0);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 39.000030517578125, a * 162.03977966308594);
        e.bezierCurveTo(a * 125.00003051757812, a * 84.03977966308594, a * 108.50003051757812, a * 115.03977966308594, a * 178.00003051757812, a * 68.03977966308594);
        e.bezierCurveTo(a * 299.0000305175781, a * 146.53977966308594, a * 299.0000305175781, a * 146.53977966308594, a * 420.0000305175781, a * 225.03977966308594);
        e.bezierCurveTo(a * 400.0000305175781, a * 288.53977966308594, a * 400.0000305175781, a * 288.53977966308594, a * 380.0000305175781, a * 352.03977966308594);
        e.bezierCurveTo(a * 216.50003051757812, a * 345.53977966308594, a * 216.50003051757812, a * 345.53977966308594, a * 53.000030517578125, a * 339.03977966308594);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        wt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 17.000030517578125, a * 149.94886779785156);
        e.bezierCurveTo(a * 76.00003051757812, a * 67.94886779785156, a * 177.00003051757812, a * 40.94886779785156, a * 232.00003051757812, a * 45.94886779785156);
        e.bezierCurveTo(a * 316.0000305175781, a * 46.94886779785156, a * 359.0000305175781, a * 74.94886779785156, a * 428.0000305175781, a * 145.94886779785156);
        e.bezierCurveTo(a * 414.0000305175781, a * 73.94886779785156, a * 386.0000305175781, a * 68.94886779785156, a * 359.0000305175781, a * 43.94886779785156);
        e.bezierCurveTo(a * 295.0000305175781, a * 5.9488677978515625, a * 239.00003051757812, a * 10.948867797851562, a * 207.00003051757812, a * 10.948867797851562);
        e.bezierCurveTo(a * 121.00003051757812, a * 20.948867797851562, a * 104.00003051757812, a * 34.94886779785156, a * 45.000030517578125, a * 84.94886779785156);
        e.bezierCurveTo(a * 14.000030517578125, a * 128.94886779785156, a * 18.000030517578125, a * 142.94886779785156, a * 16.000030517578125, a * 151.94886779785156);
        e.closePath();
        wt(e, c[2]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 23.000030517578125, a * 306.94886779785156);
        e.bezierCurveTo(a * 5.000030517578125, a * 275.94886779785156, a * 6.000030517578125, a * 201.94886779785156, a * 14.000030517578125, a * 150.94886779785156);
        e.bezierCurveTo(a * 40.000030517578125, a * 34.94886779785156, a * 157.00003051757812, a * 14.948867797851562, a * 199.00003051757812, a * 11.948867797851562);
        e.bezierCurveTo(a * 331.0000305175781, a * 0.9488677978515625, a * 409.0000305175781, a * 61.94886779785156, a * 428.0000305175781, a * 133.94886779785156);
        e.bezierCurveTo(a * 445.0000305175781, a * 207.94886779785156, a * 439.0000305175781, a * 274.94886779785156, a * 426.0000305175781, a * 342.94886779785156);
        e.bezierCurveTo(a * 355.0000305175781, a * 207.94886779785156, a * 345.0000305175781, a * 208.94886779785156, a * 333.0000305175781, a * 202.94886779785156);
        e.bezierCurveTo(a * 262.0000305175781, a * 143.94886779785156, a * 236.00003051757812, a * 148.94886779785156, a * 189.00003051757812, a * 162.94886779785156);
        e.bezierCurveTo(a * 82.00003051757812, a * 190.94886779785156, a * 78.00003051757812, a * 235.94886779785156, a * 62.000030517578125, a * 279.94886779785156);
        e.closePath();
        wt(e, wh, c[1], a * 16);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 60.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 183.00003051757812, a * 320.03977966308594, a * 342.0000305175781, a * 306.03977966308594, a * 399.0000305175781, a * 286.03977966308594);
        e.bezierCurveTo(a * 420.0000305175781, a * 345.03977966308594, a * 410.0000305175781, a * 335.03977966308594, a * 415.0000305175781, a * 362.03977966308594);
        e.bezierCurveTo(a * 351.0000305175781, a * 384.03977966308594, a * 299.0000305175781, a * 389.03977966308594, a * 215.00003051757812, a * 391.03977966308594);
        e.bezierCurveTo(a * 128.00003051757812, a * 388.03977966308594, a * 69.00003051757812, a * 373.03977966308594, a * 39.000030517578125, a * 359.03977966308594);
        e.closePath();
        wt(e, c[0], c[1], a * 13);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 47.000030517578125, a * 327.03977966308594);
        e.bezierCurveTo(a * 203.00003051757812, a * 377.03977966308594, a * 331.0000305175781, a * 349.03977966308594, a * 410.0000305175781, a * 330.03977966308594);
        e.closePath();
        wt(e, c[0], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 9.000030517578125, a * 339.1306915283203);
        e.bezierCurveTo(a * 2.000030517578125, a * 280.1306915283203, a * 30.000030517578125, a * 219.1306915283203, a * 85.00003051757812, a * 167.1306915283203);
        e.bezierCurveTo(a * 174.00003051757812, a * 82.13069152832031, a * 241.00003051757812, a * 101.13069152832031, a * 284.0000305175781, a * 115.13069152832031);
        e.bezierCurveTo(a * 333.0000305175781, a * 134.1306915283203, a * 376.0000305175781, a * 177.1306915283203, a * 410.0000305175781, a * 247.1306915283203);
        e.bezierCurveTo(a * 439.0000305175781, a * 300.1306915283203, a * 442.0000305175781, a * 346.1306915283203, a * 430.0000305175781, a * 363.1306915283203);
        e.bezierCurveTo(a * 418.0000305175781, a * 366.1306915283203, a * 395.0000305175781, a * 295.1306915283203, a * 355.0000305175781, a * 223.1306915283203);
        e.bezierCurveTo(a * 299.0000305175781, a * 156.1306915283203, a * 262.0000305175781, a * 155.1306915283203, a * 215.00003051757812, a * 159.1306915283203);
        e.bezierCurveTo(a * 133.00003051757812, a * 171.1306915283203, a * 120.00003051757812, a * 193.1306915283203, a * 96.00003051757812, a * 221.1306915283203);
        e.bezierCurveTo(a * 49.000030517578125, a * 262.1306915283203, a * 47.000030517578125, a * 306.1306915283203, a * 38.000030517578125, a * 336.1306915283203);
        e.bezierCurveTo(a * 30.000030517578125, a * 349.1306915283203, a * 30.000030517578125, a * 349.1306915283203, a * 22.000030517578125, a * 362.1306915283203);
        e.closePath();
        wt(e, c[2], c[1], a * 20);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 128.03977966308594);
        e.bezierCurveTo(a * 315.0000305175781, a * 131.03977966308594, a * 349.0000305175781, a * 178.03977966308594, a * 386.0000305175781, a * 234.03977966308594);
        e.bezierCurveTo(a * 444.0000305175781, a * 329.03977966308594, a * 446.0000305175781, a * 354.03977966308594, a * 427.0000305175781, a * 373.03977966308594);
        e.bezierCurveTo(a * 389.0000305175781, a * 389.03977966308594, a * 399.0000305175781, a * 329.03977966308594, a * 361.0000305175781, a * 277.03977966308594);
        e.bezierCurveTo(a * 306.0000305175781, a * 191.03977966308594, a * 266.0000305175781, a * 183.03977966308594, a * 220.00003051757812, a * 181.03977966308594);
        e.bezierCurveTo(a * 138.00003051757812, a * 184.03977966308594, a * 123.00003051757812, a * 212.03977966308594, a * 89.00003051757812, a * 271.03977966308594);
        e.bezierCurveTo(a * 52.000030517578125, a * 349.03977966308594, a * 68.00003051757812, a * 364.03977966308594, a * 33.000030517578125, a * 369.03977966308594);
        e.bezierCurveTo(a * 6.000030517578125, a * 366.03977966308594, a * 5.000030517578125, a * 341.03977966308594, a * 26.000030517578125, a * 288.03977966308594);
        e.bezierCurveTo(a * 60.000030517578125, a * 207.03977966308594, a * 100.00003051757812, a * 180.03977966308594, a * 113.00003051757812, a * 170.03977966308594);
        e.bezierCurveTo(a * 159.00003051757812, a * 132.03977966308594, a * 196.00003051757812, a * 133.03977966308594, a * 226.00003051757812, a * 129.03977966308594);
        e.closePath();
        wt(e, c[0], c[1], a * 20);
        return d;
    }
    function nc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 80;
        d.height = a * 160;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.save();
        xt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        wt(e, c[0]);
        e.restore();
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.save();
        xt(e, a * 33, a * 53, a * 10, a * 98, a * 10);
        wt(e, c[1], c[2], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * -150, a * -100);
        e.moveTo(a * 167.5, a * 171.0625);
        e.bezierCurveTo(a * 188, a * 171.0625, a * 188, a * 171.0625, a * 208.5, a * 171.0625);
        e.bezierCurveTo(a * 208.5, a * 156.0625, a * 208.5, a * 156.0625, a * 208.5, a * 141.0625);
        e.bezierCurveTo(a * 203.5, a * 113.0625, a * 179.5, a * 96.0625, a * 167.5, a * 141.0625);
        e.closePath();
        wt(e, c[3], c[4], a * 4);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.translate(a * 0, a * 1);
        e.moveTo(a * 180.5, a * 169.0625);
        e.bezierCurveTo(a * 180.5, a * 157.5625, a * 180.5, a * 157.5625, a * 180.5, a * 146.0625);
        e.bezierCurveTo(a * 181.5, a * 134.0625, a * 193.5, a * 129.0625, a * 196.5, a * 146.0625);
        e.bezierCurveTo(a * 196.5, a * 157.5625, a * 196.5, a * 157.5625, a * 196.5, a * 169.0625);
        e.closePath();
        wt(e, c[5]);
        e.restore();
        return d;
    }
    function oc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 372;
        d.height = a * 358;
        e.translate(a * 0, a * 10);
        e.globalAlpha = b ? 0.2 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        wt(e, c[0], c[0], a * 10);
        e.translate(a * 0, a * -10);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 107.00003051757812, a * 54.13069152832031);
        e.bezierCurveTo(a * 106.50003051757812, a * 38.63069152832031, a * 106.50003051757812, a * 38.63069152832031, a * 106.00003051757812, a * 23.130691528320312);
        e.bezierCurveTo(a * 121.50003051757812, a * 38.13069152832031, a * 121.50003051757812, a * 38.13069152832031, a * 137.00003051757812, a * 53.13069152832031);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 233.00003051757812, a * 53.6761474609375);
        e.bezierCurveTo(a * 247.00003051757812, a * 37.1761474609375, a * 247.00003051757812, a * 37.1761474609375, a * 261.0000305175781, a * 20.6761474609375);
        e.bezierCurveTo(a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 36.1761474609375, a * 261.0000305175781, a * 51.6761474609375);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 293.0000305175781, a * 54.403411865234375);
        e.bezierCurveTo(a * 300.0000305175781, a * 49.903411865234375, a * 300.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 45.403411865234375);
        e.bezierCurveTo(a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 49.903411865234375, a * 307.0000305175781, a * 54.403411865234375);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 77.00003051757812, a * 54.403411865234375);
        e.bezierCurveTo(a * 70.00003051757812, a * 50.403411865234375, a * 70.00003051757812, a * 50.403411865234375, a * 63.000030517578125, a * 46.403411865234375);
        e.bezierCurveTo(a * 62.500030517578125, a * 50.903411865234375, a * 62.500030517578125, a * 50.903411865234375, a * 62.000030517578125, a * 55.403411865234375);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 58.000030517578125, a * 122.3125);
        e.bezierCurveTo(a * 59.500030517578125, a * 97.3125, a * 59.500030517578125, a * 97.3125, a * 61.000030517578125, a * 72.3125);
        e.bezierCurveTo(a * 91.00003051757812, a * 89.3125, a * 91.00003051757812, a * 89.3125, a * 121.00003051757812, a * 106.3125);
        e.closePath();
        wt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 310.0000305175781, a * 127.3125);
        e.bezierCurveTo(a * 308.0000305175781, a * 98.3125, a * 308.0000305175781, a * 98.3125, a * 306.0000305175781, a * 69.3125);
        e.bezierCurveTo(a * 274.5000305175781, a * 88.8125, a * 274.5000305175781, a * 88.8125, a * 243.00003051757812, a * 108.3125);
        e.closePath();
        wt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 226.00003051757812, a * 87.85795593261719);
        e.bezierCurveTo(a * 243.50003051757812, a * 66.85795593261719, a * 243.50003051757812, a * 66.85795593261719, a * 261.0000305175781, a * 45.85795593261719);
        e.bezierCurveTo(a * 265.0000305175781, a * 83.85795593261719, a * 265.0000305175781, a * 83.85795593261719, a * 269.0000305175781, a * 121.85795593261719);
        e.bezierCurveTo(a * 235.00003051757812, a * 122.85795593261719, a * 233.00003051757812, a * 107.85795593261719, a * 228.00003051757812, a * 90.85795593261719);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 128.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 87.85795593261719, a * 104.50003051757812, a * 87.85795593261719, a * 104.00003051757812, a * 46.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 69.35795593261719, a * 126.50003051757812, a * 69.35795593261719, a * 149.00003051757812, a * 91.85795593261719);
        e.bezierCurveTo(a * 130.00003051757812, a * 123.85795593261719, a * 123.00003051757812, a * 132.8579559326172, a * 107.00003051757812, a * 130.8579559326172);
        e.closePath();
        wt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 59.000030517578125, a * 121.85795593261719);
        e.bezierCurveTo(a * 59.500030517578125, a * 99.35795593261719, a * 59.500030517578125, a * 99.35795593261719, a * 60.000030517578125, a * 76.85795593261719);
        e.bezierCurveTo(a * 84.00003051757812, a * 92.35795593261719, a * 84.00003051757812, a * 92.35795593261719, a * 108.00003051757812, a * 107.85795593261719);
        e.bezierCurveTo(a * 106.00003051757812, a * 148.8579559326172, a * 86.00003051757812, a * 148.8579559326172, a * 62.000030517578125, a * 123.85795593261719);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105.00003051757812, a * 132.8579559326172);
        e.bezierCurveTo(a * 104.50003051757812, a * 93.35795593261719, a * 104.50003051757812, a * 93.35795593261719, a * 104.00003051757812, a * 53.85795593261719);
        e.bezierCurveTo(a * 126.50003051757812, a * 75.85795593261719, a * 126.50003051757812, a * 75.85795593261719, a * 149.00003051757812, a * 97.85795593261719);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 311.0000305175781, a * 126.85795593261719);
        e.bezierCurveTo(a * 309.0000305175781, a * 101.35795593261719, a * 309.0000305175781, a * 101.35795593261719, a * 307.0000305175781, a * 75.85795593261719);
        e.bezierCurveTo(a * 271.0000305175781, a * 96.85795593261719, a * 271.0000305175781, a * 96.85795593261719, a * 235.00003051757812, a * 117.85795593261719);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 228.00003051757812, a * 96.85795593261719);
        e.bezierCurveTo(a * 244.50003051757812, a * 74.85795593261719, a * 244.50003051757812, a * 74.85795593261719, a * 261.0000305175781, a * 52.85795593261719);
        e.bezierCurveTo(a * 265.5000305175781, a * 89.85795593261719, a * 265.5000305175781, a * 89.85795593261719, a * 270.0000305175781, a * 126.85795593261719);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 12.000030517578125, a * 86.13069152832031);
        e.bezierCurveTo(a * 36.000030517578125, a * 113.13069152832031, a * 84.00003051757812, a * 111.13069152832031, a * 116.00003051757812, a * 113.13069152832031);
        e.bezierCurveTo(a * 164.00003051757812, a * 23.130691528320312, a * 172.00003051757812, a * 18.130691528320312, a * 181.00003051757812, a * 9.130691528320312);
        e.bezierCurveTo(a * 199.00003051757812, a * 29.130691528320312, a * 221.00003051757812, a * 78.13069152832031, a * 247.00003051757812, a * 112.13069152832031);
        e.bezierCurveTo(a * 301.0000305175781, a * 122.13069152832031, a * 338.0000305175781, a * 111.13069152832031, a * 359.0000305175781, a * 94.13069152832031);
        e.bezierCurveTo(a * 359.0000305175781, a * 113.13069152832031, a * 358.5000305175781, a * 105.13069152832031, a * 358.0000305175781, a * 116.13069152832031);
        e.bezierCurveTo(a * 270.5000305175781, a * 130.1306915283203, a * 270.5000305175781, a * 130.1306915283203, a * 183.00003051757812, a * 144.1306915283203);
        e.bezierCurveTo(a * 98.00003051757812, a * 128.6306915283203, a * 98.00003051757812, a * 128.6306915283203, a * 13.000030517578125, a * 113.13069152832031);
        e.closePath();
        wt(e, c[1], c[1], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 247.00003051757812, a * 115.76704406738281);
        e.bezierCurveTo(a * 305.0000305175781, a * 124.76704406738281, a * 335.0000305175781, a * 112.76704406738281, a * 359.0000305175781, a * 93.76704406738281);
        e.bezierCurveTo(a * 359.5000305175781, a * 113.26704406738281, a * 359.5000305175781, a * 113.26704406738281, a * 360.0000305175781, a * 132.7670440673828);
        e.bezierCurveTo(a * 339.0000305175781, a * 177.7670440673828, a * 281.0000305175781, a * 178.7670440673828, a * 243.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 214.50003051757812, a * 214.2670440673828, a * 214.50003051757812, a * 214.2670440673828, a * 186.00003051757812, a * 244.7670440673828);
        e.bezierCurveTo(a * 155.00003051757812, a * 214.2670440673828, a * 155.00003051757812, a * 214.2670440673828, a * 124.00003051757812, a * 183.7670440673828);
        e.bezierCurveTo(a * 51.000030517578125, a * 180.7670440673828, a * 21.000030517578125, a * 161.7670440673828, a * 9.000030517578125, a * 129.7670440673828);
        e.bezierCurveTo(a * 8.500030517578125, a * 110.76704406738281, a * 8.500030517578125, a * 110.76704406738281, a * 8.000030517578125, a * 91.76704406738281);
        e.bezierCurveTo(a * 31.000030517578125, a * 112.76704406738281, a * 87.00003051757812, a * 119.76704406738281, a * 116.00003051757812, a * 117.76704406738281);
        e.bezierCurveTo(a * 175.00003051757812, a * 18.767044067382812, a * 170.00003051757812, a * 23.767044067382812, a * 181.00003051757812, a * 14.767044067382812);
        e.bezierCurveTo(a * 199.00003051757812, a * 34.76704406738281, a * 203.00003051757812, a * 54.76704406738281, a * 247.00003051757812, a * 115.76704406738281);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 27.000030517578125, a * 94.76704406738281);
        e.bezierCurveTo(a * 11.000030517578125, a * 81.76704406738281, a * 31.000030517578125, a * 72.76704406738281, a * 44.000030517578125, a * 59.76704406738281);
        e.bezierCurveTo(a * 9.000030517578125, a * 65.76704406738281, a * 4.000030517578125, a * 78.76704406738281, a * 9.000030517578125, a * 89.76704406738281);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 352.0000305175781, a * 100.76705932617188);
        e.bezierCurveTo(a * 362.0000305175781, a * 92.76705932617188, a * 352.0000305175781, a * 84.76705932617188, a * 340.0000305175781, a * 68.76705932617188);
        e.bezierCurveTo(a * 360.0000305175781, a * 69.76705932617188, a * 364.0000305175781, a * 79.76705932617188, a * 364.0000305175781, a * 94.76705932617188);
        e.closePath();
        wt(e, c[1], c[1], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 25.000030517578125, a * 97.94886779785156);
        e.bezierCurveTo(a * 2.000030517578125, a * 76.94886779785156, a * 29.000030517578125, a * 62.94886779785156, a * 44.000030517578125, a * 59.94886779785156);
        e.bezierCurveTo(a * 8.000030517578125, a * 59.94886779785156, a * -0.999969482421875, a * 81.94886779785156, a * 4.000030517578125, a * 92.94886779785156);
        e.closePath();
        wt(e, c[3]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 349.0000305175781, a * 100.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 82.94886779785156, a * 353.0000305175781, a * 76.94886779785156, a * 337.0000305175781, a * 67.94886779785156);
        e.bezierCurveTo(a * 366.0000305175781, a * 69.94886779785156, a * 366.0000305175781, a * 83.94886779785156, a * 363.0000305175781, a * 101.94886779785156);
        e.closePath();
        wt(e, c[2], c[3], a * 10);
        zt(e, a * 46.000030517578125, a * 137.5852279663086, a * 9.219544457292887);
        wt(e, c[4], c[5], a * 1);
        zt(e, a * 308.0000305175781, a * 141.5852279663086, a * 8.54400374531753);
        wt(e, c[4], c[5], a * 1);
        zt(e, a * 92.00003051757812, a * 149.58523559570312, a * 14.866068747318506);
        wt(e, c[4], c[5], a * 1);
        zt(e, a * 262.0000305175781, a * 148.8579559326172, a * 15.620499351813308);
        wt(e, c[4], c[5], a * 1);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 184.00003051757812, a * 68.85795593261719);
        e.bezierCurveTo(a * 203.00003051757812, a * 108.85795593261719, a * 203.00003051757812, a * 108.85795593261719, a * 222.00003051757812, a * 148.8579559326172);
        e.bezierCurveTo(a * 202.50003051757812, a * 177.8579559326172, a * 202.50003051757812, a * 177.8579559326172, a * 183.00003051757812, a * 206.8579559326172);
        e.bezierCurveTo(a * 162.00003051757812, a * 178.8579559326172, a * 162.00003051757812, a * 178.8579559326172, a * 141.00003051757812, a * 150.8579559326172);
        e.closePath();
        wt(e, c[4], c[5], a * 10);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 183.00003051757812, a * 104.94886779785156);
        e.bezierCurveTo(a * 192.50003051757812, a * 125.44886779785156, a * 192.50003051757812, a * 125.44886779785156, a * 202.00003051757812, a * 145.94886779785156);
        e.bezierCurveTo(a * 192.00003051757812, a * 163.94886779785156, a * 192.00003051757812, a * 163.94886779785156, a * 182.00003051757812, a * 181.94886779785156);
        e.bezierCurveTo(a * 172.50003051757812, a * 164.44886779785156, a * 172.50003051757812, a * 164.44886779785156, a * 163.00003051757812, a * 146.94886779785156);
        e.closePath();
        wt(e, c[6]);
        return d;
    }
    function ac() {
        var b = Vw.time;
        if (Ⲇᐃ[285]) {
            lo.drawImage(Ⲇᐃ[285][b][1], hq + 480, iq + 190);
            lo.drawImage(Ⲇᐃ[285][b][2], hq + 180, iq - 430);
            lo.drawImage(Ⲇᐃ[285][b][1], hq - 855, iq + 100);
            lo.drawImage(Ⲇᐃ[285][b][0], hq - 550, iq - 300);
            lo.drawImage(Ⲇᐃ[285][b][0], hq - 1020, iq - 520);
        }
        if (Ⲇᐃ[108]) {
            lo.drawImage(Ⲇᐃ[108][b][1], hq - 80, iq - 640);
            lo.drawImage(Ⲇᐃ[108][b][1], hq + 80, iq + 490);
            lo.drawImage(Ⲇᐃ[108][b][2], hq - 180, iq - 700);
            lo.drawImage(Ⲇᐃ[108][b][0], hq + 550, iq + 100);
            lo.drawImage(Ⲇᐃ[108][b][1], hq + 450, iq + 300);
            lo.drawImage(Ⲇᐃ[108][b][1], hq + 780, iq + 300);
            lo.drawImage(Ⲇᐃ[108][b][2], hq + 980, iq + 200);
            lo.drawImage(Ⲇᐃ[108][b][2], hq + 680, iq + 600);
            lo.drawImage(Ⲇᐃ[108][b][2], hq - 380, iq + 100);
            lo.drawImage(Ⲇᐃ[108][b][2], hq + 280, iq + 250);
        }
        if (Ⲇᐃ[110]) {
            lo.drawImage(Ⲇᐃ[110][b][0], hq - 590, iq);
            lo.drawImage(Ⲇᐃ[110][b][0], hq + 120, iq - 390);
            lo.drawImage(Ⲇᐃ[110][b][0], hq - 270, iq + 340);
        }
        if (Ⲇᐃ[109]) {
            lo.drawImage(Ⲇᐃ[109][b][4], hq - 700, iq - 600);
            lo.drawImage(Ⲇᐃ[109][b][2], hq - 970, iq - 250);
            lo.drawImage(Ⲇᐃ[109][b][5], hq - 720, iq - 200);
            lo.drawImage(Ⲇᐃ[109][b][2], hq - 1020, iq + 340);
            lo.drawImage(Ⲇᐃ[109][b][0], hq - 1120, iq - 0);
            lo.drawImage(Ⲇᐃ[109][b][1], hq - 650, iq - 330);
            lo.drawImage(Ⲇᐃ[109][b][4], hq - 495, iq - 90);
            lo.drawImage(Ⲇᐃ[109][b][3], hq - 520, iq + 340);
            lo.drawImage(Ⲇᐃ[109][b][2], hq + 830, iq - 520);
        }
        Ⲇᐃ[413];
        if (Ww && lf) {
            var c = Ww.ᐃⵠΔΔ.x;
            var d = Ww.ᐃⵠΔΔ.y;
            Ww.ᐃⵠΔΔ.x = hq;
            Ww.ᐃⵠΔΔ.y = iq;
            var e = lf.time;
            lf.time = Vw.time;
            var f;
            var g = Vw.items;
            g[2].x = 400;
            g[2].y = 100;
            g[2].ΔΔⲆᐃ(114);
            (f = g[1]).x = -500;
            f.y = 100;
            f.ⲆᐃⲆΔ[0].x = f.x - 20.5;
            f.ⲆᐃⲆΔ[0].y = f.y - 22.5;
            f.ⲆᐃⲆΔ[1].x = f.x - 35.5;
            f.ⲆᐃⲆΔ[1].y = f.y + 7.5;
            f.ⲆᐃⲆΔ[2].x = f.x + 7.5;
            f.ⲆᐃⲆΔ[2].y = f.y - 30;
            f.ⲆᐃⲆΔ[3].x = f.x + 22.5;
            f.ⲆᐃⲆΔ[3].y = f.y;
            f.ⲆᐃⲆΔ[4].x = f.x - 7.5;
            f.ⲆᐃⲆΔ[4].y = f.y + 14.5;
            for (var a = 0; f.info > a; a++) {
                f.ⲆᐃⲆΔ[a].ΔΔⲆᐃ(294);
            }
            (f = g[3]).x = 210;
            f.y = -290;
            f.ⲆᐃⲆΔ[0].x = f.x - 20.5;
            f.ⲆᐃⲆΔ[0].y = f.y - 22.5;
            f.ⲆᐃⲆΔ[1].x = f.x - 35.5;
            f.ⲆᐃⲆΔ[1].y = f.y + 7.5;
            f.ⲆᐃⲆΔ[2].x = f.x + 7.5;
            f.ⲆᐃⲆΔ[2].y = f.y - 30;
            f.ⲆᐃⲆΔ[3].x = f.x + 22.5;
            f.ⲆᐃⲆΔ[3].y = f.y;
            f.ⲆᐃⲆΔ[4].x = f.x - 7.5;
            f.ⲆᐃⲆΔ[4].y = f.y + 14.5;
            for (a = 0; f.info > a; a++) {
                f.ⲆᐃⲆΔ[a].ΔΔⲆᐃ(294);
            }
            g[0].x = 450;
            g[0].y = -100;
            g[0].ⲆⲆΔΔⵠ(113);
            g[0].ᐃΔⵠᐃΔ();
            Ww.ᐃⵠΔΔ.x = c;
            Ww.ᐃⵠΔΔ.y = d;
            lf.time = e;
        }
    }
    function rc() {
        Ⲇᐃ[814] = Ob(1, [{
            f: Qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[815] = Ⲇᐃ[814];
        Ⲇᐃ[955] = [];
        Ⲇᐃ[955][0] = ⵠⵠ.ⲆᐃⵠⲆⲆΔΔ;
        Ⲇᐃ[955][1] = ⵠⵠ.ᐃⲆᐃⲆⵠΔᐃ;
        Ⲇᐃ[955][2] = ⵠⵠ.ΔᐃⵠᐃᐃⲆΔ;
        Ⲇᐃ[956] = Ⲇᐃ[955];
        Ⲇᐃ[972] = [];
        Ⲇᐃ[972][0] = ⵠⵠ.ⲆᐃᐃⲆΔⵠⵠ;
        Ⲇᐃ[972][1] = ⵠⵠ.ⲆΔᐃⲆΔΔⲆ;
        Ⲇᐃ[972][2] = ⵠⵠ.ⲆⵠⲆᐃⵠΔⵠ;
        Ⲇᐃ[973] = Ⲇᐃ[972];
        Ⲇᐃ[987] = [];
        Ⲇᐃ[987][0] = ⵠⵠ.ⵠⵠΔΔᐃΔⲆ;
        Ⲇᐃ[987][1] = ⵠⵠ.ΔⵠΔⵠΔⵠⲆ;
        Ⲇᐃ[987][2] = ⵠⵠ.ⲆⵠΔⲆⵠⵠⵠ;
        Ⲇᐃ[988] = Ⲇᐃ[987];
        Ⲇᐃ[1154] = [];
        Ⲇᐃ[1154][0] = ⵠⵠ.ⲆⲆᐃᐃⲆⵠⵠ;
        Ⲇᐃ[1154][1] = ⵠⵠ.ⵠⲆⵠΔΔΔΔ;
        Ⲇᐃ[1154][2] = ⵠⵠ.ᐃⵠᐃⲆΔᐃⲆ;
        Ⲇᐃ[1155] = Ⲇᐃ[1154];
        Ⲇᐃ[965] = [];
        Ⲇᐃ[965][0] = ⵠⵠ.ΔⵠΔⵠⵠⵠᐃ;
        Ⲇᐃ[965][1] = ⵠⵠ.ΔᐃⲆⲆⵠⲆΔ;
        Ⲇᐃ[965][2] = ⵠⵠ.ᐃⲆⲆⲆΔⵠⵠ;
        Ⲇᐃ[974] = Ⲇᐃ[965];
        Ⲇᐃ[1028] = [];
        Ⲇᐃ[1028][0] = ⵠⵠ.ⲆⵠⲆⲆᐃⵠⲆ;
        Ⲇᐃ[1028][1] = ⵠⵠ.ᐃⵠⲆⵠⲆⵠⵠ;
        Ⲇᐃ[1028][2] = ⵠⵠ.ᐃⲆᐃΔⲆⵠᐃ;
        Ⲇᐃ[1029] = Ⲇᐃ[1028];
        Ⲇᐃ[1027] = Ⲇᐃ[1028];
        Ⲇᐃ[712] = [];
        Ⲇᐃ[712][0] = ⵠⵠ.ⵠⲆΔᐃᐃᐃΔⲆⵠ;
        Ⲇᐃ[712][1] = ⵠⵠ.ⵠᐃᐃⲆⲆΔⵠⲆⲆ;
        Ⲇᐃ[712][2] = ⵠⵠ.ⵠⲆⵠⲆᐃⲆᐃⵠⲆ;
        Ⲇᐃ[713] = Ⲇᐃ[712];
        Ⲇᐃ[714] = Ⲇᐃ[712];
        Ⲇᐃ[1031] = [];
        Ⲇᐃ[1031][0] = ⵠⵠ.ΔⲆⲆΔⵠⲆᐃ;
        Ⲇᐃ[1031][1] = ⵠⵠ.ᐃⵠᐃⲆⲆⵠⲆ;
        Ⲇᐃ[1031][2] = ⵠⵠ.ⲆⲆⵠⵠᐃᐃⵠ;
        Ⲇᐃ[1032] = Ⲇᐃ[1031];
        Ⲇᐃ[1030] = Ⲇᐃ[1031];
        Ⲇᐃ[423] = [];
        Ⲇᐃ[423][0] = ⵠⵠ.ⵠⵠⵠⵠᐃᐃⵠ;
        Ⲇᐃ[423][1] = ⵠⵠ.ⵠΔⲆΔⲆⵠᐃ;
        Ⲇᐃ[423][2] = ⵠⵠ.ΔᐃⲆⵠⲆᐃⵠ;
        Ⲇᐃ[425] = Ⲇᐃ[423];
        Ⲇᐃ[424] = Ⲇᐃ[423];
        Ⲇᐃ[1233] = [];
        Ⲇᐃ[1233][0] = ⵠⵠ.ⲆⵠⵠΔᐃᐃⲆ;
        Ⲇᐃ[1233][1] = ⵠⵠ.ⲆᐃᐃⲆᐃⵠⲆ;
        Ⲇᐃ[1233][2] = ⵠⵠ.ⵠⵠΔΔⲆⵠⵠ;
        Ⲇᐃ[1234] = Ⲇᐃ[1233];
        Ⲇᐃ[1230] = [];
        Ⲇᐃ[1230][0] = ⵠⵠ.ⵠⲆⲆⵠⲆⵠⵠ;
        Ⲇᐃ[1230][1] = ⵠⵠ.ΔᐃⲆΔᐃⲆⲆ;
        Ⲇᐃ[1230][2] = ⵠⵠ.ΔⲆⵠΔⵠⵠⵠ;
        Ⲇᐃ[1232] = Ⲇᐃ[1230];
        Ⲇᐃ[1231] = Ⲇᐃ[1230];
        Ⲇᐃ[569] = [];
        Ⲇᐃ[569][0] = ⵠⵠ.ΔⵠᐃⲆⲆⵠⲆ;
        Ⲇᐃ[569][1] = ⵠⵠ.ⲆⲆᐃΔⲆⲆⲆ;
        Ⲇᐃ[569][2] = ⵠⵠ.ⲆΔᐃᐃⵠΔᐃ;
        Ⲇᐃ[571] = Ⲇᐃ[569];
        Ⲇᐃ[570] = Ⲇᐃ[569];
        Ⲇᐃ[1166] = [];
        Ⲇᐃ[1166][0] = ⵠⵠ.ᐃⵠⲆΔΔΔⲆ;
        Ⲇᐃ[1166][1] = ⵠⵠ.ⲆⲆⵠᐃⵠⵠⵠ;
        Ⲇᐃ[1166][2] = ⵠⵠ.ᐃⵠᐃⲆᐃⵠᐃ;
        Ⲇᐃ[1167] = Ⲇᐃ[1166];
        Ⲇᐃ[1168] = Ⲇᐃ[1166];
        Ⲇᐃ[572] = [];
        Ⲇᐃ[572][0] = ⵠⵠ.ⵠⲆᐃⵠⲆΔΔ;
        Ⲇᐃ[572][1] = ⵠⵠ.ΔΔⲆᐃⵠΔᐃ;
        Ⲇᐃ[572][2] = ⵠⵠ.ΔⵠΔⵠᐃΔᐃ;
        Ⲇᐃ[574] = Ⲇᐃ[572];
        Ⲇᐃ[573] = Ⲇᐃ[572];
        Ⲇᐃ[1169] = [];
        Ⲇᐃ[1169][0] = ⵠⵠ.Δᐃⵠⵠⵠᐃᐃ;
        Ⲇᐃ[1169][1] = ⵠⵠ.ᐃᐃΔⲆⵠⲆᐃ;
        Ⲇᐃ[1169][2] = ⵠⵠ.ⲆⵠⵠΔⵠⵠⵠ;
        Ⲇᐃ[1170] = Ⲇᐃ[1169];
        Ⲇᐃ[1171] = Ⲇᐃ[1169];
        Ⲇᐃ[575] = [];
        Ⲇᐃ[575][0] = ⵠⵠ.ΔⲆⵠᐃᐃᐃᐃ;
        Ⲇᐃ[575][1] = ⵠⵠ.ᐃᐃⲆⵠΔⲆᐃ;
        Ⲇᐃ[575][2] = ⵠⵠ.ΔⵠᐃⵠⲆⵠⵠ;
        Ⲇᐃ[577] = Ⲇᐃ[575];
        Ⲇᐃ[576] = Ⲇᐃ[575];
        Ⲇᐃ[1172] = [];
        Ⲇᐃ[1172][0] = ⵠⵠ.ⲆᐃΔᐃᐃΔⲆ;
        Ⲇᐃ[1172][1] = ⵠⵠ.ᐃⵠᐃΔᐃΔᐃ;
        Ⲇᐃ[1172][2] = ⵠⵠ.ⲆΔΔΔᐃΔⵠ;
        Ⲇᐃ[1173] = Ⲇᐃ[1172];
        Ⲇᐃ[1174] = Ⲇᐃ[1172];
        Ⲇᐃ[578] = [];
        Ⲇᐃ[578][0] = ⵠⵠ.ᐃΔΔⵠᐃⵠⲆ;
        Ⲇᐃ[578][1] = ⵠⵠ.ΔᐃΔΔⵠᐃⲆ;
        Ⲇᐃ[578][2] = ⵠⵠ.ⵠⵠΔΔⲆΔΔ;
        Ⲇᐃ[580] = Ⲇᐃ[578];
        Ⲇᐃ[579] = Ⲇᐃ[578];
        Ⲇᐃ[1175] = [];
        Ⲇᐃ[1175][0] = ⵠⵠ.ⲆⲆᐃⲆΔⲆᐃ;
        Ⲇᐃ[1175][1] = ⵠⵠ.ⵠⲆⵠⵠⲆⵠⲆ;
        Ⲇᐃ[1175][2] = ⵠⵠ.ⵠⲆⲆΔⵠⵠᐃ;
        Ⲇᐃ[1176] = Ⲇᐃ[1175];
        Ⲇᐃ[1177] = Ⲇᐃ[1175];
        Ⲇᐃ[581] = [];
        Ⲇᐃ[581][0] = ⵠⵠ.ⵠΔⲆⲆⵠⵠⲆ;
        Ⲇᐃ[581][1] = ⵠⵠ.ΔⲆΔⲆⲆΔⲆ;
        Ⲇᐃ[581][2] = ⵠⵠ.ⲆᐃⲆᐃⵠᐃⵠⵠᐃ;
        Ⲇᐃ[583] = Ⲇᐃ[581];
        Ⲇᐃ[582] = Ⲇᐃ[581];
        Ⲇᐃ[1178] = [];
        Ⲇᐃ[1178][0] = ⵠⵠ.ⵠΔⲆⲆⵠⵠⵠᐃᐃ;
        Ⲇᐃ[1178][1] = ⵠⵠ.ⲆⵠᐃⲆᐃΔΔᐃᐃ;
        Ⲇᐃ[1178][2] = ⵠⵠ.ᐃⲆⲆⲆⲆⵠⲆΔᐃ;
        Ⲇᐃ[1179] = Ⲇᐃ[1178];
        Ⲇᐃ[1180] = Ⲇᐃ[1178];
        Ⲇᐃ[584] = [];
        Ⲇᐃ[584][0] = ⵠⵠ.ⲆΔᐃⵠⵠΔⵠⲆⲆ;
        Ⲇᐃ[584][1] = ⵠⵠ.ⵠΔᐃⵠΔΔⵠΔΔ;
        Ⲇᐃ[584][2] = ⵠⵠ.ΔᐃⲆᐃⵠⵠⲆⵠΔ;
        Ⲇᐃ[586] = Ⲇᐃ[584];
        Ⲇᐃ[585] = Ⲇᐃ[584];
        Ⲇᐃ[1181] = [];
        Ⲇᐃ[1181][0] = ⵠⵠ.ΔⵠⵠᐃᐃΔⲆⲆᐃ;
        Ⲇᐃ[1181][1] = ⵠⵠ.ⵠΔⵠⵠᐃΔΔΔᐃ;
        Ⲇᐃ[1181][2] = ⵠⵠ.ΔΔⲆⲆⲆΔᐃΔᐃ;
        Ⲇᐃ[1182] = Ⲇᐃ[1181];
        Ⲇᐃ[1183] = Ⲇᐃ[1181];
        Ⲇᐃ[587] = [];
        Ⲇᐃ[587][0] = ⵠⵠ.ΔⵠⵠΔⵠⵠⵠⵠΔ;
        Ⲇᐃ[587][1] = ⵠⵠ.ΔᐃᐃⵠⵠⲆⵠⵠᐃ;
        Ⲇᐃ[587][2] = ⵠⵠ.ᐃⵠⵠᐃΔⵠⲆᐃΔ;
        Ⲇᐃ[589] = Ⲇᐃ[587];
        Ⲇᐃ[588] = Ⲇᐃ[587];
        Ⲇᐃ[1184] = [];
        Ⲇᐃ[1184][0] = ⵠⵠ.ΔⲆΔᐃⵠᐃⵠᐃᐃ;
        Ⲇᐃ[1184][1] = ⵠⵠ.ⵠᐃᐃⲆⲆⵠⲆⵠⵠ;
        Ⲇᐃ[1184][2] = ⵠⵠ.ⵠᐃⲆⲆⲆᐃᐃᐃⵠ;
        Ⲇᐃ[1185] = Ⲇᐃ[1184];
        Ⲇᐃ[1186] = Ⲇᐃ[1184];
        Ⲇᐃ[1257] = [];
        Ⲇᐃ[1257][0] = ⵠⵠ.ᐃΔΔΔⲆΔⲆΔⵠ;
        Ⲇᐃ[1257][1] = ⵠⵠ.ΔⵠᐃᐃⲆΔⵠⵠⵠ;
        Ⲇᐃ[1257][2] = ⵠⵠ.ᐃⲆⲆⲆⲆΔⲆᐃⲆ;
        Ⲇᐃ[1258] = Ⲇᐃ[1257];
        Ⲇᐃ[1256] = Ⲇᐃ[1257];
        Ⲇᐃ[1260] = [];
        Ⲇᐃ[1260][0] = ⵠⵠ.ᐃΔⵠᐃᐃΔΔΔΔ;
        Ⲇᐃ[1260][1] = ⵠⵠ.ⵠⲆⲆⲆᐃΔᐃΔΔ;
        Ⲇᐃ[1260][2] = ⵠⵠ.ᐃΔΔⲆᐃᐃΔᐃᐃ;
        Ⲇᐃ[1261] = Ⲇᐃ[1260];
        Ⲇᐃ[1259] = Ⲇᐃ[1260];
        Ⲇᐃ[1263] = [];
        Ⲇᐃ[1263][0] = ⵠⵠ.ⲆⵠΔᐃⲆᐃⵠΔⲆ;
        Ⲇᐃ[1263][1] = ⵠⵠ.ⵠΔᐃⵠⲆᐃⲆⲆᐃ;
        Ⲇᐃ[1263][2] = ⵠⵠ.ᐃⲆⲆⲆᐃⲆⲆΔⵠ;
        Ⲇᐃ[1264] = Ⲇᐃ[1263];
        Ⲇᐃ[1262] = Ⲇᐃ[1263];
        Ⲇᐃ[1266] = [];
        Ⲇᐃ[1266][0] = ⵠⵠ.ᐃⲆΔⵠⲆⵠⵠΔⲆ;
        Ⲇᐃ[1266][1] = ⵠⵠ.ΔⲆⵠᐃⵠⲆΔΔᐃ;
        Ⲇᐃ[1266][2] = ⵠⵠ.ᐃΔⵠⵠᐃᐃΔⲆᐃ;
        Ⲇᐃ[1267] = Ⲇᐃ[1266];
        Ⲇᐃ[1265] = Ⲇᐃ[1266];
        Ⲇᐃ[1269] = [];
        Ⲇᐃ[1269][0] = ⵠⵠ.ᐃⵠΔᐃΔⵠΔⵠⲆ;
        Ⲇᐃ[1269][1] = ⵠⵠ.ⵠᐃⵠΔᐃΔΔⲆⵠ;
        Ⲇᐃ[1269][2] = ⵠⵠ.ΔⵠΔⲆⵠᐃΔⲆⲆ;
        Ⲇᐃ[1270] = Ⲇᐃ[1269];
        Ⲇᐃ[1268] = Ⲇᐃ[1269];
        Ⲇᐃ[1272] = [];
        Ⲇᐃ[1272][0] = ⵠⵠ.ΔΔⲆᐃΔⵠⵠᐃᐃ;
        Ⲇᐃ[1272][1] = ⵠⵠ.ⲆⵠⵠⵠⲆⲆⲆⵠΔ;
        Ⲇᐃ[1272][2] = ⵠⵠ.ᐃⲆⲆΔΔⵠᐃΔⲆ;
        Ⲇᐃ[1273] = Ⲇᐃ[1272];
        Ⲇᐃ[1271] = Ⲇᐃ[1272];
        Ⲇᐃ[1239] = [];
        Ⲇᐃ[1239][0] = ⵠⵠ.ⲆⵠΔⲆⵠⲆⲆᐃⵠ;
        Ⲇᐃ[1239][1] = ⵠⵠ.ΔᐃᐃⵠΔᐃⲆⵠᐃ;
        Ⲇᐃ[1239][2] = ⵠⵠ.ⵠⵠΔⲆᐃⲆᐃⲆⲆ;
        Ⲇᐃ[1240] = Ⲇᐃ[1239];
        Ⲇᐃ[1238] = Ⲇᐃ[1239];
        Ⲇᐃ[1242] = [];
        Ⲇᐃ[1242][0] = ⵠⵠ.ⲆⵠⲆⵠⵠⲆΔⵠΔ;
        Ⲇᐃ[1242][1] = ⵠⵠ.ΔⲆⵠΔᐃΔΔⲆᐃ;
        Ⲇᐃ[1242][2] = ⵠⵠ.ⲆᐃΔᐃⵠΔΔᐃΔ;
        Ⲇᐃ[1243] = Ⲇᐃ[1242];
        Ⲇᐃ[1241] = Ⲇᐃ[1242];
        Ⲇᐃ[1245] = [];
        Ⲇᐃ[1245][0] = ⵠⵠ.ⲆⵠⲆⵠⵠΔΔᐃΔ;
        Ⲇᐃ[1245][1] = ⵠⵠ.ᐃᐃⵠⲆΔⲆΔΔⲆ;
        Ⲇᐃ[1245][2] = ⵠⵠ.ⵠⲆⲆⲆⵠΔᐃΔᐃ;
        Ⲇᐃ[1246] = Ⲇᐃ[1245];
        Ⲇᐃ[1244] = Ⲇᐃ[1245];
        Ⲇᐃ[1248] = [];
        Ⲇᐃ[1248][0] = ⵠⵠ.ΔᐃΔΔⵠⵠᐃᐃΔ;
        Ⲇᐃ[1248][1] = ⵠⵠ.ᐃᐃᐃⵠⵠΔᐃᐃᐃ;
        Ⲇᐃ[1248][2] = ⵠⵠ.ᐃᐃⲆⵠⲆᐃⵠᐃᐃ;
        Ⲇᐃ[1249] = Ⲇᐃ[1248];
        Ⲇᐃ[1247] = Ⲇᐃ[1248];
        Ⲇᐃ[1251] = [];
        Ⲇᐃ[1251][0] = ⵠⵠ.ᐃⲆΔΔᐃⵠⵠⵠΔ;
        Ⲇᐃ[1251][1] = ⵠⵠ.ⲆΔΔΔⵠⲆᐃⲆΔ;
        Ⲇᐃ[1251][2] = ⵠⵠ.ⵠⲆΔⲆᐃᐃⲆᐃΔ;
        Ⲇᐃ[1252] = Ⲇᐃ[1251];
        Ⲇᐃ[1250] = Ⲇᐃ[1251];
        Ⲇᐃ[1254] = [];
        Ⲇᐃ[1254][0] = ⵠⵠ.ⲆⵠΔΔⵠⵠΔⲆᐃ;
        Ⲇᐃ[1254][1] = ⵠⵠ.ᐃⵠΔⵠⵠⲆⵠᐃⵠ;
        Ⲇᐃ[1254][2] = ⵠⵠ.ΔⲆⵠⵠΔΔΔⲆⵠ;
        Ⲇᐃ[1255] = Ⲇᐃ[1254];
        Ⲇᐃ[1253] = Ⲇᐃ[1254];
        Ⲇᐃ[1227] = [];
        Ⲇᐃ[1227][0] = ⵠⵠ.ⵠⲆΔΔΔⲆⵠ;
        Ⲇᐃ[1227][1] = ⵠⵠ.ⲆΔⵠⵠⲆⲆᐃ;
        Ⲇᐃ[1227][2] = ⵠⵠ.ⵠⲆΔᐃⲆΔΔ;
        Ⲇᐃ[1229] = Ⲇᐃ[1227];
        Ⲇᐃ[1228] = Ⲇᐃ[1227];
        Ⲇᐃ[1187] = [];
        Ⲇᐃ[1187][0] = ⵠⵠ.ᐃⲆⵠᐃⵠⲆⵠ;
        Ⲇᐃ[1187][1] = ⵠⵠ.ⵠΔΔΔⵠΔⲆ;
        Ⲇᐃ[1187][2] = ⵠⵠ.ⲆΔⵠᐃⲆⵠⲆ;
        Ⲇᐃ[1188] = Ⲇᐃ[1187];
        Ⲇᐃ[Pr.ⵠᐃᐃᐃᐃΔᐃᐃΔ] = Ⲇᐃ[1187];
        Ⲇᐃ[840] = Ob(1, [{
            f: Nt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
        }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[841] = Ⲇᐃ[840];
        Ⲇᐃ[850] = Ob(1, [{
            f: Mm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[851] = Ⲇᐃ[850];
        Ⲇᐃ[644] = Ob(1, [{
            f: Qb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Mb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }, {
            f: Gb,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[643] = Ⲇᐃ[644];
        Ⲇᐃ[639] = Ob(1, [{
            f: Sb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[800] = Ob(1, [{
            f: wu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[799] = Ⲇᐃ[800];
        Ⲇᐃ[631] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[632] = Ⲇᐃ[631];
        Ⲇᐃ[311] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#493d36", "#332b28"]
        }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[284] = Ⲇᐃ[311];
        Ⲇᐃ[808] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c67933", "#b17238"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[809] = Ⲇᐃ[808];
        Ⲇᐃ[834] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e8e8e8", "#bbbbbb"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[835] = Ⲇᐃ[834];
        Ⲇᐃ[845] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#328a56", "#449573"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[846] = Ⲇᐃ[845];
        Ⲇᐃ[949] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c98e2f", "#a36b11"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[950] = Ⲇᐃ[949];
        Ⲇᐃ[951] = Ⲇᐃ[949];
        Ⲇᐃ[966] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#13a56d", "#098a58"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[967] = Ⲇᐃ[966];
        Ⲇᐃ[968] = Ⲇᐃ[966];
        Ⲇᐃ[981] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a8214", "#4a9c1e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[982] = Ⲇᐃ[981];
        Ⲇᐃ[983] = Ⲇᐃ[981];
        Ⲇᐃ[959] = Ob(1, [{
            f: xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#b22419", "#99110e"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[960] = Ⲇᐃ[959];
        Ⲇᐃ[961] = Ⲇᐃ[959];
        Ⲇᐃ[309] = Ob(1, [{
            f: qb,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516"]
        }, {
            f: Nb,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[302] = Ⲇᐃ[309];
        Ⲇᐃ[328] = Ob(1, [{
            f: Hb,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
        }, {
            f: Nb,
            x: -2,
            y: -1,
            a: 1,
            r: -Math.PI / 7,
            c: ["#efd435", "#ec8d35", "#e96132"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[327] = Ⲇᐃ[328];
        Ⲇᐃ[860] = Ob(1, [{
            f: bd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
        }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[865] = Ob(1, [{
            f: Bd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[829] = Ob(1, [{
            f: dd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[261] = Ob(1, [{
            f: pd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[292] = Ob(1, [{
            f: Jd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[293] = Ob(1, [{
            f: wd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[455] = Ob(1, [{
            f: fd,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[313] = Ob(1, [{
            f: vd,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[312] = Ob(1, [{
            f: vd,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[258] = Ob(1, [{
            f: vd,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[296] = Ob(1, [{
            f: vd,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[458] = Ob(1, [{
            f: vd,
            x: -2,
            y: 5,
            a: 1,
            r: -Math.PI / 5,
            c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[1017] = [];
        Ⲇᐃ[1017][0] = ⵠⵠ.ᐃⵠᐃᐃᐃᐃᐃ;
        Ⲇᐃ[1017][1] = ⵠⵠ.ᐃⵠⵠΔⲆⲆⲆ;
        Ⲇᐃ[1017][2] = ⵠⵠ.ᐃΔⲆΔⵠⵠΔ;
        Ⲇᐃ[1019] = Ⲇᐃ[1017];
        Ⲇᐃ[1018] = Ⲇᐃ[1017];
        Ⲇᐃ[315] = Ob(1, [{
            f: Id,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#252B28", "#58645F", "#75827D"]
        }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[297] = Ob(1, [{
            f: qd,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#282823", "#877c2d", "#c4bc51"]
        }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[298] = Ob(1, [{
            f: Hd,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#232828", "#3fc9c9", "#74ede6"]
        }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[316] = Ob(1, [{
            f: qb,
            x: 0,
            y: -5,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[830] = Ⲇᐃ[829];
        Ⲇᐃ[254] = Ⲇᐃ[261];
        Ⲇᐃ[290] = Ⲇᐃ[292];
        Ⲇᐃ[291] = Ⲇᐃ[293];
        Ⲇᐃ[456] = Ⲇᐃ[455];
        Ⲇᐃ[314] = Ⲇᐃ[313];
        Ⲇᐃ[256] = Ⲇᐃ[312];
        Ⲇᐃ[295] = Ⲇᐃ[258];
        Ⲇᐃ[257] = Ⲇᐃ[296];
        Ⲇᐃ[460] = Ⲇᐃ[458];
        Ⲇᐃ[277] = Ob(1, [{
            f: bb,
            x: 0,
            y: 0,
            a: 1,
            r: 0
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[310] = Ob(1, [{
            f: wb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[262] = Ⲇᐃ[310];
        Ⲇᐃ[329] = Ob(1, [{
            f: Yt,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[263] = Ⲇᐃ[329];
        Ⲇᐃ[331] = Ob(1, [{
            f: Zd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[332] = Ⲇᐃ[331];
        Ⲇᐃ[492] = Ob(1, [{
            f: Yt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[493] = Ⲇᐃ[492];
        Ⲇᐃ[330] = Ob(1, [{
            f: Tt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[265] = Ⲇᐃ[330];
        Ⲇᐃ[317] = Ob(1, [{
            f: Xd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[318] = Ⲇᐃ[317];
        Ⲇᐃ[319] = Ob(1, [{
            f: xu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[320] = Ⲇᐃ[319];
        Ⲇᐃ[362] = Ob(1, [{
            f: Bu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[363] = Ⲇᐃ[362];
        Ⲇᐃ[364] = Ob(1, [{
            f: Bu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[365] = Ⲇᐃ[364];
        Ⲇᐃ[361] = Ob(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[360] = Ⲇᐃ[361];
        Ⲇᐃ[495] = Ob(1, [{
            f: zu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[496] = Ⲇᐃ[495];
        Ⲇᐃ[335] = Ob(1, [{
            f: Ut,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[268] = Ⲇᐃ[335];
        Ⲇᐃ[372] = Ob(1, [{
            f: Wt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[371] = Ⲇᐃ[372];
        Ⲇᐃ[499] = Ob(1, [{
            f: Wt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[498] = Ⲇᐃ[499];
        Ⲇᐃ[375] = Ob(1, [{
            f: Vt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[374] = Ⲇᐃ[375];
        Ⲇᐃ[378] = Ob(1, [{
            f: ou,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[377] = Ⲇᐃ[378];
        Ⲇᐃ[337] = Ob(1, [{
            f: Gu,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[338] = Ⲇᐃ[337];
        Ⲇᐃ[300] = Ob(1, [{
            f: _b,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[323] = Ob(1, [{
            f: _b,
            x: 0,
            y: -3,
            a: 1,
            r: 0,
            c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
        }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[325] = Ⲇᐃ[323];
        Ⲇᐃ[305] = Ob(1, [{
            f: jb,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#cec0c4", "#ffffff", "#6d6768"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[513] = Ob(1, [{
            f: jb,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#d4e9ec", "#37b1d7", "#506c71"]
        }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[515] = Ⲇᐃ[513];
        Ⲇᐃ[368] = Ob(1, [{
            f: Mu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ef96be", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[1162] = Ob(1, [{
            f: Mu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#55423e", "#ffffff"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[178] = Ob(1, [{
            f: Pt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[179] = Ob(1, [{
            f: Pt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[624] = Ob(1, [{
            f: Mu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#201851", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[393] = Ob(1, [{
            f: Mu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#231f20", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[505] = Ob(1, [{
            f: Mu,
            x: -3,
            y: -3,
            a: 1,
            r: 0,
            c: ["#ffffff", "#b6222a"]
        }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[369] = Ob(1, [{
            f: Fu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[370] = Ⲇᐃ[369];
        Ⲇᐃ[381] = Ob(1, [{
            f: mu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[380] = Ⲇᐃ[381];
        Ⲇᐃ[502] = Ob(1, [{
            f: Nu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[503] = Ⲇᐃ[502];
        Ⲇᐃ[880] = Ob(1, [{
            f: Kb,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[881] = Ⲇᐃ[880];
        Ⲇᐃ[882] = Ob(1, [{
            f: Vb,
            x: 0,
            y: 5,
            a: 1,
            r: 0,
            c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[883] = Ⲇᐃ[882];
        Ⲇᐃ[303] = Ob(1, [{
            f: Ub,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#ffffff", "#cec0c4"]
        }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[304] = Ⲇᐃ[303];
        Ⲇᐃ[392] = [];
        Ⲇᐃ[392][0] = ⵠⵠ.ⵠᐃᐃΔⵠⲆⵠ;
        Ⲇᐃ[392][1] = ⵠⵠ.ᐃΔΔⵠⵠⵠᐃ;
        Ⲇᐃ[392][2] = ⵠⵠ.ⲆΔᐃᐃⲆᐃⵠ;
        Ⲇᐃ[367] = Ⲇᐃ[392];
        Ⲇᐃ[975] = [];
        Ⲇᐃ[975][0] = ⵠⵠ.ⵠⵠΔᐃᐃΔⲆ;
        Ⲇᐃ[975][1] = ⵠⵠ.ᐃᐃⵠᐃⲆᐃᐃ;
        Ⲇᐃ[975][2] = ⵠⵠ.ⵠΔΔᐃΔᐃΔ;
        Ⲇᐃ[977] = Ⲇᐃ[975];
        Ⲇᐃ[976] = Ⲇᐃ[975];
        Ⲇᐃ[978] = [];
        Ⲇᐃ[978][0] = ⵠⵠ.ΔⲆⲆᐃⲆΔⲆ;
        Ⲇᐃ[978][1] = ⵠⵠ.ⲆΔⲆⵠⵠΔⵠ;
        Ⲇᐃ[978][2] = ⵠⵠ.ⲆⵠΔᐃⵠΔΔ;
        Ⲇᐃ[980] = Ⲇᐃ[978];
        Ⲇᐃ[979] = Ⲇᐃ[978];
        Ⲇᐃ[1158] = [];
        Ⲇᐃ[1158][0] = ⵠⵠ.ΔᐃΔⵠⲆⵠᐃ;
        Ⲇᐃ[1158][1] = ⵠⵠ.ΔᐃΔⵠⲆⵠᐃ;
        Ⲇᐃ[1158][2] = ⵠⵠ.ΔᐃΔⵠⲆⵠᐃ;
        Ⲇᐃ[1159] = Ⲇᐃ[1158];
        Ⲇᐃ[426] = [];
        Ⲇᐃ[426][0] = ⵠⵠ.ⲆⵠΔΔᐃΔᐃ;
        Ⲇᐃ[426][1] = ⵠⵠ.ᐃᐃⲆᐃᐃⵠⵠ;
        Ⲇᐃ[426][2] = ⵠⵠ.ⵠᐃΔⲆⵠᐃᐃ;
        Ⲇᐃ[427] = Ⲇᐃ[426];
        Ⲇᐃ[428] = Ⲇᐃ[426];
        Ⲇᐃ[1160] = [];
        Ⲇᐃ[1160][0] = ⵠⵠ.ᐃᐃⲆⵠⵠⲆⵠ;
        Ⲇᐃ[1160][1] = ⵠⵠ.ᐃᐃⲆⵠⵠⲆⵠ;
        Ⲇᐃ[1160][2] = ⵠⵠ.ᐃᐃⲆⵠⵠⲆⵠ;
        Ⲇᐃ[1161] = Ⲇᐃ[1160];
        Ⲇᐃ[1236] = [];
        Ⲇᐃ[1236][0] = ⵠⵠ.ᐃΔΔᐃⵠΔⲆᐃⲆ;
        Ⲇᐃ[1236][1] = ⵠⵠ.ᐃⵠΔᐃΔⲆᐃΔᐃ;
        Ⲇᐃ[1236][2] = ⵠⵠ.ⵠΔᐃⵠⲆⲆᐃΔⲆ;
        Ⲇᐃ[1235] = Ⲇᐃ[1236];
        Ⲇᐃ[1237] = Ⲇᐃ[1236];
        Ⲇᐃ[991] = [];
        Ⲇᐃ[991][0] = ⵠⵠ.ΔⲆⲆⲆΔᐃᐃ;
        Ⲇᐃ[991][1] = ⵠⵠ.ΔᐃΔⵠΔᐃᐃ;
        Ⲇᐃ[991][2] = ⵠⵠ.ⲆᐃⵠᐃⵠⲆⲆ;
        Ⲇᐃ[990] = Ⲇᐃ[991];
        Ⲇᐃ[992] = Ⲇᐃ[991];
        Ⲇᐃ[994] = [];
        Ⲇᐃ[994][0] = ⵠⵠ.ΔΔⵠᐃᐃⲆᐃ;
        Ⲇᐃ[994][1] = ⵠⵠ.ⲆⲆⵠᐃᐃⵠᐃ;
        Ⲇᐃ[994][2] = ⵠⵠ.ΔⵠΔΔᐃᐃΔ;
        Ⲇᐃ[993] = Ⲇᐃ[994];
        Ⲇᐃ[995] = Ⲇᐃ[994];
        Ⲇᐃ[997] = [];
        Ⲇᐃ[997][0] = ⵠⵠ.ⵠⵠΔᐃⵠⲆΔ;
        Ⲇᐃ[997][1] = ⵠⵠ.ᐃΔᐃᐃΔᐃᐃ;
        Ⲇᐃ[997][2] = ⵠⵠ.ᐃⵠᐃΔᐃⲆΔ;
        Ⲇᐃ[996] = Ⲇᐃ[997];
        Ⲇᐃ[998] = Ⲇᐃ[997];
        Ⲇᐃ[1000] = [];
        Ⲇᐃ[1000][0] = ⵠⵠ.ΔⲆⲆᐃⵠᐃⲆ;
        Ⲇᐃ[1000][1] = ⵠⵠ.ᐃⲆⲆᐃᐃⲆⵠ;
        Ⲇᐃ[1000][2] = ⵠⵠ.ΔΔΔᐃᐃⵠΔ;
        Ⲇᐃ[999] = Ⲇᐃ[1000];
        Ⲇᐃ[1001] = Ⲇᐃ[1000];
        Ⲇᐃ[1003] = [];
        Ⲇᐃ[1003][0] = ⵠⵠ.ᐃΔΔᐃᐃᐃⵠ;
        Ⲇᐃ[1003][1] = ⵠⵠ.ⲆΔⵠⵠΔΔᐃ;
        Ⲇᐃ[1003][2] = ⵠⵠ.ᐃΔⲆΔⵠᐃΔ;
        Ⲇᐃ[1002] = Ⲇᐃ[1003];
        Ⲇᐃ[1004] = Ⲇᐃ[1003];
        Ⲇᐃ[1006] = [];
        Ⲇᐃ[1006][0] = ⵠⵠ.ᐃⵠΔⲆΔΔⵠ;
        Ⲇᐃ[1006][1] = ⵠⵠ.ΔⲆᐃᐃᐃⵠⵠ;
        Ⲇᐃ[1006][2] = ⵠⵠ.ⵠⲆⵠⵠΔΔᐃ;
        Ⲇᐃ[1005] = Ⲇᐃ[1006];
        Ⲇᐃ[1007] = Ⲇᐃ[1006];
        Ⲇᐃ[1009] = [];
        Ⲇᐃ[1009][0] = ⵠⵠ.ΔⲆΔΔⲆᐃΔ;
        Ⲇᐃ[1009][1] = ⵠⵠ.ᐃⵠⲆⲆⲆΔⵠ;
        Ⲇᐃ[1009][2] = ⵠⵠ.ⵠⵠᐃΔⵠⵠᐃ;
        Ⲇᐃ[1008] = Ⲇᐃ[1009];
        Ⲇᐃ[1010] = Ⲇᐃ[1009];
        Ⲇᐃ[1012] = [];
        Ⲇᐃ[1012][0] = ⵠⵠ.ⵠᐃⵠⵠᐃᐃⵠ;
        Ⲇᐃ[1012][1] = ⵠⵠ.ΔⲆᐃⲆΔⵠⵠ;
        Ⲇᐃ[1012][2] = ⵠⵠ.ᐃⵠᐃᐃⲆΔᐃ;
        Ⲇᐃ[1011] = Ⲇᐃ[1012];
        Ⲇᐃ[1013] = Ⲇᐃ[1012];
        Ⲇᐃ[1015] = [];
        Ⲇᐃ[1015][0] = ⵠⵠ.ⵠΔⲆⵠᐃᐃⲆ;
        Ⲇᐃ[1015][1] = ⵠⵠ.ΔⲆΔⲆⵠΔⲆ;
        Ⲇᐃ[1015][2] = ⵠⵠ.ᐃⲆⵠⲆᐃᐃⵠ;
        Ⲇᐃ[1014] = Ⲇᐃ[1015];
        Ⲇᐃ[1016] = Ⲇᐃ[1015];
        Ⲇᐃ[1035] = [];
        Ⲇᐃ[1035][0] = ⵠⵠ.ΔⵠⲆᐃᐃ;
        Ⲇᐃ[1035][1] = ⵠⵠ.ΔⵠⲆᐃᐃ;
        Ⲇᐃ[1035][2] = ⵠⵠ.ΔⵠⲆᐃᐃ;
        Ⲇᐃ[Pr.ᐃΔⲆⲆᐃᐃΔᐃᐃ] = Ⲇᐃ[1035];
        Ⲇᐃ[1036] = Ⲇᐃ[1035];
        Ⲇᐃ[1037] = [];
        Ⲇᐃ[1037][0] = ⵠⵠ.ⲆᐃⵠΔⲆ;
        Ⲇᐃ[1037][1] = ⵠⵠ.ⲆᐃⵠΔⲆ;
        Ⲇᐃ[1037][2] = ⵠⵠ.ⲆᐃⵠΔⲆ;
        Ⲇᐃ[Pr.ΔΔⵠⵠⵠⲆⵠⲆⵠ] = Ⲇᐃ[1037];
        Ⲇᐃ[1038] = Ⲇᐃ[1037];
        Ⲇᐃ[1039] = [];
        Ⲇᐃ[1039][0] = ⵠⵠ.ΔᐃⲆᐃΔ;
        Ⲇᐃ[1039][1] = ⵠⵠ.ΔᐃⲆᐃΔ;
        Ⲇᐃ[1039][2] = ⵠⵠ.ΔᐃⲆᐃΔ;
        Ⲇᐃ[Pr.ⵠⵠⵠⵠᐃⲆⲆⵠᐃ] = Ⲇᐃ[1039];
        Ⲇᐃ[1040] = Ⲇᐃ[1039];
        Ⲇᐃ[1156] = [];
        Ⲇᐃ[1156][0] = ⵠⵠ.ᐃⵠᐃΔⲆ;
        Ⲇᐃ[1156][1] = ⵠⵠ.ᐃⵠᐃΔⲆ;
        Ⲇᐃ[1156][2] = ⵠⵠ.ᐃⵠᐃΔⲆ;
        Ⲇᐃ[1157] = Ⲇᐃ[1156];
        Ⲇᐃ[1046] = [];
        Ⲇᐃ[1046][0] = ⵠⵠ.ⲆΔⵠⵠⵠⲆᐃ;
        Ⲇᐃ[1046][1] = ⵠⵠ.ᐃΔᐃⵠⵠⲆⵠ;
        Ⲇᐃ[1046][2] = ⵠⵠ.ΔᐃⲆⲆΔⵠΔ;
        Ⲇᐃ[1048] = Ⲇᐃ[1046];
        Ⲇᐃ[1047] = Ⲇᐃ[1046];
        Ⲇᐃ[744] = [];
        Ⲇᐃ[744][0] = ⵠⵠ.ⲆᐃᐃᐃᐃΔΔ;
        Ⲇᐃ[744][1] = ⵠⵠ.ⵠᐃⵠΔᐃⵠⲆ;
        Ⲇᐃ[744][2] = ⵠⵠ.ᐃΔΔᐃᐃⵠᐃ;
        Ⲇᐃ[746] = Ⲇᐃ[744];
        Ⲇᐃ[745] = Ⲇᐃ[744];
        Ⲇᐃ[747] = [];
        Ⲇᐃ[747][0] = ⵠⵠ.ⵠΔⵠᐃΔⲆⵠ;
        Ⲇᐃ[747][1] = ⵠⵠ.ΔᐃΔⵠᐃᐃᐃ;
        Ⲇᐃ[747][2] = ⵠⵠ.ΔΔⲆⲆΔᐃⲆ;
        Ⲇᐃ[749] = Ⲇᐃ[747];
        Ⲇᐃ[748] = Ⲇᐃ[747];
        Ⲇᐃ[1049] = [];
        Ⲇᐃ[1049][0] = ⵠⵠ.ⲆⲆᐃⲆⵠᐃᐃ;
        Ⲇᐃ[1049][1] = ⵠⵠ.ⲆᐃⵠΔΔΔⲆ;
        Ⲇᐃ[1049][2] = ⵠⵠ.ΔⲆᐃⲆⵠⵠΔ;
        Ⲇᐃ[1051] = Ⲇᐃ[1049];
        Ⲇᐃ[1050] = Ⲇᐃ[1049];
        Ⲇᐃ[1189] = [];
        Ⲇᐃ[1189][0] = ⵠⵠ.ΔΔⵠⵠⵠΔᐃ;
        Ⲇᐃ[1189][1] = ⵠⵠ.ΔΔᐃΔⵠⲆΔ;
        Ⲇᐃ[1189][2] = ⵠⵠ.ᐃⲆΔΔⵠᐃⵠ;
        Ⲇᐃ[1191] = Ⲇᐃ[1189];
        Ⲇᐃ[1190] = Ⲇᐃ[1189];
        Ⲇᐃ[1110] = [];
        Ⲇᐃ[1110][0] = ⵠⵠ.ᐃΔⵠⵠΔᐃᐃ;
        Ⲇᐃ[1110][1] = ⵠⵠ.ᐃΔⵠᐃⵠⵠⲆ;
        Ⲇᐃ[1110][2] = ⵠⵠ.ⵠⲆⵠΔΔⲆⲆ;
        Ⲇᐃ[1112] = Ⲇᐃ[1110];
        Ⲇᐃ[1111] = Ⲇᐃ[1110];
        Ⲇᐃ[1131] = [];
        Ⲇᐃ[1131][0] = ⵠⵠ.ᐃⲆΔⲆⵠᐃⲆⵠᐃ;
        Ⲇᐃ[1131][1] = ⵠⵠ.ΔⵠΔᐃᐃⵠᐃΔᐃ;
        Ⲇᐃ[1131][2] = ⵠⵠ.ᐃⵠⵠᐃⵠⲆⲆⲆᐃ;
        Ⲇᐃ[1133] = Ⲇᐃ[1131];
        Ⲇᐃ[1132] = Ⲇᐃ[1131];
        Ⲇᐃ[1137] = [];
        Ⲇᐃ[1137][0] = ⵠⵠ.ΔᐃⵠⵠⲆᐃᐃ;
        Ⲇᐃ[1137][1] = ⵠⵠ.ΔⵠᐃⲆΔⵠⵠ;
        Ⲇᐃ[1137][2] = ⵠⵠ.ΔΔⵠᐃⵠⲆᐃ;
        Ⲇᐃ[1138] = Ⲇᐃ[1137];
        Ⲇᐃ[1139] = Ⲇᐃ[1137];
        Ⲇᐃ[1140] = [];
        Ⲇᐃ[1140][0] = ⵠⵠ.ⲆⲆΔΔΔᐃⲆ;
        Ⲇᐃ[1140][1] = ⵠⵠ.ⲆᐃⵠΔΔΔᐃ;
        Ⲇᐃ[1140][2] = ⵠⵠ.ΔᐃΔΔⵠΔΔ;
        Ⲇᐃ[1141] = Ⲇᐃ[1140];
        Ⲇᐃ[1142] = Ⲇᐃ[1140];
        Ⲇᐃ[1117] = [];
        Ⲇᐃ[1117][0] = ⵠⵠ.ⵠΔΔⵠΔⵠΔ;
        Ⲇᐃ[1117][1] = ⵠⵠ.ᐃΔⲆᐃᐃⲆΔ;
        Ⲇᐃ[1117][2] = ⵠⵠ.ᐃⲆⲆⲆⲆⲆⲆ;
        Ⲇᐃ[1116] = Ⲇᐃ[1117];
        Ⲇᐃ[1118] = Ⲇᐃ[1117];
        Ⲇᐃ[1080] = [];
        Ⲇᐃ[1080][0] = ⵠⵠ.ⲆⵠⲆΔΔⵠⵠ;
        Ⲇᐃ[1080][1] = ⵠⵠ.ΔⵠᐃⲆⵠᐃᐃ;
        Ⲇᐃ[1080][2] = ⵠⵠ.ΔᐃⵠΔⵠⲆΔ;
        Ⲇᐃ[1082] = Ⲇᐃ[1080];
        Ⲇᐃ[1081] = Ⲇᐃ[1080];
        Ⲇᐃ[1224] = [];
        Ⲇᐃ[1224][0] = ⵠⵠ.ΔⵠᐃᐃⲆⲆⲆ;
        Ⲇᐃ[1224][1] = ⵠⵠ.ᐃᐃⵠⲆΔΔΔ;
        Ⲇᐃ[1224][2] = ⵠⵠ.ⲆΔᐃⲆⲆⵠΔ;
        Ⲇᐃ[1226] = Ⲇᐃ[1224];
        Ⲇᐃ[1225] = Ⲇᐃ[1224];
        Ⲇᐃ[1095] = [];
        Ⲇᐃ[1095][0] = ⵠⵠ.ΔⵠΔⲆΔᐃᐃ;
        Ⲇᐃ[1095][1] = ⵠⵠ.ΔⲆΔⵠΔΔᐃ;
        Ⲇᐃ[1095][2] = ⵠⵠ.ⵠⲆΔⲆⵠΔⲆ;
        Ⲇᐃ[1097] = Ⲇᐃ[1095];
        Ⲇᐃ[1096] = Ⲇᐃ[1095];
        Ⲇᐃ[717] = Ob(1, [{
            f: _m,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
        }, {
            f: hm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e4c027"]
        }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[718] = Ⲇᐃ[717];
        Ⲇᐃ[408] = Ob(1, [{
            f: Zt,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[409] = Ⲇᐃ[408];
        Ⲇᐃ[907] = Ob(1, [{
            f: eu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
        }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[909] = Ⲇᐃ[907];
        Ⲇᐃ[908] = Ⲇᐃ[907];
        Ⲇᐃ[197] = Ob(1, [{
            f: cu,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[906] = Ⲇᐃ[197];
        Ⲇᐃ[901] = Ob(1, [{
            f: bu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[900] = Ⲇᐃ[901];
        Ⲇᐃ[899] = Ⲇᐃ[901];
        Ⲇᐃ[401] = Ob(1, [{
            f: nu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[402] = Ⲇᐃ[401];
        Ⲇᐃ[395] = Ob(1, [{
            f: ku,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[396] = Ⲇᐃ[395];
        Ⲇᐃ[398] = Ob(1, [{
            f: du,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[399] = Ⲇᐃ[398];
        Ⲇᐃ[404] = Ob(1, [{
            f: iu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[405] = Ⲇᐃ[404];
        Ⲇᐃ[472] = Ob(1, [{
            f: au,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[473] = Ⲇᐃ[472];
        Ⲇᐃ[874] = Ob(1, [{
            f: ju,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
        }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[876] = Ⲇᐃ[874];
        Ⲇᐃ[875] = Ⲇᐃ[874];
        Ⲇᐃ[477] = Ob(1, [{
            f: uu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[478] = Ⲇᐃ[477];
        Ⲇᐃ[709] = Ob(1, [{
            f: hc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#939393", "#5f6061"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[711] = Ⲇᐃ[709];
        Ⲇᐃ[550] = Ob(1, [{
            f: am,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[551] = Ⲇᐃ[550];
        Ⲇᐃ[480] = Ob(1, [{
            f: uu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[481] = Ⲇᐃ[480];
        Ⲇᐃ[483] = Ob(1, [{
            f: uu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[484] = Ⲇᐃ[483];
        Ⲇᐃ[486] = Ob(1, [{
            f: uu,
            x: 2,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[487] = Ⲇᐃ[486];
        Ⲇᐃ[489] = [];
        Ⲇᐃ[489][0] = ⵠⵠ.ᐃΔΔᐃΔΔΔ;
        Ⲇᐃ[489][1] = ⵠⵠ.ᐃⲆⵠΔΔᐃⵠ;
        Ⲇᐃ[489][2] = ⵠⵠ.ᐃⲆⵠⵠΔᐃΔ;
        Ⲇᐃ[491] = Ⲇᐃ[489];
        Ⲇᐃ[490] = Ⲇᐃ[489];
        Ⲇᐃ[1195] = [];
        Ⲇᐃ[1195][0] = ⵠⵠ.ⲆᐃΔⵠΔΔᐃ;
        Ⲇᐃ[1195][1] = ⵠⵠ.ⵠᐃΔΔΔⲆΔ;
        Ⲇᐃ[1195][2] = ⵠⵠ.ⲆⵠΔⲆᐃⵠᐃ;
        Ⲇᐃ[1197] = Ⲇᐃ[1195];
        Ⲇᐃ[1196] = Ⲇᐃ[1195];
        Ⲇᐃ[1199] = [];
        Ⲇᐃ[1199][0] = ⵠⵠ.ⲆᐃΔΔᐃᐃⲆ;
        Ⲇᐃ[1199][1] = ⵠⵠ.ᐃΔΔᐃⵠΔΔ;
        Ⲇᐃ[1199][2] = ⵠⵠ.ᐃⵠⲆᐃⲆΔⲆ;
        Ⲇᐃ[1201] = Ⲇᐃ[1199];
        Ⲇᐃ[1200] = Ⲇᐃ[1199];
        Ⲇᐃ[1203] = [];
        Ⲇᐃ[1203][0] = ⵠⵠ.ⵠⵠⲆΔᐃᐃΔ;
        Ⲇᐃ[1203][1] = ⵠⵠ.ᐃⵠΔⲆⵠⵠᐃ;
        Ⲇᐃ[1203][2] = ⵠⵠ.ΔᐃⵠⵠⵠᐃⲆ;
        Ⲇᐃ[1205] = Ⲇᐃ[1203];
        Ⲇᐃ[1204] = Ⲇᐃ[1203];
        Ⲇᐃ[1207] = [];
        Ⲇᐃ[1207][0] = ⵠⵠ.ᐃⲆⵠⲆΔⲆⲆ;
        Ⲇᐃ[1207][1] = ⵠⵠ.ᐃᐃⲆΔΔⲆⵠ;
        Ⲇᐃ[1207][2] = ⵠⵠ.ᐃᐃΔᐃᐃᐃΔ;
        Ⲇᐃ[1209] = Ⲇᐃ[1207];
        Ⲇᐃ[1208] = Ⲇᐃ[1207];
        Ⲇᐃ[1211] = [];
        Ⲇᐃ[1211][0] = ⵠⵠ.ΔⲆⵠᐃⵠΔⵠ;
        Ⲇᐃ[1211][1] = ⵠⵠ.ⲆᐃΔⲆΔΔⲆ;
        Ⲇᐃ[1211][2] = ⵠⵠ.ΔᐃⵠᐃⲆⵠΔ;
        Ⲇᐃ[1213] = Ⲇᐃ[1211];
        Ⲇᐃ[1212] = Ⲇᐃ[1211];
        Ⲇᐃ[1215] = [];
        Ⲇᐃ[1215][0] = ⵠⵠ.ᐃⵠΔᐃⲆᐃⵠ;
        Ⲇᐃ[1215][1] = ⵠⵠ.ⲆⲆⲆⲆⲆⵠⲆ;
        Ⲇᐃ[1215][2] = ⵠⵠ.ⵠⵠⵠⵠⵠᐃᐃ;
        Ⲇᐃ[1217] = Ⲇᐃ[1215];
        Ⲇᐃ[1216] = Ⲇᐃ[1215];
        Ⲇᐃ[518] = Ob(1, [{
            f: nm,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
        }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[519] = Ⲇᐃ[518];
        Ⲇᐃ[532] = Ob(1, [{
            f: Dm,
            x: -2,
            y: -2,
            a: 1,
            r: -Math.PI / 5,
            c: ["#141414", "#c4a23a", "#816511"]
        }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[533] = Ⲇᐃ[532];
        Ⲇᐃ[521] = Ob(1, [{
            f: km,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        Ⲇᐃ[523] = Ob(1, [{
            f: km,
            x: -2,
            y: -2,
            a: 1,
            r: 0,
            c: ["#120202", "#991616", "#750a0a", "#120202"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
        Ⲇᐃ[529] = Ob(1, [{
            f: wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba"]
        }, {
            f: pm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
        }, {
            f: um,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0"]
        }, {
            f: Tm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[530] = Ⲇᐃ[529];
        Ⲇᐃ[553] = Ob(1, [{
            f: mm,
            x: 45,
            y: 70,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[555] = Ⲇᐃ[553];
        Ⲇᐃ[541] = Ob(1, [{
            f: Jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
        }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[542] = Ⲇᐃ[541];
        Ⲇᐃ[779] = Ob(1, [{
            f: tc,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
        }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[780] = Ⲇᐃ[779];
        Ⲇᐃ[767] = Ob(1, [{
            f: Km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#2a2938", "#242330", "#313041"]
        }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[768] = Ⲇᐃ[767];
        Ⲇᐃ[776] = Ob(1, [{
            f: dc,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[777] = Ⲇᐃ[776];
        Ⲇᐃ[771] = Ob(1, [{
            f: dc,
            x: 0,
            y: 3,
            a: 1,
            r: 0,
            c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
        }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[772] = Ⲇᐃ[771];
        Ⲇᐃ[756] = Ob(1, [{
            f: oc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[758] = Ⲇᐃ[756];
        Ⲇᐃ[760] = Ob(1, [{
            f: oc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[762] = Ⲇᐃ[760];
        Ⲇᐃ[764] = Ob(1, [{
            f: oc,
            x: 0,
            y: 10,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[770] = Ⲇᐃ[764];
        Ⲇᐃ[910] = Ob(1, [{
            f: lu,
            x: -1,
            y: 0,
            a: 1,
            r: 0,
            c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[912] = Ⲇᐃ[910];
        Ⲇᐃ[911] = Ⲇᐃ[910];
        Ⲇᐃ[732] = Ob(1, [{
            f: Ku,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[734] = Ⲇᐃ[732];
        Ⲇᐃ[563] = Ob(1, [{
            f: sm,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
        }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[564] = Ⲇᐃ[563];
        Ⲇᐃ[751] = Ob(1, [{
            f: om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[252] = Ob(1, [{
            f: Sm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[753] = Ob(1, [{
            f: om,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[253] = Ob(1, [{
            f: Sm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
        }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[176] = Ob(1, [{
            f: Wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[177] = Ob(1, [{
            f: Wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[175] = Ob(1, [{
            f: Wm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
        }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[616] = Ob(1, [{
            f: nc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[618] = Ⲇᐃ[616];
        Ⲇᐃ[699] = Ob(1, [{
            f: nc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[700] = Ⲇᐃ[699];
        Ⲇᐃ[702] = Ob(1, [{
            f: nc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[704] = Ⲇᐃ[702];
        Ⲇᐃ[705] = Ob(1, [{
            f: nc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[706] = Ⲇᐃ[705];
        Ⲇᐃ[420] = Ob(1, [{
            f: dm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[421] = Ⲇᐃ[420];
        Ⲇᐃ[826] = Ob(1, [{
            f: qm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#252525", "#73583e", "#493425", "#7d6144"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[827] = Ⲇᐃ[826];
        Ⲇᐃ[429] = Ob(1, [{
            f: gm,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[430] = Ⲇᐃ[429];
        Ⲇᐃ[432] = Ob(1, [{
            f: rm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#dbce71", "#b29c32", "#c4bc51"]
        }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[433] = Ⲇᐃ[432];
        Ⲇᐃ[435] = Ob(1, [{
            f: jm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
        }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[436] = Ⲇᐃ[435];
        Ⲇᐃ[438] = Ob(1, [{
            f: Fm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
        }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[439] = Ⲇᐃ[438];
        Ⲇᐃ[441] = Ob(1, [{
            f: Pm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#221e1b", "#ffffff", "#f6f0e7"]
        }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[442] = Ⲇᐃ[441];
        Ⲇᐃ[418] = Ob(1, [{
            f: yu,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#c27add", "#cd98e5"]
        }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[609] = Ob(1, [{
            f: lm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#D7C393", "#a48c6c"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[142] = Ob(1, [{
            f: zm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#93CBCE", "#E9F6F6"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[140] = Ob(1, [{
            f: lm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#866432", "#6b4f25"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[180] = Ob(1, [{
            f: vc,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[181] = Ob(1, [{
            f: bc,
            x: 3,
            y: 2,
            a: 1,
            r: 0,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
        }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[784] = Ⲇᐃ[180];
        Ⲇᐃ[785] = Ⲇᐃ[181];
        Ⲇᐃ[789] = Ob(1, [{
            f: Hm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
        }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[791] = Ⲇᐃ[789];
        Ⲇᐃ[613] = Ob(1, [{
            f: $m,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[612] = Ob(1, [{
            f: lc,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 5,
            c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
        }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[715] = Ⲇᐃ[613];
        Ⲇᐃ[611] = Ⲇᐃ[612];
        Ⲇᐃ[634] = Ob(1, [{
            f: yd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[635] = Ⲇᐃ[634];
        Ⲇᐃ[200] = Ob(1, [{
            f: Md,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[866] = Ob(1, [{
            f: Ad,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
        }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[143] = Ob(1, [{
            f: Im,
            x: 0,
            y: -2,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[690] = Ⲇᐃ[143];
        Ⲇᐃ[662] = Ob(1, [{
            f: Fd,
            x: -3,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[664] = Ob(1, [{
            f: Ud,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1d051e", "#42261A", "#281818"]
        }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[666] = Ⲇᐃ[664];
        Ⲇᐃ[649] = Ob(1, [{
            f: Rd,
            x: -3,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
        }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[650] = Ⲇᐃ[649];
        Ⲇᐃ[674] = Ob(1, [{
            f: Jb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
        }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[646] = Ob(1, [{
            f: Ot,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
        }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
        Ⲇᐃ[647] = Ⲇᐃ[646];
        Ⲇᐃ[685] = Ob(1, [{
            f: Am,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[684] = Ⲇᐃ[685];
        Ⲇᐃ[870] = Ob(1, [{
            f: nb,
            x: -5,
            y: -5,
            a: 1,
            r: 0,
            c: ["#e2d63b", "#ee71a9", "#42b672"]
        }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[871] = Ⲇᐃ[870];
        Ⲇᐃ[605] = Ob(1, [{
            f: Em,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
        }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[604] = Ⲇᐃ[605];
        Ⲇᐃ[842] = Ob(1, [{
            f: ab,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
        }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[843] = Ⲇᐃ[842];
        Ⲇᐃ[652] = Ob(1, [{
            f: fm,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
        }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
        Ⲇᐃ[654] = Ⲇᐃ[652];
        Ⲇᐃ[626] = Ob(1, [{
            f: fm,
            x: -1,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
        }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[627] = Ⲇᐃ[626];
        Ⲇᐃ[629] = Ob(1, [{
            f: vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[196] = Ob(1, [{
            f: zd,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
        }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[898] = Ⲇᐃ[196];
        Ⲇᐃ[659] = Ob(1, [{
            f: Ld,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[660] = Ⲇᐃ[659];
        Ⲇᐃ[145] = Ob(1, [{
            f: Db,
            x: -2,
            y: -8,
            a: 1,
            r: 0,
            c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
        }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
        Ⲇᐃ[730] = Ⲇᐃ[145];
        Ⲇᐃ[566] = [];
        Ⲇᐃ[566][0] = ⵠⵠ.ᐃᐃⲆⵠⲆⲆᐃ;
        Ⲇᐃ[566][1] = ⵠⵠ.ΔᐃⵠΔΔⵠΔ;
        Ⲇᐃ[566][2] = ⵠⵠ.ⲆⵠⵠᐃΔᐃᐃ;
        Ⲇᐃ[567] = Ⲇᐃ[566];
        Ⲇᐃ[568] = Ⲇᐃ[566];
        Ⲇᐃ[877] = [];
        Ⲇᐃ[877][0] = ⵠⵠ.ΔⵠᐃΔΔⵠⲆ;
        Ⲇᐃ[877][1] = ⵠⵠ.ⲆΔᐃⲆΔⵠᐃ;
        Ⲇᐃ[877][2] = ⵠⵠ.ᐃΔⵠⵠⵠᐃΔ;
        Ⲇᐃ[879] = Ⲇᐃ[877];
        Ⲇᐃ[878] = Ⲇᐃ[877];
        Ⲇᐃ[933] = Ⲇᐃ[932];
        Ⲇᐃ[934] = Ⲇᐃ[932];
        Ⲇᐃ[932] = [];
        Ⲇᐃ[932][0] = ⵠⵠ.ᐃⵠΔⲆⲆᐃᐃ;
        Ⲇᐃ[932][1] = ⵠⵠ.ᐃΔᐃⵠⵠⲆᐃ;
        Ⲇᐃ[932][2] = ⵠⵠ.ΔⵠⵠᐃΔΔᐃ;
        Ⲇᐃ[933] = Ⲇᐃ[932];
        Ⲇᐃ[934] = Ⲇᐃ[932];
        Ⲇᐃ[943] = [];
        Ⲇᐃ[943][0] = ⵠⵠ.ⲆⲆΔΔⵠⵠᐃ;
        Ⲇᐃ[943][1] = ⵠⵠ.ⲆᐃⲆⲆΔⲆᐃ;
        Ⲇᐃ[943][2] = ⵠⵠ.ᐃⲆⵠᐃⵠᐃⵠ;
        Ⲇᐃ[944] = Ⲇᐃ[943];
        Ⲇᐃ[945] = Ⲇᐃ[943];
        Ⲇᐃ[921] = [];
        Ⲇᐃ[921][0] = ⵠⵠ.ᐃⵠΔᐃⵠⲆⲆ;
        Ⲇᐃ[921][1] = ⵠⵠ.ᐃΔⲆⵠⵠⲆΔ;
        Ⲇᐃ[921][2] = ⵠⵠ.ⲆᐃⵠⵠΔⲆⵠ;
        Ⲇᐃ[922] = Ⲇᐃ[921];
        Ⲇᐃ[923] = Ⲇᐃ[921];
        Ⲇᐃ[925] = [];
        Ⲇᐃ[925][0] = ⵠⵠ.ᐃᐃΔᐃⵠᐃⵠ;
        Ⲇᐃ[925][1] = ⵠⵠ.ⲆΔΔⵠⲆⵠⲆ;
        Ⲇᐃ[925][2] = ⵠⵠ.ᐃΔᐃΔΔⲆⵠ;
        Ⲇᐃ[926] = Ⲇᐃ[925];
        Ⲇᐃ[927] = Ⲇᐃ[925];
        Ⲇᐃ[929] = [];
        Ⲇᐃ[929][0] = ⵠⵠ.ᐃⵠΔᐃΔⵠⵠ;
        Ⲇᐃ[929][1] = ⵠⵠ.ⲆΔᐃᐃᐃΔⵠ;
        Ⲇᐃ[929][2] = ⵠⵠ.ΔΔΔⲆⲆⵠΔ;
        Ⲇᐃ[930] = Ⲇᐃ[929];
        Ⲇᐃ[931] = Ⲇᐃ[929];
        Ⲇᐃ[946] = [];
        Ⲇᐃ[946][0] = ⵠⵠ.ᐃᐃᐃⲆⲆⵠⲆ;
        Ⲇᐃ[946][1] = ⵠⵠ.ⵠⲆᐃⵠᐃⲆᐃ;
        Ⲇᐃ[946][2] = ⵠⵠ.ᐃΔᐃΔᐃᐃⵠ;
        Ⲇᐃ[947] = Ⲇᐃ[946];
        Ⲇᐃ[948] = Ⲇᐃ[946];
        Ⲇᐃ[735] = [];
        Ⲇᐃ[735][0] = ⵠⵠ.ΔⵠⵠⲆᐃⵠᐃ;
        Ⲇᐃ[735][1] = ⵠⵠ.ΔⵠᐃΔᐃⲆᐃ;
        Ⲇᐃ[735][2] = ⵠⵠ.ⲆᐃⲆᐃⵠⲆⵠ;
        Ⲇᐃ[737] = Ⲇᐃ[735];
        Ⲇᐃ[736] = Ⲇᐃ[735];
        Ⲇᐃ[1164] = [];
        Ⲇᐃ[1164][0] = ⵠⵠ.ⵠᐃⵠⲆⵠⲆⵠ;
        Ⲇᐃ[1164][1] = ⵠⵠ.ⵠⵠⲆᐃΔⵠⲆ;
        Ⲇᐃ[1164][2] = ⵠⵠ.ᐃⵠⵠⲆⵠΔᐃ;
        Ⲇᐃ[Pr.ⲆΔᐃᐃⲆⵠⲆΔⵠ] = Ⲇᐃ[1164];
        Ⲇᐃ[1165] = Ⲇᐃ[1164];
        Ⲇᐃ[738] = [];
        Ⲇᐃ[738][0] = ⵠⵠ.ⵠⲆΔⵠⵠⵠⵠ;
        Ⲇᐃ[738][1] = ⵠⵠ.ΔⲆⲆᐃΔᐃᐃ;
        Ⲇᐃ[738][2] = ⵠⵠ.ⵠⵠⵠᐃᐃⵠᐃ;
        Ⲇᐃ[740] = Ⲇᐃ[738];
        Ⲇᐃ[739] = Ⲇᐃ[738];
        Ⲇᐃ[741] = [];
        Ⲇᐃ[741][0] = ⵠⵠ.ΔᐃΔΔⵠⵠΔ;
        Ⲇᐃ[741][1] = ⵠⵠ.ⵠⲆⲆⲆᐃⵠⲆ;
        Ⲇᐃ[741][2] = ⵠⵠ.ΔᐃᐃⲆⲆⵠΔ;
        Ⲇᐃ[743] = Ⲇᐃ[741];
        Ⲇᐃ[742] = Ⲇᐃ[741];
        Ⲇᐃ[938] = [];
        Ⲇᐃ[938][0] = ⵠⵠ.ⲆΔⵠⲆᐃᐃⲆ;
        Ⲇᐃ[938][1] = ⵠⵠ.ⵠᐃⲆⵠⲆⲆⲆ;
        Ⲇᐃ[938][2] = ⵠⵠ.ⵠⲆⵠⵠⲆΔᐃ;
        Ⲇᐃ[939] = Ⲇᐃ[938];
        Ⲇᐃ[936] = [];
        Ⲇᐃ[936][0] = ⵠⵠ.ΔΔⵠΔΔⲆΔ;
        Ⲇᐃ[936][1] = ⵠⵠ.ⵠⲆⲆᐃΔΔⲆ;
        Ⲇᐃ[936][2] = ⵠⵠ.ΔᐃΔⲆΔⲆᐃ;
        Ⲇᐃ[937] = Ⲇᐃ[936];
        Ⲇᐃ[617] = Ⲇᐃ[616];
        Ⲇᐃ[701] = Ⲇᐃ[699];
        Ⲇᐃ[703] = Ⲇᐃ[702];
        Ⲇᐃ[707] = Ⲇᐃ[705];
        Ⲇᐃ[348] = Ⲇᐃ[311];
        Ⲇᐃ[633] = Ⲇᐃ[631];
        Ⲇᐃ[645] = Ⲇᐃ[644];
        Ⲇᐃ[640] = Ⲇᐃ[639];
        Ⲇᐃ[273] = Ⲇᐃ[309];
        Ⲇᐃ[590] = Ⲇᐃ[252];
        Ⲇᐃ[752] = Ⲇᐃ[751];
        Ⲇᐃ[591] = Ⲇᐃ[253];
        Ⲇᐃ[754] = Ⲇᐃ[753];
        Ⲇᐃ[276] = Ⲇᐃ[328];
        Ⲇᐃ[863] = Ⲇᐃ[865];
        Ⲇᐃ[862] = Ⲇᐃ[860];
        Ⲇᐃ[831] = Ⲇᐃ[829];
        Ⲇᐃ[340] = Ⲇᐃ[261];
        Ⲇᐃ[596] = Ⲇᐃ[594];
        Ⲇᐃ[345] = Ⲇᐃ[292];
        Ⲇᐃ[346] = Ⲇᐃ[293];
        Ⲇᐃ[457] = Ⲇᐃ[455];
        Ⲇᐃ[274] = Ⲇᐃ[313];
        Ⲇᐃ[341] = Ⲇᐃ[312];
        Ⲇᐃ[272] = Ⲇᐃ[258];
        Ⲇᐃ[344] = Ⲇᐃ[296];
        Ⲇᐃ[459] = Ⲇᐃ[458];
        Ⲇᐃ[342] = Ⲇᐃ[315];
        Ⲇᐃ[270] = Ⲇᐃ[297];
        Ⲇᐃ[271] = Ⲇᐃ[298];
        Ⲇᐃ[343] = Ⲇᐃ[316];
        Ⲇᐃ[269] = Ⲇᐃ[277];
        Ⲇᐃ[358] = Ⲇᐃ[310];
        Ⲇᐃ[354] = Ⲇᐃ[329];
        Ⲇᐃ[356] = Ⲇᐃ[331];
        Ⲇᐃ[355] = Ⲇᐃ[330];
        Ⲇᐃ[494] = Ⲇᐃ[492];
        Ⲇᐃ[349] = Ⲇᐃ[317];
        Ⲇᐃ[350] = Ⲇᐃ[319];
        Ⲇᐃ[275] = Ⲇᐃ[300];
        Ⲇᐃ[351] = Ⲇᐃ[323];
        Ⲇᐃ[353] = Ⲇᐃ[305];
        Ⲇᐃ[514] = Ⲇᐃ[513];
        Ⲇᐃ[352] = Ⲇᐃ[303];
        Ⲇᐃ[520] = Ⲇᐃ[518];
        Ⲇᐃ[534] = Ⲇᐃ[532];
        Ⲇᐃ[531] = Ⲇᐃ[529];
        Ⲇᐃ[522] = Ⲇᐃ[521];
        Ⲇᐃ[524] = Ⲇᐃ[523];
        Ⲇᐃ[565] = Ⲇᐃ[563];
        Ⲇᐃ[554] = Ⲇᐃ[553];
        Ⲇᐃ[357] = Ⲇᐃ[335];
        Ⲇᐃ[359] = Ⲇᐃ[337];
        Ⲇᐃ[339] = Ya(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            xt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            wt(e, c[0], c[1], 4);
            e.save();
            xt(e, a * 30, a * 115, a * 60, a * 5, a * 15);
            e.restore();
            wt(e, c[2], c[3], 4);
            e.save();
            xt(e, a * 50, a * 117, a * 20, a * 10, a * 15);
            e.restore();
            wt(e, c[2]);
            return d;
        }(0.8, 0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
        Ⲇᐃ[366] = Ob(0.5, [{
            f: gu,
            x: 0,
            y: 2,
            a: 1,
            r: 0,
            c: ["#ffffff"]
        }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
        Ⲇᐃ[382] = Ⲇᐃ[361];
        Ⲇᐃ[383] = Ⲇᐃ[362];
        Ⲇᐃ[384] = Ⲇᐃ[364];
        Ⲇᐃ[497] = Ⲇᐃ[495];
        Ⲇᐃ[385] = Ⲇᐃ[392];
        Ⲇᐃ[774] = Ⲇᐃ[178];
        Ⲇᐃ[775] = Ⲇᐃ[179];
        Ⲇᐃ[386] = Ⲇᐃ[368];
        Ⲇᐃ[625] = Ⲇᐃ[624];
        Ⲇᐃ[394] = Ⲇᐃ[393];
        Ⲇᐃ[1163] = Ⲇᐃ[1162];
        Ⲇᐃ[506] = Ⲇᐃ[505];
        Ⲇᐃ[387] = Ⲇᐃ[369];
        Ⲇᐃ[504] = Ⲇᐃ[502];
        Ⲇᐃ[388] = Ⲇᐃ[372];
        Ⲇᐃ[389] = Ⲇᐃ[375];
        Ⲇᐃ[390] = Ⲇᐃ[378];
        Ⲇᐃ[501] = Ⲇᐃ[499];
        Ⲇᐃ[391] = Ⲇᐃ[381];
        Ⲇᐃ[403] = Ⲇᐃ[401];
        Ⲇᐃ[397] = Ⲇᐃ[395];
        Ⲇᐃ[400] = Ⲇᐃ[398];
        Ⲇᐃ[406] = Ⲇᐃ[404];
        Ⲇᐃ[474] = Ⲇᐃ[472];
        Ⲇᐃ[875] = Ⲇᐃ[874];
        Ⲇᐃ[552] = Ⲇᐃ[550];
        Ⲇᐃ[710] = Ⲇᐃ[709];
        Ⲇᐃ[479] = Ⲇᐃ[477];
        Ⲇᐃ[482] = Ⲇᐃ[480];
        Ⲇᐃ[485] = Ⲇᐃ[483];
        Ⲇᐃ[488] = Ⲇᐃ[486];
        Ⲇᐃ[410] = Ⲇᐃ[408];
        Ⲇᐃ[719] = Ⲇᐃ[717];
        Ⲇᐃ[422] = Ⲇᐃ[420];
        Ⲇᐃ[431] = Ⲇᐃ[429];
        Ⲇᐃ[434] = Ⲇᐃ[432];
        Ⲇᐃ[437] = Ⲇᐃ[435];
        Ⲇᐃ[543] = Ⲇᐃ[541];
        Ⲇᐃ[733] = Ⲇᐃ[732];
        Ⲇᐃ[440] = Ⲇᐃ[438];
        Ⲇᐃ[443] = Ⲇᐃ[441];
        Ⲇᐃ[446] = Ⲇᐃ[418];
        Ⲇᐃ[606] = Ⲇᐃ[605];
        Ⲇᐃ[844] = Ⲇᐃ[842];
        Ⲇᐃ[683] = Ⲇᐃ[685];
        Ⲇᐃ[610] = Ⲇᐃ[609];
        Ⲇᐃ[689] = Ⲇᐃ[143];
        Ⲇᐃ[686] = Ⲇᐃ[142];
        Ⲇᐃ[682] = Ⲇᐃ[140];
        Ⲇᐃ[615] = Ⲇᐃ[613];
        Ⲇᐃ[614] = Ⲇᐃ[612];
        Ⲇᐃ[628] = Ⲇᐃ[626];
        Ⲇᐃ[630] = Ⲇᐃ[629];
        Ⲇᐃ[636] = Ⲇᐃ[634];
        Ⲇᐃ[868] = Ⲇᐃ[200];
        Ⲇᐃ[867] = Ⲇᐃ[866];
        Ⲇᐃ[648] = Ⲇᐃ[646];
        Ⲇᐃ[651] = Ⲇᐃ[649];
        Ⲇᐃ[653] = Ⲇᐃ[652];
        Ⲇᐃ[661] = Ⲇᐃ[659];
        Ⲇᐃ[898] = Ⲇᐃ[196];
        Ⲇᐃ[663] = Ⲇᐃ[662];
        Ⲇᐃ[665] = Ⲇᐃ[664];
        Ⲇᐃ[675] = Ⲇᐃ[674];
        Ⲇᐃ[731] = Ⲇᐃ[145];
        Ⲇᐃ[757] = Ⲇᐃ[756];
        Ⲇᐃ[759] = Ⲇᐃ[176];
        Ⲇᐃ[761] = Ⲇᐃ[760];
        Ⲇᐃ[763] = Ⲇᐃ[177];
        Ⲇᐃ[765] = Ⲇᐃ[764];
        Ⲇᐃ[766] = Ⲇᐃ[175];
        Ⲇᐃ[769] = Ⲇᐃ[767];
        Ⲇᐃ[773] = Ⲇᐃ[771];
        Ⲇᐃ[778] = Ⲇᐃ[776];
        Ⲇᐃ[781] = Ⲇᐃ[779];
        Ⲇᐃ[787] = Ⲇᐃ[181];
        Ⲇᐃ[786] = Ⲇᐃ[180];
        Ⲇᐃ[790] = Ⲇᐃ[789];
        Ⲇᐃ[801] = Ⲇᐃ[800];
        Ⲇᐃ[810] = Ⲇᐃ[808];
        Ⲇᐃ[836] = Ⲇᐃ[834];
        Ⲇᐃ[847] = Ⲇᐃ[845];
        Ⲇᐃ[828] = Ⲇᐃ[826];
    }
    function sc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 573;
        d.height = a * 350;
        if (c == 1) {
            e.beginPath();
            e.lineCap = "round";
            e.lineJoin = "round";
            e.moveTo(a * 336, a * 72);
            e.bezierCurveTo(a * 366, a * 15, a * 426, a * 36, a * 497, a * 83);
            e.bezierCurveTo(a * 522, a * 85, a * 522, a * 85, a * 547, a * 87);
            e.bezierCurveTo(a * 476.5, a * 205, a * 476.5, a * 205, a * 406, a * 323);
            e.bezierCurveTo(a * 297.5, a * 319, a * 297.5, a * 319, a * 189, a * 315);
            e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 243);
            e.bezierCurveTo(a * 92, a * 140, a * 92, a * 140, a * 162, a * 37);
            e.bezierCurveTo(a * 173, a * 39, a * 173, a * 39, a * 184, a * 41);
            e.bezierCurveTo(a * 185, a * 38.5, a * 185, a * 38.5, a * 186, a * 36);
            e.bezierCurveTo(a * 323, a * 13, a * 322, a * 25, a * 337, a * 74);
            e.closePath();
            wt(e, b[4], b[4], a * 35);
        }
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 168, a * 42);
        e.bezierCurveTo(a * 255, a * 60, a * 255, a * 60, a * 342, a * 78);
        e.bezierCurveTo(a * 443, a * 81.5, a * 443, a * 81.5, a * 544, a * 85);
        e.bezierCurveTo(a * 475, a * 204.5, a * 475, a * 204.5, a * 406, a * 324);
        e.bezierCurveTo(a * 297.5, a * 320, a * 297.5, a * 320, a * 189, a * 316);
        e.bezierCurveTo(a * 105.5, a * 279, a * 105.5, a * 279, a * 22, a * 242);
        e.closePath();
        wt(e, b[0], b[1], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 188, a * 41);
        e.bezierCurveTo(a * 308, a * 15, a * 325, a * 18, a * 337, a * 66);
        e.bezierCurveTo(a * 191, a * 305, a * 196, a * 286, a * 184, a * 307);
        e.bezierCurveTo(a * 175, a * 250, a * 90, a * 254, a * 52, a * 241);
        e.closePath();
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 336, a * 71);
        e.bezierCurveTo(a * 375, a * 8, a * 429, a * 50, a * 518, a * 92);
        e.bezierCurveTo(a * 455, a * 199.5, a * 455, a * 199.5, a * 392, a * 307);
        e.bezierCurveTo(a * 227, a * 301, a * 261, a * 255, a * 188, a * 308);
        e.closePath();
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 357, a * 76);
        e.bezierCurveTo(a * 390, a * 67, a * 414, a * 86, a * 435, a * 104);
        e.bezierCurveTo(a * 417, a * 135, a * 417, a * 135, a * 399, a * 166);
        e.bezierCurveTo(a * 352, a * 140, a * 345, a * 139, a * 319, a * 142);
        e.closePath();
        wt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 309, a * 168);
        e.bezierCurveTo(a * 345, a * 163, a * 372, a * 180, a * 412, a * 203);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 263, a * 54);
        e.bezierCurveTo(a * 305, a * 44, a * 307, a * 51, a * 311, a * 64);
        e.bezierCurveTo(a * 270.5, a * 129.5, a * 270.5, a * 129.5, a * 230, a * 195);
        e.bezierCurveTo(a * 221, a * 175, a * 203, a * 171, a * 186, a * 172);
        e.closePath();
        wt(e, b[3], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 292, a * 198);
        e.bezierCurveTo(a * 328, a * 191, a * 364, a * 211, a * 401, a * 237);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 245, a * 68);
        e.bezierCurveTo(a * 210, a * 72, a * 210, a * 72, a * 189, a * 69);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 96);
        e.bezierCurveTo(a * 196, a * 97, a * 193, a * 97, a * 177, a * 92);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 207, a * 124);
        e.bezierCurveTo(a * 179, a * 123, a * 177, a * 124, a * 161, a * 119);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 115, a * 183);
        e.bezierCurveTo(a * 184, a * 185, a * 203, a * 198, a * 219, a * 221);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 98, a * 213);
        e.bezierCurveTo(a * 161, a * 214, a * 193, a * 227, a * 201, a * 249);
        wt(e, b[2], b[3], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 399, a * 257);
        e.bezierCurveTo(a * 287, a * 215, a * 280, a * 215, a * 263, a * 222);
        e.bezierCurveTo(a * 253, a * 238, a * 247, a * 245, a * 243, a * 254);
        e.bezierCurveTo(a * 267, a * 236, a * 292, a * 263, a * 377, a * 284);
        wt(e, b[3], b[3], a * 12);
        return d;
    }
    function hc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 144;
        d.height = a * 280;
        e.globalAlpha = b ? 0.5 : 1;
        e.translate(a * 5, a * 5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        wt(e, c[0]);
        e.globalAlpha = 1;
        e.translate(a * -5, a * -5);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 62, a * 103.79999542236328);
        e.bezierCurveTo(a * 62.5, a * 148.79999542236328, a * 62.5, a * 148.79999542236328, a * 63, a * 193.79999542236328);
        e.bezierCurveTo(a * 63, a * 219.79999542236328, a * 47, a * 217.79999542236328, a * 51, a * 230.79999542236328);
        e.bezierCurveTo(a * 62, a * 255.79999542236328, a * 74, a * 260.7999954223633, a * 72, a * 248.79999542236328);
        e.bezierCurveTo(a * 65, a * 226.79999542236328, a * 71, a * 229.79999542236328, a * 76, a * 225.79999542236328);
        e.bezierCurveTo(a * 90, a * 224.79999542236328, a * 89, a * 232.79999542236328, a * 90, a * 243.79999542236328);
        e.bezierCurveTo(a * 95, a * 253.79999542236328, a * 99, a * 249.79999542236328, a * 100, a * 229.79999542236328);
        e.bezierCurveTo(a * 102, a * 213.79999542236328, a * 98, a * 214.79999542236328, a * 90, a * 205.79999542236328);
        e.bezierCurveTo(a * 82, a * 201.79999542236328, a * 82, a * 185.79999542236328, a * 82, a * 114.79999542236328);
        e.bezierCurveTo(a * 80, a * 73, a * 82, a * 68, a * 93, a * 53);
        e.bezierCurveTo(a * 98, a * 37, a * 65, a * 14, a * 74, a * 33);
        e.bezierCurveTo(a * 82, a * 56, a * 77, a * 52, a * 69, a * 54);
        e.bezierCurveTo(a * 55, a * 57, a * 57, a * 53, a * 54, a * 39);
        e.bezierCurveTo(a * 46, a * 20, a * 37, a * 61, a * 50, a * 68);
        e.bezierCurveTo(a * 65, a * 81, a * 60, a * 89, a * 62, a * 102);
        e.closePath();
        wt(e, c[1], c[2], a * 6);
        return d;
    }
    function lc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 316;
        d.height = a * 365;
        e.save();
        e.translate(a * 156.07142639160156, a * 51.81248474121094);
        e.rotate(0);
        xt(e, a * -21.5, a * -34, a * 43, a * 68, a * 8);
        e.restore();
        wt(e, c[1], c[2], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 126.57142639160156, a * 67.38392639160156);
        e.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
        e.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
        e.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
        e.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
        e.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
        e.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
        e.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
        e.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
        e.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
        e.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
        e.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
        e.closePath();
        wt(e, undefined, c[5], a * 15);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 125.57142639160156, a * 156.66963958740234);
        e.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
        e.closePath();
        wt(e, undefined, c[6], a * 15);
        return d;
    }
    function gc() {
        new Date().getTime();
        function b(a) {
            var b = 0;
            for (var c = 0, d = 0; c < a.length; c++) {
                var e = a.charAt(c);
                if (e !== "_" && c !== 5) {
                    if (e === "1") {
                        b += Math.pow(2, d);
                    }
                    d++;
                }
            }
            return b;
        }
        ΔⲆᐃᐃⲆᐃᐃⲆΔ();
        Ⲇᐃ[1026] = [ⵠⵠ.ⲆΔΔⵠⵠᐃⵠ, ⵠⵠ.ᐃⵠⲆΔᐃΔΔ];
        Ⲇᐃ[1025] = [];
        Ⲇᐃ[1025][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_010_000")] = [ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_010_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_010_000")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_011_000")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_010_000")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_011_010")] = [ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_011_011")] = [ⵠⵠ.ⵠᐃΔⲆⵠΔᐃ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_110_000")] = [ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ⵠⵠⲆᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_110_010")] = [ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆΔᐃΔᐃⲆⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_110_110")] = [ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ΔⵠⲆⵠⵠⵠᐃ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆΔᐃΔᐃⲆⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_111_000")] = [ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_111_111")] = [ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ⵠᐃΔⲆⵠΔᐃ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_010_000")] = [ⵠⵠ.ⵠⵠⲆᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_010_010")] = [ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_011_000")] = [ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ΔⲆⲆΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_000")] = [ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")] = [ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_011_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_011_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_111_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_111_000")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_111_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_111_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_111_110")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_111_111")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_111_110")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("000_111_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_011_000")] = [ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ΔⲆⲆΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_011_010")] = [ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_011_011")] = [ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ⵠᐃΔⲆⵠΔᐃ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_000")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_011_010")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_010")] = [ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_010")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_110")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_010")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("011_111_111")] = [ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⵠᐃΔⲆⵠΔᐃ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_110_000")] = [ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ΔᐃᐃᐃⲆⲆⵠ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_110_010")] = [ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_110_110")] = [ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_000")] = [ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ΔᐃᐃᐃⲆⲆⵠ, ⵠⵠ.ⵠᐃΔⵠΔⵠΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_110")] = [ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ⵠᐃΔⵠΔⵠΔ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_111")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_110")] = [ⵠⵠ.ⲆᐃᐃΔᐃ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ⵠᐃΔⵠΔⵠΔ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_011")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_110")];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_000")] = [ⵠⵠ.ΔᐃᐃᐃⲆⲆⵠ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⵠᐃΔⵠΔⵠΔ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_111")] = [ⵠⵠ.ⵠⲆᐃᐃΔⲆΔ, ⵠⵠ.ⲆΔⵠΔΔ, ⵠⵠ.ΔⲆᐃⵠⲆ, ⵠⵠ.ⵠᐃΔⲆⵠΔᐃ, ⵠⵠ.ⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⵠΔΔⲆ, ⵠⵠ.ΔΔΔⵠⵠ, ⵠⵠ.ᐃⵠⲆΔΔⲆⵠ, ⵠⵠ.ⲆⲆⵠⲆⵠⲆΔ, ⵠⵠ.ᐃΔᐃᐃⵠ, ⵠⵠ.ᐃᐃⲆΔⲆΔᐃ, ⵠⵠ.ΔΔΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔⵠᐃⲆⲆΔ, ⵠⵠ.Ⲇⵠⵠⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆⵠᐃΔ, ⵠⵠ.ⵠΔⲆΔⲆᐃΔ, ⵠⵠ.ⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔΔᐃ, ⵠⵠ.ⲆⲆᐃᐃⵠⵠᐃ, ⵠⵠ.ᐃⲆⵠᐃΔΔⲆ, ⵠⵠ.ⵠⲆΔⵠΔⲆⲆ, ⵠⵠ.ⵠⲆΔΔⵠ, ⵠⵠ.ΔⲆⲆΔᐃ, ⵠⵠ.ⲆᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_010")] = Ⲇᐃ[1025][Pr.ΔᐃΔ][b("111_111_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_010_000")] = [ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ΔⵠᐃⲆΔ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_010_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_010_000")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_011_000")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_010_000")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_011_010")] = [ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_011_011")] = [ⵠⵠ.ⲆⲆΔⲆⲆᐃⵠ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_110_000")] = [ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ΔⵠᐃⲆΔ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_110_010")] = [ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ᐃᐃⵠΔⵠᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_110_110")] = [ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ΔΔⵠⲆⵠᐃⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ᐃᐃⵠΔⵠᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_111_000")] = [ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_111_111")] = [ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ⲆⲆΔⲆⲆᐃⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_010_000")] = [ⵠⵠ.ΔⵠᐃⲆΔ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_010_010")] = [ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_011_000")] = [ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⲆᐃΔΔⵠ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_000")] = [ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")] = [ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_011_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_011_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_111_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_111_000")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_111_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_111_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_111_110")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_111_111")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_111_110")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("000_111_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("010_110_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_011_000")] = [ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⲆᐃΔΔⵠ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_011_010")] = [ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_011_011")] = [ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ⲆⲆΔⲆⲆᐃⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_000")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_011_010")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_010")] = [ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_010")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_110")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_010")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("011_111_111")] = [ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆⲆΔⲆⲆᐃⵠ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_110_000")] = [ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ᐃᐃⲆΔⵠᐃΔ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_110_010")] = [ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_110_110")] = [ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_000")] = [ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ᐃᐃⲆΔⵠᐃΔ, ⵠⵠ.ⲆⵠΔΔⲆⵠΔ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_110")] = [ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ⲆⵠΔΔⲆⵠΔ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_111")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("110_111_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_110")] = [ⵠⵠ.ⵠΔΔᐃⲆ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⵠΔΔⲆⵠΔ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_011")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_110")];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_000")] = [ⵠⵠ.ᐃᐃⲆΔⵠᐃΔ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆⵠΔΔⲆⵠΔ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_111")] = [ⵠⵠ.ᐃᐃΔⲆᐃᐃᐃ, ⵠⵠ.ⲆΔⵠⲆⵠ, ⵠⵠ.ⲆΔΔᐃᐃ, ⵠⵠ.ⲆⲆΔⲆⲆᐃⵠ, ⵠⵠ.ΔⲆᐃⵠΔ, ⵠⵠ.ᐃⵠⲆᐃᐃ, ⵠⵠ.ⵠⵠᐃΔⵠ, ⵠⵠ.ⲆⲆⲆΔⲆΔⵠ, ⵠⵠ.ⲆⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ᐃΔⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃᐃᐃΔᐃ, ⵠⵠ.ᐃⵠΔⲆΔᐃⲆ, ⵠⵠ.ⲆⲆΔⲆⲆᐃᐃ, ⵠⵠ.ⵠⵠΔⲆⵠ, ⵠⵠ.ᐃᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ᐃΔⵠⵠⵠΔᐃ, ⵠⵠ.ΔⵠᐃⲆΔ, ⵠⵠ.ⲆⵠⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃᐃⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⲆΔ, ⵠⵠ.ⵠⲆⲆᐃΔᐃⵠ, ⵠⵠ.ⵠᐃⵠⲆⵠ, ⵠⵠ.ⲆᐃΔΔⵠ, ⵠⵠ.ⵠΔΔᐃⲆ];
        Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_010")] = Ⲇᐃ[1025][Pr.ΔΔⲆ][b("111_111_110")];
        Ⲇᐃ[1024] = [];
        Ⲇᐃ[1024][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_010_000")] = ⵠⵠ.ⵠⵠᐃⲆᐃⲆⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_010_010")] = ⵠⵠ.ⲆⲆᐃⲆᐃⲆᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_011_000")] = ⵠⵠ.ᐃⵠⲆⵠᐃΔⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_011_010")] = ⵠⵠ.ⵠⵠⲆⵠⵠΔⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_011_011")] = ⵠⵠ.ⲆΔᐃᐃⵠⵠⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_110_000")] = ⵠⵠ.ᐃΔΔⵠᐃΔᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_110_010")] = ⵠⵠ.ⵠᐃⲆⵠΔΔΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_110_110")] = ⵠⵠ.ΔⲆΔᐃⲆᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_111_000")] = ⵠⵠ.ⵠΔⲆᐃⵠᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_111_010")] = ⵠⵠ.ᐃΔⲆΔⲆⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_111_011")] = ⵠⵠ.ⲆⵠⵠᐃΔⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_111_110")] = ⵠⵠ.ᐃᐃⲆⵠⲆΔΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("000_111_111")] = ⵠⵠ.ⲆᐃΔⲆᐃⲆΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_010_000")] = ⵠⵠ.ΔⲆΔⵠΔⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_010_010")] = ⵠⵠ.ⵠΔⵠⵠΔᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_011_000")] = ⵠⵠ.ΔⲆᐃⵠΔᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_011_010")] = ⵠⵠ.ⲆⵠⲆᐃⲆᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_011_011")] = ⵠⵠ.ⲆⵠΔⵠΔⲆⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_110_000")] = ⵠⵠ.ⵠᐃⲆᐃⲆᐃΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_110_010")] = ⵠⵠ.ⵠⵠΔⵠⲆⵠΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_110_110")] = ⵠⵠ.ΔᐃⵠⲆΔᐃⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_111_000")] = ⵠⵠ.ΔᐃⵠᐃΔⲆⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_111_010")] = ⵠⵠ.ⲆᐃⵠΔᐃΔⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_111_011")] = ⵠⵠ.ⲆΔΔⵠⵠᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_111_110")] = ⵠⵠ.ᐃⲆᐃⲆΔⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("010_111_111")] = ⵠⵠ.ⲆᐃⲆⵠᐃᐃΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_011_000")] = ⵠⵠ.ⲆⲆΔⲆⲆⲆⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_011_010")] = ⵠⵠ.ⲆⲆⲆΔΔⲆⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_011_011")] = ⵠⵠ.ΔᐃᐃᐃⲆᐃⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_111_000")] = ⵠⵠ.ⲆᐃΔⲆⲆⲆᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_111_010")] = ⵠⵠ.ⵠⲆⵠⲆᐃΔΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_111_011")] = ⵠⵠ.ΔΔⵠⲆᐃⲆᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_111_110")] = ⵠⵠ.ⲆⵠⲆⲆᐃⵠᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("011_111_111")] = ⵠⵠ.ΔⲆⲆⵠΔⵠᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_110_000")] = ⵠⵠ.ⵠⵠⲆᐃⵠⲆⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_110_010")] = ⵠⵠ.ⵠⲆΔᐃᐃᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_110_110")] = ⵠⵠ.ᐃᐃⵠᐃⲆⵠΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_111_000")] = ⵠⵠ.ᐃⵠᐃᐃΔⲆⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_111_010")] = ⵠⵠ.ⵠΔᐃᐃᐃᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_111_011")] = ⵠⵠ.ⵠⵠᐃⵠⵠⵠⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_111_110")] = ⵠⵠ.ⵠᐃᐃΔΔᐃⵠ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("110_111_111")] = ⵠⵠ.ΔᐃᐃⵠΔⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_011")] = ⵠⵠ.ⲆΔⵠⲆⵠⵠΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_110")] = ⵠⵠ.ᐃⵠⵠΔΔⲆΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_011")] = ⵠⵠ.ⲆΔⵠⲆⵠⵠΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_000")] = ⵠⵠ.ΔⲆⵠⵠΔΔⲆ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_111")] = ⵠⵠ.ⵠⵠΔⲆΔⵠΔ;
        Ⲇᐃ[1024][Pr.ΔᐃΔ][b("111_111_010")] = ⵠⵠ.ⵠᐃⲆⵠⵠⵠᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_010_000")] = ⵠⵠ.ⵠⵠΔⵠⲆᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_010_010")] = ⵠⵠ.ⲆⲆⲆᐃⵠⲆᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_011_000")] = ⵠⵠ.ⵠⵠⵠᐃΔᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_011_010")] = ⵠⵠ.ΔᐃΔᐃⲆΔⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_011_011")] = ⵠⵠ.ᐃⵠⲆᐃⵠΔⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_110_000")] = ⵠⵠ.ΔΔᐃⵠⵠⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_110_010")] = ⵠⵠ.ᐃᐃΔⵠᐃᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_110_110")] = ⵠⵠ.ⲆᐃⵠⵠⵠΔΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_111_000")] = ⵠⵠ.ⲆΔΔΔΔΔᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_111_010")] = ⵠⵠ.ⲆᐃΔⲆΔⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_111_011")] = ⵠⵠ.ᐃᐃⲆⵠᐃΔΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_111_110")] = ⵠⵠ.ⵠⲆᐃΔⲆΔⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("000_111_111")] = ⵠⵠ.ⵠΔⵠⵠΔᐃⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_010_000")] = ⵠⵠ.ΔⲆⲆᐃⵠᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_010_010")] = ⵠⵠ.ⵠⵠᐃⵠⲆΔΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_011_000")] = ⵠⵠ.ᐃΔⲆᐃΔΔⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_011_010")] = ⵠⵠ.ⲆΔᐃⵠⵠⵠⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_011_011")] = ⵠⵠ.ⲆⲆΔΔⵠΔⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_110_000")] = ⵠⵠ.ΔⲆΔⲆᐃᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_110_010")] = ⵠⵠ.ᐃⵠⲆⲆΔⲆΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_110_110")] = ⵠⵠ.ⲆᐃⲆⵠⵠⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_111_000")] = ⵠⵠ.ᐃᐃΔⵠᐃⲆⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_111_010")] = ⵠⵠ.ΔΔⲆⲆⲆⲆᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_111_011")] = ⵠⵠ.ⲆΔⵠΔⲆⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_111_110")] = ⵠⵠ.ⲆΔⵠⵠⲆᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("010_111_111")] = ⵠⵠ.ΔΔⵠⲆⵠᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_011_000")] = ⵠⵠ.ᐃΔᐃΔᐃⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_011_010")] = ⵠⵠ.ⵠΔᐃᐃΔⵠᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_011_011")] = ⵠⵠ.ⲆΔⲆᐃⵠΔⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_111_000")] = ⵠⵠ.ᐃᐃΔᐃΔᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_111_010")] = ⵠⵠ.ΔᐃΔⲆᐃⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_111_011")] = ⵠⵠ.ⲆⲆᐃⵠⵠⵠⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_111_110")] = ⵠⵠ.ⲆᐃⲆᐃΔΔⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("011_111_111")] = ⵠⵠ.ⲆⵠⵠⵠⲆᐃΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_110_000")] = ⵠⵠ.ᐃⵠΔⵠⲆᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_110_010")] = ⵠⵠ.ⲆᐃⵠᐃⲆᐃⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_110_110")] = ⵠⵠ.ᐃᐃⲆᐃΔΔⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_111_000")] = ⵠⵠ.ΔΔΔⵠⵠᐃᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_111_010")] = ⵠⵠ.ⵠⵠⲆⲆᐃⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_111_011")] = ⵠⵠ.ᐃΔΔᐃⵠⵠⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_111_110")] = ⵠⵠ.ᐃᐃᐃΔᐃΔⲆ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("110_111_111")] = ⵠⵠ.ᐃᐃⵠΔΔⵠⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_011")] = ⵠⵠ.ⲆⵠⲆⵠⵠⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_110")] = ⵠⵠ.ᐃⲆⲆΔΔΔᐃ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_011")] = ⵠⵠ.ⲆⵠⲆⵠⵠⵠΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_000")] = ⵠⵠ.ᐃⲆⲆⲆΔᐃⵠ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_111")] = ⵠⵠ.ΔⵠᐃⲆⵠⲆΔ;
        Ⲇᐃ[1024][Pr.ΔΔⲆ][b("111_111_010")] = ⵠⵠ.ᐃᐃᐃⲆΔᐃⵠ;
        Ⲇᐃ[32] = [];
        Ⲇᐃ[32][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⵠⲆᐃⵠΔ;
        Ⲇᐃ[32][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔᐃⵠᐃᐃᐃ;
        Ⲇᐃ[205] = [];
        Ⲇᐃ[205][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠⵠⲆᐃᐃⲆ;
        Ⲇᐃ[205][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆΔⵠᐃⲆⲆ;
        Ⲇᐃ[957] = [];
        Ⲇᐃ[957][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆΔΔⲆᐃᐃ;
        Ⲇᐃ[957][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆΔⵠᐃΔᐃ;
        Ⲇᐃ[207] = [];
        Ⲇᐃ[207][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔⵠᐃΔⲆ;
        Ⲇᐃ[207][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⲆΔⵠⲆⲆ;
        Ⲇᐃ[954] = [];
        Ⲇᐃ[954][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔᐃⲆⵠⵠᐃ;
        Ⲇᐃ[954][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃΔⵠⲆⵠᐃ;
        Ⲇᐃ[958] = [];
        Ⲇᐃ[958][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔⵠⵠⲆΔΔ;
        Ⲇᐃ[958][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⲆΔᐃⵠᐃ;
        Ⲇᐃ[209] = [];
        Ⲇᐃ[209][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⵠⵠᐃΔᐃ;
        Ⲇᐃ[209][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆΔᐃⵠᐃΔ;
        Ⲇᐃ[971] = [];
        Ⲇᐃ[971][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠᐃⲆᐃΔⵠ;
        Ⲇᐃ[971][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆΔᐃⵠⵠΔ;
        Ⲇᐃ[211] = [];
        Ⲇᐃ[211][Pr.ΔᐃΔ] = ⵠⵠ.ΔᐃᐃΔⵠⲆⵠ;
        Ⲇᐃ[211][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆΔⵠⵠⲆ;
        Ⲇᐃ[986] = [];
        Ⲇᐃ[986][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔᐃΔⲆⲆᐃ;
        Ⲇᐃ[986][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔᐃΔⲆΔⵠ;
        Ⲇᐃ[989] = [];
        Ⲇᐃ[989][Pr.ΔᐃΔ] = [ⵠⵠ.ᐃΔⵠΔΔΔΔ];
        Ⲇᐃ[989][Pr.ΔΔⲆ] = [ⵠⵠ.ⲆᐃᐃΔⲆⵠᐃ];
        Ⲇᐃ[217] = [];
        Ⲇᐃ[217][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔⵠⵠⲆΔᐃ;
        Ⲇᐃ[217][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆᐃᐃᐃⲆⲆ;
        Ⲇᐃ[219] = [];
        Ⲇᐃ[219][Pr.ΔᐃΔ] = ⵠⵠ.ΔᐃⲆⵠⲆⵠⲆ;
        Ⲇᐃ[219][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⲆⲆᐃⲆᐃ;
        Ⲇᐃ[218] = [];
        Ⲇᐃ[218][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆⵠⲆⲆΔΔ;
        Ⲇᐃ[218][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆᐃΔᐃⲆⲆ;
        Ⲇᐃ[212] = [];
        Ⲇᐃ[212][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔᐃⵠᐃΔᐃ;
        Ⲇᐃ[212][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⲆⵠⲆⲆΔ;
        Ⲇᐃ[213] = [];
        Ⲇᐃ[213][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⲆΔⵠⵠΔ;
        Ⲇᐃ[213][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃᐃⲆⲆⵠΔ;
        Ⲇᐃ[214] = [];
        Ⲇᐃ[214][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆᐃⲆⲆᐃΔ;
        Ⲇᐃ[214][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔΔᐃΔᐃᐃ;
        Ⲇᐃ[215] = [];
        Ⲇᐃ[215][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔⵠᐃⵠⲆ;
        Ⲇᐃ[215][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⲆⲆⵠΔΔ;
        Ⲇᐃ[216] = [];
        Ⲇᐃ[216][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆⵠⵠᐃΔΔ;
        Ⲇᐃ[216][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔΔᐃⲆⲆⲆ;
        Ⲇᐃ[220] = [];
        Ⲇᐃ[220][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠⵠᐃⵠᐃⲆ;
        Ⲇᐃ[220][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃⲆⵠΔⲆΔ;
        Ⲇᐃ[1020] = [];
        Ⲇᐃ[1020][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⲆᐃᐃᐃⲆ;
        Ⲇᐃ[1020][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⵠⲆⵠⵠᐃ;
        Ⲇᐃ[1021] = [];
        Ⲇᐃ[1021][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔΔᐃΔᐃⲆ;
        Ⲇᐃ[1021][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⵠⵠᐃⵠⲆ;
        Ⲇᐃ[39] = [];
        Ⲇᐃ[39][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⵠᐃⵠᐃⲆ;
        Ⲇᐃ[39][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆΔᐃⵠⵠⲆ;
        Ⲇᐃ[1022] = ⵠⵠ.ⲆΔⲆᐃⵠⲆⵠ;
        Ⲇᐃ[1023] = ⵠⵠ.ΔⵠᐃⵠⲆᐃᐃ;
        Ⲇᐃ[1041] = [];
        Ⲇᐃ[1041][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[1041][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[1041][Pr.ΔᐃΔ].push(ⵠⵠ.ΔⵠᐃᐃⲆΔᐃ);
        Ⲇᐃ[1041][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⵠΔⲆᐃⵠⵠ);
        Ⲇᐃ[1041][Pr.ΔᐃΔ].push(ⵠⵠ.ΔΔΔΔⵠΔⵠ);
        Ⲇᐃ[1041][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃᐃᐃⲆⲆΔΔ);
        Ⲇᐃ[1041][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠΔΔⲆᐃΔΔ);
        Ⲇᐃ[1041][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⲆΔΔⲆⵠⲆ);
        Ⲇᐃ[244] = [];
        Ⲇᐃ[244][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[244][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[244][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆᐃⲆⲆΔⵠᐃ);
        Ⲇᐃ[244][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆⲆⵠⵠΔΔᐃ);
        Ⲇᐃ[244][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃΔᐃⵠᐃᐃⲆ);
        Ⲇᐃ[244][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠΔᐃᐃᐃΔⲆ);
        Ⲇᐃ[244][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⲆⵠᐃⲆᐃΔ);
        Ⲇᐃ[244][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃᐃⲆⲆΔⲆⲆ);
        Ⲇᐃ[1052] = [];
        Ⲇᐃ[1052][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[1052][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[1052][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆΔΔⵠⲆⵠⵠ);
        Ⲇᐃ[1052][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⵠⲆΔⵠⲆᐃ);
        Ⲇᐃ[1052][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆᐃⵠⵠⵠⲆⵠ);
        Ⲇᐃ[1052][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⵠᐃⵠᐃΔΔ);
        Ⲇᐃ[1052][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⲆⵠΔᐃΔᐃ);
        Ⲇᐃ[1052][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃᐃⲆⵠⲆⵠⵠ);
        Ⲇᐃ[1052][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆⵠⵠⵠΔᐃⲆ);
        Ⲇᐃ[1052][Pr.ΔΔⲆ].push(ⵠⵠ.ΔΔⲆⵠᐃⲆΔ);
        Ⲇᐃ[1052][Pr.ΔΔⲆ].push(ⵠⵠ.ΔΔᐃⵠΔᐃⲆ);
        Ⲇᐃ[1052][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃΔΔᐃⵠΔⲆ);
        Ⲇᐃ[450] = [];
        Ⲇᐃ[450][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔΔΔΔⵠⵠ;
        Ⲇᐃ[450][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔⵠⲆⵠⲆⲆ;
        Ⲇᐃ[453] = [];
        Ⲇᐃ[453][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⵠᐃⲆⵠⲆ;
        Ⲇᐃ[453][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⵠᐃⵠᐃᐃ;
        Ⲇᐃ[454] = [];
        Ⲇᐃ[454][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔⵠⵠΔᐃ;
        Ⲇᐃ[454][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⵠⲆᐃⲆⲆ;
        Ⲇᐃ[464] = ⵠⵠ.ᐃᐃⵠⲆᐃⲆⲆ;
        Ⲇᐃ[468] = ⵠⵠ.ⵠΔΔᐃΔⲆᐃ;
        Ⲇᐃ[469] = ⵠⵠ.ⵠΔΔⵠⵠⲆⵠ;
        Ⲇᐃ[20] = [];
        Ⲇᐃ[20][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆᐃΔᐃⲆⲆ;
        Ⲇᐃ[20][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆⵠᐃⵠⲆᐃ;
        Ⲇᐃ[920] = [];
        Ⲇᐃ[920][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃᐃΔΔᐃᐃ;
        Ⲇᐃ[920][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃⲆΔⲆⲆ;
        Ⲇᐃ[21] = [];
        Ⲇᐃ[21][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆᐃⵠΔΔⵠ;
        Ⲇᐃ[21][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠⵠΔⵠΔᐃ;
        Ⲇᐃ[924] = [];
        Ⲇᐃ[924][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃᐃΔΔᐃᐃ;
        Ⲇᐃ[924][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃⲆΔⲆⲆ;
        Ⲇᐃ[44] = [];
        Ⲇᐃ[44][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆᐃⲆΔᐃⲆ;
        Ⲇᐃ[44][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆⲆⲆⵠⲆΔ;
        Ⲇᐃ[19] = [];
        Ⲇᐃ[19][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⲆΔᐃΔΔ;
        Ⲇᐃ[19][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⲆΔⵠΔⲆ;
        Ⲇᐃ[34] = [];
        Ⲇᐃ[34][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔᐃⵠⲆⲆΔ;
        Ⲇᐃ[34][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔᐃΔΔⲆᐃ;
        Ⲇᐃ[17] = [];
        Ⲇᐃ[17][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆⵠΔᐃⵠⵠ;
        Ⲇᐃ[17][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔΔⲆᐃⲆΔ;
        Ⲇᐃ[63] = [];
        Ⲇᐃ[63][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⲆⵠΔᐃᐃ;
        Ⲇᐃ[63][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆᐃⵠⵠⲆᐃ;
        Ⲇᐃ[60] = [];
        Ⲇᐃ[60][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⵠⲆⵠᐃⵠ;
        Ⲇᐃ[60][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⲆᐃΔᐃᐃ;
        Ⲇᐃ[94] = [];
        Ⲇᐃ[94][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆⲆⲆᐃΔⲆⲆⵠ;
        Ⲇᐃ[94][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⲆⲆΔΔⲆⲆⵠ;
        Ⲇᐃ[95] = [];
        Ⲇᐃ[95][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆⲆᐃⵠᐃⲆᐃΔ;
        Ⲇᐃ[95][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠⲆⲆᐃⲆΔᐃⲆ;
        Ⲇᐃ[96] = [];
        Ⲇᐃ[96][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔᐃⲆⲆⲆᐃⲆⲆ;
        Ⲇᐃ[96][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⵠⲆⵠᐃΔⲆΔ;
        Ⲇᐃ[97] = [];
        Ⲇᐃ[97][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔᐃⵠΔΔⵠⲆᐃ;
        Ⲇᐃ[97][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆᐃΔⲆⵠⲆⵠⲆ;
        Ⲇᐃ[98] = [];
        Ⲇᐃ[98][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆⲆⵠᐃⲆⵠᐃⵠ;
        Ⲇᐃ[98][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃΔⵠᐃᐃΔⵠ;
        Ⲇᐃ[99] = [];
        Ⲇᐃ[99][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆⵠⵠⵠΔΔΔⲆ;
        Ⲇᐃ[99][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠᐃⵠᐃⵠⲆΔⵠ;
        Ⲇᐃ[90] = [];
        Ⲇᐃ[90][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⲆⵠΔᐃⵠ;
        Ⲇᐃ[90][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔⵠⵠⵠΔΔ;
        Ⲇᐃ[91] = [];
        Ⲇᐃ[91][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆΔᐃᐃΔⲆ;
        Ⲇᐃ[91][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆⵠⵠⲆΔⲆ;
        Ⲇᐃ[71] = [];
        Ⲇᐃ[71][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆΔⵠⲆᐃᐃⵠΔ;
        Ⲇᐃ[71][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠⲆΔᐃᐃⵠⲆⵠ;
        Ⲇᐃ[72] = [];
        Ⲇᐃ[72][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠⵠⲆⵠⵠⵠᐃⵠ;
        Ⲇᐃ[72][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃᐃΔᐃᐃⵠⲆⲆ;
        Ⲇᐃ[73] = [];
        Ⲇᐃ[73][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⲆⲆⵠΔⵠⲆⲆ;
        Ⲇᐃ[73][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆΔⵠΔⲆⲆⵠ;
        Ⲇᐃ[74] = [];
        Ⲇᐃ[74][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔΔΔⵠΔⵠᐃᐃ;
        Ⲇᐃ[74][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆΔᐃⲆᐃᐃΔⲆ;
        Ⲇᐃ[75] = [];
        Ⲇᐃ[75][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃΔΔⵠᐃᐃⵠⲆ;
        Ⲇᐃ[75][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⵠᐃΔⵠΔᐃⵠⵠ;
        Ⲇᐃ[76] = [];
        Ⲇᐃ[76][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆΔΔᐃⵠⲆΔᐃ;
        Ⲇᐃ[76][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆⵠⵠⵠⲆⲆΔ;
        Ⲇᐃ[101] = [];
        Ⲇᐃ[101][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠⵠΔᐃΔΔ;
        Ⲇᐃ[101][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃᐃⲆⵠⲆⲆ;
        Ⲇᐃ[64] = [];
        Ⲇᐃ[64][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆⵠᐃΔΔⵠ;
        Ⲇᐃ[64][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔᐃⵠΔⲆⲆ;
        Ⲇᐃ[102] = [];
        Ⲇᐃ[102][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠᐃⲆⵠΔΔ;
        Ⲇᐃ[102][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⵠΔⲆΔⵠ;
        Ⲇᐃ[65] = [];
        Ⲇᐃ[65][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⵠⵠⵠΔΔ;
        Ⲇᐃ[65][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃΔⲆᐃⵠΔ;
        Ⲇᐃ[103] = [];
        Ⲇᐃ[103][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔΔⲆᐃᐃ;
        Ⲇᐃ[103][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔΔΔΔⲆΔ;
        Ⲇᐃ[66] = [];
        Ⲇᐃ[66][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃΔⲆⲆⲆΔ;
        Ⲇᐃ[66][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔⲆⵠⵠⵠⵠ;
        Ⲇᐃ[104] = [];
        Ⲇᐃ[104][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔΔⵠⲆⲆΔ;
        Ⲇᐃ[104][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃΔⲆⲆᐃ;
        Ⲇᐃ[67] = [];
        Ⲇᐃ[67][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⲆᐃⲆⲆⲆ;
        Ⲇᐃ[67][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠᐃⲆᐃⲆⲆ;
        Ⲇᐃ[105] = [];
        Ⲇᐃ[105][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔΔⵠⵠⲆᐃ;
        Ⲇᐃ[105][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⵠᐃⵠⵠᐃ;
        Ⲇᐃ[68] = [];
        Ⲇᐃ[68][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆΔⲆᐃⵠⲆΔᐃ;
        Ⲇᐃ[68][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠΔΔᐃⲆⵠᐃⲆ;
        Ⲇᐃ[106] = [];
        Ⲇᐃ[106][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔᐃΔⲆΔⵠ;
        Ⲇᐃ[106][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⵠⵠⲆᐃᐃᐃⲆ;
        Ⲇᐃ[69] = [];
        Ⲇᐃ[69][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆᐃᐃᐃᐃᐃⲆⵠ;
        Ⲇᐃ[69][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃΔⲆᐃⲆΔⲆⲆ;
        Ⲇᐃ[107] = [];
        Ⲇᐃ[107][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔⲆⵠΔᐃΔ;
        Ⲇᐃ[107][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠⵠⲆΔΔⵠ;
        Ⲇᐃ[70] = [];
        Ⲇᐃ[70][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆΔⵠᐃᐃΔⵠⵠ;
        Ⲇᐃ[70][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⵠᐃⲆΔⲆⵠᐃⵠ;
        Ⲇᐃ[80] = [];
        Ⲇᐃ[80][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆΔⲆⲆⲆΔ;
        Ⲇᐃ[80][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⲆⲆⲆⲆⵠ;
        Ⲇᐃ[81] = [];
        Ⲇᐃ[81][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⵠᐃᐃᐃΔ;
        Ⲇᐃ[81][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆᐃΔⵠΔ;
        Ⲇᐃ[22] = [];
        Ⲇᐃ[22][Pr.ΔᐃΔ] = ⵠⵠ.ⲆᐃⵠΔⵠΔⵠ;
        Ⲇᐃ[22][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠᐃⵠⵠⵠⲆ;
        Ⲇᐃ[928] = [];
        Ⲇᐃ[928][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠΔᐃⲆⲆΔ;
        Ⲇᐃ[928][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⵠᐃⵠΔᐃ;
        Ⲇᐃ[935] = [];
        Ⲇᐃ[935][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[935][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[935][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠᐃᐃᐃΔᐃⵠΔΔ);
        Ⲇᐃ[935][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆᐃⲆⵠⲆⵠΔⵠⵠ);
        Ⲇᐃ[935][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆᐃⲆⵠⲆⵠΔⵠⵠ);
        Ⲇᐃ[935][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⵠⵠᐃᐃⲆᐃᐃᐃ);
        Ⲇᐃ[941] = [];
        Ⲇᐃ[941][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[941][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[941][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⲆΔⵠᐃᐃⲆ);
        Ⲇᐃ[941][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⲆⵠΔᐃⵠⵠ);
        Ⲇᐃ[941][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⵠΔⲆⲆⲆⲆ);
        Ⲇᐃ[941][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⲆⲆⲆΔΔⵠ);
        Ⲇᐃ[941][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⲆⵠⲆⲆΔⵠ);
        Ⲇᐃ[941][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠᐃⲆⲆⲆᐃⵠ);
        Ⲇᐃ[53] = [];
        Ⲇᐃ[53][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠΔΔⲆⲆⲆ;
        Ⲇᐃ[53][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃⵠᐃᐃⲆ;
        Ⲇᐃ[54] = [];
        Ⲇᐃ[54][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠᐃᐃᐃⵠⲆ;
        Ⲇᐃ[54][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆΔΔᐃᐃⲆ;
        Ⲇᐃ[241] = [];
        Ⲇᐃ[241][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[241][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[241][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠᐃΔⲆΔᐃⵠ);
        Ⲇᐃ[241][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⵠᐃⲆⵠΔᐃ);
        Ⲇᐃ[241][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆⵠᐃⲆᐃⲆΔ);
        Ⲇᐃ[241][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃᐃΔᐃⲆΔΔ);
        Ⲇᐃ[241][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠΔΔⵠᐃᐃΔ);
        Ⲇᐃ[241][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠⵠⵠΔᐃᐃⵠ);
        Ⲇᐃ[202] = [];
        Ⲇᐃ[202][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[202][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[202][Pr.ΔᐃΔ].push(ⵠⵠ.ΔⵠᐃΔⲆⵠΔ);
        Ⲇᐃ[202][Pr.ΔᐃΔ].push(ⵠⵠ.ΔᐃⲆᐃᐃᐃΔ);
        Ⲇᐃ[202][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆⲆⵠΔᐃⲆⵠ);
        Ⲇᐃ[202][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠⵠⲆᐃΔⲆΔ);
        Ⲇᐃ[202][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⵠᐃᐃⵠⲆⲆ);
        Ⲇᐃ[202][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠᐃᐃᐃⵠΔᐃ);
        Ⲇᐃ[203] = [];
        Ⲇᐃ[203][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[203][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ΔᐃⲆⵠᐃⲆᐃ);
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆⲆⲆᐃⵠⲆΔ);
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⵠΔⲆⵠⲆᐃ);
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆΔΔⵠⲆⲆⵠ);
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⵠᐃⵠⲆᐃᐃ);
        Ⲇᐃ[203][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⵠΔⵠⵠⵠⲆ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆⵠΔΔⵠⵠⵠ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.Δⵠⵠᐃⵠᐃᐃ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⵠᐃⵠΔⲆⵠ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.ΔᐃΔⲆΔⵠⵠ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠⲆⵠΔⵠΔᐃ);
        Ⲇᐃ[203][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⵠⵠΔᐃᐃΔ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ] = [];
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ΔᐃⵠⵠⲆⵠᐃ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⵠⵠΔⵠⲆΔ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆΔⵠΔΔⵠΔ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ΔⵠⲆⵠᐃⲆΔ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ΔΔⲆᐃⵠΔⲆ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃⲆⲆⵠΔΔⵠ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⲆⲆᐃⵠΔⲆ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆⲆⲆΔΔⵠᐃ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠΔᐃⲆΔᐃᐃ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠΔⲆΔᐃΔᐃ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠⲆΔⲆΔⲆᐃ);
        Ⲇᐃ[Pr.ΔⲆⲆⵠⲆ][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃΔⵠΔᐃΔⵠ);
        Ⲇᐃ[918] = [];
        Ⲇᐃ[918][Pr.ΔᐃΔ] = ⵠⵠ.ΔᐃⲆΔⲆⵠᐃ;
        Ⲇᐃ[918][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠⲆᐃⵠᐃⵠ;
        Ⲇᐃ[919] = ⵠⵠ.ΔΔⵠⲆⵠⵠΔ;
        Ⲇᐃ[56] = [];
        Ⲇᐃ[56][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆΔⵠⲆⲆⲆⲆⵠ;
        Ⲇᐃ[56][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔΔᐃΔⲆⵠᐃⵠ;
        Ⲇᐃ[223] = [];
        Ⲇᐃ[223][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠⲆⲆΔΔⲆ;
        Ⲇᐃ[223][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆᐃᐃⲆΔⵠ;
        Ⲇᐃ[224] = [];
        Ⲇᐃ[224][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠΔⲆᐃⲆⵠ;
        Ⲇᐃ[224][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠᐃᐃᐃΔᐃ;
        Ⲇᐃ[236] = [];
        Ⲇᐃ[236][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆⲆΔΔⲆⵠ;
        Ⲇᐃ[236][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⲆᐃⵠᐃⵠ;
        Ⲇᐃ[1033] = [];
        Ⲇᐃ[1033][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔⵠᐃᐃᐃⵠ;
        Ⲇᐃ[1033][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆΔⲆⵠΔΔ;
        Ⲇᐃ[1034] = ⵠⵠ.ΔⲆΔΔΔⲆⵠ;
        Ⲇᐃ[1150] = [];
        Ⲇᐃ[1150][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆᐃⲆᐃⵠⲆ;
        Ⲇᐃ[1150][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆᐃΔⲆᐃᐃ;
        Ⲇᐃ[1152] = [];
        Ⲇᐃ[1152][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠᐃⲆᐃⲆᐃ;
        Ⲇᐃ[1152][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠΔᐃⲆⲆⲆ;
        Ⲇᐃ[1149] = ⵠⵠ.ⵠⲆⵠⵠᐃⵠⵠ;
        Ⲇᐃ[1151] = ⵠⵠ.ᐃΔᐃᐃΔⵠⲆ;
        Ⲇᐃ[1153] = ⵠⵠ.ΔΔᐃΔᐃⵠΔ;
        Ⲇᐃ[1143] = [];
        Ⲇᐃ[1143][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔᐃΔᐃⵠΔ;
        Ⲇᐃ[1143][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠⵠⲆΔⲆⵠ;
        Ⲇᐃ[1145] = [];
        Ⲇᐃ[1145][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔᐃΔΔΔᐃ;
        Ⲇᐃ[1145][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃᐃᐃᐃᐃⲆ;
        Ⲇᐃ[1146] = [];
        Ⲇᐃ[1146][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔΔᐃᐃᐃⲆ;
        Ⲇᐃ[1146][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔⲆⵠᐃⵠⲆ;
        Ⲇᐃ[1144] = ⵠⵠ.ⵠᐃΔⲆⲆΔⵠ;
        Ⲇᐃ[1148] = ⵠⵠ.ⲆΔⵠⲆᐃⲆᐃ;
        Ⲇᐃ[1147] = ⵠⵠ.ᐃⲆᐃᐃᐃᐃⲆ;
        Ⲇᐃ[1053] = [];
        Ⲇᐃ[1053][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆⵠΔᐃⵠⵠ;
        Ⲇᐃ[1053][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⵠⵠⲆⲆᐃ;
        Ⲇᐃ[1055] = [];
        Ⲇᐃ[1055][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠᐃΔⲆΔⵠ;
        Ⲇᐃ[1055][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃᐃᐃⵠⲆ;
        Ⲇᐃ[231] = [];
        Ⲇᐃ[231][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠⵠᐃⲆⵠᐃ;
        Ⲇᐃ[231][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔⵠΔⵠΔⵠ;
        Ⲇᐃ[1060] = [];
        Ⲇᐃ[1060][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠᐃⵠⲆᐃⲆ;
        Ⲇᐃ[1060][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆΔᐃⲆⲆ;
        Ⲇᐃ[1063] = [];
        Ⲇᐃ[1063][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⵠⲆⵠΔΔ;
        Ⲇᐃ[1063][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⵠΔΔᐃⲆ;
        Ⲇᐃ[1059] = [];
        Ⲇᐃ[1059][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠᐃⲆᐃΔΔ;
        Ⲇᐃ[1059][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃᐃᐃⵠⵠΔ;
        Ⲇᐃ[1062] = [];
        Ⲇᐃ[1062][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃΔⲆⵠⲆᐃ;
        Ⲇᐃ[1062][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠΔᐃᐃⵠⵠ;
        Ⲇᐃ[1056] = ⵠⵠ.ⲆⲆⲆᐃᐃΔΔ;
        Ⲇᐃ[1057] = ⵠⵠ.ᐃⲆⲆᐃᐃⲆⲆ;
        Ⲇᐃ[1058] = ⵠⵠ.ᐃⲆⲆⲆΔᐃΔ;
        Ⲇᐃ[1065] = ⵠⵠ.ⲆⵠᐃⵠⵠⲆⲆ;
        Ⲇᐃ[1066] = ⵠⵠ.ⲆΔⵠΔⲆⲆⲆ;
        Ⲇᐃ[1067] = ⵠⵠ.ⲆᐃΔⵠᐃⵠⲆ;
        Ⲇᐃ[1222] = [];
        Ⲇᐃ[1222][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆΔᐃᐃⲆᐃ;
        Ⲇᐃ[1222][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃⲆⵠᐃΔⲆ;
        Ⲇᐃ[248] = [];
        Ⲇᐃ[248][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⲆⲆⲆⵠⵠ;
        Ⲇᐃ[248][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⲆᐃᐃⲆᐃ;
        Ⲇᐃ[1218] = [];
        Ⲇᐃ[1218][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔⵠⵠΔΔ;
        Ⲇᐃ[1218][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠⵠⵠⲆΔᐃ;
        Ⲇᐃ[1221] = [];
        Ⲇᐃ[1221][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⵠⵠⲆᐃⵠ;
        Ⲇᐃ[1221][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠΔⵠΔᐃⵠ;
        Ⲇᐃ[1223] = ⵠⵠ.ΔⲆⵠΔΔᐃΔ;
        Ⲇᐃ[1219] = ⵠⵠ.ⲆⲆⵠⵠᐃⲆⲆ;
        Ⲇᐃ[1068] = [];
        Ⲇᐃ[1068][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔⲆⵠⲆΔⲆ;
        Ⲇᐃ[1068][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃⲆⵠⵠᐃᐃ;
        Ⲇᐃ[232] = [];
        Ⲇᐃ[232][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔⲆⲆⲆΔ;
        Ⲇᐃ[232][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⵠᐃΔⵠΔ;
        Ⲇᐃ[1070] = [];
        Ⲇᐃ[1070][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⵠΔⵠᐃᐃ;
        Ⲇᐃ[1070][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔΔᐃⲆΔᐃ;
        Ⲇᐃ[1072] = [];
        Ⲇᐃ[1072][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⵠΔΔΔᐃ;
        Ⲇᐃ[1072][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠᐃᐃⵠⵠΔ;
        Ⲇᐃ[1075] = [];
        Ⲇᐃ[1075][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔᐃᐃⵠⲆⵠ;
        Ⲇᐃ[1075][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⲆΔⵠⵠΔ;
        Ⲇᐃ[1071] = [];
        Ⲇᐃ[1071][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠⵠⲆΔⵠΔ;
        Ⲇᐃ[1071][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃᐃⲆⲆⲆⲆ;
        Ⲇᐃ[1074] = [];
        Ⲇᐃ[1074][Pr.ΔᐃΔ] = ⵠⵠ.ⲆᐃⲆᐃΔᐃⲆ;
        Ⲇᐃ[1074][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⵠᐃΔⲆⵠ;
        Ⲇᐃ[1073] = [];
        Ⲇᐃ[1073][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠᐃⲆᐃᐃⵠ;
        Ⲇᐃ[1073][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⵠⵠⵠᐃΔ;
        Ⲇᐃ[1076] = [];
        Ⲇᐃ[1076][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔⵠΔΔᐃⲆ;
        Ⲇᐃ[1076][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔᐃⵠⵠⵠⵠ;
        Ⲇᐃ[1077] = ⵠⵠ.ⲆᐃⲆⵠᐃᐃᐃ;
        Ⲇᐃ[1078] = ⵠⵠ.ⵠΔᐃⵠⵠⵠΔ;
        Ⲇᐃ[1079] = ⵠⵠ.ΔⲆΔⵠⲆᐃΔ;
        Ⲇᐃ[1083] = [];
        Ⲇᐃ[1083][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠᐃᐃⲆΔⵠ;
        Ⲇᐃ[1083][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⵠⲆⲆⵠⲆ;
        Ⲇᐃ[233] = [];
        Ⲇᐃ[233][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠΔᐃΔᐃᐃ;
        Ⲇᐃ[233][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆΔΔⲆᐃⲆ;
        Ⲇᐃ[1085] = [];
        Ⲇᐃ[1085][Pr.ΔᐃΔ] = ⵠⵠ.ⲆᐃΔⵠⵠⵠΔ;
        Ⲇᐃ[1085][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔΔΔⵠᐃⵠ;
        Ⲇᐃ[1087] = [];
        Ⲇᐃ[1087][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠᐃΔⲆⵠΔ;
        Ⲇᐃ[1087][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆΔᐃΔⵠΔ;
        Ⲇᐃ[1090] = [];
        Ⲇᐃ[1090][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⵠᐃⲆΔⵠ;
        Ⲇᐃ[1090][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃⲆΔᐃΔⲆ;
        Ⲇᐃ[1086] = [];
        Ⲇᐃ[1086][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠΔⵠⲆⵠΔ;
        Ⲇᐃ[1086][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔᐃΔᐃⲆᐃ;
        Ⲇᐃ[1089] = [];
        Ⲇᐃ[1089][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔΔΔⵠⲆⵠ;
        Ⲇᐃ[1089][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⵠⵠΔⵠⲆ;
        Ⲇᐃ[1088] = [];
        Ⲇᐃ[1088][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠⵠΔᐃⵠᐃ;
        Ⲇᐃ[1088][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔᐃⲆⵠⲆⲆ;
        Ⲇᐃ[1091] = [];
        Ⲇᐃ[1091][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆᐃᐃⲆΔⲆ;
        Ⲇᐃ[1091][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔΔΔⲆΔᐃ;
        Ⲇᐃ[1092] = ⵠⵠ.ΔⲆΔⲆᐃΔᐃ;
        Ⲇᐃ[1093] = ⵠⵠ.ΔⲆⵠⵠᐃⵠΔ;
        Ⲇᐃ[1094] = ⵠⵠ.ⲆⲆⲆᐃⵠΔΔ;
        Ⲇᐃ[1098] = [];
        Ⲇᐃ[1098][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔⲆᐃᐃΔ;
        Ⲇᐃ[1098][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⵠΔⲆⲆΔ;
        Ⲇᐃ[235] = [];
        Ⲇᐃ[235][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃᐃᐃΔⲆⲆ;
        Ⲇᐃ[235][Pr.ΔΔⲆ] = ⵠⵠ.ᐃⲆⵠⵠⵠΔⵠ;
        Ⲇᐃ[1115] = ⵠⵠ.ΔⵠΔⵠΔΔⵠ;
        Ⲇᐃ[1113] = [];
        Ⲇᐃ[1113][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⲆΔΔⲆΔ;
        Ⲇᐃ[1113][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔΔⲆΔⲆⵠ;
        Ⲇᐃ[1114] = [];
        Ⲇᐃ[1114][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔᐃᐃᐃⲆ;
        Ⲇᐃ[1114][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆⲆΔⵠΔᐃ;
        Ⲇᐃ[1100] = [];
        Ⲇᐃ[1100][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔΔΔⲆᐃⵠ;
        Ⲇᐃ[1100][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃᐃⵠⵠⲆ;
        Ⲇᐃ[1102] = [];
        Ⲇᐃ[1102][Pr.ΔᐃΔ] = ⵠⵠ.Δⵠⵠᐃⵠⵠⵠ;
        Ⲇᐃ[1102][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃⵠⵠΔΔ;
        Ⲇᐃ[1105] = [];
        Ⲇᐃ[1105][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔⲆΔᐃⲆ;
        Ⲇᐃ[1105][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃΔⲆⵠⵠⵠ;
        Ⲇᐃ[1101] = [];
        Ⲇᐃ[1101][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⲆⲆᐃΔΔ;
        Ⲇᐃ[1101][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠᐃᐃⵠΔᐃ;
        Ⲇᐃ[1104] = [];
        Ⲇᐃ[1104][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃΔⲆⲆⲆⲆ;
        Ⲇᐃ[1104][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃΔⲆΔⲆ;
        Ⲇᐃ[1103] = [];
        Ⲇᐃ[1103][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⲆⲆⵠΔⲆ;
        Ⲇᐃ[1103][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔΔᐃᐃⲆⲆ;
        Ⲇᐃ[1106] = [];
        Ⲇᐃ[1106][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⲆΔᐃⲆΔ;
        Ⲇᐃ[1106][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃⲆΔⵠᐃ;
        Ⲇᐃ[1107] = ⵠⵠ.ⲆⵠᐃⵠᐃᐃⲆ;
        Ⲇᐃ[1108] = ⵠⵠ.ΔⲆΔⵠᐃⵠΔ;
        Ⲇᐃ[1109] = ⵠⵠ.ⲆΔⲆⵠΔⵠⵠ;
        Ⲇᐃ[1119] = [];
        Ⲇᐃ[1119][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔⵠᐃⲆᐃ;
        Ⲇᐃ[1119][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃᐃΔΔᐃΔ;
        Ⲇᐃ[238] = [];
        Ⲇᐃ[238][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆⲆⲆⵠΔᐃ;
        Ⲇᐃ[238][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃΔᐃΔᐃΔ;
        Ⲇᐃ[1136] = ⵠⵠ.ⵠᐃᐃⵠΔⲆⵠ;
        Ⲇᐃ[1134] = [];
        Ⲇᐃ[1134][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃΔᐃⲆⵠΔ;
        Ⲇᐃ[1134][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔⲆⵠⲆⲆⵠ;
        Ⲇᐃ[1135] = [];
        Ⲇᐃ[1135][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠⵠⵠᐃⲆⲆ;
        Ⲇᐃ[1135][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⵠⲆᐃⵠᐃ;
        Ⲇᐃ[1121] = [];
        Ⲇᐃ[1121][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔⵠⲆⲆᐃᐃ;
        Ⲇᐃ[1121][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔΔΔᐃΔⵠ;
        Ⲇᐃ[1123] = [];
        Ⲇᐃ[1123][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⲆⲆⵠᐃⵠ;
        Ⲇᐃ[1123][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔᐃᐃΔΔⵠ;
        Ⲇᐃ[1126] = [];
        Ⲇᐃ[1126][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠΔᐃΔᐃⲆ;
        Ⲇᐃ[1126][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⲆⵠΔⲆⵠ;
        Ⲇᐃ[1122] = [];
        Ⲇᐃ[1122][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔΔᐃΔⵠᐃ;
        Ⲇᐃ[1122][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔⵠⵠᐃᐃΔ;
        Ⲇᐃ[1125] = [];
        Ⲇᐃ[1125][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠᐃⵠᐃᐃⲆ;
        Ⲇᐃ[1125][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⲆᐃᐃⲆⵠ;
        Ⲇᐃ[1124] = [];
        Ⲇᐃ[1124][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⲆᐃΔᐃⵠ;
        Ⲇᐃ[1124][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆΔΔⵠⵠᐃ;
        Ⲇᐃ[1127] = [];
        Ⲇᐃ[1127][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠᐃΔⲆⵠⵠ;
        Ⲇᐃ[1127][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆᐃⵠΔⵠⲆ;
        Ⲇᐃ[1128] = ⵠⵠ.ⵠᐃΔᐃᐃᐃᐃ;
        Ⲇᐃ[1129] = ⵠⵠ.ⲆΔᐃΔᐃⲆᐃ;
        Ⲇᐃ[1130] = ⵠⵠ.ᐃⵠᐃΔΔΔᐃ;
        Ⲇᐃ[1042] = [];
        Ⲇᐃ[1042][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆⲆᐃⵠⵠᐃ;
        Ⲇᐃ[1042][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃΔΔⵠⵠⵠ;
        Ⲇᐃ[1043] = [];
        Ⲇᐃ[1043][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆᐃⵠⲆΔᐃ;
        Ⲇᐃ[1043][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆᐃᐃΔᐃΔ;
        Ⲇᐃ[1044] = [];
        Ⲇᐃ[1044][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆⲆΔΔⵠⲆ;
        Ⲇᐃ[1044][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔΔΔΔΔⵠ;
        Ⲇᐃ[228] = [];
        Ⲇᐃ[228][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔⲆᐃΔⵠⵠ;
        Ⲇᐃ[228][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔⲆᐃΔⵠⵠ;
        Ⲇᐃ[234] = [];
        Ⲇᐃ[234][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆⵠⵠΔⵠⲆ;
        Ⲇᐃ[234][Pr.ΔΔⲆ] = ⵠⵠ.ΔⲆⵠⵠΔⵠⲆ;
        Ⲇᐃ[249] = [];
        Ⲇᐃ[249][Pr.ΔᐃΔ] = ⵠⵠ.ⲆᐃⲆᐃⵠⵠⵠ;
        Ⲇᐃ[249][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃⲆᐃⵠⵠⵠ;
        Ⲇᐃ[1045] = ⵠⵠ.ⵠᐃⲆᐃⵠⲆᐃ;
        Ⲇᐃ[89] = [];
        Ⲇᐃ[89][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆⵠⲆⲆΔⲆ;
        Ⲇᐃ[89][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃⲆⵠᐃⲆΔ;
        Ⲇᐃ[92] = [];
        Ⲇᐃ[92][Pr.ΔᐃΔ] = ⵠⵠ.ⵠᐃⵠΔΔⵠΔ;
        Ⲇᐃ[92][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠΔⲆᐃΔⵠ;
        Ⲇᐃ[247] = [];
        Ⲇᐃ[247][Pr.ΔᐃΔ] = [ⵠⵠ.ⵠⵠΔⲆⲆΔⵠ, ⵠⵠ.ⵠᐃⵠΔᐃⵠᐃ, ⵠⵠ.ᐃⵠⵠΔᐃΔΔ, ⵠⵠ.ΔⵠᐃⲆⵠΔΔ, ⵠⵠ.ᐃⲆΔΔⲆᐃᐃ, ⵠⵠ.ⲆΔΔⵠⲆⲆΔ, ⵠⵠ.ⵠΔΔⵠⵠⲆᐃ, ⵠⵠ.ⵠΔᐃΔⲆΔⵠ, ⵠⵠ.ⲆΔⲆⵠΔᐃΔ];
        Ⲇᐃ[247][Pr.ΔΔⲆ] = [ⵠⵠ.ⵠⲆᐃᐃᐃⵠⲆ, ⵠⵠ.ᐃⲆⲆᐃⲆΔⲆ, ⵠⵠ.ⲆᐃᐃⲆⵠⲆⲆ, ⵠⵠ.ⵠⲆⵠΔⲆΔⵠ, ⵠⵠ.ᐃΔΔΔΔⲆΔ, ⵠⵠ.ⵠⵠᐃΔⲆⲆᐃ, ⵠⵠ.ⵠⲆⵠᐃⵠⵠᐃ, ⵠⵠ.ⵠΔᐃΔⲆΔⵠ, ⵠⵠ.ⲆⵠⵠⲆΔΔⵠ];
        Ⲇᐃ[93] = [];
        Ⲇᐃ[93][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠⵠⵠⲆⲆⵠ;
        Ⲇᐃ[93][Pr.ΔΔⲆ] = ⵠⵠ.ⵠᐃᐃᐃΔⵠᐃ;
        Ⲇᐃ[225] = [];
        Ⲇᐃ[225][Pr.ΔᐃΔ] = ⵠⵠ.ⵠΔΔᐃᐃⵠΔ;
        Ⲇᐃ[225][Pr.ΔΔⲆ] = ⵠⵠ.ΔⵠᐃⲆᐃⲆΔ;
        Ⲇᐃ[226] = [];
        Ⲇᐃ[226][Pr.ΔᐃΔ] = ⵠⵠ.Ⲇⵠⵠᐃᐃᐃⵠ;
        Ⲇᐃ[226][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔᐃᐃΔᐃⲆ;
        Ⲇᐃ[24] = [];
        Ⲇᐃ[24][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠⵠⵠⵠΔᐃ;
        Ⲇᐃ[24][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⲆᐃⲆⲆᐃ;
        Ⲇᐃ[88] = [];
        Ⲇᐃ[88][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠᐃΔⲆⲆᐃ;
        Ⲇᐃ[88][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔΔⲆΔΔⵠ;
        Ⲇᐃ[87] = [];
        Ⲇᐃ[87][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆⵠⲆⲆⵠⲆ;
        Ⲇᐃ[87][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔΔᐃⵠⲆᐃ;
        Ⲇᐃ[82] = [];
        Ⲇᐃ[82][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆΔⲆⲆᐃⲆ;
        Ⲇᐃ[82][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⲆⲆᐃⵠⵠ;
        Ⲇᐃ[621] = [];
        Ⲇᐃ[621][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[621][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[621][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⲆᐃΔⵠⲆᐃΔΔ);
        Ⲇᐃ[621][Pr.ΔᐃΔ].push(ⵠⵠ.ΔᐃᐃΔⵠᐃᐃⲆᐃ);
        Ⲇᐃ[621][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃᐃᐃΔⵠⲆΔΔΔ);
        Ⲇᐃ[621][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆᐃⲆΔΔᐃΔⵠᐃ);
        Ⲇᐃ[621][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⵠⵠΔᐃᐃⲆΔΔ);
        Ⲇᐃ[621][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆΔⵠⲆⵠⵠΔⵠⲆ);
        Ⲇᐃ[619] = [];
        Ⲇᐃ[619][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[619][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[619][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃᐃⲆⲆΔⵠⲆΔⵠ);
        Ⲇᐃ[619][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠΔᐃⵠⵠΔΔⲆⵠ);
        Ⲇᐃ[619][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆᐃΔΔΔⵠΔⲆⲆ);
        Ⲇᐃ[619][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆᐃΔⵠΔΔⵠᐃⲆ);
        Ⲇᐃ[619][Pr.ΔΔⲆ].push(ⵠⵠ.ΔΔΔⲆⵠᐃⵠⵠᐃ);
        Ⲇᐃ[619][Pr.ΔΔⲆ].push(ⵠⵠ.ΔⵠᐃⵠⵠⲆΔΔⲆ);
        Ⲇᐃ[620] = [];
        Ⲇᐃ[620][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[620][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[620][Pr.ΔᐃΔ].push(ⵠⵠ.ⵠⲆᐃⲆΔᐃⵠⵠⲆ);
        Ⲇᐃ[620][Pr.ΔᐃΔ].push(ⵠⵠ.ⲆᐃΔΔⵠⵠⵠⵠᐃ);
        Ⲇᐃ[620][Pr.ΔᐃΔ].push(ⵠⵠ.ᐃᐃᐃⲆⲆᐃΔⲆᐃ);
        Ⲇᐃ[620][Pr.ΔΔⲆ].push(ⵠⵠ.ᐃⵠΔⵠΔΔᐃΔΔ);
        Ⲇᐃ[620][Pr.ΔΔⲆ].push(ⵠⵠ.ⲆΔᐃⲆΔⲆᐃⵠⵠ);
        Ⲇᐃ[620][Pr.ΔΔⲆ].push(ⵠⵠ.ⵠⵠᐃᐃΔⲆᐃΔⲆ);
        ΔᐃᐃⲆ.g = [];
        ΔᐃᐃⲆ.g[0] = [ⵠⵠ.ᐃΔΔᐃⲆⲆΔ, ⵠⵠ.ⵠΔΔⲆⲆⵠⲆ];
        ΔᐃᐃⲆ.g[1] = ΔᐃᐃⲆ.g[0];
        ΔᐃᐃⲆ.g[2] = [ⵠⵠ.ⲆΔⵠᐃΔⲆⲆ, ⵠⵠ.ⲆⵠⲆᐃΔⲆΔ];
        ΔᐃᐃⲆ.m = [];
        ΔᐃᐃⲆ.m[0] = [ⵠⵠ.ΔⵠⲆⵠᐃΔΔ, ⵠⵠ.ΔᐃⵠⲆΔⲆᐃ];
        ΔᐃᐃⲆ.m[1] = ΔᐃᐃⲆ.m[0];
        ΔᐃᐃⲆ.m[2] = [ⵠⵠ.ⲆᐃⵠΔⲆᐃᐃ, ⵠⵠ.ⲆⲆΔⵠΔⵠⲆ];
        ΔᐃᐃⲆ.la = [];
        ΔᐃᐃⲆ.la[0] = [ⵠⵠ.ΔᐃⵠΔⵠΔΔ, ⵠⵠ.ⲆΔⲆᐃⲆᐃᐃ];
        ΔᐃᐃⲆ.la[1] = ΔᐃᐃⲆ.la[0];
        ΔᐃᐃⲆ.la[2] = ΔᐃᐃⲆ.la[0];
        ΔᐃᐃⲆ.la[3] = ΔᐃᐃⲆ.la[0];
        ΔᐃᐃⲆ.la[4] = ΔᐃᐃⲆ.la[0];
        ΔᐃᐃⲆ.la[5] = ΔᐃᐃⲆ.la[0];
        ΔᐃᐃⲆ.s = [];
        ΔᐃᐃⲆ.s[0] = [ⵠⵠ.ⲆᐃΔᐃⲆᐃⲆ, ⵠⵠ.ᐃⲆᐃΔΔᐃᐃ];
        ΔᐃᐃⲆ.s[1] = ΔᐃᐃⲆ.s[0];
        ΔᐃᐃⲆ.s[2] = [ⵠⵠ.ΔᐃᐃⲆⲆΔᐃ, ⵠⵠ.ⵠΔⵠⲆᐃⵠᐃ];
        ΔᐃᐃⲆ.p = [];
        ΔᐃᐃⲆ.p[0] = [ⵠⵠ.ⲆⵠⲆΔⵠⲆΔ, ⵠⵠ.ⲆⵠⲆΔⵠⲆΔ];
        ΔᐃᐃⲆ.a = [];
        ΔᐃᐃⲆ.a[0] = [ⵠⵠ.ΔⲆᐃᐃⵠΔΔ, ⵠⵠ.ᐃⲆⵠΔⲆΔⲆ];
        ΔᐃᐃⲆ.a[1] = ΔᐃᐃⲆ.a[0];
        ΔᐃᐃⲆ.a[2] = ΔᐃᐃⲆ.a[0];
        ΔᐃᐃⲆ.d = [];
        ΔᐃᐃⲆ.d[0] = [ⵠⵠ.ⵠⵠⲆⵠⲆⵠΔ, ⵠⵠ.ᐃⲆᐃᐃⲆⵠⵠ];
        ΔᐃᐃⲆ.d[1] = ΔᐃᐃⲆ.d[0];
        ΔᐃᐃⲆ.d[2] = ΔᐃᐃⲆ.d[0];
        ΔᐃᐃⲆ.re = [];
        ΔᐃᐃⲆ.re[0] = [ⵠⵠ.ⵠⲆⵠᐃⲆⲆᐃ, ⵠⵠ.ᐃⲆⵠᐃⵠⲆⲆ];
        ΔᐃᐃⲆ.re[1] = ΔᐃᐃⲆ.re[0];
        ΔᐃᐃⲆ.re[2] = ΔᐃᐃⲆ.re[0];
        ΔᐃᐃⲆ.f = [];
        ΔᐃᐃⲆ.f[0] = [ⵠⵠ.ⵠΔⲆⵠⵠᐃᐃ, ⵠⵠ.ⲆⵠⲆᐃᐃⲆΔ];
        ΔᐃᐃⲆ.f[1] = ΔᐃᐃⲆ.f[0];
        ΔᐃᐃⲆ.f[2] = ΔᐃᐃⲆ.f[0];
        ΔᐃᐃⲆ.isl = [];
        ΔᐃᐃⲆ.isl[0] = [ⵠⵠ.ΔᐃᐃᐃⲆⵠⵠ, ⵠⵠ.ⲆᐃΔᐃᐃⵠΔ];
        ΔᐃᐃⲆ.isl[1] = ΔᐃᐃⲆ.isl[0];
        ΔᐃᐃⲆ.isl[2] = ΔᐃᐃⲆ.isl[0];
        ΔᐃᐃⲆ.c = [];
        ΔᐃᐃⲆ.c[0] = [ⵠⵠ.ⵠᐃⵠⵠⵠΔⲆ, ⵠⵠ.ⵠⵠⵠⲆⲆᐃⵠ];
        ΔᐃᐃⲆ.c[1] = ΔᐃᐃⲆ.c[0];
        ΔᐃᐃⲆ.c[2] = ΔᐃᐃⲆ.c[0];
        ΔᐃᐃⲆ.wtb = [];
        ΔᐃᐃⲆ.wtb[0] = [ⵠⵠ.ΔⲆⲆⵠⲆⵠΔ, ⵠⵠ.ⵠᐃᐃΔᐃΔᐃ];
        ΔᐃᐃⲆ.PIRANHA = [ⵠⵠ.ⵠⵠΔΔⵠᐃⵠ, ⵠⵠ.ⵠⲆⲆⲆⵠⵠΔ];
        ΔᐃᐃⲆ.KRAKEN = [ⵠⵠ.ᐃⲆΔΔΔⵠⵠ, ⵠⵠ.ⵠΔⲆΔΔⲆΔ];
        ΔᐃᐃⲆ.FOX = [ⵠⵠ.ⲆⲆΔΔᐃⵠᐃ, ⵠⵠ.ᐃⲆᐃⵠⲆⵠⵠ];
        ΔᐃᐃⲆ.WOLF = [ⵠⵠ.ⵠⵠⵠⲆⵠᐃⵠ, ⵠⵠ.ΔΔⲆⲆᐃΔᐃ];
        ΔᐃᐃⲆ.SPIDER = [ⵠⵠ.ΔⲆᐃᐃΔⵠⲆ, ⵠⵠ.ⵠΔᐃⲆᐃΔⵠ];
        ΔᐃᐃⲆ.BEAR = [ⵠⵠ.ⵠⲆᐃΔⲆᐃⵠ, ⵠⵠ.ᐃⵠᐃⲆⲆΔΔ];
        ΔᐃᐃⲆ.CAVE = [ⵠⵠ.ΔΔⵠᐃᐃⵠⲆ, ⵠⵠ.ᐃⵠⵠⲆⵠⲆⵠ];
        ΔᐃᐃⲆ.MAP = [ⵠⵠ.ᐃⵠᐃΔⲆⵠᐃ, ⵠⵠ.ⵠⵠⲆᐃⲆΔⲆ];
        ΔᐃᐃⲆ.FOREST = [ⵠⵠ.ᐃᐃⵠⵠᐃⵠΔ, ⵠⵠ.ⵠᐃΔⲆΔⵠᐃ];
        ΔᐃᐃⲆ.WINTER = [ⵠⵠ.ΔⵠΔΔⲆⲆΔ, ⵠⵠ.ΔᐃΔⲆΔΔᐃ];
        ΔᐃᐃⲆ.DESERT = [ⵠⵠ.ΔⲆⵠᐃᐃΔⵠ, ⵠⵠ.ΔᐃⵠⲆⵠΔΔ];
        ΔᐃᐃⲆ.LAVA = [ⵠⵠ.ⲆⵠΔᐃⵠⵠⲆ, ⵠⵠ.ⲆᐃΔⲆΔⵠΔ];
        for (var c in ΔᐃᐃⲆ) {
            for (var d = ΔᐃᐃⲆ[c], e = 0; e < d.length; e++) {
                var f = d[e];
                if (f.ⵠᐃⵠⲆΔⵠΔ !== undefined) {
                    f.ⵠᐃⵠⲆΔⵠΔ();
                } else if (f.length > 0) {
                    for (var g = 0; g < f.length; g++) {
                        if (f[g].ⵠᐃⵠⲆΔⵠΔ !== Kq) {
                            f[g].ⵠᐃⵠⲆΔⵠΔ();
                        }
                    }
                }
            }
        }
        console.log(undefined, Aj);
    }
    function uc() {
        var a = 1;
        new Date().getTime();
        gc();
        rc();
        Ⲇᐃ[540] = [];
        Ⲇᐃ[540][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[540][Pr.ΔΔⲆ] = [];
        for (var b = 0; Pr.ⵠΔᐃⵠΔΔⲆ > b; b++) {
            Ⲇᐃ[540][Pr.ΔᐃΔ].push(Ya(_d(a, 4 + b, "#59B8CE")));
            Ⲇᐃ[540][Pr.ΔΔⲆ].push(Ya(_d(a, 4 + b, "#90DDD9")));
        }
        Ⲇᐃ[470] = [];
        Ⲇᐃ[470][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[470][Pr.ΔΔⲆ] = [];
        for (b = 0; b < Pr.ⲆⵠⵠⲆⲆⵠⲆ; b++) {
            Ⲇᐃ[470][Pr.ΔᐃΔ].push(Ya(_d(a, 4 + b, "#fff")));
            Ⲇᐃ[470][Pr.ΔΔⲆ].push(Ya(_d(a, 4 + b, "#fff")));
        }
        Ⲇᐃ[471] = [];
        Ⲇᐃ[471][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[471][Pr.ΔΔⲆ] = [];
        for (b = 0; b < Pr.ⲆⵠⵠⲆⲆⵠⲆ; b++) {
            Ⲇᐃ[471][Pr.ΔᐃΔ].push(Ya(_d(a, 6 + b, "#DDCD8A")));
            Ⲇᐃ[471][Pr.ΔΔⲆ].push(Ya(_d(a, 6 + b, "#155E57")));
        }
        Ⲇᐃ[942] = [];
        Ⲇᐃ[942][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[942][Pr.ΔΔⲆ] = [];
        for (b = 0; Pr.ⲆΔᐃΔⵠΔᐃ > b; b++) {
            Ⲇᐃ[942][Pr.ΔᐃΔ].push(Ya(_d(a, 4 + b, "#353326")));
            Ⲇᐃ[942][Pr.ΔΔⲆ].push(Ya(_d(a, 4 + b, "#1D2526")));
        }
        Ⲇᐃ[201] = [];
        Ⲇᐃ[201][Pr.ΔᐃΔ] = Ya(tb(a * 1.5, 0, ["#ee71a9"]));
        Ⲇᐃ[201][Pr.ΔΔⲆ] = Ya(tb(a * 1.5, 0, ["#ee71a9"]));
        Ⲇᐃ[872] = [Ⲇᐃ[201]];
        Ⲇᐃ[872][1] = [];
        Ⲇᐃ[872][2] = [];
        Ⲇᐃ[872][3] = [];
        Ⲇᐃ[872][4] = [];
        Ⲇᐃ[872][1][Pr.ΔᐃΔ] = Ya(tb(a * 1.5, 0, ["#e2d63b"]));
        Ⲇᐃ[872][1][Pr.ΔΔⲆ] = Ya(tb(a * 1.5, 0, ["#e2d63b"]));
        Ⲇᐃ[872][2][Pr.ΔᐃΔ] = Ya(tb(a * 1.5, 0, ["#309cbd"]));
        Ⲇᐃ[872][2][Pr.ΔΔⲆ] = Ya(tb(a * 1.5, 0, ["#309cbd"]));
        Ⲇᐃ[872][3][Pr.ΔᐃΔ] = Ya(tb(a * 1.5, 0, ["#cd232d"]));
        Ⲇᐃ[872][3][Pr.ΔΔⲆ] = Ya(tb(a * 1.5, 0, ["#cd232d"]));
        Ⲇᐃ[872][4][Pr.ΔᐃΔ] = Ya(tb(a * 1.5, 0, ["#42b672"]));
        Ⲇᐃ[872][4][Pr.ΔΔⲆ] = Ya(tb(a * 1.5, 0, ["#42b672"]));
        if (ΔᐃⲆᐃ.ᐃⲆᐃᐃⵠⵠΔ("cti", cj.location.href)) {
            document.getElementById("version").innerHTML += "[CTI]";
        } else {
            Ya = function (a) {
                a.loaded = 1;
                return a;
            };
        }
        Ⲇᐃ[797] = Ya(function () {
            var a = document.createElement("canvas");
            var b = a.getContext("2d");
            a.width = 460;
            a.height = 220;
            b.fillStyle = "#3a2a0d";
            b.fillRect(0, 0, a.width, a.height);
            b.lineWidth = 4;
            b.beginPath();
            b.strokeStyle = "#513810";
            for (var c = 20; c < 220; c += 20) {
                b.moveTo(0, c);
                b.lineTo(460, c);
                b.closePath();
                b.stroke();
            }
            return a;
        }());
        Ⲇᐃ[108] = [];
        Ⲇᐃ[108][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[108][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[108][Pr.ΔᐃΔ].push(Ya(Id(a * 1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Ⲇᐃ[108][Pr.ΔᐃΔ].push(Ya(Id(a * 0.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Ⲇᐃ[108][Pr.ΔᐃΔ].push(Ya(Id(a * 0.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
        Ⲇᐃ[108][Pr.ΔΔⲆ].push(Ya(Id(a * 1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Ⲇᐃ[108][Pr.ΔΔⲆ].push(Ya(Id(a * 0.9, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Ⲇᐃ[108][Pr.ΔΔⲆ].push(Ya(Id(a * 0.6, 0, ["#0a2728", "#3c8e88", "#40a39b"])));
        Ⲇᐃ[111] = [];
        Ⲇᐃ[111][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[111][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[111][Pr.ΔᐃΔ].push(Ya(qd(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[111][Pr.ΔᐃΔ].push(Ya(qd(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[111][Pr.ΔᐃΔ].push(Ya(qd(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[111][Pr.ΔΔⲆ].push(Ya(qd(a * 1.5, 0, ["#030d14", "#1b4444", "#16605a"])));
        Ⲇᐃ[111][Pr.ΔΔⲆ].push(Ya(qd(a * 1.3, 0, ["#030d14", "#1b4444", "#16605a"])));
        Ⲇᐃ[111][Pr.ΔΔⲆ].push(Ya(qd(a * 1.1, 0, ["#030d14", "#1b4444", "#16605a"])));
        Ⲇᐃ[112] = [];
        Ⲇᐃ[112][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[112][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[112][Pr.ΔᐃΔ].push(Ya(Hd(a * 1.1, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Ⲇᐃ[112][Pr.ΔᐃΔ].push(Ya(Hd(a * 0.9, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Ⲇᐃ[112][Pr.ΔᐃΔ].push(Ya(Hd(a * 0.7, 0, ["#232828", "#3fc9c9", "#74ede6"])));
        Ⲇᐃ[112][Pr.ΔΔⲆ].push(Ya(Hd(a * 1.1, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Ⲇᐃ[112][Pr.ΔΔⲆ].push(Ya(Hd(a * 0.9, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Ⲇᐃ[112][Pr.ΔΔⲆ].push(Ya(Hd(a * 0.7, 0, ["#030d14", "#2b9390", "#57bcb5"])));
        Ⲇᐃ[239] = [];
        Ⲇᐃ[239][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⲆᐃΔΔᐃⲆ;
        Ⲇᐃ[239][Pr.ΔΔⲆ] = ⵠⵠ.ⲆᐃᐃⲆⵠᐃΔ;
        Ⲇᐃ[286] = [];
        Ⲇᐃ[286][Pr.ΔᐃΔ] = Ya(nd(a * 0.6, ["#0d1b1c"]));
        Ⲇᐃ[286][Pr.ΔΔⲆ] = Ya(nd(a * 0.6, ["#030d14"]));
        Ⲇᐃ[793] = [];
        Ⲇᐃ[793][Pr.ΔᐃΔ] = Ya(sd(a * 0.6, ["#2a2938", "#242330"]));
        Ⲇᐃ[793][Pr.ΔΔⲆ] = Ya(sd(a * 0.6, ["#1b1e30", "#161921"]));
        Ⲇᐃ[820] = [];
        Ⲇᐃ[820][Pr.ΔᐃΔ] = Ya(lb(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
        Ⲇᐃ[820][Pr.ΔΔⲆ] = Ya(lb(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
        Ⲇᐃ[821] = [];
        Ⲇᐃ[821][Pr.ΔᐃΔ] = Ya(gb(a * 0.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
        Ⲇᐃ[821][Pr.ΔΔⲆ] = Ya(gb(a * 0.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
        Ⲇᐃ[822] = [];
        Ⲇᐃ[822][Pr.ΔᐃΔ] = Ya(id(a * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
        Ⲇᐃ[822][Pr.ΔΔⲆ] = Ya(id(a * 0.4, ["#030d14", "#11635e", "#02373e"]));
        Ⲇᐃ[823] = Ya(vb(a * 0.6, ["#BB0000"]));
        Ⲇᐃ[824] = Ya(vb(a * 0.6, ["#DBE71C"]));
        Ⲇᐃ[825] = Ya(vb(a * 0.6, ["#00BB00"]));
        Ⲇᐃ[109] = [];
        Ⲇᐃ[109][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[109][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 1.1, ["#13402d", "#0f9862", "#0b8750", "#26ab6e"], false, 0));
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], tr, 0));
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 0.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], eh, 0));
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 0.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], Jr, 0));
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], false, 0));
        Ⲇᐃ[109][Pr.ΔᐃΔ].push(rd(a * 0.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], true, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], false, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], f, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], il, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 0.9, ["#030d14", "#0b3534", "#144443", "#174240"], kg, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
        Ⲇᐃ[109][Pr.ΔΔⲆ].push(rd(a * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], tr, 0));
        Ⲇᐃ[307] = [];
        Ⲇᐃ[307][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[307][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[307][Pr.ΔᐃΔ].push(Ya(ad(hd(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], wq), Ⲇᐃ[109][Pr.ΔᐃΔ][0])));
        Ⲇᐃ[307][Pr.ΔᐃΔ].push(Ya(ad(hd(a * 1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], Oq), Ⲇᐃ[109][Pr.ΔᐃΔ][1])));
        Ⲇᐃ[307][Pr.ΔΔⲆ].push(Ya(ad(hd(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], hj), Ⲇᐃ[109][Pr.ΔΔⲆ][0])));
        Ⲇᐃ[307][Pr.ΔΔⲆ].push(Ya(ad(hd(a * 1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], true), Ⲇᐃ[109][Pr.ΔΔⲆ][1])));
        Ⲇᐃ[307][Pr.ΔᐃΔ].push(Ya(ad(hd(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], fg), Ⲇᐃ[109][Pr.ΔᐃΔ][2])));
        Ⲇᐃ[307][Pr.ΔᐃΔ].push(Ya(ad(hd(a * 0.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], kg), Ⲇᐃ[109][Pr.ΔᐃΔ][2])));
        Ⲇᐃ[307][Pr.ΔΔⲆ].push(Ya(ad(hd(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], Bk), Ⲇᐃ[109][Pr.ΔΔⲆ][2])));
        Ⲇᐃ[307][Pr.ΔΔⲆ].push(Ya(ad(hd(a * 0.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], ft), Ⲇᐃ[109][Pr.ΔΔⲆ][3])));
        Ⲇᐃ[109][Pr.ΔᐃΔ][5] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][5]);
        Ⲇᐃ[109][Pr.ΔᐃΔ][4] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][4]);
        Ⲇᐃ[109][Pr.ΔᐃΔ][3] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][3]);
        Ⲇᐃ[109][Pr.ΔᐃΔ][2] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][2]);
        Ⲇᐃ[109][Pr.ΔᐃΔ][1] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][1]);
        Ⲇᐃ[109][Pr.ΔᐃΔ][0] = Ya(Ⲇᐃ[109][Pr.ΔᐃΔ][0]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][5] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][5]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][4] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][4]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][3] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][3]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][2] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][2]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][1] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][1]);
        Ⲇᐃ[109][Pr.ΔΔⲆ][0] = Ya(Ⲇᐃ[109][Pr.ΔΔⲆ][0]);
        Ⲇᐃ[8] = [];
        Ⲇᐃ[8][Pr.ΔᐃΔ] = Ya(At(4, vd(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
        Ⲇᐃ[8][Pr.ΔΔⲆ] = Ya(At(4, vd(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
        Ⲇᐃ[1] = [];
        Ⲇᐃ[1][Pr.ΔᐃΔ] = Ya(At(4, vd(a * 0.75, tr, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        Ⲇᐃ[1][Pr.ΔΔⲆ] = Ya(At(4, vd(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
        Ⲇᐃ[3] = [];
        Ⲇᐃ[3][Pr.ΔᐃΔ] = Ya(At(4, vd(a * 0.75, Oq, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        Ⲇᐃ[3][Pr.ΔΔⲆ] = Ya(At(4, vd(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
        Ⲇᐃ[4] = [];
        Ⲇᐃ[4][Pr.ΔᐃΔ] = Ya(At(4, vd(a * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        Ⲇᐃ[4][Pr.ΔΔⲆ] = Ya(At(4, vd(a * 0.75, f, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        Ⲇᐃ[31] = [];
        Ⲇᐃ[31][Pr.ΔᐃΔ] = Ya(At(4, vd(a * 0.75, Jn, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        Ⲇᐃ[31][Pr.ΔΔⲆ] = Ya(At(4, vd(a * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        Ⲇᐃ[9] = [];
        Ⲇᐃ[9][Pr.ΔᐃΔ] = Ya(At(3, bd(a * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
        Ⲇᐃ[9][Pr.ΔΔⲆ] = Ya(At(3, bd(a * 0.17, Bs, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
        Ⲇᐃ[199] = [];
        Ⲇᐃ[199][Pr.ΔᐃΔ] = Ya(At(3, Bd(a * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
        Ⲇᐃ[199][Pr.ΔΔⲆ] = Ya(At(3, Bd(a * 0.42, Jr, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
        Ⲇᐃ[57] = [];
        Ⲇᐃ[57][Pr.ΔᐃΔ] = Ya(At(3, dd(a * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
        Ⲇᐃ[57][Pr.ΔΔⲆ] = Ya(At(3, dd(a * 0.4, Io, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
        Ⲇᐃ[0] = [];
        Ⲇᐃ[0][Pr.ΔᐃΔ] = Ya(At(3, pd(a * 0.4, sk, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
        Ⲇᐃ[0][Pr.ΔΔⲆ] = Ya(At(3, pd(a * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
        Ⲇᐃ[5] = [];
        Ⲇᐃ[5][Pr.ΔᐃΔ] = Ya(At(3, Jd(a * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
        Ⲇᐃ[5][Pr.ΔΔⲆ] = Ya(At(3, Jd(a * 0.4, dl, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
        Ⲇᐃ[6] = [];
        Ⲇᐃ[6][Pr.ΔᐃΔ] = Ya(At(3, wd(a * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
        Ⲇᐃ[6][Pr.ΔΔⲆ] = Ya(At(3, wd(a * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
        Ⲇᐃ[30] = [];
        Ⲇᐃ[30][Pr.ΔᐃΔ] = Ya(At(3, fd(a * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
        Ⲇᐃ[30][Pr.ΔΔⲆ] = Ya(At(3, fd(a * 0.4, Bs, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
        Ⲇᐃ[285] = [];
        Ⲇᐃ[285][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[285][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[285][Pr.ΔᐃΔ].push(Ya(Od(a * 0.9, 0, ["#0d4f35"], 0)));
        Ⲇᐃ[285][Pr.ΔᐃΔ].push(Ya(Od(a * 0.9, 0, ["#0d4f35"], 1)));
        Ⲇᐃ[285][Pr.ΔᐃΔ].push(Ya(Od(a * 0.9, 0, ["#0d4f35"], 2)));
        Ⲇᐃ[285][Pr.ΔΔⲆ].push(Ya(Od(a * 0.9, 0, ["#053339"], 0)));
        Ⲇᐃ[285][Pr.ΔΔⲆ].push(Ya(Od(a * 0.9, 0, ["#053339"], 1)));
        Ⲇᐃ[285][Pr.ΔΔⲆ].push(Ya(Od(a * 0.9, 0, ["#053339"], 2)));
        Ⲇᐃ[285][Pr.ΔᐃΔ].push(Ya(jd(a * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
        Ⲇᐃ[285][Pr.ΔᐃΔ].push(Ya(jd(a * 0.8, ["#292002", "#ba930e", "#6d5704"])));
        Ⲇᐃ[285][Pr.ΔΔⲆ].push(Ya(jd(a * 0.9, ["#052919", "#0a4738", "#06321f"])));
        Ⲇᐃ[285][Pr.ΔΔⲆ].push(Ya(jd(a * 0.8, ["#052918", "#08491c", "#063417"])));
        Ⲇᐃ[183] = [];
        Ⲇᐃ[183][Pr.ΔᐃΔ] = Ya(At(Math.PI / 2, wu(a * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
        Ⲇᐃ[183][Pr.ΔΔⲆ] = Ya(At(Math.PI / 2, wu(a * 0.25, Wh, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
        Ⲇᐃ[803] = [];
        Ⲇᐃ[803].push(Ya(Au(a * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
        Ⲇᐃ[803].push(Ya(Au(a * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
        Ⲇᐃ[803].push(Ya(Au(a * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
        Ⲇᐃ[802] = [];
        Ⲇᐃ[802][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[802][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[802][Pr.ΔᐃΔ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
        Ⲇᐃ[802][Pr.ΔΔⲆ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
        Ⲇᐃ[802][Pr.ΔᐃΔ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
        Ⲇᐃ[802][Pr.ΔΔⲆ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
        Ⲇᐃ[802][Pr.ΔᐃΔ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
        Ⲇᐃ[802][Pr.ΔΔⲆ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
        Ⲇᐃ[802][Pr.ΔᐃΔ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
        Ⲇᐃ[802][Pr.ΔΔⲆ].push(Ya(At(Math.PI / 2, Ju(a * 0.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
        Ⲇᐃ[110] = [];
        Ⲇᐃ[110][Pr.ΔᐃΔ] = [Ya(Wd(a * 1.2, true, ["#0e3022", "#0b8052", "#077b49"]))];
        Ⲇᐃ[110][Pr.ΔΔⲆ] = [Ya(Wd(a * 1.2, Wa, ["#030d14", "#084442", "#0a4049"]))];
        Ⲇᐃ[623] = [];
        Ⲇᐃ[623][Pr.ΔᐃΔ] = Ya(Wd(a * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
        Ⲇᐃ[623][Pr.ΔΔⲆ] = Ya(Wd(a * 0.8, ob, ["#030d14", "#0F3A24", "#083326"]));
        Ⲇᐃ[189] = [];
        Ⲇᐃ[189][Pr.ΔᐃΔ] = Ya(Qm(a * 0.5, f, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
        Ⲇᐃ[189][Pr.ΔΔⲆ] = Ya(Qm(a * 0.5, Bs, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
        Ⲇᐃ[192] = [];
        Ⲇᐃ[192][Pr.ΔᐃΔ] = Ya(Nt(a * 0.5, Jn, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
        Ⲇᐃ[192][Pr.ΔΔⲆ] = Ya(Nt(a * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
        Ⲇᐃ[194] = [];
        Ⲇᐃ[194][Pr.ΔᐃΔ] = Ya(Mm(a * 0.5, f, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
        Ⲇᐃ[194][Pr.ΔΔⲆ] = Ya(Mm(a * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
        Ⲇᐃ[287] = [];
        Ⲇᐃ[287][Pr.ΔᐃΔ] = Ya(Wd(a * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
        Ⲇᐃ[287][Pr.ΔΔⲆ] = Ya(Wd(a * 0.8, Ah, ["#030d14", "#084442", "#0a4049"]));
        Ⲇᐃ[813] = [];
        Ⲇᐃ[813][Pr.ΔᐃΔ] = Ya(Qm(a * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
        Ⲇᐃ[813][Pr.ΔΔⲆ] = Ya(Qm(a * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
        Ⲇᐃ[839] = [];
        Ⲇᐃ[839][Pr.ΔᐃΔ] = Ya(Nt(a * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
        Ⲇᐃ[839][Pr.ΔΔⲆ] = Ya(Nt(a * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
        Ⲇᐃ[869] = [];
        Ⲇᐃ[869][Pr.ΔᐃΔ] = Ya(Mm(a * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
        Ⲇᐃ[869][Pr.ΔΔⲆ] = Ya(Mm(a * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
        Ⲇᐃ[854] = [];
        Ⲇᐃ[854][Pr.ΔᐃΔ] = Ya(Zm(a * 0.45, Jr, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
        Ⲇᐃ[854][Pr.ΔΔⲆ] = Ya(Zm(a * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
        Ⲇᐃ[859] = Ya(Zm(a * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
        Ⲇᐃ[294] = [];
        Ⲇᐃ[294][Pr.ΔᐃΔ] = Ya(Nd(a * 1.4, 0, ["#ac222a", "#e6636a"]));
        Ⲇᐃ[294][Pr.ΔΔⲆ] = Ya(Nd(a * 1.4, 0, ["#46195e", "#744188"]));
        Ⲇᐃ[288] = [];
        Ⲇᐃ[288][Pr.ΔᐃΔ] = Ya(Nb(a * 0.9, 0, ["#efd435", "#ec8d35", "#e96132"]));
        Ⲇᐃ[288][Pr.ΔΔⲆ] = Ya(Nb(a * 0.9, 0, ["#efdb7b", "#efe854", "#e8ef62"]));
        Ⲇᐃ[118] = [];
        Ⲇᐃ[118][Pr.ΔᐃΔ] = Ya(Hb(a * 0.9, 0, ["#4d2d14", "#432516"]));
        Ⲇᐃ[118][Pr.ΔΔⲆ] = Ya(Hb(a * 0.9, 0, ["#282404", "#0a0a01"]));
        Ⲇᐃ[113] = [];
        Ⲇᐃ[113][Pr.ΔᐃΔ] = Ya(qb(a * 0.9, 0, ["#4d2d14", "#432516"]));
        Ⲇᐃ[113][Pr.ΔΔⲆ] = Ya(qb(a * 0.9, 0, ["#282404", "#0a0a01"]));
        Ⲇᐃ[289] = [];
        Ⲇᐃ[289][Pr.ΔᐃΔ] = Ya(Xb(a * 0.9, 0, ["#efd435"]));
        Ⲇᐃ[289][Pr.ΔΔⲆ] = Ya(Xb(a * 0.9, 0, ["#fffabb"]));
        Ⲇᐃ[282] = [];
        Ⲇᐃ[282][Pr.ΔᐃΔ] = Ya(Zb(a * 0.9, 0, ["#efd435"]));
        Ⲇᐃ[282][Pr.ΔΔⲆ] = Ya(Zb(a * 0.9, 0, ["#fffabb"]));
        Ⲇᐃ[816] = [];
        Ⲇᐃ[816][Pr.ΔᐃΔ] = Ya(Xb(a * 0.9, 0, ["#efd435"]));
        Ⲇᐃ[816][Pr.ΔΔⲆ] = Ya(Xb(a * 0.9, 0, ["rgba(255, 84, 0, 1)"]));
        Ⲇᐃ[817] = [];
        Ⲇᐃ[817][Pr.ΔᐃΔ] = Ya(Zb(a * 0.9, 0, ["#efd435"]));
        Ⲇᐃ[817][Pr.ΔΔⲆ] = Ya(Zb(a * 0.9, 0, ["#ff5704"]));
        Ⲇᐃ[324] = Ya(Cb(a, "#ffffff"));
        Ⲇᐃ[301] = Ya(Cb(a * 1.5, "#ffffff"));
        Ⲇᐃ[306] = Ya(Ed(a, "Your score:", a * 15, "#FFF"));
        Ⲇᐃ[655] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 243;
            c.height = a * 172;
            zt(d, a * 119.5, a * 140.125, a * 19);
            wt(d, Cq, b[1], a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 36.5, a * 20.125);
            d.bezierCurveTo(a * 119.5, a * 20.625, a * 119.5, a * 20.625, a * 202.5, a * 21.125);
            d.bezierCurveTo(a * 214.5, a * 22.125, a * 216.5, a * 26.125, a * 217.5, a * 35.125);
            d.bezierCurveTo(a * 221, a * 76.125, a * 221, a * 76.125, a * 224.5, a * 117.125);
            d.bezierCurveTo(a * 225.5, a * 127.125, a * 221.5, a * 131.125, a * 210.5, a * 132.125);
            d.bezierCurveTo(a * 117.5, a * 132.125, a * 117.5, a * 132.125, a * 24.5, a * 132.125);
            d.bezierCurveTo(a * 14.5, a * 131.125, a * 13.5, a * 126.125, a * 16.5, a * 111.125);
            d.bezierCurveTo(a * 19.5, a * 73.125, a * 19.5, a * 73.125, a * 22.5, a * 35.125);
            d.bezierCurveTo(a * 23.5, a * 23.125, a * 29.5, a * 21.125, a * 36.5, a * 20.125);
            d.closePath();
            wt(d, b[0], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 15.5, a * 138.625);
            d.bezierCurveTo(a * 120, a * 138.625, a * 120, a * 138.625, a * 224.5, a * 138.625);
            d.closePath();
            wt(d, undefined, b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 13.5, a * 131.625);
            d.bezierCurveTo(a * 119.5, a * 131.625, a * 119.5, a * 131.625, a * 225.5, a * 131.625);
            d.closePath();
            wt(d, Lk, b[3], a * 10);
            zt(d, a * 119.5, a * 140.125, a * 14.866068747318506);
            wt(d, b[4], b[5], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 106.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 137.625, a * 118.5, a * 136.625, a * 123.5, a * 138.625);
            d.bezierCurveTo(a * 131.5, a * 145.625, a * 133.5, a * 148.625, a * 127.5, a * 152.625);
            d.bezierCurveTo(a * 115.5, a * 158.625, a * 111.5, a * 153.625, a * 106.5, a * 147.625);
            d.closePath();
            wt(d, b[6], b[7], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.5, a * 146.625);
            d.bezierCurveTo(a * 116.5, a * 159.625, a * 124.5, a * 156.625, a * 132.5, a * 146.625);
            wt(d, Cq, b[8], a * 5);
            d.save();
            d.translate(a * 75.5, a * 80.125);
            xt(d, a * -39, a * -40, a * 78, a * 78, a * 10);
            d.restore();
            wt(d, b[9]);
            d.save();
            d.translate(a * 167, a * 80.125);
            xt(d, a * -38.5, a * -39, a * 78, a * 78, a * 10);
            d.restore();
            wt(d, b[9]);
            return c;
        }(a * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
        Ⲇᐃ[656] = ⵠⵠ.ⲆⵠΔⲆⵠⵠⲆ;
        Ⲇᐃ[135] = [];
        Ⲇᐃ[135][Pr.ΔᐃΔ] = Ya(Qb(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Ⲇᐃ[135][Pr.ΔΔⲆ] = Ya(Qb(a * 1.5, _n, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Ⲇᐃ[641] = [];
        Ⲇᐃ[641][Pr.ΔᐃΔ] = Ya(Mb(a * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Ⲇᐃ[641][Pr.ΔΔⲆ] = Ya(Mb(a * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Ⲇᐃ[642] = [];
        Ⲇᐃ[642][Pr.ΔᐃΔ] = Ya(Gb(a * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
        Ⲇᐃ[642][Pr.ΔΔⲆ] = Ya(Gb(a * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
        Ⲇᐃ[134] = [];
        Ⲇᐃ[134][Pr.ΔᐃΔ] = Ya(Sb(a * 2.2, 0, ["#A89F67", "#9E8456"]));
        Ⲇᐃ[134][Pr.ΔΔⲆ] = Ya(Sb(a * 2.2, 0, ["#0B4049", "#08383D"]));
        Ⲇᐃ[638] = [];
        Ⲇᐃ[638][Pr.ΔᐃΔ] = Ya(Sb(a * 2.2, 0, ["#68622D", "#665329"]));
        Ⲇᐃ[638][Pr.ΔΔⲆ] = Ya(Sb(a * 2.2, 0, ["#0F3A24", "#083326"]));
        Ⲇᐃ[321] = [];
        Ⲇᐃ[321][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#A89F67", "#9E8456"]));
        Ⲇᐃ[321][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#15514F", "#0F3F3D"]));
        Ⲇᐃ[811] = [];
        Ⲇᐃ[811][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#c67933", "#b17238"]));
        Ⲇᐃ[811][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#043c37", "#032b23"]));
        Ⲇᐃ[984] = [];
        Ⲇᐃ[984][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#3a8214", "#4a9c1e"]));
        Ⲇᐃ[984][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#032d29", "#044640"]));
        Ⲇᐃ[837] = [];
        Ⲇᐃ[837][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#e8e8e8", "#bbbbbb"]));
        Ⲇᐃ[837][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#1c6161", "#07413f"]));
        Ⲇᐃ[848] = [];
        Ⲇᐃ[848][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#328a56", "#449573"]));
        Ⲇᐃ[848][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#043c37", "#032b23"]));
        Ⲇᐃ[952] = [];
        Ⲇᐃ[952][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#c98e2f", "#a36b11"]));
        Ⲇᐃ[952][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#043c37", "#032b23"]));
        Ⲇᐃ[962] = [];
        Ⲇᐃ[962][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#b22419", "#99110e"]));
        Ⲇᐃ[962][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#04323c", "#03222b"]));
        Ⲇᐃ[969] = [];
        Ⲇᐃ[969][Pr.ΔᐃΔ] = Ya(xd(a * 0.8, 0, ["#13a56d", "#098a58"]));
        Ⲇᐃ[969][Pr.ΔΔⲆ] = Ya(xd(a * 0.8, 0, ["#043c37", "#032b23"]));
        Ⲇᐃ[657] = Ob(1, [{
            f: Sb,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#A89F67", "#9E8456"]
        }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Ⲇᐃ[723] = Ob(1, [{
            f: qb,
            x: 0,
            y: 0,
            a: 1,
            r: -Math.PI / 5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Ⲇᐃ[724] = Ob(1, [{
            f: Im,
            x: 0,
            y: -5,
            a: 1,
            r: 0,
            c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
        }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Ⲇᐃ[334] = Ob(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
        Ⲇᐃ[115] = [];
        Ⲇᐃ[115][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#7d613e", "#9e7e5a"]));
        Ⲇᐃ[115][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#084442", "#125e5a"]));
        Ⲇᐃ[132] = [];
        Ⲇᐃ[132][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#9E8456", "#A89F67"]));
        Ⲇᐃ[132][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#1b6f6a", "#0d4e4c"]));
        Ⲇᐃ[668] = [];
        Ⲇᐃ[668][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#665329", "#68622D"]));
        Ⲇᐃ[668][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#083326", "#0F3A24"]));
        Ⲇᐃ[188] = [];
        Ⲇᐃ[188][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#c67933", "#ec952d"]));
        Ⲇᐃ[188][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#0e6553", "#094437"]));
        Ⲇᐃ[210] = [];
        Ⲇᐃ[210][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#375809", "#4b770e"]));
        Ⲇᐃ[210][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#09542d", "#0d5d2f"]));
        Ⲇᐃ[985] = [];
        Ⲇᐃ[985][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#585809", "#72770e"]));
        Ⲇᐃ[985][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#295209", "#305d0d"]));
        Ⲇᐃ[191] = [];
        Ⲇᐃ[191][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#b9b094", "#e2d2c0"]));
        Ⲇᐃ[191][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#126366", "#0d484b"]));
        Ⲇᐃ[193] = [];
        Ⲇᐃ[193][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#3f8662", "#30915d"]));
        Ⲇᐃ[193][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#0e6553", "#094437"]));
        Ⲇᐃ[812] = [];
        Ⲇᐃ[812][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#c79153", "#dfa868"]));
        Ⲇᐃ[812][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#073927", "#075040"]));
        Ⲇᐃ[838] = [];
        Ⲇᐃ[838][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#768b5b", "#819984"]));
        Ⲇᐃ[838][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#0c4540", "#0e5153"]));
        Ⲇᐃ[849] = [];
        Ⲇᐃ[849][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#567465", "#627c6e"]));
        Ⲇᐃ[849][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#073927", "#075040"]));
        Ⲇᐃ[204] = [];
        Ⲇᐃ[204][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#996b3a", "#bf956b"]));
        Ⲇᐃ[204][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#0e6553", "#094437"]));
        Ⲇᐃ[953] = [];
        Ⲇᐃ[953][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#7a634a", "#a68f77"]));
        Ⲇᐃ[953][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#1e4d43", "#113c32"]));
        Ⲇᐃ[206] = [];
        Ⲇᐃ[206][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#99403c", "#bc796c"]));
        Ⲇᐃ[206][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#1e434d", "#11303c"]));
        Ⲇᐃ[963] = [];
        Ⲇᐃ[963][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#88504e", "#b3857c"]));
        Ⲇᐃ[963][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#253b41", "#162930"]));
        Ⲇᐃ[208] = [];
        Ⲇᐃ[208][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#0f8870", "#23af93"]));
        Ⲇᐃ[208][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#032829", "#083233"]));
        Ⲇᐃ[970] = [];
        Ⲇᐃ[970][Pr.ΔᐃΔ] = Ya(db(a * 0.9, 0, ["#618a20", "#84a74e"]));
        Ⲇᐃ[970][Pr.ΔΔⲆ] = Ya(db(a * 0.9, 0, ["#1f4632", "#335d47"]));
        Ⲇᐃ[114] = [];
        Ⲇᐃ[114][Pr.ΔᐃΔ] = Ya(wb(a * 1.2, f, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
        Ⲇᐃ[114][Pr.ΔΔⲆ] = Ya(wb(a * 1.2, sk, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
        Ⲇᐃ[162] = [];
        Ⲇᐃ[162][Pr.ΔᐃΔ] = Ya(Xd(a * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        Ⲇᐃ[162][Pr.ΔΔⲆ] = Ya(Xd(a * 1, Lt, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Ⲇᐃ[165] = [];
        Ⲇᐃ[165][Pr.ΔᐃΔ] = Ya(Zd(a * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Ⲇᐃ[165][Pr.ΔΔⲆ] = Ya(Zd(a * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Ⲇᐃ[122] = [];
        Ⲇᐃ[122][Pr.ΔᐃΔ] = Ya(Yt(a * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Ⲇᐃ[122][Pr.ΔΔⲆ] = Ya(Yt(a * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Ⲇᐃ[163] = [];
        Ⲇᐃ[163][Pr.ΔᐃΔ] = Ya(Yt(a * 1, Io, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        Ⲇᐃ[163][Pr.ΔΔⲆ] = Ya(Yt(a * 1, tr, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        Ⲇᐃ[164] = [];
        Ⲇᐃ[164][Pr.ΔᐃΔ] = Ya(Tt(a * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        Ⲇᐃ[164][Pr.ΔΔⲆ] = Ya(Tt(a * 1, Wh, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        Ⲇᐃ[160] = [];
        Ⲇᐃ[160][Pr.ΔᐃΔ] = Ya(xu(a * 0.8, Ah, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
        Ⲇᐃ[160][Pr.ΔΔⲆ] = Ya(xu(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Ⲇᐃ[169] = [];
        Ⲇᐃ[169][Pr.ΔᐃΔ] = Ya(Bu(a * 0.8, Wh, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
        Ⲇᐃ[169][Pr.ΔΔⲆ] = Ya(Bu(a * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
        Ⲇᐃ[170] = [];
        Ⲇᐃ[170][Pr.ΔᐃΔ] = Ya(Eu(a * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Ⲇᐃ[170][Pr.ΔΔⲆ] = Ya(Eu(a * 0.8, Jn, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Ⲇᐃ[168] = [];
        Ⲇᐃ[168][Pr.ΔᐃΔ] = Ya(zu(a * 0.8, ft, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
        Ⲇᐃ[168][Pr.ΔΔⲆ] = Ya(zu(a * 0.8, ft, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
        Ⲇᐃ[123] = [];
        Ⲇᐃ[123][Pr.ΔᐃΔ] = Ya(zu(a * 0.8, Oq, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Ⲇᐃ[123][Pr.ΔΔⲆ] = Ya(zu(a * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Ⲇᐃ[166] = [];
        Ⲇᐃ[166][Pr.ΔᐃΔ] = Ya(Ut(a * 1.5, Oq, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
        Ⲇᐃ[166][Pr.ΔΔⲆ] = Ya(Ut(a * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
        Ⲇᐃ[336] = [];
        Ⲇᐃ[336][Pr.ΔᐃΔ] = Ya(Ut(a * 1, Gq, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Ⲇᐃ[336][Pr.ΔΔⲆ] = Ya(Ut(a * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
        Ⲇᐃ[171] = [];
        Ⲇᐃ[171][Pr.ΔᐃΔ] = Ya(Wt(a * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
        Ⲇᐃ[171][Pr.ΔΔⲆ] = Ya(Wt(a * 1.5, f, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
        Ⲇᐃ[373] = [];
        Ⲇᐃ[373][Pr.ΔᐃΔ] = Ya(Wt(a * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Ⲇᐃ[373][Pr.ΔΔⲆ] = Ya(Wt(a * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Ⲇᐃ[124] = [];
        Ⲇᐃ[124][Pr.ΔᐃΔ] = Ya(Wt(a * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
        Ⲇᐃ[124][Pr.ΔΔⲆ] = Ya(Wt(a * 1.5, dl, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
        Ⲇᐃ[500] = [];
        Ⲇᐃ[500][Pr.ΔᐃΔ] = Ya(Wt(a * 1, hh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Ⲇᐃ[500][Pr.ΔΔⲆ] = Ya(Wt(a * 1, mk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Ⲇᐃ[172] = [];
        Ⲇᐃ[172][Pr.ΔᐃΔ] = Ya(Vt(a * 1.5, Wh, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
        Ⲇᐃ[172][Pr.ΔΔⲆ] = Ya(Vt(a * 1.5, Jr, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
        Ⲇᐃ[376] = [];
        Ⲇᐃ[376][Pr.ΔᐃΔ] = Ya(Vt(a * 1, hh, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Ⲇᐃ[376][Pr.ΔΔⲆ] = Ya(Vt(a * 1, $h, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Ⲇᐃ[173] = [];
        Ⲇᐃ[173][Pr.ΔᐃΔ] = Ya(ou(a * 1.5, Lt, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
        Ⲇᐃ[173][Pr.ΔΔⲆ] = Ya(ou(a * 1.5, _n, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
        Ⲇᐃ[379] = [];
        Ⲇᐃ[379][Pr.ΔᐃΔ] = Ya(ou(a * 1, Sr, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
        Ⲇᐃ[379][Pr.ΔΔⲆ] = Ya(ou(a * 1, Bk, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
        Ⲇᐃ[167] = [];
        Ⲇᐃ[167][Pr.ΔᐃΔ] = Ya(Gu(a * 0.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
        Ⲇᐃ[167][Pr.ΔΔⲆ] = Ya(Gu(a * 0.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
        Ⲇᐃ[691] = [];
        Ⲇᐃ[691][Pr.ΔᐃΔ] = Ya(Ym(a * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
        Ⲇᐃ[691][Pr.ΔΔⲆ] = Ya(Ym(a * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
        Ⲇᐃ[264] = [];
        Ⲇᐃ[264][Pr.ΔᐃΔ] = Ya(Ab(a * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
        Ⲇᐃ[264][Pr.ΔΔⲆ] = Ya(Ab(a * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
        Ⲇᐃ[260] = [];
        Ⲇᐃ[260][Pr.ΔᐃΔ] = Ya(At(Math.PI, Eb(a * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
        Ⲇᐃ[260][Pr.ΔΔⲆ] = Ya(At(Math.PI, Eb(a * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
        Ⲇᐃ[266] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 450;
            c.height = a * 470;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 226.5, a * 91.546875);
            d.bezierCurveTo(a * 254.5, a * 115.546875, a * 261.5, a * 115.546875, a * 294.5, a * 109.546875);
            d.bezierCurveTo(a * 299.5, a * 141.546875, a * 315.5, a * 151.546875, a * 344.5, a * 158.546875);
            d.bezierCurveTo(a * 330.5, a * 195.546875, a * 341.5, a * 207.546875, a * 361.5, a * 226.546875);
            d.bezierCurveTo(a * 331.5, a * 251.546875, a * 335.5, a * 270.546875, a * 342.5, a * 295.546875);
            d.bezierCurveTo(a * 300.5, a * 296.546875, a * 293.5, a * 325.546875, a * 292.5, a * 344.546875);
            d.bezierCurveTo(a * 257.5, a * 326.546875, a * 242.5, a * 338.546875, a * 224.5, a * 361.546875);
            d.bezierCurveTo(a * 200.5, a * 329.546875, a * 180.5, a * 334.546875, a * 155.5, a * 341.546875);
            d.bezierCurveTo(a * 146.5, a * 307.546875, a * 140.5, a * 302.546875, a * 107.5, a * 292.546875);
            d.bezierCurveTo(a * 117.5, a * 253.546875, a * 109.5, a * 244.546875, a * 89.5, a * 224.546875);
            d.bezierCurveTo(a * 118.5, a * 191.546875, a * 114.5, a * 182.546875, a * 108.5, a * 156.546875);
            d.bezierCurveTo(a * 143.5, a * 149.546875, a * 150.5, a * 136.546875, a * 157.5, a * 106.546875);
            d.bezierCurveTo(a * 202.5, a * 120.546875, a * 211.5, a * 103.546875, a * 228.5, a * 91.546875);
            d.closePath();
            wt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 129.546875);
            d.bezierCurveTo(a * 247.5, a * 147.546875, a * 252.5, a * 143.546875, a * 274.5, a * 141.546875);
            d.bezierCurveTo(a * 279.5, a * 163.546875, a * 289.5, a * 168.546875, a * 311.5, a * 178.546875);
            d.bezierCurveTo(a * 301.5, a * 199.546875, a * 307.5, a * 213.546875, a * 323.5, a * 226.546875);
            d.bezierCurveTo(a * 303.5, a * 240.546875, a * 303.5, a * 255.546875, a * 312.5, a * 275.546875);
            d.bezierCurveTo(a * 281.5, a * 278.546875, a * 276.5, a * 291.546875, a * 272.5, a * 313.546875);
            d.bezierCurveTo(a * 248.5, a * 301.546875, a * 239.5, a * 310.546875, a * 224.5, a * 324.546875);
            d.bezierCurveTo(a * 211.5, a * 304.546875, a * 199.5, a * 301.546875, a * 176.5, a * 309.546875);
            d.bezierCurveTo(a * 165.5, a * 276.546875, a * 159.5, a * 275.546875, a * 138.5, a * 274.546875);
            d.bezierCurveTo(a * 148.5, a * 248.546875, a * 140.5, a * 237.546875, a * 125.5, a * 225.546875);
            d.bezierCurveTo(a * 145.5, a * 205.546875, a * 146.5, a * 195.546875, a * 142.5, a * 176.546875);
            d.bezierCurveTo(a * 173.5, a * 164.546875, a * 173.5, a * 155.546875, a * 178.5, a * 140.546875);
            d.bezierCurveTo(a * 214.5, a * 143.546875, a * 214.5, a * 135.546875, a * 226.5, a * 129.546875);
            d.closePath();
            wt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 160.546875);
            d.bezierCurveTo(a * 236.5, a * 168.546875, a * 239.5, a * 168.546875, a * 258.5, a * 168.546875);
            d.bezierCurveTo(a * 261.5, a * 185.546875, a * 268.5, a * 187.546875, a * 282.5, a * 192.546875);
            d.bezierCurveTo(a * 277.5, a * 208.546875, a * 283.5, a * 216.546875, a * 289.5, a * 228.546875);
            d.bezierCurveTo(a * 277.5, a * 243.546875, a * 280.5, a * 253.546875, a * 281.5, a * 260.546875);
            d.bezierCurveTo(a * 264.5, a * 260.546875, a * 259.5, a * 269.546875, a * 256.5, a * 283.546875);
            d.bezierCurveTo(a * 244.5, a * 276.546875, a * 232.5, a * 283.546875, a * 223.5, a * 291.546875);
            d.bezierCurveTo(a * 213.5, a * 276.546875, a * 205.5, a * 278.546875, a * 190.5, a * 281.546875);
            d.bezierCurveTo(a * 181.5, a * 262.546875, a * 173.5, a * 259.546875, a * 165.5, a * 258.546875);
            d.bezierCurveTo(a * 169.5, a * 239.546875, a * 167.5, a * 233.546875, a * 157.5, a * 225.546875);
            d.bezierCurveTo(a * 169.5, a * 208.546875, a * 170.5, a * 203.546875, a * 168.5, a * 192.546875);
            d.bezierCurveTo(a * 181.5, a * 187.546875, a * 188.5, a * 179.546875, a * 192.5, a * 168.546875);
            d.bezierCurveTo(a * 216.5, a * 170.546875, a * 218.5, a * 163.546875, a * 225.5, a * 160.546875);
            d.closePath();
            wt(d, Hq, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 205.5, a * 194.546875);
            d.bezierCurveTo(a * 216.5, a * 192.546875, a * 219.5, a * 191.546875, a * 225.5, a * 185.546875);
            d.bezierCurveTo(a * 232.5, a * 193.546875, a * 237.5, a * 191.546875, a * 246.5, a * 192.546875);
            d.bezierCurveTo(a * 249.5, a * 202.546875, a * 253.5, a * 205.546875, a * 258.5, a * 207.546875);
            d.bezierCurveTo(a * 259.5, a * 222.546875, a * 256.5, a * 223.546875, a * 265.5, a * 226.546875);
            d.bezierCurveTo(a * 256.5, a * 231.546875, a * 255.5, a * 241.546875, a * 259.5, a * 248.546875);
            d.bezierCurveTo(a * 250.5, a * 245.546875, a * 245.5, a * 252.546875, a * 243.5, a * 260.546875);
            d.bezierCurveTo(a * 234.5, a * 256.546875, a * 229.5, a * 258.546875, a * 223.5, a * 265.546875);
            d.bezierCurveTo(a * 218.5, a * 255.546875, a * 213.5, a * 257.546875, a * 204.5, a * 261.546875);
            d.bezierCurveTo(a * 203.5, a * 251.546875, a * 198.5, a * 248.546875, a * 189.5, a * 244.546875);
            d.bezierCurveTo(a * 194.5, a * 237.546875, a * 192.5, a * 231.546875, a * 184.5, a * 225.546875);
            d.bezierCurveTo(a * 191.5, a * 211.546875, a * 192.5, a * 209.546875, a * 190.5, a * 204.546875);
            d.bezierCurveTo(a * 200.5, a * 204.546875, a * 204.5, a * 198.546875, a * 207.5, a * 194.546875);
            d.closePath();
            wt(d, ts, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149.5, a * 93.546875);
            d.bezierCurveTo(a * 287.5, a * 332.546875, a * 226, a * 225.546875, a * 302.5, a * 357.546875);
            d.closePath();
            wt(d, undefined, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 224.5, a * 66.546875);
            d.bezierCurveTo(a * 224.5, a * 223.546875, a * 224.5, a * 223.546875, a * 224.5, a * 380.546875);
            d.closePath();
            wt(d, vk, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 302.5, a * 88.546875);
            d.bezierCurveTo(a * 222.5, a * 227.546875, a * 222.5, a * 227.546875, a * 142.5, a * 366.546875);
            d.closePath();
            wt(d, Go, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 361.5, a * 147.546875);
            d.bezierCurveTo(a * 223, a * 226.546875, a * 223, a * 226.546875, a * 84.5, a * 305.546875);
            d.closePath();
            wt(d, ll, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 379.5, a * 225.546875);
            d.bezierCurveTo(a * 221, a * 225.546875, a * 221, a * 225.546875, a * 62.5, a * 225.546875);
            d.closePath();
            wt(d, xh, b[0], 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 90.5, a * 147.546875);
            d.bezierCurveTo(a * 226.5, a * 226.546875, a * 226.5, a * 226.546875, a * 362.5, a * 305.546875);
            d.closePath();
            wt(d, undefined, b[0], 4);
            return c;
        }(a * 0.6, ["#FFFFFF"]));
        Ⲇᐃ[299] = [];
        Ⲇᐃ[299][Pr.ΔᐃΔ] = Ya(Ib(a * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
        Ⲇᐃ[299][Pr.ΔΔⲆ] = Ya(Ib(a * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
        Ⲇᐃ[10] = [];
        Ⲇᐃ[10][Pr.ΔᐃΔ] = Ya(Fu(a * 0.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
        Ⲇᐃ[10][Pr.ΔΔⲆ] = Ya(Fu(a * 0.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"]));
        Ⲇᐃ[11] = [];
        Ⲇᐃ[11][Pr.ΔᐃΔ] = Ya(mu(a * 0.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
        Ⲇᐃ[11][Pr.ΔΔⲆ] = Ya(mu(a * 0.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"]));
        Ⲇᐃ[40] = [];
        Ⲇᐃ[40][Pr.ΔᐃΔ] = Ya(Nu(a * 0.63, Bs, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
        Ⲇᐃ[40][Pr.ΔΔⲆ] = Ya(Nu(a * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
        Ⲇᐃ[41] = [];
        Ⲇᐃ[41][Pr.ΔᐃΔ] = Ya(Kb(a * 0.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
        Ⲇᐃ[41][Pr.ΔΔⲆ] = Ya(Kb(a * 0.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
        Ⲇᐃ[42] = [];
        Ⲇᐃ[42][Pr.ΔᐃΔ] = Ya(Vb(a * 0.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
        Ⲇᐃ[42][Pr.ΔΔⲆ] = Ya(Vb(a * 0.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
        Ⲇᐃ[716] = [];
        Ⲇᐃ[716][Pr.ΔᐃΔ] = Ya(_m(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
        Ⲇᐃ[716][Pr.ΔΔⲆ] = Ya(_m(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
        Ⲇᐃ[720] = [];
        Ⲇᐃ[720][Pr.ΔᐃΔ] = Ya(hm(a * 0.9, ["#e4c027"]));
        Ⲇᐃ[720][Pr.ΔΔⲆ] = Ya(hm(a * 0.9, ["#D8E57F"]));
        Ⲇᐃ[144] = [];
        Ⲇᐃ[144][Pr.ΔᐃΔ] = Ya(Lm(a * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
        Ⲇᐃ[144][Pr.ΔΔⲆ] = Ya(Lm(a * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
        Ⲇᐃ[722] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 149;
            c.height = a * 356;
            d.save();
            d.translate(a * 74.5, a * 177.5);
            xt(d, a * -57.5, a * -161.5, a * 100, a * 323, a * 10);
            d.restore();
            wt(d, b[0], b[1], a * 4);
            d.save();
            d.translate(a * 74.5, a * 177.5);
            xt(d, a * -57.5, a * 50.5, a * 100, a * 105, a * 10);
            d.restore();
            wt(d, b[6], b[1], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 125);
            d.bezierCurveTo(a * 74.5, a * 125, a * 118, a * 125, a * 118, a * 125);
            d.closePath();
            wt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 120);
            d.bezierCurveTo(a * 74.5, a * 120, a * 74.5, a * 120, a * 118, a * 120);
            d.closePath();
            wt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 228);
            d.bezierCurveTo(a * 75, a * 228.5, a * 118, a * 228.5, a * 118, a * 229);
            d.closePath();
            wt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 224);
            d.bezierCurveTo(a * 75, a * 224, a * 118, a * 224, a * 118, a * 224);
            d.closePath();
            wt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 72, a * 68.5);
            xt(d, a * -41.5, a * -36.5, a * 73, a * 73, a * 13);
            d.restore();
            wt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 175.5);
            xt(d, a * -41.5, a * -38.5, a * 73, a * 73, a * 13);
            d.restore();
            wt(d, b[4]);
            d.save();
            d.translate(a * 72, a * 279.5);
            xt(d, a * -41.5, a * -40.5, a * 73, a * 73, a * 13);
            d.restore();
            wt(d, b[4]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 338);
            d.bezierCurveTo(a * 75, a * 338, a * 118, a * 338, a * 118, a * 338);
            d.closePath();
            wt(d, b[2], b[2], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 16, a * 333);
            d.bezierCurveTo(a * 75, a * 333, a * 118, a * 333, a * 118, a * 333);
            d.closePath();
            wt(d, b[3], b[3], a * 10);
            return c;
        }(a * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
        Ⲇᐃ[407] = [];
        Ⲇᐃ[407][Pr.ΔᐃΔ] = Ya(Zt(a * 0.5, Bs, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
        Ⲇᐃ[407][Pr.ΔΔⲆ] = Ya(Zt(a * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
        Ⲇᐃ[119] = [];
        Ⲇᐃ[119][Pr.ΔᐃΔ] = Ya(Xt(a * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
        Ⲇᐃ[119][Pr.ΔΔⲆ] = Ya(Xt(a * 0.5, sk, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
        Ⲇᐃ[411] = Ya(function (a, b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            d.width = a * 118;
            d.height = a * 129;
            e.save();
            e.translate(a * 90, a * 90);
            xt(e, a * -86.5, a * -86, a * 110, a * 110, a * 15);
            e.restore();
            wt(e, c[0], c[1], 4);
            return d;
        }(a * 0.8, 0, ["#5f6061", "#939393"]));
        Ⲇᐃ[412] = Ob(1, [{
            f: qb,
            x: 0,
            y: 0,
            a: 1,
            r: Math.PI / 2.5,
            c: ["#4d2d14", "#432516"]
        }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
        Ⲇᐃ[198] = [];
        Ⲇᐃ[198][Pr.ΔᐃΔ] = Ya(eu(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        Ⲇᐃ[198][Pr.ΔΔⲆ] = Ya(eu(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        Ⲇᐃ[913] = [];
        Ⲇᐃ[913][Pr.ΔᐃΔ] = Ya(hu(a * 1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
        Ⲇᐃ[913][Pr.ΔΔⲆ] = Ya(hu(a * 1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
        Ⲇᐃ[18] = [];
        Ⲇᐃ[18][Pr.ΔᐃΔ] = Ya(At(3, bu(a * 0.7, sk, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
        Ⲇᐃ[18][Pr.ΔΔⲆ] = Ya(At(3, bu(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
        Ⲇᐃ[12] = [];
        Ⲇᐃ[12][Pr.ΔᐃΔ] = Ya(At(3, nu(a * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
        Ⲇᐃ[12][Pr.ΔΔⲆ] = Ya(At(3, nu(a * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
        Ⲇᐃ[13] = [];
        Ⲇᐃ[13][Pr.ΔᐃΔ] = Ya(At(3, ku(a * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
        Ⲇᐃ[13][Pr.ΔΔⲆ] = Ya(At(3, ku(a * 0.65, f, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
        Ⲇᐃ[14] = [];
        Ⲇᐃ[14][Pr.ΔᐃΔ] = Ya(At(3, du(a * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
        Ⲇᐃ[14][Pr.ΔΔⲆ] = Ya(At(3, du(a * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
        Ⲇᐃ[15] = [];
        Ⲇᐃ[15][Pr.ΔᐃΔ] = Ya(At(3, iu(a * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
        Ⲇᐃ[15][Pr.ΔΔⲆ] = Ya(At(3, iu(a * 0.67, yj, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
        Ⲇᐃ[33] = [];
        Ⲇᐃ[33][Pr.ΔᐃΔ] = Ya(At(3, au(a * 0.67, Jn, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
        Ⲇᐃ[33][Pr.ΔΔⲆ] = Ya(At(3, au(a * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
        Ⲇᐃ[16] = [];
        Ⲇᐃ[16][Pr.ΔᐃΔ] = Ya(At(3, ju(a * 1, dl, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
        Ⲇᐃ[16][Pr.ΔΔⲆ] = Ya(At(3, ju(a * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
        Ⲇᐃ[35] = [];
        Ⲇᐃ[35][Pr.ΔᐃΔ] = Ya(At(3, uu(a * 1, Oq, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
        Ⲇᐃ[35][Pr.ΔΔⲆ] = Ya(At(3, uu(a * 1, yj, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
        Ⲇᐃ[55] = [];
        Ⲇᐃ[55][Pr.ΔᐃΔ] = Ya(At(3, hc(a * 0.5, ft, ["#0d1b1c", "#939393", "#5f6061"])));
        Ⲇᐃ[55][Pr.ΔΔⲆ] = Ya(At(3, hc(a * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
        Ⲇᐃ[45] = [];
        Ⲇᐃ[45][Pr.ΔᐃΔ] = Ya(At(3, am(a * 1, Ah, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
        Ⲇᐃ[45][Pr.ΔΔⲆ] = Ya(At(3, am(a * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
        Ⲇᐃ[36] = [];
        Ⲇᐃ[36][Pr.ΔᐃΔ] = Ya(At(3, uu(a * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
        Ⲇᐃ[36][Pr.ΔΔⲆ] = Ya(At(3, uu(a * 1, kg, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
        Ⲇᐃ[37] = [];
        Ⲇᐃ[37][Pr.ΔᐃΔ] = Ya(At(3, uu(a * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
        Ⲇᐃ[37][Pr.ΔΔⲆ] = Ya(At(3, uu(a * 1, Jn, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
        Ⲇᐃ[38] = [];
        Ⲇᐃ[38][Pr.ΔᐃΔ] = Ya(At(3, uu(a * 1, Bs, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
        Ⲇᐃ[38][Pr.ΔΔⲆ] = Ya(At(3, uu(a * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
        Ⲇᐃ[148] = [];
        Ⲇᐃ[148][Pr.ΔᐃΔ] = Ya(nm(a * 0.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
        Ⲇᐃ[148][Pr.ΔΔⲆ] = Ya(nm(a * 0.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
        Ⲇᐃ[536] = [];
        Ⲇᐃ[536].push(Ya(nm(a * 0.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
        Ⲇᐃ[536].push(Ya(nm(a * 0.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
        Ⲇᐃ[536].push(Ya(nm(a * 0.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
        Ⲇᐃ[538] = [];
        Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
        Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
        Ⲇᐃ[538].push(Ⲇᐃ[536][0]);
        Ⲇᐃ[158] = [];
        Ⲇᐃ[158][Pr.ΔᐃΔ] = Ya(Dm(a * 0.06, cr, ["#141414", "#c4a23a", "#816511"]));
        Ⲇᐃ[158][Pr.ΔΔⲆ] = Ya(Dm(a * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
        Ⲇᐃ[535] = [];
        Ⲇᐃ[535].push(Ya(Dm(a * 0.08, eh, ["#141414", "#c4a23a", "#816511"])));
        Ⲇᐃ[535].push(Ya(Dm(a * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
        Ⲇᐃ[535].push(Ya(Dm(a * 0.08, El, ["#141414", "#b0902e", "#634d09"])));
        Ⲇᐃ[149] = Ob(1.5, [{
            f: km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#141414", "#178a99", "#0a6372", "#03282e"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        Ⲇᐃ[526] = [];
        Ⲇᐃ[526][Pr.ΔᐃΔ] = Ya(wm(a * 0.8, 0, ["#347f93", "#54a4ba"]));
        Ⲇᐃ[526][Pr.ΔΔⲆ] = Ya(wm(a * 0.8, 0, ["#98ede3", "#94f2e7"]));
        Ⲇᐃ[527] = [];
        Ⲇᐃ[527][Pr.ΔᐃΔ] = Ya(Tm(a * 0.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
        Ⲇᐃ[527][Pr.ΔΔⲆ] = Ya(Tm(a * 0.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
        Ⲇᐃ[528] = [];
        Ⲇᐃ[528][Pr.ΔᐃΔ] = Ya(um(a * 0.8, 0, ["#a9e4ed", "#86d4e0"]));
        Ⲇᐃ[528][Pr.ΔΔⲆ] = Ya(um(a * 0.8, 0, ["#83ddd4", "#485e66"]));
        Ⲇᐃ[151] = [];
        Ⲇᐃ[151][Pr.ΔᐃΔ] = Ya(pm(a * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
        Ⲇᐃ[151][Pr.ΔΔⲆ] = Ya(pm(a * 0.8, ft, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
        Ⲇᐃ[1192] = [];
        Ⲇᐃ[1192][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⲆᐃⲆΔⵠΔ;
        Ⲇᐃ[1192][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔΔⵠᐃⵠⵠ;
        Ⲇᐃ[1193] = [];
        Ⲇᐃ[1193][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⲆΔΔⲆⲆⵠ;
        Ⲇᐃ[1193][Pr.ΔΔⲆ] = ⵠⵠ.ⲆΔⵠⵠᐃⲆᐃ;
        Ⲇᐃ[1194] = [];
        Ⲇᐃ[1194][Pr.ΔᐃΔ] = ⵠⵠ.ⲆΔΔᐃⲆⵠᐃ;
        Ⲇᐃ[1194][Pr.ΔΔⲆ] = ⵠⵠ.Ⲇⵠⵠᐃᐃⵠⵠ;
        Ⲇᐃ[152] = [];
        Ⲇᐃ[152][Pr.ΔᐃΔ] = ⵠⵠ.ᐃΔΔⲆⲆΔⵠ;
        Ⲇᐃ[152][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⲆΔΔⲆⵠ;
        Ⲇᐃ[1198] = [];
        Ⲇᐃ[1198][Pr.ΔᐃΔ] = ⵠⵠ.ΔᐃΔⲆⵠⵠᐃ;
        Ⲇᐃ[1198][Pr.ΔΔⲆ] = ⵠⵠ.ΔᐃⵠⵠⵠΔⲆ;
        Ⲇᐃ[153] = [];
        Ⲇᐃ[153][Pr.ΔᐃΔ] = ⵠⵠ.ΔᐃΔᐃΔⵠΔ;
        Ⲇᐃ[153][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⵠⵠⲆⵠᐃΔ;
        Ⲇᐃ[1202] = [];
        Ⲇᐃ[1202][Pr.ΔᐃΔ] = ⵠⵠ.ΔΔⵠⵠⵠΔⵠ;
        Ⲇᐃ[1202][Pr.ΔΔⲆ] = ⵠⵠ.ᐃΔⵠⵠⲆⵠⵠ;
        Ⲇᐃ[154] = [];
        Ⲇᐃ[154][Pr.ΔᐃΔ] = ⵠⵠ.ⵠⵠΔΔᐃᐃΔ;
        Ⲇᐃ[154][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠⵠᐃⲆⲆᐃ;
        Ⲇᐃ[1206] = [];
        Ⲇᐃ[1206][Pr.ΔᐃΔ] = ⵠⵠ.ΔⲆΔⲆⵠⲆΔ;
        Ⲇᐃ[1206][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔⵠⵠⵠᐃⲆ;
        Ⲇᐃ[155] = [];
        Ⲇᐃ[155][Pr.ΔᐃΔ] = ⵠⵠ.ᐃᐃⵠⲆⵠΔⲆ;
        Ⲇᐃ[155][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⵠᐃΔⵠⵠⵠ;
        Ⲇᐃ[1210] = [];
        Ⲇᐃ[1210][Pr.ΔᐃΔ] = ⵠⵠ.ⲆⵠᐃΔⵠⵠⲆ;
        Ⲇᐃ[1210][Pr.ΔΔⲆ] = ⵠⵠ.ΔΔΔⲆΔΔᐃ;
        Ⲇᐃ[156] = [];
        Ⲇᐃ[156][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠΔΔΔⵠⵠ;
        Ⲇᐃ[156][Pr.ΔΔⲆ] = ⵠⵠ.ⵠⲆⵠⵠΔᐃⲆ;
        Ⲇᐃ[1214] = [];
        Ⲇᐃ[1214][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠᐃⲆⵠⵠᐃ;
        Ⲇᐃ[1214][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃΔΔⵠᐃᐃ;
        Ⲇᐃ[157] = [];
        Ⲇᐃ[157][Pr.ΔᐃΔ] = ⵠⵠ.ΔⵠΔΔᐃⲆΔ;
        Ⲇᐃ[157][Pr.ΔΔⲆ] = ⵠⵠ.ᐃᐃⲆᐃΔΔⲆ;
        Ⲇᐃ[245] = [];
        Ⲇᐃ[245][Pr.ΔᐃΔ] = ⵠⵠ.ᐃⵠΔⵠΔⲆΔ;
        Ⲇᐃ[245][Pr.ΔΔⲆ] = ⵠⵠ.ⲆⲆⲆⲆⵠⵠᐃ;
        Ⲇᐃ[246] = ⵠⵠ.ᐃⵠⲆⵠⵠⲆⲆ;
        Ⲇᐃ[159] = [];
        Ⲇᐃ[159][Pr.ΔᐃΔ] = Ya(Om(a * 0.75, Wa, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
        Ⲇᐃ[159][Pr.ΔΔⲆ] = Ya(Om(a * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
        Ⲇᐃ[558] = Ya(ym(a * 0.3, ["#092813", "#1f773d"], 0));
        Ⲇᐃ[559] = Ya(ym(a * 0.3, ["#092813", "#1f773d"], 1));
        Ⲇᐃ[885] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 60;
            c.height = a * 60;
            d.translate(a * -25, a * -25);
            d.translate(0, a * 5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            wt(d, b[0]);
            d.translate(0, a * -5);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 24, a * 50);
            d.bezierCurveTo(a * 32.5, a * 54.5, a * 32.5, a * 54.5, a * 41, a * 59);
            d.bezierCurveTo(a * 57, a * 47, a * 57, a * 47, a * 73, a * 35);
            d.bezierCurveTo(a * 57, a * 53, a * 57, a * 53, a * 41, a * 71);
            d.closePath();
            wt(d, b[1]);
            return c;
        }(a * 0.6, ["#092813", "#1f773d"]));
        Ⲇᐃ[556] = [];
        Ⲇᐃ[556].push(Ya(Cm(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
        Ⲇᐃ[556].push(Ya(Cm(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
        Ⲇᐃ[556].push(Ya(Cm(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
        Ⲇᐃ[560] = [];
        var c = Ya(Cm(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
        Ⲇᐃ[560].push(c);
        Ⲇᐃ[560].push(c);
        Ⲇᐃ[560].push(c);
        Ⲇᐃ[557] = [];
        Ⲇᐃ[557].push(Ya(Cm(a * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
        Ⲇᐃ[557].push(Ya(Cm(a * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
        Ⲇᐃ[557].push(Ya(Cm(a * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
        Ⲇᐃ[681] = Ya(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 170;
            var g = b * 172;
            var a = f / 2;
            var i = g / 2;
            d.width = f;
            d.height = g;
            e.translate(a, i);
            e.save();
            for (var j = 0; j < 10; j++) {
                e.rotate(Math.PI / 5);
                e.save();
                e.translate(b * 65, 0);
                Bt(e, 3, b * 18, b * 4);
                wt(e, c[0]);
                e.restore();
            }
            e.restore();
            zt(e, 0, 0, b * 40);
            wt(e, vk, c[0], b * 6);
            zt(e, 0, 0, b * 20);
            wt(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        Ⲇᐃ[794] = Ya(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 130;
            var g = b * 142;
            var a = f / 2;
            var h = g / 2;
            d.width = f;
            d.height = g;
            zt(e, a, h, b * 40);
            wt(e, undefined, c[0], b * 7);
            zt(e, a, h, b * 30);
            wt(e, Hq, c[0], b * 7);
            zt(e, a, h, b * 20);
            wt(e, c[0]);
            return d;
        }(a * 0.3, ["#FFFFFF"]));
        Ⲇᐃ[562] = Ya(ym(a * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
        Ⲇᐃ[667] = Ya(At(Math.PI / 5, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 316;
            c.height = a * 365;
            d.save();
            d.translate(a * 156.07142639160156, a * 51.81248474121094);
            d.rotate(0);
            xt(d, a * -21.5, a * -34, a * 43, a * 68, a * 8);
            d.restore();
            wt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 126.57142639160156, a * 67.38392639160156);
            d.bezierCurveTo(a * 126.57142639160156, a * 57.38392639160156, a * 132.57142639160156, a * 54.38392639160156, a * 140.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 55.38392639160156, a * 158.07142639160156, a * 54.38392639160156, a * 175.57142639160156, a * 54.38392639160156);
            d.bezierCurveTo(a * 185.57142639160156, a * 56.38392639160156, a * 185.57142639160156, a * 57.38392639160156, a * 184.57142639160156, a * 66.38392639160156);
            d.bezierCurveTo(a * 184.57142639160156, a * 78.38392639160156, a * 184.57142639160156, a * 89.38392639160156, a * 184.57142639160156, a * 90.38392639160156);
            d.bezierCurveTo(a * 177.57142639160156, a * 107.38392639160156, a * 180.57142639160156, a * 112.38392639160156, a * 189.57142639160156, a * 116.38392639160156);
            d.bezierCurveTo(a * 212.57142639160156, a * 127.38392639160156, a * 212.57142639160156, a * 132.38392639160156, a * 211.57142639160156, a * 150.38392639160156);
            d.bezierCurveTo(a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 227.59821128845215, a * 211.57142639160156, a * 304.81249618530273);
            d.bezierCurveTo(a * 212.57142639160156, a * 328.81249618530273, a * 209.57142639160156, a * 330.81249618530273, a * 188.57142639160156, a * 333.81249618530273);
            d.bezierCurveTo(a * 155.07142639160156, a * 333.31249618530273, a * 155.07142639160156, a * 333.31249618530273, a * 121.57142639160156, a * 332.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 327.81249618530273, a * 105.57142639160156, a * 328.81249618530273, a * 104.57142639160156, a * 312.81249618530273);
            d.bezierCurveTo(a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 228.16963958740234, a * 104.57142639160156, a * 143.52678298950195);
            d.bezierCurveTo(a * 106.57142639160156, a * 124.52678298950195, a * 110.57142639160156, a * 123.52678298950195, a * 123.57142639160156, a * 116.52678298950195);
            d.bezierCurveTo(a * 136.57142639160156, a * 110.52678298950195, a * 130.57142639160156, a * 106.52678298950195, a * 126.57142639160156, a * 98.52678298950195);
            d.closePath();
            wt(d, b[0], b[0], a * 15);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125.57142639160156, a * 156.66963958740234);
            d.bezierCurveTo(a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 182.66963958740234, a * 125.57142639160156, a * 208.66963958740234);
            d.closePath();
            wt(d, b[0], b[0], a * 15);
            return c;
        }(a * 0.2, ["#FFFFFF"])));
        Ⲇᐃ[43] = [];
        Ⲇᐃ[43][Pr.ΔᐃΔ] = Ya(Jm(a * 0.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
        Ⲇᐃ[43][Pr.ΔΔⲆ] = Ya(Jm(a * 0.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
        Ⲇᐃ[561] = [];
        Ⲇᐃ[561].push(Ya(Cm(a * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
        Ⲇᐃ[561].push(Ya(Cm(a * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
        Ⲇᐃ[561].push(Ya(Cm(a * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
        Ⲇᐃ[83] = [];
        Ⲇᐃ[83][Pr.ΔᐃΔ] = Ya(Km(a * 0.37, 0, ["#2a2938", "#242330", "#313041"]));
        Ⲇᐃ[83][Pr.ΔΔⲆ] = Ya(Km(a * 0.37, 0, ["#1b1e30", "#161921", "#252f3e"]));
        Ⲇᐃ[85] = [];
        Ⲇᐃ[85][Pr.ΔᐃΔ] = Ya(tc(a * 0.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
        Ⲇᐃ[85][Pr.ΔΔⲆ] = Ya(tc(a * 0.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
        Ⲇᐃ[86] = [];
        Ⲇᐃ[86][Pr.ΔᐃΔ] = Ya(dc(a * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
        Ⲇᐃ[86][Pr.ΔΔⲆ] = Ya(dc(a * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
        Ⲇᐃ[84] = [];
        Ⲇᐃ[84][Pr.ΔᐃΔ] = Ya(dc(a * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
        Ⲇᐃ[84][Pr.ΔΔⲆ] = Ya(dc(a * 0.55, Oq, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
        Ⲇᐃ[77] = [];
        Ⲇᐃ[77][Pr.ΔᐃΔ] = Ya(oc(a * 0.2, Bs, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
        Ⲇᐃ[77][Pr.ΔΔⲆ] = Ya(oc(a * 0.2, kg, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
        Ⲇᐃ[78] = [];
        Ⲇᐃ[78][Pr.ΔᐃΔ] = Ya(oc(a * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
        Ⲇᐃ[78][Pr.ΔΔⲆ] = Ya(oc(a * 0.2, _n, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
        Ⲇᐃ[79] = [];
        Ⲇᐃ[79][Pr.ΔᐃΔ] = Ya(oc(a * 0.2, Bs, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
        Ⲇᐃ[79][Pr.ΔΔⲆ] = Ya(oc(a * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
        Ⲇᐃ[61] = [];
        Ⲇᐃ[61][Pr.ΔᐃΔ] = Ya(lu(a * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
        Ⲇᐃ[61][Pr.ΔΔⲆ] = Ya(lu(a * 0.24, Oq, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
        Ⲇᐃ[59] = [];
        Ⲇᐃ[59][Pr.ΔᐃΔ] = Ya(Ku(a * 0.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
        Ⲇᐃ[59][Pr.ΔΔⲆ] = Ya(Ku(a * 0.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
        Ⲇᐃ[62] = [];
        Ⲇᐃ[62][Pr.ΔᐃΔ] = Ya(At(3, sm(a * 0.9, f, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
        Ⲇᐃ[62][Pr.ΔΔⲆ] = Ya(At(3, sm(a * 0.9, Vl, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
        Ⲇᐃ[750] = [];
        Ⲇᐃ[750][Pr.ΔᐃΔ] = Ya(At(3, sm(a * 1, Oq, [Oo, undefined, ll, "#c8efef", "#c8efef"])));
        Ⲇᐃ[750][Pr.ΔΔⲆ] = Ya(At(3, sm(a * 1, true, [undefined, undefined, Cq, "#87d2e6", "#87d2e6"])));
        Ⲇᐃ[755] = [];
        Ⲇᐃ[755].push(Ya(ic(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
        Ⲇᐃ[755].push(Ya(ic(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
        Ⲇᐃ[755].push(Ya(ic(a * 0.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
        Ⲇᐃ[795] = [];
        Ⲇᐃ[795].push(Ya(Vm(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
        Ⲇᐃ[795].push(Ya(Vm(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        Ⲇᐃ[795].push(Ya(Vm(a * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
        Ⲇᐃ[782] = [];
        Ⲇᐃ[782].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
        Ⲇᐃ[782].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
        Ⲇᐃ[782].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
        Ⲇᐃ[783] = [];
        Ⲇᐃ[783].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
        Ⲇᐃ[783].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
        Ⲇᐃ[783].push(Ya(od(a * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
        Ⲇᐃ[46] = [];
        Ⲇᐃ[46][Pr.ΔᐃΔ] = Ya(At(3, nc(a * 0.7, f, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
        Ⲇᐃ[46][Pr.ΔΔⲆ] = Ya(At(3, nc(a * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
        Ⲇᐃ[50] = [];
        Ⲇᐃ[50][Pr.ΔᐃΔ] = Ya(At(3, nc(a * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
        Ⲇᐃ[50][Pr.ΔΔⲆ] = Ya(At(3, nc(a * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
        Ⲇᐃ[51] = [];
        Ⲇᐃ[51][Pr.ΔᐃΔ] = Ya(At(3, nc(a * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
        Ⲇᐃ[51][Pr.ΔΔⲆ] = Ya(At(3, nc(a * 0.7, kg, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
        Ⲇᐃ[52] = [];
        Ⲇᐃ[52][Pr.ΔᐃΔ] = Ya(At(3, nc(a * 0.7, Vl, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
        Ⲇᐃ[52][Pr.ΔΔⲆ] = Ya(At(3, nc(a * 0.7, Wa, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
        Ⲇᐃ[592] = [];
        Ⲇᐃ[592].push(Ya(xm(a * 0.7, ["#3b330d", "#b5a118", "#c8ac16"])));
        Ⲇᐃ[592].push(Ya(xm(a * 0.7, ["#524712", "#c7b11c", "#d9ba18"])));
        Ⲇᐃ[592].push(Ya(xm(a * 0.7, ["#2a2409", "#9f8e14", "#ad9511"])));
        Ⲇᐃ[326] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 188;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 33.00567626953125, a * 95.44320678710938);
            d.bezierCurveTo(a * 42.00567626953125, a * 87.44320678710938, a * 48.00567626953125, a * 51.443206787109375, a * 74.00567626953125, a * 47.443206787109375);
            d.bezierCurveTo(a * 100.00567626953125, a * 42.443206787109375, a * 118.00567626953125, a * 49.443206787109375, a * 131.00567626953125, a * 55.443206787109375);
            d.bezierCurveTo(a * 140.00567626953125, a * 70.44320678710938, a * 145.00567626953125, a * 87.44320678710938, a * 152.00567626953125, a * 94.44320678710938);
            d.bezierCurveTo(a * 149.00567626953125, a * 99.44320678710938, a * 147.00567626953125, a * 98.44320678710938, a * 141.00567626953125, a * 101.44320678710938);
            d.bezierCurveTo(a * 147.00567626953125, a * 108.44320678710938, a * 147.00567626953125, a * 111.44320678710938, a * 147.00567626953125, a * 112.44320678710938);
            d.bezierCurveTo(a * 143.00567626953125, a * 112.44320678710938, a * 141.00567626953125, a * 112.44320678710938, a * 137.00567626953125, a * 111.44320678710938);
            d.bezierCurveTo(a * 138.00567626953125, a * 117.44320678710938, a * 138.00567626953125, a * 120.44320678710938, a * 138.00567626953125, a * 124.44320678710938);
            d.bezierCurveTo(a * 125.00567626953125, a * 107.44320678710938, a * 121.00567626953125, a * 124.44320678710938, a * 110.00567626953125, a * 141.44320678710938);
            d.bezierCurveTo(a * 102.00567626953125, a * 158.44320678710938, a * 89.00567626953125, a * 158.44320678710938, a * 80.00567626953125, a * 144.44320678710938);
            d.bezierCurveTo(a * 61.00567626953125, a * 111.44320678710938, a * 56.00567626953125, a * 117.44320678710938, a * 48.00567626953125, a * 120.44320678710938);
            d.bezierCurveTo(a * 46.00567626953125, a * 118.44320678710938, a * 47.00567626953125, a * 112.44320678710938, a * 48.00567626953125, a * 107.44320678710938);
            d.bezierCurveTo(a * 43.00567626953125, a * 111.44320678710938, a * 40.00567626953125, a * 111.44320678710938, a * 37.00567626953125, a * 110.44320678710938);
            d.bezierCurveTo(a * 39.50567626953125, a * 104.94320678710938, a * 39.50567626953125, a * 104.94320678710938, a * 42.00567626953125, a * 99.44320678710938);
            d.bezierCurveTo(a * 33.00567626953125, a * 99.44320678710938, a * 33.00567626953125, a * 98.44320678710938, a * 33.00567626953125, a * 96.44320678710938);
            d.closePath();
            wt(d, b[0], b[0], a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 51.00567626953125, a * 72.53409576416016);
            d.bezierCurveTo(a * 48.00567626953125, a * 56.534095764160156, a * 48.00567626953125, a * 49.534095764160156, a * 54.00567626953125, a * 35.534095764160156);
            d.bezierCurveTo(a * 58.00567626953125, a * 26.534095764160156, a * 65.00567626953125, a * 27.534095764160156, a * 73.00567626953125, a * 40.534095764160156);
            d.bezierCurveTo(a * 81.00567626953125, a * 49.534095764160156, a * 82.00567626953125, a * 50.534095764160156, a * 83.00567626953125, a * 51.534095764160156);
            d.bezierCurveTo(a * 77.00567626953125, a * 71.53409576416016, a * 64.00567626953125, a * 75.53409576416016, a * 51.00567626953125, a * 72.53409576416016);
            d.closePath();
            wt(d, b[0], b[0], a * 2);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 105.00567626953125, a * 50.53410339355469);
            d.bezierCurveTo(a * 112.00567626953125, a * 48.53410339355469, a * 125.00567626953125, a * 21.534103393554688, a * 132.00567626953125, a * 33.53410339355469);
            d.bezierCurveTo(a * 138.00567626953125, a * 42.53410339355469, a * 140.00567626953125, a * 64.53410339355469, a * 136.00567626953125, a * 75.53410339355469);
            d.closePath();
            wt(d, b[0], b[0], a * 2);
            return c;
        }(a * 1.1, ["#BB0000"]));
        Ⲇᐃ[333] = Ya(At(Math.PI, function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 238;
            c.height = a * 230;
            d.translate(a * -93, a * -110);
            zt(d, a * 213.5, a * 256.75, a * 75);
            wt(d, b);
            zt(d, a * 213.5, a * 175.75, a * 25);
            wt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 156.5, a * 137.75);
            d.bezierCurveTo(a * 170.5, a * 173.75, a * 195.5, a * 177.75, a * 209.5, a * 177.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217.5, a * 178.75);
            d.bezierCurveTo(a * 251.5, a * 177.75, a * 263.5, a * 153.75, a * 270.5, a * 140.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 130.5, a * 124.75);
            d.bezierCurveTo(a * 153.5, a * 185.75, a * 198.5, a * 185.75, a * 213.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 183.75);
            d.bezierCurveTo(a * 265.5, a * 192.75, a * 293.5, a * 141.75, a * 297.5, a * 124.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107.5, a * 213.75);
            d.bezierCurveTo(a * 151.5, a * 190.75, a * 198.5, a * 184.75, a * 210.5, a * 184.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 212.5, a * 187.75);
            d.bezierCurveTo(a * 258.5, a * 182.75, a * 286.5, a * 194.75, a * 314.5, a * 206.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 102.5, a * 258.75);
            d.bezierCurveTo(a * 142.5, a * 200.75, a * 193.5, a * 194.75, a * 211.5, a * 185.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 214.5, a * 192.75);
            d.bezierCurveTo(a * 276.5, a * 194.75, a * 306.5, a * 233.75, a * 316.5, a * 246.75);
            d.lineWidth = a * 17;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 219.5, a * 158.75);
            d.bezierCurveTo(a * 226.5, a * 159.75, a * 227.5, a * 147.75, a * 219.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 210.5, a * 160.75);
            d.bezierCurveTo(a * 203.5, a * 159.75, a * 199.5, a * 146.75, a * 210.5, a * 145.75);
            d.closePath();
            d.lineWidth = a * 10;
            d.strokeStyle = b;
            d.stroke();
            return c;
        }(a * 0.9, "#BB0000")));
        Ⲇᐃ[23] = [];
        Ⲇᐃ[23][Pr.ΔᐃΔ] = Ya(dm(a * 0.55, yj, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
        Ⲇᐃ[23][Pr.ΔΔⲆ] = Ya(dm(a * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
        Ⲇᐃ[58] = [];
        Ⲇᐃ[58][Pr.ΔᐃΔ] = Ya(qm(a * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
        Ⲇᐃ[58][Pr.ΔΔⲆ] = Ya(qm(a * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
        Ⲇᐃ[25] = [];
        Ⲇᐃ[25][Pr.ΔᐃΔ] = Ya(gm(a * 0.6, ft, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
        Ⲇᐃ[25][Pr.ΔΔⲆ] = Ya(gm(a * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
        Ⲇᐃ[26] = [];
        Ⲇᐃ[26][Pr.ΔᐃΔ] = Ya(rm(a * 0.58, 0, ["#dbce71", "#b29c32", "#c4bc51"]));
        Ⲇᐃ[26][Pr.ΔΔⲆ] = Ya(rm(a * 0.58, 0, ["#2b7c57", "#15543c", "#1a7961"]));
        Ⲇᐃ[27] = [];
        Ⲇᐃ[27][Pr.ΔᐃΔ] = Ya(jm(a * 0.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
        Ⲇᐃ[27][Pr.ΔΔⲆ] = Ya(jm(a * 0.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
        Ⲇᐃ[413] = [];
        Ⲇᐃ[413][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[413][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[413][Pr.ΔᐃΔ].push(Ya(qu(a * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
        Ⲇᐃ[413][Pr.ΔᐃΔ].push(Ya(Hu(a * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
        Ⲇᐃ[413][Pr.ΔᐃΔ].push(Ya(su(a * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
        Ⲇᐃ[413][Pr.ΔΔⲆ].push(Ya(qu(a * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
        Ⲇᐃ[413][Pr.ΔΔⲆ].push(Ya(Hu(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
        Ⲇᐃ[413][Pr.ΔΔⲆ].push(Ya(su(a * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
        Ⲇᐃ[449] = [];
        Ⲇᐃ[449][Pr.ΔᐃΔ] = Ya(Rm(a * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
        Ⲇᐃ[449][Pr.ΔΔⲆ] = Ya(Rm(a * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
        Ⲇᐃ[451] = [];
        Ⲇᐃ[451][Pr.ΔᐃΔ] = Ya(Gm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        Ⲇᐃ[451][Pr.ΔΔⲆ] = Ya(Gm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        Ⲇᐃ[452] = [];
        Ⲇᐃ[452][Pr.ΔᐃΔ] = Ya(Bm(a * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
        Ⲇᐃ[452][Pr.ΔΔⲆ] = Ya(Bm(a * 1, ["#050505", "#327570", "#021724", "#200333"]));
        Ⲇᐃ[243] = [];
        Ⲇᐃ[243][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[243][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[243][Pr.ΔᐃΔ] = [ⵠⵠ.ΔᐃⵠΔΔⲆᐃ, ⵠⵠ.ΔⲆⵠⵠΔΔⵠ, ⵠⵠ.ΔⲆⵠⵠΔⵠⵠ, ⵠⵠ.ᐃⲆΔⲆΔⲆΔ, ⵠⵠ.ⲆⵠⵠΔⲆⲆⲆ, ⵠⵠ.ᐃⵠⲆΔΔⵠⵠ, ⵠⵠ.ᐃᐃΔᐃⵠⲆⲆ, ⵠⵠ.ΔᐃⲆᐃⲆⲆⵠ, ⵠⵠ.ⵠⲆᐃⵠᐃᐃⲆ, ⵠⵠ.ᐃΔΔΔⲆⵠⵠ, ⵠⵠ.ⲆΔⵠⵠΔⵠⲆ, ⵠⵠ.ΔⵠⲆⲆΔᐃΔ, ⵠⵠ.ⲆᐃⲆⲆᐃᐃᐃ, ⵠⵠ.ΔΔⲆΔΔΔⵠ, ⵠⵠ.ⲆⲆⵠᐃⵠⲆᐃ, ⵠⵠ.ⲆᐃΔᐃᐃⲆᐃ, ⵠⵠ.ᐃΔⵠⲆⵠⵠⵠ, ⵠⵠ.ⵠⲆᐃⲆⵠⲆΔ, ⵠⵠ.ⲆᐃΔΔⲆᐃΔ, ⵠⵠ.ΔΔⵠᐃⵠⲆⵠ, ⵠⵠ.ⵠⲆΔⲆⵠⲆᐃ, ⵠⵠ.ⵠΔⲆΔᐃⵠⵠ, ⵠⵠ.ⲆⲆⲆᐃⵠⵠⲆ, ⵠⵠ.ⵠⵠΔⲆⲆⵠΔ, ⵠⵠ.ⲆᐃᐃⲆⵠⵠⲆ, ⵠⵠ.ΔᐃᐃⲆⲆⵠⵠ, ⵠⵠ.ⵠⲆΔᐃΔⵠⲆ, ⵠⵠ.ⵠᐃΔΔᐃⲆΔ, ⵠⵠ.ΔΔᐃΔⲆⲆⲆ, ⵠⵠ.ⲆⵠⲆⲆΔΔⵠ, ⵠⵠ.ᐃΔⲆᐃⵠΔᐃ, ⵠⵠ.ᐃⲆⲆᐃⵠΔᐃ, ⵠⵠ.ᐃᐃⲆᐃΔⲆⲆ, ⵠⵠ.ᐃΔᐃᐃΔⲆᐃ, ⵠⵠ.ΔΔΔⵠⵠⲆΔ, ⵠⵠ.ⲆⲆΔΔΔΔⲆ, ⵠⵠ.ΔⲆⵠΔΔⵠᐃ, ⵠⵠ.ΔⵠᐃⵠⵠⲆⵠ, ⵠⵠ.ΔᐃᐃⵠⲆⵠΔ, ⵠⵠ.ᐃⲆΔᐃⵠⲆᐃ, ⵠⵠ.ⵠᐃⲆⲆᐃᐃᐃ, ⵠⵠ.ⲆⲆⵠΔΔᐃᐃ, ⵠⵠ.ⵠΔΔΔᐃΔⲆ, ⵠⵠ.ᐃΔΔⲆⲆⵠⵠ, ⵠⵠ.ᐃⲆᐃᐃΔⲆⵠ, ⵠⵠ.ⲆⲆⵠΔᐃΔⲆ, ⵠⵠ.ⲆΔᐃⲆⲆⲆᐃ, ⵠⵠ.ⲆⲆⵠⵠⵠⲆⲆ, ⵠⵠ.ⵠⲆΔᐃⲆᐃⲆ, ⵠⵠ.ᐃᐃⵠⵠⵠᐃⲆ, ⵠⵠ.ⲆⵠⲆᐃᐃⲆᐃ, ⵠⵠ.ⵠΔΔᐃⲆⵠΔ, ⵠⵠ.ΔⵠᐃⲆⵠⲆⲆ, ⵠⵠ.ᐃᐃᐃⵠⵠⵠⲆ, ⵠⵠ.ᐃᐃⲆΔΔᐃⵠ, ⵠⵠ.ⲆᐃᐃⵠᐃⲆᐃ];
        Ⲇᐃ[243][Pr.ΔΔⲆ] = [ⵠⵠ.ΔⵠᐃᐃᐃΔⵠ, ⵠⵠ.ᐃᐃⲆᐃⲆⲆⵠ, ⵠⵠ.ⵠΔᐃᐃᐃⲆΔ, ⵠⵠ.ⵠⵠⵠⲆᐃᐃⲆ, ⵠⵠ.ᐃᐃᐃᐃⲆΔᐃ, ⵠⵠ.ⲆⲆΔⵠⲆΔΔ, ⵠⵠ.ΔΔᐃᐃᐃⲆᐃ, ⵠⵠ.ᐃᐃⲆⵠΔⵠⵠ, ⵠⵠ.ⲆᐃΔⲆᐃᐃΔ, ⵠⵠ.ΔΔⲆᐃⲆⲆⲆ, ⵠⵠ.ⵠⲆⵠᐃΔΔⵠ, ⵠⵠ.ⵠⵠΔΔⵠᐃᐃ, ⵠⵠ.ⲆⲆⲆᐃⵠⵠΔ, ⵠⵠ.ⵠΔⲆᐃᐃⵠⲆ, ⵠⵠ.ΔᐃⲆⵠᐃΔⲆ, ⵠⵠ.ⲆⲆⲆⲆᐃⵠᐃ, ⵠⵠ.ᐃᐃΔⵠΔᐃᐃ, ⵠⵠ.ⵠᐃᐃⵠᐃΔⵠ, ⵠⵠ.ⵠⵠⵠᐃⵠⵠⵠ, ⵠⵠ.ⲆⵠᐃⲆᐃⵠⲆ, ⵠⵠ.ⲆⵠⵠᐃΔΔⵠ, ⵠⵠ.ΔⵠⲆᐃⵠᐃΔ, ⵠⵠ.ⲆⵠⲆΔⲆΔⲆ, ⵠⵠ.ⵠⲆⲆᐃΔΔⵠ, ⵠⵠ.ⵠⵠΔΔᐃⲆᐃ, ⵠⵠ.ⲆᐃⲆⲆᐃⲆᐃ, ⵠⵠ.ΔⲆᐃⵠⵠΔⲆ, ⵠⵠ.ΔⲆᐃᐃⲆΔᐃ, ⵠⵠ.ᐃᐃᐃⵠΔⲆⲆ, ⵠⵠ.ⵠⲆⵠᐃⵠⲆΔ, ⵠⵠ.ⵠⵠⵠΔᐃΔⵠ, ⵠⵠ.ᐃⲆᐃᐃΔᐃΔ, ⵠⵠ.ᐃΔⵠⵠⵠⲆⵠ, ⵠⵠ.ΔⲆΔᐃΔΔᐃ, ⵠⵠ.ᐃΔⲆⲆᐃΔΔ, ⵠⵠ.ΔᐃᐃⲆⲆᐃⵠ, ⵠⵠ.ⵠⵠⵠⲆⲆⲆⵠ, ⵠⵠ.ⲆⵠΔᐃⵠⲆΔ, ⵠⵠ.ⲆⲆⵠᐃⲆⲆⵠ, ⵠⵠ.ΔⲆᐃᐃΔΔⵠ, ⵠⵠ.ⲆⲆⵠⵠΔⲆⲆ, ⵠⵠ.ⲆⵠΔⵠⲆⵠⲆ, ⵠⵠ.ᐃᐃΔΔⵠⵠⲆ, ⵠⵠ.ⲆᐃΔΔᐃᐃΔ, ⵠⵠ.ⵠⵠⵠᐃⲆΔⲆ, ⵠⵠ.ᐃᐃⲆⵠᐃᐃᐃ, ⵠⵠ.ΔⲆᐃⲆᐃⵠΔ, ⵠⵠ.ⵠⲆⵠⲆⵠⵠⵠ, ⵠⵠ.ᐃⲆⲆᐃⵠᐃⲆ, ⵠⵠ.ᐃⲆⲆⵠⲆᐃⵠ, ⵠⵠ.ⲆΔⲆⵠΔᐃⲆ, ⵠⵠ.ΔᐃⵠᐃᐃΔΔ, ⵠⵠ.ΔΔⵠᐃΔᐃΔ, ⵠⵠ.ᐃᐃⲆᐃᐃᐃⵠ, ⵠⵠ.ΔΔᐃⵠⲆⲆᐃ, ⵠⵠ.ΔⲆⲆⲆⲆⲆᐃ];
        Ⲇᐃ[676] = [];
        Ⲇᐃ[676][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[676][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[676][Pr.ΔᐃΔ].push(Ya(Qd(a * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
        Ⲇᐃ[676][Pr.ΔᐃΔ].push(Ya(Qd(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
        Ⲇᐃ[676][Pr.ΔᐃΔ].push(Ya(Qd(a * 1, El, ["#252B28", "#747471", "#83827e"], 2)));
        Ⲇᐃ[676][Pr.ΔᐃΔ].push(Ya(Qd(a * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
        Ⲇᐃ[676][Pr.ΔΔⲆ].push(Ya(Qd(a * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
        Ⲇᐃ[676][Pr.ΔΔⲆ].push(Ya(Qd(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
        Ⲇᐃ[676][Pr.ΔΔⲆ].push(Ya(Qd(a * 1, Ui, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[676][Pr.ΔΔⲆ].push(Ya(Qd(a * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[679] = [];
        Ⲇᐃ[679][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[679][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[679][Pr.ΔᐃΔ].push(Ya(Qd(a * 1.1, ft, ["#252B28", "#58645F", "#75827D"], 2)));
        Ⲇᐃ[679][Pr.ΔᐃΔ].push(Ya(Qd(a * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
        Ⲇᐃ[679][Pr.ΔᐃΔ].push(Ya(Qd(a * 1, f, ["#252B28", "#58645F", "#75827D"], 2)));
        Ⲇᐃ[679][Pr.ΔᐃΔ].push(Ya(Qd(a * 0.9, Wa, ["#252B28", "#58645F", "#75827D"], 2)));
        Ⲇᐃ[679][Pr.ΔΔⲆ].push(Ya(Qd(a * 1.1, Bs, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[679][Pr.ΔΔⲆ].push(Ya(Qd(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[679][Pr.ΔΔⲆ].push(Ya(Qd(a * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[679][Pr.ΔΔⲆ].push(Ya(Qd(a * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
        Ⲇᐃ[415] = [];
        Ⲇᐃ[415][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[415][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[415][Pr.ΔᐃΔ].push(Ya(qd(a * 1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[415][Pr.ΔᐃΔ].push(Ya(qd(a * 1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[415][Pr.ΔᐃΔ].push(Ya(qd(a * 1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"])));
        Ⲇᐃ[415][Pr.ΔΔⲆ].push(Ya(qd(a * 1.5, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Ⲇᐃ[415][Pr.ΔΔⲆ].push(Ya(qd(a * 1.3, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Ⲇᐃ[415][Pr.ΔΔⲆ].push(Ya(qd(a * 1.1, 0, ["#0a2728", "#3e8989", "#50a09c"])));
        Ⲇᐃ[416] = [];
        Ⲇᐃ[416][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[416][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[416][Pr.ΔᐃΔ].push(Ya(Hd(a * 1.1, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Ⲇᐃ[416][Pr.ΔᐃΔ].push(Ya(Hd(a * 0.9, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Ⲇᐃ[416][Pr.ΔᐃΔ].push(Ya(Hd(a * 0.7, 0, ["#123d38", "#70e0dd", "#95efea"])));
        Ⲇᐃ[416][Pr.ΔΔⲆ].push(Ya(Hd(a * 1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Ⲇᐃ[416][Pr.ΔΔⲆ].push(Ya(Hd(a * 0.9, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Ⲇᐃ[416][Pr.ΔΔⲆ].push(Ya(Hd(a * 0.7, 0, ["#123d38", "#47b2ac", "#5cccc4"])));
        Ⲇᐃ[121] = [];
        Ⲇᐃ[121][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[121][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[121][Pr.ΔᐃΔ].push(Ya(yu(a * 1.7, Ah, ["#1d051e", "#c27add", "#cd98e5"])));
        Ⲇᐃ[121][Pr.ΔᐃΔ].push(Ya(yu(a * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
        Ⲇᐃ[121][Pr.ΔᐃΔ].push(Ya(yu(a * 1.3, tr, ["#1d051e", "#c27add", "#cd98e5"])));
        Ⲇᐃ[121][Pr.ΔΔⲆ].push(Ya(yu(a * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Ⲇᐃ[121][Pr.ΔΔⲆ].push(Ya(yu(a * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Ⲇᐃ[121][Pr.ΔΔⲆ].push(Ya(yu(a * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
        Ⲇᐃ[678] = [];
        Ⲇᐃ[678][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[678][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[678][Pr.ΔᐃΔ].push(Ya(ru(a, ["#2d53c4"])));
        Ⲇᐃ[678][Pr.ΔΔⲆ].push(Ya(ru(a, ["#2d53c4"])));
        Ⲇᐃ[696] = [];
        Ⲇᐃ[696][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[696][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[696][Pr.ΔᐃΔ].push(Ya(ru(a, ["#c4912d"])));
        Ⲇᐃ[696][Pr.ΔΔⲆ].push(Ya(ru(a, ["#c4912d"])));
        Ⲇᐃ[680] = [];
        Ⲇᐃ[680][Pr.ΔᐃΔ] = Ya(Su(a, ["#414040"]));
        Ⲇᐃ[680][Pr.ΔΔⲆ] = Ya(Su(a, ["#153635"]));
        Ⲇᐃ[508] = [];
        Ⲇᐃ[508][Pr.ΔᐃΔ] = Ya(Ut(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Ⲇᐃ[508][Pr.ΔΔⲆ] = Ya(Ut(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Ⲇᐃ[509] = [];
        Ⲇᐃ[509][Pr.ΔᐃΔ] = Ya(Wt(a * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Ⲇᐃ[509][Pr.ΔΔⲆ] = Ya(Wt(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Ⲇᐃ[512] = [];
        Ⲇᐃ[512][Pr.ΔᐃΔ] = Ya(Wt(a * 1, eh, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Ⲇᐃ[512][Pr.ΔΔⲆ] = Ya(Wt(a * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Ⲇᐃ[511] = [];
        Ⲇᐃ[511][Pr.ΔᐃΔ] = Ya(ou(a * 1, oe, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Ⲇᐃ[511][Pr.ΔΔⲆ] = Ya(ou(a * 1, hh, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Ⲇᐃ[510] = [];
        Ⲇᐃ[510][Pr.ΔᐃΔ] = Ya(Vt(a * 1, Bk, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
        Ⲇᐃ[510][Pr.ΔΔⲆ] = Ya(Vt(a * 1, oj, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
        Ⲇᐃ[419] = [];
        Ⲇᐃ[419][Pr.ΔᐃΔ] = Ya(Ru(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
        Ⲇᐃ[419][Pr.ΔΔⲆ] = Ya(Ru(a * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
        Ⲇᐃ[445] = [];
        Ⲇᐃ[445][Pr.ΔᐃΔ] = Ya(bm(a * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
        Ⲇᐃ[445][Pr.ΔΔⲆ] = Ya(bm(a * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
        Ⲇᐃ[259] = [];
        Ⲇᐃ[818] = [];
        Ⲇᐃ[516] = [];
        Ⲇᐃ[819] = [];
        for (b = 0; b < 2; b++) {
            Ⲇᐃ[259][b] = document.createElement("canvas");
            Ⲇᐃ[259][b].width = 193;
            Ⲇᐃ[259][b].height = 193;
            Ⲇᐃ[818][b] = Ⲇᐃ[259][b].getContext("2d");
            Ⲇᐃ[516][b] = document.createElement("canvas");
            Ⲇᐃ[516][b].width = 600;
            Ⲇᐃ[516][b].height = 600;
            Ⲇᐃ[819][b] = Ⲇᐃ[516][b].getContext("2d");
        }
        Ⲇᐃ[475] = [];
        Ⲇᐃ[475][Pr.ΔᐃΔ] = Ya(Su(a, ["#c8e0de"]));
        Ⲇᐃ[475][Pr.ΔΔⲆ] = Ya(Su(a, ["#147071"]));
        Ⲇᐃ[476] = [];
        Ⲇᐃ[476][Pr.ΔᐃΔ] = Ya(Su(a, ["#231912"]));
        Ⲇᐃ[476][Pr.ΔΔⲆ] = Ya(Su(a, ["#021719"]));
        Ⲇᐃ[697] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 253;
            c.height = a * 192;
            d.save();
            d.translate(a * 37, a * 94);
            xt(d, a * -7, a * -20, a * 14, a * 37, a * 20);
            d.restore();
            wt(d, b[0]);
            d.save();
            d.translate(a * 131, a * 94);
            xt(d, a * -84, a * -67, a * 168, a * 134, a * 20);
            d.restore();
            wt(d, b[0], b[0], a * 13);
            d.save();
            d.translate(a * 223, a * 94.5);
            xt(d, a * -5, a * -18.5, a * 10, a * 37, a * 20);
            d.restore();
            wt(d, b[0]);
            d.save();
            d.translate(a * 128.5, a * 170.5);
            xt(d, a * -22.5, a * -6.5, a * 45, a * 13, a * 20);
            d.restore();
            wt(d, b[0]);
            return c;
        }(a * 0.5, ["#BB0000"]));
        Ⲇᐃ[461] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 161;
            c.height = a * 190;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 9, a * 93);
            d.bezierCurveTo(a * 17, a * 95, a * 19, a * 95, a * 21, a * 95);
            d.bezierCurveTo(a * 9, a * 83, a * 17, a * 93, a * 4, a * 76);
            d.bezierCurveTo(a * 11, a * 75, a * 11, a * 75, a * 18, a * 75);
            d.bezierCurveTo(a * 13, a * 67, a * 13, a * 67, a * 7, a * 59);
            d.bezierCurveTo(a * 14, a * 59, a * 14, a * 59, a * 21, a * 59);
            d.bezierCurveTo(a * 46, a * 35, a * 35, a * 45, a * 49, a * 31);
            d.bezierCurveTo(a * 53, a * 24, a * 51, a * 21, a * 51, a * 16);
            d.bezierCurveTo(a * 63, a * 23, a * 63, a * 24, a * 69, a * 29);
            d.bezierCurveTo(a * 76, a * 7, a * 75, a * 11, a * 76, a * 6);
            d.bezierCurveTo(a * 81, a * 12, a * 84, a * 18, a * 89, a * 27);
            d.bezierCurveTo(a * 95, a * 25, a * 100, a * 16, a * 105, a * 14);
            d.bezierCurveTo(a * 103, a * 25, a * 111, a * 33, a * 110, a * 34);
            d.bezierCurveTo(a * 123, a * 48, a * 123, a * 48, a * 136, a * 62);
            d.bezierCurveTo(a * 142, a * 60, a * 147, a * 59, a * 155, a * 58);
            d.bezierCurveTo(a * 147, a * 65, a * 147, a * 65, a * 139, a * 73);
            d.bezierCurveTo(a * 145, a * 73, a * 145, a * 73, a * 151, a * 73);
            d.bezierCurveTo(a * 145, a * 80, a * 145, a * 80, a * 138, a * 87);
            d.bezierCurveTo(a * 144, a * 88, a * 144, a * 88, a * 150, a * 89);
            d.bezierCurveTo(a * 125, a * 103, a * 125, a * 125, a * 113, a * 141);
            d.bezierCurveTo(a * 92, a * 178, a * 85, a * 177, a * 76, a * 178);
            d.bezierCurveTo(a * 64, a * 179, a * 51, a * 164, a * 35, a * 131);
            d.bezierCurveTo(a * 18, a * 95, a * 13, a * 99, a * 8, a * 93);
            d.closePath();
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 25, a * 63);
            d.bezierCurveTo(a * 16, a * 58, a * 17, a * 51, a * 17, a * 33);
            d.bezierCurveTo(a * 19, a * 12, a * 21, a * 12, a * 32, a * 17);
            d.bezierCurveTo(a * 63, a * 31, a * 66, a * 45, a * 66, a * 54);
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 91, a * 53);
            d.bezierCurveTo(a * 91, a * 40, a * 98, a * 33, a * 121, a * 20);
            d.bezierCurveTo(a * 137, a * 12, a * 137, a * 16, a * 139, a * 27);
            d.bezierCurveTo(a * 141, a * 49, a * 140, a * 57, a * 134, a * 64);
            wt(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        Ⲇᐃ[462] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 147;
            c.height = a * 172;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 8, a * 50);
            d.bezierCurveTo(a * 15, a * 16, a * 49, a * 6, a * 67, a * 6);
            d.bezierCurveTo(a * 121, a * 3, a * 128, a * 32, a * 135, a * 48);
            d.bezierCurveTo(a * 146, a * 96, a * 124, a * 131, a * 96, a * 135);
            d.bezierCurveTo(a * 96, a * 158, a * 79, a * 156, a * 75, a * 156);
            d.bezierCurveTo(a * 50, a * 154, a * 53, a * 150, a * 52, a * 135);
            d.bezierCurveTo(a * 2, a * 127, a * 3, a * 87, a * 8, a * 50);
            d.closePath();
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 14, a * 57);
            d.bezierCurveTo(a * 2, a * 50, a * 5, a * 22, a * 24, a * 22);
            d.bezierCurveTo(a * 41, a * 21, a * 54, a * 32, a * 55, a * 48);
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 47);
            d.bezierCurveTo(a * 94, a * 24, a * 116, a * 21, a * 120, a * 20);
            d.bezierCurveTo(a * 144, a * 17, a * 146, a * 52, a * 133, a * 58);
            wt(d, b, b, a * 4);
            return c;
        }(a * 0.9, "#BB0000"));
        Ⲇᐃ[463] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 271;
            c.height = a * 366;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 133, a * 99);
            d.bezierCurveTo(a * 186, a * 123, a * 199, a * 152, a * 209, a * 169);
            d.bezierCurveTo(a * 228, a * 205, a * 224, a * 245, a * 190, a * 276);
            d.bezierCurveTo(a * 161, a * 296, a * 99, a * 292, a * 79, a * 274);
            d.bezierCurveTo(a * 49, a * 253, a * 47, a * 214, a * 50, a * 197);
            d.bezierCurveTo(a * 61, a * 143, a * 102, a * 113, a * 131, a * 99);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 73, a * 270);
            d.bezierCurveTo(a * 79, a * 280, a * 77, a * 280, a * 78, a * 287);
            d.bezierCurveTo(a * 78, a * 290, a * 83, a * 291, a * 82, a * 299);
            d.bezierCurveTo(a * 81, a * 301, a * 87, a * 301, a * 92, a * 314);
            d.bezierCurveTo(a * 94, a * 319, a * 100, a * 321, a * 107, a * 320);
            d.bezierCurveTo(a * 111, a * 323, a * 114, a * 324, a * 119, a * 320);
            d.bezierCurveTo(a * 137, a * 321, a * 146, a * 323, a * 139, a * 320);
            d.bezierCurveTo(a * 141, a * 324, a * 150, a * 324, a * 153, a * 320);
            d.bezierCurveTo(a * 168, a * 319, a * 171, a * 316, a * 173, a * 307);
            d.bezierCurveTo(a * 180, a * 305, a * 180, a * 301, a * 178, a * 296);
            d.bezierCurveTo(a * 183, a * 296, a * 185, a * 289, a * 188, a * 279);
            d.bezierCurveTo(a * 171, a * 286, a * 149, a * 290, a * 132, a * 289);
            d.bezierCurveTo(a * 101, a * 290, a * 86, a * 280, a * 74, a * 271);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 76, a * 252);
            d.bezierCurveTo(a * 85, a * 294, a * 96, a * 314, a * 103, a * 314);
            d.bezierCurveTo(a * 106, a * 316, a * 151, a * 314, a * 156, a * 314);
            d.bezierCurveTo(a * 169, a * 317, a * 182, a * 285, a * 191, a * 256);
            d.bezierCurveTo(a * 134.5, a * 254, a * 134.5, a * 254, a * 78, a * 252);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 84, a * 257);
            d.bezierCurveTo(a * 122, a * 273, a * 146, a * 268, a * 179, a * 261);
            d.bezierCurveTo(a * 190, a * 258, a * 187, a * 266, a * 178, a * 272);
            d.bezierCurveTo(a * 160, a * 284, a * 123, a * 282, a * 100, a * 277);
            d.bezierCurveTo(a * 73, a * 260, a * 79, a * 257, a * 84, a * 257);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 125, a * 65);
            d.bezierCurveTo(a * 133, a * 45, a * 136, a * 42, a * 141, a * 55);
            d.bezierCurveTo(a * 151, a * 96, a * 164, a * 117, a * 175, a * 134);
            d.bezierCurveTo(a * 203, a * 181, a * 207, a * 182, a * 208, a * 215);
            d.bezierCurveTo(a * 206, a * 240, a * 205, a * 246, a * 184, a * 258);
            d.bezierCurveTo(a * 161, a * 267, a * 131, a * 272, a * 86, a * 258);
            d.bezierCurveTo(a * 67, a * 252, a * 68, a * 239, a * 64, a * 216);
            d.bezierCurveTo(a * 62, a * 194, a * 72, a * 169, a * 92, a * 142);
            d.bezierCurveTo(a * 106, a * 121, a * 114, a * 101, a * 125, a * 65);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 115, a * 37);
            d.bezierCurveTo(a * 116, a * 28, a * 119, a * 27, a * 126, a * 37);
            d.bezierCurveTo(a * 134, a * 48, a * 134, a * 49, a * 132, a * 59);
            d.bezierCurveTo(a * 131, a * 67, a * 127, a * 65, a * 120, a * 56);
            d.bezierCurveTo(a * 114, a * 49, a * 113, a * 43, a * 115, a * 38);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 146, a * 34);
            d.bezierCurveTo(a * 152, a * 28, a * 155, a * 27, a * 157, a * 39);
            d.bezierCurveTo(a * 157, a * 45, a * 157, a * 49, a * 150, a * 56);
            d.bezierCurveTo(a * 141, a * 66, a * 138, a * 66, a * 138, a * 57);
            d.bezierCurveTo(a * 137, a * 50, a * 137, a * 47, a * 141, a * 42);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 143, a * 69);
            d.bezierCurveTo(a * 148, a * 56, a * 156, a * 50, a * 158, a * 58);
            d.bezierCurveTo(a * 159, a * 64, a * 160, a * 67, a * 153, a * 77);
            d.bezierCurveTo(a * 148, a * 83, a * 145, a * 84, a * 143, a * 77);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 149, a * 92);
            d.bezierCurveTo(a * 149, a * 89, a * 151, a * 84, a * 156, a * 79);
            d.bezierCurveTo(a * 161, a * 73, a * 163, a * 78, a * 162, a * 86);
            d.bezierCurveTo(a * 161, a * 91, a * 155, a * 99, a * 152, a * 98);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 111, a * 61);
            d.bezierCurveTo(a * 114, a * 51, a * 117, a * 51, a * 124, a * 64);
            d.bezierCurveTo(a * 128, a * 68, a * 128, a * 76, a * 126, a * 79);
            d.bezierCurveTo(a * 123, a * 84, a * 122, a * 82, a * 115, a * 74);
            d.bezierCurveTo(a * 112, a * 67, a * 115, a * 74, a * 115, a * 74);
            d.bezierCurveTo(a * 111, a * 68, a * 111, a * 66, a * 111, a * 62);
            d.closePath();
            wt(d, b[0]);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 107, a * 81);
            d.bezierCurveTo(a * 108, a * 74, a * 112, a * 73, a * 118, a * 84);
            d.bezierCurveTo(a * 122, a * 88, a * 122, a * 93, a * 121, a * 98);
            d.bezierCurveTo(a * 114, a * 98, a * 113, a * 98, a * 109, a * 90);
            d.bezierCurveTo(a * 107, a * 87, a * 106, a * 85, a * 107, a * 82);
            d.closePath();
            wt(d, b[0]);
            return c;
        }(a * 1, ["#BB0000"]));
        Ⲇᐃ[466] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -20, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 50, a * 105);
            d.bezierCurveTo(a * 52, a * 119, a * 64, a * 137, a * 71, a * 146);
            d.bezierCurveTo(a * 71, a * 161, a * 74, a * 169, a * 79, a * 179);
            d.bezierCurveTo(a * 68, a * 192, a * 70, a * 204, a * 69, a * 216);
            d.bezierCurveTo(a * 50, a * 189.5, a * 50, a * 189.5, a * 31, a * 163);
            d.closePath();
            wt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 44, a * 106);
            d.bezierCurveTo(a * 49, a * 90, a * 58, a * 104, a * 51, a * 121);
            d.bezierCurveTo(a * 45, a * 143, a * 41, a * 151, a * 37, a * 162);
            d.bezierCurveTo(a * 48, a * 180, a * 58, a * 188, a * 76, a * 205);
            d.bezierCurveTo(a * 104, a * 209, a * 105, a * 229, a * 92, a * 235);
            d.bezierCurveTo(a * 76, a * 239, a * 75, a * 232, a * 56, a * 213);
            d.bezierCurveTo(a * 31, a * 187, a * 28, a * 176, a * 23, a * 162);
            d.bezierCurveTo(a * 38, a * 131, a * 40, a * 120, a * 44, a * 106);
            d.closePath();
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 30, a * 159);
            d.bezierCurveTo(a * 46, a * 157, a * 59, a * 152, a * 68, a * 148);
            d.bezierCurveTo(a * 63, a * 155, a * 52, a * 160, a * 44, a * 164);
            d.bezierCurveTo(a * 59, a * 169, a * 66, a * 174, a * 75, a * 178);
            d.bezierCurveTo(a * 58, a * 178, a * 49, a * 175, a * 37, a * 174);
            d.closePath();
            wt(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        Ⲇᐃ[467] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 85;
            c.height = a * 145;
            d.translate(a * -165, a * -95);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 217, a * 103);
            d.bezierCurveTo(a * 209, a * 129, a * 203, a * 137, a * 195, a * 146);
            d.bezierCurveTo(a * 195, a * 159, a * 194, a * 167, a * 189, a * 178);
            d.bezierCurveTo(a * 193, a * 186, a * 196, a * 195, a * 198, a * 216);
            d.bezierCurveTo(a * 217.5, a * 189.5, a * 217.5, a * 189.5, a * 237, a * 163);
            d.closePath();
            wt(d, b);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 231, a * 163);
            d.bezierCurveTo(a * 221, a * 139, a * 218, a * 128, a * 215, a * 114);
            d.bezierCurveTo(a * 213, a * 102, a * 220, a * 92, a * 222, a * 107);
            d.bezierCurveTo(a * 224, a * 118, a * 233, a * 138, a * 244, a * 161);
            d.bezierCurveTo(a * 235, a * 188, a * 224, a * 198, a * 204, a * 221);
            d.bezierCurveTo(a * 190, a * 233, a * 190, a * 235, a * 180, a * 235);
            d.bezierCurveTo(a * 167, a * 235, a * 164, a * 216, a * 175, a * 211);
            d.bezierCurveTo(a * 176, a * 208, a * 181, a * 207, a * 191, a * 205);
            d.bezierCurveTo(a * 213, a * 186, a * 218, a * 180, a * 230, a * 163);
            d.closePath();
            wt(d, b, b, a * 4);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 234, a * 154);
            d.bezierCurveTo(a * 227, a * 156, a * 222, a * 156, a * 199, a * 148);
            d.bezierCurveTo(a * 201, a * 151, a * 216, a * 159, a * 224, a * 162);
            d.bezierCurveTo(a * 209, a * 169.5, a * 209, a * 169.5, a * 194, a * 177);
            d.bezierCurveTo(a * 213.5, a * 175, a * 213.5, a * 175, a * 233, a * 173);
            d.closePath();
            wt(d, b);
            return c;
        }(a * 0.8, "#BB0000"));
        Ⲇᐃ[322] = Ya(function (b, c) {
            var d = document.createElement("canvas");
            var e = d.getContext("2d");
            var f = b * 85;
            var g = b * 115;
            var a = b * 4;
            d.width = f;
            d.height = g;
            e.translate(b * -130, b * -60);
            e.globalAlpha = 1;
            e.beginPath();
            e.bezierCurveTo(b * 190, b * 87, b * 201, b * 59, b * 208, b * 64);
            e.bezierCurveTo(b * 213, b * 68, b * 204, b * 93, b * 195, b * 109);
            e.bezierCurveTo(b * 195, b * 109, b * 202, b * 124, b * 191, b * 141);
            e.bezierCurveTo(b * 182, b * 151, b * 164, b * 155, b * 148, b * 144);
            e.bezierCurveTo(b * 136, b * 135, b * 138, b * 111, b * 145, b * 104);
            e.bezierCurveTo(b * 140, b * 92, b * 131, b * 67, b * 138, b * 63);
            e.bezierCurveTo(b * 145, b * 61, b * 153, b * 82, b * 155, b * 96);
            e.bezierCurveTo(b * 167, b * 91, b * 178, b * 92, b * 187, b * 98);
            e.closePath();
            wt(e, c, c, a);
            return d;
        }(a * 0.9, "#BB0000"));
        Ⲇᐃ[279] = Ya(It(a * 0.6, "#BB0000"));
        Ⲇᐃ[280] = Ya(It(a * 0.6, "#1CE7E0"));
        Ⲇᐃ[281] = Ya(It(a * 0.6, "#DBE71C"));
        Ⲇᐃ[308] = Ya(It(a * 0.6, "#00BB00"));
        Ⲇᐃ[602] = [];
        Ⲇᐃ[602][Pr.ΔᐃΔ] = Ya(Su(a, ["#dac291"]));
        Ⲇᐃ[602][Pr.ΔΔⲆ] = Ya(Su(a, ["#0D423D"]));
        Ⲇᐃ[698] = [];
        Ⲇᐃ[698][Pr.ΔᐃΔ] = Ya(Su(a, ["#dac291"]));
        Ⲇᐃ[698][Pr.ΔΔⲆ] = Ya(Su(a, ["#0D423D"]));
        Ⲇᐃ[788] = [];
        Ⲇᐃ[788][Pr.ΔᐃΔ] = Ya(Hm(a * 0.3, io, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
        Ⲇᐃ[788][Pr.ΔΔⲆ] = Ya(Hm(a * 0.3, f, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
        Ⲇᐃ[182] = [];
        Ⲇᐃ[182][Pr.ΔᐃΔ] = Ya(Hm(a * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
        Ⲇᐃ[182][Pr.ΔΔⲆ] = Ya(Hm(a * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
        Ⲇᐃ[127] = [Ya($m(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        Ⲇᐃ[128] = [Ya($m(a, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
        Ⲇᐃ[603] = [];
        Ⲇᐃ[603][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[603][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(Cu(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(tu(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(Lu(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(Pu(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(em(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(Qu(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔᐃΔ].push(Ya(im(a * 1, ["#0B6A84"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(Cu(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(tu(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(Lu(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(Pu(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(em(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(Qu(a * 1, ["#09373F"])));
        Ⲇᐃ[603][Pr.ΔΔⲆ].push(Ya(im(a * 1, ["#09373F"])));
        Ⲇᐃ[692] = [];
        Ⲇᐃ[692][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[692][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[692][Pr.ΔᐃΔ].push(Ya(Du(a * 1.7, ["#FBEFBC"], 0)));
        Ⲇᐃ[692][Pr.ΔᐃΔ].push(Ya(Du(a * 1.9, ["#FBEFBC"], 1)));
        Ⲇᐃ[692][Pr.ΔᐃΔ].push(Ya(Du(a * 1.7, ["#FBEFBC"], 2)));
        Ⲇᐃ[692][Pr.ΔΔⲆ].push(Ya(Du(a * 1.7, ["#0F4C48"], 0)));
        Ⲇᐃ[692][Pr.ΔΔⲆ].push(Ya(Du(a * 1.9, ["#0F4C48"], 1)));
        Ⲇᐃ[692][Pr.ΔΔⲆ].push(Ya(Du(a * 1.7, ["#0F4C48"], 2)));
        Ⲇᐃ[694] = [];
        Ⲇᐃ[694][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[694][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[694][Pr.ΔᐃΔ].push(Ya(Du(a * 1.8, ["#A9D6D3"], 0)));
        Ⲇᐃ[694][Pr.ΔᐃΔ].push(Ya(Du(a * 2, ["#A9D6D3"], 1)));
        Ⲇᐃ[694][Pr.ΔᐃΔ].push(Ya(Du(a * 1.8, ["#A9D6D3"], 2)));
        Ⲇᐃ[694][Pr.ΔΔⲆ].push(Ya(Du(a * 1.8, ["#115E60"], 0)));
        Ⲇᐃ[694][Pr.ΔΔⲆ].push(Ya(Du(a * 2, ["#115E60"], 1)));
        Ⲇᐃ[694][Pr.ΔΔⲆ].push(Ya(Du(a * 1.8, ["#115E60"], 2)));
        Ⲇᐃ[695] = [];
        Ⲇᐃ[695][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[695][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[695][Pr.ΔᐃΔ].push(Ya(Du(a * 1.9, ["#2A8B9B"], 0)));
        Ⲇᐃ[695][Pr.ΔᐃΔ].push(Ya(Du(a * 2.1, ["#2A8B9B"], 1)));
        Ⲇᐃ[695][Pr.ΔᐃΔ].push(Ya(Du(a * 1.9, ["#2A8B9B"], 2)));
        Ⲇᐃ[695][Pr.ΔΔⲆ].push(Ya(Du(a * 1.9, ["#0F464C"], 0)));
        Ⲇᐃ[695][Pr.ΔΔⲆ].push(Ya(Du(a * 2.1, ["#0F464C"], 1)));
        Ⲇᐃ[695][Pr.ΔΔⲆ].push(Ya(Du(a * 1.9, ["#0F464C"], 2)));
        Ⲇᐃ[693] = [];
        Ⲇᐃ[693][Pr.ΔᐃΔ] = [];
        Ⲇᐃ[693][Pr.ΔΔⲆ] = [];
        Ⲇᐃ[693][Pr.ΔᐃΔ].push(Ya(Qt(a * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Ⲇᐃ[693][Pr.ΔᐃΔ].push(Ya(Qt(a * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Ⲇᐃ[693][Pr.ΔᐃΔ].push(Ya(Qt(a * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
        Ⲇᐃ[693][Pr.ΔΔⲆ].push(Ya(Qt(a * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Ⲇᐃ[693][Pr.ΔΔⲆ].push(Ya(Qt(a * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Ⲇᐃ[693][Pr.ΔΔⲆ].push(Ya(Qt(a * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
        Ⲇᐃ[637] = [];
        Ⲇᐃ[637][Pr.ΔᐃΔ] = Ya(Nm(a * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
        Ⲇᐃ[637][Pr.ΔΔⲆ] = Ya(Nm(a * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
        Ⲇᐃ[687] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 376;
            c.height = a * 371;
            d.globalAlpha = 1;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 191.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 215.633544921875, a * 85.98580932617188, a * 187.633544921875, a * 71.98580932617188, a * 202.633544921875, a * 19.985809326171875);
            d.bezierCurveTo(a * 231.633544921875, a * 68.98580932617188, a * 253.633544921875, a * 71.98580932617188, a * 256.633544921875, a * 93.98580932617188);
            d.bezierCurveTo(a * 306.633544921875, a * 64.98580932617188, a * 319.633544921875, a * 61.985809326171875, a * 350.633544921875, a * 58.985809326171875);
            d.bezierCurveTo(a * 280.633544921875, a * 86.98580932617188, a * 281.633544921875, a * 106.98580932617188, a * 268.633544921875, a * 130.98580932617188);
            d.bezierCurveTo(a * 295.633544921875, a * 158.98580932617188, a * 328.633544921875, a * 155.98580932617188, a * 353.633544921875, a * 90.98580932617188);
            d.bezierCurveTo(a * 371.633544921875, a * 158.98580932617188, a * 337.633544921875, a * 210.98580932617188, a * 286.633544921875, a * 209.98580932617188);
            d.bezierCurveTo(a * 323.633544921875, a * 230.98580932617188, a * 317.633544921875, a * 274.9858093261719, a * 356.633544921875, a * 305.9858093261719);
            d.bezierCurveTo(a * 288.633544921875, a * 297.9858093261719, a * 288.633544921875, a * 265.9858093261719, a * 275.633544921875, a * 266.9858093261719);
            d.bezierCurveTo(a * 280.633544921875, a * 294.9858093261719, a * 315.633544921875, a * 306.9858093261719, a * 336.633544921875, a * 316.9858093261719);
            d.bezierCurveTo(a * 295.633544921875, a * 318.9858093261719, a * 264.633544921875, a * 302.9858093261719, a * 254.633544921875, a * 289.9858093261719);
            d.bezierCurveTo(a * 252.633544921875, a * 301.9858093261719, a * 224.633544921875, a * 315.9858093261719, a * 201.633544921875, a * 356.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 313.9858093261719, a * 195.633544921875, a * 308.9858093261719, a * 196.633544921875, a * 307.9858093261719);
            d.bezierCurveTo(a * 197.633544921875, a * 289.9858093261719, a * 207.633544921875, a * 283.9858093261719, a * 195.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 182.633544921875, a * 282.9858093261719, a * 190.633544921875, a * 287.9858093261719, a * 193.633544921875, a * 297.9858093261719);
            d.bezierCurveTo(a * 195.633544921875, a * 306.9858093261719, a * 191.633544921875, a * 334.9858093261719, a * 187.633544921875, a * 354.9858093261719);
            d.bezierCurveTo(a * 165.633544921875, a * 320.9858093261719, a * 138.633544921875, a * 307.9858093261719, a * 135.633544921875, a * 288.9858093261719);
            d.bezierCurveTo(a * 110.633544921875, a * 318.9858093261719, a * 68.633544921875, a * 323.9858093261719, a * 49.633544921875, a * 320.9858093261719);
            d.bezierCurveTo(a * 88.633544921875, a * 308.9858093261719, a * 108.633544921875, a * 284.9858093261719, a * 118.633544921875, a * 258.9858093261719);
            d.bezierCurveTo(a * 86.633544921875, a * 264.9858093261719, a * 75.633544921875, a * 310.9858093261719, a * 19.633544921875, a * 304.9858093261719);
            d.bezierCurveTo(a * 54.633544921875, a * 276.9858093261719, a * 59.633544921875, a * 214.98580932617188, a * 105.633544921875, a * 205.98580932617188);
            d.bezierCurveTo(a * 14.633544921875, a * 201.98580932617188, a * 24.633544921875, a * 141.98580932617188, a * 25.633544921875, a * 82.98580932617188);
            d.bezierCurveTo(a * 49.633544921875, a * 168.98580932617188, a * 87.633544921875, a * 141.98580932617188, a * 112.633544921875, a * 123.98580932617188);
            d.bezierCurveTo(a * 95.633544921875, a * 75.98580932617188, a * 70.633544921875, a * 68.98580932617188, a * 35.633544921875, a * 50.985809326171875);
            d.bezierCurveTo(a * 70.633544921875, a * 53.985809326171875, a * 102.633544921875, a * 65.98580932617188, a * 125.633544921875, a * 84.98580932617188);
            d.bezierCurveTo(a * 133.633544921875, a * 69.98580932617188, a * 166.633544921875, a * 42.985809326171875, a * 176.633544921875, a * 21.985809326171875);
            d.bezierCurveTo(a * 185.633544921875, a * 49.985809326171875, a * 168.633544921875, a * 95.98580932617188, a * 191.633544921875, a * 121.98580932617188);
            d.closePath();
            wt(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.8, ["#B6222A"]));
        Ⲇᐃ[673] = [];
        Ⲇᐃ[673][Pr.ΔᐃΔ] = Ya(cm(a * 0.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
        Ⲇᐃ[673][Pr.ΔΔⲆ] = Ya(cm(a * 0.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
        Ⲇᐃ[688] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 158;
            c.height = a * 201;
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 96.5, a * 76.421875);
            d.bezierCurveTo(a * 100.5, a * 64.421875, a * 103.5, a * 62.421875, a * 110.5, a * 65.421875);
            d.bezierCurveTo(a * 116.5, a * 66.421875, a * 117.5, a * 67.421875, a * 112.5, a * 73.421875);
            d.bezierCurveTo(a * 107, a * 79.921875, a * 107, a * 79.921875, a * 101.5, a * 86.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 61.5, a * 78.421875);
            d.bezierCurveTo(a * 57.5, a * 73.421875, a * 51.5, a * 66.421875, a * 45.5, a * 68.421875);
            d.bezierCurveTo(a * 32.5, a * 73.421875, a * 38.5, a * 75.421875, a * 46.5, a * 81.421875);
            d.bezierCurveTo(a * 51.5, a * 84.921875, a * 51.5, a * 84.921875, a * 56.5, a * 88.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 116.5, a * 127.421875);
            d.bezierCurveTo(a * 124.5, a * 108.421875, a * 129.5, a * 104.421875, a * 141.5, a * 107.421875);
            d.bezierCurveTo(a * 156.5, a * 112.421875, a * 153.5, a * 113.421875, a * 132.5, a * 134.421875);
            d.bezierCurveTo(a * 123.5, a * 141.921875, a * 123.5, a * 141.921875, a * 114.5, a * 149.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 41.5, a * 134.421875);
            d.bezierCurveTo(a * 30.5, a * 119.421875, a * 25.5, a * 111.421875, a * 12.5, a * 115.421875);
            d.bezierCurveTo(a * 4.5, a * 120.421875, a * 4.5, a * 121.421875, a * 26.5, a * 142.421875);
            d.bezierCurveTo(a * 35, a * 149.921875, a * 35, a * 149.921875, a * 43.5, a * 157.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 78.5, a * 51.921875);
            d.bezierCurveTo(a * 99.5, a * 75.921875, a * 110.5, a * 96.921875, a * 118.5, a * 120.921875);
            d.bezierCurveTo(a * 121.5, a * 140.921875, a * 107.5, a * 179.921875, a * 75.5, a * 183.921875);
            d.bezierCurveTo(a * 30.5, a * 169.921875, a * 37.5, a * 131.921875, a * 34.5, a * 120.921875);
            d.bezierCurveTo(a * 41.5, a * 89.921875, a * 61.5, a * 67.921875, a * 78.5, a * 51.921875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 42.5, a * 163.421875);
            d.bezierCurveTo(a * 62.5, a * 185.421875, a * 86.5, a * 186.421875, a * 111.5, a * 165.421875);
            d.bezierCurveTo(a * 107.5, a * 176.421875, a * 95.5, a * 187.421875, a * 75.5, a * 188.421875);
            d.bezierCurveTo(a * 53.5, a * 188.421875, a * 43.5, a * 171.421875, a * 42.5, a * 164.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 79.5, a * 61.421875);
            d.bezierCurveTo(a * 88.5, a * 31.421875, a * 81.5, a * 16.421875, a * 75.5, a * 7.421875);
            d.bezierCurveTo(a * 77.5, a * 28.421875, a * 77.5, a * 37.421875, a * 68.5, a * 42.421875);
            d.bezierCurveTo(a * 79.5, a * 57.421875, a * 79.5, a * 58.421875, a * 80.5, a * 61.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 72.5, a * 72.421875);
            d.bezierCurveTo(a * 76.5, a * 79.421875, a * 79.5, a * 80.421875, a * 83.5, a * 73.421875);
            d.bezierCurveTo(a * 80.5, a * 96.921875, a * 79.5, a * 114.421875, a * 77.5, a * 120.421875);
            d.closePath();
            wt(d, b[0], b[0], a * 10);
            return c;
        }(a * 0.8, ["#B6222A"]));
        Ⲇᐃ[902] = [];
        Ⲇᐃ[902][Pr.ΔᐃΔ] = Ya(mb(a * 0.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
        Ⲇᐃ[902][Pr.ΔΔⲆ] = Ya(mb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        Ⲇᐃ[903] = [];
        Ⲇᐃ[903][Pr.ΔᐃΔ] = Ya(mb(a * 0.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
        Ⲇᐃ[903][Pr.ΔΔⲆ] = Ya(mb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
        Ⲇᐃ[Pr.ⲆᐃⲆᐃΔⲆΔ] = [];
        Ⲇᐃ[Pr.ⲆᐃⲆᐃΔⲆΔ][Pr.ΔᐃΔ] = Ya(mb(a * 0.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
        Ⲇᐃ[Pr.ⲆᐃⲆᐃΔⲆΔ][Pr.ΔΔⲆ] = Ya(mb(a * 0.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
        Ⲇᐃ[904] = Ya(cb(a * 0.4, ["#B6222A"]));
        Ⲇᐃ[905] = Ya(cb(a * 0.4, ["#B6222A"]));
        Ⲇᐃ[Pr.ᐃᐃΔᐃⵠⵠᐃⵠⵠ] = Ya(cb(a * 0.4, ["#B6222A"]));
        Ⲇᐃ[230] = Ya(cu(a * 0.35, kg, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]));
        Ⲇᐃ[229] = Ya(zd(a * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]));
        Ⲇᐃ[886] = [];
        Ⲇᐃ[886][Pr.ΔᐃΔ] = Ya(cd(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
        Ⲇᐃ[886][Pr.ΔΔⲆ] = Ya(cd(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
        Ⲇᐃ[887] = [];
        Ⲇᐃ[887][Pr.ΔᐃΔ] = Ya(cd(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
        Ⲇᐃ[887][Pr.ΔΔⲆ] = Ya(cd(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
        Ⲇᐃ[894] = [];
        Ⲇᐃ[894][Pr.ΔᐃΔ] = Ya(kd(a * 0.35, 0, ["#1e2021", "#e45936", "#ffffff"]));
        Ⲇᐃ[894][Pr.ΔΔⲆ] = Ya(kd(a * 0.35, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        Ⲇᐃ[895] = [];
        Ⲇᐃ[895][Pr.ΔᐃΔ] = Ya(Pd(a * 0.42, 0, ["#1e2021", "#e45936", "#ffffff"]));
        Ⲇᐃ[895][Pr.ΔΔⲆ] = Ya(Pd(a * 0.42, 0, ["#0c0c0d", "#34255d", "#563f83"]));
        Ⲇᐃ[896] = [];
        Ⲇᐃ[896][Pr.ΔᐃΔ] = Ya(kd(a * 0.35, 0, ["#1e2021", "#e45936", "#B6222A"]));
        Ⲇᐃ[896][Pr.ΔΔⲆ] = Ya(kd(a * 0.35, 0, ["#0c0c0d", "#613577", "#462966"]));
        Ⲇᐃ[897] = [];
        Ⲇᐃ[897][Pr.ΔᐃΔ] = Ya(Pd(a * 0.42, 0, ["#1e2021", "#e45936", "#B6222A"]));
        Ⲇᐃ[897][Pr.ΔΔⲆ] = Ya(Pd(a * 0.42, 0, ["#0c0c0d", "#613577", "#462966"]));
        Ⲇᐃ[888] = Ya(Cd(a * 0.35, ["#B6222A"]));
        Ⲇᐃ[889] = Ya(kd(a * 0.35, 0, [vk, "#B6222A"]));
        Ⲇᐃ[890] = Ya(Pd(a * 0.35, 0, [undefined, "#B6222A"]));
        Ⲇᐃ[891] = Ya(Cd(a * 0.35, ["#22E066"]));
        Ⲇᐃ[892] = Ya(kd(a * 0.35, 0, [undefined, "#22E066"]));
        Ⲇᐃ[893] = Ya(Pd(a * 0.35, 0, [undefined, "#22E066"]));
        Ⲇᐃ[48] = [];
        Ⲇᐃ[48][Pr.ΔᐃΔ] = Ya(Rd(a * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
        Ⲇᐃ[48][Pr.ΔΔⲆ] = Ya(Rd(a * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
        Ⲇᐃ[47] = [];
        Ⲇᐃ[47][Pr.ΔᐃΔ] = Ya(Ot(a * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
        Ⲇᐃ[47][Pr.ΔΔⲆ] = Ya(Ot(a * 0.45, dl, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
        Ⲇᐃ[141] = [];
        Ⲇᐃ[141][Pr.ΔᐃΔ] = Ya(Am(a * 0.63, _n, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
        Ⲇᐃ[141][Pr.ΔΔⲆ] = Ya(Am(a * 0.63, tr, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        Ⲇᐃ[125] = [];
        Ⲇᐃ[125][Pr.ΔᐃΔ] = Ya(Em(a, dl, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
        Ⲇᐃ[125][Pr.ΔΔⲆ] = Ya(Em(a, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
        Ⲇᐃ[221] = [];
        Ⲇᐃ[221][Pr.ΔᐃΔ] = ⵠⵠ.ⲆᐃⲆⲆΔᐃᐃⲆΔ;
        Ⲇᐃ[221][Pr.ΔΔⲆ] = ⵠⵠ.ⵠΔⵠᐃᐃᐃΔⲆⵠ;
        Ⲇᐃ[190] = [];
        Ⲇᐃ[190][Pr.ΔᐃΔ] = Ya(ab(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Ⲇᐃ[190][Pr.ΔΔⲆ] = Ya(ab(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Ⲇᐃ[853] = [Ⲇᐃ[190]];
        Ⲇᐃ[853][1] = [];
        Ⲇᐃ[853][2] = [];
        Ⲇᐃ[853][1][Pr.ΔᐃΔ] = Ya(sb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Ⲇᐃ[853][1][Pr.ΔΔⲆ] = Ya(sb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Ⲇᐃ[853][2][Pr.ΔᐃΔ] = Ya(rb(a * 0.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
        Ⲇᐃ[853][2][Pr.ΔΔⲆ] = Ya(rb(a * 0.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
        Ⲇᐃ[49] = [];
        Ⲇᐃ[49][Pr.ΔᐃΔ] = Ya(At(3 - Math.PI / 2, fm(a * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
        Ⲇᐃ[49][Pr.ΔΔⲆ] = Ya(At(3 - Math.PI / 2, fm(a * 0.6, kg, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
        Ⲇᐃ[728] = [];
        Ⲇᐃ[728][Pr.ΔᐃΔ] = Ya(Bb(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
        Ⲇᐃ[728][Pr.ΔΔⲆ] = Ya(Bb(a * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
        Ⲇᐃ[798] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 650;
            c.height = a * 650;
            d.scale(1.9, 1.9);
            d.save();
            d.translate(a * 202.5, a * 147.5);
            xt(d, a * -96.5, a * -21.5, a * 193, a * 193, a * 0);
            d.restore();
            wt(d, b[4], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            xt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            wt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            xt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            wt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            xt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            wt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            xt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            wt(d, b[3], b[1], a * 12);
            d.save();
            d.translate(a * 204, a * 121.5);
            xt(d, a * -92, a * -9.5, a * 184, a * 19, a * 10);
            d.restore();
            wt(d, b[3], b[3], a * 10);
            d.save();
            d.translate(a * 197, a * 299);
            xt(d, a * 85, a * -9, a * -170, a * 18, a * 10);
            d.restore();
            wt(d, b[3], b[3], a * 10);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 94, a * 317);
            d.bezierCurveTo(a * 110.5, a * 299.5, a * 110.5, a * 299.5, a * 127, a * 282);
            d.closePath();
            wt(d, Lk, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 279, a * 142);
            d.bezierCurveTo(a * 296.5, a * 125.5, a * 296.5, a * 125.5, a * 314, a * 109);
            d.closePath();
            wt(d, cl, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 93, a * 106);
            d.bezierCurveTo(a * 110.5, a * 124, a * 110.5, a * 124, a * 128, a * 142);
            d.closePath();
            wt(d, undefined, b[1], a * 12);
            d.beginPath();
            d.lineCap = "round";
            d.lineJoin = "round";
            d.moveTo(a * 281, a * 282);
            d.bezierCurveTo(a * 296, a * 297.5, a * 296, a * 297.5, a * 311, a * 313);
            d.closePath();
            wt(d, undefined, b[1], a * 12);
            return c;
        }(a * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
        Ⲇᐃ[729] = Ya(function (a, b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = a * 400;
            c.height = a * 400;
            d.save();
            d.translate(a * 202.5, a * 147.5);
            xt(d, a * -96.5, a * -21.5, a * 193, a * 43, a * 0);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 190.5);
            xt(d, a * 96.5, a * -21.5, a * -193, a * 43, a * 0);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 233.5);
            xt(d, a * -96.5, a * -20.5, a * 193, a * 41, a * 0);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 202.5, a * 275);
            xt(d, a * 96.5, a * -21, a * -193, a * 42, a * 0);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 121.5);
            xt(d, a * -115.5, a * -20.5, a * 231, a * 41, a * 10);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 203.5, a * 299);
            xt(d, a * -115.5, a * -20, a * 231, a * 40, a * 10);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 298.5, a * 210);
            xt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            d.save();
            d.translate(a * 108.5, a * 210);
            xt(d, a * -20.5, a * -109, a * 41, a * 218, a * 10);
            d.restore();
            wt(d, b[0], b[0], a * 12);
            return c;
        }(a * 0.3, ["#BB0000"]));
        Ⲇᐃ[658] = Ob(1, [{
            f: vm,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
        }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
        Ⲇᐃ[150] = Ob(1.5, [{
            f: km,
            x: 0,
            y: 0,
            a: 1,
            r: 0,
            c: ["#120202", "#750a0a", "#991616", "#120202"]
        }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
        Ⲇᐃ[669] = ec(a * 0.35, ["#072428", "#67A242", "#67A242"], 0);
        Ⲇᐃ[670] = ec(a * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
        Ⲇᐃ[671] = ec(a * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
        Ⲇᐃ[672] = ec(a * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
        if (ΔⵠⲆⲆᐃᐃΔ) {
            Ⲇᐃ[278] = Ya(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 180;
                var g = b * 8;
                c.width = e;
                c.height = f;
                d.beginPath();
                xt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.8;
                wt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Ed(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        } else {
            Ⲇᐃ[278] = Ya(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 200;
                var f = b * 270;
                var g = b * 8;
                c.width = e;
                c.height = f + 20;
                d.beginPath();
                xt(d, 0, 0, e, f - g, g);
                d.globalAlpha = 0.5;
                wt(d, "#1D6055");
                d.globalAlpha = 1;
                var a = Ed(b, "Leaderboard", 25, "#FFF");
                d.drawImage(a, (e - a.width) / 2, b * 5);
                return c;
            }(a));
        }
        if (ΔⵠⲆⲆᐃᐃΔ) {
            Ⲇᐃ[267] = Ya(function (b) {
                var c = document.createElement("canvas");
                var d = c.getContext("2d");
                var e = b * 335;
                var f = b * 250;
                var i = b * 120;
                var a = b * 20;
                var j = b * 35;
                var k = b * 65;
                var h = b * 2;
                var l = b * 4;
                c.width = e;
                c.height = i;
                d.beginPath();
                d.translate(0, b * 15);
                xt(d, k, 0, f, a, h);
                wt(d, null, "#69A148", l);
                d.translate(0, j);
                xt(d, k, 0, f, a, h);
                wt(d, null, "#AF352A", l);
                d.translate(0, j);
                xt(d, k, 0, f, a, h);
                wt(d, null, "#669BB1", l);
                return c;
            }(0.75));
        } else {
            Ⲇᐃ[267] = Ya(function (c) {
                var d = document.createElement("canvas");
                var e = d.getContext("2d");
                var f = c * 950;
                var i = c * 180;
                var j = c * 50;
                var a = c * 20;
                var k = c * 240;
                var m = c * 35;
                var h = c * 1;
                var l = c * 4;
                var g = c * 4;
                d.width = f;
                d.height = j;
                e.translate(0, c * 15);
                xt(e, m, h, i, a, l);
                wt(e, null, "#69A148", g);
                var n = Ⲇᐃ[669];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                xt(e, m, h, i, a, l);
                wt(e, null, "#AF352A", g);
                n = Ⲇᐃ[671];
                e.drawImage(n, 17, -9);
                e.translate(k, 0);
                xt(e, m, h, i, a, l);
                wt(e, null, "#669BB1", g);
                n = Ⲇᐃ[670];
                e.drawImage(n, 17, -8);
                e.translate(k, 0);
                xt(e, m, h, i, a, l);
                wt(e, null, "#074A87", g);
                n = Ⲇᐃ[672];
                e.drawImage(n, 17, -8);
                return d;
            }(a));
        }
        if (ΔⵠⲆⲆᐃᐃΔ) {
            Ⲇᐃ[608] = Ya(Xm(0.75));
        } else {
            Ⲇᐃ[608] = Ya(Xm(a));
        }
        Ⲇᐃ[792] = Ya(gm(a * 0.16, Wa, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
        Ⲇᐃ[537] = Ya(At(5.8, ud(a * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
        Ⲇᐃ[283] = [];
        Ⲇᐃ[465] = [];
        for (b = 0; ew.ⵠⵠⵠᐃᐃⵠⲆ + 2 > b; b++) {
            Ⲇᐃ[465][b] = Ed(a, "" + (b + 1), 12, "#FFF");
        }
        Ⲇᐃ[708] = [];
        Ⲇᐃ[708].push(Ya(sc(a * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
        Ⲇᐃ[708].push(Ya(sc(a * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
        Ⲇᐃ[708].push(Ya(sc(a * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
        Ⲇᐃ[725] = [];
        Ⲇᐃ[725].push(Ya(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            zt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            wt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            zt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            wt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            wt(c, "#12432D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            wt(c, "#3A2A0D");
            zt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            wt(c, $l, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            wt(c, sr, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            wt(c, Lk, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            wt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            wt(c, sr, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            wt(c, Kq, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            wt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            wt(c, ts, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            wt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            wt(c, undefined, "#c7a726", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            wt(c, sr, "#c7a726", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            wt(c, es, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            wt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            wt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            wt(c, pl, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            wt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            wt(c, $l, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            wt(c, undefined, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            wt(c, Go, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            wt(c, Aj, "#EDCE4F", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            wt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            wt(c, "#ECBE35", "#EDCE4F", a * 8);
            zt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            wt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        Ⲇᐃ[725].push(Ya(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            c.translate(0, a * 20);
            zt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            wt(c, "#322413", "#322413", a * 4);
            c.translate(0, a * -20);
            zt(c, a * 160.5, a * 159.5, a * 156.39595138242822);
            wt(c, "#392C16", "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 163.07290649414062);
            c.bezierCurveTo(a * 22.999969482421875, a * 67.07290649414062, a * 106, a * 20.072906494140625, a * 162, a * 23.072906494140625);
            c.bezierCurveTo(a * 269.9999694824219, a * 31.072906494140625, a * 292.9999694824219, a * 120.07290649414062, a * 294.9999694824219, a * 161.07290649414062);
            c.bezierCurveTo(a * 165.49996948242188, a * 162.07290649414062, a * 165.49996948242188, a * 162.07290649414062, a * 35.999969482421875, a * 163.07290649414062);
            c.closePath();
            wt(c, "#3A2A0D");
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 32.999969482421875, a * 165.07290649414062);
            c.bezierCurveTo(a * 16.999969482421875, a * 221.07290649414062, a * 85, a * 289.0729064941406, a * 156, a * 294.0729064941406);
            c.bezierCurveTo(a * 263.9999694824219, a * 293.0729064941406, a * 295.9999694824219, a * 199.07290649414062, a * 294.9999694824219, a * 159.07290649414062);
            c.closePath();
            wt(c, "#071A1B");
            zt(c, a * 161, a * 158.07290649414062, a * 133.4053971921676);
            wt(c, undefined, "#5E3E1A", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 31.999969482421875, a * 161.62844848632812);
            c.bezierCurveTo(a * 162.49996948242188, a * 161.62844848632812, a * 162.49996948242188, a * 161.62844848632812, a * 292.9999694824219, a * 161.62844848632812);
            c.closePath();
            wt(c, undefined, "#5E3E1A", a * 12);
            c.translate(0, a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            wt(c, es, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            wt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            wt(c, undefined, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            wt(c, Lk, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            wt(c, Hq, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            wt(c, Cq, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            wt(c, sr, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            wt(c, es, "#281C08", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            wt(c, undefined, "#281C08", a * 12);
            c.translate(0, a * -8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 66, a * 158.29513549804688);
            c.bezierCurveTo(a * 86, a * 158.29513549804688, a * 86, a * 158.29513549804688, a * 106, a * 158.29513549804688);
            c.closePath();
            wt(c, cl, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 57.999969482421875, a * 117.29513549804688);
            c.bezierCurveTo(a * 85, a * 128.29513549804688, a * 85, a * 128.29513549804688, a * 113, a * 139.29513549804688);
            c.closePath();
            wt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 95, a * 90.29513549804688);
            c.bezierCurveTo(a * 112, a * 105.79513549804688, a * 112, a * 105.79513549804688, a * 129, a * 121.29513549804688);
            c.closePath();
            wt(c, vk, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 116, a * 52.850677490234375);
            c.bezierCurveTo(a * 130, a * 83.85067749023438, a * 130, a * 83.85067749023438, a * 144, a * 114.85067749023438);
            c.closePath();
            wt(c, vk, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 159, a * 61.295135498046875);
            c.bezierCurveTo(a * 160.49996948242188, a * 92.29513549804688, a * 160.49996948242188, a * 92.29513549804688, a * 160, a * 123.29513549804688);
            c.closePath();
            wt(c, wh, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 203, a * 51.295135498046875);
            c.bezierCurveTo(a * 190.49996948242188, a * 83.29513549804688, a * 190.49996948242188, a * 83.29513549804688, a * 176, a * 115.29513549804688);
            c.closePath();
            wt(c, sr, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 225, a * 89.29513549804688);
            c.bezierCurveTo(a * 210.49996948242188, a * 104.79513549804688, a * 210.49996948242188, a * 104.79513549804688, a * 194, a * 120.29513549804688);
            c.closePath();
            wt(c, vk, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 266.9999694824219, a * 112.29513549804688);
            c.bezierCurveTo(a * 233.49996948242188, a * 127.29513549804688, a * 233.49996948242188, a * 127.29513549804688, a * 199, a * 142.29513549804688);
            c.closePath();
            wt(c, undefined, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 256.9999694824219, a * 155.29513549804688);
            c.bezierCurveTo(a * 238.49996948242188, a * 156.29513549804688, a * 238.49996948242188, a * 156.29513549804688, a * 219, a * 157.29513549804688);
            c.closePath();
            wt(c, Lk, "#5E3C10", a * 12);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 96, a * 166);
            c.bezierCurveTo(a * 88, a * 117, a * 129, a * 92, a * 161, a * 91);
            c.bezierCurveTo(a * 201, a * 90, a * 223, a * 121, a * 230, a * 161);
            c.closePath();
            wt(c, "#704618", "#5D3D1A", a * 8);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 94.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 162.50003051757812, a * 164.40341186523438, a * 230.00003051757812, a * 165.40341186523438, a * 231.00003051757812, a * 164.40341186523438);
            c.bezierCurveTo(a * 214.00003051757812, a * 267.4034118652344, a * 92.00003051757812, a * 243.40341186523438, a * 93.00003051757812, a * 165.40341186523438);
            c.closePath();
            wt(c, "#E1DDD5", "#EAE7E4", a * 8);
            zt(c, a * 160.00003051757812, a * 166.49432373046875, a * 28.30194339616981);
            wt(c, "#392C16", "#5E3E1A", a * 10);
            return b;
        }(a * 0.22)));
        Ⲇᐃ[726] = Ya(function (a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            b.width = a * 321;
            b.height = a * 345;
            c.translate(0, a * 5);
            zt(c, a * 161.00003051757812, a * 165.40341186523438, a * 20.808652046684813);
            wt(c, "#C09D6F", "#A37943", a * 10);
            c.beginPath();
            c.lineCap = "round";
            c.lineJoin = "round";
            c.moveTo(a * 162.00003051757812, a * 48.403411865234375);
            c.bezierCurveTo(a * 172.50003051757812, a * 67.40341186523438, a * 172.50003051757812, a * 67.40341186523438, a * 183.00003051757812, a * 86.40341186523438);
            c.bezierCurveTo(a * 160.50003051757812, a * 86.40341186523438, a * 160.50003051757812, a * 86.40341186523438, a * 138.00003051757812, a * 86.40341186523438);
            c.closePath();
            wt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 161.50003051757812, a * 117.90341186523438);
            xt(c, a * -5.5, a * -37.5, a * 11, a * 75, a * 10);
            c.restore();
            wt(c, "#C09D6F", "#A37943", a * 10);
            c.save();
            c.translate(a * 162.00003051757812, a * 78.90341186523438);
            xt(c, a * -10, a * -5.5, a * 20, a * 11, a * 1);
            c.restore();
            wt(c, "#C09D6F");
            zt(c, a * 161.00003051757812, a * 163.6761474609375, a * 17.08800749063506);
            wt(c, "#C09D6F");
            return b;
        }(a * 0.22));
        Ⲇᐃ[727] = [];
        Ⲇᐃ[727].push(Ya(zb(a * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
        Ⲇᐃ[727].push(Ya(zb(a * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
        Ⲇᐃ[727].push(Ya(zb(a * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
        Ⲇᐃ[546] = ⵠⵠ.ΔᐃⲆᐃⲆⵠᐃ;
        Ⲇᐃ[547] = ⵠⵠ.ᐃⵠᐃΔᐃⵠⲆ;
        Ⲇᐃ[548] = ⵠⵠ.ΔⵠΔΔᐃᐃⲆ;
        Ⲇᐃ[549] = ⵠⵠ.ᐃΔⲆⲆΔΔΔ;
        Ⲇᐃ[517] = Ed(a, "Show spectators", 25, "#FFF", undefined, es, "#000", 5, 220);
        Ⲇᐃ[525] = Ed(a, "Reconnecting...", 30, "#FFF");
        console.log(undefined, wh);
    }
    function bc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        wt(e, undefined, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        wt(e, c[3], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        wt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        wt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        wt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        wt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        wt(e, Kq, c[2], a * 11);
        return d;
    }
    function dc(b, c, d, e) {
        var f = document.createElement("canvas");
        var g = f.getContext("2d");
        f.width = b * 198;
        f.height = b * 147;
        g.globalAlpha = c ? 0.5 : 1;
        g.translate(0, b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 44, b * 76);
        g.bezierCurveTo(b * 50, b * 82, b * 50, b * 82, b * 56, b * 88);
        g.bezierCurveTo(b * 59, b * 82, b * 59, b * 82, b * 62, b * 76);
        g.bezierCurveTo(b * 59, b * 71, b * 59, b * 71, b * 56, b * 66);
        g.bezierCurveTo(b * 59, b * 69, b * 59, b * 69, b * 62, b * 72);
        g.bezierCurveTo(b * 80, b * 48, b * 102, b * 50, b * 120, b * 62);
        g.bezierCurveTo(b * 127, b * 58, b * 127, b * 58, b * 134, b * 54);
        g.bezierCurveTo(b * 129, b * 60, b * 129, b * 60, b * 124, b * 66);
        g.bezierCurveTo(b * 129, b * 73, b * 129, b * 73, b * 134, b * 80);
        g.bezierCurveTo(b * 140, b * 74, b * 140, b * 74, b * 146, b * 68);
        g.bezierCurveTo(b * 142, b * 76, b * 142, b * 76, b * 138, b * 84);
        g.bezierCurveTo(b * 144, b * 90, b * 142, b * 90, b * 144, b * 90);
        g.bezierCurveTo(b * 136, b * 97, b * 136, b * 97, b * 128, b * 104);
        g.bezierCurveTo(b * 154, b * 110, b * 164, b * 90, b * 160, b * 80);
        g.bezierCurveTo(b * 138, b * 22, b * 148, b * 51, b * 136, b * 22);
        g.bezierCurveTo(b * 97, b * 24, b * 97, b * 24, b * 58, b * 26);
        g.bezierCurveTo(b * 47, b * 54, b * 36, b * 80, b * 36, b * 82);
        g.bezierCurveTo(b * 40, b * 108, b * 54, b * 104, b * 62, b * 104);
        g.bezierCurveTo(b * 46, b * 92, b * 54, b * 97, b * 46, b * 90);
        g.closePath();
        wt(g, d[0]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        wt(g, d[0]);
        g.globalAlpha = 1;
        g.translate(0, b * -6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 36, b * 80);
        g.bezierCurveTo(b * 30, b * 84, b * 28, b * 92, b * 34, b * 100);
        g.bezierCurveTo(b * 41.5, b * 102, b * 41.5, b * 102, b * 49, b * 104);
        g.bezierCurveTo(b * 43, b * 105.5, b * 43, b * 105.5, b * 37, b * 107);
        g.bezierCurveTo(b * 46, b * 111, b * 60, b * 114, b * 76, b * 114);
        g.bezierCurveTo(b * 78, b * 110.5, b * 78, b * 110.5, b * 80, b * 107);
        g.bezierCurveTo(b * 81, b * 110.5, b * 81, b * 110.5, b * 82, b * 114);
        g.bezierCurveTo(b * 94.5, b * 113.5, b * 94.5, b * 113.5, b * 107, b * 113);
        g.bezierCurveTo(b * 108.5, b * 110, b * 108.5, b * 110, b * 110, b * 107);
        g.bezierCurveTo(b * 111.5, b * 110.5, b * 111.5, b * 110.5, b * 113, b * 114);
        g.bezierCurveTo(b * 131, b * 112.5, b * 131, b * 112.5, b * 149, b * 111);
        g.bezierCurveTo(b * 148.5, b * 107.5, b * 148.5, b * 107.5, b * 148, b * 104);
        g.bezierCurveTo(b * 150.5, b * 107, b * 150.5, b * 107, b * 153, b * 110);
        g.bezierCurveTo(b * 155.5, b * 108.5, b * 155.5, b * 108.5, b * 158, b * 107);
        g.bezierCurveTo(b * 156.5, b * 104, b * 156.5, b * 104, b * 155, b * 101);
        g.bezierCurveTo(b * 158.5, b * 102.5, b * 158.5, b * 102.5, b * 162, b * 104);
        g.bezierCurveTo(b * 168, b * 100, b * 170, b * 92, b * 169, b * 85);
        g.bezierCurveTo(b * 166, b * 86, b * 166, b * 86, b * 163, b * 87);
        g.bezierCurveTo(b * 165.5, b * 83, b * 165.5, b * 83, b * 168, b * 79);
        g.bezierCurveTo(b * 165.5, b * 76.5, b * 165.5, b * 76.5, b * 163, b * 74);
        g.bezierCurveTo(b * 155, b * 82.5, b * 155, b * 82.5, b * 147, b * 91);
        g.bezierCurveTo(b * 139, b * 95.5, b * 139, b * 95.5, b * 131, b * 100);
        g.bezierCurveTo(b * 97.5, b * 100.5, b * 97.5, b * 100.5, b * 64, b * 101);
        g.bezierCurveTo(b * 49, b * 102, b * 43, b * 90, b * 36, b * 80);
        g.closePath();
        wt(g, d[1], d[2], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 49, b * 98);
        g.bezierCurveTo(b * 96.5, b * 98, b * 96.5, b * 98, b * 144, b * 98);
        g.bezierCurveTo(b * 136.5, b * 102, b * 136.5, b * 102, b * 129, b * 106);
        g.bezierCurveTo(b * 103, b * 105.5, b * 103, b * 105.5, b * 77, b * 105);
        g.bezierCurveTo(b * 65, b * 105, b * 65, b * 105, b * 53, b * 105);
        g.closePath();
        wt(g, d[1]);
        g.globalAlpha = 0.5;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 54, b * 98);
        g.bezierCurveTo(b * 97, b * 98, b * 97, b * 98, b * 140, b * 98);
        g.bezierCurveTo(b * 134, b * 101, b * 134, b * 101, b * 128, b * 104);
        g.bezierCurveTo(b * 92, b * 104, b * 92, b * 104, b * 56, b * 104);
        g.closePath();
        wt(g, d[0]);
        g.globalAlpha = 1;
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 118, b * 47);
        g.bezierCurveTo(b * 124.5, b * 43.5, b * 124.5, b * 43.5, b * 131, b * 40);
        g.bezierCurveTo(b * 128, b * 46, b * 128, b * 46, b * 125, b * 52);
        g.bezierCurveTo(b * 131, b * 57, b * 135, b * 64, b * 139, b * 73);
        g.bezierCurveTo(b * 142.5, b * 69.5, b * 142.5, b * 69.5, b * 146, b * 66);
        g.bezierCurveTo(b * 143.5, b * 72.5, b * 143.5, b * 72.5, b * 141, b * 79);
        g.bezierCurveTo(b * 142, b * 91, b * 141, b * 94, b * 132, b * 98);
        g.bezierCurveTo(b * 117, b * 102, b * 126, b * 108, b * 142, b * 102);
        g.bezierCurveTo(b * 159, b * 98, b * 164, b * 80, b * 162, b * 47);
        g.bezierCurveTo(b * 160, b * 19, b * 150, b * 6, b * 117, b * 4);
        g.bezierCurveTo(b * 44, b * 0, b * 35, b * 20, b * 33, b * 37);
        g.bezierCurveTo(b * 29, b * 69, b * 33, b * 88, b * 44, b * 96);
        g.bezierCurveTo(b * 64, b * 107, b * 70, b * 102, b * 54, b * 93);
        g.bezierCurveTo(b * 49, b * 88, b * 50, b * 82, b * 53, b * 77);
        g.bezierCurveTo(b * 51.5, b * 71, b * 51.5, b * 71, b * 50, b * 65);
        g.bezierCurveTo(b * 53, b * 68.5, b * 53, b * 68.5, b * 56, b * 72);
        g.bezierCurveTo(b * 59, b * 67.5, b * 59, b * 67.5, b * 62, b * 63);
        g.bezierCurveTo(b * 60.5, b * 59.5, b * 60.5, b * 59.5, b * 59, b * 56);
        g.bezierCurveTo(b * 62, b * 57, b * 62, b * 57, b * 65, b * 58);
        g.bezierCurveTo(b * 78, b * 35, b * 103, b * 36, b * 117, b * 47);
        g.closePath();
        wt(g, d[1], d[2], b * 6);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 62, b * 21);
        g.bezierCurveTo(b * 63, b * 34, b * 64, b * 37, b * 66, b * 40);
        g.bezierCurveTo(b * 54, b * 49, b * 53, b * 51, b * 48, b * 58);
        g.bezierCurveTo(b * 44, b * 51, b * 42, b * 43, b * 40, b * 36);
        g.bezierCurveTo(b * 47, b * 28, b * 52, b * 25, b * 61, b * 21);
        g.closePath();
        wt(g, d[4]);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 60, b * 29);
        g.bezierCurveTo(b * 62, b * 25, b * 65, b * 24, b * 70, b * 23);
        wt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 61, b * 37);
        g.bezierCurveTo(b * 63, b * 32, b * 66, b * 32, b * 71, b * 32);
        wt(g, ll, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 52, b * 31);
        g.bezierCurveTo(b * 50, b * 26, b * 50, b * 25, b * 51, b * 23);
        wt(g, pl, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 35);
        g.bezierCurveTo(b * 44, b * 31, b * 43, b * 29, b * 45, b * 26);
        wt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 58, b * 44);
        g.bezierCurveTo(b * 57, b * 48, b * 57, b * 50, b * 60, b * 52);
        wt(g, pl, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 53, b * 48);
        g.bezierCurveTo(b * 52, b * 52, b * 52, b * 54, b * 55, b * 57);
        wt(g, undefined, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 46, b * 41);
        g.bezierCurveTo(b * 41, b * 42, b * 39, b * 45, b * 38, b * 48);
        wt(g, wh, d[3], b * 4);
        g.beginPath();
        g.lineCap = "round";
        g.lineJoin = "round";
        g.moveTo(b * 48, b * 48);
        g.bezierCurveTo(b * 42, b * 51, b * 42, b * 53, b * 40, b * 55);
        wt(g, undefined, d[3], b * 4);
        if (e == 0) {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 99, b * 101);
            g.bezierCurveTo(b * 118.6666259765625, b * 104.33331298828125, b * 124.6666259765625, b * 116.33331298828125, b * 112.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 104.6666259765625, b * 112.33331298828125, b * 100.6666259765625, b * 105.33331298828125, b * 99.6666259765625, b * 101.33331298828125);
            wt(g, cl, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 97.6666259765625, b * 101.33331298828125);
            g.bezierCurveTo(b * 81.6666259765625, b * 106.33331298828125, b * 79.6666259765625, b * 114.33331298828125, b * 89.6666259765625, b * 114.33331298828125);
            g.bezierCurveTo(b * 95.6666259765625, b * 111.33331298828125, b * 95.6666259765625, b * 109.33331298828125, b * 98.6666259765625, b * 102.33331298828125);
            wt(g, Lk, d[5], b * 6);
        } else {
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 120, b * 106.39999389648438, b * 118, b * 107.39999389648438, b * 120, b * 111.39999389648438);
            wt(g, Cq, d[5], b * 6);
            g.beginPath();
            g.lineCap = "round";
            g.lineJoin = "round";
            g.moveTo(b * 103, b * 100.39999389648438);
            g.bezierCurveTo(b * 90, b * 103.39999389648438, b * 89, b * 106.39999389648438, b * 87, b * 112.39999389648438);
            wt(g, undefined, d[5], b * 6);
            zt(g, b * 86, b * 114.39999389648438, b * 4.5);
            wt(g, d[1], d[5], b * 6);
            zt(g, b * 121, b * 114.39999389648438, b * 4.5);
            wt(g, d[1], d[5], b * 6);
        }
        return f;
    }
    function vc(a, b, c) {
        var d = document.createElement("canvas");
        var e = d.getContext("2d");
        d.width = a * 400;
        d.height = a * 400;
        e.translate(0, a * 15);
        e.globalAlpha = b ? 0.5 : 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        wt(e, c[0]);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        wt(e, cl, c[0], a * 11);
        e.translate(0, a * -5);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        wt(e, c[3], c[2], a * 12);
        e.translate(0, a * 25);
        e.globalAlpha = 1;
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 103, a * 154);
        e.bezierCurveTo(a * 98, a * 119, a * 264, a * 119, a * 264, a * 154);
        e.bezierCurveTo(a * 271, a * 189, a * 94, a * 188, a * 103, a * 154);
        e.closePath();
        wt(e, c[5]);
        e.translate(0, a * -25);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 108, a * 216.5, a * 108, a * 216.5, a * 114, a * 279);
        e.bezierCurveTo(a * 124, a * 300, a * 237, a * 299, a * 251, a * 279);
        e.bezierCurveTo(a * 257, a * 217, a * 257, a * 217, a * 263, a * 155);
        e.bezierCurveTo(a * 248, a * 194, a * 91, a * 180, a * 103, a * 156);
        e.closePath();
        wt(e, c[1], c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 182, a * 185);
        e.bezierCurveTo(a * 182.5, a * 237.5, a * 182.5, a * 237.5, a * 183, a * 290);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 222, a * 287);
        e.bezierCurveTo(a * 226, a * 233.5, a * 226, a * 233.5, a * 230, a * 180);
        e.closePath();
        wt(e, undefined, c[2], a * 12);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 145, a * 290);
        e.bezierCurveTo(a * 140.5, a * 237, a * 140.5, a * 237, a * 136, a * 184);
        e.closePath();
        wt(e, c[1], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 105, a * 184);
        e.bezierCurveTo(a * 148, a * 205, a * 231, a * 202, a * 260, a * 182);
        e.bezierCurveTo(a * 259, a * 195.5, a * 259, a * 195.5, a * 258, a * 209);
        e.bezierCurveTo(a * 217, a * 218, a * 163, a * 225, a * 108, a * 207);
        e.closePath();
        wt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 251, a * 276);
        e.bezierCurveTo(a * 251.5, a * 267.5, a * 251.5, a * 267.5, a * 252, a * 259);
        e.bezierCurveTo(a * 212, a * 272, a * 156, a * 275, a * 112, a * 260);
        e.bezierCurveTo(a * 112.5, a * 269, a * 112.5, a * 269, a * 113, a * 278);
        e.bezierCurveTo(a * 155, a * 306, a * 253, a * 286, a * 250, a * 276);
        e.closePath();
        wt(e, c[4], c[2], a * 11);
        e.beginPath();
        e.lineCap = "round";
        e.lineJoin = "round";
        e.moveTo(a * 102, a * 154);
        e.bezierCurveTo(a * 106, a * 53, a * 255, a * 53, a * 263, a * 154);
        e.bezierCurveTo(a * 248, a * 38, a * 99, a * 69, a * 103, a * 154);
        e.closePath();
        wt(e, undefined, c[2], a * 11);
        return d;
    }
    function mc() {
        if (Ww.reconnect.enabled) {
            lo.globalAlpha = 0.9;
            lo.fillStyle = "#000";
            xt(lo, hq - 150, iq - 90, 300, 180, 15);
            lo.fill();
            lo.globalAlpha = 1;
            var a = Ⲇᐃ[301];
            lo.save();
            Ww.reconnect.rotate = (Ww.reconnect.rotate + cf * 2) % (Math.PI * 2);
            lo.translate(uo / 2, vo / 2 - 25);
            lo.rotate(Ww.reconnect.rotate);
            Jc(lo, a, -a.width / 2, -a.height / 2);
            lo.restore();
            a = Ⲇᐃ[525];
            Jc(lo, a, (uo - a.width) / 2, (vo - a.height) / 2 + 25);
        }
    }
    function cc() {
        Ww.Ⲇᐃᐃⵠᐃ.open = false;
        var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
        var b = ew.ⲆᐃᐃΔⲆⵠΔ;
        if (a) {
            for (var c = 0; lf.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ].length > c; c++) {
                var d = lf.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ][c];
                var e = ΔᐃⲆᐃ.ΔΔⵠᐃ(d, a);
                if (b > e) {
                    b = e;
                    Ww.Ⲇᐃᐃⵠᐃ.open = Oq;
                    Ww.Ⲇᐃᐃⵠᐃ.ⲆΔᐃⵠ = d.ⲆΔᐃⵠ;
                    Ww.Ⲇᐃᐃⵠᐃ.ⵠⵠΔᐃⲆ = d.id;
                }
            }
            if (b < ew.ⲆᐃᐃΔⲆⵠΔ) {
                Yw.Ⲇᐃᐃⵠᐃ.ΔΔⲆᐃ(lo);
            }
        }
    }
    function pc() {
        Ww.ⵠⵠⵠⵠ.id = -1;
        Ww.ⵠⵠⵠⵠ.lock = Oh;
        Ww.ⵠⵠⵠⵠ.locked = false;
        Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ = false;
        Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ = false;
        Ww.ⵠⵠⵠⵠ.open = false;
        var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
        var c = ew.ⵠⵠⲆⵠⵠᐃⲆ;
        if (b) {
            for (var d = 0; d < lf.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ].length; d++) {
                var e = lf.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ][d];
                var f = ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b);
                if (f < c) {
                    c = f;
                    Ww.ⵠⵠⵠⵠ.open = Vl;
                    Ww.ⵠⵠⵠⵠ.id = e.action < 2 ? -1 : Math.floor((e.action - 1) / 2);
                    Ww.ⵠⵠⵠⵠ.ΔⲆⵠⵠ = e.info;
                    Ww.ⵠⵠⵠⵠ.ⲆΔᐃⵠ = e.ⲆΔᐃⵠ;
                    Ww.ⵠⵠⵠⵠ.ⵠⵠΔᐃⲆ = e.id;
                    Ww.ⵠⵠⵠⵠ.locked = e.lock;
                    Ww.ⵠⵠⵠⵠ.lock = !!e.lock && e.ⲆΔᐃⵠ != Ww.id && !Ww.ᐃⵠⲆᐃΔⲆΔ(e.ⲆΔᐃⵠ) && tr;
                    Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ = Ww.id !== e.ⲆΔᐃⵠ || Ww.ⵠⵠⵠⵠ.locked || Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(148) == -1 ? wq : Jr;
                    if (Ww.ⵠⵠⵠⵠ.locked && Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(158) != -1) {
                        Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ = true;
                    }
                }
            }
            if (c < ew.ⵠⵠⲆⵠⵠᐃⲆ) {
                var g = Ⲇᐃ[339];
                var a = Yw.ⵠᐃΔ[0];
                var j = Math.floor(a.info.translate.x + (a.info.ⲆⲆ[0].width - g.width) / 2);
                var k = Math.floor(a.info.translate.y + (a.info.ⲆⲆ[0].height - g.height) / 2) + 3;
                Jc(lo, g, j, k);
                if ((!Ww.ⵠⵠⵠⵠ.lock || Ww.id === Ww.ⵠⵠⵠⵠ.ⲆΔᐃⵠ) && Ww.ⵠⵠⵠⵠ.id >= 0) {
                    (a = Yw.ⵠᐃΔ[Ww.ⵠⵠⵠⵠ.id]).ΔΔⲆᐃ(lo);
                    var h = Ww.ⵠⵠⵠⵠ.ΔⲆⵠⵠ;
                    if (h > 1) {
                        Pc(h, a);
                    }
                }
                if (Ww.ⵠⵠⵠⵠ.lock) {
                    Yw.ᐃⲆⵠᐃⵠⲆΔ.ΔΔⲆᐃ(lo);
                } else if (Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ) {
                    Yw.ΔᐃⲆⲆΔΔⵠ.ΔΔⲆᐃ(lo);
                }
                if (Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ) {
                    Yw.ⵠⵠⵠΔΔⵠⵠ.ΔΔⲆᐃ(lo);
                }
            }
        }
    }
    function Cc() {
        if (Ww.ⵠΔᐃⵠΔⲆᐃ) {
            lo.globalAlpha = 0.5;
            lo.fillStyle = "#000";
            lo.fillRect(0, 0, uo, vo);
            lo.globalAlpha = 0.8;
            var b = Ⲇᐃ[516][lf.time];
            var c = hq - b.width / 2;
            var d = iq - b.height / 2;
            Jc(lo, b, c, d);
            lo.globalAlpha = 1;
            if (Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.x > -1) {
                lo.fillStyle = "#660000";
                zt(lo, c + Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.x * 3 * fo, d + fo * (Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.y * 3), fo * 14);
                lo.fill();
            }
            for (var e = Yw.ⲆⵠⲆᐃᐃ.ᐃⲆⲆΔ, f = 0; f < e.length; f++) {
                var g = e[f];
                lf.time;
                lo.fillStyle = "#ff0000";
                zt(lo, c + g.x / (lf.ⵠᐃⵠⲆᐃ * 100) * 600 * fo, d + g.y / (lf.ΔⲆΔΔⵠ * 100) * 600 * fo, fo * 6);
                lo.fill();
            }
            var h = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            if (h) {
                lo.fillStyle = lf.time ? "#fff" : "#e39716";
                zt(lo, c + h.x / (lf.ⵠᐃⵠⲆᐃ * 100) * 600 * fo, d + fo * (h.y / (lf.ΔⲆΔΔⵠ * 100) * 600), fo * 12);
                lo.fill();
            }
        }
    }
    function Tc() {
        if (!Ww.ⵠⵠⵠⵠ.open && !Ww.ⲆᐃΔᐃⲆ.open && !Ww.ⵠΔᐃⲆ.open && !Ww.ᐃᐃᐃⵠ.open && !Ww.ⲆᐃΔᐃ.open) {
            Ww.sign.open = false;
            var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var b = ew.ⲆⵠΔⲆⵠⲆᐃ;
            if (a) {
                for (var c = 0; lf.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ].length > c; c++) {
                    var d = lf.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ][c];
                    var e = ΔᐃⲆᐃ.ΔΔⵠᐃ(d, a);
                    if (b > e && d.info === 0 && d.ⲆΔᐃⵠ === Ww.id) {
                        Ww.sign.open = true;
                        b = e;
                        Ww.sign.ⵠⵠΔᐃⲆ = d.id;
                    }
                }
                if (ew.ⲆⵠΔⲆⵠⲆᐃ > b) {
                    Yw.sign.button.ΔΔⲆᐃ(lo);
                }
            }
        }
    }
    function fc(b, c, d) {
        var e = Ⲇᐃ[465][b];
        var f = c.info.translate.x + fo * 5;
        var g = c.info.translate.y + fo * 5;
        if (c.info.state == Mv || d) {
            g += fo * 5;
        }
        Jc(lo, e, f, g);
    }
    function zc() {
        Ww.ⲆⵠⵠⲆᐃ.id = -1;
        Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ = -1;
        if (!Ww.ᐃⵠᐃⲆⵠΔⵠ && !Ww.ⲆⵠⵠⲆᐃ.wait && !Ww.ΔⵠᐃⲆⲆ) {
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = ew.ⵠⵠⲆⲆⵠΔᐃᐃΔ;
            if (b) {
                for (var d = 0; lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ].length > d; d++) {
                    var e = lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ][d];
                    var f = ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b);
                    if (f < c) {
                        c = f;
                        Ww.ⲆⵠⵠⲆᐃ.id = e.id;
                        Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ = e.ⲆΔᐃⵠ;
                        Ww.ⲆⵠⵠⲆᐃ.info = e.info;
                        Ww.ⲆⵠⵠⲆᐃ.lock = (e.info & 16) >> 4;
                    }
                }
            }
            var g = Yw.ⲆⵠΔΔⵠ;
            Yw.ⲆⵠΔΔⵠ = -1;
            if (Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ == -1 || Ww.ⵠᐃΔᐃΔ.length != 0 && Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ != Ww.id) {
                if (Ww.ⵠᐃΔᐃΔ.length != 0 && Ww.ⵠᐃΔᐃΔ[0] != Ww.id) {
                    Yw.ⲆⵠΔΔⵠ = dw.ⲆⲆⲆᐃⵠⵠᐃ;
                } else if (Ww.ⵠᐃΔᐃΔ.length != 0 && Ww.ⵠᐃΔᐃΔ[0] == Ww.id) {
                    Yw.ⲆⵠΔΔⵠ = dw.ΔΔᐃⲆⲆⵠⵠ;
                } else if (Ww.ⵠᐃΔᐃΔ.length != 0) {
                    Yw.ⲆⵠΔΔⵠ = dw.ⵠᐃᐃⵠᐃΔᐃ;
                }
            } else if (Ww.ⵠᐃΔᐃΔ.length == 0 && Ww.ⲆⵠⵠⲆᐃ.info >= 8) {
                Yw.ⲆⵠΔΔⵠ = dw.ΔⵠⲆⲆⵠⲆᐃ;
            } else if (Ww.ⵠᐃΔᐃΔ.length == 0) {
                Yw.ⲆⵠΔΔⵠ = dw.ⵠᐃᐃⵠᐃΔᐃ;
            } else {
                Yw.ⲆⵠΔΔⵠ = dw.ⲆᐃΔΔΔᐃⲆ;
            }
            if (Yw.ⲆⵠΔΔⵠ != -1) {
                Yw.ⲆᐃᐃΔⵠ[Yw.ⲆⵠΔΔⵠ].button.ΔΔⲆᐃ(lo);
            }
            var a = document.getElementById("team_box").style;
            if (Yw.ⲆⵠΔΔⵠ != -1 && Yw.ⲆⵠΔΔⵠ != g && a.display == "inline-block") {
                Yw.ⲆᐃᐃΔⵠ[Yw.ⲆⵠΔΔⵠ].action();
            }
        }
    }
    function yc() {
        var a = Yw.ⲆⵠΔⵠⵠ;
        var b = a.id;
        if (a.ⵠⲆⵠΔᐃ === 1 && a.display === 1) {
            if (ⵠᐃⵠᐃⵠ[b] === undefined) {
                ⵠᐃⵠᐃⵠ[b] = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    var e = Zs[b];
                    d.font = "20px Baloo Paaji";
                    var f = 0;
                    if (e.length >= 1) {
                        f = Math.max(0, d.measureText(e[0]).width);
                    }
                    d.font = "17px Baloo Paaji";
                    if (e.length >= 2) {
                        f = Math.max(f, d.measureText(e[1]).width);
                    }
                    d.font = "14px Baloo Paaji";
                    $s = 2;
                    for (; $s < e.length; $s++) {
                        f = Math.max(f, d.measureText(e[$s]).width);
                    }
                    var g = f + 35;
                    var a = 0;
                    a = e.length === 1 ? 55 : e.length === 2 ? 85 : (e.length - 2) * 26 + 85;
                    c.width = g;
                    c.height = a;
                    xt(d, 0, 0, g, a, 10);
                    d.fillStyle = "#000000";
                    d.globalAlpha = 0.5;
                    d.fill();
                    if (e.length >= 1) {
                        d.textBaseline = "middle";
                        d.font = "20px Baloo Paaji";
                        d.globalAlpha = 1;
                        d.fillStyle = "#e2c340";
                        d.fillText(e[0], 15, 28);
                    }
                    if (e.length >= 2) {
                        d.font = "17px Baloo Paaji";
                        d.fillStyle = "#ffffff";
                        d.fillText(e[1], 15, 55);
                        a = 55;
                    }
                    if (e.length >= 3) {
                        d.font = "14px Baloo Paaji";
                        d.globalAlpha = 0.7;
                        $s = 2;
                        for (; e.length > $s; $s++) {
                            d.fillText(e[$s], 15, a + 28);
                            a += 26;
                        }
                    }
                    return c;
                }(b);
            }
            if (a.ΔⵠΔΔ === 1) {
                Jc(lo, ⵠᐃⵠᐃⵠ[b], a.x, a.y);
            } else if (a.x - 80 + ⵠᐃⵠᐃⵠ[b].width > uo) {
                Jc(lo, ⵠᐃⵠᐃⵠ[b], uo - ⵠᐃⵠᐃⵠ[b].width - 10, a.y - ⵠᐃⵠᐃⵠ[b].height - 10);
            } else {
                Jc(lo, ⵠᐃⵠᐃⵠ[b], a.x - 80, a.y - ⵠᐃⵠᐃⵠ[b].height - 10);
            }
        }
    }
    function wc() {
        if (!Ww.ⵠⵠⵠⵠ.open && !Ww.ⲆᐃΔᐃⲆ.open && !Ww.ⵠΔᐃⲆ.open && !Ww.ⲆᐃΔᐃ.open) {
            Ww.ᐃᐃᐃⵠ.open = false;
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = ew.ⵠᐃⵠⵠᐃⵠᐃ;
            if (b) {
                for (var d = 0; lf.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ].length > d; d++) {
                    var e = lf.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ][d];
                    var f = ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b);
                    if (f < c) {
                        c = f;
                        Ww.ᐃᐃᐃⵠ.open = true;
                        Ww.ᐃᐃᐃⵠ.ΔⵠᐃᐃⵠⲆΔ = e.info & 31;
                        Ww.ᐃᐃᐃⵠ.ΔⵠⲆᐃΔ = (e.info & 992) >> 5;
                        Ww.ᐃᐃᐃⵠ.ΔⵠΔⵠΔΔΔ = (e.info & 31744) >> 10;
                        Ww.ᐃᐃᐃⵠ.ⲆΔᐃⵠ = e.ⲆΔᐃⵠ;
                        Ww.ᐃᐃᐃⵠ.ⵠⵠΔᐃⲆ = e.id;
                    }
                }
                if (ew.ⵠᐃⵠⵠᐃⵠᐃ > c) {
                    var g = Ⲇᐃ[722];
                    var a = (j = Yw.ⵠⵠΔⲆⵠᐃᐃ).info.translate.x - 32;
                    Jc(lo, g, a, 0);
                    if (Ww.ᐃᐃᐃⵠ.ΔⵠᐃᐃⵠⲆΔ > 0) {
                        j.ΔΔⲆᐃ(lo);
                        if ((k = Ww.ᐃᐃᐃⵠ.ΔⵠᐃᐃⵠⲆΔ) > 1) {
                            Pc(k, j);
                        }
                    }
                    var j = Yw.ΔΔⲆᐃⵠⲆΔ;
                    if (Ww.ᐃᐃᐃⵠ.ΔⵠΔⵠΔΔΔ > 0) {
                        j.ΔΔⲆᐃ(lo);
                        if ((k = Ww.ᐃᐃᐃⵠ.ΔⵠΔⵠΔΔΔ) > 1) {
                            Pc(k, j);
                        }
                    }
                    j = Yw.ΔⲆⵠⲆⵠᐃⵠ;
                    if (Ww.ᐃᐃᐃⵠ.ΔⵠⲆᐃΔ > 0) {
                        j.ΔΔⲆᐃ(lo);
                        var k = Ww.ᐃᐃᐃⵠ.ΔⵠⲆᐃΔ;
                        if (k > 1) {
                            Pc(k, j);
                        }
                    }
                }
            }
        }
    }
    function Pc(a, b) {
        if (!Ⲇᐃ[283][a]) {
            Ⲇᐃ[283][a] = Ed(fo, "x" + a, 17, "#FFF");
        }
        var c = Ⲇᐃ[283][a];
        var d = b.info.translate.x + b.info.ⲆⲆ[0].width - c.width - fo * 14;
        var e = b.info.translate.y + b.info.ⲆⲆ[0].height - c.height - fo * 19;
        if (b.info.state == Mv) {
            e += fo * 5;
        }
        Jc(lo, c, d, e);
    }
    function Ac() {
        if (Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length > 0) {
            var b = {
                x: Yw.ⲆⵠⲆᐃᐃ.translate.x,
                y: Yw.ⲆⵠⲆᐃᐃ.translate.y - fo * 120
            };
        } else {
            b = {
                x: Yw.ⲆⵠⲆᐃᐃ.translate.x,
                y: Yw.ⲆⵠⲆᐃᐃ.translate.y - fo * 50
            };
        }
        lo.globalAlpha = 0.8;
        var c = Ⲇᐃ[259][lf.time];
        Jc(lo, c, b.x, b.y);
        lo.globalAlpha = 1;
        if (Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.x > -1) {
            lo.fillStyle = "#660000";
            zt(lo, b.x + fo * Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.x, b.y + Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.y * fo, fo * 5);
            lo.fill();
        }
        var d = fo;
        for (var f = Yw.ⲆⵠⲆᐃᐃ.ᐃⲆⲆΔ, g = 0; g < f.length; g++) {
            var h = f[g];
            lf.time;
            lo.fillStyle = "#ff0000";
            zt(lo, b.x + h.x / (lf.ⵠᐃⵠⲆᐃ * 100) * 193 * fo, b.y + fo * (h.y / (lf.ΔⲆΔΔⵠ * 100) * 193), fo * 2);
            lo.fill();
        }
        var i = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
        if (i) {
            lo.fillStyle = lf.time ? "#fff" : "#e39716";
            zt(lo, b.x + i.x / (lf.ⵠᐃⵠⲆᐃ * 100) * 193 * fo, b.y + fo * (i.y / (lf.ΔⲆΔΔⵠ * 100) * 193), fo * 4);
            lo.fill();
        }
        fo = d;
    }
    function kc() {
        if (!Ww.ⵠⵠⵠⵠ.open && !Ww.ⲆᐃΔᐃⲆ.open) {
            Ww.ⵠΔᐃⲆ.open = false;
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = ew.ⲆΔᐃᐃΔΔⲆ;
            if (b) {
                for (var d = 0; lf.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ].length > d; d++) {
                    var e = lf.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ][d];
                    var f = ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        Ww.ⵠΔᐃⲆ.open = Ah;
                        Ww.ⵠΔᐃⲆ.ᐃΔⵠΔᐃΔᐃ = e.info & 255;
                        Ww.ⵠΔᐃⲆ.ΔⵠⲆᐃΔ = (e.info & 65280) >> 8;
                        Ww.ⵠΔᐃⲆ.ⲆΔᐃⵠ = e.ⲆΔᐃⵠ;
                        Ww.ⵠΔᐃⲆ.ⵠⵠΔᐃⲆ = e.id;
                    }
                }
                if (ew.ⲆΔᐃᐃΔΔⲆ > c) {
                    var g = Ⲇᐃ[655];
                    var a = (k = Yw.ⲆⲆⲆⵠᐃΔⲆ).info.translate.x - 33;
                    Jc(lo, g, a, 0);
                    if (Ww.ⵠΔᐃⲆ.ᐃΔⵠΔᐃΔᐃ > 0) {
                        k.ΔΔⲆᐃ(lo);
                        var j = Ww.ⵠΔᐃⲆ.ᐃΔⵠΔᐃΔᐃ;
                        if (j > 1) {
                            Pc(j, k);
                        }
                    }
                    var k = Yw.ᐃⲆⲆΔⲆⲆⲆ;
                    if (Ww.ⵠΔᐃⲆ.ΔⵠⲆᐃΔ > 0) {
                        k.ΔΔⲆᐃ(lo);
                        if ((j = Ww.ⵠΔᐃⲆ.ΔⵠⲆᐃΔ) > 1) {
                            Pc(j, k);
                        }
                    }
                }
            }
        }
    }
    function xc() {
        if (!Ww.ⵠⵠⵠⵠ.open) {
            Ww.ⲆᐃΔᐃⲆ.ΔⲆⵠⵠ = 0;
            Ww.ⲆᐃΔᐃⲆ.open = false;
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = ew.Δᐃⵠⵠᐃᐃᐃ;
            if (b) {
                for (var d = 0; lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ].length > d; d++) {
                    var e = lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ][d];
                    var f = ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b);
                    if (c > f) {
                        c = f;
                        Ww.ⲆᐃΔᐃⲆ.open = Ah;
                        Ww.ⲆᐃΔᐃⲆ.ΔⲆⵠⵠ = e.info;
                        Ww.ⲆᐃΔᐃⲆ.ⲆΔᐃⵠ = e.ⲆΔᐃⵠ;
                        Ww.ⲆᐃΔᐃⲆ.ⵠⵠΔᐃⲆ = e.id;
                    }
                }
                if (c < ew.Δᐃⵠⵠᐃᐃᐃ) {
                    var g = Ⲇᐃ[411];
                    var a = Yw.ᐃᐃⲆᐃᐃⲆᐃ;
                    var j = Math.floor(a.info.translate.x + (a.info.ⲆⲆ[0].width - g.width) / 2);
                    var k = Math.floor(a.info.translate.y + (a.info.ⲆⲆ[0].height - g.height) / 2) + 3;
                    Jc(lo, g, j, k);
                    if (Ww.ⲆᐃΔᐃⲆ.ΔⲆⵠⵠ > 0) {
                        a.ΔΔⲆᐃ(lo);
                        var h = Ww.ⲆᐃΔᐃⲆ.ΔⲆⵠⵠ;
                        if (h > 1) {
                            Pc(h, a);
                        }
                    }
                }
            }
        }
    }
    function Jc(b, c, d, e, f, g, a, i, j, h) {
        if (vk === c.ⵠᐃⵠⲆΔⵠΔ || c.ⵠᐃⵠⲆΔⵠΔ() === 1) {
            if (h !== undefined) {
                b.drawImage(c, d, e, Math.max(1, f), Math.max(1, g), a, i, j, h);
            } else if (g !== undefined) {
                b.drawImage(c, d, e, f, g);
            } else {
                b.drawImage(c, d, e);
            }
        }
    }
    function Mc() {
        if (!Ww.ⵠⵠⵠⵠ.open && !Ww.ⲆᐃΔᐃⲆ.open) {
            Ww.ⲆᐃΔᐃ.open = false;
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = ew.ⵠᐃᐃⵠⵠⵠⲆ;
            if (b) {
                for (var d = 0; iw.length > d; d++) {
                    for (var e = iw[d][0], f = iw[d][1], j = 0; j < lf.ᐃΔᐃ[e].length; j++) {
                        var k = lf.ᐃΔᐃ[e][j];
                        var m = ΔᐃⲆᐃ.ΔΔⵠᐃ(k, b);
                        if (c > m) {
                            c = m;
                            Ww.ⲆᐃΔᐃ.ⵠᐃⲆⵠⵠΔⲆ = f;
                            Ww.ⲆᐃΔᐃ.type = e;
                            Ww.ⲆᐃΔᐃ.open = Wa;
                            Ww.ⲆᐃΔᐃ.ΔⵠᐃᐃⵠⲆΔ = k.info & 255;
                            Ww.ⲆᐃΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ = (k.info & 65280) >> 8;
                            Ww.ⲆᐃΔᐃ.ⲆΔᐃⵠ = k.ⲆΔᐃⵠ;
                            Ww.ⲆᐃΔᐃ.ⵠⵠΔᐃⲆ = k.id;
                        }
                    }
                }
                if (c < ew.ⵠᐃᐃⵠⵠⵠⲆ) {
                    var p;
                    var q = Ⲇᐃ[656];
                    var l = (g = Yw.ΔⵠΔⵠⲆⲆⲆ).info.translate.x - 33;
                    Jc(lo, q, l, 0);
                    if (Ww.ⲆᐃΔᐃ.ΔⵠᐃᐃⵠⲆΔ > 0) {
                        g.ΔΔⲆᐃ(lo);
                        if ((p = Ww.ⲆᐃΔᐃ.ΔⵠᐃᐃⵠⲆΔ) > 1) {
                            Pc(p, g);
                        }
                    }
                    switch (Ww.ⲆᐃΔᐃ.ⵠᐃⲆⵠⵠΔⲆ) {
                        case 108:
                            var g = Yw.ⵠⵠᐃⲆⵠᐃⲆ;
                            break;
                        case 111:
                            g = Yw.ⵠⲆⵠⲆⲆⲆΔ;
                            break;
                        case 112:
                            g = Yw.ⵠⲆᐃⵠΔΔⲆ;
                            break;
                        case 121:
                            g = Yw.ΔⵠΔΔᐃⲆⲆ;
                            break;
                        case 202:
                            g = Yw.ΔᐃᐃⵠᐃⲆΔ;
                    }
                    if (Ww.ⲆᐃΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ > 0) {
                        g.ΔΔⲆᐃ(lo);
                        if ((p = Ww.ⲆᐃΔᐃ.ⵠⲆᐃⲆⵠᐃⵠ) > 1) {
                            Pc(p, g);
                        }
                    }
                }
            }
        }
    }
    ⵠᐃⵠᐃⵠ = [];
    ΔΔᐃᐃⵠⲆⲆ = [];
    var Bc = [];
    function Dc() {
        var a = lf.ᐃΔⲆᐃⲆ;
        var b = Ⲇᐃ[725][lf.time];
        Jc(lo, b, a.translate.x, a.translate.y);
        lo.save();
        lo.translate(a.translate.x + b.width / 2, a.translate.y + b.height / 2);
        lf.ᐃΔⲆᐃⲆ.now = (new Date().getTime() - a.ⲆⲆⵠⲆⲆ + a.ⵠΔᐃᐃⵠ) % ew.ΔᐃΔ;
        var c = lf.ᐃΔⲆᐃⲆ.now * (Math.PI * 2) / ew.ΔᐃΔ - Math.PI / 2;
        lo.rotate(c);
        Jc(lo, Ⲇᐃ[726], -b.width / 2, -b.height / 2);
        lo.restore();
    }
    function Ec() {
        var a = -8;
        if (Ww.ⲆΔᐃⲆΔ.enabled) {
            var b = Ⲇᐃ[546];
            Jc(lo, b, Ww.ⲆΔᐃⲆΔ.translate.x, Ww.ⲆΔᐃⲆΔ.translate.y + a);
            a += 70;
        }
        if (Ww.ΔᐃΔⵠⵠⵠΔ === 1) {
            b = Ⲇᐃ[549];
            Jc(lo, b, Ww.ⲆΔᐃⲆΔ.translate.x, Ww.ⲆΔᐃⲆΔ.translate.y + a);
            a += 70;
        } else if (Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.x < 0.25 || Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ.x < 0.25 || Ww.ᐃⲆⲆⲆ.ⵠᐃΔΔΔⵠᐃ.x < 0.25 || Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.x < 0.25 || Ww.ᐃⲆⲆⲆ.ᐃⲆΔⵠⲆ.x < 0.25) {
            b = Ⲇᐃ[548];
            Jc(lo, b, Ww.ⲆΔᐃⲆΔ.translate.x, Ww.ⲆΔᐃⲆΔ.translate.y + a);
            a += 70;
        }
        if (Ww.ᐃΔΔΔΔ > 0) {
            b = Ⲇᐃ[547];
            Jc(lo, b, Ww.ⲆΔᐃⲆΔ.translate.x, Ww.ⲆΔᐃⲆΔ.translate.y + a);
            var c = Bc[Ww.ᐃΔΔΔΔ];
            if (c === ts) {
                c = Ed(fo, Ww.ᐃΔΔΔΔ + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
                Bc[Ww.ᐃΔΔΔΔ] = c;
            }
            if (Ww.ᐃΔΔΔΔ < 9) {
                Jc(lo, c, Ww.ⲆΔᐃⲆΔ.translate.x - 39, Ww.ⲆΔᐃⲆΔ.translate.y + a + 20);
            } else {
                Jc(lo, c, Ww.ⲆΔᐃⲆΔ.translate.x - 46, Ww.ⲆΔᐃⲆΔ.translate.y + a + 20);
            }
        }
    }
    function Ic() {
        for (var b = Ww.ᐃⲆΔᐃ, c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ], d = 0; d < b.ⵠΔⵠᐃⵠ.length; d++) {
            var e = b.ⵠΔⵠᐃⵠ[d];
            var f = mk;
            if ((c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ]) && (c.right == e.id || c.ⵠΔᐃⲆᐃ == e.id && c.ⵠΔᐃⲆᐃ > 0)) {
                f = ft;
                Jc(lo, e.info.ⲆⲆ[2], e.info.translate.x, e.info.translate.y, e.info.width, e.info.height);
            } else {
                e.ΔΔⲆᐃ(lo);
            }
            var g = Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[e.id];
            if (g > 1) {
                Pc(g, e);
            }
            if (g > 0) {
                fc(d, e, f);
            }
            var h = Ww.ⵠⵠⵠⵠ;
            if (h.open && (h.id < 0 || e.id == h.id) && (!h.lock || Ww.id == h.ⲆΔᐃⵠ)) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
            if (Ww.ⲆᐃΔᐃⲆ.open && e.id == 109) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
            if (Ww.ᐃⲆΔΔⵠ.open && e.id == 180) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
            if (Ww.ⵠΔᐃⲆ.open && e.id == 134) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
            if (Ww.ⲆᐃΔᐃ.open && e.id == 109) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
            if (!!Ww.ᐃᐃᐃⵠ.open && (e.id == 109 || e.id == 131)) {
                Yw.ᐃᐃⵠⲆⵠ[e.id].ΔΔⲆᐃ(lo);
            }
        }
        if (e && b.max > d) {
            var j = Ⲇᐃ[334][2];
            ᐃΔ = e.info.translate.x;
            Ⲇᐃⵠ = e.info.translate.y;
            ᐃⵠⲆⵠ = 1;
            for (; d < b.max; d++, ᐃⵠⲆⵠ++) {
                Jc(lo, j, ᐃΔ + ᐃⵠⲆⵠ * (j.width + 5), Ⲇᐃⵠ);
            }
        }
    }
    function Sc() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Ui == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = a * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        ⲆⲆ = Ⲇᐃ[167][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + b, -ΔᐃⲆ / 2 + c, ⵠΔΔ, ΔᐃⲆ);
        if (this.lock) {
            ⲆⲆ = Ⲇᐃ[148][lf.time];
            ⵠΔΔ = -ⲆⲆ.width;
            ΔᐃⲆ = -ⲆⲆ.height;
            Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + b - fo * 1, -ΔᐃⲆ / 2 + c, ⵠΔΔ, ΔᐃⲆ);
        }
        lo.restore();
    }
    function Qc(a) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && yg == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var b = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = -e.width;
        ΔᐃⲆ = -e.height;
        Jc(lo, e, -ⵠΔΔ / 2 + c, -ΔᐃⲆ / 2 + d, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function _c() {
        var b = Ww.ⲆⲆᐃⵠᐃ;
        var c = Yw.ᐃⵠⵠΔ;
        if (b.ⲆΔᐃⲆ) {
            b.ⲆΔᐃⲆ = false;
            var d = b.ΔᐃᐃⲆΔ;
            var e = c.ΔⲆ.width;
            var f = c.ΔⲆ.height;
            var g = c.Δ;
            var a = lf.ᐃⲆⲆΔ;
            var i = false;
            g.clearRect(0, 0, e, f);
            g.drawImage(c.ⲆⲆ, 0, 0);
            for (var j = 0; j < d.length; j++) {
                var k = a[d[j]];
                if ((lf.mode !== ew.ᐃⲆᐃⲆᐃⵠⲆ || k.ΔᐃⵠΔⵠ !== "spectator") && (ew.ⲆⵠΔΔᐃ !== lf.mode || ew.ⵠⲆᐃⵠⲆⲆᐃ !== k.ⲆΔⲆΔ)) {
                    if (d[j] == Ww.id) {
                        i = Jn;
                        if (ew.ᐃⲆⵠⲆΔ === lf.mode && k.ⲆΔⲆΔ === ew.ᐃⵠⲆⵠᐃᐃΔ) {
                            ⲆΔ = "#FF0000";
                        } else {
                            ⲆΔ = "#FFF";
                        }
                    } else if (lf.mode === ew.ᐃⲆⵠⲆΔ && ew.ᐃⵠⲆⵠᐃᐃΔ === k.ⲆΔⲆΔ) {
                        ⲆΔ = "#990000";
                    } else {
                        ⲆΔ = "#A1BDCD";
                    }
                    g.drawImage(Ed(fo, "" + (j + 1), fo * 15, ⲆΔ), fo * 20, (40 + j * 22) * fo);
                    if (!k.ΔᐃᐃΔᐃΔΔ) {
                        k.ΔᐃᐃΔᐃΔΔ = Ed(fo, k.ΔᐃⵠΔⵠ, fo * 15, ⲆΔ, undefined, undefined, undefined, undefined, fo * 110);
                    }
                    g.drawImage(k.ΔᐃᐃΔᐃΔΔ, fo * 39, (40 + j * 22) * fo);
                    g.drawImage(Ed(fo, ΔᐃⲆᐃ.ΔΔⲆΔⵠΔᐃ(k.ⵠⲆⲆΔΔ), fo * 15, ⲆΔ), fo * 156, (40 + j * 22) * fo);
                }
            }
            if (!i) {
                if (lf.mode === ew.ⲆⲆⲆⵠⵠ || ew.ᐃⲆⵠⲆΔ === lf.mode || lf.mode === ew.ⲆΔᐃⲆᐃ || ew.ⲆⲆⵠΔⵠⵠᐃ === lf.mode || ew.ⲆΔⲆΔᐃ === lf.mode || ew.ᐃⲆᐃⲆᐃⵠⲆ === lf.mode && !Ww.ᐃⵠᐃⲆⵠΔⵠ || lf.mode === ew.ⲆⵠΔΔᐃ && !Ww.ΔⵠᐃⲆⲆ) {
                    g.drawImage(Ⲇᐃ[306], fo * 15, fo * (46 + j * 22));
                    g.drawImage(Ed(fo, ΔᐃⲆᐃ.ΔΔⲆΔⵠΔᐃ(lf.ᐃⲆⲆΔ[Ww.id].ⵠⲆⲆΔΔ), fo * 15, "#FFF"), fo * 100, fo * (46 + j * 22));
                }
            }
        }
        Jc(lo, c.ΔⲆ, c.translate.x, c.translate.y);
    }
    function Fc() {
        var a = Ww.ⲆᐃΔᐃᐃ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃⲆ();
            lo.save();
            var c = Ⲇᐃ[792];
            lo.translate(c.width - fo * 2, Yw.ᐃⲆⲆⲆ.translate.y - fo * 125);
            var d = -c.width / 2 + 10;
            var e = -c.height / 2 - 4;
            Jc(lo, c, d, e);
            lo.beginPath();
            lo.lineWidth = fo * 5;
            lo.strokeStyle = Pr.ΔⲆⲆᐃⲆⲆⲆ[lf.time];
            lo.lineCap = "round";
            lo.arc(9, e + c.height / 2, fo * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠΔ);
            lo.stroke();
            lo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ᐃⵠΔ = 0;
                a.timeout.ΔⲆⵠ = hh;
            }
        }
    }
    function Rc() {
        var b = Ww.ΔⵠΔΔ;
        if (!b.ΔΔⵠⲆΔ && b.ᐃⵠΔⲆ > 0) {
            var c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            if (!c) {
                return;
            }
            lo.save();
            if (Xr[b.ᐃⵠΔⲆ].ⵠᐃΔᐃ === 0 && b.mode === 0) {
                lo.translate(Ww.ᐃⵠΔΔ.x + c.x, Ww.ᐃⵠΔΔ.y + c.y);
                lo.rotate(c.angle);
                lo.translate(120, 0);
            } else {
                var d = Math.floor(c.x + Math.sin(c.angle) * 120);
                var e = Math.floor(c.y + Math.cos(c.angle) * 120);
                d = Ww.ᐃⵠΔΔ.x + (d - d % 100 + 50);
                e = Ww.ᐃⵠΔΔ.y + (e - e % 100 + 50);
                lo.translate(d, e);
            }
            var f = Ⲇᐃ[b.ᐃⵠΔⲆ][lf.time];
            lo.globalAlpha = 0.5;
            Jc(lo, f, -f.width / 2, -f.height / 2);
            lo.globalAlpha = 1;
            lo.restore();
            if (Xr[b.ᐃⵠΔⲆ].ⵠᐃΔᐃ === 0) {
                if (!b.label[b.mode]) {
                    if (b.mode === 0) {
                        b.label[0] = Ed(fo, Zs[336], 20, "#e2c340");
                    } else {
                        b.label[1] = Ed(fo, Zs[337], 20, "#e2c340");
                    }
                }
                f = b.label[b.mode];
                Jc(lo, f, hq + -f.width / 2, Yw.ᐃⲆⲆⲆ.y - 26);
            }
        }
        if (b.ΔΔⵠⲆΔ) {
            var g = b.timeout.ⲆΔᐃⲆ();
            for (var a = 0; b.ᐃⵠⲆⲆⲆ.length > a; a++) {
                var i = b.ᐃⵠⲆⲆⲆ[a];
                if (i.id == b.id) {
                    var j = fo * 42;
                    var k = fo * 17;
                    xt(lo, i.info.translate.x, i.info.translate.y + j * (1 - b.timeout.ᐃⵠΔ), i.info.width, j * b.timeout.ᐃⵠΔ + k, fo * 10);
                    lo.fillStyle = "#55B973";
                    lo.fill();
                    lo.globalAlpha = 0.8;
                    i.ΔΔⲆᐃ(lo);
                } else {
                    lo.globalAlpha = 0.5;
                    i.ΔΔⲆᐃ(lo);
                }
                lo.globalAlpha = 1;
            }
            if (g) {
                b.ΔΔⵠⲆΔ = Sr;
                b.timeout.ᐃⵠΔ = 0;
                b.timeout.ΔⲆⵠ = Ln;
            }
            return true;
        }
        for (a = 0; b.ᐃⵠⲆⲆⲆ.length > a; a++) {
            b.ᐃⵠⲆⲆⲆ[a].ΔΔⲆᐃ(lo);
        }
        return false;
    }
    function jc() {
        var a = Ww.ⲆΔᐃⵠⲆ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃⲆ();
            lo.save();
            var c = Ⲇᐃ[537];
            lo.translate(c.width - fo * 2, Yw.ᐃⲆⲆⲆ.translate.y - fo * 60);
            var d = -c.width / 2 - 2;
            var e = -c.height / 2 - 4;
            Jc(lo, c, d, e);
            lo.beginPath();
            lo.lineWidth = fo * 5;
            lo.strokeStyle = Pr.ΔⲆⵠᐃᐃⲆⵠ[lf.time];
            lo.lineCap = "round";
            lo.arc(0, e + c.height / 2, fo * 25, 0, a.timeout.ᐃⵠΔ * (Math.PI * 2));
            lo.stroke();
            lo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ᐃⵠΔ = 0;
                a.timeout.ΔⲆⵠ = false;
            }
        }
    }
    function Gc() {
        lo.save();
        var a = fo;
        if (Ww.ᐃⲆⲆⲆ.ΔΔⵠⲆⲆ.x < 0.25) {
            lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ⲆⲆΔᐃΔΔⵠ.ᐃⵠΔ;
        }
        var b = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length > 0 ? -70 : 0;
        if (Ww.ⵠⵠⵠⵠ.open || Ww.ⲆᐃΔᐃⲆ.open && Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(109) != -1 || Ww.ⵠΔᐃⲆ.open && Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(134) != -1 || Ww.ⲆᐃΔᐃ.open && Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(109) != -1 || Ww.ᐃⲆΔΔⵠ.open && Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(180) != -1 || Ww.ᐃᐃᐃⵠ.open && (Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(109) != -1 || Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(131) != -1)) {
            b -= fo * 50;
        }
        lo.translate((uo - fo * 950) / 2, b);
        lo.fillStyle = "#69A148";
        lo.fillRect(this.translate.x + fo * 37, this.translate.y + fo * 17, Ww.ᐃⲆⲆⲆ.ΔΔⵠⲆⲆ.x * 178 * fo, fo * 18);
        lo.globalAlpha = 1;
        if (Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ.x < 0.35) {
            lo.fillStyle = "#8F050A";
            lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ⲆᐃᐃⵠⵠᐃⲆ.ᐃⵠΔ;
            lo.fillRect(this.translate.x + fo * 277, this.translate.y + fo * 17, fo * 178, fo * 18);
            lo.globalAlpha = 1;
        }
        lo.fillStyle = "#AF352A";
        lo.fillRect(this.translate.x + fo * 277, this.translate.y + fo * 17, fo * (Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ.x * 178), fo * 18);
        if (Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.x < 0.35) {
            lo.fillStyle = "#366B91";
            lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ᐃⲆᐃⵠⲆᐃⵠ.ᐃⵠΔ;
            lo.fillRect(this.translate.x + fo * 517, this.translate.y + fo * 17, fo * 178, fo * 18);
            lo.globalAlpha = 1;
        }
        lo.fillStyle = "#669BB1";
        lo.fillRect(this.translate.x + fo * 517, this.translate.y + fo * 17, fo * (Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.x * 178), fo * 18);
        if (Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.x > 0.99) {
            if (Ww.ᐃⲆⲆⲆ.ᐃⲆΔⵠⲆ.x < 0.35) {
                lo.fillStyle = "#6C4036";
                lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ᐃⵠᐃⵠⵠᐃⵠ.ᐃⵠΔ;
                lo.fillRect(this.translate.x + fo * 517, this.translate.y + fo * 17, fo * 178, fo * 18);
                lo.globalAlpha = 1;
            }
            lo.fillStyle = "#9C4036";
            lo.fillRect(this.translate.x + fo * 517, this.translate.y + fo * 17, (1 - Ww.ᐃⲆⲆⲆ.ᐃⲆΔⵠⲆ.x) * 178 * fo, fo * 18);
        }
        if (Ww.ᐃⲆⲆⲆ.ⵠᐃΔΔΔⵠᐃ.x < 0.35) {
            lo.fillStyle = "#001A57";
            lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃΔΔ.ᐃⵠΔ;
            lo.fillRect(this.translate.x + fo * 757, this.translate.y + fo * 17, fo * 178, fo * 18);
            lo.globalAlpha = 1;
        }
        lo.fillStyle = "#074A87";
        lo.fillRect(this.translate.x + fo * 757, this.translate.y + fo * 17, fo * (Ww.ᐃⲆⲆⲆ.ⵠᐃΔΔΔⵠᐃ.x * 178), fo * 18);
        fo = a;
        Jc(lo, this.ⲆⲆ, this.translate.x, this.translate.y);
        this.y = this.translate.y + b;
        lo.restore();
        if (Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.x < 0.99) {
            var c = Math.floor(hq - Ⲇᐃ[608].width / 2);
            b += this.translate.y - Ⲇᐃ[608].height - fo * 5;
            lo.fillStyle = "#BBE8EF";
            lo.fillRect(c + 5, b + fo * 5, Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.x * (fo * 588), fo * 10);
            if (Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.x < 0.35) {
                lo.fillStyle = "#9BA8AF";
                lo.globalAlpha = Ww.ᐃⲆⲆⲆ.ΔΔⲆⲆΔⲆᐃ.ᐃⵠΔ;
                lo.fillRect(c + 5, b + 5, fo * 588, fo * 10);
                lo.globalAlpha = 1;
            }
            Jc(lo, Ⲇᐃ[608], c, b);
            this.y = b;
        }
    }
    function Lc() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[848][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Wc() {
        var b = Ww.ⲆⵠⵠⲆᐃ;
        if (b.wait) {
            var c = b.timeout.ⲆΔᐃⲆ();
            lo.save();
            var d = Ⲇᐃ[562];
            var e = Ⲇᐃ[537].height + fo * 25;
            lo.translate(d.width, Yw.ᐃⲆⲆⲆ.translate.y - fo * 188 - e);
            var f = -d.width / 2 - 2;
            var g = -d.height / 2 - 4;
            Jc(lo, d, f + 2, g);
            lo.beginPath();
            lo.lineWidth = fo * 5;
            lo.strokeStyle = Pr.ΔⲆⵠᐃᐃⲆⵠ[lf.time];
            lo.lineCap = "round";
            lo.arc(0, g + d.height / 2, fo * 25, 0, b.timeout.ᐃⵠΔ * (Math.PI * 2));
            lo.stroke();
            lo.restore();
            if (c) {
                b.wait = eh;
                b.timeout.ᐃⵠΔ = 0;
                b.timeout.ΔⲆⵠ = hj;
            }
        }
    }
    function Nc() {
        var a = Ww.ΔⵠΔΔ;
        if (a.ΔΔⵠⲆΔ) {
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + b.x, Ww.ᐃⵠΔΔ.y + b.y);
            var c = Ⲇᐃ[324];
            var d = -c.width / 2;
            var e = -c.height / 2 - fo * 125;
            Jc(lo, c, d, e);
            lo.beginPath();
            lo.lineWidth = fo * 5;
            lo.strokeStyle = Pr.ⲆⲆⲆⵠⲆΔⵠ[lf.time];
            lo.lineCap = "round";
            lo.arc(0, e + c.height / 2, fo * 25, 0, Math.PI * 2 * a.timeout.ᐃⵠΔ);
            lo.stroke();
            lo.restore();
        }
    }
    function Oc() {
        var a = Ww.ⲆⵠΔΔΔ;
        if (a.wait) {
            var b = a.timeout.ⲆΔᐃⲆ();
            lo.save();
            var c = Ⲇᐃ[794];
            lo.translate(c.width - fo * 12, Yw.ᐃⲆⲆⲆ.translate.y - fo * 190);
            var d = -c.width / 2 + 9;
            var e = -c.height / 2 - 4;
            Jc(lo, c, d, e);
            lo.beginPath();
            lo.lineWidth = fo * 5;
            lo.strokeStyle = Pr.ΔⲆⲆᐃⲆⲆⲆ[lf.time];
            lo.lineCap = "round";
            lo.arc(9, e + c.height / 2, fo * 25, 0, a.timeout.ᐃⵠΔ * (Math.PI * 2));
            lo.stroke();
            lo.restore();
            if (b) {
                a.wait = false;
                a.timeout.ᐃⵠΔ = 0;
                a.timeout.ΔⲆⵠ = false;
            }
        }
    }
    const qc = 3;
    function Hc(a) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == oj) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = $h;
            }
            var b = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        ⲆⲆ = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + c, -ΔᐃⲆ / 2 + d, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Uc(a) {
        if ((a = a / 100) <= 0.95) {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && eh == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Sr;
                }
                var b = fo * (cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600);
                var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
                var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            lo.globalAlpha = 0.5;
            Ct(lo, c, d, fo * 28, a);
            wt(lo, null, "#000000", fo * 18);
            lo.globalAlpha = 1;
            Ct(lo, c, d, fo * 28, a);
            wt(lo, null, Pr.ⲆⲆⲆⵠⲆΔⵠ[lf.time], fo * 6);
            lo.restore();
        }
    }
    function Yc(a) {
        if ((a = a / 100) <= 0.8) {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
                }
                var b = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
                var c = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * b;
                var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            lo.globalAlpha = 0.5;
            Ct(lo, c, d, fo * 18, a);
            wt(lo, null, "#000000", fo * 18);
            lo.globalAlpha = 1;
            Ct(lo, c, d, fo * 18, a);
            wt(lo, null, Pr.ᐃⲆⵠᐃᐃΔᐃ[lf.time], fo * 6);
            lo.restore();
        }
    }
    function Kc() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[239][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Vc(b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == fg) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = mk;
            }
            var c = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var d = c * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var e = c * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            d = 0;
            e = 0;
        }
        var f = Ⲇᐃ[853].length;
        ⲆⲆ = Ⲇᐃ[853][(this.ᐃⵠⲆⵠ + this.Δᐃ % 2) % f][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        var g = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
        if (g && (this.ⲆΔᐃⵠ === Ww.id || Ww.ᐃⵠⲆᐃΔⲆΔ(this.ⲆΔᐃⵠ))) {
            if (ΔᐃⲆᐃ.ΔΔⵠᐃ(this, g) < 550) {
                this.opacity = Math.max(this.opacity - cf, 0.3);
            } else {
                this.opacity = Math.min(this.opacity + cf, 1);
            }
        } else if (g && ΔᐃⲆᐃ.ΔΔⵠᐃ(this, lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ]) < 150) {
            this.opacity = Math.max(this.opacity - cf, 0.3);
        } else {
            this.opacity = Math.min(this.opacity + cf, 1);
        }
        var a = lo.globalAlpha;
        lo.globalAlpha *= this.opacity;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + d, -ΔᐃⲆ / 2 + e, ⵠΔΔ, ΔᐃⲆ);
        lo.globalAlpha = a;
        lo.restore();
    }
    function Xc() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[837][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Zc() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[321][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function $c(a) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && El == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var b = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        if (this.ⲆΔⲆᐃΔ.ⲆΔᐃⲆ()) {
            this.color += 0.2 + Math.random() * 0.3;
        }
        ⲆⲆ = Ⲇᐃ[872][Math.floor(this.id + this.color) % 5][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        ΔᐃⲆ = -ⲆⲆ.height * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + c, -ΔᐃⲆ / 2 + d, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function ep() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[811][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function ip(b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Ui == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var c = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
            var d = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * c;
            var e = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * c;
        } else {
            d = 0;
            e = 0;
        }
        if (b === 913 && !lf.transition) {
            var f = 0;
            for (var g = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ], a = 0; a < g.length; a++) {
                var h = ΔᐃⲆᐃ.ΔΔⵠᐃ(g[a], this);
                if (h < 140 && h > 35) {
                    f = 0;
                    break;
                }
                if (h <= 35) {
                    f = 1;
                }
            }
            this.opacity = f === 0 ? Math.max(0.5, this.opacity - cf / 1.5) : Math.min(1, this.opacity + cf / 1.5);
            lo.globalAlpha = this.opacity;
        }
        ⲆⲆ = Ⲇᐃ[b][lf.time];
        ⵠΔΔ = -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2 + d, -ΔᐃⲆ / 2 + e, ⵠΔΔ, ΔᐃⲆ);
        lo.globalAlpha = 1;
        lo.restore();
    }
    var tp = 0;
    function Tu() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
        lo.globalAlpha = 0.3;
        var a = Ⲇᐃ[282][lf.time];
        var b = this.ⵠΔⲆⲆ.ᐃⵠΔ * -a.width;
        var c = this.ⵠΔⲆⲆ.ᐃⵠΔ * -a.height;
        Jc(lo, a, -b / 2, -c / 2, b, c);
        lo.globalAlpha = 1;
        lo.restore();
    }
    function op() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = El;
            }
            var b = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[849][lf.time];
            } else {
                f = Ⲇᐃ[193][lf.time];
            }
            var g = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.width;
            var a = -f.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[869][lf.time];
            } else {
                f = Ⲇᐃ[194][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function ap() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && El == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = a * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[155][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 3) % (Math.PI * 2);
        }
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[1206][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function rp(a, b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (a === 854) {
            a = 250;
            this.info = 36;
        }
        ⲆⲆ = Ⲇᐃ[a][this.info][lf.time];
        ⵠΔΔ = -ⲆⲆ.width / 2;
        ΔᐃⲆ = -ⲆⲆ.height / 2;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Xu(this.info, ⲆⲆ, ᐃⲆⵠⲆⵠⲆᐃⵠⲆ);
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function sp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.ΔⲆᐃⵠᐃᐃⵠ.ⲆΔᐃⲆ();
        this.ᐃΔΔⵠᐃΔΔ.ⲆΔᐃⲆ();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        c = this.info === 0 ? Ⲇᐃ[231][lf.time] : Ⲇᐃ[1053][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.width;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.height;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Ⲇᐃ[1056];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            if (this.ⲆⵠⲆⵠᐃ.ⲆΔᐃⲆ() && this.ⲆⵠⲆⵠᐃ.ΔⲆⵠ == Ui) {
                this.action -= _v.ᐃᐃΔᐃΔ;
            }
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[1065];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle + b);
        lo.translate(100, 0);
        lo.rotate(a);
        c = this.info === 0 ? Ⲇᐃ[1060][lf.time] : Ⲇᐃ[1059][lf.time];
        ⵠΔΔ = -c.width * this.ΔⲆᐃⵠᐃᐃⵠ.ᐃⵠΔ;
        ΔᐃⲆ = -c.height * this.ΔⲆᐃⵠᐃᐃⵠ.ᐃⵠΔ;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            c = Ⲇᐃ[1057];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[1066];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle + a + b);
        lo.translate(100, 0);
        lo.rotate(a);
        c = this.info === 0 ? Ⲇᐃ[1063][lf.time] : Ⲇᐃ[1062][lf.time];
        ⵠΔΔ = -c.width * this.ᐃΔΔⵠᐃΔΔ.ᐃⵠΔ;
        ΔᐃⲆ = -c.height * this.ᐃΔΔⵠᐃΔΔ.ᐃⵠΔ;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            c = Ⲇᐃ[1058];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[1067];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function hp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + cf / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - cf, 1);
        }
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        a = this.info === 0 ? Ⲇᐃ[232][lf.time] : Ⲇᐃ[1068][lf.time];
        ⵠΔΔ = this.scale * (-a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.height * this.scale;
        Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == hh) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[1077];
            Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        a = this.info === 0 ? Ⲇᐃ[1072][lf.time] : Ⲇᐃ[1071][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width * this.scale;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.height * this.scale;
        lo.save();
        lo.translate(fo * -40, fo * 10);
        lo.rotate(this.rotate.ᐃⵠΔ);
        Jc(lo, a, fo * -ⵠΔΔ / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[1078];
            Jc(lo, a, fo * -ⵠΔΔ / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        a = this.info === 0 ? Ⲇᐃ[1075][lf.time] : Ⲇᐃ[1074][lf.time];
        lo.save();
        lo.translate(fo * 40, fo * 10);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ * fo / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[1079];
            Jc(lo, a, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.restore();
    }
    function lp() {
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        a = this.info === 0 ? Ⲇᐃ[248][lf.time] : Ⲇᐃ[1222][lf.time];
        ⵠΔΔ = -a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.height;
        Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[1223];
            Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function gp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = oj;
            }
            var b = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[985][lf.time];
            } else {
                f = Ⲇᐃ[210][lf.time];
            }
            var g = -f.width * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            var a = -f.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[986][lf.time];
            } else {
                f = Ⲇᐃ[211][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function up(a, b, c) {
        if (a >= 0) {
            ⲆⲆ = Ⲇᐃ[a][lf.time];
            switch (a) {
                case 1:
                case 3:
                case 4:
                case 8:
                case 31:
                case 32:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (45 + b), -ⲆⲆ.height / 2 + (c + 22) * fo);
                    break;
                case 94:
                case 95:
                case 96:
                case 97:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (52 + b), -ⲆⲆ.height / 4 + (c + 20) * fo);
                    break;
                case 98:
                case 99:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (57 + b), -ⲆⲆ.height / 4 + fo * (c + 20));
                    break;
                case 57:
                case 0:
                case 5:
                case 6:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (47 + b), -ⲆⲆ.height / 4 + fo * (c + 45));
                    break;
                case 30:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (52 + b), -ⲆⲆ.height / 4 + fo * (c + 45));
                    break;
                case 19:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (47 + b) * fo, -ⲆⲆ.height / 4 + (c + 44) * fo);
                    break;
                case 9:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (47 + b), -ⲆⲆ.height / 2 + (c + 44) * fo);
                    break;
                case 62:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (40 + b), -ⲆⲆ.height / 2 + fo * (c + 65));
                    break;
                case 12:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (37 + b) * fo, -ⲆⲆ.height / 4 + fo * (c + 85));
                    break;
                case 34:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (37 + b) * fo, -ⲆⲆ.height / 4 + fo * (c + 85));
                    break;
                case 54:
                case 53:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (26 + b), -ⲆⲆ.height / 4 + (c + 77) * fo);
                    break;
                case 17:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (37 + b), -ⲆⲆ.height / 4 + (c + 85) * fo);
                    break;
                case 63:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (47 + b) * fo, -ⲆⲆ.height / 4 + (c + 44) * fo);
                    break;
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (37 + b) * fo, -ⲆⲆ.height / 4 + fo * (c + 30));
                    break;
                case 56:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (47 + b), -ⲆⲆ.height / 4 + fo * (c + 35));
                    break;
                case 92:
                case 93:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (47 + b) * fo, -ⲆⲆ.height / 4 + fo * (c + 40));
                    break;
                case 89:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (47 + b), -ⲆⲆ.height / 4 + fo * (c + 34));
                    break;
                case 13:
                case 14:
                case 15:
                case 33:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (37 + b), -ⲆⲆ.height / 4 + (c + 90) * fo);
                    break;
                case 18:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (40 + b), -ⲆⲆ.height / 4 + (c + 85) * fo);
                    break;
                case 16:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - (39 + b) * fo, -ⲆⲆ.height / 2 + fo * (c + 90));
                    break;
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 45:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (46 + b), -ⲆⲆ.height / 2 + fo * (c + 35));
                    break;
                case 49:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - (47 + b) * fo, -ⲆⲆ.height / 2 + (c + 54) * fo);
                    break;
                case 46:
                case 50:
                case 51:
                case 52:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (46 + b), -ⲆⲆ.height / 2 + fo * (c + 35));
                    break;
                case 55:
                    zv(a, ⲆⲆ, -ⲆⲆ.width / 2 - fo * (47 + b), -ⲆⲆ.height / 2 + fo * (c + 20));
            }
        }
    }
    function bp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + cf / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - cf, 1);
        }
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        a = Ⲇᐃ[449][lf.time];
        ⵠΔΔ = -a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ * this.scale;
        ΔᐃⲆ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.height);
        Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == Ui) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[463];
            Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        a = Ⲇᐃ[451][lf.time];
        ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width);
        ΔᐃⲆ = this.scale * (-a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        lo.save();
        lo.translate(fo * -30, fo * 70);
        lo.rotate(this.rotate.ᐃⵠΔ);
        Jc(lo, a, fo * -10, fo * -40, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[466];
            Jc(lo, a, fo * -10, fo * -40, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        a = Ⲇᐃ[452][lf.time];
        lo.save();
        lo.translate(fo * 30, fo * 70);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        Jc(lo, a, fo * 10 - ⵠΔΔ, fo * -40, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[467];
            Jc(lo, a, fo * 10 - ⵠΔΔ, fo * -40, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.restore();
    }
    function dp() {
        if (this.info >= 10) {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && wq == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = ug;
                }
                var b = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
                var c = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            var e = Ⲇᐃ[206][lf.time];
            var f = this.ⵠΔⲆⲆ.ᐃⵠΔ * -e.width;
            var g = -e.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, e, -f / 2 + c, -g / 2 + d, f, g);
            lo.restore();
        }
    }
    function vp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Bk == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var b = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
            var c = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[953][lf.time];
            } else {
                f = Ⲇᐃ[204][lf.time];
            }
            var g = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.width;
            var a = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.height;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[954][lf.time];
            } else {
                f = Ⲇᐃ[205][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function mp() {
        if (this.info !== 10) {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == hh) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
                }
                var b = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
                var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
                var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
            } else {
                c = 0;
                d = 0;
            }
            if (this.info & 16) {
                var e = Ⲇᐃ[623][lf.time];
            } else {
                e = Ⲇᐃ[287][lf.time];
            }
            Jc(lo, e, -e.width / 2 + c, -e.width / 2 + d);
            lo.restore();
            for (var f = this.info & 15, g = 0; f > g; g++) {
                this.ⲆᐃⲆΔ[g].ΔΔⲆᐃ(294);
            }
        }
    }
    function cp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && $h == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = il;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = a * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[156][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 3) % (Math.PI * 2);
        }
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[1210][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function pp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        var a = ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + cf / 2, 1.8) : Math.max(this.scale - cf, 1);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        this.ⲆⲆⵠⵠ = a < 350 ? Math.max(0, this.ⲆⲆⵠⵠ - cf * 2.2) : Math.min(1, this.ⲆⲆⵠⵠ + cf * 2.2);
        b = (this.info & 1) === 0 ? Ⲇᐃ[1113][lf.time] : Ⲇᐃ[1114][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width * this.scale;
        ΔᐃⲆ = this.scale * (-b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        lo.globalAlpha = 1 - this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        b = (this.info & 1) === 0 ? Ⲇᐃ[235][lf.time] : Ⲇᐃ[1098][lf.time];
        ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width);
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.height * this.scale;
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && il == this.ⲆΔᐃΔ.ΔⲆⵠ) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = (1 - this.ⲆⲆⵠⵠ) * (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ);
            var b = Ⲇᐃ[1115];
            ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width);
            ΔᐃⲆ = this.scale * (-b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
            Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ) * this.ⲆⲆⵠⵠ;
            b = Ⲇᐃ[1107];
            ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width);
            ΔᐃⲆ = this.scale * (-b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
            Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        b = (this.info & 1) === 0 ? Ⲇᐃ[1102][lf.time] : Ⲇᐃ[1101][lf.time];
        ⵠΔΔ = this.scale * (-b.width * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        ΔᐃⲆ = -b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ * this.scale;
        lo.save();
        lo.translate(fo * -20, fo * 0);
        lo.rotate(this.rotate.ᐃⵠΔ);
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, fo * -ⵠΔΔ / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ) * this.ⲆⲆⵠⵠ;
            b = Ⲇᐃ[1108];
            Jc(lo, b, fo * -ⵠΔΔ / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        b = (this.info & 1) === 0 ? Ⲇᐃ[1105][lf.time] : Ⲇᐃ[1104][lf.time];
        lo.save();
        lo.translate(fo * 20, fo * 0);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ) * this.ⲆⲆⵠⵠ;
            b = Ⲇᐃ[1109];
            Jc(lo, b, -ⵠΔΔ * fo / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.globalAlpha = 1;
        lo.restore();
        lo.restore();
    }
    function Cp(a, b, c) {
        if (a >= 0) {
            ⲆⲆ = Ⲇᐃ[a][lf.time];
            switch (a) {
                case 71:
                case 72:
                case 73:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - (0 + b) * fo, -ⲆⲆ.height / 4 + fo * (c + 35));
                    break;
                case 74:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (1 + b), -ⲆⲆ.height / 4 + (c + 45) * fo);
                    break;
                case 75:
                case 76:
                    vv(a, ⲆⲆ, -ⲆⲆ.width / 4 - fo * (1 + b), -ⲆⲆ.height / 4 + fo * (c + 40));
            }
        }
    }
    function Tp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Gq == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = hj;
            }
            var b = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        if (this.info & 31 && this.info & 992 && ~this.info & 31744) {
            e = Ⲇᐃ[716][lf.time];
            Jc(lo, e, -e.width / 2 + c, -e.height / 2 + d);
            this.up.ⲆΔᐃⲆ();
            var e = Ⲇᐃ[720][lf.time];
            var f = this.up.ᐃⵠΔ * -e.width;
            var g = this.up.ᐃⵠΔ * -e.height;
            Jc(lo, e, -f / 2 + fo * 1, -g / 2 + fo * 3, f, g);
        } else {
            e = Ⲇᐃ[144][lf.time];
            Jc(lo, e, -e.width / 2 + c, -e.height / 2 + d);
        }
        lo.restore();
    }
    function fp() {
        if (this.info !== 10) {
            for (var b = this.info & 15, c = 0; b > c; c++) {
                this.ⲆᐃⲆΔ[c].ΔΔⲆᐃ(207, this.x, this.y);
            }
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = mk;
                }
                var d = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
                var e = d * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
                var f = d * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
            } else {
                e = 0;
                f = 0;
            }
            if (this.info & 16) {
                var g = Ⲇᐃ[958][lf.time];
            } else {
                g = Ⲇᐃ[957][lf.time];
            }
            Jc(lo, g, -g.width / 2 + e, -g.width / 2 + f);
            lo.restore();
        }
    }
    function zp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && ug == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[157][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 3) % (Math.PI * 2);
        }
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[1214][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function yp(f, e, i, j, k, n, a, o = 0, p) {
        for (var h = f; e >= h; h++) {
            for (var q = i; q <= j; q++) {
                var r = Uw.ΔⵠⵠⲆ[h][q];
                if (Kq !== r && r[n] !== undefined) {
                    var s = r[n];
                    var t = Ⲇᐃ[k][lf.time][s.ⵠⲆⵠᐃⲆᐃⲆ];
                    Jc(lo, t, Ww.ᐃⵠΔΔ.x + s.x - t.width / (ᐃᐃᐃᐃⲆ * 4), Ww.ᐃⵠΔΔ.y + s.y - t.height / (ᐃᐃᐃᐃⲆ * 4), t.width / (ᐃᐃᐃᐃⲆ * 2), t.height / (ᐃᐃᐃᐃⲆ * 2));
                    if (rf.ΔⵠΔⵠΔ) {
                        var w = 2147483648;
                        var x = ((h * 1000 + q) * 1103515245 + 12345) % w / w;
                        if (x < 0.2) {
                            x = Math.floor(x * 5 * Ⲇᐃ[1025][lf.time][s.ⵠⲆⵠᐃⲆᐃⲆ].length);
                            t = Ⲇᐃ[1025][lf.time][s.ⵠⲆⵠᐃⲆᐃⲆ][x];
                            Jc(lo, t, Ww.ᐃⵠΔΔ.x + s.x - t.width / (ᐃᐃᐃᐃⲆ * 4), Ww.ᐃⵠΔΔ.y + s.y - t.height / (ᐃᐃᐃᐃⲆ * 4), t.width / (ᐃᐃᐃᐃⲆ * 2), t.height / (ᐃᐃᐃᐃⲆ * 2));
                        } else if (s.ΔⲆⲆᐃΔΔᐃ !== 0) {
                            t = Ⲇᐃ[1026][lf.time];
                            var y = (tp + h % 2 * 30) % 60;
                            lo.globalAlpha = y < 30 ? y / 30 : 1 - (y - 30) / 30;
                            Jc(lo, t, Ww.ᐃⵠΔΔ.x + s.x - t.width / (ᐃᐃᐃᐃⲆ * 4), Ww.ᐃⵠΔΔ.y + s.y - t.height / (ᐃᐃᐃᐃⲆ * 4) - 30 + y, t.width / (ᐃᐃᐃᐃⲆ * 2), t.height / (ᐃᐃᐃᐃⲆ * 2));
                            lo.globalAlpha = 1;
                        }
                    }
                }
            }
        }
    }
    function wp() {
        var a = Math.PI / 2;
        var b = Math.PI / 4;
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.ΔⲆᐃⵠᐃᐃⵠ.ⲆΔᐃⲆ();
        this.ᐃΔΔⵠᐃΔΔ.ⲆΔᐃⲆ();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        c = this.info === 0 ? Ⲇᐃ[887][lf.time] : Ⲇᐃ[886][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.width;
        ΔᐃⲆ = -c.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Ⲇᐃ[888];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            if (this.ⲆⵠⲆⵠᐃ.ⲆΔᐃⲆ() && this.ⲆⵠⲆⵠᐃ.ΔⲆⵠ == hh) {
                this.action -= _v.ᐃᐃΔᐃΔ;
            }
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[891];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle + b);
        lo.translate(55, 0);
        lo.rotate(a);
        c = this.info === 0 ? Ⲇᐃ[894][lf.time] : Ⲇᐃ[896][lf.time];
        ⵠΔΔ = -c.width * this.ΔⲆᐃⵠᐃᐃⵠ.ᐃⵠΔ;
        ΔᐃⲆ = this.ΔⲆᐃⵠᐃᐃⵠ.ᐃⵠΔ * -c.height;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            c = Ⲇᐃ[889];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[892];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle + a + b);
        lo.translate(55, 0);
        lo.rotate(a);
        c = this.info === 0 ? Ⲇᐃ[895][lf.time] : Ⲇᐃ[897][lf.time];
        ⵠΔΔ = -c.width * this.ᐃΔΔⵠᐃΔΔ.ᐃⵠΔ;
        ΔᐃⲆ = -c.height * this.ᐃΔΔⵠᐃΔΔ.ᐃⵠΔ;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            c = Ⲇᐃ[890];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        if (this.action & _v.ᐃᐃΔᐃΔ) {
            lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
            c = Ⲇᐃ[893];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function Pp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = fo * (cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600);
            var b = a * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        this.ᐃΔⵠⲆⲆⵠΔ = (this.ᐃΔⵠⲆⲆⵠΔ + cf * 3) % (Math.PI * 2);
        this.ⵠᐃᐃⵠⵠΔᐃ = (this.ⵠᐃᐃⵠⵠΔᐃ - cf * 3) % (Math.PI * 2);
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.save();
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[151][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.save();
        lo.rotate(this.ᐃΔⵠⲆⲆⵠΔ);
        ⲆⲆ = Ⲇᐃ[528][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.save();
        lo.rotate(this.ⵠᐃᐃⵠⵠΔᐃ);
        ⲆⲆ = Ⲇᐃ[527][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.restore();
    }
    function Ap(a, b, c) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + b, Ww.ᐃⵠΔΔ.y + c);
        lo.rotate(this.angle);
        lo.translate(this.x - b, this.y - c);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -ⲆⲆ.width;
        ΔᐃⲆ = -ⲆⲆ.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function kp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ΔΔⲆⲆᐃ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[288][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ΔΔⲆⲆᐃ.ᐃⵠΔ;
        ΔᐃⲆ = -ⲆⲆ.height * this.ΔΔⲆⲆᐃ.ᐃⵠΔ;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        this.ⲆΔⲆᐃΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[289][lf.time];
        ⵠΔΔ = this.ⲆΔⲆᐃΔ.ᐃⵠΔ * -ⲆⲆ.width;
        ΔᐃⲆ = this.ⲆΔⲆᐃΔ.ᐃⵠΔ * -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function xp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆΔⲆᐃΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[1192][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        ΔᐃⲆ = -ⲆⲆ.height * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Jp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[153][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 3) % (Math.PI * 2);
        }
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[1198][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function Mp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        var a = ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r);
        this.scale = a > 350 ? Math.min(this.scale + cf / 2, 1.8) : Math.max(this.scale - cf, 1);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        this.ⲆⲆⵠⵠ = a < 350 ? Math.max(0, this.ⲆⲆⵠⵠ - cf * 2.2) : Math.min(1, this.ⲆⲆⵠⵠ + cf * 2.2);
        b = Ⲇᐃ[1135][lf.time];
        ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width);
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.height * this.scale;
        lo.globalAlpha = 1 - this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        b = Ⲇᐃ[1119][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width * this.scale;
        ΔᐃⲆ = this.scale * (-b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ) * (1 - this.ⲆⲆⵠⵠ);
            var b = Ⲇᐃ[1136];
            ⵠΔΔ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width);
            ΔᐃⲆ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.height);
            Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = this.ⲆⲆⵠⵠ * (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ);
            b = Ⲇᐃ[1128];
            ⵠΔΔ = this.scale * (-b.width * this.ⲆⲆⵠΔ.ᐃⵠΔ);
            ΔᐃⲆ = this.scale * (this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.height);
            Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        b = Ⲇᐃ[1122][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.width * this.scale;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -b.height * this.scale;
        lo.save();
        lo.translate(fo * -40, fo * 80);
        lo.rotate(this.rotate.ᐃⵠΔ);
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = this.ⲆⲆⵠⵠ * (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ);
            b = Ⲇᐃ[1129];
            Jc(lo, b, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        b = Ⲇᐃ[1125][lf.time];
        lo.save();
        lo.translate(fo * 40, fo * 80);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        lo.globalAlpha = this.ⲆⲆⵠⵠ;
        Jc(lo, b, -ⵠΔΔ * fo / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = this.ⲆⲆⵠⵠ * (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ);
            b = Ⲇᐃ[1130];
            Jc(lo, b, fo * -ⵠΔΔ / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.globalAlpha = 1;
        lo.restore();
        lo.restore();
    }
    function Bp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Sr;
            }
            var b = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
            var c = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * b;
            var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[668][lf.time];
            } else {
                f = Ⲇᐃ[132][lf.time];
            }
            var g = -f.width * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            var a = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.height;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            this.ᐃⲆΔΔᐃⵠⵠ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                f = Ⲇᐃ[638][lf.time];
            } else {
                f = Ⲇᐃ[134][lf.time];
            }
            lo.translate(0, f.height / 2);
            lo.rotate(this.ᐃⲆΔΔᐃⵠⵠ.ᐃⵠΔ);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function Dp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
            var b = a * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info === 0) {
            ⲆⲆ = Ⲇᐃ[183][lf.time];
        } else {
            ⲆⲆ = Ⲇᐃ[802][lf.time][this.info - 1];
        }
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2 + b, -ⲆⲆ.height / 2 + c);
        lo.restore();
    }
    function Ep() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == oe) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        this.ᐃΔⵠⲆⲆⵠΔ = (this.ᐃΔⵠⲆⲆⵠΔ + cf * 3) % (Math.PI * 2);
        this.ⵠᐃᐃⵠⵠΔᐃ = (this.ⵠᐃᐃⵠⵠΔᐃ - cf * 3) % (Math.PI * 2);
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.save();
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[152][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.save();
        lo.rotate(this.ᐃΔⵠⲆⲆⵠΔ);
        ⲆⲆ = Ⲇᐃ[1194][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.save();
        lo.rotate(this.ⵠᐃᐃⵠⵠΔᐃ);
        ⲆⲆ = Ⲇᐃ[1193][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.restore();
    }
    function Ip() {
        if (this.info >= 10) {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.angle);
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
                if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Bk == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                    this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
                }
                var b = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
                var c = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * b;
                var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
            } else {
                c = 0;
                d = 0;
            }
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            var e = Ⲇᐃ[115][lf.time];
            var f = this.ⵠΔⲆⲆ.ᐃⵠΔ * -e.width;
            var g = -e.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, e, -f / 2 + c, -g / 2 + d, f, g);
            lo.restore();
        }
    }
    function Sp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ΔⲆⵠⵠⲆⲆⵠ = Math.min(1, this.ΔⲆⵠⵠⲆⲆⵠ + cf * 2);
        lo.globalAlpha = Math.min(1, Math.max(0, ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r) / 80)) * this.ΔⲆⵠⵠⲆⲆⵠ;
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[247][lf.time][this.ⵠᐃⲆⵠⲆ];
        if (this.ⵠᐃⲆⵠⲆ < 2) {
            ⵠΔΔ = -ⲆⲆ.width * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            ΔᐃⲆ = -ⲆⲆ.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        } else if (this.ᐃⲆⵠⲆⲆΔᐃ === 0) {
            ⵠΔΔ = -ⲆⲆ.width;
            ΔᐃⲆ = -ⲆⲆ.height;
        } else {
            ⵠΔΔ = -ⲆⲆ.width * 1.35;
            ΔᐃⲆ = -ⲆⲆ.height * 1.35;
        }
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.globalAlpha = 1;
        lo.restore();
    }
    function Qp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && $h == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = il;
            }
            var b = fo * (cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600);
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * b;
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[838][lf.time];
            } else {
                f = Ⲇᐃ[191][lf.time];
            }
            var g = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.width;
            var a = -f.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[839][lf.time];
            } else {
                f = Ⲇᐃ[192][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function _p() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.info & 31 && this.info & 992 && ~this.info & 31744 && (this.ᐃᐃⵠᐃᐃ.length == 0 || this.ᐃᐃⵠᐃᐃ[this.ᐃᐃⵠᐃᐃ.length - 1] <= Pr.ᐃⲆⲆⵠᐃⵠⵠ)) {
            this.ᐃᐃⵠᐃᐃ.push(Pr.ᐃⲆⵠᐃⲆΔᐃ);
        }
        for (var a = 0; a < this.ᐃᐃⵠᐃᐃ.length; a++) {
            this.ᐃᐃⵠᐃᐃ[a] = Math.max(0, this.ᐃᐃⵠᐃᐃ[a] - Pr.ᐃΔⵠΔⵠⲆⵠ * cf);
            lo.globalAlpha = this.ᐃᐃⵠᐃᐃ[a] / 1.3;
            var b = (1 - this.ᐃᐃⵠᐃᐃ[a]) * 40;
            var c = (1 - this.ᐃᐃⵠᐃᐃ[a]) * 35 + 10;
            zt(lo, fo * -68 + Math.sin(-this.angle - Math.PI / 2) * b, fo * -20 + Math.cos(-this.angle - Math.PI / 2) * b, c);
            wt(lo, "#333333");
        }
        lo.globalAlpha = 1;
        if (this.ᐃᐃⵠᐃᐃ.length > 0 && this.ᐃᐃⵠᐃᐃ[0] === 0) {
            this.ᐃᐃⵠᐃᐃ.shift();
        }
        lo.restore();
    }
    function Fp(a, b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        c = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = -c.width;
        ΔᐃⲆ = -c.height;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Ⲇᐃ[b];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function Rp(a) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function jp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            var a = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 0.5) % (Math.PI * 2);
        }
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.save();
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[641][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.save();
        lo.rotate(this.ᐃⵠᐃⵠⵠΔᐃⲆΔ);
        ⲆⲆ = Ⲇᐃ[642][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
        lo.restore();
    }
    function Gp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + cf / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - cf, 1);
        }
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        a = this.info === 0 ? Ⲇᐃ[233][lf.time] : Ⲇᐃ[1083][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width * this.scale;
        ΔᐃⲆ = this.scale * (-a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[1092];
            Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        a = this.info === 0 ? Ⲇᐃ[1087][lf.time] : Ⲇᐃ[1086][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width * this.scale;
        ΔᐃⲆ = -a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ * this.scale;
        lo.save();
        lo.translate(fo * -40, fo * 10);
        lo.rotate(this.rotate.ᐃⵠΔ);
        Jc(lo, a, fo * -ⵠΔΔ / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[1093];
            Jc(lo, a, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        a = this.info === 0 ? Ⲇᐃ[1090][lf.time] : Ⲇᐃ[1089][lf.time];
        lo.save();
        lo.translate(fo * 40, fo * 10);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ * fo / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[1094];
            Jc(lo, a, fo * -ⵠΔΔ / 4, -ΔᐃⲆ * fo / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.restore();
    }
    function Lp() {
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        a = this.info === 0 ? Ⲇᐃ[1042][lf.time] : Ⲇᐃ[1044][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.height;
        Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[1045];
            Jc(lo, a, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function Wp(b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
        lo.globalAlpha = 0.3;
        var c = Ⲇᐃ[282][lf.time];
        var d = -c.width * this.ⵠΔⲆⲆ.ᐃⵠΔ;
        var e = -c.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
        Jc(lo, c, -d / 2, -e / 2, d, e);
        lo.globalAlpha = 1;
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == Ln) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Bk;
            }
            var f = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var g = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * f;
            var h = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * f;
        } else {
            g = 0;
            h = 0;
        }
        c = Ⲇᐃ[b][lf.time];
        Jc(lo, c, -c.width / 2 + g, -c.height / 2 + h);
        lo.restore();
    }
    function Np() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var b = (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600 * fo;
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[812][lf.time];
            } else {
                f = Ⲇᐃ[188][lf.time];
            }
            var g = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.width;
            var a = -f.height * this.ⵠΔⲆⲆ.ᐃⵠΔ;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[813][lf.time];
            } else {
                f = Ⲇᐃ[189][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function Op() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆΔⲆᐃΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[526][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        ΔᐃⲆ = this.ⲆΔⲆᐃΔ.ᐃⵠΔ * -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function qp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆΔⲆᐃΔ.ⲆΔᐃⲆ();
        ⲆⲆ = Ⲇᐃ[289][lf.time];
        ⵠΔΔ = -ⲆⲆ.width * this.ⲆΔⲆᐃΔ.ᐃⵠΔ;
        ΔᐃⲆ = this.ⲆΔⲆᐃΔ.ᐃⵠΔ * -ⲆⲆ.height;
        Jc(lo, ⲆⲆ, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        lo.restore();
    }
    function Hp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Sr;
            }
            var a = cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600 * fo;
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[135][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function Up() {
        if ((this.info & 1) == 1) {
            this.Δⵠⵠⵠⵠ = Math.min(this.Δⵠⵠⵠⵠ + cf, 2.2);
        } else {
            this.Δⵠⵠⵠⵠ = Math.max(this.Δⵠⵠⵠⵠ - cf, 0);
            this.ᐃΔᐃΔΔᐃⲆ += cf;
            if (this.ᐃΔᐃΔΔᐃⲆ > 0.1) {
                this.ᐃΔᐃΔΔᐃⲆ = 0;
                var a = {
                    x: this.x + Math.random() * 60 - 30,
                    y: this.y + Math.random() * 60 - 30,
                    a: 0,
                    r: Math.random() * 30 + 30
                };
                this.ⵠΔⲆⲆ.push(a);
            }
        }
        for (var b = 0; this.ⵠΔⲆⲆ.length > b; b++) {
            a = this.ⵠΔⲆⲆ[b];
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + a.x, Ww.ᐃⵠΔΔ.y + a.y);
            a.a = Math.min(1, a.a + cf / 2);
            var c = a.a;
            if (c < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            lo.globalAlpha = c * 0.8;
            zt(lo, 0, 0, a.r);
            wt(lo, Pr.ᐃᐃᐃⵠΔΔⵠ[lf.time]);
            lo.restore();
            if (a.a === 1) {
                this.ⵠΔⲆⲆ.splice(b, 1);
                b--;
            }
        }
    }
    function Yp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Sr;
            }
            var a = fo * (cf * (1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * 600);
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = a * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            b = 0;
            c = 0;
        }
        if (this.action == 2) {
            ⲆⲆ = Ⲇᐃ[407][lf.time];
        } else {
            ⲆⲆ = Ⲇᐃ[119][lf.time];
        }
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2 + b, -ⲆⲆ.height / 2 + c);
        lo.restore();
    }
    function Kp(a, b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        c = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.width;
        ΔᐃⲆ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.height;
        Jc(lo, c, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Ⲇᐃ[b];
            Jc(lo, c, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function Vp() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && Oh == this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = false;
            }
            var b = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
            var c = b * Math.sin(this.ⲆΔᐃΔ.angle - this.angle);
            var d = b * Math.cos(this.ⲆΔᐃΔ.angle - this.angle);
        } else {
            c = 0;
            d = 0;
        }
        var e = this.info & 15;
        if (this.info === 10 || e === 0) {
            lo.rotate(this.angle);
            this.ⵠΔⲆⲆ.ⲆΔᐃⲆ();
            if (this.info & 16) {
                var f = Ⲇᐃ[970][lf.time];
            } else {
                f = Ⲇᐃ[208][lf.time];
            }
            var g = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.width;
            var a = this.ⵠΔⲆⲆ.ᐃⵠΔ * -f.height;
            Jc(lo, f, -g / 2 + c, -a / 2 + d, g, a);
        } else {
            if (this.info & 16) {
                f = Ⲇᐃ[971][lf.time];
            } else {
                f = Ⲇᐃ[209][lf.time];
            }
            lo.translate(0, f.height / 2);
            Jc(lo, f, c - f.width / 2, -f.height + d);
        }
        lo.restore();
    }
    function Xp() {
        var a = undefined;
        var b = Nn;
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        if (this.Δⵠⵠⵠⵠ >= 0.1 && this.Δⵠⵠⵠⵠ <= 1.1) {
            if ((c = Math.max(0, Math.min(1, this.Δⵠⵠⵠⵠ - 0.1))) < 0.2) {
                c *= 5;
            } else {
                c = c > 0.8 ? (1 - c) * 5 : 1;
            }
            a = Ⲇᐃ[1150][lf.time];
            ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -a.width;
            ΔᐃⲆ = -a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            lo.globalAlpha = c;
            Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            b = Ⲇᐃ[1151];
        }
        if (this.Δⵠⵠⵠⵠ >= 0.9) {
            var c;
            if ((c = Math.max(0, Math.min(1, this.Δⵠⵠⵠⵠ - 0.9))) < 0.2) {
                c *= 5;
            } else {
                c = 1;
            }
            a = Ⲇᐃ[1152][lf.time];
            ⵠΔΔ = -a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            ΔᐃⲆ = -a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            lo.globalAlpha = c;
            Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            b = Ⲇᐃ[1153];
        }
        if (this.action & _v.ΔⲆᐃⵠ && es !== b) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = (0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ) * c;
            ⵠΔΔ = -b.width * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            ΔᐃⲆ = -b.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
            Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        }
        lo.globalAlpha = 1;
        lo.restore();
    }
    function Zp() {
        if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ) {
            if (this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ΔⲆⵠ == 0) {
                this.ⲆΔᐃΔ.ⲆΔᐃⲆ = Bk;
            }
            var a = fo * ((1 - this.ⲆΔᐃΔ.ᐃΔⲆᐃ.ᐃⵠΔ) * cf * 600);
            var b = Math.sin(this.ⲆΔᐃΔ.angle - this.angle) * a;
            var c = Math.cos(this.ⲆΔᐃΔ.angle - this.angle) * a;
        } else {
            b = 0;
            c = 0;
        }
        lo.save();
        if (this.info & 255 && ~this.info & 65280) {
            b += Math.random() * 2 - 1;
            c += Math.random() * 2 - 1;
        }
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x + b, Ww.ᐃⵠΔΔ.y + this.y + c);
        lo.rotate(this.angle);
        ⲆⲆ = Ⲇᐃ[154][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        if (this.info & 255 && ~this.info & 65280) {
            this.rotate = (this.rotate + cf * 3) % (Math.PI * 2);
        }
        lo.rotate(this.rotate);
        ⲆⲆ = Ⲇᐃ[1202][lf.time];
        Jc(lo, ⲆⲆ, -ⲆⲆ.width / 2, -ⲆⲆ.height / 2);
        lo.restore();
    }
    function $p() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        if (ΔᐃⲆᐃ.ΔΔⵠᐃ(this, this.r) > 300) {
            this.scale = Math.min(this.scale + cf / 2, 1.8);
        } else {
            this.scale = Math.max(this.scale - cf, 1);
        }
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        this.rotate.ⲆΔᐃⲆ();
        a = Ⲇᐃ[450][lf.time];
        ⵠΔΔ = -a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ * this.scale;
        ΔᐃⲆ = this.scale * (-a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var a = Ⲇᐃ[464];
            Jc(lo, a, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        a = Ⲇᐃ[453][lf.time];
        ⵠΔΔ = this.scale * (-a.width * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        ΔᐃⲆ = this.scale * (-a.height * this.ⲆⲆⵠΔ.ᐃⵠΔ);
        lo.save();
        lo.translate(fo * -60, fo * 20);
        lo.rotate(this.rotate.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[468];
            Jc(lo, a, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        a = Ⲇᐃ[454][lf.time];
        lo.save();
        lo.translate(fo * 60, fo * 20);
        lo.rotate(-this.rotate.ᐃⵠΔ);
        Jc(lo, a, -ⵠΔΔ * fo / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
        if (this.action & _v.ΔⲆᐃⵠ) {
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            a = Ⲇᐃ[469];
            Jc(lo, a, fo * -ⵠΔΔ / 4, fo * -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
            lo.globalAlpha = 1;
        }
        lo.restore();
        lo.restore();
    }
    function Uu(a, b) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        lo.rotate(this.angle);
        this.ⲆⲆⵠΔ.ⲆΔᐃⲆ();
        c = Ⲇᐃ[a][lf.time];
        ⵠΔΔ = this.ⲆⲆⵠΔ.ᐃⵠΔ * -c.width;
        ΔᐃⲆ = -c.height * this.ⲆⲆⵠΔ.ᐃⵠΔ;
        Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
        if (this.action & _v.ΔⲆᐃⵠ) {
            if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                this.action -= _v.ΔⲆᐃⵠ;
            }
            lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
            var c = Ⲇᐃ[b];
            Jc(lo, c, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            lo.globalAlpha = 1;
        }
        lo.restore();
    }
    function Vu(a) {
        if (a > 0) {
            var b = Ⲇᐃ[a][lf.time];
            switch (a) {
                case 58:
                    zv(a, b, -b.width / 2 + fo * 2, -b.height / 2 - fo * 5);
                    break;
                case 10:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 18);
                    break;
                case 11:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 10);
                    break;
                case 23:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 19);
                    break;
                case 24:
                    vv(a, b, -b.width / 4, -b.height / 4 - fo * 20);
                    break;
                case 25:
                    zv(a, b, -b.width / 2 - fo * 1, -b.height / 2 - fo * 23);
                    break;
                case 26:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 5);
                    break;
                case 27:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 2);
                    break;
                case 43:
                    zv(a, b, -b.width / 2 + fo * 1.5, -b.height / 2 - fo * 1);
                    break;
                case 44:
                case 20:
                case 21:
                case 22:
                case 80:
                case 81:
                case 82:
                case 60:
                case 90:
                case 88:
                case 87:
                    vv(a, b, -b.width / 4, -b.height / 4 + fo * 2);
                    break;
                case 41:
                case 42:
                    zv(a, b, -b.width / 2 - fo * 5, -b.height / 2 - fo * 2);
                    break;
                case 40:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 2);
                    break;
                case 85:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 2);
                    break;
                case 48:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 2);
                    break;
                case 47:
                    zv(a, b, -b.width / 2 + fo * 2, -b.height / 2);
                    break;
                case 59:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 5);
                    break;
                case 77:
                case 78:
                case 79:
                    zv(a, b, -b.width / 2 - fo * 1, -b.height / 2);
                    break;
                case 83:
                    zv(a, b, -b.width / 2, -b.height / 2 + fo * 2);
                    break;
                case 84:
                case 86:
                    zv(a, b, -b.width / 2, -b.height / 2 + fo * 8);
                    break;
                case 61:
                    zv(a, b, -b.width / 2, -b.height / 2 - fo * 4);
            }
        }
    }
    function Wu() {
        if (!this.ΔⲆⵠᐃⵠ && this.ᐃΔⲆΔΔ !== 0) {
            if (this.x != this.r.x || this.y != this.r.y) {
                var a = (ΔᐃⲆᐃ.ΔᐃⵠⵠⲆⵠΔ(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
                this.ⵠⵠᐃⲆᐃ = ΔᐃⲆᐃ.ΔⵠⵠⲆᐃᐃᐃ(a, this.ⵠⵠᐃⲆᐃ);
                this.ⵠⵠᐃⲆᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠⵠᐃⲆᐃ, a, 0.018);
            }
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lo.rotate(this.ⵠⵠᐃⲆᐃ);
            if (this.ᐃΔⲆΔΔ === 223) {
                if (this.ᐃᐃᐃᐃΔ > 50 || this.ⲆΔⲆᐃⲆ > 0) {
                    if (this.ᐃᐃᐃᐃΔ > 50) {
                        this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf);
                    } else {
                        this.ⲆΔⲆᐃⲆ = Math.max(0, this.ⲆΔⲆᐃⲆ - cf);
                    }
                    lo.globalAlpha = this.ⲆΔⲆᐃⲆ;
                    var b = Ⲇᐃ[225][lf.time];
                    vv(225, b, -b.width / 4, -b.height / 4);
                    lo.globalAlpha = 1;
                }
                b = Ⲇᐃ[223][lf.time];
                vv(223, b, -b.width / 4, -b.height / 4);
            } else if (this.ᐃΔⲆΔΔ === 229) {
                this.ⵠΔⲆᐃᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠΔⲆᐃᐃ, this.ᐃᐃᐃᐃΔ, 0.018);
                this.ΔΔⲆᐃⲆⵠⲆ.ⲆΔᐃⲆ();
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0.1, this.ⲆΔⲆᐃⲆ - cf);
                }
                b = Ⲇᐃ[1100][lf.time];
                vv(1100, b, -b.width / 4, -b.height / 4);
                b = Ⲇᐃ[1103][lf.time];
                ⵠΔΔ = -b.width;
                ΔᐃⲆ = -b.height;
                lo.save();
                lo.translate(fo * -20, fo * -20);
                lo.rotate(this.ⲆΔⲆᐃⲆ * this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
                b = Ⲇᐃ[1106][lf.time];
                lo.save();
                lo.translate(fo * 20, fo * -20);
                lo.rotate(this.ⲆΔⲆᐃⲆ * -this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
            } else if (this.ᐃΔⲆΔΔ === 228) {
                this.ⵠΔⲆᐃᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠΔⲆᐃᐃ, this.ᐃᐃᐃᐃΔ, 0.018);
                this.ΔΔⲆᐃⲆⵠⲆ.ⲆΔᐃⲆ();
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0.1, this.ⲆΔⲆᐃⲆ - cf);
                }
                b = Ⲇᐃ[1085][lf.time];
                vv(1085, b, -b.width / 4, -b.height / 4);
                b = Ⲇᐃ[1088][lf.time];
                ⵠΔΔ = -b.width;
                ΔᐃⲆ = -b.height;
                lo.save();
                lo.translate(fo * -40, fo * -45);
                lo.rotate(this.ⲆΔⲆᐃⲆ * this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
                b = Ⲇᐃ[1091][lf.time];
                lo.save();
                lo.translate(fo * 40, fo * -45);
                lo.rotate(this.ⲆΔⲆᐃⲆ * -this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
            } else if (this.ᐃΔⲆΔΔ === 227) {
                this.ⵠΔⲆᐃᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠΔⲆᐃᐃ, this.ᐃᐃᐃᐃΔ, 0.018);
                this.ΔΔⲆᐃⲆⵠⲆ.ⲆΔᐃⲆ();
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0.1, this.ⲆΔⲆᐃⲆ - cf);
                }
                b = Ⲇᐃ[1070][lf.time];
                vv(1070, b, -b.width / 4, -b.height / 4);
                b = Ⲇᐃ[1073][lf.time];
                ⵠΔΔ = -b.width;
                ΔᐃⲆ = -b.height;
                lo.save();
                lo.translate(fo * -40, fo * -45);
                lo.rotate(this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ * this.ⲆΔⲆᐃⲆ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
                b = Ⲇᐃ[1076][lf.time];
                lo.save();
                lo.translate(fo * 40, fo * -45);
                lo.rotate(-this.ΔΔⲆᐃⲆⵠⲆ.ᐃⵠΔ * this.ⲆΔⲆᐃⲆ);
                Jc(lo, b, -ⵠΔΔ / 4, -ΔᐃⲆ / 4, ⵠΔΔ / 2, ΔᐃⲆ / 2);
                lo.restore();
            } else if (this.ᐃΔⲆΔΔ === 91) {
                this.ⵠΔⲆᐃᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠΔⲆᐃᐃ, this.ᐃᐃᐃᐃΔ, 0.018);
                b = Ⲇᐃ[91][lf.time];
                vv(91, b, -b.width / 4, -b.height / 4);
            } else if (this.ᐃΔⲆΔΔ === 230) {
                this.ⵠΔⲆᐃᐃ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(this.ⵠΔⲆᐃᐃ, this.ᐃᐃᐃᐃΔ, 0.018);
                b = Ⲇᐃ[236][lf.time];
                vv(236, b, -b.width / 4, -b.height / 4);
            } else if (this.ᐃΔⲆΔΔ === 224) {
                b = Ⲇᐃ[224][lf.time];
                vv(224, b, -b.width / 4, -b.height / 4);
            } else if (this.ᐃΔⲆΔΔ === 239) {
                b = Ⲇᐃ[1221][lf.time];
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0, this.ⲆΔⲆᐃⲆ - cf);
                }
                this.ΔⲆΔⵠⵠ += cf * 60;
                if (this.ΔⲆΔⵠⵠ > 60) {
                    this.ΔⲆΔⵠⵠ -= 60;
                }
                var c = this.ⲆΔⲆᐃⲆ * (-6 + (this.ΔⲆΔⵠⵠ < 30 ? this.ΔⲆΔⵠⵠ / 30 : 1 - (this.ΔⲆΔⵠⵠ - 30) / 30) * 12);
                vv(1221, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ᐃΔⲆΔΔ === 225) {
                b = Ⲇᐃ[1043][lf.time];
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0, this.ⲆΔⲆᐃⲆ - cf);
                }
                this.ΔⲆΔⵠⵠ += cf * 60;
                if (this.ΔⲆΔⵠⵠ > 60) {
                    this.ΔⲆΔⵠⵠ -= 60;
                }
                c = ((this.ΔⲆΔⵠⵠ < 30 ? this.ΔⲆΔⵠⵠ / 30 : 1 - (this.ΔⲆΔⵠⵠ - 30) / 30) * 12 - 6) * this.ⲆΔⲆᐃⲆ;
                vv(1043, b, -b.width / 4, -b.height / 4 + c);
            } else if (this.ᐃΔⲆΔΔ === 226) {
                var d = Math.PI / 2;
                var e = Math.PI / 4;
                b = Ⲇᐃ[1055][lf.time];
                if (this.ᐃᐃᐃᐃΔ > 85) {
                    this.ⲆΔⲆᐃⲆ = Math.min(1, this.ⲆΔⲆᐃⲆ + cf / 4);
                } else {
                    this.ⲆΔⲆᐃⲆ = Math.max(0, this.ⲆΔⲆᐃⲆ - cf);
                }
                this.ΔⲆΔⵠⵠ += cf * 60;
                if (this.ΔⲆΔⵠⵠ > 60) {
                    this.ΔⲆΔⵠⵠ -= 60;
                }
                c = ((this.ΔⲆΔⵠⵠ < 30 ? this.ΔⲆΔⵠⵠ / 30 : 1 - (this.ΔⲆΔⵠⵠ - 30) / 30) * 12 - 6) * this.ⲆΔⲆᐃⲆ;
                vv(1055, b, -b.width / 4 + c, -b.height / 4);
                lo.restore();
                lo.save();
                lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
                lo.rotate(Math.PI + this.ⵠⵠᐃⲆᐃ + e);
                lo.translate(120, c);
                lo.rotate(d);
                b = Ⲇᐃ[1060][lf.time];
                ⵠΔΔ = -b.width;
                ΔᐃⲆ = -b.height;
                Jc(lo, b, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
                lo.restore();
                lo.save();
                lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
                lo.rotate(Math.PI + this.ⵠⵠᐃⲆᐃ + d + e);
                lo.translate(120, c);
                lo.rotate(d);
                b = Ⲇᐃ[1063][lf.time];
                ⵠΔΔ = -b.width;
                ΔᐃⲆ = -b.height;
                Jc(lo, b, -ⵠΔΔ / 2, -ΔᐃⲆ / 2, ⵠΔΔ, ΔᐃⲆ);
            }
            lo.restore();
        }
    }
    function Xu(b, c, d) {
        if (c.ⵠᐃⵠⲆΔⵠΔ() !== 1) {
            return c;
        }
        var e = ΔⵠⵠᐃΔⵠᐃ[d][b];
        if (e === undefined) {
            var f = (e = document.createElement("canvas")).getContext("2d");
            var g = c.width;
            var a = c.height;
            e.width = g;
            e.height = a;
            f.drawImage(c, 0, 0);
            f.globalCompositeOperation = "source-in";
            f.fillStyle = ⵠⵠⲆⲆⲆⲆΔⵠᐃ[d];
            f.fillRect(0, 0, g, a);
            ΔⵠⵠᐃΔⵠᐃ[d][b] = e;
        }
        return e;
    }
    function Yu(a, b) {
        if (this.text) {
            if (this.timeout.ΔⲆⵠ) {
                lo.globalAlpha = 1 - this.timeout.ᐃⵠΔ;
            } else {
                lo.globalAlpha = 1;
            }
            if (!this.label) {
                this.label = Ed(fo, this.text, 40, a, null, null, null, null, null, b, 10);
            }
            Jc(lo, this.label, (uo - this.label.width) / 2, fo * 50);
            lo.globalAlpha = 1;
            if (this.timeout.ⲆΔᐃⲆ() && this.timeout.ΔⲆⵠ == 0) {
                this.text = this.list.shift();
                this.label = null;
            }
        }
    }
    function Zu() {
        var c = 0;
        switch (this.right) {
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
                c = 1;
        }
        if (this.ΔⲆⵠᐃⵠ) {
            for (var d = 0; this.bubbles.length > d; d++) {
                var f = this.bubbles[d];
                if (f.ΔΔⵠⲆⲆ > 0.5) {
                    var j = 1 - (f.ΔΔⵠⲆⲆ - 0.5) * 2;
                } else {
                    j = f.ΔΔⵠⲆⲆ * 2;
                }
                lo.globalAlpha = j;
                var k = Ⲇᐃ[540][lf.time][f.id];
                Jc(lo, k, Ww.ᐃⵠΔΔ.x + f.x - k.width / 2, Ww.ᐃⵠΔΔ.y + f.y - k.height / 2);
                lo.globalAlpha = 1;
            }
        } else {
            lo.save();
            lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
            lf.ⲆⲆΔᐃΔⲆⵠⲆⵠ(this);
            if (this.action & _v.ᐃᐃᐃᐃⵠΔⲆ) {
                (function (a) {
                    if (a.right >= 0) {
                        switch (a.right) {
                            case 49:
                                lo.save();
                                var b = a.attack.ᐃⵠΔ * -3 / Math.PI;
                                if (a.attack.ΔⲆⵠ) {
                                    var c = -Math.PI / 3 - (Math.PI / 3 + a.attack.ᐃⵠΔ) / 3;
                                } else {
                                    c = a.attack.ᐃⵠΔ;
                                }
                                lo.rotate(a.angle - Math.PI / 2 + c);
                                lo.globalAlpha = b / 1.2;
                                zt(lo, fo * -40, fo * 90, fo * 5);
                                wt(lo, "#0B6A84");
                                lo.globalAlpha = b / 1.2;
                                zt(lo, fo * -52, fo * 100, fo * 8);
                                wt(lo, "#0B6A84");
                                lo.globalAlpha = b / 1.2;
                                zt(lo, fo * -30, fo * 95, fo * 4);
                                wt(lo, "#0B6A84");
                                lo.globalAlpha = 1;
                                lo.restore();
                                break;
                            case 46:
                            case 50:
                            case 51:
                            case 52:
                                if (a.ᐃⲆⵠⲆⲆΔᐃ === 1) {
                                    break;
                                }
                                if (a.ⲆⲆΔⵠⵠ > 0) {
                                    var d = Pr.ⵠⵠⲆᐃΔⲆⵠ[lf.time];
                                } else {
                                    d = a.ᐃⵠⲆᐃᐃⵠᐃ > 0 || a.ⲆⲆⵠⲆᐃ > 0 ? Pr.ΔⵠⲆΔΔΔΔ[lf.time] : Pr.ⵠᐃⵠΔΔᐃⵠ[lf.time];
                                }
                                b = a.attack.ᐃⵠΔ * -3 / Math.PI;
                                c = a.attack.ΔⲆⵠ ? Math.max(0.5 - b / 2 + 0.5, 0) : Math.max(b / 2, 0);
                                if (c === 0) {
                                    a.ΔΔᐃᐃᐃⵠᐃ = a.angle;
                                }
                                lo.save();
                                lo.rotate(a.ΔΔᐃᐃᐃⵠᐃ - Math.PI / 2);
                                lo.globalAlpha = b;
                                var e = fo * 25 + c * 25;
                                zt(lo, e, fo * 80, fo * 15);
                                wt(lo, d);
                                zt(lo, -e, fo * 80, fo * 15);
                                wt(lo, d);
                                lo.globalAlpha = 1;
                                lo.restore();
                        }
                    }
                })(this);
            }
            lo.save();
            lo.rotate(this.angle - Math.PI / 2);
            if (!(this.action & _v.ᐃᐃᐃᐃⵠΔⲆ)) {
                if (this.action & _v.IDLE || this.ᐃΔⲆΔΔ !== 0) {
                    this.ΔⵠⲆⵠΔⲆⵠ.ⲆΔᐃⲆ();
                } else if (this.action & _v.ⲆᐃᐃⲆΔⲆⵠ) {
                    this.ⲆⲆΔΔⵠⵠⵠ.ⲆΔᐃⲆ();
                }
            }
            var m;
            var p = this.ΔⵠⲆⵠΔⲆⵠ.ᐃⵠΔ;
            var q = this.ⲆⲆΔΔⵠⵠⵠ.ᐃⵠΔ;
            if (this.ⵠΔᐃⲆᐃ === 85) {
                k = Ⲇᐃ[793][lf.time];
                m = 793;
            } else if (this.ⵠΔᐃⲆᐃ === 20) {
                k = Ⲇᐃ[920][lf.time];
                m = 920;
            } else if (this.ⵠΔᐃⲆᐃ === 21) {
                k = Ⲇᐃ[924][lf.time];
                m = 924;
            } else if (this.ⵠΔᐃⲆᐃ === 22) {
                k = Ⲇᐃ[928][lf.time];
                m = 928;
            } else if (this.ΔΔⲆΔⵠⵠᐃ) {
                k = Ⲇᐃ[822][lf.time];
                m = 822;
            } else {
                k = Ⲇᐃ[7][this.ⲆΔⲆΔ][lf.time];
                m = 7;
            }
            ⲆΔⵠⵠ = Ⲇᐃ[286][lf.time];
            var w = k;
            var h = m;
            if (this.action & _v.ᐃᐃᐃᐃⵠΔⲆ) {
                if (this.attack.ⲆΔᐃⲆ() && this.attack.ΔⲆⵠ == 0) {
                    this.ⵠⲆⲆΔⲆ = !this.ⵠⲆⲆΔⲆ;
                    this.action -= _v.ᐃᐃᐃᐃⵠΔⲆ;
                    if (Ww.ΔⲆΔΔ == this.ΔⲆΔΔ) {
                        Ww.control.ᐃⲆΔⲆ = 0;
                    }
                }
                if (this.right >= 0) {
                    this.ⵠⲆⲆΔⲆ = true;
                }
                var l = this.ⵠⲆⲆΔⲆ ? this.attack.ᐃⵠΔ : -this.attack.ᐃⵠΔ / 3;
                var x = this.ⵠⲆⲆΔⲆ ? this.attack.ᐃⵠΔ / 3 : -this.attack.ᐃⵠΔ;
                if (this.ΔΔⲆΔⵠⵠᐃ) {
                    lo.save();
                    lo.rotate(l);
                    zv(m, k, -k.width / 2 - (66 + p) * fo, -k.height / 2 + (5 + q) * fo);
                    lo.restore();
                    lo.save();
                    lo.rotate(x);
                    zv(m, k, -k.width / 2 + fo * (66 + p), -k.height / 2 + fo * (5 + q));
                    lo.restore();
                } else if (c === 0) {
                    if (this.right === 64) {
                        l = -ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ(-l);
                    }
                    lo.save();
                    lo.rotate(l);
                    zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 - fo * (49 + p), -ⲆΔⵠⵠ.height / 2 + fo * (15 + q));
                    if (this.right === 28) {
                        var u = Ⲇᐃ[this.right][this.ᐃⲆᐃⲆⲆ][lf.time];
                        Gv(this.right, this.ᐃⲆᐃⲆⲆ, u, -u.width / 4 - fo * (62 + p), -u.height / 4 + (q + 18) * fo);
                    } else {
                        up(this.right, p, q);
                    }
                    if (m >= 920) {
                        vv(m, k, -k.width / 4 - fo * (49 + p), -k.height / 4 + (11 + q) * fo);
                    } else if (m !== 793) {
                        Gv(m, this.ⲆΔⲆΔ, k, -k.width / 4 - fo * (49 + p), -k.height / 4 + (11 + q) * fo);
                    } else {
                        zv(m, k, -k.width / 2 - fo * (49 + p), -k.height / 2 + fo * (11 + q));
                    }
                    lo.restore();
                    lo.save();
                    lo.rotate(x);
                    zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 + fo * (49 + p), -ⲆΔⵠⵠ.height / 2 + fo * (15 + q));
                    if (m >= 920) {
                        vv(m, k, -k.width / 4 + fo * (49 + p), -k.height / 4 + (11 + q) * fo);
                    } else if (m !== 793) {
                        Gv(m, this.ⲆΔⲆΔ, k, -k.width / 4 + (49 + p) * fo, -k.height / 4 + fo * (11 + q));
                    } else {
                        zv(m, k, -k.width / 2 + fo * (49 + p), -k.height / 2 + fo * (11 + q));
                    }
                    lo.restore();
                }
            } else if (this.ΔΔⲆΔⵠⵠᐃ) {
                zv(m, k, -k.width / 2 - (66 + p) * fo, -k.height / 2 + (5 + q) * fo);
                zv(m, k, -k.width / 2 + (66 + p) * fo, -k.height / 2 + (5 + q) * fo);
            } else if (c === 0) {
                zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 - fo * (49 + p), -ⲆΔⵠⵠ.height / 2 + fo * (15 + q));
                if (this.right === 28) {
                    u = Ⲇᐃ[this.right][this.ᐃⲆᐃⲆⲆ][lf.time];
                    Gv(this.right, this.ᐃⲆᐃⲆⲆ, u, -u.width / 4 - (62 + p) * fo, -u.height / 4 + fo * (q + 18));
                } else {
                    up(this.right, p, q);
                }
                if (m >= 920) {
                    vv(m, k, -k.width / 4 - fo * (49 + p), -k.height / 4 + (11 + q) * fo);
                } else if (m !== 793) {
                    Gv(m, this.ⲆΔⲆΔ, k, -k.width / 4 - (49 + p) * fo, -k.height / 4 + (11 + q) * fo);
                } else {
                    zv(m, k, -k.width / 2 - fo * (49 + p), -k.height / 2 + fo * (11 + q));
                }
                zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 + fo * (49 + p), -ⲆΔⵠⵠ.height / 2 + (15 + q) * fo);
                if (m >= 920) {
                    vv(m, k, -k.width / 4 + (49 + p) * fo, -k.height / 4 + fo * (11 + q));
                } else if (m !== 793) {
                    Gv(m, this.ⲆΔⲆΔ, k, -k.width / 4 + fo * (49 + p), -k.height / 4 + fo * (11 + q));
                } else {
                    zv(m, k, -k.width / 2 + fo * (49 + p), -k.height / 2 + (11 + q) * fo);
                }
            }
            if (this.ⲆⵠⲆΔⲆ && this.ⵠΔᐃⲆᐃ < 1) {
                k = Ⲇᐃ[29][this.ᐃΔᐃᐃⲆΔⲆ][lf.time];
                Gv(29, this.ᐃΔᐃᐃⲆΔⲆ, k, -k.width / 4, -k.height / 4 - fo * 39);
            }
            if (this.ΔΔⲆΔⵠⵠᐃ) {
                k = Ⲇᐃ[820][lf.time];
                zv(820, k, -k.width / 2, -k.height / 2);
                this.ᐃΔΔΔΔᐃⵠ.ⲆΔᐃⲆ();
                k = Ⲇᐃ[821][lf.time];
                zv(821, k, -k.width / 2, -k.height / 2 + this.ᐃΔΔΔΔᐃⵠ.ᐃⵠΔ);
            } else {
                k = Ⲇᐃ[255][this.ⲆΔⲆΔ][lf.time];
                if (this.ⵠΔᐃⲆᐃ !== 85 && (Gv(255, this.ⲆΔⲆΔ, k, -k.width / 4, -k.height / 4), this.ΔᐃΔⲆⵠ > 0)) {
                    k = Ⲇᐃ[796][this.ΔᐃΔⲆⵠ][lf.time];
                    Gv(796, this.ΔᐃΔⲆⵠ, k, -k.width / 4, -k.height / 4);
                }
            }
            if (this.action & _v.ᐃⲆᐃΔᐃⲆᐃ) {
                if (this.ⲆⵠⲆⵠᐃ.ⲆΔᐃⲆ() && El == this.ⲆⵠⲆⵠᐃ.ΔⲆⵠ) {
                    this.action -= _v.ᐃⲆᐃΔᐃⲆᐃ;
                }
                lo.globalAlpha = 0.6 - this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ;
                if (this.ΔΔⲆΔⵠⵠᐃ) {
                    k = Ⲇᐃ[825];
                    Jc(lo, k, -k.width / 2, -k.height / 2);
                } else {
                    k = Xu(this.ⲆΔⲆΔ, Ⲇᐃ[255][this.ⲆΔⲆΔ][0], ΔΔⲆⲆᐃᐃᐃΔᐃ);
                    Jc(lo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                lo.globalAlpha = 1;
            }
            if (this.action & _v.ᐃⵠⵠᐃΔᐃⵠ) {
                if (this.ΔᐃᐃⲆΔⵠⵠ.ⲆΔᐃⲆ() && this.ΔᐃᐃⲆΔⵠⵠ.ΔⲆⵠ == 0) {
                    this.action -= _v.ᐃⵠⵠᐃΔᐃⵠ;
                }
                lo.globalAlpha = 0.6 - this.ΔᐃᐃⲆΔⵠⵠ.ᐃⵠΔ;
                k = Ⲇᐃ[266];
                Jc(lo, k, -k.width / 2, -k.height / 2);
                lo.globalAlpha = 1;
            }
            if (this.action & _v.ΔⲆᐃⵠ) {
                if (this.ⲆΔᐃΔ.ⲆΔᐃⲆ() && this.ⲆΔᐃΔ.ΔⲆⵠ == Gq) {
                    this.action -= _v.ΔⲆᐃⵠ;
                }
                lo.globalAlpha = 0.6 - this.ⲆΔᐃΔ.ᐃⵠΔ;
                if (this.ΔΔⲆΔⵠⵠᐃ) {
                    k = Ⲇᐃ[823];
                    Jc(lo, k, -k.width / 2, -k.height / 2);
                } else {
                    k = Xu(this.ⲆΔⲆΔ, Ⲇᐃ[255][this.ⲆΔⲆΔ][0], ΔᐃΔⵠΔⲆΔⲆⵠ);
                    Jc(lo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                lo.globalAlpha = 1;
            }
            if (this.action & _v.ᐃᐃΔᐃΔ) {
                if (this.freeze.ⲆΔᐃⲆ() && Oh == this.freeze.ΔⲆⵠ) {
                    this.action -= _v.ᐃᐃΔᐃΔ;
                }
                lo.globalAlpha = 0.6 - this.freeze.ᐃⵠΔ;
                k = Xu(this.ⲆΔⲆΔ, Ⲇᐃ[255][this.ⲆΔⲆΔ][0], ᐃⵠⵠⲆⵠΔᐃⲆⵠ);
                Jc(lo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                lo.globalAlpha = 1;
            }
            if (this.action & _v.ᐃᐃΔᐃⵠᐃᐃ) {
                if (this.ⵠΔⵠΔⲆΔⲆ.ⲆΔᐃⲆ() && this.ⵠΔⵠΔⲆΔⲆ.ΔⲆⵠ == 0) {
                    this.action -= _v.ᐃᐃΔᐃⵠᐃᐃ;
                }
                lo.globalAlpha = 0.6 - this.ⵠΔⵠΔⲆΔⲆ.ᐃⵠΔ;
                if (this.ΔΔⲆΔⵠⵠᐃ) {
                    k = Ⲇᐃ[824];
                    Jc(lo, k, -k.width / 2, -k.height / 2);
                } else {
                    k = Xu(this.ⲆΔⲆΔ, Ⲇᐃ[255][this.ⲆΔⲆΔ][0], ΔΔᐃΔᐃⵠⵠⵠᐃ);
                    Jc(lo, k, k.width / 4, k.height / 4, -k.width / 2, -k.height / 2);
                }
                lo.globalAlpha = 1;
            }
            Vu(this.ⵠΔᐃⲆᐃ);
            if (c === 1) {
                if (this.action & _v.ᐃᐃᐃᐃⵠΔⲆ) {
                    p += this.attack.ᐃⵠΔ * 15;
                }
                zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 - fo * 26, -ⲆΔⵠⵠ.height / 2 + fo * (31 + q + p));
                if (h >= 920) {
                    vv(h, w, -w.width / 4 - fo * 26, -w.height / 4 + fo * (27 + q + p));
                } else if (h !== 793) {
                    Gv(h, this.ⲆΔⲆΔ, w, -w.width / 4 - fo * 26, -w.height / 4 + fo * (27 + q + p));
                } else {
                    zv(h, w, -w.width / 2 - fo * 26, -w.height / 2 + fo * (27 + q + p));
                }
                zv(286, ⲆΔⵠⵠ, -ⲆΔⵠⵠ.width / 2 + fo * 26, -ⲆΔⵠⵠ.height / 2 + fo * (31 + q + p));
                if (h >= 920) {
                    vv(h, w, -w.width / 4 + fo * 26, -w.height / 4 + (27 + q + p) * fo);
                } else if (h !== 793) {
                    Gv(h, this.ⲆΔⲆΔ, w, -w.width / 4 + fo * 26, -w.height / 4 + (27 + q + p) * fo);
                } else {
                    zv(h, w, -w.width / 2 + fo * 26, -w.height / 2 + (27 + q + p) * fo);
                }
                Cp(this.right, 0, q + p);
            }
            lo.restore();
            if (this.ⵠΔᐃⲆᐃ !== 83 && this.ⵠΔᐃⲆᐃ !== 85) {
                if (this.ⲆⲆΔⵠⵠ > 0) {
                    this.ᐃΔⲆⲆ.ᐃⵠΔΔⵠᐃⵠ ||= Ed(fo, this.ᐃΔⲆⲆ.ΔᐃⵠΔⵠ, 20, "#187484", "#000", 2, null, null, fo * 300);
                    k = this.ᐃΔⲆⲆ.ᐃⵠΔΔⵠᐃⵠ;
                } else {
                    if (!this.ᐃΔⲆⲆ.label) {
                        this.ᐃΔⲆⲆ.label = Ed(fo, this.ᐃΔⲆⲆ.ΔᐃⵠΔⵠ, 20, "#FFF", "#000", 2, null, null, fo * 300);
                    }
                    k = this.ᐃΔⲆⲆ.label;
                }
                if (lf.ⵠΔⲆ == Pr.ΔΔⲆ) {
                    lo.globalAlpha = 0.5;
                }
                p = Math.floor(-k.width / 2);
                q = Math.floor(-k.height / 2 - fo * 70);
                Jc(lo, k, p, q);
                if (this.ᐃΔⲆⲆ.level > 0) {
                    var y = p + k.width + 5;
                    k = Ⲇᐃ[885];
                    if (ΔΔᐃᐃⵠⲆⲆ[this.ᐃΔⲆⲆ.level] === Aj) {
                        ΔΔᐃᐃⵠⲆⲆ[this.ᐃΔⲆⲆ.level] = Ed(fo, "[" + this.ᐃΔⲆⲆ.level + "]", 20, "#F9E8A2", "#000", 2, null, null, fo * 50);
                    }
                    Jc(lo, ΔΔᐃᐃⵠⲆⲆ[this.ᐃΔⲆⲆ.level], y, q);
                }
                lo.globalAlpha = 1;
            } else {
                q = Math.floor(fo * -70);
                p = Math.floor(Ⲇᐃ[558].width / 1.5);
            }
            if (Ww.ᐃⵠⲆᐃΔⲆΔ(this.ⲆΔᐃⵠ)) {
                if (Ww.ⵠᐃΔᐃΔ[0] == this.ⲆΔᐃⵠ) {
                    k = Ⲇᐃ[559];
                } else {
                    k = Ⲇᐃ[558];
                }
                Jc(lo, k, p - k.width - 5, q - 6);
            }
            lo.restore();
        }
    }
    function $u() {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + this.x, Ww.ᐃⵠΔΔ.y + this.y);
        if (this.text.length > 0) {
            for (var a = 0; a < this.text.length && a < 2; a++) {
                if (!this.label[a]) {
                    this.label[a] = Ft(fo, this.text[a]);
                    this.ᐃⵠᐃΔᐃΔⵠ[a] = 0;
                    this.ⲆⵠⲆⵠⲆΔⲆ[a] = 0;
                }
                if (a === 1) {
                    this.ⲆⵠⲆⵠⲆΔⲆ[0] = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(this.ᐃⵠⲆΔᐃⵠΔ) * 30;
                }
            }
            this.ᐃⵠᐃΔᐃΔⵠ[0] += cf;
            if (this.text.length > 1) {
                this.ᐃⵠⲆΔᐃⵠΔ = Math.min(this.ᐃⵠⲆΔᐃⵠΔ + cf, 1);
                if (this.ᐃⵠᐃΔᐃΔⵠ[0] > 1 && this.ᐃⵠⲆΔᐃⵠΔ > 0.5) {
                    this.ᐃⵠᐃΔᐃΔⵠ[1] += cf;
                }
            }
            for (a = 0; this.text.length > a && a < 2; a++) {
                var b = this.ᐃⵠᐃΔᐃΔⵠ[a];
                if (b > 0) {
                    lo.globalAlpha = b < 0.25 ? b * 4 : b > 3.75 ? Math.max((4 - b) * 4, 0) : 1;
                    Jc(lo, this.label[a], -this.label[a].width / 2, -this.ⲆⵠⲆⵠⲆΔⲆ[a] + -this.label[a].height / 2 - fo * 110);
                }
            }
            if (this.ᐃⵠᐃΔᐃΔⵠ[0] > 4) {
                this.ᐃⵠᐃΔᐃΔⵠ.shift();
                this.text.shift();
                this.ⲆⵠⲆⵠⲆΔⲆ.shift();
                this.label.shift();
                this.ᐃⵠⲆΔᐃⵠΔ = 0;
            }
        }
        lo.restore();
    }
    function _u() {
        if (this.message !== undefined) {
            var a = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length > 0 ? -95 : 0;
            Jc(lo, this.message, 0, vo - this.message.height + a);
        }
    }
    function av() {
        if (this.enabled && this.ⵠΔⵠⵠΔ >= 0) {
            var a = new Date().getTime() - this.ⵠΔⵠⵠΔ;
            var b = a % 1000 / 1000;
            if (b > 0.5) {
                b = 1 - (b - 0.5) * 2;
            } else {
                b *= 2;
            }
            a = Math.floor(a / 1000);
            if (ew.ΔⵠⲆΔᐃΔⵠ > a) {
                a = ew.ΔⵠⲆΔᐃΔⵠ - a;
                if (!this.label) {
                    this.label = Ed(fo, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                if (this.now != a || !this.ᐃΔΔΔⵠᐃΔ) {
                    this.now = a;
                    this.ᐃΔΔΔⵠᐃΔ = Ed(fo, "" + a, 40, "#660000", null, null, null, null, null, "#000", 10);
                }
                Jc(lo, this.label, (uo - this.label.width) / 2, fo * 100);
                lo.globalAlpha = b;
                Jc(lo, this.ᐃΔΔΔⵠᐃΔ, (uo - this.label.width) / 2 - this.ᐃΔΔΔⵠᐃΔ.width + fo * 15, fo * 100);
                lo.globalAlpha = 1;
            }
        }
    }
    ΔᐃΔⵠΔⲆΔⲆⵠ = 0;
    ΔΔⲆⲆᐃᐃᐃΔᐃ = 1;
    ᐃⵠⵠⲆⵠΔᐃⲆⵠ = 2;
    ΔΔᐃΔᐃⵠⵠⵠᐃ = 3;
    ᐃⲆⵠⲆⵠⲆᐃⵠⲆ = 4;
    ΔⵠⵠᐃΔⵠᐃ = [[], [], [], [], []];
    ⵠⵠⲆⲆⲆⲆΔⵠᐃ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
    var bv = 0;
    function cv(j, e, i, k, n, o, a, q = 0) {
        for (var r = a; q <= r; r--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; t <= k; t++) {
                    var w = Uw.ΔⵠⵠⲆ[s][t];
                    if (w && w[o]) {
                        var x = w[o][r];
                        if (x !== undefined) {
                            for (var y = 0; x.length > y; y++) {
                                var z = x[y];
                                var A = Ⲇᐃ[n][lf.time][r];
                                var B = (bv + (s + t) * 3) % 60;
                                var D = B < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var E = (1 + D * 0.9 / 30) * -A.width;
                                var F = (1 + D * 0.9 / 30) * -A.height;
                                D = (B = (bv + (s + t) * 7) % 60) < 30 ? B / 30 : 1 - (B - 30) / 30;
                                var G = lo.globalAlpha;
                                lo.globalAlpha = (0.9 + D * 0.1) * G;
                                Jc(lo, A, Ww.ᐃⵠΔΔ.x + z.x - E / 2, Ww.ᐃⵠΔΔ.y + z.y - F / 2, E, F);
                                lo.globalAlpha = G;
                            }
                        }
                    }
                }
            }
        }
    }
    function dv(j, e, i, k, n, o, a, q) {
        if (Fh === q) {
            q = 0;
        }
        lf.ⲆⲆⵠΔ[n].ⲆΔᐃⲆ();
        for (var r = a; q <= r; r--) {
            for (var t = j; e >= t; t++) {
                for (var w = i; w <= k; w++) {
                    var x = Uw.ΔⵠⵠⲆ[t][w];
                    if (x && x[o]) {
                        var y = x[o][r];
                        if (y !== undefined) {
                            for (var z = 0; y.length > z; z++) {
                                var A = y[z];
                                if (A.ⲆΔᐃⲆ) {
                                    if (A.ⲆΔᐃΔ.ⲆΔᐃⲆ() && A.ⲆΔᐃΔ.ΔⲆⵠ == Oh) {
                                        A.ⲆΔᐃⲆ = mk;
                                    }
                                    var B = fo * (cf * (1 - A.ⲆΔᐃΔ.ᐃⵠΔ) * 600);
                                    var D = B * Math.sin(A.angle);
                                    var E = Math.cos(A.angle) * B;
                                } else {
                                    D = 0;
                                    E = 0;
                                }
                                var F = Ⲇᐃ[n][lf.time][r];
                                var G = lf.ⲆⲆⵠΔ[n].ᐃⵠΔ * -F.width;
                                var H = -F.height * lf.ⲆⲆⵠΔ[n].ᐃⵠΔ;
                                Jc(lo, F, Ww.ᐃⵠΔΔ.x + A.x - G / 2 + D, Ww.ᐃⵠΔΔ.y + A.y - H / 2 + E, G, H);
                            }
                        }
                    }
                }
            }
        }
    }
    var ev = [];
    for ($s = 0; $s < 100; $s++) {
        var fv = 1;
        if (Math.random() < 0.25) {
            fv = 0;
        }
        ev.push(fv);
    }
    function gv(j, e, i, k, n, o, a, q = 0, r) {
        for (var h = a; h >= q; h--) {
            for (var s = j; e >= s; s++) {
                for (var t = i; t <= k; t++) {
                    var w = Uw.ΔⵠⵠⲆ[s][t];
                    if (w !== undefined && sr !== w[o]) {
                        var x = w[o][h];
                        if (x !== undefined) {
                            for (var A = 0; x.length > A; A++) {
                                var B = x[A];
                                if (B.ⲆΔᐃⲆ) {
                                    if (B.ⲆΔᐃΔ.ⲆΔᐃⲆ() && B.ⲆΔᐃΔ.ΔⲆⵠ == 0) {
                                        B.ⲆΔᐃⲆ = Ln;
                                    }
                                    var D = fo * (cf * (1 - B.ⲆΔᐃΔ.ᐃⵠΔ) * 600);
                                    var E = Math.sin(B.angle) * D;
                                    var F = D * Math.cos(B.angle);
                                } else {
                                    E = 0;
                                    F = 0;
                                }
                                for (var G = 0; G < ⲆᐃᐃⲆⵠⲆⵠ[h].ΔⲆⵠⵠ; G++) {
                                    if ($w !== lf.ⵠᐃΔΔⵠ[G].ΔᐃⲆⵠⵠⵠⲆ) {
                                        lf.ⵠᐃΔΔⵠ[G].ⲆΔᐃⲆ();
                                        lf.ⵠᐃΔΔⵠ[G].ΔᐃⲆⵠⵠⵠⲆ = $w;
                                    }
                                    var H = Ⲇᐃ[941][lf.time][ⲆᐃᐃⲆⵠⲆⵠ[h].ΔᐃⵠΔ[G].ᐃⲆⵠ];
                                    var I = lf.ⵠᐃΔΔⵠ[G].ᐃⵠΔ * -H.width;
                                    var J = -H.height * lf.ⵠᐃΔΔⵠ[G].ᐃⵠΔ;
                                    Jc(lo, H, Ww.ᐃⵠΔΔ.x + B.x - I / 4 + E + ⲆᐃᐃⲆⵠⲆⵠ[h].ΔᐃⵠΔ[G].x, Ww.ᐃⵠΔΔ.y + B.y - J / 4 + F + ⲆᐃᐃⲆⵠⲆⵠ[h].ΔᐃⵠΔ[G].y, I / 2, J / 2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    function hv(c, e, f, i, j, k, a, m, n) {
        if (ts === m) {
            m = 0;
        }
        for (var h = c; h <= e; h++) {
            for (var o = f; i >= o; o++) {
                var p = Uw.ΔⵠⵠⲆ[h][o];
                if (p !== undefined && p[k] !== Nn) {
                    var q = p[k];
                    if (xh !== q) {
                        if (q.scale === 1) {
                            var r = Ⲇᐃ[j][lf.time][q.ᐃᐃⵠⵠ];
                            lo.save();
                            lo.translate(Ww.ᐃⵠΔΔ.x + q.x, Ww.ᐃⵠΔΔ.y + q.y);
                            lo.rotate(q.angle);
                            Jc(lo, r, -r.width / 4, -r.height / 4, r.width / 2, r.height / 2);
                            lo.restore();
                        } else if (q.scale === 3) {
                            for (var t = 0; t < q.Ⲇⵠⵠ.length; t++) {
                                lo.save();
                                lo.translate(Ww.ᐃⵠΔΔ.x + q.x, Ww.ᐃⵠΔΔ.y + q.y);
                                lo.rotate(q.Ⲇⵠⵠ[t].angle);
                                r = Ⲇᐃ[j][lf.time][q.Ⲇⵠⵠ[t].ᐃᐃⵠⵠ];
                                Jc(lo, r, -r.width / 3 + q.Ⲇⵠⵠ[t].x, -r.height / 3 + q.Ⲇⵠⵠ[t].y, r.width / 1.5, r.height / 1.5);
                                lo.restore();
                            }
                        } else {
                            r = Ⲇᐃ[j][lf.time][q.ᐃᐃⵠⵠ];
                            lo.save();
                            lo.translate(Ww.ᐃⵠΔΔ.x + q.x, Ww.ᐃⵠΔΔ.y + q.y);
                            lo.rotate(q.angle);
                            Jc(lo, r, -r.width / 2, -r.height / 2, r.width, r.height);
                            lo.restore();
                        }
                    }
                }
            }
        }
    }
    function iv(f, e, i, j, k, n, a, o, q) {
        if (pl === o) {
            o = 0;
        }
        for (var h = a; o <= h; h--) {
            for (var r = f; e >= r; r++) {
                for (var t = i; t <= j; t++) {
                    if (q <= 0 || ev[(r + t * q) % ev.length] !== 1) {
                        var w = Uw.ΔⵠⵠⲆ[r][t];
                        if (xh !== w && w[n] !== undefined) {
                            var x = w[n][h];
                            if (x !== Cq) {
                                for (var y = 0; x.length > y; y++) {
                                    var z = x[y];
                                    if (z.ⲆΔᐃⲆ) {
                                        if (z.ⲆΔᐃΔ.ⲆΔᐃⲆ() && cr == z.ⲆΔᐃΔ.ΔⲆⵠ) {
                                            z.ⲆΔᐃⲆ = oe;
                                        }
                                        var A = fo * ((1 - z.ⲆΔᐃΔ.ᐃⵠΔ) * cf * 600);
                                        var B = Math.sin(z.angle) * A;
                                        var D = A * Math.cos(z.angle);
                                    } else {
                                        B = 0;
                                        D = 0;
                                    }
                                    var E = Ⲇᐃ[k][lf.time][h];
                                    Jc(lo, E, Ww.ᐃⵠΔΔ.x + z.x - E.width / (ᐃᐃᐃᐃⲆ * 2) + B, Ww.ᐃⵠΔΔ.y + z.y - E.height / (ᐃᐃᐃᐃⲆ * 2) + D, E.width / ᐃᐃᐃᐃⲆ, E.height / ᐃᐃᐃᐃⲆ);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ᐃᐃᐃᐃⲆ = 1;
    ⲆᐃᐃⲆⵠⲆⵠ = [{
        ΔⲆⵠⵠ: 10,
        ΔᐃⵠΔ: [{
            x: -128,
            y: -20,
            ᐃⲆⵠ: 0
        }, {
            y: -4,
            ᐃⲆⵠ: 1,
            x: -86
        }, {
            ᐃⲆⵠ: 2,
            y: -74,
            x: -60
        }, {
            ᐃⲆⵠ: 0,
            y: -144,
            x: -22
        }, {
            ᐃⲆⵠ: 0,
            x: -58,
            y: 86
        }, {
            ᐃⲆⵠ: 0,
            x: 3,
            y: -30
        }, {
            x: 65,
            ᐃⲆⵠ: 1,
            y: -115
        }, {
            ᐃⲆⵠ: 0,
            x: 118,
            y: -50
        }, {
            x: 73,
            ᐃⲆⵠ: 1,
            y: 15
        }, {
            y: 79,
            ᐃⲆⵠ: 0,
            x: 67
        }]
    }, {
        ΔᐃⵠΔ: [{
            x: -45,
            ᐃⲆⵠ: 0,
            y: -26
        }, {
            ᐃⲆⵠ: 2,
            x: -45,
            y: 20
        }, {
            y: -60,
            x: 10,
            ᐃⲆⵠ: 1
        }, {
            x: 52,
            ᐃⲆⵠ: 1,
            y: -17
        }, {
            y: 45,
            x: 14,
            ᐃⲆⵠ: 0
        }],
        ΔⲆⵠⵠ: 5
    }, {
        ΔⲆⵠⵠ: 3,
        ΔᐃⵠΔ: [{
            ᐃⲆⵠ: 2,
            x: -30,
            y: 3
        }, {
            x: 7,
            y: -38,
            ᐃⲆⵠ: 2
        }, {
            ᐃⲆⵠ: 2,
            x: 37,
            y: 5
        }]
    }, {
        ΔⲆⵠⵠ: 11,
        ΔᐃⵠΔ: [{
            y: -87,
            x: -74,
            ᐃⲆⵠ: 2
        }, {
            x: -11,
            y: -10,
            ᐃⲆⵠ: 1
        }, {
            x: -99,
            ᐃⲆⵠ: 1,
            y: 17
        }, {
            y: 84,
            ᐃⲆⵠ: 0,
            x: -66
        }, {
            ᐃⲆⵠ: 1,
            y: 123,
            x: -55
        }, {
            x: 10,
            ᐃⲆⵠ: 2,
            y: 81
        }, {
            ᐃⲆⵠ: 0,
            y: 50,
            x: 52
        }, {
            y: 9,
            x: 138,
            ᐃⲆⵠ: 1
        }, {
            y: -28,
            x: 104,
            ᐃⲆⵠ: 0
        }, {
            ᐃⲆⵠ: 2,
            x: 67,
            y: -56
        }, {
            x: 5,
            ᐃⲆⵠ: 0,
            y: -112
        }]
    }, {
        ΔᐃⵠΔ: [{
            ᐃⲆⵠ: 2,
            y: -66,
            x: -33
        }, {
            ᐃⲆⵠ: 0,
            y: 10,
            x: -58
        }, {
            y: 44,
            ᐃⲆⵠ: 1,
            x: -19
        }, {
            y: 20,
            x: 44,
            ᐃⲆⵠ: 0
        }, {
            ᐃⲆⵠ: 2,
            x: 53,
            y: -36
        }, {
            y: -62,
            x: 7,
            ᐃⲆⵠ: 0
        }],
        ΔⲆⵠⵠ: 6
    }, {
        ΔⲆⵠⵠ: 3,
        ΔᐃⵠΔ: [{
            x: -19,
            ᐃⲆⵠ: 1,
            y: -25
        }, {
            ᐃⲆⵠ: 2,
            y: 13,
            x: -29
        }, {
            x: 12,
            y: 12,
            ᐃⲆⵠ: 0
        }]
    }];
    var jv = 0;
    var kv = 0;
    var lv = 0;
    var mv = 0;
    function nv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⵠΔΔ.y + f + 710;
        var l = Math.max(Ww.ᐃⵠΔΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.x + uo - i - 100, 0);
        var r = l;
        var b = uo - l - g;
        if (n) {
            var d = j.ᐃⲆⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + ew.ᐃⲆⲆᐃⲆ;
        ew.ⵠⲆⲆⲆΔ;
        s += -d + ew.ⵠⲆⲆⲆΔ + 2;
        if (n) {
            d = j.ᐃⲆⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - ew.ⲆᐃᐃⲆΔ - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - ew.ⵠⲆΔᐃΔ - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - ew.ⲆⵠⵠⵠᐃⵠΔ - s;
        if (n > 0 && k.ⵠᐃⲆΔΔΔⲆ === 1) {
            if (lf.transition) {
                var p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 77, 72, 252, 239, 187, p);
            } else {
                lo.fillStyle = Pr.ΔⵠΔᐃᐃᐃΔ[lf.time];
            }
            lo.fillRect(r, s, b, t);
        } else {
            if (lf.transition) {
                p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(k.ᐃᐃⵠ[0], k.ᐃᐃⵠ[1], k.ᐃᐃⵠ[2], k.ⵠΔⲆ[0], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
            } else {
                lo.fillStyle = k.ⵠΔΔⲆⵠ[lf.time];
            }
            lo.fillRect(r, s, b, t);
        }
    }
    function ov(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⵠΔΔ.x + f + 820;
        var l = Math.max(Ww.ᐃⵠΔΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.y + vo - i - 100, 0);
        var r = l;
        var b = vo - l - g;
        if (n) {
            var d = j.ᐃⲆⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + ew.ᐃⲆⲆᐃⲆ;
        ew.ⵠⲆⲆⲆΔ;
        s += -d + ew.ⵠⲆⲆⲆΔ + 2;
        if (n) {
            d = j.ᐃⲆⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h - ew.ⲆᐃᐃⲆΔ - s - d;
        var u = (s += t + 2) - 2;
        if (n) {
            d = j.ᐃⲆⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (s + (t = h - ew.ⵠⲆΔᐃΔ - s - d) < u) {
            s += t + 2;
        } else {
            s = u;
        }
        t = h - ew.ⲆⵠⵠⵠᐃⵠΔ - s;
        if (n > 0 && k.ⵠᐃⲆΔΔΔⲆ === 1) {
            if (lf.transition) {
                var p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 77, 72, 252, 239, 187, p);
            } else {
                lo.fillStyle = Pr.ΔⵠΔᐃᐃᐃΔ[lf.time];
            }
            lo.fillRect(s, r, t, b);
        } else {
            if (lf.transition) {
                p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(k.ᐃᐃⵠ[0], k.ᐃᐃⵠ[1], k.ᐃᐃⵠ[2], k.ⵠΔⲆ[0], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
            } else {
                lo.fillStyle = k.ⵠΔΔⲆⵠ[lf.time];
            }
            lo.fillRect(s, r, t, b);
        }
    }
    function pv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⵠΔΔ.x + f - 700;
        var l = Math.max(Ww.ᐃⵠΔΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.y + vo - i - 100, 0);
        var r = l;
        var b = vo - l - g;
        if (n) {
            var d = j.ᐃⲆⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + ew.ᐃⲆⲆᐃⲆ;
        ew.ⵠⲆⲆⲆΔ;
        s += d + ew.ⵠⲆⲆⲆΔ - 2;
        if (n) {
            d = j.ᐃⲆⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + ew.ⲆᐃᐃⲆΔ - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ᐃⲆⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + ew.ⵠⲆΔᐃΔ - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + ew.ⲆⵠⵠⵠᐃⵠΔ - s;
        if (n > 0 && k.ⵠᐃⲆΔΔΔⲆ === 1) {
            if (lf.transition) {
                var p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 77, 72, 252, 239, 187, p);
            } else {
                lo.fillStyle = Pr.ΔⵠΔᐃᐃᐃΔ[lf.time];
            }
            lo.fillRect(s, r, t, b);
        } else {
            if (lf.transition) {
                p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(k.ᐃᐃⵠ[0], k.ᐃᐃⵠ[1], k.ᐃᐃⵠ[2], k.ⵠΔⲆ[0], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
            } else {
                lo.fillStyle = k.ⵠΔΔⲆⵠ[lf.time];
            }
            lo.fillRect(s, r, t, b);
        }
    }
    function qv() {
        lo.globalAlpha = 1;
        if (lf.transition) {
            var a = lf.ⲆⲆΔᐃ.ⲆΔᐃⲆ();
        }
        lf.ⵠᐃⵠΔⲆᐃᐃᐃⲆ(-Ww.ᐃⵠΔΔ.x, -Ww.ᐃⵠΔΔ.y);
        jv = Math.max(Math.floor(-Ww.ᐃⵠΔΔ.x / lf.ⵠⵠⵠⵠΔⲆᐃ) - 5, 0);
        kv = Math.min(Math.floor((-Ww.ᐃⵠΔΔ.x + Ww.ᐃⵠΔΔ.w) / lf.ⵠⵠⵠⵠΔⲆᐃ) + 4, lf.ⵠᐃⵠⲆᐃ - 1);
        lv = Math.max(Math.floor(-Ww.ᐃⵠΔΔ.y / lf.ⲆᐃᐃⵠⵠⵠⲆ) - 3, 0);
        mv = Math.min(Math.floor((-Ww.ᐃⵠΔΔ.y + Ww.ᐃⵠΔΔ.ΔᐃⲆ) / lf.ⲆᐃᐃⵠⵠⵠⲆ) + 3, lf.ΔⲆΔΔⵠ - 1);
        (function () {
            for (var c = lf.ⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
                var f = lf.ⵠⵠⲆᐃ[c];
                if (lf.ΔⵠⵠΔⲆ === f.ᐃⲆⵠ) {
                    var j = lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ];
                    if (f.x1 - 230 - uo <= -Ww.ᐃⵠΔΔ.x && f.x2 + 330 >= -Ww.ᐃⵠΔΔ.x && f.y1 - vo <= -Ww.ᐃⵠΔΔ.y && -Ww.ᐃⵠΔΔ.y <= f.y2 + 100) {
                        var k = f.x2;
                        if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                            k -= 610;
                        }
                        var m = f.x1;
                        if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                            m += 610;
                        }
                        var p = f.y2;
                        if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                            p -= 610;
                        }
                        var q = f.y1;
                        if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                            q += 610;
                        }
                        if (lf.transition) {
                            var w = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                            lo.fillStyle = Bv(j.ᐃᐃⵠ[0], j.ᐃᐃⵠ[1], j.ᐃᐃⵠ[2], j.ⵠΔⲆ[0], j.ⵠΔⲆ[1], j.ⵠΔⲆ[1], w);
                        } else {
                            lo.fillStyle = j.ⵠΔΔⲆⵠ[lf.time];
                        }
                        var x = Math.max(Ww.ᐃⵠΔΔ.x + m - 2 - 230, 0);
                        var y = Math.max(-Ww.ᐃⵠΔΔ.x + uo - k - 330 - 2, 0);
                        var z = Math.max(Ww.ᐃⵠΔΔ.y + q - 2, 0);
                        var A = Math.max(-Ww.ᐃⵠΔΔ.y + vo - p - 100 - 2, 0);
                        lo.beginPath();
                        lo.fillRect(x, z, uo - y - x, vo - z - A);
                    }
                }
            }
            for (c = lf.ⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
                f = lf.ⵠⵠⲆᐃ[c];
                if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                    k = f.x2;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        q += 300;
                    }
                    if (!(f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ) && -Ww.ᐃⵠΔΔ.x >= k - uo + 120 && k + 820 >= -Ww.ᐃⵠΔΔ.x && q + 88 - vo <= -Ww.ᐃⵠΔΔ.y && p + 50 >= -Ww.ᐃⵠΔΔ.y) {
                        ov(k, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[0], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ);
                        yv(k, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[0], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ);
                    }
                    if ((f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) === 0 && -Ww.ᐃⵠΔΔ.x >= m - uo - 700 && -Ww.ᐃⵠΔΔ.x <= m - 20 && q + 88 - vo <= -Ww.ᐃⵠΔΔ.y && p + 50 >= -Ww.ᐃⵠΔΔ.y) {
                        pv(m, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[1], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ);
                        Ev(m, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[1], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ);
                    }
                    if ((f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) === 0 && m - 235 - uo <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= k + 350 && -Ww.ᐃⵠΔΔ.y >= p - vo - 275 && -Ww.ᐃⵠΔΔ.y <= p + 490) {
                        nv(p - 230, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[2], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ);
                        wv(p - 230, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[2], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ);
                    }
                    if ((f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) === 0 && m - 235 - uo <= -Ww.ᐃⵠΔΔ.x && k + 350 >= -Ww.ᐃⵠΔΔ.x && q - vo - 390 <= -Ww.ᐃⵠΔΔ.y && -Ww.ᐃⵠΔΔ.y <= q + 315) {
                        xv(q + 310, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[3], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ);
                        Av(q + 310, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[3], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ);
                    }
                }
            }
            for (c = lf.ⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
                f = lf.ⵠⵠⲆᐃ[c];
                if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                    k = f.x2;
                    if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        q += 300;
                    }
                    if (f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ && k - uo + 120 <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= k + 820 && q + 88 - vo <= -Ww.ᐃⵠΔΔ.y && -Ww.ᐃⵠΔΔ.y <= p + 50) {
                        ov(k, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[0], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ);
                    }
                    if ((f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) !== 0 && m - uo - 700 <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= m - 20 && q + 88 - vo <= -Ww.ᐃⵠΔΔ.y && p + 50 >= -Ww.ᐃⵠΔΔ.y) {
                        pv(m, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[1], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ);
                    }
                    if ((f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) !== 0 && -Ww.ᐃⵠΔΔ.x >= m - 235 - uo && k + 350 >= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.y >= p - vo - 275 && p + 490 >= -Ww.ᐃⵠΔΔ.y) {
                        nv(p - 230, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[2], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ);
                    }
                    if ((f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) !== 0 && m - 235 - uo <= -Ww.ᐃⵠΔΔ.x && k + 350 >= -Ww.ᐃⵠΔΔ.x && q - vo - 390 <= -Ww.ᐃⵠΔΔ.y && q + 315 >= -Ww.ᐃⵠΔΔ.y) {
                        xv(q + 310, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[3], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ);
                    }
                }
            }
            for (c = lf.ⵠⵠⲆᐃ.length - 1; c >= 0; c--) {
                if ((f = lf.ⵠⵠⲆᐃ[c]).ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                    j = lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ];
                    if (f.x1 - 230 - uo <= -Ww.ᐃⵠΔΔ.x && f.x2 + 330 >= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.y >= f.y1 - vo && f.y2 + 100 >= -Ww.ᐃⵠΔΔ.y) {
                        k = f.x2;
                        if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                            if ((f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ) === 0) {
                                k -= 414;
                            } else {
                                k -= 610;
                            }
                        }
                        m = f.x1;
                        if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                            if ((f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) === 0) {
                                m += 414;
                            } else {
                                m += 610;
                            }
                        }
                        p = f.y2;
                        if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                            if (f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) {
                                p -= 610;
                            } else {
                                p -= 414;
                            }
                        }
                        q = f.y1;
                        if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                            if ((f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) === 0) {
                                q += 414;
                            } else {
                                q += 610;
                            }
                        }
                        if (lf.transition) {
                            w = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                            lo.fillStyle = Bv(j.ᐃᐃⵠ[0], j.ᐃᐃⵠ[1], j.ᐃᐃⵠ[2], j.ⵠΔⲆ[0], j.ⵠΔⲆ[1], j.ⵠΔⲆ[2], w);
                        } else {
                            lo.fillStyle = j.ⵠΔΔⲆⵠ[lf.time];
                        }
                        x = Math.max(Ww.ᐃⵠΔΔ.x + m - 2 - 230, 0);
                        y = Math.max(-Ww.ᐃⵠΔΔ.x + uo - k - 330 - 2, 0);
                        z = Math.max(Ww.ᐃⵠΔΔ.y + q - 2, 0);
                        A = Math.max(-Ww.ᐃⵠΔΔ.y + vo - p - 100 - 2, 0);
                        lo.beginPath();
                        lo.fillRect(x, z, uo - y - x, vo - z - A);
                    }
                }
            }
            if (rf.ΔⵠΔⵠΔ) {
                Fv(dv, lv, mv, jv, kv, 695, "isl", 2);
                Fv(dv, lv, mv, jv, kv, 694, "isl", 2);
            }
            Fv(iv, lv, mv, jv, kv, 692, "isl", 2);
            if (rf.ΔⵠΔⵠΔ) {
                Fv(hv, lv, mv, jv, kv, 243, "de");
            }
            var B = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
            for (c = 0; c < B.length; c++) {
                for (var b = B[c], C = 0; C < b.ᐃΔⲆⲆⲆ.length; C++) {
                    rv(b.ᐃΔⲆⲆⲆ[C]);
                }
            }
            if ((tp += cf * 40) > 60) {
                tp -= 60;
            }
            Fv(yp, lv, mv, jv, kv, 1024, "r", 0);
            for (c = 0; lf.ⵠⵠⲆᐃ.length > c; c++) {
                if ((f = lf.ⵠⵠⲆᐃ[c]).ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                    k = f.x2;
                    if (lf.ΔⵠⵠΔⲆ !== f.ᐃⲆⵠ) {
                        k -= 400;
                    }
                    m = f.x1;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        m += 400;
                    }
                    p = f.y2;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        p -= 300;
                    }
                    q = f.y1;
                    if (f.ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ) {
                        q += 300;
                    }
                    if ((f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ) > 0 && k - uo + 120 <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= k + 820 && -Ww.ᐃⵠΔΔ.y >= q + 88 - vo && -Ww.ᐃⵠΔΔ.y <= p + 50) {
                        yv(k, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[0], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ);
                    }
                    if ((f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) > 0 && m - uo - 700 <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= m - 20 && -Ww.ᐃⵠΔΔ.y >= q + 88 - vo && -Ww.ᐃⵠΔΔ.y <= p + 50) {
                        Ev(m, q + 88, p - 88, Ww.ᐃᐃⲆᐃ[1], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ);
                    }
                    if ((f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) > 0 && m - 235 - uo <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= k + 350 && p - vo - 275 <= -Ww.ᐃⵠΔΔ.y && -Ww.ᐃⵠΔΔ.y <= p + 490) {
                        wv(p - 230, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[2], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ);
                    }
                    if ((f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) > 0 && m - 235 - uo <= -Ww.ᐃⵠΔΔ.x && -Ww.ᐃⵠΔΔ.x <= k + 350 && q - vo - 390 <= -Ww.ᐃⵠΔΔ.y && q + 315 >= -Ww.ᐃⵠΔΔ.y) {
                        Av(q + 310, m - 230, k + 230, Ww.ᐃᐃⲆᐃ[3], lf.ⲆᐃΔΔΔ[f.ᐃⲆⵠ], f.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ);
                    }
                }
            }
        })();
        (function () {
            var u = jv;
            var e = kv;
            var i = lv;
            var t = mv;
            if (rf.ΔⵠΔⵠΔ) {
                Fv(iv, i, t, u, e, 621, "l", 2);
            }
            if (rf.ΔⵠΔⵠΔ) {
                Fv(iv, i, t, u, e, Pr.ΔⲆⲆⵠⲆ, "la", 5);
            }
            Fv(iv, i, t, u, e, 203, "la", 5);
            Fv(dv, i, t, u, e, 620, "l", 2);
            if (rf.ΔⵠΔⵠΔ) {
                Fv(gv, i, t, u, e, 203, "la", 5);
                Fv(dv, i, t, u, e, 619, "l", 2);
            }
            Fv(iv, i, t, u, e, 1052, "ma", 4);
            for (var n = lf.ᐃΔᐃ[hw.ᐃΔⵠΔᐃⵠᐃ], x = 0; x < n.length; x++) {
                n[x].ΔΔΔⲆΔΔⵠ();
            }
            var D = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
            for (x = 0; x < D.length; x++) {
                for (var Q = D[x], V = 0; V < Q.ᐃᐃⲆⵠⵠ.length; V++) {
                    sv(Q.ᐃᐃⲆⵠⵠ[V]);
                }
            }
            var aa = lf.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ];
            for (x = 0; aa.length > x; x++) {
                Dv(aa[x], 125);
                aa[x].ⵠⲆⲆⲆⲆ(aa[x].info);
            }
            var l = lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ];
            for (x = 0; x < l.length; x++) {
                if (l[x].action == 2) {
                    tv(l[x]);
                }
            }
            var ba = lf.ᐃΔᐃ[hw.ΔΔᐃΔⵠ];
            for (x = 0; x < ba.length; x++) {
                tv(ba[x], 113);
            }
            var ca = lf.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ];
            for (x = 0; x < ca.length; x++) {
                tv(ca[x]);
            }
            var da = lf.ᐃΔᐃ[hw.ᐃⵠⲆⲆᐃ];
            for (x = 0; x < da.length; x++) {
                tv(da[x]);
            }
            var ea = lf.ᐃΔᐃ[hw.ΔᐃⲆΔⲆ];
            for (x = 0; x < ea.length; x++) {
                tv(ea[x], 118);
            }
            var m = lf.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ];
            for (x = 0; x < m.length; x++) {
                Dv(m[x]);
            }
            var c = lf.ᐃΔᐃ[hw.ΔΔΔⵠΔ];
            for (x = 0; x < c.length; x++) {
                Dv(c[x], 141);
            }
            var p = lf.ᐃΔᐃ[hw.ⵠᐃΔᐃⵠ];
            for (x = 0; p.length > x; x++) {
                tv(p[x]);
            }
            p = lf.ᐃΔᐃ[hw.ᐃΔΔΔⲆ];
            x = 0;
            for (; x < p.length; x++) {
                tv(p[x]);
            }
            p = lf.ᐃΔᐃ[hw.ⵠᐃΔᐃⵠ];
            x = 0;
            for (; p.length > x; x++) {
                uv(p[x]);
            }
            var fa = lf.ᐃΔᐃ[hw.ⲆᐃⵠⲆΔ];
            for (x = 0; fa.length > x; x++) {
                if ((fa[x].info & 15) === 0 || fa[x].info === 10) {
                    Dv(fa[x]);
                }
            }
            var ha = lf.ᐃΔᐃ[hw.ΔΔⲆⲆⵠ];
            for (x = 0; x < ha.length; x++) {
                if (!(ha[x].info & 15) || ha[x].info === 10) {
                    Dv(ha[x]);
                }
            }
            var ia = lf.ᐃΔᐃ[hw.ⵠⵠⵠΔΔ];
            for (x = 0; ia.length > x; x++) {
                if ((ia[x].info & 15) === 0 || ia[x].info === 10) {
                    Dv(ia[x]);
                }
            }
            var ja = lf.ᐃΔᐃ[hw.ᐃⵠᐃⵠⵠ];
            for (x = 0; x < ja.length; x++) {
                Dv(ja[x], 132);
            }
            var ka = lf.ᐃΔᐃ[hw.ⵠⲆⵠⵠΔ];
            for (x = 0; ka.length > x; x++) {
                if (!(ka[x].info & 15) || ka[x].info === 10) {
                    Dv(ka[x]);
                }
            }
            var la = lf.ᐃΔᐃ[hw.ⵠⵠⵠⲆⵠ];
            for (x = 0; x < la.length; x++) {
                if (!(la[x].info & 15) || la[x].info === 10) {
                    Dv(la[x]);
                }
            }
            var ma = lf.ᐃΔᐃ[hw.ΔⲆΔⲆᐃ];
            for (x = 0; x < ma.length; x++) {
                if (!(ma[x].info & 15) || ma[x].info === 10) {
                    Dv(ma[x]);
                }
            }
            ja = lf.ᐃΔᐃ[hw.ᐃⵠⵠΔᐃ];
            x = 0;
            for (; x < ja.length; x++) {
                Dv(ja[x]);
            }
            var na = lf.ᐃΔᐃ[hw.ᐃⲆⵠⵠⵠ];
            for (x = 0; x < na.length; x++) {
                Dv(na[x], 250, 729);
            }
            var k = lf.ᐃΔᐃ[hw.ΔᐃΔΔⵠⲆᐃ];
            for (x = 0; x < k.length; x++) {
                Dv(k[x], 250, 729);
            }
            var J = lf.ᐃΔᐃ[hw.ᐃⵠᐃⵠᐃ];
            for (x = 0; x < J.length; x++) {
                Dv(J[x], 854, 859);
            }
            var M = lf.ᐃΔᐃ[hw.ⵠⵠᐃⲆⵠ];
            for (x = 0; x < M.length; x++) {
                if (M[x].info & 1) {
                    Dv(M[x], 336);
                }
            }
            M = lf.ᐃΔᐃ[hw.ᐃΔᐃⲆⵠ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info & 1) {
                    Dv(M[x], 373);
                }
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃᐃⲆΔ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 376);
                }
            }
            M = lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⵠ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 379);
                }
            }
            M = lf.ᐃΔᐃ[hw.ᐃⲆⵠΔΔ];
            x = 0;
            for (; x < M.length; x++) {
                if (M[x].info) {
                    Dv(M[x], 500);
                }
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃⲆᐃᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 376);
                }
            }
            M = lf.ᐃΔᐃ[hw.Δᐃᐃᐃⵠ];
            x = 0;
            for (; x < M.length; x++) {
                if (M[x].info & 1) {
                    Dv(M[x], 336);
                }
            }
            M = lf.ᐃΔᐃ[hw.ⵠⲆⲆΔᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info & 1) {
                    Dv(M[x], 373);
                }
            }
            M = lf.ᐃΔᐃ[hw.ΔΔΔⲆᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 376);
                }
            }
            M = lf.ᐃΔᐃ[hw.ᐃᐃⵠᐃⲆ];
            x = 0;
            for (; x < M.length; x++) {
                if (M[x].info) {
                    Dv(M[x], 379);
                }
            }
            M = lf.ᐃΔᐃ[hw.ⲆⵠΔⵠΔ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 500);
                }
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃᐃΔᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (M[x].info) {
                    Dv(M[x], 376);
                }
            }
            var oa = lf.ᐃΔᐃ[hw.ⲆᐃⲆⵠᐃ];
            for (x = 0; oa.length > x; x++) {
                Dv(oa[x], 264, 322);
            }
            var E = lf.ᐃΔᐃ[hw.ᐃᐃⵠⵠΔ];
            for (x = 0; E.length > x; x++) {
                Dv(E[x], 198);
            }
            n = lf.ᐃΔᐃ[hw.ᐃΔⵠΔᐃⵠᐃ];
            x = 0;
            for (; n.length > x; x++) {
                Dv(n[x], Pr.ᐃΔⵠΔᐃⵠᐃ, Pr.ⲆᐃⵠⵠΔⵠᐃᐃⵠ);
            }
            var pa = lf.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ];
            for (x = 0; pa.length > x; x++) {
                if (pa[x].ᐃⲆⵠⲆⲆΔᐃ === 0) {
                    Dv(pa[x]);
                }
            }
            D = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
            x = 0;
            for (; x < D.length; x++) {
                Q = D[x];
                if (D[x].ᐃΔⲆΔΔ !== 227 && D[x].ᐃΔⲆΔΔ !== 228 && D[x].ᐃΔⲆΔΔ !== 229 && D[x].ᐃΔⲆΔΔ !== 230 && D[x].ᐃΔⲆΔΔ !== 91) {
                    if (Q.ᐃΔᐃⲆᐃΔⵠ === 0) {
                        if (Q.ᐃᐃᐃⵠᐃᐃⵠ > 0.001) {
                            Q.ᐃᐃᐃⵠᐃᐃⵠ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(Q.ᐃᐃᐃⵠᐃᐃⵠ, 0, 0.018);
                            var qa = 1 + Math.min(1, Math.max(Q.ᐃᐃᐃⵠᐃᐃⵠ, 0) / 100) * 0.18;
                            lo.save();
                            lo.scale(qa, qa);
                            Ww.ᐃⵠΔΔ.x /= qa;
                            Ww.ᐃⵠΔΔ.y /= qa;
                            Q.x /= qa;
                            Q.y /= qa;
                            Q.r.x /= qa;
                            Q.r.y /= qa;
                            Q.ⲆⵠⲆⲆΔⵠⲆ();
                            Q.ΔΔⲆᐃ();
                            Ww.ᐃⵠΔΔ.x *= qa;
                            Ww.ᐃⵠΔΔ.y *= qa;
                            Q.x *= qa;
                            Q.y *= qa;
                            Q.r.x *= qa;
                            Q.r.y *= qa;
                            lo.restore();
                        } else {
                            Q.ᐃⲆⵠⲆⲆΔᐃ = 0;
                            Q.ⲆⵠⲆⲆΔⵠⲆ();
                            Q.ΔΔⲆᐃ();
                        }
                    }
                } else if (Q.ᐃᐃᐃᐃΔ <= 180) {
                    lo.save();
                    qa = 1 + Math.min(1, Math.max(Q.ⵠΔⲆᐃᐃ - 30, 0) / 180) * 0.35;
                    lo.scale(qa, qa);
                    Ww.ᐃⵠΔΔ.x /= qa;
                    Ww.ᐃⵠΔΔ.y /= qa;
                    Q.x /= qa;
                    Q.y /= qa;
                    Q.r.x /= qa;
                    Q.r.y /= qa;
                    Q.ᐃⲆⵠⲆⲆΔᐃ = 0;
                    Q.ⲆⵠⲆⲆΔⵠⲆ();
                    Q.ΔΔⲆᐃ();
                    Ww.ᐃⵠΔΔ.x *= qa;
                    Ww.ᐃⵠΔΔ.y *= qa;
                    Q.x *= qa;
                    Q.y *= qa;
                    Q.r.x *= qa;
                    Q.r.y *= qa;
                    lo.restore();
                }
            }
            E = lf.ᐃΔᐃ[hw.ᐃᐃⵠⵠΔ];
            x = 0;
            for (; E.length > x; x++) {
                Dv(E[x], 913);
            }
            var ra = lf.ᐃΔᐃ[hw.ⵠⵠⲆⵠᐃ];
            for (x = 0; ra.length > x; x++) {
                Dv(ra[x]);
            }
            var F = lf.ᐃΔᐃ[hw.ⲆⲆⵠⵠⲆ];
            for (x = 0; x < F.length; x++) {
                Dv(F[x], 419, 461);
            }
            var R = lf.ᐃΔᐃ[hw.ⲆΔΔΔΔ];
            for (x = 0; R.length > x; x++) {
                Dv(R[x]);
            }
            var j = lf.ᐃΔᐃ[hw.ᐃΔΔᐃⵠ];
            for (x = 0; x < j.length; x++) {
                Dv(j[x], 299, 326);
            }
            var G = lf.ᐃΔᐃ[hw.ⵠΔⲆⵠΔ];
            for (x = 0; x < G.length; x++) {
                Dv(G[x], 232, 1077);
            }
            var L = lf.ᐃΔᐃ[hw.ⵠᐃⲆᐃΔ];
            for (x = 0; x < L.length; x++) {
                Dv(L[x], 233, 1092);
            }
            fa = lf.ᐃΔᐃ[hw.ⲆᐃⵠⲆΔ];
            x = 0;
            for (; x < fa.length; x++) {
                if ((fa[x].info & 15) !== 0 && fa[x].info !== 10) {
                    Dv(fa[x]);
                }
            }
            ha = lf.ᐃΔᐃ[hw.ΔΔⲆⲆⵠ];
            x = 0;
            for (; ha.length > x; x++) {
                if ((ha[x].info & 15) !== 0 && ha[x].info !== 10) {
                    Dv(ha[x]);
                }
            }
            ia = lf.ᐃΔᐃ[hw.ⵠⲆⵠⲆΔᐃΔ];
            x = 0;
            for (; ia.length > x; x++) {
                Dv(ia[x], 239);
            }
            ia = lf.ᐃΔᐃ[hw.ⵠⵠⵠΔΔ];
            x = 0;
            for (; ia.length > x; x++) {
                if ((ia[x].info & 15) !== 0 && ia[x].info !== 10) {
                    Dv(ia[x]);
                }
            }
            p = lf.ᐃΔᐃ[hw.ᐃΔΔΔⲆ];
            x = 0;
            for (; p.length > x; x++) {
                uv(p[x]);
            }
            ka = lf.ᐃΔᐃ[hw.ⵠⲆⵠⵠΔ];
            x = 0;
            for (; ka.length > x; x++) {
                if ((ka[x].info & 15) !== 0 && ka[x].info !== 10) {
                    Dv(ka[x]);
                }
            }
            la = lf.ᐃΔᐃ[hw.ⵠⵠⵠⲆⵠ];
            x = 0;
            for (; x < la.length; x++) {
                if (la[x].info & 15 && la[x].info !== 10) {
                    Dv(la[x]);
                }
            }
            ma = lf.ᐃΔᐃ[hw.ΔⲆΔⲆᐃ];
            x = 0;
            for (; x < ma.length; x++) {
                if ((ma[x].info & 15) !== 0 && ma[x].info !== 10) {
                    Dv(ma[x]);
                }
            }
            var W = lf.ᐃΔᐃ[hw.ⲆⵠⲆⵠΔ];
            for (x = 0; x < W.length; x++) {
                Dv(W[x], 691, 697);
            }
            var N = lf.ᐃΔᐃ[hw.ⲆⵠⲆᐃⵠ];
            for (x = 0; x < N.length; x++) {
                Dv(N[x], 637, 687);
            }
            var O = lf.ᐃΔᐃ[hw.ΔⵠⲆᐃⲆ];
            for (x = 0; O.length > x; x++) {
                Dv(O[x], 673, 688);
            }
            var q = lf.ᐃΔᐃ[hw.ⲆⵠΔᐃᐃ];
            for (x = 0; x < q.length; x++) {
                Dv(q[x], 260, 333);
            }
            var H = lf.ᐃΔᐃ[hw.ΔⲆⵠⲆⲆ];
            for (x = 0; H.length > x; x++) {
                Dv(H[x], 1033, 1034);
            }
            var U = lf.ᐃΔᐃ[hw.ᐃⲆΔᐃⲆ];
            for (x = 0; U.length > x; x++) {
                Dv(U[x], 445, 462);
            }
            var Y = lf.ᐃΔᐃ[hw.ⵠⵠΔΔᐃ];
            for (x = 0; Y.length > x; x++) {
                Dv(Y[x]);
            }
            var K = lf.ᐃΔᐃ[hw.ⲆⲆᐃΔΔ];
            for (x = 0; K.length > x; x++) {
                Dv(K[x], 918, 919);
            }
            var X = lf.ᐃΔᐃ[hw.ⲆⲆᐃⵠΔ];
            for (x = 0; x < X.length; x++) {
                Dv(X[x]);
            }
            var Z = lf.ᐃΔᐃ[hw.ᐃᐃΔⵠΔ];
            for (x = 0; Z.length > x; x++) {
                Dv(Z[x], 1218, 1219);
            }
            var sa = lf.ᐃΔᐃ[hw.ⵠΔΔΔⲆ];
            for (x = 0; x < sa.length; x++) {
                if (sa[x].scale === 1) {
                    Dv(sa[x], 449, 463);
                }
            }
            sa = lf.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ];
            x = 0;
            for (; sa.length > x; x++) {
                if (sa[x].scale === 1) {
                    Dv(sa[x], 450, 464);
                }
            }
            var ta = lf.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ];
            for (x = 0; ta.length > x; x++) {
                Dv(ta[x]);
            }
            var ua = lf.ᐃΔᐃ[hw.ⵠⵠⲆΔᐃ];
            for (x = 0; ua.length > x; x++) {
                Dv(ua[x], 114);
            }
            l = lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ];
            x = 0;
            for (; l.length > x; x++) {
                Dv(l[x]);
            }
            var va = lf.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ];
            for (x = 0; va.length > x; x++) {
                Dv(va[x]);
            }
            M = lf.ᐃΔᐃ[hw.Δᐃᐃᐃⵠ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 166);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⵠⲆⲆΔᐃ];
            x = 0;
            for (; x < M.length; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 171);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ΔΔΔⲆᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 172);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ᐃᐃⵠᐃⲆ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 173);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⲆⵠΔⵠΔ];
            x = 0;
            for (; x < M.length; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 124);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃᐃΔᐃ];
            x = 0;
            for (; x < M.length; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 218);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⵠⵠᐃⲆⵠ];
            x = 0;
            for (; x < M.length; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 212);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ᐃΔᐃⲆⵠ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 213);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃᐃⲆΔ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 214);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⵠ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 215);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ᐃⲆⵠΔΔ];
            x = 0;
            for (; x < M.length; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 216);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            M = lf.ᐃΔᐃ[hw.ⵠᐃⲆᐃᐃ];
            x = 0;
            for (; M.length > x; x++) {
                if (!(M[x].info & 1)) {
                    Dv(M[x], 220);
                }
                M[x].ⵠⲆⲆⲆⲆ(M[x].info >> 1);
            }
            var wa = lf.ᐃΔᐃ[hw.ΔᐃⵠᐃΔ];
            for (x = 0; x < wa.length; x++) {
                Dv(wa[x], 162);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            wa = lf.ᐃΔᐃ[hw.ΔᐃᐃⵠⲆ];
            x = 0;
            for (; wa.length > x; x++) {
                Dv(wa[x], 163);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            wa = lf.ᐃΔᐃ[hw.ⵠⵠᐃⲆΔ];
            x = 0;
            for (; x < wa.length; x++) {
                Dv(wa[x], 164);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            wa = lf.ᐃΔᐃ[hw.ᐃⵠⲆΔⵠ];
            x = 0;
            for (; wa.length > x; x++) {
                Dv(wa[x], 165);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            wa = lf.ᐃΔᐃ[hw.ΔⵠᐃΔΔ];
            x = 0;
            for (; x < wa.length; x++) {
                Dv(wa[x], 122);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            wa = lf.ᐃΔᐃ[hw.ΔΔⵠᐃΔ];
            x = 0;
            for (; x < wa.length; x++) {
                Dv(wa[x], 217);
                wa[x].ⵠⲆⲆⲆⲆ(wa[x].info);
            }
            var xa = lf.ᐃΔᐃ[hw.ⲆⵠᐃⵠΔ];
            for (x = 0; x < xa.length; x++) {
                Dv(xa[x], 160);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            xa = lf.ᐃΔᐃ[hw.ⵠᐃᐃΔⵠ];
            x = 0;
            for (; x < xa.length; x++) {
                Dv(xa[x], 168);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            xa = lf.ᐃΔᐃ[hw.ⲆΔᐃΔᐃ];
            x = 0;
            for (; x < xa.length; x++) {
                Dv(xa[x], 169);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            xa = lf.ᐃΔᐃ[hw.ⲆΔΔᐃΔ];
            x = 0;
            for (; xa.length > x; x++) {
                Dv(xa[x], 170);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            xa = lf.ᐃΔᐃ[hw.ᐃⲆΔΔᐃ];
            x = 0;
            for (; xa.length > x; x++) {
                Dv(xa[x], 123);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            xa = lf.ᐃΔᐃ[hw.ⵠΔⵠⲆΔ];
            x = 0;
            for (; x < xa.length; x++) {
                Dv(xa[x], 219);
                xa[x].ⵠⲆⲆⲆⲆ(xa[x].info);
            }
            var ya = lf.ᐃΔᐃ[hw.ⲆΔΔΔⵠ];
            for (x = 0; x < ya.length; x++) {
                var za = ya[x];
                if (za.info > 0) {
                    Dv(za, 788);
                } else {
                    Dv(za, 182);
                }
            }
            var Aa = lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ];
            for (x = 0; Aa.length > x; x++) {
                Dv(Aa[x], 159);
            }
            Fv(iv, i, t, u, e, 111, "g", 2);
            Fv(iv, i, t, u, e, 415, "gw", 2);
            Fv(iv, i, t, u, e, 112, "d", 2);
            Fv(iv, i, t, u, e, 416, "dw", 2);
            Fv(iv, i, t, u, e, 110, "p", 0);
            Fv(iv, i, t, u, e, 241, "m", 2);
            Fv(iv, i, t, u, e, 121, "a", 2);
            Fv(iv, i, t, u, e, 202, "re", 2);
            Fv(iv, i, t, u, e, 679, "cs", 3, 3);
            Fv(iv, i, t, u, e, 679, "cs", 2, 2);
            Fv(iv, i, t, u, e, 679, "cs", 1, 1);
            Fv(iv, i, t, u, e, 679, "cs", 0, 0);
            Fv(iv, i, t, u, e, 676, "cs", 3, 3);
            Fv(iv, i, t, u, e, 676, "cs", 2, 2);
            Fv(iv, i, t, u, e, 676, "cs", 1, 1);
            Fv(iv, i, t, u, e, 676, "cs", 0, 0);
            var Ba = lf.ᐃΔᐃ[hw.ⵠΔⲆΔᐃ];
            for (x = 0; Ba.length > x; x++) {
                for (V = 0; V < Ba[x].info; V++) {
                    Dv(Ba[x].ⲆᐃⲆΔ[V], 294);
                }
            }
            Fv(iv, i, t, u, e, 108, "s", 2);
            var Ca = lf.ᐃΔᐃ[hw.ΔⵠΔⵠⲆ];
            for (x = 0; x < Ca.length; x++) {
                Dv(Ca[x]);
            }
            Ca = lf.ᐃΔᐃ[hw.ⲆⵠᐃⲆⲆ];
            x = 0;
            for (; Ca.length > x; x++) {
                Dv(Ca[x]);
            }
            Ca = lf.ᐃΔᐃ[hw.ΔⵠᐃᐃΔ];
            x = 0;
            for (; Ca.length > x; x++) {
                Dv(Ca[x]);
            }
            Ca = lf.ᐃΔᐃ[hw.ⵠΔᐃⲆⲆ];
            x = 0;
            for (; x < Ca.length; x++) {
                Dv(Ca[x]);
            }
            Ca = lf.ᐃΔᐃ[hw.ⲆΔⵠⲆΔ];
            x = 0;
            for (; x < Ca.length; x++) {
                Dv(Ca[x]);
            }
            var Da = lf.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ];
            for (x = 0; x < Da.length; x++) {
                tv(Da[x]);
            }
            ba = lf.ᐃΔᐃ[hw.ΔΔᐃΔⵠ];
            x = 0;
            for (; ba.length > x; x++) {
                uv(ba[x]);
            }
            ba = lf.ᐃΔᐃ[hw.ΔᐃⲆΔⲆ];
            x = 0;
            for (; ba.length > x; x++) {
                uv(ba[x]);
            }
            l = lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ];
            x = 0;
            for (; l.length > x; x++) {
                if (l[x].action == 2) {
                    uv(l[x]);
                }
            }
            va = lf.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ];
            x = 0;
            for (; x < va.length; x++) {
                uv(va[x]);
            }
            ca = lf.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ];
            x = 0;
            for (; ca.length > x; x++) {
                uv(ca[x]);
            }
            da = lf.ᐃΔᐃ[hw.ᐃⵠⲆⲆᐃ];
            x = 0;
            for (; da.length > x; x++) {
                uv(da[x]);
                da[x].ⵠⲆⲆⲆⲆ(da[x].info);
            }
            Fv(iv, i, t, u, e, 989, "c", 0);
            Fv(iv, i, t, u, e, 109, "t", 5, 4);
            Fv(iv, i, t, u, e, 413, "f", 2, 2);
            Fv(iv, i, t, u, e, 693, "plm", 0, 0);
            Fv(iv, i, t, u, e, 307, "b", 3, 2);
            Fv(iv, i, t, u, e, 109, "t", 3, 2);
            Fv(iv, i, t, u, e, 307, "b", 1, 0);
            Fv(iv, i, t, u, e, 413, "f", 1, 1);
            Fv(iv, i, t, u, e, 693, "plm", 1, 1);
            Fv(iv, i, t, u, e, 109, "t", 1, 0);
            Fv(iv, i, t, u, e, 413, "f", 0, 0);
            Fv(iv, i, t, u, e, 693, "plm", 2, 2);
            Da = lf.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ];
            x = 0;
            for (; x < Da.length; x++) {
                uv(Da[x]);
            }
            var Ea = lf.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ];
            for (x = 0; x < Ea.length; x++) {
                Dv(Ea[x], 221);
            }
            D = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
            x = 0;
            for (; D.length > x; x++) {
                if ((Q = D[x]).ᐃΔᐃⲆᐃΔⵠ === 1 && (Q.ᐃᐃᐃᐃΔ < 180 || Q.ᐃΔⲆΔΔ !== 227 && Q.ᐃΔⲆΔΔ !== 228 && Q.ᐃΔⲆΔΔ !== 91 && Q.ᐃΔⲆΔΔ !== 229 && Q.ᐃΔⲆΔΔ !== 230)) {
                    Q.ᐃᐃᐃⵠᐃᐃⵠ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(Q.ᐃᐃᐃⵠᐃᐃⵠ, 100, 0.018);
                    qa = 1 + Math.min(1, Math.max(Q.ᐃᐃᐃⵠᐃᐃⵠ, 0) / 100) * 0.18;
                    lo.save();
                    lo.scale(qa, qa);
                    Ww.ᐃⵠΔΔ.x /= qa;
                    Ww.ᐃⵠΔΔ.y /= qa;
                    Q.x /= qa;
                    Q.y /= qa;
                    Q.r.x /= qa;
                    Q.r.y /= qa;
                    Q.ⲆⵠⲆⲆΔⵠⲆ();
                    Q.ΔΔⲆᐃ();
                    Ww.ᐃⵠΔΔ.x *= qa;
                    Ww.ᐃⵠΔΔ.y *= qa;
                    Q.x *= qa;
                    Q.y *= qa;
                    Q.r.x *= qa;
                    Q.r.y *= qa;
                    lo.restore();
                }
            }
            var Fa = lf.ᐃΔᐃ[hw.ⵠⲆΔⵠᐃ];
            for (x = 0; x < Fa.length; x++) {
                Dv(Fa[x], 190);
                Fa[x].ⵠⲆⲆⲆⲆ(Fa[x].info);
            }
            var Ga = lf.ᐃΔᐃ[hw.ᐃⲆⵠΔⲆ];
            for (x = 0; x < Ga.length; x++) {
                Dv(Ga[x], 245, 246);
            }
            var Ha = lf.ᐃΔᐃ[hw.ΔᐃⲆⲆⵠ];
            for (x = 0; x < Ha.length; x++) {
                Dv(Ha[x], 201);
            }
            D = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
            x = 0;
            for (; x < D.length; x++) {
                if (((Q = D[x]).ᐃΔⲆΔΔ === 227 || Q.ᐃΔⲆΔΔ === 228 || Q.ᐃΔⲆΔΔ === 91 || Q.ᐃΔⲆΔΔ === 229 || Q.ᐃΔⲆΔΔ === 230) && Q.ᐃᐃᐃᐃΔ > 180) {
                    Q.ᐃⲆⵠⲆⲆΔᐃ = 1;
                    lo.save();
                    qa = 1 + Math.min(1, Math.max(Q.ⵠΔⲆᐃᐃ - 30, 0) / 180) * 0.35;
                    lo.scale(qa, qa);
                    Ww.ᐃⵠΔΔ.x /= qa;
                    Ww.ᐃⵠΔΔ.y /= qa;
                    Q.x /= qa;
                    Q.y /= qa;
                    Q.r.x /= qa;
                    Q.r.y /= qa;
                    Q.ⲆⵠⲆⲆΔⵠⲆ();
                    Q.ΔΔⲆᐃ();
                    Ww.ᐃⵠΔΔ.x *= qa;
                    Ww.ᐃⵠΔΔ.y *= qa;
                    Q.x *= qa;
                    Q.y *= qa;
                    Q.r.x *= qa;
                    Q.r.y *= qa;
                    lo.restore();
                }
            }
            pa = lf.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ];
            x = 0;
            for (; pa.length > x; x++) {
                if (pa[x].ᐃⲆⵠⲆⲆΔᐃ === 1) {
                    Dv(pa[x]);
                }
            }
            sa = lf.ᐃΔᐃ[hw.ⵠΔΔΔⲆ];
            x = 0;
            for (; x < sa.length; x++) {
                if (sa[x].scale > 1) {
                    Dv(sa[x], 449, 463);
                }
            }
            sa = lf.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ];
            x = 0;
            for (; sa.length > x; x++) {
                if (sa[x].scale > 1) {
                    Dv(sa[x], 450, 464);
                }
            }
            var Ia = lf.ᐃΔᐃ[hw.ΔⲆⵠⲆΔ];
            for (x = 0; Ia.length > x; x++) {
                Dv(Ia[x], 235, 1107);
            }
            var Ja = lf.ᐃΔᐃ[hw.ᐃΔΔⲆΔ];
            for (x = 0; Ja.length > x; x++) {
                Dv(Ja[x], 238, 1128);
            }
            if ((bv += cf * 15) > 60) {
                bv -= 60;
            }
            Fv(cv, i, t, u, e, 1041, "fo", 2);
            Fv(cv, i, t, u, e, 244, "fod", 2);
        })();
        if (rf.ΔⵠΔⵠΔ && lf.mode !== ew.ⲆⵠΔΔᐃ && lf.mode !== ew.ⲆΔᐃⲆᐃ && ew.ⲆⲆⵠΔⵠⵠᐃ !== lf.mode) {
            (function () {
                var a = Ww.ⲆΔⵠΔᐃ;
                if (a.ⵠⲆⵠᐃⲆ === 0) {
                    a.ΔΔⵠⵠⲆ = Math.max(0, a.ΔΔⵠⵠⲆ - cf / 10);
                } else {
                    a.ΔΔⵠⵠⲆ = Math.min(1, a.ΔΔⵠⵠⲆ + cf / 10);
                }
                for (var b = a.Δᐃⵠⵠᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆΔᐃⲆ(d);
                    Cv(471, d.id, Ww.ᐃⵠΔΔ.x + d.x, Ww.ᐃⵠΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; b.length > c; c++) {
                    if ((d = b[c]).ΔΔⵠⲆⲆ <= 0 || d.x > -Ww.ᐃⵠΔΔ.x + uo || d.x < -Ww.ᐃⵠΔΔ.x - Ww.ᐃⵠΔΔ.w / 2 || -Ww.ᐃⵠΔΔ.y + vo < d.y) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⵠΔΔ.y;
                if (lf.ⲆⲆⵠⲆᐃ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ww.ΔⲆᐃⵠᐃ;
                if (a.ⵠⲆⵠᐃⲆ === 0) {
                    a.ΔΔⵠⵠⲆ = Math.max(0, a.ΔΔⵠⵠⲆ - cf / 10);
                } else {
                    a.ΔΔⵠⵠⲆ = Math.min(1, a.ΔΔⵠⵠⲆ + cf / 10);
                }
                for (var b = a.Δᐃⵠⵠᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆΔᐃⲆ(d);
                    Cv(470, d.id, Ww.ᐃⵠΔΔ.x + d.x, Ww.ᐃⵠΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ΔΔⵠⲆⲆ <= 0 || -Ww.ᐃⵠΔΔ.x + uo < d.x || d.x < -Ww.ᐃⵠΔΔ.x || d.y > -Ww.ᐃⵠΔΔ.y + vo) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⵠΔΔ.y;
                if (lf.ⲆⲆΔⵠⵠ > -1000) {
                    a.add(e);
                }
            })();
            (function () {
                var a = Ww.ⵠΔⲆΔⵠⲆⵠ;
                for (var b = a.Δᐃⵠⵠᐃ, c = 0; c < b.length; c++) {
                    var d = b[c];
                    a.ⲆΔᐃⲆ(d);
                    Cv(942, d.id, Ww.ᐃⵠΔΔ.x + d.x, Ww.ᐃⵠΔΔ.y + d.y, d.alpha);
                }
                for (c = 0; c < b.length; c++) {
                    if ((d = b[c]).ΔΔⵠⲆⲆ <= 0 || d.x > -Ww.ᐃⵠΔΔ.x + uo || -Ww.ᐃⵠΔΔ.x > d.x || d.y > -Ww.ᐃⵠΔΔ.y + vo) {
                        b.splice(c, 1);
                    }
                }
                var e = -Ww.ᐃⵠΔΔ.y;
                if (lf.ᐃΔΔⵠⲆ > -1000) {
                    a.add(e);
                }
            })();
        }
        if (lf.transition && a) {
            lf.transition = fg;
            lf.ⲆⲆΔᐃ.ᐃⵠΔ = 0;
            lf.ⲆⲆΔᐃ.ΔⲆⵠ = il;
        }
    }
    function rv(a) {
        lo.save();
        lo.translate(Ww.ᐃⵠΔΔ.x + a.x, Ww.ᐃⵠΔΔ.y + a.y);
        lo.rotate(a.angle);
        lo.globalAlpha = a.alpha;
        var b = Ⲇᐃ[a.id][lf.time];
        Jc(lo, b, -b.width / 2, -b.height / 2);
        lo.globalAlpha = 1;
        lo.restore();
    }
    function sv(a) {
        lo.globalAlpha = a.alpha;
        zt(lo, a.x + Ww.ᐃⵠΔΔ.x, a.y + Ww.ᐃⵠΔΔ.y, a.r);
        wt(lo, Pr.ᐃΔⲆΔᐃᐃⲆ[lf.time]);
        lo.globalAlpha = 1;
    }
    function tv(a, b) {
        if (lf.transition) {
            lo.globalAlpha = 1;
            a.ⲆⲆΔΔⵠ(b);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            a.ⲆⲆΔΔⵠ(b);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            a.ⲆⲆΔΔⵠ(b);
        }
    }
    function uv(a, b) {
        if (lf.transition) {
            lo.globalAlpha = 1;
            a.ᐃΔⵠᐃΔ(b);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            a.ᐃΔⵠᐃΔ(b);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            a.ᐃΔⵠᐃΔ(b);
        }
    }
    function vv(b, c, d, e) {
        var f = c.width;
        var g = c.height;
        var a = Math.floor(f / 2);
        var h = Math.floor(g / 2);
        if (lf.transition) {
            lo.globalAlpha = 1;
            Jc(lo, Ⲇᐃ[b][lf.time], 0, 0, f, g, d, e, a, h);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            Jc(lo, Ⲇᐃ[b][lf.time], 0, 0, f, g, d, e, a, h);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            Jc(lo, c, 0, 0, f, g, d, e, a, h);
        }
    }
    function wv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⵠΔΔ.y + j + 710;
        var l = Math.max(Ww.ᐃⵠΔΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.x + uo - i - 100, 0);
        var t = l;
        var b = uo - l - g;
        if (o) {
            var d = q.ᐃⲆⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + ew.ᐃⲆⲆᐃⲆ;
        var F = u;
        var c = t;
        var p = -d.x + ew.ⵠⲆⲆⲆΔ;
        var C = b;
        var G = u += -d.x + ew.ⵠⲆⲆⲆΔ + 2;
        if (o) {
            d = q.ᐃⲆⵠ(r);
        } else {
            d = r.r;
        }
        var f = h - ew.ⲆᐃᐃⲆΔ - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - ew.ⵠⲆΔᐃΔ - u - d.x) < A) {
            var k = Wh;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = il;
            u = A;
            D = -1;
        }
        f = h - ew.ⲆⵠⵠⵠᐃⵠΔ - u;
        if (lf.transition) {
            var N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(c, F, C, p);
        if (o) {
            if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 70, 76, 42, 139, 155, N);
            } else {
                lo.fillStyle = Pr.ΔᐃᐃⲆΔⵠᐃ[lf.time];
            }
        } else if (lf.transition) {
            N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (lf.transition) {
                    N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                    lo.fillStyle = Bv(17, 94, 96, 169, 214, 211, N);
                } else {
                    lo.fillStyle = Pr.ᐃΔⲆⵠᐃⲆΔ[lf.time];
                }
            } else if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
            } else {
                lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
            }
            lo.fillRect(J, L, B, M);
        }
        if (rf.ΔⵠΔⵠΔ && o) {
            q.ΔᐃᐃΔⲆⲆΔⵠⵠ(A, D, G, h, -Ww.ᐃⵠΔΔ.x + c, -Ww.ᐃⵠΔΔ.x + c + C);
        }
    }
    function xv(f, e, i, j, k, n) {
        var a = j.w1;
        var o = j.w2;
        var q = j.w3;
        var h = Ww.ᐃⵠΔΔ.y + f - 700;
        var l = Math.max(Ww.ᐃⵠΔΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.x + uo - i - 100, 0);
        var r = l;
        var b = uo - l - g;
        if (n) {
            var d = j.ᐃⲆⵠ(a).x;
        } else {
            d = a.r.x;
        }
        var s = h + ew.ᐃⲆⲆᐃⲆ;
        ew.ⵠⲆⲆⲆΔ;
        s += d + ew.ⵠⲆⲆⲆΔ - 2;
        if (n) {
            d = j.ᐃⲆⵠ(o).x;
        } else {
            d = o.r.x;
        }
        var t = h + ew.ⲆᐃᐃⲆΔ - s + d;
        var u = (s += t - 2) - 2;
        if (n) {
            d = j.ᐃⲆⵠ(q).x;
        } else {
            d = q.r.x;
        }
        if (u < s + (t = h + ew.ⵠⲆΔᐃΔ - s + d) - 3) {
            s += t - 2;
        } else {
            s = u;
        }
        t = h + ew.ⲆⵠⵠⵠᐃⵠΔ - s;
        if (n > 0 && k.ⵠᐃⲆΔΔΔⲆ === 1) {
            if (lf.transition) {
                var p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 77, 72, 252, 239, 187, p);
            } else {
                lo.fillStyle = Pr.ΔⵠΔᐃᐃᐃΔ[lf.time];
            }
            lo.fillRect(r, s, b, t);
        } else {
            if (lf.transition) {
                p = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(k.ᐃᐃⵠ[0], k.ᐃᐃⵠ[1], k.ᐃᐃⵠ[2], k.ⵠΔⲆ[0], k.ⵠΔⲆ[1], k.ⵠΔⲆ[2], p);
            } else {
                lo.fillStyle = k.ⵠΔΔⲆⵠ[lf.time];
            }
            lo.fillRect(r, s, b, t);
        }
    }
    function yv(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⵠΔΔ.x + j + 820;
        var l = Math.max(Ww.ᐃⵠΔΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.y + vo - i - 100, 0);
        var t = l;
        var b = vo - l - g;
        if (o) {
            var d = q.ᐃⲆⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + ew.ᐃⲆⲆᐃⲆ;
        var F = u;
        var c = t;
        var p = -d.x + ew.ⵠⲆⲆⲆΔ;
        var C = b;
        var G = u += -d.x + ew.ⵠⲆⲆⲆΔ + 2;
        if (o) {
            d = q.ᐃⲆⵠ(r);
        } else {
            d = r.r;
        }
        var f = h - ew.ⲆᐃᐃⲆΔ - u - d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f + 2) - 2;
        if (o) {
            d = q.ᐃⲆⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h - ew.ⵠⲆΔᐃΔ - u - d.x) < A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f + 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h - ew.ⲆⵠⵠⵠᐃⵠΔ - u;
        if (lf.transition) {
            var N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(F, c, p, C);
        if (o) {
            if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 70, 76, 42, 139, 155, N);
            } else {
                lo.fillStyle = Pr.ΔᐃᐃⲆΔⵠᐃ[lf.time];
            }
        } else if (lf.transition) {
            N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (lf.transition) {
                    N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                    lo.fillStyle = Bv(17, 94, 96, 169, 214, 211, N);
                } else {
                    lo.fillStyle = Pr.ᐃΔⲆⵠᐃⲆΔ[lf.time];
                }
            } else if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
            } else {
                lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
            }
            lo.fillRect(L, J, M, B);
        }
        if (rf.ΔⵠΔⵠΔ && o) {
            q.ᐃⲆⵠᐃⵠΔᐃⲆΔ(A, D, G, h, -Ww.ᐃⵠΔΔ.y + c, -Ww.ᐃⵠΔΔ.y + c + C);
        }
    }
    function zv(a, b, c, d) {
        if (lf.transition) {
            lo.globalAlpha = 1;
            Jc(lo, Ⲇᐃ[a][lf.time], c, d);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            Jc(lo, Ⲇᐃ[a][lf.time], c, d);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            Jc(lo, b, c, d);
        }
    }
    function Av(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⵠΔΔ.y + j - 700;
        var l = Math.max(Ww.ᐃⵠΔΔ.x + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.x + uo - i - 100, 0);
        var t = l;
        var b = uo - l - g;
        if (o) {
            var d = q.ᐃⲆⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + ew.ᐃⲆⲆᐃⲆ;
        var F = t;
        var c = u;
        var p = d.x + ew.ⵠⲆⲆⲆΔ;
        var C = b;
        var G = u += d.x + ew.ⵠⲆⲆⲆΔ - 2;
        if (o) {
            d = q.ᐃⲆⵠ(r);
        } else {
            d = r.r;
        }
        var f = h + ew.ⲆᐃᐃⲆΔ - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + ew.ⵠⲆΔᐃΔ - u + d.x) - 3 > A) {
            var k = true;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h + ew.ⲆⵠⵠⵠᐃⵠΔ - u;
        if (lf.transition) {
            var N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(F, c, C, p);
        if (o) {
            if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 70, 76, 42, 139, 155, N);
            } else {
                lo.fillStyle = Pr.ΔᐃᐃⲆΔⵠᐃ[lf.time];
            }
        } else if (lf.transition) {
            N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(y, H, K, w);
        if (k) {
            if (o) {
                if (lf.transition) {
                    N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                    lo.fillStyle = Bv(17, 94, 96, 169, 214, 211, N);
                } else {
                    lo.fillStyle = Pr.ᐃΔⲆⵠᐃⲆΔ[lf.time];
                }
            } else if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
            } else {
                lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
            }
            lo.fillRect(J, L, B, M);
        }
        if (rf.ΔⵠΔⵠΔ && o) {
            q.ᐃᐃᐃⲆᐃΔⲆⵠⵠ(A, D, G, h, -Ww.ᐃⵠΔΔ.x + F, -Ww.ᐃⵠΔΔ.x + F + C);
        }
    }
    function Bv(b, c, d, e, f, g, a) {
        var i;
        var j = "#";
        j += (i = Math.floor(e * a + b * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        j += (i = Math.floor(a * f + c * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
        return j += (i = Math.floor(a * g + d * (1 - a))) < 16 ? "0" + i.toString(16) : i.toString(16);
    }
    function Cv(a, b, c, d, e) {
        if (lf.transition && e == 1) {
            lo.globalAlpha = 1;
            Jc(lo, Ⲇᐃ[a][lf.time][b], c, d);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            Jc(lo, Ⲇᐃ[a][lf.time][b], c, d);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            lo.globalAlpha = e;
            Jc(lo, Ⲇᐃ[a][lf.time][b], c, d);
            lo.globalAlpha = 1;
        }
    }
    function Dv(a, b, c) {
        if (lf.transition) {
            lo.globalAlpha = 1;
            a.ΔΔⲆᐃ(b, c);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            a.ΔΔⲆᐃ(b, c);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            a.ΔΔⲆᐃ(b, c);
        }
    }
    function Ev(j, e, i, q, n, o) {
        var a = q.w1;
        var r = q.w2;
        var s = q.w3;
        var h = Ww.ᐃⵠΔΔ.x + j - 700;
        var l = Math.max(Ww.ᐃⵠΔΔ.y + e, 0);
        var g = Math.max(-Ww.ᐃⵠΔΔ.y + vo - i - 100, 0);
        var t = l;
        var b = vo - l - g;
        if (o) {
            var d = q.ᐃⲆⵠ(a);
        } else {
            d = a.r;
        }
        var u = h + ew.ᐃⲆⲆᐃⲆ;
        var F = u;
        var c = t;
        var p = d.x + ew.ⵠⲆⲆⲆΔ;
        var C = b;
        var G = u += d.x + ew.ⵠⲆⲆⲆΔ - 2;
        if (o) {
            d = q.ᐃⲆⵠ(r);
        } else {
            d = r.r;
        }
        var f = h + ew.ⲆᐃᐃⲆΔ - u + d.x;
        var H = u;
        var y = t;
        var w = f;
        var K = b;
        var A = (u += f - 2) - 2;
        if (o) {
            d = q.ᐃⲆⵠ(s);
        } else {
            d = s.r;
        }
        if (u + (f = h + ew.ⵠⲆΔᐃΔ - u + d.x) - 3 > A) {
            var k = kg;
            var L = u;
            var J = t;
            var M = f;
            var B = b;
            var D = u += f - 2;
        } else {
            k = false;
            u = A;
            D = -1;
        }
        f = h + ew.ⲆⵠⵠⵠᐃⵠΔ - u;
        if (lf.transition) {
            var N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(F, c, p, C);
        if (o) {
            if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(15, 70, 76, 42, 139, 155, N);
            } else {
                lo.fillStyle = Pr.ΔᐃᐃⲆΔⵠᐃ[lf.time];
            }
        } else if (lf.transition) {
            N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
        } else {
            lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
        }
        lo.fillRect(H, y, w, K);
        if (k) {
            if (o) {
                if (lf.transition) {
                    N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                    lo.fillStyle = Bv(17, 94, 96, 169, 214, 211, N);
                } else {
                    lo.fillStyle = Pr.ᐃΔⲆⵠᐃⲆΔ[lf.time];
                }
            } else if (lf.transition) {
                N = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                lo.fillStyle = Bv(9, 55, 63, 11, 106, 132, N);
            } else {
                lo.fillStyle = Pr.ΔΔⲆΔⲆ[lf.time];
            }
            lo.fillRect(L, J, M, B);
        }
        if (rf.ΔⵠΔⵠΔ && o) {
            q.ⵠᐃⵠᐃⲆⲆᐃⵠΔ(A, D, G, h, -Ww.ᐃⵠΔΔ.y + c, -Ww.ᐃⵠΔΔ.y + c + C);
        }
    }
    function Fv(b, c, d, e, f, g, a, i, j, h) {
        if (lf.transition) {
            lo.globalAlpha = 1;
            b(c, d, e, f, g, a, i, j, h);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            b(c, d, e, f, g, a, i, j, h);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            b(c, d, e, f, g, a, i, j, h);
        }
    }
    function Gv(b, c, d, e, f) {
        var g = d.width;
        var a = d.height;
        var i = Math.floor(g / 2);
        var j = Math.floor(a / 2);
        if (lf.transition) {
            lo.globalAlpha = 1;
            Jc(lo, Ⲇᐃ[b][c][lf.time], 0, 0, g, a, e, f, i, j);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ;
            Jc(lo, Ⲇᐃ[b][c][lf.time], 0, 0, g, a, e, f, i, j);
            lf.time = lf.time ? 0 : 1;
            lo.globalAlpha = 1;
        } else {
            Jc(lo, Ⲇᐃ[b][c][lf.time], 0, 0, g, a, e, f, i, j);
        }
    }
    var Hv = 0;
    var Iv = 1;
    var Jv = 2;
    var Kv = 0;
    var Lv = 1;
    var Mv = 2;
    function Nv(a, b, c, d) {
        Oj(Kr, a, b, c, d);
        return (26742 + (jg(Lr[0], Lr[1], Lr[2], Lr[3], Lr[0], Lr[1]) ^ Er(Lr[2], Lr[3]))) % 65411;
    }
    function Ov(f, j, i, k, n, p, a, q, t, w, l, g, u, b, x) {
        if (f.length === 0) {
            f = " ";
        }
        if (a === undefined) {
            a = 0;
        }
        if (q === undefined) {
            q = 0;
        }
        if (Aj === t) {
            t = 0;
        }
        if (Go === b) {
            b = 0;
        }
        var v = document.createElement("canvas");
        var m = v.getContext("2d");
        m.textBaseline = "middle";
        m.font = (Hq !== x ? x + " " : "") + k + "px " + j;
        n = wh !== n ? Math.min(m.measureText(f).width, n) : m.measureText(f).width;
        v.width = n + a;
        v.height = k + q;
        if (p !== undefined) {
            if (l !== undefined) {
                m.globalAlpha = l;
            }
            m.fillStyle = p;
            if (g !== undefined) {
                ΔᐃⲆⲆⵠΔᐃΔⵠ(m, t + 2, t, n + a - t * 2 - 4, k + q - t * 2, g);
                m.fill();
            } else {
                m.fillRect(t, t, n + a - t * 2, k + q - t * 2);
            }
            m.globalAlpha = 1;
            if (t !== 0) {
                m.lineWidth = t;
                m.strokeStyle = w;
                m.stroke();
            }
        }
        m.textBaseline = "middle";
        m.font = (Nn !== x ? x + " " : "") + k + "px " + j;
        if (u !== undefined) {
            m.strokeStyle = u;
            m.lineWidth = b;
            m.lineJoin = "miter";
            m.miterLimit = 2;
            m.strokeText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        }
        m.fillStyle = i;
        m.fillText(f, Math.floor(a / 2), Math.floor(q / 2) + Math.floor(k / 2), n);
        v.w2 = v.width / 2;
        v.ⲆⲆⲆΔᐃ = v.height / 2;
        return v;
    }
    function Pv(a, b) {
        var c = a.getBoundingClientRect();
        return {
            x: b.clientX - c.left,
            y: b.clientY - c.top
        };
    }
    function Qv(a, b, c, d) {
        fi(Kr, a, b, c, d);
        return ((182 + (Hw(Lr[0], Lr[1], Lr[2], Lr[3], Lr[0], Lr[1]) ^ Hw(Lr[2], Lr[3], Lr[0], Lr[1], Lr[2], Lr[3]))) * 8121 + 28411) % 134456;
    }
    function Rv(b, c, d, e, f) {
        var g = {
            x: d,
            y: e,
            ⵠⵠΔΔⵠ: d,
            ᐃᐃᐃΔⲆ: e
        };
        return {
            translate: g,
            ΔΔⲆᐃ: function (a) {
                Jc(a, b, g.x, g.y, b.width / 2, b.height / 2);
            },
            active: c,
            position: f
        };
    }
    function Sv(c, e, f, i, j, k, n, p, q = 0, h, r) {
        if (pl === p) {
            p = 0;
        }
        if (h === undefined) {
            h = 0;
        }
        if (Lk === r) {
            r = 1;
        }
        if (k !== 1) {
            k = 0;
        }
        if (i) {
            var t = i;
        }
        var u;
        var w = {
            width: c,
            height: e,
            ⲆⲆ: t,
            state: Kv,
            translate: {
                x: p,
                y: q,
                ⵠⵠΔΔⵠ: p,
                ᐃᐃᐃΔⲆ: q
            },
            ⲆΔⲆⵠΔⵠⲆΔᐃ: k,
            ⲆⲆⵠΔ: 0,
            callback: n,
            position: h,
            active: r
        };
        function d() {
            return w.ⲆⲆ[w.state];
        }
        function v(a) {
            var b = w.translate;
            if (w.width === 0 || w.height === 0) {
                w.width = w.ⲆⲆ[0].width;
                w.height = w.ⲆⲆ[0].height;
            }
            return a.x > b.x && a.x < b.x + w.width / j && a.y > b.y && a.y < b.y + w.height / j;
        }
        k = function () {
            var a = 0;
            if (w.ⲆΔⲆⵠΔⵠⲆΔᐃ === 1) {
                if (Lv === w.state || w.state === Mv) {
                    w.ⲆⲆⵠΔ = (w.ⲆⲆⵠΔ + cf * 1000) % 1000;
                } else if (w.ⲆⲆⵠΔ > 0) {
                    w.ⲆⲆⵠΔ = w.ⲆⲆⵠΔ > 500 ? w.ⲆⲆⵠΔ + cf * 1000 : w.ⲆⲆⵠΔ - cf * 1000;
                    if (w.ⲆⲆⵠΔ < 0 || w.ⲆⲆⵠΔ > 1000) {
                        w.ⲆⲆⵠΔ = 0;
                    }
                }
                a = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(w.ⲆⲆⵠΔ > 500 ? (1000 - w.ⲆⲆⵠΔ) / 500 : w.ⲆⲆⵠΔ / 500) * 0.2;
            }
            return a;
        };
        if ((j = j === 3 ? 3 : j === 1 ? 2 : 1) === 2) {
            u = function (a) {
                var b = 1 + k();
                var c = d();
                var e = b * w.width / 2;
                var f = w.height * b / 2;
                var g = (e - w.width / 2) / 2;
                var h = (f - w.height / 2) / 2;
                Jc(a, c, w.translate.x - g, w.translate.y - h, e, f);
            };
        } else if (j === 3) {
            u = function (b) {
                var c = d();
                var e = w.width;
                var f = w.height;
                var g = (e - w.width) / 2;
                var h = (f - w.height) / 2;
                Jc(b, c, w.translate.x - g, w.translate.y - h, e, f);
            };
            j = 1;
        } else {
            u = function (a) {
                Jc(a, d(), w.translate.x, w.translate.y);
            };
        }
        return {
            info: w,
            ⲆΔⵠΔ: function (a, b, c) {
                if (v(b)) {
                    if (Iv == c) {
                        w.state = Mv;
                    } else if (Jv == c || Hv == c && Mv != w.state) {
                        w.state = Lv;
                    }
                    return true;
                } else {
                    w.state = Kv;
                    return false;
                }
            },
            ΔΔⲆᐃ: u,
            ⲆΔⵠⵠᐃⵠⲆ: v
        };
    }
    var Tv = "send";
    var Uv = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("id") === "1" ? 1 : 0;
    var Vv = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("password");
    var Wv = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("debug") || undefined;
    if (Wv !== Oo) {
        Wv = JSON.parse(cj.decodeURIComponent(Wv));
    }
    var Xv = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("server") || es;
    var Yv = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("region") || Kq;
    var Zv = "starve.io";
    var $v = "https://" + Zv;
    var _v = {
        ΔⲆᐃⵠ: 2,
        ᐃⲆⲆⲆⲆΔⲆΔᐃ: 1,
        ᐃⲆᐃΔᐃⲆᐃ: 128,
        IDLE: 64,
        ⲆᐃᐃⲆΔⲆⵠ: 32,
        ᐃᐃΔᐃⵠᐃᐃ: 8,
        ᐃᐃΔᐃΔ: 4,
        ᐃⵠⵠᐃΔᐃⵠ: 256,
        ᐃᐃᐃᐃⵠΔⲆ: 16
    };
    var aw = [{
        ᐃⲆⲆᐃᐃ: 1000,
        items: [[2, 113], [1, 117], [8, 110], [1, 143]]
    }, {
        ᐃⲆⲆᐃᐃ: 2000,
        items: [[2, 118], [1, 8], [2, 117], [16, 110], [2, 143]]
    }, {
        ᐃⲆⲆᐃᐃ: 4000,
        items: [[3, 118], [1, 1], [4, 117], [20, 110], [4, 143], [1, 114], [80, 108], [140, 109]]
    }, {
        ᐃⲆⲆᐃᐃ: 8000,
        items: [[1, 29], [4, 118], [1, 3], [6, 117], [30, 110], [6, 143], [1, 114], [150, 108], [200, 109], [60, 111], [2, 127]]
    }, {
        ᐃⲆⲆᐃᐃ: 16000,
        items: [[1, 29], [1, 4], [1, 198], [7, 136], [2, 127], [2, 118], [1, 119], [15, 163], [2, 171], [1, 159], [1, 55], [200, 108], [300, 109]]
    }, {
        ᐃⲆⲆᐃᐃ: 16000,
        items: [[1, 29], [1, 11], [1, 50], [1, 3], [10, 136], [4, 127], [6, 118], [3, 195], [1, 28], [200, 108], [300, 109]]
    }, {
        ᐃⲆⲆᐃᐃ: 16000,
        items: [[1, 29], [1, 83], [1, 36], [3, 195], [1, 0], [1, 3], [7, 136], [2, 127], [4, 118], [150, 108], [200, 109], [1, 158]]
    }, {
        ᐃⲆⲆᐃᐃ: 16000,
        items: [[1, 29], [1, 84], [1, 3], [7, 136], [2, 127], [4, 118], [2, 135], [4, 144], [10, 141], [6, 132], [4, 115], [1, 49], [500, 109]]
    }, {
        ᐃⲆⲆᐃᐃ: 16000,
        items: [[1, 29], [1, 3], [16, 138], [1, 127], [6, 118], [3, 195], [1, 48], [1, 0], [16, 125], [150, 108], [200, 109]]
    }, {
        ᐃⲆⲆᐃᐃ: 20000,
        items: [[1, 29], [1, 3], [1, 136], [1, 127], [3, 118], [3, 195], [1, 26], [1, 5], [1, 15], [2, 169], [50, 108], [100, 109]]
    }];
    const bw = [];
    let cw = 0;
    var dw = {
        ⲆᐃⲆΔⵠⲆⲆⵠⲆ: 14,
        ᐃᐃΔⵠΔⵠΔ: 600000,
        ᐃᐃᐃᐃⵠΔⲆ: 0.2,
        ⲆΔⵠΔⵠⵠᐃⵠΔ: 14,
        ΔⵠⲆⲆⵠⲆᐃ: 4,
        ᐃⲆⵠᐃᐃⵠᐃⲆᐃ: 60000,
        ᐃⲆⲆᐃᐃⵠᐃⵠⵠ: 5,
        ᐃⵠᐃΔⲆⵠⵠⵠᐃ: 0.58,
        ⵠᐃᐃⵠᐃΔᐃ: 3,
        ⲆᐃΔΔΔᐃⲆ: 0,
        ᐃΔⲆⲆⲆⲆⲆⲆⲆ: 50,
        ΔΔⲆΔΔⲆⲆΔᐃ: 3,
        ΔΔΔⵠⲆΔᐃⲆⲆ: "[34]",
        ⲆⵠᐃΔⲆⵠⵠ: 52,
        ⲆΔᐃⲆᐃᐃⲆⲆⲆ: 125000,
        ⲆⲆⲆᐃⵠⵠᐃ: 2,
        ⲆΔᐃΔΔΔⵠᐃᐃ: 2000,
        ᐃᐃΔⲆΔΔᐃᐃⵠ: 200,
        ⵠⵠᐃᐃΔΔΔⵠΔ: 20,
        ᐃΔᐃⵠΔΔⵠ: 4,
        ⵠⵠⲆⵠⲆΔⵠⵠⲆ: 33,
        ⲆⲆⵠΔⵠⵠᐃⲆⵠ: 5,
        ᐃᐃⲆⵠⲆⲆⲆ: 0.2,
        ΔΔᐃⲆⲆⵠⵠ: 1,
        ⵠⵠⵠⲆᐃⲆⵠΔᐃ: 8000
    };
    var ew = {
        ΔᐃΔ: 480000,
        ⲆⲆⵠⵠⵠⵠΔ: 10,
        ⵠⵠⵠᐃᐃⵠⲆ: 16,
        ⵠⲆΔᐃΔⲆΔⲆⵠ: 6,
        ΔⵠⲆΔᐃΔⵠ: 60,
        ᐃᐃΔⲆᐃ: 1,
        ΔᐃⲆⵠΔ: 2,
        ⵠⲆⵠΔⲆ: 4,
        ⲆⵠⲆⵠⵠ: 8,
        ᐃᐃⲆⵠⲆⲆⲆ: 10,
        ⵠⵠⲆⵠⵠᐃⲆ: 100,
        Δᐃⵠⵠᐃᐃᐃ: 100,
        ⲆΔᐃᐃΔΔⲆ: 100,
        ΔᐃᐃⵠᐃΔⲆΔΔ: 100,
        ⵠᐃⵠⵠᐃⵠᐃ: 100,
        ⲆⵠΔⲆⵠⲆᐃ: 100,
        ⵠⵠⲆⲆⵠΔᐃᐃΔ: 100,
        ⲆⵠΔⲆⵠⲆᐃ: 100,
        ⲆᐃᐃΔⲆⵠΔ: 100,
        ⵠᐃᐃⵠⵠⵠⲆ: 100,
        ⲆⲆⲆⵠⵠ: 0,
        ᐃⲆᐃⲆᐃⵠⲆ: 1,
        ⲆⵠΔΔᐃ: 2,
        ᐃⲆⵠⲆΔ: 3,
        ⲆΔᐃⲆᐃ: 4,
        ⲆⲆⵠΔⵠⵠᐃ: 5,
        ΔⵠⵠᐃΔ: 6,
        ⲆΔⲆΔᐃ: 7,
        ⲆΔᐃᐃᐃΔⲆΔⵠ: {
            osaka: "Osaka",
            atlanta: "Atlanta",
            losangeles: "Los Angeles",
            sydney: "Sydney",
            frankfurt: "Frankfurt"
        },
        ΔΔᐃⵠᐃⲆⲆ: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            6: "community",
            7: "experimental"
        },
        ⵠⲆᐃⵠⲆⲆᐃ: 0,
        ᐃⵠⲆⵠᐃᐃΔ: 0,
        ⲆⵠⲆⲆⲆᐃᐃ: 30,
        ΔᐃᐃⲆΔⲆⵠⵠⲆ: 2,
        ΔⵠⲆΔᐃΔⵠ: 60000,
        ⵠⵠⵠᐃⲆⲆᐃΔΔ: 0,
        ᐃⵠΔⲆΔΔᐃⵠⵠ: 0,
        ⲆⲆⲆⲆⲆⲆⲆΔᐃ: 50,
        ⵠᐃⲆⵠⲆⵠⵠΔⵠ: 0,
        ΔᐃᐃΔᐃⵠᐃⲆΔ: 40,
        ΔⵠⲆᐃⲆⵠΔⲆΔ: 39,
        ⵠⲆᐃΔⵠⵠⵠᐃΔ: 830,
        ⲆᐃᐃᐃⵠΔⵠ: 25,
        ᐃⲆⲆⵠᐃΔᐃ: 8,
        ⵠⲆⲆⲆΔ: 0,
        ᐃⲆⲆᐃⲆ: 0,
        ⲆΔⵠⲆⲆⵠⵠ: 200,
        ⲆᐃᐃⲆᐃⵠᐃ: 0,
        ⲆᐃᐃⲆΔ: 250,
        ⲆΔⵠΔⵠⲆⲆ: 150,
        ΔΔᐃⲆΔᐃⲆ: 0,
        ⵠⲆΔᐃΔ: 350,
        ᐃΔⵠΔΔⵠᐃ: 100,
        ⲆⵠⵠⵠᐃⵠΔ: 700,
        ⵠᐃΔᐃⵠ: 39879
    };
    var fw = [];
    for ($s = 0; $s < 500; $s++) {
        fw[$s] = 0;
    }
    fw[47] = 1;
    fw[57] = 1;
    fw[0] = 1;
    fw[5] = 1;
    fw[6] = 1;
    fw[30] = 1;
    fw[19] = 1;
    fw[9] = 1;
    fw[62] = 1;
    fw[63] = 1;
    fw[13] = 1;
    fw[14] = 1;
    fw[15] = 1;
    fw[33] = 1;
    fw[34] = 1;
    fw[16] = 1;
    fw[17] = 1;
    fw[12] = 1;
    fw[18] = 1;
    var gw = [{
        time: 2880000
    }, {
        time: 1440000
    }, {
        time: 1920000
    }, {
        time: 1440000
    }, {
        time: 2880000
    }, {
        time: 2400000
    }, {
        time: 2400000
    }, {
        time: 4800000
    }, {
        time: 2880000
    }, {
        time: 3360000
    }, {
        time: 2880000
    }, {
        time: 3840000
    }, {
        time: 3360000
    }];
    var hw = {
        ⲆⵠΔⵠΔ: 21,
        ⲆⲆᐃⵠΔ: 71,
        ΔⲆⲆᐃⵠ: 48,
        ⵠᐃΔᐃⵠ: 3,
        ΔΔⵠᐃΔ: 50,
        ΔᐃΔΔⵠⲆᐃ: 82,
        ΔΔᐃΔⵠ: 1,
        ⵠⲆΔⵠᐃ: 38,
        ⵠⲆⵠⲆΔᐃΔ: 89,
        ⵠⵠⲆⵠᐃ: 67,
        ⲆⵠⲆⵠΔ: 81,
        ⵠᐃⲆᐃΔ: 73,
        ᐃᐃΔⵠΔ: 78,
        ΔⵠⵠⲆⵠⵠΔ: 85,
        ᐃᐃⵠⵠΔ: 41,
        ⵠΔᐃⲆⲆ: 27,
        ΔᐃΔⵠΔ: 18,
        ΔⵠᐃΔΔ: 19,
        ΔⲆᐃⲆ: 0,
        ᐃⵠⵠⵠⲆ: 30,
        ⵠᐃᐃΔⵠ: 12,
        ⲆΔⵠⲆΔ: 28,
        ΔⲆΔⲆᐃ: 37,
        ᐃⵠⲆΔⵠ: 9,
        Δᐃᐃᐃⵠ: 10,
        ᐃᐃΔΔΔⵠΔ: 83,
        ⵠⲆⲆⵠᐃ: 34,
        ΔⲆⵠΔᐃ: 22,
        ᐃΔΔⲆΔ: 75,
        ᐃⵠⵠΔᐃ: 31,
        ΔᐃⲆⲆⵠ: 42,
        ᐃΔᐃⲆⵠ: 46,
        ⵠᐃⲆᐃᐃ: 53,
        ⲆⵠᐃⲆⲆ: 25,
        ⲆΔΔᐃΔ: 14,
        ⲆᐃⲆⵠᐃ: 80,
        ⵠΔⲆⵠΔ: 72,
        ⵠΔⲆⲆⵠ: 69,
        ᐃΔΔΔⲆ: 43,
        ᐃΔΔᐃⵠ: 60,
        ⲆΔᐃΔᐃ: 13,
        ⲆⵠΔᐃᐃ: 61,
        ⵠⲆᐃΔⵠ: 56,
        ΔΔΔⲆᐃ: 16,
        ᐃⵠᐃⵠⵠ: 79,
        ⵠⵠᐃⲆΔ: 8,
        ⲆⲆᐃΔᐃ: 36,
        ⵠⵠᐃⲆⵠ: 45,
        ΔⲆⵠⲆⲆ: 88,
        ᐃⵠᐃⵠᐃ: 87,
        ⲆⵠⲆᐃⵠ: 66,
        ⵠⵠΔΔᐃ: 77,
        ᐃⲆᐃΔⲆᐃΔ: 84,
        ⵠᐃᐃΔᐃ: 51,
        ᐃⲆΔΔᐃ: 20,
        ᐃⲆⵠΔΔ: 49,
        ΔᐃⵠᐃΔ: 4,
        ⵠᐃᐃⲆΔ: 47,
        ⲆΔΔΔΔ: 70,
        ᐃⵠⲆⲆᐃ: 23,
        ΔⲆⵠⲆΔ: 74,
        ΔⵠΔⵠⲆ: 24,
        ΔⵠⲆᐃⲆ: 65,
        ⵠΔⲆΔᐃ: 100,
        ⲆⵠᐃⵠΔ: 5,
        ΔⲆⲆᐃⲆ: 29,
        ΔΔΔⵠΔ: 33,
        ᐃⲆⵠⵠⵠ: 86,
        ΔΔⲆⲆⵠ: 54,
        ΔⵠᐃᐃΔ: 26,
        ΔᐃᐃⵠⲆ: 7,
        ⲆⲆᐃΔΔ: 68,
        ΔᐃⲆΔⲆ: 6,
        ᐃⲆⲆⲆᐃ: 11,
        ⵠⵠⵠΔΔ: 55,
        ⲆᐃⵠⲆΔ: 44,
        ᐃⲆΔᐃⲆ: 63,
        ⲆⲆⵠⵠⲆ: 62,
        ⵠⲆⲆΔᐃ: 15,
        ⵠΔΔΔⲆ: 64,
        ⵠⵠⵠⲆⵠ: 40,
        ⵠⲆⵠⵠΔ: 39,
        ᐃΔⵠΔᐃⵠᐃ: 76,
        ⵠΔⵠⲆΔ: 52,
        ⲆᐃⵠⵠⲆ: 32,
        ᐃⲆⵠΔⲆ: 90,
        ⵠⵠⲆΔᐃ: 2,
        ᐃⵠⲆᐃΔ: 91,
        ᐃᐃⵠᐃⲆ: 17,
        ⲆΔΔΔⵠ: 35
    };
    var iw = [[hw.ΔⵠΔⵠⲆ, 108], [hw.ⲆⵠᐃⲆⲆ, 111], [hw.ΔⵠᐃᐃΔ, 112], [hw.ⵠΔᐃⲆⲆ, 121], [hw.ⲆΔⵠⲆΔ, 202]];
    function jw(c) {
        function e(b, c, d) {
            var e = c;
            for (var f = d; lf.ΔⲆΔΔⵠ > f; f++) {
                for (var g = c; lf.ⵠᐃⵠⲆᐃ > g && (d === f && (e = Math.max(g, e)), g <= e) && b[f][g] !== 1; g++) {
                    b[f][g] = 1;
                }
                if (e > g) {
                    break;
                }
            }
            lf.ⵠⵠⲆᐃ.push(new lf.ΔⲆᐃⵠᐃⵠΔ(lf.ΔⵠⵠΔⲆ, c, d, e - c + 1, f - d, 15));
        }
        function j(c, d, e, f, i) {
            var j = d + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * f);
            var a = e + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * f);
            var k = 10 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * (lf.ⵠᐃⵠⲆᐃ - j - 20));
            var m = 10 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * (lf.ΔⲆΔΔⵠ - a - 20));
            var h = k + j;
            var l = m + a;
            for (var g = 0; g < lf.ⵠⵠⲆᐃ.length; g++) {
                var n = lf.ⵠⵠⲆᐃ[g];
                if (ΔᐃⲆᐃ.ᐃᐃΔᐃⵠᐃⲆ(k, h, m, l, n.x1 / 100 - i, n.x2 / 100 + i, n.y1 / 100 - i, n.y2 / 100 + i) === 1) {
                    return 0;
                }
            }
            lf.ⵠⵠⲆᐃ.push(new lf.ΔⲆᐃⵠᐃⵠΔ(c, k, m, j, a, 15));
            return 1;
        }
        function i(b, c, d, e, f) {
            for (var a = 0; f > a && j(b, c, d, e, 8) !== 1; a++);
            if (a === f) {
                return 0;
            } else {
                return 1;
            }
        }
        function k(f, e) {
            var g = lf.ⵠⵠⲆᐃ[f];
            var i = Math.floor(g.y1 / 100);
            var j = Math.floor(g.x1 / 100);
            var k = Math.floor(g.ΔᐃⲆ / 100);
            var n = j + (z = Math.floor(g.w / 100));
            var o = 2;
            var q = k;
            var r = i;
            for (var s = j + 10 + Math.floor((z - 20) * lf.ⵠᐃⵠⵠⲆ.get()), t = s - 4; t < s + 4; t++) {
                x(i - 1, t, "wtb", 0, 1);
            }
            while (q > 0) {
                if (o !== 2) {
                    if (q < 10) {
                        for (A = 1; q > 0; A++) {
                            a(r, s, 1, 1, 0, e, A, 1);
                            q -= 1;
                            r += 1;
                        }
                    } else if (o !== 1) {
                        o = 1;
                        var u = Math.floor(1 + lf.ⵠᐃⵠⵠⲆ.get() * 2);
                        var w = 1 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 4);
                        if (j + 16 > s) {
                            a(r, s, u, 0, 1, e, w, w);
                            s += u;
                        } else if (s > n - 16) {
                            a(r, s, u, 0, -1, e, w, w);
                            s -= u;
                        } else if (lf.ⵠᐃⵠⵠⲆ.get() > 0.5) {
                            a(r, s, u, 0, 1, e, w, w);
                            s += u;
                        } else {
                            a(r, s, u, 0, -1, e, w, w);
                            s -= u;
                        }
                    } else {
                        var y = Math.min(q, Math.floor(1 + lf.ⵠᐃⵠⵠⲆ.get() * 4));
                        var z = 1 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 4);
                        a(r, s, y, 1, 0, e, z, z);
                        o = 0;
                        q -= y;
                        r += y;
                    }
                } else {
                    for (var A = 10; A > 1; A--) {
                        a(r, s, 1, 1, 0, e, A, 1);
                        q -= 1;
                        r += 1;
                    }
                    o = 0;
                }
            }
            for (t = s - 1; t < s + 2; t++) {
                x(r, t, "wtb", 0, 1);
            }
        }
        function q(a, b) {
            for (var c = 0; b.length > c; c++) {
                p(b[c][0], b[c][1], a, b[c][2]);
            }
        }
        function a(c, f, g, j, k, n, a, o) {
            var p = Math.floor(a / 2);
            var h = Math.max(1, Math.floor(a / 2));
            var l = Math.floor(o / 2);
            var q = Math.max(1, Math.floor(o / 2));
            for (var b = 0; b < g; b++) {
                for (var r = c - l; c + q > r; r++) {
                    for (var s = f - p; s < f + h; s++) {
                        if (x(r, s, "wtb", 0, 1) === 1) {
                            n.push([r, s, 1]);
                        }
                    }
                }
                c += j;
                f += k;
            }
        }
        function n(a, b) {
            (function (c, d) {
                var e = lf.ⵠⵠⲆᐃ[d];
                for (var f = 0, g = 0; c > g && f < 10000; f++) {
                    var i = e.y1 + e.ΔᐃⲆ * lf.ⵠᐃⵠⵠⲆ.get();
                    var j = e.x1 + e.w * lf.ⵠᐃⵠⵠⲆ.get();
                    var k = Math.floor(i / 100);
                    var m = Math.floor(j / 100);
                    if (lf.ᐃⲆᐃⵠⲆ(d, m * 100 + 50, k * 100 + 50) >= 600) {
                        for (var p = 1, q = k - 4; p === 1 && k + 4 >= q; q++) {
                            for (var t = m - 4; p === 1 && m + 4 >= t; t++) {
                                if ($l !== Uw.ΔⵠⵠⲆ[q][t]) {
                                    p = 0;
                                }
                            }
                        }
                        if (p !== 0) {
                            x(k, m, "la", g % 6, 0);
                            g++;
                        }
                    }
                }
            })(b * 80, a);
            for (var c = 0; c < 3; c++) {
                m(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                m(a, "g", c, Math.floor(b * 6));
            }
            for (c = 0; c < 3; c++) {
                m(a, "re", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            for (c = 0; c < 3; c++) {
                m(a, "a", c, Math.max(1, Math.floor(b * 2)));
            }
            d(a);
        }
        function o(a, b) {
            for (var c = 0; c < 6; c++) {
                m(a, "t", c, Math.floor(b * 20));
            }
            for (c = 0; c < 4; c++) {
                m(a, "b", c, Math.floor(b * 20));
            }
            for (c = 0; c < 3; c++) {
                m(a, "s", c, Math.floor(b * 20));
            }
            var e = [];
            k(a, e);
            q(a, e);
            e = [];
            m(a, "p", 0, Math.floor(b * 24));
            for (c = 0; c < 3; c++) {
                m(a, "g", c, Math.floor(b * 5));
            }
            if (lf.mode === ew.ⲆⵠΔΔᐃ) {
                for (c = 0; c < 3; c++) {
                    m(a, "d", c, Math.floor(b * 3));
                }
                for (c = 0; c < 3; c++) {
                    m(a, "a", c, Math.floor(b * 2));
                }
            }
            d(a);
        }
        function h(a, b) {
            for (var c = 0; c < 6; c++) {
                m(a, "t", c, Math.floor(b * 80));
            }
            for (c = 0; c < 4; c++) {
                m(a, "b", c, Math.floor(b * 80));
            }
            for (c = 0; c < 3; c++) {
                m(a, "s", c, Math.floor(b * 50));
            }
            var e = [];
            for (c = 0; c < 6; c++) {
                k(a, e);
            }
            q(a, e);
            e = [];
            m(a, "p", 0, Math.floor(b * 28));
            for (c = 0; c < 3; c++) {
                m(a, "g", c, Math.floor(b * 7));
            }
            for (c = 0; c < 3; c++) {
                m(a, "d", c, Math.floor(b * 2));
            }
            for (c = 0; c < 3; c++) {
                m(a, "a", c, Math.floor(b * 1));
            }
            for (c = 0; c < 3; c++) {
                m(a, "m", c, Math.floor(b * 1));
            }
            m(a, "a", 0, Math.floor(b * 1));
            d(a);
        }
        function x(a, b, c, d, e) {
            if (a >= 0 && b >= 0 && lf.ΔⲆΔΔⵠ > a && lf.ⵠᐃⵠⲆᐃ > b) {
                ΔⵠⵠⲆ = Uw.ΔⵠⵠⲆ;
                if (ΔⵠⵠⲆ[a][b] === ll) {
                    ΔⵠⵠⲆ[a][b] = {};
                }
                if (ΔⵠⵠⲆ[a][b][c] !== undefined) {
                    return 0;
                } else {
                    ΔⵠⵠⲆ[a][b][c] = [];
                    ΔⵠⵠⲆ[a][b][c][d] = [{
                        x: b * 100 + 50,
                        y: a * 100 + 50
                    }];
                    if (e === 1) {
                        (function (a, b, c, d) {
                            rt.push([a, b, c, d]);
                        })(c, d, a, b);
                    }
                    return 1;
                }
            }
        }
        function g(a, b) {
            for (var c = 0; c < 3; c++) {
                m(a, "s", c, Math.floor(b * 12));
            }
            for (c = 0; c < 3; c++) {
                m(a, "m", c, Math.max(1, Math.floor(b * 1)), 0.2);
            }
            m(a, "c", 0, Math.floor(b * 36));
            var d = [];
            (function (c, d) {
                var e = lf.ⵠⵠⲆᐃ[c];
                var f = Math.floor(e.y1 / 100);
                var g = Math.floor(e.x1 / 100);
                var i = Math.floor(e.ΔᐃⲆ / 100);
                var a = Math.floor(e.w / 100);
                var j = f + Math.floor(i / 2);
                var k = g + Math.floor(a / 2);
                for (var h = 0; h < 3; h++) {
                    x(m = Math.floor(j - 3 + lf.ⵠᐃⵠⵠⲆ.get() * 6), n = Math.floor(k - 3 + lf.ⵠᐃⵠⵠⲆ.get() * 6), "plm", h, 1);
                }
                for (h = 0; h < 80; h++) {
                    var m;
                    var n;
                    if (x(m = Math.floor(j - 3 + lf.ⵠᐃⵠⵠⲆ.get() * 6), n = Math.floor(k - 3 + lf.ⵠᐃⵠⵠⲆ.get() * 6), "wtb", 0, 1) === 1) {
                        d.push([m, n, 0]);
                    }
                }
            })(a, d);
            q(a, d);
            d = [];
        }
        function b(a) {
            for (var b = 0; b < 3; b++) {
                m(a, "s", b, 15);
            }
            for (b = 0; b < 3; b++) {
                m(a, "a", b, 1);
            }
            for (b = 0; b < 3; b++) {
                m(a, "d", b, 1);
            }
            d(a);
        }
        function d(a) {
            var b = lf.ⵠⵠⲆᐃ[a];
            x(-3 + Math.floor(b.y2 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), -1 + Math.floor(b.x2 / 100), "s", 0, 0);
            x(-3 + Math.floor(b.y2 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
            x(3 + Math.floor(b.y1 / 100), 1 + Math.floor(b.x1 / 100), "s", 0, 0);
        }
        function l(a, b) {
            return a >= 0 && b >= 0 && a < lf.ΔⲆΔΔⵠ && b < lf.ⵠᐃⵠⲆᐃ;
        }
        function m(c, e, f, g, i) {
            var j = lf.ⵠⵠⲆᐃ[c];
            var a = Math.floor(j.x1 / 100);
            var k = Math.floor(j.y1 / 100);
            var n = Math.floor(j.w / 100);
            var q = Math.floor(j.ΔᐃⲆ / 100);
            if (i !== undefined) {
                i = 1 - i;
                a += Math.floor(i * n / 2);
                k += Math.floor(q * i / 2);
                n -= Math.floor(n * i);
                q -= Math.floor(q * i);
            }
            var t = Uw.ΔⵠⵠⲆ;
            for (var b = 0, u = 0; g > u && b <= 50000; b++) {
                var w = k + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * q);
                var y = a + Math.floor(n * lf.ⵠᐃⵠⵠⲆ.get());
                if (lf.ᐃⲆᐃⵠⲆ(c, y * 100 + 50, w * 100 + 50) >= 400) {
                    var z = t[w][y + 1];
                    if (ll === z || z[e] === undefined || z[e][f] === undefined) {
                        if ((z = t[w][y - 1]) === Fh || z[e] === undefined || z[e][f] === undefined) {
                            z = t[w + 1][y];
                            if (Fh === z || z[e] === undefined || Aj === z[e][f]) {
                                if ((z = t[w - 1][y]) === undefined || z[e] === sr || Kq === z[e][f]) {
                                    if ((z = t[w + 1][y - 1]) === undefined || z[e] === undefined || z[e][f] === undefined) {
                                        if ((z = t[w - 1][y + 1]) === undefined || z[e] === undefined || Cq === z[e][f]) {
                                            if ((z = t[w + 1][y + 1]) === undefined || Aj === z[e] || z[e][f] === Fh) {
                                                z = t[w - 1][y - 1];
                                                if (Nn === z || z[e] === undefined || xh === z[e][f]) {
                                                    if (t[w][y] === ij) {
                                                        x(w, y, e, f, 1);
                                                        u++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        function p(a, b, c, d) {
            if (l(a, b) && (ΔⵠⵠⲆ = Uw.ΔⵠⵠⲆ, ΔⵠⵠⲆ[a][b] === es && (ΔⵠⵠⲆ[a][b] = {}), ΔⵠⵠⲆ[a][b].r === undefined)) {
                var e = 0;
                if (l(a - 1, b) && ΔⵠⵠⲆ[a - 1][b] !== undefined && ΔⵠⵠⲆ[a - 1][b].wtb !== undefined) {
                    e += 2;
                }
                if (l(a, b - 1) && wh !== ΔⵠⵠⲆ[a][b - 1] && ΔⵠⵠⲆ[a][b - 1].wtb !== undefined) {
                    e += 8;
                }
                if (l(a, b + 1) && Hq !== ΔⵠⵠⲆ[a][b + 1] && ΔⵠⵠⲆ[a][b + 1].wtb !== undefined) {
                    e += 16;
                }
                if (l(a + 1, b) && ΔⵠⵠⲆ[a + 1][b] !== undefined && ΔⵠⵠⲆ[a + 1][b].wtb !== undefined) {
                    e += 64;
                }
                if (l(a - 1, b - 1) && (e & 10) === 10 && ΔⵠⵠⲆ[a - 1][b - 1] !== undefined && ΔⵠⵠⲆ[a - 1][b - 1].wtb !== undefined) {
                    e += 1;
                }
                if (l(a - 1, b + 1) && (e & 18) == 18 && es !== ΔⵠⵠⲆ[a - 1][b + 1] && Hq !== ΔⵠⵠⲆ[a - 1][b + 1].wtb) {
                    e += 4;
                }
                if (l(a + 1, b - 1) && (e & 72) == 72 && vk !== ΔⵠⵠⲆ[a + 1][b - 1] && wh !== ΔⵠⵠⲆ[a + 1][b - 1].wtb) {
                    e += 32;
                }
                if (l(a + 1, b + 1) && !(~e & 80) && ΔⵠⵠⲆ[a + 1][b + 1] !== ts && ij !== ΔⵠⵠⲆ[a + 1][b + 1].wtb) {
                    e += 128;
                }
                ΔⵠⵠⲆ[a][b].r = {};
                ΔⵠⵠⲆ[a][b].r.ⵠⲆⵠᐃⲆᐃⲆ = e;
                ΔⵠⵠⲆ[a][b].r.ΔⲆⲆᐃΔΔᐃ = d;
                ΔⵠⵠⲆ[a][b].r.ΔΔⵠᐃ = lf.ᐃⲆᐃⵠⲆ(c, b * 100 + 50, a * 100 + 50) - 400;
                ΔⵠⵠⲆ[a][b].r.x = b * 100 + 50;
                ΔⵠⵠⲆ[a][b].r.y = a * 100 + 50;
            }
        }
        function r(a, b) {
            for (var c = 0; c < 3; c++) {
                m(a, "s", c, Math.floor(b * 18));
            }
            for (c = 0; c < 3; c++) {
                m(a, "f", c, Math.floor(b * 24));
            }
            for (c = 0; c < 3; c++) {
                m(a, "d", c, Math.max(1, Math.floor(b * 2)), 0.3);
            }
            for (c = 0; c < 3; c++) {
                m(a, "g", c, Math.floor(b * 6));
            }
            d(a);
        }
        function s(a, b, c) {
            if (a[b]) {
                for (Nk = 0; Nk < a[b].length; Nk++) {
                    if (a[b][Nk]) {
                        for (ᐃΔⵠⵠ = 0; ᐃΔⵠⵠ < a[b][Nk].length; ᐃΔⵠⵠ++) {
                            a[b][Nk][ᐃΔⵠⵠ].ⲆΔᐃΔ = c;
                            a[b][Nk][ᐃΔⵠⵠ].ⲆΔᐃⲆ = ug;
                            a[b][Nk][ᐃΔⵠⵠ].time = 0;
                            a[b][Nk][ᐃΔⵠⵠ].angle = 0;
                        }
                    }
                }
            }
        }
        this.mode = ew.ⲆⲆⲆⵠⵠ;
        this.ᐃⲆⵠⲆΔⲆⵠ = c;
        this.ᐃⲆⲆⵠⵠ = 0;
        this.ᐃⵠⲆΔⲆΔⵠ = 6;
        this.ᐃⲆⲆΔ = [];
        this.ᐃΔᐃ = [];
        this.ᐃΔᐃ[hw.ΔⲆᐃⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠΔⲆΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆᐃⲆⵠᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃΔΔᐃⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠⲆⵠᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆΔΔΔΔ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠΔΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆⲆᐃⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠΔⲆⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃⲆᐃΔ] = [];
        this.ᐃΔᐃ[hw.ΔⲆⵠⲆΔ] = [];
        this.ᐃΔᐃ[hw.ΔⵠⲆᐃⲆ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠⲆᐃⵠ] = [];
        this.ᐃΔᐃ[hw.ⲆⲆⵠⵠⲆ] = [];
        this.ᐃΔᐃ[hw.ΔⲆⵠⲆⲆ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆⵠΔⲆ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆΔᐃⲆ] = [];
        this.ᐃΔᐃ[hw.ᐃᐃΔⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠΔΔΔⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ] = [];
        this.ᐃΔᐃ[hw.ⲆⲆᐃΔΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠᐃⵠⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆⵠⲆΔᐃΔ] = [];
        this.ᐃΔᐃ[hw.ᐃᐃΔΔΔⵠΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆᐃΔⲆᐃΔ] = [];
        this.ᐃΔᐃ[hw.ΔⵠⵠⲆⵠⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠⲆⵠΔ] = [];
        this.ᐃΔᐃ[hw.ΔᐃΔΔⵠⲆᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆⵠⵠⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠΔᐃᐃ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠⲆΔᐃ] = [];
        this.ᐃΔᐃ[hw.ΔΔᐃΔⵠ] = [];
        this.ᐃΔᐃ[hw.ΔᐃⲆΔⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃΔᐃⵠ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠᐃⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃᐃΔⵠ] = [];
        this.ᐃΔᐃ[hw.ⲆΔᐃΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⲆΔΔᐃΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆΔΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⵠΔⵠⲆΔ] = [];
        this.ᐃΔᐃ[hw.ΔᐃⵠᐃΔ] = [];
        this.ᐃΔᐃ[hw.ΔᐃᐃⵠⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠᐃⲆΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠⲆΔⵠ] = [];
        this.ᐃΔᐃ[hw.ΔⵠᐃΔΔ] = [];
        this.ᐃΔᐃ[hw.ΔΔⵠᐃΔ] = [];
        this.ᐃΔᐃ[hw.ᐃᐃⵠⵠΔ] = [];
        this.ᐃΔᐃ[hw.Δᐃᐃᐃⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆⲆΔᐃ] = [];
        this.ᐃΔᐃ[hw.ΔΔΔⲆᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃᐃⵠᐃⲆ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠΔⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃᐃΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠᐃⲆⵠ] = [];
        this.ᐃΔᐃ[hw.ᐃΔᐃⲆⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃᐃⲆΔ] = [];
        this.ᐃΔᐃ[hw.ΔⲆⲆᐃⵠ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆⵠΔΔ] = [];
        this.ᐃΔᐃ[hw.ⵠᐃⲆᐃᐃ] = [];
        this.ᐃΔᐃ[hw.ΔᐃΔⵠΔ] = [];
        this.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ] = [];
        this.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ] = [];
        this.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠⲆⲆᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆΔⵠᐃ] = [];
        this.ᐃΔᐃ[hw.ΔΔΔⵠΔ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠⵠΔᐃ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠⵠΔΔ] = [];
        this.ᐃΔᐃ[hw.ΔⲆΔⲆᐃ] = [];
        this.ᐃΔᐃ[hw.ᐃΔΔΔⲆ] = [];
        this.ᐃΔᐃ[hw.ⲆᐃⵠⲆΔ] = [];
        this.ᐃΔᐃ[hw.ΔΔⲆⲆⵠ] = [];
        this.ᐃΔᐃ[hw.ⵠⲆⵠⵠΔ] = [];
        this.ᐃΔᐃ[hw.ⵠⵠⵠⲆⵠ] = [];
        this.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ] = [];
        this.ᐃΔᐃ[hw.ΔⵠΔⵠⲆ] = [];
        this.ᐃΔᐃ[hw.ⲆⵠᐃⲆⲆ] = [];
        this.ᐃΔᐃ[hw.ΔⵠᐃᐃΔ] = [];
        this.ᐃΔᐃ[hw.ⵠΔᐃⲆⲆ] = [];
        this.ᐃΔᐃ[hw.ⲆΔⵠⲆΔ] = [];
        this.ᐃΔᐃ[hw.ⲆΔΔΔⵠ] = [];
        this.ᐃΔᐃ[hw.ᐃⵠᐃⵠᐃ] = [];
        this.ᐃΔᐃ[hw.ΔᐃⲆⲆⵠ] = [];
        this.ⵠᐃⵠⵠ = [];
        this.ⵠᐃⵠⲆᐃ = 260;
        this.ΔⲆΔΔⵠ = 260;
        this.ⵠⵠⵠⵠΔⲆᐃ = 100;
        this.ⲆᐃᐃⵠⵠⵠⲆ = 100;
        this.w = this.ⵠᐃⵠⲆᐃ * this.ⵠⵠⵠⵠΔⲆᐃ;
        this.ΔᐃⲆ = this.ΔⲆΔΔⵠ * this.ⲆᐃᐃⵠⵠⵠⲆ;
        this.ⵠᐃⵠⵠⲆ = new Hk.ΔᐃⲆⲆⲆᐃᐃ();
        this.ⵠⵠⲆᐃ = [];
        this.ⲆⲆΔᐃ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1, 1);
        this.transition = il;
        this.ⲆᐃΔΔΔ = [];
        this.ᐃⵠᐃⲆⲆ = 0;
        this.Δᐃᐃⵠᐃⵠⵠ = 1;
        this.ⲆⲆΔΔⲆΔⵠ = 2;
        this.ᐃⵠΔΔⵠⲆⲆ = 3;
        this.ΔⵠⵠΔⲆ = 4;
        this.ⵠᐃΔΔⵠⵠΔ = 10;
        this.ⲆᐃΔΔΔ[this.ᐃⵠᐃⲆⲆ] = {
            ⵠᐃⲆΔΔΔⲆ: 1,
            ⵠΔⲆ: [19, 58, 43],
            ᐃᐃⵠ: [4, 43, 48],
            ⵠΔΔⲆⵠ: ["#133a2b", "#042b30"]
        };
        this.ⲆᐃΔΔΔ[this.ΔⵠⵠΔⲆ] = {
            ⵠᐃⲆΔΔΔⲆ: 0,
            ⵠΔⲆ: [11, 106, 132],
            ᐃᐃⵠ: [9, 55, 63],
            ⵠΔΔⲆⵠ: ["#0B6A84", "#09373F"]
        };
        this.ⲆᐃΔΔΔ[this.Δᐃᐃⵠᐃⵠⵠ] = {
            ⵠᐃⲆΔΔΔⲆ: 0,
            ⵠΔⲆ: [235, 242, 240],
            ᐃᐃⵠ: [19, 97, 103],
            ⵠΔΔⲆⵠ: ["#EBF2F0", "#136167"]
        };
        this.ⲆᐃΔΔΔ[this.ⲆⲆΔΔⲆΔⵠ] = {
            ᐃᐃⵠ: [3, 28, 30],
            ⵠᐃⲆΔΔΔⲆ: 0,
            ⵠΔⲆ: [45, 32, 23],
            ⵠΔΔⲆⵠ: ["#2D2017", "#031C1E"]
        };
        this.ⲆᐃΔΔΔ[this.ᐃⵠΔΔⵠⲆⲆ] = {
            ⵠΔⲆ: [74, 74, 74],
            ⵠΔΔⲆⵠ: ["#4A4A4A", "#183D3C"],
            ᐃᐃⵠ: [24, 61, 60],
            ⵠᐃⲆΔΔΔⲆ: 0
        };
        this.ⲆᐃΔΔΔ[this.ⵠᐃΔΔⵠⵠΔ] = {
            ᐃᐃⵠ: [9, 61, 56],
            ⵠᐃⲆΔΔΔⲆ: 0,
            ⵠΔⲆ: [235, 216, 166],
            ⵠΔΔⲆⵠ: ["#EBD8A6", "#093D38"]
        };
        this.ΔⲆᐃⵠᐃⵠΔ = function (b, c, d, e, f, g) {
            this.x1 = c * 100;
            this.y1 = d * 100;
            this.w = e * 100;
            this.ΔᐃⲆ = f * 100;
            this.x2 = (c + e) * 100;
            this.y2 = (d + f) * 100;
            this.ᐃⲆⵠ = b;
            this.ᐃⵠΔ = g === undefined ? 15 : g;
        };
        this.ᐃⵠΔⵠΔ = -1000000;
        this.ⲆⲆΔⵠⵠ = this.ᐃⵠΔⵠΔ;
        this.ⲆⲆⵠⲆᐃ = this.ᐃⵠΔⵠΔ;
        this.ᐃΔΔⵠⲆ = this.ᐃⵠΔⵠΔ;
        this.ⵠᐃΔᐃΔⲆⵠ = this.ᐃⵠΔⵠΔ;
        this.ΔΔⵠᐃⲆⵠⵠ = this.ᐃⵠΔⵠΔ;
        this.ⲆΔΔⲆΔ = this.ᐃⵠΔⵠΔ;
        this.ⲆⲆΔᐃΔⲆⵠⲆⵠ = function (b) {
            var c = b.r.x;
            var d = b.r.y;
            var e = Math.floor(d / 100);
            var f = Math.floor(c / 100);
            b.ⲆⲆΔⵠⵠ = lf.ᐃⵠΔⵠΔ;
            b.ⲆⲆⵠⲆᐃ = lf.ᐃⵠΔⵠΔ;
            b.ᐃΔΔⵠⲆ = lf.ᐃⵠΔⵠΔ;
            b.ⵠᐃΔᐃΔⲆⵠ = lf.ᐃⵠΔⵠΔ;
            b.ⲆΔΔⲆΔ = lf.ᐃⵠΔⵠΔ;
            b.ᐃⵠⲆᐃᐃⵠᐃ = lf.ᐃⵠΔⵠΔ;
            for (var g = 0; lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ; g++) {
                if (lf.ᐃⵠᐃⲆⲆ === lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ) {
                    var h = lf.ᐃⲆᐃⵠⲆ(g, c, d);
                    b.ⵠᐃΔᐃΔⲆⵠ = Math.max(b.ⵠᐃΔᐃΔⲆⵠ, h);
                    if (h > 0 && lf.ⲆⲆΔⵠⲆΔΔⲆᐃ(g, c, d) === 1) {
                        b.ᐃⵠⲆᐃᐃⵠᐃ = 1;
                    }
                } else if (lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ === lf.Δᐃᐃⵠᐃⵠⵠ) {
                    b.ⲆⲆΔⵠⵠ = Math.max(b.ⲆⲆΔⵠⵠ, lf.ᐃⲆᐃⵠⲆ(g, c, d));
                } else if (lf.ⵠᐃΔΔⵠⵠΔ === lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ) {
                    b.ⲆⲆⵠⲆᐃ = Math.max(b.ⲆⲆⵠⲆᐃ, lf.ᐃⲆᐃⵠⲆ(g, c, d));
                } else if (lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ === lf.ⲆⲆΔΔⲆΔⵠ) {
                    b.ᐃΔΔⵠⲆ = Math.max(b.ᐃΔΔⵠⲆ, lf.ᐃⲆᐃⵠⲆ(g, c, d));
                } else if (lf.ⵠⵠⲆᐃ[g].ᐃⲆⵠ === lf.ᐃⵠΔΔⵠⲆⲆ) {
                    b.ⲆΔΔⲆΔ = Math.max(b.ⲆΔΔⲆΔ, lf.ᐃⲆᐃⵠⲆ(g, c, d));
                }
            }
            if (Uw.ΔⵠⵠⲆ[e][f].iblk) {
                b.ᐃⵠⲆᐃᐃⵠᐃ = 1;
            }
            if (lf.ΔⲆⵠⲆᐃⲆⲆΔⲆ(f, e)) {
                b.ΔΔⵠᐃⲆⵠⵠ = b.ᐃⵠΔⵠΔ;
            } else if (Uw.ΔⵠⵠⲆ[e][f].wtb || b.ⲆⲆΔⵠⵠ < 0 && b.ᐃΔΔⵠⲆ < 0 && b.ⵠᐃΔᐃΔⲆⵠ < 0 && b.ᐃⵠⲆᐃᐃⵠᐃ < 0 && b.ⲆΔΔⲆΔ < 0 && b.ⲆⲆⵠⲆᐃ < 0) {
                b.ΔΔⵠᐃⲆⵠⵠ = 1;
            } else {
                b.ΔΔⵠᐃⲆⵠⵠ = b.ᐃⵠΔⵠΔ;
            }
        };
        this.ⵠᐃⵠΔⲆᐃᐃᐃⲆ = function (a, b) {
            lf.ⲆⲆΔⵠⵠ = lf.ᐃⵠΔⵠΔ;
            lf.ⲆⲆⵠⲆᐃ = lf.ᐃⵠΔⵠΔ;
            lf.ᐃΔΔⵠⲆ = lf.ᐃⵠΔⵠΔ;
            lf.ⲆΔΔⲆΔ = lf.ᐃⵠΔⵠΔ;
            lf.ⵠᐃΔᐃΔⲆⵠ = lf.ᐃⵠΔⵠΔ;
            for (var c = 0; lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ !== lf.ΔⵠⵠΔⲆ; c++) {
                if (lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ === lf.ᐃⵠᐃⲆⲆ) {
                    lf.ⵠᐃΔᐃΔⲆⵠ = Math.max(lf.ⵠᐃΔᐃΔⲆⵠ, lf.ᐃⲆᐃⵠⲆ(c, a, b));
                } else if (lf.Δᐃᐃⵠᐃⵠⵠ === lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ) {
                    lf.ⲆⲆΔⵠⵠ = Math.max(lf.ⲆⲆΔⵠⵠ, lf.ᐃⲆᐃⵠⲆ(c, a, b));
                } else if (lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ === lf.ⵠᐃΔΔⵠⵠΔ) {
                    lf.ⲆⲆⵠⲆᐃ = Math.max(lf.ⲆⲆⵠⲆᐃ, lf.ᐃⲆᐃⵠⲆ(c, a, b));
                } else if (lf.ⲆⲆΔΔⲆΔⵠ === lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ) {
                    lf.ᐃΔΔⵠⲆ = Math.max(lf.ᐃΔΔⵠⲆ, lf.ᐃⲆᐃⵠⲆ(c, a, b));
                } else if (lf.ⵠⵠⲆᐃ[c].ᐃⲆⵠ === lf.ᐃⵠΔΔⵠⲆⲆ) {
                    lf.ⲆΔΔⲆΔ = Math.max(lf.ⲆΔΔⲆΔ, lf.ᐃⲆᐃⵠⲆ(c, a, b));
                }
            }
            if (lf.ⲆⲆΔⵠⵠ < 0 && lf.ⲆΔΔⲆΔ < 0 && lf.ⵠᐃΔᐃΔⲆⵠ < 0 && lf.ⲆΔΔⲆΔ < 0 && lf.ⲆⲆⵠⲆᐃ < 0) {
                lf.ΔΔⵠᐃⲆⵠⵠ = 1;
            } else {
                lf.ΔΔⵠᐃⲆⵠⵠ = lf.ᐃⵠΔⵠΔ;
            }
        };
        this.ⲆⲆΔⵠⲆΔΔⲆᐃ = function (b, c, d) {
            var e = lf.ⵠⵠⲆᐃ[b];
            var f = 0;
            ᐃᐃⵠᐃ = e.x1 + 30 + ((e.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) === 0 ? 150 : 0);
            var g = c - ᐃᐃⵠᐃ;
            if ((e.ᐃⵠΔ & ew.ⵠⲆⵠΔⲆ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⵠⵠᐃⲆ = e.y1 + 250 + ((e.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) === 0 ? 150 : 0);
            g = d - ⵠⵠᐃⲆ;
            if ((e.ᐃⵠΔ & ew.ᐃᐃΔⲆᐃ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ⵠⵠᐃⵠ = e.x2 + 80 + ((e.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ) === 0 ? -200 : 0);
            g = ⵠⵠᐃⵠ - c;
            if ((e.ᐃⵠΔ & ew.ⲆⵠⲆⵠⵠ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            ΔᐃΔⲆ = e.y2 - 200 + ((e.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) === 0 ? -200 : 0);
            g = ΔᐃΔⲆ - d;
            if ((e.ᐃⵠΔ & ew.ΔᐃⲆⵠΔ) > 0 && g > 0 && g < 320) {
                f = 1;
            }
            if (c >= ᐃᐃⵠᐃ && c <= ⵠⵠᐃⵠ && ⵠⵠᐃⲆ <= d && ΔᐃΔⲆ >= d) {
                return f;
            } else {
                return 0;
            }
        };
        this.ᐃⲆᐃⵠⲆ = function (a, b, c) {
            var d = lf.ⵠⵠⲆᐃ[a];
            ᐃᐃⵠᐃ = d.x1 + 30;
            ⵠⵠᐃⲆ = d.y1 + 250;
            ⵠⵠᐃⵠ = d.x2 + 80;
            ΔᐃΔⲆ = d.y2 - 200;
            if (b >= ᐃᐃⵠᐃ && ⵠⵠᐃⵠ >= b && ⵠⵠᐃⲆ <= c && c <= ΔᐃΔⲆ) {
                return Math.min(b - ᐃᐃⵠᐃ, ⵠⵠᐃⵠ - b, c - ⵠⵠᐃⲆ, ΔᐃΔⲆ - c);
            }
            var e = -1000000;
            if (b - ᐃᐃⵠᐃ < 0) {
                e = Math.max(e, b - ᐃᐃⵠᐃ);
            } else if (ⵠⵠᐃⵠ - b < 0) {
                e = Math.max(e, ⵠⵠᐃⵠ - b);
            }
            ⲆᐃⵠⵠⲆΔⲆ = -1000000;
            if (c < ⵠⵠᐃⲆ || ΔᐃΔⲆ < c) {
                if (c - ⵠⵠᐃⲆ < 0) {
                    ⲆᐃⵠⵠⲆΔⲆ = Math.max(ⲆᐃⵠⵠⲆΔⲆ, c - ⵠⵠᐃⲆ);
                } else {
                    ⲆᐃⵠⵠⲆΔⲆ = Math.max(ⲆᐃⵠⵠⲆΔⲆ, ΔᐃΔⲆ - c);
                }
                e = e !== -1000000 && ⲆᐃⵠⵠⲆΔⲆ !== -1000000 ? Math.min(e, ⲆᐃⵠⵠⲆΔⲆ) : ⲆᐃⵠⵠⲆΔⲆ;
            }
            return e;
        };
        this.ΔΔⲆΔⵠⲆΔ = function (b, c, d) {
            var e = d;
            var f = c;
            x(e, f, "isl", b, 1);
            for (var g = 0; g < 4; g++) {
                for (var h = 0; h < 3; h++) {
                    x(e - h, f - g, "iblk", 0);
                    x(e + h, f - g, "iblk", 0);
                    x(e + h, f + g, "iblk", 0);
                    x(e - h, f + g, "iblk", 0);
                }
            }
            if (b === 0) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
                x(e - 2, f - 4, "iblk", 0);
                x(e - 3, f - 3, "iblk", 0);
                x(e + 2, f + 4, "iblk", 0);
                x(e + 3, f + 3, "iblk", 0);
            } else if (b === 1) {
                for (g = 0; g < 3; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 4; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            } else if (b === 2) {
                for (g = 0; g < 2; g++) {
                    x(e - g, f - 4, "iblk", 0);
                    x(e + g, f - 4, "iblk", 0);
                    x(e - g, f + 4, "iblk", 0);
                    x(e + g, f + 4, "iblk", 0);
                }
                for (g = 0; g < 3; g++) {
                    x(e - 3, f + g, "iblk", 0);
                    x(e + 3, f + g, "iblk", 0);
                    x(e - 3, f - g, "iblk", 0);
                    x(e + 3, f - g, "iblk", 0);
                }
            }
        };
        this.ⵠᐃᐃⲆᐃΔΔᐃΔ = function (b) {
            for (var c = 0; lf.ⵠⵠⲆᐃ.length > c && b > 0; c++) {
                var d = lf.ⵠⵠⲆᐃ[c];
                if (lf.ΔⵠⵠΔⲆ === d.ᐃⲆⵠ && d.w > 1800 && d.ΔᐃⲆ > 1000) {
                    var f = Math.floor((d.x1 + d.w / 2) / 100);
                    var g = Math.floor((d.y1 + d.ΔᐃⲆ / 2) / 100);
                    lf.ΔΔⲆΔⵠⲆΔ(b % 3, f, g);
                    for (var h = 0; h < 3; h++) {
                        var j = g - 2 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 4);
                        var k = f - 3 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 6);
                        if (Uw.ΔⵠⵠⲆ[j][k].s === undefined) {
                            x(j, k, "plm", h);
                        }
                        j = g - 2 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 4);
                        k = f - 3 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 6);
                        if (Nn === Uw.ΔⵠⵠⲆ[j][k].plm) {
                            x(j, k, "s", h);
                        }
                    }
                    j = g - 2 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 4);
                    k = f - 3 + Math.floor(lf.ⵠᐃⵠⵠⲆ.get() * 6);
                    if (Uw.ΔⵠⵠⲆ[j][k].plm === undefined && Uw.ΔⵠⵠⲆ[j][k].s === undefined) {
                        x(j, k, "p", 0, 1);
                    }
                    b--;
                }
            }
        };
        this.ⵠᐃⲆᐃᐃΔⲆᐃΔ = function (a) {
            lf.ⵠᐃⵠⵠⲆ.ⲆⲆⵠⲆⲆ(a);
            var d = 0;
            while (true) {
                if (++d > 10000) {
                    return;
                }
                lf.ⵠⵠⲆᐃ = [];
                if (lf.ᐃⲆⲆⵠⵠ === 0 && (ew.ᐃⲆⵠⲆΔ === lf.mode || ew.ⲆΔⲆΔᐃ === lf.mode || ew.ⲆⲆⲆⵠⵠ === lf.mode)) {
                    lf.ᐃⲆⲆⵠⵠ = Dr;
                }
                if (ew.ⲆⵠΔΔᐃ === lf.mode) {
                    lf.ⵠⵠⲆᐃ.push(new lf.ΔⲆᐃⵠᐃⵠΔ(lf.ᐃⵠᐃⲆⲆ, 2, 2, 80, 80, 15));
                } else if (lf.mode === ew.ⲆΔᐃⲆᐃ) {
                    lf.ⵠⵠⲆᐃ.push(new lf.ΔⲆᐃⵠᐃⵠΔ(lf.ᐃⵠᐃⲆⲆ, 2, 2, 150, 150, 15));
                } else if (lf.ᐃⲆⲆⵠⵠ !== 0 && lf.ᐃⲆⲆⵠⵠ.length > 0 && lf.ᐃⲆⲆⵠⵠ[0].length > 3) {
                    for (var j = 0; j < lf.ᐃⲆⲆⵠⵠ.length; j++) {
                        if ((H = lf.ᐃⲆⲆⵠⵠ[j])[0] !== 0) {
                            break;
                        }
                        var k = ew.ᐃⵠᐃⲆⲆ;
                        switch (H[1]) {
                            case "FOREST":
                                k = lf.ᐃⵠᐃⲆⲆ;
                                break;
                            case "WINTER":
                                k = lf.Δᐃᐃⵠᐃⵠⵠ;
                                break;
                            case "DESERT":
                                k = lf.ⵠᐃΔΔⵠⵠΔ;
                                break;
                            case "LAVA":
                                k = lf.ⲆⲆΔΔⲆΔⵠ;
                                break;
                            case "DRAGON":
                                k = lf.ᐃⵠΔΔⵠⲆⲆ;
                        }
                        lf.ⵠⵠⲆᐃ.push(new lf.ΔⲆᐃⵠᐃⵠΔ(k, H[2], H[3], H[4], H[5], H[6], H[7]));
                    }
                } else if (lf.ᐃⲆⲆⵠⵠ !== 0) {
                    for (j = 0; j < lf.ᐃⲆⲆⵠⵠ.length; j++) {
                        var l = lf.ᐃⲆⲆⵠⵠ[j];
                        k = ew.ᐃⵠᐃⲆⲆ;
                        switch (l[0]) {
                            case "FOREST":
                                k = lf.ᐃⵠᐃⲆⲆ;
                                break;
                            case "WINTER":
                                k = lf.Δᐃᐃⵠᐃⵠⵠ;
                                break;
                            case "DESERT":
                                k = lf.ⵠᐃΔΔⵠⵠΔ;
                                break;
                            case "LAVA":
                                k = lf.ⲆⲆΔΔⲆΔⵠ;
                                break;
                            case "DRAGON":
                                k = lf.ᐃⵠΔΔⵠⲆⲆ;
                        }
                        if (i(k, l[1], l[2], 0, (j + 1) * 10) === 0) {
                            break;
                        }
                    }
                    if (lf.ᐃⲆⲆⵠⵠ.length !== j) {
                        continue;
                    }
                }
                break;
            }
            ⲆᐃⲆᐃⵠᐃⲆⵠΔ();
            var s = [];
            for (var v = 0; v < lf.ΔⲆΔΔⵠ; v++) {
                s[v] = new Array(lf.ⵠᐃⵠⲆᐃ);
                for (var A = 0; lf.ⵠᐃⵠⲆᐃ > A; A++) {
                    s[v][A] = 0;
                }
            }
            for (v = 0; v < lf.ⵠⵠⲆᐃ.length; v++) {
                for (var B = (l = lf.ⵠⵠⲆᐃ[v]).x2 / 100, D = l.y2 / 100, E = l.x1 / 100; E <= B; E++) {
                    for (var F = l.y1 / 100; F <= D; F++) {
                        s[F][E] = 1;
                    }
                }
            }
            for (F = 0; lf.ΔⲆΔΔⵠ > F; F++) {
                for (E = 0; lf.ⵠᐃⵠⲆᐃ > E; E++) {
                    if (s[F][E] === 0) {
                        e(s, E, F);
                    }
                }
            }
            Uw = {
                w: lf.ⵠᐃⵠⲆᐃ,
                ΔᐃⲆ: lf.ΔⲆΔΔⵠ,
                ΔⵠⵠⲆ: []
            };
            for (v = 0; v < lf.ΔⲆΔΔⵠ; v++) {
                Uw.ΔⵠⵠⲆ[v] = [];
            }
            if (lf.ᐃⲆⲆⵠⵠ !== 0 && lf.ᐃⲆⲆⵠⵠ.length > 0 && lf.ᐃⲆⲆⵠⵠ[0].length > 3) {
                for (j = 0; lf.ᐃⲆⲆⵠⵠ.length > j; j++) {
                    if ((H = lf.ᐃⲆⲆⵠⵠ[j])[1] === "isl") {
                        lf.ΔΔⲆΔⵠⲆΔ(H[2], H[3], H[4]);
                    }
                }
            } else {
                lf.ⵠᐃᐃⲆᐃΔΔᐃΔ(lf.ᐃⵠⲆΔⲆΔⵠ);
            }
            if (lf.ᐃⲆⲆⵠⵠ !== 0 && lf.ᐃⲆⲆⵠⵠ.length > 0 && lf.ᐃⲆⲆⵠⵠ[0].length > 3) {
                var G = [];
                for (j = 0; lf.ᐃⲆⲆⵠⵠ.length > j; j++) {
                    var H;
                    if ((H = lf.ᐃⲆⲆⵠⵠ[j])[0] === 1) {
                        if (H[1] === "r") {
                            x(H[3], H[2], "wtb", 0, 1);
                            G.push([H[3], H[2], H[4]]);
                        } else {
                            x(H[4], H[3], H[1], H[2], H[5]);
                        }
                    }
                }
                q(0, G);
                G = [];
            } else {
                for (v = 0; v < lf.ⵠⵠⲆᐃ.length; v++) {
                    l = lf.ⵠⵠⲆᐃ[v];
                    if (ew.ⲆΔᐃⲆᐃ === lf.mode) {
                        if (l.ᐃⲆⵠ === lf.ᐃⵠᐃⲆⲆ) {
                            h(v, l.w / 10000);
                        }
                    } else {
                        if (lf.ᐃⵠᐃⲆⲆ === l.ᐃⲆⵠ) {
                            o(v, l.w / 10000);
                        }
                        if (l.ᐃⲆⵠ === lf.ⲆⲆΔΔⲆΔⵠ) {
                            n(v, l.w / 10000);
                        }
                        if (lf.Δᐃᐃⵠᐃⵠⵠ === l.ᐃⲆⵠ) {
                            r(v, l.w / 10000);
                        }
                        if (l.ᐃⲆⵠ === lf.ⵠᐃΔΔⵠⵠΔ) {
                            g(v, l.w / 10000);
                        }
                        if (l.ᐃⲆⵠ === lf.ᐃⵠΔΔⵠⲆⲆ) {
                            b(v);
                        }
                    }
                }
            }
            st("isl", 1);
            st("wtb", 20);
            st("la", 1);
            st("c", 1);
            st("s", 1);
            st("f", 1);
            st("p", 1);
            st("g", 1);
            st("d", 1);
            st("a", 1);
            st("re", 1);
            st("m", 1);
            rt = [];
            lf.ⵠᐃᐃⵠⵠⵠⲆⵠᐃ(Uw);
        };
        this.ᐃᐃΔⲆ = x;
        this.ⵠᐃᐃⵠⵠⵠⲆⵠᐃ = function (b) {
            for (var c = 0; c < this.ΔⲆΔΔⵠ; c++) {
                for (var d = 0; this.ⵠᐃⵠⲆᐃ > d; d++) {
                    if (!b.ΔⵠⵠⲆ[c]) {
                        b.ΔⵠⵠⲆ[c] = [];
                    }
                    if (b.ΔⵠⵠⲆ[c][d]) {
                        var e = b.ΔⵠⵠⲆ[c][d];
                        if (e.de && e.de.length > 0) {
                            for (var f = 0; f < e.de.length; f++) {
                                if (e.de[f] && e.de[f].length > 0) {
                                    e.de = e.de[f][0];
                                    if (f >= 41 && f <= 49) {
                                        e.de.scale = 3;
                                        var g = Math.floor(Math.random() * 3 + 1);
                                        e.de.Ⲇⵠⵠ = [];
                                        for (var h = 0; g > h; h++) {
                                            e.de.Ⲇⵠⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.random() * Math.PI * 2,
                                                ᐃᐃⵠⵠ: 41 + Math.floor(Math.random() * 9)
                                            });
                                        }
                                    } else if (f >= 19 && f <= 26) {
                                        e.de.scale = 3;
                                        g = Math.floor(Math.random() * 3 + 1);
                                        e.de.Ⲇⵠⵠ = [];
                                        for (h = 0; g > h; h++) {
                                            e.de.Ⲇⵠⵠ.push({
                                                x: Math.random() * 120 - 60,
                                                y: Math.random() * 120 - 60,
                                                angle: Math.PI * Math.random() * 2,
                                                ᐃᐃⵠⵠ: 19 + Math.floor(Math.random() * 8)
                                            });
                                        }
                                    } else if (f <= 15 || f >= 27 && f <= 40) {
                                        e.de.angle = 0;
                                        e.de.scale = 2;
                                        e.de.ᐃᐃⵠⵠ = f;
                                    } else {
                                        e.de.angle = Math.random() * Math.PI * 2;
                                        e.de.scale = 1;
                                        e.de.ᐃᐃⵠⵠ = f;
                                    }
                                }
                            }
                        }
                        s(e, "p", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Bk, 1, 1, 0, 10, 10));
                        s(e, "t", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "s", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 1, 1, 0, 10, 10));
                        s(e, "g", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "d", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ln, 1, 1, 0, 10, 10));
                        s(e, "b", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(wq, 1, 1, 0, 10, 10));
                        s(e, "f", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 1, 1, 0, 10, 10));
                        s(e, "sw", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oj, 1, 1, 0, 10, 10));
                        s(e, "gw", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(El, 1, 1, 0, 10, 10));
                        s(e, "dw", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "a", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "cs", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oe, 1, 1, 0, 10, 10));
                        s(e, "plm", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(wq, 1, 1, 0, 10, 10));
                        s(e, "re", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(ug, 1, 1, 0, 10, 10));
                        s(e, "c", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10));
                        s(e, "m", new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Bk, 1, 1, 0, 10, 10));
                    } else {
                        b.ΔⵠⵠⲆ[c][d] = [];
                    }
                }
            }
        };
        this.time = Pr.ΔᐃΔ;
        this.ᐃΔⲆᐃⲆ = {
            translate: {
                y: 0,
                x: 0
            },
            now: 0,
            ⵠΔᐃᐃⵠ: 0,
            ⲆⲆⵠⲆⲆ: 0
        };
        this.ᐃᐃᐃⲆⲆΔⵠⲆⵠ = function () {
            this.ⵠᐃⵠⵠ = [];
            this.ᐃΔᐃ[hw.ΔⲆᐃⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠⲆΔᐃ] = [];
            this.ᐃΔᐃ[hw.ΔΔᐃΔⵠ] = [];
            this.ᐃΔᐃ[hw.ΔᐃⲆΔⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃΔᐃⵠ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠᐃⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃᐃΔⵠ] = [];
            this.ᐃΔᐃ[hw.ⲆΔᐃΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆΔΔᐃΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆΔΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⵠΔⵠⲆΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆΔⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ΔΔΔⵠΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠⵠΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠⵠΔΔ] = [];
            this.ᐃΔᐃ[hw.ΔⲆΔⲆᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃΔΔΔⲆ] = [];
            this.ᐃΔᐃ[hw.ⲆᐃⵠⲆΔ] = [];
            this.ᐃΔᐃ[hw.ΔΔⲆⲆⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆⵠⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠⵠⲆⵠ] = [];
            this.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ] = [];
            this.ᐃΔᐃ[hw.ΔⵠΔⵠⲆ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠᐃⲆⲆ] = [];
            this.ᐃΔᐃ[hw.ΔⵠᐃᐃΔ] = [];
            this.ᐃΔᐃ[hw.ⵠΔᐃⲆⲆ] = [];
            this.ᐃΔᐃ[hw.ⲆΔⵠⲆΔ] = [];
            this.ᐃΔᐃ[hw.ⲆΔΔΔⵠ] = [];
            this.ᐃΔᐃ[hw.ΔᐃⵠᐃΔ] = [];
            this.ᐃΔᐃ[hw.ΔᐃᐃⵠⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠᐃⲆΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠⲆΔⵠ] = [];
            this.ᐃΔᐃ[hw.ΔⵠᐃΔΔ] = [];
            this.ᐃΔᐃ[hw.ΔΔⵠᐃΔ] = [];
            this.ᐃΔᐃ[hw.ᐃᐃⵠⵠΔ] = [];
            this.ᐃΔᐃ[hw.Δᐃᐃᐃⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆⲆΔᐃ] = [];
            this.ᐃΔᐃ[hw.ΔΔΔⲆᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃᐃⵠᐃⲆ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠΔⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃᐃΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠᐃⲆⵠ] = [];
            this.ᐃΔᐃ[hw.ᐃΔᐃⲆⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃᐃⲆΔ] = [];
            this.ᐃΔᐃ[hw.ΔⲆⲆᐃⵠ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆⵠΔΔ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃⲆᐃᐃ] = [];
            this.ᐃΔᐃ[hw.ΔᐃΔⵠΔ] = [];
            this.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ] = [];
            this.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠⲆⲆᐃ] = [];
            this.ᐃΔᐃ[hw.ⵠΔⲆΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆᐃⲆⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃΔΔᐃⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠⲆⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆΔΔΔΔ] = [];
            this.ᐃΔᐃ[hw.ⵠⵠΔΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆⲆᐃⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⵠΔⲆⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⵠᐃⲆᐃΔ] = [];
            this.ᐃΔᐃ[hw.ΔⲆⵠⲆΔ] = [];
            this.ᐃΔᐃ[hw.ΔⵠⲆᐃⲆ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠⲆᐃⵠ] = [];
            this.ᐃΔᐃ[hw.ⲆⲆⵠⵠⲆ] = [];
            this.ᐃΔᐃ[hw.ΔⲆⵠⲆⲆ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆⵠΔⲆ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆΔᐃⲆ] = [];
            this.ᐃΔᐃ[hw.ᐃᐃΔⵠΔ] = [];
            this.ᐃΔᐃ[hw.ᐃΔΔⲆΔ] = [];
            this.ᐃΔᐃ[hw.ᐃΔⵠΔᐃⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ⵠΔΔΔⲆ] = [];
            this.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ] = [];
            this.ᐃΔᐃ[hw.ⲆⲆᐃΔΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠᐃⵠⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆⵠⲆΔᐃΔ] = [];
            this.ᐃΔᐃ[hw.ᐃᐃΔΔΔⵠΔ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆᐃΔⲆᐃΔ] = [];
            this.ᐃΔᐃ[hw.ΔⵠⵠⲆⵠⵠΔ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠⲆⵠΔ] = [];
            this.ᐃΔᐃ[hw.ΔᐃΔΔⵠⲆᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃⲆⵠⵠⵠ] = [];
            this.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ] = [];
            this.ᐃΔᐃ[hw.ⲆⵠΔᐃᐃ] = [];
            this.ᐃΔᐃ[hw.ᐃⵠᐃⵠᐃ] = [];
            this.ᐃΔᐃ[hw.ΔᐃⲆⲆⵠ] = [];
        };
        this.ⵠΔᐃⲆⲆⲆⲆⵠⲆ = function (a) {
            if (this.ⵠᐃⵠⵠ[a]) {
                ᐃⵠⵠᐃ = this.ⵠᐃⵠⵠ[a].type;
                this.ⵠᐃⵠⵠ[a] = null;
                for (var b = this.ᐃΔᐃ[ᐃⵠⵠᐃ], c = 0; b.length > c; c++) {
                    if (b[c].ΔⲆΔΔ == a) {
                        b.splice(c, 1);
                        return;
                    }
                }
            }
        };
        this.ᐃᐃⲆΔⵠᐃᐃⲆⲆ = function (a, b) {
            for (var c = 0; c < this.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ].length; c++) {
                var d = this.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ][c];
                if (Math.floor(d.x / 100) === b && Math.floor(d.y / 100) === a) {
                    return 1;
                }
            }
            return 0;
        };
        this.ΔⲆⵠⲆᐃⲆⲆΔⲆ = function (a, b) {
            for (var c = 0; this.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ].length > c; c++) {
                var d = this.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ][c];
                if (Math.floor(d.x / 100) == a && Math.floor(d.y / 100) == b) {
                    return true;
                }
            }
            return false;
        };
        this.ⵠⵠⵠⵠΔ = function (j) {
            for (var e = 0; e < j.length; e++) {
                ΔⵠⲆⲆ = j[e];
                if (ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ != ΔⵠⲆⲆ.angle) {
                    var q = Math.PI * 2;
                    ΔⵠⲆⲆ.angle = (ΔⵠⲆⲆ.angle + q) % q;
                    ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ = (ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ + q) % q;
                    if (ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ != ΔⵠⲆⲆ.angle) {
                        var u = ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ - ΔⵠⲆⲆ.angle;
                        var B = Math.abs(u);
                        if (B > Math.PI) {
                            B = Math.PI * 2 - B;
                        }
                        var D = cf * (B / Math.PI * 3 * ew.ᐃᐃⲆⵠⲆⲆⲆ);
                        if (Math.PI < u) {
                            ΔⵠⲆⲆ.angle -= D;
                        } else if (u < -Math.PI) {
                            ΔⵠⲆⲆ.angle += D;
                        } else if (u < 0) {
                            ΔⵠⲆⲆ.angle -= D;
                        } else {
                            ΔⵠⲆⲆ.angle += D;
                        }
                        ΔⵠⲆⲆ.angle = (ΔⵠⲆⲆ.angle + q) % q;
                        if (D > Math.abs(ΔⵠⲆⲆ.angle - ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ)) {
                            ΔⵠⲆⲆ.angle = ΔⵠⲆⲆ.ⲆⵠⲆΔΔⵠᐃ;
                        }
                    }
                }
                Math.floor(ΔⵠⲆⲆ.r.y / 100);
                Math.floor(ΔⵠⲆⲆ.r.x / 100);
                if (ΔⵠⲆⲆ.r.x != ΔⵠⲆⲆ.x || ΔⵠⲆⲆ.r.y != ΔⵠⲆⲆ.y) {
                    if (ΔⵠⲆⲆ.action & _v.IDLE) {
                        ΔⵠⲆⲆ.action -= _v.IDLE;
                    }
                    ΔⵠⲆⲆ.action |= _v.ⲆᐃᐃⲆΔⲆⵠ;
                    var E = ΔᐃⲆᐃ.ΔⵠⲆΔⵠⲆⵠ(ΔⵠⲆⲆ, ΔⵠⲆⲆ.r) + Math.PI;
                    var F = ΔⵠⲆⲆ.ᐃᐃᐃᐃΔ * cf;
                    var G = ΔᐃⲆᐃ.ⲆᐃᐃΔⲆᐃⲆ(F, E);
                    if (ΔᐃⲆᐃ.ΔΔⵠⲆⵠⲆⲆ(G) < ΔᐃⲆᐃ.ΔΔⵠⲆⵠⲆⲆ(ΔᐃⲆᐃ.ᐃⲆᐃⵠᐃΔᐃ(ΔⵠⲆⲆ, ΔⵠⲆⲆ.r))) {
                        ΔᐃⲆᐃ.ΔⵠⵠⲆⵠᐃΔ(ΔⵠⲆⲆ, G);
                    } else {
                        if (ΔⵠⲆⲆ.action & _v.ⲆᐃᐃⲆΔⲆⵠ) {
                            ΔⵠⲆⲆ.action -= _v.ⲆᐃᐃⲆΔⲆⵠ;
                        }
                        ΔⵠⲆⲆ.action |= _v.IDLE;
                        ΔᐃⲆᐃ.ⲆΔᐃⵠⵠⵠⲆ(ΔⵠⲆⲆ.r, ΔⵠⲆⲆ);
                    }
                }
                if (ΔⵠⲆⲆ.ΔⲆⵠᐃⵠ) {
                    var H = ΔⵠⲆⲆ.bubbles;
                    var I = H.length;
                    if (I === 0 || I < Pr.ΔΔⲆᐃᐃΔΔ && H[I - 1].ΔΔⵠⲆⲆ < 0.95) {
                        H.push({
                            id: Math.floor(Math.random() * Ⲇᐃ[540][0].length),
                            x: Math.floor(ΔⵠⲆⲆ.x + Math.random() * 80 - 40),
                            y: Math.floor(ΔⵠⲆⲆ.y + Math.random() * 80 - 40),
                            ΔΔⵠⲆⲆ: 1
                        });
                    }
                    for (var K = 0; I > K; K++) {
                        H[K].ΔΔⵠⲆⲆ = Math.max(0, H[K].ΔΔⵠⲆⲆ - cf);
                    }
                    for (K = 0; I > K; K++) {
                        if (H[K].ΔΔⵠⲆⲆ === 0) {
                            H.splice(K, 1);
                            break;
                        }
                    }
                }
                var L = 0;
                if (ΔⵠⲆⲆ.ᐃⵠᐃⵠ && rf.ΔⵠΔⵠΔ) {
                    var M = ΔⵠⲆⲆ.ᐃᐃⲆⵠⵠ;
                    I = M.length;
                    if (ΔⵠⲆⲆ.ΔΔⵠᐃⲆⵠⵠ > 0 && ΔⵠⲆⲆ.ᐃΔⲆΔΔ !== 227 && ΔⵠⲆⲆ.ᐃΔⲆΔΔ !== 228 && ΔⵠⲆⲆ.ᐃΔⲆΔΔ !== 230 && ΔⵠⲆⲆ.ᐃΔⲆΔΔ !== 229 && ΔⵠⲆⲆ.ᐃΔⲆΔΔ !== 91 && !ΔⵠⲆⲆ.ΔⲆⵠᐃⵠ && (L = 1, I === 0 || Pr.ᐃΔⲆᐃᐃⵠⵠ < ΔᐃⲆᐃ.ΔΔⵠᐃ(M[I - 1], ΔⵠⲆⲆ))) {
                        var N = -ΔⵠⲆⲆ.angle;
                        var O = fo * (Math.cos(N) * 45);
                        var Q = Math.sin(N) * 45 * fo;
                        M.push({
                            x: ΔⵠⲆⲆ.x + O,
                            y: ΔⵠⲆⲆ.y + Q,
                            r: 8,
                            alpha: 0.8
                        });
                        M.push({
                            x: ΔⵠⲆⲆ.x - O,
                            y: ΔⵠⲆⲆ.y - Q,
                            r: 8,
                            alpha: 0.8
                        });
                        M.push({
                            x: ΔⵠⲆⲆ.x,
                            y: ΔⵠⲆⲆ.y,
                            r: 24,
                            alpha: 1
                        });
                    }
                    for (K = 0; K < I; K++) {
                        M[K].alpha = Math.max(0, M[K].alpha - cf / 2.2);
                        M[K].r += cf * 20;
                    }
                    if (M.length > 0 && M[0].alpha === 0) {
                        M.splice(0, 1);
                    }
                    var R = ΔⵠⲆⲆ.ᐃΔⲆⲆⲆ;
                    I = R.length;
                    var S = -1;
                    var U = Math.max(0, Math.sign(ΔⵠⲆⲆ.ᐃⵠⲆᐃᐃⵠᐃ));
                    var V = Math.max(0, Math.sign(ΔⵠⲆⲆ.ⲆⲆΔⵠⵠ));
                    Math.max(0, Math.sign(ΔⵠⲆⲆ.ⲆⲆⵠⲆᐃ));
                    var W = Math.max(0, Math.sign(ΔⵠⲆⲆ.ᐃΔΔⵠⲆ));
                    var X = Math.max(0, Math.sign(ΔⵠⲆⲆ.ⲆΔΔⲆΔ));
                    if (ΔⵠⲆⲆ.ᐃⵠⲆᐃᐃⵠᐃ > 0 || ΔⵠⲆⲆ.ⲆⲆⵠⲆᐃ > 0) {
                        S = 602;
                    } else if (ΔⵠⲆⲆ.ⲆΔΔⲆΔ > 0) {
                        S = 680;
                    } else if (ΔⵠⲆⲆ.ⲆⲆΔⵠⵠ > 0) {
                        S = 475;
                    } else if (ΔⵠⲆⲆ.ᐃΔΔⵠⲆ > 0) {
                        S = 476;
                    }
                    if (ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 225 && (U | V | W | X) == 1) {
                        S = 228;
                        var Y = ΔⵠⲆⲆ.ⵠⵠᐃⲆᐃ - Math.PI / 2;
                        var Z = 15;
                        var _ = 11;
                        var aa = Pr.ᐃⲆⵠⲆᐃⵠⲆ;
                    } else if (ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 239 && (U | V | W | X) === 1) {
                        S = 249;
                        Y = ΔⵠⲆⲆ.ⵠⵠᐃⲆᐃ - Math.PI / 2;
                        Z = 21;
                        _ = 16;
                        aa = Pr.ᐃⲆⵠⲆᐃⵠⲆ;
                    } else if (ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 226 && (U | V | W | X) === 1) {
                        S = 234;
                        Y = ΔⵠⲆⲆ.ⵠⵠᐃⲆᐃ - Math.PI / 2;
                        var ba = Math.random() * 50;
                        Z = 10 + ba;
                        _ = 0 + ba;
                        aa = Pr.ᐃⲆⵠⲆᐃⵠⲆ * 0.9;
                    } else {
                        Y = ΔⵠⲆⲆ.angle;
                        Z = 15;
                        _ = 11;
                        aa = Pr.ᐃⲆⵠⲆᐃⵠⲆ;
                    }
                    if (ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 227 || ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 228 || ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 91 || ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 229 || ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 230 || ΔⵠⲆⲆ.ΔⲆⵠᐃⵠ); else if (ΔⵠⲆⲆ.ᐃΔⲆΔΔ === 224) {
                        if (I === 0 || ΔᐃⲆᐃ.ΔΔⵠᐃ(R[I - 1], ΔⵠⲆⲆ) > Pr.ⵠᐃⵠⲆᐃⵠᐃ) {
                            R.push({
                                x: ΔⵠⲆⲆ.x,
                                y: ΔⵠⲆⲆ.y,
                                angle: ΔⵠⲆⲆ.ⵠⵠᐃⲆᐃ,
                                alpha: 1,
                                id: 226
                            });
                        }
                    } else if (S != -1 && L === 0 && (I === 0 || aa < ΔᐃⲆᐃ.ΔΔⵠᐃ(R[I - 1], ΔⵠⲆⲆ))) {
                        ΔⵠⲆⲆ.ⵠΔΔΔⲆⲆⲆ++;
                        if (Math.abs(ΔⵠⲆⲆ.x - ΔⵠⲆⲆ.r.x) > 1 && Math.abs(ΔⵠⲆⲆ.y - ΔⵠⲆⲆ.r.y) > 1) {
                            if (ΔⵠⲆⲆ.r.x > ΔⵠⲆⲆ.x && ΔⵠⲆⲆ.r.y < ΔⵠⲆⲆ.y || ΔⵠⲆⲆ.x > ΔⵠⲆⲆ.r.x && ΔⵠⲆⲆ.y < ΔⵠⲆⲆ.r.y) {
                                if (ΔⵠⲆⲆ.ⵠΔΔΔⲆⲆⲆ % 2) {
                                    O = fo * -_;
                                    Q = fo * -_;
                                } else {
                                    Q = _ * fo;
                                    O = _ * fo;
                                }
                            } else if (ΔⵠⲆⲆ.ⵠΔΔΔⲆⲆⲆ % 2) {
                                O = fo * _;
                                Q = -_ * fo;
                            } else {
                                Q = fo * _;
                                O = fo * -_;
                            }
                        } else if (ΔⵠⲆⲆ.ⵠΔΔΔⲆⲆⲆ % 2) {
                            O = fo * (Math.cos(Y) * Z);
                            Q = Z * Math.sin(Y) * fo;
                        } else {
                            O = fo * (-Math.cos(Y) * Z);
                            Q = fo * (-Math.sin(Y) * Z);
                        }
                        R.push({
                            x: ΔⵠⲆⲆ.x + O,
                            y: ΔⵠⲆⲆ.y + Q,
                            angle: Y + Math.PI / 2,
                            alpha: 1,
                            id: S
                        });
                    }
                    for (K = 0; K < I; K++) {
                        if (R[K].id === 226) {
                            R[K].alpha = Math.max(0, R[K].alpha - cf * 1.5);
                        } else {
                            R[K].alpha = Math.max(0, R[K].alpha - cf / 2.85);
                        }
                    }
                    if (R.length > 0 && R[0].alpha === 0) {
                        R.splice(0, 1);
                    }
                }
            }
        };
        this.ⲆΔᐃⲆ = function () {
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ΔⲆᐃⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆᐃⲆⵠᐃ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃΔΔᐃⵠ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠⵠⲆⵠᐃ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆΔΔΔΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠⵠΔΔᐃ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆⲆᐃⵠΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠΔⲆⵠΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠᐃⲆᐃΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ΔⲆⵠⲆΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆⵠΔᐃᐃ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆⲆⵠⵠⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ΔⲆⵠⲆⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃⲆⵠΔⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃⲆΔᐃⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃᐃΔⵠΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃΔΔⲆΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ᐃΔⵠΔᐃⵠᐃ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠΔΔΔⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆⲆᐃΔΔ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ΔⵠⲆᐃⲆ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⲆⵠⲆᐃⵠ]);
            this.ⵠⵠⵠⵠΔ(this.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ]);
        };
        this.ⲆⲆⵠΔ = [];
        this.ⲆⲆⵠΔ[620] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.05, 1, 0.008, 0.008);
        this.ⲆⲆⵠΔ[619] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.08, 1, 0.006, 0.006);
        this.ⲆⲆⵠΔ[694] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(El, 1, 1.02, 1, 0.008, 0.008);
        this.ⲆⲆⵠΔ[695] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oj, 1, 1.08, 1, 0.006, 0.006);
        this.ⵠᐃΔΔⵠ = [];
        this.ⵠᐃΔΔⵠ[0] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.1, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[1] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oj, 0.4, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[2] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[3] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[4] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.3, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[5] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Gq, 0.8, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[6] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.5, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[7] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[8] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[9] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(fg, 0.2, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[10] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[11] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.4, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[12] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.8, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[13] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.2, 1, 0, 0.6, 0.6);
        this.ⵠᐃΔΔⵠ[14] = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ui, 0.7, 1, 0, 0.6, 0.6);
    }
    function kw(c, d, e, f, i, j, a, k, m, h) {
        this.type = c;
        this.ⲆΔᐃⵠ = d;
        this.id = e;
        this.x = f;
        this.y = i;
        this.angle = j;
        this.ⲆⵠⲆΔΔⵠᐃ = j;
        this.action = a;
        this.info = k;
        this.ⵠⵠᐃⲆⲆ = h;
        this.r = {
            x: f,
            y: i
        };
        this.ᐃᐃᐃᐃΔ = m;
        if (lf) {
            this.ΔⲆΔΔ = d * lf.ᐃⲆⵠⲆΔⲆⵠ + e;
        }
        switch (c) {
            case hw.ΔⲆᐃⲆ:
                this.ᐃΔⲆⲆ = lf.ᐃⲆⲆΔ[this.ⲆΔᐃⵠ];
                this.ⲆΔⲆΔ = this.ᐃΔⲆⲆ.ⲆΔⲆΔ;
                this.ᐃΔᐃᐃⲆΔⲆ = this.ᐃΔⲆⲆ.ᐃΔᐃᐃⲆΔⲆ;
                this.ᐃⲆᐃⲆⲆ = this.ᐃΔⲆⲆ.ᐃⲆᐃⲆⲆ;
                this.ΔᐃΔⲆⵠ = this.ᐃΔⲆⲆ.ΔᐃΔⲆⵠ;
                this.ⵠᐃΔᐃΔⲆⵠ = -1000000;
                this.ᐃΔΔⵠⲆ = -1000000;
                this.ⲆⲆΔⵠⵠ = -1000000;
                this.ⲆⲆⵠⲆᐃ = -1000000;
                this.ΔΔⵠᐃⲆⵠⵠ = -1000000;
                this.ᐃⵠⲆᐃᐃⵠᐃ = -1000000;
                this.ⲆΔΔⲆΔ = -1000000;
                this.ΔⵠᐃⲆⲆ = ew.ⲆⵠΔΔᐃ === lf.mode && ew.ⵠⲆᐃⵠⲆⲆᐃ === this.ⲆΔⲆΔ ? Bs : il;
                this.ⵠⵠⵠΔΔΔΔ = lf.mode === ew.ᐃⲆⵠⲆΔ && ew.ᐃⵠⲆⵠᐃᐃΔ === this.ⲆΔⲆΔ ? sk : Sr;
                this.ΔΔⲆΔⵠⵠᐃ = !!this.ΔⵠᐃⲆⲆ && this.ᐃΔⲆⲆ.ΔᐃⵠΔⵠ === "  " || hh;
                this.ᐃΔⲆⲆⲆ = [];
                this.ᐃΔᐃⲆᐃΔⵠ = 0;
                this.ᐃⵠᐃⵠ = Wh;
                this.ⵠΔΔΔⲆⲆⲆ = 0;
                this.ᐃⲆⵠⲆⲆΔᐃ = 0;
                this.ᐃᐃⲆⵠⵠ = [];
                this.r = {
                    x: f,
                    y: i
                };
                this.ΔΔⲆᐃ = Zu;
                this.ⲆⵠⲆⲆΔⵠⲆ = Wu;
                this.ⲆΔⲆᐃⲆ = 0;
                this.ⵠⵠᐃⲆᐃ = 0;
                this.ΔⲆΔⵠⵠ = 0;
                this.ΔΔⲆᐃⲆⵠⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(El, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⵠΔⲆᐃᐃ = 0;
                this.ᐃᐃᐃⵠᐃᐃⵠ = 0;
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⲆⵠⲆⵠᐃ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(fg, 0.6, 0.6, 0, 5, 3);
                this.freeze = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(cr, 0.6, 0.6, 0, 5, 3);
                this.ⵠΔⵠΔⲆΔⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 0.6, 0.6, 0, 5, 3);
                this.ΔⵠⲆⵠΔⲆⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(dl, 0, 2.25, -1.5, 3.75, 7.5);
                this.ⲆⲆΔΔⵠⵠⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(ft, 0, 7.5, -3, 22.5, 33.75);
                this.attack = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(il, 0, 0, -Math.PI / 3, 6, 9);
                this.ΔΔⲆᐃᐃΔⵠΔⵠ = 0;
                this.ΔᐃᐃⲆΔⵠⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oe, 0.6, 0.6, 0, 1, 3);
                this.ᐃΔΔΔΔᐃⵠ = this.ΔΔⲆΔⵠⵠᐃ ? new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
                this.ΔΔᐃᐃᐃⵠᐃ = 0;
                this.ᐃⵠⲆΔᐃⵠΔ = 0;
                this.ᐃⵠᐃΔᐃΔⵠ = [];
                this.ⲆⵠⲆⵠⲆΔⲆ = [];
                this.text = [];
                this.label = [];
                this.ΔⵠᐃᐃᐃΔᐃ = $u;
                this.ⵠⲆⲆΔⲆ = true;
                this.right = -1;
                this.ᐃΔⲆΔΔ = -1;
                this.action = _v.IDLE;
                this.ᐃⲆᐃⵠᐃⵠΔ = hj;
                this.ⵠΔᐃⲆᐃ = 0;
                this.ΔⲆⵠᐃⵠ = eh;
                this.bubbles = [];
                this.ⲆⵠⲆΔⲆ = 0;
                this.ᐃᐃⲆΔΔ = -1;
                this.ⲆΔᐃⲆ = function (a) {
                    if (this.info & 32768) {
                        this.ᐃⲆᐃⵠᐃⵠΔ = Jr;
                        this.info = this.info & -32769;
                    } else {
                        this.ᐃⲆᐃⵠᐃⵠΔ = hj;
                    }
                    if (this.info & 16384) {
                        this.info = this.info & -16385;
                        this.ⲆⵠⲆΔⲆ = 1;
                    } else {
                        this.ⲆⵠⲆΔⲆ = 0;
                    }
                    this.ⵠΔᐃⲆᐃ = Math.floor(this.info / 128);
                    this.info -= this.ⵠΔᐃⲆᐃ * 128;
                    if (this.info === 7 || this.ΔΔⲆΔⵠⵠᐃ) {
                        this.right = -1;
                    } else {
                        this.right = this.info;
                    }
                    this.ᐃΔᐃⲆᐃΔⵠ = lf.ᐃᐃⲆΔⵠᐃᐃⲆⲆ(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
                    this.ᐃΔⲆΔΔ = this.ⵠⵠᐃⲆⲆ & 255;
                    if (ew.ΔᐃᐃⲆΔⲆⵠⵠⲆ === this.right) {
                        this.ΔⲆⵠᐃⵠ = dl;
                    } else {
                        this.ΔⲆⵠᐃⵠ = false;
                    }
                    if (fw[this.right]) {
                        this.ⲆΔᐃⵠⲆ = ft;
                    } else {
                        this.ⲆΔᐃⵠⲆ = oe;
                    }
                    if (a & _v.ᐃⵠⵠᐃΔᐃⵠ) {
                        this.ΔᐃᐃⲆΔⵠⵠ.ΔⲆⵠ = hh;
                        this.ΔᐃᐃⲆΔⵠⵠ.ᐃⵠΔ = 0.6;
                    } else if (a & _v.ᐃᐃΔᐃΔ) {
                        this.freeze.ΔⲆⵠ = fg;
                        this.freeze.ᐃⵠΔ = 0.6;
                    } else if (a & _v.ᐃⲆᐃΔᐃⲆᐃ) {
                        this.ⲆⵠⲆⵠᐃ.ΔⲆⵠ = Sr;
                        this.ⲆⵠⲆⵠᐃ.ᐃⵠΔ = 0.6;
                    }
                    if (a & _v.ᐃᐃΔᐃⵠᐃᐃ) {
                        this.ⵠΔⵠΔⲆΔⲆ.ΔⲆⵠ = false;
                        this.ⵠΔⵠΔⲆΔⲆ.ᐃⵠΔ = 0.6;
                    }
                    if (a & _v.ΔⲆᐃⵠ) {
                        this.ⲆΔᐃΔ.ΔⲆⵠ = Ln;
                        this.ⲆΔᐃΔ.ᐃⵠΔ = 0.6;
                    }
                    if (a & _v.ᐃᐃᐃᐃⵠΔⲆ) {
                        this.ΔΔⲆᐃᐃΔⵠΔⵠ = dw.ᐃⵠᐃΔⲆⵠⵠⵠᐃ;
                        if (Zw.ⲆᐃⲆᐃᐃ && this.ᐃᐃⲆΔΔ !== -1) {
                            Zw.ᐃⲆⲆΔ[this.ᐃᐃⲆΔΔ].ⲆⵠᐃⵠᐃⵠΔΔⵠ(Sw[this.right]);
                        }
                    }
                };
                this.ⲆΔᐃⲆ();
                break;
            case hw.ᐃⵠⲆⲆᐃ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ⲆⲆΔΔⵠ = xp;
                this.ᐃΔⵠᐃΔ = Ep;
                this.ⲆΔⲆᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(ug, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃΔⵠⲆⲆⵠΔ = 0;
                this.ⵠᐃᐃⵠⵠΔᐃ = 0;
                this.ⵠⲆⲆⲆⲆ = Uc;
                break;
            case hw.ΔⲆⵠΔᐃ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: Sr,
                    angle: 0
                };
                this.ⲆⲆΔΔⵠ = Op;
                this.ᐃΔⵠᐃΔ = Pp;
                this.ⲆΔⲆᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(il, 1, 1.23, 1.18, 0.01, 0.01);
                this.ᐃΔⵠⲆⲆⵠΔ = 0;
                this.ⵠᐃᐃⵠⵠΔᐃ = 0;
                break;
            case hw.ΔΔᐃΔⵠ:
            case hw.ΔᐃⲆΔⲆ:
                this.ⲆⲆΔΔⵠ = Wp;
                this.ᐃΔⵠᐃΔ = kp;
                this.ΔΔⲆⲆᐃ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.03, 0.98, 0.3, 0.3);
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆΔⲆᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 1, 1.23, 1.18, 0.01, 0.01);
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Sr, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: Gq,
                    angle: 0
                };
                break;
            case hw.ᐃΔΔΔⲆ:
                this.ⲆⲆΔΔⵠ = dp;
                this.ᐃΔⵠᐃΔ = fp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(il, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: El,
                    angle: 0
                };
                this.ⲆᐃⲆΔ = [];
                for (var l = 0; l < 3; l++) {
                    this.ⲆᐃⲆΔ.push({
                        ΔΔⲆᐃ: Ap,
                        ⲆⲆⵠΔ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆᐃⲆΔ[0].x = this.x - 16.5;
                this.ⲆᐃⲆΔ[0].y = this.y - 15.5;
                this.ⲆᐃⲆΔ[0].angle = this.angle;
                this.ⲆᐃⲆΔ[1].x = this.x + 36;
                this.ⲆᐃⲆΔ[1].y = this.y + 17;
                this.ⲆᐃⲆΔ[1].angle = this.angle;
                this.ⲆᐃⲆΔ[2].x = this.x - 18.5;
                this.ⲆᐃⲆΔ[2].y = this.y + 39;
                this.ⲆᐃⲆΔ[2].angle = this.angle;
                break;
            case hw.ⵠᐃΔᐃⵠ:
                this.ⲆⲆΔΔⵠ = Ip;
                this.ᐃΔⵠᐃΔ = mp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(mk, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: ug,
                    angle: 0
                };
                this.ⲆᐃⲆΔ = [];
                for (l = 0; l < 3; l++) {
                    this.ⲆᐃⲆΔ.push({
                        ΔΔⲆᐃ: Rp,
                        ⲆⲆⵠΔ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                this.ⲆᐃⲆΔ[0].x = this.x - 16.5;
                this.ⲆᐃⲆΔ[0].y = this.y - 15.5;
                this.ⲆᐃⲆΔ[1].x = this.x - 5.5;
                this.ⲆᐃⲆΔ[1].y = this.y + 7.5;
                this.ⲆᐃⲆΔ[2].x = this.x + 18;
                this.ⲆᐃⲆΔ[2].y = this.y - 5;
                break;
            case hw.ⵠⵠΔΔᐃ:
                this.ΔΔⲆᐃ = lp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(yg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⲆΔΔΔΔ:
                this.ΔΔⲆᐃ = Lp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(ug, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⲆⲆᐃⵠΔ:
                this.ΔΔⲆᐃ = sp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Gq, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃⵠᐃᐃⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(eh, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔΔⵠᐃΔΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⲆⵠⲆⵠᐃ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠⵠⲆⵠᐃ:
                this.ΔΔⲆᐃ = wp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ΔⲆᐃⵠᐃᐃⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ᐃΔΔⵠᐃΔΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                this.ⲆⵠⲆⵠᐃ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⲆⲆᐃΔΔ:
                this.ΔΔⲆᐃ = Kp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(yg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ᐃⲆⵠΔⲆ:
                this.ΔΔⲆᐃ = Uu;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ᐃⵠⲆᐃΔ:
                this.ⵠᐃⲆⵠⲆ = this.info & 15;
                this.ᐃⲆⵠⲆⲆΔᐃ = this.ⵠⵠᐃⲆⲆ & 1;
                this.ΔⲆⵠⵠⲆⲆⵠ = 0;
                this.x = this.info;
                this.y = this.ⵠⵠᐃⲆⲆ;
                this.ΔΔⲆᐃ = Sp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
                break;
            case hw.ⲆᐃⲆⵠᐃ:
            case hw.ᐃΔΔᐃⵠ:
            case hw.ⲆⵠΔᐃᐃ:
            case hw.ⲆⲆⵠⵠⲆ:
            case hw.ᐃⲆΔᐃⲆ:
            case hw.ᐃᐃΔⵠΔ:
            case hw.ΔⵠⲆᐃⲆ:
            case hw.ⲆⵠⲆᐃⵠ:
            case hw.ΔⲆⵠⲆⲆ:
                this.ΔΔⲆᐃ = Uu;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⲆⲆᐃΔᐃ:
                this.ΔΔⲆᐃ = Dp;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: oe,
                    angle: 0
                };
                break;
            case hw.ⵠⲆⲆⵠᐃ:
                this.ᐃΔⵠᐃΔ = _p;
                this.ΔΔⲆᐃ = Tp;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(fg, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.up = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ui, 1, 1.03, 0.98, 0.1, 0.1);
                this.ᐃᐃⵠᐃᐃ = [];
                break;
            case hw.ᐃⵠᐃⵠᐃ:
                this.angle = Math.random() * Math.PI / 2;
            case hw.ᐃⲆⵠⵠⵠ:
            case hw.ΔᐃΔΔⵠⲆᐃ:
                this.ΔΔⲆᐃ = rp;
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⲆⵠⲆⵠΔ:
                this.ΔΔⲆᐃ = Fp;
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠΔⲆⲆⵠ:
                this.scale = 1;
                this.ΔΔⲆᐃ = $p;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ᐃΔⵠΔᐃⵠᐃ:
                this.Δⵠⵠⵠⵠ = 0;
                this.ⵠΔⲆⲆ = [];
                this.ᐃΔᐃΔΔᐃⲆ = 0;
                this.ΔΔΔⲆΔΔⵠ = Up;
                this.ΔΔⲆᐃ = Xp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Sr, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ᐃΔΔⲆΔ:
                this.x = this.info;
                this.y = this.ⵠⵠᐃⲆⲆ;
                this.scale = 1;
                this.ⲆⲆⵠⵠ = 0;
                this.ΔΔⲆᐃ = Mp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ui, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(El, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ΔⲆⵠⲆΔ:
                this.x = this.info;
                this.y = this.ⵠⵠᐃⲆⲆ;
                this.scale = 1;
                this.ⲆⲆⵠⵠ = 0;
                this.ΔΔⲆᐃ = pp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠᐃⲆᐃΔ:
                this.scale = 1;
                this.ΔΔⲆᐃ = Gp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠΔⲆⵠΔ:
                this.scale = 1;
                this.ΔΔⲆᐃ = hp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ($h, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(eh, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Gq, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠΔΔΔⲆ:
                this.scale = 1;
                this.ΔΔⲆᐃ = bp;
                this.ⲆⲆⵠΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(yg, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
                this.rotate = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oe, 0, 0, -Math.PI / 6, 0.5, 1);
                this.ⲆΔᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.6, 0.6, 0, 5, 3);
                break;
            case hw.ⵠΔⲆΔᐃ:
                this.ⲆᐃⲆΔ = [];
                for (l = 0; l < 5; l++) {
                    this.ⲆᐃⲆΔ.push({
                        ΔΔⲆᐃ: Rp,
                        ⲆⲆⵠΔ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(El, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
                    });
                }
                switch (this.id % 3) {
                    case 0:
                        this.ⲆᐃⲆΔ[0].x = this.x - 20.5;
                        this.ⲆᐃⲆΔ[0].y = this.y - 22.5;
                        this.ⲆᐃⲆΔ[1].x = this.x - 35.5;
                        this.ⲆᐃⲆΔ[1].y = this.y + 7.5;
                        this.ⲆᐃⲆΔ[2].x = this.x + 7.5;
                        this.ⲆᐃⲆΔ[2].y = this.y - 30;
                        this.ⲆᐃⲆΔ[3].x = this.x + 22.5;
                        this.ⲆᐃⲆΔ[3].y = this.y;
                        this.ⲆᐃⲆΔ[4].x = this.x - 7.5;
                        this.ⲆᐃⲆΔ[4].y = this.y + 14.5;
                        break;
                    case 1:
                        this.ⲆᐃⲆΔ[0].x = this.x - 30.5;
                        this.ⲆᐃⲆΔ[0].y = this.y - 22.5;
                        this.ⲆᐃⲆΔ[1].x = this.x - 15.5;
                        this.ⲆᐃⲆΔ[1].y = this.y + 7.5;
                        this.ⲆᐃⲆΔ[2].x = this.x + 15.5;
                        this.ⲆᐃⲆΔ[2].y = this.y - 30;
                        this.ⲆᐃⲆΔ[3].x = this.x + 12.5;
                        this.ⲆᐃⲆΔ[3].y = this.y + 5;
                        this.ⲆᐃⲆΔ[4].x = this.x - 40.5;
                        this.ⲆᐃⲆΔ[4].y = this.y + 14.5;
                        break;
                    case 2:
                        this.ⲆᐃⲆΔ[0].x = this.x - 20.5;
                        this.ⲆᐃⲆΔ[0].y = this.y - 20.5;
                        this.ⲆᐃⲆΔ[1].x = this.x - 35.5;
                        this.ⲆᐃⲆΔ[1].y = this.y + 15.5;
                        this.ⲆᐃⲆΔ[2].x = this.x + 7.5;
                        this.ⲆᐃⲆΔ[2].y = this.y - 17;
                        this.ⲆᐃⲆΔ[3].x = this.x + 22.5;
                        this.ⲆᐃⲆΔ[3].y = this.y + 5;
                        this.ⲆᐃⲆΔ[4].x = this.x - 7.5;
                        this.ⲆᐃⲆΔ[4].y = this.y + 1.5;
                }
                break;
            case hw.ᐃⵠⵠΔᐃ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hj, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = Bp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ui, 0.9, 1.05, 0.9, 0.2, 0.2);
                this.ᐃⲆΔΔᐃⵠⵠ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
                break;
            case hw.ⵠⵠⵠⲆⵠ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(mk, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: hj,
                    angle: 0
                };
                this.ΔΔⲆᐃ = op;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ⵠⲆⵠⵠΔ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = Qp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ln, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ⲆᐃⵠⲆΔ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(eh, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = vp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ln, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ⵠⵠⵠΔΔ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = gp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(cr, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ΔΔⲆⲆⵠ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = Vp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ΔⲆΔⲆᐃ:
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(mk, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ΔΔⲆᐃ = Np;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0.9, 1.05, 0.9, 0.2, 0.2);
                break;
            case hw.ΔⵠΔⵠⲆ:
                this.ΔΔⲆᐃ = Jp;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(fg, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                break;
            case hw.ⲆⵠᐃⲆⲆ:
                this.ΔΔⲆᐃ = Zp;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oe, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: cr,
                    angle: 0
                };
                break;
            case hw.ΔⵠᐃᐃΔ:
                this.ΔΔⲆᐃ = ap;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                break;
            case hw.ⵠΔᐃⲆⲆ:
                this.ΔΔⲆᐃ = cp;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: cr,
                    angle: 0
                };
                break;
            case hw.ⲆΔⵠⲆΔ:
                this.ΔΔⲆᐃ = zp;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                break;
            case hw.ⲆᐃⵠⵠⲆ:
                this.ⲆⲆΔΔⵠ = Hp;
                this.ᐃΔⵠᐃΔ = jp;
                this.rotate = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(mk, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: Sr,
                    angle: 0
                };
                break;
            case hw.ⵠⲆΔⵠᐃ:
                this.ΔΔⲆᐃ = Vc;
                this.ᐃⵠⲆⵠ = Math.floor(this.x / 100);
                this.Δᐃ = Math.floor(this.y / 100);
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Sr, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: hj,
                    angle: 0
                };
                this.opacity = 1;
                this.ⵠⲆⲆⲆⲆ = Yc;
                break;
            case hw.ΔᐃⲆⲆⵠ:
                this.ΔΔⲆᐃ = $c;
                this.ⲆΔⲆᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.15, 1, 0.3, 0.3);
                this.color = 0;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ln, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                break;
            case hw.ΔΔΔⵠΔ:
            case hw.ⵠⵠⲆΔᐃ:
            case hw.ⵠⲆᐃΔⵠ:
            case hw.ⲆΔΔΔⵠ:
            case hw.ΔⲆⲆᐃⲆ:
                this.ΔΔⲆᐃ = Hc;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: Bk,
                    angle: 0
                };
                break;
            case hw.ᐃⵠⵠⵠⲆ:
                this.ΔΔⲆᐃ = Hc;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Gq, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: oj,
                    angle: 0
                };
                this.ⵠⲆⲆⲆⲆ = Yc;
                break;
            case hw.ΔᐃⵠᐃΔ:
            case hw.ΔᐃᐃⵠⲆ:
            case hw.ⵠⵠᐃⲆΔ:
            case hw.ᐃⵠⲆΔⵠ:
            case hw.ΔⵠᐃΔΔ:
            case hw.ΔΔⵠᐃΔ:
            case hw.ⲆⵠᐃⵠΔ:
            case hw.ⵠᐃᐃΔⵠ:
            case hw.ⲆΔᐃΔᐃ:
            case hw.ⲆΔΔᐃΔ:
            case hw.ᐃⲆΔΔᐃ:
            case hw.ⵠΔⵠⲆΔ:
                this.ΔΔⲆᐃ = Hc;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: hh,
                    angle: 0
                };
                this.ⵠⲆⲆⲆⲆ = Uc;
                break;
            case hw.ᐃᐃⵠⵠΔ:
                this.ΔΔⲆᐃ = ip;
                this.opacity = 1;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: wq,
                    angle: 0
                };
                var n = this.angle % (Math.PI / 2);
                if (Math.PI / 4 > n) {
                    this.angle -= n;
                } else {
                    this.angle += Math.PI / 2 - n;
                }
                break;
            case hw.ᐃⵠᐃⵠⵠ:
                this.ΔΔⲆᐃ = Zc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case hw.ⵠⲆⵠⲆΔᐃΔ:
                this.ΔΔⲆᐃ = Kc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case hw.ᐃᐃΔΔΔⵠΔ:
                this.ΔΔⲆᐃ = ep;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case hw.ᐃⲆᐃΔⲆᐃΔ:
                this.ΔΔⲆᐃ = Xc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case hw.ΔⵠⵠⲆⵠⵠΔ:
                this.ΔΔⲆᐃ = Lc;
                this.angle = Math.PI * Math.random() * 2;
                break;
            case hw.ᐃⲆⲆⲆᐃ:
                this.ⲆΔᐃⲆ = function (a) {
                    this.lock = this.info & 8192 ? 1 : 0;
                    this.info = this.info & 8191;
                    this.action = a;
                };
                this.ΔΔⲆᐃ = Sc;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: eh,
                    angle: 0
                };
                this.lock = 0;
                this.ⲆΔᐃⲆ(this.action);
                break;
            case hw.ⵠⵠᐃⲆⵠ:
            case hw.ᐃΔᐃⲆⵠ:
            case hw.ⵠᐃᐃⲆΔ:
            case hw.ΔⲆⲆᐃⵠ:
            case hw.ᐃⲆⵠΔΔ:
            case hw.ⵠᐃⲆᐃᐃ:
            case hw.Δᐃᐃᐃⵠ:
            case hw.ⵠⲆⲆΔᐃ:
            case hw.ΔΔΔⲆᐃ:
            case hw.ᐃᐃⵠᐃⲆ:
            case hw.ⲆⵠΔⵠΔ:
            case hw.ⵠᐃᐃΔᐃ:
                this.ΔΔⲆᐃ = Qc;
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oe, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ⵠⲆⲆⲆⲆ = Uc;
                break;
            case hw.ΔᐃΔⵠΔ:
                this.ⲆⲆΔΔⵠ = Tu;
                this.ΔΔⲆᐃ = Yp;
                this.ᐃΔⵠᐃΔ = qp;
                this.ⵠΔⲆⲆ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.02, 0.02);
                this.ⲆΔⲆᐃΔ = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 1, 1.23, 1.18, 0.04, 0.04);
                this.ⲆΔᐃΔ = {
                    ᐃΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Bk, 1, 1, 0, 10, 10),
                    ⲆΔᐃⲆ: false,
                    angle: 0
                };
                this.ⲆΔᐃⲆ = function (a) {
                    this.action = a;
                };
        }
    }
    function lw(a, b, c, d) {
        this.id = a;
        this.ᐃᐃᐃᐃΔ = (a + 5) * 8;
        this.ΔΔⵠⲆⲆ = uo / 1366;
        this.x = b;
        this.y = c;
        this.c = Math.sin(d);
        this.ⲆⲆᐃⵠ = Math.cos(d);
        this.alpha = 0;
    }
    function mw() {
        this.ΔᐃⵠΔⵠ = "";
        this.ⲆΔⲆΔ = 0;
        this.ΔᐃΔⲆⵠ = 0;
        this.ⲆⵠⲆΔⲆ = 0;
        this.ᐃΔᐃᐃⲆΔⲆ = 0;
        this.ᐃⲆᐃⲆⲆ = 0;
        this.ⲆΔΔⵠΔ = 0;
        this.ᐃᐃᐃⵠΔ = 0;
        this.level = 0;
        this.label = null;
        this.ᐃⵠΔΔⵠᐃⵠ = null;
        this.ΔᐃᐃΔᐃΔΔ = null;
        this.ⵠᐃⲆⲆⲆ = false;
        this.ⵠⲆⲆΔΔ = 0;
    }
    function nw() {
        Math.random();
        return "p";
    }
    function ow() {
        Math.random();
        return "e";
    }
    function pw() {
        Math.random();
        return "t";
    }
    function qw() {
        Math.random();
        return "n";
    }
    function rw() {
        Math.random();
        return "a";
    }
    function sw() {
        Math.random();
        return "d";
    }
    function pw() {
        Math.random();
        return "t";
    }
    function tw() {
        Math.random();
        return "o";
    }
    function uw() {
        Math.random();
        return "s";
    }
    function vw() {
        Math.random();
        return "i";
    }
    function ww() {
        Math.random();
        return "r";
    }
    function nw() {
        Math.random();
        return "p";
    }
    function rw() {
        Math.random();
        return "a";
    }
    function xw() {
        Math.random();
        return "C";
    }
    function yw() {
        this.ⲆⲆⵠⲆⲆ = function () { };
        this.Ⲇᐃᐃⵠᐃ = {
            ⲆΔᐃⵠ: 1,
            open: false,
            ⵠⵠΔᐃⲆ: 1
        };
        this.ᐃⲆΔΔⵠ = {
            ⲆΔᐃⵠ: 1,
            ⵠⵠΔᐃⲆ: -1,
            open: il
        };
        this.ⵠΔᐃⲆ = {
            ⲆΔᐃⵠ: 1,
            ᐃΔⵠΔᐃΔᐃ: 0,
            ΔⵠⲆᐃΔ: 0,
            ⵠⵠΔᐃⲆ: -1,
            open: false
        };
        this.ⲆᐃΔᐃ = {
            ΔⵠᐃᐃⵠⲆΔ: 0,
            ⵠⲆᐃⲆⵠᐃⵠ: 0,
            type: 0,
            ⵠᐃⲆⵠⵠΔⲆ: 0,
            ⲆΔᐃⵠ: 1,
            ⵠⵠΔᐃⲆ: -1,
            open: $h
        };
        this.ᐃᐃᐃⵠ = {
            ΔⵠᐃᐃⵠⲆΔ: 0,
            ΔⵠΔⵠΔΔΔ: 0,
            ΔⵠⲆᐃΔ: 0,
            ⲆΔᐃⵠ: 1,
            ⵠⵠΔᐃⲆ: -1,
            open: false
        };
        this.sign = {
            open: false,
            ⵠⵠΔᐃⲆ: -1
        };
        this.ⲆᐃΔᐃⲆ = {
            ΔⲆⵠⵠ: 0,
            ⲆΔᐃⵠ: 1,
            ⵠⵠΔᐃⲆ: -1,
            open: false
        };
        this.ΔⲆⵠᐃⵠ = {
            enabled: eh,
            ⵠΔⵠⵠΔ: -1,
            label: false,
            now: -1,
            ΔΔⲆᐃ: av
        };
        this.ⵠⵠⵠⵠ = {
            id: -1,
            ΔⲆⵠⵠ: 0,
            ⲆΔᐃⵠ: 1,
            ⵠⵠΔᐃⲆ: -1,
            open: false,
            lock: false,
            locked: oj,
            ᐃᐃⲆΔⵠⵠᐃ: Sr,
            ΔⵠⵠᐃᐃⵠⲆ: $h
        };
        this.ⵠᐃⲆⲆⲆ = true;
        this.reconnect = {
            enabled: wq,
            rotate: 0
        };
        this.key = ΔᐃⲆᐃ.ᐃⲆᐃᐃⵠⵠΔ("key", cj.location.href);
        var a = ΔᐃⲆᐃ.ᐃⲆᐃᐃⵠⵠΔ("egg", cj.location.href);
        if (a) {
            rf.ⲆΔⲆΔ = parseInt(a);
        }
        this.beta = cj.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
        if (this.key && this.beta) {
            ᐃⵠΔᐃ.set("starve_beta", this.key);
        } else if (this.beta) {
            this.key = ᐃⵠΔᐃ.get("starve_beta");
        }
        this.ⲆⲆⵠⵠΔ = ᐃⵠΔᐃ.get("starve_token") ? ᐃⵠΔᐃ.get("starve_token") : ΔᐃⲆᐃ.ⲆⵠᐃΔΔⲆⲆ(dw.ⲆΔⵠΔⵠⵠᐃⵠΔ);
        cj.baguette();
        var b = cj.kot2;
        function c() {
            this.seed = 1;
            this.ΔⲆⵠⲆⵠⲆⲆ = 2;
            this.ⲆⵠⲆᐃᐃⵠᐃ = 3;
            this.ᐃᐃΔᐃⵠⲆⵠᐃⲆ = 1;
            this.ⵠΔⵠⵠᐃΔΔⵠⲆ = 2;
            this.ᐃⲆΔⲆΔΔⲆⵠⵠ = 3;
            this.ⵠⵠᐃⵠⵠⲆⵠ = function (a) {
                this.seed = 2 + Math.floor(Math.random() * ew.ⵠᐃΔᐃⵠ);
            };
            this.ΔⲆΔᐃᐃΔΔ = function (a) {
                this.ΔⲆⵠⲆⵠⲆⲆ = 2 + Math.floor(Math.random() * ew.ⵠᐃΔᐃⵠ);
            };
            this.ΔⲆΔᐃΔⵠⵠ = function (a) {
                this.ⲆⵠⲆᐃᐃⵠᐃ = 2 + Math.floor(ew.ⵠᐃΔᐃⵠ * Math.random());
            };
            this.ⲆΔΔᐃⵠᐃⲆᐃΔ = function (a) {
                this.ᐃᐃΔᐃⵠⲆⵠᐃⲆ = 2 + Math.floor(ew.ⵠᐃΔᐃⵠ * Math.random());
            };
            this.ᐃΔⵠⲆᐃⵠᐃΔᐃ = function (a) {
                this.ⵠΔⵠⵠᐃΔΔⵠⲆ = 2 + Math.floor(Math.random() * ew.ⵠᐃΔᐃⵠ);
            };
            this.ⲆΔⵠⵠΔΔⵠΔⲆ = function (a) {
                this.ᐃⲆΔⲆΔΔⲆⵠⵠ = 2 + Math.floor(Math.random() * ew.ⵠᐃΔᐃⵠ);
            };
            this.ⲆΔⵠΔⲆⲆΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; m < a;) {
                    var n = m * f % ᐃⵠⵠⵠᐃⵠᐃ;
                    var o = ΔΔⲆᐃᐃΔⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(o * i + j);
                        if (m > k && m < a) {
                            var q = Math.random() > 0.5 ? cf * -10 : cf * 10;
                            var r = p * e;
                            this.ⵠᐃⵠⵠΔⲆⵠ[n] = Math.max(-ew.ⲆᐃᐃᐃⵠΔⵠ, Math.min(ew.ⲆᐃᐃᐃⵠΔⵠ, this.ⵠᐃⵠⵠΔⲆⵠ[n] + q));
                            this.ᐃΔⲆⵠΔᐃⲆ[n] = Math.max(-ew.ᐃⲆⲆⵠᐃΔᐃ, Math.min(ew.ᐃⲆⲆⵠᐃΔᐃ, this.ᐃΔⲆⵠΔᐃⲆ[n] + q));
                            if (r > 0) {
                                lo.beginPath();
                                lo.arc(m + Ww.ᐃⵠΔΔ.x + this.ᐃΔⲆⵠΔᐃⲆ[n], c + this.ⵠᐃⵠⵠΔⲆⵠ[n] - ew.ⲆᐃᐃᐃⵠΔⵠ * 0.8, r, 0, Math.PI * 2);
                                if (lf.transition) {
                                    var t = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                                    lo.fillStyle = Bv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    lo.fillStyle = Pr.ⲆΔΔΔᐃⵠⲆ[lf.time];
                                }
                                lo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ⵠᐃΔΔΔⵠΔ = function (c, e, f, i, j, k, a) {
                for (var m = 1; a > m;) {
                    var n = f * m % ᐃⵠⵠⵠᐃⵠᐃ;
                    var o = ΔΔⲆᐃᐃΔⵠ[n];
                    if (o < 0.1) {
                        p += 50;
                        m += 50;
                    } else {
                        var p = Math.floor(i * o + j);
                        if (k < m && m < a) {
                            var q = Math.random() > 0.5 ? cf * -10 : cf * 10;
                            var r = p * e;
                            this.ⵠⵠⲆⵠΔ[n] = Math.max(-ew.ⲆᐃᐃᐃⵠΔⵠ, Math.min(ew.ⲆᐃᐃᐃⵠΔⵠ, this.ⵠⵠⲆⵠΔ[n] + q));
                            this.ᐃᐃⲆⵠⲆ[n] = Math.max(-ew.ᐃⲆⲆⵠᐃΔᐃ, Math.min(ew.ᐃⲆⲆⵠᐃΔᐃ, this.ᐃᐃⲆⵠⲆ[n] + q));
                            if (r > 0) {
                                lo.beginPath();
                                lo.arc(c + this.ⵠⵠⲆⵠΔ[n] - ew.ⲆᐃᐃᐃⵠΔⵠ * 0.8, m + Ww.ᐃⵠΔΔ.y + this.ᐃᐃⲆⵠⲆ[n], r, 0, Math.PI * 2);
                                if (lf.transition) {
                                    var t = lf.time ? 1 - lf.ⲆⲆΔᐃ.ᐃⵠΔ : lf.ⲆⲆΔᐃ.ᐃⵠΔ;
                                    lo.fillStyle = Bv(83, 156, 160, 236, 247, 249, t);
                                } else {
                                    lo.fillStyle = Pr.ⲆΔΔΔᐃⵠⲆ[lf.time];
                                }
                                lo.fill();
                            }
                        }
                        m += p * 2;
                    }
                }
            };
            this.ΔᐃᐃΔⲆⲆΔⵠⵠ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(d - ew.ᐃⲆⲆᐃⲆ - e - 2) / ew.ⲆΔⵠⲆⲆⵠⵠ) === 0) {
                    this.ΔⲆΔᐃΔⵠⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⲆΔⵠΔⲆⲆΔ(d, h, this.ⲆⵠⲆᐃᐃⵠᐃ, 18, 16, f, g);
                lo.globalAlpha = 1;
                if ((h = -(b - ew.ⲆᐃᐃⲆΔ - e + 500) / ew.ⲆΔⵠΔⵠⲆⲆ) === 0) {
                    this.ⵠⵠᐃⵠⵠⲆⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⲆΔⵠΔⲆⲆΔ(b, h, this.seed, 12, 10, f, g);
                lo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - ew.ⵠⲆΔᐃΔ - e + 698) / ew.ᐃΔⵠΔΔⵠᐃ) <= 0.01) {
                        this.ΔⲆΔᐃᐃΔΔ();
                    }
                    lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                    this.ⲆΔⵠΔⲆⲆΔ(c, h, this.ΔⲆⵠⲆⵠⲆⲆ, 6, 6, f, g);
                    lo.globalAlpha = 1;
                }
            };
            this.ᐃᐃᐃⲆᐃΔⲆⵠⵠ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                var h = -(-d + ew.ᐃⲆⲆᐃⲆ + e + 2) / ew.ⲆΔⵠⲆⲆⵠⵠ;
                if (h === 0) {
                    this.ΔⲆΔᐃΔⵠⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⲆΔⵠΔⲆⲆΔ(d, h, this.ⲆⵠⲆᐃᐃⵠᐃ, 18, 16, f, g);
                lo.globalAlpha = 1;
                h = -(-b + ew.ⲆᐃᐃⲆΔ + e) / ew.ⲆΔⵠΔⵠⲆⲆ;
                if (h === 0) {
                    this.ⵠⵠᐃⵠⵠⲆⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⲆΔⵠΔⲆⲆΔ(b, h, this.seed, 12, 10, f, g);
                lo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + ew.ⵠⲆΔᐃΔ + e) / ew.ᐃΔⵠΔΔⵠᐃ) <= 0.01) {
                        this.ΔⲆΔᐃᐃΔΔ();
                    }
                    lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                    this.ⲆΔⵠΔⲆⲆΔ(c, h, this.ΔⲆⵠⲆⵠⲆⲆ, 6, 6, f, g);
                    lo.globalAlpha = 1;
                }
            };
            this.ⵠᐃⵠᐃⲆⲆᐃⵠΔ = function (b, c, d, e, f, g) {
                var h;
                f -= 30;
                g += 30;
                if ((h = -(-d + ew.ᐃⲆⲆᐃⲆ + e + 2) / ew.ⲆΔⵠⲆⲆⵠⵠ) === 0) {
                    this.ΔⲆΔᐃΔⵠⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⵠᐃΔΔΔⵠΔ(d, h, this.ⲆⵠⲆᐃᐃⵠᐃ, 18, 16, f, g);
                lo.globalAlpha = 1;
                if ((h = -(-b + ew.ⲆᐃᐃⲆΔ + e) / ew.ⲆΔⵠΔⵠⲆⲆ) === 0) {
                    this.ⵠⵠᐃⵠⵠⲆⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⵠᐃΔΔΔⵠΔ(b, h, this.seed, 12, 10, f, g);
                lo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(-c + ew.ⵠⲆΔᐃΔ + e) / ew.ᐃΔⵠΔΔⵠᐃ) <= 0.01) {
                        this.ΔⲆΔᐃᐃΔΔ();
                    }
                    lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                    this.ⵠᐃΔΔΔⵠΔ(c, h, this.ΔⲆⵠⲆⵠⲆⲆ, 6, 6, f, g);
                    lo.globalAlpha = 1;
                }
            };
            this.ᐃⲆⵠᐃⵠΔᐃⲆΔ = function (b, c, d, e, f, g) {
                f -= 30;
                g += 30;
                if ((h = -(d - ew.ᐃⲆⲆᐃⲆ - e - 2) / ew.ⲆΔⵠⲆⲆⵠⵠ) === 0) {
                    this.ΔⲆΔᐃΔⵠⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⵠᐃΔΔΔⵠΔ(d, h, this.ⲆⵠⲆᐃᐃⵠᐃ, 18, 16, f, g);
                lo.globalAlpha = 1;
                var h = -(b - ew.ⲆᐃᐃⲆΔ - e + 500) / ew.ⲆΔⵠΔⵠⲆⲆ;
                if (h === 0) {
                    this.ⵠⵠᐃⵠⵠⲆⵠ();
                }
                lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                this.ⵠᐃΔΔΔⵠΔ(b, h, this.seed, 12, 10, f, g);
                lo.globalAlpha = 1;
                if (c !== -1) {
                    if ((h = -(c - ew.ⵠⲆΔᐃΔ - e + 698) / ew.ᐃΔⵠΔΔⵠᐃ) <= 0.01) {
                        this.ΔⲆΔᐃᐃΔΔ();
                    }
                    lo.globalAlpha = ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(h);
                    this.ⵠᐃΔΔΔⵠΔ(c, h, this.ΔⲆⵠⲆⵠⲆⲆ, 6, 6, f, g);
                    lo.globalAlpha = 1;
                }
            };
            this.w1 = {
                r: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⵠⲆⲆⵠⲆⵠ, 0, 10, ew.ⵠⲆⲆⲆΔ, ew.ⵠⲆⲆⲆΔ, ew.ⲆΔⵠⲆⲆⵠⵠ),
                ᐃΔⵠⵠ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ⲆⲆⲆΔⵠⵠΔ, 0, 10, ew.ⲆΔⵠⲆⲆⵠⵠ, ew.ⲆΔⵠⲆⲆⵠⵠ, ew.ⵠⲆⲆⲆΔ)
            };
            this.w2 = {
                r: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ΔᐃⵠⵠⵠⲆᐃ, 0, 10, ew.ⲆᐃᐃⲆᐃⵠᐃ, ew.ⲆᐃᐃⲆᐃⵠᐃ, ew.ⲆΔⵠΔⵠⲆⲆ),
                ᐃΔⵠⵠ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ, 0, 10, ew.ⲆΔⵠΔⵠⲆⲆ, ew.ⲆΔⵠΔⵠⲆⲆ, ew.ⲆᐃᐃⲆᐃⵠᐃ)
            };
            this.w3 = {
                r: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ⲆⵠⵠΔΔⵠᐃ, 0, 10, ew.ΔΔᐃⲆΔᐃⲆ, ew.ΔΔᐃⲆΔᐃⲆ, ew.ᐃΔⵠΔΔⵠᐃ),
                ᐃΔⵠⵠ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ, 0, 10, ew.ᐃΔⵠΔΔⵠᐃ, ew.ᐃΔⵠΔΔⵠᐃ, ew.ΔΔᐃⲆΔᐃⲆ)
            };
            this.ᐃᐃΔⵠᐃᐃᐃⲆΔ = function (a) {
                if (a.r.x === a.r.ᐃΔᐃⵠᐃ) {
                    if (a.ᐃΔⵠⵠ.ᐃΔᐃⵠᐃ === a.ᐃΔⵠⵠ.x) {
                        return a.r;
                    } else {
                        return a.ᐃΔⵠⵠ;
                    }
                } else {
                    return a.r;
                }
            };
            this.ᐃⲆⵠ = function (a) {
                var b;
                if (a.r.x === a.r.ᐃΔᐃⵠᐃ) {
                    if (a.ᐃΔⵠⵠ.ᐃΔᐃⵠᐃ === a.ᐃΔⵠⵠ.x) {
                        a.r.ⲆᐃΔⵠᐃΔⲆ();
                        a.ᐃΔⵠⵠ.ⲆᐃΔⵠᐃΔⲆ();
                        b = a.r;
                    } else {
                        b = a.ᐃΔⵠⵠ;
                    }
                } else {
                    b = a.r;
                }
                b.ⲆΔΔᐃⲆᐃⲆ(b.ᐃΔᐃⵠᐃ);
                return b;
            };
            this.ⵠⵠⲆⵠΔ = [];
            this.ᐃᐃⲆⵠⲆ = [];
            this.ⵠᐃⵠⵠΔⲆⵠ = [];
            this.ᐃΔⲆⵠΔᐃⲆ = [];
            this.ⲆⲆⵠⲆⲆ = function () {
                for (var a = 0; ᐃⵠⵠⵠᐃⵠᐃ > a; a++) {
                    this.ⵠⵠⲆⵠΔ[a] = Math.floor(ew.ⲆᐃᐃᐃⵠΔⵠ * ΔΔⲆᐃᐃΔⵠ[a]);
                    this.ᐃᐃⲆⵠⲆ[a] = Math.floor(ew.ᐃⲆⲆⵠᐃΔᐃ * ΔΔⲆᐃᐃΔⵠ[a]);
                    this.ⵠᐃⵠⵠΔⲆⵠ[a] = Math.floor(ΔΔⲆᐃᐃΔⵠ[a] * ew.ⲆᐃᐃᐃⵠΔⵠ);
                    this.ᐃΔⲆⵠΔᐃⲆ[a] = Math.floor(ew.ᐃⲆⲆⵠᐃΔᐃ * ΔΔⲆᐃᐃΔⵠ[a]);
                }
                this.w1.r.x = this.w1.r.ᐃΔᐃⵠᐃ;
                this.w2.r.ᐃᐃΔⲆⲆ = 3.5;
                this.w3.r.ᐃᐃΔⲆⲆ = 2;
            };
            this.ⲆⲆⵠⲆⲆ();
        }
        this.ⲆⲆⵠⵠΔ = b.substring(0, 6) + this.ⲆⲆⵠⵠΔ.substring(6);
        this.ⵠᐃⲆᐃⲆⵠⲆ = ᐃⵠΔᐃ.get("starve_token_id") ? ᐃⵠΔᐃ.get("starve_token_id") : "";
        this.id = 0;
        this.ΔⲆΔΔ = 0;
        this.ⵠΔⲆ = 0;
        this.ⲆᐃΔⲆⲆΔᐃ = {
            ⵠᐃΔᐃᐃⵠⵠ: 0,
            ⵠⲆⲆΔΔ: 0,
            ᐃⵠⵠΔⵠ: 0,
            ⵠⲆⲆⵠⲆᐃⲆ: ""
        };
        this.ΔⲆΔⵠⵠⵠΔΔΔ = {
            connected: 0,
            ΔᐃⲆⵠⵠⵠⲆ: new Date().getTime()
        };
        this.ⵠᐃΔᐃΔ = [];
        this.ᐃⵠⲆᐃΔⲆΔ = function (a) {
            for (var b = 0; this.ⵠᐃΔᐃΔ.length > b; b++) {
                if (this.ⵠᐃΔᐃΔ[b] == a) {
                    return _n;
                }
            }
            return cr;
        };
        this.ᐃᐃᐃⲆΔ = {
            ⵠΔⵠⵠΔ: 0,
            time: 0,
            value: 0,
            open: false,
            ΔΔⲆᐃ: function () {
                if (this.open) {
                    var a = new Date().getTime();
                    this.time = Math.floor((a - this.ⵠΔⵠⵠΔ) / 1000);
                    if (this.time < 60) {
                        Yw.ᐃᐃᐃⲆΔ.button.ΔΔⲆᐃ(lo);
                    } else {
                        document.getElementById("shop_starterkit").style.display = "none";
                        this.open = wq;
                    }
                }
            }
        };
        this.ⲆⵠⵠⲆᐃ = {
            id: -1,
            ⲆΔᐃⵠ: -1,
            lock: 0,
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(mk, 0, 1, 0, 1 / 30, 1),
            wait: false
        };
        this.ⲆᐃΔᐃᐃ = {
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1 / 5, 1),
            wait: Bk
        };
        this.ⲆⵠΔΔΔ = {
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Ui, 0, 1, 0, 1, 1),
            wait: Sr
        };
        this.ⲆΔᐃⵠⲆ = {
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Oh, 0, 1, 0, 1 / 10, 1),
            wait: yg
        };
        this.ᐃⵠΔΔ = new ΔᐃⲆᐃ.ΔᐃⵠᐃⲆΔΔ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 0.4, 0, 0, hq, iq, hq, iq);
        this.ᐃⵠΔΔ.ⵠΔⵠⵠΔ = 0;
        this.ᐃⵠΔΔ.ⵠΔᐃⲆⲆΔⵠ = 0;
        this.ᐃⵠΔΔ.ⲆΔᐃⲆ = function () {
            if (this.ⵠΔᐃⲆⲆΔⵠ > 0) {
                this.ⵠΔᐃⲆⲆΔⵠ -= cf;
            } else {
                var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                if (a) {
                    this.ⵠΔⵠⵠΔ = 0;
                    var b = Math.max(Math.min(hq - a.x, -2), 2 - lf.w + uo);
                    var c = Math.max(Math.min(iq - a.y, -2), 2 - lf.ΔᐃⲆ + vo);
                    this.ⲆΔΔᐃⲆᐃⲆ({
                        x: b,
                        y: c
                    });
                } else {
                    this.ⵠΔⵠⵠΔ += cf;
                    if (this.ⵠΔⵠⵠΔ > 3) {
                        this.ⵠΔⵠⵠΔ = 0;
                        if (!Ww.reconnect.enabled) {
                            ⵠΔᐃᐃ.ᐃΔΔⲆΔΔⵠᐃⵠ();
                        }
                    }
                }
            }
        };
        this.ᐃⵠΔΔ.w = screen.width;
        this.ᐃⵠΔΔ.ΔᐃⲆ = screen.height;
        this.ᐃⵠΔΔ.ⵠᐃΔᐃᐃⲆΔ = this.ᐃⵠΔΔ.w;
        this.ᐃⵠΔΔ.ⵠⲆᐃΔⵠⵠᐃ = this.ᐃⵠΔΔ.ΔᐃⲆ;
        this.ᐃⵠΔΔ.rx = 0;
        this.ᐃⵠΔΔ.ry = 0;
        this.ᐃⵠΔΔ.ᐃⵠⲆᐃΔⲆⵠΔΔ = 0;
        this.ᐃⵠΔΔ.ᐃΔᐃᐃᐃΔⵠΔⲆ = 0;
        this.ᐃⵠΔΔ.ⵠΔⵠⵠⲆ = function (a, b) {
            this.x = -Math.min(Math.max(-lf.ⵠⵠⵠⵠΔⲆᐃ * 2, a - lf.ⵠⵠⵠⵠΔⲆᐃ - this.ⵠᐃΔᐃᐃⲆΔ / 2), lf.w - this.ⵠᐃΔᐃᐃⲆΔ);
            this.y = -Math.min(Math.max(-lf.ⲆᐃᐃⵠⵠⵠⲆ * 2, b - (lf.ⲆᐃᐃⵠⵠⵠⲆ + this.ⵠⲆᐃΔⵠⵠᐃ) / 2), lf.ΔᐃⲆ - this.ⵠⲆᐃΔⵠⵠᐃ + lf.ⲆᐃᐃⵠⵠⵠⲆ);
            this.ᐃΔᐃⵠᐃ = this.x;
            this.ⲆⵠⲆⵠⵠⲆⲆ = this.y;
        };
        this.control = {
            angle: 0,
            timeout: 0,
            ᐃⲆᐃᐃᐃΔⵠ: 0,
            ᐃⲆΔⲆ: 0,
            attack: 0,
            ⲆΔᐃⲆ: function () {
                var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                if (a) {
                    var b = {
                        x: Ww.ᐃⵠΔΔ.x + a.x,
                        y: Ww.ᐃⵠΔΔ.y + a.y
                    };
                } else {
                    b = jq;
                }
                var c = ΔᐃⲆᐃ.ΔⵠⲆΔⵠⲆⵠ(mf.ΔᐃⵠΔ, b);
                var d = hj;
                this.ᐃⲆΔⲆ += cf;
                if (!mf.state) {
                    if (a && !(a.action & _v.ᐃᐃᐃᐃⵠΔⲆ) && this.ᐃⲆΔⲆ > dw.ᐃᐃᐃᐃⵠΔⲆ) {
                        this.attack = 1;
                        d = Wh;
                        this.ᐃⲆΔⲆ = 0;
                        ⵠΔᐃᐃ.ⲆΔⵠⵠⲆⲆⵠᐃΔ(c);
                    }
                }
                if (a) {
                    a.angle = c;
                    a.ⲆⵠⲆΔΔⵠᐃ = c;
                }
                if (!d) {
                    this.timeout += cf;
                    if (this.timeout > dw.ᐃᐃⲆⵠⲆⲆⲆ) {
                        this.timeout = 0;
                        if (Math.abs(this.angle - c) > 0.005) {
                            ⵠΔᐃᐃ.ᐃⵠⵠⵠⲆᐃⵠⵠᐃ(c);
                            this.angle = c;
                        }
                    }
                }
                if (!Ww.ᐃᐃᐃΔᐃ.open && !Ww.ⵠⲆⵠⲆⲆ.open) {
                    var e = 0;
                    if (vf.ⲆⲆⵠᐃΔⵠⵠ()) {
                        e |= 1;
                    }
                    if (vf.ⲆΔᐃΔⲆⲆΔ()) {
                        e |= 2;
                    }
                    if (vf.ⵠⲆᐃᐃᐃΔⲆ()) {
                        e |= 4;
                    }
                    if (vf.ⲆⵠΔⲆΔⵠⲆ()) {
                        e |= 8;
                    }
                    if (this.ᐃⲆᐃᐃᐃΔⵠ != e) {
                        ⵠΔᐃᐃ.ⵠᐃⵠⲆⵠΔᐃⲆⵠ(e);
                    }
                    this.ᐃⲆᐃᐃᐃΔⵠ = e;
                }
            }
        };
        this.ᐃⲆⲆⲆ = {
            c: 1,
            ᐃΔⵠⵠ: 1,
            ΔᐃⲆ: 1,
            ᐃⲆⵠ: 1,
            ΔⲆⵠ: 1,
            ΔⲆⲆⵠᐃⵠⲆ: 1,
            ᐃⲆᐃⵠⲆᐃⵠ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(true, 0, 1, 0, 3, 3),
            ⲆⲆΔᐃΔΔⵠ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Wh, 0, 1, 0, 2, 2),
            ⲆᐃᐃⵠⵠᐃⲆ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(Wh, 0, 1, 0, 3, 3),
            ᐃΔᐃⵠᐃΔΔ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(_n, 0, 1, 0, 3, 3),
            ΔΔⲆⲆΔⲆᐃ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(ft, 0, 1, 0, 3, 3),
            ᐃⵠᐃⵠⵠᐃⵠ: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(true, 0, 1, 0, 3, 3),
            ᐃᐃⲆⲆⲆ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ΔΔⵠⲆⲆ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ᐃΔᐃⵠᐃᐃⵠ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ⵠᐃΔΔΔⵠᐃ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ΔᐃᐃⲆΔᐃⲆ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ᐃⲆΔⵠⲆ: new ΔᐃⲆᐃ.ΔᐃⲆᐃᐃ(ΔᐃⲆᐃ.ᐃⲆⲆⵠΔΔⲆ, 0, 1, 0, 0, 1),
            ⲆΔᐃⲆ: function () {
                this.ᐃⲆᐃⵠⲆᐃⵠ.ⲆΔᐃⲆ();
                this.ⲆⲆΔᐃΔΔⵠ.ⲆΔᐃⲆ();
                this.ⲆᐃᐃⵠⵠᐃⲆ.ⲆΔᐃⲆ();
                this.ᐃΔᐃⵠᐃΔΔ.ⲆΔᐃⲆ();
                this.ΔΔⲆⲆΔⲆᐃ.ⲆΔᐃⲆ();
                this.ᐃⵠᐃⵠⵠᐃⵠ.ⲆΔᐃⲆ();
                this.ᐃᐃⲆⲆⲆ.ⲆΔΔᐃⲆᐃⲆ(this.c);
                this.ΔΔⵠⲆⲆ.ⲆΔΔᐃⲆᐃⲆ(this.ᐃΔⵠⵠ);
                this.ᐃΔᐃⵠᐃᐃⵠ.ⲆΔΔᐃⲆᐃⲆ(this.ΔᐃⲆ);
                this.ⵠᐃΔΔΔⵠᐃ.ⲆΔΔᐃⲆᐃⲆ(this.ᐃⲆⵠ);
                this.ΔᐃᐃⲆΔᐃⲆ.ⲆΔΔᐃⲆᐃⲆ(this.ΔⲆⵠ);
                this.ᐃⲆΔⵠⲆ.ⲆΔΔᐃⲆᐃⲆ(this.ΔⲆⲆⵠᐃⵠⲆ);
            }
        };
        this.ⵠΔᐃⵠΔⲆᐃ = false;
        this.ᐃⵠᐃⲆⵠΔⵠ = Sr;
        this.ΔⵠᐃⲆⲆ = false;
        this.ⵠⵠⵠΔΔΔΔ = eh;
        this.ᐃⲆΔᐃ = {
            max: ew.ⲆⲆⵠⵠⵠⵠΔ,
            ⲆⲆΔⲆⲆⵠⲆ: 0,
            ⲆⵠⲆΔⲆ: 0,
            ⲆⲆΔⵠ: [],
            ⵠΔⵠᐃⵠ: [],
            ⲆΔⵠᐃΔΔⲆ: function (a, b) {
                if (a === 1) {
                    this.ⲆⵠⲆΔⲆ = ew.ⵠⲆΔᐃΔⲆΔⲆⵠ;
                }
                this.ⲆⲆΔⲆⲆⵠⲆ += b;
                this.max = ew.ⲆⲆⵠⵠⵠⵠΔ + this.ⲆⲆΔⲆⲆⵠⲆ + this.ⲆⵠⲆΔⲆ;
            },
            ⵠᐃΔᐃΔΔᐃ: {
                item: -1,
                ⲆⲆ: null,
                ⵠⵠᐃΔⲆ: 0,
                ⲆΔᐃΔΔΔⲆ: 0,
                ⵠⵠΔΔⵠ: -1,
                ᐃᐃᐃΔⲆ: -1,
                ⲆᐃⲆⲆⵠ: function (a) {
                    if (!!this.ⵠⵠᐃΔⲆ && (a.x !== this.ⵠⵠΔΔⵠ || a.y !== this.ᐃᐃᐃΔⲆ)) {
                        this.ⲆΔᐃΔΔΔⲆ = 1;
                    }
                },
                start: function (a, b) {
                    this.ⵠⵠΔΔⵠ = b.x;
                    this.ᐃᐃᐃΔⲆ = b.y;
                    this.item = a;
                    this.ⲆⲆ = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ[a].info.ⲆⲆ[2];
                    this.ⵠⵠᐃΔⲆ = 1;
                },
                stop: function () {
                    this.ⵠⵠᐃΔⲆ = 0;
                    this.ⲆΔᐃΔΔΔⲆ = 0;
                    this.ⵠⵠΔΔⵠ = -1;
                    this.ᐃᐃᐃΔⲆ = -1;
                },
                release: function () {
                    var a = -1;
                    var b = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ;
                    var c = 0;
                    if (this.ⵠⵠᐃΔⲆ && this.ⲆΔᐃΔΔΔⲆ) {
                        for (var d = 0; d < b.length; d++) {
                            if (b[d].info.state === Lv) {
                                a = d;
                                break;
                            }
                        }
                        if (a !== -1 && a !== this.item && b[this.item]) {
                            c = 1;
                            var f = b[a];
                            b[a] = b[this.item];
                            b[this.item] = f;
                            Yw.ᐃᐃΔⵠᐃᐃᐃ();
                        }
                    }
                    this.stop();
                    return c;
                },
                ΔΔⲆᐃ: function (a, b) {
                    if (this.ⵠⵠᐃΔⲆ && this.ⲆΔᐃΔΔΔⲆ) {
                        Jc(lo, this.ⲆⲆ, Math.floor(a - this.ⲆⲆ.width / 2), Math.floor(b - this.ⲆⲆ.height / 2));
                    }
                }
            },
            ⲆⲆⵠᐃᐃⵠⲆⲆⲆ: function (a) {
                for (d = 0; d < a.length; d++) {
                    if (this.ⲆⲆΔⵠ[a[d][0]] == a[d][1]) {
                        return yj;
                    }
                }
                return El;
            },
            ⵠⵠΔⲆⲆ: function (a) {
                for (var b = 0; b < this.ⵠΔⵠᐃⵠ.length; b++) {
                    if (this.ⵠΔⵠᐃⵠ[b].id == a) {
                        return b;
                    }
                }
                return -1;
            },
            ᐃΔⲆᐃΔⲆᐃ: function (a, b) {
                this.ⲆⲆΔⵠ[a] = 0;
                this.ⵠΔⵠᐃⵠ.splice(b, 1);
                Yw.ᐃᐃΔⵠᐃᐃᐃ();
            },
            ᐃΔⲆᐃΔⲆΔ: function (a, b, c) {
                ⲆΔᐃⲆ = true;
                this.ⲆⲆΔⵠ[a] = Math.max(0, this.ⲆⲆΔⵠ[a] - b);
                if (!this.ⲆⲆΔⵠ[a] && c >= 0) {
                    this.ᐃΔⲆᐃΔⲆᐃ(a, c);
                }
            }
        };
        this.ⵠᐃΔⲆⵠ = {
            enabled: yg,
            translate: {
                x: 0,
                y: 0
            },
            ᐃⵠᐃⵠΔⲆΔ: function () {
                if (lf.mode == ew.ᐃⲆᐃⲆᐃⵠⲆ && !Ww.ᐃⵠᐃⲆⵠΔⵠ) {
                    Ww.ⵠᐃΔⲆⵠ.enabled = !Ww.ⵠᐃΔⲆⵠ.enabled;
                    if (Ww.ⵠᐃΔⲆⵠ.enabled) {
                        Yw.options.ᐃⵠΔΔΔᐃⲆ.display = "inline-block";
                    } else {
                        Yw.options.ᐃⵠΔΔΔᐃⲆ.display = "none";
                    }
                }
            }
        };
        Yw.options.ᐃⵠΔΔΔᐃⲆ.display = "none";
        this.ⲆΔᐃⲆΔ = {
            enabled: false,
            translate: {
                x: 0,
                y: 0
            },
            ⵠΔⵠⵠΔ: 0,
            ᐃⵠᐃⵠΔⲆΔ: function () {
                Ww.ⲆΔᐃⲆΔ.enabled = !Ww.ⲆΔᐃⲆΔ.enabled;
                if (Ww.ⲆΔᐃⲆΔ.enabled) {
                    Yw.options.ΔᐃᐃⲆΔⲆΔ.display = "inline-block";
                } else {
                    Yw.options.ΔᐃᐃⲆΔⲆΔ.display = "none";
                }
            },
            ⲆΔᐃⲆ: function () {
                if (!!this.enabled && Ww.ΔⵠΔΔ.id < 0 && !Yw.ᐃⲆᐃⵠ.open) {
                    this.ⵠΔⵠⵠΔ += cf;
                    if (this.ⵠΔⵠⵠΔ > 2) {
                        this.ⵠΔⵠⵠΔ = 0;
                        if (Ww.ᐃⲆⲆⲆ.ΔᐃⲆ < 0.35) {
                            if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[110]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(110, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(110));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[192]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(192, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(192));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[196]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(196, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(196));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[189]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(189, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(189));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[207]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(207, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(207));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[205]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(205, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(205));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[209]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(209, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(209));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[143]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(143, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(143));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[117]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(117, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(117));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[138]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(138, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(138));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[133]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(133, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(133));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[145]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(145, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(145));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[136]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(136, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(136));
                            } else if (Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[197]) {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(197, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(197));
                            }
                        } else if (Ww.ᐃⲆⲆⲆ.ᐃⲆⵠ < 0.35 && Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[127]) {
                            ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(127, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(127));
                        }
                    }
                }
            }
        };
        Yw.options.ΔᐃᐃⲆΔⲆΔ.display = "none";
        this.ΔⵠΔΔ = {
            id: -1,
            ⲆⵠⲆᐃ: -1,
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1, 1),
            ΔΔⵠⲆΔ: false,
            ᐃⵠΔⲆ: -1,
            mode: 0,
            label: [],
            ᐃⵠⲆⲆⲆ: [],
            ΔᐃⵠΔᐃ: false,
            ΔΔⲆⲆᐃ: false,
            ΔᐃΔΔⲆᐃⲆ: Oh,
            ᐃⲆΔΔⵠ: ug,
            ΔᐃΔᐃᐃⲆΔΔΔ: function () {
                this.mode = this.mode === 0 ? 1 : 0;
            },
            ⵠⲆⵠΔⵠⵠⲆᐃⵠ: function (a) {
                this.ΔᐃⵠΔᐃ = a;
                var b = Yw.ᐃⲆᐃⵠ;
                if (b.open) {
                    b.ⲆⵠᐃⵠᐃⵠⲆ(b.button);
                }
                this.ⲆΔᐃⲆ();
            },
            ⲆⵠᐃᐃΔⲆⲆⲆΔ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ΔΔⵠⲆΔ = true;
                lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                this.timeout.ΔΔᐃⲆᐃΔⵠ = b.time * 8;
                this.ⲆⵠⲆᐃ = b.ⲆⵠⲆᐃ;
            },
            ΔᐃᐃᐃΔⵠᐃⲆⲆ: function (a) {
                var b = Ls[a];
                this.id = a;
                this.ΔΔⵠⲆΔ = true;
                var c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                if (c && c.right == 28) {
                    this.timeout.ΔΔᐃⲆᐃΔⵠ = b.time * 3;
                } else {
                    this.timeout.ΔΔᐃⲆᐃΔⵠ = b.time;
                }
                this.ⲆⵠⲆᐃ = b.ⲆⵠⲆᐃ;
                for (var d = 0; d < b.r.length; d++) {
                    var e = b.r[d];
                    Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆΔ(e[0], e[1], Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(e[0]));
                }
                Yw.ᐃᐃΔⵠᐃᐃᐃ();
            },
            ⲆΔᐃⲆ: function () {
                this.ᐃⵠⲆⲆⲆ = [];
                if (Yw.ⲆⵠΔⵠⵠ.ΔⵠΔΔ === 1) {
                    Yw.ⲆⵠΔⵠⵠ.display = 0;
                }
                for (var a in Ls) {
                    var b = Ls[a];
                    var c = true;
                    if (b.r) {
                        for (var d = 0; d < b.r.length; d++) {
                            if (Ww.ᐃⲆΔᐃ.max >= ew.ⵠⵠⵠᐃᐃⵠⲆ && b.id === 100) {
                                c = false;
                                break;
                            }
                            if (b.w > this.ΔᐃⵠΔᐃ || b.f > this.ΔΔⲆⲆᐃ || b.ΔⲆⵠ > this.ΔᐃΔΔⲆᐃⲆ || b.e > this.ᐃⲆΔΔⵠ) {
                                c = oj;
                                break;
                            }
                            var f = b.r[d];
                            if (!Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[f[0]] || Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[f[0]] < f[1]) {
                                c = eh;
                                break;
                            }
                        }
                        if (c) {
                            this.ᐃⵠⲆⲆⲆ.push(Yw.ᐃΔᐃᐃ[b.id]);
                        }
                    }
                }
                Yw.ᐃΔⵠΔᐃᐃⵠ();
                Yw.ⵠᐃᐃᐃⲆᐃΔ();
                Yw.ⲆⲆΔᐃⲆΔᐃ();
                Yw.ᐃᐃΔΔΔΔⵠ();
                Yw.ⵠⵠᐃΔᐃΔΔ();
                Yw.ⲆᐃⲆᐃⵠⲆⲆ();
                Yw.sign.ⲆᐃⲆΔᐃⲆᐃ();
            },
            ⲆᐃΔⵠᐃΔⲆ: function () {
                this.id = -1;
                this.ΔΔⵠⲆΔ = Ln;
                this.timeout.ᐃⵠΔ = 0;
                this.timeout.ΔⲆⵠ = oe;
                this.ⲆΔᐃⲆ();
            }
        };
        this.ᐃᐃᐃᐃΔⲆⵠ = {
            message: Fh,
            ΔΔⲆᐃ: _u
        };
        this.alert = {
            timeout: new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(oj, 1, 1, 0, 4, 0.3),
            text: "",
            label: null,
            ΔΔⲆᐃ: Yu,
            list: []
        };
        this.ⲆⲆᐃⵠᐃ = {
            ΔⲆ: document.createElement("canvas"),
            ΔᐃᐃⲆΔ: [],
            ⲆΔᐃⲆ: true,
            translate: {
                y: 0,
                x: 0
            },
            sort: function () {
                var a = [];
                for (var b = lf.ᐃⲆⲆΔ, c = 0; c < b.length; c++) {
                    if (b[c].ⵠᐃⲆⲆⲆ) {
                        a.push({
                            id: c,
                            ⲆⲆᐃⵠ: b[c].ⵠⲆⲆΔΔ
                        });
                    }
                }
                a.sort(function (a, b) {
                    return b.ⲆⲆᐃⵠ - a.ⲆⲆᐃⵠ;
                });
                this.ΔᐃᐃⲆΔ = [];
                for (c = 0; c < a.length && c < 10; c++) {
                    this.ΔᐃᐃⲆΔ.push(a[c].id);
                }
                this.ⲆΔᐃⲆ = true;
            },
            ⲆⲆⵠⲆⲆ: function (a) {
                for (var b = lf.ᐃⲆⲆΔ, c = 0; c < b.length; c++) {
                    b[c].ⵠⲆⲆΔΔ = 0;
                }
                b[Ww.id].ⵠⲆⲆΔΔ = ΔᐃⲆᐃ.ᐃᐃⲆᐃΔᐃᐃ(a[1]);
                this.ΔᐃᐃⲆΔ = [];
                for (c = 2; c < a.length; c += 2) {
                    this.ΔᐃᐃⲆΔ.push(a[c]);
                    b[a[c]].ⵠⲆⲆΔΔ = ΔᐃⲆᐃ.ᐃᐃⲆᐃΔᐃᐃ(a[c + 1]);
                }
                this.ⲆΔᐃⲆ = Oq;
            }
        };
        this.ⲆⲆᐃⵠᐃ.ΔⲆ.width = fo * 180;
        this.ⲆⲆᐃⵠᐃ.ΔⲆ.height = fo * 300;
        this.ⲆⲆᐃⵠᐃ.Δ = this.ⲆⲆᐃⵠᐃ.ΔⲆ.getContext("2d");
        this.ⵠⲆⵠⲆⲆ = {
            open: false,
            input: document.getElementById("commandInput"),
            ᐃⵠⲆᐃⵠⵠᐃ: document.getElementById("commandsBox"),
            style: document.getElementById("commandMainBox").style,
            ⵠⵠΔΔᐃᐃⵠⲆᐃ: function (a) {
                this.ᐃⵠⲆᐃⵠⵠᐃ.innerHTML += a;
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(uo / 2 - 300) + "px";
                this.style.top = Math.floor(vo / 2 - 250) + "px";
            },
            ᐃⲆⵠⵠⵠΔⵠᐃᐃ: function () {
                this.ᐃⵠⲆᐃⵠⵠᐃ.innerHTML = "";
            },
            ΔⲆⵠΔΔ: function () {
                this.open = false;
                this.style.display = "none";
            },
            ⲆΔⵠᐃⲆ: function (a) {
                var b = "<table class=\"tableList\">";
                for (var c = 0; c < a.length; c++) {
                    if (c % 3 == 0) {
                        b += "<tr>";
                    }
                    b += "<td class=\"tableList\">" + a[c] + "</td>";
                    if ((c + 1) % 3 == 0 || c + 1 === a.length) {
                        b += "</tr>";
                    }
                }
                return b += "</table>";
            },
            ⵠΔΔᐃΔ: function (a, b, c, d) {
                d = d || "";
                var f = "<div class=commandWritten>" + (a = a || "");
                f += (b = b || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>";
                f += (c = c || "") + "</div>" + d + "</div>";
                this.ⵠⵠΔΔᐃᐃⵠⲆᐃ(f);
                this.ΔⵠⵠⵠⲆⲆΔᐃΔ();
            },
            ΔⵠⵠⵠⲆⲆΔᐃΔ: function () {
                this.ᐃⵠⲆᐃⵠⵠᐃ.scrollTop = this.ᐃⵠⲆᐃⵠⵠᐃ.scrollHeight;
            },
            ΔⲆⲆⵠΔΔⵠ: function (b) {
                switch (b) {
                    case "clean":
                        this.ᐃⲆⵠⵠⵠΔⵠᐃᐃ();
                        return f;
                    case "list":
                        var c = "";
                        const a = cj.document.createElement("div");
                        for (var d = lf.ᐃⲆⲆΔ, g = 0; g < d.length; g++) {
                            var h = d[g];
                            if (h.ⵠᐃⲆⲆⲆ) {
                                a.innerText = h.ΔᐃⵠΔⵠ;
                                c += a.innerHTML + " <span style=\"color:green\">#" + g + "</span><br />";
                            }
                        }
                        this.ⵠΔΔᐃΔ("list", 1, "List all connected players", c);
                        return true;
                    case "weapon-list":
                        this.ⵠΔΔᐃΔ("Weapons", 1, "List all weapons in the game", this.ⲆΔⵠᐃⲆ(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
                        return sk;
                    case "tool-list":
                        this.ⵠΔΔᐃΔ("Tools", 1, "List all tools in the game", this.ⲆΔⵠᐃⲆ(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
                        return true;
                    case "survival-list":
                        this.ⵠΔΔᐃΔ("Survival Items", 1, "List all survival items in the game", this.ⲆΔⵠᐃⲆ(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
                        return Lt;
                    case "resource-list":
                        this.ⵠΔΔᐃΔ("Resources", 1, "List all resources in the game", this.ⲆΔⵠᐃⲆ(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
                        return _n;
                    case "food-list":
                        this.ⵠΔΔᐃΔ("Food", 1, "List all food in the game", this.ⲆΔⵠᐃⲆ(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
                        return true;
                    case "hat-list":
                        this.ⵠΔΔᐃΔ("Hats", 1, "List all hats in the game", this.ⲆΔⵠᐃⲆ(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
                        return true;
                    case "building-list":
                        this.ⵠΔΔᐃΔ("Buildings", 1, "List all buildings in the game", this.ⲆΔⵠᐃⲆ(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
                        return kg;
                    case "biome-list":
                        this.ⵠΔΔᐃΔ("Biomes list", 1, "List all available biomes in the game", this.ⲆΔⵠᐃⲆ(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
                        return tr;
                    case "help-config":
                        this.ⵠΔΔᐃΔ("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
                        return ft;
                    case "pos":
                        d = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
                        g = 0;
                        for (; g < d.length; g++) {
                            var e = d[g];
                            if (e.ⲆΔᐃⵠ === Ww.id) {
                                this.ⵠΔΔᐃΔ("pos", 1, "Your position is " + Math.floor(e.x / 100) + ":" + Math.floor(e.y / 100));
                                return Io;
                            }
                        }
                        break;
                    case "help-admin":
                        this.ⵠΔΔᐃΔ("help-admin", 1, "List all available commands for admin only", this.ⲆΔⵠᐃⲆ(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
                        return f;
                    case "help":
                        this.ⵠΔΔᐃΔ("help", 1, "List all available commands", this.ⲆΔⵠᐃⲆ(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
                        return dl;
                }
                return Ln;
            },
            ΔⵠᐃⲆΔⵠⵠᐃⲆ: function () {
                if (!this.open) {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            },
            ᐃⵠᐃΔⲆΔⲆ: function () {
                var a = this.input.value;
                if (a && a.length > 0) {
                    if (!this.ΔⲆⲆⵠΔΔⵠ(a)) {
                        ⵠΔᐃᐃ.ⲆⵠⵠᐃⵠᐃⵠⲆⲆ(this.input.value);
                    }
                    this.input.value = "";
                }
            }
        };
        this.ᐃᐃᐃΔᐃ = {
            open: hj,
            input: document.getElementById("chat_input"),
            style: document.getElementById("chat_block").style,
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(uo / 2 - 150) + "px";
                this.style.top = Math.floor(vo / 2 + 80) + "px";
            },
            ΔⲆⵠΔΔ: function () {
                this.open = wq;
                this.style.display = "none";
                this.input.value = "";
            },
            prefix: "!",
            cmd: {
                hud: function (a) {
                    if (a === "off") {
                        var b = "Enter \"!hud\" without the quotes to restore the HUD";
                        if (Ww.alert.text) {
                            Ww.alert.list.push(b);
                        } else {
                            Ww.alert.text = b;
                        }
                        Yw.ᐃΔⵠⲆⲆᐃⲆ = 0;
                    } else {
                        Yw.ᐃΔⵠⲆⲆᐃⲆ = 1;
                    }
                }
            },
            ΔⲆⲆⵠΔΔⵠ: function (a) {
                if (a.charAt(0) == this.prefix) {
                    var b = "";
                    var c = "";
                    for (var d = 1; d < a.length && a.charAt(d) != " "; d++) {
                        b += a.charAt(d);
                    }
                    for (d++; d < a.length; d++) {
                        c += a.charAt(d);
                    }
                    var e = this.cmd[b];
                    if (e) {
                        e(c);
                    }
                    return Wa;
                }
                return false;
            },
            ⲆᐃⲆᐃᐃ: function () {
                if (this.open) {
                    this.open = El;
                    this.style.display = "none";
                    var a = this.input.value;
                    if (a) {
                        if (!this.ΔⲆⲆⵠΔΔⵠ(a)) {
                            ⵠΔᐃᐃ.ΔΔΔⲆΔᐃⲆⵠⵠ(this.input.value);
                        }
                        this.input.value = "";
                    }
                } else {
                    this.open = true;
                    this.style.display = "inline-block";
                    this.input.focus();
                }
            }
        };
        this.ⵠΔⲆΔⵠⲆⵠ = {
            Δᐃⵠⵠᐃ: [],
            ⲆΔᐃⲆ: function (a) {
                a.y += cf * 80 * a.ⲆⲆᐃⵠ;
                a.x += cf * 80 * a.c;
                a.ΔΔⵠⲆⲆ -= cf / 6;
                if (a.ΔΔⵠⲆⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + cf * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - cf * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min(Pr.ⵠᐃⲆᐃᐃⲆⵠ * (uo / 1366), Pr.ⵠᐃⲆᐃᐃⲆⵠ + 10) * Math.max(Math.min(lf.ᐃΔΔⵠⲆ + 1000, 3000) / 3000, 0));
                if (this.Δᐃⵠⵠᐃ.length < c) {
                    var d = Math.floor(Math.random() * Pr.ⲆΔᐃΔⵠΔᐃ);
                    var e = -Ww.ᐃⵠΔΔ.x + Math.floor(Math.random() * Ww.ᐃⵠΔΔ.w);
                    var f = -Ww.ᐃⵠΔΔ.y + Math.floor(Math.random() * Ww.ᐃⵠΔΔ.ΔᐃⲆ);
                    var g = Math.random(Math.PI);
                    this.Δᐃⵠⵠᐃ.push(new lw(d, e, f, g));
                }
            }
        };
        this.ΔᐃΔⵠⵠⵠΔ = 0;
        this.ᐃΔΔΔΔ = 0;
        this.ⲆΔⵠΔᐃ = {
            Δᐃⵠⵠᐃ: [],
            ⵠⲆⵠᐃⲆ: 0,
            ΔΔⵠⵠⲆ: 0,
            ⲆΔᐃⲆ: function (a) {
                a.y += cf * (200 + this.ΔΔⵠⵠⲆ * 800) * a.ⲆⲆᐃⵠ;
                a.x += cf * (200 + this.ΔΔⵠⵠⲆ * 800) * a.c;
                a.ΔΔⵠⲆⲆ -= cf / 6;
                if (a.ΔΔⵠⲆⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + cf * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - cf * 1, 0);
                }
            },
            add: function (b) {
                var c = Math.floor(Math.min((this.ΔΔⵠⵠⲆ + 0.1) * Pr.ⲆᐃᐃⵠΔⵠⲆ * (uo / 1366), (this.ΔΔⵠⵠⲆ + 0.1) * Pr.ⲆᐃᐃⵠΔⵠⲆ + 10) * Math.max(Math.min(lf.ⲆⲆⵠⲆᐃ + 1000, 3000) / 3000, 0));
                if (this.Δᐃⵠⵠᐃ.length < c) {
                    var d = Math.floor(Math.random() * Pr.ⲆΔᐃΔⵠΔᐃ);
                    var e = -Ww.ᐃⵠΔΔ.x + Math.floor(Math.random() * Ww.ᐃⵠΔΔ.w);
                    var f = -Ww.ᐃⵠΔΔ.y + Math.floor(Math.random() * Ww.ᐃⵠΔΔ.ΔᐃⲆ);
                    var g = Math.random(Math.PI);
                    if (Ww.ⲆΔⵠΔᐃ.ⵠⲆⵠᐃⲆ !== 0) {
                        e -= Ww.ᐃⵠΔΔ.w / 2;
                    }
                    this.Δᐃⵠⵠᐃ.push(new lw(d, e, f, g));
                }
            }
        };
        this.ΔⲆᐃⵠᐃ = {
            Δᐃⵠⵠᐃ: [],
            ⵠⲆⵠᐃⲆ: 0,
            ΔΔⵠⵠⲆ: 0,
            ⲆΔᐃⲆ: function (a) {
                if (vf.ⵠⲆᐃᐃᐃΔⲆ()) {
                    a.y += cf * a.ᐃᐃᐃᐃΔ * (5.5 + this.ΔΔⵠⵠⲆ * 10);
                } else {
                    a.y += cf * a.ᐃᐃᐃᐃΔ * (5 + this.ΔΔⵠⵠⲆ * 10);
                }
                a.ΔΔⵠⲆⲆ -= cf / 2;
                if (vf.ⲆⲆⵠᐃΔⵠⵠ()) {
                    a.x += cf * (100 + this.ΔΔⵠⵠⲆ * 400);
                } else if (vf.ⲆΔᐃΔⲆⲆΔ()) {
                    a.x -= cf * (130 - this.ΔΔⵠⵠⲆ * 400);
                } else {
                    a.x -= cf * (30 - this.ΔΔⵠⵠⲆ * 400);
                }
                if (a.ΔΔⵠⲆⲆ > 0.2) {
                    a.alpha = Math.min(a.alpha + cf * 3, 1);
                } else {
                    a.alpha = Math.max(a.alpha - cf * 5, 0);
                }
            },
            add: function (a) {
                var b = Math.floor(Math.min((this.ΔΔⵠⵠⲆ * 1.5 + 0.5) * Pr.ᐃΔΔΔᐃᐃⲆ * (uo / 1366), (this.ΔΔⵠⵠⲆ * 1.5 + 0.5) * Pr.ᐃΔΔΔᐃᐃⲆ + 10) * Math.max(Math.min(lf.ⲆⲆΔⵠⵠ + 1000, 3000) / 3000, 0));
                if (this.Δᐃⵠⵠᐃ.length < b) {
                    var c = Math.floor(Math.random() * Pr.ⲆⵠⵠⲆⲆⵠⲆ);
                    var d = -Ww.ᐃⵠΔΔ.x + Math.floor(Math.random() * Ww.ᐃⵠΔΔ.w);
                    var e = -Ww.ᐃⵠΔΔ.y + Math.floor(Math.random() * 400 * fo - fo * 200);
                    this.Δᐃⵠⵠᐃ.push(new lw(c, d, e, 0));
                }
            }
        };
        this.ᐃᐃⲆᐃ = [];
        for (var d = 0; d < 4; d++) {
            this.ᐃᐃⲆᐃ.push(new c());
        }
    }
    function zw() {
        Math.random();
        return "g";
    }
    function tw() {
        Math.random();
        return "o";
    }
    function Aw(a) {
        return function (a, b, c) {
            yi(Kr, a, b, c);
            const d = function (a, b, c) {
                di(Kr, a, b, c);
                const d = Tk(Lr[0], Lr[1], Lr[2]);
                zk(Lr[0], Lr[1]);
                return ~(d & 53610) & (d | 53610);
            }(Lr[0], Lr[1], Lr[2]);
            const e = Af(Lr[0], Lr[1], Lr[2]);
            return (24 << ((d ^ e) & 255)) + (16 << ((d ^ e) >> 8 & 255)) + (0 << ((d ^ e) >> 24 & 255)) + (8 << ((d ^ e) >> 16 & 255));
        }(a, 58179, 9625);
    }
    function Bw(b, c, d, e) {
        const f = ~(b & 6949) & b | ~(b & 6949) & 6949;
        const g = ~(c & 1348) & 1348 | ~(c & 1348) & c;
        const a = ~(d & 53330) & 53330 | ~(d & 53330) & d;
        const i = (16 << (e >> 24 & 255)) + (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (8 << (e >> 8 & 255));
        const j = dr(f, g, a, i);
        wf(f, g, a, i, f);
        return ~(j & 8357) & (j | 8357);
    }
    ΔΔᐃⵠᐃᐃⲆᐃⲆ = 1;
    setTimeout(function b() {
        var c = qw() + rw() + pw() + vw();
        Math.random();
        var d = "W" + ow() + function () {
            Math.random();
            return "b";
        }() + (Math.random(), "S") + tw() + (Math.random(), "c") + (Math.random(), "k") + ow() + pw();
        if (cj[d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        var e = uw() + ow() + qw() + sw();
        var f = nw() + ww() + tw() + pw() + tw() + pw() + function () {
            Math.random();
            return "y";
        }() + nw() + ow();
        if (cj[d][f][e].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        d = sw() + ww() + rw() + (Math.random(), "w") + function () {
            Math.random();
            return "I";
        }() + (Math.random(), "m") + rw() + zw() + ow();
        e = xw() + rw() + qw() + function () {
            Math.random();
            return "v";
        }() + rw() + uw() + function () {
            Math.random();
            return "R";
        }() + ow() + qw() + sw() + ow() + ww() + vw() + qw() + zw() + xw() + tw() + qw() + pw() + ow() + function () {
            Math.random();
            return "x";
        }() + pw() + (Math.random(), "2") + (Math.random(), "D");
        if (cj[e][f][d].toString().indexOf(c) === -1) {
            Math.floor = function () {
                return Math.round() + 1;
            };
        }
        setTimeout(b, 100000);
    }, 100000);
    function Cw(b, c, d, e) {
        const f = ~(b & 53070) & (b | 53070);
        const g = ~(c & 57089) & c | ~(c & 57089) & 57089;
        const a = d ^ 1941;
        const i = ~(e & 26192) & e | ~(e & 26192) & 26192;
        const j = function (a, b) {
            const c = (2531011 + (20927 + a) * 214013) % 4294967296;
            const d = ((b + 27545) * 214013 + 2531011) % 4294967296;
            const e = Iw(c, d, c, d, c, d);
            Iw(c, d, c, d, c, d);
            return e ^ 25192;
        }(f, g);
        Iw(a, i, f, g, a, i);
        return ~(j & 1370) & 1370 | ~(j & 1370) & j;
    }
    function Dw(c, f) {
        var j = this;
        this.ΔⲆ = c;
        this.Δ = f;
        if (cj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠᐃⵠⲆΔΔⲆ = "default";
            this.ⲆⵠⵠᐃΔⵠΔ = "pointer";
        } else {
            this.ⵠᐃⵠⲆΔΔⲆ = "url('img/cursor0.png'), default";
            this.ⲆⵠⵠᐃΔⵠΔ = "url('img/cursor1.png'), pointer";
        }
        this.ᐃΔⵠⲆⲆᐃⲆ = 1;
        this.ⲆᐃᐃᐃΔΔΔ = 1;
        this.ᐃⵠⲆⲆⲆΔⲆ = 1;
        this.ΔΔⲆⲆⵠΔᐃ = 1;
        this.ⲆⲆⵠⲆᐃⲆΔΔᐃ = {
            id: document.getElementById("team_box"),
            style: document.getElementById("team_box").style,
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 125) + "px";
                this.style.top = "110px";
            }
        };
        this.ᐃΔⵠⲆ = {
            ΔⵠᐃΔΔΔΔ: Sv(60, 60, 0, Ⲇᐃ[782]),
            ⵠΔᐃᐃᐃⵠⵠ: Sv(60, 60, 0, Ⲇᐃ[783])
        };
        this.sign = {
            open: false,
            ⲆⲆⵠⲆΔⵠⵠⲆᐃ: 0,
            ⲆⲆᐃⲆΔΔⵠ: document.getElementById("sign_object"),
            ᐃᐃⲆⲆⲆⲆᐃ: 0,
            id: document.getElementById("sign_window"),
            style: document.getElementById("sign_window").style,
            button: Sv(60, 60, 0, Ⲇᐃ[803]),
            ⲆᐃⲆΔᐃⲆᐃ: function () {
                var a = Math.floor(Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) * (10 + Ⲇᐃ[316][0].width) + 35);
                this.button.info.translate.x = a;
                this.button.info.translate.y = 22;
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 150) + "px";
                this.style.top = Math.floor(iq - 115) + "px";
            },
            ΔⲆⵠΔΔ: function () {
                Yw.sign.style.display = "none";
                Yw.sign.open = false;
            },
            select: function () {
                Yw.sign.open = !Yw.sign.open;
                if (Yw.sign.open) {
                    Yw.sign.style.display = "inline-block";
                } else {
                    Yw.sign.style.display = "none";
                }
            },
            ok: function () {
                ⵠΔᐃᐃ.ⲆⲆⲆⲆⲆᐃⵠⲆΔ(Ww.sign.ⵠⵠΔᐃⲆ, Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ);
                Yw.sign.select();
            },
            up: function () {
                Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ = Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ === 0 ? dw.ᐃΔᐃⵠΔΔⵠ - 1 : Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ - 1;
                Yw.sign.ⲆⲆᐃⲆΔΔⵠ.src = "./img/sign" + Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ + ".png";
            },
            down: function () {
                Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ = (Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ + 1) % dw.ᐃΔᐃⵠΔΔⵠ;
                Yw.sign.ⲆⲆᐃⲆΔΔⵠ.src = "./img/sign" + Yw.sign.ᐃᐃⲆⲆⲆⲆᐃ + ".png";
            }
        };
        document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, il);
        document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, mk);
        document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, oj);
        document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
        this.ⲆΔⵠᐃΔ = {
            open: oj,
            id: document.getElementById("shop_market"),
            style: document.getElementById("shop_market").style,
            items: [{
                id: 0,
                name: "wood",
                ⵠΔⲆⲆᐃ: 1,
                b: 1,
                a: 3,
                ⲆⵠΔⲆᐃ: 316
            }, {
                id: 1,
                name: "stone",
                ⵠΔⲆⲆᐃ: 1,
                b: 1,
                a: 4,
                ⲆⵠΔⲆᐃ: 315
            }, {
                id: 2,
                name: "gold",
                ⵠΔⲆⲆᐃ: 1,
                b: 1,
                a: 6,
                ⲆⵠΔⲆᐃ: 297
            }, {
                id: 3,
                name: "diamond",
                ⵠΔⲆⲆᐃ: 4,
                b: 4,
                a: 1,
                ⲆⵠΔⲆᐃ: 298
            }, {
                id: 4,
                name: "amethyst",
                ⵠΔⲆⲆᐃ: 8,
                b: 8,
                a: 1,
                ⲆⵠΔⲆᐃ: 418
            }, {
                id: 5,
                name: "reidite",
                ⵠΔⲆⲆᐃ: 16,
                b: 16,
                a: 1,
                ⲆⵠΔⲆᐃ: 938
            }, {
                id: 6,
                name: "pumpkin_seed",
                ⵠΔⲆⲆᐃ: 10,
                b: 10,
                a: 1,
                ⲆⵠΔⲆᐃ: 808
            }, {
                id: 7,
                name: "carrot_seed",
                ⵠΔⲆⲆᐃ: 16,
                b: 16,
                a: 1,
                ⲆⵠΔⲆᐃ: 949
            }, {
                id: 8,
                name: "tomato_seed",
                ⵠΔⲆⲆᐃ: 20,
                b: 20,
                a: 1,
                ⲆⵠΔⲆᐃ: 959
            }, {
                id: 9,
                name: "thornbush_seed",
                ⵠΔⲆⲆᐃ: 30,
                b: 30,
                a: 1,
                ⲆⵠΔⲆᐃ: 845
            }, {
                id: 10,
                name: "garlic_seed",
                ⵠΔⲆⲆᐃ: 40,
                b: 40,
                a: 1,
                ⲆⵠΔⲆᐃ: 834
            }, {
                id: 11,
                name: "watermelon_seed",
                ⵠΔⲆⲆᐃ: 60,
                b: 60,
                a: 1,
                ⲆⵠΔⲆᐃ: 966
            }],
            button: Sv(60, 60, 0, Ⲇᐃ[795]),
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 450) + "px";
                this.style.top = Math.floor(iq - 270) + "px";
            },
            select: function () {
                Yw.ⲆΔⵠᐃΔ.open = !Yw.ⲆΔⵠᐃΔ.open;
                if (Yw.ⲆΔⵠᐃΔ.open) {
                    Yw.ⲆΔⵠᐃΔ.style.display = "inline-block";
                } else {
                    Yw.ⲆΔⵠᐃΔ.style.display = "none";
                }
            },
            ΔⲆⵠΔΔ: function () {
                Yw.ⲆΔⵠᐃΔ.style.display = "none";
                Yw.ⲆΔⵠᐃΔ.open = Gq;
            },
            ᐃⲆΔⲆΔⵠᐃ: function () {
                ⵠΔᐃᐃ.ᐃᐃᐃΔⵠⵠⲆⵠⵠ(this.ᐃᐃᐃⲆⲆⲆᐃ);
            },
            ⵠΔⵠⵠⲆ: function () {
                this.id;
                if (this.ᐃᐃᐃⲆⲆⲆᐃ.a === 1) {
                    var a = Math.floor(Number(this.value) * this.ᐃᐃᐃⲆⲆⲆᐃ.b);
                    this.ᐃᐃᐃⲆⲆⲆᐃ.ⵠΔⲆⲆᐃ = a;
                    document.getElementById(this.ᐃᐃᐃⲆⲆⲆᐃ.name + "_trad_number").innerHTML = a + "";
                } else {
                    a = Math.floor(Number(this.value) / this.ᐃᐃᐃⲆⲆⲆᐃ.a);
                    this.ᐃᐃᐃⲆⲆⲆᐃ.ⵠΔⲆⲆᐃ = a;
                    document.getElementById(this.ᐃᐃᐃⲆⲆⲆᐃ.name + "_trad_number").innerHTML = a + "";
                }
            }
        };
        document.getElementById("quit_market").addEventListener("mouseup", this.ⲆΔⵠᐃΔ.ΔⲆⵠΔΔ, false);
        var e = [["mouseup", this.ⲆΔⵠᐃΔ.ᐃⲆΔⲆΔⵠᐃ, "buy_"], ["click", this.ⲆΔⵠᐃΔ.ⵠΔⵠⵠⲆ, ""], ["change", this.ⲆΔⵠᐃΔ.ⵠΔⵠⵠⲆ, ""], ["keypress", this.ⲆΔⵠᐃΔ.keypress, ""]];
        for (var i = 0; i < this.ⲆΔⵠᐃΔ.items.length; i++) {
            var k = this.ⲆΔⵠᐃΔ.items[i];
            document.getElementById(k.name + "_market").src = Ⲇᐃ[k.ⲆⵠΔⲆᐃ][0].ΔⵠᐃⵠⲆ === undefined ? Ⲇᐃ[k.ⲆⵠΔⲆᐃ][0].src : Ⲇᐃ[k.ⲆⵠΔⲆᐃ][0].ΔⵠᐃⵠⲆ;
            if (k.a === 1) {
                document.getElementById(k.name + "_trad_number").innerHTML = k.b;
                document.getElementById(k.name + "_number").value = 1;
                document.getElementById(k.name + "_number").step = 1;
                document.getElementById(k.name + "_number").min = 1;
                document.getElementById(k.name + "_number").max = Math.floor(255 / k.b);
            } else {
                document.getElementById(k.name + "_trad_number").innerHTML = 1;
                document.getElementById(k.name + "_number").value = k.a;
                document.getElementById(k.name + "_number").step = k.a;
                document.getElementById(k.name + "_number").min = k.a;
            }
            document.getElementById("buy_" + k.name + "_number").ᐃᐃᐃⲆⲆⲆᐃ = k;
            document.getElementById(k.name + "_number").ᐃᐃᐃⲆⲆⲆᐃ = k;
            for (var m = 0; m < e.length; m++) {
                document.getElementById(e[m][2] + k.name + "_number").addEventListener(e[m][0], e[m][1], eh);
            }
        }
        $("[type='number']").keypress(function (a) {
            a.preventDefault();
        });
        this.options = {
            open: false,
            id: document.getElementById("option_in_game"),
            style: document.getElementById("option_in_game").style,
            ᐃᐃᐃΔⵠ: document.getElementById("agree_ing").style,
            ΔᐃΔⵠⵠΔⵠ: document.getElementById("cancel_agree_ing").style,
            ΔΔᐃⵠⲆⵠΔ: document.getElementById("quest_agree_ing").style,
            ᐃⵠΔΔΔᐃⲆ: document.getElementById("spectator_agree_ing").style,
            ΔᐃᐃⲆΔⲆΔ: document.getElementById("auto_feed_agree_ing").style,
            ᐃᐃⲆⲆΔⲆᐃ: document.getElementById("info_agree_ing").style,
            ⲆΔⲆⵠᐃⵠᐃ: document.getElementById("pixelated_agree_ing").style,
            button: Sv(60, 60, 0, Ⲇᐃ[727]),
            ΔⵠᐃᐃⲆⲆⲆᐃΔ: function () {
                Yw.options.open = !Yw.options.open;
                if (Yw.options.open) {
                    Yw.options.style.display = "inline-block";
                } else {
                    Yw.options.style.display = "none";
                }
            },
            ΔΔᐃⲆΔⲆᐃⵠⵠ: function () {
                rf.ⲆⲆΔᐃⲆᐃᐃ();
            },
            ΔᐃΔⵠΔⲆΔΔⲆ: function () {
                rf.ⵠⲆⲆΔⵠᐃⲆ();
            },
            high: function () {
                rf.ⲆΔⵠⵠⲆⵠⵠⵠᐃ();
            },
            low: function () {
                rf.ⵠΔⵠΔΔΔΔⲆᐃ();
            },
            ᐃⲆΔᐃⵠ: function () {
                Yw.ᐃⲆᐃⵠ.ᐃⲆΔᐃⵠ();
            },
            ⵠΔΔⲆⵠⲆΔᐃᐃ: function () {
                Yw.ΔΔᐃⵠⲆ.ᐃⲆΔᐃⵠ();
            },
            ⲆⲆⲆᐃᐃΔⵠⵠᐃ: function () {
                Yw.ΔⵠⲆⵠ.ᐃⲆΔᐃⵠ();
            },
            ΔⲆᐃⵠⵠⵠⵠᐃⵠ: function () {
                Ww.ⵠᐃΔⲆⵠ.ᐃⵠᐃⵠΔⲆΔ();
            },
            ΔᐃⵠΔᐃᐃⵠᐃΔ: function () {
                Ww.ⲆΔᐃⲆΔ.ᐃⵠᐃⵠΔⲆΔ();
            },
            ΔⲆⵠΔΔ: function () {
                Yw.options.style.display = "none";
                Yw.options.open = false;
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 170) + "px";
            }
        };
        document.getElementById("azerty_ing").addEventListener("mouseup", this.options.ΔΔᐃⲆΔⲆᐃⵠⵠ, yg);
        document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.ΔᐃΔⵠΔⲆΔΔⲆ, oe);
        document.getElementById("low_ing").addEventListener("mouseup", this.options.low, eh);
        document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
        document.getElementById("quit_opt").addEventListener("mouseup", this.options.ΔⲆⵠΔΔ, Bk);
        document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.ᐃⲆΔᐃⵠ, false);
        document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.ⲆⲆⲆᐃᐃΔⵠⵠᐃ, fg);
        document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.ⵠΔΔⲆⵠⲆΔᐃᐃ, oj);
        document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.ΔⲆᐃⵠⵠⵠⵠᐃⵠ, Ui);
        document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.ΔᐃⵠΔᐃᐃⵠᐃΔ, false);
        this.ΔΔᐃⵠⲆ = {
            open: fg,
            ⵠⲆⵠΔᐃ: ᐃⵠΔᐃ.get("starve_cancel") ? ᐃⵠΔᐃ.get("starve_cancel") === "0" ? 0 : 1 : 1,
            id: document.getElementById("cancel_sure_delete"),
            style: document.getElementById("cancel_sure_delete").style,
            ᐃᐃᐃΔⵠ: document.getElementById("cancel_agree").style,
            button: 0,
            Δᐃ: 0,
            ΔⲆⵠΔΔ: function () {
                Yw.ΔΔᐃⵠⲆ.style.display = "none";
                Yw.ΔΔᐃⵠⲆ.open = fg;
            },
            ⵠⵠⲆⵠⲆⲆⲆ: function () {
                if (Ww.ΔⵠΔΔ.ΔΔⵠⲆΔ) {
                    ⵠΔᐃᐃ.ⵠᐃⵠⲆΔᐃⲆᐃⵠ();
                }
                Yw.ΔΔᐃⵠⲆ.ΔⲆⵠΔΔ();
            },
            ᐃⲆΔᐃⵠ: function () {
                if (Yw.ΔΔᐃⵠⲆ.ⵠⲆⵠΔᐃ) {
                    ᐃⵠΔᐃ.set("starve_cancel", "0");
                    Yw.ΔΔᐃⵠⲆ.ᐃᐃᐃΔⵠ.display = "inline-block";
                    Yw.options.ΔᐃΔⵠⵠΔⵠ.display = "none";
                } else {
                    ᐃⵠΔᐃ.set("starve_cancel", "1");
                    Yw.ΔΔᐃⵠⲆ.ᐃᐃᐃΔⵠ.display = "none";
                    Yw.options.ΔᐃΔⵠⵠΔⵠ.display = "inline-block";
                }
                Yw.ΔΔᐃⵠⲆ.ⵠⲆⵠΔᐃ = !Yw.ΔΔᐃⵠⲆ.ⵠⲆⵠΔᐃ;
            },
            ⲆⵠᐃⵠᐃⵠⲆ: function () {
                if (this.ⵠⲆⵠΔᐃ) {
                    this.style.display = "inline-block";
                    this.open = Vl;
                } else {
                    this.ⵠⵠⲆⵠⲆⲆⲆ();
                }
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 130) + "px";
            }
        };
        this.ΔΔᐃⵠⲆ.id.oncontextmenu = function () {
            return cr;
        };
        this.ΔΔᐃⵠⲆ.ᐃᐃᐃΔⵠ.display = "none";
        if (this.ΔΔᐃⵠⲆ.ⵠⲆⵠΔᐃ) {
            this.options.ΔᐃΔⵠⵠΔⵠ.display = "inline-block";
        } else {
            this.options.ΔᐃΔⵠⵠΔⵠ.display = "none";
        }
        document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.ΔΔᐃⵠⲆ.ⵠⵠⲆⵠⲆⲆⲆ, eh);
        document.getElementById("cancel_no_delete").addEventListener("mouseup", this.ΔΔᐃⵠⲆ.ΔⲆⵠΔΔ, Bk);
        document.getElementById("cancel_case_agree").addEventListener("mouseup", this.ΔΔᐃⵠⲆ.ᐃⲆΔᐃⵠ, ug);
        document.addEventListener("cancel_sure_delete", function (a) {
            a.preventDefault();
        }, false);
        this.ⲆⲆⲆᐃⲆⵠᐃ = {
            ⵠⲆⵠΔᐃ: ᐃⵠΔᐃ.get("starve_aliasing") ? ᐃⵠΔᐃ.get("starve_aliasing") === "0" ? 0 : 1 : 1,
            ⵠⲆΔⵠⵠᐃⲆ: function (a) {
                document.getElementById("game_canvas").style.imageRendering = a ? "pixelated" : "auto";
            },
            ᐃⲆΔᐃⵠ: function () {
                if (Yw.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆⵠΔᐃ === 0) {
                    ᐃⵠΔᐃ.set("starve_aliasing", "1");
                    Yw.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆΔⵠⵠᐃⲆ(1);
                    Yw.options.ⲆΔⲆⵠᐃⵠᐃ.display = "inline-block";
                } else {
                    ᐃⵠΔᐃ.set("starve_aliasing", "0");
                    Yw.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆΔⵠⵠᐃⲆ(0);
                    Yw.options.ⲆΔⲆⵠᐃⵠᐃ.display = "none";
                }
                Yw.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆⵠΔᐃ = (Yw.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆⵠΔᐃ + 1) % 2;
            }
        };
        if (this.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆⵠΔᐃ === 1) {
            this.options.ⲆΔⲆⵠᐃⵠᐃ.display = "inline-block";
        } else {
            this.ⲆⲆⲆᐃⲆⵠᐃ.ⵠⲆΔⵠⵠᐃⲆ(0);
            this.options.ⲆΔⲆⵠᐃⵠᐃ.display = "none";
        }
        document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.ⲆⲆⲆᐃⲆⵠᐃ.ᐃⲆΔᐃⵠ, false);
        this.ⲆⵠΔⵠⵠ = {
            ⵠⲆⵠΔᐃ: ᐃⵠΔᐃ.get("starve_info_box") ? ᐃⵠΔᐃ.get("starve_info_box") === "0" ? 0 : 1 : 1,
            display: 0,
            x: 0,
            y: 0,
            id: 0,
            ΔⵠΔΔ: 0,
            ᐃⲆΔᐃⵠ: function () {
                if (Yw.ⲆⵠΔⵠⵠ.ⵠⲆⵠΔᐃ === 0) {
                    ᐃⵠΔᐃ.set("starve_info_box", "1");
                    Yw.options.ᐃᐃⲆⲆΔⲆᐃ.display = "inline-block";
                } else {
                    ᐃⵠΔᐃ.set("starve_info_box", "0");
                    Yw.options.ᐃᐃⲆⲆΔⲆᐃ.display = "none";
                }
                Yw.ⲆⵠΔⵠⵠ.ⵠⲆⵠΔᐃ = (Yw.ⲆⵠΔⵠⵠ.ⵠⲆⵠΔᐃ + 1) % 2;
            },
            ⲆΔⵠΔ: function (a, b, c) {
                if (a && this.ⵠⲆⵠΔᐃ) {
                    this.display = 1;
                    this.id = c === 0 ? b.id : Ls[b.id].ⲆⵠⲆᐃ;
                    this.x = b.info.translate.x + 80;
                    this.y = b.info.translate.y;
                    this.ΔⵠΔΔ = c;
                }
                return a;
            }
        };
        if (this.ⲆⵠΔⵠⵠ.ⵠⲆⵠΔᐃ === 1) {
            this.options.ᐃᐃⲆⲆΔⲆᐃ.display = "inline-block";
        } else {
            this.options.ᐃᐃⲆⲆΔⲆᐃ.display = "none";
        }
        document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.ⲆⵠΔⵠⵠ.ᐃⲆΔᐃⵠ, ug);
        if (ᐃⵠΔᐃ.get("starve_scale")) {
            wo = Number(ᐃⵠΔᐃ.get("starve_scale"));
            document.getElementById("input_ratio").value = wo;
            wo *= Wq / Xq;
            Yq();
        }
        this.ΔΔⲆⲆΔᐃᐃ = function () {
            ᐃⵠΔᐃ.set("starve_scale", "" + document.getElementById("input_ratio").value);
            wo = document.getElementById("input_ratio").value * (Wq / Xq);
            Yq();
        };
        document.getElementById("input_ratio").addEventListener("input", this.ΔΔⲆⲆΔᐃᐃ, false);
        this.ᐃⲆᐃⵠ = {
            open: false,
            ⵠⲆⵠΔᐃ: ᐃⵠΔᐃ.get("starve_safe") ? ᐃⵠΔᐃ.get("starve_safe") === "0" ? 0 : 1 : 1,
            id: document.getElementById("sure_delete"),
            style: document.getElementById("sure_delete").style,
            ᐃᐃᐃΔⵠ: document.getElementById("agree").style,
            button: 0,
            Δᐃ: 0,
            ΔⲆⵠΔΔ: function () {
                Yw.ᐃⲆᐃⵠ.style.display = "none";
                Yw.ᐃⲆᐃⵠ.open = false;
            },
            all: function () {
                if (!Ww.ⲆⵠΔΔΔ.wait) {
                    if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && Ww.ΔⵠΔΔ.id < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                        ⵠΔᐃᐃ.ᐃΔᐃⲆⵠⵠΔⲆΔ(Yw.ᐃⲆᐃⵠ.button);
                    }
                    Yw.ᐃⲆᐃⵠ.ΔⲆⵠΔΔ();
                }
            },
            ⵠᐃᐃⵠ: function () {
                if (Ww.ΔⵠΔΔ.ΔᐃⵠΔᐃ && !Ww.ⲆⵠΔΔΔ.wait) {
                    if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && Ww.ΔⵠΔΔ.id < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                        ⵠΔᐃᐃ.ᐃⵠⲆⵠᐃΔᐃⲆⵠ(Yw.ᐃⲆᐃⵠ.button);
                    }
                    Yw.ᐃⲆᐃⵠ.ΔⲆⵠΔΔ();
                }
            },
            ⵠⲆᐃⲆΔΔΔⲆⲆ: function () {
                if (!Ww.ⲆⵠΔΔΔ.wait) {
                    if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && Ww.ΔⵠΔΔ.id < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                        ⵠΔᐃᐃ.ⵠⲆⵠⵠΔⲆⵠΔΔ(Yw.ᐃⲆᐃⵠ.button);
                    }
                    Yw.ᐃⲆᐃⵠ.ΔⲆⵠΔΔ();
                }
            },
            ᐃⲆΔᐃⵠ: function () {
                if (Yw.ᐃⲆᐃⵠ.ⵠⲆⵠΔᐃ) {
                    ᐃⵠΔᐃ.set("starve_safe", "0");
                    Yw.ᐃⲆᐃⵠ.ᐃᐃᐃΔⵠ.display = "inline-block";
                    Yw.options.ᐃᐃᐃΔⵠ.display = "none";
                } else {
                    ᐃⵠΔᐃ.set("starve_safe", "1");
                    Yw.ᐃⲆᐃⵠ.ᐃᐃᐃΔⵠ.display = "none";
                    Yw.options.ᐃᐃᐃΔⵠ.display = "inline-block";
                }
                Yw.ᐃⲆᐃⵠ.ⵠⲆⵠΔᐃ = !Yw.ᐃⲆᐃⵠ.ⵠⲆⵠΔᐃ;
            },
            ⲆⵠᐃⵠᐃⵠⲆ: function (a) {
                this.button = a;
                document.getElementById("item_to_del").src = Ⲇᐃ[Xr[a].ⲆⲆ][0].ΔⵠᐃⵠⲆ === ts ? Ⲇᐃ[Xr[a].ⲆⲆ][0].src : Ⲇᐃ[Xr[a].ⲆⲆ][0].ΔⵠᐃⵠⲆ;
                if (Xr[a].ⵠᐃᐃⵠ && !Ww.ΔⵠᐃⲆⲆ && Ww.ΔⵠΔΔ.ΔᐃⵠΔᐃ) {
                    document.getElementById("recycle_delete").style.display = "inline-block";
                } else {
                    document.getElementById("recycle_delete").style.display = "none";
                }
                if (this.ⵠⲆⵠΔᐃ) {
                    this.style.display = "inline-block";
                    this.open = true;
                } else {
                    this.all();
                }
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 235) + "px";
                this.style.top = Math.floor(iq - 175) + "px";
            }
        };
        this.ᐃⲆᐃⵠ.ᐃᐃᐃΔⵠ.display = "none";
        if (this.ᐃⲆᐃⵠ.ⵠⲆⵠΔᐃ) {
            this.options.ᐃᐃᐃΔⵠ.display = "inline-block";
        } else {
            this.options.ᐃᐃᐃΔⵠ.display = "none";
        }
        document.getElementById("one_delete").addEventListener("mouseup", this.ᐃⲆᐃⵠ.ⵠⲆᐃⲆΔΔΔⲆⲆ, false);
        document.getElementById("yes_delete").addEventListener("mouseup", this.ᐃⲆᐃⵠ.all, il);
        document.getElementById("recycle_delete").addEventListener("mouseup", this.ᐃⲆᐃⵠ.ⵠᐃᐃⵠ, false);
        document.getElementById("no_delete").addEventListener("mouseup", this.ᐃⲆᐃⵠ.ΔⲆⵠΔΔ, false);
        document.getElementById("case_agree").addEventListener("mouseup", this.ᐃⲆᐃⵠ.ᐃⲆΔᐃⵠ, fg);
        this.ᐃᐃᐃⲆΔ = {
            open: false,
            ⵠⵠⵠⲆⲆ: -1,
            button: Sv(60, 60, 0, Ⲇᐃ[592]),
            id: document.getElementById("shop_starterkit"),
            style: document.getElementById("shop_starterkit").style,
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 300) + "px";
                this.style.top = Math.floor(iq - 215) + "px";
            },
            ΔⲆⵠΔΔ: function () {
                Yw.ᐃᐃᐃⲆΔ.open = il;
                Yw.ᐃᐃᐃⲆΔ.style.display = "none";
            },
            select: function () {
                Yw.ᐃᐃᐃⲆΔ.open = !Yw.ᐃᐃᐃⲆΔ.open;
                if (Yw.ᐃᐃᐃⲆΔ.open) {
                    Yw.ᐃᐃᐃⲆΔ.style.display = "inline-block";
                } else {
                    Yw.ᐃᐃᐃⲆΔ.style.display = "none";
                }
            },
            ᐃⲆΔⲆΔⵠᐃ: function () {
                if (Yw.ᐃᐃᐃⲆΔ.ⵠⵠⵠⲆⲆ >= 0) {
                    ⵠΔᐃᐃ.ⲆᐃΔᐃⵠⵠⵠΔⲆ(Yw.ᐃᐃᐃⲆΔ.ⵠⵠⵠⲆⲆ);
                    Yw.ᐃᐃᐃⲆΔ.ΔⲆⵠΔΔ();
                    if (ga) {
                        ga("send", "event", "Game", "kit", "" + Yw.ᐃᐃᐃⲆΔ.ⵠⵠⵠⲆⲆ);
                    }
                }
            },
            ⲆⲆⵠⲆⲆ: function () {
                var a = Ww.ᐃᐃᐃⲆΔ.value;
                document.getElementById("points_bank").innerHTML = ΔᐃⲆᐃ.ΔΔⲆΔⵠΔᐃ(a) + " points";
                for (var b = 0; b < aw.length; b++) {
                    if (aw[b].ᐃⲆⲆᐃᐃ > a) {
                        document.getElementById("starter" + (b + 1)).style.opacity = "0.4";
                    } else {
                        document.getElementById("starter" + (b + 1)).style.opacity = "1";
                    }
                }
                for (b = 1; b < 13; b++) {
                    document.getElementById("inv_shop" + b).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + b).innerHTML = "";
                }
                document.getElementById("buy_kit").style.opacity = "0.2";
            },
            ⵠⲆⲆᐃΔⵠⲆⲆᐃ: function () {
                if (this.id.length > 8) {
                    var a = Number(this.id.charAt(7) + this.id.charAt(8));
                } else {
                    a = Number(this.id.charAt(7));
                }
                var b = aw[a - 1];
                if (Ww.ᐃᐃᐃⲆΔ.value >= b.ᐃⲆⲆᐃᐃ) {
                    Yw.ᐃᐃᐃⲆΔ.ⵠⵠⵠⲆⲆ = a;
                    document.getElementById("buy_kit").style.opacity = "1";
                } else {
                    Yw.ᐃᐃᐃⲆΔ.ⵠⵠⵠⲆⲆ = -1;
                    document.getElementById("buy_kit").style.opacity = "0.2";
                }
                b = b.items;
                for (var c = 1, d = 1; c < b.length + 1; c++) {
                    if (b[c - 1][1] !== 29) {
                        document.getElementById("inv_shop" + d).style.display = "inline-block";
                        document.getElementById("inv_shop" + d).src = Ⲇᐃ[Xr[b[c - 1][1]].ⲆⲆ][0].ΔⵠᐃⵠⲆ === Hq ? Ⲇᐃ[Xr[b[c - 1][1]].ⲆⲆ][0].src : Ⲇᐃ[Xr[b[c - 1][1]].ⲆⲆ][0].ΔⵠᐃⵠⲆ;
                        document.getElementById("amount_shop" + d).innerHTML = "" + b[c - 1][0];
                        d++;
                    }
                }
                for (; d < 13; d++) {
                    document.getElementById("inv_shop" + d).src = "./img/empty-shop.png";
                    document.getElementById("amount_shop" + d).innerHTML = "";
                }
            }
        };
        document.getElementById("quit3").addEventListener("mouseup", this.ᐃᐃᐃⲆΔ.ΔⲆⵠΔΔ, fg);
        document.getElementById("buy_kit").addEventListener("mouseup", this.ᐃᐃᐃⲆΔ.ᐃⲆΔⲆΔⵠᐃ, false);
        for (m = 1; m < 11; m++) {
            document.getElementById("starter" + m).addEventListener("mouseup", this.ᐃᐃᐃⲆΔ.ⵠⲆⲆᐃΔⵠⲆⲆᐃ, $h);
        }
        this.ΔⵠⲆⵠ = {
            open: false,
            ⵠⲆⵠΔᐃ: ᐃⵠΔᐃ.get("starve_quests") ? ᐃⵠΔᐃ.get("starve_quests") === "1" ? 1 : 0 : 0,
            button: Sv(60, 60, 0, Ⲇᐃ[755]),
            id: document.getElementById("chronoquest"),
            style: document.getElementById("chronoquest").style,
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(hq - 420) + "px";
                this.style.top = Math.floor(iq - 270) + "px";
            },
            ΔⲆⵠΔΔ: function () {
                Yw.ΔⵠⲆⵠ.style.display = "none";
                Yw.ΔⵠⲆⵠ.open = false;
            },
            select: function () {
                Yw.ΔⵠⲆⵠ.open = !Yw.ΔⵠⲆⵠ.open;
                if (Yw.ΔⵠⲆⵠ.open) {
                    Yw.ΔⵠⲆⵠ.style.display = "inline-block";
                } else {
                    Yw.ΔⵠⲆⵠ.style.display = "none";
                }
            },
            list: [],
            reset: function () {
                for (var a = 0; a < gw.length; a++) {
                    this.list[a] = 1;
                    document.getElementById("timeremain_" + a).style.display = "inline-block";
                    document.getElementById("time_finished_" + a).style.display = "none";
                    document.getElementById("claim_reward_" + a).style.display = "none";
                }
            },
            ᐃΔᐃᐃⵠᐃΔ: 0,
            ΔⲆⵠⵠⲆⲆⵠ: 0,
            ⵠΔⵠᐃΔᐃⲆⲆᐃ: function () {
                if (Yw.ΔⵠⲆⵠ.open) {
                    var a = new Date().getTime();
                    if (a - this.ᐃΔᐃᐃⵠᐃΔ >= 1000) {
                        this.ᐃΔᐃᐃⵠᐃΔ = a;
                        for (var b = 0; b < gw.length; b++) {
                            if (Yw.ΔⵠⲆⵠ.list[b]) {
                                var c = gw[b].time - (a - lf.ᐃΔⲆᐃⲆ.ⲆⲆⵠⲆⲆ + Yw.ΔⵠⲆⵠ.ΔⲆⵠⵠⲆⲆⵠ);
                                document.getElementById("timeremain_" + b).innerHTML = c > 960000 ? Math.floor(c / 480000) + " days" : c > 480000 ? Math.floor(c / 480000) + " day" : c > 60000 ? Math.floor(c / 60000) + " min" : Math.floor(c / 1000) + " sec";
                            }
                        }
                    }
                }
            },
            restore: function (a) {
                for (var b = 0; b < a.length; b++) {
                    if (a[b] != 1) {
                        Yw.ΔⵠⲆⵠ.ⵠⵠⵠⵠΔⲆΔ(b, a[b]);
                    }
                }
            },
            ⵠⵠⵠⵠΔⲆΔ: function (a, b) {
                if (b === 3 && (a === 11 || a === 12)) {
                    Ww.ᐃⲆΔᐃ.ⲆΔⵠᐃΔΔⲆ(0, 1);
                    Yw.ᐃᐃΔⵠᐃᐃᐃ();
                }
                document.getElementById("timeremain_" + a).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (b > 1) {
                    document.getElementById("time_finished_" + a).innerHTML = "SUCCEED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                } else if (b === 0) {
                    document.getElementById("time_finished_" + a).innerHTML = "FAILED";
                    document.getElementById("timeremain_" + a).style.display = "none";
                }
                document.getElementById("claim_reward_" + a).style.display = b === 2 ? "inline-block" : "none";
                document.getElementById("time_finished_" + a).style.display = "inline";
                Yw.ΔⵠⲆⵠ.list[a] = 0;
            },
            modify: function (a, b) {
                Yw.ΔⵠⲆⵠ.ⵠⵠⵠⵠΔⲆΔ(a, b);
                if (Yw.ΔⵠⲆⵠ.ⵠⲆⵠΔᐃ) {
                    Yw.ΔⵠⲆⵠ.open = Wh;
                    Yw.ΔⵠⲆⵠ.style.display = "inline-block";
                }
            },
            ᐃⲆΔᐃⵠ: function () {
                if (Yw.ΔⵠⲆⵠ.ⵠⲆⵠΔᐃ) {
                    ᐃⵠΔᐃ.set("starve_quests", "0");
                    Yw.options.ΔΔᐃⵠⲆⵠΔ.display = "none";
                } else {
                    ᐃⵠΔᐃ.set("starve_quests", "1");
                    Yw.options.ΔΔᐃⵠⲆⵠΔ.display = "inline-block";
                }
                Yw.ΔⵠⲆⵠ.ⵠⲆⵠΔᐃ = !Yw.ΔⵠⲆⵠ.ⵠⲆⵠΔᐃ;
            },
            ⲆΔᐃΔᐃΔΔⲆΔ: function () {
                var a = Number(this.id.charAt(13));
                var b = Number(this.id.charAt(14));
                if (this.id.charAt(14) !== "" && b >= 0 && b <= 9) {
                    a = a * 10 + b;
                }
                ⵠΔᐃᐃ.ΔⲆⵠΔⵠⵠᐃᐃⲆ(a);
            }
        };
        if (this.ΔⵠⲆⵠ.ⵠⲆⵠΔᐃ) {
            this.options.ΔΔᐃⵠⲆⵠΔ.display = "inline-block";
        } else {
            this.options.ΔΔᐃⵠⲆⵠΔ.display = "none";
        }
        document.getElementById("quit_chronoquest").addEventListener("mouseup", this.ΔⵠⲆⵠ.ΔⲆⵠΔΔ, false);
        for (m = 0; m < gw.length; m++) {
            document.getElementById("claim_reward_" + m).addEventListener("mouseup", this.ΔⵠⲆⵠ.ⲆΔᐃΔᐃΔΔⲆΔ, false);
        }
        this.ΔΔΔⲆ = {
            open: false,
            button: Sv(60, 60, 0, Ⲇᐃ[708]),
            list: {
                id: document.getElementById("recipe_craft"),
                style: document.getElementById("recipe_craft").style,
                ⵠΔⵠᐃΔᐃⲆ: [],
                ⲆⲆⵠⵠΔⵠΔ: 0,
                ⲆΔᐃⲆ: function () {
                    this.style.left = Math.floor(hq - 335) + "px";
                    this.style.top = Math.floor(iq - 215) + "px";
                },
                ΔⲆⵠΔΔ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    Yw.ΔΔΔⲆ.open = eh;
                },
                ᐃⲆᐃᐃᐃΔⵠ: function () {
                    document.getElementById("recipe_craft").style.display = "none";
                    document.getElementById("home_craft").style.display = "inline-block";
                },
                ⲆⵠⲆⲆ: function (a) {
                    if ((b = this.ⵠΔⵠᐃΔᐃⲆ[a]).ΔⲆⵠ) {
                        document.getElementById("watercraft").style.display = "inline-block";
                    } else {
                        document.getElementById("watercraft").style.display = "none";
                    }
                    if (b.f) {
                        document.getElementById("firecraft").style.display = "inline-block";
                    } else {
                        document.getElementById("firecraft").style.display = "none";
                    }
                    if (b.w) {
                        document.getElementById("workcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("workcraft").style.display = "none";
                    }
                    if (b.e) {
                        document.getElementById("wellcraft").style.display = "inline-block";
                    } else {
                        document.getElementById("wellcraft").style.display = "none";
                    }
                    for (var b = b.r, c = (a = 0, 1); a < b.length; a++) {
                        document.getElementById("inv" + c).style.display = "inline-block";
                        document.getElementById("inv" + c).src = Ⲇᐃ[Xr[b[a][0]].ⲆⲆ][0].ΔⵠᐃⵠⲆ === undefined ? Ⲇᐃ[Xr[b[a][0]].ⲆⲆ][0].src : Ⲇᐃ[Xr[b[a][0]].ⲆⲆ][0].ΔⵠᐃⵠⲆ;
                        document.getElementById("numb" + c).innerHTML = "" + b[a][1];
                        c++;
                    }
                    for (; c < 6; c++) {
                        document.getElementById("inv" + c).style.display = "none";
                        document.getElementById("numb" + c).innerHTML = "";
                    }
                },
                select: function (a) {
                    this.ⲆⲆⵠⵠΔⵠΔ = a;
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("workcraft").style.display = "none";
                    document.getElementById("firecraft").style.display = "none";
                    document.getElementById("watercraft").style.display = "none";
                    document.getElementById("wellcraft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "inline-block";
                    document.getElementById("inv1").style.display = "none";
                    document.getElementById("inv2").style.display = "none";
                    document.getElementById("inv3").style.display = "none";
                    document.getElementById("inv4").style.display = "none";
                    document.getElementById("inv5").style.display = "none";
                    document.getElementById("numb1").innerHTML = "";
                    document.getElementById("numb2").innerHTML = "";
                    document.getElementById("numb3").innerHTML = "";
                    document.getElementById("numb4").innerHTML = "";
                    document.getElementById("numb5").innerHTML = "";
                    for (var b = 0, c = 0; b < Ls.length; b++) {
                        var d = Ls[b];
                        if (a === d.ᐃⲆⵠ) {
                            this.ⵠΔⵠᐃΔᐃⲆ[c] = d;
                            c++;
                            document.getElementById("img_" + c).style.display = "inline-block";
                            document.getElementById("img_" + c).src = Ⲇᐃ[Xr[d.ⲆⵠⲆᐃ].ⲆⲆ][0].ΔⵠᐃⵠⲆ === undefined ? Ⲇᐃ[Xr[d.ⲆⵠⲆᐃ].ⲆⲆ][0].src : Ⲇᐃ[Xr[d.ⲆⵠⲆᐃ].ⲆⲆ][0].ΔⵠᐃⵠⲆ;
                        }
                    }
                    for (c++; c < 49; c++) {
                        document.getElementById("img_" + c).style.display = "none";
                    }
                }
            },
            ᐃΔⲆⵠⵠΔⵠ: {
                id: document.getElementById("home_craft"),
                style: document.getElementById("home_craft").style,
                ⲆΔᐃⲆ: function () {
                    this.style.left = Math.floor(hq - 285) + "px";
                    this.style.top = Math.floor(iq - 170) + "px";
                },
                ΔⲆⵠΔΔ: function () {
                    document.getElementById("home_craft").style.display = "none";
                    Yw.ΔΔΔⲆ.open = false;
                }
            },
            ⵠᐃᐃⵠᐃⲆⵠᐃⵠ: function () {
                this.open = !this.open;
                if (this.open) {
                    document.getElementById("home_craft").style.display = "inline-block";
                } else {
                    document.getElementById("home_craft").style.display = "none";
                    document.getElementById("recipe_craft").style.display = "none";
                }
            }
        };
        document.getElementById("quit").addEventListener("mouseup", this.ΔΔΔⲆ.ᐃΔⲆⵠⵠΔⵠ.ΔⲆⵠΔΔ, Gq);
        document.getElementById("quitmenu").addEventListener("mouseup", this.ΔΔΔⲆ.list.ΔⲆⵠΔΔ, ug);
        document.getElementById("backhome").addEventListener("mouseup", this.ΔΔΔⲆ.list.ᐃⲆᐃᐃᐃΔⵠ, false);
        document.getElementById("hatcategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ⵠⵠⵠΔⵠ);
        }, false);
        document.getElementById("weaponcategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ⲆᐃⲆᐃ);
        }, false);
        document.getElementById("toolcategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ⲆΔᐃⲆⲆ);
        }, Ui);
        document.getElementById("foodcategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ΔⲆⲆᐃᐃ);
        }, Sr);
        document.getElementById("placeablecategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ΔⵠΔⲆⲆ);
        }, oj);
        document.getElementById("constructioncategory").addEventListener("mouseup", function () {
            Yw.ΔΔΔⲆ.list.select(Wr.ⵠᐃΔΔΔ);
        }, cr);
        document.getElementById("img_1").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(0);
        }, oj);
        document.getElementById("img_2").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(1);
        }, fg);
        document.getElementById("img_3").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(2);
        }, Gq);
        document.getElementById("img_4").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(3);
        }, Ln);
        document.getElementById("img_5").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(4);
        }, false);
        document.getElementById("img_6").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(5);
        }, Oh);
        document.getElementById("img_7").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(6);
        }, false);
        document.getElementById("img_8").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(7);
        }, hj);
        document.getElementById("img_9").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(8);
        }, Sr);
        document.getElementById("img_10").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(9);
        }, cr);
        document.getElementById("img_11").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(10);
        }, false);
        document.getElementById("img_12").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(11);
        }, wq);
        document.getElementById("img_13").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(12);
        }, false);
        document.getElementById("img_14").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(13);
        }, false);
        document.getElementById("img_15").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(14);
        }, ug);
        document.getElementById("img_16").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(15);
        }, cr);
        document.getElementById("img_17").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(16);
        }, false);
        document.getElementById("img_18").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(17);
        }, Oh);
        document.getElementById("img_19").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(18);
        }, false);
        document.getElementById("img_20").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(19);
        }, Sr);
        document.getElementById("img_21").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(20);
        }, false);
        document.getElementById("img_22").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(21);
        }, oj);
        document.getElementById("img_23").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(22);
        }, false);
        document.getElementById("img_24").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(23);
        }, false);
        document.getElementById("img_25").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(24);
        }, false);
        document.getElementById("img_26").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(25);
        }, yg);
        document.getElementById("img_27").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(26);
        }, mk);
        document.getElementById("img_28").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(27);
        }, false);
        document.getElementById("img_29").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(28);
        }, il);
        document.getElementById("img_30").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(29);
        }, false);
        document.getElementById("img_31").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(30);
        }, Bk);
        document.getElementById("img_32").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(31);
        }, false);
        document.getElementById("img_33").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(32);
        }, wq);
        document.getElementById("img_34").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(33);
        }, false);
        document.getElementById("img_35").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(34);
        }, false);
        document.getElementById("img_36").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(35);
        }, yg);
        document.getElementById("img_37").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(36);
        }, Oh);
        document.getElementById("img_38").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(37);
        }, false);
        document.getElementById("img_39").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(38);
        }, false);
        document.getElementById("img_40").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(39);
        }, hj);
        document.getElementById("img_41").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(40);
        }, false);
        document.getElementById("img_42").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(41);
        }, false);
        document.getElementById("img_43").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(42);
        }, Gq);
        document.getElementById("img_44").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(43);
        }, hh);
        document.getElementById("img_45").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(44);
        }, false);
        document.getElementById("img_46").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(45);
        }, false);
        document.getElementById("img_47").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(46);
        }, false);
        document.getElementById("img_48").addEventListener("mousedown", function () {
            Yw.ΔΔΔⲆ.list.ⲆⵠⲆⲆ(47);
        }, false);
        this.ⲆⵠⲆᐃᐃ = {
            translate: {
                x: 0,
                y: 0
            },
            ⲆⲆⵠΔΔ: {
                x: -1,
                y: -1
            },
            ᐃⲆⲆΔ: [],
            focus: function (a) {
                var b = this.translate.y + (Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length > 0 ? -120 : -50);
                if (a.x > this.translate.x && a.x < this.translate.x + 193 && a.y > b && a.y < b + 193) {
                    this.ⲆⲆⵠΔΔ.x = a.x - this.translate.x;
                    this.ⲆⲆⵠΔΔ.y = a.y - b;
                }
            }
        };
        this.ᐃⵠⵠΔ = {
            translate: {
                y: 0,
                x: 0
            },
            ⲆⲆ: Ⲇᐃ[278],
            ΔⲆ: document.createElement("canvas")
        };
        this.ᐃⵠⵠΔ.ΔⲆ.width = this.ᐃⵠⵠΔ.ⲆⲆ.width;
        this.ᐃⵠⵠΔ.ΔⲆ.height = this.ᐃⵠⵠΔ.ⲆⲆ.height;
        this.ᐃⵠⵠΔ.Δ = this.ᐃⵠⵠΔ.ΔⲆ.getContext("2d");
        this.ᐃⲆⲆⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            ⲆⲆ: Ⲇᐃ[267],
            ΔΔⲆᐃ: Gc,
            y: 0
        };
        this.ᐃⵠⲆⵠⲆⲆⵠ = function () {
            ⵠⲆΔⵠΔ = document.getElementById("team_box");
            ⵠⲆΔⵠΔ.innerHTML = "";
            ⵠⲆΔⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[0]].ΔᐃⵠΔⵠ + "</div";
            for (var a = 1; Ww.ⵠᐃΔᐃΔ.length > a; a++) {
                ⵠⲆΔⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[a]].ΔᐃⵠΔⵠ + "</div></div>";
            }
            ⵠⲆΔⵠΔ.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
            ⵠⲆΔⵠΔ.style.display = "inline-block";
            document.getElementById("leave").addEventListener("click", ⵠΔᐃᐃ.ᐃⵠⲆⵠⲆⲆⵠ, false);
        };
        this.ⲆΔΔᐃⲆⵠᐃᐃᐃ = function () {
            ⵠⲆΔⵠΔ = document.getElementById("team_box");
            ⵠⲆΔⵠΔ.innerHTML = "";
            ⵠⲆΔⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[0]].ΔᐃⵠΔⵠ + "</div";
            for (var a = 1; a < Ww.ⵠᐃΔᐃΔ.length; a++) {
                ⵠⲆΔⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[a]].ΔᐃⵠΔⵠ + "</div></div>";
            }
            ⵠⲆΔⵠΔ.innerHTML += "</div>";
            ⵠⲆΔⵠΔ.style.display = "inline-block";
        };
        this.ⵠᐃⵠᐃⲆⵠⵠⲆⲆ = function () {
            ⵠⲆΔⵠΔ = document.getElementById("team_box");
            ⵠⲆΔⵠΔ.innerHTML = "";
            ⵠⲆΔⵠΔ.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[0]].ΔᐃⵠΔⵠ + "</div";
            for (var a = 1; Ww.ⵠᐃΔᐃΔ.length > a; a++) {
                ⵠⲆΔⵠΔ.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + lf.ᐃⲆⲆΔ[Ww.ⵠᐃΔᐃΔ[a]].ΔᐃⵠΔⵠ + "</div><div class=\"eject_member\" id=\"eject_member" + a + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
            }
            if (Ww.ⲆⵠⵠⲆᐃ.lock === 0) {
                ⵠⲆΔⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
            } else {
                ⵠⲆΔⵠΔ.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
            }
            document.getElementById("lock_team").addEventListener("click", ⵠΔᐃᐃ.ⵠⵠᐃΔⲆⲆⵠⵠⲆ, false);
            ⵠⲆΔⵠΔ.style.display = "inline-block";
            for (a = 1; Ww.ⵠᐃΔᐃΔ.length > a; a++) {
                switch (a) {
                    case 1:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(1);
                        }, false);
                        break;
                    case 2:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(2);
                        }, false);
                        break;
                    case 3:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(3);
                        }, Sr);
                        break;
                    case 4:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(4);
                        }, false);
                        break;
                    case 5:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(5);
                        }, false);
                        break;
                    case 6:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(6);
                        }, mk);
                        break;
                    case 7:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(7);
                        }, Bk);
                        break;
                    case 8:
                        document.getElementById("eject_member" + a).addEventListener("click", function () {
                            ⵠΔᐃᐃ.ᐃᐃⵠⲆⵠⲆⵠ(8);
                        }, false);
                }
            }
        };
        this.ⲆᐃᐃΔⵠ = [];
        this.ⲆᐃᐃΔⵠ[dw.ⲆⲆⲆᐃⵠⵠᐃ] = {
            button: Sv(60, 60, 0, Ⲇᐃ[556]),
            action: this.ᐃⵠⲆⵠⲆⲆⵠ
        };
        this.ⲆᐃᐃΔⵠ[dw.ⵠᐃᐃⵠᐃΔᐃ] = {
            button: Sv(60, 60, 0, Ⲇᐃ[556]),
            action: ⵠΔᐃᐃ.ᐃΔⵠⵠᐃΔⵠⲆᐃ
        };
        this.ⲆᐃᐃΔⵠ[dw.ⲆᐃΔΔΔᐃⲆ] = {
            button: Sv(60, 60, 0, Ⲇᐃ[557]),
            action: this.ⵠᐃⵠᐃⲆⵠⵠⲆⲆ
        };
        this.ⲆᐃᐃΔⵠ[dw.ΔΔᐃⲆⲆⵠⵠ] = {
            button: Sv(60, 60, 0, Ⲇᐃ[561]),
            action: this.ⲆΔΔᐃⲆⵠᐃᐃᐃ
        };
        this.ⲆᐃᐃΔⵠ[dw.ΔⵠⲆⲆⵠⲆᐃ] = {
            button: Sv(60, 60, 0, Ⲇᐃ[560]),
            action: function () { }
        };
        this.ⲆⵠΔΔⵠ = -1;
        this.ⵠⵠΔⲆⵠᐃᐃ = Sv(60, 60, 0, Ⲇᐃ[723]);
        this.ΔΔⲆᐃⵠⲆΔ = Sv(60, 60, 0, Ⲇᐃ[724]);
        this.ΔⲆⵠⲆⵠᐃⵠ = Sv(60, 60, 0, Ⲇᐃ[658]);
        this.ⲆⲆⲆⵠᐃΔⲆ = Sv(60, 60, 0, Ⲇᐃ[657]);
        this.ᐃⲆⲆΔⲆⲆⲆ = Sv(60, 60, 0, Ⲇᐃ[658]);
        this.ΔⵠΔⵠⲆⲆⲆ = Sv(60, 60, 0, Ⲇᐃ[316]);
        this.ⵠⵠᐃⲆⵠᐃⲆ = Sv(60, 60, 0, Ⲇᐃ[315]);
        this.ⵠⲆⵠⲆⲆⲆΔ = Sv(60, 60, 0, Ⲇᐃ[297]);
        this.ⵠⲆᐃⵠΔΔⲆ = Sv(60, 60, 0, Ⲇᐃ[298]);
        this.ΔⵠΔΔᐃⲆⲆ = Sv(60, 60, 0, Ⲇᐃ[418]);
        this.ΔᐃᐃⵠᐃⲆΔ = Sv(60, 60, 0, Ⲇᐃ[938]);
        this.ᐃᐃⲆᐃᐃⲆᐃ = Sv(60, 60, 0, Ⲇᐃ[412]);
        this.ΔᐃⲆⲆΔΔⵠ = Sv(60, 60, 0, Ⲇᐃ[536]);
        this.ⵠⵠⵠΔΔⵠⵠ = Sv(60, 60, 0, Ⲇᐃ[535]);
        this.ᐃⲆⵠᐃⵠⲆΔ = Sv(60, 60, 0, Ⲇᐃ[538]);
        this.Ⲇᐃᐃⵠᐃ = Sv(120, 120, 0, Ⲇᐃ[149]);
        this.Ⲇᐃᐃⵠᐃ.info.translate.x = 10;
        this.Ⲇᐃᐃⵠᐃ.info.translate.y = 10;
        this.ⵠᐃΔ = [];
        this.ⵠᐃΔ[0] = Sv(68, 68, 0, Ⲇᐃ[340], 3);
        this.ⵠᐃΔ[0].id = 0;
        this.ⵠᐃΔ[1] = Sv(68, 68, 0, Ⲇᐃ[341], 3);
        this.ⵠᐃΔ[1].id = 1;
        this.ⵠᐃΔ[108] = Sv(68, 68, 0, Ⲇᐃ[342], 3);
        this.ⵠᐃΔ[108].id = 108;
        this.ⵠᐃΔ[109] = Sv(68, 68, 0, Ⲇᐃ[343], 3);
        this.ⵠᐃΔ[109].id = 109;
        this.ⵠᐃΔ[110] = Sv(68, 68, 0, Ⲇᐃ[269], 3);
        this.ⵠᐃΔ[110].id = 110;
        this.ⵠᐃΔ[233] = Sv(68, 68, 0, Ⲇᐃ[1155], 3);
        this.ⵠᐃΔ[233].id = 233;
        this.ⵠᐃΔ[111] = Sv(68, 68, 0, Ⲇᐃ[270], 3);
        this.ⵠᐃΔ[111].id = 111;
        this.ⵠᐃΔ[112] = Sv(68, 68, 0, Ⲇᐃ[271], 3);
        this.ⵠᐃΔ[112].id = 112;
        this.ⵠᐃΔ[3] = Sv(68, 68, 0, Ⲇᐃ[272], 3);
        this.ⵠᐃΔ[3].id = 3;
        this.ⵠᐃΔ[4] = Sv(68, 68, 0, Ⲇᐃ[344], 3);
        this.ⵠᐃΔ[4].id = 4;
        this.ⵠᐃΔ[5] = Sv(68, 68, 0, Ⲇᐃ[345], 3);
        this.ⵠᐃΔ[5].id = 5;
        this.ⵠᐃΔ[57] = Sv(68, 68, 0, Ⲇᐃ[831], 3);
        this.ⵠᐃΔ[57].id = 57;
        this.ⵠᐃΔ[6] = Sv(68, 68, 0, Ⲇᐃ[346], 3);
        this.ⵠᐃΔ[6].id = 6;
        this.ⵠᐃΔ[113] = Sv(68, 68, 0, Ⲇᐃ[273], 3);
        this.ⵠᐃΔ[113].id = 113;
        this.ⵠᐃΔ[114] = Sv(68, 68, 0, Ⲇᐃ[358], 3);
        this.ⵠᐃΔ[114].id = 114;
        this.ⵠᐃΔ[115] = Sv(68, 68, 0, Ⲇᐃ[348], 3);
        this.ⵠᐃΔ[115].id = 115;
        this.ⵠᐃΔ[162] = Sv(68, 68, 0, Ⲇᐃ[349], 3);
        this.ⵠᐃΔ[162].id = 162;
        this.ⵠᐃΔ[160] = Sv(68, 68, 0, Ⲇᐃ[350], 3);
        this.ⵠᐃΔ[160].id = 160;
        this.ⵠᐃΔ[8] = Sv(68, 68, 0, Ⲇᐃ[274], 3);
        this.ⵠᐃΔ[8].id = 8;
        this.ⵠᐃΔ[117] = Sv(68, 68, 0, Ⲇᐃ[351], 3);
        this.ⵠᐃΔ[117].id = 117;
        this.ⵠᐃΔ[116] = Sv(68, 68, 0, Ⲇᐃ[275], 3);
        this.ⵠᐃΔ[116].id = 116;
        this.ⵠᐃΔ[118] = Sv(68, 68, 0, Ⲇᐃ[276], 3);
        this.ⵠᐃΔ[118].id = 118;
        this.ⵠᐃΔ[195] = Sv(68, 68, 0, Ⲇᐃ[352], 3);
        this.ⵠᐃΔ[195].id = 195;
        this.ⵠᐃΔ[161] = Sv(68, 68, 0, Ⲇᐃ[353], 3);
        this.ⵠᐃΔ[161].id = 161;
        this.ⵠᐃΔ[163] = Sv(68, 68, 0, Ⲇᐃ[354], 3);
        this.ⵠᐃΔ[163].id = 163;
        this.ⵠᐃΔ[164] = Sv(68, 68, 0, Ⲇᐃ[355], 3);
        this.ⵠᐃΔ[164].id = 164;
        this.ⵠᐃΔ[165] = Sv(68, 68, 0, Ⲇᐃ[356], 3);
        this.ⵠᐃΔ[165].id = 165;
        this.ⵠᐃΔ[166] = Sv(68, 68, 0, Ⲇᐃ[357], 3);
        this.ⵠᐃΔ[166].id = 166;
        this.ⵠᐃΔ[167] = Sv(68, 68, 0, Ⲇᐃ[359], 3);
        this.ⵠᐃΔ[167].id = 167;
        this.ⵠᐃΔ[168] = Sv(68, 68, 0, Ⲇᐃ[382], 3);
        this.ⵠᐃΔ[168].id = 168;
        this.ⵠᐃΔ[169] = Sv(68, 68, 0, Ⲇᐃ[383], 3);
        this.ⵠᐃΔ[169].id = 169;
        this.ⵠᐃΔ[170] = Sv(68, 68, 0, Ⲇᐃ[384], 3);
        this.ⵠᐃΔ[170].id = 170;
        this.ⵠᐃΔ[2] = Sv(68, 68, 0, Ⲇᐃ[386], 3);
        this.ⵠᐃΔ[2].id = 2;
        this.ⵠᐃΔ[237] = Sv(68, 68, 0, Ⲇᐃ[1163], 3);
        this.ⵠᐃΔ[237].id = 237;
        this.ⵠᐃΔ[174] = Sv(68, 68, 0, Ⲇᐃ[394], 3);
        this.ⵠᐃΔ[174].id = 174;
        this.ⵠᐃΔ[222] = Sv(68, 68, 0, Ⲇᐃ[1036], 3);
        this.ⵠᐃΔ[222].id = 222;
        this.ⵠᐃΔ[231] = Sv(68, 68, 0, Ⲇᐃ[1038], 3);
        this.ⵠᐃΔ[231].id = 231;
        this.ⵠᐃΔ[232] = Sv(68, 68, 0, Ⲇᐃ[1040], 3);
        this.ⵠᐃΔ[232].id = 232;
        this.ⵠᐃΔ[234] = Sv(68, 68, 0, Ⲇᐃ[1157], 3);
        this.ⵠᐃΔ[234].id = 234;
        this.ⵠᐃΔ[10] = Sv(68, 68, 0, Ⲇᐃ[387], 3);
        this.ⵠᐃΔ[10].id = 10;
        this.ⵠᐃΔ[171] = Sv(68, 68, 0, Ⲇᐃ[388], 3);
        this.ⵠᐃΔ[171].id = 171;
        this.ⵠᐃΔ[172] = Sv(68, 68, 0, Ⲇᐃ[389], 3);
        this.ⵠᐃΔ[172].id = 172;
        this.ⵠᐃΔ[173] = Sv(68, 68, 0, Ⲇᐃ[390], 3);
        this.ⵠᐃΔ[173].id = 173;
        this.ⵠᐃΔ[11] = Sv(68, 68, 0, Ⲇᐃ[391], 3);
        this.ⵠᐃΔ[11].id = 11;
        this.ⵠᐃΔ[12] = Sv(68, 68, 0, Ⲇᐃ[403], 3);
        this.ⵠᐃΔ[12].id = 12;
        this.ⵠᐃΔ[13] = Sv(68, 68, 0, Ⲇᐃ[397], 3);
        this.ⵠᐃΔ[13].id = 13;
        this.ⵠᐃΔ[14] = Sv(68, 68, 0, Ⲇᐃ[400], 3);
        this.ⵠᐃΔ[14].id = 14;
        this.ⵠᐃΔ[15] = Sv(68, 68, 0, Ⲇᐃ[406], 3);
        this.ⵠᐃΔ[15].id = 15;
        this.ⵠᐃΔ[16] = Sv(68, 68, 0, Ⲇᐃ[875], 3);
        this.ⵠᐃΔ[16].id = 16;
        this.ⵠᐃΔ[119] = Sv(68, 68, 0, Ⲇᐃ[410], 3);
        this.ⵠᐃΔ[119].id = 119;
        this.ⵠᐃΔ[23] = Sv(68, 68, 0, Ⲇᐃ[422], 3);
        this.ⵠᐃΔ[23].id = 23;
        this.ⵠᐃΔ[24] = Sv(68, 68, 0, Ⲇᐃ[425], 3);
        this.ⵠᐃΔ[24].id = 24;
        this.ⵠᐃΔ[87] = Sv(68, 68, 0, Ⲇᐃ[1229], 3);
        this.ⵠᐃΔ[87].id = 87;
        this.ⵠᐃΔ[88] = Sv(68, 68, 0, Ⲇᐃ[1232], 3);
        this.ⵠᐃΔ[88].id = 88;
        this.ⵠᐃΔ[80] = Sv(68, 68, 0, Ⲇᐃ[1139], 3);
        this.ⵠᐃΔ[80].id = 80;
        this.ⵠᐃΔ[81] = Sv(68, 68, 0, Ⲇᐃ[1142], 3);
        this.ⵠᐃΔ[81].id = 81;
        this.ⵠᐃΔ[101] = Sv(68, 68, 0, Ⲇᐃ[1167], 3);
        this.ⵠᐃΔ[101].id = 101;
        this.ⵠᐃΔ[64] = Sv(68, 68, 0, Ⲇᐃ[571], 3);
        this.ⵠᐃΔ[64].id = 64;
        this.ⵠᐃΔ[71] = Sv(68, 68, 0, Ⲇᐃ[1240], 3);
        this.ⵠᐃΔ[71].id = 71;
        this.ⵠᐃΔ[102] = Sv(68, 68, 0, Ⲇᐃ[1170], 3);
        this.ⵠᐃΔ[102].id = 102;
        this.ⵠᐃΔ[65] = Sv(68, 68, 0, Ⲇᐃ[574], 3);
        this.ⵠᐃΔ[65].id = 65;
        this.ⵠᐃΔ[72] = Sv(68, 68, 0, Ⲇᐃ[1243], 3);
        this.ⵠᐃΔ[72].id = 72;
        this.ⵠᐃΔ[103] = Sv(68, 68, 0, Ⲇᐃ[1173], 3);
        this.ⵠᐃΔ[103].id = 103;
        this.ⵠᐃΔ[66] = Sv(68, 68, 0, Ⲇᐃ[577], 3);
        this.ⵠᐃΔ[66].id = 66;
        this.ⵠᐃΔ[73] = Sv(68, 68, 0, Ⲇᐃ[1246], 3);
        this.ⵠᐃΔ[73].id = 73;
        this.ⵠᐃΔ[104] = Sv(68, 68, 0, Ⲇᐃ[1176], 3);
        this.ⵠᐃΔ[104].id = 104;
        this.ⵠᐃΔ[67] = Sv(68, 68, 0, Ⲇᐃ[580], 3);
        this.ⵠᐃΔ[67].id = 67;
        this.ⵠᐃΔ[74] = Sv(68, 68, 0, Ⲇᐃ[1249], 3);
        this.ⵠᐃΔ[74].id = 74;
        this.ⵠᐃΔ[105] = Sv(68, 68, 0, Ⲇᐃ[1179], 3);
        this.ⵠᐃΔ[105].id = 105;
        this.ⵠᐃΔ[68] = Sv(68, 68, 0, Ⲇᐃ[583], 3);
        this.ⵠᐃΔ[68].id = 68;
        this.ⵠᐃΔ[75] = Sv(68, 68, 0, Ⲇᐃ[1252], 3);
        this.ⵠᐃΔ[75].id = 75;
        this.ⵠᐃΔ[106] = Sv(68, 68, 0, Ⲇᐃ[1182], 3);
        this.ⵠᐃΔ[106].id = 106;
        this.ⵠᐃΔ[69] = Sv(68, 68, 0, Ⲇᐃ[586], 3);
        this.ⵠᐃΔ[69].id = 69;
        this.ⵠᐃΔ[76] = Sv(68, 68, 0, Ⲇᐃ[1255], 3);
        this.ⵠᐃΔ[76].id = 76;
        this.ⵠᐃΔ[107] = Sv(68, 68, 0, Ⲇᐃ[1185], 3);
        this.ⵠᐃΔ[107].id = 107;
        this.ⵠᐃΔ[70] = Sv(68, 68, 0, Ⲇᐃ[589], 3);
        this.ⵠᐃΔ[70].id = 70;
        this.ⵠᐃΔ[94] = Sv(68, 68, 0, Ⲇᐃ[1258], 3);
        this.ⵠᐃΔ[94].id = 94;
        this.ⵠᐃΔ[95] = Sv(68, 68, 0, Ⲇᐃ[1261], 3);
        this.ⵠᐃΔ[95].id = 95;
        this.ⵠᐃΔ[96] = Sv(68, 68, 0, Ⲇᐃ[1264], 3);
        this.ⵠᐃΔ[96].id = 96;
        this.ⵠᐃΔ[97] = Sv(68, 68, 0, Ⲇᐃ[1267], 3);
        this.ⵠᐃΔ[97].id = 97;
        this.ⵠᐃΔ[98] = Sv(68, 68, 0, Ⲇᐃ[1270], 3);
        this.ⵠᐃΔ[98].id = 98;
        this.ⵠᐃΔ[99] = Sv(68, 68, 0, Ⲇᐃ[1273], 3);
        this.ⵠᐃΔ[99].id = 99;
        this.ⵠᐃΔ[58] = Sv(68, 68, 0, Ⲇᐃ[828], 3);
        this.ⵠᐃΔ[58].id = 58;
        this.ⵠᐃΔ[25] = Sv(68, 68, 0, Ⲇᐃ[431], 3);
        this.ⵠᐃΔ[25].id = 25;
        this.ⵠᐃΔ[26] = Sv(68, 68, 0, Ⲇᐃ[434], 3);
        this.ⵠᐃΔ[26].id = 26;
        this.ⵠᐃΔ[27] = Sv(68, 68, 0, Ⲇᐃ[437], 3);
        this.ⵠᐃΔ[27].id = 27;
        this.ⵠᐃΔ[28] = Sv(68, 68, 0, Ⲇᐃ[440], 3);
        this.ⵠᐃΔ[28].id = 28;
        this.ⵠᐃΔ[120] = Sv(68, 68, 0, Ⲇᐃ[443], 3);
        this.ⵠᐃΔ[120].id = 120;
        this.ⵠᐃΔ[29] = Sv(68, 68, 0, Ⲇᐃ[385], 3);
        this.ⵠᐃΔ[29].id = 29;
        this.ⵠᐃΔ[121] = Sv(68, 68, 0, Ⲇᐃ[446], 3);
        this.ⵠᐃΔ[121].id = 121;
        this.ⵠᐃΔ[30] = Sv(68, 68, 0, Ⲇᐃ[457], 3);
        this.ⵠᐃΔ[30].id = 30;
        this.ⵠᐃΔ[9] = Sv(68, 68, 0, Ⲇᐃ[862], 3);
        this.ⵠᐃΔ[9].id = 9;
        this.ⵠᐃΔ[31] = Sv(68, 68, 0, Ⲇᐃ[459], 3);
        this.ⵠᐃΔ[31].id = 31;
        this.ⵠᐃΔ[32] = Sv(68, 68, 0, Ⲇᐃ[1018], 3);
        this.ⵠᐃΔ[32].id = 32;
        this.ⵠᐃΔ[33] = Sv(68, 68, 0, Ⲇᐃ[474], 3);
        this.ⵠᐃΔ[33].id = 33;
        this.ⵠᐃΔ[35] = Sv(68, 68, 0, Ⲇᐃ[479], 3);
        this.ⵠᐃΔ[35].id = 35;
        this.ⵠᐃΔ[36] = Sv(68, 68, 0, Ⲇᐃ[482], 3);
        this.ⵠᐃΔ[36].id = 36;
        this.ⵠᐃΔ[37] = Sv(68, 68, 0, Ⲇᐃ[485], 3);
        this.ⵠᐃΔ[37].id = 37;
        this.ⵠᐃΔ[38] = Sv(68, 68, 0, Ⲇᐃ[488], 3);
        this.ⵠᐃΔ[38].id = 38;
        this.ⵠᐃΔ[39] = Sv(68, 68, 0, Ⲇᐃ[491], 3);
        this.ⵠᐃΔ[39].id = 39;
        this.ⵠᐃΔ[122] = Sv(68, 68, 0, Ⲇᐃ[494], 3);
        this.ⵠᐃΔ[122].id = 122;
        this.ⵠᐃΔ[123] = Sv(68, 68, 0, Ⲇᐃ[497], 3);
        this.ⵠᐃΔ[123].id = 123;
        this.ⵠᐃΔ[124] = Sv(68, 68, 0, Ⲇᐃ[501], 3);
        this.ⵠᐃΔ[124].id = 124;
        this.ⵠᐃΔ[40] = Sv(68, 68, 0, Ⲇᐃ[504], 3);
        this.ⵠᐃΔ[40].id = 40;
        this.ⵠᐃΔ[146] = Sv(68, 68, 0, Ⲇᐃ[506], 3);
        this.ⵠᐃΔ[146].id = 146;
        this.ⵠᐃΔ[240] = Sv(68, 68, 0, Ⲇᐃ[1234], 3);
        this.ⵠᐃΔ[240].id = 240;
        this.ⵠᐃΔ[147] = Sv(68, 68, 0, Ⲇᐃ[514], 3);
        this.ⵠᐃΔ[147].id = 147;
        this.ⵠᐃΔ[148] = Sv(68, 68, 0, Ⲇᐃ[520], 3);
        this.ⵠᐃΔ[148].id = 148;
        this.ⵠᐃΔ[149] = Sv(68, 68, 0, Ⲇᐃ[522], 3);
        this.ⵠᐃΔ[149].id = 149;
        this.ⵠᐃΔ[150] = Sv(68, 68, 0, Ⲇᐃ[524], 3);
        this.ⵠᐃΔ[150].id = 150;
        this.ⵠᐃΔ[151] = Sv(68, 68, 0, Ⲇᐃ[531], 3);
        this.ⵠᐃΔ[151].id = 151;
        this.ⵠᐃΔ[158] = Sv(68, 68, 0, Ⲇᐃ[534], 3);
        this.ⵠᐃΔ[158].id = 158;
        this.ⵠᐃΔ[159] = Sv(68, 68, 0, Ⲇᐃ[554], 3);
        this.ⵠᐃΔ[159].id = 159;
        this.ⵠᐃΔ[43] = Sv(68, 68, 0, Ⲇᐃ[543], 3);
        this.ⵠᐃΔ[43].id = 43;
        this.ⵠᐃΔ[45] = Sv(68, 68, 0, Ⲇᐃ[552], 3);
        this.ⵠᐃΔ[45].id = 45;
        this.ⵠᐃΔ[125] = Sv(68, 68, 0, Ⲇᐃ[606], 3);
        this.ⵠᐃΔ[125].id = 125;
        this.ⵠᐃΔ[221] = Sv(68, 68, 0, Ⲇᐃ[1237], 3);
        this.ⵠᐃΔ[221].id = 221;
        this.ⵠᐃΔ[223] = Sv(68, 68, 0, Ⲇᐃ[1029], 3);
        this.ⵠᐃΔ[223].id = 223;
        this.ⵠᐃΔ[224] = Sv(68, 68, 0, Ⲇᐃ[1032], 3);
        this.ⵠᐃΔ[224].id = 224;
        this.ⵠᐃΔ[230] = Sv(68, 68, 0, Ⲇᐃ[1118], 3);
        this.ⵠᐃΔ[230].id = 230;
        this.ⵠᐃΔ[89] = Sv(68, 68, 0, Ⲇᐃ[1047], 3);
        this.ⵠᐃΔ[89].id = 89;
        this.ⵠᐃΔ[225] = Sv(68, 68, 0, Ⲇᐃ[1050], 3);
        this.ⵠᐃΔ[225].id = 225;
        this.ⵠᐃΔ[227] = Sv(68, 68, 0, Ⲇᐃ[1081], 3);
        this.ⵠᐃΔ[227].id = 227;
        this.ⵠᐃΔ[239] = Sv(68, 68, 0, Ⲇᐃ[1225], 3);
        this.ⵠᐃΔ[239].id = 239;
        this.ⵠᐃΔ[228] = Sv(68, 68, 0, Ⲇᐃ[1096], 3);
        this.ⵠᐃΔ[228].id = 228;
        this.ⵠᐃΔ[229] = Sv(68, 68, 0, Ⲇᐃ[1111], 3);
        this.ⵠᐃΔ[229].id = 229;
        this.ⵠᐃΔ[226] = Sv(68, 68, 0, Ⲇᐃ[1190], 3);
        this.ⵠᐃΔ[226].id = 226;
        this.ⵠᐃΔ[126] = Sv(68, 68, 0, Ⲇᐃ[610], 3);
        this.ⵠᐃΔ[126].id = 126;
        this.ⵠᐃΔ[127] = Sv(68, 68, 0, Ⲇᐃ[615], 3);
        this.ⵠᐃΔ[127].id = 127;
        this.ⵠᐃΔ[128] = Sv(68, 68, 0, Ⲇᐃ[614], 3);
        this.ⵠᐃΔ[128].id = 128;
        this.ⵠᐃΔ[46] = Sv(68, 68, 0, Ⲇᐃ[617], 3);
        this.ⵠᐃΔ[46].id = 46;
        this.ⵠᐃΔ[50] = Sv(68, 68, 0, Ⲇᐃ[701], 3);
        this.ⵠᐃΔ[50].id = 50;
        this.ⵠᐃΔ[51] = Sv(68, 68, 0, Ⲇᐃ[703], 3);
        this.ⵠᐃΔ[51].id = 51;
        this.ⵠᐃΔ[52] = Sv(68, 68, 0, Ⲇᐃ[707], 3);
        this.ⵠᐃΔ[52].id = 52;
        this.ⵠᐃΔ[55] = Sv(68, 68, 0, Ⲇᐃ[710], 3);
        this.ⵠᐃΔ[55].id = 55;
        this.ⵠᐃΔ[129] = Sv(68, 68, 0, Ⲇᐃ[625], 3);
        this.ⵠᐃΔ[129].id = 129;
        this.ⵠᐃΔ[130] = Sv(68, 68, 0, Ⲇᐃ[628], 3);
        this.ⵠᐃΔ[130].id = 130;
        this.ⵠᐃΔ[131] = Sv(68, 68, 0, Ⲇᐃ[630], 3);
        this.ⵠᐃΔ[131].id = 131;
        this.ⵠᐃΔ[132] = Sv(68, 68, 0, Ⲇᐃ[633], 3);
        this.ⵠᐃΔ[132].id = 132;
        this.ⵠᐃΔ[133] = Sv(68, 68, 0, Ⲇᐃ[636], 3);
        this.ⵠᐃΔ[133].id = 133;
        this.ⵠᐃΔ[134] = Sv(68, 68, 0, Ⲇᐃ[640], 3);
        this.ⵠᐃΔ[134].id = 134;
        this.ⵠᐃΔ[135] = Sv(68, 68, 0, Ⲇᐃ[645], 3);
        this.ⵠᐃΔ[135].id = 135;
        this.ⵠᐃΔ[47] = Sv(68, 68, 0, Ⲇᐃ[648], 3);
        this.ⵠᐃΔ[47].id = 47;
        this.ⵠᐃΔ[48] = Sv(68, 68, 0, Ⲇᐃ[651], 3);
        this.ⵠᐃΔ[48].id = 48;
        this.ⵠᐃΔ[49] = Sv(68, 68, 0, Ⲇᐃ[653], 3);
        this.ⵠᐃΔ[49].id = 49;
        this.ⵠᐃΔ[136] = Sv(68, 68, 0, Ⲇᐃ[661], 3);
        this.ⵠᐃΔ[136].id = 136;
        this.ⵠᐃΔ[143] = Sv(68, 68, 0, Ⲇᐃ[689], 3);
        this.ⵠᐃΔ[143].id = 143;
        this.ⵠᐃΔ[137] = Sv(68, 68, 0, Ⲇᐃ[663], 3);
        this.ⵠᐃΔ[137].id = 137;
        this.ⵠᐃΔ[138] = Sv(68, 68, 0, Ⲇᐃ[665], 3);
        this.ⵠᐃΔ[138].id = 138;
        this.ⵠᐃΔ[139] = Sv(68, 68, 0, Ⲇᐃ[675], 3);
        this.ⵠᐃΔ[139].id = 139;
        this.ⵠᐃΔ[140] = Sv(68, 68, 0, Ⲇᐃ[682], 3);
        this.ⵠᐃΔ[140].id = 140;
        this.ⵠᐃΔ[141] = Sv(68, 68, 0, Ⲇᐃ[683], 3);
        this.ⵠᐃΔ[141].id = 141;
        this.ⵠᐃΔ[142] = Sv(68, 68, 0, Ⲇᐃ[686], 3);
        this.ⵠᐃΔ[142].id = 142;
        this.ⵠᐃΔ[144] = Sv(68, 68, 0, Ⲇᐃ[719], 3);
        this.ⵠᐃΔ[144].id = 144;
        this.ⵠᐃΔ[145] = Sv(68, 68, 0, Ⲇᐃ[731], 3);
        this.ⵠᐃΔ[145].id = 145;
        this.ⵠᐃΔ[59] = Sv(68, 68, 0, Ⲇᐃ[733], 3);
        this.ⵠᐃΔ[59].id = 59;
        this.ⵠᐃΔ[62] = Sv(68, 68, 0, Ⲇᐃ[565], 3);
        this.ⵠᐃΔ[62].id = 62;
        this.ⵠᐃΔ[185] = Sv(68, 68, 0, Ⲇᐃ[590], 3);
        this.ⵠᐃΔ[185].id = 185;
        this.ⵠᐃΔ[184] = Sv(68, 68, 0, Ⲇᐃ[752], 3);
        this.ⵠᐃΔ[184].id = 184;
        this.ⵠᐃΔ[187] = Sv(68, 68, 0, Ⲇᐃ[591], 3);
        this.ⵠᐃΔ[187].id = 187;
        this.ⵠᐃΔ[186] = Sv(68, 68, 0, Ⲇᐃ[754], 3);
        this.ⵠᐃΔ[186].id = 186;
        this.ⵠᐃΔ[77] = Sv(68, 68, 0, Ⲇᐃ[757], 3);
        this.ⵠᐃΔ[77].id = 77;
        this.ⵠᐃΔ[175] = Sv(68, 68, 0, Ⲇᐃ[759], 3);
        this.ⵠᐃΔ[175].id = 175;
        this.ⵠᐃΔ[176] = Sv(68, 68, 0, Ⲇᐃ[763], 3);
        this.ⵠᐃΔ[176].id = 176;
        this.ⵠᐃΔ[78] = Sv(68, 68, 0, Ⲇᐃ[761], 3);
        this.ⵠᐃΔ[78].id = 78;
        this.ⵠᐃΔ[177] = Sv(68, 68, 0, Ⲇᐃ[766], 3);
        this.ⵠᐃΔ[177].id = 177;
        this.ⵠᐃΔ[79] = Sv(68, 68, 0, Ⲇᐃ[765], 3);
        this.ⵠᐃΔ[79].id = 79;
        this.ⵠᐃΔ[83] = Sv(68, 68, 0, Ⲇᐃ[769], 3);
        this.ⵠᐃΔ[83].id = 83;
        this.ⵠᐃΔ[84] = Sv(68, 68, 0, Ⲇᐃ[773], 3);
        this.ⵠᐃΔ[84].id = 84;
        this.ⵠᐃΔ[178] = Sv(68, 68, 0, Ⲇᐃ[774], 3);
        this.ⵠᐃΔ[178].id = 178;
        this.ⵠᐃΔ[179] = Sv(68, 68, 0, Ⲇᐃ[775], 3);
        this.ⵠᐃΔ[179].id = 179;
        this.ⵠᐃΔ[86] = Sv(68, 68, 0, Ⲇᐃ[778], 3);
        this.ⵠᐃΔ[86].id = 86;
        this.ⵠᐃΔ[85] = Sv(68, 68, 0, Ⲇᐃ[781], 3);
        this.ⵠᐃΔ[85].id = 85;
        this.ⵠᐃΔ[180] = Sv(68, 68, 0, Ⲇᐃ[786], 3);
        this.ⵠᐃΔ[180].id = 180;
        this.ⵠᐃΔ[181] = Sv(68, 68, 0, Ⲇᐃ[787], 3);
        this.ⵠᐃΔ[181].id = 181;
        this.ⵠᐃΔ[182] = Sv(68, 68, 0, Ⲇᐃ[790], 3);
        this.ⵠᐃΔ[182].id = 182;
        this.ⵠᐃΔ[183] = Sv(68, 68, 0, Ⲇᐃ[801], 3);
        this.ⵠᐃΔ[183].id = 183;
        this.ⵠᐃΔ[188] = Sv(68, 68, 0, Ⲇᐃ[810], 3);
        this.ⵠᐃΔ[188].id = 188;
        this.ⵠᐃΔ[189] = Sv(68, 68, 0, Ⲇᐃ[815], 3);
        this.ⵠᐃΔ[189].id = 189;
        this.ⵠᐃΔ[190] = Sv(68, 68, 0, Ⲇᐃ[844], 3);
        this.ⵠᐃΔ[190].id = 190;
        this.ⵠᐃΔ[191] = Sv(68, 68, 0, Ⲇᐃ[836], 3);
        this.ⵠᐃΔ[191].id = 191;
        this.ⵠᐃΔ[192] = Sv(68, 68, 0, Ⲇᐃ[841], 3);
        this.ⵠᐃΔ[192].id = 192;
        this.ⵠᐃΔ[193] = Sv(68, 68, 0, Ⲇᐃ[847], 3);
        this.ⵠᐃΔ[193].id = 193;
        this.ⵠᐃΔ[194] = Sv(68, 68, 0, Ⲇᐃ[851], 3);
        this.ⵠᐃΔ[194].id = 194;
        this.ⵠᐃΔ[206] = Sv(68, 68, 0, Ⲇᐃ[961], 3);
        this.ⵠᐃΔ[206].id = 206;
        this.ⵠᐃΔ[207] = Sv(68, 68, 0, Ⲇᐃ[974], 3);
        this.ⵠᐃΔ[207].id = 207;
        this.ⵠᐃΔ[204] = Sv(68, 68, 0, Ⲇᐃ[951], 3);
        this.ⵠᐃΔ[204].id = 204;
        this.ⵠᐃΔ[205] = Sv(68, 68, 0, Ⲇᐃ[956], 3);
        this.ⵠᐃΔ[205].id = 205;
        this.ⵠᐃΔ[208] = Sv(68, 68, 0, Ⲇᐃ[968], 3);
        this.ⵠᐃΔ[208].id = 208;
        this.ⵠᐃΔ[209] = Sv(68, 68, 0, Ⲇᐃ[973], 3);
        this.ⵠᐃΔ[209].id = 209;
        this.ⵠᐃΔ[210] = Sv(68, 68, 0, Ⲇᐃ[983], 3);
        this.ⵠᐃΔ[210].id = 210;
        this.ⵠᐃΔ[211] = Sv(68, 68, 0, Ⲇᐃ[988], 3);
        this.ⵠᐃΔ[211].id = 211;
        this.ⵠᐃΔ[41] = Sv(68, 68, 0, Ⲇᐃ[881], 3);
        this.ⵠᐃΔ[41].id = 41;
        this.ⵠᐃΔ[42] = Sv(68, 68, 0, Ⲇᐃ[883], 3);
        this.ⵠᐃΔ[42].id = 42;
        this.ⵠᐃΔ[12] = Sv(68, 68, 0, Ⲇᐃ[403], 3);
        this.ⵠᐃΔ[12].id = 12;
        this.ⵠᐃΔ[16] = Sv(68, 68, 0, Ⲇᐃ[875], 3);
        this.ⵠᐃΔ[16].id = 16;
        this.ⵠᐃΔ[196] = Sv(68, 68, 0, Ⲇᐃ[898], 3);
        this.ⵠᐃΔ[196].id = 196;
        this.ⵠᐃΔ[18] = Sv(68, 68, 0, Ⲇᐃ[899], 3);
        this.ⵠᐃΔ[18].id = 18;
        this.ⵠᐃΔ[197] = Sv(68, 68, 0, Ⲇᐃ[906], 3);
        this.ⵠᐃΔ[197].id = 197;
        this.ⵠᐃΔ[198] = Sv(68, 68, 0, Ⲇᐃ[908], 3);
        this.ⵠᐃΔ[198].id = 198;
        this.ⵠᐃΔ[61] = Sv(68, 68, 0, Ⲇᐃ[911], 3);
        this.ⵠᐃΔ[61].id = 61;
        this.ⵠᐃΔ[201] = Sv(68, 68, 0, Ⲇᐃ[871], 3);
        this.ⵠᐃΔ[201].id = 201;
        this.ⵠᐃΔ[199] = Sv(68, 68, 0, Ⲇᐃ[863], 3);
        this.ⵠᐃΔ[199].id = 199;
        this.ⵠᐃΔ[200] = Sv(68, 68, 0, Ⲇᐃ[868], 3);
        this.ⵠᐃΔ[200].id = 200;
        this.ᐃᐃⵠⲆⵠ = [];
        for (m = 0; m < 250; m++) {
            this.ᐃᐃⵠⲆⵠ[m] = Sv(0, 0, 0, Ⲇᐃ[366]);
        }
        this.ⵠⲆⲆ = [];
        this.ⵠⲆⲆ[0] = Sv(60, 60, 0, Ⲇᐃ[261], 3);
        this.ⵠⲆⲆ[0].id = 0;
        this.ⵠⲆⲆ[1] = Sv(60, 60, 0, Ⲇᐃ[312], 3);
        this.ⵠⲆⲆ[1].id = 1;
        this.ⵠⲆⲆ[108] = Sv(60, 60, 0, Ⲇᐃ[315], 3);
        this.ⵠⲆⲆ[108].id = 108;
        this.ⵠⲆⲆ[108].info.ⲆⲆ[2] = this.ⵠⲆⲆ[108].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[109] = Sv(60, 60, 0, Ⲇᐃ[316], 3);
        this.ⵠⲆⲆ[109].id = 109;
        this.ⵠⲆⲆ[109].info.ⲆⲆ[2] = this.ⵠⲆⲆ[109].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[110] = Sv(60, 60, 0, Ⲇᐃ[277], 3);
        this.ⵠⲆⲆ[110].id = 110;
        this.ⵠⲆⲆ[233] = Sv(60, 60, 0, Ⲇᐃ[1154], 3);
        this.ⵠⲆⲆ[233].id = 233;
        this.ⵠⲆⲆ[111] = Sv(60, 60, 0, Ⲇᐃ[297], 3);
        this.ⵠⲆⲆ[111].id = 111;
        this.ⵠⲆⲆ[111].info.ⲆⲆ[2] = this.ⵠⲆⲆ[111].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[112] = Sv(60, 60, 0, Ⲇᐃ[298], 3);
        this.ⵠⲆⲆ[112].id = 112;
        this.ⵠⲆⲆ[112].info.ⲆⲆ[2] = this.ⵠⲆⲆ[112].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[3] = Sv(60, 60, 0, Ⲇᐃ[258], 3);
        this.ⵠⲆⲆ[3].id = 3;
        this.ⵠⲆⲆ[4] = Sv(60, 60, 0, Ⲇᐃ[296], 3);
        this.ⵠⲆⲆ[4].id = 4;
        this.ⵠⲆⲆ[5] = Sv(60, 60, 0, Ⲇᐃ[292], 3);
        this.ⵠⲆⲆ[5].id = 5;
        this.ⵠⲆⲆ[57] = Sv(60, 60, 0, Ⲇᐃ[829], 3);
        this.ⵠⲆⲆ[57].id = 57;
        this.ⵠⲆⲆ[6] = Sv(60, 60, 0, Ⲇᐃ[293], 3);
        this.ⵠⲆⲆ[6].id = 6;
        this.ⵠⲆⲆ[113] = Sv(60, 60, 0, Ⲇᐃ[309], 3);
        this.ⵠⲆⲆ[113].id = 113;
        this.ⵠⲆⲆ[114] = Sv(60, 60, 0, Ⲇᐃ[310], 3);
        this.ⵠⲆⲆ[114].id = 114;
        this.ⵠⲆⲆ[115] = Sv(60, 60, 0, Ⲇᐃ[311], 3);
        this.ⵠⲆⲆ[115].id = 115;
        this.ⵠⲆⲆ[162] = Sv(60, 60, 0, Ⲇᐃ[317], 3);
        this.ⵠⲆⲆ[162].id = 162;
        this.ⵠⲆⲆ[160] = Sv(60, 60, 0, Ⲇᐃ[319], 3);
        this.ⵠⲆⲆ[160].id = 160;
        this.ⵠⲆⲆ[8] = Sv(60, 60, 0, Ⲇᐃ[313], 3);
        this.ⵠⲆⲆ[8].id = 8;
        this.ⵠⲆⲆ[117] = Sv(60, 60, 0, Ⲇᐃ[323], 3);
        this.ⵠⲆⲆ[117].id = 117;
        this.ⵠⲆⲆ[116] = Sv(60, 60, 0, Ⲇᐃ[300], 3);
        this.ⵠⲆⲆ[116].id = 116;
        this.ⵠⲆⲆ[118] = Sv(60, 60, 0, Ⲇᐃ[328], 3);
        this.ⵠⲆⲆ[118].id = 118;
        this.ⵠⲆⲆ[195] = Sv(60, 60, 0, Ⲇᐃ[303], 3);
        this.ⵠⲆⲆ[195].id = 195;
        this.ⵠⲆⲆ[161] = Sv(60, 60, 0, Ⲇᐃ[305], 3);
        this.ⵠⲆⲆ[161].id = 161;
        this.ⵠⲆⲆ[161].info.ⲆⲆ[2] = this.ⵠⲆⲆ[161].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[163] = Sv(60, 60, 0, Ⲇᐃ[329], 3);
        this.ⵠⲆⲆ[163].id = 163;
        this.ⵠⲆⲆ[164] = Sv(60, 60, 0, Ⲇᐃ[330], 3);
        this.ⵠⲆⲆ[164].id = 164;
        this.ⵠⲆⲆ[165] = Sv(60, 60, 0, Ⲇᐃ[331], 3);
        this.ⵠⲆⲆ[165].id = 165;
        this.ⵠⲆⲆ[166] = Sv(60, 60, 0, Ⲇᐃ[335], 3);
        this.ⵠⲆⲆ[166].id = 166;
        this.ⵠⲆⲆ[167] = Sv(60, 60, 0, Ⲇᐃ[337], 3);
        this.ⵠⲆⲆ[167].id = 167;
        this.ⵠⲆⲆ[168] = Sv(60, 60, 0, Ⲇᐃ[361], 3);
        this.ⵠⲆⲆ[168].id = 168;
        this.ⵠⲆⲆ[169] = Sv(60, 60, 0, Ⲇᐃ[362], 3);
        this.ⵠⲆⲆ[169].id = 169;
        this.ⵠⲆⲆ[170] = Sv(60, 60, 0, Ⲇᐃ[364], 3);
        this.ⵠⲆⲆ[170].id = 170;
        this.ⵠⲆⲆ[29] = Sv(60, 60, 0, Ⲇᐃ[392], 3);
        this.ⵠⲆⲆ[29].id = 29;
        this.ⵠⲆⲆ[10] = Sv(60, 60, 0, Ⲇᐃ[369], 3);
        this.ⵠⲆⲆ[10].id = 10;
        this.ⵠⲆⲆ[171] = Sv(60, 60, 0, Ⲇᐃ[372], 3);
        this.ⵠⲆⲆ[171].id = 171;
        this.ⵠⲆⲆ[172] = Sv(60, 60, 0, Ⲇᐃ[375], 3);
        this.ⵠⲆⲆ[172].id = 172;
        this.ⵠⲆⲆ[173] = Sv(60, 60, 0, Ⲇᐃ[378], 3);
        this.ⵠⲆⲆ[173].id = 173;
        this.ⵠⲆⲆ[2] = Sv(60, 60, 0, Ⲇᐃ[368], 3);
        this.ⵠⲆⲆ[2].id = 2;
        this.ⵠⲆⲆ[2].info.ⲆⲆ[2] = this.ⵠⲆⲆ[2].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[237] = Sv(60, 60, 0, Ⲇᐃ[1162], 3);
        this.ⵠⲆⲆ[237].id = 237;
        this.ⵠⲆⲆ[237].info.ⲆⲆ[2] = this.ⵠⲆⲆ[237].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[174] = Sv(60, 60, 0, Ⲇᐃ[393], 3);
        this.ⵠⲆⲆ[174].id = 174;
        this.ⵠⲆⲆ[174].info.ⲆⲆ[2] = this.ⵠⲆⲆ[174].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[222] = Sv(60, 60, 0, Ⲇᐃ[1035], 3);
        this.ⵠⲆⲆ[222].id = 222;
        this.ⵠⲆⲆ[231] = Sv(60, 60, 0, Ⲇᐃ[1037], 3);
        this.ⵠⲆⲆ[231].id = 231;
        this.ⵠⲆⲆ[232] = Sv(60, 60, 0, Ⲇᐃ[1039], 3);
        this.ⵠⲆⲆ[232].id = 232;
        this.ⵠⲆⲆ[234] = Sv(60, 60, 0, Ⲇᐃ[1156], 3);
        this.ⵠⲆⲆ[234].id = 234;
        this.ⵠⲆⲆ[10] = Sv(60, 60, 0, Ⲇᐃ[369], 3);
        this.ⵠⲆⲆ[10].id = 10;
        this.ⵠⲆⲆ[11] = Sv(60, 60, 0, Ⲇᐃ[381], 3);
        this.ⵠⲆⲆ[11].id = 11;
        this.ⵠⲆⲆ[12] = Sv(60, 60, 0, Ⲇᐃ[401], 3);
        this.ⵠⲆⲆ[12].id = 12;
        this.ⵠⲆⲆ[13] = Sv(60, 60, 0, Ⲇᐃ[395], 3);
        this.ⵠⲆⲆ[13].id = 13;
        this.ⵠⲆⲆ[14] = Sv(60, 60, 0, Ⲇᐃ[398], 3);
        this.ⵠⲆⲆ[14].id = 14;
        this.ⵠⲆⲆ[15] = Sv(60, 60, 0, Ⲇᐃ[404], 3);
        this.ⵠⲆⲆ[15].id = 15;
        this.ⵠⲆⲆ[16] = Sv(60, 60, 0, Ⲇᐃ[874], 3);
        this.ⵠⲆⲆ[16].id = 16;
        this.ⵠⲆⲆ[119] = Sv(60, 60, 0, Ⲇᐃ[408], 3);
        this.ⵠⲆⲆ[119].id = 119;
        this.ⵠⲆⲆ[23] = Sv(60, 60, 0, Ⲇᐃ[420], 3);
        this.ⵠⲆⲆ[23].id = 23;
        this.ⵠⲆⲆ[24] = Sv(60, 60, 0, Ⲇᐃ[423], 3);
        this.ⵠⲆⲆ[24].id = 24;
        this.ⵠⲆⲆ[87] = Sv(60, 60, 0, Ⲇᐃ[1227], 3);
        this.ⵠⲆⲆ[87].id = 87;
        this.ⵠⲆⲆ[88] = Sv(60, 60, 0, Ⲇᐃ[1230], 3);
        this.ⵠⲆⲆ[88].id = 88;
        this.ⵠⲆⲆ[80] = Sv(60, 60, 0, Ⲇᐃ[1137], 3);
        this.ⵠⲆⲆ[80].id = 80;
        this.ⵠⲆⲆ[81] = Sv(60, 60, 0, Ⲇᐃ[1140], 3);
        this.ⵠⲆⲆ[81].id = 81;
        this.ⵠⲆⲆ[64] = Sv(60, 60, 0, Ⲇᐃ[569], 3);
        this.ⵠⲆⲆ[64].id = 64;
        this.ⵠⲆⲆ[101] = Sv(60, 60, 0, Ⲇᐃ[1166], 3);
        this.ⵠⲆⲆ[101].id = 101;
        this.ⵠⲆⲆ[71] = Sv(60, 60, 0, Ⲇᐃ[1239], 3);
        this.ⵠⲆⲆ[71].id = 71;
        this.ⵠⲆⲆ[65] = Sv(60, 60, 0, Ⲇᐃ[572], 3);
        this.ⵠⲆⲆ[65].id = 65;
        this.ⵠⲆⲆ[102] = Sv(60, 60, 0, Ⲇᐃ[1169], 3);
        this.ⵠⲆⲆ[102].id = 102;
        this.ⵠⲆⲆ[72] = Sv(60, 60, 0, Ⲇᐃ[1242], 3);
        this.ⵠⲆⲆ[72].id = 72;
        this.ⵠⲆⲆ[66] = Sv(60, 60, 0, Ⲇᐃ[575], 3);
        this.ⵠⲆⲆ[66].id = 66;
        this.ⵠⲆⲆ[103] = Sv(60, 60, 0, Ⲇᐃ[1172], 3);
        this.ⵠⲆⲆ[103].id = 103;
        this.ⵠⲆⲆ[73] = Sv(60, 60, 0, Ⲇᐃ[1245], 3);
        this.ⵠⲆⲆ[73].id = 73;
        this.ⵠⲆⲆ[67] = Sv(60, 60, 0, Ⲇᐃ[578], 3);
        this.ⵠⲆⲆ[67].id = 67;
        this.ⵠⲆⲆ[104] = Sv(60, 60, 0, Ⲇᐃ[1175], 3);
        this.ⵠⲆⲆ[104].id = 104;
        this.ⵠⲆⲆ[74] = Sv(60, 60, 0, Ⲇᐃ[1248], 3);
        this.ⵠⲆⲆ[74].id = 74;
        this.ⵠⲆⲆ[68] = Sv(60, 60, 0, Ⲇᐃ[581], 3);
        this.ⵠⲆⲆ[68].id = 68;
        this.ⵠⲆⲆ[105] = Sv(60, 60, 0, Ⲇᐃ[1178], 3);
        this.ⵠⲆⲆ[105].id = 105;
        this.ⵠⲆⲆ[75] = Sv(60, 60, 0, Ⲇᐃ[1251], 3);
        this.ⵠⲆⲆ[75].id = 75;
        this.ⵠⲆⲆ[69] = Sv(60, 60, 0, Ⲇᐃ[584], 3);
        this.ⵠⲆⲆ[69].id = 69;
        this.ⵠⲆⲆ[106] = Sv(60, 60, 0, Ⲇᐃ[1181], 3);
        this.ⵠⲆⲆ[106].id = 106;
        this.ⵠⲆⲆ[76] = Sv(60, 60, 0, Ⲇᐃ[1254], 3);
        this.ⵠⲆⲆ[76].id = 76;
        this.ⵠⲆⲆ[70] = Sv(60, 60, 0, Ⲇᐃ[587], 3);
        this.ⵠⲆⲆ[70].id = 70;
        this.ⵠⲆⲆ[107] = Sv(60, 60, 0, Ⲇᐃ[1184], 3);
        this.ⵠⲆⲆ[107].id = 107;
        this.ⵠⲆⲆ[94] = Sv(60, 60, 0, Ⲇᐃ[1257], 3);
        this.ⵠⲆⲆ[94].id = 94;
        this.ⵠⲆⲆ[95] = Sv(60, 60, 0, Ⲇᐃ[1260], 3);
        this.ⵠⲆⲆ[95].id = 95;
        this.ⵠⲆⲆ[96] = Sv(60, 60, 0, Ⲇᐃ[1263], 3);
        this.ⵠⲆⲆ[96].id = 96;
        this.ⵠⲆⲆ[97] = Sv(60, 60, 0, Ⲇᐃ[1266], 3);
        this.ⵠⲆⲆ[97].id = 97;
        this.ⵠⲆⲆ[98] = Sv(60, 60, 0, Ⲇᐃ[1269], 3);
        this.ⵠⲆⲆ[98].id = 98;
        this.ⵠⲆⲆ[99] = Sv(60, 60, 0, Ⲇᐃ[1272], 3);
        this.ⵠⲆⲆ[99].id = 99;
        this.ⵠⲆⲆ[58] = Sv(60, 60, 0, Ⲇᐃ[826], 3);
        this.ⵠⲆⲆ[58].id = 58;
        this.ⵠⲆⲆ[25] = Sv(60, 60, 0, Ⲇᐃ[429], 3);
        this.ⵠⲆⲆ[25].id = 25;
        this.ⵠⲆⲆ[26] = Sv(60, 60, 0, Ⲇᐃ[432], 3);
        this.ⵠⲆⲆ[26].id = 26;
        this.ⵠⲆⲆ[27] = Sv(60, 60, 0, Ⲇᐃ[435], 3);
        this.ⵠⲆⲆ[27].id = 27;
        this.ⵠⲆⲆ[28] = Sv(60, 60, 0, Ⲇᐃ[438], 3);
        this.ⵠⲆⲆ[28].id = 28;
        this.ⵠⲆⲆ[120] = Sv(60, 60, 0, Ⲇᐃ[441], 3);
        this.ⵠⲆⲆ[120].id = 120;
        this.ⵠⲆⲆ[120].info.ⲆⲆ[2] = this.ⵠⲆⲆ[120].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[29] = Sv(60, 60, 0, Ⲇᐃ[392], 3);
        this.ⵠⲆⲆ[29].id = 29;
        this.ⵠⲆⲆ[121] = Sv(60, 60, 0, Ⲇᐃ[418], 3);
        this.ⵠⲆⲆ[121].id = 121;
        this.ⵠⲆⲆ[121].info.ⲆⲆ[2] = this.ⵠⲆⲆ[121].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[30] = Sv(60, 60, 0, Ⲇᐃ[455], 3);
        this.ⵠⲆⲆ[30].id = 30;
        this.ⵠⲆⲆ[9] = Sv(60, 60, 0, Ⲇᐃ[860], 3);
        this.ⵠⲆⲆ[9].id = 9;
        this.ⵠⲆⲆ[31] = Sv(60, 60, 0, Ⲇᐃ[458], 3);
        this.ⵠⲆⲆ[31].id = 31;
        this.ⵠⲆⲆ[32] = Sv(60, 60, 0, Ⲇᐃ[1017], 3);
        this.ⵠⲆⲆ[32].id = 32;
        this.ⵠⲆⲆ[33] = Sv(60, 60, 0, Ⲇᐃ[472], 3);
        this.ⵠⲆⲆ[33].id = 33;
        this.ⵠⲆⲆ[35] = Sv(60, 60, 0, Ⲇᐃ[477], 3);
        this.ⵠⲆⲆ[35].id = 35;
        this.ⵠⲆⲆ[36] = Sv(60, 60, 0, Ⲇᐃ[480], 3);
        this.ⵠⲆⲆ[36].id = 36;
        this.ⵠⲆⲆ[37] = Sv(60, 60, 0, Ⲇᐃ[483], 3);
        this.ⵠⲆⲆ[37].id = 37;
        this.ⵠⲆⲆ[38] = Sv(60, 60, 0, Ⲇᐃ[486], 3);
        this.ⵠⲆⲆ[38].id = 38;
        this.ⵠⲆⲆ[39] = Sv(60, 60, 0, Ⲇᐃ[489], 3);
        this.ⵠⲆⲆ[39].id = 39;
        this.ⵠⲆⲆ[122] = Sv(60, 60, 0, Ⲇᐃ[492], 3);
        this.ⵠⲆⲆ[122].id = 122;
        this.ⵠⲆⲆ[123] = Sv(60, 60, 0, Ⲇᐃ[495], 3);
        this.ⵠⲆⲆ[123].id = 123;
        this.ⵠⲆⲆ[124] = Sv(60, 60, 0, Ⲇᐃ[499], 3);
        this.ⵠⲆⲆ[124].id = 124;
        this.ⵠⲆⲆ[40] = Sv(60, 60, 0, Ⲇᐃ[502], 3);
        this.ⵠⲆⲆ[40].id = 40;
        this.ⵠⲆⲆ[146] = Sv(60, 60, 0, Ⲇᐃ[505], 3);
        this.ⵠⲆⲆ[146].id = 146;
        this.ⵠⲆⲆ[146].info.ⲆⲆ[2] = this.ⵠⲆⲆ[146].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[240] = Sv(60, 60, 0, Ⲇᐃ[1233], 3);
        this.ⵠⲆⲆ[240].id = 240;
        this.ⵠⲆⲆ[240].info.ⲆⲆ[2] = this.ⵠⲆⲆ[240].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[147] = Sv(60, 60, 0, Ⲇᐃ[513], 3);
        this.ⵠⲆⲆ[147].id = 147;
        this.ⵠⲆⲆ[147].info.ⲆⲆ[2] = this.ⵠⲆⲆ[147].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[148] = Sv(60, 60, 0, Ⲇᐃ[518], 3);
        this.ⵠⲆⲆ[148].id = 148;
        this.ⵠⲆⲆ[148].info.ⲆⲆ[2] = this.ⵠⲆⲆ[148].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[149] = Sv(60, 60, 0, Ⲇᐃ[521], 3);
        this.ⵠⲆⲆ[149].id = 149;
        this.ⵠⲆⲆ[150] = Sv(60, 60, 0, Ⲇᐃ[523], 3);
        this.ⵠⲆⲆ[150].id = 150;
        this.ⵠⲆⲆ[151] = Sv(60, 60, 0, Ⲇᐃ[529], 3);
        this.ⵠⲆⲆ[151].id = 151;
        this.ⵠⲆⲆ[158] = Sv(60, 60, 0, Ⲇᐃ[532], 3);
        this.ⵠⲆⲆ[158].id = 158;
        this.ⵠⲆⲆ[159] = Sv(60, 60, 0, Ⲇᐃ[553], 3);
        this.ⵠⲆⲆ[159].id = 159;
        this.ⵠⲆⲆ[43] = Sv(60, 60, 0, Ⲇᐃ[541], 3);
        this.ⵠⲆⲆ[43].id = 43;
        this.ⵠⲆⲆ[45] = Sv(60, 60, 0, Ⲇᐃ[550], 3);
        this.ⵠⲆⲆ[45].id = 45;
        this.ⵠⲆⲆ[125] = Sv(60, 60, 0, Ⲇᐃ[605], 3);
        this.ⵠⲆⲆ[125].id = 125;
        this.ⵠⲆⲆ[221] = Sv(60, 60, 0, Ⲇᐃ[1236], 3);
        this.ⵠⲆⲆ[221].id = 221;
        this.ⵠⲆⲆ[223] = Sv(60, 60, 0, Ⲇᐃ[1028], 3);
        this.ⵠⲆⲆ[223].id = 223;
        this.ⵠⲆⲆ[224] = Sv(60, 60, 0, Ⲇᐃ[1031], 3);
        this.ⵠⲆⲆ[224].id = 224;
        this.ⵠⲆⲆ[230] = Sv(60, 60, 0, Ⲇᐃ[1117], 3);
        this.ⵠⲆⲆ[230].id = 230;
        this.ⵠⲆⲆ[89] = Sv(60, 60, 0, Ⲇᐃ[1046], 3);
        this.ⵠⲆⲆ[89].id = 89;
        this.ⵠⲆⲆ[225] = Sv(60, 60, 0, Ⲇᐃ[1049], 3);
        this.ⵠⲆⲆ[225].id = 225;
        this.ⵠⲆⲆ[226] = Sv(60, 60, 0, Ⲇᐃ[1189], 3);
        this.ⵠⲆⲆ[226].id = 226;
        this.ⵠⲆⲆ[227] = Sv(60, 60, 0, Ⲇᐃ[1080], 3);
        this.ⵠⲆⲆ[227].id = 227;
        this.ⵠⲆⲆ[239] = Sv(60, 60, 0, Ⲇᐃ[1224], 3);
        this.ⵠⲆⲆ[239].id = 239;
        this.ⵠⲆⲆ[228] = Sv(60, 60, 0, Ⲇᐃ[1095], 3);
        this.ⵠⲆⲆ[228].id = 228;
        this.ⵠⲆⲆ[229] = Sv(60, 60, 0, Ⲇᐃ[1110], 3);
        this.ⵠⲆⲆ[229].id = 229;
        this.ⵠⲆⲆ[126] = Sv(60, 60, 0, Ⲇᐃ[609], 3);
        this.ⵠⲆⲆ[126].id = 126;
        this.ⵠⲆⲆ[126].info.ⲆⲆ[2] = this.ⵠⲆⲆ[126].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[127] = Sv(60, 60, 0, Ⲇᐃ[613], 3);
        this.ⵠⲆⲆ[127].id = 127;
        this.ⵠⲆⲆ[128] = Sv(60, 60, 0, Ⲇᐃ[612], 3);
        this.ⵠⲆⲆ[128].id = 128;
        this.ⵠⲆⲆ[46] = Sv(60, 60, 0, Ⲇᐃ[616], 3);
        this.ⵠⲆⲆ[46].id = 46;
        this.ⵠⲆⲆ[50] = Sv(60, 60, 0, Ⲇᐃ[699], 3);
        this.ⵠⲆⲆ[50].id = 50;
        this.ⵠⲆⲆ[51] = Sv(60, 60, 0, Ⲇᐃ[702], 3);
        this.ⵠⲆⲆ[51].id = 51;
        this.ⵠⲆⲆ[52] = Sv(60, 60, 0, Ⲇᐃ[705], 3);
        this.ⵠⲆⲆ[52].id = 52;
        this.ⵠⲆⲆ[55] = Sv(60, 60, 0, Ⲇᐃ[709], 3);
        this.ⵠⲆⲆ[55].id = 55;
        this.ⵠⲆⲆ[129] = Sv(60, 60, 0, Ⲇᐃ[624], 3);
        this.ⵠⲆⲆ[129].id = 129;
        this.ⵠⲆⲆ[129].info.ⲆⲆ[2] = this.ⵠⲆⲆ[129].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[130] = Sv(60, 60, 0, Ⲇᐃ[626], 3);
        this.ⵠⲆⲆ[130].id = 130;
        this.ⵠⲆⲆ[131] = Sv(60, 60, 0, Ⲇᐃ[629], 3);
        this.ⵠⲆⲆ[131].id = 131;
        this.ⵠⲆⲆ[131].info.ⲆⲆ[2] = this.ⵠⲆⲆ[131].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[132] = Sv(60, 60, 0, Ⲇᐃ[631], 3);
        this.ⵠⲆⲆ[132].id = 132;
        this.ⵠⲆⲆ[133] = Sv(60, 60, 0, Ⲇᐃ[634], 3);
        this.ⵠⲆⲆ[133].id = 133;
        this.ⵠⲆⲆ[134] = Sv(60, 60, 0, Ⲇᐃ[639], 3);
        this.ⵠⲆⲆ[134].id = 134;
        this.ⵠⲆⲆ[134].info.ⲆⲆ[2] = this.ⵠⲆⲆ[134].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[135] = Sv(60, 60, 0, Ⲇᐃ[644], 3);
        this.ⵠⲆⲆ[135].id = 135;
        this.ⵠⲆⲆ[47] = Sv(60, 60, 0, Ⲇᐃ[646], 3);
        this.ⵠⲆⲆ[47].id = 47;
        this.ⵠⲆⲆ[48] = Sv(60, 60, 0, Ⲇᐃ[649], 3);
        this.ⵠⲆⲆ[48].id = 48;
        this.ⵠⲆⲆ[49] = Sv(60, 60, 0, Ⲇᐃ[652], 3);
        this.ⵠⲆⲆ[49].id = 49;
        this.ⵠⲆⲆ[136] = Sv(60, 60, 0, Ⲇᐃ[659], 3);
        this.ⵠⲆⲆ[136].id = 136;
        this.ⵠⲆⲆ[143] = Sv(60, 60, 0, Ⲇᐃ[143], 3);
        this.ⵠⲆⲆ[143].id = 143;
        this.ⵠⲆⲆ[137] = Sv(60, 60, 0, Ⲇᐃ[662], 3);
        this.ⵠⲆⲆ[137].id = 137;
        this.ⵠⲆⲆ[138] = Sv(60, 60, 0, Ⲇᐃ[664], 3);
        this.ⵠⲆⲆ[138].id = 138;
        this.ⵠⲆⲆ[139] = Sv(60, 60, 0, Ⲇᐃ[674], 3);
        this.ⵠⲆⲆ[139].id = 139;
        this.ⵠⲆⲆ[139].info.ⲆⲆ[2] = this.ⵠⲆⲆ[139].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[140] = Sv(60, 60, 0, Ⲇᐃ[140], 3);
        this.ⵠⲆⲆ[140].id = 140;
        this.ⵠⲆⲆ[140].info.ⲆⲆ[2] = this.ⵠⲆⲆ[140].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[141] = Sv(60, 60, 0, Ⲇᐃ[685], 3);
        this.ⵠⲆⲆ[141].id = 141;
        this.ⵠⲆⲆ[142] = Sv(60, 60, 0, Ⲇᐃ[142], 3);
        this.ⵠⲆⲆ[142].id = 142;
        this.ⵠⲆⲆ[142].info.ⲆⲆ[2] = this.ⵠⲆⲆ[142].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[144] = Sv(60, 60, 0, Ⲇᐃ[717], 3);
        this.ⵠⲆⲆ[144].id = 144;
        this.ⵠⲆⲆ[145] = Sv(60, 60, 0, Ⲇᐃ[145], 3);
        this.ⵠⲆⲆ[145].id = 145;
        this.ⵠⲆⲆ[59] = Sv(60, 60, 0, Ⲇᐃ[732], 3);
        this.ⵠⲆⲆ[59].id = 59;
        this.ⵠⲆⲆ[62] = Sv(60, 60, 0, Ⲇᐃ[563], 3);
        this.ⵠⲆⲆ[62].id = 62;
        this.ⵠⲆⲆ[185] = Sv(60, 60, 0, Ⲇᐃ[252], 3);
        this.ⵠⲆⲆ[185].id = 185;
        this.ⵠⲆⲆ[185].info.ⲆⲆ[2] = this.ⵠⲆⲆ[185].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[184] = Sv(60, 60, 0, Ⲇᐃ[751], 3);
        this.ⵠⲆⲆ[184].id = 184;
        this.ⵠⲆⲆ[184].info.ⲆⲆ[2] = this.ⵠⲆⲆ[184].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[17] = Sv(60, 60, 0, Ⲇᐃ[877], 3);
        this.ⵠⲆⲆ[17].id = 17;
        this.ⵠⲆⲆ[63] = Sv(60, 60, 0, Ⲇᐃ[566], 3);
        this.ⵠⲆⲆ[63].id = 63;
        this.ⵠⲆⲆ[187] = Sv(60, 60, 0, Ⲇᐃ[253], 3);
        this.ⵠⲆⲆ[187].id = 187;
        this.ⵠⲆⲆ[187].info.ⲆⲆ[2] = this.ⵠⲆⲆ[187].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[186] = Sv(60, 60, 0, Ⲇᐃ[753], 3);
        this.ⵠⲆⲆ[186].id = 186;
        this.ⵠⲆⲆ[186].info.ⲆⲆ[2] = this.ⵠⲆⲆ[186].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[77] = Sv(60, 60, 0, Ⲇᐃ[756], 3);
        this.ⵠⲆⲆ[77].id = 77;
        this.ⵠⲆⲆ[175] = Sv(60, 60, 0, Ⲇᐃ[176], 3);
        this.ⵠⲆⲆ[175].id = 175;
        this.ⵠⲆⲆ[175].info.ⲆⲆ[2] = this.ⵠⲆⲆ[175].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[176] = Sv(60, 60, 0, Ⲇᐃ[177], 3);
        this.ⵠⲆⲆ[176].id = 176;
        this.ⵠⲆⲆ[176].info.ⲆⲆ[2] = this.ⵠⲆⲆ[176].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[78] = Sv(60, 60, 0, Ⲇᐃ[760], 3);
        this.ⵠⲆⲆ[78].id = 78;
        this.ⵠⲆⲆ[177] = Sv(60, 60, 0, Ⲇᐃ[175], 3);
        this.ⵠⲆⲆ[177].id = 177;
        this.ⵠⲆⲆ[177].info.ⲆⲆ[2] = this.ⵠⲆⲆ[177].info.ⲆⲆ[0];
        this.ⵠⲆⲆ[79] = Sv(60, 60, 0, Ⲇᐃ[764], 3);
        this.ⵠⲆⲆ[79].id = 79;
        this.ⵠⲆⲆ[83] = Sv(60, 60, 0, Ⲇᐃ[767], 3);
        this.ⵠⲆⲆ[83].id = 83;
        this.ⵠⲆⲆ[84] = Sv(60, 60, 0, Ⲇᐃ[771], 3);
        this.ⵠⲆⲆ[84].id = 84;
        this.ⵠⲆⲆ[178] = Sv(60, 60, 0, Ⲇᐃ[178], 3);
        this.ⵠⲆⲆ[178].id = 178;
        this.ⵠⲆⲆ[179] = Sv(60, 60, 0, Ⲇᐃ[179], 3);
        this.ⵠⲆⲆ[179].id = 179;
        this.ⵠⲆⲆ[86] = Sv(60, 60, 0, Ⲇᐃ[776], 3);
        this.ⵠⲆⲆ[86].id = 86;
        this.ⵠⲆⲆ[85] = Sv(60, 60, 0, Ⲇᐃ[779], 3);
        this.ⵠⲆⲆ[85].id = 85;
        this.ⵠⲆⲆ[180] = Sv(60, 60, 0, Ⲇᐃ[180], 3);
        this.ⵠⲆⲆ[180].id = 180;
        this.ⵠⲆⲆ[181] = Sv(60, 60, 0, Ⲇᐃ[181], 3);
        this.ⵠⲆⲆ[181].id = 181;
        this.ⵠⲆⲆ[182] = Sv(60, 60, 0, Ⲇᐃ[789], 3);
        this.ⵠⲆⲆ[182].id = 182;
        this.ⵠⲆⲆ[183] = Sv(60, 60, 0, Ⲇᐃ[800], 3);
        this.ⵠⲆⲆ[183].id = 183;
        this.ⵠⲆⲆ[188] = Sv(60, 60, 0, Ⲇᐃ[808], 3);
        this.ⵠⲆⲆ[188].id = 188;
        this.ⵠⲆⲆ[189] = Sv(60, 60, 0, Ⲇᐃ[814], 3);
        this.ⵠⲆⲆ[189].id = 189;
        this.ⵠⲆⲆ[191] = Sv(60, 60, 0, Ⲇᐃ[834], 3);
        this.ⵠⲆⲆ[191].id = 191;
        this.ⵠⲆⲆ[192] = Sv(60, 60, 0, Ⲇᐃ[840], 3);
        this.ⵠⲆⲆ[192].id = 192;
        this.ⵠⲆⲆ[190] = Sv(60, 60, 0, Ⲇᐃ[842], 3);
        this.ⵠⲆⲆ[190].id = 190;
        this.ⵠⲆⲆ[193] = Sv(60, 60, 0, Ⲇᐃ[845], 3);
        this.ⵠⲆⲆ[193].id = 193;
        this.ⵠⲆⲆ[194] = Sv(60, 60, 0, Ⲇᐃ[850], 3);
        this.ⵠⲆⲆ[194].id = 194;
        this.ⵠⲆⲆ[204] = Sv(60, 60, 0, Ⲇᐃ[949], 3);
        this.ⵠⲆⲆ[204].id = 204;
        this.ⵠⲆⲆ[205] = Sv(60, 60, 0, Ⲇᐃ[955], 3);
        this.ⵠⲆⲆ[205].id = 205;
        this.ⵠⲆⲆ[206] = Sv(60, 60, 0, Ⲇᐃ[959], 3);
        this.ⵠⲆⲆ[206].id = 206;
        this.ⵠⲆⲆ[207] = Sv(60, 60, 0, Ⲇᐃ[965], 3);
        this.ⵠⲆⲆ[207].id = 207;
        this.ⵠⲆⲆ[208] = Sv(60, 60, 0, Ⲇᐃ[966], 3);
        this.ⵠⲆⲆ[208].id = 208;
        this.ⵠⲆⲆ[209] = Sv(60, 60, 0, Ⲇᐃ[972], 3);
        this.ⵠⲆⲆ[209].id = 209;
        this.ⵠⲆⲆ[210] = Sv(60, 60, 0, Ⲇᐃ[981], 3);
        this.ⵠⲆⲆ[210].id = 210;
        this.ⵠⲆⲆ[211] = Sv(60, 60, 0, Ⲇᐃ[987], 3);
        this.ⵠⲆⲆ[211].id = 211;
        this.ⵠⲆⲆ[41] = Sv(60, 60, 0, Ⲇᐃ[880], 3);
        this.ⵠⲆⲆ[41].id = 41;
        this.ⵠⲆⲆ[42] = Sv(60, 60, 0, Ⲇᐃ[882], 3);
        this.ⵠⲆⲆ[42].id = 42;
        this.ⵠⲆⲆ[12] = Sv(60, 60, 0, Ⲇᐃ[401], 3);
        this.ⵠⲆⲆ[12].id = 12;
        this.ⵠⲆⲆ[16] = Sv(60, 60, 0, Ⲇᐃ[874], 3);
        this.ⵠⲆⲆ[16].id = 16;
        this.ⵠⲆⲆ[196] = Sv(60, 60, 0, Ⲇᐃ[196], 3);
        this.ⵠⲆⲆ[196].id = 196;
        this.ⵠⲆⲆ[18] = Sv(60, 60, 0, Ⲇᐃ[901], 3);
        this.ⵠⲆⲆ[18].id = 18;
        this.ⵠⲆⲆ[197] = Sv(60, 60, 0, Ⲇᐃ[197], 3);
        this.ⵠⲆⲆ[197].id = 197;
        this.ⵠⲆⲆ[198] = Sv(60, 60, 0, Ⲇᐃ[907], 3);
        this.ⵠⲆⲆ[198].id = 198;
        this.ⵠⲆⲆ[61] = Sv(60, 60, 0, Ⲇᐃ[910], 3);
        this.ⵠⲆⲆ[61].id = 61;
        this.ⵠⲆⲆ[201] = Sv(60, 60, 0, Ⲇᐃ[870], 3);
        this.ⵠⲆⲆ[201].id = 201;
        this.ⵠⲆⲆ[200] = Sv(60, 60, 0, Ⲇᐃ[200], 3);
        this.ⵠⲆⲆ[200].id = 200;
        this.ⵠⲆⲆ[199] = Sv(60, 60, 0, Ⲇᐃ[865], 3);
        this.ⵠⲆⲆ[199].id = 199;
        this.ᐃΔᐃᐃ = [];
        this.ᐃΔᐃᐃ[35] = Sv(60, 60, 0, Ⲇᐃ[254], 3);
        this.ᐃΔᐃᐃ[35].id = 35;
        this.ᐃΔᐃᐃ[5] = Sv(60, 60, 0, Ⲇᐃ[256], 3);
        this.ᐃΔᐃᐃ[5].id = 5;
        this.ᐃΔᐃᐃ[0] = Sv(60, 60, 0, Ⲇᐃ[302], 3);
        this.ᐃΔᐃᐃ[0].id = 0;
        this.ᐃΔᐃᐃ[3] = Sv(60, 60, 0, Ⲇᐃ[262], 3);
        this.ᐃΔᐃᐃ[3].id = 3;
        this.ᐃΔᐃᐃ[55] = Sv(60, 60, 0, Ⲇᐃ[318], 3);
        this.ᐃΔᐃᐃ[55].id = 55;
        this.ᐃΔᐃᐃ[67] = Sv(60, 60, 0, Ⲇᐃ[320], 3);
        this.ᐃΔᐃᐃ[67].id = 67;
        this.ᐃΔᐃᐃ[40] = Sv(60, 60, 0, Ⲇᐃ[284], 3);
        this.ᐃΔᐃᐃ[40].id = 40;
        this.ᐃΔᐃᐃ[6] = Sv(60, 60, 0, Ⲇᐃ[295], 3);
        this.ᐃΔᐃᐃ[6].id = 6;
        this.ᐃΔᐃᐃ[7] = Sv(60, 60, 0, Ⲇᐃ[257], 3);
        this.ᐃΔᐃᐃ[7].id = 7;
        this.ᐃΔᐃᐃ[36] = Sv(60, 60, 0, Ⲇᐃ[290], 3);
        this.ᐃΔᐃᐃ[36].id = 36;
        this.ᐃΔᐃᐃ[34] = Sv(60, 60, 0, Ⲇᐃ[830], 3);
        this.ᐃΔᐃᐃ[34].id = 34;
        this.ᐃΔᐃᐃ[37] = Sv(60, 60, 0, Ⲇᐃ[291], 3);
        this.ᐃΔᐃᐃ[37].id = 37;
        this.ᐃΔᐃᐃ[4] = Sv(60, 60, 0, Ⲇᐃ[314], 3);
        this.ᐃΔᐃᐃ[4].id = 4;
        this.ᐃΔᐃᐃ[49] = Sv(60, 60, 0, Ⲇᐃ[325], 3);
        this.ᐃΔᐃᐃ[49].id = 49;
        this.ᐃΔᐃᐃ[1] = Sv(60, 60, 0, Ⲇᐃ[327], 3);
        this.ᐃΔᐃᐃ[1].id = 1;
        this.ᐃΔᐃᐃ[54] = Sv(60, 60, 0, Ⲇᐃ[304], 3);
        this.ᐃΔᐃᐃ[54].id = 54;
        this.ᐃΔᐃᐃ[56] = Sv(60, 60, 0, Ⲇᐃ[263], 3);
        this.ᐃΔᐃᐃ[56].id = 56;
        this.ᐃΔᐃᐃ[57] = Sv(60, 60, 0, Ⲇᐃ[265], 3);
        this.ᐃΔᐃᐃ[57].id = 57;
        this.ᐃΔᐃᐃ[58] = Sv(60, 60, 0, Ⲇᐃ[332], 3);
        this.ᐃΔᐃᐃ[58].id = 58;
        this.ᐃΔᐃᐃ[61] = Sv(60, 60, 0, Ⲇᐃ[268], 3);
        this.ᐃΔᐃᐃ[61].id = 61;
        this.ᐃΔᐃᐃ[79] = Sv(60, 60, 0, Ⲇᐃ[338], 3);
        this.ᐃΔᐃᐃ[79].id = 79;
        this.ᐃΔᐃᐃ[68] = Sv(60, 60, 0, Ⲇᐃ[360], 3);
        this.ᐃΔᐃᐃ[68].id = 68;
        this.ᐃΔᐃᐃ[69] = Sv(60, 60, 0, Ⲇᐃ[363], 3);
        this.ᐃΔᐃᐃ[69].id = 69;
        this.ᐃΔᐃᐃ[70] = Sv(60, 60, 0, Ⲇᐃ[365], 3);
        this.ᐃΔᐃᐃ[70].id = 70;
        this.ᐃΔᐃᐃ[100] = Sv(60, 60, 0, Ⲇᐃ[367], 3);
        this.ᐃΔᐃᐃ[100].id = 100;
        this.ᐃΔᐃᐃ[83] = Sv(60, 60, 0, Ⲇᐃ[370], 3);
        this.ᐃΔᐃᐃ[83].id = 83;
        this.ᐃΔᐃᐃ[62] = Sv(60, 60, 0, Ⲇᐃ[371], 3);
        this.ᐃΔᐃᐃ[62].id = 62;
        this.ᐃΔᐃᐃ[63] = Sv(60, 60, 0, Ⲇᐃ[374], 3);
        this.ᐃΔᐃᐃ[63].id = 63;
        this.ᐃΔᐃᐃ[64] = Sv(60, 60, 0, Ⲇᐃ[377], 3);
        this.ᐃΔᐃᐃ[64].id = 64;
        this.ᐃΔᐃᐃ[83] = Sv(60, 60, 0, Ⲇᐃ[370], 3);
        this.ᐃΔᐃᐃ[83].id = 83;
        this.ᐃΔᐃᐃ[84] = Sv(60, 60, 0, Ⲇᐃ[380], 3);
        this.ᐃΔᐃᐃ[84].id = 84;
        this.ᐃΔᐃᐃ[25] = Sv(60, 60, 0, Ⲇᐃ[402], 3);
        this.ᐃΔᐃᐃ[25].id = 25;
        this.ᐃΔᐃᐃ[26] = Sv(60, 60, 0, Ⲇᐃ[396], 3);
        this.ᐃΔᐃᐃ[26].id = 26;
        this.ᐃΔᐃᐃ[27] = Sv(60, 60, 0, Ⲇᐃ[399], 3);
        this.ᐃΔᐃᐃ[27].id = 27;
        this.ᐃΔᐃᐃ[28] = Sv(60, 60, 0, Ⲇᐃ[405], 3);
        this.ᐃΔᐃᐃ[28].id = 28;
        this.ᐃΔᐃᐃ[31] = Sv(60, 60, 0, Ⲇᐃ[876], 3);
        this.ᐃΔᐃᐃ[31].id = 31;
        this.ᐃΔᐃᐃ[2] = Sv(60, 60, 0, Ⲇᐃ[409], 3);
        this.ᐃΔᐃᐃ[2].id = 2;
        this.ᐃΔᐃᐃ[80] = Sv(60, 60, 0, Ⲇᐃ[421], 3);
        this.ᐃΔᐃᐃ[80].id = 80;
        this.ᐃΔᐃᐃ[81] = Sv(60, 60, 0, Ⲇᐃ[424], 3);
        this.ᐃΔᐃᐃ[81].id = 81;
        this.ᐃΔᐃᐃ[Rr.ⲆⵠᐃⲆᐃ] = Sv(60, 60, 0, Ⲇᐃ[1228], 3);
        this.ᐃΔᐃᐃ[Rr.ⲆⵠᐃⲆᐃ].id = Rr.ⲆⵠᐃⲆᐃ;
        this.ᐃΔᐃᐃ[86] = Sv(60, 60, 0, Ⲇᐃ[1231], 3);
        this.ᐃΔᐃᐃ[86].id = 86;
        this.ᐃΔᐃᐃ[98] = Sv(60, 60, 0, Ⲇᐃ[1138], 3);
        this.ᐃΔᐃᐃ[98].id = 98;
        this.ᐃΔᐃᐃ[99] = Sv(60, 60, 0, Ⲇᐃ[1141], 3);
        this.ᐃΔᐃᐃ[99].id = 99;
        this.ᐃΔᐃᐃ[131] = Sv(60, 60, 0, Ⲇᐃ[570], 3);
        this.ᐃΔᐃᐃ[131].id = 131;
        this.ᐃΔᐃᐃ[132] = Sv(60, 60, 0, Ⲇᐃ[1168], 3);
        this.ᐃΔᐃᐃ[132].id = 132;
        this.ᐃΔᐃᐃ[145] = Sv(60, 60, 0, Ⲇᐃ[1238], 3);
        this.ᐃΔᐃᐃ[145].id = 145;
        this.ᐃΔᐃᐃ[133] = Sv(60, 60, 0, Ⲇᐃ[573], 3);
        this.ᐃΔᐃᐃ[133].id = 133;
        this.ᐃΔᐃᐃ[134] = Sv(60, 60, 0, Ⲇᐃ[1171], 3);
        this.ᐃΔᐃᐃ[134].id = 134;
        this.ᐃΔᐃᐃ[146] = Sv(60, 60, 0, Ⲇᐃ[1241], 3);
        this.ᐃΔᐃᐃ[146].id = 146;
        this.ᐃΔᐃᐃ[135] = Sv(60, 60, 0, Ⲇᐃ[576], 3);
        this.ᐃΔᐃᐃ[135].id = 135;
        this.ᐃΔᐃᐃ[136] = Sv(60, 60, 0, Ⲇᐃ[1174], 3);
        this.ᐃΔᐃᐃ[136].id = 136;
        this.ᐃΔᐃᐃ[147] = Sv(60, 60, 0, Ⲇᐃ[1244], 3);
        this.ᐃΔᐃᐃ[147].id = 147;
        this.ᐃΔᐃᐃ[137] = Sv(60, 60, 0, Ⲇᐃ[579], 3);
        this.ᐃΔᐃᐃ[137].id = 137;
        this.ᐃΔᐃᐃ[138] = Sv(60, 60, 0, Ⲇᐃ[1177], 3);
        this.ᐃΔᐃᐃ[138].id = 138;
        this.ᐃΔᐃᐃ[167] = Sv(60, 60, 0, Ⲇᐃ[1256], 3);
        this.ᐃΔᐃᐃ[167].id = 167;
        this.ᐃΔᐃᐃ[168] = Sv(60, 60, 0, Ⲇᐃ[1259], 3);
        this.ᐃΔᐃᐃ[168].id = 168;
        this.ᐃΔᐃᐃ[169] = Sv(60, 60, 0, Ⲇᐃ[1262], 3);
        this.ᐃΔᐃᐃ[169].id = 169;
        this.ᐃΔᐃᐃ[170] = Sv(60, 60, 0, Ⲇᐃ[1265], 3);
        this.ᐃΔᐃᐃ[170].id = 170;
        this.ᐃΔᐃᐃ[171] = Sv(60, 60, 0, Ⲇᐃ[1268], 3);
        this.ᐃΔᐃᐃ[171].id = 171;
        this.ᐃΔᐃᐃ[172] = Sv(60, 60, 0, Ⲇᐃ[1271], 3);
        this.ᐃΔᐃᐃ[172].id = 172;
        this.ᐃΔᐃᐃ[148] = Sv(60, 60, 0, Ⲇᐃ[1247], 3);
        this.ᐃΔᐃᐃ[148].id = 148;
        this.ᐃΔᐃᐃ[139] = Sv(60, 60, 0, Ⲇᐃ[582], 3);
        this.ᐃΔᐃᐃ[139].id = 139;
        this.ᐃΔᐃᐃ[140] = Sv(60, 60, 0, Ⲇᐃ[1180], 3);
        this.ᐃΔᐃᐃ[140].id = 140;
        this.ᐃΔᐃᐃ[149] = Sv(60, 60, 0, Ⲇᐃ[1250], 3);
        this.ᐃΔᐃᐃ[149].id = 149;
        this.ᐃΔᐃᐃ[141] = Sv(60, 60, 0, Ⲇᐃ[585], 3);
        this.ᐃΔᐃᐃ[141].id = 141;
        this.ᐃΔᐃᐃ[142] = Sv(60, 60, 0, Ⲇᐃ[1183], 3);
        this.ᐃΔᐃᐃ[142].id = 142;
        this.ᐃΔᐃᐃ[150] = Sv(60, 60, 0, Ⲇᐃ[1253], 3);
        this.ᐃΔᐃᐃ[150].id = 150;
        this.ᐃΔᐃᐃ[143] = Sv(60, 60, 0, Ⲇᐃ[588], 3);
        this.ᐃΔᐃᐃ[143].id = 143;
        this.ᐃΔᐃᐃ[144] = Sv(60, 60, 0, Ⲇᐃ[1186], 3);
        this.ᐃΔᐃᐃ[144].id = 144;
        this.ᐃΔᐃᐃ[87] = Sv(60, 60, 0, Ⲇᐃ[827], 3);
        this.ᐃΔᐃᐃ[87].id = 87;
        this.ᐃΔᐃᐃ[88] = Sv(60, 60, 0, Ⲇᐃ[430], 3);
        this.ᐃΔᐃᐃ[88].id = 88;
        this.ᐃΔᐃᐃ[89] = Sv(60, 60, 0, Ⲇᐃ[433], 3);
        this.ᐃΔᐃᐃ[89].id = 89;
        this.ᐃΔᐃᐃ[90] = Sv(60, 60, 0, Ⲇᐃ[436], 3);
        this.ᐃΔᐃᐃ[90].id = 90;
        this.ᐃΔᐃᐃ[24] = Sv(60, 60, 0, Ⲇᐃ[439], 3);
        this.ᐃΔᐃᐃ[24].id = 24;
        this.ᐃΔᐃᐃ[101] = Sv(60, 60, 0, Ⲇᐃ[442], 3);
        this.ᐃΔᐃᐃ[101].id = 101;
        this.ᐃΔᐃᐃ[100] = Sv(60, 60, 0, Ⲇᐃ[367], 3);
        this.ᐃΔᐃᐃ[100].id = 100;
        this.ᐃΔᐃᐃ[38] = Sv(60, 60, 0, Ⲇᐃ[456], 3);
        this.ᐃΔᐃᐃ[38].id = 38;
        this.ᐃΔᐃᐃ[Rr.ⵠΔⲆΔⵠ] = Sv(60, 60, 0, Ⲇᐃ[861], 3);
        this.ᐃΔᐃᐃ[Rr.ⵠΔⲆΔⵠ].id = Rr.ⵠΔⲆΔⵠ;
        this.ᐃΔᐃᐃ[8] = Sv(60, 60, 0, Ⲇᐃ[460], 3);
        this.ᐃΔᐃᐃ[8].id = 8;
        this.ᐃΔᐃᐃ[9] = Sv(60, 60, 0, Ⲇᐃ[1019], 3);
        this.ᐃΔᐃᐃ[9].id = 9;
        this.ᐃΔᐃᐃ[29] = Sv(60, 60, 0, Ⲇᐃ[473], 3);
        this.ᐃΔᐃᐃ[29].id = 29;
        this.ᐃΔᐃᐃ[10] = Sv(60, 60, 0, Ⲇᐃ[478], 3);
        this.ᐃΔᐃᐃ[10].id = 10;
        this.ᐃΔᐃᐃ[11] = Sv(60, 60, 0, Ⲇᐃ[481], 3);
        this.ᐃΔᐃᐃ[11].id = 11;
        this.ᐃΔᐃᐃ[12] = Sv(60, 60, 0, Ⲇᐃ[484], 3);
        this.ᐃΔᐃᐃ[12].id = 12;
        this.ᐃΔᐃᐃ[13] = Sv(60, 60, 0, Ⲇᐃ[487], 3);
        this.ᐃΔᐃᐃ[13].id = 13;
        this.ᐃΔᐃᐃ[14] = Sv(60, 60, 0, Ⲇᐃ[490], 3);
        this.ᐃΔᐃᐃ[14].id = 14;
        this.ᐃΔᐃᐃ[59] = Sv(60, 60, 0, Ⲇᐃ[493], 3);
        this.ᐃΔᐃᐃ[59].id = 59;
        this.ᐃΔᐃᐃ[71] = Sv(60, 60, 0, Ⲇᐃ[496], 3);
        this.ᐃΔᐃᐃ[71].id = 71;
        this.ᐃΔᐃᐃ[65] = Sv(60, 60, 0, Ⲇᐃ[498], 3);
        this.ᐃΔᐃᐃ[65].id = 65;
        this.ᐃΔᐃᐃ[85] = Sv(60, 60, 0, Ⲇᐃ[503], 3);
        this.ᐃΔᐃᐃ[85].id = 85;
        this.ᐃΔᐃᐃ[102] = Sv(60, 60, 0, Ⲇᐃ[515], 3);
        this.ᐃΔᐃᐃ[102].id = 102;
        this.ᐃΔᐃᐃ[103] = Sv(60, 60, 0, Ⲇᐃ[519], 3);
        this.ᐃΔᐃᐃ[103].id = 103;
        this.ᐃΔᐃᐃ[115] = Sv(60, 60, 0, Ⲇᐃ[530], 3);
        this.ᐃΔᐃᐃ[115].id = 115;
        this.ᐃΔᐃᐃ[104] = Sv(60, 60, 0, Ⲇᐃ[533], 3);
        this.ᐃΔᐃᐃ[104].id = 104;
        this.ᐃΔᐃᐃ[105] = Sv(60, 60, 0, Ⲇᐃ[555], 3);
        this.ᐃΔᐃᐃ[105].id = 105;
        this.ᐃΔᐃᐃ[91] = Sv(60, 60, 0, Ⲇᐃ[542], 3);
        this.ᐃΔᐃᐃ[91].id = 91;
        this.ᐃΔᐃᐃ[15] = Sv(60, 60, 0, Ⲇᐃ[551], 3);
        this.ᐃΔᐃᐃ[15].id = 15;
        this.ᐃΔᐃᐃ[106] = Sv(60, 60, 0, Ⲇᐃ[604], 3);
        this.ᐃΔᐃᐃ[106].id = 106;
        this.ᐃΔᐃᐃ[108] = Sv(60, 60, 0, Ⲇᐃ[1235], 3);
        this.ᐃΔᐃᐃ[108].id = 108;
        this.ᐃΔᐃᐃ[163] = Sv(60, 60, 0, Ⲇᐃ[1027], 3);
        this.ᐃΔᐃᐃ[163].id = 163;
        this.ᐃΔᐃᐃ[164] = Sv(60, 60, 0, Ⲇᐃ[1030], 3);
        this.ᐃΔᐃᐃ[164].id = 164;
        this.ᐃΔᐃᐃ[166] = Sv(60, 60, 0, Ⲇᐃ[1116], 3);
        this.ᐃΔᐃᐃ[166].id = 166;
        this.ᐃΔᐃᐃ[165] = Sv(60, 60, 0, Ⲇᐃ[1048], 3);
        this.ᐃΔᐃᐃ[165].id = 165;
        this.ᐃΔᐃᐃ[Rr.ᐃⵠΔⵠⵠ] = Sv(60, 60, 0, Ⲇᐃ[1051], 3);
        this.ᐃΔᐃᐃ[Rr.ᐃⵠΔⵠⵠ].id = Rr.ᐃⵠΔⵠⵠ;
        this.ᐃΔᐃᐃ[Rr.ⵠΔⲆⵠΔ] = Sv(60, 60, 0, Ⲇᐃ[1082], 3);
        this.ᐃΔᐃᐃ[Rr.ⵠΔⲆⵠΔ].id = Rr.ⵠΔⲆⵠΔ;
        this.ᐃΔᐃᐃ[Rr.ⵠⵠΔΔᐃ] = Sv(60, 60, 0, Ⲇᐃ[1226], 3);
        this.ᐃΔᐃᐃ[Rr.ⵠⵠΔΔᐃ].id = Rr.ⵠⵠΔΔᐃ;
        this.ᐃΔᐃᐃ[Rr.ⲆⲆᐃⵠΔ] = Sv(60, 60, 0, Ⲇᐃ[1191], 3);
        this.ᐃΔᐃᐃ[Rr.ⲆⲆᐃⵠΔ].id = Rr.ⲆⲆᐃⵠΔ;
        this.ᐃΔᐃᐃ[110] = Sv(60, 60, 0, Ⲇᐃ[611], 3);
        this.ᐃΔᐃᐃ[110].id = 110;
        this.ᐃΔᐃᐃ[111] = Sv(60, 60, 0, Ⲇᐃ[715], 3);
        this.ᐃΔᐃᐃ[111].id = 111;
        this.ᐃΔᐃᐃ[112] = Sv(60, 60, 0, Ⲇᐃ[715], 3);
        this.ᐃΔᐃᐃ[112].id = 112;
        this.ᐃΔᐃᐃ[113] = Sv(60, 60, 0, Ⲇᐃ[715], 3);
        this.ᐃΔᐃᐃ[113].id = 113;
        this.ᐃΔᐃᐃ[16] = Sv(60, 60, 0, Ⲇᐃ[618], 3);
        this.ᐃΔᐃᐃ[16].id = 16;
        this.ᐃΔᐃᐃ[17] = Sv(60, 60, 0, Ⲇᐃ[700], 3);
        this.ᐃΔᐃᐃ[17].id = 17;
        this.ᐃΔᐃᐃ[18] = Sv(60, 60, 0, Ⲇᐃ[704], 3);
        this.ᐃΔᐃᐃ[18].id = 18;
        this.ᐃΔᐃᐃ[19] = Sv(60, 60, 0, Ⲇᐃ[706], 3);
        this.ᐃΔᐃᐃ[19].id = 19;
        this.ᐃΔᐃᐃ[122] = Sv(60, 60, 0, Ⲇᐃ[711], 3);
        this.ᐃΔᐃᐃ[122].id = 122;
        this.ᐃΔᐃᐃ[20] = Sv(60, 60, 0, Ⲇᐃ[627], 3);
        this.ᐃΔᐃᐃ[20].id = 20;
        this.ᐃΔᐃᐃ[41] = Sv(60, 60, 0, Ⲇᐃ[632], 3);
        this.ᐃΔᐃᐃ[41].id = 41;
        this.ᐃΔᐃᐃ[52] = Sv(60, 60, 0, Ⲇᐃ[635], 3);
        this.ᐃΔᐃᐃ[52].id = 52;
        this.ᐃΔᐃᐃ[114] = Sv(60, 60, 0, Ⲇᐃ[643], 3);
        this.ᐃΔᐃᐃ[114].id = 114;
        this.ᐃΔᐃᐃ[94] = Sv(60, 60, 0, Ⲇᐃ[647], 3);
        this.ᐃΔᐃᐃ[94].id = 94;
        this.ᐃΔᐃᐃ[93] = Sv(60, 60, 0, Ⲇᐃ[650], 3);
        this.ᐃΔᐃᐃ[93].id = 93;
        this.ᐃΔᐃᐃ[21] = Sv(60, 60, 0, Ⲇᐃ[654], 3);
        this.ᐃΔᐃᐃ[21].id = 21;
        this.ᐃΔᐃᐃ[53] = Sv(60, 60, 0, Ⲇᐃ[660], 3);
        this.ᐃΔᐃᐃ[53].id = 53;
        this.ᐃΔᐃᐃ[51] = Sv(60, 60, 0, Ⲇᐃ[690], 3);
        this.ᐃΔᐃᐃ[51].id = 51;
        this.ᐃΔᐃᐃ[50] = Sv(60, 60, 0, Ⲇᐃ[666], 3);
        this.ᐃΔᐃᐃ[50].id = 50;
        this.ᐃΔᐃᐃ[109] = Sv(60, 60, 0, Ⲇᐃ[684], 3);
        this.ᐃΔᐃᐃ[109].id = 109;
        this.ᐃΔᐃᐃ[124] = Sv(60, 60, 0, Ⲇᐃ[718], 3);
        this.ᐃΔᐃᐃ[124].id = 124;
        this.ᐃΔᐃᐃ[125] = Sv(60, 60, 0, Ⲇᐃ[730], 3);
        this.ᐃΔᐃᐃ[125].id = 125;
        this.ᐃΔᐃᐃ[126] = Sv(60, 60, 0, Ⲇᐃ[734], 3);
        this.ᐃΔᐃᐃ[126].id = 126;
        this.ᐃΔᐃᐃ[129] = Sv(60, 60, 0, Ⲇᐃ[563], 3);
        this.ᐃΔᐃᐃ[129].id = 129;
        this.ᐃΔᐃᐃ[151] = Sv(60, 60, 0, Ⲇᐃ[758], 3);
        this.ᐃΔᐃᐃ[151].id = 151;
        this.ᐃΔᐃᐃ[152] = Sv(60, 60, 0, Ⲇᐃ[762], 3);
        this.ᐃΔᐃᐃ[152].id = 152;
        this.ᐃΔᐃᐃ[153] = Sv(60, 60, 0, Ⲇᐃ[770], 3);
        this.ᐃΔᐃᐃ[153].id = 153;
        this.ᐃΔᐃᐃ[154] = Sv(60, 60, 0, Ⲇᐃ[768], 3);
        this.ᐃΔᐃᐃ[154].id = 154;
        this.ᐃΔᐃᐃ[155] = Sv(60, 60, 0, Ⲇᐃ[772], 3);
        this.ᐃΔᐃᐃ[155].id = 155;
        this.ᐃΔᐃᐃ[157] = Sv(60, 60, 0, Ⲇᐃ[777], 3);
        this.ᐃΔᐃᐃ[157].id = 157;
        this.ᐃΔᐃᐃ[156] = Sv(60, 60, 0, Ⲇᐃ[780], 3);
        this.ᐃΔᐃᐃ[156].id = 156;
        this.ᐃΔᐃᐃ[158] = Sv(60, 60, 0, Ⲇᐃ[784], 3);
        this.ᐃΔᐃᐃ[158].id = 158;
        this.ᐃΔᐃᐃ[159] = Sv(60, 60, 0, Ⲇᐃ[785], 3);
        this.ᐃΔᐃᐃ[159].id = 159;
        this.ᐃΔᐃᐃ[160] = Sv(60, 60, 0, Ⲇᐃ[791], 3);
        this.ᐃΔᐃᐃ[160].id = 160;
        this.ᐃΔᐃᐃ[161] = Sv(60, 60, 0, Ⲇᐃ[799], 3);
        this.ᐃΔᐃᐃ[161].id = 161;
        this.ᐃΔᐃᐃ[42] = Sv(60, 60, 0, Ⲇᐃ[809], 3);
        this.ᐃΔᐃᐃ[42].id = 42;
        this.ᐃΔᐃᐃ[43] = Sv(60, 60, 0, Ⲇᐃ[835], 3);
        this.ᐃΔᐃᐃ[43].id = 43;
        this.ᐃΔᐃᐃ[107] = Sv(60, 60, 0, Ⲇᐃ[843], 3);
        this.ᐃΔᐃᐃ[107].id = 107;
        this.ᐃΔᐃᐃ[44] = Sv(60, 60, 0, Ⲇᐃ[846], 3);
        this.ᐃΔᐃᐃ[44].id = 44;
        this.ᐃΔᐃᐃ[46] = Sv(60, 60, 0, Ⲇᐃ[960], 3);
        this.ᐃΔᐃᐃ[46].id = 46;
        this.ᐃΔᐃᐃ[45] = Sv(60, 60, 0, Ⲇᐃ[950], 3);
        this.ᐃΔᐃᐃ[45].id = 45;
        this.ᐃΔᐃᐃ[47] = Sv(60, 60, 0, Ⲇᐃ[967], 3);
        this.ᐃΔᐃᐃ[47].id = 47;
        this.ᐃΔᐃᐃ[48] = Sv(60, 60, 0, Ⲇᐃ[982], 3);
        this.ᐃΔᐃᐃ[48].id = 48;
        this.ᐃΔᐃᐃ[25] = Sv(60, 60, 0, Ⲇᐃ[402], 3);
        this.ᐃΔᐃᐃ[25].id = 25;
        this.ᐃΔᐃᐃ[31] = Sv(60, 60, 0, Ⲇᐃ[876], 3);
        this.ᐃΔᐃᐃ[31].id = 31;
        this.ᐃΔᐃᐃ[33] = Sv(60, 60, 0, Ⲇᐃ[900], 3);
        this.ᐃΔᐃᐃ[33].id = 33;
        this.ᐃΔᐃᐃ[162] = Sv(60, 60, 0, Ⲇᐃ[909], 3);
        this.ᐃΔᐃᐃ[162].id = 162;
        this.ᐃΔᐃᐃ[128] = Sv(60, 60, 0, Ⲇᐃ[912], 3);
        this.ᐃΔᐃᐃ[128].id = 128;
        this.ⵠᐃΔ[53] = Sv(68, 68, 0, Ⲇᐃ[976], 3);
        this.ⵠᐃΔ[53].id = 53;
        this.ⵠⲆⲆ[53] = Sv(60, 60, 0, Ⲇᐃ[975], 3);
        this.ⵠⲆⲆ[53].id = 53;
        this.ᐃΔᐃᐃ[22] = Sv(60, 60, 0, Ⲇᐃ[977], 3);
        this.ᐃΔᐃᐃ[22].id = 22;
        this.ⵠᐃΔ[54] = Sv(68, 68, 0, Ⲇᐃ[979], 3);
        this.ⵠᐃΔ[54].id = 54;
        this.ⵠⲆⲆ[54] = Sv(60, 60, 0, Ⲇᐃ[978], 3);
        this.ⵠⲆⲆ[54].id = 54;
        this.ᐃΔᐃᐃ[23] = Sv(60, 60, 0, Ⲇᐃ[980], 3);
        this.ᐃΔᐃᐃ[23].id = 23;
        this.ⵠᐃΔ[56] = Sv(68, 68, 0, Ⲇᐃ[713], 3);
        this.ⵠᐃΔ[56].id = 56;
        this.ⵠⲆⲆ[56] = Sv(60, 60, 0, Ⲇᐃ[712], 3);
        this.ⵠⲆⲆ[56].id = 56;
        this.ᐃΔᐃᐃ[123] = Sv(60, 60, 0, Ⲇᐃ[714], 3);
        this.ᐃΔᐃᐃ[123].id = 123;
        this.ⵠᐃΔ[82] = Sv(68, 68, 0, Ⲇᐃ[428], 3);
        this.ⵠᐃΔ[82].id = 82;
        this.ⵠⲆⲆ[82] = Sv(60, 60, 0, Ⲇᐃ[426], 3);
        this.ⵠⲆⲆ[82].id = 82;
        this.ᐃΔᐃᐃ[82] = Sv(60, 60, 0, Ⲇᐃ[427], 3);
        this.ᐃΔᐃᐃ[82].id = 82;
        this.ⵠᐃΔ[235] = Sv(68, 68, 0, Ⲇᐃ[1159], 3);
        this.ⵠᐃΔ[235].id = 235;
        this.ⵠⲆⲆ[235] = Sv(60, 60, 0, Ⲇᐃ[1158], 3);
        this.ⵠⲆⲆ[235].id = 235;
        this.ⵠᐃΔ[238] = Sv(68, 68, 0, Ⲇᐃ[1188], 3);
        this.ⵠᐃΔ[238].id = 238;
        this.ⵠⲆⲆ[238] = Sv(60, 60, 0, Ⲇᐃ[1187], 3);
        this.ⵠⲆⲆ[238].id = 238;
        this.ⵠᐃΔ[236] = Sv(68, 68, 0, Ⲇᐃ[1161], 3);
        this.ⵠᐃΔ[236].id = 236;
        this.ⵠⲆⲆ[236] = Sv(60, 60, 0, Ⲇᐃ[1160], 3);
        this.ⵠⲆⲆ[236].id = 236;
        this.ⵠᐃΔ[152] = Sv(68, 68, 0, Ⲇᐃ[1197], 3);
        this.ⵠᐃΔ[152].id = 152;
        this.ⵠⲆⲆ[152] = Sv(60, 60, 0, Ⲇᐃ[1195], 3);
        this.ⵠⲆⲆ[152].id = 152;
        this.ᐃΔᐃᐃ[116] = Sv(60, 60, 0, Ⲇᐃ[1196], 3);
        this.ᐃΔᐃᐃ[116].id = 116;
        this.ⵠᐃΔ[212] = Sv(68, 68, 0, Ⲇᐃ[992], 3);
        this.ⵠᐃΔ[212].id = 212;
        this.ⵠⲆⲆ[212] = Sv(60, 60, 0, Ⲇᐃ[991], 3);
        this.ⵠⲆⲆ[212].id = 212;
        this.ᐃΔᐃᐃ[73] = Sv(60, 60, 0, Ⲇᐃ[990], 3);
        this.ᐃΔᐃᐃ[73].id = 73;
        this.ⵠᐃΔ[213] = Sv(68, 68, 0, Ⲇᐃ[995], 3);
        this.ⵠᐃΔ[213].id = 213;
        this.ⵠⲆⲆ[213] = Sv(60, 60, 0, Ⲇᐃ[994], 3);
        this.ⵠⲆⲆ[213].id = 213;
        this.ᐃΔᐃᐃ[74] = Sv(60, 60, 0, Ⲇᐃ[993], 3);
        this.ᐃΔᐃᐃ[74].id = 74;
        this.ⵠᐃΔ[214] = Sv(68, 68, 0, Ⲇᐃ[998], 3);
        this.ⵠᐃΔ[214].id = 214;
        this.ⵠⲆⲆ[214] = Sv(60, 60, 0, Ⲇᐃ[997], 3);
        this.ⵠⲆⲆ[214].id = 214;
        this.ᐃΔᐃᐃ[75] = Sv(60, 60, 0, Ⲇᐃ[996], 3);
        this.ᐃΔᐃᐃ[75].id = 75;
        this.ⵠᐃΔ[215] = Sv(68, 68, 0, Ⲇᐃ[1001], 3);
        this.ⵠᐃΔ[215].id = 215;
        this.ⵠⲆⲆ[215] = Sv(60, 60, 0, Ⲇᐃ[1000], 3);
        this.ⵠⲆⲆ[215].id = 215;
        this.ᐃΔᐃᐃ[76] = Sv(60, 60, 0, Ⲇᐃ[999], 3);
        this.ᐃΔᐃᐃ[76].id = 76;
        this.ⵠᐃΔ[216] = Sv(68, 68, 0, Ⲇᐃ[1004], 3);
        this.ⵠᐃΔ[216].id = 216;
        this.ⵠⲆⲆ[216] = Sv(60, 60, 0, Ⲇᐃ[1003], 3);
        this.ⵠⲆⲆ[216].id = 216;
        this.ᐃΔᐃᐃ[77] = Sv(60, 60, 0, Ⲇᐃ[1002], 3);
        this.ᐃΔᐃᐃ[77].id = 77;
        this.ⵠᐃΔ[220] = Sv(68, 68, 0, Ⲇᐃ[1007], 3);
        this.ⵠᐃΔ[220].id = 220;
        this.ⵠⲆⲆ[220] = Sv(60, 60, 0, Ⲇᐃ[1006], 3);
        this.ⵠⲆⲆ[220].id = 220;
        this.ᐃΔᐃᐃ[78] = Sv(60, 60, 0, Ⲇᐃ[1005], 3);
        this.ᐃΔᐃᐃ[78].id = 78;
        this.ⵠᐃΔ[217] = Sv(68, 68, 0, Ⲇᐃ[1016], 3);
        this.ⵠᐃΔ[217].id = 217;
        this.ⵠⲆⲆ[217] = Sv(60, 60, 0, Ⲇᐃ[1015], 3);
        this.ⵠⲆⲆ[217].id = 217;
        this.ᐃΔᐃᐃ[60] = Sv(60, 60, 0, Ⲇᐃ[1014], 3);
        this.ᐃΔᐃᐃ[60].id = 60;
        this.ⵠᐃΔ[219] = Sv(68, 68, 0, Ⲇᐃ[1013], 3);
        this.ⵠᐃΔ[219].id = 219;
        this.ⵠⲆⲆ[219] = Sv(60, 60, 0, Ⲇᐃ[1012], 3);
        this.ⵠⲆⲆ[219].id = 219;
        this.ᐃΔᐃᐃ[72] = Sv(60, 60, 0, Ⲇᐃ[1011], 3);
        this.ᐃΔᐃᐃ[72].id = 72;
        this.ⵠᐃΔ[218] = Sv(68, 68, 0, Ⲇᐃ[1010], 3);
        this.ⵠᐃΔ[218].id = 218;
        this.ⵠⲆⲆ[218] = Sv(60, 60, 0, Ⲇᐃ[1009], 3);
        this.ⵠⲆⲆ[218].id = 218;
        this.ᐃΔᐃᐃ[66] = Sv(60, 60, 0, Ⲇᐃ[1008], 3);
        this.ᐃΔᐃᐃ[66].id = 66;
        this.ⵠᐃΔ[153] = Sv(68, 68, 0, Ⲇᐃ[1201], 3);
        this.ⵠᐃΔ[153].id = 153;
        this.ⵠⲆⲆ[153] = Sv(60, 60, 0, Ⲇᐃ[1199], 3);
        this.ⵠⲆⲆ[153].id = 153;
        this.ᐃΔᐃᐃ[117] = Sv(60, 60, 0, Ⲇᐃ[1200], 3);
        this.ᐃΔᐃᐃ[117].id = 117;
        this.ⵠᐃΔ[154] = Sv(68, 68, 0, Ⲇᐃ[1205], 3);
        this.ⵠᐃΔ[154].id = 154;
        this.ⵠⲆⲆ[154] = Sv(60, 60, 0, Ⲇᐃ[1203], 3);
        this.ⵠⲆⲆ[154].id = 154;
        this.ᐃΔᐃᐃ[118] = Sv(60, 60, 0, Ⲇᐃ[1204], 3);
        this.ᐃΔᐃᐃ[118].id = 118;
        this.ⵠᐃΔ[155] = Sv(68, 68, 0, Ⲇᐃ[1209], 3);
        this.ⵠᐃΔ[155].id = 155;
        this.ⵠⲆⲆ[155] = Sv(60, 60, 0, Ⲇᐃ[1207], 3);
        this.ⵠⲆⲆ[155].id = 155;
        this.ᐃΔᐃᐃ[119] = Sv(60, 60, 0, Ⲇᐃ[1208], 3);
        this.ᐃΔᐃᐃ[119].id = 119;
        this.ⵠᐃΔ[156] = Sv(68, 68, 0, Ⲇᐃ[1213], 3);
        this.ⵠᐃΔ[156].id = 156;
        this.ⵠⲆⲆ[156] = Sv(60, 60, 0, Ⲇᐃ[1211], 3);
        this.ⵠⲆⲆ[156].id = 156;
        this.ᐃΔᐃᐃ[120] = Sv(60, 60, 0, Ⲇᐃ[1212], 3);
        this.ᐃΔᐃᐃ[120].id = 120;
        this.ⵠᐃΔ[157] = Sv(68, 68, 0, Ⲇᐃ[1217], 3);
        this.ⵠᐃΔ[157].id = 157;
        this.ⵠⲆⲆ[157] = Sv(60, 60, 0, Ⲇᐃ[1215], 3);
        this.ⵠⲆⲆ[157].id = 157;
        this.ᐃΔᐃᐃ[121] = Sv(60, 60, 0, Ⲇᐃ[1216], 3);
        this.ᐃΔᐃᐃ[121].id = 121;
        this.ⵠᐃΔ[203] = Sv(68, 68, 0, Ⲇᐃ[937], 3);
        this.ⵠᐃΔ[203].id = 203;
        this.ⵠⲆⲆ[203] = Sv(60, 60, 0, Ⲇᐃ[936], 3);
        this.ⵠⲆⲆ[203].id = 203;
        this.ⵠⲆⲆ[203].info.ⲆⲆ[2] = this.ⵠⲆⲆ[203].info.ⲆⲆ[0];
        this.ⵠᐃΔ[150] = Sv(68, 68, 0, Ⲇᐃ[524], 3);
        this.ⵠᐃΔ[150].id = 150;
        this.ⵠⲆⲆ[150] = Sv(60, 60, 0, Ⲇᐃ[523], 3);
        this.ⵠⲆⲆ[150].id = 150;
        this.ⵠⲆⲆ[150].info.ⲆⲆ[2] = this.ⵠⲆⲆ[150].info.ⲆⲆ[0];
        this.ⵠᐃΔ[202] = Sv(68, 68, 0, Ⲇᐃ[939], 3);
        this.ⵠᐃΔ[202].id = 202;
        this.ⵠⲆⲆ[202] = Sv(60, 60, 0, Ⲇᐃ[938], 3);
        this.ⵠⲆⲆ[202].id = 202;
        this.ⵠⲆⲆ[202].info.ⲆⲆ[2] = this.ⵠⲆⲆ[202].info.ⲆⲆ[0];
        this.ⵠᐃΔ[19] = Sv(68, 68, 0, Ⲇᐃ[934], 3);
        this.ⵠᐃΔ[19].id = 19;
        this.ⵠⲆⲆ[19] = Sv(60, 60, 0, Ⲇᐃ[932], 3);
        this.ⵠⲆⲆ[19].id = 19;
        this.ᐃΔᐃᐃ[39] = Sv(60, 60, 0, Ⲇᐃ[933], 3);
        this.ᐃΔᐃᐃ[39].id = 39;
        this.ⵠᐃΔ[20] = Sv(68, 68, 0, Ⲇᐃ[923], 3);
        this.ⵠᐃΔ[20].id = 20;
        this.ⵠⲆⲆ[20] = Sv(60, 60, 0, Ⲇᐃ[921], 3);
        this.ⵠⲆⲆ[20].id = 20;
        this.ᐃΔᐃᐃ[95] = Sv(60, 60, 0, Ⲇᐃ[922], 3);
        this.ᐃΔᐃᐃ[95].id = 95;
        this.ⵠᐃΔ[21] = Sv(68, 68, 0, Ⲇᐃ[927], 3);
        this.ⵠᐃΔ[21].id = 21;
        this.ⵠⲆⲆ[21] = Sv(60, 60, 0, Ⲇᐃ[925], 3);
        this.ⵠⲆⲆ[21].id = 21;
        this.ᐃΔᐃᐃ[96] = Sv(60, 60, 0, Ⲇᐃ[926], 3);
        this.ᐃΔᐃᐃ[96].id = 96;
        this.ⵠᐃΔ[22] = Sv(68, 68, 0, Ⲇᐃ[931], 3);
        this.ⵠᐃΔ[22].id = 22;
        this.ⵠⲆⲆ[22] = Sv(60, 60, 0, Ⲇᐃ[929], 3);
        this.ⵠⲆⲆ[22].id = 22;
        this.ᐃΔᐃᐃ[97] = Sv(60, 60, 0, Ⲇᐃ[930], 3);
        this.ᐃΔᐃᐃ[97].id = 97;
        this.ⵠᐃΔ[60] = Sv(68, 68, 0, Ⲇᐃ[736], 3);
        this.ⵠᐃΔ[60].id = 60;
        this.ⵠⲆⲆ[60] = Sv(60, 60, 0, Ⲇᐃ[735], 3);
        this.ⵠⲆⲆ[60].id = 60;
        this.ᐃΔᐃᐃ[127] = Sv(60, 60, 0, Ⲇᐃ[737], 3);
        this.ᐃΔᐃᐃ[127].id = 127;
        this.ⵠᐃΔ[90] = Sv(68, 68, 0, Ⲇᐃ[739], 3);
        this.ⵠᐃΔ[90].id = 90;
        this.ⵠⲆⲆ[90] = Sv(60, 60, 0, Ⲇᐃ[738], 3);
        this.ⵠⲆⲆ[90].id = 90;
        this.ᐃΔᐃᐃ[173] = Sv(60, 60, 0, Ⲇᐃ[740], 3);
        this.ᐃΔᐃᐃ[173].id = 173;
        this.ⵠᐃΔ[92] = Sv(68, 68, 0, Ⲇᐃ[745], 3);
        this.ⵠᐃΔ[92].id = 92;
        this.ⵠⲆⲆ[92] = Sv(60, 60, 0, Ⲇᐃ[744], 3);
        this.ⵠⲆⲆ[92].id = 92;
        this.ᐃΔᐃᐃ[174] = Sv(60, 60, 0, Ⲇᐃ[746], 3);
        this.ᐃΔᐃᐃ[174].id = 174;
        this.ⵠᐃΔ[93] = Sv(68, 68, 0, Ⲇᐃ[748], 3);
        this.ⵠᐃΔ[93].id = 93;
        this.ⵠⲆⲆ[93] = Sv(60, 60, 0, Ⲇᐃ[747], 3);
        this.ⵠⲆⲆ[93].id = 93;
        this.ᐃΔᐃᐃ[175] = Sv(60, 60, 0, Ⲇᐃ[749], 3);
        this.ᐃΔᐃᐃ[175].id = 175;
        this.ⵠᐃΔ[91] = Sv(68, 68, 0, Ⲇᐃ[742], 3);
        this.ⵠᐃΔ[91].id = 91;
        this.ⵠⲆⲆ[91] = Sv(60, 60, 0, Ⲇᐃ[741], 3);
        this.ⵠⲆⲆ[91].id = 91;
        this.ᐃΔᐃᐃ[176] = Sv(60, 60, 0, Ⲇᐃ[743], 3);
        this.ᐃΔᐃᐃ[176].id = 176;
        this.ⵠᐃΔ[100] = Sv(68, 68, 0, Ⲇᐃ[1165], 3);
        this.ⵠᐃΔ[100].id = 100;
        this.ⵠⲆⲆ[100] = Sv(60, 60, 0, Ⲇᐃ[1164], 3);
        this.ⵠⲆⲆ[100].id = 100;
        this.ᐃΔᐃᐃ[Rr.ᐃⲆⵠΔⲆ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ⲆΔᐃᐃⲆⵠⲆΔⵠ], 3);
        this.ᐃΔᐃᐃ[Rr.ᐃⲆⵠΔⲆ].id = Rr.ᐃⲆⵠΔⲆ;
        this.ⵠᐃΔ[34] = Sv(68, 68, 0, Ⲇᐃ[945], 3);
        this.ⵠᐃΔ[34].id = 34;
        this.ⵠⲆⲆ[34] = Sv(60, 60, 0, Ⲇᐃ[943], 3);
        this.ⵠⲆⲆ[34].id = 34;
        this.ᐃΔᐃᐃ[30] = Sv(60, 60, 0, Ⲇᐃ[944], 3);
        this.ᐃΔᐃᐃ[30].id = 30;
        this.ⵠᐃΔ[44] = Sv(68, 68, 0, Ⲇᐃ[948], 3);
        this.ⵠᐃΔ[44].id = 44;
        this.ⵠⲆⲆ[44] = Sv(60, 60, 0, Ⲇᐃ[946], 3);
        this.ⵠⲆⲆ[44].id = 44;
        this.ᐃΔᐃᐃ[92] = Sv(60, 60, 0, Ⲇᐃ[947], 3);
        this.ᐃΔᐃᐃ[92].id = 92;
        this.ⵠᐃΔ[17] = Sv(68, 68, 0, Ⲇᐃ[878], 3);
        this.ⵠᐃΔ[17].id = 17;
        this.ⵠⲆⲆ[17] = Sv(60, 60, 0, Ⲇᐃ[877], 3);
        this.ⵠⲆⲆ[17].id = 17;
        this.ᐃΔᐃᐃ[32] = Sv(60, 60, 0, Ⲇᐃ[879], 3);
        this.ᐃΔᐃᐃ[32].id = 32;
        this.ⵠᐃΔ[63] = Sv(68, 68, 0, Ⲇᐃ[568], 3);
        this.ⵠᐃΔ[63].id = 63;
        this.ⵠⲆⲆ[63] = Sv(60, 60, 0, Ⲇᐃ[566], 3);
        this.ⵠⲆⲆ[63].id = 63;
        this.ᐃΔᐃᐃ[130] = Sv(60, 60, 0, Ⲇᐃ[567], 3);
        this.ᐃΔᐃᐃ[130].id = 130;
        this.ⵠᐃΔ[187] = Sv(68, 68, 0, Ⲇᐃ[591], 3);
        this.ⵠᐃΔ[187].id = 187;
        this.ⵠⲆⲆ[187] = Sv(60, 60, 0, Ⲇᐃ[253], 3);
        this.ⵠⲆⲆ[187].id = 187;
        this.ⵠᐃΔ[Vr.ΔΔᐃΔⲆᐃΔ] = Sv(68, 68, 0, Ⲇᐃ[Pr.ᐃᐃΔΔΔⵠᐃᐃⲆ], 3);
        this.ⵠᐃΔ[Vr.ΔΔᐃΔⲆᐃΔ].id = Vr.ΔΔᐃΔⲆᐃΔ;
        this.ⵠⲆⲆ[Vr.ΔΔᐃΔⲆᐃΔ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ΔΔᐃᐃⵠΔΔⲆᐃ], 3);
        this.ⵠⲆⲆ[Vr.ΔΔᐃΔⲆᐃΔ].id = Vr.ΔΔᐃΔⲆᐃΔ;
        this.ⵠᐃΔ[Vr.ⵠⲆⲆᐃⵠᐃΔ] = Sv(68, 68, 0, Ⲇᐃ[Pr.ⲆΔⵠΔᐃⵠΔⵠⵠ], 3);
        this.ⵠᐃΔ[Vr.ⵠⲆⲆᐃⵠᐃΔ].id = Vr.ⵠⲆⲆᐃⵠᐃΔ;
        this.ⵠⲆⲆ[Vr.ⵠⲆⲆᐃⵠᐃΔ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ⲆᐃΔΔⵠΔⲆᐃᐃ], 3);
        this.ⵠⲆⲆ[Vr.ⵠⲆⲆᐃⵠᐃΔ].id = Vr.ⵠⲆⲆᐃⵠᐃΔ;
        this.ⵠᐃΔ[Vr.ⵠⲆΔⵠⲆᐃⲆ] = Sv(68, 68, 0, Ⲇᐃ[Pr.ⲆⲆⵠᐃⵠⵠⲆΔΔ], 3);
        this.ⵠᐃΔ[Vr.ⵠⲆΔⵠⲆᐃⲆ].id = Vr.ⵠⲆΔⵠⲆᐃⲆ;
        this.ⵠⲆⲆ[Vr.ⵠⲆΔⵠⲆᐃⲆ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ⵠⵠΔΔᐃΔᐃⵠⵠ], 3);
        this.ⵠⲆⲆ[Vr.ⵠⲆΔⵠⲆᐃⲆ].id = Vr.ⵠⲆΔⵠⲆᐃⲆ;
        this.ⵠᐃΔ[Vr.ⲆⲆᐃΔᐃⲆΔ] = Sv(68, 68, 0, Ⲇᐃ[Pr.ⵠⲆΔᐃΔⵠⵠⲆⵠ], 3);
        this.ⵠᐃΔ[Vr.ⲆⲆᐃΔᐃⲆΔ].id = Vr.ⲆⲆᐃΔᐃⲆΔ;
        this.ⵠⲆⲆ[Vr.ⲆⲆᐃΔᐃⲆΔ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ⵠⲆᐃᐃΔΔᐃⲆⲆ], 3);
        this.ⵠⲆⲆ[Vr.ⲆⲆᐃΔᐃⲆΔ].id = Vr.ⲆⲆᐃΔᐃⲆΔ;
        this.ⵠᐃΔ[Vr.ⲆⲆⵠⵠⲆᐃⵠ] = Sv(68, 68, 0, Ⲇᐃ[Pr.ⵠΔⲆⵠⲆᐃΔⵠᐃ], 3);
        this.ⵠᐃΔ[Vr.ⲆⲆⵠⵠⲆᐃⵠ].id = Vr.ⲆⲆⵠⵠⲆᐃⵠ;
        this.ⵠⲆⲆ[Vr.ⲆⲆⵠⵠⲆᐃⵠ] = Sv(60, 60, 0, Ⲇᐃ[Pr.ᐃⵠΔⲆⵠΔᐃΔᐃ], 3);
        this.ⵠⲆⲆ[Vr.ⲆⲆⵠⵠⲆᐃⵠ].id = Vr.ⲆⲆⵠⵠⲆᐃⵠ;
        this.ᐃΔⵠΔᐃᐃⵠ = function () {
            for (var a = Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ, b = 10, c = 10, d = 0; a.length > d; d++) {
                if (d > 0 && !(d % 4)) {
                    b += a[0].info.width + 10;
                    c = 10;
                }
                a[d].info.translate.x = b;
                a[d].info.translate.y = c;
                c += 10 + a[d].info.height;
            }
        };
        this.ⵠᐃᐃᐃⲆᐃΔ = function () {
            var a = Math.floor((10 + this.ⵠᐃΔ[0].info.ⲆⲆ[0].width) * Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) + 35);
            for (var b = 0; b < this.ⵠᐃΔ.length; b++) {
                if (this.ⵠᐃΔ[b]) {
                    this.ⵠᐃΔ[b].info.translate.x = a;
                    this.ⵠᐃΔ[b].info.translate.y = 22;
                }
            }
            this.ⵠⵠⵠΔΔⵠⵠ.info.translate.x = a + 17;
            this.ⵠⵠⵠΔΔⵠⵠ.info.translate.y = 22 + Ⲇᐃ[339].height;
            this.ᐃⲆⵠᐃⵠⲆΔ.info.translate.x = a + 17;
            this.ᐃⲆⵠᐃⵠⲆΔ.info.translate.y = 30;
            this.ΔᐃⲆⲆΔΔⵠ.info.translate.x = a + 17;
            this.ΔᐃⲆⲆΔΔⵠ.info.translate.y = 22 + Ⲇᐃ[339].height;
        };
        this.ΔΔΔⵠΔⲆⲆⵠⵠ = function () {
            var a = Math.floor((uo - Ⲇᐃ[556][0].width) / 2);
            for (var b = 0; b < this.ⲆᐃᐃΔⵠ.length; b++) {
                this.ⲆᐃᐃΔⵠ[b].button.info.translate.x = a;
                this.ⲆᐃᐃΔⵠ[b].button.info.translate.y = -13;
            }
        };
        this.ⲆᐃⲆᐃⵠⲆⲆ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) * (10 + this.ⵠⵠΔⲆⵠᐃᐃ.info.ⲆⲆ[0].width) + 35);
            this.ⵠⵠΔⲆⵠᐃᐃ.info.translate.x = a;
            this.ⵠⵠΔⲆⵠᐃᐃ.info.translate.y = 33;
            this.ΔⲆⵠⲆⵠᐃⵠ.info.translate.x = this.ⵠⵠΔⲆⵠᐃᐃ.info.translate.x;
            this.ΔⲆⵠⲆⵠᐃⵠ.info.translate.y = 137;
            this.ΔΔⲆᐃⵠⲆΔ.info.translate.x = this.ⵠⵠΔⲆⵠᐃᐃ.info.translate.x;
            this.ΔΔⲆᐃⵠⲆΔ.info.translate.y = 240;
        };
        this.ⵠⵠᐃΔᐃΔΔ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) * (10 + this.ΔⵠΔⵠⲆⲆⲆ.info.ⲆⲆ[0].width) + 35);
            this.ΔⵠΔⵠⲆⲆⲆ.info.translate.x = a;
            this.ΔⵠΔⵠⲆⲆⲆ.info.translate.y = 36;
            a += 83;
            this.ⵠⵠᐃⲆⵠᐃⲆ.info.translate.x = a;
            this.ⵠⵠᐃⲆⵠᐃⲆ.info.translate.y = 36;
            this.ⵠⲆⵠⲆⲆⲆΔ.info.translate.x = a;
            this.ⵠⲆⵠⲆⲆⲆΔ.info.translate.y = 36;
            this.ⵠⲆᐃⵠΔΔⲆ.info.translate.x = a;
            this.ⵠⲆᐃⵠΔΔⲆ.info.translate.y = 36;
            this.ΔⵠΔΔᐃⲆⲆ.info.translate.x = a;
            this.ΔⵠΔΔᐃⲆⲆ.info.translate.y = 36;
            this.ΔᐃᐃⵠᐃⲆΔ.info.translate.x = a;
            this.ΔᐃᐃⵠᐃⲆΔ.info.translate.y = 36;
        };
        this.ᐃᐃΔΔΔΔⵠ = function () {
            var a = 12 + Math.floor(Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) * (10 + this.ⲆⲆⲆⵠᐃΔⲆ.info.ⲆⲆ[0].width) + 35);
            this.ⲆⲆⲆⵠᐃΔⲆ.info.translate.x = a;
            this.ⲆⲆⲆⵠᐃΔⲆ.info.translate.y = 36;
            a += 83;
            this.ᐃⲆⲆΔⲆⲆⲆ.info.translate.x = a;
            this.ᐃⲆⲆΔⲆⲆⲆ.info.translate.y = 36;
        };
        this.ⲆⲆΔᐃⲆΔᐃ = function () {
            var a = Math.floor(Math.floor((3 + Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ.length) / 4) * (10 + this.ᐃᐃⲆᐃᐃⲆᐃ.info.ⲆⲆ[0].width) + 35);
            this.ᐃᐃⲆᐃᐃⲆᐃ.info.translate.x = a;
            this.ᐃᐃⲆᐃᐃⲆᐃ.info.translate.y = 22;
        };
        this.ᐃᐃΔⵠᐃᐃᐃ = function () {
            var a = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ;
            if (a.length > 0) {
                var b = Math.floor((uo - Ww.ᐃⲆΔᐃ.max * (a[0].info.width + 5)) / 2);
            }
            for (var c = 0; a.length > c; c++) {
                a[c].info.translate.x = b + (a[c].info.width + 5) * c;
                a[c].info.translate.y = vo - a[c].info.width - 10;
                this.ᐃᐃⵠⲆⵠ[a[c].id].info.translate.x = a[c].info.translate.x + 13;
                this.ᐃᐃⵠⲆⵠ[a[c].id].info.translate.y = a[c].info.translate.y - this.ᐃᐃⵠⲆⵠ[a[c].id].info.ⲆⲆ[0].height - 6;
            }
        };
        var n;
        var o = 0;
        function p() {
            j.ⲆΔᐃⲆ();
            if (++o == 30) {
                j.ΔⵠⵠΔⵠⵠᐃ();
                j.ⲆΔᐃⲆ();
                return;
            }
            cj.setTimeout(p, 33);
        }
        this.ΔⲆⵠΔΔ = function (a) {
            if (Ww.ᐃᐃᐃΔᐃ.open) {
                Ww.ᐃᐃᐃΔᐃ.ΔⲆⵠΔΔ();
            }
            if (Ww.ⵠⲆⵠⲆⲆ.open) {
                Ww.ⵠⲆⵠⲆⲆ.ΔⲆⵠΔΔ();
            }
            document.getElementById("team_box").style.display = "none";
            j.ⲆΔⵠᐃΔ.style.display = "none";
            j.ⲆΔⵠᐃΔ.open = ug;
            j.sign.style.display = "none";
            j.sign.open = yg;
            document.getElementById("shop_starterkit").style.display = "none";
            document.getElementById("home_craft").style.display = "none";
            document.getElementById("recipe_craft").style.display = "none";
            j.ΔΔΔⲆ.open = Oh;
            document.getElementById("option_in_game").style.display = "none";
            j.options.open = false;
            document.getElementById("sure_delete").style.display = "none";
            j.ᐃⲆᐃⵠ.open = yg;
            document.getElementById("cancel_sure_delete").style.display = "none";
            j.ΔΔᐃⵠⲆ.open = ug;
            document.getElementById("chronoquest").style.display = "none";
            j.ΔⵠⲆⵠ.open = El;
            n = a;
            j.ⵠᐃᐃⲆⲆᐃΔ();
            j.ΔⲆ.style.cursor = j.ⵠᐃⵠⲆΔΔⲆ;
            Zw.ΔⲆⵠΔΔ();
            g = -1;
            q();
            Tf();
        };
        var g = -1;
        function q() {
            j.ⲆΔᐃⲆ();
            if (++g == 30) {
                j.stop();
                n();
                return;
            }
            cj.setTimeout(q, 33);
        }
        this.ⵠⵠΔⵠⲆ = false;
        this.stop = function () {
            this.ⵠⵠΔⵠⲆ = $h;
        };
        this.ⲆᐃⲆᐃᐃ = function () {
            ⵠΔᐃᐃ.ⲆΔⲆⲆΔᐃⲆΔΔ();
            j.ⵠⵠΔⵠⲆ = true;
            g = -1;
            o = 0;
            p();
        };
        this.ⲆΔᐃⲆ = function () {
            this.ᐃⵠⵠΔ.translate.x = uo - this.ᐃⵠⵠΔ.ⲆⲆ.width - 10;
            this.ᐃⵠⵠΔ.translate.y = 5;
            lf.ᐃΔⲆᐃⲆ.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[725][0].width - 85;
            lf.ᐃΔⲆᐃⲆ.translate.y = 10;
            this.ΔΔΔⲆ.button.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[708][0].width - 10;
            this.ΔΔΔⲆ.button.info.translate.y = 10;
            this.ΔⵠⲆⵠ.button.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[755][0].width - 20;
            this.ΔⵠⲆⵠ.button.info.translate.y = this.ΔΔΔⲆ.button.info.translate.y + Ⲇᐃ[708][0].height + 5;
            this.options.button.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[727][0].width - 20;
            this.options.button.info.translate.y = this.ΔⵠⲆⵠ.button.info.translate.y + Ⲇᐃ[727][0].height + 18;
            this.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[727][0].width - 20;
            this.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.info.translate.y = this.options.button.info.translate.y + Ⲇᐃ[783][0].height;
            this.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[727][0].width - 20;
            this.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.info.translate.y = this.options.button.info.translate.y + Ⲇᐃ[783][0].height;
            this.ⲆΔⵠᐃΔ.button.info.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[795][0].width - 20;
            this.ⲆΔⵠᐃΔ.button.info.translate.y = this.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.info.translate.y + Ⲇᐃ[795][0].height;
            Ww.ⲆΔᐃⲆΔ.translate.x = this.ᐃⵠⵠΔ.translate.x - 63 - 85;
            Ww.ⲆΔᐃⲆΔ.translate.y = 100;
            Ww.ⵠᐃΔⲆⵠ.translate.x = this.ᐃⵠⵠΔ.translate.x - Ⲇᐃ[517].width - 85;
            Ww.ⵠᐃΔⲆⵠ.translate.y = Ww.ⲆΔᐃⲆΔ.translate.y + 10 + Ⲇᐃ[546].height;
            this.ⲆⵠⲆᐃᐃ.translate.y = vo - 3 - 193;
            this.ⲆⵠⲆᐃᐃ.translate.x = uo - 3 - 193;
            this.ᐃⲆⲆⲆ.translate.x = 5;
            this.ᐃⲆⲆⲆ.translate.y = vo - this.ᐃⲆⲆⲆ.ⲆⲆ.height - 5;
            this.ᐃᐃᐃⲆΔ.button.info.translate.x = hq - 45.5;
            this.ᐃᐃᐃⲆΔ.button.info.translate.y = 50;
            this.ᐃΔⵠΔᐃᐃⵠ();
            this.ᐃᐃΔⵠᐃᐃᐃ();
            this.ⵠᐃᐃᐃⲆᐃΔ();
            this.ⲆⲆΔᐃⲆΔᐃ();
            this.ᐃᐃΔΔΔΔⵠ();
            this.ⵠⵠᐃΔᐃΔΔ();
            this.ⲆᐃⲆᐃⵠⲆⲆ();
            this.ΔΔΔⵠΔⲆⲆⵠⵠ();
            this.sign.ⲆᐃⲆΔᐃⲆᐃ();
            zc();
            Ww.ᐃᐃᐃΔᐃ.ⲆΔᐃⲆ();
            Ww.ⵠⲆⵠⲆⲆ.ⲆΔᐃⲆ();
            this.ⲆⲆⵠⲆᐃⲆΔΔᐃ.ⲆΔᐃⲆ();
            this.ΔΔΔⲆ.ᐃΔⲆⵠⵠΔⵠ.ⲆΔᐃⲆ();
            this.ΔΔΔⲆ.list.ⲆΔᐃⲆ();
            this.ᐃⲆᐃⵠ.ⲆΔᐃⲆ();
            this.ΔΔᐃⵠⲆ.ⲆΔᐃⲆ();
            this.ΔⵠⲆⵠ.ⲆΔᐃⲆ();
            this.ᐃᐃᐃⲆΔ.ⲆΔᐃⲆ();
            this.options.ⲆΔᐃⲆ();
            this.ⲆΔⵠᐃΔ.ⲆΔᐃⲆ();
            this.sign.ⲆΔᐃⲆ();
            var a = 0;
            if (o != 30) {
                a = 1500 / (o + 1) - 50;
            }
            if (g != -1) {
                a = -(1500 / (30 - g + 1) - 48);
            }
            this.ᐃᐃᐃⲆΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃⵠⵠΔ.translate.y -= a > 0 ? a : -a;
            Ww.ⲆΔᐃⲆΔ.translate.y -= a > 0 ? a : -a;
            Ww.ⵠᐃΔⲆⵠ.translate.y -= a > 0 ? a : -a;
            this.ΔΔΔⲆ.button.info.translate.y -= a > 0 ? a : -a;
            this.ΔⵠⲆⵠ.button.info.translate.y -= a > 0 ? a : -a;
            this.options.button.info.translate.y -= a > 0 ? a : -a;
            this.ⲆΔⵠᐃΔ.button.info.translate.y -= a > 0 ? a : -a;
            this.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.info.translate.y -= a > 0 ? a : -a;
            this.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.info.translate.y -= a > 0 ? a : -a;
            lf.ᐃΔⲆᐃⲆ.translate.y -= a > 0 ? a : -a;
            this.ᐃⲆⲆⲆ.translate.y -= a < 0 ? a : -a;
            this.ⲆⵠⲆᐃᐃ.translate.y -= a < 0 ? a : -a;
        };
        this.ΔⲆᐃⲆΔⵠⲆΔⵠ = function () {
            if (!Ww.ΔⲆⵠᐃⵠ.enabled && this.ᐃΔⵠⲆⲆᐃⲆ && !Ww.ΔⵠᐃⲆⲆ) {
                Rc();
            }
            Nc();
            (function () {
                var a = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ];
                if (lf.mode === ew.ⲆⲆⲆⵠⵠ || lf.mode === ew.ⲆΔⲆΔᐃ || ew.ⲆⵠΔΔᐃ === lf.mode || ew.ⲆΔᐃⲆᐃ === lf.mode || lf.mode === ew.ⲆⲆⵠΔⵠⵠᐃ || lf.mode === ew.ΔⵠⵠᐃΔ || ew.ᐃⲆⵠⲆΔ === lf.mode) {
                    for (var b = 0; b < a.length; b++) {
                        a[b].ΔⵠᐃᐃᐃΔᐃ();
                    }
                } else if (lf.mode === ew.ᐃⲆᐃⲆᐃⵠⲆ) {
                    for (b = 0; a.length > b; b++) {
                        if (Ww.ᐃⵠᐃⲆⵠΔⵠ || Ww.ⵠᐃΔⲆⵠ.enabled || a[b].ᐃΔⲆⲆ.ΔᐃⵠΔⵠ !== "spectator") {
                            a[b].ΔⵠᐃᐃᐃΔᐃ();
                        }
                    }
                }
            })();
            if (this.ᐃΔⵠⲆⲆᐃⲆ) {
                Ac();
                if (this.ᐃⵠⲆⲆⲆΔⲆ === 1) {
                    this.ΔΔΔⲆ.button.ΔΔⲆᐃ(f);
                }
                if (lf.mode !== ew.ⲆⵠΔΔᐃ && lf.mode !== ew.ⲆΔᐃⲆᐃ && lf.mode !== ew.ⲆⲆⵠΔⵠⵠᐃ && this.ΔΔⲆⲆⵠΔᐃ === 1) {
                    this.ΔⵠⲆⵠ.button.ΔΔⲆᐃ(f);
                }
                this.options.button.ΔΔⲆᐃ(f);
                if (this.ⵠΔΔᐃⵠⵠⵠ === 1) {
                    this.ⲆΔⵠᐃΔ.button.ΔΔⲆᐃ(f);
                }
                if (Zw.ⲆᐃⲆᐃᐃ) {
                    this.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.ΔΔⲆᐃ(f);
                } else {
                    this.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.ΔΔⲆᐃ(f);
                }
                _c();
                Ec();
                this.ᐃⲆⲆⲆ.ΔΔⲆᐃ();
                jc();
                Fc();
                Oc();
                Wc();
                Ic();
                pc();
                xc();
                (function () {
                    if (!Ww.ⵠⵠⵠⵠ.open && !Ww.ⲆᐃΔᐃⲆ.open && !Ww.ⵠΔᐃⲆ.open && !Ww.ᐃᐃᐃⵠ.open && !Ww.ⲆᐃΔᐃ.open) {
                        Ww.ᐃⲆΔΔⵠ.open = Gq;
                        var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                        var b = ew.ΔᐃᐃⵠᐃΔⲆΔΔ;
                        if (a) {
                            for (var c = 0; lf.ᐃΔᐃ[hw.ⲆΔΔΔⵠ].length > c; c++) {
                                var d = lf.ᐃΔᐃ[hw.ⲆΔΔΔⵠ][c];
                                var e = ΔᐃⲆᐃ.ΔΔⵠᐃ(d, a);
                                if (b > e) {
                                    b = e;
                                    Ww.ᐃⲆΔΔⵠ.open = true;
                                    Ww.ᐃⲆΔΔⵠ.ⲆΔᐃⵠ = d.ⲆΔᐃⵠ;
                                    Ww.ᐃⲆΔΔⵠ.ⵠⵠΔᐃⲆ = d.id;
                                }
                            }
                        }
                    }
                })();
                kc();
                Mc();
                wc();
                Tc();
                zc();
                yc();
            }
            if (Ww.ΔⲆⵠᐃⵠ.enabled) {
                cc();
            }
            Cc();
            if (this.ᐃΔⵠⲆⲆᐃⲆ && this.ⲆᐃᐃᐃΔΔΔ === 1) {
                Dc();
            }
            Ww.ᐃᐃᐃᐃΔⲆⵠ.ΔΔⲆᐃ();
            Ww.alert.ΔΔⲆᐃ("#FFF", "#000");
            if (this.ᐃΔⵠⲆⲆᐃⲆ) {
                Ww.ΔⲆⵠᐃⵠ.ΔΔⲆᐃ();
                Ww.ᐃᐃᐃⲆΔ.ΔΔⲆᐃ();
                Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.ΔΔⲆᐃ(mf.ΔᐃⵠΔ.x, mf.ΔᐃⵠΔ.y);
            }
            mc();
        };
        this.ᐃᐃᐃΔΔΔⲆⲆⲆ = function () {
            Ww.ᐃⵠΔΔ.ⲆΔᐃⲆ();
            Ww.ᐃⲆⲆⲆ.ⲆΔᐃⲆ();
            if (!Ww.reconnect.enabled && Ww.ⵠᐃⲆⲆⲆ) {
                Ww.control.ⲆΔᐃⲆ();
                Ww.ⲆΔᐃⲆΔ.ⲆΔᐃⲆ();
            }
            lf.ⲆΔᐃⲆ();
            this.ΔⵠⲆⵠ.ⵠΔⵠᐃΔᐃⲆⲆᐃ();
        };
        this.ᐃΔⲆᐃⵠⵠΔⲆᐃ = function () {
            qv();
        };
        this.ⲆΔⵠᐃΔᐃᐃⲆⵠ = function () {
            ⵠΔᐃᐃ.ⲆⲆⵠⲆΔⵠᐃΔⲆ();
            ⵠΔᐃᐃ.ᐃΔΔⲆⵠΔⵠⵠⵠ();
            ⵠΔᐃᐃ.ⲆⵠⵠⲆⵠᐃⲆΔⵠ();
            ⵠΔᐃᐃ.ᐃⲆⲆⲆΔⵠΔⵠⲆ();
        };
        this.ΔΔⲆᐃ = function () {
            if (!Ww.reconnect.enabled && Ww.ⵠᐃⲆⲆⲆ) {
                this.ⲆΔⵠᐃΔᐃᐃⲆⵠ();
            }
            Zw.ⲆⵠⵠΔᐃⵠᐃΔΔ();
            this.ᐃᐃᐃΔΔΔⲆⲆⲆ();
            if (rf.ⵠⵠⵠⲆᐃⲆⲆ !== 1) {
                this.ᐃΔⲆᐃⵠⵠΔⲆᐃ();
                this.ΔⲆᐃⲆΔⵠⲆΔⵠ();
            } else {
                var a = ⵠⵠ.ΔᐃᐃⵠΔⵠΔ;
                Jc(f, a, hq - a.width / 4, iq - a.height / 4, a.width / 2, a.height / 2);
            }
        };
        this.ⵠⵠᐃΔΔᐃⵠ = function (a) {
            if (!Ww.ᐃᐃᐃΔᐃ.open && !Ww.ⵠⲆⵠⲆⲆ.open) {
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = false;
            }
            if (Ww.ᐃᐃᐃΔᐃ.open && a.keyCode === 27) {
                Ww.ᐃᐃᐃΔᐃ.ΔⲆⵠΔΔ();
            } else if (Ww.ⵠⲆⵠⲆⲆ.open && a.keyCode === 27) {
                Ww.ⵠⲆⵠⲆⲆ.ΔⲆⵠΔΔ();
            } else if (Ww.ᐃᐃᐃΔᐃ.open || Ww.ⵠⲆⵠⲆⲆ.open || a.keyCode != 79 || g != -1) {
                if (a.keyCode == 13 && g == -1) {
                    if (Ww.ⵠⲆⵠⲆⲆ.open) {
                        Ww.ⵠⲆⵠⲆⲆ.ᐃⵠᐃΔⲆΔⲆ();
                    } else {
                        Ww.ᐃᐃᐃΔᐃ.ⲆᐃⲆᐃᐃ();
                    }
                } else if (!Ww.ᐃᐃᐃΔᐃ.open && !Ww.ⵠⲆⵠⲆⲆ.open) {
                    if (a.keyCode === 82) {
                        Ww.ⲆΔᐃⲆΔ.ᐃⵠᐃⵠΔⲆΔ();
                    } else if (a.keyCode !== 80 || ew.ᐃⲆᐃⲆᐃⵠⲆ !== lf.mode || Ww.ᐃⵠᐃⲆⵠΔⵠ) {
                        if (a.keyCode >= 49 && a.keyCode <= 57) {
                            if (Ww.ΔⵠΔΔ.id < 0) {
                                var b = a.keyCode - 49;
                                var c = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ[b];
                                if (c) {
                                    ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(c.id, b);
                                }
                            }
                        } else if (a.keyCode == 89) {
                            Ww.ⵠΔᐃⵠΔⲆᐃ = !Ww.ⵠΔᐃⵠΔⲆᐃ;
                        } else if (a.keyCode == 71) {
                            Ww.ΔⵠΔΔ.ΔᐃΔᐃᐃⲆΔΔΔ();
                        }
                    } else {
                        Ww.ⵠᐃΔⲆⵠ.ᐃⵠᐃⵠΔⲆΔ();
                    }
                }
            } else {
                Ww.ⵠⲆⵠⲆⲆ.ΔⵠᐃⲆΔⵠⵠᐃⲆ();
            }
            vf.up(a);
        };
        this.ⵠᐃⲆⵠⵠΔⵠ = function (a) {
            vf.down(a);
            if (!Ww.ᐃᐃᐃΔᐃ.open && !Ww.ⵠⲆⵠⲆⲆ.open) {
                a.preventDefault();
                if (8 == a.keyCode) a.preventDefault();
                if (a.code === Settings.AutoSpike.k) Settings.AutoSpike.e = true;
            }
        };
        this.ΔᐃᐃΔΔⵠⵠ = function (b) {
            mf.ΔᐃⵠΔ = Pv(j.ΔⲆ, b);
            var c = eh;
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                j.ⲆⵠⲆᐃᐃ.focus(mf.ΔᐃⵠΔ);
            }
            var d = Ww.ⵠⵠⵠⵠ;
            if (Ww.ΔⵠΔΔ.id < 0 && d.id >= 0 && (!Ww.ⵠⵠⵠⵠ.lock || Ww.id === Ww.ⵠⵠⵠⵠ.ⲆΔᐃⵠ)) {
                c |= j.ⵠᐃΔ[Ww.ⵠⵠⵠⵠ.id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            var e = Ww.ⵠΔᐃⲆ;
            if (e.open && e.ΔⵠⲆᐃΔ > 0) {
                c |= j.ᐃⲆⲆΔⲆⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            var f = Ww.ⲆᐃΔᐃ;
            if (f.open && f.ⵠⲆᐃⲆⵠᐃⵠ > 0) {
                c |= j.ⵠⵠᐃⲆⵠᐃⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                c |= j.ⵠⲆⵠⲆⲆⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                c |= j.ⵠⲆᐃⵠΔΔⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                c |= j.ΔⵠΔΔᐃⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                c |= j.ΔᐃᐃⵠᐃⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            var a = Ww.ᐃᐃᐃⵠ;
            if (a.open && a.ΔⵠΔⵠΔΔΔ > 0) {
                c |= j.ΔΔⲆᐃⵠⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.sign.open) {
                c |= j.sign.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (!Ww.ⵠⵠⵠⵠ.lock) {
                if (Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ) {
                    c |= j.ΔᐃⲆⲆΔΔⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                }
            }
            if (Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ) {
                c |= j.ⵠⵠⵠΔΔⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.ΔⵠΔΔ.id < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open && !j.ⲆΔⵠᐃΔ.open) {
                for (var k = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ, m = 0; m < k.length; m++) {
                    var n = k[m].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                    c |= n;
                    if (n) {
                        Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.start(m, mf.ΔᐃⵠΔ);
                    }
                    if (d.open && (d.id < 0 || k[m].id == d.id) || Ww.ⲆᐃΔᐃⲆ.open && k[m].id === 109 || Ww.ᐃⲆΔΔⵠ.open && k[m].id === 180 || Ww.ᐃᐃᐃⵠ.open && (k[m].id === 109 || k[m].id === 131) || Ww.ⵠΔᐃⲆ.open && k[m].id === 134 || Ww.ⲆᐃΔᐃ.open && k[m].id === 109) {
                        c |= j.ᐃᐃⵠⲆⵠ[k[m].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                    }
                }
            }
            if (Ww.Ⲇᐃᐃⵠᐃ.open) {
                c |= j.Ⲇᐃᐃⵠᐃ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (j.ⲆⵠΔΔⵠ != -1) {
                if (c |= j.ⲆᐃᐃΔⵠ[j.ⲆⵠΔΔⵠ].button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv)) {
                    var o = io;
                }
            } else {
                o = hj;
            }
            if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !o && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ⲆΔⵠᐃΔ.open && !Ww.ΔⵠᐃⲆⲆ) {
                k = Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ;
                m = 0;
                for (; k.length > m; m++) {
                    c |= k[m].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                }
            }
            if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !!Ww.ᐃᐃᐃⲆΔ.open && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                c |= j.ᐃᐃᐃⲆΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                c |= j.ΔΔΔⲆ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                c |= j.options.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open) {
                c |= j.ⲆΔⵠᐃΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open && !j.ⲆΔⵠᐃΔ.open) {
                if (Zw.ⲆᐃⲆᐃᐃ) {
                    c |= j.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                } else {
                    c |= j.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                }
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ⲆΔⵠᐃΔ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && lf.mode !== ew.ⲆⵠΔΔᐃ && ew.ⲆΔᐃⲆᐃ !== lf.mode && ew.ⲆⲆⵠΔⵠⵠᐃ !== lf.mode) {
                c |= j.ΔⵠⲆⵠ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
            }
            if (!c && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open && !j.sign.open) {
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ >= 0) {
                    ⵠΔᐃᐃ.ⵠⵠⲆᐃᐃⲆⲆⲆΔ();
                } else if (!o) {
                    mf.down();
                }
            }
        };
        this.ᐃⲆⵠⲆᐃᐃᐃ = function (b) {
            mf.ΔᐃⵠΔ = Pv(j.ΔⲆ, b);
            mf.up();
            if (!Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.release()) {
                var c = Ww.ⵠⵠⵠⵠ;
                var d = Ww.ⲆᐃΔᐃⲆ;
                var e = Ww.ᐃⲆΔΔⵠ;
                var f = Ww.ⵠΔᐃⲆ;
                var i = Ww.ⲆᐃΔᐃ;
                var k = Ww.ᐃᐃᐃⵠ;
                if (Ww.control.attack) {
                    Ww.control.attack = 0;
                    ⵠΔᐃᐃ.ᐃΔⲆᐃⲆᐃᐃⵠⵠ();
                }
                if (j.ⲆⵠΔΔⵠ != -1) {
                    var m = j.ⲆᐃᐃΔⵠ[j.ⲆⵠΔΔⵠ].button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv);
                    var n = document.getElementById("team_box").style;
                    if (m && n.display == "inline-block") {
                        n.display = "none";
                        return;
                    }
                    if (m) {
                        j.ⲆᐃᐃΔⵠ[j.ⲆⵠΔΔⵠ].action();
                    }
                }
                if (Ww.ΔⵠΔΔ.id < 0 && c.id >= 0 && !j.ᐃⲆᐃⵠ.open) {
                    if (!Ww.ⵠⵠⵠⵠ.lock || Ww.ⵠⵠⵠⵠ.ⲆΔᐃⵠ === Ww.id) {
                        if (m = j.ⵠᐃΔ[Ww.ⵠⵠⵠⵠ.id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                            ⵠΔᐃᐃ.ΔⵠⵠⲆᐃⵠᐃⵠᐃ(c);
                        }
                    }
                }
                if ((f = Ww.ⵠΔᐃⲆ).open && f.ΔⵠⲆᐃΔ > 0 && !j.ᐃⲆᐃⵠ.open) {
                    if (m = j.ᐃⲆⲆΔⲆⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        ⵠΔᐃᐃ.ΔΔᐃⲆⵠⵠΔⵠⲆ(f);
                    }
                }
                if ((i = Ww.ⲆᐃΔᐃ).open && i.ⵠⲆᐃⲆⵠᐃⵠ > 0 && !j.ᐃⲆᐃⵠ.open) {
                    switch (i.type) {
                        case hw.ΔⵠΔⵠⲆ:
                            if (m = j.ⵠⵠᐃⲆⵠᐃⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                                ⵠΔᐃᐃ.ⵠⲆⵠⵠⲆⵠᐃ(i);
                            }
                            break;
                        case hw.ⲆⵠᐃⲆⲆ:
                            if (m = j.ⵠⲆⵠⲆⲆⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                                ⵠΔᐃᐃ.ⵠⲆⵠⵠⲆⵠᐃ(i);
                            }
                            break;
                        case hw.ΔⵠᐃᐃΔ:
                            if (m = j.ⵠⲆᐃⵠΔΔⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                                ⵠΔᐃᐃ.ⵠⲆⵠⵠⲆⵠᐃ(i);
                            }
                            break;
                        case hw.ⵠΔᐃⲆⲆ:
                            if (m = j.ΔⵠΔΔᐃⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                                ⵠΔᐃᐃ.ⵠⲆⵠⵠⲆⵠᐃ(i);
                            }
                            break;
                        case hw.ⲆΔⵠⲆΔ:
                            if (m = j.ΔᐃᐃⵠᐃⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                                ⵠΔᐃᐃ.ⵠⲆⵠⵠⲆⵠᐃ(i);
                            }
                    }
                }
                if ((k = Ww.ᐃᐃᐃⵠ).open && k.ΔⵠΔⵠΔΔΔ > 0 && !j.ᐃⲆᐃⵠ.open) {
                    if (m = j.ΔΔⲆᐃⵠⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        ⵠΔᐃᐃ.ΔⵠⲆΔⵠΔⵠᐃΔ(k);
                    }
                }
                if (Ww.sign.open && !j.ᐃⲆᐃⵠ.open) {
                    if (m = j.sign.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        j.sign.select();
                    }
                }
                if (!Ww.ⵠⵠⵠⵠ.lock && !j.ᐃⲆᐃⵠ.open) {
                    if (Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ && (m = j.ΔᐃⲆⲆΔΔⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv))) {
                        ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆⲆⲆΔⲆ(c);
                    }
                }
                if (Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ && !j.ᐃⲆᐃⵠ.open && (m = j.ⵠⵠⵠΔΔⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv))) {
                    ⵠΔᐃᐃ.ⲆΔⵠⵠΔⲆᐃΔⵠ(c);
                    if (ga) {
                        ga("send", "event", "Game", "lockpick");
                    }
                }
                if (Ww.Ⲇᐃᐃⵠᐃ.open) {
                    if (m = j.Ⲇᐃᐃⵠᐃ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        ⵠΔᐃᐃ.Ⲇᐃᐃⵠᐃ();
                        if (ga) {
                            ga("send", "event", "Game", "resurrection");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.id < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled && !j.ᐃⲆᐃⵠ.open) {
                    for (var l = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ, o = 0; o < l.length; o++) {
                        if (m = l[o].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                            if (b.which != 1 || b.shiftKey) {
                                if ((b.which == 1 && b.shiftKey || b.which == 3) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                    j.ᐃⲆᐃⵠ.ⲆⵠᐃⵠᐃⵠⲆ(l[o].id);
                                }
                            } else {
                                ⵠΔᐃᐃ.ᐃⵠⲆᐃⲆ(l[o].id, o);
                            }
                        } else if (c.open && (c.id < 0 || c.id === l[o].id)) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                ⵠΔᐃᐃ.ⲆᐃⲆᐃΔⵠΔⵠⲆ(c, l[o].id, b.shiftKey ? 10 : 1);
                            }
                        } else if (e.open && l[o].id === 180) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                ⵠΔᐃᐃ.ⵠΔᐃΔⲆᐃⲆⵠⲆ(e);
                            }
                        } else if (d.open && l[o].id === 109) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                ⵠΔᐃᐃ.ᐃⲆᐃᐃΔᐃΔⲆΔ(d, b.shiftKey ? 10 : 1);
                            }
                        } else if (f.open && l[o].id === 134) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                ⵠΔᐃᐃ.ᐃΔᐃⵠΔᐃⲆⵠⵠ(f, b.shiftKey ? 10 : 1);
                            }
                        } else if (i.open && l[o].id === 109) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                ⵠΔᐃᐃ.ⲆΔΔΔⵠⵠⵠΔΔ(i, b.shiftKey ? 10 : 1);
                            }
                        } else if (k.open && (l[o].id === 109 || l[o].id === 131)) {
                            if ((m = j.ᐃᐃⵠⲆⵠ[l[o].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0) {
                                if (l[o].id === 109) {
                                    ⵠΔᐃᐃ.ᐃΔᐃΔᐃᐃᐃ(k, b.shiftKey ? 10 : 1, 0);
                                } else {
                                    ⵠΔᐃᐃ.ᐃΔᐃΔᐃᐃᐃ(k, 0, b.shiftKey ? 10 : 1);
                                }
                            }
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled && !j.ᐃⲆᐃⵠ.open && !Ww.ΔⵠᐃⲆⲆ) {
                    l = Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ;
                    o = 0;
                    for (; o < l.length; o++) {
                        if (m = l[o].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                            ΔⵠⲆΔⵠ = ⵠΔᐃᐃ.ΔⵠⵠⲆⵠᐃᐃΔⵠ(l[o].id);
                            if (ΔⵠⲆΔⵠ && ga) {
                                ga("send", "event", "Game", "craft", Xr[Ls[l[o].id].ⲆⵠⲆᐃ].name);
                            }
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && Ww.ᐃᐃᐃⲆΔ.open && !j.ⲆΔⵠᐃΔ.open && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open) {
                    if (m = j.ᐃᐃᐃⲆΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv)) {
                        Yw.ᐃᐃᐃⲆΔ.select();
                    }
                }
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ⲆΔⵠᐃΔ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open) {
                    if (Zw.ⲆᐃⲆᐃᐃ) {
                        if (m = j.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                            Zw.select();
                            if (ga) {
                                ga("send", "event", "Game", "sound on");
                            }
                        }
                    } else if (m = j.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        Zw.select();
                        if (ga) {
                            ga("send", "event", "Game", "sound off");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                    if (m = j.options.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        j.options.ΔⵠᐃᐃⲆⲆⲆᐃΔ();
                        if (ga) {
                            ga("send", "event", "Game", "options");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open && j.ⵠΔΔᐃⵠⵠⵠ === 1) {
                    if (m = j.ⲆΔⵠᐃΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        j.ⲆΔⵠᐃΔ.select();
                        if (ga) {
                            ga("send", "event", "Game", "market");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆᐃⵠ.open && !j.ⲆΔⵠᐃΔ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && j.ᐃⵠⲆⲆⲆΔⲆ === 1) {
                    if (m = j.ΔΔΔⲆ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        j.ΔΔΔⲆ.ⵠᐃᐃⵠᐃⲆⵠᐃⵠ();
                        if (ga) {
                            ga("send", "event", "Game", "recipe");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ⲆΔⵠᐃΔ.open && lf.mode !== ew.ⲆⵠΔΔᐃ && ew.ⲆΔᐃⲆᐃ !== lf.mode && lf.mode !== ew.ⲆⲆⵠΔⵠⵠᐃ && j.ΔΔⲆⲆⵠΔᐃ === 1) {
                    if (m = j.ΔⵠⲆⵠ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                        j.ΔⵠⲆⵠ.select();
                        if (ga) {
                            ga("send", "event", "Game", "quests");
                        }
                    }
                }
                if (Ww.ΔⵠΔΔ.ΔΔⵠⲆΔ && b.which == 3) {
                    j.ΔΔᐃⵠⲆ.ⲆⵠᐃⵠᐃⵠⲆ();
                }
            }
        };
        this.ΔⲆᐃⲆΔⲆⲆ = hj;
        this.ᐃᐃⵠᐃⲆⵠᐃ = function (b) {
            mf.ΔᐃⵠΔ = Pv(j.ΔⲆ, b);
            var d = false;
            Yw.ⲆⵠΔⵠⵠ.display = 0;
            Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.ⲆᐃⲆⲆⵠ(mf.ΔᐃⵠΔ);
            if (j.ⲆⵠΔΔⵠ != -1) {
                d |= j.ⲆᐃᐃΔⵠ[j.ⲆⵠΔΔⵠ].button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            var e = Ww.ⵠΔᐃⲆ;
            if (e.open && e.ΔⵠⲆᐃΔ > 0) {
                d |= j.ᐃⲆⲆΔⲆⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            var f = Ww.ⲆᐃΔᐃ;
            if (f.open && f.ⵠⲆᐃⲆⵠᐃⵠ > 0) {
                d |= j.ⵠⵠᐃⲆⵠᐃⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                d |= j.ⵠⲆⵠⲆⲆⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                d |= j.ⵠⲆᐃⵠΔΔⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                d |= j.ΔⵠΔΔᐃⲆⲆ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                d |= j.ΔᐃᐃⵠᐃⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            var a = Ww.ᐃᐃᐃⵠ;
            if (a.open && a.ΔⵠΔⵠΔΔΔ > 0) {
                d |= j.ΔΔⲆᐃⵠⲆΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.sign.open) {
                d |= j.sign.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            var i = Ww.ⵠⵠⵠⵠ;
            if (Ww.ΔⵠΔΔ.id < 0 && i.id >= 0 && !Ww.ΔⲆⵠᐃⵠ.enabled && (!Ww.ⵠⵠⵠⵠ.lock || Ww.ⵠⵠⵠⵠ.ⲆΔᐃⵠ === Ww.id)) {
                d |= j.ⵠᐃΔ[i.id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.Ⲇᐃᐃⵠᐃ.open) {
                d |= j.Ⲇᐃᐃⵠᐃ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (!Ww.ⵠⵠⵠⵠ.lock && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                if (Ww.ⵠⵠⵠⵠ.ΔⵠⵠᐃᐃⵠⲆ) {
                    d |= j.ΔᐃⲆⲆΔΔⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                }
            }
            if (Ww.ⵠⵠⵠⵠ.ᐃᐃⲆΔⵠⵠᐃ && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                d |= j.ⵠⵠⵠΔΔⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.ΔⵠΔΔ.id < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled) {
                for (var k = Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ, m = 0; k.length > m; m++) {
                    var o = k[m].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                    d |= Yw.ⲆⵠΔⵠⵠ.ⲆΔⵠΔ(o, k[m], 0);
                    if (i.open && (i.id < 0 || k[m].id == i.id) || Ww.ⲆᐃΔᐃⲆ.open && k[m].id == 109 || Ww.ᐃⲆΔΔⵠ.open && k[m].id === 180 || Ww.ᐃᐃᐃⵠ.open && (k[m].id == 109 || k[m].id == 131) || Ww.ⵠΔᐃⲆ.open && k[m].id == 134 || Ww.ⲆᐃΔᐃ.open && k[m].id == 109) {
                        d |= j.ᐃᐃⵠⲆⵠ[k[m].id].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                    }
                }
            }
            if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !Ww.ΔⲆⵠᐃⵠ.enabled && !Ww.ΔⵠᐃⲆⲆ) {
                k = Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ;
                m = 0;
                for (; k.length > m; m++) {
                    o = false;
                    o = k[m].ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                    d |= Yw.ⲆⵠΔⵠⵠ.ⲆΔⵠΔ(o, k[m], 1);
                }
            }
            if (Ww.ΔⵠΔΔ.id < 0 && Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !!Ww.ᐃᐃᐃⲆΔ.open && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                d |= j.ᐃᐃᐃⲆΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open && j.ᐃⵠⲆⲆⲆΔⲆ === 1) {
                d |= j.ΔΔΔⲆ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.ⲆΔⵠᐃΔ.open) {
                d |= j.options.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open && j.ⵠΔΔᐃⵠⵠⵠ === 1) {
                d |= j.ⲆΔⵠᐃΔ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.ΔΔᐃⵠⲆ.open && !j.ΔⵠⲆⵠ.open && !j.options.open && !j.ⲆΔⵠᐃΔ.open) {
                if (Zw.ⲆᐃⲆᐃᐃ) {
                    d |= j.ᐃΔⵠⲆ.ΔⵠᐃΔΔΔΔ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                } else {
                    d |= j.ᐃΔⵠⲆ.ⵠΔᐃᐃᐃⵠⵠ.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                }
            }
            if (Ww.ΔⵠΔΔ.ᐃⵠΔⲆ < 0 && !j.ΔΔΔⲆ.open && !j.ᐃⲆᐃⵠ.open && !j.options.open && !j.ΔΔᐃⵠⲆ.open && !j.ⲆΔⵠᐃΔ.open && lf.mode !== ew.ⲆⵠΔΔᐃ && lf.mode !== ew.ⲆΔᐃⲆᐃ && lf.mode !== ew.ⵠⵠΔᐃⲆΔᐃⲆᐃ && j.ΔΔⲆⲆⵠΔᐃ === 1) {
                d |= j.ΔⵠⲆⵠ.button.ⲆΔⵠΔ(j.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
            }
            if (j.ΔⲆᐃⲆΔⲆⲆ !== d) {
                j.ΔⲆᐃⲆΔⲆⲆ = d;
                c.style.cursor = d ? j.ⲆⵠⵠᐃΔⵠΔ : j.ⵠᐃⵠⲆΔΔⲆ;
            }
        };
        this.ΔⵠⵠΔⵠⵠᐃ = function () {
            cj.addEventListener("mousedown", this.ΔᐃᐃΔΔⵠⵠ, eh);
            cj.addEventListener("mouseup", this.ᐃⲆⵠⲆᐃᐃᐃ, false);
            cj.addEventListener("mousemove", this.ᐃᐃⵠᐃⲆⵠᐃ, fg);
            cj.addEventListener("keyup", this.ⵠⵠᐃΔΔᐃⵠ, hh);
            cj.addEventListener("keydown", this.ⵠᐃⲆⵠⵠΔⵠ, Ui);
        };
        this.ⵠᐃᐃⲆⲆᐃΔ = function () {
            cj.removeEventListener("mousedown", this.ΔᐃᐃΔΔⵠⵠ, false);
            cj.removeEventListener("mouseup", this.ᐃⲆⵠⲆᐃᐃᐃ, false);
            cj.removeEventListener("mousemove", this.ᐃᐃⵠᐃⲆⵠᐃ, false);
            cj.removeEventListener("keyup", this.ⵠⵠᐃΔΔᐃⵠ, oe);
            cj.removeEventListener("keydown", this.ⵠᐃⲆⵠⵠΔⵠ, ug);
        };
    }
    function Ew(a) {
        return function (a, b) {
            const c = ~(a & 22750) & (a | 22750);
            const d = b ^ 47497;
            const e = Nw(c, d, c, d);
            Ps(c, d, c, d, c);
            return e ^ 16460;
        }(a, 53826);
    }
    function Fw(a, b, c, d) {
        Uj(Kr, a, b, c, d);
        const e = ((143 + (Lr[0] ^ 35088 ^ Lr[2])) * 75 + 74) % 65537;
        return (24 << ((e ^ Lr[3]) & 255)) + (8 << ((e ^ Lr[3]) >> 24 & 255)) + (16 << ((e ^ Lr[3]) >> 8 & 255)) + (0 << ((e ^ Lr[3]) >> 16 & 255));
    }
    function Gw(b, c) {
        const d = (b | 5766) & ~(b & 5766);
        const e = (24 << (c >> 16 & 255)) + (8 << (c >> 8 & 255)) + (0 << (c >> 24 & 255)) + (16 << (c & 255));
        const f = Pf(d, e, d, e);
        const g = kf(d, e);
        return (24 << ((f ^ g) & 255)) + (8 << ((f ^ g) >> 8 & 255)) + (16 << ((f ^ g) >> 24 & 255)) + (0 << ((f ^ g) >> 16 & 255));
    }
    function Hw(b, c, d, e, f, g) {
        Xj(Kr, b, c, d, e, f, g);
        const a = Fw(Lr[0], Lr[1], Lr[2], Lr[3]);
        Fw(Lr[4], Lr[5], Lr[0], Lr[1]);
        return a ^ 50389;
    }
    function Iw(b, c, d, e, f, i) {
        const a = b ^ 30264;
        const j = ~(d & 29663) & d | ~(d & 29663) & 29663;
        const k = ((f + 53350) * 2147483629 + 2147483587) % 2147483647;
        const h = ~(a & 44284) & (a | 44284);
        const l = ((26083 + ((0 << ((h ^ j) >> 8 & 255)) + (16 << ((h ^ j) >> 16 & 255)) + (8 << ((h ^ j) & 255)) + (24 << ((h ^ j) >> 24 & 255)) ^ (0 << (e >> 16 & 255)) + (8 << (e >> 8 & 255)) + (16 << (e >> 0 & 255)) + (24 << (e >> 24 & 255)))) * 1103515245 + 12345) % 2147483648;
        const g = (24 << ((l ^ k) >> 24 & 255)) + (16 << ((l ^ k) >> 16 & 255)) + (8 << ((l ^ k) & 255)) + (0 << ((l ^ k) >> 8 & 255));
        return ~(g & 63202) & g | ~(g & 63202) & 63202;
    }
    function Jw() {
        ΔᐃⲆᐃ.ⵠⲆΔⲆΔᐃᐃ("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
    }
    function Kw() {
        ΔᐃⲆᐃ.ⵠⲆΔⲆΔᐃᐃ("https://twitter.com/intent/tweet?text=I%20survived%20" + Ww.ⵠΔⲆ + "%20days%20with%20" + Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠⲆⲆΔΔ + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
    }
    function Lw(b, c) {
        this.ΔⲆ = b;
        this.Δ = c;
        var d = this;
        this.ᐃᐃⵠⵠᐃᐃΔ = oj;
        this.ⲆⵠⵠⲆⵠⲆⵠ = {
            id: document.getElementById("scoreboard"),
            style: document.getElementById("scoreboard").style,
            height: 0,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = this.translate.y + "px";
            },
            ⲆⲆⵠⲆⲆ: function () {
                this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠⲆⲆⵠⲆᐃⲆ + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + Zs[335] + " : " + Ww.ⵠΔⲆ + "</div><div class=\"stats\"> " + Zs[334] + " : " + Ww.ⲆᐃΔⲆⲆΔᐃ.ᐃⵠⵠΔⵠ + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + Zs[333] + " : " + Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠⲆⲆΔΔ + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠᐃΔᐃᐃⵠⵠ + " " + Zs[332] + "</div></div><div id=\"shop_points\">" + Zs[331] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + Zs[329] + "</div><div class=\"social\" id=\"fffacebook\">" + Zs[330] + "</div></div><div id=\"bbback\">" + Zs[328] + "</div>";
                this.style.display = "inline-block";
                document.getElementById("tttwitter").addEventListener("mouseup", Kw, ug);
                document.getElementById("bbback").addEventListener("mouseup", function () {
                    Xw.ΔⲆⵠΔΔ(rf.ⲆᐃⲆᐃᐃ);
                }, false);
                document.getElementById("fffacebook").addEventListener("mouseup", Jw, false);
                this.height = Math.floor(this.id.clientHeight / 2);
                (function () {
                    var a = new XMLHttpRequest();
                    a.open("GET", xf + "getBreadAndScore?userid=" + cx);
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    a.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                            var b = JSON.parse(a.responseText);
                            var c = b.b - rf.ΔⵠⲆⲆΔ;
                            rf.ΔⵠⲆⲆΔ = b.b;
                            rf.ⵠⲆⲆΔΔ = b.s;
                            rf.Δⵠⵠᐃᐃ = rf.ⵠⵠᐃΔⲆᐃⵠ(rf.ⵠⲆⲆΔΔ);
                            rf.ⵠΔᐃᐃⲆΔᐃ = rf.ΔⲆΔⵠⲆⲆᐃ(rf.ⵠⲆⲆΔΔ);
                            rf.ᐃΔⵠᐃΔᐃⲆ = 0;
                            document.getElementById("breadWonInner").innerHTML = "" + c;
                        }
                    };
                    a.send();
                })();
            }
        };
        var f;
        var g = 0;
        function e() {
            d.ⲆΔᐃⲆ();
            if (++g != 30) {
                cj.setTimeout(e, 33);
            } else {
                d.ⲆΔᐃⲆ();
            }
        }
        this.ΔⲆⵠΔΔ = function (a) {
            if (d.ᐃᐃⵠⵠᐃᐃΔ === true) {
                d.ᐃᐃⵠⵠᐃᐃΔ = false;
                f = a;
                i = -1;
                j();
                Tf();
            }
        };
        var i = -1;
        function j() {
            d.ⲆΔᐃⲆ();
            if (++i == 30) {
                d.stop();
                d.ⲆⵠⵠⲆⵠⲆⵠ.style.display = "none";
                f();
                return;
            }
            cj.setTimeout(j, 33);
        }
        this.ⵠⵠΔⵠⲆ = false;
        this.stop = function () {
            this.ⵠⵠΔⵠⲆ = Gq;
        };
        this.ⲆᐃⲆᐃᐃ = function () {
            ax();
            document.getElementById("game_body").style.backgroundColor = Pr.Ⲇⵠⵠᐃᐃ[Vw.time];
            d.ⲆⵠⵠⲆⵠⲆⵠ.ⲆⲆⵠⲆⲆ();
            rf.Δᐃᐃⵠᐃ.style.display = "inline-block";
            d.ⵠⵠΔⵠⲆ = true;
            d.ᐃᐃⵠⵠᐃᐃΔ = Io;
            i = -1;
            g = 0;
            e();
        };
        this.ⲆΔᐃⲆ = function () {
            this.ⲆⵠⵠⲆⵠⲆⵠ.translate.x = Math.floor(hq - 275);
            this.ⲆⵠⵠⲆⵠⲆⵠ.translate.y = Math.floor(iq - this.ⲆⵠⵠⲆⵠⲆⵠ.height - 28);
            rf.Δᐃᐃⵠᐃ.translate.x = this.ⲆⵠⵠⲆⵠⲆⵠ.translate.x - 350;
            rf.Δᐃᐃⵠᐃ.translate.y = this.ⲆⵠⵠⲆⵠⲆⵠ.translate.y + 0;
            rf.Δᐃᐃⵠᐃ.ⲆΔᐃⲆ();
            if (g != 30 || i != -1) {
                var a = 0;
                if (g != 30) {
                    a = 1500 / (g + 1) - 50;
                }
                if (i != -1) {
                    a = -(1750 / (30 - i + 1) - 48);
                }
                this.ⲆⵠⵠⲆⵠⲆⵠ.translate.y -= a;
            }
            this.ⲆⵠⵠⲆⵠⲆⵠ.ⲆΔᐃⲆ();
        };
        this.ΔΔⲆᐃ = function () {
            ac();
            Ww.alert.ΔΔⲆᐃ("#FFF", "#000");
        };
    }
    function Mw(b, c, d, e) {
        const f = (0 << (b >> 24 & 255)) + (16 << (b >> 16 & 255)) + (8 << (b >> 8 & 255)) + (24 << (b & 255));
        const g = (2531011 + (14191 + c) * 214013) % 4294967296;
        const a = (d | 6139) & ~(d & 6139);
        const h = (12345 + (54767 + e) * 1103515245) % 2147483648;
        return ((6048 + (Cw(f, g, a, h) ^ Cw(f, g, a, h))) * 2147483629 + 2147483587) % 2147483647;
    }
    function Nw(b, c, d, e) {
        const f = (b | 12750) & ~(b & 12750);
        const g = c ^ 2927;
        const a = (2531011 + (4194 + d) * 214013) % 4294967296;
        const i = e ^ 48458;
        const j = gt(f, g, a, i, f, g);
        Bw(a, i, f, g);
        return ~(j & 60245) & (j | 60245);
    }
    function Ow(c, u) {
        this.ΔⲆ = c;
        this.Δ = u;
        if (cj.navigator.userAgent.indexOf("Edge") > -1) {
            this.ⵠᐃⵠⲆΔΔⲆ = "default";
            this.ⲆⵠⵠᐃΔⵠΔ = "pointer";
        } else {
            this.ⵠᐃⵠⲆΔΔⲆ = "url('img/cursor0.png'), default";
            this.ⲆⵠⵠᐃΔⵠΔ = "url('img/cursor1.png'), pointer";
        }
        var D = this;
        function e(c, d, e, f, i) {
            var a = this;
            for (var j = d + 9, k = 0, m = f, n = d; j > n; n++) {
                D.buttons[n].info.callback = o;
                D.buttons[n].info.ⵠᐃⵠᐃᐃⵠᐃⵠⵠ = c;
            }
            function o() {
                if (this.ᐃⲆⵠⵠΔᐃᐃ !== m && this.ᐃⲆⵠⵠΔᐃᐃ !== -1) {
                    if (this.ⲆⵠΔΔΔⲆᐃ > 0) {
                        if (ᐃᐃⵠⲆⲆᐃΔ === d) {
                            q(x, da, "none");
                        } else {
                            q(y, da, "none");
                        }
                    } else if (d === ᐃᐃⵠⲆⲆᐃΔ) {
                        q(x, ea, "inline-block");
                    } else {
                        q(y, ea, "inline-block");
                    }
                    m = this.ᐃⲆⵠⵠΔᐃᐃ;
                    e(this.ᐃⲆⵠⵠΔᐃᐃ);
                    p();
                }
            }
            function p() {
                var a = c[m];
                rf.ⲆⲆⲆⲆⲆΔⲆ = Ov(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, Aj, 10, 8);
                if (a.level !== es) {
                    rf.ᐃᐃᐃΔⵠᐃΔ = Ov("Level " + a.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, vk, 10, 8);
                } else {
                    rf.ᐃᐃᐃΔⵠᐃΔ = Ov("by " + a.ᐃᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
                }
            }
            this.ᐃⲆⲆⵠᐃ = function () {
                for (var a = d, b = k * 3; j > a && b < c.length; a++, b++) {
                    if (ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ !== c[b].Ⲇᐃᐃ || i[b] !== 0) {
                        D.buttons[a].info.ᐃⲆⵠⵠΔᐃᐃ = b;
                        for (var e = 0; e < 3; e++) {
                            D.buttons[a].info.ⲆⲆ[e] = ⲆΔΔⵠⲆ[c[b].Ⲇᐃᐃ][e];
                            D.buttons[a].info.active = ea;
                            D.buttons[a].info.ⲆⵠΔΔΔⲆᐃ = i[b];
                        }
                    } else {
                        D.buttons[a].info.ᐃⲆⵠⵠΔᐃᐃ = -1;
                        D.buttons[a].info.active = da;
                    }
                }
                for (; a < j; a++) {
                    D.buttons[a].info.ᐃⲆⵠⵠΔᐃᐃ = -1;
                    D.buttons[a].info.active = da;
                }
                p();
            };
            D.buttons[j].info.callback = function () {
                if (k > 0) {
                    k--;
                }
                a.ᐃⲆⲆⵠᐃ();
            };
            D.buttons[j + 1].info.callback = function () {
                if (c.length > k * 3 + 9) {
                    k++;
                }
                a.ᐃⲆⲆⵠᐃ();
            };
        }
        function n() {
            var b = Number(ᐃⵠΔᐃ.get("starve_crate"));
            var c = Number(ᐃⵠΔᐃ.get("starve_dead"));
            var d = Number(ᐃⵠΔᐃ.get("starve_book"));
            var e = Number(ᐃⵠΔᐃ.get("starve_bag"));
            var f = Number(ᐃⵠΔᐃ.get("starve_skin"));
            var a = Number(ᐃⵠΔᐃ.get("starve_accessory"));
            D.ⲆΔⲆΔ = f || 0;
            D.ᐃⲆᐃⲆⲆ = d || 0;
            D.ⲆΔΔⵠΔ = b || 1;
            D.ΔᐃΔⲆⵠ = a || 0;
            D.ⲆⵠⲆΔⲆ = e || 0;
            D.ᐃᐃᐃⵠΔ = c || 0;
        }
        function a() {
            for (var a = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ, b = 0; a.length > b; b++) {
                if (ⵠⲆΔ.ᐃΔΔΔᐃ === a[b].Ⲇᐃᐃ) {
                    D.unlock.ⲆΔⲆΔ[b] = 1;
                } else {
                    D.unlock.ⲆΔⲆΔ[b] = 0;
                }
            }
            a = ᐃⲆᐃΔ.ⵠΔᐃΔⲆ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].Ⲇᐃᐃ === ⵠⲆΔ.ᐃΔΔΔᐃ) {
                    D.unlock.ΔᐃΔⲆⵠ[b] = 1;
                } else {
                    D.unlock.ΔᐃΔⲆⵠ[b] = 0;
                }
            }
            a = ᐃⲆᐃΔ.ⲆΔⲆⲆ;
            b = 0;
            for (; a.length > b; b++) {
                if (ⵠⲆΔ.ᐃΔΔΔᐃ === a[b].Ⲇᐃᐃ) {
                    D.unlock.ⲆⵠⲆΔⲆ[b] = 1;
                } else {
                    D.unlock.ⲆⵠⲆΔⲆ[b] = 0;
                }
            }
            a = ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ;
            b = 0;
            for (; b < a.length; b++) {
                if (ⵠⲆΔ.ᐃΔΔΔᐃ === a[b].Ⲇᐃᐃ) {
                    D.unlock.ᐃⲆᐃⲆⲆ[b] = 1;
                } else {
                    D.unlock.ᐃⲆᐃⲆⲆ[b] = 0;
                }
            }
            a = ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ;
            b = 0;
            for (; b < a.length; b++) {
                if (a[b].Ⲇᐃᐃ === ⵠⲆΔ.ᐃΔΔΔᐃ) {
                    D.unlock.ⲆΔΔⵠΔ[b] = 1;
                    D.unlock.ᐃᐃᐃⵠΔ[b] = 1;
                } else {
                    D.unlock.ⲆΔΔⵠΔ[b] = 0;
                    D.unlock.ᐃᐃᐃⵠΔ[b] = 0;
                }
            }
        }
        this.waiting = oj;
        this.ⵠΔᐃΔΔΔᐃ = 0;
        this.ᐃⲆⲆΔⵠᐃᐃ = -1;
        this.ᐃⵠⲆⵠⵠⵠⲆ = {
            translate: {
                x: 0,
                y: 0
            },
            angle: 0,
            ⲆⲆ: Ⲇᐃ[301],
            ΔΔⲆᐃ: function () {
                this.angle += cf * 2;
                u.save();
                u.translate(this.translate.x + this.ⲆⲆ.width / 2, this.translate.y + this.ⲆⲆ.height / 2);
                u.rotate(this.angle);
                Jc(u, this.ⲆⲆ, -this.ⲆⲆ.width / 2, -this.ⲆⲆ.height / 2);
                u.restore();
            }
        };
        this.ᐃᐃⵠᐃᐃᐃᐃ = {
            id: document.getElementById("langselect"),
            style: document.getElementById("langselect").style,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = Math.floor(this.translate.x) + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ΔⵠⲆⲆΔ = 0;
        this.ⵠⲆⵠΔᐃⲆΔ = -1;
        this.ΔⲆⲆΔⲆΔᐃ = Kq;
        this.ᐃᐃⵠΔⵠΔⵠ = "";
        this.ⲆᐃⲆⲆⲆⵠⵠ = "";
        this.ΔΔⲆΔᐃⵠⲆ = undefined;
        this.Δⵠⵠᐃᐃ = 0;
        this.ᐃᐃⲆⲆⲆⲆⵠ = -1;
        this.ΔᐃⲆⲆΔⲆⲆ = ts;
        this.ᐃΔⵠᐃΔᐃⲆ = 0;
        this.ⵠΔᐃᐃⲆΔᐃ = 0;
        this.ΔᐃΔΔΔᐃᐃ = 0;
        this.ᐃⵠⵠΔⵠ = 0;
        this.ΔᐃⲆᐃⵠΔⲆ = 0;
        this.time = 0;
        this.ⵠⲆⲆΔΔ = 0;
        this.ᐃⲆᐃᐃΔΔⲆ = 0;
        this.ΔⲆⲆⲆᐃⲆⲆ = 0;
        this.ᐃⲆⵠⲆᐃⵠΔ = 0;
        this.ᐃⵠⵠⲆⲆⲆⵠ = 0;
        this.ⵠⲆⵠⵠᐃᐃΔ = [];
        this.ⵠⵠⵠⲆⲆ = -1;
        this.ⲆᐃᐃᐃⲆΔΔ = -1;
        this.ⲆᐃⲆΔⵠⵠΔ = -1;
        this.ᐃⵠᐃᐃⲆΔΔ = undefined;
        this.ⲆⲆⵠΔⲆᐃᐃ = undefined;
        this.ⵠⵠΔᐃΔⵠⲆ = -1;
        this.ΔΔΔⲆⲆᐃᐃ = -1;
        this.ⲆᐃΔᐃᐃⵠⲆ = -1;
        this.ⲆΔⵠΔⵠΔᐃ = -1;
        this.ᐃⲆΔⲆΔⵠⵠ = vk;
        this.ᐃⵠⲆⲆΔⲆⲆ = undefined;
        this.ⵠΔⵠⵠⲆⵠⲆ = Go;
        this.ⲆⲆⲆⲆⲆΔⲆ = undefined;
        this.ᐃᐃᐃΔⵠᐃΔ = Aj;
        this.ⲆΔᐃᐃⵠⵠⲆ = undefined;
        this.ⲆΔᐃⵠⵠⵠΔ = Lk;
        this.ᐃΔᐃⲆΔΔⲆ = undefined;
        this.ⵠⲆᐃᐃⲆᐃᐃ = xh;
        this.ⲆΔⲆᐃᐃⲆⲆ = 3;
        this.ⲆⲆⵠΔ = 0;
        this.ᐃΔⵠⵠΔⵠᐃᐃⵠ = cr;
        this.ΔⵠΔⵠΔ = ᐃⵠΔᐃ.get("starve_quality") ? ᐃⵠΔᐃ.get("starve_quality") : "high";
        if (this.ΔⵠΔⵠΔ === "high") {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            this.ΔⵠΔⵠΔ = 1;
        } else {
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            this.ΔⵠΔⵠΔ = 0;
        }
        this.ⲆΔⵠⵠⲆⵠⵠⵠᐃ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#B56D18";
            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
            ᐃⵠΔᐃ.set("starve_quality", "high", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 1;
            Yw.ΔΔⲆⲆΔᐃᐃ();
            rf.ΔⵠΔⵠΔ = 1;
        };
        this.ⵠΔⵠΔΔΔΔⲆᐃ = function () {
            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("low_ing").style.backgroundColor = "#B56D18";
            ᐃⵠΔᐃ.set("starve_quality", "low", {
                expires: 30
            });
            document.getElementById("input_ratio").value = 0.5 / (Wq / Xq);
            Yw.ΔΔⲆⲆΔᐃᐃ();
            rf.ΔⵠΔⵠΔ = 0;
        };
        if (es === ᐃⵠΔᐃ.get("starve_mapping") && hr === "FR") {
            vf.ⲆⲆΔᐃⲆᐃᐃ();
            this.mapping = "azerty";
        } else {
            this.mapping = ᐃⵠΔᐃ.get("starve_mapping") ? ᐃⵠΔᐃ.get("starve_mapping") : "qwerty";
        }
        if (this.mapping == "azerty") {
            vf.ⲆⲆΔᐃⲆᐃᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
        } else {
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
        }
        this.ⲆⲆΔᐃⲆᐃᐃ = function () {
            vf.ⲆⲆΔᐃⲆᐃᐃ();
            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
            ᐃⵠΔᐃ.set("starve_mapping", "azerty", {
                expires: 30
            });
        };
        this.ⵠⲆⲆΔⵠᐃⲆ = function () {
            vf.ⵠⲆⲆΔⵠᐃⲆ();
            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
            ᐃⵠΔᐃ.set("starve_mapping", "qwerty", {
                expires: 30
            });
        };
        this.ⵠΔᐃⵠᐃᐃΔ = {
            id: document.getElementById("all_rights_reserved"),
            style: document.getElementById("all_rights_reserved").style,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        n();
        this.unlock = {};
        this.unlock.ⲆΔⲆΔ = [];
        this.unlock.ⲆⵠⲆΔⲆ = [];
        this.unlock.ᐃⲆᐃⲆⲆ = [];
        this.unlock.ⲆΔΔⵠΔ = [];
        this.unlock.ᐃᐃᐃⵠΔ = [];
        this.unlock.ΔᐃΔⲆⵠ = [];
        this.ΔΔⵠⲆᐃⵠᐃ = 0;
        this.ΔᐃⵠⲆⲆⵠΔ = a;
        a();
        this.Δᐃᐃⵠᐃ = {
            id: document.getElementById("trevda"),
            style: document.getElementById("trevda").style,
            translate: {
                x: 0,
                y: 0
            },
            ⲆΔᐃⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        var i;
        var o = 0;
        function r() {
            D.ⲆΔᐃⲆ();
            if (++o == 30) {
                D.ΔⵠⵠΔⵠⵠᐃ();
                D.ⵠΔᐃΔΔΔᐃ = true;
                D.ⲆΔᐃⲆ();
                return;
            }
            cj.setTimeout(r, 33);
        }
        this.ΔⲆⵠΔΔ = function (a) {
            i = a;
            D.ⵠᐃᐃⲆⲆᐃΔ();
            D.ⵠΔᐃΔΔΔᐃ = 0;
            l = -1;
            t();
        };
        var l = -1;
        function t() {
            D.ⲆΔᐃⲆ();
            if (++l == 30) {
                ᐃⵠΔᐃ.set("starve_nickname", D.ΔᐃⵠΔⵠ.input.value, {
                    expires: 30
                });
                D.ΔᐃⵠΔⵠ.style.display = "none";
                D.ΔΔⲆⵠΔ.style.display = "none";
                D.ᐃᐃⵠᐃᐃᐃᐃ.style.display = "none";
                D.ⵠΔᐃⵠᐃᐃΔ.style.display = "none";
                D.Δᐃᐃⵠᐃ.style.display = "none";
                D.stop();
                i();
                return;
            }
            cj.setTimeout(t, 33);
        }
        this.ⵠⵠΔⵠⲆ = false;
        this.stop = function () {
            this.ⵠⵠΔⵠⲆ = false;
        };
        this.ⲆᐃⲆᐃᐃ = function () {
            ax();
            document.getElementById("game_body").style.backgroundColor = Pr.Ⲇⵠⵠᐃᐃ[Vw.time];
            D.ΔᐃⵠΔⵠ.style.display = "inline-block";
            D.ΔΔⲆⵠΔ.style.display = "inline-block";
            D.ᐃᐃⵠᐃᐃᐃᐃ.style.display = "inline-block";
            D.ⵠΔᐃⵠᐃᐃΔ.style.display = "inline-block";
            D.Δᐃᐃⵠᐃ.style.display = "inline-block";
            D.waiting = false;
            D.ⵠⵠΔⵠⲆ = dl;
            l = -1;
            o = 0;
            r();
        };
        this.ᐃᐃΔᐃᐃᐃᐃ = function (a, b) {
            b = b < 0 ? -b : b;
            if ((a.position & aa) === aa) {
                if ((a.position & X) === X) {
                    a.translate.x = hq + a.translate.ⵠⵠΔΔⵠ - b;
                } else if (Y === (a.position & Y)) {
                    a.translate.x = hq + a.translate.ⵠⵠΔΔⵠ + b;
                } else {
                    a.translate.x = hq + a.translate.ⵠⵠΔΔⵠ;
                }
            } else if (X === (a.position & X)) {
                a.translate.x = a.translate.ⵠⵠΔΔⵠ - b;
            } else if (Y === (a.position & Y)) {
                a.translate.x = uo - a.translate.ⵠⵠΔΔⵠ + b;
            } else {
                a.translate.x = a.translate.ⵠⵠΔΔⵠ;
            }
            if (ba === (a.position & ba)) {
                if (Z === (a.position & Z)) {
                    a.translate.y = iq + a.translate.ᐃᐃᐃΔⲆ - b;
                } else if (_ === (a.position & _)) {
                    a.translate.y = iq + a.translate.ᐃᐃᐃΔⲆ + b;
                } else {
                    a.translate.y = iq + a.translate.ᐃᐃᐃΔⲆ;
                }
            } else if (Z === (a.position & Z)) {
                a.translate.y = a.translate.ᐃᐃᐃΔⲆ - b;
            } else if ((a.position & _) === _) {
                a.translate.y = vo + a.translate.ᐃᐃᐃΔⲆ + b;
            } else {
                a.translate.y = a.translate.ᐃᐃᐃΔⲆ;
            }
            if (Lk !== a.style) {
                a.style.left = Math.floor(a.translate.x) + "px";
                a.style.top = Math.floor(a.translate.y) + "px";
            }
        };
        this.ⲆΔᐃⲆ = function () {
            var a = 0;
            if (o != 30 || l != -1) {
                if (o != 30) {
                    a = 1500 / (o + 1) - 50;
                }
                if (l != -1) {
                    a = -(1750 / (30 - l + 1) - 48);
                }
            }
            for (var b = 0; this.ⵠΔⵠⵠ.length > b; b++) {
                this.ᐃᐃΔᐃᐃᐃᐃ(this.ⵠΔⵠⵠ[b], a);
            }
            for (b = 0; this.buttons.length > b; b++) {
                this.ᐃᐃΔᐃᐃᐃᐃ(this.buttons[b].info, a);
            }
            for (b = 0; this.ⲆⵠᐃΔⲆ.length > b; b++) {
                this.ᐃᐃΔᐃᐃᐃᐃ(this.ⲆⵠᐃΔⲆ[b], a);
            }
            this.ᐃⵠⲆⵠⵠⵠⲆ.translate.x = (uo - this.ᐃⵠⲆⵠⵠⵠⲆ.ⲆⲆ.width) / 2;
            this.ᐃⵠⲆⵠⵠⵠⲆ.translate.y = 0;
            this.ᐃᐃⵠᐃᐃᐃᐃ.translate.x = uo - 450;
            this.ᐃᐃⵠᐃᐃᐃᐃ.translate.y = vo - 40;
            this.ⵠΔᐃⵠᐃᐃΔ.translate.x = uo - 340;
            this.ⵠΔᐃⵠᐃᐃΔ.translate.y = vo - 25;
            this.Δᐃᐃⵠᐃ.translate.x = uo - 320;
            this.Δᐃᐃⵠᐃ.translate.y = 80;
            if (o != 30 || l != -1) {
                var c = 0;
                if (o != 30) {
                    c = 1500 / (o + 1) - 50;
                }
                if (l != -1) {
                    c = -(1750 / (30 - l + 1) - 48);
                }
                this.ᐃⵠⲆⵠⵠⵠⲆ.translate.y -= c > 0 ? c : -c;
                this.ᐃᐃⵠᐃᐃᐃᐃ.translate.y -= c < 0 ? c : -c;
                this.ⵠΔᐃⵠᐃᐃΔ.translate.y -= c < 0 ? c : -c;
            }
            this.ᐃᐃⵠᐃᐃᐃᐃ.ⲆΔᐃⲆ();
            this.ⵠΔᐃⵠᐃᐃΔ.ⲆΔᐃⲆ();
            this.Δᐃᐃⵠᐃ.ⲆΔᐃⲆ();
        };
        this.ⵠᐃᐃⲆΔⲆᐃ = function (b) {
            var c = document.createElement("canvas");
            var d = c.getContext("2d");
            c.width = 342;
            c.height = 342;
            var e = -Math.PI / 2;
            for (var f = 0; b.length > f; f++) {
                var g = b[f][0];
                var h = b[f][1] * Math.PI / 180;
                d.beginPath();
                d.arc(171, 171, 170, e, e + h, oe);
                d.lineTo(171, 171);
                d.fillStyle = g;
                d.fill();
                e += h;
            }
            return c;
        };
        this.ᐃⵠᐃⵠᐃⵠⲆᐃᐃ = function () {
            this.ᐃᐃⵠΔⵠΔⵠ = document.getElementById("account_nickname_input").value;
            if (this.ⲆᐃⲆⲆⲆⵠⵠ !== this.ᐃᐃⵠΔⵠΔⵠ) {
                this.ⲆᐃⲆⲆⲆⵠⵠ = this.ᐃᐃⵠΔⵠΔⵠ;
                this.ΔΔⲆΔᐃⵠⲆ = Ov(this.ᐃᐃⵠΔⵠΔⵠ, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
            }
        };
        this.ΔΔⲆᐃ = function () {
            ac();
            rf.ᐃΔⵠᐃΔᐃⲆ = ΔᐃⲆᐃ.ⲆΔⵠⲆᐃⵠⵠ(rf.ᐃΔⵠᐃΔᐃⲆ, rf.ⵠΔᐃᐃⲆΔᐃ, 0.03);
            this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.x = this.ⵠΔⵠⵠ[0].translate.x + -72 + rf.ᐃΔⵠᐃΔᐃⲆ * 165;
            this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.ⵠⵠΔΔⵠ = this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.x;
            this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.y = this.ⵠΔⵠⵠ[0].translate.y + 30;
            this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.ᐃᐃᐃΔⲆ = this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ].translate.y;
            for (var f = 2; f < this.ⵠΔⵠⵠ.length; f++) {
                if (ea === this.ⵠΔⵠⵠ[f].active) {
                    this.ⵠΔⵠⵠ[f].ΔΔⲆᐃ(u);
                }
            }
            var i;
            if ((i = this.ⵠⵠⵠⲆⲆ - Date.now()) > 0) {
                var q = Math.floor(i / 60000);
                var t = Math.floor(q / 60);
                if ((q %= 60) !== this.ⲆᐃⲆΔⵠⵠΔ) {
                    this.ⲆᐃⲆΔⵠⵠΔ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    D.ᐃⵠᐃᐃⲆΔΔ = Ov(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ⲆᐃᐃᐃⲆΔΔ !== t) {
                    this.ⲆᐃᐃᐃⲆΔΔ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    D.ⲆⲆⵠΔⲆᐃᐃ = Ov(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (K = this.ⵠΔⵠⵠ[ⵠⲆΔⵠΔᐃⵠ]).ΔΔⲆᐃ(u);
                var H = this.ⲆⲆⵠΔⲆᐃᐃ;
                Jc(u, H, K.translate.x - H.width / 4 + 182, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
                H = this.ᐃⵠᐃᐃⲆΔΔ;
                Jc(u, H, K.translate.x - H.width / 4 + 251, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
            }
            if ((i = this.ⵠⵠΔᐃΔⵠⲆ - Date.now()) > 0) {
                q = Math.floor(i / 60000);
                t = Math.floor(q / 60);
                var K;
                var U = Math.floor(t / 24);
                q %= 60;
                t %= 24;
                if (this.ⲆΔⵠΔⵠΔᐃ !== q) {
                    this.ⲆΔⵠΔⵠΔᐃ = q;
                    q = q < 10 ? "0" + q : "" + q;
                    D.ᐃⲆΔⲆΔⵠⵠ = Ov(q, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ⲆᐃΔᐃᐃⵠⲆ !== t) {
                    this.ⲆᐃΔᐃᐃⵠⲆ = t;
                    t = t < 10 ? "0" + t : "" + t;
                    D.ᐃⵠⲆⲆΔⲆⲆ = Ov(t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                if (this.ΔΔΔⲆⲆᐃᐃ !== U) {
                    this.ΔΔΔⲆⲆᐃᐃ = U;
                    U = U < 10 ? "0" + U : "" + U;
                    D.ⵠΔⵠⵠⲆⵠⲆ = Ov(U, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
                }
                (K = this.ⵠΔⵠⵠ[ⲆᐃΔⵠⲆⵠⲆ]).ΔΔⲆᐃ(u);
                H = this.ⵠΔⵠⵠⲆⵠⲆ;
                Jc(u, H, K.translate.x - H.width / 4 + 113, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
                H = this.ᐃⵠⲆⲆΔⲆⲆ;
                Jc(u, H, K.translate.x - H.width / 4 + 182, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
                H = this.ᐃⲆΔⲆΔⵠⵠ;
                Jc(u, H, K.translate.x - H.width / 4 + 251, K.translate.y - H.height / 4 + 40, H.width / 2, H.height / 2);
            }
            if (N === (this.ⲆᐃΔⵠⲆ & N)) {
                this.buttons[ⵠᐃΔⲆⵠᐃⲆ].info.state = Mv;
            } else if (Q === (this.ⲆᐃΔⵠⲆ & Q)) {
                this.buttons[ΔᐃΔⵠⵠᐃᐃ].info.state = Mv;
            } else if (m === (this.ⲆᐃΔⵠⲆ & m)) {
                this.buttons[ⲆΔⵠⵠⲆⲆⲆ].info.state = Mv;
            } else if ((this.ⲆᐃΔⵠⲆ & d) === d) {
                this.buttons[ⲆⵠᐃⵠⵠⵠΔ].info.state = Mv;
            } else if ((this.ⲆᐃΔⵠⲆ & C) === C) {
                this.buttons[ᐃⲆⵠⵠⲆΔΔ].info.state = Mv;
            } else if ((this.ⲆᐃΔⵠⲆ & v) === v) {
                this.buttons[ᐃᐃᐃⵠⲆᐃᐃ].info.state = Mv;
            } else if (p === (this.ⲆᐃΔⵠⲆ & p) || (this.ⲆᐃΔⵠⲆ & T) === T || P === (this.ⲆᐃΔⵠⲆ & P) || (this.ⲆᐃΔⵠⲆ & A) === A || k === (this.ⲆᐃΔⵠⲆ & k) || J === (this.ⲆᐃΔⵠⲆ & J) || M === (this.ⲆᐃΔⵠⲆ & M)) {
                this.buttons[ΔᐃⵠΔⲆᐃⵠ].info.state = Mv;
            } else if (B === (this.ⲆᐃΔⵠⲆ & B) || I === (this.ⲆᐃΔⵠⲆ & I) || E === (this.ⲆᐃΔⵠⲆ & E) || (this.ⲆᐃΔⵠⲆ & S) === S || (this.ⲆᐃΔⵠⲆ & V) === V || F === (this.ⲆᐃΔⵠⲆ & F)) {
                this.buttons[ⲆΔⵠⵠⲆⲆⲆ].info.state = Mv;
            } else if (G === (this.ⲆᐃΔⵠⲆ & G) || (this.ⲆᐃΔⵠⲆ & L) === L || W === (this.ⲆᐃΔⵠⲆ & W)) {
                this.buttons[ᐃⲆⲆⵠⵠⲆᐃ].info.state = Mv;
            } else if ((this.ⲆᐃΔⵠⲆ & O) === O) {
                this.buttons[ⲆⵠᐃⵠⵠⵠΔ].info.state = Mv;
            }
            if (Q === (this.ⲆᐃΔⵠⲆ & Q)) {
                if (this.ⵠⵠⵠΔΔⲆΔ === this.ⲆΔᐃⵠⵠⵠΔ) {
                    this.ⲆΔᐃᐃⵠⵠⲆ = this.ⵠΔⵠⵠᐃⵠᐃ;
                    this.buttons[this.ⵠΔⵠⵠᐃⵠᐃ].info.active = da;
                    this.buttons[this.ΔΔᐃΔⵠΔⲆ].info.active = da;
                    this.buttons[this.ᐃⵠⲆⵠΔⲆⲆ].info.active = da;
                } else {
                    this.buttons[this.ⵠΔⵠⵠᐃⵠᐃ].info.active = ea;
                    this.buttons[this.ΔΔᐃΔⵠΔⲆ].info.active = ea;
                    this.buttons[this.ᐃⵠⲆⵠΔⲆⲆ].info.active = ea;
                }
                if (this.ⲆΔᐃⵠⵠⵠΔ === this.ΔΔⵠⵠᐃΔⵠ) {
                    this.buttons[this.ΔΔⵠⵠᐃΔⵠ].info.state = Mv;
                } else if (this.ⲆΔⲆⲆᐃⵠᐃ === this.ⲆΔᐃⵠⵠⵠΔ) {
                    this.buttons[this.ⲆΔⲆⲆᐃⵠᐃ].info.state = Mv;
                } else if (this.ⵠⵠⵠΔΔⲆΔ === this.ⲆΔᐃⵠⵠⵠΔ) {
                    this.buttons[this.ⵠⵠⵠΔΔⲆΔ].info.state = Mv;
                } else if (this.ⵠⵠΔⲆⲆⲆⵠ === this.ⲆΔᐃⵠⵠⵠΔ) {
                    this.buttons[this.ⵠⵠΔⲆⲆⲆⵠ].info.state = Mv;
                } else if (this.ⲆΔᐃⵠⵠⵠΔ === this.ⵠΔⲆⲆⲆΔᐃ) {
                    this.buttons[this.ⵠΔⲆⲆⲆΔᐃ].info.state = Mv;
                }
                if (this.ⵠΔⵠⵠᐃⵠᐃ === this.ⲆΔᐃᐃⵠⵠⲆ) {
                    this.buttons[this.ⵠΔⵠⵠᐃⵠᐃ].info.state = Mv;
                } else if (this.ⲆΔᐃᐃⵠⵠⲆ === this.ΔΔᐃΔⵠΔⲆ) {
                    this.buttons[this.ΔΔᐃΔⵠΔⲆ].info.state = Mv;
                } else if (this.ⲆΔᐃᐃⵠⵠⲆ === this.ᐃⵠⲆⵠΔⲆⲆ) {
                    this.buttons[this.ᐃⵠⲆⵠΔⲆⲆ].info.state = Mv;
                }
                if (this.ᐃΔᐃⲆΔΔⲆ === this.ᐃΔⲆᐃⵠⵠᐃ) {
                    this.buttons[this.ᐃΔⲆᐃⵠⵠᐃ].info.state = Mv;
                } else if (this.Δⵠᐃⵠⵠⵠᐃ === this.ᐃΔᐃⲆΔΔⲆ) {
                    this.buttons[this.Δⵠᐃⵠⵠⵠᐃ].info.state = Mv;
                } else if (this.ᐃΔᐃⲆΔΔⲆ === this.ᐃΔⲆΔⲆⵠⵠ) {
                    this.buttons[this.ᐃΔⲆΔⲆⵠⵠ].info.state = Mv;
                }
                if (this.ⵠⲆᐃᐃⲆᐃᐃ === this.ΔΔᐃⵠΔΔⵠ) {
                    this.buttons[this.ΔΔᐃⵠΔΔⵠ].info.state = Mv;
                } else if (this.ⲆⵠΔⵠΔΔᐃ === this.ⵠⲆᐃᐃⲆᐃᐃ) {
                    this.buttons[this.ⲆⵠΔⵠΔΔᐃ].info.state = Mv;
                } else if (this.ⵠⲆᐃᐃⲆᐃᐃ === this.ΔΔⲆΔⲆᐃᐃ) {
                    this.buttons[this.ΔΔⲆΔⲆᐃᐃ].info.state = Mv;
                } else if (this.ⵠⲆⵠⲆⲆⲆᐃ === this.ⵠⲆᐃᐃⲆᐃᐃ) {
                    this.buttons[this.ⵠⲆⵠⲆⲆⲆᐃ].info.state = Mv;
                } else if (this.ⵠⲆᐃᐃⲆᐃᐃ === this.ΔⵠᐃⲆⲆⵠᐃ) {
                    this.buttons[this.ΔⵠᐃⲆⲆⵠᐃ].info.state = Mv;
                } else if (this.ΔⵠΔΔᐃᐃⵠ === this.ⵠⲆᐃᐃⲆᐃᐃ) {
                    this.buttons[this.ΔⵠΔΔᐃᐃⵠ].info.state = Mv;
                }
            }
            if (d === (this.ⲆᐃΔⵠⲆ & d)) {
                if (this.ᐃⲆⲆΔⵠᐃᐃ === -1) {
                    this.buttons[wa].info.state = Mv;
                } else if (this.ᐃⲆⲆΔⵠᐃᐃ === ew.ⲆⲆⲆⵠⵠ) {
                    this.buttons[xa].info.state = Mv;
                } else if (this.ᐃⲆⲆΔⵠᐃᐃ === ew.ⲆⵠΔΔᐃ) {
                    this.buttons[za].info.state = Mv;
                } else if (ew.ᐃⲆⵠⲆΔ === this.ᐃⲆⲆΔⵠᐃᐃ) {
                    this.buttons[Aa].info.state = Mv;
                } else if (ew.ⲆΔᐃⲆᐃ === this.ᐃⲆⲆΔⵠᐃᐃ) {
                    this.buttons[ya].info.state = Mv;
                }
                if (this.ⲆΔⲆᐃᐃⲆⲆ === 0) {
                    this.buttons[qa].info.state = Mv;
                } else if (this.ⲆΔⲆᐃᐃⲆⲆ === 1) {
                    this.buttons[ra].info.state = Mv;
                } else if (this.ⲆΔⲆᐃᐃⲆⲆ === 2) {
                    this.buttons[sa].info.state = Mv;
                } else if (this.ⲆΔⲆᐃᐃⲆⲆ === 3) {
                    this.buttons[ta].info.state = Mv;
                } else if (this.ⲆΔⲆᐃᐃⲆⲆ === 4) {
                    this.buttons[ua].info.state = Mv;
                } else if (this.ⲆΔⲆᐃᐃⲆⲆ === 5) {
                    this.buttons[va].info.state = Mv;
                }
            }
            if (N === (this.ⲆᐃΔⵠⲆ & N) && ⵠΔᐃᐃ.ⲆᐃᐃᐃΔΔᐃ === 0) {
                if (this.buttons[ja].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[ja].hint = Math.min(1, this.buttons[ja].hint + cf * 1.5);
                } else {
                    this.buttons[ja].hint = Math.max(0, this.buttons[ja].hint - cf * 1.5);
                }
                if (this.buttons[ka].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[ka].hint = Math.min(1, this.buttons[ka].hint + cf * 1.5);
                } else {
                    this.buttons[ka].hint = Math.max(0, this.buttons[ka].hint - cf * 1.5);
                }
                if (this.buttons[la].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[la].hint = Math.min(1, this.buttons[la].hint + cf * 1.5);
                } else {
                    this.buttons[la].hint = Math.max(0, this.buttons[la].hint - cf * 1.5);
                }
                if (this.buttons[oa].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[oa].hint = Math.min(1, this.buttons[oa].hint + cf * 1.5);
                } else {
                    this.buttons[oa].hint = Math.max(0, this.buttons[oa].hint - cf * 1.5);
                }
                if (this.buttons[ma].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[ma].hint = Math.min(1, this.buttons[ma].hint + cf * 1.5);
                } else {
                    this.buttons[ma].hint = Math.max(0, this.buttons[ma].hint - cf * 1.5);
                }
                if (this.buttons[na].ⲆΔⵠⵠᐃⵠⲆ(mf.ΔᐃⵠΔ)) {
                    this.buttons[na].hint = Math.min(1, this.buttons[na].hint + cf * 1.5);
                } else {
                    this.buttons[na].hint = Math.max(0, this.buttons[na].hint - cf * 1.5);
                }
            }
            var X = 1;
            if ((this.ⲆᐃΔⵠⲆ & (T | P | A | k | J | M)) > 1) {
                H = ⵠⵠ.ⵠΔΔⵠⲆⲆᐃ;
                u.save();
                u.translate(hq, ia + H.height / 4);
                if (this.ΔΔⵠΔΔ === 1) {
                    this.ⲆⵠᐃⲆᐃΔⵠ += cf / 3;
                    X = this.ᐃΔⲆΔᐃⲆΔ - 100 / Math.pow(1 + this.ⲆⵠᐃⲆᐃΔⵠ, 1 + this.ⲆⵠᐃⲆᐃΔⵠ);
                    u.rotate(X);
                }
                Jc(u, H, -H.width / 4, -H.height / 4, H.width / 2, H.height / 2);
                u.restore();
            }
            if (ⵠΔᐃᐃ.ⲆᐃᐃᐃΔΔᐃ === 0) {
                if (ew.ⲆⲆⲆⵠⵠ === ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ) {
                    this.buttons[ja].info.state = Mv;
                } else if (ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ === ew.ⲆΔᐃⲆᐃ) {
                    this.buttons[ka].info.state = Mv;
                } else if (ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ === ew.ⲆⵠΔΔᐃ) {
                    this.buttons[ma].info.state = Mv;
                } else if (ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ === ew.ᐃⲆⵠⲆΔ) {
                    this.buttons[na].info.state = Mv;
                } else if (ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ === ew.ΔⵠⵠᐃΔ) {
                    this.buttons[la].info.state = Mv;
                } else if (ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ === ew.ⲆΔⲆΔᐃ) {
                    this.buttons[oa].info.state = Mv;
                }
            }
            for (f = 1; f < this.buttons.length; f++) {
                if (ea === this.buttons[f].info.active) {
                    this.buttons[f].ΔΔⲆᐃ(u);
                }
            }
            this.ⵠΔⵠⵠ[0].ΔΔⲆᐃ(u);
            if ((this.ⲆᐃΔⵠⲆ & (j | R)) > 0) {
                H = this.ΔΔⲆΔᐃⵠⲆ;
                Jc(u, H, hq - H.width / 4, 138, H.width / 2, H.height / 2);
            }
            var Y = Math.max(1, Math.min(18, Math.floor((rf.Δⵠⵠᐃᐃ + 3) / 2)));
            this.ⵠΔⵠⵠ[Y].active = ea;
            this.ⵠΔⵠⵠ[Y].ΔΔⲆᐃ(u);
            this.ⵠΔⵠⵠ[Y].active = da;
            this.buttons[0].ΔΔⲆᐃ(u);
            if ((this.ⲆᐃΔⵠⲆ & (m | I | S | B | V)) > 1) {
                var g = (this.ⲆᐃΔⵠⲆ & (I | S | B | V)) > 1 ? -190 : 0;
                H = Ⲇᐃ[29][this.ⲆⵠⲆΔⲆ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 + g, 183, H.width / 2, H.height / 2);
                this.ⲆⲆⵠΔ = (this.ⲆⲆⵠΔ + cf * 1000) % 2000;
                var b = (this.ⲆⲆⵠΔ < 1000) * 4.5 ? this.ⲆⲆⵠΔ / 1000 : (2000 - this.ⲆⲆⵠΔ) / 1000;
                H = Ⲇᐃ[28][this.ᐃⲆᐃⲆⲆ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 - 62 + b + g, 240, H.width / 2, H.height / 2);
                H = Ⲇᐃ[7][this.ⲆΔⲆΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 - 54 + b + g, 272, H.width / 2, H.height / 2);
                Jc(u, H, hq - H.width / 4 + 54 - b + g, 272, H.width / 2, H.height / 2);
                H = Ⲇᐃ[255][this.ⲆΔⲆΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 + g, 222, H.width / 2, H.height / 2);
                H = Ⲇᐃ[796][this.ΔᐃΔⲆⵠ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 + g, 222, H.width / 2, H.height / 2);
            }
            if (m === (this.ⲆᐃΔⵠⲆ & m)) {
                H = Ⲇᐃ[250][this.ⲆΔΔⵠΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 - 61, 406 - H.height / 4, H.width / 2, H.height / 2);
                H = Ⲇᐃ[250][this.ᐃᐃᐃⵠΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 + 53, 406 - H.height / 4, H.width / 2, H.height / 2);
            }
            if (E === (this.ⲆᐃΔⵠⲆ & E)) {
                H = Ⲇᐃ[250][this.ᐃᐃᐃⵠΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 - 200, 268 - H.height / 4, H.width / 2, H.height / 2);
            }
            if (F === (this.ⲆᐃΔⵠⲆ & F)) {
                H = Ⲇᐃ[250][this.ⲆΔΔⵠΔ][this.ΔΔⵠⲆᐃⵠᐃ];
                Jc(u, H, hq - H.width / 4 - 200, 268 - H.height / 4, H.width / 2, H.height / 2);
            }
            if ((this.ⲆᐃΔⵠⲆ & (I | S | B | V | E | F)) > 1) {
                for (f = 1; this.buttons.length > f; f++) {
                    if (this.buttons[f].view & this.ⲆᐃΔⵠⲆ) {
                        var Z = this.buttons[f].info;
                        if (Z.ᐃⲆⵠⵠΔᐃᐃ >= 0) {
                            H = Z.ⵠᐃⵠᐃᐃⵠᐃⵠⵠ[Z.ᐃⲆⵠⵠΔᐃᐃ].ⵠΔⲆ;
                            Jc(u, H, Z.translate.x - H.width / 8 + 44.5, Z.translate.y - H.height / 8 + 45.5, H.width / 4, H.height / 4);
                            if (Z.ⲆⵠΔΔΔⲆᐃ !== 1) {
                                H = ⵠⵠ.ⵠⵠⲆⵠΔⲆΔ;
                                Jc(u, H, Z.translate.x - H.width / 4 + 44.5, Z.translate.y - H.height / 4 + 44.5, H.width / 2, H.height / 2);
                            }
                        }
                    }
                }
                H = this.ⲆⲆⲆⲆⲆΔⲆ;
                Jc(u, H, hq - 312, 375, H.width / 2, H.height / 2);
                H = this.ᐃᐃᐃΔⵠᐃΔ;
                Jc(u, H, hq - 312, 395, H.width / 2, H.height / 2);
            }
            if (this.ⵠⲆⵠΔᐃⲆΔ !== this.ΔⵠⲆⲆΔ) {
                this.ⵠⲆⵠΔᐃⲆΔ = this.ΔⵠⲆⲆΔ;
                this.ΔⲆⲆΔⲆΔᐃ = Ov("" + this.ΔⵠⲆⲆΔ, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
            }
            Jc(u, this.ΔⲆⲆΔⲆΔᐃ, this.ⵠΔⵠⵠ[0].translate.x + 350, 15, this.ΔⲆⲆΔⲆΔᐃ.w2, this.ΔⲆⲆΔⲆΔᐃ.ⲆⲆⲆΔᐃ);
            if (this.ᐃᐃⲆⲆⲆⲆⵠ !== this.Δⵠⵠᐃᐃ) {
                this.ᐃᐃⲆⲆⲆⲆⵠ = this.Δⵠⵠᐃᐃ;
                this.ΔᐃⲆⲆΔⲆⲆ = Ov("LVL " + (this.Δⵠⵠᐃᐃ + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, Hq, undefined, wh, cl, "#3F3019", 20);
            }
            Jc(u, this.ΔᐃⲆⲆΔⲆⲆ, this.ⵠΔⵠⵠ[0].translate.x + 94, 0, this.ΔᐃⲆⲆΔⲆⲆ.w2, this.ΔᐃⲆⲆΔⲆⲆ.ⲆⲆⲆΔᐃ);
            if (ⵠΔᐃᐃ.ⲆᐃᐃᐃΔΔᐃ === 0) {
                if ((_ = this.buttons[ja].hint) > 0) {
                    H = ⵠⵠ.ⵠΔᐃΔᐃᐃⵠ;
                    Jc(u, H, hq - H.width / 4, -36 - H.height * ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) / 2, H.width / 2, H.height / 2);
                }
                var _ = this.buttons[ka].hint;
                if (_ > 0) {
                    H = ⵠⵠ.ᐃᐃΔΔⵠⲆᐃ;
                    Jc(u, H, hq - H.width / 4, -36 - H.height * ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) / 2, H.width / 2, H.height / 2);
                }
                if ((_ = this.buttons[la].hint) > 0) {
                    H = ⵠⵠ.ᐃᐃⵠΔⲆⵠⲆ;
                    Jc(u, H, hq - H.width / 4, -36 - ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
                }
                _ = this.buttons[oa].hint;
                if (_ > 0) {
                    H = ⵠⵠ.ⲆⲆⵠⲆⲆᐃΔ;
                    Jc(u, H, hq - H.width / 4, -36 - H.height * ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) / 2, H.width / 2, H.height / 2);
                }
                if ((_ = this.buttons[na].hint) > 0) {
                    H = ⵠⵠ.ΔΔΔⲆΔⲆΔ;
                    Jc(u, H, hq - H.width / 4, -36 - H.height * ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) / 2, H.width / 2, H.height / 2);
                }
                _ = this.buttons[ma].hint;
                if (_ > 0) {
                    H = ⵠⵠ.ΔᐃⲆᐃΔᐃΔ;
                    Jc(u, H, hq - H.width / 4, -36 - ΔᐃⲆᐃ.ᐃⵠⲆⲆΔ(1 - _) * H.height / 2, H.width / 2, H.height / 2);
                }
            }
            if (this.ΔΔⵠΔΔ === 1 && Math.abs(X - this.ᐃΔⲆΔᐃⲆΔ) < 0.006) {
                u.globalAlpha = Math.min(1, this.ᐃⵠⵠⵠΔΔΔ * 3);
                H = ⵠⵠ.ᐃⲆΔΔⲆᐃΔ;
                u.save();
                u.translate(hq, 260);
                this.ᐃⵠⵠⵠΔΔΔ += cf;
                u.rotate(this.ᐃⵠⵠⵠΔΔΔ);
                Jc(u, H, -H.width / 2, -H.height / 2, H.width, H.height);
                u.restore();
                b = 1.05 + Math.cos(this.ᐃⵠⵠⵠΔΔΔ * 5) * 0.05;
                if (this.ΔᐃⵠⲆΔⵠΔ === 0) {
                    var aa = b * (H = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[this.ⵠⵠΔⵠΔᐃᐃ].ⵠΔⲆ).width;
                    var ba = b * H.height;
                    Jc(u, H, hq - aa / 2, 260 - ba / 2, aa, ba);
                } else if (this.ΔᐃⵠⲆΔⵠΔ === 1) {
                    aa = b * (H = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[0].ⵠΔⲆ).width;
                    ba = b * H.height;
                    Jc(u, H, hq - aa / 2, 260 - ba / 2, aa, ba);
                    aa = b * (H = ᐃⲆᐃΔ.ⵠΔᐃΔⲆ[this.ⵠⵠΔⵠΔᐃᐃ].ⵠΔⲆ).width;
                    ba = H.height * b;
                    Jc(u, H, hq - aa / 2, 260 - ba / 2, aa, ba);
                } else if (this.ΔᐃⵠⲆΔⵠΔ === 2) {
                    aa = b * (H = ᐃⲆᐃΔ.ⲆΔⲆⲆ[this.ⵠⵠΔⵠΔᐃᐃ].ⵠΔⲆ).width;
                    ba = b * H.height;
                    Jc(u, H, hq - aa / 2, 180 - ba / 2, aa, ba);
                    aa = (H = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[0].ⵠΔⲆ).width * b;
                    ba = H.height * b;
                    Jc(u, H, hq - aa / 2, 260 - ba / 2, aa, ba);
                } else if (this.ΔᐃⵠⲆΔⵠΔ === 3) {
                    aa = b * (H = ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ[this.ⵠⵠΔⵠΔᐃᐃ].ⵠΔⲆ).width;
                    ba = b * H.height;
                    u.save();
                    u.translate(hq, 260);
                    u.rotate(Math.PI);
                    Jc(u, H, -aa / 2, -ba / 2, aa, ba);
                    u.restore();
                } else if (this.ΔᐃⵠⲆΔⵠΔ === 4) {
                    aa = b * (H = ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ[this.ⵠⵠΔⵠΔᐃᐃ].ⵠΔⲆ).width;
                    ba = H.height * b;
                    Jc(u, H, hq - aa / 2, 260 - ba / 2, aa, ba);
                }
                H = this.ᐃΔΔᐃᐃᐃᐃ;
                Jc(u, H, hq - H.width / 4, 340, H.width / 2, H.height / 2);
                H = this.ⵠᐃⲆΔᐃΔΔ;
                Jc(u, H, hq - H.width / 4, 365, H.width / 2, H.height / 2);
                if (this.ᐃⵠⵠⵠΔΔΔ > 6) {
                    this.ΔΔⵠΔΔ = 0;
                    z(p);
                }
                u.globalAlpha = 1;
            }
            Ww.alert.ΔΔⲆᐃ("#FFF", "#000");
            if (D.waiting) {
                this.ᐃⵠⲆⵠⵠⵠⲆ.ΔΔⲆᐃ();
            }
        };
        var b = 0;
        var N = Math.pow(2, b++);
        var d = Math.pow(2, b++);
        this.ΔⲆᐃΔⲆ = d;
        var v = Math.pow(2, b++);
        var m = Math.pow(2, b++);
        var p = Math.pow(2, b++);
        var C = Math.pow(2, b++);
        var Q = Math.pow(2, b++);
        var f = Math.pow(2, b++);
        this.ᐃᐃΔⵠⵠ = f;
        var x = Math.pow(2, b++);
        var y = Math.pow(2, b++);
        var T = Math.pow(2, b++);
        var P = Math.pow(2, b++);
        var A = Math.pow(2, b++);
        var k = Math.pow(2, b++);
        var J = Math.pow(2, b++);
        var M = Math.pow(2, b++);
        var B = Math.pow(2, b++);
        var E = Math.pow(2, b++);
        var I = Math.pow(2, b++);
        var S = Math.pow(2, b++);
        var V = Math.pow(2, b++);
        var F = Math.pow(2, b++);
        var R = Math.pow(2, b++);
        var j = Math.pow(2, b++);
        var G = Math.pow(2, b++);
        this.ⲆᐃᐃⲆⲆ = G;
        var L = Math.pow(2, b++);
        this.ⲆΔⵠⵠΔ = L;
        var W = Math.pow(2, b++);
        this.ᐃᐃᐃⵠᐃ = W;
        var O = Math.pow(2, b++);
        function q(a, b, c) {
            for (var d = 0; D.ⵠΔⵠⵠ.length > d; d++) {
                if ((D.ⵠΔⵠⵠ[d].view & a) !== 0) {
                    D.ⵠΔⵠⵠ[d].active = b;
                }
            }
            for (d = 0; D.buttons.length > d; d++) {
                if ((D.buttons[d].view & a) !== 0) {
                    D.buttons[d].info.active = b;
                }
            }
            for (d = 0; d < D.ⲆⵠᐃΔⲆ.length; d++) {
                if ((D.ⲆⵠᐃΔⲆ[d].view & a) !== 0) {
                    D.ⲆⵠᐃΔⲆ[d].style.display = c;
                }
            }
        }
        this.ⲆᐃΔⵠⲆ = N;
        function w() {
            var b = Number(ᐃⵠΔᐃ.get("starve_crate"));
            var c = Number(ᐃⵠΔᐃ.get("starve_dead"));
            var d = Number(ᐃⵠΔᐃ.get("starve_book"));
            var e = Number(ᐃⵠΔᐃ.get("starve_bag"));
            var f = Number(ᐃⵠΔᐃ.get("starve_skin"));
            var g = Number(ᐃⵠΔᐃ.get("starve_accessory"));
            if (rf.unlock.ⲆΔⲆΔ[rf.ⲆΔⲆΔ] <= 0) {
                rf.ⲆΔⲆΔ = rf.unlock.ⲆΔⲆΔ[f] > 0 ? f : 0;
            }
            if (rf.unlock.ᐃⲆᐃⲆⲆ[rf.ᐃⲆᐃⲆⲆ] <= 0) {
                rf.ᐃⲆᐃⲆⲆ = rf.unlock.ᐃⲆᐃⲆⲆ[d] > 0 ? d : 0;
            }
            if (rf.unlock.ᐃᐃᐃⵠΔ[rf.ᐃᐃᐃⵠΔ] <= 0) {
                rf.ᐃᐃᐃⵠΔ = rf.unlock.ᐃᐃᐃⵠΔ[c] > 0 ? c : 0;
            }
            if (rf.unlock.ⲆΔΔⵠΔ[rf.ⲆΔΔⵠΔ] <= 0) {
                rf.ⲆΔΔⵠΔ = rf.unlock.ⲆΔΔⵠΔ[b] > 0 ? b : 0;
            }
            if (rf.unlock.ΔᐃΔⲆⵠ[rf.ΔᐃΔⲆⵠ] <= 0) {
                rf.ΔᐃΔⲆⵠ = rf.unlock.ΔᐃΔⲆⵠ[g] > 0 ? g : 0;
            }
            if (rf.unlock.ⲆⵠⲆΔⲆ[rf.ⲆⵠⲆΔⲆ] <= 0) {
                rf.ⲆⵠⲆΔⲆ = rf.unlock.ⲆⵠⲆΔⲆ[e] > 0 ? e : 0;
            }
        }
        function z(a) {
            if (D.ⵠΔᐃΔΔΔᐃ !== false) {
                q(x, da, "none");
                q(y, da, "none");
                w();
                if (D.ⲆᐃΔⵠⲆ !== a && D.ΔΔⵠΔΔ < 1) {
                    D.Δᐃᐃⵠᐃ.style.display = N === a || p === a || d === a || Q === a || m === a || C === a ? "inline-block" : "none";
                    q(D.ⲆᐃΔⵠⲆ, da, "none");
                    D.ⲆᐃΔⵠⲆ = a;
                    q(D.ⲆᐃΔⵠⲆ, ea, "inline-block");
                }
            }
        }
        function H(a) {
            if (Ww.ⲆⲆⵠⲆᐃΔΔ !== undefined && Ww.ᐃⲆⵠⲆᐃΔᐃ !== undefined && Ww.ⲆⵠⲆⵠⵠⲆᐃ !== undefined) {
                a();
            }
        }
        function K(a, b, c) {
            const d = new XMLHttpRequest();
            d.open("GET", a);
            d.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            d.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (b !== vk) {
                        b(d.responseText);
                    }
                } else if (this.readyState == 4 && c !== Go) {
                    c();
                }
            };
            d.send();
        }
        function U() {
            w();
            if (ff % 2) {
                console.log(pl);
                ⵠΔᐃᐃ.connect();
            } else {
                console.log(undefined);
                if (cj.Widget.isBlocked === 1) {
                    cj.Widget.createAdPlayer(ⵠΔᐃᐃ.connect.bind(ⵠΔᐃᐃ), ⵠΔᐃᐃ.connect.bind(ⵠΔᐃᐃ));
                } else {
                    cj.Widget.preroll();
                    cj.Widget.play = ⵠΔᐃᐃ.connect.bind(ⵠΔᐃᐃ);
                }
            }
        }
        this.ⵠⵠⵠⲆᐃⲆⲆ = 0;
        this.ᐃⵠⲆΔ = z;
        this.ⵠᐃᐃΔᐃⲆᐃ = function (b, a) {
            let c = 0;
            let d = "0";
            if (cx) {
                d = cx + "0";
            }
            if (Ww.ⲆⲆⵠⲆᐃΔΔ) {
                H(b);
            } else {
                K(`${xf}token?id=${d}`, function (d) {
                    if (c === 1) {
                        return;
                    }
                    const e = d.split("_");
                    const f = e[0] + "_";
                    const g = Number(e[1]);
                    const a = Math.abs(function (a) {
                        return eq(a, 8260, 46947, 8004, 37330, 5330);
                    }(g));
                    Ww.ⲆⲆⵠⲆᐃΔΔ = f + a;
                    H(b);
                }, function () {
                    if (c !== 1) {
                        if (a === 1) {
                            c = 1;
                            b();
                            return;
                        } else {
                            D.waiting = Gq;
                            return;
                        }
                    }
                });
            }
            K(`${Jf}get`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(Ew(g));
                Ww.ᐃⲆⵠⲆᐃΔᐃ = f + a;
                Ww.ΔⲆⲆᐃᐃⲆᐃ = a;
                H(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        D.waiting = Gq;
                        return;
                    }
                }
            });
            K(`${Jf}set`, function (d) {
                if (c === 1) {
                    return;
                }
                const e = d.split("_");
                const f = e[0] + "_";
                const g = Number(e[1]);
                const a = Math.abs(Aw(g));
                Ww.ⲆⵠⲆⵠⵠⲆᐃ = f + a;
                Ww.ΔⲆᐃⵠᐃⲆΔⵠⲆ = a;
                H(b);
            }, function () {
                if (c !== 1) {
                    if (a === 1) {
                        c = 1;
                        b();
                        return;
                    } else {
                        D.waiting = false;
                        return;
                    }
                }
            });
        };
        this.ⲆⲆⵠΔⵠΔΔ = function () {
            if (oj === D.waiting) {
                Ww.reconnect.enabled = false;
                D.waiting = true;
                D.ⵠᐃᐃΔᐃⲆᐃ(U);
            }
        };
        var X = 1;
        var Y = 2;
        var Z = 4;
        var _ = 8;
        var aa = 16;
        var ba = 32;
        var ca = 1;
        var da = 0;
        var ea = 1;
        if (cj.innerWidth < 1300) {
            this.ΔᐃⵠΔⵠ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ea,
                position: Z | X,
                view: N,
                translate: {
                    ⵠⵠΔΔⵠ: 200,
                    ᐃᐃᐃΔⲆ: 184,
                    x: 0,
                    y: 0
                }
            };
        } else {
            this.ΔᐃⵠΔⵠ = {
                id: document.getElementById("nickname_block"),
                style: document.getElementById("nickname_block").style,
                input: document.getElementById("nickname_input"),
                active: ea,
                position: Z | aa,
                view: N,
                translate: {
                    x: 0,
                    ᐃᐃᐃΔⲆ: 184,
                    ⵠⵠΔΔⵠ: -180,
                    y: 0
                }
            };
        }
        this.ΔᐃⵠΔⵠ.id.addEventListener("keyup", function (a) {
            a.preventDefault();
            if (a.keyCode == 13 && !D.waiting && !D.ᐃΔⵠⵠΔⵠᐃᐃⵠ) {
                D.ⲆⲆⵠΔⵠΔΔ();
            }
        });
        this.ΔᐃⵠΔⵠ.input.value = ᐃⵠΔᐃ.get("starve_nickname") ? ᐃⵠΔᐃ.get("starve_nickname") : "";
        this.ΔΔΔᐃᐃᐃᐃᐃⵠ = {
            id: document.getElementById("account_nickname_block"),
            style: document.getElementById("account_nickname_block").style,
            input: document.getElementById("account_nickname_input"),
            active: da,
            position: Z | aa,
            view: d,
            translate: {
                x: 0,
                ᐃᐃᐃΔⲆ: 110,
                y: 0,
                ⵠⵠΔΔⵠ: -122
            }
        };
        if (cj.innerWidth < 1300) {
            this.ΔΔⲆⵠΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ea,
                position: Z | X,
                view: N,
                translate: {
                    ⵠⵠΔΔⵠ: 208,
                    y: 0,
                    x: 0,
                    ᐃᐃᐃΔⲆ: 225
                }
            };
        } else {
            this.ΔΔⲆⵠΔ = {
                id: document.getElementById("servselect"),
                style: document.getElementById("servselect").style,
                active: ea,
                position: Z | aa,
                view: N,
                translate: {
                    ⵠⵠΔΔⵠ: -180,
                    y: 0,
                    x: 0,
                    ᐃᐃᐃΔⲆ: 225
                }
            };
        }
        this.ᐃⵠⵠΔ = {
            id: document.getElementById("leaderboard"),
            style: document.getElementById("leaderboard").style,
            active: da,
            position: Z | aa,
            view: Q,
            translate: {
                ᐃᐃᐃΔⲆ: 190,
                ⵠⵠΔΔⵠ: -294.5,
                y: 0,
                x: 0
            }
        };
        this.ⵠⲆᐃᐃᐃⲆⲆⲆΔ = {
            id: document.getElementById("stats_box"),
            style: document.getElementById("stats_box").style,
            active: da,
            position: Z | aa,
            view: d,
            translate: {
                ⵠⵠΔΔⵠ: 125,
                x: 0,
                y: 0,
                ᐃᐃᐃΔⲆ: 187
            }
        };
        this.ΔⲆⲆⵠᐃⵠⲆΔΔ = {
            id: document.getElementById("serverAddressBlock"),
            style: document.getElementById("serverAddressBlock").style,
            input: document.getElementById("serverAddressInput"),
            active: da,
            position: Z | aa,
            view: W,
            translate: {
                x: 0,
                ᐃᐃᐃΔⲆ: 350,
                y: 0,
                ⵠⵠΔΔⵠ: -220
            }
        };
        b = 0;
        this.ⲆⵠᐃΔⲆ = [];
        this.ⲆⵠᐃΔⲆ[b++] = this.ΔᐃⵠΔⵠ;
        this.ⲆⵠᐃΔⲆ[b++] = this.ΔΔⲆⵠΔ;
        this.ⲆⵠᐃΔⲆ[b++] = this.ᐃⵠⵠΔ;
        this.ⲆⵠᐃΔⲆ[b++] = this.ΔΔΔᐃᐃᐃᐃᐃⵠ;
        this.ⲆⵠᐃΔⲆ[b++] = this.ⵠⲆᐃᐃᐃⲆⲆⲆΔ;
        this.ⲆⵠᐃΔⲆ[b++] = this.ΔⲆⲆⵠᐃⵠⲆΔΔ;
        b = 0;
        this.ⵠΔⵠⵠ = [];
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ᐃⵠᐃᐃⵠΔⵠ, ea, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.Δᐃⵠⵠⵠⵠⵠ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⵠⵠⲆⲆⵠΔΔ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔⵠⲆᐃⲆⲆⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆΔᐃⵠΔⵠⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆᐃⲆⲆΔΔΔ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆᐃᐃΔⵠⵠᐃ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⵠᐃⵠᐃΔᐃᐃ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆΔⵠⲆⵠΔⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔⵠⵠⵠΔᐃⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔΔᐃᐃⲆⲆⵠ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆΔⲆᐃⵠⲆⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔⵠᐃᐃⵠᐃⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⵠΔⲆⵠΔⵠΔ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ᐃⲆᐃᐃᐃⲆΔ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ᐃⵠⲆⵠⵠΔⲆ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔⵠΔⵠⲆⵠᐃ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ⲆⲆΔᐃⵠΔΔ, da, 0, 0, X);
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔΔⵠΔΔΔⵠ, da, 0, 0, X);
        if (cj.innerWidth < 1300) {
            this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⵠᐃᐃΔⲆΔ, ea, 200, 100, Z | X);
        } else {
            this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⵠᐃᐃΔⲆΔ, ea, -753 / 4, 100, Z | aa);
        }
        this.ⵠΔⵠⵠ[b++].view = N;
        this.ⵠΔⵠⵠ[b++] = Rv(ⵠⵠ.ΔΔⵠⵠⲆᐃᐃ, ea, 403, -10, Y);
        if (cj.innerWidth > 1300) {
            this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ᐃⲆᐃⵠⲆⲆⵠ, ea, -885 / 4, -159.5, _ | aa);
            this.ⵠΔⵠⵠ[b++].view = N;
        }
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⲆᐃᐃΔΔⵠ, da, -323.25, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = d;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆΔⵠΔΔⵠⲆ, da, -1425 / 4, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = m;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆΔⲆⲆΔⵠⵠ, da, -905 / 4, 50, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = v;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⲆᐃΔᐃᐃⵠ, da, -402, 130, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = p;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠᐃⲆⵠΔⵠⲆ, da, -279.25, 130, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = G;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⲆⲆⲆⲆⲆⵠ, da, -305.5, 130, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = L;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆΔⲆΔᐃᐃⵠ, da, -1222 / 4, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = W;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ᐃΔⵠᐃⵠΔⲆ, da, -ⵠⵠ.ᐃΔⵠᐃⵠΔⲆ.width / 4 - 350, -15, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = O;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⵠᐃᐃᐃΔⲆ, da, -1497 / 4, 110, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = C;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ΔᐃᐃΔΔⵠⲆ, da, -1226 / 4, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = Q;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⵠⵠⵠΔΔⵠ, da, -1381 / 4, 80, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = f;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⵠⲆᐃⲆⵠⲆ, da, -385.5, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = T;
        var fa = 360 / 100;
        var ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#25c5d6", fa * 3], ["#e2cf27", fa * 10], ["#afac98", fa * 30], ["#d88e23", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = T;
        this.ⵠⲆⲆᐃⵠᐃᐃⲆᐃ = function (b, c, d) {
            var e;
            D.ΔΔⵠΔΔ = 1;
            D.ⲆⵠᐃⲆᐃΔⵠ = 0;
            D.ᐃⵠⵠⵠΔΔΔ = 0;
            D.ᐃΔⲆΔᐃⲆΔ = b;
            D.ΔᐃⵠⲆΔⵠΔ = c;
            var f = 0;
            if (c === 0) {
                for (f = 0; f < ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ.length && ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[f].id !== d; f++);
                e = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ[f];
                D.unlock.ⲆΔⲆΔ[f] = 1;
            } else if (c === 1) {
                for (f = 0; ᐃⲆᐃΔ.ⵠΔᐃΔⲆ.length > f && ᐃⲆᐃΔ.ⵠΔᐃΔⲆ[f].id !== d; f++);
                e = ᐃⲆᐃΔ.ⵠΔᐃΔⲆ[f];
                D.unlock.ΔᐃΔⲆⵠ[f] = 1;
            } else if (c === 2) {
                for (f = 0; ᐃⲆᐃΔ.ⲆΔⲆⲆ.length > f && ᐃⲆᐃΔ.ⲆΔⲆⲆ[f].id !== d; f++);
                e = ᐃⲆᐃΔ.ⲆΔⲆⲆ[f];
                D.unlock.ⲆⵠⲆΔⲆ[f] = 1;
            } else if (c === 3) {
                for (f = 0; ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ.length > f && ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ[f].id !== d; f++);
                e = ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ[f];
                D.unlock.ᐃⲆᐃⲆⲆ[f] = 1;
            } else if (c === 4) {
                for (f = 0; f < ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ.length && d !== ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ[f].id; f++);
                e = ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ[f];
                D.unlock.ⲆΔΔⵠΔ[f] = 1;
                D.unlock.ᐃᐃᐃⵠΔ[f] = 1;
            }
            D.ⵠⵠΔⵠΔᐃᐃ = f;
            D.ⵠᐃⲆΔᐃΔΔ = Ov("by " + e.ᐃᐃᐃ, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, Cq, Hq, "#000000", 24);
            D.ᐃΔΔᐃᐃᐃᐃ = Ov(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, Lk, "#000000", 20);
        };
        this.ΔΔⵠΔΔ = 0;
        this.ⲆⵠᐃⲆᐃΔⵠ = 0;
        this.ᐃΔⲆΔᐃⲆΔ = 0;
        this.ΔᐃⵠⲆΔⵠΔ = 0;
        this.ᐃⵠⵠⵠΔΔΔ = 0;
        this.ⵠᐃⲆΔᐃΔΔ = undefined;
        this.ᐃΔΔᐃᐃᐃᐃ = undefined;
        var ia = 197;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⲆⲆⵠᐃΔᐃ, da, -1542 / 4, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = J;
        ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#d45ce5", fa * 3], ["#25c5d6", fa * 10], ["#e2cf27", fa * 30], ["#afac98", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = J;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ΔΔⵠΔⵠΔΔ, da, -385.5, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = A;
        ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#d33a2a", fa * 3], ["#d45ce5", fa * 10], ["#25c5d6", fa * 30], ["#e2cf27", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = A;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⵠⲆⲆⲆⲆⵠ, da, -385.5, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = k;
        ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#25c5d6", fa * 3], ["#e2cf27", fa * 10], ["#afac98", fa * 30], ["#d88e23", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = k;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆΔΔⲆⲆⵠⵠ, da, -1542 / 4, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = P;
        ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#d45ce5", fa * 3], ["#25c5d6", fa * 10], ["#e2cf27", fa * 30], ["#afac98", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = P;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.Δⵠᐃⵠᐃᐃᐃ, da, -1542 / 4, 150, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = M;
        ha = this.ⵠᐃᐃⲆΔⲆᐃ([["#d33a2a", fa * 3], ["#d45ce5", fa * 10], ["#25c5d6", fa * 30], ["#e2cf27", fa * 57]]);
        this.ⵠΔⵠⵠ[b] = Rv(ha, da, -ha.width / 4, 178, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = M;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⲆᐃᐃⲆΔⲆ, da, -341.5, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = B;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆᐃᐃᐃᐃᐃΔ, da, -1366 / 4, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = V;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⵠᐃΔⲆᐃᐃ, da, -341.5, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = I;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⲆᐃΔᐃΔⲆ, da, -1366 / 4, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = S;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⲆᐃᐃⵠⲆⵠ, da, -341.5, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = E;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆⲆⵠⲆΔΔᐃ, da, -341.5, 100, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = F;
        ⵠⲆΔⵠΔᐃⵠ = b++;
        this.ⵠΔⵠⵠ[ⵠⲆΔⵠΔᐃⵠ] = Rv(ⵠⵠ.ⵠⲆΔⵠΔᐃⵠ, da, 484, 0, Z);
        ⲆᐃΔⵠⲆⵠⲆ = b++;
        this.ⵠΔⵠⵠ[ⲆᐃΔⵠⲆⵠⲆ] = Rv(ⵠⵠ.ⲆᐃΔⵠⲆⵠⲆ, da, 812.5, 0, Z);
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ΔΔⵠΔⲆⵠⵠ, da, -758 / 4, -5, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = y;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⵠⵠΔΔⵠⵠⵠ, da, -189.5, -5, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = x;
        ⵠⵠⵠΔΔᐃΔ = b++;
        this.ⵠΔⵠⵠ[ⵠⵠⵠΔΔᐃΔ] = Rv(ⵠⵠ.ⵠΔⲆⲆΔⵠⵠ, ea, 93, 30, Z);
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ΔⵠⲆᐃᐃᐃⲆ, da, -173, 110, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = R;
        this.ⵠΔⵠⵠ[b] = Rv(ⵠⵠ.ⲆΔⵠΔΔΔⲆ, da, -173, 110, Z | aa);
        this.ⵠΔⵠⵠ[b++].view = j;
        b = 0;
        this.buttons = [];
        this.buttons[b] = Sv(50, 57, 0, [ⵠⵠ.ΔΔΔⲆⲆᐃⵠ, ⵠⵠ.ΔᐃⵠⵠⲆΔⵠ, ⵠⵠ.ⲆᐃΔΔΔⵠⲆ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                z(f);
            } else {
                z(v);
            }
        }, 320, 0, X, ea);
        b++;
        if (cj.innerWidth < 1300) {
            this.buttons[b] = Sv(202, 97, 0, [ⵠⵠ.ΔⲆΔΔⲆΔⲆ, ⵠⵠ.ΔⵠⵠⵠⵠⲆⲆ, ⵠⵠ.ᐃⵠᐃⲆΔΔᐃ], 1, 0, this.ⲆⲆⵠΔⵠΔΔ, 462, 235, Z | X, ea);
        } else {
            this.buttons[b] = Sv(202, 97, 0, [ⵠⵠ.ΔⲆΔΔⲆΔⲆ, ⵠⵠ.ΔⵠⵠⵠⵠⲆⲆ, ⵠⵠ.ᐃⵠᐃⲆΔΔᐃ], 1, 0, this.ⲆⲆⵠΔⵠΔΔ, 74, 235, Z | aa, ea);
        }
        this.buttons[b].view = N;
        b++;
        if (cj.innerWidth > 1300) {
            this.buttons[b] = Sv(355, 168, 0, [ⵠⵠ.ⵠΔᐃⲆᐃᐃΔ, ⵠⵠ.ⵠΔᐃⲆᐃᐃΔ, ⵠⵠ.ⵠΔᐃⲆᐃᐃΔ], 1, 0, function () {
                cj.open("./changelog.html", "_blank");
            }, -195, -115, _ | aa, ea);
            this.buttons[b++].view = N;
            this.buttons[b] = Sv(355, 168, 0, [ⵠⵠ.ⵠΔⵠᐃᐃⲆⵠ, ⵠⵠ.ⵠΔⵠᐃᐃⲆⵠ, ⵠⵠ.ⵠΔⵠᐃᐃⲆⵠ], 1, 0, function () {
                cj.open("https://taming.io", "_blank");
            }, 20, -115, _ | aa, ea);
            this.buttons[b++].view = N;
        }
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ⵠⵠΔⵠᐃΔⲆ, ⵠⵠ.ΔⵠⲆΔⲆΔᐃ, ⵠⵠ.ᐃⵠⵠⲆⵠΔⲆ], 1, 0, function () {
            cj.open("https://lapamauve.creator-spring.com/", "_blank");
        }, 380, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ⵠΔᐃᐃΔΔᐃ, ⵠⵠ.ⵠᐃⵠΔⲆⵠΔ, ⵠⵠ.ⵠⲆΔⵠⲆⲆⲆ], 1, 0, function () {
            cj.open("https://discord.gg/starveio", "_blank");
        }, 330, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ⵠᐃΔⵠᐃᐃΔ, ⵠⵠ.Δⵠⵠᐃᐃᐃᐃ, ⵠⵠ.ᐃΔⲆⲆᐃᐃⵠ], 1, 0, function () {
            cj.open("https://reddit.com/r/starveio", "_blank");
        }, 280, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ⵠⵠΔⲆⵠⲆᐃ, ⵠⵠ.ⵠΔᐃⵠΔⵠⵠ, ⵠⵠ.ⵠⵠⲆⲆⲆⵠΔ], 1, 0, function () {
            cj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, 230, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ΔᐃⵠⵠΔⲆⵠ, ⵠⵠ.ᐃⵠᐃΔΔᐃⵠ, ⵠⵠ.ⵠⵠᐃᐃᐃΔⵠ], 1, 0, function () {
            cj.open("https://www.facebook.com/LapaMauve/", "_blank");
        }, 155, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ⲆⵠᐃⲆᐃᐃᐃ, ⵠⵠ.ⲆᐃΔΔⵠⲆⵠ, ⵠⵠ.ΔⲆⵠⵠⵠⲆⲆ], 1, 0, function () {
            cj.open("https://twitter.com/lapamauve", "_blank");
        }, 105, 10, Y, ea);
        this.buttons[b++] = Sv(80, 80, 0, [ⵠⵠ.ᐃⵠΔⵠⲆⲆᐃ, ⵠⵠ.ᐃΔᐃⵠΔⲆΔ, ⵠⵠ.ᐃΔⵠⵠⵠᐃⵠ], 1, 0, function () {
            cj.open("https://www.youtube.com/@lapamauveofficial", "_blank");
        }, 55, 10, Y, ea);
        ΔᐃΔⵠⵠᐃᐃ = b++;
        this.buttons[ΔᐃΔⵠⵠᐃᐃ] = Sv(232, 142, 0, [ⵠⵠ.ᐃᐃΔⲆΔΔⲆ, ⵠⵠ.ᐃᐃⵠⲆΔᐃᐃ, ⵠⵠ.ΔΔᐃᐃⲆⲆᐃ], 1, 0, function () {
            z(Q);
            Xf(rf.ⵠΔⵠⵠᐃⵠᐃ, rf.ⵠⵠⵠΔΔⲆΔ, rf.Δⵠᐃⵠⵠⵠᐃ, rf.ΔⵠΔΔᐃᐃⵠ);
        }, -5, 573, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ, ⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ, ⵠⵠ.ΔⵠⲆⵠⲆⵠⵠ], 1, ca, function () {
            z(Q);
        }, -5, 566, X, ea);
        ᐃⲆⵠⵠⲆΔΔ = b++;
        this.buttons[ᐃⲆⵠⵠⲆΔΔ] = Sv(236, 165, 0, [ⵠⵠ.ⵠⵠΔΔᐃⵠⲆ, ⵠⵠ.ⵠⲆⲆᐃⲆⵠⲆ, ⵠⵠ.ΔΔᐃᐃⲆΔΔ], 1, 0, function () {
            z(C);
        }, -5, 494, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ΔⵠΔΔΔⵠⵠ, ⵠⵠ.ΔⵠΔΔΔⵠⵠ, ⵠⵠ.ΔⵠΔΔΔⵠⵠ], 1, ca, function () {
            z(C);
        }, -5, 494, X, ea);
        ᐃⲆⲆⵠⵠⲆᐃ = b++;
        this.buttons[ᐃⲆⲆⵠⵠⲆᐃ] = Sv(236, 165, 0, [ⵠⵠ.ⵠⵠΔΔᐃⵠⲆ, ⵠⵠ.ⵠⲆⲆᐃⲆⵠⲆ, ⵠⵠ.ΔΔᐃᐃⲆΔΔ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                if (rf.ⵠⵠΔᐃΔⵠⲆ - Date.now() > 0) {
                    z(W);
                } else {
                    z(G);
                }
            } else {
                z(v);
            }
        }, -5, 415, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ⵠⲆⵠΔⵠⲆⵠ, ⵠⵠ.ⵠⲆⵠΔⵠⲆⵠ, ⵠⵠ.ⵠⲆⵠΔⵠⲆⵠ], 1, ca, function () {
            if (D.ΔⵠΔⲆΔ()) {
                if (rf.ⵠⵠΔᐃΔⵠⲆ - Date.now() > 0) {
                    z(W);
                } else {
                    z(G);
                }
            } else {
                z(v);
            }
        }, -5, 415, X, ea);
        ΔᐃⵠΔⲆᐃⵠ = b++;
        this.buttons[ΔᐃⵠΔⲆᐃⵠ] = Sv(236, 165, 0, [ⵠⵠ.ⵠⵠΔΔᐃⵠⲆ, ⵠⵠ.ⵠⲆⲆᐃⲆⵠⲆ, ⵠⵠ.ΔΔᐃᐃⲆΔΔ], 1, 0, function () {
            z(p);
        }, -5, 336, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ⵠΔⲆᐃⵠᐃⵠ, ⵠⵠ.ⵠΔⲆᐃⵠᐃⵠ, ⵠⵠ.ⵠΔⲆᐃⵠᐃⵠ], 1, ca, function () {
            z(p);
        }, -5, 336, X, ea);
        ⲆΔⵠⵠⲆⲆⲆ = b++;
        this.buttons[ⲆΔⵠⵠⲆⲆⲆ] = Sv(236, 165, 0, [ⵠⵠ.ⵠⵠΔΔᐃⵠⲆ, ⵠⵠ.ⵠⲆⲆᐃⲆⵠⲆ, ⵠⵠ.ΔΔᐃᐃⲆΔΔ], 1, 0, function () {
            z(m);
        }, -5, 257, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ⲆΔᐃᐃⲆⵠⵠ, ⵠⵠ.ⲆΔᐃᐃⲆⵠⵠ, ⵠⵠ.ⲆΔᐃᐃⲆⵠⵠ], 1, ca, function () {
            z(m);
        }, -5, 257, X, ea);
        ⵠᐃΔⲆⵠᐃⲆ = b++;
        this.buttons[ⵠᐃΔⲆⵠᐃⲆ] = Sv(236, 165, 0, [ⵠⵠ.ⵠⵠΔΔᐃⵠⲆ, ⵠⵠ.ⵠⲆⲆᐃⲆⵠⲆ, ⵠⵠ.ΔΔᐃᐃⲆΔΔ], 1, 0, function () {
            z(N);
        }, -5, 178, X, ea);
        this.buttons[b++] = Sv(236, 165, 0, [ⵠⵠ.ⲆᐃⵠᐃⵠⵠΔ, ⵠⵠ.ⲆᐃⵠᐃⵠⵠΔ, ⵠⵠ.ⲆᐃⵠᐃⵠⵠΔ], 1, ca, function () {
            z(N);
        }, -5, 178, X, ea);
        ᐃᐃᐃⵠⲆᐃᐃ = b++;
        this.ᐃᐃᐃⵠⲆᐃᐃ = ᐃᐃᐃⵠⲆᐃᐃ;
        this.buttons[ᐃᐃᐃⵠⲆᐃᐃ] = Sv(324, 222, 0, [ⵠⵠ.ΔⵠᐃⲆΔΔⲆ, ⵠⵠ.ⵠⵠᐃⵠᐃⲆⵠ, ⵠⵠ.ΔⵠⲆᐃᐃⲆᐃ], 1, 0, function () {
            z(v);
        }, 0, 70, X, ea);
        ⲆⵠᐃⵠⵠⵠΔ = b++;
        ⵠⵠᐃᐃΔΔΔ = b++;
        this.ⲆⵠᐃⵠⵠⵠΔ = ⲆⵠᐃⵠⵠⵠΔ;
        this.ⵠⵠᐃᐃΔΔΔ = ⵠⵠᐃᐃΔΔΔ;
        this.buttons[ⲆⵠᐃⵠⵠⵠΔ] = Sv(324, 222, 0, [ⵠⵠ.ΔⲆΔⵠⵠᐃΔ, ⵠⵠ.ΔΔⵠΔⲆⲆΔ, ⵠⵠ.ᐃᐃⲆᐃΔᐃⲆ], 1, 0, function () {
            z(d);
            pa(-1);
        }, 0, 70, X, da);
        this.buttons[ⵠⵠᐃᐃΔΔΔ] = Sv(324, 222, 0, [ⵠⵠ.ⲆΔⲆⵠⲆⲆΔ, ⵠⵠ.ⲆΔⲆⵠⲆⲆΔ, ⵠⵠ.ⲆΔⲆⵠⲆⲆΔ], 1, ca, function () {
            z(d);
            pa(-1);
        }, 0, 70, X, da);
        if (ⵠΔᐃᐃ.ⲆᐃᐃᐃΔΔᐃ === 0) {
            var ja = b++;
            if (cj.innerWidth < 1300) {
                this.buttons[ja] = Sv(266, 176, 0, [ⵠⵠ.ΔⵠᐃΔᐃⲆΔ, ⵠⵠ.ⵠⵠΔⲆⵠⵠᐃ, ⵠⵠ.ᐃΔΔΔΔⵠⲆ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆⲆⲆⵠⵠ);
                }, 150, 300, X | Z, ea);
            } else {
                this.buttons[ja] = Sv(266, 176, 0, [ⵠⵠ.ΔⵠᐃΔᐃⲆΔ, ⵠⵠ.ⵠⵠΔⲆⵠⵠᐃ, ⵠⵠ.ᐃΔΔΔΔⵠⲆ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆⲆⲆⵠⵠ);
                }, -340, 100, aa | Z, ea);
            }
            this.buttons[ja].view = N;
            this.buttons[ja].hint = 0;
            var ka = b++;
            if (cj.innerWidth < 1300) {
                this.buttons[ka] = Sv(266, 176, 0, [ⵠⵠ.ᐃᐃΔⲆⵠᐃᐃ, ⵠⵠ.ⲆⲆΔᐃᐃⲆⲆ, ⵠⵠ.ΔΔⲆᐃᐃⲆᐃ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆΔᐃⲆᐃ);
                }, 150, 400, X | Z, ea);
            } else {
                this.buttons[ka] = Sv(266, 176, 0, [ⵠⵠ.ᐃᐃΔⲆⵠᐃᐃ, ⵠⵠ.ⲆⲆΔᐃᐃⲆⲆ, ⵠⵠ.ΔΔⲆᐃᐃⲆᐃ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆΔᐃⲆᐃ);
                }, -340, 200, aa | Z, ea);
            }
            this.buttons[ka].view = N;
            this.buttons[ka].hint = 0;
            var la = b++;
            if (cj.innerWidth < 1300) {
                this.buttons[la] = Sv(266, 176, 0, [ⵠⵠ.ⵠⲆᐃᐃⵠᐃᐃ, ⵠⵠ.ΔⵠⲆⲆⲆᐃΔ, ⵠⵠ.ⲆⲆⲆᐃᐃⵠⲆ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ΔⵠⵠᐃΔ);
                }, 450, 300, X | Z, ea);
            } else {
                this.buttons[la] = Sv(266, 176, 0, [ⵠⵠ.ⵠⲆᐃᐃⵠᐃᐃ, ⵠⵠ.ΔⵠⲆⲆⲆᐃΔ, ⵠⵠ.ⲆⲆⲆᐃᐃⵠⲆ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ΔⵠⵠᐃΔ);
                }, -340, 300, aa | Z, ea);
            }
            this.buttons[la].view = N;
            this.buttons[la].hint = 0;
            var ma = b++;
            if (cj.innerWidth < 1300) {
                this.buttons[ma] = Sv(266, 176, 0, [ⵠⵠ.ΔΔᐃΔΔΔⲆ, ⵠⵠ.ⵠⵠᐃΔᐃⵠⵠ, ⵠⵠ.ⲆᐃᐃⲆⲆΔⵠ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆⵠΔΔᐃ);
                }, 300, 300, X | Z, ea);
            } else {
                this.buttons[ma] = Sv(266, 176, 0, [ⵠⵠ.ΔΔᐃΔΔΔⲆ, ⵠⵠ.ⵠⵠᐃΔᐃⵠⵠ, ⵠⵠ.ⲆᐃᐃⲆⲆΔⵠ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆⵠΔΔᐃ);
                }, 204, 100, aa | Z, ea);
            }
            this.buttons[ma].view = N;
            this.buttons[ma].hint = 0;
            var na = b++;
            if (cj.innerWidth < 1300) {
                this.buttons[na] = Sv(266, 176, 0, [ⵠⵠ.ⲆΔᐃⲆⵠΔⲆ, ⵠⵠ.ᐃΔⲆᐃᐃΔⵠ, ⵠⵠ.ⲆᐃⵠΔᐃⲆᐃ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ᐃⲆⵠⲆΔ);
                }, 300, 400, X | Z, ea);
            } else {
                this.buttons[na] = Sv(266, 176, 0, [ⵠⵠ.ⲆΔᐃⲆⵠΔⲆ, ⵠⵠ.ᐃΔⲆᐃᐃΔⵠ, ⵠⵠ.ⲆᐃⵠΔᐃⲆᐃ], 1, 0, function () {
                    ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ᐃⲆⵠⲆΔ);
                }, 204, 200, aa | Z, ea);
            }
            this.buttons[na].view = N;
            this.buttons[na].hint = 0;
            var oa = b++;
            this.buttons[oa] = Sv(266, 176, 0, [ⵠⵠ.ᐃᐃⲆⲆᐃⵠⲆ, ⵠⵠ.ⲆⵠΔΔⵠᐃΔ, ⵠⵠ.ⲆᐃᐃᐃΔΔⵠ], 1, 0, function () {
                ⵠΔᐃᐃ.ΔⲆᐃᐃΔ(ew.ⲆΔⲆΔᐃ);
            }, cj.innerWidth < 1300 ? 450 : 204, cj.innerWidth < 1300 ? 400 : 300, (cj.innerWidth < 1300 ? X : aa) | Z, ea);
            this.buttons[oa].view = N;
            this.buttons[oa].hint = 0;
        }
        function pa(b, c) {
            if (c !== undefined) {
                rf.ⲆΔⲆᐃᐃⲆⲆ = c;
                var d = rf.ⵠⲆⵠⵠᐃᐃΔ[c];
                rf.ⵠⲆⲆΔΔ = d.score;
                rf.ᐃⵠⵠΔⵠ = d.kill;
                rf.ΔᐃⲆᐃⵠΔⲆ = d.death;
                rf.time = d.time;
                rf.ᐃⵠⵠⲆⲆⲆⵠ = d.bestScore;
                rf.ΔⲆⲆⲆᐃⲆⲆ = d.bestKill;
                rf.ᐃⲆⵠⲆᐃⵠΔ = d.bestTime;
                rf.ᐃⲆᐃᐃΔΔⲆ = d.scoreTotal;
            }
            if (b === wh) {
                b = rf.ᐃⲆⲆΔⵠᐃᐃ;
            }
            rf.ᐃⲆⲆΔⵠᐃᐃ = b;
            if (b >= 0) {
                document.getElementById("stats_box_time").innerHTML = rf.ᐃⲆⵠⲆᐃⵠΔ[b];
                document.getElementById("stats_box_kill").innerHTML = rf.ΔⲆⲆⲆᐃⲆⲆ[b];
                document.getElementById("stats_box_score").innerHTML = rf.ᐃⵠⵠⲆⲆⲆⵠ[b];
            } else {
                var f = 0;
                for (var g = 0; rf.ᐃⵠⵠΔⵠ.length > g; g++) {
                    f += rf.ᐃⵠⵠΔⵠ[g];
                }
                var h = 0;
                for (g = 0; g < rf.time.length; g++) {
                    h += rf.time[g];
                }
                document.getElementById("stats_box_time").innerHTML = h;
                document.getElementById("stats_box_kill").innerHTML = f;
                document.getElementById("stats_box_score").innerHTML = rf.ⵠⲆⲆΔΔ;
            }
        }
        this.buttons[b] = Sv(87, 78, 0, [ⵠⵠ.ⲆᐃⵠΔΔᐃᐃ, ⵠⵠ.ⵠⵠⵠᐃⵠᐃⲆ, ⵠⵠ.ⵠⵠⲆⲆᐃᐃᐃ], 1, 0, function () {
            rf.ᐃⵠᐃⵠᐃⵠⲆᐃᐃ();
            if (rf.ΔᐃΔΔΔᐃᐃ === 0) {
                z(j);
            } else {
                z(R);
            }
        }, 127, 110, aa | Z, da);
        this.buttons[b++].view = d;
        this.buttons[b] = Sv(87, 78, 0, [ⵠⵠ.ⲆⲆⵠⵠⲆᐃⲆ, ⵠⵠ.ⲆΔⲆΔΔⲆᐃ, ⵠⵠ.ⵠᐃⵠⵠⵠᐃΔ], 1, 0, function () {
            const a = cj.document.createElement("textarea");
            a.value = cx;
            cj.document.body.appendChild(a);
            a.select();
            cj.document.execCommand("copy");
            cj.document.body.removeChild(a);
        }, 182, 110, aa | Z, da);
        this.buttons[b++].view = d;
        this.buttons[b] = Sv(87, 78, 0, [ⵠⵠ.ᐃᐃⲆⲆⲆΔΔ, ⵠⵠ.ᐃⲆⵠⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃΔⲆΔⲆ], 1, 0, function () {
            (function () {
                if (Ef === Bf && cj.FB && cj.FB.getUserID()) {
                    cj.FB.logout();
                }
                if (Ef === Mf && fx !== undefined) {
                    cj.gapi.auth2.getAuthInstance().signOut();
                    fx = Go;
                }
                cx = undefined;
                bx = undefined;
                Ef = undefined;
                rf.ⵠⵠⵠⲆⲆ = 0;
                rf.ΔⵠⲆⲆΔ = 0;
                rf.ⵠⲆⲆΔΔ = 0;
                rf.ΔᐃⵠⲆⲆⵠΔ();
                ⵠⲆⲆΔᐃᐃΔΔⵠ();
            })();
        }, 255, 110, aa | Z, da);
        this.buttons[b++].view = d;
        this.buttons[b] = Sv(58, 64, 0, [ⵠⵠ.ⲆⲆᐃᐃᐃΔⲆ, ⵠⵠ.ⵠΔⲆⵠΔⵠⵠ, ⵠⵠ.ᐃⵠᐃΔⲆⲆⲆ], 1, 0, function () {
            z(N);
        }, 189, 118, aa | Z, da);
        this.buttons[b++].view = v;
        this.buttons[b] = Sv(497, 72, 0, [ⵠⵠ.ΔⲆⲆⲆᐃⲆᐃ, ⵠⵠ.ΔᐃⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⲆΔⲆΔⵠΔ], 1, 0, function () {
            (function () {
                if (Wv) {
                    bx = ΔᐃⲆᐃ.ⲆⵠᐃΔΔⲆⲆ(40);
                    Ef = Df;
                    cx = Wv.userId;
                    cj.ⲆᐃΔΔⲆⲆⲆ();
                    return;
                }
                cj.gapi.auth2.getAuthInstance().signIn();
            })();
        }, -130, 390, aa | Z, da);
        this.buttons[b++].view = v;
        this.buttons[b] = Sv(497, 72, 0, [ⵠⵠ.ⵠΔᐃⵠᐃⵠⵠ, ⵠⵠ.ΔⲆΔⵠᐃΔΔ, ⵠⵠ.ⲆⲆΔⵠΔΔΔ], 1, 0, function () {
            cj.FB.login(function (a) {
                if (a.authResponse) {
                    cj.FB.api("/me", function (a) {
                        Ef = Bf;
                        bx = cj.FB.getAuthResponse().accessToken;
                        Hf();
                        cj.ⲆᐃΔΔⲆⲆⲆ();
                    });
                }
            });
        }, -130, 430, aa | Z, da);
        this.buttons[b++].view = v;
        ΔᐃⲆΔᐃⲆΔ = 20000;
        this.ΔⲆΔⵠⲆⲆᐃ = function (a) {
            var b = rf.ⵠⵠᐃΔⲆᐃⵠ(a);
            var c = ΔᐃⲆΔᐃⲆΔ * (b * b);
            return (a -= c) / ((b + 1) * (b + 1) * ΔᐃⲆΔᐃⲆΔ - c);
        };
        this.ⵠⵠᐃΔⲆᐃⵠ = function (a) {
            return Math.floor(Math.sqrt(a / ΔᐃⲆΔᐃⲆΔ));
        };
        this.ⲆΔΔⲆⵠΔⵠΔⵠ = function (a) {
            rf.Δⵠⵠᐃᐃ = rf.ⵠⵠᐃΔⲆᐃⵠ(a);
            rf.ⵠΔᐃᐃⲆΔᐃ = rf.ΔⲆΔⵠⲆⲆᐃ(a);
            rf.ᐃΔⵠᐃΔᐃⲆ = 0;
            rf.ⵠⲆⲆΔΔ = a;
        };
        this.ᐃᐃΔᐃⵠΔⵠⲆΔ = function (a) {
            rf.buttons[rf.ᐃᐃᐃⵠⲆᐃᐃ].info.active = 0;
            rf.buttons[rf.ⲆⵠᐃⵠⵠⵠΔ].info.active = 1;
            rf.buttons[rf.ⵠⵠᐃᐃΔΔΔ].info.active = 1;
            n();
            if (a.name.indexOf("Starver#") === -1) {
                document.getElementById("account_nickname_input").value = cj.decodeURIComponent(cj.escape(cj.atob(a.name)));
            } else {
                document.getElementById("account_nickname_input").value = a.name;
            }
            rf.ΔⵠⲆⲆΔ = a.bread;
            var b = a.seasons;
            var c = b[b.length - 1];
            rf.ⵠⲆⵠⵠᐃᐃΔ = b;
            D.ⲆΔΔⲆⵠΔⵠΔⵠ(c.score);
            rf.ⵠⲆⲆΔΔ = c.score;
            rf.ᐃⵠⵠΔⵠ = c.kill;
            rf.ΔᐃⲆᐃⵠΔⲆ = c.death;
            rf.time = c.time;
            rf.ᐃⵠⵠⲆⲆⲆⵠ = c.bestScore;
            rf.ΔⲆⲆⲆᐃⲆⲆ = c.bestKill;
            rf.ᐃⲆⵠⲆᐃⵠΔ = c.bestTime;
            rf.ᐃⲆᐃᐃΔΔⲆ = c.scoreTotal;
            rf.ΔᐃΔΔΔᐃᐃ = a.firstName;
            document.getElementById("serverAddressInput").value = a.privateServerRegion + " : " + a.privateServer;
            if (rf.ΔᐃΔΔΔᐃᐃ === undefined) {
                rf.ΔᐃΔΔΔᐃᐃ = 0;
            }
            rf.ⵠⵠΔᐃΔⵠⲆ = Date.now() + a.privateServerTime;
            if (Number(a.privateServerTime) > 0) {
                rf.ⵠⵠΔᐃΔⵠⲆ = Date.now() + Number(a.privateServerTime);
            }
            rf.ⵠⵠⵠⲆⲆ = Date.now() + a.kit;
            if (Number(a.kit) > 0) {
                rf.ⵠⵠⵠⲆⲆ = Date.now() + Number(a.kit);
            }
            var d = ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ;
            for (var e = 0; a.skins.length > e; e++) {
                var f = a.skins[e];
                if (f > 0) {
                    for (var g = 0; d.length > g; g++) {
                        if (d[g].id === e) {
                            D.unlock.ⲆΔⲆΔ[g] = 1;
                        }
                    }
                }
            }
            d = ᐃⲆᐃΔ.ⵠΔᐃΔⲆ;
            e = 0;
            for (; e < a.accessories.length; e++) {
                f = a.accessories[e];
                if (f > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            D.unlock.ΔᐃΔⲆⵠ[g] = 1;
                        }
                    }
                }
            }
            d = ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ;
            e = 0;
            for (; a.books.length > e; e++) {
                if ((f = a.books[e]) > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (d[g].id === e) {
                            D.unlock.ᐃⲆᐃⲆⲆ[g] = 1;
                        }
                    }
                }
            }
            d = ᐃⲆᐃΔ.ⲆΔⲆⲆ;
            e = 0;
            for (; e < a.bags.length; e++) {
                if ((f = a.bags[e]) > 0) {
                    for (g = 0; d.length > g; g++) {
                        if (e === d[g].id) {
                            D.unlock.ⲆⵠⲆΔⲆ[g] = 1;
                        }
                    }
                }
            }
            d = ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ;
            e = 0;
            for (; a.crates.length > e; e++) {
                f = a.crates[e];
                if (f > 0) {
                    for (g = 0; g < d.length; g++) {
                        if (e === d[g].id) {
                            D.unlock.ⲆΔΔⵠΔ[g] = 1;
                            D.unlock.ᐃᐃᐃⵠΔ[g] = 1;
                        }
                    }
                }
            }
        };
        this.ⲆⵠΔΔⵠⵠⵠΔⲆ = function () {
            cj.ⲆᐃΔΔⲆⲆⲆ = function () {
                z(N);
                (function (a) {
                    var b = new XMLHttpRequest();
                    b.open("GET", xf + "login?token=" + bx + "&type=" + Ef + (Wv ? "&userId=" + Wv.userId + "&userInfo=" + Wv.userInfo : ""));
                    b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                    b.onreadystatechange = function () {
                        if (this.readyState === 4 && this.status === 200 && b.responseText !== "0") {
                            a(JSON.parse(b.responseText));
                        }
                    };
                    b.send();
                })(D.ᐃᐃΔᐃⵠΔⵠⲆΔ);
            };
            if (dx === 1) {
                cj.ⲆᐃΔΔⲆⲆⲆ();
            }
        };
        cj.ⵠⲆⲆΔᐃᐃΔΔⵠ = function () {
            rf.buttons[rf.ᐃᐃᐃⵠⲆᐃᐃ].info.active = 1;
            rf.buttons[rf.ⲆⵠᐃⵠⵠⵠΔ].info.active = 0;
            rf.buttons[rf.ⵠⵠᐃᐃΔΔΔ].info.active = 0;
            z(N);
        };
        this.ΔⵠΔⲆΔ = function () {
            return rf.buttons[rf.ⲆⵠᐃⵠⵠⵠΔ].info.active;
        };
        this.buttons[b] = Sv(461, 105, 0, [ⵠⵠ.ⲆⲆⵠᐃⵠⵠᐃ, ⵠⵠ.ΔⲆΔⲆⵠᐃⲆ, ⵠⵠ.ᐃᐃᐃΔΔⵠⵠ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                z(f);
            } else {
                z(v);
            }
        }, -100, 80, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(157, 158, 0, [ⵠⵠ.ⵠⲆⵠᐃΔΔΔ, ⵠⵠ.ΔᐃΔⵠⵠΔⲆ, ⵠⵠ.ⵠⵠΔⵠⲆⲆᐃ], 1, 0, function () {
            cj.open("https://starveiopro.wikia.com/wiki/", "_blank");
        }, -35, 125, aa | Z, da);
        this.buttons[b++].view = C;
        this.buttons[b] = Sv(66, 73, 0, [ⵠⵠ.ᐃⲆᐃᐃΔᐃⲆ, ⵠⵠ.ΔⲆⲆᐃΔΔⵠ, ⵠⵠ.ΔᐃΔⵠⲆᐃΔ], 1, 0, Go, -68, 340, aa | Z, da);
        this.buttons[b++].view = C;
        this.buttons[b] = Sv(66, 73, 0, [ⵠⵠ.ⵠⲆΔᐃⲆⵠΔ, ⵠⵠ.ⲆᐃⲆᐃⲆΔΔ, ⵠⵠ.ᐃᐃΔΔΔⵠⲆ], 1, 0, undefined, -30, 340, aa | Z, da);
        this.buttons[b++].view = C;
        this.ᐃΔᐃᐃΔⵠᐃⵠⲆ = b;
        this.buttons[b] = Sv(97, 66, 0, [ⵠⵠ.ᐃⵠᐃᐃⵠⵠΔ, ⵠⵠ.ⲆⵠⵠᐃⲆᐃΔ, ⵠⵠ.ⵠⲆⲆΔⵠΔⲆ], 1, 0, function () {
            Xf(undefined, vk, rf.Δⵠᐃⵠⵠⵠᐃ);
        }, -14, 151, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ᐃΔⲆᐃⵠⵠᐃ = b;
        this.buttons[b] = Sv(135, 66, 0, [ⵠⵠ.ⲆᐃⲆⲆᐃⲆⲆ, ⵠⵠ.ⵠᐃΔⵠⵠⲆⵠ, ⵠⵠ.ΔΔⲆⵠⲆΔΔ], 1, 0, function () {
            Xf(undefined, cl, rf.ᐃΔⲆᐃⵠⵠᐃ);
        }, 37.5, 151, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ᐃΔⲆΔⲆⵠⵠ = b;
        this.buttons[b] = Sv(160, 66, 0, [ⵠⵠ.ⲆⲆⵠⲆᐃⵠΔ, ⵠⵠ.ᐃΔⲆⵠⵠᐃᐃ, ⵠⵠ.ⲆⵠΔᐃⵠΔᐃ], 1, 0, function () {
            Xf(Aj, undefined, rf.ᐃΔⲆΔⲆⵠⵠ);
        }, 107.5, 151, aa | Z, da);
        this.buttons[b++].view = Q;
        this.Δⵠᐃⵠⵠⵠᐃ = b;
        this.buttons[b] = Sv(207, 66, 0, [ⵠⵠ.ⲆΔΔΔⵠᐃᐃ, ⵠⵠ.ⵠⲆᐃⵠΔⵠᐃ, ⵠⵠ.ⲆⵠᐃⲆᐃᐃΔ], 1, 0, function () {
            Xf(ij, pl, rf.Δⵠᐃⵠⵠⵠᐃ);
        }, 190.5, 151, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ᐃⵠⲆⵠΔⲆⲆ = b;
        this.buttons[b] = Sv(144, 66, 0, [ⵠⵠ.ᐃⵠᐃⲆΔⲆⵠ, ⵠⵠ.ᐃⲆⲆⵠΔⵠⵠ, ⵠⵠ.ⵠⵠⵠᐃⲆⵠⵠ], 1, 0, function () {
            Xf(rf.ᐃⵠⲆⵠΔⲆⲆ);
        }, 103.5, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔΔᐃΔⵠΔⲆ = b;
        this.buttons[b] = Sv(124, 66, 0, [ⵠⵠ.ⵠᐃⵠⲆⲆΔⲆ, ⵠⵠ.ΔᐃΔΔⲆⲆⲆ, ⵠⵠ.ⵠᐃᐃⲆⲆΔᐃ], 1, 0, function () {
            Xf(rf.ΔΔᐃΔⵠΔⲆ);
        }, 177.5, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⵠΔⵠⵠᐃⵠᐃ = b;
        this.buttons[b] = Sv(104, 66, 0, [ⵠⵠ.ΔᐃᐃⲆⵠⵠⵠ, ⵠⵠ.ⵠΔⲆᐃⵠⵠⲆ, ⵠⵠ.ΔⵠⵠᐃΔⲆᐃ], 1, 0, function () {
            Xf(rf.ⵠΔⵠⵠᐃⵠᐃ);
        }, 242, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔΔᐃⵠΔΔⵠ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ᐃᐃΔΔⲆⲆⵠ, ⵠⵠ.ᐃⵠⲆᐃⲆᐃⲆ, ⵠⵠ.ⲆΔⲆⲆⵠⲆᐃ], 1, 0, function () {
            Xf(undefined, undefined, undefined, rf.ΔΔᐃⵠΔΔⵠ);
        }, -185, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⲆⵠΔⵠΔΔᐃ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ⵠⵠⵠⲆΔⲆⲆ, ⵠⵠ.ⲆᐃⵠᐃⲆᐃΔ, ⵠⵠ.ΔⲆⵠΔⵠⲆⲆ], 1, 0, function () {
            Xf(undefined, pl, undefined, rf.ⲆⵠΔⵠΔΔᐃ);
        }, -149, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔΔⲆΔⲆᐃᐃ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ᐃΔΔⵠΔΔⲆ, ⵠⵠ.ⲆᐃΔᐃΔᐃᐃ, ⵠⵠ.ⵠⲆⲆⲆⵠⵠⵠ], 1, 0, function () {
            Xf(undefined, $l, pl, rf.ΔΔⲆΔⲆᐃᐃ);
        }, -113, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⵠⲆⵠⲆⲆⲆᐃ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ΔⲆⲆⵠᐃⵠΔ, ⵠⵠ.ᐃᐃΔᐃᐃΔⵠ, ⵠⵠ.ΔᐃⲆⲆⲆΔⵠ], 1, 0, function () {
            Xf(Nn, undefined, xh, rf.ⵠⲆⵠⲆⲆⲆᐃ);
        }, -77, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔⵠᐃⲆⲆⵠᐃ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ᐃΔᐃᐃΔⵠⵠ, ⵠⵠ.ᐃᐃᐃᐃⲆΔⲆ, ⵠⵠ.ᐃⲆⲆⵠΔⲆⵠ], 1, 0, function () {
            Xf(undefined, Fh, $l, rf.ΔⵠᐃⲆⲆⵠᐃ);
        }, -41, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔⵠΔΔᐃᐃⵠ = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ⵠⵠⲆⵠⲆᐃΔ, ⵠⵠ.ⵠⲆⲆΔⲆᐃⵠ, ⵠⵠ.ᐃΔⲆⲆⲆⵠᐃ], 1, 0, function () {
            Xf(Cq, undefined, undefined, rf.ΔⵠΔΔᐃᐃⵠ);
        }, -5, 528, aa | Z, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = Sv(232, 352, 0, [ⵠⵠ.ⲆᐃᐃⵠⲆᐃⵠ, ⵠⵠ.ⵠΔΔⵠⲆⵠΔ, ⵠⵠ.ΔⵠΔᐃΔⵠⲆ], 1, 0, function () {
            Kf(300);
        }, -330, 135, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(232, 352, 0, [ⵠⵠ.ⲆΔΔΔⵠᐃΔ, ⵠⵠ.ⲆⲆⵠΔⲆᐃΔ, ⵠⵠ.ⲆΔⵠᐃᐃⲆⵠ], 1, 0, function () {
            Kf(600);
        }, -195, 135, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(243, 374, 0, [ⵠⵠ.ΔⲆᐃᐃⲆⵠᐃ, ⵠⵠ.ⲆⵠⵠⵠΔⵠⵠ, ⵠⵠ.ⵠᐃΔΔᐃⲆⵠ], 1, 0, function () {
            Kf(2600);
        }, -60, 130, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(232, 352, 0, [ⵠⵠ.ⵠⵠΔⲆᐃⵠⲆ, ⵠⵠ.ᐃⲆΔⲆⵠΔΔ, ⵠⵠ.ᐃⵠⲆΔⵠⲆⵠ], 1, 0, function () {
            Kf(7000);
        }, 78, 135, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(243, 374, 0, [ⵠⵠ.ⲆⵠΔΔⲆΔⵠ, ⵠⵠ.ΔΔᐃΔⲆⲆᐃ, ⵠⵠ.ⵠΔⵠΔᐃⲆΔ], 1, 0, function () {
            Kf(20000);
        }, 213, 130, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(58, 64, 0, [ⵠⵠ.ⲆⲆᐃᐃᐃΔⲆ, ⵠⵠ.ⵠΔⲆⵠΔⵠⵠ, ⵠⵠ.ᐃⵠᐃΔⲆⲆⲆ], 1, 0, function () {
            z(p);
        }, 300, 88, aa | Z, da);
        this.buttons[b++].view = f;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ᐃᐃⲆⲆᐃᐃⲆ, ⵠⵠ.ΔⵠᐃᐃⲆⵠⵠ, ⵠⵠ.ⵠⵠⲆᐃⵠᐃᐃ], 1, 0, function () {
            z(B);
            Ba.ᐃⲆⲆⵠᐃ();
        }, -315, 185, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ΔΔᐃⲆΔⵠᐃ, ⵠⵠ.ᐃⵠⵠⲆⵠⵠⵠ, ⵠⵠ.ᐃΔⵠⲆᐃᐃⲆ], 1, 0, function () {
            z(V);
            Ga.ᐃⲆⲆⵠᐃ();
        }, -315, 321, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ᐃⵠⲆⲆᐃⵠⵠ, ⵠⵠ.ᐃⲆᐃⵠⵠⵠⵠ, ⵠⵠ.ⵠⲆⲆⲆΔⵠΔ], 1, 0, function () {
            z(I);
            Ca.ᐃⲆⲆⵠᐃ();
        }, 153, 185, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ⵠⵠⲆΔᐃᐃⲆ, ⵠⵠ.ᐃⲆΔᐃᐃΔᐃ, ⵠⵠ.ⲆⲆΔⲆᐃΔᐃ], 1, 0, function () {
            z(S);
            Da.ᐃⲆⲆⵠᐃ();
        }, 153, 321, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ᐃⲆⵠⲆΔᐃⲆ, ⵠⵠ.ᐃᐃⵠΔⲆᐃΔ, ⵠⵠ.ⵠΔⲆⵠΔΔⲆ], 1, 0, function () {
            z(E);
            Ea.ᐃⲆⲆⵠᐃ();
        }, 153, 463, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(323, 112, 0, [ⵠⵠ.ΔⵠⲆⲆᐃᐃᐃ, ⵠⵠ.ΔⲆΔΔᐃᐃΔ, ⵠⵠ.ΔΔⵠⲆⲆⲆⵠ], 1, 0, function () {
            z(F);
            Fa.ᐃⲆⲆⵠᐃ();
        }, -315, 463, aa | Z, da);
        this.buttons[b++].view = m;
        this.buttons[b] = Sv(327, 117, 0, [ⵠⵠ.ΔⵠⲆⲆⵠⲆⲆ, ⵠⵠ.ⲆⲆⲆᐃⲆᐃΔ, ⵠⵠ.ᐃⲆΔΔⵠᐃᐃ], 1, 0, function () {
            z(O);
        }, 155, 70, X, ea);
        this.buttons[b++].view = N;
        this.buttons[b] = Sv(130, 129, 0, [ⵠⵠ.ᐃⵠⵠⵠᐃᐃⲆ, ⵠⵠ.ⵠⵠΔⵠᐃⵠⲆ, ⵠⵠ.ⲆΔⲆΔΔⲆⲆ], 1, 0, function () {
            q(x, da, "none");
            z(p);
        }, 10, 40, aa | Z, da);
        this.buttons[b++].view = x;
        this.buttons[b] = Sv(130, 129, 0, [ⵠⵠ.ᐃⵠⵠⵠᐃᐃⲆ, ⵠⵠ.ⵠⵠΔⵠᐃⵠⲆ, ⵠⵠ.ⲆΔⲆΔΔⲆⲆ], 1, 0, function () {
            q(y, da, "none");
            z(p);
        }, 10, 40, aa | Z, da);
        this.buttons[b++].view = y;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 200, 140, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(524, 110, 0, [ⵠⵠ.ᐃⲆⵠΔⲆⲆⵠ, ⵠⵠ.ᐃᐃⵠΔᐃⵠⲆ, ⵠⵠ.ⵠΔⵠΔⲆⲆᐃ], 1, 0, function () {
            Vf("Atlanta");
        }, -265, 300, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(523, 110, 0, [ⵠⵠ.ΔᐃⵠᐃΔᐃᐃ, ⵠⵠ.ⵠᐃᐃⵠᐃⵠⲆ, ⵠⵠ.ᐃⲆΔⵠⲆᐃᐃ], 1, 0, function () {
            Vf("LosAngeles");
        }, 5, 300, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(344, 110, 0, [ⵠⵠ.ⲆⲆΔΔⵠᐃΔ, ⵠⵠ.ⲆΔᐃⵠΔⵠⵠ, ⵠⵠ.ᐃⲆⲆⵠΔΔᐃ], 1, 0, function () {
            Vf("Frankfurt");
        }, -265, 365, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(344, 110, 0, [ⵠⵠ.ⲆⵠΔᐃᐃᐃⲆ, ⵠⵠ.ⵠΔⵠⵠⲆⲆⲆ, ⵠⵠ.ⲆᐃⵠⲆⵠᐃᐃ], 1, 0, function () {
            Vf("Osaka");
        }, 100, 365, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(344, 110, 0, [ⵠⵠ.ⲆΔⲆΔᐃᐃᐃ, ⵠⵠ.ⲆᐃⲆⵠᐃⵠⵠ, ⵠⵠ.ⲆⵠⵠⲆΔⲆΔ], 1, 0, function () {
            Vf("Sydney");
        }, -86, 365, aa | Z, da);
        this.buttons[b++].view = G;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(G);
        }, 224, 140, aa | Z, da);
        this.buttons[b++].view = L;
        this.buttons[b] = Sv(230, 352, 0, [ⵠⵠ.ΔΔΔⲆⲆᐃⲆ, ⵠⵠ.ⵠⲆΔⵠⲆⵠᐃ, ⵠⵠ.ᐃΔⵠΔⲆⲆΔ], 1, 0, function () {
            Kf(350);
        }, -280, 240, aa | Z, da);
        this.buttons[b++].view = L;
        this.buttons[b] = Sv(230, 352, 0, [ⵠⵠ.ΔΔΔⲆⲆⲆΔ, ⵠⵠ.ΔΔᐃⵠⵠⲆΔ, ⵠⵠ.ⲆⲆⲆⲆΔⲆⵠ], 1, 0, function () {
            Kf(700);
        }, -130, 240, aa | Z, da);
        this.buttons[b++].view = L;
        this.buttons[b] = Sv(230, 352, 0, [ⵠⵠ.ⵠⵠⵠⲆᐃⲆᐃ, ⵠⵠ.ΔΔⲆΔᐃⵠⵠ, ⵠⵠ.ⲆⲆⲆⵠⲆΔⲆ], 1, 0, function () {
            Kf(1400);
        }, 20, 240, aa | Z, da);
        this.buttons[b++].view = L;
        this.buttons[b] = Sv(230, 352, 0, [ⵠⵠ.ᐃⲆᐃᐃΔᐃⵠ, ⵠⵠ.ᐃΔΔᐃⲆⵠΔ, ⵠⵠ.ⲆⵠⲆΔⲆⲆⵠ], 1, 0, function () {
            Kf(3000);
        }, 170, 240, aa | Z, da);
        this.buttons[b++].view = L;
        this.buttons[b] = Sv(105, 119, 0, [ⵠⵠ.ⵠᐃⵠⲆⵠᐃᐃ, ⵠⵠ.ᐃⲆⲆΔⲆⵠⲆ, ⵠⵠ.ᐃⲆⵠⲆⵠⲆᐃ], 1, 0, function () {
            const a = document.getElementById("serverAddressInput").value.split(" : ");
            const b = cj.document.createElement("textarea");
            b.value = $v + "?server=" + a[1] + "&region=" + a[0];
            cj.document.body.appendChild(b);
            b.select();
            cj.document.execCommand("copy");
            cj.document.body.removeChild(b);
        }, 170, 310, aa | Z, da);
        this.buttons[b++].view = W;
        this.buttons[b] = Sv(105, 119, 0, [ⵠⵠ.ΔⲆΔⲆⲆᐃⵠ, ⵠⵠ.ΔᐃΔⲆᐃΔᐃ, ⵠⵠ.ⵠⲆⲆΔⲆⵠᐃ], 1, 0, function () {
            (function () {
                var a = new XMLHttpRequest();
                a.open("GET", xf + "rebootServer?token=" + bx + "&userid=" + cx);
                a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                a.onreadystatechange = function () {
                    if (this.readyState === 4 && this.status === 200 && a.responseText !== "0") {
                        const a = document.getElementById("serverAddressInput").value.split(" : ");
                        location.href = $v + "?server=" + a[1] + "&region=" + a[0];
                    }
                };
                a.send();
            })();
        }, 235, 310, aa | Z, da);
        this.buttons[b++].view = W;
        this.buttons[b] = Sv(204, 115, 0, [ⵠⵠ.ⵠΔΔⲆⲆᐃΔ, ⵠⵠ.ⲆΔⵠⲆⵠΔⵠ, ⵠⵠ.ⵠΔⲆⲆᐃⵠⵠ], 1, 0, function () {
            cj.open("./commands.html", "_blank");
        }, -265, 490, aa | Z, da);
        this.buttons[b++].view = W;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ΔᐃⲆΔⵠⲆΔ, ⵠⵠ.ⲆⵠⲆⲆΔᐃⵠ, ⵠⵠ.ⵠΔⵠΔⲆⲆⵠ], 1, 0, function () {
            z(T);
        }, -210, 170, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ᐃΔⵠᐃΔⵠΔ, ⵠⵠ.ⵠᐃΔⲆⲆⵠⵠ, ⵠⵠ.ΔΔΔⵠΔⵠⵠ], 1, 0, function () {
            z(k);
        }, 70, 170, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⵠᐃⵠⵠᐃⲆᐃ, ⵠⵠ.ⵠⲆᐃⲆⵠᐃⲆ, ⵠⵠ.ⲆⲆᐃⲆΔΔⲆ], 1, 0, function () {
            z(P);
        }, 70, 204, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⲆᐃⵠⵠΔᐃⵠ, ⵠⵠ.ΔΔᐃΔⵠⵠᐃ, ⵠⵠ.ᐃⵠΔⵠⲆⲆⲆ], 1, 0, function () {
            z(J);
        }, -210, 204, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⲆᐃⵠⵠΔᐃⵠ, ⵠⵠ.ΔΔᐃΔⵠⵠᐃ, ⵠⵠ.ᐃⵠΔⵠⲆⲆⲆ], 1, 0, function () {
            z(M);
        }, 70, 238, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⲆᐃⵠⵠΔᐃⵠ, ⵠⵠ.ΔΔᐃΔⵠⵠᐃ, ⵠⵠ.ᐃⵠΔⵠⲆⲆⲆ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Yf(0, 300);
            } else {
                z(v);
            }
        }, 307, 205, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⵠΔΔⲆΔⵠΔ, ⵠⵠ.ⵠⵠΔᐃᐃᐃⲆ, ⵠⵠ.ⵠⲆΔᐃⵠⵠᐃ], 1, 0, function () {
            z(A);
        }, -210, 238, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(145, 69, 0, [ⵠⵠ.ⵠΔΔⲆΔⵠΔ, ⵠⵠ.ⵠⵠΔᐃᐃᐃⲆ, ⵠⵠ.ⵠⲆΔᐃⵠⵠᐃ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Yf(1, 600);
            } else {
                z(v);
            }
        }, 307, 239, aa | Z, da);
        this.buttons[b++].view = p;
        this.buttons[b] = Sv(192, 101, 0, [ⵠⵠ.ⵠⵠⵠⲆΔⵠᐃ, ⵠⵠ.ⵠⵠΔⲆⵠΔᐃ, ⵠⵠ.ⵠΔᐃᐃⵠⲆᐃ], 1, 0, function () {
            Of();
        }, -100, 250, aa | Z, da);
        this.buttons[b++].view = j;
        this.buttons[b] = Sv(192, 104, 0, [ⵠⵠ.ⲆᐃⵠⵠᐃⲆⵠ, ⵠⵠ.ⲆᐃᐃΔΔⲆΔ, ⵠⵠ.ⵠⵠⲆⵠⲆⲆᐃ], 1, 0, function () {
            Of();
        }, -100, 239, aa | Z, da);
        this.buttons[b++].view = R;
        this.buttons[b] = Sv(192, 101, 0, [ⵠⵠ.ⲆⵠⵠᐃⲆΔⵠ, ⵠⵠ.ⲆⵠⵠⵠᐃⲆΔ, ⵠⵠ.ΔᐃΔⵠⵠⵠⲆ], 1, 0, function () {
            z(d);
        }, 10, 250, aa | Z, da);
        this.buttons[b++].view = j;
        this.buttons[b] = Sv(192, 104, 0, [ⵠⵠ.ΔⵠᐃⲆΔⵠⲆ, ⵠⵠ.ⵠⵠⵠΔᐃᐃᐃ, ⵠⵠ.ⵠΔⵠⵠᐃΔΔ], 1, 0, function () {
            z(d);
        }, 10, 239, aa | Z, da);
        this.buttons[b++].view = R;
        ⲆΔΔⵠⲆ = [];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ᐃΔΔΔᐃ] = [ⵠⵠ.ⲆᐃᐃᐃⵠΔᐃ, ⵠⵠ.ᐃⲆᐃΔᐃⲆΔ, ⵠⵠ.ⵠᐃᐃⵠΔⵠᐃ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ⵠΔΔⲆ] = [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ΔⲆΔᐃ] = [ⵠⵠ.ⵠⲆⲆⵠᐃΔⲆ, ⵠⵠ.ⵠᐃΔⵠⵠΔⵠ, ⵠⵠ.ᐃᐃᐃⵠᐃΔᐃ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ⲆⲆⵠⲆ] = [ⵠⵠ.ⲆⲆΔΔᐃᐃⵠ, ⵠⵠ.ⲆⵠⵠⵠⲆᐃⲆ, ⵠⵠ.ⵠⵠᐃⵠᐃⲆⲆ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ⲆⲆⲆⵠ] = [ⵠⵠ.ᐃᐃⵠΔΔᐃⵠ, ⵠⵠ.ΔⵠΔᐃⵠⲆⲆ, ⵠⵠ.ⵠⵠⲆⲆⲆΔΔ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ᐃᐃᐃⲆ] = [ⵠⵠ.ΔⵠⵠⲆⲆᐃⲆ, ⵠⵠ.ⲆⲆⲆΔᐃᐃⲆ, ⵠⵠ.ΔⵠⲆⲆⵠⵠᐃ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ⲆⵠⲆⵠ] = [ⵠⵠ.ᐃⵠⵠᐃⲆⲆⲆ, ⵠⵠ.ᐃⲆⲆⲆⵠⵠⵠ, ⵠⵠ.ⵠΔⵠⵠᐃⵠⲆ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ᐃⵠᐃΔΔ] = [ⵠⵠ.ᐃΔⲆᐃᐃᐃⵠ, ⵠⵠ.ΔΔΔΔⲆⵠΔ, ⵠⵠ.ⵠΔᐃΔᐃᐃΔ];
        ⲆΔΔⵠⲆ[ⵠⲆΔ.ⲆΔⲆⵠⲆⵠⲆ] = [ⵠⵠ.ⵠΔᐃΔⵠⲆⲆ, ⵠⵠ.ΔΔᐃᐃⲆⲆⲆ, ⵠⵠ.ⲆᐃᐃᐃᐃᐃⲆ];
        ᐃᐃⵠⲆⲆᐃΔ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Nn, -29, 205, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Kq, -29, 300, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 395, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 205, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 300, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 395, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ll, 159, 205, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 300, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 395, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, Oo, -61, 315, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, undefined, 260, 315, aa | Z, da);
        this.buttons[b++].view = B;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = B;
        ⲆΔᐃΔⵠᐃⵠΔᐃ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 205, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Go, -29, 300, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 395, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, xh, 65, 205, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 300, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, xh, 65, 395, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 205, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 300, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Lk, 159, 395, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, undefined, -61, 315, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, undefined, 260, 315, aa | Z, da);
        this.buttons[b++].view = V;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = V;
        ⵠᐃΔⵠⵠᐃᐃᐃⵠ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ij, -29, 205, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 300, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 395, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 205, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ll, 65, 300, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 395, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 205, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 300, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 395, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, vk, -61, 315, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, undefined, 260, 315, aa | Z, da);
        this.buttons[b++].view = F;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = F;
        ⲆⲆⲆⲆΔⵠⲆΔⲆ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Cq, -29, 205, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Cq, -29, 300, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, $l, -29, 395, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ll, 65, 205, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 300, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Kq, 65, 395, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 205, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 300, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ts, 159, 395, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, undefined, -61, 315, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, undefined, 260, 315, aa | Z, da);
        this.buttons[b++].view = I;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = I;
        ⵠᐃⲆⲆᐃᐃΔⲆᐃ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Lk, -29, 205, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ll, -29, 300, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, ts, -29, 395, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, wh, 65, 205, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 300, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 395, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 205, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, vk, 159, 300, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 395, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, vk, -61, 315, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, vk, 260, 315, aa | Z, da);
        this.buttons[b++].view = S;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = S;
        ⲆᐃⵠⲆᐃⲆⲆᐃⲆ = b;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Lk, -29, 205, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, es, -29, 300, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, -29, 395, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Cq, 65, 205, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 300, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 65, 395, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, undefined, 159, 205, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Hq, 159, 300, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(178, 182, 0, [ⵠⵠ.Δᐃⵠⵠ, ⵠⵠ.ΔΔᐃΔ, ⵠⵠ.ⵠⵠΔⵠ], 1, 0, Nn, 159, 395, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔⵠⲆᐃⲆΔⲆ, ⵠⵠ.ᐃⵠᐃᐃᐃΔΔ, ⵠⵠ.ΔΔΔⵠᐃⲆΔ], 1, 0, Fh, -61, 315, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(39, 122, 0, [ⵠⵠ.ΔᐃΔⲆⵠΔΔ, ⵠⵠ.ⵠⵠᐃⵠΔⲆⵠ, ⵠⵠ.ᐃⲆᐃⲆᐃⲆΔ], 1, 0, undefined, 260, 315, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(m);
        }, -320, 470, aa | Z, da);
        this.buttons[b++].view = E;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ΔⵠⲆᐃᐃⵠᐃ, ⵠⵠ.ⲆᐃΔⲆⵠⲆᐃ, ⵠⵠ.ΔΔⵠΔⲆⲆⲆ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(3, 50);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = k;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = k;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ᐃⵠΔΔᐃᐃⲆ, ⵠⵠ.ⲆⵠⲆΔⲆᐃΔ, ⵠⵠ.ᐃΔⲆⲆⵠΔⲆ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(0, 100);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = T;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = T;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ᐃᐃⵠΔⲆⵠΔ, ⵠⵠ.ΔΔΔⲆⵠⲆᐃ, ⵠⵠ.ᐃΔⵠΔΔᐃᐃ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(4, 150);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = P;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = P;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ΔΔⲆⵠΔᐃΔ, ⵠⵠ.ⲆΔᐃᐃᐃΔᐃ, ⵠⵠ.ΔΔᐃⵠⲆᐃΔ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(1, 300);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = J;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = J;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ΔΔⲆΔΔΔΔ, ⵠⵠ.ⲆⲆⲆᐃΔᐃᐃ, ⵠⵠ.ⲆⵠᐃΔᐃΔⵠ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(2, 600);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = A;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = A;
        this.buttons[b] = Sv(260, 260, 0, [ⵠⵠ.ΔΔⲆⵠΔᐃΔ, ⵠⵠ.ⲆΔᐃᐃᐃΔᐃ, ⵠⵠ.ΔΔᐃⵠⲆᐃΔ], 1, 0, function () {
            if (D.ΔⵠΔⲆΔ()) {
                Uf(5, 300);
            } else {
                z(v);
            }
        }, -65, 197, aa | Z, da);
        this.buttons[b++].view = M;
        this.buttons[b] = Sv(115, 73, 0, [ⵠⵠ.ⲆΔΔᐃⵠ, ⵠⵠ.ᐃΔᐃΔᐃ, ⵠⵠ.ΔᐃⲆΔᐃ], 1, 0, function () {
            z(p);
        }, 309, 180, aa | Z, da);
        this.buttons[b++].view = M;
        var qa = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ᐃⲆⲆᐃΔᐃⲆ, ⵠⵠ.ⵠⲆΔᐃΔᐃⵠ, ⵠⵠ.ᐃⵠᐃⵠᐃⵠⲆ], 1, 0, function () {
            pa(undefined, 0);
        }, -305, 132, aa | Z, da);
        this.buttons[b++].view = d;
        var ra = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ⵠᐃⲆᐃⵠⵠⲆ, ⵠⵠ.ⲆΔⵠⲆΔᐃΔ, ⵠⵠ.ΔᐃᐃᐃΔⲆᐃ], 1, 0, function () {
            pa(xh, 1);
        }, -273, 132, aa | Z, da);
        this.buttons[b++].view = d;
        var sa = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ΔⲆᐃⲆⲆⵠᐃ, ⵠⵠ.ⲆⲆⵠΔΔΔΔ, ⵠⵠ.ⲆΔⲆΔᐃΔⵠ], 1, 0, function () {
            pa(ij, 2);
        }, -241, 132, aa | Z, da);
        this.buttons[b++].view = d;
        var ta = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ⲆⲆᐃᐃⵠⵠΔ, ⵠⵠ.ⵠⵠᐃΔΔᐃⲆ, ⵠⵠ.ᐃᐃⲆΔⵠⲆⵠ], 1, 0, function () {
            pa($l, 3);
        }, -305, 165, aa | Z, da);
        this.buttons[b++].view = d;
        var ua = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ΔⲆΔⵠᐃᐃⲆ, ⵠⵠ.ⲆⲆᐃⵠᐃΔᐃ, ⵠⵠ.ⲆⲆᐃⲆⲆⵠⲆ], 1, 0, function () {
            pa(Cq, 4);
        }, -273, 165, aa | Z, da);
        this.buttons[b++].view = d;
        var va = b;
        this.buttons[b] = Sv(46, 51, 0, [ⵠⵠ.ⵠΔᐃⵠⵠⵠᐃ, ⵠⵠ.ΔΔᐃᐃᐃⵠⲆ, ⵠⵠ.ΔⵠⵠⲆᐃΔᐃ], 1, 0, function () {
            pa(xh, 5);
        }, -241, 165, aa | Z, da);
        this.buttons[b++].view = d;
        var wa = b;
        this.buttons[b] = Sv(460, 73, 0, [ⵠⵠ.ΔⲆⵠⲆⵠⵠΔ, ⵠⵠ.ⵠᐃⵠΔΔᐃΔ, ⵠⵠ.ⵠⲆΔᐃΔΔΔ], 1, 0, function () {
            pa(-1);
        }, -180, 170, aa | Z, da);
        this.buttons[b++].view = d;
        var xa = b;
        this.buttons[b] = Sv(222, 68, 0, [ⵠⵠ.ᐃΔᐃⵠΔᐃⲆ, ⵠⵠ.ΔᐃⵠΔⲆᐃΔ, ⵠⵠ.ⲆΔᐃⵠⵠᐃΔ], 1, 0, function () {
            pa(ew.ⲆⲆⲆⵠⵠ);
        }, -180, 215, aa | Z, da);
        this.buttons[b++].view = d;
        var ya = b;
        this.buttons[b] = Sv(222, 68, 0, [ⵠⵠ.ⲆΔᐃᐃᐃⲆⲆ, ⵠⵠ.ᐃΔⵠⵠΔⲆᐃ, ⵠⵠ.ⵠΔⵠΔⵠⲆⵠ], 1, 0, function () {
            pa(ew.ⲆΔᐃⲆᐃ);
        }, -180, 260, aa | Z, da);
        this.buttons[b++].view = d;
        var za = b;
        this.buttons[b] = Sv(222, 68, 0, [ⵠⵠ.ⲆⵠⲆⲆⲆⵠᐃ, ⵠⵠ.ⲆᐃΔΔⲆΔᐃ, ⵠⵠ.ᐃᐃΔᐃⲆⲆⲆ], 1, 0, function () {
            pa(ew.ⲆⵠΔΔᐃ);
        }, -60, 215, aa | Z, da);
        this.buttons[b++].view = d;
        var Aa = b;
        this.buttons[b] = Sv(222, 68, 0, [ⵠⵠ.ⵠⵠⵠⲆⵠᐃⲆ, ⵠⵠ.ⲆⲆⲆⲆⲆⵠᐃ, ⵠⵠ.ᐃᐃᐃⲆⲆΔᐃ], 1, 0, function () {
            pa(ew.ᐃⲆⵠⲆΔ);
        }, -60, 260, aa | Z, da);
        this.buttons[b++].view = d;
        this.ⵠⵠⵠΔΔⲆΔ = b;
        this.buttons[b] = Sv(143, 66, 0, [ⵠⵠ.ⵠΔΔⵠⵠⵠΔ, ⵠⵠ.ⵠᐃⵠⲆᐃΔᐃ, ⵠⵠ.ᐃᐃᐃᐃⵠΔΔ], 1, 0, function () {
            Xf(undefined, rf.ⵠⵠⵠΔΔⲆΔ);
        }, -298, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ΔΔⵠⵠᐃΔⵠ = b;
        this.buttons[b] = Sv(104, 66, 0, [ⵠⵠ.ⲆΔᐃΔⵠΔΔ, ⵠⵠ.ᐃᐃΔΔΔⵠⵠ, ⵠⵠ.ⵠᐃᐃᐃᐃⵠⵠ], 1, 0, function () {
            Xf(ll, rf.ΔΔⵠⵠᐃΔⵠ);
        }, -223, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⵠΔⲆⲆⲆΔᐃ = b;
        this.buttons[b] = Sv(110, 66, 0, [ⵠⵠ.ᐃΔΔᐃᐃᐃⲆ, ⵠⵠ.ᐃⲆⵠⲆⵠᐃⲆ, ⵠⵠ.ⵠⵠΔΔⲆⲆΔ], 1, 0, function () {
            Xf(undefined, rf.ⵠΔⲆⲆⲆΔᐃ);
        }, -168, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⵠⵠΔⲆⲆⲆⵠ = b;
        this.buttons[b] = Sv(88, 66, 0, [ⵠⵠ.ᐃⵠⵠᐃΔᐃᐃ, ⵠⵠ.ⵠΔᐃᐃΔⲆⲆ, ⵠⵠ.ᐃΔⲆⵠⵠⲆᐃ], 1, 0, function () {
            Xf(undefined, rf.ⵠⵠΔⲆⲆⲆⵠ);
        }, -110, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.ⲆΔⲆⲆᐃⵠᐃ = b;
        this.buttons[b] = Sv(88, 66, 0, [ⵠⵠ.ΔᐃΔΔΔⵠⲆ, ⵠⵠ.ⵠΔᐃⲆΔⵠⵠ, ⵠⵠ.ⵠⲆⵠⲆᐃᐃⵠ], 1, 0, function () {
            Xf(ij, rf.ⲆΔⲆⲆᐃⵠᐃ);
        }, -63, 110, aa | Z, da);
        this.buttons[b++].view = Q;
        this.buttons[b] = Sv(86, 44, 0, [ⵠⵠ.ΔⲆᐃᐃΔⲆᐃ, ⵠⵠ.ᐃⵠⵠΔᐃΔⵠ, ⵠⵠ.ⵠΔᐃΔⵠΔΔ], 1, 0, function () {
            cj.open("./terms.html", "_blank");
        }, 349, 290, aa | Z, da);
        this.buttons[b++].view = p;
        var Ba = new e(ᐃⲆᐃΔ.ⵠⲆᐃⵠⲆ, ᐃᐃⵠⲆⲆᐃΔ, function (a) {
            rf.ⲆΔⲆΔ = a;
            if (rf.unlock.ⲆΔⲆΔ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_skin", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆΔⲆΔ, this.unlock.ⲆΔⲆΔ);
        var Ca = new e(ᐃⲆᐃΔ.ⲆΔⲆⲆ, ⲆⲆⲆⲆΔⵠⲆΔⲆ, function (a) {
            rf.ⲆⵠⲆΔⲆ = a;
            if (rf.unlock.ⲆⵠⲆΔⲆ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_bag", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆⵠⲆΔⲆ, this.unlock.ⲆⵠⲆΔⲆ);
        var Da = new e(ᐃⲆᐃΔ.ΔᐃⲆᐃⵠ, ⵠᐃⲆⲆᐃᐃΔⲆᐃ, function (a) {
            rf.ᐃⲆᐃⲆⲆ = a;
            if (rf.unlock.ᐃⲆᐃⲆⲆ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_book", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃⲆᐃⲆⲆ, this.unlock.ᐃⲆᐃⲆⲆ);
        var Ea = new e(ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ, ⲆᐃⵠⲆᐃⲆⲆᐃⲆ, function (a) {
            rf.ᐃᐃᐃⵠΔ = a;
            if (rf.unlock.ᐃᐃᐃⵠΔ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_dead", "" + a, {
                    expires: 30
                });
            }
        }, this.ᐃᐃᐃⵠΔ, this.unlock.ᐃᐃᐃⵠΔ);
        var Fa = new e(ᐃⲆᐃΔ.ᐃⲆⵠⵠⵠ, ⵠᐃΔⵠⵠᐃᐃᐃⵠ, function (a) {
            rf.ⲆΔΔⵠΔ = a;
            if (rf.unlock.ⲆΔΔⵠΔ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_crate", "" + a, {
                    expires: 30
                });
            }
        }, this.ⲆΔΔⵠΔ, this.unlock.ⲆΔΔⵠΔ);
        var Ga = new e(ᐃⲆᐃΔ.ⵠΔᐃΔⲆ, ⲆΔᐃΔⵠᐃⵠΔᐃ, function (a) {
            rf.ΔᐃΔⲆⵠ = a;
            if (rf.unlock.ΔᐃΔⲆⵠ[a] === 1) {
                ᐃⵠΔᐃ.set("starve_accessory", "" + a, {
                    expires: 30
                });
            }
        }, this.ΔᐃΔⲆⵠ, this.unlock.ΔᐃΔⲆⵠ);
        this.ΔᐃᐃΔΔⵠⵠ = function (a) {
            mf.ΔᐃⵠΔ = Pv(D.ΔⲆ, a);
            for (var b = 0; D.buttons.length > b; b++) {
                if (ea === D.buttons[b].info.active) {
                    D.buttons[b].ⲆΔⵠΔ(D.ΔⲆ, mf.ΔᐃⵠΔ, Iv);
                }
            }
        };
        this.ᐃⲆⵠⲆᐃᐃᐃ = function (a) {
            mf.ΔᐃⵠΔ = Pv(D.ΔⲆ, a);
            for (var b = 0; D.buttons.length > b; b++) {
                var c = D.buttons[b];
                if (ea === c.info.active && c.ⲆΔⵠΔ(D.ΔⲆ, mf.ΔᐃⵠΔ, Jv)) {
                    c.info.callback();
                    return;
                }
            }
        };
        this.ΔⲆᐃⲆΔⲆⲆ = false;
        this.ᐃᐃⵠᐃⲆⵠᐃ = function (a) {
            mf.ΔᐃⵠΔ = Pv(D.ΔⲆ, a);
            var b = mk;
            for (var d = 0; d < D.buttons.length; d++) {
                if (D.buttons[d].info.active === ea) {
                    b |= D.buttons[d].ⲆΔⵠΔ(D.ΔⲆ, mf.ΔᐃⵠΔ, Hv);
                }
            }
            if (b !== D.ΔⲆᐃⲆΔⲆⲆ) {
                D.ΔⲆᐃⲆΔⲆⲆ = b;
                c.style.cursor = b ? D.ⲆⵠⵠᐃΔⵠΔ : D.ⵠᐃⵠⲆΔΔⲆ;
            }
        };
        this.ΔⵠⵠΔⵠⵠᐃ = function () {
            cj.addEventListener("mousedown", this.ΔᐃᐃΔΔⵠⵠ, hh);
            cj.addEventListener("mouseup", this.ᐃⲆⵠⲆᐃᐃᐃ, false);
            cj.addEventListener("mousemove", this.ᐃᐃⵠᐃⲆⵠᐃ, yg);
        };
        this.ⵠᐃᐃⲆⲆᐃΔ = function () {
            cj.removeEventListener("mousedown", this.ΔᐃᐃΔΔⵠⵠ, Sr);
            cj.removeEventListener("mouseup", this.ᐃⲆⵠⲆᐃᐃᐃ, fg);
            cj.removeEventListener("mousemove", this.ᐃᐃⵠᐃⲆⵠᐃ, false);
        };
    }
    (function () {
        function b() {
            this.ⲆⲆⵠⲆⲆ();
        }
        b.prototype = {
            ⲆⲆⵠⲆⲆ: function () {
                var a = this || f;
                a.ⵠⲆⲆⵠⵠᐃᐃ = 1000;
                a.ⲆⵠⵠⲆΔⲆⲆ = {};
                a.ⵠⵠΔΔⲆ = [];
                a.ⵠⵠᐃΔΔ = false;
                a.ⲆᐃᐃⲆⵠ = 1;
                a.ⲆΔΔΔⵠⲆⵠ = "canplaythrough";
                a.ⲆΔⵠⵠᐃ = typeof cj != "undefined" && cj.navigator ? cj.navigator : null;
                a.ⲆΔⲆΔΔⵠⵠ = null;
                a.ⲆⲆᐃΔᐃⲆᐃ = false;
                a.ᐃⲆΔᐃΔ = true;
                a.ⵠⲆⲆⲆΔⲆΔ = true;
                a.Δ = null;
                a.ⵠⲆⵠⵠΔᐃᐃ = true;
                a.ΔⲆⵠⵠⵠΔⵠ();
                return a;
            },
            volume: function (b) {
                var c = this || f;
                b = parseFloat(b);
                if (!c.Δ) {
                    i();
                }
                if (b !== undefined && b >= 0 && b <= 1) {
                    c.ⲆᐃᐃⲆⵠ = b;
                    if (c.ⵠⵠᐃΔΔ) {
                        return c;
                    }
                    if (c.ᐃⲆΔᐃΔ) {
                        c.ⲆΔⲆΔΔⵠⵠ.gain.value = b;
                    }
                    for (var d = 0; d < c.ⵠⵠΔΔⲆ.length; d++) {
                        if (!c.ⵠⵠΔΔⲆ[d].Δᐃⵠⵠⵠ) {
                            for (var g = c.ⵠⵠΔΔⲆ[d].ᐃΔᐃᐃΔ(), h = 0; h < g.length; h++) {
                                var j = c.ⵠⵠΔΔⲆ[d].ⵠΔᐃᐃΔ(g[h]);
                                if (j && j.Δⵠⵠᐃ) {
                                    j.Δⵠⵠᐃ.volume = j.ⲆᐃᐃⲆⵠ * b;
                                }
                            }
                        }
                    }
                    return c;
                }
                return c.ⲆᐃᐃⲆⵠ;
            },
            ⵠΔΔΔΔⵠⲆ: function (b) {
                var c = this || f;
                if (!c.Δ) {
                    i();
                }
                c.ⵠⵠᐃΔΔ = b;
                if (c.ᐃⲆΔᐃΔ) {
                    c.ⲆΔⲆΔΔⵠⵠ.gain.value = b ? 0 : c.ⲆᐃᐃⲆⵠ;
                }
                for (var d = 0; d < c.ⵠⵠΔΔⲆ.length; d++) {
                    if (!c.ⵠⵠΔΔⲆ[d].Δᐃⵠⵠⵠ) {
                        for (var e = c.ⵠⵠΔΔⲆ[d].ᐃΔᐃᐃΔ(), g = 0; g < e.length; g++) {
                            var h = c.ⵠⵠΔΔⲆ[d].ⵠΔᐃᐃΔ(e[g]);
                            if (h && h.Δⵠⵠᐃ) {
                                h.Δⵠⵠᐃ.muted = !!b || h.ⵠⵠᐃΔΔ;
                            }
                        }
                    }
                }
                return c;
            },
            ⵠⲆⲆΔⲆⲆΔ: function () {
                var a = this || f;
                for (var b = a.ⵠⵠΔΔⲆ.length - 1; b >= 0; b--) {
                    a.ⵠⵠΔΔⲆ[b].ⵠⲆⲆΔⲆⲆΔ();
                }
                if (a.ᐃⲆΔᐃΔ && a.Δ && a.Δ.close !== undefined) {
                    a.Δ.close();
                    a.Δ = null;
                    i();
                }
                return a;
            },
            ⲆⵠΔΔⲆᐃⲆΔᐃ: function (a) {
                return (this || f).ⲆⵠⵠⲆΔⲆⲆ[a.replace(/^x-/, "")];
            },
            ΔⲆⵠⵠⵠΔⵠ: function () {
                var a = this || f;
                a.state = a.Δ && a.Δ.state || "running";
                a.ⵠⲆᐃⵠᐃᐃΔ();
                if (!a.ᐃⲆΔᐃΔ) {
                    if (typeof Audio != "undefined") {
                        try {
                            if (new Audio().oncanplaythrough === undefined) {
                                a.ⲆΔΔΔⵠⲆⵠ = "canplay";
                            }
                        } catch (b) {
                            a.ⲆⲆᐃΔᐃⲆᐃ = true;
                        }
                    } else {
                        a.ⲆⲆᐃΔᐃⲆᐃ = true;
                    }
                }
                try {
                    if (new Audio().muted) {
                        a.ⲆⲆᐃΔᐃⲆᐃ = true;
                    }
                } catch (a) { }
                if (!a.ⲆⲆᐃΔᐃⲆᐃ) {
                    a.ⵠᐃᐃⵠⲆⵠⲆΔᐃ();
                }
                return a;
            },
            ⵠᐃᐃⵠⲆⵠⲆΔᐃ: function () {
                var b = this || f;
                var c = null;
                try {
                    c = typeof Audio != "undefined" ? new Audio() : null;
                } catch (a) {
                    return b;
                }
                if (!c || typeof c.canPlayType != "function") {
                    return b;
                }
                var d = c.canPlayType("audio/mpeg;").replace(/^no$/, "");
                var e = b.ⲆΔⵠⵠᐃ && b.ⲆΔⵠⵠᐃ.userAgent.match(/OPR\/([0-6].)/g);
                var g = e && parseInt(e[0].split("/")[1], 10) < 33;
                b.ⲆⵠⵠⲆΔⲆⲆ = {
                    ᐃΔⵠᐃΔⵠΔⲆΔ: !g && (!!d || !!c.canPlayType("audio/mp3;").replace(/^no$/, "")),
                    ΔⵠⲆⵠⵠⲆᐃⲆⵠ: !!d,
                    ⵠⲆⲆΔⲆⲆⲆⲆᐃ: !!c.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
                    ᐃΔⲆΔⵠᐃΔⲆᐃ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⲆⵠⲆΔᐃΔⵠᐃⵠ: !!c.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ⵠⵠⵠΔΔⲆᐃΔⵠ: !!c.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
                    ᐃΔΔΔⲆⲆⲆⲆⲆ: !!c.canPlayType("audio/aac;").replace(/^no$/, ""),
                    ᐃᐃΔᐃΔΔⵠⵠⲆ: !!c.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                    ⲆⲆⲆΔⲆΔⵠⲆⲆ: !!(c.canPlayType("audio/x-m4a;") || c.canPlayType("audio/m4a;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ΔᐃᐃⵠⵠᐃⵠᐃΔ: !!(c.canPlayType("audio/x-mp4;") || c.canPlayType("audio/mp4;") || c.canPlayType("audio/aac;")).replace(/^no$/, ""),
                    ΔⵠΔⲆⲆᐃᐃΔⲆ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃᐃⵠΔᐃᐃᐃⵠⵠ: !!c.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
                    ᐃⵠⵠⵠⵠᐃΔᐃⵠ: !!c.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
                    ᐃⵠⲆᐃⲆⵠⲆⵠΔ: !!(c.canPlayType("audio/x-flac;") || c.canPlayType("audio/flac;")).replace(/^no$/, "")
                };
                return b;
            },
            ΔᐃⲆᐃⵠΔⵠᐃΔ: function () {
                var b = this || f;
                var a = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(b.ⲆΔⵠⵠᐃ && b.ⲆΔⵠⵠᐃ.userAgent);
                var c = !!("ontouchend" in cj) || !!b.ⲆΔⵠⵠᐃ && b.ⲆΔⵠⵠᐃ.maxTouchPoints > 0 || !!b.ⲆΔⵠⵠᐃ && b.ⲆΔⵠⵠᐃ.ΔⵠⵠⲆⲆⵠᐃⵠⲆ > 0;
                if (!b.ΔⲆⵠⲆⲆⲆⲆ && b.Δ && (a || c)) {
                    b.ΔⲆⵠⲆⲆⲆⲆ = false;
                    if (!b.ΔⵠⲆⵠΔΔΔⵠⵠ && b.Δ.sampleRate !== 44100) {
                        b.ΔⵠⲆⵠΔΔΔⵠⵠ = true;
                        b.ⵠⲆⲆΔⲆⲆΔ();
                    }
                    b.ᐃⲆΔⵠᐃᐃᐃ = b.Δ.createBuffer(1, 1, 22050);
                    function c() {
                        f.ΔⲆⵠᐃΔⲆⲆ();
                        var a = b.Δ.createBufferSource();
                        a.buffer = b.ᐃⲆΔⵠᐃᐃᐃ;
                        a.connect(b.Δ.destination);
                        if (a.start === undefined) {
                            a.ⲆⵠⲆⵠⲆⲆΔⵠⵠ(0);
                        } else {
                            a.start(0);
                        }
                        if (typeof b.Δ.resume == "function") {
                            b.Δ.resume();
                        }
                        a.onended = function () {
                            a.disconnect(0);
                            b.ΔⲆⵠⲆⲆⲆⲆ = true;
                            b.ⵠⲆⵠⵠΔᐃᐃ = false;
                            document.removeEventListener("touchend", c, true);
                        };
                    }
                    document.addEventListener("touchend", c, true);
                    return b;
                }
            },
            ⵠⲆᐃⵠᐃᐃΔ: function () {
                var a = this;
                if (a.ⵠⲆⲆⲆΔⲆΔ && a.Δ && a.Δ.suspend !== undefined && f.ᐃⲆΔᐃΔ) {
                    for (var b = 0; b < a.ⵠⵠΔΔⲆ.length; b++) {
                        if (a.ⵠⵠΔΔⲆ[b].Δᐃⵠⵠⵠ) {
                            for (var c = 0; c < a.ⵠⵠΔΔⲆ[b].ΔⵠⵠᐃⲆ.length; c++) {
                                if (!a.ⵠⵠΔΔⲆ[b].ΔⵠⵠᐃⲆ[c].ⵠⲆⵠᐃᐃ) {
                                    return a;
                                }
                            }
                        }
                    }
                    if (a.ⵠⵠΔⵠⵠⲆⲆ) {
                        clearTimeout(a.ⵠⵠΔⵠⵠⲆⲆ);
                    }
                    a.ⵠⵠΔⵠⵠⲆⲆ = setTimeout(function () {
                        if (a.ⵠⲆⲆⲆΔⲆΔ) {
                            a.ⵠⵠΔⵠⵠⲆⲆ = null;
                            a.state = "suspending";
                            a.Δ.suspend().then(function () {
                                a.state = "suspended";
                                if (a.ΔⲆᐃΔᐃΔᐃ) {
                                    delete a.ΔⲆᐃΔᐃΔᐃ;
                                    a.ΔⲆⵠᐃΔⲆⲆ();
                                }
                            });
                        }
                    }, 30000);
                    return a;
                }
            },
            ΔⲆⵠᐃΔⲆⲆ: function () {
                var a = this;
                if (a.Δ && a.Δ.resume !== undefined && f.ᐃⲆΔᐃΔ) {
                    if (a.state === "running" && a.ⵠⵠΔⵠⵠⲆⲆ) {
                        clearTimeout(a.ⵠⵠΔⵠⵠⲆⲆ);
                        a.ⵠⵠΔⵠⵠⲆⲆ = null;
                    } else if (a.state === "suspended") {
                        a.Δ.resume().then(function () {
                            a.state = "running";
                            for (var b = 0; b < a.ⵠⵠΔΔⲆ.length; b++) {
                                a.ⵠⵠΔΔⲆ[b].ΔΔⵠⲆⵠ("resume");
                            }
                        });
                        if (a.ⵠⵠΔⵠⵠⲆⲆ) {
                            clearTimeout(a.ⵠⵠΔⵠⵠⲆⲆ);
                            a.ⵠⵠΔⵠⵠⲆⲆ = null;
                        }
                    } else if (a.state === "suspending") {
                        a.ΔⲆᐃΔᐃΔᐃ = true;
                    }
                    return a;
                }
            }
        };
        var f = new b();
        function c(a) {
            if (a.src && a.src.length !== 0) {
                this.ⲆⲆⵠⲆⲆ(a);
            } else {
                console.error(undefined);
            }
        }
        c.prototype = {
            ⲆⲆⵠⲆⲆ: function (a) {
                var b = this;
                if (!f.Δ) {
                    i();
                }
                b.ΔⲆⲆⲆᐃΔⵠΔⵠ = a.autoplay || false;
                b.ⲆⵠⲆᐃⵠⲆᐃ = typeof a.ⲆᐃΔᐃΔᐃⲆ != "string" ? a.ⲆᐃΔᐃΔᐃⲆ : [a.ⲆᐃΔᐃΔᐃⲆ];
                b.ⵠᐃⵠΔⲆᐃᐃ = a.ᐃᐃΔⲆⲆⲆΔΔᐃ || false;
                b.ⵠⵠᐃΔΔ = a.ⵠΔΔΔΔⵠⲆ || false;
                b.ΔⲆⲆⵠΔ = a.loop || false;
                b.ᐃⵠⲆᐃⵠⲆΔⵠⲆ = a.ΔⲆᐃⵠⲆᐃⵠⵠⵠ || 5;
                b.ΔⵠⲆᐃⵠΔⲆⲆᐃ = typeof a.preload != "boolean" || a.preload;
                b.ᐃᐃᐃΔΔ = a.rate || 1;
                b.ⵠⲆⲆᐃᐃ = a.Ⲇᐃ || {};
                b.ΔⵠᐃⵠⲆ = typeof a.src != "string" ? a.src : [a.src];
                b.ⲆᐃᐃⲆⵠ = a.volume !== undefined ? a.volume : 1;
                b.ⲆⲆΔⲆⵠΔⵠ = 0;
                b.ΔᐃⲆᐃⲆ = "unloaded";
                b.ΔⵠⵠᐃⲆ = [];
                b.ⲆⲆΔΔΔⵠᐃ = {};
                b.ⲆΔⵠⵠⵠ = [];
                b.ΔᐃⲆⲆᐃⵠⲆΔⵠ = a.onend ? [{
                    ΔᐃΔᐃⵠ: a.onend
                }] : [];
                b.ⲆⵠⲆⲆᐃΔᐃⲆⲆ = a.onfade ? [{
                    ΔᐃΔᐃⵠ: a.onfade
                }] : [];
                b.ⵠΔⵠⲆⲆⵠᐃⵠᐃ = a.onload ? [{
                    ΔᐃΔᐃⵠ: a.onload
                }] : [];
                b.ⵠᐃⲆᐃᐃᐃΔⵠⵠ = a.ⵠᐃᐃΔΔⲆⲆΔⵠ ? [{
                    ΔᐃΔᐃⵠ: a.ⵠᐃᐃΔΔⲆⲆΔⵠ
                }] : [];
                b.ΔᐃᐃᐃᐃⲆⵠⲆⲆ = a.onpause ? [{
                    ΔᐃΔᐃⵠ: a.onpause
                }] : [];
                b.ᐃⵠΔΔᐃᐃΔⲆΔ = a.onplay ? [{
                    ΔᐃΔᐃⵠ: a.onplay
                }] : [];
                b.ᐃᐃⵠⲆⵠᐃΔᐃⵠ = a.onstop ? [{
                    ΔᐃΔᐃⵠ: a.onstop
                }] : [];
                b.ⲆΔᐃⵠⲆᐃᐃΔᐃ = a.onmute ? [{
                    ΔᐃΔᐃⵠ: a.onmute
                }] : [];
                b.ΔⲆⲆⵠᐃΔⲆⲆⵠ = a.ΔΔᐃΔⲆⲆⲆⲆᐃ ? [{
                    ΔᐃΔᐃⵠ: a.ΔΔᐃΔⲆⲆⲆⲆᐃ
                }] : [];
                b.ⲆⲆΔᐃⲆΔΔᐃⲆ = a.ⵠᐃΔⵠᐃΔΔᐃⲆ ? [{
                    ΔᐃΔᐃⵠ: a.ⵠᐃΔⵠᐃΔΔᐃⲆ
                }] : [];
                b.ⵠⲆᐃᐃⲆⵠⵠⲆⲆ = a.ⲆⵠΔΔΔⵠⵠᐃΔ ? [{
                    ΔᐃΔᐃⵠ: a.ⲆⵠΔΔΔⵠⵠᐃΔ
                }] : [];
                b.ᐃⵠΔⲆᐃΔⵠΔⲆ = [];
                b.Δᐃⵠⵠⵠ = f.ᐃⲆΔᐃΔ && !b.ⵠᐃⵠΔⲆᐃᐃ;
                if (f.Δ !== undefined && f.Δ && f.ⵠⲆⵠⵠΔᐃᐃ) {
                    f.ΔᐃⲆᐃⵠΔⵠᐃΔ();
                }
                f.ⵠⵠΔΔⲆ.push(b);
                if (b.ΔⲆⲆⲆᐃΔⵠΔⵠ) {
                    b.ⲆΔⵠⵠⵠ.push({
                        event: "play",
                        action: function () {
                            b.play();
                        }
                    });
                }
                if (b.ΔⵠⲆᐃⵠΔⲆⲆᐃ) {
                    b.load();
                }
                return b;
            },
            load: function () {
                var b = this;
                var c = null;
                if (!f.ⲆⲆᐃΔᐃⲆᐃ) {
                    if (typeof b.ΔⵠᐃⵠⲆ == "string") {
                        b.ΔⵠᐃⵠⲆ = [b.ΔⵠᐃⵠⲆ];
                    }
                    for (var e = 0; e < b.ΔⵠᐃⵠⲆ.length; e++) {
                        var g;
                        var i;
                        if (b.ⲆⵠⲆᐃⵠⲆᐃ && b.ⲆⵠⲆᐃⵠⲆᐃ[e]) {
                            g = b.ⲆⵠⲆᐃⵠⲆᐃ[e];
                        } else {
                            if (typeof (i = b.ΔⵠᐃⵠⲆ[e]) != "string") {
                                b.ΔΔⵠⲆⵠ("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                                continue;
                            }
                            if (!(g = /^data:audio\/([^;,]+);/i.exec(i))) {
                                g = /\.([^.]+)$/.exec(i.split("?", 1)[0]);
                            }
                            g &&= g[1].toLowerCase();
                        }
                        if (!g) {
                            console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
                        }
                        if (g && f.ⲆⵠΔΔⲆᐃⲆΔᐃ(g)) {
                            c = b.ΔⵠᐃⵠⲆ[e];
                            break;
                        }
                    }
                    if (c) {
                        b.ΔⵠᐃⵠⲆ = c;
                        b.ΔᐃⲆᐃⲆ = "loading";
                        if (cj.location.protocol === "https:" && c.slice(0, 5) === "http:") {
                            b.ⵠᐃⵠΔⲆᐃᐃ = true;
                            b.Δᐃⵠⵠⵠ = false;
                        }
                        new d(b);
                        if (b.Δᐃⵠⵠⵠ) {
                            a(b);
                        }
                        return b;
                    } else {
                        b.ΔΔⵠⲆⵠ("loaderror", null, "No codec support for selected audio sources.");
                        return;
                    }
                }
                b.ΔΔⵠⲆⵠ("loaderror", null, "No audio support.");
            },
            play: function (i, j) {
                var k = this;
                var n = null;
                if (typeof i == "number") {
                    n = i;
                    i = null;
                } else {
                    if (typeof i == "string" && k.ΔᐃⲆᐃⲆ === "loaded" && !k.ⵠⲆⲆᐃᐃ[i]) {
                        return null;
                    }
                    if (i === undefined) {
                        i = "__default";
                        var o = 0;
                        for (var p = 0; p < k.ΔⵠⵠᐃⲆ.length; p++) {
                            if (k.ΔⵠⵠᐃⲆ[p].ⵠⲆⵠᐃᐃ && !k.ΔⵠⵠᐃⲆ[p].ΔᐃΔᐃΔ) {
                                o++;
                                n = k.ΔⵠⵠᐃⲆ[p].ᐃᐃⵠⵠ;
                            }
                        }
                        if (o === 1) {
                            i = null;
                        } else {
                            n = null;
                        }
                    }
                }
                var q = n ? k.ⵠΔᐃᐃΔ(n) : k.ⲆᐃᐃⵠᐃᐃΔⵠΔ();
                if (!q) {
                    return null;
                }
                if (n && !i) {
                    i = q.ⵠⲆⲆᐃᐃ || "__default";
                }
                if (k.ΔᐃⲆᐃⲆ !== "loaded") {
                    q.ⵠⲆⲆᐃᐃ = i;
                    q.ΔᐃΔᐃΔ = false;
                    var h = q.ᐃᐃⵠⵠ;
                    k.ⲆΔⵠⵠⵠ.push({
                        event: "play",
                        action: function () {
                            k.play(h);
                        }
                    });
                    return h;
                }
                if (n && !q.ⵠⲆⵠᐃᐃ) {
                    if (!j) {
                        setTimeout(function () {
                            k.ΔΔⵠⲆⵠ("play", q.ᐃᐃⵠⵠ);
                        }, 0);
                    }
                    return q.ᐃᐃⵠⵠ;
                }
                if (k.Δᐃⵠⵠⵠ) {
                    f.ΔⲆⵠᐃΔⲆⲆ();
                }
                var l = Math.max(0, q.ⵠⵠⲆΔⵠ > 0 ? q.ⵠⵠⲆΔⵠ : k.ⵠⲆⲆᐃᐃ[i][0] / 1000);
                var g = Math.max(0, (k.ⵠⲆⲆᐃᐃ[i][0] + k.ⵠⲆⲆᐃᐃ[i][1]) / 1000 - l);
                var t = g * 1000 / Math.abs(q.ᐃᐃᐃΔΔ);
                q.ⵠⲆⵠᐃᐃ = false;
                q.ΔᐃΔᐃΔ = false;
                q.ⵠⲆⲆᐃᐃ = i;
                q.ⵠⵠⲆΔⵠ = l;
                q.ⵠⵠᐃΔⲆ = k.ⵠⲆⲆᐃᐃ[i][0] / 1000;
                q.ᐃⲆᐃⵠⵠᐃⲆ = (k.ⵠⲆⲆᐃᐃ[i][0] + k.ⵠⲆⲆᐃᐃ[i][1]) / 1000;
                q.ΔⲆⲆⵠΔ = !!q.ΔⲆⲆⵠΔ || !!k.ⵠⲆⲆᐃᐃ[i][2];
                var b = q.Δⵠⵠᐃ;
                if (k.Δᐃⵠⵠⵠ) {
                    function a() {
                        k.ⲆᐃⲆΔⵠⲆⵠⲆⵠ(q);
                        var a = q.ⵠⵠᐃΔΔ || k.ⵠⵠᐃΔΔ ? 0 : q.ⲆᐃᐃⲆⵠ;
                        b.gain.setValueAtTime(a, f.Δ.currentTime);
                        q.ΔΔⵠΔᐃⲆΔ = f.Δ.currentTime;
                        if (b.ᐃⵠᐃΔᐃ.start === undefined) {
                            if (q.ΔⲆⲆⵠΔ) {
                                b.ᐃⵠᐃΔᐃ.ⲆᐃΔⵠⲆᐃΔᐃᐃ(0, l, 86400);
                            } else {
                                b.ᐃⵠᐃΔᐃ.ⲆᐃΔⵠⲆᐃΔᐃᐃ(0, l, g);
                            }
                        } else if (q.ΔⲆⲆⵠΔ) {
                            b.ᐃⵠᐃΔᐃ.start(0, l, 86400);
                        } else {
                            b.ᐃⵠᐃΔᐃ.start(0, l, g);
                        }
                        if (t !== Infinity) {
                            k.ⲆⲆΔΔΔⵠᐃ[q.ᐃᐃⵠⵠ] = setTimeout(k.ΔᐃΔᐃΔ.bind(k, q), t);
                        }
                        if (!j) {
                            setTimeout(function () {
                                k.ΔΔⵠⲆⵠ("play", q.ᐃᐃⵠⵠ);
                            }, 0);
                        }
                    }
                    var d = f.state === "running";
                    if (k.ΔᐃⲆᐃⲆ === "loaded" && d) {
                        a();
                    } else {
                        var m = d || k.ΔᐃⲆᐃⲆ !== "loaded" ? "load" : "resume";
                        k.once(m, a, d ? q.ᐃᐃⵠⵠ : null);
                        k.ⲆⵠⲆⲆΔⲆⵠ(q.ᐃᐃⵠⵠ);
                    }
                } else {
                    function a() {
                        b.currentTime = l;
                        b.muted = q.ⵠⵠᐃΔΔ || k.ⵠⵠᐃΔΔ || f.ⵠⵠᐃΔΔ || b.muted;
                        b.volume = q.ⲆᐃᐃⲆⵠ * f.volume();
                        b.playbackRate = q.ᐃᐃᐃΔΔ;
                        b.play();
                        if (t !== Infinity) {
                            k.ⲆⲆΔΔΔⵠᐃ[q.ᐃᐃⵠⵠ] = setTimeout(k.ΔᐃΔᐃΔ.bind(k, q), t);
                        }
                        if (!j) {
                            k.ΔΔⵠⲆⵠ("play", q.ᐃᐃⵠⵠ);
                        }
                    }
                    var c = k.ΔᐃⲆᐃⲆ === "loaded" && (cj && cj.ⲆⲆΔᐃⵠⵠⲆⵠΔ || !b.readyState && f.ⲆΔⵠⵠᐃ.ⵠᐃᐃⲆⵠΔᐃᐃᐃ);
                    if (b.readyState === 4 || c) {
                        a();
                    } else {
                        function c() {
                            a();
                            b.removeEventListener(f.ⲆΔΔΔⵠⲆⵠ, c, false);
                        }
                        b.addEventListener(f.ⲆΔΔΔⵠⲆⵠ, c, false);
                        k.ⲆⵠⲆⲆΔⲆⵠ(q.ᐃᐃⵠⵠ);
                    }
                }
                return q.ᐃᐃⵠⵠ;
            },
            pause: function (a) {
                var b = this;
                if (b.ΔᐃⲆᐃⲆ !== "loaded") {
                    b.ⲆΔⵠⵠⵠ.push({
                        event: "pause",
                        action: function () {
                            b.pause(a);
                        }
                    });
                    return b;
                }
                for (var c = b.ᐃΔᐃᐃΔ(a), d = 0; d < c.length; d++) {
                    b.ⲆⵠⲆⲆΔⲆⵠ(c[d]);
                    var e = b.ⵠΔᐃᐃΔ(c[d]);
                    if (e && !e.ⵠⲆⵠᐃᐃ && (e.ⵠⵠⲆΔⵠ = b.ᐃΔⵠᐃⲆΔᐃ(c[d]), e.ⲆⵠⵠΔΔΔᐃ = 0, e.ⵠⲆⵠᐃᐃ = true, b.ᐃΔⵠΔⵠᐃⵠ(c[d]), e.Δⵠⵠᐃ)) {
                        if (b.Δᐃⵠⵠⵠ) {
                            if (!e.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ) {
                                continue;
                            }
                            if (e.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.stop === undefined) {
                                e.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.ⵠⵠⲆᐃⵠⲆⲆⲆⲆ(0);
                            } else {
                                e.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.stop(0);
                            }
                            b.ΔᐃⵠⵠΔΔⲆ(e.Δⵠⵠᐃ);
                        } else if (!isNaN(e.Δⵠⵠᐃ.duration) || e.Δⵠⵠᐃ.duration === Infinity) {
                            e.Δⵠⵠᐃ.pause();
                        }
                    }
                    if (!arguments[1]) {
                        b.ΔΔⵠⲆⵠ("pause", e ? e.ᐃᐃⵠⵠ : null);
                    }
                }
                return b;
            },
            stop: function (b, c) {
                var d = this;
                if (d.ΔᐃⲆᐃⲆ !== "loaded") {
                    d.ⲆΔⵠⵠⵠ.push({
                        event: "stop",
                        action: function () {
                            d.stop(b);
                        }
                    });
                    return d;
                }
                for (var e = d.ᐃΔᐃᐃΔ(b), f = 0; f < e.length; f++) {
                    d.ⲆⵠⲆⲆΔⲆⵠ(e[f]);
                    var g = d.ⵠΔᐃᐃΔ(e[f]);
                    if (g) {
                        g.ⵠⵠⲆΔⵠ = g.ⵠⵠᐃΔⲆ || 0;
                        g.ⲆⵠⵠΔΔΔᐃ = 0;
                        g.ⵠⲆⵠᐃᐃ = true;
                        g.ΔᐃΔᐃΔ = true;
                        d.ᐃΔⵠΔⵠᐃⵠ(e[f]);
                        if (g.Δⵠⵠᐃ) {
                            if (d.Δᐃⵠⵠⵠ) {
                                if (g.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ) {
                                    if (g.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.stop === undefined) {
                                        g.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.ⵠⵠⲆᐃⵠⲆⲆⲆⲆ(0);
                                    } else {
                                        g.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.stop(0);
                                    }
                                    d.ΔᐃⵠⵠΔΔⲆ(g.Δⵠⵠᐃ);
                                }
                            } else if (!isNaN(g.Δⵠⵠᐃ.duration) || g.Δⵠⵠᐃ.duration === Infinity) {
                                g.Δⵠⵠᐃ.currentTime = g.ⵠⵠᐃΔⲆ || 0;
                                g.Δⵠⵠᐃ.pause();
                            }
                        }
                        if (!c) {
                            d.ΔΔⵠⲆⵠ("stop", g.ᐃᐃⵠⵠ);
                        }
                    }
                }
                return d;
            },
            ⵠΔΔΔΔⵠⲆ: function (b, c) {
                var d = this;
                if (d.ΔᐃⲆᐃⲆ !== "loaded") {
                    d.ⲆΔⵠⵠⵠ.push({
                        event: "mute",
                        action: function () {
                            d.ⵠΔΔΔΔⵠⲆ(b, c);
                        }
                    });
                    return d;
                }
                if (c === undefined) {
                    if (typeof b != "boolean") {
                        return d.ⵠⵠᐃΔΔ;
                    }
                    d.ⵠⵠᐃΔΔ = b;
                }
                for (var e = d.ᐃΔᐃᐃΔ(c), g = 0; g < e.length; g++) {
                    var h = d.ⵠΔᐃᐃΔ(e[g]);
                    if (h) {
                        h.ⵠⵠᐃΔΔ = b;
                        if (d.Δᐃⵠⵠⵠ && h.Δⵠⵠᐃ) {
                            h.Δⵠⵠᐃ.gain.setValueAtTime(b ? 0 : h.ⲆᐃᐃⲆⵠ, f.Δ.currentTime);
                        } else if (h.Δⵠⵠᐃ) {
                            h.Δⵠⵠᐃ.muted = !!f.ⵠⵠᐃΔΔ || b;
                        }
                        d.ΔΔⵠⲆⵠ("mute", h.ᐃᐃⵠⵠ);
                    }
                }
                return d;
            },
            volume: function () {
                var b;
                var c;
                var d;
                var g = this;
                var h = arguments;
                if (h.length === 0) {
                    return g.ⲆᐃᐃⲆⵠ;
                }
                if (h.length === 1 || h.length === 2 && h[1] === undefined) {
                    if (g.ᐃΔᐃᐃΔ().indexOf(h[0]) >= 0) {
                        c = parseInt(h[0], 10);
                    } else {
                        b = parseFloat(h[0]);
                    }
                } else if (h.length >= 2) {
                    b = parseFloat(h[0]);
                    c = parseInt(h[1], 10);
                }
                if (b === undefined || b < 0 || b > 1) {
                    if (d = c ? g.ⵠΔᐃᐃΔ(c) : g.ΔⵠⵠᐃⲆ[0]) {
                        return d.ⲆᐃᐃⲆⵠ;
                    } else {
                        return 0;
                    }
                }
                if (g.ΔᐃⲆᐃⲆ !== "loaded") {
                    g.ⲆΔⵠⵠⵠ.push({
                        event: "volume",
                        action: function () {
                            g.volume.apply(g, h);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ⲆᐃᐃⲆⵠ = b;
                }
                c = g.ᐃΔᐃᐃΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ⵠΔᐃᐃΔ(c[a])) {
                        d.ⲆᐃᐃⲆⵠ = b;
                        if (!h[2]) {
                            g.ᐃΔⵠΔⵠᐃⵠ(c[a]);
                        }
                        if (g.Δᐃⵠⵠⵠ && d.Δⵠⵠᐃ && !d.ⵠⵠᐃΔΔ) {
                            d.Δⵠⵠᐃ.gain.setValueAtTime(b, f.Δ.currentTime);
                        } else if (d.Δⵠⵠᐃ && !d.ⵠⵠᐃΔΔ) {
                            d.Δⵠⵠᐃ.volume = b * f.volume();
                        }
                        g.ΔΔⵠⲆⵠ("volume", d.ᐃᐃⵠⵠ);
                    }
                }
                return g;
            },
            fade: function (c, e, i, j) {
                var k = this;
                var a = Math.abs(c - e);
                var n = c > e ? "out" : "in";
                var o = a / 0.01;
                var p = o > 0 ? i / o : i;
                if (p < 4) {
                    o = Math.ceil(o / (4 / p));
                    p = 4;
                }
                if (k.ΔᐃⲆᐃⲆ !== "loaded") {
                    k.ⲆΔⵠⵠⵠ.push({
                        event: "fade",
                        action: function () {
                            k.fade(c, e, i, j);
                        }
                    });
                    return k;
                }
                k.volume(c, j);
                for (var q = k.ᐃΔᐃᐃΔ(j), g = 0; g < q.length; g++) {
                    var r = k.ⵠΔᐃᐃΔ(q[g]);
                    if (r) {
                        if (!j) {
                            k.ᐃΔⵠΔⵠᐃⵠ(q[g]);
                        }
                        if (k.Δᐃⵠⵠⵠ && !r.ⵠⵠᐃΔΔ) {
                            var s = f.Δ.currentTime;
                            var t = s + i / 1000;
                            r.ⲆᐃᐃⲆⵠ = c;
                            r.Δⵠⵠᐃ.gain.setValueAtTime(c, s);
                            r.Δⵠⵠᐃ.gain.linearRampToValueAtTime(e, t);
                        }
                        var w = c;
                        r.ⵠΔΔⲆⵠⲆᐃ = setInterval(function (a, b) {
                            if (o > 0) {
                                w += n === "in" ? 0.01 : -0.01;
                            }
                            w = Math.max(0, w);
                            w = Math.min(1, w);
                            w = Math.round(w * 100) / 100;
                            if (k.Δᐃⵠⵠⵠ) {
                                if (j === undefined) {
                                    k.ⲆᐃᐃⲆⵠ = w;
                                }
                                b.ⲆᐃᐃⲆⵠ = w;
                            } else {
                                k.volume(w, a, true);
                            }
                            if (e < c && w <= e || e > c && w >= e) {
                                clearInterval(b.ⵠΔΔⲆⵠⲆᐃ);
                                b.ⵠΔΔⲆⵠⲆᐃ = null;
                                k.volume(e, a);
                                k.ΔΔⵠⲆⵠ("fade", a);
                            }
                        }.bind(k, q[g], r), p);
                    }
                }
                return k;
            },
            ᐃΔⵠΔⵠᐃⵠ: function (a) {
                var b = this;
                var c = b.ⵠΔᐃᐃΔ(a);
                if (c && c.ⵠΔΔⲆⵠⲆᐃ) {
                    if (b.Δᐃⵠⵠⵠ) {
                        c.Δⵠⵠᐃ.gain.cancelScheduledValues(f.Δ.currentTime);
                    }
                    clearInterval(c.ⵠΔΔⲆⵠⲆᐃ);
                    c.ⵠΔΔⲆⵠⲆᐃ = null;
                    b.ΔΔⵠⲆⵠ("fade", a);
                }
                return b;
            },
            loop: function () {
                var b;
                var c;
                var d;
                var f = this;
                var g = arguments;
                if (g.length === 0) {
                    return f.ΔⲆⲆⵠΔ;
                }
                if (g.length === 1) {
                    if (typeof g[0] != "boolean") {
                        return !!(d = f.ⵠΔᐃᐃΔ(parseInt(g[0], 10))) && d.ΔⲆⲆⵠΔ;
                    }
                    b = g[0];
                    f.ΔⲆⲆⵠΔ = b;
                } else if (g.length === 2) {
                    b = g[0];
                    c = parseInt(g[1], 10);
                }
                for (var h = f.ᐃΔᐃᐃΔ(c), a = 0; a < h.length; a++) {
                    if (d = f.ⵠΔᐃᐃΔ(h[a])) {
                        d.ΔⲆⲆⵠΔ = b;
                        if (f.Δᐃⵠⵠⵠ && d.Δⵠⵠᐃ && d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ) {
                            d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loop = b;
                            if (b) {
                                d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loopStart = d.ⵠⵠᐃΔⲆ || 0;
                                d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loopEnd = d.ᐃⲆᐃⵠⵠᐃⲆ;
                            }
                        }
                    }
                }
                return f;
            },
            rate: function () {
                var b;
                var c;
                var d;
                var g = this;
                var i = arguments;
                if (i.length === 0) {
                    c = g.ΔⵠⵠᐃⲆ[0].ᐃᐃⵠⵠ;
                } else if (i.length === 1) {
                    if (g.ᐃΔᐃᐃΔ().indexOf(i[0]) >= 0) {
                        c = parseInt(i[0], 10);
                    } else {
                        b = parseFloat(i[0]);
                    }
                } else if (i.length === 2) {
                    b = parseFloat(i[0]);
                    c = parseInt(i[1], 10);
                }
                if (typeof b != "number") {
                    if (d = g.ⵠΔᐃᐃΔ(c)) {
                        return d.ᐃᐃᐃΔΔ;
                    } else {
                        return g.ᐃᐃᐃΔΔ;
                    }
                }
                if (g.ΔᐃⲆᐃⲆ !== "loaded") {
                    g.ⲆΔⵠⵠⵠ.push({
                        event: "rate",
                        action: function () {
                            g.rate.apply(g, i);
                        }
                    });
                    return g;
                }
                if (c === undefined) {
                    g.ᐃᐃᐃΔΔ = b;
                }
                c = g.ᐃΔᐃᐃΔ(c);
                for (var a = 0; a < c.length; a++) {
                    if (d = g.ⵠΔᐃᐃΔ(c[a])) {
                        d.ⲆⵠⵠΔΔΔᐃ = g.ᐃΔⵠᐃⲆΔᐃ(c[a]);
                        d.ΔΔⵠΔᐃⲆΔ = g.Δᐃⵠⵠⵠ ? f.Δ.currentTime : d.ΔΔⵠΔᐃⲆΔ;
                        d.ᐃᐃᐃΔΔ = b;
                        if (g.Δᐃⵠⵠⵠ && d.Δⵠⵠᐃ && d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ) {
                            d.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.playbackRate.value = b;
                        } else if (d.Δⵠⵠᐃ) {
                            d.Δⵠⵠᐃ.playbackRate = b;
                        }
                        var j = g.ᐃΔⵠᐃⲆΔᐃ(c[a]);
                        var k = ((g.ⵠⲆⲆᐃᐃ[d.ⵠⲆⲆᐃᐃ][0] + g.ⵠⲆⲆᐃᐃ[d.ⵠⲆⲆᐃᐃ][1]) / 1000 - j) * 1000 / Math.abs(d.ᐃᐃᐃΔΔ);
                        if (!!g.ⲆⲆΔΔΔⵠᐃ[c[a]] || !d.ⵠⲆⵠᐃᐃ) {
                            g.ⲆⵠⲆⲆΔⲆⵠ(c[a]);
                            g.ⲆⲆΔΔΔⵠᐃ[c[a]] = setTimeout(g.ΔᐃΔᐃΔ.bind(g, d), k);
                        }
                        g.ΔΔⵠⲆⵠ("rate", d.ᐃᐃⵠⵠ);
                    }
                }
                return g;
            },
            ᐃΔⵠᐃⲆΔᐃ: function () {
                var b;
                var c;
                var d = this;
                var g = arguments;
                if (g.length === 0) {
                    c = d.ΔⵠⵠᐃⲆ[0].ᐃᐃⵠⵠ;
                } else if (g.length === 1) {
                    if (d.ᐃΔᐃᐃΔ().indexOf(g[0]) >= 0) {
                        c = parseInt(g[0], 10);
                    } else {
                        c = d.ΔⵠⵠᐃⲆ[0].ᐃᐃⵠⵠ;
                        b = parseFloat(g[0]);
                    }
                } else if (g.length === 2) {
                    b = parseFloat(g[0]);
                    c = parseInt(g[1], 10);
                }
                if (c === undefined) {
                    return d;
                }
                if (d.ΔᐃⲆᐃⲆ !== "loaded") {
                    d.ⲆΔⵠⵠⵠ.push({
                        event: "seek",
                        action: function () {
                            d.ᐃΔⵠᐃⲆΔᐃ.apply(d, g);
                        }
                    });
                    return d;
                }
                var i = d.ⵠΔᐃᐃΔ(c);
                if (i) {
                    if (typeof b != "number" || b < 0) {
                        if (d.Δᐃⵠⵠⵠ) {
                            var a = d.ΔᐃⵠᐃⲆⲆᐃ(c) ? f.Δ.currentTime - i.ΔΔⵠΔᐃⲆΔ : 0;
                            var j = i.ⲆⵠⵠΔΔΔᐃ ? i.ⲆⵠⵠΔΔΔᐃ - i.ⵠⵠⲆΔⵠ : 0;
                            return i.ⵠⵠⲆΔⵠ + (j + a * Math.abs(i.ᐃᐃᐃΔΔ));
                        }
                        return i.Δⵠⵠᐃ.currentTime;
                    }
                    var k = d.ΔᐃⵠᐃⲆⲆᐃ(c);
                    if (k) {
                        d.pause(c, true);
                    }
                    i.ⵠⵠⲆΔⵠ = b;
                    i.ΔᐃΔᐃΔ = false;
                    d.ⲆⵠⲆⲆΔⲆⵠ(c);
                    if (k) {
                        d.play(c, true);
                    }
                    if (!d.Δᐃⵠⵠⵠ && i.Δⵠⵠᐃ) {
                        i.Δⵠⵠᐃ.currentTime = b;
                    }
                    d.ΔΔⵠⲆⵠ("seek", c);
                }
                return d;
            },
            ΔᐃⵠᐃⲆⲆᐃ: function (a) {
                var b = this;
                if (typeof a == "number") {
                    var c = b.ⵠΔᐃᐃΔ(a);
                    return !!c && !c.ⵠⲆⵠᐃᐃ;
                }
                for (var d = 0; d < b.ΔⵠⵠᐃⲆ.length; d++) {
                    if (!b.ΔⵠⵠᐃⲆ[d].ⵠⲆⵠᐃᐃ) {
                        return true;
                    }
                }
                return false;
            },
            duration: function (a) {
                var b = this;
                var c = b.ⲆⲆΔⲆⵠΔⵠ;
                var d = b.ⵠΔᐃᐃΔ(a);
                if (d) {
                    c = b.ⵠⲆⲆᐃᐃ[d.ⵠⲆⲆᐃᐃ][1] / 1000;
                }
                return c;
            },
            state: function () {
                return this.ΔᐃⲆᐃⲆ;
            },
            ⵠⲆⲆΔⲆⲆΔ: function () {
                var a = this;
                for (var b = a.ΔⵠⵠᐃⲆ, c = 0; c < b.length; c++) {
                    if (!b[c].ⵠⲆⵠᐃᐃ) {
                        a.stop(b[c].ᐃᐃⵠⵠ);
                    }
                    if (!a.Δᐃⵠⵠⵠ) {
                        if (!/MSIE |Trident\//.test(f.ⲆΔⵠⵠᐃ && f.ⲆΔⵠⵠᐃ.userAgent)) {
                            b[c].Δⵠⵠᐃ.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                        }
                        b[c].Δⵠⵠᐃ.removeEventListener("error", b[c].ᐃⲆᐃΔⲆⲆᐃ, false);
                        b[c].Δⵠⵠᐃ.removeEventListener(f.ⲆΔΔΔⵠⲆⵠ, b[c].ᐃⲆⲆⵠᐃⲆⵠ, false);
                    }
                    delete b[c].Δⵠⵠᐃ;
                    a.ⲆⵠⲆⲆΔⲆⵠ(b[c].ᐃᐃⵠⵠ);
                    var d = f.ⵠⵠΔΔⲆ.indexOf(a);
                    if (d >= 0) {
                        f.ⵠⵠΔΔⲆ.splice(d, 1);
                    }
                }
                var g = true;
                for (c = 0; c < f.ⵠⵠΔΔⲆ.length; c++) {
                    if (f.ⵠⵠΔΔⲆ[c].ΔⵠᐃⵠⲆ === a.ΔⵠᐃⵠⲆ) {
                        g = false;
                        break;
                    }
                }
                if (j && g) {
                    delete j[a.ΔⵠᐃⵠⲆ];
                }
                f.ⲆⲆᐃΔᐃⲆᐃ = false;
                a.ΔᐃⲆᐃⲆ = "unloaded";
                a.ΔⵠⵠᐃⲆ = [];
                a = null;
                return null;
            },
            on: function (a, b, c, d) {
                var e = this["_on" + a];
                if (typeof b == "function") {
                    e.push(d ? {
                        id: c,
                        ΔᐃΔᐃⵠ: b,
                        once: d
                    } : {
                        id: c,
                        ΔᐃΔᐃⵠ: b
                    });
                }
                return this;
            },
            ΔⲆⲆᐃⲆᐃⵠᐃⲆ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                var g = 0;
                if (typeof c == "number") {
                    d = c;
                    c = null;
                }
                if (c || d) {
                    for (g = 0; g < f.length; g++) {
                        var h = d === f[g].id;
                        if (c === f[g].ΔᐃΔᐃⵠ && h || !c && h) {
                            f.splice(g, 1);
                            break;
                        }
                    }
                } else if (b) {
                    e["_on" + b] = [];
                } else {
                    var j = Object.keys(e);
                    for (g = 0; g < j.length; g++) {
                        if (j[g].indexOf("_on") === 0 && Array.isArray(e[j[g]])) {
                            e[j[g]] = [];
                        }
                    }
                }
                return e;
            },
            once: function (a, b, c) {
                this.on(a, b, c, 1);
                return this;
            },
            ΔΔⵠⲆⵠ: function (b, c, d) {
                var e = this;
                var f = e["_on" + b];
                for (var g = f.length - 1; g >= 0; g--) {
                    if (!f[g].id || f[g].id === c || b === "load") {
                        setTimeout(function (a) {
                            a.call(this, c, d);
                        }.bind(e, f[g].ΔᐃΔᐃⵠ), 0);
                        if (f[g].once) {
                            e.ΔⲆⲆᐃⲆᐃⵠᐃⲆ(b, f[g].ΔᐃΔᐃⵠ, f[g].id);
                        }
                    }
                }
                return e;
            },
            ⵠⵠⲆⵠΔⲆⵠ: function () {
                var a = this;
                if (a.ⲆΔⵠⵠⵠ.length > 0) {
                    var b = a.ⲆΔⵠⵠⵠ[0];
                    a.once(b.event, function () {
                        a.ⲆΔⵠⵠⵠ.shift();
                        a.ⵠⵠⲆⵠΔⲆⵠ();
                    });
                    b.action();
                }
                return a;
            },
            ΔᐃΔᐃΔ: function (b) {
                var c = this;
                var d = b.ⵠⲆⲆᐃᐃ;
                if (!c.Δᐃⵠⵠⵠ && c.Δⵠⵠᐃ && !c.Δⵠⵠᐃ.ended) {
                    setTimeout(c.ΔᐃΔᐃΔ.bind(c, b), 100);
                    return c;
                }
                var e = !!b.ΔⲆⲆⵠΔ || !!c.ⵠⲆⲆᐃᐃ[d][2];
                c.ΔΔⵠⲆⵠ("end", b.ᐃᐃⵠⵠ);
                if (!c.Δᐃⵠⵠⵠ && e) {
                    c.stop(b.ᐃᐃⵠⵠ, true).play(b.ᐃᐃⵠⵠ);
                }
                if (c.Δᐃⵠⵠⵠ && e) {
                    c.ΔΔⵠⲆⵠ("play", b.ᐃᐃⵠⵠ);
                    b.ⵠⵠⲆΔⵠ = b.ⵠⵠᐃΔⲆ || 0;
                    b.ⲆⵠⵠΔΔΔᐃ = 0;
                    b.ΔΔⵠΔᐃⲆΔ = f.Δ.currentTime;
                    var g = (b.ᐃⲆᐃⵠⵠᐃⲆ - b.ⵠⵠᐃΔⲆ) * 1000 / Math.abs(b.ᐃᐃᐃΔΔ);
                    c.ⲆⲆΔΔΔⵠᐃ[b.ᐃᐃⵠⵠ] = setTimeout(c.ΔᐃΔᐃΔ.bind(c, b), g);
                }
                if (c.Δᐃⵠⵠⵠ && !e) {
                    b.ⵠⲆⵠᐃᐃ = true;
                    b.ΔᐃΔᐃΔ = true;
                    b.ⵠⵠⲆΔⵠ = b.ⵠⵠᐃΔⲆ || 0;
                    b.ⲆⵠⵠΔΔΔᐃ = 0;
                    c.ⲆⵠⲆⲆΔⲆⵠ(b.ᐃᐃⵠⵠ);
                    c.ΔᐃⵠⵠΔΔⲆ(b.Δⵠⵠᐃ);
                    f.ⵠⲆᐃⵠᐃᐃΔ();
                }
                if (!c.Δᐃⵠⵠⵠ && !e) {
                    c.stop(b.ᐃᐃⵠⵠ);
                }
                return c;
            },
            ⲆⵠⲆⲆΔⲆⵠ: function (a) {
                var b = this;
                if (b.ⲆⲆΔΔΔⵠᐃ[a]) {
                    clearTimeout(b.ⲆⲆΔΔΔⵠᐃ[a]);
                    delete b.ⲆⲆΔΔΔⵠᐃ[a];
                }
                return b;
            },
            ⵠΔᐃᐃΔ: function (a) {
                for (var b = this, c = 0; c < b.ΔⵠⵠᐃⲆ.length; c++) {
                    if (a === b.ΔⵠⵠᐃⲆ[c].ᐃᐃⵠⵠ) {
                        return b.ΔⵠⵠᐃⲆ[c];
                    }
                }
                return null;
            },
            ⲆᐃᐃⵠᐃᐃΔⵠΔ: function () {
                var a = this;
                a.ᐃΔΔⵠᐃᐃΔΔᐃ();
                for (var b = 0; b < a.ΔⵠⵠᐃⲆ.length; b++) {
                    if (a.ΔⵠⵠᐃⲆ[b].ΔᐃΔᐃΔ) {
                        return a.ΔⵠⵠᐃⲆ[b].reset();
                    }
                }
                return new d(a);
            },
            ᐃΔΔⵠᐃᐃΔΔᐃ: function () {
                var a = this;
                var b = a.ᐃⵠⲆᐃⵠⲆΔⵠⲆ;
                var c = 0;
                var d = 0;
                if (a.ΔⵠⵠᐃⲆ.length >= b) {
                    for (d = 0; d < a.ΔⵠⵠᐃⲆ.length; d++) {
                        if (a.ΔⵠⵠᐃⲆ[d].ΔᐃΔᐃΔ) {
                            c++;
                        }
                    }
                    for (d = a.ΔⵠⵠᐃⲆ.length - 1; d >= 0; d--) {
                        if (c <= b) {
                            return;
                        }
                        if (a.ΔⵠⵠᐃⲆ[d].ΔᐃΔᐃΔ) {
                            if (a.Δᐃⵠⵠⵠ && a.ΔⵠⵠᐃⲆ[d].Δⵠⵠᐃ) {
                                a.ΔⵠⵠᐃⲆ[d].Δⵠⵠᐃ.disconnect(0);
                            }
                            a.ΔⵠⵠᐃⲆ.splice(d, 1);
                            c--;
                        }
                    }
                }
            },
            ᐃΔᐃᐃΔ: function (a) {
                if (a === undefined) {
                    var b = [];
                    for (var c = 0; c < this.ΔⵠⵠᐃⲆ.length; c++) {
                        b.push(this.ΔⵠⵠᐃⲆ[c].ᐃᐃⵠⵠ);
                    }
                    return b;
                }
                return [a];
            },
            ⲆᐃⲆΔⵠⲆⵠⲆⵠ: function (a) {
                a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ = f.Δ.createBufferSource();
                a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.buffer = j[this.ΔⵠᐃⵠⲆ];
                if (a.ⲆΔⲆΔⵠ) {
                    a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.connect(a.ⲆΔⲆΔⵠ);
                } else {
                    a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.connect(a.Δⵠⵠᐃ);
                }
                a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loop = a.ΔⲆⲆⵠΔ;
                if (a.ΔⲆⲆⵠΔ) {
                    a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loopStart = a.ⵠⵠᐃΔⲆ || 0;
                    a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.loopEnd = a.ᐃⲆᐃⵠⵠᐃⲆ;
                }
                a.Δⵠⵠᐃ.ᐃⵠᐃΔᐃ.playbackRate.value = a.ᐃᐃᐃΔΔ;
                return this;
            },
            ΔᐃⵠⵠΔΔⲆ: function (a) {
                var b = this;
                if (b.ᐃⲆΔⵠᐃᐃᐃ) {
                    a.ᐃⵠᐃΔᐃ.onended = null;
                    a.ᐃⵠᐃΔᐃ.disconnect(0);
                    try {
                        a.ᐃⵠᐃΔᐃ.buffer = b.ᐃⲆΔⵠᐃᐃᐃ;
                    } catch (a) { }
                }
                a.ᐃⵠᐃΔᐃ = null;
                return b;
            }
        };
        function d(a) {
            this.ᐃᐃⲆᐃᐃΔᐃ = a;
            this.ⲆⲆⵠⲆⲆ();
        }
        d.prototype = {
            ⲆⲆⵠⲆⲆ: function () {
                var a = this;
                var b = a.ᐃᐃⲆᐃᐃΔᐃ;
                a.ⵠⵠᐃΔΔ = b.ⵠⵠᐃΔΔ;
                a.ΔⲆⲆⵠΔ = b.ΔⲆⲆⵠΔ;
                a.ⲆᐃᐃⲆⵠ = b.ⲆᐃᐃⲆⵠ;
                a.ᐃᐃᐃΔΔ = b.ᐃᐃᐃΔΔ;
                a.ⵠⵠⲆΔⵠ = 0;
                a.ⵠⲆⵠᐃᐃ = true;
                a.ΔᐃΔᐃΔ = true;
                a.ⵠⲆⲆᐃᐃ = "__default";
                a.ᐃᐃⵠⵠ = ++f.ⵠⲆⲆⵠⵠᐃᐃ;
                b.ΔⵠⵠᐃⲆ.push(a);
                a.create();
                return a;
            },
            create: function () {
                var a = this;
                var b = a.ᐃᐃⲆᐃᐃΔᐃ;
                var c = f.ⵠⵠᐃΔΔ || a.ⵠⵠᐃΔΔ || a.ᐃᐃⲆᐃᐃΔᐃ.ⵠⵠᐃΔΔ ? 0 : a.ⲆᐃᐃⲆⵠ;
                if (b.Δᐃⵠⵠⵠ) {
                    a.Δⵠⵠᐃ = f.Δ.createGain === undefined ? f.Δ.ⵠⲆⲆⵠⵠΔⲆᐃᐃ() : f.Δ.createGain();
                    a.Δⵠⵠᐃ.gain.setValueAtTime(c, f.Δ.currentTime);
                    a.Δⵠⵠᐃ.paused = true;
                    a.Δⵠⵠᐃ.connect(f.ⲆΔⲆΔΔⵠⵠ);
                } else {
                    a.Δⵠⵠᐃ = new Audio();
                    a.ᐃⲆᐃΔⲆⲆᐃ = a.ᐃᐃⵠⵠᐃⵠΔΔᐃ.bind(a);
                    a.Δⵠⵠᐃ.addEventListener("error", a.ᐃⲆᐃΔⲆⲆᐃ, false);
                    a.ᐃⲆⲆⵠᐃⲆⵠ = a.ⵠᐃΔⵠⵠΔⲆᐃⵠ.bind(a);
                    a.Δⵠⵠᐃ.addEventListener(f.ⲆΔΔΔⵠⲆⵠ, a.ᐃⲆⲆⵠᐃⲆⵠ, false);
                    a.Δⵠⵠᐃ.src = b.ΔⵠᐃⵠⲆ;
                    a.Δⵠⵠᐃ.preload = "auto";
                    a.Δⵠⵠᐃ.volume = c * f.volume();
                    a.Δⵠⵠᐃ.load();
                }
                return a;
            },
            reset: function () {
                var a = this;
                var b = a.ᐃᐃⲆᐃᐃΔᐃ;
                a.ⵠⵠᐃΔΔ = b.ⵠⵠᐃΔΔ;
                a.ΔⲆⲆⵠΔ = b.ΔⲆⲆⵠΔ;
                a.ⲆᐃᐃⲆⵠ = b.ⲆᐃᐃⲆⵠ;
                a.ᐃᐃᐃΔΔ = b.ᐃᐃᐃΔΔ;
                a.ⵠⵠⲆΔⵠ = 0;
                a.ⲆⵠⵠΔΔΔᐃ = 0;
                a.ⵠⲆⵠᐃᐃ = true;
                a.ΔᐃΔᐃΔ = true;
                a.ⵠⲆⲆᐃᐃ = "__default";
                a.ᐃᐃⵠⵠ = ++f.ⵠⲆⲆⵠⵠᐃᐃ;
                return a;
            },
            ᐃᐃⵠⵠᐃⵠΔΔᐃ: function () {
                var a = this;
                a.ᐃᐃⲆᐃᐃΔᐃ.ΔΔⵠⲆⵠ("loaderror", a.ᐃᐃⵠⵠ, a.Δⵠⵠᐃ.error ? a.Δⵠⵠᐃ.error.code : 0);
                a.Δⵠⵠᐃ.removeEventListener("error", a.ᐃⲆᐃΔⲆⲆᐃ, false);
            },
            ⵠᐃΔⵠⵠΔⲆᐃⵠ: function () {
                var a = this;
                var b = a.ᐃᐃⲆᐃᐃΔᐃ;
                b.ⲆⲆΔⲆⵠΔⵠ = Math.ceil(a.Δⵠⵠᐃ.duration * 10) / 10;
                if (Object.keys(b.ⵠⲆⲆᐃᐃ).length === 0) {
                    b.ⵠⲆⲆᐃᐃ = {
                        ΔΔⵠⲆΔⵠᐃᐃᐃ: [0, b.ⲆⲆΔⲆⵠΔⵠ * 1000]
                    };
                }
                if (b.ΔᐃⲆᐃⲆ !== "loaded") {
                    b.ΔᐃⲆᐃⲆ = "loaded";
                    b.ΔΔⵠⲆⵠ("load");
                    b.ⵠⵠⲆⵠΔⲆⵠ();
                }
                a.Δⵠⵠᐃ.removeEventListener(f.ⲆΔΔΔⵠⲆⵠ, a.ᐃⲆⲆⵠᐃⲆⵠ, false);
            }
        };
        var j = {};
        function a(a) {
            var b = a.ΔⵠᐃⵠⲆ;
            if (j[b]) {
                a.ⲆⲆΔⲆⵠΔⵠ = j[b].duration;
                h(a);
                return;
            }
            if (/^data:[^;]+;base64,/.test(b)) {
                for (var c = atob(b.split(",")[1]), d = new Uint8Array(c.length), e = 0; e < c.length; ++e) {
                    d[e] = c.charCodeAt(e);
                }
                m(d.buffer, a);
            } else {
                var f = new XMLHttpRequest();
                f.open("GET", b, true);
                f.responseType = "arraybuffer";
                f.onload = function () {
                    var b = (f.status + "")[0];
                    if (b === "0" || b === "2" || b === "3") {
                        m(f.response, a);
                    } else {
                        a.ΔΔⵠⲆⵠ("loaderror", null, "Failed loading audio file with status: " + f.status + ".");
                    }
                };
                f.onerror = function () {
                    if (a.Δᐃⵠⵠⵠ) {
                        a.ⵠᐃⵠΔⲆᐃᐃ = true;
                        a.Δᐃⵠⵠⵠ = false;
                        a.ΔⵠⵠᐃⲆ = [];
                        delete j[b];
                        a.load();
                    }
                };
                k(f);
            }
        }
        function k(a) {
            try {
                a.send();
            } catch (b) {
                a.onerror();
            }
        }
        function m(a, b) {
            f.Δ.decodeAudioData(a, function (a) {
                if (a && b.ΔⵠⵠᐃⲆ.length > 0) {
                    j[b.ΔⵠᐃⵠⲆ] = a;
                    h(b, a);
                }
            }, function () {
                b.ΔΔⵠⲆⵠ("loaderror", null, "Decoding audio data failed.");
            });
        }
        function h(a, b) {
            if (b && !a.ⲆⲆΔⲆⵠΔⵠ) {
                a.ⲆⲆΔⲆⵠΔⵠ = b.duration;
            }
            if (Object.keys(a.ⵠⲆⲆᐃᐃ).length === 0) {
                a.ⵠⲆⲆᐃᐃ = {
                    ΔΔⵠⲆΔⵠᐃᐃᐃ: [0, a.ⲆⲆΔⲆⵠΔⵠ * 1000]
                };
            }
            if (a.ΔᐃⲆᐃⲆ !== "loaded") {
                a.ΔᐃⲆᐃⲆ = "loaded";
                a.ΔΔⵠⲆⵠ("load");
                a.ⵠⵠⲆⵠΔⲆⵠ();
            }
        }
        function i() {
            try {
                if (typeof AudioContext != "undefined") {
                    f.Δ = new AudioContext();
                } else if (typeof ⲆⵠⵠΔⵠⲆⲆⲆⵠ != "undefined") {
                    f.Δ = new ⲆⵠⵠΔⵠⲆⲆⲆⵠ();
                } else {
                    f.ᐃⲆΔᐃΔ = false;
                }
            } catch (a) {
                f.ᐃⲆΔᐃΔ = false;
            }
            var a = /iP(hone|od|ad)/.test(f.ⲆΔⵠⵠᐃ && f.ⲆΔⵠⵠᐃ.platform);
            var b = f.ⲆΔⵠⵠᐃ && f.ⲆΔⵠⵠᐃ.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
            var c = b ? parseInt(b[1], 10) : null;
            if (a && c && c < 9) {
                var d = /safari/.test(f.ⲆΔⵠⵠᐃ && f.ⲆΔⵠⵠᐃ.userAgent.toLowerCase());
                if (f.ⲆΔⵠⵠᐃ && f.ⲆΔⵠⵠᐃ.ⲆᐃΔⲆⲆᐃⲆᐃⵠ && !d || f.ⲆΔⵠⵠᐃ && !f.ⲆΔⵠⵠᐃ.ⲆᐃΔⲆⲆᐃⲆᐃⵠ && !d) {
                    f.ᐃⲆΔᐃΔ = false;
                }
            }
            if (f.ᐃⲆΔᐃΔ) {
                f.ⲆΔⲆΔΔⵠⵠ = f.Δ.createGain === undefined ? f.Δ.ⵠⲆⲆⵠⵠΔⲆᐃᐃ() : f.Δ.createGain();
                f.ⲆΔⲆΔΔⵠⵠ.gain.value = f.ⵠⵠᐃΔΔ ? 0 : 1;
                f.ⲆΔⲆΔΔⵠⵠ.connect(f.Δ.destination);
            }
            f.ΔⲆⵠⵠⵠΔⵠ();
        }
        if (typeof ⵠᐃⵠⲆΔᐃᐃ == "function" && ⵠᐃⵠⲆΔᐃᐃ.ᐃⵠⲆⵠⲆΔⵠ) {
            ⵠᐃⵠⲆΔᐃᐃ([], function () {
                return {
                    Howler: f,
                    Howl: c
                };
            });
        }
        if (typeof ⲆⲆΔⵠᐃΔᐃ != "undefined") {
            ⲆⲆΔⵠᐃΔᐃ.Howler = f;
            ⲆⲆΔⵠᐃΔᐃ.Howl = c;
        }
        if (typeof cj != "undefined") {
            cj.ᐃᐃᐃⲆᐃⵠΔ = b;
            cj.Howler = f;
            cj.Howl = c;
            cj.ⵠⲆᐃΔⲆⲆⵠ = d;
        } else if (typeof ᐃᐃΔΔⲆⵠᐃ != "undefined") {
            ᐃᐃΔΔⲆⵠᐃ.ᐃᐃᐃⲆᐃⵠΔ = b;
            ᐃᐃΔΔⲆⵠᐃ.Howler = f;
            ᐃᐃΔΔⲆⵠᐃ.Howl = c;
            ᐃᐃΔΔⲆⵠᐃ.ⵠⲆᐃΔⲆⲆⵠ = d;
        }
    })();
    (function () {
        ᐃᐃᐃⲆᐃⵠΔ.prototype.ⲆΔᐃᐃⵠ = [0, 0, 0];
        ᐃᐃᐃⲆᐃⵠΔ.prototype.ⵠᐃᐃᐃᐃ = [0, 0, -1, 0, 1, 0];
        ᐃᐃᐃⲆᐃⵠΔ.prototype.ⲆⵠΔⲆᐃᐃΔ = function (a) {
            var b = this;
            if (!b.Δ || !b.Δ.listener) {
                return b;
            }
            for (var c = b.ⵠⵠΔΔⲆ.length - 1; c >= 0; c--) {
                b.ⵠⵠΔΔⲆ[c].ⲆⵠΔⲆᐃᐃΔ(a);
            }
            return b;
        };
        ᐃᐃᐃⲆᐃⵠΔ.prototype.ΔᐃⵠΔ = function (a, b, c) {
            var d = this;
            if (d.Δ && d.Δ.listener) {
                b = typeof b != "number" ? d.ⲆΔᐃᐃⵠ[1] : b;
                c = typeof c != "number" ? d.ⲆΔᐃᐃⵠ[2] : c;
                if (typeof a != "number") {
                    return d.ⲆΔᐃᐃⵠ;
                } else {
                    d.ⲆΔᐃᐃⵠ = [a, b, c];
                    d.Δ.listener.setPosition(d.ⲆΔᐃᐃⵠ[0], d.ⲆΔᐃᐃⵠ[1], d.ⲆΔᐃᐃⵠ[2]);
                    return d;
                }
            } else {
                return d;
            }
        };
        ᐃᐃᐃⲆᐃⵠΔ.prototype.orientation = function (b, c, d, e, f, g) {
            var h = this;
            if (!h.Δ || !h.Δ.listener) {
                return h;
            }
            var j = h.ⵠᐃᐃᐃᐃ;
            c = typeof c != "number" ? j[1] : c;
            d = typeof d != "number" ? j[2] : d;
            e = typeof e != "number" ? j[3] : e;
            f = typeof f != "number" ? j[4] : f;
            g = typeof g != "number" ? j[5] : g;
            if (typeof b != "number") {
                return j;
            } else {
                h.ⵠᐃᐃᐃᐃ = [b, c, d, e, f, g];
                h.Δ.listener.setOrientation(b, c, d, e, f, g);
                return h;
            }
        };
        Howl.prototype.ⲆⲆⵠⲆⲆ = function (a) {
            return function (b) {
                var c = this;
                c.ⵠᐃᐃᐃᐃ = b.orientation || [1, 0, 0];
                c.ΔⵠⵠΔⲆᐃΔ = b.ⲆⵠΔⲆᐃᐃΔ || null;
                c.ⲆΔᐃᐃⵠ = b.ΔᐃⵠΔ || null;
                c.ⲆⲆΔⲆΔ = {
                    coneInnerAngle: b.coneInnerAngle !== undefined ? b.coneInnerAngle : 360,
                    coneOuterAngle: b.coneOuterAngle !== undefined ? b.coneOuterAngle : 360,
                    coneOuterGain: b.coneOuterGain !== undefined ? b.coneOuterGain : 0,
                    distanceModel: b.distanceModel !== undefined ? b.distanceModel : "inverse",
                    maxDistance: b.maxDistance !== undefined ? b.maxDistance : 10000,
                    panningModel: b.panningModel !== undefined ? b.panningModel : "HRTF",
                    refDistance: b.refDistance !== undefined ? b.refDistance : 1,
                    rolloffFactor: b.rolloffFactor !== undefined ? b.rolloffFactor : 1
                };
                c.ΔⲆΔⵠΔⲆΔⲆⲆ = b.ⵠᐃΔⲆⲆⲆⵠⵠᐃ ? [{
                    ΔᐃΔᐃⵠ: b.ⵠᐃΔⲆⲆⲆⵠⵠᐃ
                }] : [];
                c.ⲆᐃΔᐃᐃⵠΔⵠⲆ = b.ⵠⲆᐃΔΔᐃⲆΔⵠ ? [{
                    ΔᐃΔᐃⵠ: b.ⵠⲆᐃΔΔᐃⲆΔⵠ
                }] : [];
                c.ⵠⵠⵠⵠⲆⵠᐃⲆⵠ = b.ᐃΔⲆΔⵠⲆⲆⲆⲆ ? [{
                    ΔᐃΔᐃⵠ: b.ᐃΔⲆΔⵠⲆⲆⲆⲆ
                }] : [];
                return a.call(this, b);
            };
        }(Howl.prototype.ⲆⲆⵠⲆⲆ);
        Howl.prototype.ⲆⵠΔⲆᐃᐃΔ = function (c, d) {
            var e = this;
            if (!e.Δᐃⵠⵠⵠ) {
                return e;
            }
            if (e.ΔᐃⲆᐃⲆ !== "loaded") {
                e.ⲆΔⵠⵠⵠ.push({
                    event: "stereo",
                    action: function () {
                        e.ⲆⵠΔⲆᐃᐃΔ(c, d);
                    }
                });
                return e;
            }
            var f = Howler.Δ.createStereoPanner === undefined ? "spatial" : "stereo";
            if (d === undefined) {
                if (typeof c != "number") {
                    return e.ΔⵠⵠΔⲆᐃΔ;
                }
                e.ΔⵠⵠΔⲆᐃΔ = c;
                e.ⲆΔᐃᐃⵠ = [c, 0, 0];
            }
            for (var g = e.ᐃΔᐃᐃΔ(d), a = 0; a < g.length; a++) {
                var h = e.ⵠΔᐃᐃΔ(g[a]);
                if (h) {
                    if (typeof c != "number") {
                        return h.ΔⵠⵠΔⲆᐃΔ;
                    }
                    h.ΔⵠⵠΔⲆᐃΔ = c;
                    h.ⲆΔᐃᐃⵠ = [c, 0, 0];
                    if (h.Δⵠⵠᐃ) {
                        h.ⲆⲆΔⲆΔ.panningModel = "equalpower";
                        if (!h.ⲆΔⲆΔⵠ || !h.ⲆΔⲆΔⵠ.pan) {
                            b(h, f);
                        }
                        if (f === "spatial") {
                            h.ⲆΔⲆΔⵠ.setPosition(c, 0, 0);
                        } else {
                            h.ⲆΔⲆΔⵠ.pan.value = c;
                        }
                    }
                    e.ΔΔⵠⲆⵠ("stereo", h.ᐃᐃⵠⵠ);
                }
            }
            return e;
        };
        Howl.prototype.ΔᐃⵠΔ = function (c, d, e, f) {
            var g = this;
            if (!g.Δᐃⵠⵠⵠ) {
                return g;
            }
            if (g.ΔᐃⲆᐃⲆ !== "loaded") {
                g.ⲆΔⵠⵠⵠ.push({
                    event: "pos",
                    action: function () {
                        g.ΔᐃⵠΔ(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? 0 : d;
            e = typeof e != "number" ? -0.5 : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⲆΔᐃᐃⵠ;
                }
                g.ⲆΔᐃᐃⵠ = [c, d, e];
            }
            for (var a = g.ᐃΔᐃᐃΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⲆΔᐃᐃⵠ;
                    }
                    j.ⲆΔᐃᐃⵠ = [c, d, e];
                    if (j.Δⵠⵠᐃ) {
                        if (!j.ⲆΔⲆΔⵠ || !!j.ⲆΔⲆΔⵠ.pan) {
                            b(j, "spatial");
                        }
                        j.ⲆΔⲆΔⵠ.setPosition(c, d, e);
                    }
                    g.ΔΔⵠⲆⵠ("pos", j.ᐃᐃⵠⵠ);
                }
            }
            return g;
        };
        Howl.prototype.orientation = function (c, d, e, f) {
            var g = this;
            if (!g.Δᐃⵠⵠⵠ) {
                return g;
            }
            if (g.ΔᐃⲆᐃⲆ !== "loaded") {
                g.ⲆΔⵠⵠⵠ.push({
                    event: "orientation",
                    action: function () {
                        g.orientation(c, d, e, f);
                    }
                });
                return g;
            }
            d = typeof d != "number" ? g.ⵠᐃᐃᐃᐃ[1] : d;
            e = typeof e != "number" ? g.ⵠᐃᐃᐃᐃ[2] : e;
            if (f === undefined) {
                if (typeof c != "number") {
                    return g.ⵠᐃᐃᐃᐃ;
                }
                g.ⵠᐃᐃᐃᐃ = [c, d, e];
            }
            for (var a = g.ᐃΔᐃᐃΔ(f), i = 0; i < a.length; i++) {
                var j = g.ⵠΔᐃᐃΔ(a[i]);
                if (j) {
                    if (typeof c != "number") {
                        return j.ⵠᐃᐃᐃᐃ;
                    }
                    j.ⵠᐃᐃᐃᐃ = [c, d, e];
                    if (j.Δⵠⵠᐃ) {
                        if (!j.ⲆΔⲆΔⵠ) {
                            j.ⲆΔᐃᐃⵠ ||= g.ⲆΔᐃᐃⵠ || [0, 0, -0.5];
                            b(j, "spatial");
                        }
                        j.ⲆΔⲆΔⵠ.setOrientation(c, d, e);
                    }
                    g.ΔΔⵠⲆⵠ("orientation", j.ᐃᐃⵠⵠ);
                }
            }
            return g;
        };
        Howl.prototype.ᐃᐃᐃᐃⲆⵠΔΔⲆ = function () {
            var c;
            var d;
            var e;
            var f = this;
            var g = arguments;
            if (!f.Δᐃⵠⵠⵠ) {
                return f;
            }
            if (g.length === 0) {
                return f.ⲆⲆΔⲆΔ;
            }
            if (g.length === 1) {
                if (typeof g[0] != "object") {
                    if (e = f.ⵠΔᐃᐃΔ(parseInt(g[0], 10))) {
                        return e.ⲆⲆΔⲆΔ;
                    } else {
                        return f.ⲆⲆΔⲆΔ;
                    }
                }
                c = g[0];
                if (d === undefined) {
                    f.ⲆⲆΔⲆΔ = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : f.ᐃᐃΔⲆⲆⲆᐃⲆᐃ,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : f.ⲆᐃᐃΔⵠΔᐃΔΔ,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : f.ΔⲆⲆᐃⵠᐃᐃⵠⵠ,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : f.ᐃΔᐃⲆⲆⲆᐃᐃⵠ,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : f.ᐃΔᐃⲆΔᐃΔⵠⲆ,
                        panningModel: c.panningModel !== undefined ? c.panningModel : f.ⲆᐃΔⵠᐃΔᐃⵠⲆ,
                        refDistance: c.refDistance !== undefined ? c.refDistance : f.ⵠⲆⲆⲆᐃᐃⵠᐃⲆ,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : f.ⵠΔⲆⲆᐃᐃⲆⵠᐃ
                    };
                }
            } else if (g.length === 2) {
                c = g[0];
                d = parseInt(g[1], 10);
            }
            for (var a = f.ᐃΔᐃᐃΔ(d), j = 0; j < a.length; j++) {
                if (e = f.ⵠΔᐃᐃΔ(a[j])) {
                    var k = e.ⲆⲆΔⲆΔ;
                    k = {
                        coneInnerAngle: c.coneInnerAngle !== undefined ? c.coneInnerAngle : k.coneInnerAngle,
                        coneOuterAngle: c.coneOuterAngle !== undefined ? c.coneOuterAngle : k.coneOuterAngle,
                        coneOuterGain: c.coneOuterGain !== undefined ? c.coneOuterGain : k.coneOuterGain,
                        distanceModel: c.distanceModel !== undefined ? c.distanceModel : k.distanceModel,
                        maxDistance: c.maxDistance !== undefined ? c.maxDistance : k.maxDistance,
                        panningModel: c.panningModel !== undefined ? c.panningModel : k.panningModel,
                        refDistance: c.refDistance !== undefined ? c.refDistance : k.refDistance,
                        rolloffFactor: c.rolloffFactor !== undefined ? c.rolloffFactor : k.rolloffFactor
                    };
                    var m = e.ⲆΔⲆΔⵠ;
                    if (m) {
                        m.coneInnerAngle = k.coneInnerAngle;
                        m.coneOuterAngle = k.coneOuterAngle;
                        m.coneOuterGain = k.coneOuterGain;
                        m.distanceModel = k.distanceModel;
                        m.maxDistance = k.maxDistance;
                        m.panningModel = k.panningModel;
                        m.refDistance = k.refDistance;
                        m.rolloffFactor = k.rolloffFactor;
                    } else {
                        e.ⲆΔᐃᐃⵠ ||= f.ⲆΔᐃᐃⵠ || [0, 0, -0.5];
                        b(e, "spatial");
                    }
                }
            }
            return f;
        };
        ⵠⲆᐃΔⲆⲆⵠ.prototype.ⲆⲆⵠⲆⲆ = function (a) {
            return function () {
                var b = this;
                var c = b.ᐃᐃⲆᐃᐃΔᐃ;
                b.ⵠᐃᐃᐃᐃ = c.ⵠᐃᐃᐃᐃ;
                b.ΔⵠⵠΔⲆᐃΔ = c.ΔⵠⵠΔⲆᐃΔ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                b.ⲆⲆΔⲆΔ = c.ⲆⲆΔⲆΔ;
                a.call(this);
                if (b.ΔⵠⵠΔⲆᐃΔ) {
                    c.ⲆⵠΔⲆᐃᐃΔ(b.ΔⵠⵠΔⲆᐃΔ);
                } else if (b.ⲆΔᐃᐃⵠ) {
                    c.ΔᐃⵠΔ(b.ⲆΔᐃᐃⵠ[0], b.ⲆΔᐃᐃⵠ[1], b.ⲆΔᐃᐃⵠ[2], b.ᐃᐃⵠⵠ);
                }
            };
        }(ⵠⲆᐃΔⲆⲆⵠ.prototype.ⲆⲆⵠⲆⲆ);
        ⵠⲆᐃΔⲆⲆⵠ.prototype.reset = function (a) {
            return function () {
                var b = this;
                var c = b.ᐃᐃⲆᐃᐃΔᐃ;
                b.ⵠᐃᐃᐃᐃ = c.ⵠᐃᐃᐃᐃ;
                b.ⲆΔᐃᐃⵠ = c.ⲆΔᐃᐃⵠ;
                b.ⲆⲆΔⲆΔ = c.ⲆⲆΔⲆΔ;
                return a.call(this);
            };
        }(ⵠⲆᐃΔⲆⲆⵠ.prototype.reset);
        function b(a, b) {
            b = b || "spatial";
            if (b === "spatial") {
                a.ⲆΔⲆΔⵠ = Howler.Δ.createPanner();
                a.ⲆΔⲆΔⵠ.coneInnerAngle = a.ⲆⲆΔⲆΔ.coneInnerAngle;
                a.ⲆΔⲆΔⵠ.coneOuterAngle = a.ⲆⲆΔⲆΔ.coneOuterAngle;
                a.ⲆΔⲆΔⵠ.coneOuterGain = a.ⲆⲆΔⲆΔ.coneOuterGain;
                a.ⲆΔⲆΔⵠ.distanceModel = a.ⲆⲆΔⲆΔ.distanceModel;
                a.ⲆΔⲆΔⵠ.maxDistance = a.ⲆⲆΔⲆΔ.maxDistance;
                a.ⲆΔⲆΔⵠ.panningModel = a.ⲆⲆΔⲆΔ.panningModel;
                a.ⲆΔⲆΔⵠ.refDistance = a.ⲆⲆΔⲆΔ.refDistance;
                a.ⲆΔⲆΔⵠ.rolloffFactor = a.ⲆⲆΔⲆΔ.rolloffFactor;
                a.ⲆΔⲆΔⵠ.setPosition(a.ⲆΔᐃᐃⵠ[0], a.ⲆΔᐃᐃⵠ[1], a.ⲆΔᐃᐃⵠ[2]);
                a.ⲆΔⲆΔⵠ.setOrientation(a.ⵠᐃᐃᐃᐃ[0], a.ⵠᐃᐃᐃᐃ[1], a.ⵠᐃᐃᐃᐃ[2]);
            } else {
                a.ⲆΔⲆΔⵠ = Howler.Δ.createStereoPanner();
                a.ⲆΔⲆΔⵠ.pan.value = a.ΔⵠⵠΔⲆᐃΔ;
            }
            a.ⲆΔⲆΔⵠ.connect(a.Δⵠⵠᐃ);
            if (!a.ⵠⲆⵠᐃᐃ) {
                a.ᐃᐃⲆᐃᐃΔᐃ.pause(a.ᐃᐃⵠⵠ, true).play(a.ᐃᐃⵠⵠ);
            }
        }
    })();
    var Pw = 1;
    var Qw = 1;
    var Rw = {
        ⵠΔⵠᐃΔⵠᐃᐃΔ: 12,
        ⵠⵠⲆΔΔⵠⲆΔⲆ: 12,
        ᐃΔᐃᐃΔΔΔΔⲆ: 5000,
        ᐃⲆᐃᐃᐃⲆΔⵠⵠ: 5000,
        ΔⲆᐃⲆ: 8,
        ΔⵠᐃⵠⵠΔᐃ: 460000,
        ΔⲆΔⵠᐃ: 3,
        ⲆΔⵠⲆΔᐃᐃᐃᐃ: 5000,
        ⵠⲆⲆΔⲆᐃᐃ: 12,
        ΔⲆΔΔΔ: 2,
        ᐃⲆΔΔΔ: 1,
        ΔⵠΔ: 6,
        ᐃⲆⲆⲆⲆⲆᐃ: 3000
    };
    var Sw = [];
    Sw[-1] = Rw.ᐃⲆΔΔΔ;
    Sw[28] = Rw.ᐃⲆΔΔΔ;
    Sw[49] = Rw.ᐃⲆΔΔΔ;
    Sw[Vr.ΔⲆⵠⵠⲆΔΔᐃᐃ] = Rw.ΔⲆΔΔΔ;
    Sw[8] = Rw.ΔⲆΔΔΔ;
    Sw[1] = Rw.ΔⲆΔΔΔ;
    Sw[3] = Rw.ΔⲆΔΔΔ;
    Sw[4] = Rw.ΔⲆΔΔΔ;
    Sw[31] = Rw.ΔⲆΔΔΔ;
    Sw[32] = Rw.ΔⲆΔΔΔ;
    Sw[9] = Rw.ΔⲆΔΔΔ;
    Sw[57] = Rw.ΔⲆΔΔΔ;
    Sw[0] = Rw.ΔⲆΔΔΔ;
    Sw[63] = Rw.ΔⲆΔΔΔ;
    Sw[17] = Rw.ΔⲆΔΔΔ;
    Sw[5] = Rw.ΔⲆΔΔΔ;
    Sw[6] = Rw.ΔⲆΔΔΔ;
    Sw[30] = Rw.ΔⲆΔΔΔ;
    Sw[Vr.ⵠⵠΔⲆᐃⵠᐃᐃⵠ] = Rw.ΔⲆΔΔΔ;
    Sw[18] = Rw.ΔⲆΔΔΔ;
    Sw[12] = Rw.ΔⲆΔΔΔ;
    Sw[13] = Rw.ΔⲆΔΔΔ;
    Sw[14] = Rw.ΔⲆΔΔΔ;
    Sw[15] = Rw.ΔⲆΔΔΔ;
    Sw[16] = Rw.ΔⲆΔΔΔ;
    Sw[33] = Rw.ΔⲆΔΔΔ;
    Sw[Vr.ᐃΔⵠΔⵠᐃⵠᐃᐃ] = Rw.ΔⲆΔΔΔ;
    Sw[35] = Rw.ΔⲆΔΔΔ;
    Sw[36] = Rw.ΔⲆΔΔΔ;
    Sw[37] = Rw.ΔⲆΔΔΔ;
    Sw[38] = Rw.ΔⲆΔΔΔ;
    Sw[39] = Rw.ΔⲆΔΔΔ;
    Sw[45] = Rw.ΔⲆΔΔΔ;
    Sw[62] = Rw.ΔⲆΔΔΔ;
    Sw[54] = Rw.ΔⲆΔΔΔ;
    Sw[53] = Rw.ΔⲆΔΔΔ;
    Sw[46] = Rw.ΔⲆΔⵠᐃ;
    Sw[50] = Rw.ΔⲆΔⵠᐃ;
    Sw[51] = Rw.ΔⲆΔⵠᐃ;
    Sw[52] = Rw.ΔⲆΔⵠᐃ;
    ᐃΔᐃⵠ = [];
    ᐃΔᐃⵠ[0] = 0;
    ᐃΔᐃⵠ[1] = 1;
    ᐃΔᐃⵠ[2] = 1;
    ᐃΔᐃⵠ[3] = 1;
    ᐃΔᐃⵠ[4] = 0;
    ᐃΔᐃⵠ[5] = 0;
    ᐃΔᐃⵠ[6] = 0;
    ᐃΔᐃⵠ[7] = 0;
    ᐃΔᐃⵠ[8] = 0;
    ᐃΔᐃⵠ[9] = 0;
    ᐃΔᐃⵠ[10] = 1;
    ᐃΔᐃⵠ[11] = 1;
    ᐃΔᐃⵠ[12] = 1;
    ᐃΔᐃⵠ[13] = 1;
    ᐃΔᐃⵠ[14] = 1;
    ᐃΔᐃⵠ[15] = 1;
    ᐃΔᐃⵠ[16] = 0;
    ᐃΔᐃⵠ[17] = 0;
    ᐃΔᐃⵠ[18] = 0;
    ᐃΔᐃⵠ[19] = 0;
    ᐃΔᐃⵠ[20] = 0;
    ᐃΔᐃⵠ[21] = 0;
    ᐃΔᐃⵠ[22] = 0;
    ᐃΔᐃⵠ[23] = 1;
    ᐃΔᐃⵠ[24] = 1;
    ᐃΔᐃⵠ[25] = 1;
    ᐃΔᐃⵠ[26] = 1;
    ᐃΔᐃⵠ[27] = 1;
    ᐃΔᐃⵠ[28] = 1;
    ᐃΔᐃⵠ[29] = 1;
    ᐃΔᐃⵠ[30] = 1;
    ᐃΔᐃⵠ[31] = 1;
    ᐃΔᐃⵠ[32] = 1;
    ᐃΔᐃⵠ[33] = 1;
    ᐃΔᐃⵠ[34] = 1;
    ᐃΔᐃⵠ[35] = 1;
    ᐃΔᐃⵠ[36] = 1;
    ᐃΔᐃⵠ[37] = 1;
    ᐃΔᐃⵠ[38] = 1;
    ᐃΔᐃⵠ[40] = 0;
    ᐃΔᐃⵠ[41] = 0;
    ᐃΔᐃⵠ[42] = 0;
    ᐃΔᐃⵠ[50] = 1;
    ᐃΔᐃⵠ[51] = 1;
    ᐃΔᐃⵠ[52] = 1;
    ᐃΔᐃⵠ[55] = 0;
    ᐃΔᐃⵠ[56] = 0;
    ᐃΔᐃⵠ[57] = 0;
    ᐃΔᐃⵠ[58] = 0;
    ᐃⲆⲆⲆⵠ = [];
    ᐃⲆⲆⲆⵠ[hw.ᐃⵠΔⲆΔ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ΔΔᐃΔⵠ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ΔⲆⲆᐃⲆ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ΔᐃⲆΔⲆ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ⵠᐃΔᐃⵠ] = -1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⵠⵠΔᐃ] = -1;
    ᐃⲆⲆⲆⵠ[hw.ⵠⵠⲆΔᐃ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ΔᐃⵠᐃΔ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ᐃⵠⵠⵠⲆ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ΔΔΔⵠΔ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ⲆᐃⵠⵠⲆ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⲆΔΔΔⵠ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔᐃᐃⵠⲆ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠⵠᐃⲆΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⵠⲆΔⵠ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔⵠᐃΔΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔΔⵠᐃΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⲆⵠᐃⵠΔ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ⵠᐃᐃΔⵠ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⲆΔᐃΔᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⲆΔΔᐃΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⲆΔΔᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠΔⵠⲆΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.Δᐃᐃᐃⵠ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ⵠⲆⲆΔᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔΔΔⲆᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃᐃⵠᐃⲆ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⲆⵠΔⵠΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠᐃᐃΔᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠⵠᐃⲆⵠ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ᐃΔᐃⲆⵠ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠᐃᐃⲆΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔⲆⲆᐃⵠ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⲆⵠΔΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ⵠᐃⲆᐃᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔᐃΔⵠΔ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ΔⲆⵠΔᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⵠⲆⲆᐃ] = 1;
    ᐃⲆⲆⲆⵠ[hw.ᐃⲆⲆⲆᐃ] = 0;
    ᐃⲆⲆⲆⵠ[hw.ⵠⲆⲆⵠᐃ] = 1;
    var Tw = {
        ΔⵠΔᐃⵠⵠⵠ: {
            ⲆⵠⵠⲆⲆ: null,
            path: ["audio/ambience.mp3"],
            Ⲇᐃ: {
                d0: [90086, 300, false],
                d2: [90684, 300, Ui],
                d1: [90391, 300, false]
            },
            sample: {
                d0: Rw.ΔⲆᐃⲆ,
                d1: Rw.ΔⲆᐃⲆ,
                d2: Rw.ΔⲆᐃⲆ
            }
        },
        ᐃⲆⵠΔⲆᐃⵠ: {
            ⲆⵠⵠⲆⲆ: null,
            path: ["audio/ambience.mp3"],
            Ⲇᐃ: {
                p1: [89549, 300, wq],
                p0: [89303, 300, false],
                p2: [89815, 300, false]
            },
            sample: {
                p0: Rw.ΔⲆᐃⲆ,
                p1: Rw.ΔⲆᐃⲆ,
                p2: Rw.ΔⲆᐃⲆ
            }
        },
        ΔⲆⵠⵠᐃᐃᐃ: {
            ⲆⵠⵠⲆⲆ: null,
            path: ["audio/ambience.mp3"],
            Ⲇᐃ: {
                w0: [88195, 300, false],
                w1: [88473, 300, yg],
                w2: [88751, 300, false],
                w3: [89025, 300, false]
            },
            sample: {
                w0: Rw.ΔⲆᐃⲆ,
                w1: Rw.ΔⲆᐃⲆ,
                w2: Rw.ΔⲆᐃⲆ,
                w3: Rw.ΔⲆᐃⲆ
            }
        },
        ⵠΔⲆⲆⵠⲆᐃ: {
            ⲆⵠⵠⲆⲆ: null,
            path: ["audio/ambience.mp3"],
            Ⲇᐃ: {
                ΔᐃⵠⲆⲆⲆΔ: [30562, 655, true],
                ΔⵠⵠⵠⲆᐃⲆ: [66014, 925, Jn],
                ⵠᐃΔⲆΔᐃΔ: [32604, 21890, true],
                ΔᐃΔⵠᐃΔΔ: [91022, 400, mk],
                ⲆⲆΔΔⵠⵠⵠ: [31658, 813, Wh],
                ΔΔⲆⲆᐃ: [12356, 6965, true],
                ᐃᐃⵠΔⲆⲆΔ: [54524, 11393, true],
                ΔⲆᐃΔⵠᐃⲆ: [92249, 500, false],
                ᐃⲆⲆΔΔᐃⵠ: [66961, 21223, true],
                ⲆⲆΔⲆⲆⵠᐃᐃᐃ: [100, 2800, Wa],
                ᐃᐃⲆⵠⵠ: [28380, 1797, dl],
                ⵠⲆⲆΔⲆ: [91431, 400, false],
                Δᐃᐃᐃᐃᐃⵠ: [19882, 8301, Ah],
                ᐃⲆⵠⲆᐃᐃΔ: [66961, 21223, true],
                ΔⵠᐃᐃᐃΔΔ: [3100, 8800, Jr]
            },
            sample: {
                ⲆⲆΔⲆⲆⵠᐃᐃᐃ: 1,
                ΔⵠᐃᐃᐃΔΔ: 1,
                Δᐃᐃᐃᐃᐃⵠ: 1,
                ⵠᐃΔⲆΔᐃΔ: 1,
                ᐃᐃⵠΔⲆⲆΔ: 1,
                ᐃⲆⵠⲆᐃᐃΔ: 1,
                ᐃⲆⲆΔΔᐃⵠ: 1,
                ΔΔⲆⲆᐃ: Rw.ΔⲆᐃⲆ,
                ᐃᐃⲆⵠⵠ: Rw.ΔⲆᐃⲆ,
                ΔᐃⵠⲆⲆⲆΔ: Rw.ΔⲆᐃⲆ,
                ⲆⲆΔΔⵠⵠⵠ: Rw.ΔⲆᐃⲆ,
                ΔⵠⵠⵠⲆᐃⲆ: Rw.ΔⲆᐃⲆ,
                ΔᐃΔⵠᐃΔΔ: Rw.ΔⵠΔ,
                ⵠⲆⲆΔⲆ: Rw.ΔⵠΔ,
                ΔⲆᐃΔⵠᐃⲆ: Rw.ΔⵠΔ
            }
        }
    };
    function ef(b, c, d, e, f) {
        const g = ((d + 36213) * 1103515245 + 12345) % 2147483648;
        const a = (24 << (e >> 16 & 255)) + (0 << (e & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 24 & 255));
        const h = Rs(b ^ 42545, (c | 28786) & ~(c & 28786));
        kf(g, a);
        return ~(h & 51018) & 51018 | ~(h & 51018) & h;
    }
    function tf(b, c, d, e, f, i, a, j, k, h, l) {
        this.r = 1;
        this.ⵠΔⵠⵠΔ = b;
        this.ⵠΔⵠⲆᐃΔᐃ = b;
        this.ᐃᐃⵠ = c;
        this.ⵠΔⲆ = d;
        this.fade = e;
        this.ⲆⵠⵠᐃᐃⵠⲆ = f;
        this.ⵠΔΔᐃᐃⵠⵠ = i;
        this.ᐃΔⲆⲆ = a;
        this.ⵠΔΔⲆΔⵠⵠ = j;
        this.source = k;
        this.source.ⲆΔΔᐃⵠΔⵠ = k.x + k.w;
        this.source.ᐃᐃⲆⵠⲆ = k.y + k.ΔᐃⲆ;
        this.ΔⵠᐃⵠΔⵠᐃΔⲆ = h;
        this.ⵠᐃⲆᐃΔⲆᐃ = l;
        this.ⵠᐃᐃᐃⲆⲆⵠ = 0;
        this.ᐃᐃⲆⲆᐃᐃⵠ = {
            ⵠⵠⵠⲆ: 5,
            d: 5
        };
        this.ⲆΔⵠᐃᐃ = function () {
            this.ⵠΔⵠⵠΔ -= cf;
            if (this.ⵠΔⵠⵠΔ < 0) {
                this.ⵠΔⵠⵠΔ = this.ⵠΔⵠⲆᐃΔᐃ;
                var a = Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ.playing(this.ᐃᐃⵠ);
                var b = Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ.playing(this.ⵠΔⲆ);
                if (a && !b) {
                    var c = Qw * this.ᐃΔⲆⲆ.volume(this.ᐃᐃⵠ);
                    var d = (Math.random() * this.ⵠΔΔᐃᐃⵠⵠ + this.ⲆⵠⵠᐃᐃⵠⲆ) * Qw;
                    this.ᐃΔⲆⲆ.fade(c, d, this.fade, this.ᐃᐃⵠ);
                } else if (!a && b) {
                    c = this.ᐃΔⲆⲆ.volume(this.ⵠΔⲆ) * Qw;
                    d = Qw * (Math.random() * this.ⵠΔΔᐃᐃⵠⵠ + this.ⲆⵠⵠᐃᐃⵠⲆ);
                    this.ᐃΔⲆⲆ.fade(c, d, this.fade, this.ⵠΔⲆ);
                }
            }
        };
        this.transition = function () {
            this.ⵠΔⵠⵠΔ = this.ⵠΔⵠⲆᐃΔᐃ;
            this.ᐃᐃⲆⲆᐃᐃⵠ.d = this.ᐃᐃⲆⲆᐃᐃⵠ.ⵠⵠⵠⲆ;
            if (lf.time) {
                this.ᐃΔⲆⲆ.fade(0, Qw * this.ⲆⵠⵠᐃᐃⵠⲆ, this.ⵠΔΔⲆΔⵠⵠ, this.ᐃᐃⵠ);
                this.ᐃΔⲆⲆ.play(this.ᐃᐃⵠ);
                if (this.ᐃΔⲆⲆ.playing(this.ⵠΔⲆ)) {
                    var a = Qw * this.ᐃΔⲆⲆ.volume(this.ⵠΔⲆ);
                    this.ᐃΔⲆⲆ.fade(a, 0, this.ⵠΔΔⲆΔⵠⵠ, this.ⵠΔⲆ);
                }
            } else {
                this.ᐃΔⲆⲆ.fade(0, this.ⲆⵠⵠᐃᐃⵠⲆ * Qw, this.ⵠΔΔⲆΔⵠⵠ, this.ⵠΔⲆ);
                this.ᐃΔⲆⲆ.play(this.ⵠΔⲆ);
                if (this.ᐃΔⲆⲆ.playing(this.ᐃᐃⵠ)) {
                    a = this.ᐃΔⲆⲆ.volume(this.ᐃᐃⵠ) * Qw;
                    this.ᐃΔⲆⲆ.fade(a, 0, this.ⵠΔΔⲆΔⵠⵠ, this.ᐃᐃⵠ);
                }
            }
        };
        this.check = function (a) {
            if (this.ⵠᐃᐃᐃⲆⲆⵠ) {
                if (ΔᐃⲆᐃ.ⵠᐃⲆᐃΔⲆᐃ(a, this.ΔⵠᐃⵠΔⵠᐃΔⲆ)) {
                    if (!Zw.transition && Rw.ΔⵠᐃⵠⵠΔᐃ > lf.ᐃΔⲆᐃⲆ.now) {
                        if (lf.time) {
                            if (!this.ᐃΔⲆⲆ.playing(this.ᐃᐃⵠ)) {
                                this.ᐃᐃⲆⲆᐃᐃⵠ.d -= cf;
                                if (this.ᐃᐃⲆⲆᐃᐃⵠ.d < 0) {
                                    this.transition();
                                }
                            }
                        } else if (!this.ᐃΔⲆⲆ.playing(this.ⵠΔⲆ)) {
                            this.ᐃᐃⲆⲆᐃᐃⵠ.d -= cf;
                            if (this.ᐃᐃⲆⲆᐃᐃⵠ.d < 0) {
                                this.transition();
                            }
                        }
                    }
                } else {
                    this.ⵠᐃᐃᐃⲆⲆⵠ = 0;
                    if (this.ᐃΔⲆⲆ.playing(this.ᐃᐃⵠ)) {
                        var b = Qw * this.ᐃΔⲆⲆ.volume(this.ᐃᐃⵠ);
                        this.ᐃΔⲆⲆ.fade(b, 0, this.ⵠΔΔⲆΔⵠⵠ, this.ᐃᐃⵠ);
                    }
                    if (this.ᐃΔⲆⲆ.playing(this.ⵠΔⲆ)) {
                        b = Qw * this.ᐃΔⲆⲆ.volume(this.ⵠΔⲆ);
                        this.ᐃΔⲆⲆ.fade(b, 0, this.ⵠΔΔⲆΔⵠⵠ, this.ⵠΔⲆ);
                    }
                }
            } else if (ΔᐃⲆᐃ.ⵠᐃⲆᐃΔⲆᐃ(a, this.ⵠᐃⲆᐃΔⲆᐃ)) {
                this.ⵠᐃᐃᐃⲆⲆⵠ = 1;
                if (!Zw.transition && lf.ᐃΔⲆᐃⲆ.now < Rw.ΔⵠᐃⵠⵠΔᐃ) {
                    this.transition();
                }
            }
        };
        this.ⲆΔᐃⲆ = function (a, b) {
            var c;
            var d;
            c = this.source.x > a.x ? Zw.ΔΔΔᐃΔΔⲆ(this.source.x) : this.source.ⲆΔΔᐃⵠΔⵠ < a.x ? Zw.ΔΔΔᐃΔΔⲆ(this.source.ⲆΔΔᐃⵠΔⵠ) : b.x;
            d = a.y < this.source.y ? Zw.ΔΔΔΔⲆⲆⵠ(this.source.y) : a.y > this.source.ᐃᐃⲆⵠⲆ ? Zw.ΔΔΔΔⲆⲆⵠ(this.source.ᐃᐃⲆⵠⲆ) : b.y;
            this.ᐃΔⲆⲆ.pos(c, d, -0.5, this.ᐃᐃⵠ);
            this.ᐃΔⲆⲆ.pos(c, d, -0.5, this.ⵠΔⲆ);
        };
    }
    ⵠⵠⲆⵠⵠ = {
        ⵠΔΔⲆⲆΔⲆ: 4,
        ΔⲆⲆⵠⲆΔΔ: 300,
        ⵠΔⵠΔᐃⵠⵠ: 2,
        ᐃⵠΔᐃⵠᐃⲆ: 100,
        ⲆᐃᐃⲆΔⲆⵠ: 0,
        ⵠΔᐃᐃⵠⲆᐃΔⲆ: 0.4,
        ΔⲆᐃᐃᐃᐃⵠⲆⵠ: 0.2,
        ⵠⲆᐃΔΔᐃΔ: 100,
        ⵠᐃᐃⲆⲆ: 2,
        ΔⲆᐃⲆⲆΔⵠ: 100,
        ⲆᐃⲆΔΔⲆⵠΔⲆ: 0.2,
        ᐃⲆΔᐃⵠᐃⲆ: 1,
        ⵠᐃΔᐃᐃᐃΔΔᐃ: 0.2,
        ⲆⵠⵠΔⵠᐃⲆ: 3
    };
    function nf(a, b, c) {
        this.ΔᐃᐃᐃᐃⵠⲆ = a;
        this.c = 0;
        this.ᐃΔⲆⲆ = b;
        this.ΔᐃᐃⲆΔ = c;
        this.max = c.length;
        this.play = function () {
            this.c = (this.c + 1) % this.max;
            var a = this.ΔᐃᐃⲆΔ[this.c];
            this.ΔᐃᐃᐃᐃⵠⲆ.ᐃⲆᐃⲆⲆᐃⲆ(this.ᐃΔⲆⲆ, a);
            this.ᐃΔⲆⲆ.play(a);
        };
    }
    function of(a) {
        this.ΔΔⵠᐃᐃᐃⲆ = 1;
        this.ΔⲆΔΔ = 0;
        this.mode = -1;
        this.ᐃᐃⲆⵠⵠ = Zw.sample.ᐃᐃⲆⵠⵠ[a];
        this.ΔᐃⵠⲆⲆⲆΔ = Zw.sample.ΔᐃⵠⲆⲆⲆΔ[a];
        this.ⲆⲆΔΔⵠⵠⵠ = Zw.sample.ⲆⲆΔΔⵠⵠⵠ[a];
        this.ΔⵠⵠⵠⲆᐃⲆ = Zw.sample.ΔⵠⵠⵠⲆᐃⲆ[a];
        this.ⲆΔⲆΔⵠᐃᐃ = new nf(this, Tw.ᐃⲆⵠΔⲆᐃⵠ.ⲆⵠⵠⲆⲆ, Zw.ⲆⵠⵠⵠΔ.ⲆΔⲆΔⵠᐃᐃ[a]);
        this.ⲆΔᐃⵠⲆ = new nf(this, Tw.ΔⲆⵠⵠᐃᐃᐃ.ⲆⵠⵠⲆⲆ, Zw.ⲆⵠⵠⵠΔ.ⲆΔᐃⵠⲆ[a]);
        this.Δⵠⵠⵠⵠ = new nf(this, Tw.ΔⵠΔᐃⵠⵠⵠ.ⲆⵠⵠⲆⲆ, Zw.ⲆⵠⵠⵠΔ.Δⵠⵠⵠⵠ[a]);
        this.ᐃᐃⲆΔΔ = a;
        this.x = 0;
        this.y = 0;
        this.ⲆᐃⲆⲆⵠ = 0;
        this.ⵠΔⵠⵠΔ = ⵠⵠⲆⵠⵠ.ⲆⲆΔⵠⵠΔᐃᐃΔ;
        this.ΔᐃⵠΔ = {
            y: 0,
            x: 0
        };
        this.ⲆⲆᐃᐃⲆ = Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ;
        this.ⲆⵠᐃⵠᐃⵠΔΔⵠ = function (a) {
            if (a === Rw.ᐃⲆΔΔΔ) {
                this.ⲆΔⲆΔⵠᐃᐃ.play();
            } else if (Rw.ΔⲆΔΔΔ === a) {
                this.ⲆΔᐃⵠⲆ.play();
            } else if (Rw.ΔⲆΔⵠᐃ === a) {
                this.Δⵠⵠⵠⵠ.play();
            }
        };
        this.ΔΔΔⲆΔⵠΔ = function (a) {
            if (a.ᐃⵠⲆᐃᐃⵠᐃ > 0) {
                return ⵠⵠⲆⵠⵠ.ⵠᐃᐃⲆⲆ;
            } else if (a.ΔΔⵠᐃⲆⵠⵠ > 0) {
                return ⵠⵠⲆⵠⵠ.ᐃⲆΔᐃⵠᐃⲆ;
            } else if (a.ⲆⲆΔⵠⵠ > 0 || a.ᐃΔΔⵠⲆ > 0) {
                return ⵠⵠⲆⵠⵠ.ⲆⵠⵠΔⵠᐃⲆ;
            } else {
                return ⵠⵠⲆⵠⵠ.ⲆᐃᐃⲆΔⲆⵠ;
            }
        };
        this.ⲆⲆⵠⲆⲆ = function (a) {
            this.ΔΔⵠᐃᐃᐃⲆ = 0;
            this.ΔⲆΔΔ = a;
            var b = lf.ⵠᐃⵠⵠ[a];
            b.ᐃᐃⲆΔΔ = this.ᐃᐃⲆΔΔ;
            this.mode = this.ΔΔΔⲆΔⵠΔ(b);
            this.ΔᐃⵠΔ.x = b.x;
            this.ΔᐃⵠΔ.y = b.y;
        };
        this.ⲆⲆⲆᐃⲆⵠΔ = function () {
            this.ΔΔⵠᐃᐃᐃⲆ = 1;
            this.mode = -1;
            this.ⲆⲆᐃᐃⲆ.stop(this.ᐃᐃⲆⵠⵠ);
            this.ⲆⲆᐃᐃⲆ.stop(this.ΔᐃⵠⲆⲆⲆΔ);
            this.ⲆⲆᐃᐃⲆ.stop(this.ⲆⲆΔΔⵠⵠⵠ);
            this.ⲆⲆᐃᐃⲆ.stop(this.ΔⵠⵠⵠⲆᐃⲆ);
        };
        this.fade = function (a, b) {
            var c = Pw * this.ⲆⲆᐃᐃⲆ.volume(a);
            this.ⲆⲆᐃᐃⲆ.fade(c, 0, b, a);
        };
        this.ᐃⲆᐃⲆⲆᐃⲆ = function (a, b) {
            if (this.ⲆᐃⲆⲆⵠ && this.ᐃᐃⲆΔΔ) {
                a.pos(this.x, this.y, -0.5, b);
            }
        };
        this.ⲆΔⵠᐃᐃ = function (b, c, d, e, f, g, a) {
            this.ⵠΔⵠⵠΔ = g;
            if (e && f === this.mode) {
                var i = this.ⲆⲆᐃᐃⲆ.volume(b) * Pw;
                if (this.ⲆᐃⲆⲆⵠ) {
                    var j = Pw * (Math.random() * d + c);
                    this.ⲆⲆᐃᐃⲆ.fade(i, j, a, b);
                } else {
                    this.ⲆⲆᐃᐃⲆ.fade(i, 0, a, b);
                }
            } else if (f != this.mode && this.ⲆᐃⲆⲆⵠ) {
                this.ⲆⲆᐃᐃⲆ.fade(0, (c + d) * Pw, a, b);
            } else if (this.ⲆᐃⲆⲆⵠ) {
                i = this.ⲆⲆᐃᐃⲆ.volume(b) * Pw;
                j = (d * Math.random() + c) * Pw;
                this.ⲆⲆᐃᐃⲆ.fade(i, j, a, b);
            }
            this.ᐃⲆᐃⲆⲆᐃⲆ(this.ⲆⲆᐃᐃⲆ, b);
            this.ⲆⲆᐃᐃⲆ.play(b);
        };
        this.ⲆΔᐃⲆ = function () {
            var a = lf.ⵠᐃⵠⵠ[this.ΔⲆΔΔ];
            this.ⵠΔⵠⵠΔ -= cf;
            if (this.ⵠΔⵠⵠΔ <= 0) {
                var b = 0;
                if (a.x != this.ΔᐃⵠΔ.x || this.ΔᐃⵠΔ.y != a.y) {
                    if (!this.ⲆᐃⲆⲆⵠ) {
                        b = 1;
                        this.ⲆᐃⲆⲆⵠ = 1;
                    }
                    this.x = Zw.ᐃΔᐃⵠⵠΔΔ(a.x, ⵠⵠⲆⵠⵠ.ⵠΔⵠΔᐃⵠⵠ);
                    this.y = Zw.ΔᐃⵠΔᐃᐃΔ(a.y, ⵠⵠⲆⵠⵠ.ⵠΔⵠΔᐃⵠⵠ);
                } else if (this.ⲆᐃⲆⲆⵠ) {
                    b = 1;
                    this.ⲆᐃⲆⲆⵠ = 0;
                }
                this.ΔᐃⵠΔ.x = a.x;
                this.ΔᐃⵠΔ.y = a.y;
                ⵠᐃΔΔ = this.ΔΔΔⲆΔⵠΔ(a);
                if (ⵠᐃΔΔ != this.mode) {
                    if (this.mode === ⵠⵠⲆⵠⵠ.ᐃⲆΔᐃⵠᐃⲆ) {
                        this.fade(this.ᐃᐃⲆⵠⵠ, ⵠⵠⲆⵠⵠ.ΔⲆⲆⵠⲆΔΔ);
                    } else if (this.mode === ⵠⵠⲆⵠⵠ.ⵠᐃᐃⲆⲆ) {
                        this.fade(this.ΔᐃⵠⲆⲆⲆΔ, ⵠⵠⲆⵠⵠ.ΔⲆᐃⲆⲆΔⵠ);
                    } else if (this.mode === ⵠⵠⲆⵠⵠ.ⲆᐃᐃⲆΔⲆⵠ) {
                        this.fade(this.ⲆⲆΔΔⵠⵠⵠ, ⵠⵠⲆⵠⵠ.ⵠⲆᐃΔΔᐃΔ);
                    } else if (this.mode === ⵠⵠⲆⵠⵠ.ⲆⵠⵠΔⵠᐃⲆ) {
                        this.fade(this.ΔⵠⵠⵠⲆᐃⲆ, ⵠⵠⲆⵠⵠ.ᐃⵠΔᐃⵠᐃⲆ);
                    }
                }
                if (ⵠᐃΔΔ === ⵠⵠⲆⵠⵠ.ᐃⲆΔᐃⵠᐃⲆ) {
                    this.ⲆΔⵠᐃᐃ(this.ᐃᐃⲆⵠⵠ, 0.08, 0.3, b, ⵠᐃΔΔ, ⵠⵠⲆⵠⵠ.ⵠΔᐃᐃⵠⲆᐃΔⲆ, ⵠⵠⲆⵠⵠ.ΔⲆⲆⵠⲆΔΔ);
                } else if (ⵠⵠⲆⵠⵠ.ⵠᐃᐃⲆⲆ === ⵠᐃΔΔ) {
                    this.ⲆΔⵠᐃᐃ(this.ΔᐃⵠⲆⲆⲆΔ, 0.2, 0.3, b, ⵠᐃΔΔ, ⵠⵠⲆⵠⵠ.ⵠᐃΔᐃᐃᐃΔΔᐃ, ⵠⵠⲆⵠⵠ.ΔⲆᐃⲆⲆΔⵠ);
                } else if (ⵠⵠⲆⵠⵠ.ⲆᐃᐃⲆΔⲆⵠ === ⵠᐃΔΔ) {
                    this.ⲆΔⵠᐃᐃ(this.ⲆⲆΔΔⵠⵠⵠ, 0.3, 0.6, b, ⵠᐃΔΔ, ⵠⵠⲆⵠⵠ.ⲆᐃⲆΔΔⲆⵠΔⲆ, ⵠⵠⲆⵠⵠ.ⵠⲆᐃΔΔᐃΔ);
                } else if (ⵠᐃΔΔ === ⵠⵠⲆⵠⵠ.ⲆⵠⵠΔⵠᐃⲆ) {
                    this.ⲆΔⵠᐃᐃ(this.ΔⵠⵠⵠⲆᐃⲆ, 0.1, 0.25, b, ⵠᐃΔΔ, ⵠⵠⲆⵠⵠ.ΔⲆᐃᐃᐃᐃⵠⲆⵠ, ⵠⵠⲆⵠⵠ.ᐃⵠΔᐃⵠᐃⲆ);
                }
                this.mode = ⵠᐃΔΔ;
            }
        };
        this.check = function () {
            var a = lf.ⵠᐃⵠⵠ[this.ΔⲆΔΔ];
            if (a) {
                return tr;
            } else {
                this.ⲆⲆⲆᐃⲆⵠΔ(a);
                return eh;
            }
        };
    }
    function af(b, c, d, e) {
        const f = (8 << (b >> 24 & 255)) + (24 << (b >> 16 & 255)) + (0 << (b & 255)) + (16 << (b >> 8 & 255));
        const g = (8 << (c >> 24 & 255)) + (16 << (c & 255)) + (0 << (c >> 16 & 255)) + (24 << (c >> 8 & 255));
        const a = (d | 51555) & ~(d & 51555);
        const h = (e + 64642) % 65441;
        return ((38960 + (Nw(f, g, a, h) ^ Ts(f, g, a, h, f, g))) * 2147483629 + 2147483587) % 2147483647;
    }
    ΔⵠⲆⲆᐃᐃΔ = 0;
    document.getElementById("version").innerHTML = dw.ⲆⵠᐃΔⲆⵠⵠ + ".3";
    var rf;
    var Uw = [];
    var Vw = {
        time: Math.floor(Math.random() * 2),
        items: []
    };
    document.getElementById("game_body").style.backgroundColor = Pr.Ⲇⵠⵠᐃᐃ[Vw.time];
    Vw.items.push(new kw(hw.ΔΔᐃΔⵠ, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
    Vw.items.push(new kw(hw.ⵠΔⲆΔᐃ, 0, 0, 0, 0, 0, 0, 5));
    Vw.items.push(new kw(hw.ⵠⵠⲆΔᐃ, 0, 0, 0, 0, Math.PI / 4, 0, 0));
    Vw.items.push(new kw(hw.ⵠΔⲆΔᐃ, 0, 0, 0, 0, 0, 0, 5));
    ⵠΔᐃᐃ = new function () {
        var b = this;
        function a(a) {
            let b = a.name || a.a;
            if (a.auto) {
                return b;
            } else {
                return b + " [" + a.nu + " " + Zs[324] + "]";
            }
        }
        this.ⵠⵠᐃᐃ = null;
        this.ᐃⵠⵠᐃᐃ = 0;
        this.ΔΔⲆⵠΔ = [];
        this.ⵠᐃⲆⵠⲆΔΔ = {};
        this.ⵠⲆⵠⲆΔⵠᐃ = {};
        this.ᐃⵠΔᐃᐃ = [[], [], [], [], [], [], [], [], []];
        this.ⲆⲆⵠᐃᐃΔⵠ = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
        this.ᐃⲆⵠΔⵠ = 0;
        this.ⲆᐃᐃᐃΔΔᐃ = 0;
        this.ⵠⵠⵠⵠΔΔⲆ = function (c) {
            if (Wv !== undefined) {
                b.ΔΔⲆⵠΔ.push({
                    a: Wv.name,
                    gm: Wv.mode,
                    idx: 0,
                    m: 100,
                    nu: 0,
                    id: 0
                });
                c();
                return;
            }
            fetch($v + "/list", {
                method: "GET"
            }).then(function (a) {
                if (a.ok) {
                    a.json().then(function (d) {
                        b.ΔΔⲆⵠΔ = [];
                        b.ⵠⲆⵠⲆΔⵠᐃ = {};
                        for (let a in ew.ΔΔᐃⵠᐃⲆⲆ) {
                            const c = ew.ΔΔᐃⵠᐃⲆⲆ[a];
                            b.ΔΔⲆⵠΔ.push({
                                a: "Auto Select",
                                gm: c,
                                m: 100,
                                nu: 0,
                                auto: f
                            });
                        }
                        var j = 0;
                        var e = 2;
                        var g = 4;
                        for (let a = 0; d.length > a; a++) {
                            const c = d[a];
                            const f = c.n;
                            const k = c.l;
                            const h = c.p;
                            const l = [];
                            b.ⵠᐃⲆⵠⲆΔΔ[f] = l;
                            const m = [];
                            for (let a = 0; a < h.length; a++) {
                                const b = f + h[a][j];
                                m.push(b);
                                l.push(b);
                            }
                            for (let a = 0; a < k.length; a++) {
                                const c = k[a];
                                let d;
                                let f = ew.ΔΔᐃⵠᐃⲆⲆ[c[e]];
                                let h = f + c[1];
                                d = f in b.ⵠⲆⵠⲆΔⵠᐃ ? ++b.ⵠⲆⵠⲆΔⵠᐃ[f] : b.ⵠⲆⵠⲆΔⵠᐃ[f] = 1;
                                if (h in b.ⵠⲆⵠⲆΔⵠᐃ) {
                                    ⲆⲆⵠΔᐃΔᐃ = ++b.ⵠⲆⵠⲆΔⵠᐃ[h];
                                } else {
                                    ⲆⲆⵠΔᐃΔᐃ = b.ⵠⲆⵠⲆΔⵠᐃ[h] = 1;
                                }
                                b.ΔΔⲆⵠΔ.push({
                                    name: c[g],
                                    a: ew.ⲆΔᐃᐃᐃΔⲆΔⵠ[c[1]] + " " + ⲆⲆⵠΔᐃΔᐃ,
                                    r: c[1],
                                    gm: ew.ΔΔᐃⵠᐃⲆⲆ[c[e]],
                                    idx: d,
                                    m: 100,
                                    nu: c[3],
                                    id: c[1] + c[j],
                                    p: m
                                });
                            }
                        }
                        const a = [];
                        const k = [];
                        const i = [];
                        for (let c = 0; c < b.ΔΔⲆⵠΔ.length; c++) {
                            const d = b.ΔΔⲆⵠΔ[c];
                            if (!d.auto) {
                                if (ew.ΔΔᐃⵠᐃⲆⲆ[ew.ΔⵠⵠᐃΔ] === d.gm) {
                                    if (typeof d.name === "string" && d.name.indexOf("Private Server") !== -1) {
                                        a.push(d);
                                    } else {
                                        i.push(d);
                                    }
                                    k.push(c);
                                }
                            }
                        }
                        const h = [];
                        h.push(...i.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        h.push(...a.sort(function (a, b) {
                            return b.nu - a.nu;
                        }));
                        for (let a = 0; k.length > a; a++) {
                            const c = k[a];
                            const d = h[a];
                            d.idx = a + 1;
                            b.ΔΔⲆⵠΔ[c] = d;
                        }
                        console.log(">>>>>>>>>>", "communityServersSortNamed", a, "communityServersSortAnonymous", i, "communityServersSorted", h);
                        c();
                    });
                } else {
                    cj.setTimeout(function () {
                        b.ⵠⵠⵠⵠΔΔⲆ(c);
                    }, 3000);
                }
            });
        };
        this.ΔΔⲆⲆⲆⲆⲆⲆⵠ = function (a) {
            var b = [];
            for (var c = 0; c < a.length; c++) {
                if (a[c].a.indexOf(vr) !== -1) {
                    b.push(c);
                }
            }
            if (b.length === 0) {
                return 0;
            } else {
                return b[Math.floor(Math.random() * b.length)];
            }
        };
        this.ⲆᐃⵠⲆΔⲆⲆ = function (b) {
            var c = 0;
            for (var d = 0; d < b.length; d++) {
                c += b[d].nu;
            }
            var e = document.getElementById("servselect");
            if (ⵠΔᐃᐃ.ⲆⲆⵠᐃᐃΔⵠ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ] === -1) {
                ⵠΔᐃᐃ.ⲆⲆⵠᐃᐃΔⵠ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ] = e.selectedIndex = ⵠΔᐃᐃ.ΔΔⲆⲆⲆⲆⲆⲆⵠ(b);
            } else {
                e.selectedIndex = ⵠΔᐃᐃ.ⲆⲆⵠᐃᐃΔⵠ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ];
            }
            var f = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + b[e.selectedIndex].a + (b[e.selectedIndex].nu > 0 ? " [" + b[e.selectedIndex].nu + " " + Zs[324] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + Zs[323] + " (" + this.ⵠΔⵠⵠᐃⲆⵠ + ") " + Zs[325] + "</li>";
            for (d = 0; b.length > d; d++) {
                f += "<li role=\"option\">" + a(b[d]) + "</li>\n";
            }
            f += "<li role=\"option\" id=\"selectDisabled\">(" + c + ") " + Zs[326] + "</li>";
            f += "</div>";
            e.innerHTML = f;
            $(".md-select").on("click", function () {
                $(this).toggleClass("active");
            });
            $(".md-select ul li").on("click", function () {
                var b = $(this).text();
                var c = -1;
                for (var d = ⵠΔᐃᐃ.ᐃⵠΔᐃᐃ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ], e = 0; e < d.length; e++) {
                    if (b === a(d[e])) {
                        c = e;
                        break;
                    }
                }
                if (c !== -1) {
                    document.getElementById("servselect").selectedIndex = c;
                    ⵠΔᐃᐃ.ⲆⲆⵠᐃᐃΔⵠ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ] = c;
                    $(".md-select ul li").removeClass("active");
                    $(this).addClass("active");
                    $(".md-select label button").text(b);
                }
            });
        };
        this.ⵠΔⵠⵠᐃⲆⵠ = 0;
        this.ΔΔΔⵠⲆᐃⲆⲆᐃ = function () {
            this.ⵠΔⵠⵠᐃⲆⵠ = 0;
            for (var a = 0; ⵠΔᐃᐃ.ΔΔⲆⵠΔ.length > a; a++) {
                if (this.ΔΔⲆⵠΔ[a].gm == "experimental") {
                    this.ᐃⵠΔᐃᐃ[ew.ⲆΔⲆΔᐃ].push(this.ΔΔⲆⵠΔ[a]);
                } else if (this.ΔΔⲆⵠΔ[a].gm == "zombies") {
                    this.ᐃⵠΔᐃᐃ[ew.ⲆⵠΔΔᐃ].push(this.ΔΔⲆⵠΔ[a]);
                } else if (this.ΔΔⲆⵠΔ[a].gm == "community") {
                    this.ᐃⵠΔᐃᐃ[ew.ΔⵠⵠᐃΔ].push(this.ΔΔⲆⵠΔ[a]);
                } else if (this.ΔΔⲆⵠΔ[a].gm == "forest") {
                    this.ᐃⵠΔᐃᐃ[ew.ⲆΔᐃⲆᐃ].push(this.ΔΔⲆⵠΔ[a]);
                } else if (this.ΔΔⲆⵠΔ[a].gm == "battle-royale") {
                    this.ᐃⵠΔᐃᐃ[ew.ⲆⲆⵠΔⵠⵠᐃ].push(this.ΔΔⲆⵠΔ[a]);
                } else if (this.ΔΔⲆⵠΔ[a].gm == "vampires") {
                    this.ᐃⵠΔᐃᐃ[ew.ᐃⲆⵠⲆΔ].push(this.ΔΔⲆⵠΔ[a]);
                } else {
                    this.ᐃⵠΔᐃᐃ[ew.ⲆⲆⲆⵠⵠ].push(this.ΔΔⲆⵠΔ[a]);
                }
                this.ⵠΔⵠⵠᐃⲆⵠ += this.ΔΔⲆⵠΔ[a].nu;
            }
            for (a = 0; a < this.ᐃⵠΔᐃᐃ.length; a++) {
                if (this.ᐃⵠΔᐃᐃ[a].length === 0) {
                    this.ᐃⵠΔᐃᐃ[a].push({
                        a: Zs[327],
                        ΔⲆⲆᐃΔΔᐃⵠⲆ: 0,
                        Δᐃ: "127.0.0.1",
                        Ⲇⵠⵠ: 80
                    });
                }
            }
            this.ⲆᐃⵠⲆΔⲆⲆ(this.ᐃⵠΔᐃᐃ[0]);
            this.ΔⲆᐃᐃΔ = function (a) {
                ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ = a;
                ⵠΔᐃᐃ.ⲆᐃⵠⲆΔⲆⲆ(ⵠΔᐃᐃ.ᐃⵠΔᐃᐃ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ]);
                ⵠΔᐃᐃ.ⲆᐃⵠⲆΔⲆⲆ(ⵠΔᐃᐃ.ᐃⵠΔᐃᐃ[ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ]);
                document.getElementById("servselect").selectedIndex = ⵠΔᐃᐃ.ᐃⲆⵠΔⵠ;
            };
        };
        this.ᐃΔⲆᐃΔΔΔ = 0;
        this.ΔⲆⲆⵠⵠⵠΔ = 0;
        this.ⵠⵠⵠⲆᐃ = null;
        this.timeout = function () {
            b.ΔⲆⲆⵠⵠⵠΔ++;
            b.ⵠⵠᐃᐃ.close();
            if (dw.ΔΔⲆΔΔⲆⲆΔᐃ < b.ΔⲆⲆⵠⵠⵠΔ) {
                ff = 1;
                rf.ⲆⲆᐃⵠΔΔᐃΔⵠ = dw.ΔⲆⲆⲆᐃᐃⲆΔᐃ;
                b.ᐃⵠⵠⵠΔ(Zs[300]);
                rf.waiting = il;
                if (Ww.reconnect.enabled) {
                    Yw.ΔⲆⵠΔΔ(rf.ⲆᐃⲆᐃᐃ);
                }
            } else if (Ww.ⲆⲆⵠⲆᐃΔΔ === undefined || sr === Ww.ᐃⲆⵠⲆᐃΔᐃ || xh === Ww.ⲆⵠⲆⵠⵠⲆᐃ) {
                rf.ⵠᐃᐃΔᐃⲆᐃ(function () {
                    b.ⵠⵠᐃⵠᐃⵠⵠ();
                }, 1);
            } else {
                b.ⵠⵠᐃⵠᐃⵠⵠ();
            }
        };
        this.ᐃⲆᐃⲆΔᐃⲆ = function (a) {
            if (this.ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ == this.ᐃⵠⵠᐃᐃ) {
                this.ᐃⵠⵠᐃᐃ++;
                this.ᐃⵠⵠⵠΔ(Zs[301] + a);
                Yw.ΔⲆⵠΔΔ(rf.ⲆᐃⲆᐃᐃ);
            }
        };
        this.ⵠΔΔΔΔⵠⲆ = function () {
            this.ᐃⵠⵠⵠΔ("You speak too much");
        };
        this.ⵠᐃΔⲆⵠΔⲆⵠⲆ = function () {
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[302]);
            rf.waiting = false;
        };
        this.ⵠⵠⲆᐃΔᐃⲆⲆⲆ = function () {
            Ww.ᐃᐃᐃⲆΔ.open = false;
        };
        this.ΔⲆⵠⲆⵠⲆⵠᐃΔ = function () {
            Yw.ᐃⵠⲆⲆⲆΔⲆ = 0;
        };
        this.ⵠΔᐃΔΔΔⲆΔΔ = function () {
            Yw.ⲆᐃᐃᐃΔΔΔ = 0;
        };
        this.ΔⵠᐃⲆⵠⵠΔΔΔ = function (a) {
            Ww.ⲆΔⵠΔᐃ.ⵠⲆⵠᐃⲆ = a;
            if (lf.ⲆⲆⵠⲆᐃ > -300) {
                if (a === 0) {
                    this.ᐃⵠⵠⵠΔ(Zs[340]);
                } else {
                    this.ᐃⵠⵠⵠΔ(Zs[341]);
                }
            }
        };
        this.ᐃΔΔΔΔ = function (a) {
            Ww.ᐃΔΔΔΔ = a;
        };
        this.ⵠⵠⵠⲆⲆⵠⲆᐃⵠ = function (a) {
            Ww.ΔᐃΔⵠⵠⵠΔ = a;
        };
        this.ΔᐃΔⵠⵠⵠΔ = function (a) {
            Ww.ΔⲆᐃⵠᐃ.ⵠⲆⵠᐃⲆ = a;
            if (lf.ⲆⲆΔⵠⵠ > -300) {
                if (a === 0) {
                    this.ᐃⵠⵠⵠΔ(Zs[342]);
                } else {
                    this.ᐃⵠⵠⵠΔ(Zs[343]);
                }
            }
        };
        this.ᐃΔⵠᐃⲆΔⲆΔΔ = function (a) {
            if (a === 0) {
                document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
            } else if (a === 1) {
                document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
            } else if (a === 2) {
                document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
            } else if (a === 3) {
                document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
            }
        };
        this.ᐃⵠⵠᐃⲆᐃⵠΔⵠ = function () {
            Yw.ⵠΔΔᐃⵠⵠⵠ = 0;
        };
        this.ⵠᐃⲆⲆⵠᐃⵠΔⲆ = function () {
            Yw.ΔΔⲆⲆⵠΔᐃ = 0;
        };
        this.ΔΔⲆᐃΔΔⲆᐃⲆ = function () {
            Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ = [];
            Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ = [];
            Ww.ᐃⲆΔᐃ.id = -1;
            Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.stop();
            Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ = [];
            Ww.ΔⵠΔΔ.ΔΔⵠⲆΔ = false;
            Ww.ΔⵠΔΔ.ⵠⵠⵠⵠⵠᐃⲆⲆᐃ = false;
            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
            Ww.ΔⵠΔΔ.id = -1;
            Ww.ΔⵠΔΔ.ΔᐃⵠΔᐃ = El;
            Ww.ΔⵠΔΔ.ᐃⲆΔΔⵠ = false;
            Ww.ΔⵠΔΔ.ΔΔⲆⲆᐃ = false;
            Ww.ΔⵠΔΔ.ΔᐃΔΔⲆᐃⲆ = hh;
            Ww.ΔⵠΔΔ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 0, 1, 0, 1, 1);
        };
        this.ΔⵠᐃΔΔⵠᐃΔⵠ = function () {
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ();
            rf.waiting = false;
        };
        this.ΔⲆⲆⵠΔΔⵠ = function (a) {
            for (var b = 0; b < a.length; b++) {
                if (typeof a[b] === "string") {
                    a[b] = ΔᐃⲆᐃ.ᐃⵠᐃⵠⵠΔⲆ(a[b]);
                }
            }
            Ww.ⵠⲆⵠⲆⲆ.ⵠΔΔᐃΔ(a[1], a[2], a[3], a[4]);
        };
        this.message = function (a) {
            this.ᐃⵠⵠⵠΔ(a);
        };
        this.ⲆᐃⲆⵠⲆⵠⲆⲆΔ = function () {
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[339]);
            rf.waiting = false;
        };
        this.ΔΔΔΔΔⵠⲆⲆⲆ = function () {
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[338]);
            rf.waiting = eh;
        };
        this.ᐃⲆⲆⲆᐃᐃᐃΔⲆ = function () {
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[304]);
            rf.waiting = El;
        };
        this.ΔⵠΔⲆⲆⲆᐃΔⲆ = function () {
            Ww.ᐃⲆΔᐃ.ⲆΔⵠᐃΔΔⲆ(1, 0);
            Yw.ᐃᐃΔⵠᐃᐃᐃ();
        };
        this.ΔⲆⵠⵠΔⵠᐃⵠⲆ = function (a) {
            var b = a[1];
            var c = lf.ᐃⲆⲆΔ[b];
            c.ⲆΔⲆΔ = a[2];
            c.ΔᐃΔⲆⵠ = a[3];
            c.ᐃΔᐃᐃⲆΔⲆ = a[4];
            c.ᐃⲆᐃⲆⲆ = a[5];
            c.ⲆΔΔⵠΔ = a[6];
            c.ᐃᐃᐃⵠΔ = a[7];
            c.level = a[8];
            var d = lf.ⵠᐃⵠⵠ[b * lf.ᐃⲆⵠⲆΔⲆⵠ];
            if (d) {
                d.ⲆΔⲆΔ = a[2];
                d.ΔᐃΔⲆⵠ = a[3];
                d.ᐃΔᐃᐃⲆΔⲆ = a[4];
                d.ᐃⲆᐃⲆⲆ = a[5];
            }
        };
        this.ⲆΔⵠⵠΔⲆᐃⵠⲆ = function (a) {
            if (a === 29) {
                Ww.ᐃⲆΔᐃ.ⲆΔⵠᐃΔΔⲆ(1, 0);
                Yw.ᐃᐃΔⵠᐃᐃᐃ();
            } else {
                this.ⲆᐃⵠⵠᐃⲆᐃ([0, a, 1]);
            }
            Ww.ΔⵠΔΔ.ⲆᐃΔⵠᐃΔⲆ();
        };
        this.ⲆⵠⵠⲆΔᐃΔⲆΔ = function (a) {
            Ww.ⲆΔᐃⲆΔ.ⵠΔⵠⵠΔ = 0;
            Ww.ΔⵠΔΔ.ⲆⵠᐃᐃΔⲆⲆⲆΔ(a);
        };
        this.ΔⵠⲆᐃᐃᐃⲆΔᐃ = function (a) {
            for (var b = Ls[a].r, c = 0; b.length > c; c++) {
                if (Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length < Ww.ᐃⲆΔᐃ.max || Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[b[c][0]] > 0) {
                    var d = Math.floor(b[c][1] * 0.8);
                    if (!d) {
                        continue;
                    }
                    this.ⲆᐃⵠⵠᐃⲆᐃ([0, b[c][0], d]);
                }
            }
            Ww.ΔⵠΔΔ.ⲆᐃΔⵠᐃΔⲆ();
        };
        this.ᐃᐃΔⲆΔᐃᐃΔΔ = function (a) {
            Ww.ⲆΔᐃⲆΔ.ⵠΔⵠⵠΔ = 0;
            Ww.ΔⵠΔΔ.ΔᐃᐃᐃΔⵠᐃⲆⲆ(a);
        };
        this.ᐃⵠⵠⵠΔ = function (a) {
            if (Ww.alert.text) {
                if (Ww.alert.text !== a && Ww.alert.list[Ww.alert.list.length - 1] !== a) {
                    Ww.alert.list.push(a);
                }
            } else {
                Ww.alert.text = a;
            }
        };
        this.ⵠⲆΔⲆᐃᐃᐃⵠᐃ = function () {
            this.ᐃⵠⵠⵠΔ(Zs[305]);
        };
        this.ΔᐃΔⵠⲆⵠⲆⵠΔ = function () {
            var a;
            a = Ww.ⵠΔⲆ == 0 ? Zs[306] : Zs[307] + (Ww.ⵠΔⲆ + 1) + Zs[308];
            this.ᐃⵠⵠⵠΔ(a);
            Ww.ⵠΔⲆ++;
        };
        this.ᐃⲆⵠΔⲆᐃⵠΔⲆ = function () {
            clearTimeout(b.ⵠⵠⵠⲆᐃ);
            Ww.reconnect.enabled = wq;
            Ww.ⵠᐃⲆⲆⲆ = oe;
            this.ᐃⵠⵠⵠΔ(Zs[309]);
            Yw.ΔⲆⵠΔΔ(rf.ⲆᐃⲆᐃᐃ);
            this.ⵠⵠᐃᐃ.close();
        };
        this.ⵠⲆⲆⲆΔⲆᐃⲆᐃ = function () {
            ff = 1;
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[310]);
            rf.waiting = false;
        };
        this.ΔⲆΔᐃΔⲆΔᐃⲆ = function () {
            ff = 1;
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            this.ᐃⵠⵠⵠΔ(Zs[311]);
            rf.waiting = false;
        };
        this.ⵠⵠΔᐃΔⲆⲆΔᐃ = function (a) {
            var b = a[1];
            var c = lf.ᐃⲆⲆΔ;
            c[b].ΔᐃⵠΔⵠ = a[2];
            c[b].ⲆΔⲆΔ = a[3];
            c[b].ΔᐃΔⲆⵠ = a[4];
            c[b].ᐃΔᐃᐃⲆΔⲆ = a[5];
            c[b].ᐃⲆᐃⲆⲆ = a[6];
            c[b].ⲆΔΔⵠΔ = a[7];
            c[b].ᐃᐃᐃⵠΔ = a[8];
            c[b].level = a[9];
            c[b].ⵠⲆⲆΔΔ = 0;
            c[b].ΔᐃᐃΔᐃΔΔ = null;
            c[b].label = null;
            c[b].ᐃⵠΔΔⵠᐃⵠ = null;
            c[b].ⵠᐃⲆⲆⲆ = Wa;
            if (Uv === 1) {
                c[b].ΔᐃⵠΔⵠ += "|" + b;
            }
        };
        this.ᐃΔΔⲆΔΔⵠᐃⵠ = function () {
            this.ⵠⵠᐃᐃ[Tv](Do[qq].stringify([27]));
        };
        this.ΔᐃⵠΔᐃⲆΔΔΔ = function () {
            this.ᐃⵠⵠⵠΔ(Zs[312]);
        };
        this.ⵠⵠᐃⵠⵠⵠⲆ = function () {
            this.ᐃⵠⵠⵠΔ(Zs[313]);
        };
        this.ⲆᐃΔᐃⵠⵠⵠΔⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](vq[ba].stringify([24, a]));
            Ww.ᐃᐃᐃⲆΔ.open = yg;
        };
        this.ⲆⲆⲆⵠⵠᐃᐃⲆⲆ = function (a) {
            for (var b = aw[a - 1].items, c = 0; b.length > c && Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length < Ww.ᐃⲆΔᐃ.max; c++) {
                var d = b[c][1];
                var e = b[c][0];
                if (b[c][1] === 29) {
                    Ww.ᐃⲆΔᐃ.ⲆΔⵠᐃΔΔⲆ(1, 0);
                } else {
                    this.ⲆᐃⵠⵠᐃⲆᐃ([0, d, e]);
                }
            }
        };
        this.ⲆᐃⵠⵠᐃⲆᐃ = function (b) {
            for (var c = b.length, d = Ww.ᐃⲆΔᐃ, e = 1; e < c; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                for (var h = 0; h < d.ⵠΔⵠᐃⵠ.length; h++) {
                    if (d.ⵠΔⵠᐃⵠ[h].id == f) {
                        d.ⲆⲆΔⵠ[f] += g;
                        break;
                    }
                }
                if (h == d.ⵠΔⵠᐃⵠ.length) {
                    d.ⲆⲆΔⵠ[f] = g;
                    d.ⵠΔⵠᐃⵠ.push(Yw.ⵠⲆⲆ[f]);
                    Yw.ᐃᐃΔⵠᐃᐃᐃ();
                }
            }
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ᐃⲆⲆⲆ = function (b, c, d, e, f, g, a) {
            Ww.ᐃⲆⲆⲆ.ᐃΔⵠⵠ = b / 100;
            Ww.ᐃⲆⲆⲆ.ΔᐃⲆ = c / 100;
            Ww.ᐃⲆⲆⲆ.c = d / 100;
            Ww.ᐃⲆⲆⲆ.ᐃⲆⵠ = e / 100;
            Ww.ᐃⲆⲆⲆ.ΔⲆⵠ = f / 100;
            Ww.ᐃⲆⲆⲆ.ΔⲆⲆⵠᐃⵠⲆ = g / 100;
            Ww.ᐃΔΔΔΔ = a;
        };
        this.ⲆⲆΔⲆⲆΔⲆΔⲆ = function (a) {
            Yw.ΔⵠⲆⵠ.modify(a, 2);
        };
        this.ⵠⲆⲆⵠⵠⵠᐃᐃⲆ = function (a) {
            Yw.ΔⵠⲆⵠ.modify(a, 0);
        };
        this.claimed = function (a) {
            Yw.ΔⵠⲆⵠ.modify(a, 3);
        };
        this.ⵠⵠⲆΔⲆⵠⵠⲆᐃ = function (a, b) {
            Ww.ᐃⲆⲆⲆ.ᐃΔⵠⵠ = a / 100;
            Ww.ᐃΔΔΔΔ = b;
        };
        this.ΔΔⲆⵠᐃᐃᐃⵠᐃ = function (a) {
            Ww.ᐃⲆⲆⲆ.ᐃⲆⵠ = a / 100;
        };
        this.ᐃΔⲆⲆΔⵠⲆᐃᐃ = function (a) {
            Ww.ᐃⲆⲆⲆ.ΔᐃⲆ = a / 100;
        };
        this.ᐃΔΔΔⲆᐃⵠⲆᐃ = function (a) {
            Ww.ᐃⲆⲆⲆ.ΔⲆⲆⵠᐃⵠⲆ = a / 100;
        };
        this.ⵠⵠᐃΔⲆΔᐃᐃΔ = function (a) {
            Ww.ᐃⲆⲆⲆ.c = a / 100;
        };
        this.ΔᐃΔⵠᐃⵠⲆⲆΔ = function (a) {
            lf.time = a;
            lf.transition = tr;
            Zw.transition = 1;
        };
        this.ⲆΔⲆⲆΔᐃⲆΔΔ = function () {
            document.getElementById("game_body").style.backgroundColor = Pr.Ⲇⵠⵠᐃᐃ[lf.time];
        };
        this.ᐃΔΔΔΔⲆᐃᐃΔ = function (a) {
            if (lf.mode == ew.ᐃⲆᐃⲆᐃⵠⲆ && lf.ᐃⲆⲆΔ[a].ΔᐃⵠΔⵠ !== "spectator") {
                this.ᐃⵠⵠⵠΔ(lf.ᐃⲆⲆΔ[a].ΔᐃⵠΔⵠ + Zs[314]);
            }
            lf.ᐃⲆⲆΔ[a].ⵠᐃⲆⲆⲆ = eh;
        };
        this.ᐃⵠⵠⵠⲆΔⲆⵠⲆ = function (a) {
            var b = new Uint16Array(a);
            ᐃΔⲆⲆ.ᐃⵠΔΔ.ⵠΔⵠⵠⲆ(b[1], b[2]);
        };
        this.ᐃⵠᐃᐃⵠᐃΔⲆᐃ = function (a) {
            var b = new Uint16Array(a);
            Ww.ᐃⵠΔΔ.ⵠΔⵠⵠⲆ(b[1], b[2]);
        };
        this.ΔⲆⵠΔⲆᐃⵠᐃⲆ = function (b, c) {
            var d = new Uint16Array(c);
            for (var e = (b.length - 2) / 4, f = 0; e > f; f++) {
                var g = d[1 + f * 2];
                var i = b[4 + f * 4];
                var j = (b[5 + f * 4] >> 1) / 127 * Math.PI * 2;
                var k = lf.ⵠᐃⵠⵠ[i * lf.ᐃⲆⵠⲆΔⲆⵠ + g];
                if (k && k.ⲆΔᐃΔ) {
                    if (Zw.loaded && Zw.ⲆᐃⲆᐃᐃ) {
                        Zw.ⲆΔᐃΔ(b[5 + f * 4] & 1, ᐃⲆⲆⲆⵠ[k.type], k.x, k.y);
                    }
                    k.ⲆΔᐃΔ.angle = j;
                    k.ⲆΔᐃΔ.ⲆΔᐃⲆ = j;
                }
            }
        };
        this.ΔⲆΔᐃⲆᐃⵠⵠᐃ = function (b) {
            var c = new Uint16Array(b);
            for (var d = (c.length - 1) / 4, e = 0; d > e; e++) {
                var i;
                var j = e * 4;
                var k = c[1 + j];
                var m = c[2 + j];
                var p = (c[3 + j] >> 1) / 127 * Math.PI * 2;
                var q = c[4 + j];
                var t = Uw.ΔⵠⵠⲆ[m][k];
                switch (q) {
                    case 0:
                        (i = t.p[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = Jn;
                        break;
                    case 1:
                        (i = t.s[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 2:
                        (i = t.s[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Oq;
                        break;
                    case 3:
                        (i = t.s[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 4:
                        (i = t.t[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = Ah;
                        break;
                    case 5:
                        (i = t.t[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Jr;
                        break;
                    case 6:
                        (i = t.t[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 7:
                        (i = t.t[3][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 8:
                        (i = t.t[4][0]).angle = p;
                        i.ⲆΔᐃⲆ = Jn;
                        break;
                    case 9:
                        (i = t.t[5][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 10:
                        (i = t.g[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = ft;
                        break;
                    case 11:
                        (i = t.g[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 12:
                        (i = t.g[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = Wa;
                        break;
                    case 13:
                        (i = t.d[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 14:
                        (i = t.d[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 15:
                        (i = t.d[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = _n;
                        break;
                    case 16:
                        (i = t.b[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 17:
                        (i = t.b[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Wa;
                        break;
                    case 18:
                        (i = t.b[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = Wa;
                        break;
                    case 19:
                        (i = t.b[3][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 20:
                        (i = t.f[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = f;
                        break;
                    case 21:
                        (i = t.f[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = dl;
                        break;
                    case 22:
                        (i = t.f[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 23:
                        (i = t.sw[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = Jn;
                        break;
                    case 24:
                        (i = t.sw[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Wh;
                        break;
                    case 25:
                        (i = t.sw[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = ft;
                        break;
                    case 26:
                        (i = t.gw[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = f;
                        break;
                    case 27:
                        (i = t.gw[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Wa;
                        break;
                    case 28:
                        (i = t.gw[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = ft;
                        break;
                    case 29:
                        (i = t.dw[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = ft;
                        break;
                    case 30:
                        (i = t.dw[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = tr;
                        break;
                    case 31:
                        (i = t.dw[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = Vl;
                        break;
                    case 32:
                        (i = t.a[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 33:
                        (i = t.a[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 34:
                        (i = t.a[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 35:
                        (i = t.cs[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = ft;
                        break;
                    case 36:
                        (i = t.cs[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = Lt;
                        break;
                    case 37:
                        (i = t.cs[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 38:
                        (i = t.cs[3][0]).angle = p;
                        i.ⲆΔᐃⲆ = sk;
                        break;
                    case 40:
                        (i = t.plm[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = f;
                        break;
                    case 41:
                        (i = t.plm[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 42:
                        (i = t.plm[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = Lt;
                        break;
                    case 50:
                        (i = t.re[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = Lt;
                        break;
                    case 51:
                        (i = t.re[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 52:
                        (i = t.re[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = Bs;
                        break;
                    case 55:
                        (i = t.c[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = true;
                        break;
                    case 56:
                        (i = t.m[0][0]).angle = p;
                        i.ⲆΔᐃⲆ = Io;
                        break;
                    case 57:
                        (i = t.m[1][0]).angle = p;
                        i.ⲆΔᐃⲆ = dl;
                        break;
                    case 58:
                        (i = t.m[2][0]).angle = p;
                        i.ⲆΔᐃⲆ = dl;
                }
                if (Zw.loaded && Zw.ⲆᐃⲆᐃᐃ && i) {
                    Zw.ⲆΔᐃΔ(c[3 + j] & 1, ᐃΔᐃⵠ[q], i.x, i.y);
                }
            }
        };
        this.Ⲇᐃᐃⵠᐃ = function () {
            this.ⵠⵠᐃᐃ[Tv](tq[_o].stringify([2, Ww.Ⲇᐃᐃⵠᐃ.ⲆΔᐃⵠ, Ww.Ⲇᐃᐃⵠᐃ.ⵠⵠΔᐃⲆ]));
        };
        this.ᐃΔᐃⵠΔᐃⲆⵠⵠ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](tq[Ko].stringify([37, b, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ᐃΔᐃΔᐃᐃᐃ = function (a, b, c) {
            if (b) {
                this.ⵠⵠᐃᐃ[Tv](tq[Ko].stringify([5, b, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
            } else {
                this.ⵠⵠᐃᐃ[Tv](tq[Wo].stringify([4, c, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
            }
        };
        this.ΔⵠⲆΔⵠΔⵠᐃΔ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([25, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ΔⲆⵠΔⵠⵠᐃᐃⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[Aq].stringify([19, a]));
        };
        this.ⵠΔᐃΔⲆᐃⲆⵠⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](Xo[_o].stringify([36, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ⲆΔΔΔⵠⵠⵠΔΔ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](vq[aa].stringify([9, b, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ, a.type]));
        };
        this.ᐃⲆᐃᐃΔᐃΔⲆΔ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](vq[aa].stringify([35, b, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ⲆᐃⲆᐃΔⵠΔⵠⲆ = function (a, b, c) {
            this.ⵠⵠᐃᐃ[Tv](Xo[Ko].stringify([13, b, c, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ⵠⲆⵠⵠⲆⵠᐃ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([26, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ, a.type]));
        };
        this.ΔΔᐃⲆⵠⵠΔⵠⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([7, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ΔⵠⵠⲆᐃⵠᐃⵠᐃ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([18, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ⲆΔⵠⵠΔⲆᐃΔⵠ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](zq[la].stringify([15, a.ⲆΔᐃⵠ, a.ⵠⵠΔᐃⲆ]));
        };
        this.ᐃⵠⲆᐃⲆⲆⲆΔⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](Bq[ba].stringify([8, a.ⵠⵠΔᐃⲆ]));
        };
        this.ᐃᐃⵠⲆⵠⲆⵠ = function (a) {
            b.ⵠⵠᐃᐃ[Tv](fa[Aq].stringify([32, Ww.ⲆⵠⵠⲆᐃ.id, Ww.ⵠᐃΔᐃΔ[a]]));
        };
        this.ᐃΔⵠⵠᐃΔⵠⲆᐃ = function () {
            b.ⵠⵠᐃᐃ[Tv](_a[Sa].stringify([21, Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ, Ww.ⲆⵠⵠⲆᐃ.id]));
        };
        this.ᐃⵠⲆⵠⲆⲆⵠ = function () {
            b.ⵠⵠᐃᐃ[Tv](Eq[Ra].stringify([11]));
        };
        this.ⵠⵠᐃΔⲆⲆⵠⵠⲆ = function () {
            b.ⵠⵠᐃᐃ[Tv](Eq[Aq].stringify([6, Ww.ⲆⵠⵠⲆᐃ.id]));
            if (document.getElementById("lock_team").innerHTML == "LOCK") {
                Ww.ⲆⵠⵠⲆᐃ.lock = 1;
                document.getElementById("lock_team").innerHTML = "UNLOCK";
            } else {
                Ww.ⲆⵠⵠⲆᐃ.lock = 0;
                document.getElementById("lock_team").innerHTML = "LOCK";
            }
        };
        this.ᐃΔᐃ = function (j, e, i) {
            var k = new Uint16Array(j);
            if (i) {
                lf.ᐃᐃᐃⲆⲆΔⵠⲆⵠ();
            }
            for (var n = (e.length - 2) / 18, o = 0; n > o; o++) {
                var q = 2 + o * 18;
                var t = 1 + o * 9;
                var w = e[q];
                var x = k[t + 1];
                var y = k[t + 5];
                var z = lf.ᐃⲆⵠⲆΔⲆⵠ * w + y;
                if (x & _v.ᐃⲆⲆⲆⲆΔⲆΔᐃ) {
                    lf.ⵠΔᐃⲆⲆⲆⲆⵠⲆ(z);
                } else {
                    var A = k[t + 2];
                    var B = k[t + 3];
                    var D = k[t + 4];
                    var E = k[t + 6];
                    var F = k[t + 7];
                    var G = k[t + 8];
                    var H = Math.PI * (e[q + 1] / 255) * 2;
                    if (lf.ⵠᐃⵠⵠ[z]) {
                        var I = lf.ⵠᐃⵠⵠ[z];
                        I.r.x = B;
                        I.r.y = D;
                        if (w != 0 && dw.ᐃᐃΔⲆΔΔᐃᐃⵠ < ΔᐃⲆᐃ.ΔΔⵠᐃ(I, I.r)) {
                            I.x = B;
                            I.y = D;
                        }
                        if (Ww.id !== I.id || w === 0) {
                            I.ⲆⵠⲆΔΔⵠᐃ = H;
                        }
                        I.action |= x;
                        I.info = E;
                        I.ᐃᐃᐃᐃΔ = F;
                        I.ⵠⵠᐃⲆⲆ = G;
                        if (I.ⲆΔᐃⲆ) {
                            I.ⲆΔᐃⲆ(x);
                        }
                    } else {
                        var J = new kw(A, w, y, B, D, H, x, E, F, G);
                        lf.ⵠᐃⵠⵠ[z] = J;
                        lf.ᐃΔᐃ[A].push(J);
                    }
                }
            }
        };
        this.ᐃⵠⵠΔ = function (a) {
            this.ᐃΔⲆᐃΔΔΔ = $w;
            var b = new Uint16Array(a);
            Ww.ⲆⲆᐃⵠᐃ.ⲆⲆⵠⲆⲆ(b);
        };
        this.ᐃⲆⵠⲆΔⲆΔᐃΔ = function (a) {
            if (Dg !== undefined) {
                Ls = Dg;
            }
            if (a.length > 0) {
                Dg = JSON.parse(JSON.stringify(Ls));
                for (var b = 0; a.length > b; b++) {
                    var c = a[b];
                    var d = Ls[c.item];
                    if (vk !== d) {
                        d.r = c.recipe;
                        d.w = c.workbench;
                        d.f = c.fire;
                        d.ΔⲆⵠ = c.water;
                        d.e = c.well;
                        d.time = 1 / c.time;
                    }
                }
            }
        };
        this.ᐃᐃᐃᐃΔⲆⵠ = function (a) {
            if (a && a.length !== 0) {
                Ww.ᐃᐃᐃᐃΔⲆⵠ.message = function (b) {
                    var c = document.createElement("canvas");
                    var d = c.getContext("2d");
                    for (d.lineJoin = "round"; b.indexOf("\\n") !== -1;) {
                        b = b.replace("\\n", "\n");
                    }
                    b = b.split("\n");
                    ⲆΔ = [];
                    var f = b.length * 18 + 10;
                    var g = 0;
                    d.font = 14 + "px Baloo Paaji";
                    for (var h = 0; h < b.length; h++) {
                        if (b[h].charAt(0) === "#") {
                            ⲆΔ[h] = b[h].substring(0, 7);
                            b[h] = b[h].substring(8);
                        } else {
                            ⲆΔ[h] = "#FFFFFF";
                        }
                        g = Math.max(d.measureText(b[h]).width + 16, g);
                    }
                    c.height = f;
                    c.width = g;
                    h = 0;
                    for (; b.length > h; h++) {
                        var i = Ed(1, b[h], 14, ⲆΔ[h], null, null, null, null, null, "#000", 6);
                        d.drawImage(i, 8, h * 18 + 5);
                    }
                    return c;
                }(a);
            } else {
                Ww.ᐃᐃᐃᐃΔⲆⵠ.message = wh;
            }
        };
        this.ᐃᐃᐃΔᐃ = function (a) {
            var b = lf.ⵠᐃⵠⵠ[a[1] * lf.ᐃⲆⵠⲆΔⲆⵠ];
            if (b) {
                if (lf.mode === ew.ⲆⵠΔΔᐃ && b.ⲆΔⲆΔ === ew.ⵠⲆᐃⵠⲆⲆᐃ) {
                    if (Ww.ΔⵠᐃⲆⲆ) {
                        if (Math.random() > 0.5) {
                            b.text.push(a[2] + " ..." + Δᐃᐃᐃᐃ);
                        } else {
                            b.text.push(Δᐃᐃᐃᐃ + "... " + a[2]);
                        }
                    } else {
                        b.text.push(ΔⵠⵠΔΔⲆⵠ[Math.floor(Math.random() * ΔⵠⵠΔΔⲆⵠ.length)]);
                    }
                } else {
                    b.text.push(a[2]);
                }
            }
        };
        this.ΔⵠⵠⲆⵠᐃᐃΔⵠ = function (a) {
            if (Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ.length !== Ww.ᐃⲆΔᐃ.max || Ls[a].ⲆⵠⲆᐃ === 29 || Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(Ls[a].ⲆⵠⲆᐃ) != -1 || Ww.ᐃⲆΔᐃ.ⲆⲆⵠᐃᐃⵠⲆⲆⲆ(Ls[a].r)) {
                this.ⵠⵠᐃᐃ[Tv](Do[qq].stringify([1, a]));
                return 1;
            } else {
                this.ⵠⵠᐃⵠⵠⵠⲆ();
                return 0;
            }
        };
        this.ΔᐃⵠΔᐃ = function (a) {
            Ww.ΔⵠΔΔ.ⵠⲆⵠΔⵠⵠⲆᐃⵠ(a);
        };
        this.ᐃⲆΔΔⵠ = function (a) {
            Ww.ΔⵠΔΔ.ᐃⲆΔΔⵠ = a;
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ΔΔⲆⲆᐃ = function (a) {
            Ww.ΔⵠΔΔ.ΔΔⲆⲆᐃ = a;
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ΔᐃΔΔⲆᐃⲆ = function (a) {
            Ww.ΔⵠΔΔ.ΔᐃΔΔⲆᐃⲆ = a;
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ⲆᐃᐃⵠᐃⲆΔⲆⲆ = function (a) {
            this.ᐃⵠⵠⵠΔ(Zs[315]);
        };
        this.ΔⲆⵠⲆΔΔΔⵠΔ = function () {
            Ww.ΔⵠΔΔ.ⲆᐃΔⵠᐃΔⲆ();
        };
        this.ⲆⵠⲆᐃᐃ = function (a) {
            Yw.ⲆⵠⲆᐃᐃ.ᐃⲆⲆΔ = [];
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            var c = 0;
            for (var d = 1; d < a.length; d += 2) {
                var e = {
                    x: Math.floor(a[d] * lf.w / 250),
                    y: Math.floor(a[d + 1] * lf.ΔᐃⲆ / 250)
                };
                if (b && !c && !Ww.ᐃⵠᐃⲆⵠΔⵠ && ΔᐃⲆᐃ.ΔΔⵠᐃ(e, b) < 250) {
                    c += 1;
                } else {
                    Yw.ⲆⵠⲆᐃᐃ.ᐃⲆⲆΔ.push(e);
                }
            }
        };
        this.ΔⵠⵠΔⵠᐃⲆⵠⲆ = function () {
            Ww.Ⲇᐃᐃⵠᐃ.open = Sr;
            Ww.ΔⲆⵠᐃⵠ.enabled = Bk;
            Ww.ΔⲆⵠᐃⵠ.ⵠΔⵠⵠΔ = -1;
            Ww.ΔⲆⵠᐃⵠ.label = null;
            Ww.ΔⲆⵠᐃⵠ.ᐃΔΔΔⵠᐃΔ = null;
            Ww.ΔⲆⵠᐃⵠ.now = -1;
        };
        this.ΔⲆⵠᐃⵠ = function (a) {
            ew.ΔⵠⲆΔᐃΔⵠ = a;
            Ww.ΔⲆⵠᐃⵠ.enabled = Bs;
            Ww.ΔⲆⵠᐃⵠ.ⵠΔⵠⵠΔ = new Date().getTime();
            Ww.ΔⲆⵠᐃⵠ.label = null;
            Ww.ΔⲆⵠᐃⵠ.now = -1;
            for (var b = [45, 149, 57, 0, 5, 6, 30, 19, 62, 63, 9, 13, 12, 14, 15, 33, 34, 16, 17, 18, 94, 95, 96, 97, 98, 99, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92, 93, 8, 1, 3, 4, 31, 32, 55, 53, 54], c = 0; c < b.length; c++) {
                var d = Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(b[c]);
                if (d != -1) {
                    Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆᐃ(b.length[c], d);
                }
            }
            Ww.ΔⵠΔΔ.ⲆᐃΔⵠᐃΔⲆ();
        };
        this.ΔⵠⵠᐃⵠⲆᐃⵠΔ = function (a, b, c) {
            this.ⵠⵠⵠⵠⲆⲆⲆ(a, b * 256 + c);
        };
        this.ⵠⵠⵠⵠⲆⲆⲆ = function (a, b) {
            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
            Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆΔ(a, b, Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(a));
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ΔᐃⵠᐃⵠΔΔⵠⲆ = function (a) {
            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
            Ww.ⲆⵠΔΔΔ.wait = true;
            var b = Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(a);
            Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆΔ(a, 1, b);
            if (b >= 0 && !Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ[a]) {
                Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
            }
            if (a == 159) {
                Ww.ⵠᐃΔᐃΔ = [Ww.id];
            }
        };
        this.ⵠᐃⵠⲆΔᐃⲆᐃⵠ = function () {
            this.ⵠⵠᐃᐃ[Tv](tq[_o].stringify([12]));
        };
        this.ᐃᐃᐃΔⵠⵠⲆⵠⵠ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](vq[Wo].stringify([16, a.ⵠΔⲆⲆᐃ, a.id]));
        };
        this.ⲆⲆⲆⲆⲆᐃⵠⲆΔ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](vq[aa].stringify([14, a, b]));
        };
        this.ⵠⵠⲆᐃᐃⲆⲆⲆΔ = function () {
            var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            if (a) {
                var b = Math.PI * 2;
                this.ⵠⵠᐃᐃ[Tv](vq[Wo].stringify([23, Ww.ΔⵠΔΔ.ᐃⵠΔⲆ, Math.floor((a.angle + b) % b * 255 / b), Ww.ΔⵠΔΔ.mode]));
            }
        };
        this.ᐃⵠⲆᐃⲆ = function (a, b) {
            switch (a) {
                case 195:
                case 110:
                case 116:
                case 117:
                case 145:
                case 127:
                case 133:
                case 136:
                case 142:
                case 143:
                case 189:
                case 207:
                case 233:
                case 205:
                case 209:
                case 211:
                case 192:
                case 137:
                case 138:
                case 196:
                case 197:
                case 200:
                case 199:
                    Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
                    this.ⵠⵠᐃᐃ[Tv](Xo[Ko].stringify([22, a]));
                    break;
                case 114:
                case 160:
                case 115:
                case 132:
                case 188:
                case 206:
                case 204:
                case 191:
                case 193:
                case 208:
                case 210:
                case 113:
                case 162:
                case 163:
                case 164:
                case 165:
                case 118:
                case 167:
                case 151:
                case 152:
                case 166:
                case 171:
                case 172:
                case 173:
                case 124:
                case 218:
                case 212:
                case 213:
                case 214:
                case 215:
                case 216:
                case 220:
                case 168:
                case 169:
                case 170:
                case 119:
                case 122:
                case 123:
                case 217:
                case 219:
                case 125:
                case 190:
                case 141:
                case 135:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 198:
                case 201:
                case 182:
                case 183:
                case 144:
                case 159:
                case 221:
                    if (!Ww.ΔⵠᐃⲆⲆ) {
                        if (a === Ww.ΔⵠΔΔ.ᐃⵠΔⲆ) {
                            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
                        } else {
                            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = a;
                        }
                    }
                    break;
                case 0:
                case 57:
                case 5:
                case 6:
                case 30:
                case 19:
                case 9:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 92:
                case 93:
                case 12:
                case 13:
                case 14:
                case 15:
                case 33:
                case Vr.ᐃΔⵠΔⵠᐃⵠᐃᐃ:
                case 16:
                case 17:
                case 34:
                case 18:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    if (!Ww.ΔⵠᐃⲆⲆ) {
                        Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
                        if ((c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ]) && a === c.right) {
                            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([22, 7]));
                        } else {
                            Ww.ⲆΔᐃⵠⲆ.wait = Wa;
                            this.ⵠⵠᐃᐃ[Tv](zq[la].stringify([22, a]));
                        }
                    }
                    break;
                case 1:
                case 8:
                case 3:
                case 4:
                case 35:
                case 36:
                case 37:
                case 28:
                case 38:
                case 39:
                case 31:
                case 32:
                case 45:
                case 46:
                case 50:
                case 51:
                case 52:
                case 55:
                case 56:
                case 53:
                case 54:
                case 89:
                case 49:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                    if (!Ww.ΔⵠᐃⲆⲆ) {
                        Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
                        if ((c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ]) && c.right === a) {
                            this.ⵠⵠᐃᐃ[Tv](Bq[ba].stringify([22, 7]));
                        } else {
                            this.ⵠⵠᐃᐃ[Tv](fa[Aq].stringify([22, a]));
                        }
                    }
                    break;
                case 223:
                case 224:
                case 225:
                case 239:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 91:
                    if (!Ww.ΔⵠᐃⲆⲆ) {
                        Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
                        var c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                        this.ⵠⵠᐃᐃ[Tv](fa[Aq].stringify([22, a]));
                    }
                    break;
                case 77:
                case 78:
                case 79:
                case 58:
                case 25:
                case 26:
                case 27:
                case 43:
                case 44:
                case 20:
                case 21:
                case 22:
                case 59:
                case 60:
                case 90:
                case 61:
                case 47:
                    if ((c = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ]) && a !== c.ⵠΔᐃⲆᐃ) {
                        Ww.ⲆᐃΔᐃᐃ.wait = true;
                    }
                    this.ⵠⵠᐃᐃ[Tv](Xo[aa].stringify([22, a]));
                    break;
                case 10:
                case 83:
                case 84:
                case 86:
                case 11:
                case 40:
                case 88:
                case 82:
                case 80:
                case 81:
                case 41:
                case 42:
                case 85:
                case 23:
                case 24:
                case 48:
                    this.ⵠⵠᐃᐃ[Tv](_a[Sa].stringify([22, a]));
            }
        };
        this.ᐃΔᐃⲆⵠⵠΔⲆΔ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](vq[qq].stringify([30, a]));
        };
        this.ΔⵠᐃⲆⵠᐃⵠⵠⲆ = function (a) {
            Ww.ⲆⵠΔΔΔ.wait = true;
            var b = Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(a);
            Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆᐃ(a, b);
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ᐃⵠⲆⵠᐃΔᐃⲆⵠ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](Do[ba].stringify([28, a]));
        };
        this.ⵠⲆⵠⵠΔⲆⵠΔΔ = function (a, b) {
            this.ⵠⵠᐃᐃ[Tv](tq[_o].stringify([20, a]));
        };
        this.ⲆⲆΔⵠΔⵠΔΔⲆ = function (a) {
            Ww.ⲆⵠΔΔΔ.wait = true;
            var b = Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(a);
            Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆΔ(a, 1, b);
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ΔΔΔⵠΔΔᐃΔΔ = function (a) {
            var b = a[1];
            var c = a[2];
            Ww.ⲆⵠΔΔΔ.wait = true;
            var d = Ww.ᐃⲆΔᐃ.ⵠⵠΔⲆⲆ(b);
            Ww.ᐃⲆΔᐃ.ᐃΔⲆᐃΔⲆΔ(b, c, d);
            Ww.ΔⵠΔΔ.ⲆΔᐃⲆ();
        };
        this.ᐃΔⲆᐃⲆᐃᐃⵠⵠ = function () {
            this.ⵠⵠᐃᐃ[Tv](tq[_o].stringify([38]));
        };
        this.ⲆΔⵠⵠⲆⲆⵠᐃΔ = function (a) {
            var b = Math.PI * 2;
            this.ⵠⵠᐃᐃ[Tv](vq[Wo].stringify([3, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ᐃⵠⵠⵠⲆᐃⵠⵠᐃ = function (a) {
            var b = Math.PI * 2;
            this.ⵠⵠᐃᐃ[Tv](vq[Wo].stringify([29, Math.floor((a + b) % b * 255 / b)]));
        };
        this.ⵠᐃⵠⲆⵠΔᐃⲆⵠ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ⵠⵠⵠᐃⵠⵠΔ[0].stringify([31, a]));
        };
        this.ⲆⵠⵠᐃⵠᐃⵠⲆⲆ = function (a) {
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([10, a]));
        };
        this.ΔΔΔⲆΔᐃⲆⵠⵠ = function (a) {
            var b = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
            if (Ww.ΔⵠᐃⲆⲆ) {
                if (Math.random() > 0.5) {
                    b.text.push(a.substring(0, 25) + " ..." + Δᐃᐃᐃᐃ);
                } else {
                    b.text.push(Δᐃᐃᐃᐃ + "... " + a.substring(0, 25));
                }
            } else {
                b.text.push(a);
            }
            this.ⵠⵠᐃᐃ[Tv](ia[aa].stringify([17, a]));
        };
        this.ⵠⵠⵠⵠΔ = function (a) {
            var b = ᐃΔⲆⲆ.select.ᐃΔᐃ;
            if (b.length != 0) {
                var c = [31];
                var d = [];
                ΔᐃⲆᐃ.ΔⵠΔⲆⲆΔⲆ(a, {
                    x: ᐃΔⲆⲆ.ᐃⵠΔΔ.rx,
                    y: ᐃΔⲆⲆ.ᐃⵠΔΔ.ry
                });
                c.push(a.x);
                c.push(a.y);
                for (var e = 0; b.length > e; e++) {
                    d.push(b[e].ᐃΔⲆⲆⵠⲆΔΔᐃ);
                }
                c.push(d);
                this.ⵠⵠᐃᐃ[Tv](zq[la].stringify(c));
            }
        };
        this.ΔᐃⲆⲆΔⵠⵠ = 0;
        this.ⲆᐃⲆΔⵠⵠⵠ = {
            Δᐃ: 0,
            ᐃⵠⲆⵠ: 0
        };
        this.ᐃⲆⲆⲆΔⵠΔⵠⲆ = function () {
            if ($w - this.ΔᐃⲆⲆΔⵠⵠ > dw.ᐃΔⲆⲆⲆⲆⲆⲆⲆ) {
                this.ΔᐃⲆⲆΔⵠⵠ = $w;
                var a = Ww.ᐃⵠΔΔ;
                var b = Math.floor(a.x / 100);
                var c = Math.floor(a.y / 100);
                if (b != this.ⲆᐃⲆΔⵠⵠⵠ.Δᐃ || this.ⲆᐃⲆΔⵠⵠⵠ.ᐃⵠⲆⵠ != c) {
                    this.ⵠⵠᐃᐃ[Tv](fa[ba].stringify([0, Math.floor(-a.x), Math.floor(-a.y)]));
                    this.ⲆᐃⲆΔⵠⵠⵠ.Δᐃ = b;
                    this.ⲆᐃⲆΔⵠⵠⵠ.ᐃⵠⲆⵠ = c;
                }
            }
        };
        this.ⲆᐃᐃᐃΔᐃΔ = 0;
        this.ⲆⵠⵠⲆⵠᐃⲆΔⵠ = function () {
            if (dw.ᐃⲆⵠᐃᐃⵠᐃⲆᐃ < $w - this.ⲆᐃᐃᐃΔᐃΔ) {
                this.ⲆᐃᐃᐃΔᐃΔ = $w;
                this.ping();
            }
        };
        this.ⲆⲆΔⲆᐃΔⵠᐃΔ = function () {
            Ww.reconnect.enabled = io;
            if (this.ᐃⵠⵠᐃᐃ == this.ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ) {
                this.ᐃⵠⵠᐃᐃ++;
                this.ⵠⵠᐃᐃ.close();
                ⵠΔᐃᐃ.connect();
            }
        };
        this.ⲆⵠᐃⲆⵠΔⵠⵠΔ = function (a) {
            this.ᐃⵠⵠⵠΔ(Zs[316]);
            for (var b = 1; b < a.length; b++) {
                Ww.ⵠᐃΔᐃΔ.push(a[b]);
            }
        };
        this.ᐃᐃΔⲆⵠⵠⲆᐃⵠ = function (a) {
            this.ᐃⵠⵠⵠΔ(lf.ᐃⲆⲆΔ[a].ΔᐃⵠΔⵠ + Zs[318]);
            Ww.ⵠᐃΔᐃΔ.push(a);
            var b = document.getElementById("team_box");
            if (Yw.ⲆⵠΔΔⵠ != -1 && b.style.display == "inline-block") {
                Yw.ⲆᐃᐃΔⵠ[Yw.ⲆⵠΔΔⵠ].action();
            }
        };
        this.ⵠΔΔΔΔⲆⵠⵠᐃ = function () {
            this.ᐃⵠⵠⵠΔ(Zs[319]);
            Ww.ⲆⵠⵠⲆᐃ.wait = yj;
            Ww.ⵠᐃΔᐃΔ = [];
            document.getElementById("team_box").style.display = "none";
        };
        this.ΔΔᐃΔⲆΔⵠᐃⲆ = function (a) {
            if (Ww.id == a) {
                this.ᐃⵠⵠⵠΔ(Zs[320]);
                Ww.ⲆⵠⵠⲆᐃ.wait = true;
                Ww.ⵠᐃΔᐃΔ = [];
                document.getElementById("team_box").style.display = "none";
            } else {
                this.ᐃⵠⵠⵠΔ(lf.ᐃⲆⲆΔ[a].ΔᐃⵠΔⵠ + Zs[321]);
                for (var b = 0; Ww.ⵠᐃΔᐃΔ.length > b; b++) {
                    if (a == Ww.ⵠᐃΔᐃΔ[b]) {
                        Ww.ⵠᐃΔᐃΔ.splice(b, 1);
                        break;
                    }
                }
                var c = document.getElementById("team_box");
                if (Yw.ⲆⵠΔΔⵠ != -1 && c.style.display == "inline-block") {
                    Yw.ⲆᐃᐃΔⵠ[Yw.ⲆⵠΔΔⵠ].action();
                }
            }
        };
        this.ⵠⲆⲆⵠⵠⵠᐃⵠⵠ = function (a) {
            Ww.ⵠᐃⲆⲆⲆ = false;
            this.ᐃⵠⵠⵠΔ(Zs[322]);
            if (this.ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ == this.ᐃⵠⵠᐃᐃ) {
                this.ᐃⵠⵠᐃᐃ++;
                Yw.ΔⲆⵠΔΔ(rf.ⲆᐃⲆᐃᐃ);
                this.ⵠⵠᐃᐃ.close();
            }
        };
        this.ⵠⲆᐃⲆⲆⲆᐃⵠᐃ = function (a, b) {
            Ww.ⵠᐃⲆⲆⲆ = false;
            var c = new Uint16Array(b);
            var d = new Uint32Array(b);
            Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠⲆⲆⵠⲆᐃⲆ = at[a][Math.floor(Math.random() * at[a].length)];
            Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠⲆⲆΔΔ = ΔᐃⲆᐃ.ΔΔⲆΔⵠΔᐃ(lf.ᐃⲆⲆΔ[Ww.id].ⵠⲆⲆΔΔ);
            Ww.ⲆᐃΔⲆⲆΔᐃ.ⵠᐃΔᐃᐃⵠⵠ = ΔᐃⲆᐃ.ΔΔⲆΔⵠΔᐃ(d[1]);
            Ww.ⲆᐃΔⲆⲆΔᐃ.ᐃⵠⵠΔⵠ = c[1];
            this.ᐃⵠⵠⵠΔ(Zs[317]);
            if (this.ᐃⵠⵠᐃᐃ == this.ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ) {
                this.ᐃⵠⵠᐃᐃ++;
                Yw.ΔⲆⵠΔΔ(Xw.ⲆᐃⲆᐃᐃ);
                this.ⵠⵠᐃᐃ.close();
                try {
                    cj.Widget.adsRefresh();
                } catch (a) { }
            }
            Settings.AutoSpike.e = false;
        };
        this.ping = function () {
            this.ⵠⵠᐃᐃ[Tv](dw.ΔΔΔⵠⲆΔᐃⲆⲆ);
        };
        this.ⲆⲆⵠⲆΔⵠᐃΔⲆ = function () {
            if (this.ⵠⵠᐃᐃ.readyState == 3) {
                this.ᐃΔⲆᐃΔΔΔ -= dw.ᐃᐃΔⵠΔⵠΔ;
            }
        };
        this.ᐃΔΔⲆⵠΔⵠⵠⵠ = function () {
            if (dw.ⲆⲆⵠΔⵠⵠᐃⲆⵠ < cf) {
                this.ᐃΔⲆᐃΔΔΔ = $w;
            }
            if ($w - this.ᐃΔⲆᐃΔΔΔ > dw.ᐃᐃΔⵠΔⵠΔ) {
                this.ᐃΔⲆᐃΔΔΔ = $w;
                this.ⲆⲆΔⲆᐃΔⵠᐃΔ();
            }
        };
        this.ⵠᐃⵠΔᐃᐃΔⵠΔ = function (c) {
            ff++;
            clearTimeout(this.ⵠⵠⵠⲆᐃ);
            document.getElementById("commandMainBoxName").innerHTML = this.ᐃⵠΔᐃᐃ[this.ᐃⲆⵠΔⵠ][this.ⲆⲆⵠᐃᐃΔⵠ[this.ᐃⲆⵠΔⵠ]].a;
            document.getElementById("exploreForest").src = "img/forest-leaf.png";
            document.getElementById("exploreWinter").src = "img/winter-flake.png";
            document.getElementById("exploreDesert").src = "img/desert-cactus.png";
            document.getElementById("exploreLava").src = "img/lava-volcano.png";
            this.ᐃΔⲆᐃΔΔΔ = $w;
            Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.ᐃᐃΔⲆⲆ = Ww.ᐃⲆⲆⲆ.ᐃᐃⲆⲆⲆ.ⵠⲆⵠⲆᐃ;
            Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ.ᐃᐃΔⲆⲆ = Ww.ᐃⲆⲆⲆ.ᐃΔᐃⵠᐃᐃⵠ.ⵠⲆⵠⲆᐃ;
            Ww.ᐃⲆⲆⲆ.ⵠᐃΔΔΔⵠᐃ.ᐃᐃΔⲆⲆ = Ww.ᐃⲆⲆⲆ.ⵠᐃΔΔΔⵠᐃ.ⵠⲆⵠⲆᐃ;
            Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.ᐃᐃΔⲆⲆ = Ww.ᐃⲆⲆⲆ.ΔᐃᐃⲆΔᐃⲆ.ⵠⲆⵠⲆᐃ;
            Ww.ᐃⲆⲆⲆ.ᐃⲆΔⵠⲆ.ᐃᐃΔⲆⲆ = Ww.ᐃⲆⲆⲆ.ᐃⲆΔⵠⲆ.ⵠⲆⵠⲆᐃ;
            Ww.ᐃⲆⲆⲆ.ᐃΔⵠⵠ = 1;
            Ww.ᐃⲆⲆⲆ.c = 1;
            Ww.ᐃⲆⲆⲆ.ΔᐃⲆ = 1;
            Ww.ᐃⲆⲆⲆ.ᐃⲆⵠ = 1;
            Ww.ᐃⲆⲆⲆ.ΔⲆⵠ = 1;
            Ww.ᐃⲆⲆⲆ.ΔⲆⲆⵠᐃⵠⲆ = 1;
            Ww.ⵠΔᐃⵠΔⲆᐃ = hj;
            Yw.ⲆⵠΔⵠⵠ.display = 0;
            Ww.ᐃⲆΔᐃ.ⵠΔⵠᐃⵠ = [];
            Ww.ᐃⲆΔᐃ.ⲆⲆΔⵠ = [];
            Ww.ᐃⲆΔᐃ.max = ew.ⲆⲆⵠⵠⵠⵠΔ;
            Ww.ᐃⲆΔᐃ.ⲆⲆΔⲆⲆⵠⲆ = 0;
            Ww.ᐃⲆΔᐃ.ⲆⵠⲆΔⲆ = 0;
            Ww.ᐃⲆΔᐃ.id = -1;
            Yw.ᐃⵠⲆⲆⲆΔⲆ = 1;
            Yw.ⲆᐃᐃᐃΔΔΔ = 1;
            Yw.ΔΔⲆⲆⵠΔᐃ = 1;
            Yw.ⵠΔΔᐃⵠⵠⵠ = 1;
            Ww.ⵠᐃⲆⲆⲆ = Ah;
            Ww.ᐃⲆΔᐃ.ⵠᐃΔᐃΔΔᐃ.stop();
            Ww.ΔⵠΔΔ.ᐃⵠⲆⲆⲆ = [];
            Ww.ΔⵠΔΔ.ΔΔⵠⲆΔ = wq;
            Ww.ΔⵠΔΔ.ⵠⵠⵠⵠⵠᐃⲆⲆᐃ = Ui;
            Ww.ΔⵠΔΔ.ᐃⵠΔⲆ = -1;
            Ww.ΔⵠΔΔ.id = -1;
            Ww.ΔⵠΔΔ.ΔᐃⵠΔᐃ = false;
            Ww.ΔⵠΔΔ.ᐃⲆΔΔⵠ = hh;
            Ww.ΔⵠΔΔ.ΔΔⲆⲆᐃ = fg;
            Ww.ΔⵠΔΔ.ΔᐃΔΔⲆᐃⲆ = false;
            Ww.ΔⵠΔΔ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 0, 1, 0, 1, 1);
            Ww.ⲆΔᐃⵠⲆ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 1, 0, 1 / 10, 1);
            Ww.ⲆΔᐃⵠⲆ.wait = $h;
            Ww.ⲆᐃΔᐃᐃ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(false, 0, 1, 0, 0.2, 1);
            Ww.ⲆᐃΔᐃᐃ.wait = il;
            Ww.ⲆⵠΔΔΔ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(fg, 0, 1, 0, 1, 1);
            Ww.ⲆⵠΔΔΔ.wait = eh;
            Ww.ⲆⵠⵠⲆᐃ.id = -1;
            Ww.ⲆⵠⵠⲆᐃ.ⲆΔᐃⵠ = -1;
            Ww.ⲆⵠⵠⲆᐃ.wait = false;
            Ww.ⲆⵠⵠⲆᐃ.timeout = new ΔᐃⲆᐃ.ⵠᐃⲆᐃ(hh, 0, 1, 0, 1 / 30, 1);
            Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.x = -1;
            Yw.ⲆⵠⲆᐃᐃ.ⲆⲆⵠΔΔ.y = -1;
            Yw.ΔΔΔⲆ.open = Gq;
            Yw.ⲆⵠⲆᐃᐃ.ᐃⲆⲆΔ = [];
            Ww.ⵠᐃΔⲆⵠ.enabled = false;
            lf.mode = c[1];
            if (c[20] !== Aj && vk !== c[21]) {
                lf.ⵠᐃⵠⲆᐃ = c[20];
                lf.ΔⲆΔΔⵠ = c[21];
                lf.w = lf.ⵠᐃⵠⲆᐃ * lf.ⵠⵠⵠⵠΔⲆᐃ;
                lf.ΔᐃⲆ = lf.ΔⲆΔΔⵠ * lf.ⲆᐃᐃⵠⵠⵠⲆ;
            }
            lf.ᐃⵠⲆΔⲆΔⵠ = c[22];
            lf.ᐃⲆⲆⵠⵠ = c[23];
            b.ᐃᐃᐃᐃΔⲆⵠ(c[24]);
            b.ᐃⲆⵠⲆΔⲆΔᐃΔ(c[25]);
            Ww.ⲆΔⵠΔᐃ.ⵠⲆⵠᐃⲆ = c[26];
            Ww.ΔᐃΔⵠⵠⵠΔ = 0;
            Ww.ΔⲆᐃⵠᐃ.ⵠⲆⵠᐃⲆ = c[27];
            lf.ⵠᐃⲆᐃᐃΔⲆᐃΔ(c[19]);
            lf.time = c[5];
            lf.ᐃΔⲆᐃⲆ.ⵠΔᐃᐃⵠ = c[15];
            lf.ᐃΔⲆᐃⲆ.ⲆⲆⵠⲆⲆ = new Date().getTime();
            Yw.ΔⵠⲆⵠ.ΔⲆⵠⵠⲆⲆⵠ = c[16];
            lf.transition = hh;
            Ww.ⵠΔⲆ = c[2];
            Yw.ΔⵠⲆⵠ.reset();
            Ww.ⵠᐃΔᐃΔ = c[8];
            lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔⲆΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠⲆΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔΔᐃΔⵠ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃⲆΔⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃΔᐃⵠ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠⵠΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆΔⲆᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃΔΔΔⲆ] = [];
            lf.ᐃΔᐃ[hw.ⲆᐃⵠⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆⵠⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠⵠⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ΔΔⲆⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠⵠΔΔ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃⵠᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃᐃⵠⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠᐃⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠⲆΔⵠ] = [];
            lf.ᐃΔᐃ[hw.Δᐃᐃᐃⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆⲆΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔΔΔⲆᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃᐃⵠᐃⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠᐃⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ᐃΔᐃⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃᐃⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⵠ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆⵠΔΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃⲆᐃᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆⲆⲆᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆⵠΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠⲆⲆᐃ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠᐃⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃᐃΔⵠ] = [];
            lf.ᐃΔᐃ[hw.ⲆΔᐃΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ⲆΔΔᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃΔΔᐃⵠ] = [];
            lf.ᐃΔᐃ[hw.ⲆΔΔΔΔ] = [];
            lf.ᐃΔᐃ[hw.ⲆⲆᐃⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔⲆⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃⲆᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆⵠⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠⲆⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃΔΔⵠⲆᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠᐃⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆⵠⵠⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆⲆⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔⵠⲆᐃⲆ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠⲆᐃⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠⲆⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ⲆⲆⵠⵠⲆ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆΔᐃⲆ] = [];
            lf.ᐃΔᐃ[hw.ᐃᐃΔⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠⵠΔΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ᐃΔΔⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃΔⵠΔᐃⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔΔΔⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔⲆⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ⲆⲆᐃΔΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠᐃⵠⵠ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆⵠⲆΔᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃᐃΔΔΔⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆᐃΔⲆᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ΔⵠⵠⲆⵠⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⲆᐃⲆⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆⵠⲆⲆ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠⲆᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆⵠΔⲆ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠΔᐃᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃΔⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ΔⵠᐃΔΔ] = [];
            lf.ᐃΔᐃ[hw.ᐃⲆΔΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠΔⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ΔΔⵠᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔⵠⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠᐃᐃΔᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔⲆⲆᐃⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆᐃΔⵠ] = [];
            lf.ᐃΔᐃ[hw.ᐃⵠⵠⵠⲆ] = [];
            lf.ᐃΔᐃ[hw.ⵠⲆΔⵠᐃ] = [];
            lf.ᐃΔᐃ[hw.ΔΔΔⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⲆᐃⵠⵠⲆ] = [];
            lf.ᐃΔᐃ[hw.ΔⵠΔⵠⲆ] = [];
            lf.ᐃΔᐃ[hw.ⲆⵠᐃⲆⲆ] = [];
            lf.ᐃΔᐃ[hw.ΔⵠᐃᐃΔ] = [];
            lf.ᐃΔᐃ[hw.ⵠΔᐃⲆⲆ] = [];
            lf.ᐃΔᐃ[hw.ⲆΔⵠⲆΔ] = [];
            lf.ᐃΔᐃ[hw.ΔᐃⲆⲆⵠ] = [];
            lf.ᐃΔᐃ[hw.ᐃᐃⵠⵠΔ] = [];
            lf.ᐃΔᐃ[hw.ⲆΔΔΔⵠ] = [];
            lf.ᐃΔᐃ[hw.ⲆⲆᐃΔᐃ] = [];
            lf.ⵠᐃⵠⵠ = [];
            lf.ᐃⲆⵠⲆΔⲆⵠ = c[7];
            Ww.id = c[9];
            Ww.ΔⲆΔΔ = Ww.id * lf.ᐃⲆⵠⲆΔⲆⵠ;
            if (Zw.loaded) {
                Zw.ᐃⲆⲆΔ[0].ΔⲆΔΔ = Ww.ΔⲆΔΔ;
                Zw.ᐃⲆⲆΔ[0].ΔΔⵠᐃᐃᐃⲆ = 0;
            }
            vf.ᐃⵠΔᐃⵠⵠᐃ();
            Ww.ᐃⵠΔΔ.ⵠΔⵠⵠⲆ(c[3], c[10]);
            lf.ᐃⲆⲆΔ = [];
            var d = lf.ᐃⲆⲆΔ;
            for (var e = 0; e < c[11]; e++) {
                d.push(new mw());
            }
            e = 0;
            for (var g = c[4]; e < g.length; e++) {
                var h = d[g[e].i];
                h.ΔᐃⵠΔⵠ = g[e].n;
                h.ⲆΔⲆΔ = g[e].s;
                h.ΔᐃΔⲆⵠ = g[e].a;
                h.ⲆΔΔⵠΔ = g[e].c;
                h.ᐃⲆᐃⲆⲆ = g[e].b;
                h.ᐃᐃᐃⵠΔ = g[e].d;
                h.ᐃΔᐃᐃⲆΔⲆ = g[e].g;
                h.level = g[e].l;
                h.ⵠⲆⲆΔΔ = ΔᐃⲆᐃ.ᐃᐃⲆᐃΔᐃᐃ(g[e].p);
                h.ⵠᐃⲆⲆⲆ = Bs;
                if (Uv === 1) {
                    h.ΔᐃⵠΔⵠ += "|" + g[e].i;
                }
            }
            Ww.ⲆⲆᐃⵠᐃ.sort();
            if (lf.mode === ew.ᐃⲆᐃⲆᐃⵠⲆ && lf.ᐃⲆⲆΔ[Ww.id].ΔᐃⵠΔⵠ === "spectator") {
                Ww.ᐃⵠᐃⲆⵠΔⵠ = true;
            } else {
                Ww.ᐃⵠᐃⲆⵠΔⵠ = false;
            }
            if (lf.mode === ew.ⲆⵠΔΔᐃ && lf.ᐃⲆⲆΔ[Ww.id].ⲆΔⲆΔ === ew.ⵠⲆᐃⵠⲆⲆᐃ) {
                Ww.ΔⵠᐃⲆⲆ = f;
            } else {
                Ww.ΔⵠᐃⲆⲆ = false;
            }
            if (lf.mode === ew.ᐃⲆⵠⲆΔ && ew.ᐃⵠⲆⵠᐃᐃΔ === lf.ᐃⲆⲆΔ[Ww.id].ⲆΔⲆΔ) {
                Ww.ⵠⵠⵠΔΔΔΔ = Lt;
            } else {
                Ww.ⵠⵠⵠΔΔΔΔ = Sr;
            }
            ᐃⵠΔᐃ.set("starve_token", Ww.ⲆⲆⵠⵠΔ);
            if (c[12] === 0) {
                Ww.ᐃᐃᐃⲆΔ.ⵠΔⵠⵠΔ = 0;
                Yw.ΔⵠⲆⵠ.restore(c[17]);
                var i = c[14];
                if (i[29]) {
                    Ww.ᐃⲆΔᐃ.ⲆΔⵠᐃΔΔⲆ(1, 0);
                }
                for (e = 0; i.length > e; e++) {
                    if (i[e]) {
                        if (e == 29) {
                            continue;
                        }
                        if (e == 7) {
                            continue;
                        }
                        this.ⲆᐃⵠⵠᐃⲆᐃ([0, e, i[e]]);
                    }
                }
                Ww.ᐃᐃᐃⲆΔ.open = false;
            } else {
                if (ew.ⲆΔᐃⲆᐃ === lf.mode) {
                    this.ⲆᐃⵠⵠᐃⲆᐃ([0, 238, 1]);
                } else if (ew.ᐃⲆⵠⲆΔ === lf.mode) {
                    if (Ww.ⵠⵠⵠΔΔΔΔ) {
                        this.ⲆᐃⵠⵠᐃⲆᐃ([0, 190, 4]);
                    } else {
                        this.ⲆᐃⵠⵠᐃⲆᐃ([0, 191, 3]);
                    }
                }
                if (lf.mode === ew.ⲆⲆⲆⵠⵠ || ew.ᐃⲆⵠⲆΔ === lf.mode || lf.mode === ew.ⲆΔⲆΔᐃ || ew.ⲆΔᐃⲆᐃ === lf.mode) {
                    Ww.ᐃᐃᐃⲆΔ.ⵠΔⵠⵠΔ = new Date().getTime();
                    Ww.ᐃᐃᐃⲆΔ.open = Wh;
                    Ww.ᐃᐃᐃⲆΔ.value = c[13];
                    Yw.ᐃᐃᐃⲆΔ.ⲆⲆⵠⲆⲆ();
                } else {
                    Ww.ᐃᐃᐃⲆΔ.ⵠΔⵠⵠΔ = 0;
                    Ww.ᐃᐃᐃⲆΔ.open = Ln;
                    Ww.ᐃᐃᐃⲆΔ.value = 0;
                }
                Ww.ⵠᐃⲆᐃⲆⵠⲆ = c[12].toString();
            }
            Ww.ΔⲆⵠᐃⵠ.enabled = c[6];
            Ww.ΔⲆⵠᐃⵠ.ⵠΔⵠⵠΔ = -1;
            Ww.ΔⲆⵠᐃⵠ.label = null;
            Ww.ΔⲆⵠᐃⵠ.now = -1;
            ᐃⵠΔᐃ.set("starve_token_id", Ww.ⵠᐃⲆᐃⲆⵠⲆ);
            if (Ww.reconnect.enabled) {
                Ww.reconnect.rotate = 0;
                Ww.reconnect.enabled = yg;
            } else {
                rf.ΔⲆⵠΔΔ(Yw.ⲆᐃⲆᐃᐃ);
                if (ga) {
                    ga("send", "event", "Game", "play", "S" + rf.ⲆΔⲆΔ + "A" + rf.ΔᐃΔⲆⵠ);
                }
            }
        };
        this.connect = function () {
            b.ΔⲆⲆⵠⵠⵠΔ = 0;
            b.ⵠⵠᐃⵠᐃⵠⵠ();
        };
        this.ΔⲆΔⲆᐃᐃᐃ = [];
        this.ⲆⲆᐃⲆⲆΔⵠΔΔ = function (c) {
            const d = b.ΔΔⲆⵠΔ.filter(a => a.gm === c);
            const f = {};
            for (let a = 0; d.length > a; a++) {
                const b = d[a];
                const c = b.r;
                if ($l !== c) {
                    if (f[c] === cl) {
                        f[c] = [];
                    }
                    f[c].push(b);
                }
            }
            function g(d) {
                b.ΔⲆΔⲆᐃᐃᐃ[c] = d;
                const e = f[d];
                const g = e[Math.floor(Math.random() * e.length)];
                b.ⵠⲆᐃᐃΔᐃΔ({
                    domain: Zv,
                    is_tls: 1,
                    id: g.id,
                    p: g.p
                });
            }
            if (b.ΔⲆΔⲆᐃᐃᐃ[c] !== Lk) {
                g(b.ΔⲆΔⲆᐃᐃᐃ[c]);
                return;
            }
            let a = 1;
            function h(b) {
                const c = new cj.XMLHttpRequest();
                const d = b[0];
                const e = d.p;
                const f = d.r;
                const i = e[Math.floor(Math.random() * e.length)];
                c.open("GET", "https://" + i + "." + Zv + "/", Vl);
                c.onreadystatechange = function () {
                    if (c.readyState === 4) {
                        if (a === 0) {
                            return;
                        }
                        a = 0;
                        g(f);
                    }
                };
                c.send();
            }
            for (let a in f) {
                h(f[a]);
            }
            cj.setTimeout(function () {
                if (a === 0) {
                    return;
                }
                a = 0;
                const b = cj.Object.keys(f);
                g(b[Math.floor(Math.random() * b.length)]);
            }, 5000);
        };
        this.ᐃᐃⲆΔⵠⵠΔⵠΔ = function () {
            let a = ew.ΔΔᐃⵠᐃⲆⲆ[b.ᐃⲆⵠΔⵠ];
            console.log(wh, wh, undefined);
            let c = b.ⲆⲆⵠᐃᐃΔⵠ[b.ᐃⲆⵠΔⵠ];
            let d = b.ΔΔⲆⵠΔ.find(b => b.gm == a && b.idx == c);
            if (d === undefined) {
                b.ⲆⲆᐃⲆⲆΔⵠΔΔ(a);
            } else {
                b.ⵠⲆᐃᐃΔᐃΔ({
                    domain: Zv,
                    is_tls: 1,
                    id: d.id,
                    p: d.p
                });
            }
        };
        this.ⵠⵠᐃⵠᐃⵠⵠ = function () {
            console.log(Lk);
            if (Xv !== undefined && Yv !== wh) {
                console.log(undefined, ts, cl);
                b.ⵠⲆᐃᐃΔᐃΔ({
                    domain: Zv,
                    is_tls: 1,
                    id: Yv + Xv,
                    p: b.ⵠᐃⲆⵠⲆΔΔ[Yv]
                });
                return;
            }
            if (vk === Wv) {
                b.ᐃᐃⲆΔⵠⵠΔⵠΔ();
            } else {
                b.ⵠⲆᐃᐃΔᐃΔ({
                    domain: Wv.domain,
                    is_tls: Wv.ssl,
                    id: Wv.id,
                    p: [Wv.p]
                });
            }
        };
        this.ⵠⲆᐃᐃΔᐃΔ = function (c) {
            let d = c.domain;
            let e = c.is_tls;
            let f = c.id;
            let a = c.p;
            let g = a[Math.floor(Math.random() * a.length)];
            let i = e ? "wss://" + g + "." + d + "/" + f : "ws://" + d;
            console.log(undefined, $l);
            b.ⵠⵠᐃᐃ = new cj.WebSocket(i);
            b.ⵠⵠᐃᐃ.binaryType = "arraybuffer";
            b.ⵠⵠᐃᐃ.ᐃⵠⵠᐃᐃ = b.ᐃⵠⵠᐃᐃ;
            b.ⵠⵠᐃᐃ.onmessage = function (a) {
                if (b.ᐃⵠⵠᐃᐃ == b.ᐃⵠⵠᐃᐃ) {
                    if (typeof a.data == "string") {
                        var c = JSON.parse(a.data);
                        switch (c[0]) {
                            case 0:
                                b.ᐃᐃᐃΔᐃ(c);
                                break;
                            case 1:
                                b.ᐃⲆᐃⲆΔᐃⲆ(c[1]);
                                break;
                            case 2:
                                b.ⵠⵠΔᐃΔⲆⲆΔᐃ(c);
                                break;
                            case 3:
                                b.ⵠᐃⵠΔᐃᐃΔⵠΔ(c);
                                break;
                            case 4:
                                b.message(c[1]);
                                break;
                            case 5:
                                b.ΔⲆⲆⵠΔΔⵠ(c);
                                break;
                            case 6:
                                b.ᐃᐃᐃᐃΔⲆⵠ(c[1]);
                        }
                    } else {
                        var d = function (b, c, d) {
                            const f = new Uint8Array(b);
                            const e = f.length;
                            let g;
                            let h = bw[e];
                            let i = Cq;
                            if (pl === h) {
                                cw += e * 2;
                                if (cw < 65535) {
                                    i = kj(Gj(e));
                                } else {
                                    cw = e;
                                    for (let a = 0; a < bw.length; a++) {
                                        if (bw[a] !== cl) {
                                            const b = bw[a][0];
                                            bw[a] = Aj;
                                            mj(b);
                                        }
                                    }
                                    i = kj(Gj(e));
                                    de();
                                }
                                g = uk(i);
                                bw[e] = [i, g];
                            } else {
                                i = h[0];
                                g = h[1];
                            }
                            for (let a = 0; a < f.length; a++) {
                                g[a] = f[a];
                            }
                            Lj(i, c, d);
                            for (let a = 0; f.length > a; a++) {
                                f[a] = g[a];
                            }
                            return f;
                        }(a.data, Ww.ΔⲆⲆᐃᐃⲆᐃ, Ww.ΔⲆᐃⵠᐃⲆΔⵠⲆ);
                        var e = d.buffer;
                        switch (d[0]) {
                            case 0:
                                b.ᐃΔᐃ(e, d, false);
                                break;
                            case 1:
                                b.ᐃΔᐃ(e, d, ob);
                                break;
                            case 2:
                                b.ΔⲆⵠⲆΔΔΔⵠΔ();
                                break;
                            case 3:
                                b.ⲆᐃⵠⵠᐃⲆᐃ(new Uint16Array(e));
                                break;
                            case 4:
                                b.ᐃⲆⲆⲆᐃᐃᐃΔⲆ();
                                break;
                            case 5:
                                b.ΔⲆΔᐃΔⲆΔᐃⲆ();
                                break;
                            case 6:
                                b.ⲆᐃᐃⵠᐃⲆΔⲆⲆ();
                                break;
                            case 7:
                                b.ΔⲆΔᐃⲆᐃⵠⵠᐃ(e);
                                break;
                            case 8:
                                b.ⲆΔⵠⵠΔⲆᐃⵠⲆ(d[1]);
                                break;
                            case 9:
                                b.ᐃᐃΔⲆΔᐃᐃΔΔ(d[1]);
                                break;
                            case 10:
                                b.ⵠⵠᐃⵠⵠⵠⲆ();
                                break;
                            case 11:
                                b.ⵠⵠⵠⵠⲆⲆⲆ(d[1], d[2]);
                                break;
                            case 12:
                                b.ΔᐃⵠΔᐃ(d[1]);
                                break;
                            case 13:
                                b.ΔⲆⵠΔⲆᐃⵠᐃⲆ(d, e);
                                break;
                            case 14:
                                b.ⵠΔΔΔΔⵠⲆ();
                                break;
                            case 15:
                                b.ᐃΔΔΔΔⲆᐃᐃΔ(d[1]);
                                break;
                            case 16:
                                b.ᐃⲆⲆⲆ(d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
                                break;
                            case 17:
                                b.ᐃⵠᐃᐃⵠᐃΔⲆᐃ(e);
                                break;
                            case 18:
                                b.ΔᐃⵠΔᐃⲆΔΔΔ();
                                break;
                            case 19:
                                b.ΔΔⲆⲆᐃ(d[1]);
                                break;
                            case 20:
                                b.ΔᐃΔⵠⲆⵠⲆⵠΔ();
                                break;
                            case 21:
                                b.ᐃⵠⵠΔ(e);
                                break;
                            case 22:
                                b.ΔᐃΔⵠᐃⵠⲆⲆΔ(d[1]);
                                break;
                            case 23:
                                b.ᐃⵠⵠⵠⲆΔⲆⵠⲆ(e);
                                break;
                            case 24:
                                b.ΔᐃⵠᐃⵠΔΔⵠⲆ(d[1]);
                                break;
                            case 25:
                                b.ⵠⲆᐃⲆⲆⲆᐃⵠᐃ(d[1], e);
                                break;
                            case 26:
                                b.ⲆⵠⲆᐃᐃ(d);
                                break;
                            case 27:
                                b.ᐃⲆⵠΔⲆᐃⵠΔⲆ();
                                break;
                            case 28:
                                b.ΔⲆⵠᐃⵠ(d[1]);
                                break;
                            case 29:
                                b.ΔⵠⵠΔⵠᐃⲆⵠⲆ();
                                break;
                            case 30:
                                b.ⵠⲆⲆⵠⵠⵠᐃⵠⵠ();
                                break;
                            case 31:
                                b.ⲆⵠᐃⲆⵠΔⵠⵠΔ(d);
                                break;
                            case 32:
                                b.ΔΔᐃΔⲆΔⵠᐃⲆ(d[1]);
                                break;
                            case 33:
                                b.ᐃᐃΔⲆⵠⵠⲆᐃⵠ(d[1]);
                                break;
                            case 34:
                                b.ⵠΔΔΔΔⲆⵠⵠᐃ();
                                break;
                            case 35:
                                b.ⲆⲆⲆⵠⵠᐃᐃⲆⲆ(d[1]);
                                break;
                            case 36:
                                b.ΔᐃΔΔⲆᐃⲆ(d[1]);
                                break;
                            case 37:
                                b.ⵠⵠⲆΔⲆⵠⵠⲆᐃ(d[1], d[2]);
                                break;
                            case 38:
                                b.ᐃΔⲆⲆΔⵠⲆᐃᐃ(d[1]);
                                break;
                            case 39:
                                b.ΔΔⲆⵠᐃᐃᐃⵠᐃ(d[1]);
                                break;
                            case 40:
                                b.ΔⵠΔⲆⲆⲆᐃΔⲆ();
                                break;
                            case 41:
                                b.ΔⲆⵠⵠΔⵠᐃⵠⲆ(d);
                                break;
                            case 42:
                                b.ⲆⲆΔⲆⲆΔⲆΔⲆ(d[1]);
                                break;
                            case 43:
                                b.ⵠⲆⲆⵠⵠⵠᐃᐃⲆ(d[1]);
                                break;
                            case 44:
                                b.claimed(d[1]);
                                break;
                            case 45:
                                b.ⲆⵠⵠⲆΔᐃΔⲆΔ(d[1]);
                                break;
                            case 46:
                                b.ΔⵠⲆᐃᐃᐃⲆΔᐃ(d[1]);
                                break;
                            case 47:
                                b.ᐃⲆΔΔⵠ(d[1]);
                                break;
                            case 48:
                                b.ⵠⲆΔⲆᐃᐃᐃⵠᐃ();
                                break;
                            case 50:
                                b.ΔⵠⵠᐃⵠⲆᐃⵠΔ(d[1], d[2], d[3]);
                                break;
                            case 51:
                                b.ⵠⲆⲆⲆΔⲆᐃⲆᐃ();
                                break;
                            case 52:
                                b.ΔⵠᐃⲆⵠᐃⵠⵠⲆ(d[1]);
                                break;
                            case 53:
                                b.ⲆⲆΔⵠΔⵠΔΔⲆ(d[1]);
                                break;
                            case 54:
                                b.ΔⲆᐃⲆΔⵠⵠⵠᐃ();
                                break;
                            case 55:
                                b.ᐃΔΔΔⲆᐃⵠⲆᐃ(d[1]);
                                break;
                            case 56:
                                b.ⵠⵠᐃΔⲆΔᐃᐃΔ(d[1]);
                                break;
                            case 57:
                                b.ΔΔΔΔΔⵠⲆⲆⲆ();
                                break;
                            case 58:
                                b.ⲆᐃⲆⵠⲆⵠⲆⲆΔ();
                                break;
                            case 59:
                                b.ΔΔⲆᐃΔΔⲆᐃⲆ();
                                break;
                            case 60:
                                b.ⵠⵠⲆᐃΔᐃⲆⲆⲆ();
                                break;
                            case 61:
                                Ww.ᐃⵠΔΔ.ⵠΔᐃⲆⲆΔⵠ = 0.2;
                                Ww.ᐃⵠΔΔ.ⵠΔⵠⵠΔ = 3;
                                break;
                            case 62:
                                b.ΔΔΔⵠΔΔᐃΔΔ(new Uint16Array(e));
                                break;
                            case 63:
                                b.ⵠΔᐃΔΔΔⲆΔΔ();
                                break;
                            case 64:
                                b.ΔⲆⵠⲆⵠⲆⵠᐃΔ();
                                break;
                            case 65:
                                b.ⵠᐃⲆⲆⵠᐃⵠΔⲆ();
                                break;
                            case 66:
                                b.ᐃⵠⵠᐃⲆᐃⵠΔⵠ();
                                break;
                            case 67:
                                b.ᐃΔⵠᐃⲆΔⲆΔΔ(d[1]);
                                break;
                            case 68:
                                b.ΔⵠᐃⲆⵠⵠΔΔΔ(d[1]);
                                break;
                            case 69:
                                b.ΔᐃΔⵠⵠⵠΔ(d[1]);
                                break;
                            case 70:
                                b.ⵠⵠⵠⲆⲆⵠⲆᐃⵠ(d[1]);
                                break;
                            case 71:
                                b.ᐃΔΔΔΔ(d[1]);
                        }
                    }
                }
            };
            b.ⵠⵠᐃᐃ.onerror = function () {
                if (Ww.reconnect.enabled) {
                    cj.setTimeout(b.timeout, 2500);
                }
            };
            this.ⵠⵠᐃᐃ.onopen = function () {
                clearTimeout(b.ⵠⵠⵠⲆᐃ);
                Ww.ⲆⲆⵠⲆᐃΔΔ = Ww.ⲆⲆⵠⲆᐃΔΔ || ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("token");
                ΔᐃⲆᐃ.ᐃΔᐃΔΔⲆᐃ().then(a => {
                    b.ⵠⵠᐃᐃ[Tv](Eq[Sa].stringify([rf.ΔᐃⵠΔⵠ.input.value, screen.width + 200, screen.height + 200, dw.ⲆⵠᐃΔⲆⵠⵠ, Ww.ⲆⲆⵠⵠΔ, Ww.ⵠᐃⲆᐃⲆⵠⲆ, Ww.reconnect.enabled ? 1 : 0, rf.ⲆΔⲆΔ, rf.ΔᐃΔⲆⵠ, rf.ⲆⵠⲆΔⲆ, rf.ᐃⲆᐃⲆⲆ, rf.ⲆΔΔⵠΔ, rf.ᐃᐃᐃⵠΔ, cx === undefined ? 0 : cx, bx === sr ? 0 : bx.substring(bx.length - 50), Vv, Ww.ⲆⲆⵠⲆᐃΔΔ, a, Ww.ᐃⲆⵠⲆᐃΔᐃ, Ww.ⲆⵠⲆⵠⵠⲆᐃ]));
                    Ww.ⲆⲆⵠⲆᐃΔΔ = sr;
                    Ww.ᐃⲆⵠⲆᐃΔᐃ = undefined;
                    Ww.ⲆⵠⲆⵠⵠⲆᐃ = undefined;
                    b.ⵠⵠⵠⲆᐃ = setTimeout(b.timeout, dw.ⲆΔᐃΔΔΔⵠᐃᐃ);
                });
            };
        };
    }();
    var lf;
    var Ww;
    var Xw;
    var Yw = {
        ⵠⵠΔⵠⲆ: il
    };
    var Zw = new function () {
        this.ⲆᐃⲆᐃᐃ = 0;
        this.loaded = 0;
        this.transition = 0;
        this.ΔΔΔᐃΔΔⲆ = function (a) {
            return a / lf.w * 100;
        };
        this.ΔΔΔΔⲆⲆⵠ = function (a) {
            return a / lf.ΔᐃⲆ * 100;
        };
        this.ᐃΔᐃⵠⵠΔΔ = function (a, b) {
            a = this.ΔΔΔᐃΔΔⲆ(a) - this.ᐃⲆⲆⲆⲆ.x;
            return this.ᐃⲆⲆⲆⲆ.x + b * a;
        };
        this.ΔᐃⵠΔᐃᐃΔ = function (a, b) {
            a = Math.abs(this.ΔΔΔΔⲆⲆⵠ(a) - this.ᐃⲆⲆⲆⲆ.y);
            return this.ᐃⲆⲆⲆⲆ.y + b * a;
        };
        this.sample = {};
        this.ⲆⵠⵠⵠΔ = {};
        this.ᐃΔⲆⲆ = {};
        this.ΔΔΔⲆⵠΔⲆ = function (b, c, d, e) {
            for (var f = 0; c.length > f; f++) {
                var g = c[f];
                if (!b.playing(g)) {
                    b.pos(d, e, -0.5, g);
                    b.play(g);
                    return Ah;
                }
            }
            return false;
        };
        this.ⲆΔᐃΔ = function (a, b, c, d) {
            c = this.ᐃΔᐃⵠⵠΔΔ(c, ⵠⵠⲆⵠⵠ.ⵠΔΔⲆⲆΔⲆ);
            d = this.ΔᐃⵠΔᐃᐃΔ(d, ⵠⵠⲆⵠⵠ.ⵠΔΔⲆⲆΔⲆ);
            console.log("HIT", a, b, c, d, ⵠⵠⲆⵠⵠ.ⵠΔΔⲆⲆΔⲆ);
            if (a) {
                if (b === 1) {
                    this.ΔΔΔⲆⵠΔⲆ(this.ᐃΔⲆⲆ.ΔⲆᐃΔⵠᐃⲆ, this.sample.ΔⲆᐃΔⵠᐃⲆ, c, d);
                } else if (b === 0) {
                    this.ΔΔΔⲆⵠΔⲆ(this.ᐃΔⲆⲆ.ΔᐃΔⵠᐃΔΔ, this.sample.ΔᐃΔⵠᐃΔΔ, c, d);
                }
            } else {
                this.ΔΔΔⲆⵠΔⲆ(this.ᐃΔⲆⲆ.ⵠⲆⲆΔⲆ, this.sample.ⵠⲆⲆΔⲆ, c, d);
            }
        };
        this.ᐃⲆⲆⲆⲆ = {
            x: 0,
            y: 0
        };
        this.ΔⲆΔΔⲆᐃⵠ = {
            y: 0,
            x: 0
        };
        this.ⵠΔⵠΔΔ = {};
        this.ᐃⲆⲆΔ = [];
        this.ⲆⲆᐃᐃⲆ = function (a, b) {
            for (var c in this.ⵠΔⵠΔΔ) {
                var d = this.ⵠΔⵠΔΔ[c];
                d.check(a);
                if (d.ⵠᐃᐃᐃⲆⲆⵠ) {
                    if (lf.ᐃΔⲆᐃⲆ.now < Rw.ΔⵠᐃⵠⵠΔᐃ) {
                        d.ⲆΔⵠᐃᐃ();
                    }
                    if (b) {
                        d.ⲆΔᐃⲆ(a, this.ᐃⲆⲆⲆⲆ);
                    }
                    if (this.transition) {
                        d.transition();
                    }
                }
            }
            this.transition &&= 0;
        };
        this.ᐃⲆⵠⵠⲆⵠᐃᐃⲆ = function () {
            var a = [];
            for (var b = 0; b < this.ᐃⲆⲆΔ.length; b++) {
                if ((e = this.ᐃⲆⲆΔ[b]).ΔΔⵠᐃᐃᐃⲆ) {
                    a.push(b);
                } else if (!e.ΔΔⵠᐃᐃᐃⲆ && !lf.ⵠᐃⵠⵠ[e.ΔⲆΔΔ]) {
                    e.ⲆⲆⲆᐃⲆⵠΔ();
                    a.push(b);
                }
            }
            for (var c = lf.ᐃΔᐃ[hw.ΔⲆᐃⲆ], d = (b = 0, 0); c.length > b && a.length > d; b++) {
                var e = c[b];
                if ((ew.ᐃⲆᐃⲆᐃⵠⲆ != lf.mode || lf.ᐃⲆⲆΔ[e.id].ΔᐃⵠΔⵠ !== "spectator") && e.ᐃᐃⲆΔΔ === -1 && Ww.ΔⲆΔΔ !== e.ΔⲆΔΔ) {
                    this.ᐃⲆⲆΔ[a[d]].ⲆⲆⵠⲆⲆ(e.ΔⲆΔΔ);
                    d++;
                }
            }
        };
        this.ⲆᐃⵠⲆⲆΔΔⲆΔ = function () {
            this.ᐃⲆⵠⵠⲆⵠᐃᐃⲆ();
            for (var a = 0; this.ᐃⲆⲆΔ.length > a; a++) {
                var b = this.ᐃⲆⲆΔ[a];
                if (!b.ΔΔⵠᐃᐃᐃⲆ && b.check()) {
                    b.ⲆΔᐃⲆ();
                }
            }
        };
        this.ᐃᐃΔᐃΔΔΔᐃⲆ = function (a) {
            if (this.ΔⲆΔΔⲆᐃⵠ.x === a.x && a.y === this.ΔⲆΔΔⲆᐃⵠ.y) {
                return 0;
            } else {
                this.ΔⲆΔΔⲆᐃⵠ.x = a.x;
                this.ΔⲆΔΔⲆᐃⵠ.y = a.y;
                this.ᐃⲆⲆⲆⲆ.x = this.ΔΔΔᐃΔΔⲆ(a.x);
                this.ᐃⲆⲆⲆⲆ.y = this.ΔΔΔΔⲆⲆⵠ(a.y);
                Howler.pos(this.ᐃⲆⲆⲆⲆ.x, this.ᐃⲆⲆⲆⲆ.y, 0);
                return 1;
            }
        };
        this.ⲆⵠⵠΔᐃⵠᐃΔΔ = function () {
            if (this.ⲆᐃⲆᐃᐃ && this.loaded) {
                var a = lf.ⵠᐃⵠⵠ[Ww.ΔⲆΔΔ];
                if (a) {
                    a.ᐃᐃⲆΔΔ = 0;
                    var b = this.ᐃᐃΔᐃΔΔΔᐃⲆ(a);
                    if (lf.mode !== ew.ⲆⵠΔΔᐃ && ew.ⲆΔᐃⲆᐃ !== lf.mode && lf.mode !== ew.ⲆⲆⵠΔⵠⵠᐃ) {
                        this.ⲆⲆᐃᐃⲆ(a, b);
                    }
                    this.ⲆᐃⵠⲆⲆΔΔⲆΔ();
                }
            }
        };
        this.ΔⵠᐃⵠΔⵠΔᐃⲆ = function () {
            for (var b in Tw) {
                var c = Tw[b];
                if (typeof c === "object" && c.path) {
                    c.ⲆⵠⵠⲆⲆ = new Howl({
                        src: c.path,
                        volume: 0,
                        sprite: c.Ⲇᐃ
                    });
                }
                for (var d in c.sample) {
                    var f = c.sample[d];
                    var g = [];
                    console.log(vk);
                    for (var h = 0; h < f; h++) {
                        var j = c.ⲆⵠⵠⲆⲆ.play(d);
                        c.ⲆⵠⵠⲆⲆ.stop(j);
                        c.ⲆⵠⵠⲆⲆ.on("fade", function (a) {
                            if (!this.volume(a)) {
                                console.log(undefined, undefined);
                                this.stop(a);
                            }
                        }, j);
                        g.push(j);
                    }
                    if (g.length > 1) {
                        Zw.sample[d] = g;
                    } else {
                        Zw.sample[d] = g[0];
                    }
                    Zw.ᐃΔⲆⲆ[d] = c.ⲆⵠⵠⲆⲆ;
                }
            }
        };
        this.ΔΔΔⵠⵠⵠΔ = function (a, b, c) {
            for (var d = 0; d < a.length; d++) {
                b.volume(c, a[d]);
            }
        };
        this.ⲆᐃΔΔⵠΔΔ = function (b, c, d, e, f, g) {
            var a = b;
            for (var i = 0; i < d; i++) {
                var j = a[i] = [];
                for (ᐃⵠⲆⵠ = 0; ᐃⵠⲆⵠ < e; ᐃⵠⲆⵠ++) {
                    j[ᐃⵠⲆⵠ] = Zw.sample[f + ᐃⵠⲆⵠ][i];
                    c.ⲆⵠⵠⲆⲆ.volume(g, j[ᐃⵠⲆⵠ]);
                }
            }
        };
        this.ⲆⲆⵠⲆⲆ = function () {
            Zw.ΔⵠᐃⵠΔⵠΔᐃⲆ();
            Zw.ⲆⵠⵠⵠΔ.ⲆΔⲆΔⵠᐃᐃ = [];
            Zw.ⲆⵠⵠⵠΔ.ⲆΔᐃⵠⲆ = [];
            Zw.ⲆⵠⵠⵠΔ.Δⵠⵠⵠⵠ = [];
            Zw.ⲆᐃΔΔⵠΔΔ(Zw.ⲆⵠⵠⵠΔ.ⲆΔⲆΔⵠᐃᐃ, Tw.ᐃⲆⵠΔⲆᐃⵠ, Rw.ΔⲆᐃⲆ, 3, "p", 0.15);
            Zw.ⲆᐃΔΔⵠΔΔ(Zw.ⲆⵠⵠⵠΔ.ⲆΔᐃⵠⲆ, Tw.ΔⲆⵠⵠᐃᐃᐃ, Rw.ΔⲆᐃⲆ, 4, "w", 0.15);
            Zw.ⲆᐃΔΔⵠΔΔ(Zw.ⲆⵠⵠⵠΔ.Δⵠⵠⵠⵠ, Tw.ΔⵠΔᐃⵠⵠⵠ, Rw.ΔⲆᐃⲆ, 3, "d", 0.09);
            Zw.ΔΔΔⵠⵠⵠΔ(Zw.sample.ⵠⲆⲆΔⲆ, Zw.ᐃΔⲆⲆ.ⵠⲆⲆΔⲆ, 0.15);
            Zw.ΔΔΔⵠⵠⵠΔ(Zw.sample.ΔᐃΔⵠᐃΔΔ, Zw.ᐃΔⲆⲆ.ΔᐃΔⵠᐃΔΔ, 0.2);
            Zw.ΔΔΔⵠⵠⵠΔ(Zw.sample.ΔⲆᐃΔⵠᐃⲆ, Zw.ᐃΔⲆⲆ.ΔⲆᐃΔⵠᐃⲆ, 1);
            Zw.ⵠΔⵠΔΔ.ᐃⵠⲆⲆΔᐃᐃΔⲆ = new tf(Rw.ⵠΔⵠᐃΔⵠᐃᐃΔ, this.sample.Δᐃᐃᐃᐃᐃⵠ, this.sample.ΔⵠᐃᐃᐃΔΔ, Rw.ᐃΔᐃᐃΔΔΔΔⲆ, 0.05, 0.4, Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ, Rw.ᐃⲆⲆⲆⲆⲆᐃ, {
                x: Pr.ΔⲆᐃᐃᐃⲆⲆ,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ,
                w: lf.w,
                ΔᐃⲆ: lf.ΔᐃⲆ
            }, {
                x: Pr.ΔⲆᐃᐃᐃⲆⲆ - 2300,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ - 4000,
                w: lf.w,
                ΔᐃⲆ: lf.ΔᐃⲆ
            }, {
                x: Pr.ΔⲆᐃᐃᐃⲆⲆ - 1500,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ - 2000,
                w: lf.w,
                ΔᐃⲆ: lf.ΔᐃⲆ
            });
            Zw.ⵠΔⵠΔΔ.ⵠᐃΔᐃΔⲆⵠⵠⵠ = new tf(Rw.ⵠⲆⲆΔⲆᐃᐃ, this.sample.ᐃᐃⵠΔⲆⲆΔ, this.sample.ⵠᐃΔⲆΔᐃΔ, Rw.ᐃⲆᐃᐃᐃⲆΔⵠⵠ, 0.03, 0.25, Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ, Rw.ᐃⲆⲆⲆⲆⲆᐃ, {
                x: 0,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ + 800,
                w: Pr.ΔⲆᐃᐃᐃⲆⲆ - 2300,
                ΔᐃⲆ: lf.ΔᐃⲆ
            }, {
                x: -100,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ - 300,
                w: Pr.ΔⲆᐃᐃᐃⲆⲆ - 100,
                ΔᐃⲆ: lf.ΔᐃⲆ
            }, {
                x: -100,
                y: Pr.ᐃⵠⲆⵠⲆᐃΔ + 400,
                w: Pr.ΔⲆᐃᐃᐃⲆⲆ - 1400,
                ΔᐃⲆ: lf.ΔᐃⲆ
            });
            Zw.ⵠΔⵠΔΔ.ΔⵠⵠⵠⲆᐃⲆ = new tf(Rw.ⵠⲆⲆΔⲆᐃᐃ, this.sample.ᐃⲆⲆΔΔᐃⵠ, this.sample.ᐃⲆⵠⲆᐃᐃΔ, Rw.ⲆΔⵠⲆΔᐃᐃᐃᐃ, 0.01, 0.22, Tw.ⵠΔⲆⲆⵠⲆᐃ.ⲆⵠⵠⲆⲆ, Rw.ᐃⲆⲆⲆⲆⲆᐃ, {
                x: -100,
                y: -100,
                w: lf.w + 200,
                ΔᐃⲆ: Pr.ᐃⵠⲆⵠⲆᐃΔ - 1000
            }, {
                x: -100,
                y: -100,
                w: lf.w + 200,
                ΔᐃⲆ: Pr.ᐃⵠⲆⵠⲆᐃΔ + 600
            }, {
                x: -100,
                y: -100,
                w: lf.w + 200,
                ΔᐃⲆ: Pr.ᐃⵠⲆⵠⲆᐃΔ + 100
            });
            for (var a = 0; a < Rw.ΔⲆᐃⲆ; a++) {
                Zw.ᐃⲆⲆΔ[a] = new of(a);
            }
            Zw.ᐃⲆⲆΔ[0].ⲆⲆⵠⲆⲆ(Ww.ΔⲆΔΔ);
            Zw.loaded = 1;
        };
        this.ΔⲆⲆΔⵠⲆⲆΔⵠ = function () {
            if (!this.transition && Rw.ΔⵠᐃⵠⵠΔᐃ > lf.ᐃΔⲆᐃⲆ.now) {
                this.transition = 1;
            }
        };
        this.ΔⲆⵠΔΔ = function () {
            if (this.ⲆᐃⲆᐃᐃ && this.loaded) {
                for (var a in Zw.sample) {
                    var b = Zw.sample[a];
                    if (typeof b === "object") {
                        for (var c = 0; c < b.length; c++) {
                            Zw.ᐃΔⲆⲆ[a].stop(b[c]);
                        }
                    } else {
                        Zw.ᐃΔⲆⲆ[a].stop(b);
                    }
                }
                for (c = 0; Zw.ᐃⲆⲆΔ.length > c; c++) {
                    Zw.ᐃⲆⲆΔ[c].ⲆⲆⲆᐃⲆⵠΔ();
                }
            }
        };
        this.select = function () {
            if (Zw.ⲆᐃⲆᐃᐃ) {
                Zw.ΔⲆⵠΔΔ();
            } else {
                if (!Zw.loaded) {
                    Zw.ⲆⲆⵠⲆⲆ();
                }
                Zw.ᐃⲆⲆΔ[0].ΔⲆΔΔ = Ww.ΔⲆΔΔ;
                Zw.ᐃⲆⲆΔ[0].ΔΔⵠᐃᐃᐃⲆ = 0;
                Zw.ΔⲆⲆΔⵠⲆⲆΔⵠ();
            }
            Zw.ⲆᐃⲆᐃᐃ = !Zw.ⲆᐃⲆᐃᐃ;
        };
    }();
    var vf = new function () {
        this.ⲆⲆΔᐃⲆᐃᐃ = function () {
            this.ⵠⲆⵠΔⲆ = 81;
            this.ⲆⵠⲆⵠⵠ = 68;
            this.ᐃᐃΔⲆᐃ = 90;
            this.ᐃⲆⲆΔⲆⲆⵠ = 83;
        };
        this.ⵠⲆⲆΔⵠᐃⲆ = function () {
            this.ⵠⲆⵠΔⲆ = 65;
            this.ⲆⵠⲆⵠⵠ = 68;
            this.ᐃᐃΔⲆᐃ = 87;
            this.ΔᐃⲆⵠΔ = 83;
        };
        this.ᐃᐃⲆΔⵠ = 0;
        this.ᐃⲆⲆΔⲆⲆⵠ = 1;
        this.ⲆⲆⵠᐃⲆⵠΔ = 49;
        this.ΔᐃⵠⲆᐃⵠΔ = 50;
        this.ⵠⵠⲆᐃᐃⵠᐃ = 51;
        this.ⲆⲆⵠⲆᐃⵠⲆ = 52;
        this.ᐃᐃⲆⵠⲆΔⵠⲆᐃ = 53;
        this.ᐃⲆⵠᐃᐃⵠᐃ = 17;
        this.ⵠⲆⵠᐃΔᐃⵠ = 37;
        this.ⵠΔⵠΔⲆᐃΔ = 39;
        this.ᐃⵠᐃΔⲆⵠⲆ = 38;
        this.ΔᐃⲆⵠᐃᐃᐃ = 40;
        this.ⲆΔⵠⵠΔⲆⵠ = 32;
        this.ⵠⵠⵠᐃⵠⵠⲆ = 82;
        this.ΔΔⲆΔΔⵠΔ = 71;
        this.ΔⵠᐃⵠⵠⵠⲆ = 86;
        this.ⲆⵠⲆᐃΔᐃⵠ = 66;
        this.ⵠⲆⲆΔⵠᐃⲆ();
        this.keys = new Array(255);
        for (var a = 0; a < 255; a++) {
            this.keys[a] = this.ᐃᐃⲆΔⵠ;
        }
        this.up = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            this.keys[b] = this.ᐃᐃⲆΔⵠ;
        };
        this.down = function (a) {
            var b = Math.min(a.charCode || a.keyCode, 255);
            if (b == this.ⵠⲆⵠΔⲆ || this.ⵠⲆⵠᐃΔᐃⵠ == b) {
                this.ⵠⵠⲆⵠᐃⵠⵠ();
            } else if (this.ᐃᐃΔⲆᐃ == b || b == this.ᐃⵠᐃΔⲆⵠⲆ) {
                this.ΔⵠΔⵠⲆⵠΔ();
            } else if (this.ᐃⲆⲆΔⲆⲆⵠ == b || b == this.ⵠⲆⵠΔᐃⲆᐃⵠᐃ) {
                this.ᐃⵠⲆⵠⵠⵠΔ();
            } else if (b == this.ⲆⵠⲆⵠⵠ || this.ⵠΔⵠΔⲆᐃΔ == b) {
                this.ⵠᐃᐃⵠΔⵠΔ();
            }
            this.keys[b] = this.ᐃⲆⲆΔⲆⲆⵠ;
            return b;
        };
        this.ⵠⵠⲆⵠᐃⵠⵠ = function () {
            this.keys[this.ⲆⵠⲆⵠⵠ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ⵠΔⵠΔⲆᐃΔ] = this.ᐃᐃⲆΔⵠ;
        };
        this.ⵠᐃᐃⵠΔⵠΔ = function () {
            this.keys[this.ⵠⲆⵠΔⲆ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ⵠⲆⵠᐃΔᐃⵠ] = this.ᐃᐃⲆΔⵠ;
        };
        this.ᐃⵠⲆⵠⵠⵠΔ = function () {
            this.keys[this.ᐃᐃΔⲆᐃ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ᐃⵠᐃΔⲆⵠⲆ] = this.ᐃᐃⲆΔⵠ;
        };
        this.ΔⵠΔⵠⲆⵠΔ = function () {
            this.keys[this.ΔᐃⲆⵠΔ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ΔᐃⲆⵠᐃᐃᐃ] = this.ᐃᐃⲆΔⵠ;
        };
        this.ᐃⵠΔᐃⵠⵠᐃ = function () {
            this.keys[this.ⲆⵠⲆⵠⵠ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ⵠΔⵠΔⲆᐃΔ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ⵠⲆⵠΔⲆ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ⵠⲆⵠᐃΔᐃⵠ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ᐃᐃΔⲆᐃ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ᐃⵠᐃΔⲆⵠⲆ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ΔᐃⲆⵠΔ] = this.ᐃᐃⲆΔⵠ;
            this.keys[this.ΔᐃⲆⵠᐃᐃᐃ] = this.ᐃᐃⲆΔⵠ;
        };
        this.ⲆⲆⵠᐃΔⵠⵠ = function () {
            return this.keys[this.ⵠⲆⵠΔⲆ] || this.keys[this.ⵠⲆⵠᐃΔᐃⵠ];
        };
        this.ⲆΔᐃΔⲆⲆΔ = function () {
            return this.keys[this.ⲆⵠⲆⵠⵠ] || this.keys[this.ⵠΔⵠΔⲆᐃΔ];
        };
        this.ⲆⵠΔⲆΔⵠⲆ = function () {
            return this.keys[this.ᐃᐃΔⲆᐃ] || this.keys[this.ᐃⵠᐃΔⲆⵠⲆ];
        };
        this.ⵠⲆᐃᐃᐃΔⲆ = function () {
            return this.keys[this.ΔᐃⲆⵠΔ] || this.keys[this.ΔᐃⲆⵠᐃᐃᐃ];
        };
        this.ΔᐃⵠⲆⵠⲆΔΔⲆ = function () {
            return this.keys[this.ᐃⲆⵠᐃᐃⵠᐃ];
        };
        this.ⲆⲆΔⲆᐃⵠᐃΔⵠ = function () {
            return this.keys[this.ⲆⲆⵠᐃⲆⵠΔ];
        };
        this.ⵠΔⵠᐃᐃⵠⲆᐃΔ = function () {
            return this.keys[this.ΔᐃⵠⲆᐃⵠΔ];
        };
        this.ᐃᐃᐃⲆΔⵠⲆⵠᐃ = function () {
            return this.keys[this.ⵠⵠⲆᐃᐃⵠᐃ];
        };
        this.ΔⵠΔⲆⵠⵠΔⲆᐃ = function () {
            return this.keys[this.ⲆⲆⵠⲆᐃⵠⲆ];
        };
        this.ⲆΔⵠⵠⲆᐃᐃΔⵠ = function () {
            return this.keys[this.ⲆΔⵠⵠΔⲆⵠ];
        };
        this.ΔᐃΔΔⲆᐃᐃᐃᐃ = function () {
            return this.keys[this.ⵠⵠⵠᐃⵠⵠⲆ];
        };
        this.ⵠΔⵠᐃⵠⵠΔᐃᐃ = function () {
            return this.keys[this.ΔΔⲆΔΔⵠΔ];
        };
        this.ΔΔⵠⵠⲆⲆΔᐃⲆ = function () {
            return this.keys[this.ΔⵠᐃⵠⵠⵠⲆ];
        };
        this.ᐃⲆᐃⵠⲆᐃΔᐃⲆ = function () {
            return this.keys[this.ⲆⵠⲆᐃΔᐃⵠ];
        };
    }();
    var mf = new function () {
        this.ᐃⲆⲆΔⲆⲆⵠ = 0;
        this.ᐃᐃⲆΔⵠ = 1;
        this.IDLE = 2;
        this.ᐃⲆΔᐃⲆⲆⲆ = 0;
        this.ⲆⲆⲆᐃᐃⵠⵠⵠⵠ = 1;
        this.ΔᐃⵠΔ = {
            y: 0,
            x: 0
        };
        this.ⵠⲆᐃⲆⵠⵠΔ = 0;
        this.ᐃⲆⵠᐃΔΔᐃ = 0;
        this.angle = 0;
        this.state = this.IDLE;
        this.ΔΔⵠᐃ = this.ᐃⲆΔᐃⲆⲆⲆ;
        this.down = function () {
            this.state = this.ᐃⲆⲆΔⲆⲆⵠ;
        };
        this.up = function () {
            this.state = this.ᐃᐃⲆΔⵠ;
        };
        this.ⲆΔᐃⲆ = function () {
            if (this.ΔᐃⵠΔ.x != this.ⵠⲆᐃⲆⵠⵠΔ || this.ᐃⲆⵠᐃΔΔᐃ != this.ΔᐃⵠΔ.y) {
                this.ⵠⲆᐃⲆⵠⵠΔ = this.ΔᐃⵠΔ.x;
                this.ᐃⲆⵠᐃΔΔᐃ = this.ΔᐃⵠΔ.y;
                return true;
            } else {
                return Ln;
            }
        };
    }();
    var cf = 0;
    var $w = 0;
    var _w = new function (f, e, i) {
        this.ΔⲆ = f;
        this.Δ = e;
        this.ΔⵠⲆᐃⵠΔⵠ = {
            translate: {
                x: 0,
                y: 0
            },
            style: document.getElementById("loading").style,
            ⲆΔᐃⲆ: function () {
                this.style.left = this.translate.x + "px";
                this.style.top = Math.floor(this.translate.y) + "px";
            }
        };
        this.ΔⵠⲆᐃⵠΔⵠ.style.position = "absolute";
        this.ΔⵠⲆᐃⵠΔⵠ.style.display = "inline-block";
        this.ΔⵠⲆᐃⵠΔⵠ.ⲆΔᐃⲆ();
        this.ⵠⵠΔⵠⲆ = Io;
        this.stop = function () {
            this.ⵠⵠΔⵠⲆ = eh;
        };
        this.ᐃⵠⲆⵠⵠⵠⲆ = {
            total: 1
        };
        var j = this;
        function k() { }
        var n = 0;
        function o(a) {
            if (a.indexOf("normal-mode") !== -1 || a.indexOf("player0") !== -1) {
                return 1;
            } else if (a.indexOf("day-bag") !== -1 || a.indexOf("night-bag") !== -1 || a.indexOf("day-book") !== -1 || a.indexOf("night-book") !== -1 || a.indexOf("day-player") !== -1 || a.indexOf("night-player") !== -1 || a.indexOf("day-accessory") !== -1 || a.indexOf("night-accessory") !== -1 || a.indexOf("day-crate") !== -1 || a.indexOf("night-crate") !== -1 || a.indexOf("day-skin") !== -1 || a.indexOf("night-skin") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-river") !== -1 || a.indexOf("night-river") !== -1 || a.indexOf("day-rock") !== -1 || a.indexOf("night-rock") !== -1 || a.indexOf("day-flower") !== -1 || a.indexOf("night-flower") !== -1 || a.indexOf("day-leaf") !== -1 || a.indexOf("night-leaf") !== -1 || a.indexOf("day-herb") !== -1 || a.indexOf("night-herb") !== -1 || a.indexOf("day-shell") !== -1 || a.indexOf("night-shell") !== -1 || a.indexOf("day-hand-skin") !== -1 || a.indexOf("night-hand-skin") !== -1 || a.indexOf("bignight") !== -1 || a.indexOf("bigday") !== -1 || a.indexOf("bigzday") !== -1 || a.indexOf("bigznight") !== -1 || a.indexOf("tutorial-box") !== -1 || a.indexOf("tuto-") !== -1 || a.indexOf("-leaderboard-") !== -1 || a.indexOf("-lead-") !== -1 || a.indexOf("day-lava-") !== -1 || a.indexOf("night-lava-") !== -1 || a.indexOf("-click.png") !== -1 || a.indexOf("-in.png") !== -1 || a.indexOf("-fog") !== -1 || a.indexOf("-lava") !== -1 || a.indexOf("pebblecompo") !== -1 || a.indexOf("avatar-player") !== -1) {
                return 0;
            } else {
                return 1;
            }
        }
        this.ⲆⵠᐃΔⵠ = function () {
            j.ⲆΔᐃⲆ();
            if (++n == 40) {
                j.stop();
                k();
                return;
            }
            cj.setTimeout(j.ⲆⵠᐃΔⵠ, 33);
        };
        this.ΔⲆⵠΔΔ = function (a) {
            k = a;
            j.ⲆⵠᐃΔⵠ();
        };
        new Date().getTime();
        Object.keys(ⵠⵠ).length;
        console.log(undefined, Cq);
        for (var p in ⵠⵠ) {
            if (o(ⵠⵠ[p]) === 0) {
                0;
            }
        }
        console.log(Oo, undefined);
        function q() {
            if (this.ᐃΔⵠⵠⲆΔΔ !== 0) {
                return this.ᐃΔⵠⵠⲆΔΔ;
            } else {
                this.ᐃΔⵠⵠⲆΔΔ = 2;
                this.src = this.ΔⵠᐃⵠⲆ;
                return 0;
            }
        }
        function l(a) {
            this.ᐃΔⵠⵠⲆΔΔ = 1;
        }
        var g = 0;
        function s() {
            console.log(undefined);
            if (g !== 1) {
                g = 1;
                console.log(undefined);
                if (et !== Lg) {
                    Lg();
                }
                et();
                var a = ΔᐃⲆᐃ.ᐃⵠΔᐃⲆⲆⲆ("server");
                if (a !== null) {
                    ⵠΔᐃᐃ.ⲆᐃᐃᐃΔΔᐃ = 1;
                    ⵠΔᐃᐃ.ΔΔⲆⵠΔ = [{
                        nu: 0,
                        m: 100,
                        i: "server" + a + ".starve.io",
                        p: 443,
                        a: a,
                        ssl: 1
                    }];
                }
                ⵠΔᐃᐃ.ΔΔΔⵠⲆᐃⲆⲆᐃ();
                setTimeout(i, 100);
            }
        }
        function d() {
            let a = function () {
                ⵠΔᐃᐃ.ⵠⵠⵠⵠΔΔⲆ(s);
            };
            if (document.fonts && document.fonts.check) {
                if (document.fonts.check("1em Baloo Paaji")) {
                    setTimeout(a, 100);
                } else {
                    setTimeout(d, 100);
                }
            } else {
                setTimeout(a, 1000);
            }
        }
        function u() {
            this.ᐃⵠᐃⵠᐃⲆᐃ++;
            console.warn(`Image (${this.src}) failed to load, attempt ${this.ᐃⵠᐃⵠᐃⲆᐃ}`, this);
            if (this.ᐃⵠᐃⵠᐃⲆᐃ > 3) {
                console.warn("Failed to load image too many times");
            }
            var a = this.ᐃⵠᐃⵠᐃⲆᐃ;
            var b = this.src;
            var c = o(b) === 0 ? 10000 : 2000;
            setTimeout(function () {
                for (var c in ᐃΔⵠⲆᐃΔΔ) {
                    if (b.indexOf(ᐃΔⵠⲆᐃΔΔ[c]) !== -1) {
                        ⵠⵠ[c] = new Image();
                        ⵠⵠ[c].onload = l;
                        ⵠⵠ[c].onerror = u;
                        ⵠⵠ[c].ᐃⵠᐃⵠᐃⲆᐃ = a;
                        ⵠⵠ[c].src = b;
                        break;
                    }
                }
            }, c);
        }
        function m(a) {
            for (var b in ⵠⵠ) {
                var c = ⵠⵠ[b];
                if (typeof c === "string" && o(c) === a) {
                    ⵠⵠ[b] = new Image();
                    ⵠⵠ[b].ᐃΔⵠⵠⲆΔΔ = 0;
                    ⵠⵠ[b].ᐃⵠᐃⵠᐃⲆᐃ = 0;
                    ⵠⵠ[b].onload = l;
                    ⵠⵠ[b].onerror = u;
                    ⵠⵠ[b].ⵠᐃⵠⲆΔⵠΔ = q;
                    ⵠⵠ[b].ΔⵠᐃⵠⲆ = c;
                }
            }
        }
        m(1);
        m(0);
        Ed(1, "l", 20, "#000");
        d();
        gc();
        this.ⲆΔᐃⲆ = function () {
            this.ΔⵠⲆᐃⵠΔⵠ.translate.x = (uo - 500) / 2;
            this.ΔⵠⲆᐃⵠΔⵠ.translate.y = (vo - 150) / 2;
            var a = 2500 / (40 - n + 1) - 48;
            this.ΔⵠⲆᐃⵠΔⵠ.translate.y -= a;
            this.ΔⵠⲆᐃⵠΔⵠ.ⲆΔᐃⲆ();
        };
        this.ΔⵠⲆᐃⵠΔⵠ.ⲆΔᐃⲆ();
        this.ΔΔⲆᐃ = function () {
            try {
                ac();
            } catch (a) { }
            this.ⲆΔᐃⲆ();
        };
    }(ao, lo, function () {
        uc();
        Yw = new Dw(ao, lo);
        (rf = new Ow(ao, lo)).ⲆⵠΔΔⵠⵠⵠΔⲆ();
        Xw = new Lw(ao, lo);
        lf = new jw();
        Ww = new yw();
        _w.ΔⲆⵠΔΔ(function () {
            _w.ΔⵠⲆᐃⵠΔⵠ.style.display = "none";
            rf.ⲆᐃⲆᐃᐃ();
        });
    });
    function Tf() {
        try {
            cj.Widget.adsRefresh();
        } catch (a) { }
    }
    cj.onbeforeunload = function () {
        if (Yw.ⵠⵠΔⵠⲆ) {
            return "Are you sure you want quit starve.io ;-; ?";
        }
    };
    Yq();
    (function b(a) {
        cj.requestAnimationFrame(b);
        cf = (a - $w) / 1000;
        $w = a;
        cf = cf > 1 ? 1 : cf;
        if (Yw.ⵠⵠΔⵠⲆ) {
            Yw.ΔΔⲆᐃ();
        } else {
            lo.clearRect(0, 0, uo, vo);
            if (_w.ⵠⵠΔⵠⲆ) {
                _w.ΔΔⲆᐃ();
            } else if (rf.ⵠⵠΔⵠⲆ) {
                rf.ΔΔⲆᐃ();
            } else if (Xw.ⵠⵠΔⵠⲆ) {
                Xw.ΔΔⲆᐃ();
            }
        }
    })(0);
    var ff = 0;
    function ax() {
        yf.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
        yf.send();
    }
    var yf = new XMLHttpRequest();
    function wf(b, c, d, e, f) {
        const g = ~(b & 37422) & 37422 | ~(b & 37422) & b;
        const a = ((c + 57377) * 1103515245 + 12345) % 2147483648;
        const i = d ^ 41427;
        const j = ~(e & 9607) & e | ~(e & 9607) & 9607;
        const h = (0 << (f >> 24 & 255)) + (16 << (f & 255)) + (24 << (f >> 8 & 255)) + (8 << (f >> 16 & 255));
        return (50500 + (Iw(g, 0, i, j, h) ^ oo(a, i, j, h, g))) % 65340;
    }
    function Pf(b, c, d, e) {
        const f = b ^ 13496;
        const g = (1 + (c + 19902) * 22695477) % 4294967296;
        const a = (0 << (d & 255)) + (24 << (d >> 16 & 255)) + (16 << (d >> 24 & 255)) + (8 << (d >> 8 & 255));
        const h = gr(f, g, a, (2531011 + (4783 + e) * 214013) % 4294967296);
        (function (b, c, d) {
            const e = (1 + (31015 + b) * 22695477) % 4294967296;
            const f = ~(c & 18944) & (c | 18944);
            const g = (d | 64694) & ~(d & 64694);
            const a = eo(e, f, g, e);
            ef(f, g, e, f);
        })(f, g, a);
        return ~(h & 11394) & h | ~(h & 11394) & 11394;
    }
    function Af(a, b, c) {
        Fi(Kr, a, b, c);
        const d = Nv(Lr[0], Lr[1], Lr[2], Lr[0]);
        const e = Fw(Lr[1], Lr[2], Lr[0], Lr[1]);
        return (0 << ((d ^ e) >> 24 & 255)) + (24 << ((d ^ e) >> 16 & 255)) + (16 << ((d ^ e) & 255)) + (8 << ((d ^ e) >> 8 & 255));
    }
    function kf(a, b) {
        const c = (0 << (a & 255)) + (24 << (a >> 24 & 255)) + (8 << (a >> 16 & 255)) + (16 << (a >> 8 & 255));
        const d = ~(b & 5482) & 5482 | ~(b & 5482) & b;
        const e = Rs(c, d);
        gt(c, d, c, d, c, d);
        return e ^ 33261;
    }
    yf.onreadystatechange = function () {
        if (this.readyState === 4) {
            this.status;
        }
    };
    var xf = "https://token.starve.io/";
    var Jf = "https://token2.starve.io/";
    var Mf = 0;
    var Bf = 1;
    var Df = 4;
    var Ef = undefined;
    var bx = xh;
    var cx = Hq;
    var dx = 0;
    cj.ⲆᐃΔΔⲆⲆⲆ = function () {
        dx = 1;
    };
    var ex = {
        ⵠⵠᐃΔⵠⲆⵠΔⵠⲆⵠ: "ACCESS_TOKEN"
    };
    var Ff = document.createElement("script");
    Ff.type = "text/javascript";
    Ff.async = true;
    Ff.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
    Ff.addEventListener("load", function (a) {
        cj.XPayStationWidget.init(ex);
        cj.XPayStationWidget.on("status-done", qf);
    }, Oh);
    document.getElementsByTagName("head")[0].appendChild(Ff);
    cj.fbAsyncInit = function () {
        Hf();
        console.log(undefined);
    };
    (function (a, b, c) {
        var d;
        var e = a.getElementsByTagName(b)[0];
        if (!a.getElementById(c)) {
            (d = a.createElement(b)).id = c;
            d.src = "https://connect.facebook.net/en_US/sdk.js";
            e.parentNode.insertBefore(d, e);
        }
    })(document, "script", "facebook-jssdk");
    var Rf = undefined;
    var fx = undefined;
    function gx() {
        cj.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then(a => {
            (Rf = a).isSignedIn.listen(Lf);
            Rf.currentUser.listen(Wf);
            if (Rf.isSignedIn.get()) {
                Rf.signIn();
            }
            Nf();
        });
    }
    function Lf(a) { }
    function Wf(a) {
        if (bx === Aj && es !== fx && (bx = fx.getAuthResponse().id_token, Fh !== bx)) {
            Ef = Mf;
            cx = fx.getBasicProfile().getId();
            cj.ⲆᐃΔΔⲆⲆⲆ();
            return;
        }
        if (a !== undefined && a.isSignedIn() === Wa) {
            cx = (fx = a).id;
            cx = fx.getBasicProfile().getId();
            bx = fx.getAuthResponse().id_token;
            Ef = Mf;
            cj.ⲆᐃΔΔⲆⲆⲆ();
        }
    }
    function Nf() {
        if (Rf) {
            fx = Rf.currentUser.get();
        }
    }
    function Of() {
        if (rf.ΔⵠⲆⲆΔ >= 300 || rf.ΔᐃΔΔΔᐃᐃ <= 0) {
            var a = document.getElementById("account_nickname_input").value.trim();
            document.getElementById("account_nickname_input").value = a;
            if (a.length >= 1 && a.length <= 20) {
                var b = new XMLHttpRequest();
                b.open("GET", xf + "changeNickname?token=" + bx + "&userid=" + cx + "&nickname=" + encodeURIComponent(a));
                b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                b.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                        var a = Number(b.responseText);
                        if (a > 0) {
                            rf.ΔⵠⲆⲆΔ -= a;
                        }
                        rf.ΔᐃΔΔΔᐃᐃ = 1;
                        rf.ᐃⵠⲆΔ(rf.ΔⲆᐃΔⲆ);
                    }
                };
                b.send();
            }
        }
    }
    function qf() {
        var a = new XMLHttpRequest();
        a.open("GET", xf + "claimBread?userid=" + cx);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200 && a.responseText !== "0") {
                var b = Number(a.responseText);
                if (!isNaN(b)) {
                    rf.ΔⵠⲆⲆΔ = b;
                }
            }
        };
        a.send();
    }
    function Hf() {
        if (cj.FB) {
            cj.FB.init({
                version: "v15.0",
                cookie: true,
                xfbml: kg,
                appId: "642017356260407"
            });
        }
        if (cx === undefined) {
            (function () {
                try {
                    if (cj.FB && cj.FB.getUserID()) {
                        cx = cj.FB.getUserID();
                        if (bx === undefined) {
                            cj.FB.getLoginStatus(function () {
                                Ef = Bf;
                                bx = cj.FB.getAuthResponse().accessToken;
                                cj.ⲆᐃΔΔⲆⲆⲆ(cx);
                            });
                        }
                    }
                } catch (a) { }
                try {
                    cx = fx.getBasicProfile().getId();
                } catch (a) { }
            })();
        }
    }
    function Uf(a, b) {
        if (rf.ΔΔⵠΔΔ <= 0) {
            if (rf.ΔⵠⲆⲆΔ < b) {
                rf.ᐃⵠⲆΔ(rf.ᐃᐃΔⵠⵠ);
            } else {
                rf.ΔΔⵠΔΔ = 2;
                rf.ⲆⵠᐃⲆᐃΔⵠ = 0;
                rf.ᐃΔⲆΔᐃⲆΔ = 100;
                var c = new XMLHttpRequest();
                c.open("GET", xf + "buySpin?token=" + bx + "&userid=" + cx + "&spin=" + a);
                c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                c.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        if (c.responseText !== "0") {
                            var a = JSON.parse(c.responseText);
                            rf.ⵠⲆⲆᐃⵠᐃᐃⲆᐃ(a.rand * Math.PI * 2, a.type, a.id);
                            rf.ΔⵠⲆⲆΔ -= b;
                        } else {
                            rf.ΔΔⵠΔΔ = 0;
                        }
                    }
                };
                c.send();
            }
        }
    }
    function Yf(a, b) {
        if (b > rf.ΔⵠⲆⲆΔ) {
            rf.ᐃⵠⲆΔ(rf.ᐃᐃΔⵠⵠ);
        } else {
            var c = new XMLHttpRequest();
            c.open("GET", xf + "buyKit?token=" + bx + "&userid=" + cx + "&kit=" + a);
            c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            c.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && c.responseText !== "0") {
                    var a = JSON.parse(c.responseText);
                    rf.ΔⵠⲆⲆΔ -= b;
                    rf.ⵠⵠⵠⲆⲆ = Date.now() + Number(a);
                }
            };
            c.send();
        }
    }
    function Kf(a) {
        if (cx) {
            var b = new XMLHttpRequest();
            b.open("GET", xf + "xsolla?userid=" + cx + "&item=" + a);
            b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            b.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && b.responseText !== "0") {
                    ex.access_token = b.responseText;
                    cj.XPayStationWidget.init(ex);
                    cj.XPayStationWidget.open();
                }
            };
            b.send();
        }
    }
    function Vf(a) {
        var b = new XMLHttpRequest();
        b.open("GET", xf + "setRegion?token=" + bx + "&userid=" + cx + "&region=" + a);
        b.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        b.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {
                if (b.responseText !== "0") {
                    rf.ᐃⵠⲆΔ(rf.ⲆΔⵠⵠΔ);
                } else {
                    rf.ᐃⵠⲆΔ(rf.ⵠᐃⵠⲆⲆ);
                }
            }
        };
        b.send();
    }
    function Xf(b, c, d, f) {
        b = b === undefined ? rf.ⲆΔᐃᐃⵠⵠⲆ : b;
        c = Go === c ? rf.ⲆΔᐃⵠⵠⵠΔ : c;
        d = d === undefined ? rf.ᐃΔᐃⲆΔΔⲆ : d;
        f = Fh === f ? rf.ⵠⲆᐃᐃⲆᐃᐃ : f;
        if (rf.ⲆΔᐃᐃⵠⵠⲆ !== b || c !== rf.ⲆΔᐃⵠⵠⵠΔ || rf.ᐃΔᐃⲆΔΔⲆ !== d || f !== rf.ⵠⲆᐃᐃⲆᐃᐃ) {
            rf.ⲆΔᐃᐃⵠⵠⲆ = b;
            rf.ⲆΔᐃⵠⵠⵠΔ = c;
            rf.ᐃΔᐃⲆΔΔⲆ = d;
            rf.ⵠⲆᐃᐃⲆᐃᐃ = f;
            if (f === rf.ΔΔᐃⵠΔΔⵠ) {
                f = "0";
            } else if (f === rf.ⲆⵠΔⵠΔΔᐃ) {
                f = "1";
            } else if (rf.ΔΔⲆΔⲆᐃᐃ === f) {
                f = "2";
            } else if (f === rf.ⵠⲆⵠⲆⲆⲆᐃ) {
                f = "3";
            } else if (rf.ΔⵠᐃⲆⲆⵠᐃ === f) {
                f = "4";
            } else if (rf.ΔⵠΔΔᐃᐃⵠ === f) {
                f = "5";
            }
            if (rf.ⵠⵠⵠΔΔⲆΔ === c) {
                c = "total";
            } else if (c === rf.ΔΔⵠⵠᐃΔⵠ) {
                c = "normal";
            } else if (c === rf.ⵠⵠΔⲆⲆⲆⵠ) {
                c = "zombie";
            } else if (c === rf.ⲆΔⲆⲆᐃⵠᐃ) {
                c = "vampire";
            } else if (rf.ⵠΔⲆⲆⲆΔᐃ === c) {
                c = "forest";
            }
            if (b === rf.ⵠΔⵠⵠᐃⵠᐃ) {
                b = "all";
            }
            if (b === rf.ΔΔᐃΔⵠΔⲆ) {
                b = "week";
            }
            if (rf.ᐃⵠⲆⵠΔⲆⲆ === b) {
                b = "today";
            }
            if (d === rf.ᐃΔⲆᐃⵠⵠᐃ) {
                d = "kill";
            } else if (rf.Δⵠᐃⵠⵠⵠᐃ === d) {
                d = "score";
            } else if (rf.ᐃΔⲆΔⲆⵠⵠ === d) {
                d = "time";
            }
            var g = new XMLHttpRequest();
            g.open("GET", xf + "leaderboard?range=" + b + "&mode=" + c + "&sort=" + d + "&season=" + f);
            g.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            g.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200 && g.responseText !== "0") {
                    for (var a = JSON.parse(g.responseText), b = "", c = 0; c < a.length; c++) {
                        ᐃΔⵠᐃⵠ = a[c];
                        var d = ᐃΔⵠᐃⵠ[1];
                        try {
                            if (d.indexOf("Starver#") === -1) {
                                d = cj.decodeURIComponent(cj.escape(cj.atob(d)));
                            }
                        } catch (a) { }
                        b += "<div class=\"lineLeaderboard\">";
                        b += "<div class=\"rank\">";
                        b += c + 1 + "";
                        b += "</div>";
                        b += "<div class=\"name\">";
                        b += d;
                        b += "</div>";
                        b += "<div class=\"lvl\">";
                        b += rf.ⵠⵠᐃΔⲆᐃⵠ(ᐃΔⵠᐃⵠ[6]) + 1 + "";
                        b += "</div>";
                        b += "<div class=\"kills\">";
                        b += ᐃΔⵠᐃⵠ[5] + "";
                        b += "</div>";
                        b += "<div class=\"time\">";
                        b += ᐃΔⵠᐃⵠ[4] + "";
                        b += "</div>";
                        b += "<div class=\"score\">";
                        b += ᐃΔⵠᐃⵠ[3] + "";
                        b += "</div>";
                        b += "</div>";
                    }
                    document.getElementById("leaderboard").innerHTML = b;
                }
            };
            g.send();
        }
    }
    cj.onload = function () {
        cj.gapi.load("auth2", gx);
    };
})();
